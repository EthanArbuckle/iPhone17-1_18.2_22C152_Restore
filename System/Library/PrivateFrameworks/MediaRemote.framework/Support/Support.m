void sub_1000063DC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t vars8;

  v7 = [*(id *)(a1 + 32) bundleIdentifier];
  v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "objectForKey:");
  v3 = v2;
  if (v2)
  {
    v4 = [v2 copy];
    v5 = *(void *)(*(void *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    [*(id *)(*(void *)(a1 + 40) + 16) removeObjectForKey:v7];
  }
}

uint64_t sub_100006558(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "onQueue_resolveExistingPlayerPath:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

uint64_t sub_1000065A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100014674(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100014ADC(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_100006624()
{
  return swift_unknownObjectWeakLoadStrong();
}

BOOL sub_1000066F4(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  if ([(MRAVOutputDevice *)v2 deviceType] == 1)
  {
    v3 = [(MRAVOutputDevice *)v2 name];
    unsigned int v4 = [v3 isEqualToString:@"System Capture"] ^ 1;
  }
  else
  {
    LOBYTE(v4) = 0;
  }

  return v4;
}

uint64_t sub_100006760(uint64_t a1)
{
  v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_100006E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006F1C(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (const char *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  xpc_object_t xdict = v3;
  if (xdict)
  {
    switch(v5)
    {
      case 0:
        xpc_dictionary_set_int64(xdict, v4, v6);
        break;
      case 1:
        xpc_dictionary_set_uint64(xdict, v4, v6);
        break;
      case 2:
        xpc_dictionary_set_BOOL(xdict, v4, v6 & 1);
        break;
      case 3:
        if (v6) {
          xpc_dictionary_set_string(xdict, v4, (const char *)v6);
        }
        break;
      case 4:
      case 5:
        xpc_dictionary_set_double(xdict, v4, *(double *)&v6);
        break;
      default:
        break;
    }
  }
}

void sub_100007084(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100007104(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = a2;
  id v3 = [v2 origin];

  if (v3) {
    MRAddPlayerPathToXPCMessage();
  }
  else {
    MRAddErrorToXPCMessage();
  }
}

void sub_10000728C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection)
  {
    [*(id *)(a1 + 32) _clientDidOpenConnection:v3];
  }
  else if (v3 == &_xpc_error_connection_invalid)
  {
    string = xpc_dictionary_get_string(&_xpc_error_connection_invalid, _xpc_error_key_description);
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      v8 = string;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "XPC Error: %s", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_10000758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000765C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) activeNowPlayingClient];
  id v3 = [v2 client];
  unsigned int v4 = [v3 isEqual:*(void *)(a1 + 40)];

  if (v4)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) activeNowPlayingClient];
    _objc_release_x1();
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 32) + 16);
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          v11 = objc_msgSend(v10, "client", (void)v12);
          if ([v11 isEqual:*(void *)(a1 + 40)])
          {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v10);

            goto LABEL_15;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_15:
  }
}

void sub_100007824(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v6);

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000079B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000079D0(void *a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = self;
    *(void *)&long long v19 = 0;
    id v9 = a1;
    id v10 = [v8 dataWithJSONObject:v7 options:0 error:&v19];
    id v11 = (id)v19;
    if (v10)
    {
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      goto LABEL_4;
    }
    v17 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      long long v19 = 0uLL;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();
      if (*((void *)&v19 + 1))
      {
        static String.Encoding.utf8.getter();
        uint64_t v12 = String.data(using:allowLossyConversion:)();
        unint64_t v14 = v16;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        if (v14 >> 60 == 15)
        {
          __break(1u);
          goto LABEL_10;
        }
LABEL_4:
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        type metadata accessor for RouteRecommendationContext();
        sub_10031C7E0((unint64_t *)&unk_10047DB00, (void (*)(void))type metadata accessor for RouteRecommendationContext);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
LABEL_10:
        sub_10018FE9C(v12, v14);
        swift_release();
        return v19;
      }
    }
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      long long v19 = xmmword_1003C8D50;
      static Data._conditionallyBridgeFromObjectiveC(_:result:)();
      unint64_t v14 = *((void *)&v19 + 1);
      if (*((void *)&v19 + 1) >> 60 == 15) {
        return 0;
      }
      uint64_t v12 = v19;
      goto LABEL_4;
    }
  }
  return result;
}

void sub_100007E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000082C8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v13)
  {
    uint64_t v6 = [v13 configuration];
    id v7 = [v6 mode];
    id v8 = *(id *)(a1 + 40);

    if (v7 != v8)
    {
      id v10 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      id v11 = [v13 configuration];
      uint64_t v12 = [v11 serviceToken];
      [v10 runSession:v13 withMode:v9 andServiceToken:v12];
    }
  }
}

void sub_100008A08(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 mediaApplicationsInFocus:*(void *)(a1 + 40)];
  }
}

id sub_100008ACC(_OWORD *a1)
{
  long long v2 = a1[1];
  *(_OWORD *)v10.val = *a1;
  *(_OWORD *)&v10.val[4] = v2;
  pid_t v3 = audit_token_to_pid(&v10);
  if (v3 == getpid())
  {
    id v4 = +[NSBundle mainBundle];
    id v5 = [v4 bundleIdentifier];
  }
  else
  {
    long long v6 = a1[1];
    *(_OWORD *)v10.val = *a1;
    *(_OWORD *)&v10.val[4] = v6;
    MSVBundleIDForAuditToken();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      uint64_t v7 = xpc_copy_code_signing_identity_for_token();
      if (v7)
      {
        id v8 = (void *)v7;
        id v5 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
        free(v8);
      }
      else
      {
        id v5 = 0;
      }
    }
  }

  return v5;
}

void sub_100008CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000098A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_100009A08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100013A80(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100009A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA0);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = v7(v8);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100013660(a1, a2), (v11 & 1) != 0))
  {
    unint64_t v12 = v10;
    uint64_t v13 = *(void *)(v9 + 56);
    uint64_t v14 = type metadata accessor for IRMBBundle();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(a3, v13 + *(void *)(v15 + 72) * v12, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, v14);
  }
  else
  {
    uint64_t v16 = type metadata accessor for IRMBBundle();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100009C04()
{
  v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock) + 16);
  os_unfair_lock_lock(v1);
  sub_100013E50(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unint64_t sub_100009C80(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (unint64_t)[v1 entitlements];
  uint64_t v3 = [v1 bundleIdentifier];
  if (MRBundlePermittedForGroupSessions())
  {
    unsigned int v4 = 1;
  }
  else
  {
    id v5 = [v1 bundleIdentifier];
    unsigned int v4 = [v5 isEqualToString:@"com.apple.MusicUIService"];
  }
  return (v2 >> 12) & 1 | v4;
}

void sub_100009E78(uint64_t a1)
{
  id v9 = [*(id *)(*(void *)(a1 + 32) + 128) mutableCopy];
  unint64_t v2 = +[NSNumber numberWithInt:getpid()];
  uint64_t v3 = [v9 objectForKey:v2];

  if (v3)
  {
    unsigned int v4 = +[NSNumber numberWithInt:getpid()];
    [v9 removeObjectForKey:v4];
  }
  id v5 = [v9 allValues];
  id v6 = [v5 mutableCopy];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v3) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) insertObject:v3 atIndex:0];
  }
}

uint64_t sub_10000A0A0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14 - 8);
  uint64_t v6 = __chkstk_darwin(v14);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(void *)((char *)v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_queue);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x70))(v6);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  aBlock[4] = sub_100015FA8;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006760;
  aBlock[3] = &unk_1004264D0;
  char v11 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_100015C48();
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v14);
  return swift_release();
}

uint64_t sub_10000A6B0()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore) recommendedRoutes];
  sub_100013A80(&qword_10047BF30);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_45;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v5 = *(void **)(v2 + 8 * i + 32);
      swift_unknownObjectRetain();
    }
    if ([v5 isLockScreenControl])
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = v31;
LABEL_15:
  swift_bridgeObjectRetain();
  if ((v6 & 0x8000000000000000) != 0 || (uint64_t v7 = (void *)v6, (v6 & 0x4000000000000000) != 0))
  {
    uint64_t v7 = sub_100264AE4(v6);
    swift_release();
  }
  unint64_t v31 = (unint64_t)v7;
  sub_1000065A8((uint64_t *)&v31);
  swift_release();
  uint64_t v8 = v31;
  if ((v31 & 0x8000000000000000) == 0 && (v31 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(v31 + 16);
    if (v9) {
      goto LABEL_20;
    }
LABEL_41:
    swift_release();
    char v11 = _swiftEmptyArrayStorage;
    uint64_t v20 = _swiftEmptyArrayStorage[2];
    if (v20)
    {
LABEL_29:
      v21 = v11 + 5;
      v22 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v27 = *(v21 - 1);
        uint64_t v26 = *v21;
        uint64_t v28 = HIBYTE(*v21) & 0xF;
        if ((*v21 & 0x2000000000000000) == 0) {
          uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
        }
        if (v28)
        {
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v31 = (unint64_t)v22;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100014688(0, v22[2] + 1, 1);
            v22 = (void *)v31;
          }
          unint64_t v24 = v22[2];
          unint64_t v23 = v22[3];
          if (v24 >= v23 >> 1)
          {
            sub_100014688(v23 > 1, v24 + 1, 1);
            v22 = (void *)v31;
          }
          v22[2] = v24 + 1;
          v25 = &v22[2 * v24];
          v25[4] = v27;
          v25[5] = v26;
        }
        v21 += 2;
        --v20;
      }
      while (v20);
      goto LABEL_43;
    }
LABEL_42:
    v22 = _swiftEmptyArrayStorage;
LABEL_43:
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v9) {
    goto LABEL_41;
  }
LABEL_20:
  unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
  sub_100014688(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    char v11 = (void *)v31;
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
      {
        unint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v12 = *(void **)(v8 + 8 * v10 + 32);
        swift_unknownObjectRetain();
      }
      id v13 = objc_msgSend(objc_msgSend(v12, "route"), "routeIdentifier");
      swift_unknownObjectRelease();
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
      swift_unknownObjectRelease();

      unint64_t v31 = (unint64_t)v11;
      unint64_t v18 = v11[2];
      unint64_t v17 = v11[3];
      if (v18 >= v17 >> 1)
      {
        sub_100014688(v17 > 1, v18 + 1, 1);
        char v11 = (void *)v31;
      }
      ++v10;
      v11[2] = v18 + 1;
      long long v19 = &v11[2 * v18];
      v19[4] = v14;
      v19[5] = v16;
    }
    while (v9 != v10);
    swift_release();
    uint64_t v20 = v11[2];
    if (v20) {
      goto LABEL_29;
    }
    goto LABEL_42;
  }
LABEL_45:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

NSString *__cdecl sub_10000AEBC(id a1, NSString *a2, MRDBundleMediaRecommendationEligibility *a3)
{
  unsigned int v4 = a2;
  if ([(MRDBundleMediaRecommendationEligibility *)a3 isEligible]) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_10000B0A0(uint64_t a1)
{
  sub_1000154D0();
  sub_100015CF4(&qword_10047B5C0, 255, (void (*)(uint64_t))sub_1000154D0);
  int64_t v2 = 0;
  v13[1] = (id)Set.init(minimumCapacity:)();
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_100274B94(v13, *(id *)(*(void *)(a1 + 56) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10000B340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100009A08(a1, &qword_100478720);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10000B4EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10000DDD8(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10000B584()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10000B62C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDisplayMonitorLayoutDidChangeNotification" object:*(void *)(a1 + 32)];
}

uint64_t sub_10000B820(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 208) = a1;
  *(void *)(v3 + 216) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1002740C0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100012968;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10000B93C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047B5B0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t type metadata accessor for MRDBundleMediaRecommendationEligibility()
{
  return self;
}

void sub_10000BC70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100275C6C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10000B93C(v15, a4 & 1);
  unint64_t v20 = sub_100013660(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t sub_10000BDE0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  uint64_t v6 = a2;
  xpc_dictionary_get_remote_connection(v5);
  uint64_t v7 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    reply = xpc_dictionary_create_reply(v5);
    if (reply)
    {
      if (v6) {
        v6[2](v6, reply);
      }
      xpc_connection_send_message(v7, reply);
      uint64_t v9 = 1;
    }
    else
    {
      if (a3)
      {
        NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
        CFStringRef v15 = @"A reply object could not be created.";
        uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
        *a3 = +[NSError errorWithDomain:@"MRDMediaRemoteDaemonErrorDomain" code:1 userInfo:v10];
      }
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (!a3)
    {
      uint64_t v9 = 0;
      goto LABEL_12;
    }
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    CFStringRef v13 = @"A reply connection could not be obtained.";
    reply = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    +[NSError errorWithDomain:@"MRDMediaRemoteDaemonErrorDomain" code:1 userInfo:reply];
    uint64_t v9 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_12:
  return v9;
}

id sub_10000C188(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;
  uint64_t v2 = +[NSArray arrayWithArray:*(void *)(*(void *)(a1 + 32) + 112)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 112);

  return [v5 removeAllObjects];
}

uint64_t sub_10000C2A0(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  sub_100013A80(&qword_10047B4F0);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for IRMBBundle();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_10000D8BC, 0, 0);
}

void sub_10000C3C0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleXPCMessage:v3];
}

void sub_10000C624(uint64_t a1)
{
  id v4 = *(id *)(*(void *)(a1 + 32) + 24);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = v2;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), v2);
  if (([v4 isEqualToSet:v3] & 1) == 0) {
    [*(id *)(a1 + 32) notifyDelegate];
  }
}

uint64_t sub_10000C6EC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10000C72C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v3[4] = v5;
  a3;
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10000DC18;
  return sub_10000E5E0(v5);
}

uint64_t sub_10000C800(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100013A80(&qword_100478690);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  CFStringRef v13 = v10 + 32;
  NSErrorUserInfoKey v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10000D09C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 120) count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

void sub_10000D15C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D170()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10000D3CC()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = (void *)v0[9];
  static os_log_type_t.default.getter();
  uint64_t v3 = sub_100015484();
  v0[21] = v3;
  uint64_t v4 = (void *)*v3;
  v0[22] = sub_100013A80(&qword_10047AE40);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003C58B0;
  uint64_t v6 = *(void *)(v2 + 16);
  v0[23] = v6;
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 64) = &protocol witness table for Int;
  *(void *)(v5 + 32) = v6;
  id v7 = v4;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x70))();
  sub_10000B0A0(v8);
  uint64_t v10 = v9;
  v0[24] = v9;
  int64_t v11 = (void *)swift_task_alloc();
  v0[25] = v11;
  void *v11 = v0;
  v11[1] = sub_10000B820;
  return static IRMBManager.mergeBundles(_:)(v10);
}

void sub_10000D550(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "msv_compactMap:", &stru_100419BF0);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = +[NSSet setWithArray:v8];
  uint64_t v4 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setMediaBundlesInFocus:v3];

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = objc_loadWeakRetained(v4);
  [v7 setBundlesInFocus:v6];
}

id sub_10000D600(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10032B5E0(a1, v2);
  }

  uint64_t v3 = [*(id *)(a1 + 32) displayMonitor];
  unsigned __int8 v4 = [v3 displayOn];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[ProximityController] Asking to clear nearby devices because screen is off.", v7, 2u);
    }

    [*(id *)(a1 + 32) setHasTriggered:0];
  }
  id result = [*(id *)(a1 + 32) shouldRun];
  if (result) {
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateRemoteControlState");
  }
  return result;
}

uint64_t sub_10000D8BC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  (*(void (**)(void, void))((swift_isaMask & **(void **)(v0 + 64)) + 0xD8))(*(void *)(v0 + 48), *(void *)(v0 + 56));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 56);
    unsigned __int8 v4 = *(void **)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_100009A08(*(void *)(v0 + 80), &qword_10047B4F0);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v4) + 0xD0))(v6, v5);
    *(void *)(v0 + 128) = v7;
    id v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v8;
    void *v8 = v0;
    v8[1] = sub_100274454;
    uint64_t v9 = *(void *)(v0 + 104);
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 56);
    return static IRMBManager.query(_:priorBundle:)(v9, v10, v11, v7);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v12, *(void *)(v0 + 80), v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v14);
    unint64_t v18 = (objc_class *)type metadata accessor for MRDBundleMediaRecommendationEligibility();
    id v19 = objc_allocWithZone(v18);
    id v20 = sub_10000E72C(v13);
    static os_log_type_t.default.getter();
    char v21 = (void *)*sub_100015484();
    sub_100013A80(&qword_10047AE40);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1003C5BA0;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_100015768();
    *(void *)(v22 + 32) = v17;
    *(void *)(v22 + 40) = v16;
    *(void *)(v22 + 96) = v18;
    *(void *)(v22 + 104) = sub_100015CF4(&qword_10047B508, v23, (void (*)(uint64_t))type metadata accessor for MRDBundleMediaRecommendationEligibility);
    *(void *)(v22 + 72) = v20;
    id v24 = v21;
    swift_bridgeObjectRetain();
    id v25 = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v26 = *(uint64_t (**)(id))(v0 + 8);
    return v26(v25);
  }
}

uint64_t sub_10000DC18()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  unsigned __int8 v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    id v8 = (void *)v6;
  }
  else
  {
    type metadata accessor for MRDBundleMediaRecommendationEligibility();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = isa;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v9)[2](v9, isa, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

uint64_t sub_10000DDD8(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000146A8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10000E104()
{
  uint64_t v2 = (void *)(v0 + 232);
  uint64_t v1 = *(void **)(v0 + 232);
  uint64_t v3 = *(void **)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  if (v3)
  {
    unint64_t v6 = v0 + 56;
    id v7 = v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 56) = v1;
    unint64_t v10 = sub_100013660(v5, v4);
    uint64_t v11 = v1[2];
    BOOL v12 = (v9 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
      goto LABEL_42;
    }
    char v14 = v9;
    if (*(void *)(*v2 + 24) >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100275C6C();
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 256);
      uint64_t v15 = *(void *)(v0 + 264);
      sub_10000B93C(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = sub_100013660(v16, v15);
      if ((v14 & 1) != (v18 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v10 = v17;
    }
    uint64_t v1 = *(void **)v6;
    if (v14)
    {
      unint64_t v6 = v1[7];
      uint64_t v32 = 8 * v10;

      *(void *)(v6 + v32) = v7;
    }
    else
    {
      uint64_t v34 = *(void *)(v0 + 256);
      uint64_t v33 = *(void *)(v0 + 264);
      v1[(v10 >> 6) + 8] |= 1 << v10;
      v35 = (void *)(v1[6] + 16 * v10);
      void *v35 = v34;
      v35[1] = v33;
      *(void *)(v1[7] + 8 * v10) = v7;
      uint64_t v36 = v1[2];
      BOOL v37 = __OFADD__(v36, 1);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_43;
      }
      v1[2] = v38;
      swift_bridgeObjectRetain();
    }
    while (1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      int64_t v24 = *(void *)(v0 + 240);
      unint64_t v25 = *(void *)(v0 + 248);
      *(void *)(v0 + 232) = v1;
      if (v25) {
        goto LABEL_24;
      }
LABEL_14:
      int64_t v26 = v24 + 1;
      if (!__OFADD__(v24, 1)) {
        break;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      sub_100275C6C();
      uint64_t v2 = v1;
LABEL_10:
      uint64_t v1 = (void *)*v2;
      swift_bridgeObjectRelease();
      id v7 = *(id *)(v1[7] + 8 * v6);
      sub_1001F1A4C(v6, (uint64_t)v1);
    }
    int64_t v27 = (unint64_t)((1 << *(unsigned char *)(v0 + 296)) + 63) >> 6;
    uint64_t result = *(void *)(v0 + 224);
    if (v26 >= v27) {
      goto LABEL_38;
    }
    uint64_t v28 = result + 56;
    unint64_t v29 = *(void *)(result + 56 + 8 * v26);
    ++v24;
    if (v29)
    {
LABEL_17:
      uint64_t v30 = (v29 - 1) & v29;
      unint64_t v31 = __clz(__rbit64(v29)) + (v24 << 6);
      goto LABEL_25;
    }
    int64_t v24 = v26 + 1;
    if (v26 + 1 >= v27) {
      goto LABEL_38;
    }
    unint64_t v29 = *(void *)(v28 + 8 * v24);
    if (v29) {
      goto LABEL_17;
    }
    int64_t v24 = v26 + 2;
    if (v26 + 2 >= v27) {
      goto LABEL_38;
    }
    unint64_t v29 = *(void *)(v28 + 8 * v24);
    if (v29) {
      goto LABEL_17;
    }
    int64_t v44 = v26 + 3;
    if (v44 >= v27)
    {
LABEL_38:
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v45 = *(uint64_t (**)(uint64_t))(v0 + 8);
      uint64_t v46 = *(void *)(v0 + 232);
      return v45(v46);
    }
    else
    {
      unint64_t v29 = *(void *)(v28 + 8 * v44);
      if (v29)
      {
        int64_t v24 = v44;
        goto LABEL_17;
      }
      while (1)
      {
        int64_t v24 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          break;
        }
        if (v24 >= v27) {
          goto LABEL_38;
        }
        unint64_t v29 = *(void *)(v28 + 8 * v24);
        ++v44;
        if (v29) {
          goto LABEL_17;
        }
      }
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_100013660(v5, v4);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      uint64_t v1 = (void *)(v0 + 48);
      uint64_t v22 = *v2;
      char v23 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 48) = v22;
      if ((v23 & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    int64_t v24 = *(void *)(v0 + 240);
    unint64_t v25 = *(void *)(v0 + 248);
    if (!v25) {
      goto LABEL_14;
    }
LABEL_24:
    uint64_t v30 = (v25 - 1) & v25;
    unint64_t v31 = __clz(__rbit64(v25)) | (v24 << 6);
    uint64_t result = *(void *)(v0 + 224);
LABEL_25:
    *(void *)(v0 + 240) = v24;
    *(void *)(v0 + 248) = v30;
    v39 = *(void **)(v0 + 72);
    v40 = (uint64_t *)(*(void *)(result + 48) + 16 * v31);
    uint64_t v41 = *v40;
    *(void *)(v0 + 256) = *v40;
    uint64_t v42 = v40[1];
    *(void *)(v0 + 264) = v42;
    v47 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)((swift_isaMask & *v39) + 0xC8)
                                                   + **(int **)((swift_isaMask & *v39) + 0xC8));
    swift_bridgeObjectRetain();
    v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v43;
    void *v43 = v0;
    v43[1] = sub_100015E5C;
    return v47(v41, v42);
  }
  return result;
}

uint64_t sub_10000E5E0(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  sub_100013A80(&qword_10047B4F0);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for IRMBBundle();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_10000D3CC, 0, 0);
}

id sub_10000E72C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = IRMBBundle.bundleIdentifier.getter();
  unint64_t v6 = (uint64_t *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier];
  *unint64_t v6 = v5;
  v6[1] = v7;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion] = IRMBBundle.isEligibleForOneTapSuggestion.getter() & 1;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute] = IRMBBundle.isEligibleForAutoRoute.getter() & 1;
  v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction] = IRMBBundle.isEligibleForCallToAction.getter() & 1;
  *(void *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType] = IRMBBundle.mediaType.getter();
  uint64_t v8 = type metadata accessor for IRMBBundle();
  uint64_t v15 = v8;
  sub_100013A80(&qword_10047B4C0);
  uint64_t v9 = String.init<A>(describing:)();
  unint64_t v10 = (uint64_t *)&v4[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source];
  uint64_t *v10 = v9;
  v10[1] = v11;

  v14.receiver = v4;
  v14.super_class = (Class)type metadata accessor for MRDBundleMediaRecommendationEligibility();
  id v12 = objc_msgSendSuper2(&v14, "init");
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v12;
}

uint64_t sub_10000E854()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14[0] - 8);
  __chkstk_darwin(v14[0]);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)&v0[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_queue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_100015D78;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006760;
  aBlock[3] = &unk_10042A038;
  unint64_t v10 = _Block_copy(aBlock);
  id v11 = v8;
  id v12 = v0;
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_100015C00((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_100015600((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, void))(v5 + 8))(v7, v14[0]);
  return swift_release();
}

void sub_10000EB08()
{
  uint64_t v1 = v0;
  ObjectType = (void **)swift_getObjectType();
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v94 = *(void *)(v2 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v92 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for DispatchQoS();
  uint64_t v91 = *(void *)(v93 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v90 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v86 = *(void *)(v5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v7 = (uint8_t **)((char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  id v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v87 = (char *)&v78 - v12;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint8_t **)((char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_queue;
  char v18 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_queue];
  *uint64_t v16 = v18;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  char v21 = *(void (**)(void *, uint64_t))(v14 + 8);
  id v20 = (id)(v14 + 8);
  v21(v16, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  id v22 = [self currentSettings];
  if (!v22)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  char v23 = v22;
  unsigned int v24 = [v22 groupSessionNearbyBanner];

  if (v24)
  {
    unint64_t v25 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_discoveredSessionContext];
    if (v25)
    {
      uint64_t v16 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_discoveredSessionContext
                          + 8];
      id v26 = v25;
      int64_t v27 = v16;
      uint64_t v85 = v2;
      id v28 = v27;
      swift_retain();
      id v29 = v28;
      sub_100325888(v25, v16);
      if (v16)
      {
        if (v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_suppressBanners] == 1)
        {

          return;
        }
        v82 = (void **)OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_suppressBanners;
        id v83 = v29;
        id v30 = [self sharedMonitor];
        uint64_t v31 = MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
        if (!v31) {
          goto LABEL_37;
        }
        uint64_t v32 = (void *)v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v34;

        id v36 = [v30 presentedBundleIdentifiers];
        uint64_t v37 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
        id v84 = v30;
        uint64_t v38 = v37;

        char v39 = sub_10018835C(v33, v35, v38);
        swift_bridgeObjectRelease();
        id v40 = v84;
        swift_bridgeObjectRelease();
        if (![v40 displayOn]
          || ([v40 lockScreenForegrounded] & 1) != 0
          || ([v40 controlCenterForegrounded] & 1) != 0)
        {

          if (v39) {
            return;
          }
          goto LABEL_13;
        }
        id v20 = v83;
        if ((v39 & 1) == 0)
        {

LABEL_13:
          v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_shouldPresentBannerWhenAppropriate] = 1;
          return;
        }
        if (v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_shouldPresentBannerWhenAppropriate] != 1)
        {

LABEL_30:
          return;
        }
        v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_shouldPresentBannerWhenAppropriate] = 0;
        if (qword_100485DC0 == -1)
        {
LABEL_18:
          uint64_t v41 = type metadata accessor for Logger();
          sub_10018A9A8(v41, (uint64_t)qword_100485DC8);
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          int v44 = v43;
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v45 = swift_slowAlloc();
            int v79 = v44;
            uint64_t v46 = (uint8_t *)v45;
            v80 = (void **)swift_slowAlloc();
            aBlock = v80;
            v81 = v42;
            v78 = v46;
            *(_DWORD *)uint64_t v46 = 136315138;
            uint64_t v47 = _typeName(_:qualified:)();
            v96 = (void *)sub_10018A9E0(v47, v48, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v20 = v83;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v79, "[%s] Begin banner suppression.", v78, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          *((unsigned char *)v82 + (void)v1) = 1;
          id v49 = v20;
          v50 = Logger.logObject.getter();
          os_log_type_t v51 = static os_log_type_t.default.getter();
          int v52 = v51;
          if (os_log_type_enabled(v50, v51))
          {
            uint64_t v53 = swift_slowAlloc();
            v81 = v50;
            uint64_t v54 = v53;
            v80 = (void **)swift_slowAlloc();
            v82 = (void **)swift_slowAlloc();
            aBlock = v82;
            *(_DWORD *)uint64_t v54 = 136315394;
            id v83 = v49;
            uint64_t v55 = _typeName(_:qualified:)();
            int v79 = v52;
            v96 = (void *)sub_10018A9E0(v55, v56, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2114;
            v78 = (uint8_t *)(v54 + 14);
            v96 = v83;
            id v57 = v83;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v80 = v16;

            id v49 = v83;
            v58 = v81;
            _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v79, "[%s] Posting banner request: %{public}@", (uint8_t *)v54, 0x16u);
            sub_100013A80((uint64_t *)&unk_10047B850);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          [*(id *)&v1[OBJC_IVAR____TtC12mediaremotedP33_1851BD08EF6F7A41CF08D64ADE37688B35GroupSessionUIManagerImplementation_bannerCenter] postBannerRequest:v49];
          id v59 = *(id *)&v1[v17];
          static DispatchTime.now()();
          id v60 = [self currentSettings];
          [v60 oneTapSuggestionInactiveTimeout];
          double v62 = v61;

          if ((~*(void *)&v62 & 0x7FF0000000000000) != 0)
          {
            if (v62 > -9.22337204e18)
            {
              id v83 = v59;
              if (v62 < 9.22337204e18)
              {
                *uint64_t v7 = (uint64_t)v62;
                uint64_t v63 = v86;
                (*(void (**)(void *, void, uint64_t))(v86 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v5);
                v64 = v87;
                + infix(_:_:)();
                (*(void (**)(void *, uint64_t))(v63 + 8))(v7, v5);
                uint64_t v65 = v89;
                uint64_t v88 = *(void *)(v88 + 8);
                ((void (*)(char *, uint64_t))v88)(v11, v89);
                v66 = (void *)swift_allocObject();
                v66[2] = v1;
                v66[3] = v49;
                v66[4] = ObjectType;
                v101 = sub_10032595C;
                v102 = v66;
                aBlock = _NSConcreteStackBlock;
                uint64_t v98 = 1107296256;
                ObjectType = &v99;
                v99 = sub_100006760;
                v100 = &unk_100429E30;
                v67 = _Block_copy(&aBlock);
                id v68 = v49;
                v69 = v1;
                v70 = v90;
                static DispatchQoS.unspecified.getter();
                v96 = _swiftEmptyArrayStorage;
                sub_100015C00((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                sub_100013A80((uint64_t *)&unk_100479AE0);
                sub_100015600((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
                v71 = v92;
                uint64_t v72 = v85;
                dispatch thunk of SetAlgebra.init<A>(_:)();
                id v73 = v83;
                OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
                _Block_release(v67);

                (*(void (**)(char *, uint64_t))(v94 + 8))(v71, v72);
                (*(void (**)(char *, uint64_t))(v91 + 8))(v70, v93);
                ((void (*)(char *, uint64_t))v88)(v64, v65);
                swift_release();
                v74 = (void *)kMREventGroupSessionNearbyNotificationDisplayed;
                uint64_t v75 = swift_allocObject();
                *(void *)(v75 + 16) = v68;
                v101 = sub_100325BA8;
                v102 = (void *)v75;
                aBlock = _NSConcreteStackBlock;
                uint64_t v98 = 1107296256;
                v99 = sub_10019A7F4;
                v100 = &unk_100429E80;
                v76 = _Block_copy(&aBlock);
                id v77 = v68;
                id v40 = v74;
                swift_release();
                MRAnalyticsSendEvent();

                _Block_release(v76);
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
LABEL_32:
        swift_once();
        goto LABEL_18;
      }
    }
  }
}

void sub_10000F77C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained layoutMonitor:v9 didUpdateDisplayLayout:v8 withContext:v7];
}

void sub_10000FE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010114(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100010500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100010588(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)NSString) initWithFormat:@"com.apple.mediaremote.%@.%@.%@-%d", objc_opt_class(), v3, *(void *)(*(void *)(a1 + 32) + 40), objc_msgSend(*(id *)(a1 + 32), "pid")];

  id v5 = v4;
  id v6 = [v5 UTF8String];

  return v6;
}

void sub_1000107C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001098C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000112B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45)
{
}

void sub_100011D54(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Adding client %{public}@", buf, 0xCu);
  }

  id v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(*(void *)(a1 + 40) + 128);
  id v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v4 pid]);
  [v5 setObject:v4 forKey:v6];

  id v7 = +[MRUserSettings currentSettings];
  id v8 = [v7 expectedClientAuditTokens];
  id v9 = +[NSSet setWithArray:v8];
  id v10 = [v9 mutableCopy];

  id v11 = [*(id *)(a1 + 32) auditToken];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v10 containsObject:v11];

  uint64_t v12 = [*(id *)(a1 + 32) auditToken];
  [v10 removeObject:v12];

  uint64_t v13 = [v10 allObjects];
  uint64_t v14 = +[MRUserSettings currentSettings];
  [v14 setExpectedClientAuditTokens:v13];

  uint64_t v15 = +[NSMutableArray array];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v16 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 128), "allValues", 0);
  id v17 = [v16 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v19) {
          objc_enumerationMutation(v16);
        }
        char v21 = [*(id *)(*((void *)&v23 + 1) + 8 * i) auditToken];
        [v15 addObject:v21];
      }
      id v18 = [v16 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v18);
  }

  id v22 = +[MRUserSettings currentSettings];
  [v22 setConnectedClientAuditTokens:v15];
}

unint64_t *sub_1000120B8(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  id v30 = result;
  uint64_t v31 = v6 - 1;
  uint64_t v8 = *a5;
  unint64_t v7 = a5[1];
  unint64_t v9 = *(void *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain();
    return (unint64_t *)sub_100014844(v30, a2, v31, a3);
  }
  uint64_t v32 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9) {
      goto LABEL_29;
    }
    uint64_t v11 = v8 + 16 * v7;
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = *(void *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    uint64_t v18 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 8 * (v16 >> 6))) == 0) {
      goto LABEL_4;
    }
    uint64_t v19 = *(void *)(a3 + 48);
    id v20 = (void *)(v19 + 16 * v16);
    BOOL v21 = *v20 == v13 && v20[1] == v12;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v15;
      for (unint64_t i = v16 + 1; ; unint64_t i = v26 + 1)
      {
        unint64_t v26 = i & v24;
        if (((*(void *)(v32 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        int64_t v27 = (void *)(v19 + 16 * v26);
        BOOL v28 = *v27 == v13 && v27[1] == v12;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
          unint64_t v17 = v26 >> 6;
          uint64_t v18 = 1 << v26;
          goto LABEL_15;
        }
      }
LABEL_4:
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_15:
    unint64_t v22 = v30[v17];
    v30[v17] = v22 & ~v18;
    if ((v18 & v22) != 0)
    {
      uint64_t v23 = v31 - 1;
      if (__OFSUB__(v31, 1)) {
        goto LABEL_30;
      }
      --v31;
      if (!v23) {
        return (unint64_t *)&_swiftEmptySetSingleton;
      }
    }
LABEL_5:
    uint64_t v8 = *a5;
    unint64_t v7 = a5[1];
    unint64_t v9 = *(void *)(*a5 + 16);
    if (v7 == v9) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000122E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id v30 = a4;
  uint64_t v38 = a2;
  uint64_t v6 = type metadata accessor for IRMBBundle();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v31 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v34 = v7 + 16;
  uint64_t v36 = v7 + 32;
  uint64_t v37 = a1;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v33 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  uint64_t v35 = a3;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v37 + 48) + *(void *)(v7 + 72) * i, v6);
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v24(v10, v12, v6);
    if (IRMBBundle.bundleIdentifier.getter() == v38 && v25 == a3)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_27:
      int64_t v27 = v30;
      v24(v30, v10, v6);
      uint64_t v28 = 0;
LABEL_29:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v27, v28, 1, v6);
      return swift_bridgeObjectRelease();
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v26)
    {
      swift_release();
      goto LABEL_27;
    }
    uint64_t result = (*v33)(v10, v6);
    a3 = v35;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v21 >= v32) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v31 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v32) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v31 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v32) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v31 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v32) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v31 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v32)
    {
LABEL_28:
      swift_release();
      uint64_t v28 = 1;
      int64_t v27 = v30;
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v31 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1)) {
        goto LABEL_31;
      }
      if (j >= v32) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v31 + 8 * j);
    }
LABEL_19:
    unint64_t v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t *sub_100012654(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  uint64_t v26 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    v25[0] = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25[0] + 16 * v5);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      ++v5;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v9 = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v11 = v9 & ~v10;
      if ((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
      {
        uint64_t v12 = *(void *)(v2 + 48);
        uint64_t v13 = (void *)(v12 + 16 * v11);
        BOOL v14 = *v13 == v8 && v13[1] == v7;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
          uint64_t v27 = v5;
LABEL_19:
          char v19 = *(unsigned char *)(v2 + 32);
          unint64_t v20 = (unint64_t)((1 << v19) + 63) >> 6;
          size_t v21 = 8 * v20;
          if ((v19 & 0x3Fu) < 0xE
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v21);
            unint64_t v22 = sub_1000120B8((void *)((char *)v25 - ((v21 + 15) & 0x3FFFFFFFFFFFFFF0)), v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            int64_t v23 = (void *)swift_slowAlloc();
            memcpy(v23, (const void *)(v2 + 56), v21);
            unint64_t v22 = sub_1000120B8((unint64_t *)v23, v20, v2, v11, &v26);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc();
          }
          return v22;
        }
        uint64_t v15 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v15;
          if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            break;
          }
          unint64_t v16 = (void *)(v12 + 16 * v11);
          BOOL v17 = *v16 == v8 && v16[1] == v7;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t v27 = v5;
            uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      if (v5 == v3)
      {
        swift_bridgeObjectRelease();
        return (unint64_t *)v2;
      }
    }
  }
  return (unint64_t *)v2;
}

uint64_t sub_100012968()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[26];
  v132 = v0 + 2;
  uint64_t v120 = v2 + 56;
  v117 = v0 + 26;
  uint64_t v3 = v0[14];
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 56);
  int64_t v118 = (unint64_t)(63 - v5) >> 6;
  uint64_t v7 = (void (**)(uint64_t, void, uint64_t))(v3 + 32);
  v122 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v116 = (void (**)(unint64_t, uint64_t, uint64_t))(v3 + 40);
  uint64_t v121 = v3;
  v123 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  v124 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v126 = v2;
  uint64_t v8 = (void *)swift_bridgeObjectRetain();
  int64_t v9 = 0;
  v136 = v7;
  v119 = v1;
  while (1)
  {
    if (v6)
    {
      uint64_t v127 = (v6 - 1) & v6;
      int64_t v129 = v9;
      unint64_t v14 = __clz(__rbit64(v6)) | (v9 << 6);
    }
    else
    {
      unint64_t v15 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_82;
      }
      if ((uint64_t)v15 >= v118)
      {
LABEL_39:
        uint64_t v50 = v1[26];
        swift_release();
        uint64_t v51 = swift_bridgeObjectRetain();
        uint64_t v52 = sub_10000B4EC(v51);
        swift_bridgeObjectRelease();
        int64_t v53 = *(void *)(v50 + 16);
        if (v53)
        {
          uint64_t v128 = v52;
          uint64_t v54 = v1[26];
          sub_100014688(0, v53, 0);
          uint64_t v8 = (void *)sub_10001551C(v54);
          int64_t v55 = (int64_t)v8;
          int v57 = v56;
          char v59 = v58 & 1;
          while ((v55 & 0x8000000000000000) == 0)
          {
            unint64_t v15 = 1 << *(unsigned char *)(v126 + 32);
            if (v55 >= (uint64_t)v15) {
              break;
            }
            unint64_t v15 = *(void *)(v120 + (((unint64_t)v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55;
            if ((v15 & 1) == 0) {
              goto LABEL_80;
            }
            unint64_t v15 = *(unsigned int *)(v54 + 36);
            if (v15 != v57) {
              goto LABEL_81;
            }
            uint64_t v60 = v1[16];
            uint64_t v61 = v1[17];
            double v62 = v1;
            uint64_t v63 = v1[13];
            (*(void (**)(uint64_t, int64_t, uint64_t))(v121 + 16))(v61, *(void *)(v126 + 48) + *(void *)(v121 + 72) * v55, v63);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32))(v60, v61, v63);
            uint64_t v64 = IRMBBundle.bundleIdentifier.getter();
            uint64_t v133 = v65;
            (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v60, v63);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_100014688(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v67 = _swiftEmptyArrayStorage[2];
            unint64_t v66 = _swiftEmptyArrayStorage[3];
            if (v67 >= v66 >> 1) {
              sub_100014688(v66 > 1, v67 + 1, 1);
            }
            uint64_t v68 = *v117;
            _swiftEmptyArrayStorage[2] = v67 + 1;
            v69 = &_swiftEmptyArrayStorage[2 * v67];
            v69[4] = v64;
            v69[5] = v133;
            uint64_t v8 = (void *)sub_100013AC4(v55, v57, v59 & 1, v68);
            int64_t v55 = (int64_t)v8;
            int v57 = v70;
            char v59 = v71 & 1;
            --v53;
            uint64_t v1 = v62;
            if (!v53)
            {
              sub_100015510((uint64_t)v8, v70, v71 & 1);
              uint64_t v52 = v128;
              goto LABEL_51;
            }
          }
          goto LABEL_79;
        }
LABEL_51:
        uint64_t v72 = v1[23];
        id v73 = sub_100012654((uint64_t)_swiftEmptyArrayStorage, v52);
        v1[28] = v73;
        swift_bridgeObjectRelease();
        unint64_t v74 = sub_100015650((uint64_t)_swiftEmptyArrayStorage, &qword_10047B5B0);
        unint64_t v75 = v74;
        if (v72)
        {
          v131 = v73;
          unint64_t v134 = v74;
          v76 = v1;
          uint64_t v77 = 0;
          v78 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
          do
          {
            uint64_t v80 = v76[26];
            uint64_t v81 = v76[13];
            v82 = (char *)v76[10];
            uint64_t v84 = *(v78 - 1);
            uint64_t v83 = *v78;
            swift_bridgeObjectRetain_n();
            sub_1000122E4(v80, v84, v83, v82);
            if ((*v122)(v82, 1, v81) == 1)
            {
              uint64_t v79 = v76[10];
              swift_bridgeObjectRelease();
              sub_100009A08(v79, &qword_10047B4F0);
            }
            else
            {
              uint64_t v85 = v76[17];
              uint64_t v86 = v76[15];
              uint64_t v87 = v76[13];
              (*v136)(v86, v76[10], v87);
              (*v124)(v85, v86, v87);
              id v88 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
              id v89 = sub_10000E72C(v85);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              sub_10000BC70((uint64_t)v89, v84, v83, isUniquelyReferenced_nonNull_native);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              (*v123)(v86, v87);
            }
            ++v77;
            v78 += 2;
          }
          while (v77 != v76[23]);
          swift_bridgeObjectRelease();
          uint64_t v1 = v76;
          id v73 = v131;
          unint64_t v75 = v134;
        }
        uint64_t v91 = (void **)v1[21];
        swift_bridgeObjectRelease();
        static os_log_type_t.default.getter();
        v92 = *v91;
        uint64_t v93 = swift_allocObject();
        *(_OWORD *)(v93 + 16) = xmmword_1003C58B0;
        unint64_t v94 = v73[2];
        *(void *)(v93 + 56) = &type metadata for Int;
        *(void *)(v93 + 64) = &protocol witness table for Int;
        *(void *)(v93 + 32) = v94;
        id v95 = v92;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        char v96 = *((unsigned char *)v73 + 32);
        *((unsigned char *)v1 + 296) = v96;
        uint64_t v97 = -1;
        uint64_t v98 = -1 << v96;
        unint64_t v99 = v73[7];
        if (-v98 < 64) {
          uint64_t v97 = ~(-1 << -(char)v98);
        }
        v1[29] = v75;
        unint64_t v100 = v97 & v99;
        if (v100)
        {
          uint64_t v101 = 0;
          unint64_t v102 = __clz(__rbit64(v100));
          uint64_t v103 = (v100 - 1) & v100;
          uint64_t v8 = (void *)v1[28];
LABEL_62:
          v1[30] = v101;
          v1[31] = v103;
          v104 = (void *)v1[9];
          v105 = (uint64_t *)(v8[6] + 16 * v102);
          uint64_t v106 = *v105;
          v1[32] = *v105;
          uint64_t v107 = v105[1];
          v1[33] = v107;
          v135 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)((swift_isaMask & *v104) + 0xC8)
                                                          + **(int **)((swift_isaMask & *v104) + 0xC8));
          swift_bridgeObjectRetain();
          v108 = (void *)swift_task_alloc();
          v1[34] = v108;
          void *v108 = v1;
          v108[1] = sub_100015E5C;
          return v135(v106, v107);
        }
        unint64_t v15 = 63 - v98;
        uint64_t v8 = (void *)v1[28];
        if (v15 > 0x7F)
        {
          unint64_t v110 = v8[8];
          if (v110)
          {
            uint64_t v101 = 1;
LABEL_68:
            uint64_t v103 = (v110 - 1) & v110;
            unint64_t v102 = __clz(__rbit64(v110)) + (v101 << 6);
            goto LABEL_62;
          }
          if (v15 >= 0xC0)
          {
            unint64_t v110 = v8[9];
            if (v110)
            {
              uint64_t v101 = 2;
              goto LABEL_68;
            }
            if (v15 >= 0x100)
            {
              unint64_t v110 = v8[10];
              if (v110)
              {
                uint64_t v101 = 3;
                goto LABEL_68;
              }
LABEL_85:
              if (v15 >= 0x140)
              {
                unint64_t v110 = v8[11];
                if (v110)
                {
                  uint64_t v101 = 4;
                  goto LABEL_68;
                }
                uint64_t v111 = 0;
                uint64_t v112 = v15 >> 6;
                if (v112 <= 5) {
                  uint64_t v112 = 5;
                }
                uint64_t v113 = v112 - 5;
                while (v113 != v111)
                {
                  unint64_t v110 = v8[v111++ + 12];
                  if (v110)
                  {
                    uint64_t v101 = v111 + 4;
                    goto LABEL_68;
                  }
                }
              }
            }
          }
        }
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v114 = (uint64_t (*)(uint64_t))v1[1];
        uint64_t v115 = v1[29];
        return v114(v115);
      }
      unint64_t v16 = *(void *)(v120 + 8 * v15);
      int64_t v17 = v9 + 1;
      if (!v16)
      {
        int64_t v17 = v9 + 2;
        if (v9 + 2 >= v118) {
          goto LABEL_39;
        }
        unint64_t v16 = *(void *)(v120 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v9 + 3;
          if (v9 + 3 >= v118) {
            goto LABEL_39;
          }
          unint64_t v16 = *(void *)(v120 + 8 * v17);
          if (!v16)
          {
            unint64_t v15 = v9 + 4;
            if (v9 + 4 >= v118) {
              goto LABEL_39;
            }
            unint64_t v16 = *(void *)(v120 + 8 * v15);
            if (!v16)
            {
              while (1)
              {
                int64_t v17 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_84;
                }
                if (v17 >= v118) {
                  goto LABEL_39;
                }
                unint64_t v16 = *(void *)(v120 + 8 * v17);
                ++v15;
                if (v16) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v17 = v9 + 4;
          }
        }
      }
LABEL_22:
      uint64_t v127 = (v16 - 1) & v16;
      int64_t v129 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    unint64_t v18 = v1[19];
    uint64_t v19 = v1[20];
    uint64_t v20 = v1[12];
    uint64_t v21 = v1[13];
    unint64_t v22 = (void *)v1[9];
    uint64_t v125 = *(void *)(v121 + 72);
    int64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v121 + 16);
    v23(v19, *(void *)(v126 + 48) + v125 * v14, v21);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 32);
    v24(v18, v19, v21);
    uint64_t v25 = IRMBBundle.bundleIdentifier.getter();
    uint64_t v130 = v26;
    v23(v20, v18, v21);
    uint64_t v27 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v121 + 56);
    v27(v20, 0, 1, v21);
    uint64_t v28 = (void (*)(void))(*(uint64_t (**)(void *))((swift_isaMask & *v22) + 0xB0))(v132);
    id v30 = v29;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v20, 1, v21) == 1)
    {
      uint64_t v1 = v119;
      sub_100009A08(v119[12], &qword_10047B4F0);
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_100013660(v25, v130);
      char v33 = v32;
      swift_bridgeObjectRelease();
      if (v33)
      {
        int v34 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v137 = *v30;
        *id v30 = 0x8000000000000000;
        if (!v34) {
          sub_1000137BC();
        }
        uint64_t v35 = v119[13];
        uint64_t v36 = v119[11];
        swift_bridgeObjectRelease();
        v24(v36, *(void *)(v137 + 56) + v31 * v125, v35);
        sub_10027582C(v31, v137);
        *id v30 = v137;
        swift_bridgeObjectRelease();
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = 1;
      }
      uint64_t v11 = v119[11];
      v27(v11, v10, 1, v119[13]);
      swift_bridgeObjectRelease();
      sub_100009A08(v11, &qword_10047B4F0);
      unint64_t v6 = v127;
      int64_t v9 = v129;
      goto LABEL_6;
    }
    uint64_t v1 = v119;
    v24(v119[18], v119[12], v119[13]);
    int v37 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = *v30;
    v138 = (void *)*v30;
    *id v30 = 0x8000000000000000;
    unint64_t v40 = sub_100013660(v25, v130);
    unint64_t v15 = *(void *)(v38 + 16);
    BOOL v41 = (v39 & 1) == 0;
    uint64_t v8 = (void *)(v15 + v41);
    if (__OFADD__(v15, v41))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    char v42 = v39;
    if (*(void *)(v38 + 24) >= (uint64_t)v8)
    {
      if ((v37 & 1) == 0) {
        sub_1000137BC();
      }
      goto LABEL_34;
    }
    sub_100275444((uint64_t)v8, v37);
    unint64_t v43 = sub_100013660(v25, v130);
    if ((v42 & 1) != (v44 & 1)) {
      break;
    }
    unint64_t v40 = v43;
LABEL_34:
    uint64_t v45 = v119[18];
    uint64_t v46 = v119[13];
    if (v42)
    {
      (*v116)(v138[7] + v40 * v125, v45, v46);
    }
    else
    {
      v138[(v40 >> 6) + 8] |= 1 << v40;
      uint64_t v47 = (uint64_t *)(v138[6] + 16 * v40);
      *uint64_t v47 = v25;
      v47[1] = v130;
      uint64_t v8 = (void *)((uint64_t (*)(unint64_t, uint64_t, uint64_t))v24)(v138[7] + v40 * v125, v45, v46);
      uint64_t v48 = v138[2];
      BOOL v49 = __OFADD__(v48, 1);
      unint64_t v15 = v48 + 1;
      if (v49) {
        goto LABEL_83;
      }
      v138[2] = v15;
      swift_bridgeObjectRetain();
    }
    *id v30 = (uint64_t)v138;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v6 = v127;
    int64_t v9 = v129;
LABEL_6:
    uint64_t v12 = v1[19];
    uint64_t v13 = v1[13];
    v28();
    uint64_t v8 = (void *)((uint64_t (*)(uint64_t, uint64_t))*v123)(v12, v13);
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

unint64_t sub_100013660(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000136D8(a1, a2, v4);
}

unint64_t sub_1000136D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void *sub_1000137BC()
{
  uint64_t v35 = type metadata accessor for IRMBBundle();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013A80(&qword_10047B5B8);
  id v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    *uint64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *int64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100013A80(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

int64_t sub_100013AC4(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100013BA8(uint64_t a1, char a2)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 16) + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v2);
    sub_100013C90();
    os_unfair_lock_unlock(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2);
    sub_100013C90();
    os_unfair_lock_unlock(v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100013C90()
{
  return sub_100013CA8();
}

uint64_t sub_100013CA8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100013CD0()
{
  return sub_100013CE8();
}

uint64_t sub_100013CE8()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0 + 16)) + 0x90);
  uint64_t v2 = swift_bridgeObjectRetain();
  return v1(v2);
}

uint64_t sub_100013D54(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MRDMediaBundleManager__mediaBundles);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100013DA8(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock);
  a1[1] = v1;
  a1[2] = v3;
  unint64_t v4 = v3 + 4;
  os_unfair_lock_lock(v3 + 4);
  sub_100013E50(&v6);
  a1[3] = 0;
  os_unfair_lock_unlock(v4);
  *a1 = v6;
  return sub_100013BA8;
}

void *sub_100013E50@<X0>(void *a1@<X8>)
{
  return sub_100013E68(a1);
}

void *sub_100013E68@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100013EAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100013EC4(a1);
}

uint64_t sub_100013EC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0x88))();
  *a1 = result;
  return result;
}

uint64_t sub_100013F30()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100013F78()
{
  return sub_100013F30();
}

BOOL sub_100013F88(id a1, MRDMediaRemoteClient *a2)
{
  return [(MRDMediaRemoteClient *)a2 isInCriticalSection];
}

uint64_t sub_100013F90()
{
  return swift_release();
}

uint64_t sub_100013F98()
{
  return swift_release();
}

uint64_t sub_100013FA0()
{
  return swift_release();
}

uint64_t sub_100013FA8()
{
  return swift_release();
}

uint64_t sub_100013FB0()
{
  return swift_release();
}

uint64_t sub_100013FB8()
{
  return swift_release();
}

uint64_t sub_100013FC0()
{
  return swift_release();
}

uint64_t sub_100013FC8()
{
  return swift_release();
}

uint64_t sub_100013FD0()
{
  return swift_release();
}

uint64_t sub_100013FD8()
{
  return swift_release();
}

uint64_t sub_100013FE0()
{
  return swift_release();
}

uint64_t sub_100013FE8()
{
  return swift_release();
}

uint64_t sub_100013FF0()
{
  return swift_release();
}

uint64_t sub_100013FF8()
{
  return swift_release();
}

uint64_t sub_100014000()
{
  return swift_release();
}

uint64_t sub_100014008()
{
  return swift_release();
}

uint64_t sub_100014010()
{
  return swift_release();
}

uint64_t sub_100014018()
{
  return swift_release();
}

uint64_t sub_100014020(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014040(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014050(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014060(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014070(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014080(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000140F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014110(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100014130(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void sub_100014140(uint64_t a1)
{
}

void sub_100014160(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_initializeSessionWithCompletion:", *(void *)(a1 + 32));
}

id sub_1000141B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isACriticalSectionActive];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_1000141E4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasPresentedForCurrentPersonalDevices]
    && ([*(id *)(*(void *)(a1 + 32) + 8) lockScreenVisible] & 1) == 0)
  {
    [*(id *)(a1 + 32) setShouldFinishPresentationForCurrentPersonalDevices:1];
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_reevaluateShouldShowLockScreenForReason:", @"LayoutChange");
}

BOOL sub_100014248(id a1, NSString *a2)
{
  return +[MRDMediaAppInFocusMonitor isRemoteControllableApp:a2];
}

void sub_100014258(uint64_t a1)
{
}

unsigned __int8 *sub_10001426C(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 4);
  int v2 = *(unsigned __int8 *)(v1 + 8);
  int v3 = result[40];
  *(unsigned char *)(v1 + 8) = v3;
  if (v2 != v3) {
    return (unsigned __int8 *)[*((id *)result + 4) notifyDelegate];
  }
  return result;
}

void sub_100014290(uint64_t a1)
{
}

void sub_1000142A4(uint64_t a1)
{
}

uint64_t sub_1000142B0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

uint64_t sub_1000142C4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 48) copy];

  return _objc_release_x1();
}

void sub_100014310(uint64_t a1)
{
}

uint64_t sub_100014324(void *a1, void *a2)
{
  return sub_10000BDE0(a1, a2, 0);
}

uint64_t sub_10001432C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_100006F1C;
  v6[3] = &unk_10041F3B8;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  return sub_10000BDE0(a1, v6, a5);
}

uint64_t sub_1000143E8(uint64_t a1)
{
  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100013F84;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100478780 + dword_100478780);
  return v6(a1, v4);
}

uint64_t sub_1000144A0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = sub_1000143E4;
  return v6(a1);
}

uint64_t sub_10001457C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100014674(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100014688(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10000C800(a1, a2, a3, *v3);
  os_unfair_lock_s *v3 = (char *)result;
  return result;
}

Swift::Int sub_1000146A8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10018B038();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10018B5B8();
      goto LABEL_22;
    }
    sub_10018B76C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100014844(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    Swift::Int v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100013A80(&qword_100478260);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  Swift::Int v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100014ADC(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_175;
    }
    if (v3) {
      return sub_100264BDC(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_174;
  }
  uint64_t v119 = result;
  uint64_t v126 = v1;
  v116 = v2;
  if (v3 <= 1)
  {
    Swift::Int v8 = (char *)_swiftEmptyArrayStorage;
    uint64_t v127 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v125 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_140:
      if (v12 >= 2)
      {
        uint64_t v109 = *v116;
        do
        {
          unint64_t v110 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_169;
          }
          if (!v109) {
            goto LABEL_182;
          }
          uint64_t v111 = *(void *)&v8[16 * v110 + 32];
          uint64_t v112 = *(void *)&v8[16 * v12 + 24];
          uint64_t result = sub_100264DB4((void **)(v109 + 8 * v111), (void **)(v109 + 8 * *(void *)&v8[16 * v12 + 16]), (void **)(v109 + 8 * v112), v125);
          if (v126) {
            break;
          }
          if (v112 < v111) {
            goto LABEL_170;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1001E3E5C((uint64_t)v8);
            Swift::Int v8 = (char *)result;
          }
          if (v110 >= *((void *)v8 + 2)) {
            goto LABEL_171;
          }
          uint64_t v113 = &v8[16 * v110 + 32];
          *(void *)uint64_t v113 = v111;
          *((void *)v113 + 1) = v112;
          unint64_t v114 = *((void *)v8 + 2);
          if (v12 > v114) {
            goto LABEL_172;
          }
          uint64_t result = (uint64_t)memmove(&v8[16 * v12 + 16], &v8[16 * v12 + 32], 16 * (v114 - v12));
          *((void *)v8 + 2) = v114 - 1;
          unint64_t v12 = v114 - 1;
        }
        while (v114 > 2);
      }
LABEL_151:
      swift_bridgeObjectRelease();
      *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v5 >> 1;
    sub_100013A80(&qword_10047BF30);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    uint64_t v2 = v6;
    uint64_t v125 = (void **)((result & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v127 = result;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v117 = *v2 - 8;
  uint64_t v118 = *v2 + 16;
  Swift::Int v8 = (char *)_swiftEmptyArrayStorage;
  uint64_t v11 = &selRef_anyObject;
  Swift::Int v124 = v3;
  while (2)
  {
    Swift::Int v13 = v9 + 1;
    Swift::Int v122 = v9;
    if (v9 + 1 >= v3) {
      goto LABEL_58;
    }
    uint64_t v14 = *(void **)(v10 + 8 * v13);
    unint64_t v15 = *(void **)(v10 + 8 * v9);
    uint64_t v16 = v11[158];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    if ([v14 v16] == (id)1) {
      uint64_t v17 = -1;
    }
    else {
      uint64_t v17 = (uint64_t)[v14 v11[158]];
    }
    if ([v15 v11[158]] == (id)1)
    {
      if (v17 != -1)
      {
LABEL_21:
        if ([v14 v11[158]] == (id)1) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = (uint64_t)[v14 v11[158]];
        }
        if ([v15 v11[158]] == (id)1) {
          uint64_t v23 = -1;
        }
        else {
          uint64_t v23 = (uint64_t)[v15 v11[158]];
        }
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        int v120 = v23 < v18;
        uint64_t v11 = &selRef_anyObject;
        goto LABEL_30;
      }
    }
    else if ((id)v17 != [v15 v11[158]])
    {
      goto LABEL_21;
    }
    sub_1002639A4();
    double v20 = v19;
    sub_1002639A4();
    double v22 = v21;
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    int v120 = v22 < v20;
LABEL_30:
    Swift::Int v13 = v9 + 2;
    if (v9 + 2 >= v3) {
      goto LABEL_50;
    }
    char v24 = (void **)(v118 + 8 * v9);
    do
    {
      Swift::Int v25 = v13;
      BOOL v26 = *(v24 - 1);
      uint64_t v27 = *v24;
      uint64_t v28 = v11[158];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ([v27 v28] == (id)1) {
        uint64_t v29 = -1;
      }
      else {
        uint64_t v29 = (uint64_t)[v27 v11[158]];
      }
      if ([v26 v11[158]] == (id)1)
      {
        if (v29 == -1) {
          goto LABEL_40;
        }
      }
      else if ((id)v29 == [v26 v11[158]])
      {
LABEL_40:
        sub_1002639A4();
        double v32 = v31;
        sub_1002639A4();
        double v34 = v33;
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        int v35 = v34 < v32;
        goto LABEL_46;
      }
      if ([v27 v11[158]] == (id)1) {
        uint64_t v30 = -1;
      }
      else {
        uint64_t v30 = (uint64_t)[v27 v11[158]];
      }
      if ([v26 v11[158]] == (id)1) {
        uint64_t v36 = -1;
      }
      else {
        uint64_t v36 = (uint64_t)[v26 v11[158]];
      }
      swift_unknownObjectRelease();
      uint64_t result = swift_unknownObjectRelease();
      int v35 = v36 < v30;
      uint64_t v11 = &selRef_anyObject;
LABEL_46:
      Swift::Int v13 = v25;
      if (v120 != v35) {
        goto LABEL_49;
      }
      Swift::Int v13 = v25 + 1;
      ++v24;
    }
    while (v3 != v25 + 1);
    Swift::Int v13 = v3;
LABEL_49:
    Swift::Int v9 = v122;
LABEL_50:
    if (v120)
    {
      if (v13 < v9) {
        goto LABEL_176;
      }
      if (v9 < v13)
      {
        int v37 = (uint64_t *)(v117 + 8 * v13);
        Swift::Int v38 = v13;
        Swift::Int v39 = v9;
        unint64_t v40 = (uint64_t *)(v10 + 8 * v9);
        do
        {
          if (v39 != --v38)
          {
            if (!v10) {
              goto LABEL_181;
            }
            uint64_t v41 = *v40;
            uint64_t *v40 = *v37;
            *int v37 = v41;
          }
          ++v39;
          --v37;
          ++v40;
        }
        while (v39 < v38);
      }
    }
LABEL_58:
    if (v13 >= v3) {
      goto LABEL_91;
    }
    if (__OFSUB__(v13, v9)) {
      goto LABEL_173;
    }
    if (v13 - v9 >= v119) {
      goto LABEL_91;
    }
    if (__OFADD__(v9, v119)) {
      goto LABEL_177;
    }
    if (v9 + v119 >= v3) {
      Swift::Int v42 = v3;
    }
    else {
      Swift::Int v42 = v9 + v119;
    }
    if (v42 >= v9)
    {
      if (v13 == v42) {
        goto LABEL_91;
      }
      uint64_t v115 = v8;
      uint64_t v43 = v117 + 8 * v13;
      Swift::Int v121 = v42;
      while (2)
      {
        char v44 = *(void **)(v10 + 8 * v13);
        uint64_t v45 = v43;
        while (2)
        {
          Swift::Int v46 = v13;
          uint64_t v47 = *(void **)v45;
          uint64_t v48 = v11[158];
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if ([v44 v48] == (id)1) {
            uint64_t v49 = -1;
          }
          else {
            uint64_t v49 = (uint64_t)[v44 v11[158]];
          }
          if (objc_msgSend(v47, v11[158], v115) == (id)1)
          {
            if (v49 != -1) {
              goto LABEL_76;
            }
LABEL_79:
            sub_1002639A4();
            double v52 = v51;
            sub_1002639A4();
            double v54 = v53;
            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            if (v54 >= v52) {
              break;
            }
            goto LABEL_87;
          }
          if ((id)v49 == [v47 v11[158]]) {
            goto LABEL_79;
          }
LABEL_76:
          if ([v44 v11[158]] == (id)1) {
            uint64_t v50 = -1;
          }
          else {
            uint64_t v50 = (uint64_t)[v44 v11[158]];
          }
          if ([v47 v11[158]] == (id)1) {
            uint64_t v55 = -1;
          }
          else {
            uint64_t v55 = (uint64_t)[v47 v11[158]];
          }
          swift_unknownObjectRelease();
          uint64_t result = swift_unknownObjectRelease();
          BOOL v89 = v55 < v50;
          uint64_t v11 = &selRef_anyObject;
          if (v89)
          {
LABEL_87:
            if (!v10) {
              goto LABEL_179;
            }
            Swift::Int v13 = v46;
            int v56 = *(void **)v45;
            char v44 = *(void **)(v45 + 8);
            *(void *)uint64_t v45 = v44;
            *(void *)(v45 + 8) = v56;
            v45 -= 8;
            if (v46 == ++v9) {
              goto LABEL_69;
            }
            continue;
          }
          break;
        }
        Swift::Int v13 = v46;
LABEL_69:
        ++v13;
        v43 += 8;
        Swift::Int v9 = v122;
        if (v13 != v121) {
          continue;
        }
        break;
      }
      Swift::Int v13 = v121;
      Swift::Int v8 = v115;
      Swift::Int v3 = v124;
LABEL_91:
      if (v13 < v9) {
        goto LABEL_168;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v123 = v13;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1001E3C20(0, *((void *)v8 + 2) + 1, 1, v8);
        Swift::Int v8 = (char *)result;
      }
      unint64_t v58 = *((void *)v8 + 2);
      unint64_t v57 = *((void *)v8 + 3);
      unint64_t v12 = v58 + 1;
      if (v58 >= v57 >> 1)
      {
        uint64_t result = (uint64_t)sub_1001E3C20((char *)(v57 > 1), v58 + 1, 1, v8);
        Swift::Int v8 = (char *)result;
      }
      *((void *)v8 + 2) = v12;
      char v59 = v8 + 32;
      uint64_t v60 = (Swift::Int *)&v8[16 * v58 + 32];
      *uint64_t v60 = v9;
      v60[1] = v123;
      if (v58)
      {
        while (2)
        {
          unint64_t v61 = v12 - 1;
          if (v12 >= 4)
          {
            unint64_t v66 = &v59[16 * v12];
            uint64_t v67 = *((void *)v66 - 8);
            uint64_t v68 = *((void *)v66 - 7);
            BOOL v72 = __OFSUB__(v68, v67);
            uint64_t v69 = v68 - v67;
            if (v72) {
              goto LABEL_157;
            }
            uint64_t v71 = *((void *)v66 - 6);
            uint64_t v70 = *((void *)v66 - 5);
            BOOL v72 = __OFSUB__(v70, v71);
            uint64_t v64 = v70 - v71;
            char v65 = v72;
            if (v72) {
              goto LABEL_158;
            }
            unint64_t v73 = v12 - 2;
            unint64_t v74 = &v59[16 * v12 - 32];
            uint64_t v76 = *(void *)v74;
            uint64_t v75 = *((void *)v74 + 1);
            BOOL v72 = __OFSUB__(v75, v76);
            uint64_t v77 = v75 - v76;
            if (v72) {
              goto LABEL_159;
            }
            BOOL v72 = __OFADD__(v64, v77);
            uint64_t v78 = v64 + v77;
            if (v72) {
              goto LABEL_161;
            }
            if (v78 >= v69)
            {
              char v96 = &v59[16 * v61];
              uint64_t v98 = *(void *)v96;
              uint64_t v97 = *((void *)v96 + 1);
              BOOL v72 = __OFSUB__(v97, v98);
              uint64_t v99 = v97 - v98;
              if (v72) {
                goto LABEL_167;
              }
              BOOL v89 = v64 < v99;
            }
            else
            {
LABEL_110:
              if (v65) {
                goto LABEL_160;
              }
              unint64_t v73 = v12 - 2;
              uint64_t v79 = &v59[16 * v12 - 32];
              uint64_t v81 = *(void *)v79;
              uint64_t v80 = *((void *)v79 + 1);
              BOOL v82 = __OFSUB__(v80, v81);
              uint64_t v83 = v80 - v81;
              char v84 = v82;
              if (v82) {
                goto LABEL_162;
              }
              uint64_t v85 = &v59[16 * v61];
              uint64_t v87 = *(void *)v85;
              uint64_t v86 = *((void *)v85 + 1);
              BOOL v72 = __OFSUB__(v86, v87);
              uint64_t v88 = v86 - v87;
              if (v72) {
                goto LABEL_164;
              }
              if (__OFADD__(v83, v88)) {
                goto LABEL_166;
              }
              if (v83 + v88 < v64) {
                goto LABEL_122;
              }
              BOOL v89 = v64 < v88;
            }
            if (v89) {
              unint64_t v61 = v73;
            }
          }
          else
          {
            if (v12 == 3)
            {
              uint64_t v63 = *((void *)v8 + 4);
              uint64_t v62 = *((void *)v8 + 5);
              BOOL v72 = __OFSUB__(v62, v63);
              uint64_t v64 = v62 - v63;
              char v65 = v72;
              goto LABEL_110;
            }
            uint64_t v90 = *((void *)v8 + 4);
            uint64_t v91 = *((void *)v8 + 5);
            BOOL v72 = __OFSUB__(v91, v90);
            uint64_t v83 = v91 - v90;
            char v84 = v72;
LABEL_122:
            if (v84) {
              goto LABEL_163;
            }
            v92 = &v59[16 * v61];
            uint64_t v94 = *(void *)v92;
            uint64_t v93 = *((void *)v92 + 1);
            BOOL v72 = __OFSUB__(v93, v94);
            uint64_t v95 = v93 - v94;
            if (v72) {
              goto LABEL_165;
            }
            if (v95 < v83) {
              goto LABEL_14;
            }
          }
          unint64_t v100 = v61 - 1;
          if (v61 - 1 >= v12)
          {
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
            goto LABEL_178;
          }
          if (!v10) {
            goto LABEL_180;
          }
          uint64_t v101 = (unint64_t *)v8;
          unint64_t v102 = &v59[16 * v100];
          uint64_t v103 = *(void *)v102;
          v104 = v59;
          unint64_t v105 = v61;
          uint64_t v106 = &v59[16 * v61];
          uint64_t v107 = *((void *)v106 + 1);
          uint64_t result = sub_100264DB4((void **)(v10 + 8 * *(void *)v102), (void **)(v10 + 8 * *(void *)v106), (void **)(v10 + 8 * v107), v125);
          if (v126) {
            goto LABEL_151;
          }
          if (v107 < v103) {
            goto LABEL_154;
          }
          if (v105 > v101[2]) {
            goto LABEL_155;
          }
          *(void *)unint64_t v102 = v103;
          *(void *)&v104[16 * v100 + 8] = v107;
          unint64_t v108 = v101[2];
          if (v105 >= v108) {
            goto LABEL_156;
          }
          Swift::Int v8 = (char *)v101;
          unint64_t v12 = v108 - 1;
          uint64_t result = (uint64_t)memmove(v106, v106 + 16, 16 * (v108 - 1 - v105));
          char v59 = v104;
          v101[2] = v108 - 1;
          Swift::Int v3 = v124;
          uint64_t v11 = &selRef_anyObject;
          if (v108 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }
      unint64_t v12 = 1;
LABEL_14:
      Swift::Int v9 = v123;
      if (v123 >= v3) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
  return result;
}

uint64_t *sub_100015484()
{
  if (qword_10047EB88 != -1) {
    swift_once();
  }
  return &qword_100486168;
}

unint64_t sub_1000154D0()
{
  unint64_t result = qword_10047B5A8;
  if (!qword_10047B5A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10047B5A8);
  }
  return result;
}

uint64_t sub_100015510(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001551C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  Swift::Int v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000155BC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10018F8A4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015600(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10018F8A4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015650(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100013A80(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  char v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    unint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100013660(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015768()
{
  unint64_t result = qword_10047AE50;
  if (!qword_10047AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047AE50);
  }
  return result;
}

uint64_t sub_1000157BC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  char v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *char v5 = v1;
  v5[1] = sub_100013F84;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100478760 + dword_100478760);
  return v6(v2, v3, v4);
}

uint64_t sub_10001587C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100013F84;
  return v6();
}

uint64_t sub_100015948(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100013F84;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100478770 + dword_100478770);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_100015A14(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100013F84;
  return v7();
}

uint64_t sub_100015AE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015B28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015B70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015BB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015C00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100015C48()
{
  unint64_t result = qword_10047AE20;
  if (!qword_10047AE20)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047AE20);
  }
  return result;
}

uint64_t sub_100015CF4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100015D78()
{
}

uint64_t sub_100015D9C()
{
  return sub_100013F30();
}

uint64_t sub_100015DA8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100013F84;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_10047B588 + dword_10047B588);
  return v6(v2, v3, v4);
}

uint64_t sub_100015E5C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 280) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10027419C;
  }
  else
  {
    *(void *)(v4 + 288) = a1;
    uint64_t v5 = sub_10000E104;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100015F9C()
{
  return sub_100006624();
}

id sub_100015FA8()
{
  id result = *(id *)(v0 + 16);
  if (result) {
    return [result devicesUpdated];
  }
  return result;
}

void sub_100016D10(uint64_t a1)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "allValues", 0);
  id v3 = [v2 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v27;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if ((char *)[v7 type] - 6 <= (char *)0xFFFFFFFFFFFFFFFBLL)
        {
          id v8 = objc_alloc_init((Class)NSMutableDictionary);
          id v9 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 type]);
          [v8 setObject:v9 forKeyedSubscript:@"type"];

          uint64_t v10 = [v7 date];
          [v8 setObject:v10 forKeyedSubscript:@"date"];

          char v11 = [v7 outputDeviceUID];

          if (v11)
          {
            unint64_t v12 = [v7 outputDeviceUID];
            [v8 setObject:v12 forKeyedSubscript:@"uid"];
          }
          uint64_t v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 event]);
          [v8 setObject:v13 forKeyedSubscript:@"event"];

          id v14 = [v7 event];
          if ((unint64_t)v14 > 9) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = (uint64_t)*(&off_100415D38 + (void)v14);
          }
          [v8 setObject:v15 forKeyedSubscript:@"eventdescription"];
          uint64_t v16 = [v7 selectionReason];
          [v8 setObject:v16 forKeyedSubscript:@"selectionreason"];

          uint64_t v17 = [v7 eventReason];
          [v8 setObject:v17 forKeyedSubscript:@"eventreason"];

          uint64_t v18 = [v7 date];
          [v18 timeIntervalSinceNow];
          double v20 = +[NSNumber numberWithDouble:-v19];
          [v8 setObject:v20 forKeyedSubscript:@"timesince"];

          double v21 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 changeType]);
          [v8 setObject:v21 forKeyedSubscript:@"changeType"];

          double v22 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 supportsIdleReset]);
          [v8 setObject:v22 forKeyedSubscript:@"supportsIdleReset"];

          [v7 changeType];
          uint64_t v23 = (void *)MRMediaRemoteActiveEndpointChangeTypeCopyDescription();
          [v8 setObject:v23 forKeyedSubscript:@"changeTypeDescription"];

          char v24 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 demoteWhenSyncingToCompanion]);
          [v8 setObject:v24 forKeyedSubscript:@"demoteWhenSyncingToCompanion"];

          [v7 type];
          active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription();
          if (active) {
            [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:active];
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v4);
  }
}

void sub_1000171CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000171E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000171F4(uint64_t a1)
{
}

void sub_1000171FC(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 40) mutableCopy];
  if ((unint64_t)[v5 count] >= 6) {
    objc_msgSend(v5, "removeObjectsInRange:", 0, (char *)objc_msgSend(v5, "count") - 5);
  }
  uint64_t v2 = objc_msgSend(v5, "msv_map:", &stru_100415918);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100017294(id a1, MRDSystemEndpointControllerRecentlyDismissedRecommendation *a2)
{
  return [(MRDSystemEndpointControllerRecentlyDismissedRecommendation *)a2 dictionaryRepresentation];
}

void sub_100017398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000173B0(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 32);
  id v7 = +[NSNumber numberWithInteger:a1[6]];
  uint64_t v3 = [v2 objectForKeyedSubscript:v7];
  uint64_t v4 = [v3 outputDeviceUID];
  uint64_t v5 = *(void *)(a1[5] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100017BEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100017C0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) outputDeviceUID];

  uint64_t v5 = _MRLogForCategory();
  uint64_t v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (!v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      id v8 = [*(id *)(a1 + 40) name];
      id v9 = [*(id *)(a1 + 40) requestID];
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v17 = 138543874;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      double v20 = v9;
      __int16 v21 = 2048;
      id v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v17, 0x20u);
      goto LABEL_13;
    }
    if (!v13) {
      goto LABEL_14;
    }
    id v8 = [*(id *)(a1 + 40) name];
    id v9 = [*(id *)(a1 + 40) requestID];
    uint64_t v10 = [*(id *)(a1 + 32) outputDeviceUID];
    char v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v17 = 138544130;
    uint64_t v18 = v8;
    __int16 v19 = 2114;
    double v20 = v9;
    __int16 v21 = 2114;
    id v22 = v10;
    __int16 v23 = 2048;
    char v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", (uint8_t *)&v17, 0x2Au);
LABEL_8:

LABEL_13:
    goto LABEL_14;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    id v8 = [*(id *)(a1 + 40) name];
    id v9 = [*(id *)(a1 + 40) requestID];
    uint64_t v10 = [*(id *)(a1 + 32) outputDeviceUID];
    char v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v17 = 138544386;
    uint64_t v18 = v8;
    __int16 v19 = 2114;
    double v20 = v9;
    __int16 v21 = 2114;
    id v22 = v3;
    __int16 v23 = 2114;
    char v24 = v10;
    __int16 v25 = 2048;
    uint64_t v26 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v17, 0x34u);
    goto LABEL_8;
  }
  if (v7) {
    sub_100329FCC(a1, (uint64_t)v3, v6);
  }
LABEL_14:

  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    (*(void (**)(uint64_t, id))(v16 + 16))(v16, v3);
  }
}

void sub_100017EEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 96);
    *(void *)(v4 + 96) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 40) type]);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setObject:v6 forKeyedSubscript:v7];
}

void sub_100017F94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    qos_class_t v7 = qos_class_self();
    id v8 = dispatch_get_global_queue(v7, 0);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000180A8;
    v11[3] = &unk_1004159E0;
    long long v10 = *(_OWORD *)(a1 + 32);
    id v9 = (id)v10;
    long long v12 = v10;
    [v5 waitForPlaybackWithTimeout:v8 queue:v11 completion:7.0];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000180A8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100018108(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
  id v5 = obj;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10001816C(uint64_t a1)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96);
    active = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 40) type]);
    id v4 = [v2 objectForKeyedSubscript:active];
    id v5 = *(id *)(a1 + 48);
    if (v4 == v5)
    {
    }
    else
    {
      id v6 = v5;
      unsigned __int8 v7 = [v4 isEqual:v5];

      if (v7) {
        goto LABEL_7;
      }
      id v8 = objc_alloc((Class)NSError);
      active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription();
      id v9 = [v8 initWithMRError:25, @"Another client updated %@SystemEndpoint during update process", active format];
      uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
      id v4 = *(id *)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
  }
LABEL_7:
  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    uint64_t v11 = objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_updateSystemEndpoint:event:eventReason:", *(void *)(a1 + 40), *(void *)(a1 + 80), *(void *)(a1 + 56));
    uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 8);
    BOOL v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  id v14 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);

  return v14();
}

id sub_1000184E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:", *(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_100018A54(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 80)])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:&off_100437C80];
    id v3 = [v2 outputDeviceUID];
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = v4[1];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_100018C04;
    v13[3] = &unk_100415A80;
    id v14 = v3;
    id v15 = v2;
    uint64_t v16 = v4;
    id v6 = v2;
    id v7 = v3;
    objc_msgSend(v4, "_onSerialQueue_reconnectToOutputDevice:queue:completion:", v7, v5, v13);
  }
  else if ([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 88)])
  {
    id v12 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:&off_100437C98];
    id v8 = [v12 outputDeviceUID];
    id v9 = *(void **)(a1 + 40);
    uint64_t v10 = +[NSBundle mainBundle];
    uint64_t v11 = [v10 bundleIdentifier];
    objc_msgSend(v9, "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:", 2, v8, 4, @"Origin unregistered", v11);
  }
}

void sub_100018C04(uint64_t a1, int a2)
{
  if (a2)
  {
    id v12 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:*(void *)(a1 + 32) reason:@"Reconncetion"];
    objc_msgSend(v12, "setDemoteWhenSyncingToCompanion:", objc_msgSend(*(id *)(a1 + 40), "demoteWhenSyncingToCompanion"));
    id v3 = *(void **)(a1 + 48);
    id v4 = [v12 reason];
    id v5 = objc_msgSend(v3, "_onSerialQueue_updateSystemEndpoint:event:eventReason:", v12, 9, v4);
  }
  else
  {
    id v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = +[NSBundle mainBundle];
    id v9 = [v8 bundleIdentifier];
    objc_msgSend(v6, "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:", 0, v7, 4, @"Reconnection", v9);

    uint64_t v10 = *(void **)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = +[NSBundle mainBundle];
    id v4 = [v12 bundleIdentifier];
    objc_msgSend(v10, "_onSerialQueue_clearActiveEndpointType:outputDeviceUID:event:reason:clientBundleIdentifier:", 2, v11, 4, @"Reconnection", v4);
  }
}

void sub_100018F14(uint64_t a1)
{
  id v10 = [objc_alloc((Class)NSString) initWithFormat:@"Playback changed for %@", *(void *)(a1 + 32)];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = +[NSBundle mainBundle];
  id v5 = [v4 bundleIdentifier];
  objc_msgSend(v2, "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:", 0, v3, v10, v5);

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = +[NSBundle mainBundle];
  id v9 = [v8 bundleIdentifier];
  objc_msgSend(v6, "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:", 2, v7, v10, v9);

  objc_msgSend(*(id *)(a1 + 40), "_onSerialQueue_maybeSetupPlaybackTimerForEvent:", *(void *)(a1 + 48));
}

uint64_t sub_100019CC4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 outputDeviceUID];
  if (v2 == v3) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = (uint64_t)[v2 isEqual:v3];
  }

  return v4;
}

uint64_t sub_100019EA8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 outputDeviceUID];
  uint64_t v4 = v3;
  if (v3 == *(void **)(a1 + 32)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

BOOL sub_10001A884(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  BOOL v2 = v1 > 9;
  uint64_t v3 = (1 << v1) & 0x209;
  BOOL v4 = v2 || v3 == 0;
  if (!v4 || !*(void *)(a1 + 64) && [*(id *)(a1 + 32) changeType]) {
    return 1;
  }
  id v7 = [*(id *)(a1 + 40) outputDeviceUID];
  id v8 = *(id *)(a1 + 48);
  if (v7 != v8)
  {
    id v9 = v8;
    unsigned int v10 = [v7 isEqual:v8];

    return !v10;
  }

  return 0;
}

void sub_10001A93C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) copy];
  [v3 setChangeType:*(void *)(a1 + 48)];
  BOOL v2 = [*(id *)(a1 + 40) delegate];
  [v2 systemEndpointController:*(void *)(a1 + 40) activeSystemEndpointDidChangeForRequest:v3 type:*(void *)(a1 + 56)];
}

id sub_10001A9B0(void *a1)
{
  id v1 = a1;
  if ([v1 containsString:@"migrationPlaybackSession"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonMigrate;
LABEL_9:
    id v3 = *v2;
LABEL_10:
    BOOL v4 = v3;
    goto LABEL_11;
  }
  if ([v1 containsString:@"ResolveActiveEndpoint"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonFallbackCouldNotResolve;
    goto LABEL_9;
  }
  if ([v1 containsString:@"invalid route error"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonInvalidRoute;
    goto LABEL_9;
  }
  if ([v1 containsString:@"from external device client"])
  {
    BOOL v2 = (id *)&kMRChangeActiveSystemReasonExternalDevice;
    goto LABEL_9;
  }
  if ([v1 containsString:@"Analytics: "])
  {
    id v3 = [v1 stringByReplacingOccurrencesOfString:@"Analytics: " withString:&stru_10042ACB0];
    goto LABEL_10;
  }
  BOOL v4 = 0;
LABEL_11:

  return v4;
}

id sub_10001AAAC(uint64_t a1)
{
  v16[0] = kMRChangeActiveSystemEndpointClientKey;
  uint64_t v2 = [*(id *)(a1 + 32) clientBundleIdentifier];
  id v3 = (void *)v2;
  if (v2) {
    CFStringRef v4 = (const __CFString *)v2;
  }
  else {
    CFStringRef v4 = @"unknown";
  }
  uint64_t v5 = *(void **)(a1 + 32);
  CFStringRef v6 = *(const __CFString **)(a1 + 40);
  if (!v6) {
    CFStringRef v6 = @"unknown";
  }
  v17[0] = v4;
  v17[1] = v6;
  v16[1] = kMRChangeActiveSystemEndpointTypeKey;
  v16[2] = kMRChangeActiveSystemEndpointChangeTypeKey;
  CFStringRef v7 = *(const __CFString **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  if (!v7) {
    CFStringRef v7 = @"unknown";
  }
  v17[2] = v7;
  v17[3] = v8;
  v16[3] = kMRChangeActiveSystemEndpointReasonKey;
  v16[4] = kMRChangeActiveSystemEndpointIsLocalKey;
  id v9 = [v5 outputDeviceUID];
  unsigned int v10 = +[NSNumber numberWithInt:v9 == 0];
  v17[4] = v10;
  v16[5] = kMRChangeActiveSystemEndpointTimeSinceLastChangeKey;
  uint64_t v11 = [*(id *)(a1 + 64) date];
  [v11 timeIntervalSinceNow];
  BOOL v13 = +[NSNumber numberWithDouble:fabs(v12)];
  v17[5] = v13;
  id v14 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:6];

  return v14;
}

void sub_10001AE1C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  dispatch_time_t v6 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001AF14;
  v11[3] = &unk_100415B98;
  CFStringRef v7 = *(NSObject **)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v13 = v8;
  uint64_t v14 = v9;
  id v15 = v5;
  id v10 = v5;
  dispatch_after(v6, v7, v11);
}

void sub_10001AF14(uint64_t a1)
{
  uint64_t v2 = +[MRDAutoConnectionController sharedConnectionController];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_10001AFE0;
  v6[3] = &unk_100415B70;
  id v7 = *(id *)(a1 + 56);
  [v2 connectToOutputDevice:v3 reason:v4 queue:v5 completion:v6];
}

uint64_t sub_10001AFE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 != 0);
  }
  return result;
}

void sub_10001B000(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = *(void (***)(void, void, double))(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001B0EC;
    v5[3] = &unk_100415C10;
    dispatch_time_t v6 = v4;
    id v7 = *(id *)(a1 + 40);
    ((void (**)(void, void *, double))v4)[2](v6, v5, 3.0);
  }
}

void sub_10001B0EC(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10001B1B4;
    v4[3] = &unk_100415BE8;
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    (*(void (**)(uint64_t, void *, double))(v3 + 16))(v3, v4, 7.0);
  }
}

uint64_t sub_10001B1B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001B464(void *a1)
{
  id v2 = objc_alloc((Class)NSString);
  uint64_t active = MRMediaRemoteActiveEndpointTypeCopyDescription();
  uint64_t v4 = (void *)active;
  uint64_t v5 = 0;
  unint64_t v6 = a1[5];
  if (v6 <= 9) {
    uint64_t v5 = (uint64_t)*(&off_100415D38 + v6);
  }
  id v10 = [v2 initWithFormat:@" %@ timeout event %@ after <%lf> seconds ", active, v5, a1[6]];

  id v7 = (void *)a1[4];
  id v8 = +[NSBundle mainBundle];
  uint64_t v9 = [v8 bundleIdentifier];
  objc_msgSend(v7, "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:", 0, 2, v10, v9);
}

void sub_10001B7A0(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSString);
  uint64_t v3 = [*(id *)(a1 + 32) origin];
  uint64_t v4 = (void *)v3;
  unint64_t v5 = *(void *)(a1 + 48);
  if (v5 > 9) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (uint64_t)*(&off_100415D38 + v5);
  }
  id v10 = [v2 initWithFormat:@"%@ playback timedout event %@ after <%lf> seconds", v3, v6, *(void *)(a1 + 56)];

  id v7 = *(void **)(a1 + 40);
  id v8 = +[NSBundle mainBundle];
  uint64_t v9 = [v8 bundleIdentifier];
  objc_msgSend(v7, "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:", 0, 6, v10, v9);
}

void sub_10001BAA8(id a1)
{
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v1 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.systemEndpointController.userDefaults.serialQueue", v1);
  uint64_t v3 = (void *)qword_10047DEA0;
  qword_10047DEA0 = (uint64_t)v2;
}

id sub_10001BB2C(void *a1)
{
  dispatch_queue_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10032A180((uint64_t)a1, v2);
  }

  [*(id *)(a1[5] + 56) setObject:a1[4] forKey:@"SystemEndpoint"];
  return [*(id *)(a1[5] + 56) setObject:a1[6] forKey:@"SystemEndpointRecentlyDismissedRecommendations"];
}

void sub_10001BE08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [v4 objectForKeyedSubscript:@"type"];
  uint64_t v6 = (int)[v5 intValue];

  uint64_t v18 = objc_alloc_init(MRDSystemEndpointEntry);
  [(MRDSystemEndpointEntry *)v18 setType:v6];
  id v7 = [v4 objectForKeyedSubscript:@"event"];
  -[MRDSystemEndpointEntry setEvent:](v18, "setEvent:", (int)[v7 intValue]);

  id v8 = [v4 objectForKeyedSubscript:@"uid"];
  [(MRDSystemEndpointEntry *)v18 setOutputDeviceUID:v8];

  uint64_t v9 = [v4 objectForKeyedSubscript:@"date"];
  [(MRDSystemEndpointEntry *)v18 setDate:v9];

  id v10 = [v4 objectForKeyedSubscript:@"eventreason"];
  [(MRDSystemEndpointEntry *)v18 setEventReason:v10];

  uint64_t v11 = [v4 objectForKeyedSubscript:@"selectionreason"];
  [(MRDSystemEndpointEntry *)v18 setSelectionReason:v11];

  id v12 = [v4 objectForKeyedSubscript:@"changeType"];
  -[MRDSystemEndpointEntry setChangeType:](v18, "setChangeType:", (int)[v12 intValue]);

  id v13 = [v4 objectForKeyedSubscript:@"demoteWhenSyncingToCompanion"];
  -[MRDSystemEndpointEntry setDemoteWhenSyncingToCompanion:](v18, "setDemoteWhenSyncingToCompanion:", [v13 BOOLValue]);

  uint64_t v14 = [v4 objectForKeyedSubscript:@"supportsIdleReset"];

  if (v14) {
    id v15 = v14;
  }
  else {
    id v15 = &__kCFBooleanTrue;
  }
  -[MRDSystemEndpointEntry setSupportsIdleReset:](v18, "setSupportsIdleReset:", [v15 BOOLValue]);

  uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 32);
  int v17 = +[NSNumber numberWithInteger:v6];
  [v16 setObject:v18 forKeyedSubscript:v17];
}

void sub_10001C024(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = +[NSBundle mainBundle];
  dispatch_queue_t v2 = [v3 bundleIdentifier];
  objc_msgSend(v1, "_onSerialQueue_reevaluateActiveEndpoint:event:eventReason:clientBundleIdentifier:", 0, 0, @"Startup", v2);
}

void sub_10001C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001C4E4(uint64_t a1)
{
}

id sub_10001C4F8(uint64_t a1, void *a2)
{
  id v3 = [a2 deviceUID];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10001C53C(uint64_t a1, void *a2)
{
  id v3 = [a2 deviceUID];
  uint64_t v4 = [v3 isEqual:*(void *)(a1 + 32)] ^ 1;

  return v4;
}

id sub_10001CDEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_10001CEE4(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"MRDGroupSessionServerDidStartEligibilityMonitoringNotification" object:0];
}

void sub_10001D0B4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDGroupSessionServerDidStartNotification" object:*(void *)(a1 + 32)];
}

void sub_10001D2A0(uint64_t a1)
{
  [*(id *)(a1 + 32) notifyActiveSessionStateChanged];
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDGroupSessionServerDidStopNotification" object:*(void *)(a1 + 32)];
}

void sub_10001D4E4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = [v2 listener];
  uint64_t v4 = [v6 endpoint];
  unint64_t v5 = [v4 _endpoint];
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v5);
}

void sub_10001D964(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001DA28;
  v10[3] = &unk_100415DF0;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  sub_100014324(v7, v10);
}

uint64_t sub_10001DA28(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32)) {
    return MRAddClientErrorToXPCMessage();
  }
  else {
    return _MRAddStringToXPCMessage(a2, *(void *)(a1 + 40), "MRXPC_GROUP_SESSION_IDENTIFIER_KEY");
  }
}

void sub_10001DA50(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 identifier];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10001DACC(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3)
  {
    [v6 trackWithError:v7];
  }
  else
  {
    id v9 = [v6 request];
    [v9 end];

    [*(id *)(a1 + 32) track];
  }
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = [v8 identifier];

  (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v11, v7);
}

void sub_10001DDCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  id v8 = _MRLogForCategory();
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10032A1FC(v9);
    }

    [*(id *)(a1 + 40) joinGroupSessionWithToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 72)];
    [*(id *)(a1 + 56) trackWithError:v6];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Found equivalent WHA endpoint: %@, connecting", buf, 0xCu);
    }

    uint64_t v10 = [*(id *)(a1 + 56) recon];
    [v10 end];

    uint64_t v18 = MREndpointConnectionReasonUserInfoKey;
    CFStringRef v19 = @"MRDGroupSessionManager";
    id v11 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    id v12 = [*(id *)(a1 + 56) whaConnect];
    [v12 start];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_10001E008;
    v13[3] = &unk_100415F30;
    void v13[4] = *(void *)(a1 + 64);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 72);
    id v16 = *(id *)(a1 + 56);
    [v5 connectToExternalDeviceWithOptions:1 userInfo:v11 completion:v13];
  }
}

void sub_10001E008(id *a1, void *a2)
{
  id v3 = a2;
  [a1[4] setLastConnectionError:v3];
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[MRDGroupSessionServer] Failed to connect to WHA endpoint with error: %@.\nJoining session directly", (uint8_t *)&buf, 0xCu);
    }

    [a1[5] joinGroupSessionWithToken:a1[6] completion:a1[8]];
    [a1[7] trackWithError:v3];
  }
  else
  {
    id v5 = [a1[7] whaConnect];
    [v5 end];

    [a1[7] track];
    id v6 = [a1[6] equivalentMediaIdentifier];
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Connected to equivalent WHA endpoint, ASE switching to: %@", (uint8_t *)&buf, 0xCu);
    }

    id v8 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:v6 reason:@"MRGroupSession.wha-connected"];
    id v9 = +[MRDMediaRemoteServer server];
    uint64_t v10 = [v9 routingServer];
    id v11 = [v10 systemEndpointController];
    [v11 updateSystemEndpointForRequest:v8];

    id v12 = [a1[5] session];
    id v13 = [v12 joinToken];
    id v14 = [v13 equivalentMediaIdentifier];
    LODWORD(v11) = [v14 isEqual:v6];

    if (v11)
    {
      id v15 = _MRLogForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Immediately found active group session for device: %@", (uint8_t *)&buf, 0xCu);
      }

      (*((void (**)(void))a1[8] + 2))();
    }
    else
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v40 = 0x3032000000;
      uint64_t v41 = sub_10001E52C;
      Swift::Int v42 = sub_10001E53C;
      uint64_t v43 = objc_alloc_init(MRDGroupSessionManagerObserverHelper);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_10001E544;
      v34[3] = &unk_100415EB8;
      v34[4] = a1[4];
      p_long long buf = &buf;
      id v35 = a1[8];
      id v16 = objc_retainBlock(v34);
      id v17 = objc_alloc((Class)MSVBlockGuard);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10001E6A0;
      v31[3] = &unk_100415EE0;
      id v18 = v6;
      id v32 = v18;
      CFStringRef v19 = v16;
      id v33 = v19;
      id v20 = [v17 initWithTimeout:v31 interruptionHandler:60.0];
      id v21 = _MRLogForCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v37 = 138412290;
        id v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Waiting for active group session for device: %@", v37, 0xCu);
      }

      char v24 = _NSConcreteStackBlock;
      uint64_t v25 = 3221225472;
      uint64_t v26 = sub_10001E798;
      long long v27 = &unk_100415F08;
      id v28 = v18;
      id v22 = v20;
      id v29 = v22;
      __int16 v23 = v19;
      id v30 = v23;
      [*(id *)(*((void *)&buf + 1) + 40) setActiveSessionDidChange:&v24];
      objc_msgSend(a1[5], "addObserver:", *(void *)(*((void *)&buf + 1) + 40), v24, v25, v26, v27);

      _Block_object_dispose(&buf, 8);
    }
  }
}

void sub_10001E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_10001E52C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001E53C(uint64_t a1)
{
}

void sub_10001E544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) messageQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001E638;
  block[3] = &unk_100415E90;
  long long v11 = *(_OWORD *)(a1 + 40);
  id v8 = (id)v11;
  long long v15 = v11;
  id v13 = v5;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10001E638(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setActiveSessionDidChange:0];
  uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v4();
}

void sub_10001E6A0(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Timed out waiting to join group session for device: %@", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = +[NSError msv_errorWithDomain:MRGroupSessionError code:15 debugDescription:@"Timed out waiting to auto-join ASE group session"];
  (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
}

void sub_10001E798(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v12 = 138412290;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[MRDGroupSessionServer] Active session changed: %@", (uint8_t *)&v12, 0xCu);
  }

  id v5 = [v3 joinToken];
  int v6 = [v5 equivalentMediaIdentifier];
  unsigned int v7 = [v6 isEqual:*(void *)(a1 + 32)];

  if (v7)
  {
    unsigned __int8 v8 = [*(id *)(a1 + 40) disarm];
    id v9 = _MRLogForCategory();
    id v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        long long v11 = *(void **)(a1 + 32);
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Joined active group session for device: %@", (uint8_t *)&v12, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10032A240((uint64_t *)(a1 + 32), v10);
      }
    }
  }
}

uint64_t sub_10001ECA4(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage();
  }
  return result;
}

void sub_10001ED50(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [*(id *)(a1 + 32) bundleIdentifier];
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication();

  id v5 = v9;
  if (IsSystemMediaApplication)
  {
    int v6 = +[MRDMusicUserStateCenter sharedCenter];
    unsigned int v7 = [v6 localActiveIdentity];

    if (v7)
    {
      unsigned __int8 v8 = [v7 protobufData];
      MRAddDataToXPCMessage();
    }
    id v5 = v9;
  }
}

void sub_10001F28C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_10001F324;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_10001F324(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage();
  }
  return result;
}

uint64_t sub_10001F33C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001F4D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (*(void *)(a1 + 32))
  {
    MRAddClientErrorToXPCMessage();
    id v3 = v7;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = objc_msgSend(v4, "data", v3);
    MRAddDataToXPCMessage();
  }

  return _objc_release_x2();
}

void sub_10001F62C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001F6F0;
  v10[3] = &unk_100415DF0;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  sub_100014324(v7, v10);
}

void sub_10001F6F0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32))
  {
    id v4 = a2;
    MRAddClientErrorToXPCMessage();
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 40);
    id v3 = a2;
    id v4 = [v2 protobufData];
    MRAddDataToXPCMessage();
  }
}

uint64_t sub_10001F8B8(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return MRAddClientErrorToXPCMessage();
  }
  return result;
}

void sub_10001F964(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10001FA24;
  v10[3] = &unk_100415DF0;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_100014324(v7, v10);
}

uint64_t sub_10001FA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    return _MRAddStringToXPCMessage(a2, v3, "MRXPC_GROUP_SESSION_IDENTIFIER_KEY");
  }
  else {
    return MRAddClientErrorToXPCMessage();
  }
}

void sub_10001FCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FCE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

BOOL sub_1000200A8(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 pid];
  return v3 == [*(id *)(a1 + 32) pid];
}

BOOL sub_1000200E4(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 pid];
  return v3 == [*(id *)(a1 + 32) pid];
}

BOOL sub_100020560(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  id v5 = [(MRDMediaRemoteClient *)v4 bundleIdentifier];
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication();

  if (IsSystemMediaApplication)
  {
    id v7 = +[MRUserSettings currentSettings];
    [v7 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:](v4, "takeAssertion:forReason:duration:", 7, @"MediaRemoteLocalMusicIdentityChanged");
  }
  return IsSystemMediaApplication;
}

BOOL sub_100020B24(id a1, MRDiscoveredGroupSession *a2)
{
  return [(MRDiscoveredGroupSession *)a2 source] == (id)1;
}

id sub_100020B48(uint64_t a1)
{
  v6[0] = kMREventNearbyNotificationTypeProximityCard;
  v5[0] = kMREventNearbyNotificationTypeKey;
  v5[1] = kMREventSessionCreatedRouteKey;
  uint64_t v1 = [*(id *)(a1 + 32) hostInfo];
  uint64_t v2 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [v1 routeType]);
  v6[1] = v2;
  unsigned int v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];

  return v3;
}

BOOL sub_100020D90(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  int v5 = sub_100009C80(v4);
  if (v5)
  {
    id v6 = +[MRUserSettings currentSettings];
    [v6 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:](v4, "takeAssertion:forReason:duration:", 7, @"MediaRemoteActiveGroupSessionStateChanged");
  }
  return v5;
}

BOOL sub_100021050(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  id v4 = a2;
  int v5 = sub_100009C80(v4);
  if (v5)
  {
    id v6 = +[MRUserSettings currentSettings];
    [v6 nowPlayingUIWakingPlayerEventAssertionDuration];
    -[MRDMediaRemoteClient takeAssertion:forReason:duration:](v4, "takeAssertion:forReason:duration:", 7, @"MediaRemoteLocalGroupSessionEligibilityStatusChanged");
  }
  return v5;
}

id sub_1000218F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) addClient:*(void *)(a1 + 40)];
}

id sub_1000218FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeClient:*(void *)(a1 + 40)];
}

void sub_100021C20(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) isAsserting];
  unsigned int v3 = _MRLogForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Stop timer elapsed but there are group session assertions - not stopping", v5, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionServer] Stop timer elapsed with no assertions remaining - stopping", buf, 2u);
    }

    [*(id *)(a1 + 40) stop];
  }
}

void sub_100022214(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1000224FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 134218242;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionClient] <%p> Server proxy error %@.", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1000226A0(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) transportParticipants:*(void *)(a1 + 40) forSession:*(void *)(a1 + 48)];
  unsigned __int8 v2 = [*(id *)(a1 + 32) client];
  id v3 = [*(id *)(a1 + 48) identifier];
  [v2 session:v3 didUpdateParticipants:v4];
}

void sub_100022800(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) client];
  unsigned __int8 v2 = [*(id *)(a1 + 40) identifier];
  id v3 = +[NSSet setWithArray:*(void *)(a1 + 48)];
  [v4 session:v2 didUpdateMembers:v3];
}

void sub_100022948(uint64_t a1)
{
  [*(id *)(a1 + 32) removeObserver:*(void *)(a1 + 40)];
  id v4 = [*(id *)(a1 + 40) client];
  unsigned __int8 v2 = [*(id *)(a1 + 32) identifier];
  id v3 = +[NSError msv_errorWithDomain:MRGroupSessionError code:1 debugDescription:@"Session state changed to invalidated."];
  [v4 session:v2 didInvalidateWithError:v3];
}

void sub_100022ACC(id *a1)
{
  unsigned __int8 v2 = objc_msgSend(a1[4], "msv_compactMap:", &stru_100416148);
  id v5 = +[NSSet setWithArray:v2];

  id v3 = [a1[5] client];
  id v4 = [a1[6] identifier];
  [v3 session:v4 didUpdatePendingParticipants:v5];
}

id sub_100022B80(id a1, MRDGroupSessionParticipant *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = [(MRDGroupSessionParticipant *)v2 identity];

  if (v3)
  {
    id v4 = objc_alloc((Class)MRCodableGroupSessionParticipant);
    id v5 = [(MRDGroupSessionParticipant *)v2 identifier];
    int v6 = [(MRDGroupSessionParticipant *)v2 identity];
    id v7 = objc_msgSend(v4, "initWithIdentifier:identity:connected:guest:hidden:", v5, v6, 0, -[MRDGroupSessionParticipant guest](v2, "guest"), -[MRDGroupSessionParticipant hidden](v2, "hidden"));

    [v7 setPending:1];
  }
  else
  {
    __int16 v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@", (uint8_t *)&v10, 0xCu);
    }

    id v7 = 0;
  }

  return v7;
}

void sub_100022DC0(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) client];
  unsigned __int8 v2 = [*(id *)(a1 + 40) identifier];
  [v3 session:v2 didUpdateSynchronizedMetadata:*(void *)(a1 + 48)];
}

void sub_100022EE4(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) client];
  unsigned __int8 v2 = [*(id *)(a1 + 40) identifier];
  [v3 session:v2 didChangeState:1];
}

void sub_100023008(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) client];
  unsigned __int8 v2 = [*(id *)(a1 + 40) identifier];
  [v3 session:v2 didChangeState:3];
}

void sub_10002312C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = [*(id *)(a1 + 32) client];
    [v2 discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }
}

void sub_100023280(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = [v3 client];
    [v5 activeSessionDidChange:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    _[v3 reevaluatePendingStateFromSession:v4];
  }
}

void sub_100023390(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = [*(id *)(a1 + 32) client];
    [v2 activeSessionDidChange:0];
  }
}

void sub_1000234D4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = [*(id *)(a1 + 32) client];
    [v2 activeSessionDidChange:*(void *)(a1 + 40)];
  }
}

void sub_1000235CC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type])
  {
    id v2 = [*(id *)(a1 + 32) client];
    [v2 activeSessionDidChange:0];
  }
}

void sub_100023720(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v5 = [v3 client];
    [v5 activeSessionDidChange:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    _[v3 reevaluatePendingStateFromSession:v4];
  }
}

void sub_100023D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
}

void sub_100023DE0(id *a1)
{
  id v2 = a1 + 7;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(v2);
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032A76C((uint64_t)a1, v5);
    }

    [a1[5] removeObserver:v4];
    int v6 = [v4 client];
    id v7 = [a1[6] identifier];
    __int16 v8 = +[NSError msv_errorWithDomain:MRGroupSessionError code:1 debugDescription:@"Timed out waiting for session to be joined."];
    [v6 session:v7 didInvalidateWithError:v8];
  }
}

id sub_1000240C0(id a1, MRDGroupSessionParticipant *a2)
{
  id v2 = a2;
  id v3 = [(MRDGroupSessionParticipant *)v2 identity];

  if (v3)
  {
    id v4 = objc_alloc((Class)MRCodableGroupSessionParticipant);
    id v5 = [(MRDGroupSessionParticipant *)v2 identifier];
    int v6 = [(MRDGroupSessionParticipant *)v2 identity];
    id v7 = objc_msgSend(v4, "initWithIdentifier:identity:connected:guest:hidden:", v5, v6, 0, -[MRDGroupSessionParticipant guest](v2, "guest"), -[MRDGroupSessionParticipant hidden](v2, "hidden"));

    [v7 setPending:1];
  }
  else
  {
    __int16 v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@", (uint8_t *)&v10, 0xCu);
    }

    id v7 = 0;
  }

  return v7;
}

void sub_100024EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100024EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 identity];

  if (v4)
  {
    id v5 = objc_alloc((Class)MRCodableGroupSessionParticipant);
    int v6 = [v3 identifier];
    id v7 = [v3 identity];
    id v8 = objc_msgSend(v5, "initWithIdentifier:identity:connected:guest:hidden:", v6, v7, objc_msgSend(v3, "connected"), objc_msgSend(v3, "guest"), objc_msgSend(v3, "hidden"));

    id v9 = [v3 identifier];
    int v10 = [*(id *)(a1 + 32) identifier];
    unsigned int v11 = [v9 isEqualToString:v10];

    if (v11)
    {
      [v8 setLocal:1];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    id v12 = [v3 identifier];
    id v13 = [*(id *)(a1 + 40) identifier];
    unsigned int v14 = [v12 isEqualToString:v13];

    if (v14) {
      [v8 setHost:1];
    }
  }
  else
  {
    long long v15 = _MRLogForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionClient] Dropping participant with no identity for transport: %@", (uint8_t *)&v17, 0xCu);
    }

    id v8 = 0;
  }

  return v8;
}

void sub_100025264(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000256F8(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [objc_alloc((Class)MRCommandResult) initWithHandlerStatuses:&off_100438590 sendError:0];
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Yielding AVRCP command to callCenterHandler", buf, 2u);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
    }
  }
  else
  {
    id v6 = objc_alloc((Class)NSString);
    id v7 = [*(id *)(a1 + 32) commandID];
    id v8 = [v6 initWithFormat:@"com.apple.mediaremote.remotecontrol.%@", v7];

    id v3 = v8;
    id v9 = (const char *)[v3 UTF8String];
    uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    unsigned int v11 = dispatch_queue_attr_make_with_qos_class(v10, *(dispatch_qos_class_t *)(a1 + 56), 0);
    id v12 = dispatch_queue_create(v9, v11);

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000258D8;
    block[3] = &unk_1004161E0;
    int8x16_t v14 = *(int8x16_t *)(a1 + 32);
    id v13 = (id)v14.i64[0];
    int8x16_t v16 = vextq_s8(v14, v14, 8uLL);
    id v17 = *(id *)(a1 + 48);
    dispatch_async(v12, block);
  }
}

id sub_1000258D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendRemoteControlCommand:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100025C7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100025CA0(uint64_t a1, void *a2)
{
  id v35 = a2;
  kdebug_trace();
  uint64_t v37 = a1;
  id v3 = [*(id *)(a1 + 32) optionValueForKey:kMRMediaRemoteOptionDirectUserInteraction];
  unsigned int v4 = [v3 BOOLValue];

  double v34 = [v35 error];
  uint64_t v5 = [v34 domain];
  if (![v5 isEqualToString:kMRMediaRemoteFrameworkErrorDomain]) {
    goto LABEL_7;
  }
  id v6 = [v34 code];

  if (v6 == (id)46) {
    unsigned int v7 = v4;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 == 1)
  {
    id v8 = *(void **)(v37 + 40);
    uint64_t v5 = MRLocalizedString();
    id v9 = MRLocalizedString();
    uint64_t v10 = MRLocalizedString();
    id v11 = objc_msgSend(v8, "_onQueue_presentDialogWithTitle:message:defaultButtonTitle:alternateButtonTitle:completion:", v5, v9, v10, 0, 0);

LABEL_7:
  }
  id v33 = [v35 playerPath];
  if (!v34 && v33)
  {
    id v32 = [*(id *)(v37 + 40) _effectiveContextIDForCommand:*(void *)(v37 + 32)];
    if (v32
      && objc_msgSend(*(id *)(v37 + 40), "_isCommandCacheCreating:", objc_msgSend(*(id *)(v37 + 32), "commandType")))
    {
      *(void *)uint64_t v50 = 0;
      double v51 = v50;
      uint64_t v52 = 0x3032000000;
      double v53 = sub_100026230;
      double v54 = sub_100026240;
      id v55 = 0;
      Swift::Int v42 = _NSConcreteStackBlock;
      uint64_t v43 = 3221225472;
      char v44 = sub_100026248;
      uint64_t v45 = &unk_100416230;
      id v12 = v33;
      id v46 = v12;
      id v13 = v32;
      uint64_t v14 = *(void *)(v37 + 40);
      id v36 = v13;
      id v47 = v13;
      uint64_t v48 = v14;
      uint64_t v49 = v50;
      msv_dispatch_sync_on_queue();
      long long v15 = [*((id *)v51 + 5) completionBlockDictionary];
      BOOL v16 = [v15 count] == 0;

      if (!v16)
      {
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v17 = [*((id *)v51 + 5) completionBlockDictionary];
        id v18 = [v17 countByEnumeratingWithState:&v38 objects:v60 count:16];
        if (v18)
        {
          uint64_t v19 = *(void *)v39;
          do
          {
            for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v39 != v19) {
                objc_enumerationMutation(v17);
              }
              id v21 = *(void **)(*((void *)&v38 + 1) + 8 * i);
              id v22 = objc_msgSend(*((id *)v51 + 5), "commandDictionary", v32);
              __int16 v23 = [v22 objectForKeyedSubscript:v21];
              id v24 = [v23 mutableCopy];

              [v24 setPlayerPath:v12];
              objc_msgSend(v24, "setCommandType:", objc_msgSend(v21, "unsignedIntValue"));
              uint64_t v25 = _MRLogForCategory();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543618;
                id v57 = v12;
                __int16 v58 = 2114;
                id v59 = v36;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Sending cachable command to player path %{public}@ for context %{public}@.", buf, 0x16u);
              }

              uint64_t v26 = *(void **)(v37 + 40);
              long long v27 = [*((id *)v51 + 5) completionBlockDictionary];
              id v28 = [v27 objectForKeyedSubscript:v21];
              [v26 _forwardCommand:v24 completion:v28];
            }
            id v18 = [v17 countByEnumeratingWithState:&v38 objects:v60 count:16];
          }
          while (v18);
        }
      }
      _Block_object_dispose(v50, 8);
    }
  }
  if (*(void *)(v37 + 48))
  {
    id v29 = _MRLogForCategory();
    id v30 = [*(id *)(v37 + 32) commandID];
    double v31 = (char *)[v30 hash];

    if ((unint64_t)(v31 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v31, "SendCommandDaemon", "", v50, 2u);
    }

    (*(void (**)(void))(*(void *)(v37 + 48) + 16))();
  }
}

void sub_1000261FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_100026230(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100026240(uint64_t a1)
{
}

void sub_100026248(void *a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    int v10 = 138543618;
    uint64_t v11 = v3;
    __int16 v12 = 2114;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Caching resolved player path %{public}@ for context %{public}@.", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v5 = [*(id *)(a1[6] + 64) objectForKeyedSubscript:a1[5]];
  uint64_t v6 = *(void *)(a1[7] + 8);
  unsigned int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(void *)(*(void *)(a1[7] + 8) + 40))
  {
    uint64_t v8 = a1[4];
    id v9 = [*(id *)(a1[6] + 64) objectForKeyedSubscript:a1[5]];
    [v9 setPlayerPath:v8];
  }
  else
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10032A91C(v9);
    }
  }
}

void sub_100026384(uint64_t a1)
{
  id v2 = objc_alloc_init(MRDRedirectionCacheEntry);
  uint64_t v3 = +[NSMutableDictionary dictionary];
  [(MRDRedirectionCacheEntry *)v2 setCommandDictionary:v3];

  uint64_t v4 = +[NSMutableDictionary dictionary];
  [(MRDRedirectionCacheEntry *)v2 setCompletionBlockDictionary:v4];

  [*(id *)(*(void *)(a1 + 32) + 64) setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];
  dispatch_time_t v5 = dispatch_time(0, 60000000000);
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000264A8;
  v9[3] = &unk_1004158D8;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v10 = v7;
  uint64_t v11 = v8;
  dispatch_after(v5, v6, v9);
}

id sub_1000264A8(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Expiring player path for context %{public}@.", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 64) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_100026564(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = _MRLogForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v4)
    {
      id v9 = *(void **)(a1 + 40);
      int v18 = 138543362;
      uint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No assistant cache active, context: %{public}@.", (uint8_t *)&v18, 0xCu);
    }
    goto LABEL_11;
  }
  if (v4)
  {
    int v5 = *(void **)(a1 + 40);
    int v18 = 138543362;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Got a cacheable command from assistant, context: %{public}@.", (uint8_t *)&v18, 0xCu);
  }

  uint64_t v6 = [v2 playerPath];

  if (v6)
  {
    uint64_t v3 = [v2 playerPath];
    if (v3)
    {
      [*(id *)(a1 + 56) setPlayerPath:v3];
      id v7 = _MRLogForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = [*(id *)(a1 + 56) playerPath];
        int v18 = 138543362;
        uint64_t v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Redirecting to cached path: %{public}@", (uint8_t *)&v18, 0xCu);
      }
    }
LABEL_11:

    goto LABEL_15;
  }
  id v10 = _MRLogForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void **)(a1 + 40);
    int v18 = 138543362;
    uint64_t v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Adding command to assistant cache, context: %{public}@.", (uint8_t *)&v18, 0xCu);
  }

  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = [v2 commandDictionary];
  uint64_t v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 48) commandType]);
  [v13 setObject:v12 forKeyedSubscript:v14];

  id v15 = objc_retainBlock(*(id *)(a1 + 64));
  BOOL v16 = [v2 completionBlockDictionary];
  id v17 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 48) commandType]);
  [v16 setObject:v15 forKeyedSubscript:v17];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
LABEL_15:
}

void sub_100026A6C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100026B40;
    block[3] = &unk_1004162A8;
    id v10 = v6;
    int v11 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

uint64_t sub_100026B40(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_100026B58(id *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v4 = [a1[4] commandID];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Command <%{public}@> ignored because of device state", (uint8_t *)&buf, 0xCu);
    }
    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    id v5 = dispatch_group_create();
    id v6 = objc_alloc((Class)NSString);
    id v7 = [a1[4] commandID];
    id v8 = [v6 initWithFormat:@"com.apple.mediaremote.broadcastcommand.%@", v7];
    id v9 = (const char *)[v8 UTF8String];
    id v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v33 = dispatch_queue_create(v9, v10);

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v63 = 0x2020000000;
    int v64 = 0;
    id v36 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a1[5], "count"));
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    obint64_t j = a1[5];
    id v11 = [obj countByEnumeratingWithState:&v55 objects:v61 count:16];
    dispatch_queue_t v12 = v33;
    if (v11)
    {
      uint64_t v35 = *(void *)v56;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v56 != v35) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v55 + 1) + 8 * i);
          id v15 = [a1[4] mutableCopy];
          BOOL v16 = [a1[6] _createBroadcastCommandPlayerPathForClient:v14];
          [v15 setPlayerPath:v16];

          dispatch_group_enter(v5);
          id v17 = _MRLogForCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = v5;
            uint64_t v19 = [a1[4] commandID];
            id v20 = [v14 bundleIdentifier];
            *(_DWORD *)id v59 = 138543618;
            *(void *)&v59[4] = v19;
            *(_WORD *)&v59[12] = 2112;
            *(void *)&v59[14] = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Broadcasting command <%{public}@> to client: <%@>", v59, 0x16u);

            id v5 = v18;
            dispatch_queue_t v12 = v33;
          }
          id v21 = a1[6];
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_100027120;
          v48[3] = &unk_100416320;
          p_long long buf = &buf;
          uint64_t v49 = v12;
          id v22 = v36;
          id v23 = a1[6];
          id v50 = v22;
          id v51 = v23;
          uint64_t v52 = v14;
          double v53 = v5;
          [v21 _sendRemoteControlCommand:v15 toDestinationClient:v14 withLegacyCompletion:v48];
        }
        id v11 = [obj countByEnumeratingWithState:&v55 objects:v61 count:16];
      }
      while (v11);
    }

    *(void *)id v59 = 0;
    *(void *)&v59[8] = v59;
    *(void *)&v59[16] = 0x2020000000;
    char v60 = 0;
    id v24 = +[MRUserSettings currentSettings];
    [v24 broadcastCommandWaitDuration];
    double v26 = v25;

    id v27 = objc_alloc((Class)MSVTimer);
    id v28 = v12;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100027254;
    v42[3] = &unk_100416348;
    id v46 = v59;
    id v43 = a1[4];
    double v47 = v26;
    id v45 = a1[7];
    id v29 = v36;
    id v44 = v29;
    id v30 = [v27 initWithInterval:0 repeats:v28 queue:v42 block:v26];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002735C;
    block[3] = &unk_100416370;
    long long v40 = v59;
    id v31 = a1[7];
    long long v41 = &buf;
    id v38 = v29;
    id v39 = v31;
    id v32 = v29;
    dispatch_group_notify(v5, v28, block);

    _Block_object_dispose(v59, 8);
    _Block_object_dispose(&buf, 8);
  }
}

void sub_1000270D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100027120(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
  if (*(_DWORD *)(v6 + 24)) {
    *(_DWORD *)(v6 + 24) = a2;
  }
  id v8 = *(id *)(a1 + 40);
  id v9 = v5;
  id v7 = v5;
  msv_dispatch_sync_on_queue();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1000271F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) _createBroadcastCommandResponseFromStatuses:*(void *)(a1 + 48) forClient:*(void *)(a1 + 56)];
  [v1 addObject:v2];
}

uint64_t sub_100027254(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(result + 56) + 8) + 24))
  {
    uint64_t v1 = result;
    id v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = [*(id *)(v1 + 32) commandID];
      uint64_t v4 = *(void *)(v1 + 64);
      int v5 = 138543618;
      uint64_t v6 = v3;
      __int16 v7 = 2048;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Broadcast command %{public}@ timedout after %lf seconds", (uint8_t *)&v5, 0x16u);
    }
    *(unsigned char *)(*(void *)(*(void *)(v1 + 56) + 8) + 24) = 1;
    return (*(uint64_t (**)(void))(*(void *)(v1 + 48) + 16))();
  }
  return result;
}

void *sub_10002735C(void *result)
{
  uint64_t v1 = *(void *)(result[6] + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    *(unsigned char *)(v1 + 24) = 1;
    return (void *)(*(uint64_t (**)(void, void, void))(result[5] + 16))(result[5], *(unsigned int *)(*(void *)(result[7] + 8) + 24), result[4]);
  }
  return result;
}

void sub_100027430(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  id v15 = sub_100027640;
  BOOL v16 = &unk_1004163C0;
  id v17 = *(id *)(a1 + 40);
  id v4 = v2;
  id v18 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:&v13];
  if (objc_msgSend(v4, "count", v13, v14, v15, v16))
  {
    int v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [v4 count];
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 134218242;
      id v20 = v6;
      __int16 v21 = 2112;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing %lld context(s) for client %@", buf, 0x16u);
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 32) removeObjectsForKeys:v4];
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = [*(id *)(a1 + 32) commandClientsRestriction];
  id v10 = [v9 requester];

  if (v8 == v10)
  {
    id v11 = _MRLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_queue_t v12 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      id v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[RestrictedCommandClients Mode] %@ is gone, disabling restricted mode", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setCommandClientsRestriction:0];
  }
}

void sub_100027640(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  int v5 = [a3 originatingAppDisplayID];
  id v6 = [*(id *)(a1 + 32) bundleIdentifier];
  unsigned int v7 = [v5 isEqualToString:v6];

  if (v7) {
    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_10002790C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) context];
  uint64_t v3 = [*(id *)(a1 + 32) requestInfo];
  id v4 = [v2 destinationPlayerPath];
  int v5 = +[MRDMediaRemoteServer server];
  id v6 = [v5 nowPlayingServer];
  unsigned int v7 = [v4 origin];
  id v8 = [v6 originClientForOrigin:v7];

  id v9 = [v8 createNewApplicationConnectionCallback];
  if (v9)
  {
    id v10 = [[MRDApplicationConnection alloc] initWithContext:v2];
    [(MRDApplicationConnection *)v10 setClientBoundMessageHandler:*(void *)(a1 + 48)];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100027AF8;
    v15[3] = &unk_100416410;
    v15[4] = *(void *)(a1 + 40);
    BOOL v16 = v10;
    id v18 = *(id *)(a1 + 56);
    id v17 = v2;
    id v11 = (void (*)(void *, MRDApplicationConnection *, void *, void *))v9[2];
    dispatch_queue_t v12 = v10;
    v11(v9, v12, v3, v15);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    id v14 = [objc_alloc((Class)NSError) initWithMRError:14];
    (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v14);
  }
}

void sub_100027AF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100027BE4;
  block[3] = &unk_1004163E8;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100027BE4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_msgSend(v2, "invalidate:");
    id v4 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v4();
  }
  else
  {
    [v2 activate];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    uint64_t v5 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 48) applicationConnections];
    uint64_t v6 = [*(id *)(a1 + 56) identifier];
    [v7 setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100027D48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationConnections];
  uint64_t v3 = [*(id *)(a1 + 40) context];
  id v4 = [v3 identifier];
  id v5 = [v2 objectForKeyedSubscript:v4];

  [v5 handleClientBoundMessage:*(void *)(a1 + 40)];
}

void sub_100027E7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationConnections];
  uint64_t v3 = [*(id *)(a1 + 40) context];
  id v4 = [v3 identifier];
  id v5 = [v2 objectForKeyedSubscript:v4];

  [v5 handleServerBoundMessage:*(void *)(a1 + 40)];
}

void sub_100027FB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationConnections];
  uint64_t v3 = [*(id *)(a1 + 40) context];
  id v4 = [v3 identifier];
  id v6 = [v2 objectForKeyedSubscript:v4];

  id v5 = [*(id *)(a1 + 40) error];
  [v6 invalidate:v5];
}

id sub_1000282E0(uint64_t a1)
{
  [*(id *)(a1 + 32) setEnqueuedCommands:*(void *)(*(void *)(a1 + 40) + 16)];
  id v2 = [*(id *)(*(void *)(a1 + 40) + 32) allValues];
  [*(id *)(a1 + 32) setRemoteControlContexts:v2];

  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 104);

  return [v3 setCommandClientsRestriction:v4];
}

MRDMutableRemoteControlCommand *sub_100028558(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = MRCreatePlayerPathFromXPCMessage();
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "MRXPC_COMMAND_KEY");
  id v7 = (void *)MRCreateDataFromXPCMessage();

  id v8 = [v5 copy];
  if ([v3 entitlements] & 2) != 0 || (sub_100031130(v5))
  {
    int v9 = 0;
  }
  else
  {
    [v8 setClient:0];
    [v8 setPlayer:0];
    int v9 = 1;
  }
  id v10 = +[MRDMediaRemoteServer server];
  uint64_t v11 = [v10 nowPlayingServer];
  id v12 = [v11 resolveExistingPlayerPath:v8];

  id v13 = [MRDMutableRemoteControlCommand alloc];
  id v14 = [v3 bundleIdentifier];
  id v15 = [(MRDRemoteControlCommand *)v13 initWithCommandType:uint64 playerPath:v12 unresolvedPlayerPath:v8 senderAppDisplayID:v14 optionsData:v7];

  if (v9)
  {
    id v16 = objc_alloc((Class)NSString);
    id v17 = [v3 bundleIdentifier];
    id v18 = [(MRDRemoteControlCommand *)v15 commandID];
    id v19 = [v16 initWithFormat:@"Client <%@> missing entitlement needed to send command <%@> to arbitrary apps. Sending to NowPlayingApp instead of <%@>.", v17, v18, v5];

    id v20 = _MRLogForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_10032A9D4();
    }

    __int16 v21 = _MRLogForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
      sub_10032A960();
    }
  }

  return v15;
}

void sub_100028790(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace();
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  id v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
    if (reply)
    {
      id v6 = _MRLogForCategory();
      id v7 = [*(id *)(a1 + 40) commandID];
      id v8 = (char *)[v7 hash];

      if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
      {
        *(_WORD *)int v9 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v8, "SendCommandXPCResultFromDaemon", "", v9, 2u);
      }

      MRAddCommandResultToXPCMessage();
      xpc_connection_send_message(v4, reply);
    }
  }
}

void sub_100028A10(uint64_t a1, unsigned int a2, void *a3)
{
  id v9 = a3;
  xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  id v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
    id v7 = reply;
    if (reply)
    {
      xpc_dictionary_set_uint64(reply, "MRXPC_COMMAND_SEND_ERROR_KEY", a2);
      if (v9)
      {
        id v8 = MRCreateDataFromArray();
        MRAddDataToXPCMessage();
      }
      xpc_connection_send_message(v5, v7);
    }
  }
}

NSData *__cdecl sub_100028AE0(id a1, _MRSendCommandResultMessageProtobuf *a2)
{
  return (NSData *)[(_MRSendCommandResultMessageProtobuf *)a2 data];
}

void sub_100028BF8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) remoteUIService];
  unsigned __int8 v3 = [v2 isValid];

  if ((v3 & 1) == 0)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 32) bundleIdentifier];
    sub_100028CC4(v4, v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    id v6 = [[MRDMediaRemoteUIService alloc] initWithConfigurationData:v7 endpoint:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) setRemoteUIService:v6];
  }
}

id sub_100028CC4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = +[MRDMediaRemoteServer server];
  id v6 = [v5 routingServer];
  id v7 = [v6 recommendationController];
  id v8 = [v7 _updateMediaControlsBlob:v4 sender:v3];

  return v8;
}

void sub_100028ED0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) remoteUIService];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100028F70;
  v3[3] = &unk_100415F80;
  id v4 = *(id *)(a1 + 40);
  [v2 presentWithCompletion:v3];
}

void sub_100028F70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100029008;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_100029008()
{
  return MRAddClientErrorToXPCMessage();
}

id sub_100029150(uint64_t a1)
{
  return [*(id *)(a1 + 32) setRemoteUIService:0];
}

void sub_10002922C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100029328;
  v8[3] = &unk_1004162F8;
  v8[4] = v5;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v4;
  id v7 = v4;
  dispatch_sync(v6, v8);
  MRAddPropertyListToXPCMessage();
}

void sub_100029328(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = [*(id *)(a1 + 40) bundleIdentifier];
  id v4 = [v2 objectForKeyedSubscript:v3];

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v9);
        if (!objc_msgSend(*(id *)(a1 + 48), "isResolved", (void)v17)
          || ([v10 playerPath],
              id v11 = objc_claimAutoreleasedReturnValue(),
              int v12 = MRNowPlayingPlayerPathEqualToPlayerPath(),
              v11,
              v12))
        {
          id v13 = *(void **)(a1 + 56);
          id v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v10 commandType]);
          [v13 addObject:v14];
        }
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }

  id v15 = *(void **)(*(void *)(a1 + 32) + 24);
  id v16 = [*(id *)(a1 + 40) bundleIdentifier];
  LODWORD(v15) = [v15 containsObject:v16];

  if (v15) {
    [*(id *)(a1 + 56) addObject:&off_100437CC8];
  }
}

void sub_1000297C0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_100029818(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 24))
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v2;
  }
  if (*(void *)(a1 + 40))
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 24);
    objc_msgSend(v5, "addObject:");
  }
}

void sub_10002988C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = (void *)a1[4];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100029B90;
    v29[3] = &unk_100415DC8;
    id v30 = v6;
    sub_100014324(v8, v29);
    id v9 = v30;
  }
  else
  {
    id v10 = +[MRDMediaRemoteServer server];
    id v11 = [v10 nowPlayingServer];
    id v9 = [v11 queryExistingPlayerPathForXPCMessage:a1[4] forClient:a1[5]];

    int v12 = [v9 playerPath];
    MRAddPlayerPathToXPCMessage();

    id v13 = MRCreatePlayerPathFromXPCMessage();
    id v14 = +[MRDMediaRemoteServer server];
    id v15 = [v14 nowPlayingServer];
    id v16 = [v13 origin];
    long long v17 = [v15 originClientForOrigin:v16];

    long long v18 = [v17 activeNowPlayingClient];
    long long v19 = [v18 activePlayerClient];

    uint64_t v20 = [v9 playerClient];
    if ((void *)v20 == v19)
    {
    }
    else
    {
      __int16 v21 = (void *)v20;
      unsigned int v22 = [v19 isPlaying];

      if (v22)
      {
        uint64_t v31 = kMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
        CFStringRef v32 = @"Pause because migration";
        +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
        id v23 = [v19 playerPath];
        MRMediaRemoteSendCommandToPlayer();
      }
    }
    id v24 = [v5 bundleIdentifier];
    sub_100169F18(v24);

    uint64_t v25 = a1[4];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100029BA0;
    v27[3] = &unk_100415DF0;
    double v26 = (void *)a1[7];
    v27[4] = a1[6];
    id v28 = v26;
    [v5 relayXPCMessage:v25 andReply:1 resultCallback:v27];
  }
}

uint64_t sub_100029B90()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_100029BA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100029C34;
  v3[3] = &unk_1004158D8;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

id sub_100029C34(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

void sub_100029C40(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSError) initWithMRError:4 description:@"No bundleID provided"];
  MRAddClientErrorToXPCMessage();
}

void sub_10002A364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002A3B0(uint64_t a1)
{
  id WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && notify_is_valid_token(WeakRetained[14])) {
    notify_cancel(WeakRetained[14]);
  }
  sub_100014324(*(void **)(a1 + 32), &stru_100416578);
}

void sub_10002A428(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)MRAudioFadeResponseMessage) initWithFadeDuration:1000 error:0];
  MRAddProtobufToXPCMessage();
}

void sub_10002A498(id *a1, int a2)
{
  if ([a1[4] disarm])
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 6);
    if (WeakRetained)
    {
      uint64_t state64 = 0;
      uint32_t state = notify_get_state(a2, &state64);
      if (state)
      {
        int v6 = state;
        id v7 = _MRLogForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_10032AA48(v6, v7);
        }
      }
      dispatch_time_t v8 = dispatch_time(0, 1000000 * state64);
      id v9 = WeakRetained[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002A5D0;
      block[3] = &unk_1004165E8;
      id v11 = a1[5];
      uint64_t v12 = state64;
      dispatch_after(v8, v9, block);
    }
    notify_cancel(a2);
  }
}

uint64_t sub_10002A5D0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10002A644;
  v3[3] = &unk_1004165C0;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return sub_100014324(v1, v3);
}

void sub_10002A644(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRAudioFadeResponseMessage) initWithFadeDuration:*(void *)(a1 + 32) error:0];
  MRAddProtobufToXPCMessage();
}

void sub_10002A6C0(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:0];
  MRAddProtobufToXPCMessage();
}

NSData *__cdecl sub_10002AAD4(id a1, NSData *a2)
{
  id v2 = a2;

  return v2;
}

uint64_t sub_10002AAFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isEqualToData:*(void *)(a1 + 32)]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = [v3 isEqualToData:*(void *)(a1 + 40)] ^ 1;
  }

  return v4;
}

void sub_10002AB50(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 allObjects];
  MRCreateDataFromArray();
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  MRAddDataToXPCMessage();
}

NSData *__cdecl sub_10002ABD4(id a1, NSData *a2)
{
  id v2 = a2;

  return v2;
}

void sub_10002ADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002ADB8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_createAndActivateConnection:forClient:", *(void *)(a1 + 40), *(void *)(a1 + 48));

  return _objc_release_x1();
}

void sub_10002AE08(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    id v3 = a2;
    [v2 code];
    MRAddErrorToXPCMessage();
  }
}

void sub_10002AF5C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) applicationConnections];
  id v2 = [*(id *)(a1 + 40) identifier];
  id v3 = [v4 objectForKeyedSubscript:v2];
  [v3 invalidate:*(void *)(a1 + 48)];
}

void sub_10002B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10002B2AC(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) applicationConnections];
  id v2 = [*(id *)(a1 + 40) identifier];
  uint64_t v3 = [v6 objectForKeyedSubscript:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10002B330(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    id v3 = a2;
    [v2 code];
    MRAddErrorToXPCMessage();
  }
}

void sub_10002B784(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_10002B7A4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    [v5 type];
    MRCreateXPCMessage();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    MRAddProtobufToXPCMessage();
    [WeakRetained relayXPCMessage:v7 andReply:0];
  }
  else
  {
    id v7 = [objc_alloc((Class)NSError) initWithMRError:179];
    [v8 invalidate:v7];
  }
}

void sub_10002B88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B970;
  block[3] = &unk_100416780;
  void block[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10002B970(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) applicationConnections];
  id v3 = [*(id *)(a1 + 40) identifier];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];

  if (v4)
  {
    [v4 setType:0];
    if (*(void *)(a1 + 48))
    {
      objc_msgSend(v4, "invalidate:");
    }
    else
    {
      [v4 setLocalInvalidationXPCClient:*(void *)(a1 + 56)];
      [v4 activate];
    }
  }
  else
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlServer] createAndActivateConnection - connection: %@ lost before activation", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_10002BD40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationConnections];
  [v2 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

id *sub_10002BE0C(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] _clearAllQueuedCommandsForReason:@"phone call began"];
  }
  return result;
}

void sub_10002C020(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    int v7 = *(_DWORD *)(a1 + 64);
    unsigned __int8 v8 = [*(id *)(a1 + 32) appOptions];
    uint64_t v6 = [*(id *)(a1 + 32) routeUID];
    if ([v6 length]) {
      BOOL v9 = (v7 | 2) == 2;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      id v10 = [*(id *)(a1 + 40) routingServer];
      [v10 pickCachedRouteWithUID:v6];
    }
    uint64_t v11 = [*(id *)(a1 + 48) _resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:*(void *)(a1 + 32)];
    uint64_t v12 = [*(id *)(a1 + 48) _destinationClientForRemoteControlCommand:*(void *)(a1 + 32)];
    if (v12 | v11)
    {
      id v16 = (void *)v12;
    }
    else
    {
      id v13 = [*(id *)(a1 + 40) nowPlayingServer];
      uint64_t v11 = [v13 localActiveClientBundleIdentifier];
      if (!v11)
      {
        id v14 = [v13 localOriginClient];
        id v15 = [v14 nowPlayingDataSource];

        uint64_t v11 = [v15 nowPlayingApplicationDisplayID];

        if (!v11) {
          uint64_t v11 = MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
        }
      }
      id v16 = [*(id *)(a1 + 40) clientForBundleIdentifier:v11];
    }
    uint64_t v17 = [*(id *)(a1 + 32) destinationAppDisplayID];
    if (v17)
    {
      long long v18 = (void *)v17;
      long long v19 = [*(id *)(a1 + 32) destinationAppDisplayID];
      unsigned __int8 v20 = [(id)v11 isEqualToString:v19];

      if ((v20 & 1) == 0)
      {
        id v21 = [objc_alloc((Class)MRClient) initWithProcessIdentifier:sub_10016A02C((void *)v11) bundleIdentifier:v11];
        id v22 = objc_alloc((Class)MRPlayerPath);
        id v23 = +[MROrigin localOrigin];
        id v24 = [v22 initWithOrigin:v23 client:v21 player:0];

        uint64_t v25 = +[MRDMediaRemoteServer server];
        double v26 = [v25 nowPlayingServer];

        id v27 = [v26 resolveExistingPlayerPath:v24];
        if (v27) {
          [*(id *)(a1 + 32) setPlayerPath:v27];
        }
      }
    }
    unsigned __int8 v28 = [*(id *)(a1 + 32) shouldImplicitlyLaunchApplication];
    if (v16)
    {
      [*(id *)(a1 + 48) _sendRemoteControlCommand:*(void *)(a1 + 32) toDestinationClient:v16 withCompletion:*(void *)(a1 + 56)];
    }
    else
    {
      char v29 = v28 ^ 1;
      if (v8) {
        char v29 = 0;
      }
      if (v29)
      {
        id v30 = [*(id *)(a1 + 32) unresolvedPlayerPath];
        uint64_t v31 = [v30 client];

        CFStringRef v32 = _MRLogForCategory();
        BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
        if (v31)
        {
          if (v33)
          {
            uint64_t v34 = *(void *)(a1 + 32);
            int v39 = 138412290;
            uint64_t v40 = v34;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.", (uint8_t *)&v39, 0xCu);
          }

          uint64_t v35 = *(void *)(a1 + 56);
          if (!v35) {
            goto LABEL_39;
          }
          uint64_t v36 = 1;
        }
        else
        {
          if (v33)
          {
            uint64_t v37 = *(void *)(a1 + 32);
            int v39 = 138412290;
            uint64_t v40 = v37;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "No now playing client can be found for command %@, and the option to launch the app was not included. Dropping command.", (uint8_t *)&v39, 0xCu);
          }

          uint64_t v35 = *(void *)(a1 + 56);
          if (!v35) {
            goto LABEL_39;
          }
          uint64_t v36 = 18;
        }
        id v38 = +[MRCommandResult commandResultWithSendError:v36];
        (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v38);
      }
      else
      {
        [*(id *)(a1 + 48) _enqueueCommand:*(void *)(a1 + 32) forApplication:v11 withCompletion:*(void *)(a1 + 56)];
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v39 = 138543362;
    uint64_t v40 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Command ignored because of device state: %{public}@", (uint8_t *)&v39, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = +[MRCommandResult commandResultWithSendError:3 description:@"PhoneCall Active"];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
LABEL_40:
  }
}

void sub_10002C6B4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 sendError];
  id v5 = [v3 handlerReturnStatuses];

  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
}

uint64_t sub_10002C92C(uint64_t a1)
{
  +[MRCommandResult commandResultWithSendError:20];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }

  return _objc_release_x1();
}

void sub_10002C998(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
    }
  }
}

void sub_10002CA00(id *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [a1[4] commandID];
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Command <%{public}@> ignored because of device state", buf, 0xCu);
    }
    id v5 = (void (**)(id, id))a1[7];
    id v6 = +[MRCommandResult commandResultWithSendError:3 description:@"PhoneCall Active"];
    v5[2](v5, v6);
    goto LABEL_36;
  }
  int v7 = [a1[5] commandClientsRestriction];

  if (!v7)
  {
LABEL_11:
    id v14 = a1[4];
    id v13 = a1[5];
    id v15 = a1 + 4;
    id v16 = a1[6];
    id v79 = 0;
    uint64_t v17 = [v13 _resolveCommandBeforeSend:v14 toClient:v16 error:&v79];
    id v6 = v79;
    if (v6)
    {
      long long v18 = _MRLogForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_10032AB5C(a1 + 4);
      }

      long long v19 = (void (**)(id, void *))a1[7];
      unsigned __int8 v20 = +[MRCommandResult commandResultWithSendError:3 description:@"Processing error"];
      v19[2](v19, v20);

LABEL_35:
      goto LABEL_36;
    }
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v85 = sub_100026230;
    uint64_t v86 = sub_100026240;
    id v87 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = &v75;
    uint64_t v77 = 0x2020000000;
    unsigned __int8 v78 = 0;
    unsigned __int8 v78 = [*v15 nowPlayingAppStackEligible];
    if (!*((unsigned char *)v76 + 24))
    {
LABEL_30:
      uint64_t v52 = _MRLogForCategory();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        double v53 = [a1[6] bundleIdentifier];
        double v54 = [a1[6] displayName];
        *(_DWORD *)uint64_t v80 = 138543874;
        *(void *)&v80[4] = v17;
        *(_WORD *)&v80[12] = 2114;
        *(void *)&v80[14] = v53;
        *(_WORD *)&v80[22] = 2114;
        CFStringRef v81 = v54;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Sending command %{public}@ to %{public}@ (%{public}@).", v80, 0x20u);
      }
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_10002D934;
      v60[3] = &unk_1004168E8;
      id v55 = a1[6];
      v60[4] = a1[5];
      id v61 = v17;
      id v62 = a1[6];
      int v64 = buf;
      id v63 = a1[7];
      [v55 sendRemoteControlCommand:v61 withCompletionBlock:v60];
      long long v56 = [a1[5] _remoteControlContextForCommand:a1[4]];
      if (v56)
      {
        long long v57 = [a1[6] bundleIdentifier];
        long long v58 = [[MRDRoutedRemoteControlCommand alloc] initWithCommand:*v15 routedApp:v57];
        [v56 addRoutedCommand:v58];
      }
      _Block_object_dispose(&v75, 8);
      _Block_object_dispose(buf, 8);

      goto LABEL_35;
    }
    id v26 = a1[5];
    id v27 = *((void *)v26 + 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10002D3E4;
    block[3] = &unk_100416870;
    void block[4] = v26;
    id v73 = a1[4];
    unint64_t v74 = &v75;
    dispatch_sync(v27, block);
    if (*((unsigned char *)v76 + 24))
    {
      unsigned __int8 v28 = +[MRDMediaRemoteServer server];
      char v29 = [v28 nowPlayingServer];
      id v30 = [v29 localActivePlayerClient];
      unsigned int v31 = [v30 isPlaying];

      if (v31)
      {
        CFStringRef v32 = _MRLogForCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v33 = [*v15 commandID];
          *(_DWORD *)uint64_t v80 = 138543874;
          *(void *)&v80[4] = @"sendRemoteControlCommand";
          *(_WORD *)&v80[12] = 2114;
          *(void *)&v80[14] = v33;
          *(_WORD *)&v80[22] = 2112;
          CFStringRef v81 = @"Device is already playing. Demoting nowPlayingAppStackPopEligible command to ineligible";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", v80, 0x20u);
        }
        *((unsigned char *)v76 + 24) = 0;
      }
      else if (*((unsigned char *)v76 + 24))
      {
        goto LABEL_26;
      }
    }
    uint64_t v34 = +[MRDMediaRemoteServer server];
    uint64_t v35 = [v34 nowPlayingServer];
    uint64_t v36 = [v35 localOriginClient];
    uint64_t v37 = [v36 nowPlayingDataSource];

    [v37 popNowPlayingAppStack:0 forReason:6];
LABEL_26:

    if (*((unsigned char *)v76 + 24))
    {
      id v38 = _MRLogForCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        int v39 = [*v15 commandID];
        *(_DWORD *)uint64_t v80 = 138543874;
        *(void *)&v80[4] = @"sendRemoteControlCommand";
        *(_WORD *)&v80[12] = 2114;
        *(void *)&v80[14] = v39;
        *(_WORD *)&v80[22] = 2112;
        CFStringRef v81 = @"Sending nowPlayingAppStackPopEligible command...";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", v80, 0x20u);
      }
      *(void *)uint64_t v80 = 0;
      *(void *)&v80[8] = v80;
      *(void *)&v80[16] = 0x3032000000;
      CFStringRef v81 = (const __CFString *)sub_100026230;
      BOOL v82 = sub_100026240;
      id v83 = 0;
      id v40 = objc_alloc((Class)MSVTimer);
      long long v41 = +[MRUserSettings currentSettings];
      [v41 nowPlayingAppStackFailedPlayInterval];
      double v43 = v42;
      id v44 = dispatch_get_global_queue(0, 0);
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472;
      v68[2] = sub_10002D4F4;
      v68[3] = &unk_100416898;
      uint64_t v70 = v80;
      int8x16_t v59 = *(int8x16_t *)v15;
      id v45 = *v15;
      int8x16_t v69 = vextq_s8(v59, v59, 8uLL);
      uint64_t v71 = buf;
      id v46 = [v40 initWithInterval:0 repeats:v44 queue:v68 block:v43];

      double v47 = +[NSNotificationCenter defaultCenter];
      uint64_t v48 = kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification;
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v65[2] = sub_10002D7A4;
      v65[3] = &unk_1004168C0;
      v65[4] = a1[5];
      uint64_t v67 = v80;
      id v49 = v46;
      id v66 = v49;
      uint64_t v50 = [v47 addObserverForName:v48 object:0 queue:0 usingBlock:v65];
      id v51 = *(void **)(*(void *)&v80[8] + 40);
      *(void *)(*(void *)&v80[8] + 40) = v50;

      _Block_object_dispose(v80, 8);
    }
    goto LABEL_30;
  }
  id v6 = [a1[6] auditToken];
  if (v6)
  {
    unsigned __int8 v8 = [a1[5] commandClientsRestriction];
    BOOL v9 = [v8 allowedAuditTokens];
    unsigned __int8 v10 = [v9 containsObject:v6];

    if (v10)
    {
      uint64_t v11 = _MRLogForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = a1[4];
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[RestrictedCommandClients Mode] Allowed command %@. Allow-listed.", buf, 0xCu);
      }

      goto LABEL_11;
    }
  }
  id v21 = _MRLogForCategory();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = a1[4];
    id v23 = a1[6];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v22;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[RestrictedCommandClients Mode] Blocked command %@. %@ is not allow-listed", buf, 0x16u);
  }

  id v24 = (void (**)(id, void *))a1[7];
  uint64_t v25 = +[MRCommandResult commandResultWithSendError:3 description:@"RestrictedCommandClients Mode - Client not in allow list"];
  v24[2](v24, v25);

LABEL_36:
}

void sub_10002D374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10002D3E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 80))
  {
    uint64_t v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) commandID];
      int v5 = 138543874;
      CFStringRef v6 = @"sendRemoteControlCommand";
      __int16 v7 = 2114;
      unsigned __int8 v8 = v4;
      __int16 v9 = 2112;
      CFStringRef v10 = @"A previous nowPlayingAppStackPopEligible command already in progress. Demoting to ineligible";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", (uint8_t *)&v5, 0x20u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    *(unsigned char *)(v1 + 80) = 1;
  }
}

void sub_10002D4F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 8);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10002D73C;
  v18[3] = &unk_100415940;
  uint64_t v4 = *(void *)(a1 + 48);
  v18[4] = v2;
  v18[5] = v4;
  dispatch_async(v3, v18);
  int v5 = +[MRDMediaRemoteServer server];
  CFStringRef v6 = [v5 nowPlayingServer];
  __int16 v7 = [v6 localActivePlayerClient];
  unsigned int v8 = [v7 isPlaying];

  if (v8)
  {
    __int16 v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v10 = [*(id *)(a1 + 40) commandID];
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v20 = @"sendRemoteControlCommand";
      __int16 v21 = 2114;
      id v22 = v10;
      __int16 v23 = 2112;
      CFStringRef v24 = @"Something is already playing. Cancelling nowPlayingAppStackPop";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
  }
  else
  {
    id v11 = *(id *)(a1 + 32);
    objc_sync_enter(v11);
    __int16 v9 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    objc_sync_exit(v11);

    if (v9)
    {
      id v12 = [v9 error];

      if (v12) {
        uint64_t v13 = 4;
      }
      else {
        uint64_t v13 = 5;
      }
    }
    else
    {
      uint64_t v13 = 3;
    }
    id v14 = +[MRDMediaRemoteServer server];
    id v15 = [v14 nowPlayingServer];
    id v16 = [v15 localOriginClient];
    uint64_t v17 = [v16 nowPlayingDataSource];

    [v17 popNowPlayingAppStack:1 forReason:v13];
  }
}

void sub_10002D73C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_10002D7A4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 userInfo];
  uint64_t v4 = [v3 objectForKeyedSubscript:kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey];
  unsigned int v5 = [v4 BOOLValue];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    __int16 v7 = *(NSObject **)(v6 + 8);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_10002D8CC;
    v13[3] = &unk_100415940;
    uint64_t v8 = *(void *)(a1 + 48);
    void v13[4] = v6;
    void v13[5] = v8;
    dispatch_async(v7, v13);
    [*(id *)(a1 + 40) invalidate];
    __int16 v9 = +[MRDMediaRemoteServer server];
    CFStringRef v10 = [v9 nowPlayingServer];
    id v11 = [v10 localOriginClient];
    id v12 = [v11 nowPlayingDataSource];

    [v12 popNowPlayingAppStack:0 forReason:0];
  }
}

void sub_10002D8CC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_10002D934(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _performCommandProcessingAfterSend:*(void *)(a1 + 40)];
  if ([v3 sendError])
  {
    [v3 sendError];
    uint64_t v4 = MRMediaRemoteSendCommandErrorDescription();
    unsigned int v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032AC00(a1);
    }
  }
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v3;
  id v9 = v3;

  objc_sync_exit(v6);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10002DD04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3
    && [*(id *)(a1 + 32) _clearQueuedCommand:*(void *)(a1 + 40) forUnavailableApplicationWithDisplayID:*(void *)(a1 + 48)])
  {
    CFStringRef v24 = _NSConcreteStackBlock;
    uint64_t v25 = 3221225472;
    id v26 = sub_10002E0D0;
    id v27 = &unk_100416910;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 32);
    id v28 = v4;
    uint64_t v29 = v5;
    if (sub_10002E0D0((uint64_t)&v24))
    {
      id v6 = +[MRDMediaRemoteServer server];
      uint64_t v7 = [v6 nowPlayingServer];
      uint64_t v8 = [v7 localOriginClient];
      id v9 = [v8 nowPlayingDataSource];

      [v9 popNowPlayingAppStack:1 forReason:1];
      CFStringRef v10 = [v9 topOfNowPlayingAppStack];
      if ((v10 || (CFStringRef v10 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID()) != 0)
        && ([v10 isEqualToString:*(void *)(a1 + 48)] & 1) == 0)
      {
        id v19 = [*(id *)(a1 + 40) mutableCopy];
        [v19 setDestinationAppDisplayID:v10];
        id v22 = _MRLogForCategory();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v23 = [*(id *)(a1 + 40) commandID];
          *(_DWORD *)long long buf = 138543874;
          CFStringRef v31 = @"sendRemoteControlCommand";
          __int16 v32 = 2114;
          BOOL v33 = v23;
          __int16 v34 = 2112;
          CFStringRef v35 = @"Failed to launch app, forwarding nowPlayingAppStackPopEligible command";
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
        }
        [*(id *)(a1 + 32) _sendLocalCommand:v19 withCompletionHandler:*(void *)(a1 + 56)];
        goto LABEL_21;
      }
    }
    if (!*(void *)(a1 + 56))
    {
LABEL_25:

      goto LABEL_26;
    }
    id v11 = [v3 userInfo];
    id v9 = [v11 objectForKeyedSubscript:NSUnderlyingErrorKey];

    if ([v9 code] == (id)4)
    {
      id v12 = [v9 domain];
      unsigned int v13 = [v12 isEqualToString:@"FBSOpenApplicationErrorDomain"];

      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 56);
        uint64_t v15 = 9;
LABEL_23:
        CFStringRef v10 = +[MRCommandResult commandResultWithSendError:](MRCommandResult, "commandResultWithSendError:", v15, v24, v25);
        (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v10);
        goto LABEL_24;
      }
    }
    if (objc_msgSend(v9, "code", v24, v25) != (id)5
      || ([v9 domain],
          id v16 = objc_claimAutoreleasedReturnValue(),
          unsigned int v17 = [v16 isEqualToString:@"FBSOpenApplicationErrorDomain"],
          v16,
          !v17))
    {
      if ([v3 code] == (id)126
        && ([v3 domain],
            CFStringRef v20 = objc_claimAutoreleasedReturnValue(),
            unsigned int v21 = [v20 isEqualToString:kMRMediaRemoteFrameworkErrorDomain],
            v20,
            v21))
      {
        uint64_t v14 = *(void *)(a1 + 56);
        uint64_t v15 = 15;
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 56);
        uint64_t v15 = 4;
      }
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(a1 + 56);
    CFStringRef v10 = [v9 localizedFailureReason];
    id v19 = +[MRCommandResult commandResultWithSendError:16 description:v10];
    (*(void (**)(uint64_t, id))(v18 + 16))(v18, v19);
LABEL_21:

LABEL_24:
    goto LABEL_25;
  }
LABEL_26:
}

uint64_t sub_10002E0D0(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) nowPlayingAppStackEligible];
  if (result)
  {
    id v3 = *(void **)(a1 + 40);
    id v4 = +[MRUserSettings currentSettings];
    [v4 nowPlayingAppStackFailedPlayInterval];
    LOBYTE(v3) = objc_msgSend(v3, "_checkAndMaybeUpdateNowPlayingAppStackPopRateLimitingWithInterval:");

    if (v3)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = _MRLogForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [*(id *)(a1 + 32) commandID];
        int v11 = 138543874;
        CFStringRef v12 = @"sendRemoteControlCommand";
        __int16 v13 = 2114;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        CFStringRef v16 = @"nowPlayingAppStackPopEligible command recently sent. Ignoring due to rate limiting...";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", (uint8_t *)&v11, 0x20u);
      }
      uint64_t v7 = +[MRDMediaRemoteServer server];
      uint64_t v8 = [v7 nowPlayingServer];
      id v9 = [v8 localOriginClient];
      CFStringRef v10 = [v9 nowPlayingDataSource];

      [v10 popNowPlayingAppStack:0 forReason:7];
      return 0;
    }
  }
  return result;
}

void sub_10002E508(void *a1)
{
  id v2 = [*(id *)(a1[4] + 16) objectForKey:a1[5]];
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    [*(id *)(a1[4] + 16) setObject:v3 forKey:a1[5]];
    id v2 = v3;
  }
  id v4 = v2;
  [v2 addObject:a1[6]];
}

void sub_10002E588(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKey:*(void *)(a1 + 40)];
  if ([v2 containsObject:*(void *)(a1 + 48)])
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = *(void **)(a1 + 48);
      uint64_t v5 = [v4 dateCreated];
      [v5 timeIntervalSinceNow];
      *(_DWORD *)long long buf = 138543618;
      CFStringRef v12 = v4;
      __int16 v13 = 2048;
      double v14 = -v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing previously queued command %{public}@ because it timed out (enqueued for %f seconds)", buf, 0x16u);
    }
    uint64_t v7 = [*(id *)(a1 + 48) _completionHandler];
    uint64_t v8 = v7;
    if (v7)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10002E718;
      block[3] = &unk_100416938;
      id v10 = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    [v2 removeObject:*(void *)(a1 + 48)];
  }
}

void sub_10002E718(uint64_t a1)
{
  id v2 = +[MRCommandResult commandResultWithSendError:17];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002E87C(void *a1)
{
  id v2 = [*(id *)(a1[4] + 16) objectForKey:a1[5]];
  if ([v2 containsObject:a1[6]])
  {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    [v2 removeObject:a1[6]];
  }
}

id sub_10002E98C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (result)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v32 = v4;
      __int16 v33 = 2112;
      uint64_t v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing queued commands because %{public}@ %@", buf, 0x16u);
    }

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    obint64_t j = [*(id *)(*(void *)(a1 + 32) + 16) allValues];
    id v16 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v16)
    {
      uint64_t v15 = *(void *)v26;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v26 != v15) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = v6;
          uint64_t v7 = *(void **)(*((void *)&v25 + 1) + 8 * v6);
          long long v21 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          id v8 = v7;
          id v9 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
          if (v9)
          {
            id v10 = v9;
            uint64_t v11 = *(void *)v22;
            do
            {
              CFStringRef v12 = 0;
              do
              {
                if (*(void *)v22 != v11) {
                  objc_enumerationMutation(v8);
                }
                __int16 v13 = [*(id *)(*((void *)&v21 + 1) + 8 * (void)v12) _completionHandler];
                if (v13)
                {
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_10002EC48;
                  block[3] = &unk_100416988;
                  id v19 = *(id *)(a1 + 40);
                  id v20 = v13;
                  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
                }
                CFStringRef v12 = (char *)v12 + 1;
              }
              while (v10 != v12);
              id v10 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
            }
            while (v10);
          }

          uint64_t v6 = v17 + 1;
        }
        while ((id)(v17 + 1) != v16);
        id v16 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v16);
    }

    return [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  }
  return result;
}

void sub_10002EC48(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MRCommandResult) initWithWithSendError:5 description:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10002EDC4(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];

  return _objc_release_x1();
}

void sub_10002F27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002F294(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v5 = [MRDRemoteControlContext alloc];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = [*(id *)(a1 + 48) senderAppDisplayID];
    id v8 = [(MRDRemoteControlContext *)v5 initWithContextID:v6 originatingAppDisplayID:v7];
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v11 = *(void *)(a1 + 40);
    CFStringRef v12 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    [v12 setObject:v13 forKey:v11];
  }
}

void sub_10002F7C8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring command because a phone call or FaceTime is active.", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v4 = +[MRDMediaRemoteServer server];
    uint64_t v5 = [v4 nowPlayingServer];
    uint64_t v6 = [v5 localOriginClient];
    id v7 = [v6 nowPlayingDataSource];

    if (v7) {
      [v7 shouldSendCommand:*(void *)(a1 + 32)];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10002F9A0(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 88);
  if (!result || (id result = [result timeIntervalSinceNow], fabs(v3) > *(double *)(a1 + 48))) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    *(void *)(*(void *)(a1 + 32) + 88) = +[NSDate now];
    return (id)_objc_release_x1();
  }
  return result;
}

void sub_10002FB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002FB20()
{
  dispatch_semaphore_t v0 = dispatch_semaphore_create(0);
  uint64_t v1 = dispatch_get_global_queue(2, 0);
  uint64_t v2 = v0;
  MRProcessIDForApplication();

  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
}

intptr_t sub_10002FBF4(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 > 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_100030744(id a1, MRDNowPlayingClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingClient *)a2 client];
  unsigned __int8 v3 = [v2 isSystemMediaApplication];

  return v3;
}

BOOL sub_100030780(id a1, MRCommandInfo *a2)
{
  return [(MRCommandInfo *)a2 command] == 132;
}

id sub_100030DB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) presentWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_100031130(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 origin];
  unsigned int v3 = [v2 isLocal];

  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v4 = +[MRDMediaRemoteServer server];
  uint64_t v5 = [v1 client];
  uint64_t v6 = objc_msgSend(v4, "clientForPID:", objc_msgSend(v5, "processIdentifier"));

  if (!v6)
  {
LABEL_5:
    long long v22 = [v1 client];
    long long v23 = [v22 bundleIdentifier];
    char v24 = sub_100031344(v23);

    uint64_t v6 = 0;
    if ((v24 & 1) == 0) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v21 = 1;
    goto LABEL_7;
  }
  id v7 = [v6 bundleIdentifier];
  char v8 = sub_100031344(v7);

  if (v8) {
    goto LABEL_6;
  }
LABEL_4:
  id v9 = objc_alloc_init((Class)MRPlayerPath);
  id v10 = [v1 origin];
  [v9 setOrigin:v10];

  uint64_t v11 = +[MRDMediaRemoteServer server];
  CFStringRef v12 = [v11 nowPlayingServer];
  uint64_t v13 = +[MRDMediaRemoteServer server];
  double v14 = [v13 nowPlayingServer];
  uint64_t v15 = [v14 resolveExistingPlayerPath:v9];
  id v16 = [v12 queryExistingPlayerPath:v15];

  uint64_t v17 = [v16 nowPlayingClient];
  uint64_t v18 = [v17 playerPath];
  id v19 = [v18 client];
  id v20 = [v1 client];
  uint64_t v21 = (uint64_t)[v19 isEqual:v20];

LABEL_7:
  return v21;
}

uint64_t sub_100031344(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (qword_10047DEB8 == -1)
  {
    if (!v1) {
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_10047DEB8, &stru_100416AA0);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (([(id)qword_10047DEB0 containsObject:v2] & 1) == 0
    && (MRMediaRemoteApplicationIsSystemMediaApplication() & 1) == 0
    && (MRMediaRemoteApplicationIsSystemPodcastApplication() & 1) == 0)
  {
    uint64_t IsSystemBooksApplication = MRMediaRemoteApplicationIsSystemBooksApplication();
    goto LABEL_7;
  }
LABEL_6:
  uint64_t IsSystemBooksApplication = 1;
LABEL_7:

  return IsSystemBooksApplication;
}

void sub_1000313E0(id a1)
{
  qword_10047DEB0 = (uint64_t)[objc_alloc((Class)NSSet) initWithArray:&off_1004385A8];

  _objc_release_x1();
}

void sub_1000314F8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100032168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose((const void *)(v61 - 256), 8);
  _Block_object_dispose((const void *)(v61 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100032200(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100032210(uint64_t a1)
{
}

void sub_100032218(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v15 = [v5 debugName];

    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    char v8 = _MRLogForCategory();
    BOOL v17 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v27 = *(void *)(a1 + 40);
        long long v28 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v50 = v26;
        __int16 v51 = 2114;
        uint64_t v52 = v27;
        __int16 v53 = 2114;
        id v54 = v28;
        __int16 v55 = 2048;
        uint64_t v56 = v29;
        id v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        CFStringRef v31 = v8;
        uint32_t v32 = 42;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v36 = *(void *)(a1 + 32);
        uint64_t v37 = *(void *)(a1 + 40);
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v50 = v36;
        __int16 v51 = 2114;
        uint64_t v52 = v37;
        __int16 v53 = 2048;
        id v54 = v38;
        id v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        CFStringRef v31 = v8;
        uint32_t v32 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
      goto LABEL_20;
    }
    if (v16)
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      uint64_t v13 = [v5 debugName];
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      uint64_t v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v50 = v18;
      __int16 v51 = 2114;
      uint64_t v52 = v19;
      __int16 v53 = 2112;
      id v54 = v13;
      __int16 v55 = 2114;
      uint64_t v56 = v20;
      __int16 v57 = 2048;
      uint64_t v58 = v22;
      long long v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      char v24 = v8;
      uint32_t v25 = 52;
    }
    else
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void *)(a1 + 40);
      uint64_t v13 = [v5 debugName];
      uint64_t v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v50 = v33;
      __int16 v51 = 2114;
      uint64_t v52 = v34;
      __int16 v53 = 2112;
      id v54 = v13;
      __int16 v55 = 2048;
      uint64_t v56 = v35;
      long long v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      char v24 = v8;
      uint32_t v25 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);

    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  char v8 = _MRLogForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      uint64_t v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v50 = v10;
      __int16 v51 = 2114;
      uint64_t v52 = v11;
      __int16 v53 = 2114;
      id v54 = v6;
      __int16 v55 = 2114;
      uint64_t v56 = v12;
      __int16 v57 = 2048;
      uint64_t v58 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_20:
    }
  }
  else if (v9)
  {
    sub_10032AD14((void *)a1, (uint64_t)v6, v8);
  }
LABEL_21:

  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100032688;
  v43[3] = &unk_100416AC8;
  int v39 = *(NSObject **)(a1 + 56);
  id v40 = *(id *)(a1 + 64);
  id v45 = v6;
  id v46 = v40;
  id v44 = v5;
  uint64_t v48 = *(void *)(a1 + 96);
  long long v47 = *(_OWORD *)(a1 + 80);
  id v41 = v6;
  id v42 = v5;
  dispatch_async(v39, v43);
}

void sub_100032688(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  obint64_t j = *(id *)(a1 + 72);
  objc_sync_enter(obj);
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setDiscoveryMode:0];
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "removeEndpointsChangedCallback:");
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;

  objc_sync_exit(obj);
}

void sub_10003273C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_100032750(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_100032770(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1000327E8(uint64_t a1)
{
  uint64_t v2 = +[MRAVClusterController sharedController];
  id v3 = [v2 clusterStatus];

  if (v3 == (id)2)
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v5;
      __int16 v16 = 2114;
      uint64_t v17 = v6;
      __int16 v18 = 2112;
      CFStringRef v19 = @"Not short-circuiting because cluster secondary";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", (uint8_t *)&v14, 0x20u);
    }
  }
  else if ([*(id *)(a1 + 48) isGroupLeader])
  {
    if (![*(id *)(a1 + 48) isAirPlayActive])
    {
      uint64_t v12 = +[MRUserSettings currentSettings];
      unsigned int v13 = [v12 supportMultiplayerHost];

      return v13 ^ 1;
    }
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      CFStringRef v19 = @"Not short-circuiting because secondary";
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      __int16 v18 = 2112;
      CFStringRef v19 = @"Not short-circuiting not group leader";
      goto LABEL_10;
    }
  }

  return 0;
}

id sub_1000329F0(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
}

void sub_100032A04(void *a1, void *a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "containsOutputDeviceWithUID:", *(void *)(*(void *)(a1[7] + 8) + 40), (void)v11))
        {
          uint64_t v8 = _MRLogForCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v9 = a1[4];
            uint64_t v10 = a1[5];
            *(_DWORD *)long long buf = 138543874;
            uint64_t v16 = v9;
            __int16 v17 = 2114;
            uint64_t v18 = v10;
            __int16 v19 = 2112;
            CFStringRef v20 = @"found device in discovery";
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
          }

          (*(void (**)(void))(a1[6] + 16))();
          goto LABEL_13;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v21 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_13:
}

int64_t sub_100032CCC(id a1, PCLockscreenControlsDevice *a2, PCLockscreenControlsDevice *a3)
{
  id v4 = a3;
  id v5 = [(PCLockscreenControlsDevice *)a2 distance];
  uint64_t v6 = [(PCLockscreenControlsDevice *)v4 distance];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_100032D3C(id a1, PCLockscreenControlsDevice *a2)
{
  return [(PCLockscreenControlsDevice *)a2 mediaRouteID];
}

id sub_100032E24(uint64_t a1, void *a2)
{
  id v3 = [a2 mediaRouteID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_100032FDC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) invalidated];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return _[v3 _configureObserver];
  }
  return result;
}

void sub_100033338(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1000333A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained nearbyDevices];
    id v7 = [v3 mediaRouteID];
    unsigned int v8 = [v6 containsObject:v7];

    if (v8)
    {
      uint64_t v9 = _MRLogForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [v3 mediaRouteID];
        int v13 = 138412290;
        long long v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ProximityProvider] Removing device %@", (uint8_t *)&v13, 0xCu);
      }
      long long v11 = [v5 nearbyDevices];
      long long v12 = [v3 mediaRouteID];
      [v11 removeObject:v12];
    }
  }
}

void sub_100033504(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained nearbyDevices];
    id v7 = [v3 mediaRouteID];
    unsigned __int8 v8 = [v6 containsObject:v7];

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = _MRLogForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [v3 mediaRouteID];
        int v14 = 138412290;
        uint64_t v15 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ProximityProvider] Adding device %@", (uint8_t *)&v14, 0xCu);
      }
      long long v11 = [v5 nearbyDevices];
      long long v12 = [v3 mediaRouteID];
      [v11 addObject:v12];

      int v13 = [v5 delegate];
      [v13 devicesUpdated];
    }
  }
}

void sub_100033678(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10032ADF8((uint64_t)v3, v4);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained setInvalidated:1];
  }
}

void sub_1000336FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      [WeakRetained setInvalidated:1];
      uint64_t v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10032AE70((uint64_t)v3, v6);
      }
    }
    else
    {
      [WeakRetained setInvalidated:0];
      uint64_t v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ProximityProvider] Activated.", v7, 2u);
      }
    }
  }
}

Class sub_100033960()
{
  if (qword_10047DEC8 != -1) {
    dispatch_once(&qword_10047DEC8, &stru_100416CA8);
  }
  Class result = objc_getClass("PCLockscreenControlsObserver");
  qword_10047DEC0 = (uint64_t)result;
  off_100475710 = (uint64_t (*)())sub_1000339C4;
  return result;
}

id sub_1000339C4()
{
  return (id)qword_10047DEC0;
}

void sub_1000339D0(id a1)
{
  qword_10047DED0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ProximityControl.framework/ProximityControl", 2);
}

id sub_100034E48(uint64_t a1, void *a2)
{
  id v3 = [a2 eventBody];
  id v4 = [v3 hashedUserIdentityIdentifier];
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

uint64_t sub_1000350A0(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [*(id *)(a1 + 32) identifier];
      unsigned __int8 v8 = (void *)v7;
      if (a4 > 3) {
        CFStringRef v9 = @"Feature disabled";
      }
      else {
        CFStringRef v9 = off_100416DB8[a4];
      }
      int v11 = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      CFStringRef v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionApprovalManager] Auto-approving request %@, reason: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000351C4(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_100035290;
    v5[3] = &unk_100416D20;
    id v4 = *(void **)(a1 + 48);
    id v6 = *(id *)(a1 + 40);
    [v4 shouldAutoApproveIdentity:v3 completion:v5];
  }
}

uint64_t sub_100035290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000354B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000354D4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 24));
}

uint64_t sub_1000354FC(void *a1, void *a2)
{
  uint64_t v3 = [a2 eventBody];
  id v4 = (void *)a1[4];
  id v5 = [v3 hashedUserIdentityIdentifier];
  unsigned int v6 = [v4 isEqualToString:v5];

  if (v6)
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }

  return v6 ^ 1;
}

id MRDGroupSessionAutoApproveReasonEnum(id a1)
{
  if ((unint64_t)a1 + 1 <= 4) {
    a1 = *(id *)*(&off_100416DD8 + (void)a1 + 1);
  }
  return a1;
}

void sub_100035894(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ((*(_DWORD *)(a1 + 40) & ~[a3 unsignedIntValue]) == 0) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

uint64_t sub_100035A00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000361F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032AEE8(a1);
    }
  }
  else
  {
    unsigned __int8 v8 = [v5 debugName];

    uint64_t v7 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = [v5 debugName];
      __int16 v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v18 = 138544130;
      uint64_t v19 = v10;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      long long v23 = v12;
      __int16 v24 = 2048;
      uint64_t v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", (uint8_t *)&v18, 0x2Au);
    }
    else
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      int v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v18 = 138543874;
      uint64_t v19 = v15;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      __int16 v22 = 2048;
      long long v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v18, 0x20u);
    }
  }
LABEL_10:

  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    (*(void (**)(uint64_t, id, id, void))(v17 + 16))(v17, v5, v6, *(void *)(a1 + 56));
  }
}

void sub_10003642C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc((Class)NSString);
  unsigned __int8 v8 = [v5 debugName];
  id v9 = [v7 initWithFormat:@"Calling previewCallback with endpoint %@", v8];

  uint64_t v10 = _MRLogForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = [*(id *)(a1 + 40) requestID];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v15 = v11;
    __int16 v16 = 2114;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    id v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(uint64_t, id, id))(v13 + 16))(v13, v5, v6);
  }
}

uint64_t sub_100036590(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000365A8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100036620(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100036638(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_1000366B0(id a1, MRDeviceInfo *a2)
{
  return [(MRDeviceInfo *)a2 deviceUID];
}

void sub_1000366B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = [v5 createOptimizedEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10003674C(uint64_t a1, void *a2)
{
  id v4 = objc_msgSend(a2, "msv_map:", &stru_100416F50);
  id v5 = [*(id *)(a1 + 32) discoverGroup];
  [v5 end];

  id v6 = [*(id *)(a1 + 32) createEndpoint];
  [v6 start];

  id v7 = [v4 count];
  id v8 = v4;
  if (!v7)
  {
    uint64_t v2 = [*(id *)(a1 + 40) deviceUID];
    uint64_t v15 = v2;
    id v8 = +[NSArray arrayWithObjects:&v15 count:1];
  }
  double v9 = *(double *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003690C;
  v11[3] = &unk_100416F98;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:v8 timeout:v10 details:v11 completion:v9];
  if (!v7)
  {
  }
}

id sub_100036904(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

void sub_10003690C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) createEndpoint];
  [v6 endWithError:v5];

  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000369C4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) findMyGroupLeader];
  [v6 endWithError:v5];

  if (v7) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100036DEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v8 = [v5 debugName];

    id v7 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = [*(id *)(a1 + 40) requestID];
      id v12 = [v5 debugName];
      id v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v17 = 138544130;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      __int16 v20 = v11;
      __int16 v21 = 2112;
      __int16 v22 = v12;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", (uint8_t *)&v17, 0x2Au);
    }
    else
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v11 = [*(id *)(a1 + 40) requestID];
      id v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v17 = 138543874;
      uint64_t v18 = v15;
      __int16 v19 = 2114;
      __int16 v20 = v11;
      __int16 v21 = 2048;
      __int16 v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v17, 0x20u);
    }

    goto LABEL_10;
  }
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10032AEE8(a1);
  }
LABEL_10:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100037018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  id v9 = *(id *)(a1 + 32);
  v8(v7, a4, a5);
}

void sub_1000370B8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

uint64_t sub_1000372B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000372C0(uint64_t a1)
{
}

uint64_t sub_1000372C8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) copy];

  return _objc_release_x1();
}

void sub_1000373AC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  dispatch_time_t v2 = dispatch_time(0, 60000000000);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100037474;
  v6[3] = &unk_1004158D8;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_after(v2, v3, v6);
}

id sub_100037474(uint64_t a1)
{
  dispatch_time_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Purging command: %{public}@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 8) removeObject:*(void *)(a1 + 32)];
}

id sub_1000375A0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
}

void sub_100037F9C(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    dispatch_time_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = *(void **)(v4 + 8);
      *(void *)(v4 + 8) = v3;

      dispatch_time_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
    }
    uint64_t v6 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (!v6)
    {
      id v8 = [*(id *)(a1 + 48) copy];
      id v7 = objc_retainBlock(v8);
      [*(id *)(*(void *)(a1 + 32) + 8) setObject:v7 forKeyedSubscript:*(void *)(a1 + 40)];
    }
  }
}

id sub_1000380F8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_100038218(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100038244(uint64_t a1)
{
}

uint64_t sub_10003824C(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]];

  return _objc_release_x1();
}

BOOL sub_1000384BC(id a1)
{
  return +[MRDUIActivityController deviceSupportsActivities];
}

id *sub_100038FEC(id *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return (id *)_[result[4] _activeUserDidChange:a2 previous:a3];
  }
  return result;
}

void sub_100039008(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032AFA8((uint64_t)v6, v8);
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRDUIActivityServer] Setting active user: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) setNowPlayingActivityUserIdentifier:v5];
  }
}

id sub_1000393D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "unionSet:");
}

BOOL sub_100039740(id a1, MRDUIClient *a2)
{
  return [(MRDUIClient *)a2 hasRouteRecommendationAssertion];
}

BOOL sub_100039AD0(id a1, MRDUIClient *a2)
{
  return [(MRDUIClient *)a2 hasGroupSessionNearbyAssertion];
}

void sub_10003A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10003A658(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    [WeakRetained setNowPlayingActivityAssertionEndTimer:0];
    unsigned int v2 = [v6 hasNowPlayingAssertion];
    id v3 = [v6 activityController];
    uint64_t v4 = v3;
    if (v2)
    {
      id v5 = [v6 combinedSuppressedBundleIdentifiers];
      [v4 updateNowPlayingActivityState:1 suppressedBundleIdentifiers:v5];
    }
    else
    {
      [v3 endNowPlayingActivity];
    }

    id WeakRetained = v6;
  }
}

void sub_10003A7B8(uint64_t a1)
{
  id v15 = *(id *)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) electedPlayer];
  if (v15 == v2)
  {
  }
  else
  {
    unsigned __int8 v3 = [v15 isEqual:v2];

    if ((v3 & 1) == 0)
    {
      [*(id *)(a1 + 40) setElectedPlayer:*(void *)(a1 + 32)];
      uint64_t v4 = +[MRDMediaRemoteServer server];
      id v5 = [v4 MRUIClient];

      if (v5)
      {
        id v6 = _MRLogForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
          sub_10032B140(v6, v7, v8, v9, v10, v11, v12, v13);
        }

        uint64_t v14 = +[MRUserSettings currentSettings];
        [v14 nowPlayingUIWakingPlayerEventAssertionDuration];
        objc_msgSend(v5, "takeAssertion:forReason:duration:", 6, @"MediaRemoteUIProcessElectedPlayerChange");
      }
    }
  }
}

void sub_10003A9B4(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) electedPlayer];
  if (v1 == v2)
  {
  }
  else
  {
    unsigned __int8 v3 = v2;
    unsigned int v4 = [v1 isEqual:v2];

    if (!v4) {
      return;
    }
  }
  id v5 = +[MRDMediaRemoteServer server];
  id v6 = [v5 MRUIClient];

  if (v6)
  {
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10032B178(v7, v8, v9, v10, v11, v12, v13, v14);
    }

    id v15 = +[MRUserSettings currentSettings];
    [v15 nowPlayingUIWakingPlayerEventAssertionDuration];
    objc_msgSend(v6, "takeAssertion:forReason:duration:", 6, @"MediaRemoteUIProcessElectedPlayerIsPlayingChange");
  }
}

void sub_10003AB68(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) electedPlayer];
  if (v1 == v2)
  {
  }
  else
  {
    unsigned __int8 v3 = v2;
    unsigned int v4 = [v1 isEqual:v2];

    if (!v4) {
      return;
    }
  }
  id v5 = +[MRDMediaRemoteServer server];
  id v6 = [v5 MRUIClient];

  if (v6)
  {
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_10032B1B0(v7, v8, v9, v10, v11, v12, v13, v14);
    }

    id v15 = +[MRUserSettings currentSettings];
    [v15 nowPlayingUIWakingPlayerEventAssertionDuration];
    objc_msgSend(v6, "takeAssertion:forReason:duration:", 6, @"MediaRemoteUIProcessElectedPlayerPlaybackQueueChange");
  }
}

void sub_10003AFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10003AFD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDUIActivityServer] Resetting ASE and cleaning now playing assertion end date", v9, 2u);
    }

    id v3 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:0 type:0 reason:@"Initial active user changed"];
    unsigned int v4 = +[MRDMediaRemoteServer server];
    id v5 = [v4 routingServer];
    id v6 = [v5 systemEndpointController];
    [v6 updateSystemEndpointForRequest:v3];

    uint64_t v7 = +[NSDate distantPast];
    [WeakRetained setNowPlayingActivityAssertionEndDate:v7];

    [WeakRetained setActiveUserChangedTimer:0];
    uint64_t v8 = [WeakRetained activeUserController];
    [v8 stopObserving];
  }
}

void sub_10003B1CC(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 40) activityController];
  id v2 = [v3 currentActivitiesInfo];
  [*(id *)(a1 + 32) setUiActivitiesInfo:v2];
}

void sub_10003B3D0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10003B760(uint64_t a1)
{
  IOHIDEventSystemClientDispatchEvent();
  id v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void sub_10003B924(uint64_t a1)
{
}

void sub_10003BDE8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) userState];
  id v2 = [v1 dsid];
  id v3 = [v2 stringValue];
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  memset(&v57, 0, sizeof(v57));
  CC_SHA1_Init(&v57);
  id v4 = v3;
  CC_SHA1_Update(&v57, [v4 UTF8String], (CC_LONG)objc_msgSend(v4, "length"));

  memset(&v65[8], 0, 64);
  *(void *)char v65 = 4001;
  CC_SHA1_Final(&v65[8], &v57);
  v66[0] = *(_OWORD *)v65;
  v66[1] = *(_OWORD *)&v65[16];
  v66[2] = *(_OWORD *)&v65[32];
  v66[3] = *(_OWORD *)&v65[48];
  uint64_t v67 = *(void *)&v65[64];
  if (*(uint64_t *)v65 > 3999)
  {
    if (*(uint64_t *)v65 > 4255)
    {
      if (*(void *)v65 == 4256)
      {
        id v45 = (unsigned __int8 *)v66 + 8;
        id v46 = (char *)malloc_type_calloc(0x40uLL, 1uLL, 0x100004077774924uLL);
        long long v47 = v46;
        for (uint64_t i = 0; i != 64; i += 2)
        {
          unsigned int v49 = *v45++;
          uint64_t v50 = &v46[i];
          char *v50 = a0123456789abcd_0[(unint64_t)v49 >> 4];
          v50[1] = a0123456789abcd_0[v49 & 0xF];
        }
        id v17 = objc_alloc((Class)NSString);
        uint64_t v18 = v47;
        uint64_t v19 = 64;
      }
      else
      {
        if (*(void *)v65 != 4512) {
          goto LABEL_44;
        }
        uint64_t v24 = (unsigned __int8 *)v66 + 8;
        uint64_t v25 = (char *)malloc_type_calloc(0x80uLL, 1uLL, 0x100004077774924uLL);
        uint64_t v26 = v25;
        for (uint64_t j = 0; j != 128; j += 2)
        {
          unsigned int v28 = *v24++;
          uint64_t v29 = &v25[j];
          char *v29 = a0123456789abcd_0[(unint64_t)v28 >> 4];
          v29[1] = a0123456789abcd_0[v28 & 0xF];
        }
        id v17 = objc_alloc((Class)NSString);
        uint64_t v18 = v26;
        uint64_t v19 = 128;
      }
    }
    else if (*(void *)v65 == 4000)
    {
      uint64_t v35 = (unsigned __int8 *)v66 + 8;
      uint64_t v36 = (char *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v37 = v36;
      for (uint64_t k = 0; k != 32; k += 2)
      {
        unsigned int v39 = *v35++;
        id v40 = &v36[k];
        char *v40 = a0123456789abcd_0[(unint64_t)v39 >> 4];
        v40[1] = a0123456789abcd_0[v39 & 0xF];
      }
      id v17 = objc_alloc((Class)NSString);
      uint64_t v18 = v37;
      uint64_t v19 = 32;
    }
    else
    {
      if (*(void *)v65 != 4001) {
        goto LABEL_44;
      }
      uint64_t v11 = (unsigned __int8 *)v66 + 8;
      uint64_t v12 = (char *)malloc_type_calloc(0x28uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v13 = v12;
      for (uint64_t m = 0; m != 40; m += 2)
      {
        unsigned int v15 = *v11++;
        __int16 v16 = &v12[m];
        *__int16 v16 = a0123456789abcd_0[(unint64_t)v15 >> 4];
        v16[1] = a0123456789abcd_0[v15 & 0xF];
      }
      id v17 = objc_alloc((Class)NSString);
      uint64_t v18 = v13;
      uint64_t v19 = 40;
    }
LABEL_43:
    CFStringRef v51 = (CFStringRef)objc_msgSend(v17, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v18, v19, 4, 1, 4001, *(void *)&v57.h0);
LABEL_48:
    id v54 = (__CFString *)v51;
    goto LABEL_49;
  }
  if (*(uint64_t *)v65 > 2999)
  {
    if (*(void *)v65 == 3000)
    {
      LODWORD(v68[0]) = bswap32(DWORD2(v66[0]));
      id v41 = (char *)malloc_type_calloc(8uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v42 = 0;
      double v43 = v41 + 1;
      do
      {
        unint64_t v44 = *((unsigned __int8 *)v68 + v42);
        *(v43 - 1) = a0123456789abcd_0[v44 >> 4];
        unsigned char *v43 = a0123456789abcd_0[v44 & 0xF];
        v43 += 2;
        ++v42;
      }
      while (v42 != 4);
      id v17 = objc_alloc((Class)NSString);
      uint64_t v18 = v41;
      uint64_t v19 = 8;
    }
    else
    {
      if (*(void *)v65 != 3001) {
        goto LABEL_44;
      }
      v68[0] = bswap64(*((unint64_t *)&v66[0] + 1));
      __int16 v20 = (char *)malloc_type_calloc(0x10uLL, 1uLL, 0x100004077774924uLL);
      uint64_t v21 = 0;
      __int16 v22 = v20 + 1;
      do
      {
        unint64_t v23 = *((unsigned __int8 *)v68 + v21);
        *(v22 - 1) = a0123456789abcd_0[v23 >> 4];
        unsigned char *v22 = a0123456789abcd_0[v23 & 0xF];
        v22 += 2;
        ++v21;
      }
      while (v21 != 8);
      id v17 = objc_alloc((Class)NSString);
      uint64_t v18 = v20;
      uint64_t v19 = 16;
    }
    goto LABEL_43;
  }
  if (*(void *)v65 == 1000)
  {
    uint64_t v30 = *((void *)&v66[0] + 1);
    CFStringRef v31 = (UInt8 *)&v69;
    uint64_t quot = *((void *)&v66[0] + 1);
    do
    {
      lldiv_t v33 = lldiv(quot, 10);
      uint64_t quot = v33.quot;
      if (v33.rem >= 0) {
        LOBYTE(v34) = v33.rem;
      }
      else {
        uint64_t v34 = -v33.rem;
      }
      *v31-- = v34 + 48;
    }
    while (v33.quot);
    if (v30 < 0) {
      *CFStringRef v31 = 45;
    }
    else {
      ++v31;
    }
    CFIndex v9 = (char *)&v70 - (char *)v31;
    uint64_t v10 = v31;
    goto LABEL_47;
  }
  if (*(void *)v65 == 2000)
  {
    uint64_t v5 = 0;
    uint64_t v6 = DWORD2(v66[0]);
    do
    {
      ldiv_t v7 = ldiv(v6, 10);
      uint64_t v6 = v7.quot;
      if (v7.rem >= 0) {
        LOBYTE(v8) = v7.rem;
      }
      else {
        uint64_t v8 = -v7.rem;
      }
      *(&v69 + v5--) = v8 + 48;
    }
    while (v7.quot);
    CFIndex v9 = -v5;
    uint64_t v10 = (const UInt8 *)&v70 + v5;
LABEL_47:
    CFStringRef v51 = CFStringCreateWithBytes(0, v10, v9, 0x8000100u, 0);
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v52 = +[NSAssertionHandler currentHandler];
  __int16 v53 = +[NSString stringWithUTF8String:"NSString * _Nonnull _MSVHashGetDigest(MSVHash)"];
  [v52 handleFailureInFunction:v53 file:@"MSVHasher+Algorithms.h" lineNumber:356 description:@"Cannot obtain digest from unknown hasher algorithm"];

  id v54 = &stru_10042ACB0;
LABEL_49:

  uint64_t v55 = [(__CFString *)v54 substringToIndex:7];
  uint64_t v56 = (void *)qword_10047DEE0;
  qword_10047DEE0 = v55;
}

void sub_10003CE30(id a1)
{
  id v3 = +[MRSharedSettings currentSettings];
  if ([v3 supportGroupSession]) {
    id v1 = objc_alloc_init(MRDMusicUserStateCenter);
  }
  else {
    id v1 = 0;
  }
  id v2 = (void *)qword_10047DEF0;
  qword_10047DEF0 = (uint64_t)v1;
}

id sub_10003CF94(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateIsMusicAppInstalled];
}

uint64_t sub_10003E1C8(uint64_t a1, void *a2)
{
  id v3 = [a2 dsid];
  id v4 = [v3 stringValue];
  uint64_t v5 = v4;
  if (v4 == *(void **)(a1 + 32)) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = (uint64_t)objc_msgSend(v4, "isEqual:");
  }

  return v6;
}

void sub_10003E238(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  id v2 = [*(id *)(a1 + 32) finishedWaitingForCloudStateDSIDs];
  [v2 addObject:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) dsidToPendingCompletionMap];
  id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

  uint64_t v5 = [*(id *)(a1 + 32) dsidToPendingCompletionMap];
  [v5 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  if (v4)
  {
    uint64_t v6 = MRGroupSessionSubsystemGetNotificationQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003E358;
    block[3] = &unk_100415CC8;
    id v8 = v4;
    dispatch_async(v6, block);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
}

void sub_10003E358(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v10;
    uint64_t v5 = MRGroupSessionError;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8 * (void)v6);
        id v8 = +[NSError msv_errorWithDomain:v5, 4, @"No identity found for dsid.", (void)v9 code debugDescription];
        (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }
}

void sub_10003F560(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

MRDMediaUserState *__cdecl sub_10003F6CC(id a1, ICMediaUserState *a2)
{
  id v2 = a2;
  id v3 = [[MRDMediaUserState alloc] initWithUserState:v2];

  return v3;
}

void sub_1000408F0(uint64_t a1)
{
  id v2 = [objc_alloc((Class)ICMediaUserStateCenter) initLazily];
  id v3 = (void *)qword_10047DEF8;
  qword_10047DEF8 = (uint64_t)v2;

  uint64_t v4 = +[ICPrivacyInfo sharedPrivacyInfo];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100040BB4;
  v19[3] = &unk_1004172B0;
  v19[4] = *(void *)(a1 + 32);
  uint64_t v5 = [v4 beginObservingPrivacyAcknowledgementForIdentifier:ICPrivacyIdentifierMusic handler:v19];
  [*(id *)(a1 + 32) setPrivacyObserver:v5];

  long long v6 = [MRDMediaUserState alloc];
  long long v7 = [(id)qword_10047DEF8 activeUserState];
  long long v8 = [(MRDMediaUserState *)v6 initWithUserState:v7];

  long long v9 = _MRLogForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    long long v10 = [(MRDMediaUserState *)v8 userIdentity];
    unsigned int v11 = [(MRDMediaUserState *)v8 isFullSubscriber];
    unsigned int v12 = [(MRDMediaUserState *)v8 isMinor];
    unsigned int v13 = [(MRDMediaUserState *)v8 identitySupportsCollaboration];
    unsigned int v14 = [(MRDMediaUserState *)v8 hasAcceptedPrivacyAcknowledgement];
    unsigned int v15 = [(MRDMediaUserState *)v8 groupSessionsSupportedForAccountRegion];
    unsigned int v16 = [(MRDMediaUserState *)v8 hasAcceptedDisplayNameAcknowledgement];
    *(_DWORD *)long long buf = 138413826;
    uint64_t v21 = v10;
    __int16 v22 = 1024;
    unsigned int v23 = v11;
    __int16 v24 = 1024;
    unsigned int v25 = v12;
    __int16 v26 = 1024;
    unsigned int v27 = v13;
    __int16 v28 = 1024;
    unsigned int v29 = v14;
    __int16 v30 = 1024;
    unsigned int v31 = v15;
    __int16 v32 = 1024;
    unsigned int v33 = v16;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDMusicUserStateCenter] IC cached state (active): i=%@, s=%{BOOL}u, m=%{BOOL}u, sc=%{BOOL}u, p=%{BOOL}u, r=%{BOOL}u, dna=%{BOOL}u", buf, 0x30u);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  id v17 = MRGroupSessionSubsystemGetNotificationQueue();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100040BBC;
  v18[3] = &unk_100415CC8;
  v18[4] = *(void *)(a1 + 32);
  dispatch_async(v17, v18);
}

id sub_100040BB4(uint64_t a1)
{
  return [*(id *)(a1 + 32) postCloudStateChanged];
}

void sub_100040BBC(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100040DA8(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDMusicUserStateCenterLocalStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100040F68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) localActiveUserState];
  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [v2 userIdentity];
    int v6 = 138413826;
    long long v7 = v4;
    __int16 v8 = 1024;
    unsigned int v9 = [v2 isFullSubscriber];
    __int16 v10 = 1024;
    unsigned int v11 = [v2 isMinor];
    __int16 v12 = 1024;
    unsigned int v13 = [v2 identitySupportsCollaboration];
    __int16 v14 = 1024;
    unsigned int v15 = [v2 hasAcceptedPrivacyAcknowledgement];
    __int16 v16 = 1024;
    unsigned int v17 = [v2 groupSessionsSupportedForAccountRegion];
    __int16 v18 = 1024;
    unsigned int v19 = [v2 hasAcceptedDisplayNameAcknowledgement];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDMusicUserStateCenter] Cloud state changed (active): i=%@, s=%{BOOL}u, m=%{BOOL}u, sc=%{BOOL}u, p=%{BOOL}u, r=%{BOOL}u, dna=%{BOOL}u", (uint8_t *)&v6, 0x30u);
  }
  uint64_t v5 = +[NSNotificationCenter defaultCenter];
  [v5 postNotificationName:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:*(void *)(a1 + 32) userInfo:0];
}

_DWORD *sub_1000411AC(_DWORD *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    int v6 = result[1];
    unsigned int v7 = *result + __n;
    BOOL v9 = __n > 0xF || v7 > 0xF;
    *id result = v7;
    result[1] = v6 | v9;
    uint64_t v10 = result[10];
    if (v10 + __n <= 0xF)
    {
      id result = memcpy((char *)result + v10 + 24, __src, __n);
      LODWORD(v11) = v5[10] + v3;
LABEL_18:
      v5[10] = v11;
      return result;
    }
    __int16 v12 = &__src[__n];
    if (v10)
    {
      id result = memcpy((char *)result + v10 + 24, __src, (16 - v10));
      HIDWORD(v13) = v5[2] - 2048144777 * v5[6];
      LODWORD(v13) = HIDWORD(v13);
      int v14 = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[3] - 2048144777 * v5[7];
      LODWORD(v13) = HIDWORD(v13);
      void v5[2] = v14;
      v5[3] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[4] - 2048144777 * v5[8];
      LODWORD(v13) = HIDWORD(v13);
      void v5[4] = -1640531535 * (v13 >> 19);
      HIDWORD(v13) = v5[5] - 2048144777 * v5[9];
      LODWORD(v13) = HIDWORD(v13);
      v5[5] = -1640531535 * (v13 >> 19);
      v4 += (16 - v5[10]);
      v5[10] = 0;
    }
    if (v4 <= v12 - 16)
    {
      int v15 = v5[2];
      int v16 = v5[3];
      int v17 = v5[4];
      int v18 = v5[5];
      do
      {
        HIDWORD(v19) = v15 - 2048144777 * *(_DWORD *)v4;
        LODWORD(v19) = HIDWORD(v19);
        int v15 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v16 - 2048144777 * *((_DWORD *)v4 + 1);
        LODWORD(v19) = HIDWORD(v19);
        int v16 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v17 - 2048144777 * *((_DWORD *)v4 + 2);
        LODWORD(v19) = HIDWORD(v19);
        int v17 = -1640531535 * (v19 >> 19);
        HIDWORD(v19) = v18 - 2048144777 * *((_DWORD *)v4 + 3);
        LODWORD(v19) = HIDWORD(v19);
        int v18 = -1640531535 * (v19 >> 19);
        v4 += 16;
      }
      while (v4 <= v12 - 16);
      void v5[2] = v15;
      v5[3] = v16;
      void v5[4] = v17;
      v5[5] = v18;
    }
    if (v4 < v12)
    {
      size_t v11 = v12 - v4;
      id result = memcpy(v5 + 6, v4, v11);
      goto LABEL_18;
    }
  }
  return result;
}

char *sub_10004135C(char *result, char *__src, size_t __n)
{
  if (__src)
  {
    int v3 = __n;
    uint64_t v4 = __src;
    uint64_t v5 = result;
    *(void *)result += __n;
    uint64_t v6 = *((unsigned int *)result + 18);
    if (v6 + __n <= 0x1F)
    {
      id result = (char *)memcpy(&result[v6 + 40], __src, __n);
      LODWORD(v7) = *((_DWORD *)v5 + 18) + v3;
LABEL_12:
      *((_DWORD *)v5 + 18) = v7;
      return result;
    }
    __int16 v8 = &__src[__n];
    if (v6)
    {
      id result = (char *)memcpy(&result[v6 + 40], __src, (32 - v6));
      uint64_t v9 = __ROR8__(*((void *)v5 + 2) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 6), 33);
      *((void *)v5 + 1) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 1) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 5), 33);
      *((void *)v5 + 2) = 0x9E3779B185EBCA87 * v9;
      unint64_t v10 = 0x9E3779B185EBCA87 * __ROR8__(*((void *)v5 + 4) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 8), 33);
      *((void *)v5 + 3) = 0x9E3779B185EBCA87
                          * __ROR8__(*((void *)v5 + 3) - 0x3D4D51C2D82B14B1 * *((void *)v5 + 7), 33);
      *((void *)v5 + 4) = v10;
      v4 += (32 - *((_DWORD *)v5 + 18));
      *((_DWORD *)v5 + 18) = 0;
    }
    if (v4 + 32 <= v8)
    {
      unint64_t v11 = *((void *)v5 + 1);
      unint64_t v12 = *((void *)v5 + 2);
      unint64_t v14 = *((void *)v5 + 3);
      unint64_t v13 = *((void *)v5 + 4);
      do
      {
        unint64_t v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(void *)v4, 33);
        unint64_t v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 1), 33);
        unint64_t v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 2), 33);
        unint64_t v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((void *)v4 + 3), 33);
        v4 += 32;
      }
      while (v4 <= v8 - 32);
      *((void *)v5 + 1) = v11;
      *((void *)v5 + 2) = v12;
      *((void *)v5 + 3) = v14;
      *((void *)v5 + 4) = v13;
    }
    if (v4 < v8)
    {
      size_t v7 = v8 - v4;
      id result = (char *)memcpy(v5 + 40, v4, v7);
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_1000414F4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4)) {
    int v1 = vaddvq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 8), (uint32x4_t)xmmword_1003C53A0), (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 8), (uint32x4_t)xmmword_1003C5390)));
  }
  else {
    int v1 = *(_DWORD *)(a1 + 16) + 374761393;
  }
  unsigned int v2 = *(_DWORD *)a1 + v1;
  int v3 = (int *)(a1 + 24);
  unint64_t v4 = *(_DWORD *)(a1 + 40) & 0xF;
  if ((*(_DWORD *)(a1 + 40) & 0xFu) >= 4)
  {
    do
    {
      int v5 = *v3++;
      HIDWORD(v6) = v2 - 1028477379 * v5;
      LODWORD(v6) = HIDWORD(v6);
      unsigned int v2 = 668265263 * (v6 >> 15);
      v4 -= 4;
    }
    while (v4 > 3);
  }
  for (; v4; --v4)
  {
    int v7 = *(unsigned __int8 *)v3;
    int v3 = (int *)((char *)v3 + 1);
    HIDWORD(v8) = v2 + 374761393 * v7;
    LODWORD(v8) = HIDWORD(v8);
    unsigned int v2 = -1640531535 * (v8 >> 21);
  }
  unsigned int v9 = -1028477379 * ((-2048144777 * (v2 ^ (v2 >> 15))) ^ ((-2048144777 * (v2 ^ (v2 >> 15))) >> 13));
  return v9 ^ HIWORD(v9);
}

unint64_t sub_1000415C4(void *a1)
{
  if (*a1 < 0x20uLL) {
    uint64_t v1 = a1[3] + 0x27D4EB2F165667C5;
  }
  else {
    uint64_t v1 = 0x85EBCA77C2B2AE63
  }
       - 0x61C8864E7A143579
       * ((0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579
         * ((0x85EBCA77C2B2AE63
           - 0x61C8864E7A143579
           * ((0x85EBCA77C2B2AE63
             - 0x61C8864E7A143579
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)));
  unint64_t v2 = v1 + *a1;
  int v3 = a1 + 5;
  unint64_t v4 = *a1 & 0x1FLL;
  if (v4 >= 8)
  {
    do
    {
      uint64_t v5 = *v3++;
      unint64_t v2 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v5, 33)) ^ v2, 37);
      v4 -= 8;
    }
    while (v4 > 7);
  }
  if (v4 >= 4)
  {
    unsigned int v6 = *(_DWORD *)v3;
    int v3 = (uint64_t *)((char *)v3 + 4);
    unint64_t v2 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v6) ^ v2, 41);
    v4 -= 4;
  }
  for (; v4; --v4)
  {
    unsigned int v7 = *(unsigned __int8 *)v3;
    int v3 = (uint64_t *)((char *)v3 + 1);
    unint64_t v2 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v7) ^ v2, 53);
  }
  unint64_t v8 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v2 ^ (v2 >> 33))) >> 29));
  return v8 ^ HIDWORD(v8);
}

void sub_100041788(id a1)
{
  qword_10047DF08 = objc_alloc_init(MRDStreamCapacityManager);

  _objc_release_x1();
}

BOOL sub_10004267C(id a1, NSArray *a2, MROrigin *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100042718;
  v6[3] = &unk_100417338;
  unsigned int v7 = a3;
  unint64_t v4 = v7;
  LOBYTE(a2) = [(NSArray *)a2 mr_any:v6];

  return (char)a2;
}

id sub_100042718(uint64_t a1, void *a2)
{
  int v3 = [a2 origin];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10004275C(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = [v3 streamsThatCountTowardsCapacity];
  unsigned int v6 = [v4 origin];

  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
  return v7;
}

uint64_t sub_1000427D8(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = [v3 streamsActivelyUsingSlot];
  unsigned int v6 = [v4 origin];

  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, void *))(v2 + 16))(v2, v5, v6);
  return v7;
}

void sub_100042C20(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  unint64_t v8 = _MRLogForCategory();
  unsigned int v9 = v8;
  if (v5 && !v6)
  {
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v10) {
        goto LABEL_22;
      }
      uint64_t v12 = a1[5];
      uint64_t v11 = a1[6];
      uint64_t v13 = a1[4];
      unint64_t v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544386;
      uint64_t v37 = v12;
      __int16 v38 = 2114;
      uint64_t v39 = v11;
      __int16 v40 = 2112;
      id v41 = v5;
      __int16 v42 = 2114;
      uint64_t v43 = v13;
      __int16 v44 = 2048;
      uint64_t v45 = v15;
      int v16 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      int v17 = v9;
      uint32_t v18 = 52;
      goto LABEL_16;
    }
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v29 = a1[5];
    uint64_t v30 = a1[6];
    unint64_t v14 = +[NSDate date];
    [v14 timeIntervalSinceDate:a1[7]];
    int v36 = 138544130;
    uint64_t v37 = v29;
    __int16 v38 = 2114;
    uint64_t v39 = v30;
    __int16 v40 = 2112;
    id v41 = v5;
    __int16 v42 = 2048;
    uint64_t v43 = v31;
    int v16 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_15;
  }
  if (v6)
  {
    BOOL v19 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v19) {
        goto LABEL_22;
      }
      uint64_t v21 = a1[5];
      uint64_t v20 = a1[6];
      uint64_t v22 = a1[4];
      unint64_t v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544386;
      uint64_t v37 = v21;
      __int16 v38 = 2114;
      uint64_t v39 = v20;
      __int16 v40 = 2114;
      id v41 = v6;
      __int16 v42 = 2114;
      uint64_t v43 = v22;
      __int16 v44 = 2048;
      uint64_t v45 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v36, 0x34u);
      goto LABEL_17;
    }
    if (v19) {
      sub_10032B298(a1, (uint64_t)v6, v9);
    }
  }
  else
  {
    BOOL v24 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v24) {
        goto LABEL_22;
      }
      uint64_t v26 = a1[5];
      uint64_t v25 = a1[6];
      unsigned int v27 = (void *)a1[4];
      unint64_t v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544130;
      uint64_t v37 = v26;
      __int16 v38 = 2114;
      uint64_t v39 = v25;
      __int16 v40 = 2114;
      id v41 = v27;
      __int16 v42 = 2048;
      uint64_t v43 = v28;
      int v16 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_15:
      int v17 = v9;
      uint32_t v18 = 42;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v36, v18);
LABEL_17:

      goto LABEL_22;
    }
    if (v24)
    {
      uint64_t v32 = a1[5];
      uint64_t v33 = a1[6];
      unint64_t v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138543874;
      uint64_t v37 = v32;
      __int16 v38 = 2114;
      uint64_t v39 = v33;
      __int16 v40 = 2048;
      id v41 = v34;
      int v16 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      int v17 = v9;
      uint32_t v18 = 32;
      goto LABEL_16;
    }
  }
LABEL_22:

  uint64_t v35 = a1[8];
  if (v35) {
    (*(void (**)(uint64_t, id))(v35 + 16))(v35, v5);
  }
}

void sub_100042F98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v5 = [v3 playerPath];
  id v4 = [v3 error];

  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
}

MRDNowPlayingPlayerClient *__cdecl sub_1000432E0(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingOriginClient *)a2 activeNowPlayingClient];
  id v3 = [v2 activePlayerClient];

  return (MRDNowPlayingPlayerClient *)v3;
}

int64_t sub_100043330(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  id v4 = a3;
  id v5 = [(MRDNowPlayingPlayerClient *)a2 lastPlayingDate];
  id v6 = [(MRDNowPlayingPlayerClient *)v4 lastPlayingDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_100043C64(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingOriginClient *)a2 origin];
  unsigned __int8 v3 = [v2 isHosted];

  return v3;
}

BOOL sub_100043CF4(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingOriginClient *)a2 deviceInfo];
  char v3 = [v2 containsLocalDevice] ^ 1;

  return v3;
}

BOOL sub_100043E28(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingOriginClient *)a2 deviceInfo];
  char v3 = [v2 routingContextID];
  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 nowPlayingServer];
  id v6 = [v5 localOriginClient];
  id v7 = [v6 deviceInfo];
  unint64_t v8 = [v7 routingContextID];
  unsigned __int8 v9 = [v3 isEqualToString:v8];

  return v9;
}

BOOL sub_100043F40(id a1, MRDNowPlayingOriginClient *a2)
{
  return [(MRDNowPlayingOriginClient *)a2 containsActiveStream];
}

__CFString *sub_1000441C4(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = *off_100417660[a1 - 1];
  }
  return v2;
}

void sub_1000445B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000445D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained openRoutePicker];
}

void sub_100044724(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100044918(id *result, uint64_t a2)
{
  if (a2 == 1) {
    return (id *)[result[4] openRoutePicker];
  }
  return result;
}

BOOL sub_100044D40(id a1, NSNumber *a2, MRDBackgroundActivityController *a3)
{
  return [(MRDBackgroundActivityController *)a3 isBackgroundActivityActive];
}

void sub_100044F60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004517C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v10 = MREndpointConnectionReasonUserInfoKey;
  CFStringRef v11 = @"intelligentRoutingRecommendationValidator";
  id v4 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10004529C;
  v7[3] = &unk_1004175B8;
  id v5 = *(void **)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}

void sub_10004529C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  if (v3)
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v8 = [*(id *)(a1 + 32) activeSystemEndpoint];
      int v13 = 138413058;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      id v18 = v3;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RBAM Failed to connect to active system endpoint %@<%@> with error %@. Reset to %@.", (uint8_t *)&v13, 0x2Au);
    }
  }
  else
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v12 = [*(id *)(a1 + 32) activeSystemEndpoint];
      int v13 = 138412802;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RBAM Setting active system endpoint to %@<%@> (old value: %@)", (uint8_t *)&v13, 0x20u);
    }
    [*(id *)(a1 + 32) setActiveSystemEndpoint:*(void *)(a1 + 40)];
  }
  objc_sync_exit(v4);
}

void sub_100045448(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000458D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1000458F8(id a1, NSString *a2)
{
  return +[MRDMediaAppInFocusMonitor isRemoteControllableApp:a2];
}

id sub_100045908(uint64_t a1, void *a2)
{
  if (a2) {
    objc_msgSend(*(id *)(a1 + 32), "setSortByIsVideoRoute:", objc_msgSend(a2, "isVideoApp"));
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);

  return [v3 _presentRoutePickerWithConfiguration:v4];
}

void sub_100045AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Block_object_dispose((const void *)(v15 - 64), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100045B00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setMediaControls:0];
}

void sub_100045C68(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaControlsConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_10047DF18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10032B37C();
    sub_100045CC0();
  }
}

void sub_100045CC0()
{
  v1[0] = 0;
  if (!qword_10047DF20)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_100045DBC;
    v1[4] = &unk_1004171F0;
    v1[5] = v1;
    long long v2 = off_100417648;
    uint64_t v3 = 0;
    qword_10047DF20 = _sl_dlopen();
  }
  dispatch_semaphore_t v0 = (void *)v1[0];
  if (!qword_10047DF20)
  {
    dispatch_semaphore_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_100045DBC()
{
  uint64_t result = _sl_dlopen();
  qword_10047DF20 = result;
  return result;
}

MRDNowPlayingPlayerClient *sub_100045E30(uint64_t a1)
{
  sub_100045CC0();
  uint64_t result = (MRDNowPlayingPlayerClient *)objc_getClass("MPMediaControls");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_10047DF28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v3 = (MRDNowPlayingPlayerClient *)sub_10032B3A4();
    return [(MRDNowPlayingPlayerClient *)v3 initWithPlayerPath:v5];
  }
  return result;
}

void sub_100046380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100046398(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000463A8(uint64_t a1)
{
}

void sub_1000463B0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 72);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000466EC;
  v21[3] = &unk_1004176A8;
  id v4 = v2;
  id v22 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v21];
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v6 = (objc_class *)objc_opt_class();
  uint64_t v7 = NSStringFromClass(v6);
  [v5 appendFormat:@"%@ %p {\n", v7, *(void *)(a1 + 32)];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playerPath = %@\n", *(void *)(*(void *)(a1 + 32) + 8)];
  id v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v9 = [*(id *)(*(void *)(a1 + 32) + 8) player];
  [v8 appendFormat:@"  player = %@\n", v9];

  uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if ([*(id *)(a1 + 32) canBeNowPlayingPlayer]) {
    CFStringRef v11 = @"YES";
  }
  else {
    CFStringRef v11 = @"NO";
  }
  [v10 appendFormat:@"  canBeNowPlayingPlayer = %@\n", v11];
  if (*(void *)(*(void *)(a1 + 32) + 88)) {
    CFStringRef v12 = @"YES";
  }
  else {
    CFStringRef v12 = @"NO";
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  transaction = %@\n", v12];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playbackState = %@\n", *(void *)(*(void *)(a1 + 32) + 56)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  inferredPlaybackState = %@\n", *(void *)(*(void *)(a1 + 32) + 64)];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  playbackStateHistory = %@\n", v4];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 80)) {
    CFStringRef v13 = @"YES";
  }
  else {
    CFStringRef v13 = @"NO";
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  pictureInPictureEnabled = %@\n", v13];
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (*(void *)(v14 + 16))
  {
    [v15 appendFormat:@"  supportedCommands = %@\n", *(void *)(v14 + 16)];
  }
  else
  {
    StringRepresentation = (void *)MRDataCreateStringRepresentation();
    [v15 appendFormat:@"  supportedCommands = %@\n", StringRepresentation];
  }
  __int16 v17 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v18 = (void *)MRPlaybackQueueCapabilitiesCopyDescription();
  [v17 appendFormat:@"  capabilities = %@\n", v18];

  __int16 v19 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v20 = MRCreateIndentedDebugDescriptionFromObject();
  [v19 appendFormat:@"  playbackQueue = %@\n", v20];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  subscriptionController = %@\n", *(void *)(*(void *)(a1 + 32) + 128)];
  if (*(void *)(*(void *)(a1 + 32) + 136)) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"  participantDataSource = %@\n", *(void *)(*(void *)(a1 + 32) + 136)];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"}"];
}

void sub_1000466EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  [a2 intValue];
  id v6 = (id)MRMediaRemoteCopyPlaybackStateDescription();
  [v4 setObject:v5 forKeyedSubscript:v6];
}

void sub_100046850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100046868(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 24) copy];

  return _objc_release_x1();
}

void sub_1000469A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000469BC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) copy];

  return _objc_release_x1();
}

void sub_100046B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100046B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  if (!v3)
  {
    if (*(void *)(v2 + 24))
    {
      id v4 = +[MRCommandInfo commandInfosFromData:](MRCommandInfo, "commandInfosFromData:");
      [*(id *)(a1 + 32) setSupportedRemoteControlCommands:v4];

      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [v3 copy];

  return _objc_release_x1();
}

void sub_100046C80(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = _MRLogForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(v5 + 8);
      uint64_t v7 = *(void *)(v5 + 16);
      int v14 = 138544130;
      uint64_t v15 = v8;
      __int16 v16 = 2114;
      CFStringRef v17 = @"supportedCommands";
      __int16 v18 = 2112;
      uint64_t v19 = v7;
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      id v9 = "Set: %{public}@ setting %{public}@ from <%@> to <%@>";
      uint64_t v10 = v3;
      uint32_t v11 = 42;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
    }
  }
  else if (v4)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    int v14 = 138543874;
    uint64_t v15 = v13;
    __int16 v16 = 2114;
    CFStringRef v17 = @"supportedCommands";
    __int16 v18 = 2112;
    uint64_t v19 = v12;
    id v9 = "Set: %{public}@ setting %{public}@ to <%@>";
    uint64_t v10 = v3;
    uint32_t v11 = 32;
    goto LABEL_6;
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 40));
}

void sub_100046E70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v3 != v2 && (objc_msgSend(v3, "isEqualToData:") & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    id v6 = [*(id *)(a1 + 40) copy];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 24);
    *(void *)(v7 + 24) = v6;

    id v9 = [*(id *)(a1 + 32) supportedRemoteControlCommands];
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_supportedCommandsDidChange:", *(void *)(*(void *)(a1 + 32) + 24));
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }
}

id sub_100046FB8(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v4 = [*(id *)(a1 + 40) minimalReadableDescription];
    int v28 = 138543874;
    uint64_t v29 = v3;
    __int16 v30 = 2114;
    CFStringRef v31 = @"playbackQueue";
    __int16 v32 = 2112;
    uint64_t v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v28, 0x20u);
  }
  uint64_t v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = [*(id *)(a1 + 40) contentItemWithOffset:0];
    int v28 = 138543874;
    uint64_t v29 = v6;
    __int16 v30 = 2114;
    CFStringRef v31 = @"nowPlayingItem";
    __int16 v32 = 2112;
    uint64_t v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v28, 0x20u);
  }
  uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 32) playbackQueue];
  [v8 contentItemWithOffset:0];
  id v9 = (void *)MRContentItemCopyMinimalReadableDescription();

  uint64_t v10 = _MRLogForCategory();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(v12 + 8);
      int v14 = [*(id *)(v12 + 32) playbackQueue];
      [v14 contentItemWithOffset:0];
      uint64_t v15 = (void *)MRContentItemCopyMinimalReadableDescription();
      [*(id *)(a1 + 40) contentItemWithOffset:0];
      __int16 v16 = (void *)MRContentItemCopyMinimalReadableDescription();
      int v28 = 138544130;
      uint64_t v29 = v13;
      __int16 v30 = 2114;
      CFStringRef v31 = @"nowPlayingItem";
      __int16 v32 = 2112;
      uint64_t v33 = v15;
      __int16 v34 = 2112;
      uint64_t v35 = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v28, 0x2Au);
    }
  }
  else if (v11)
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    [*(id *)(a1 + 40) contentItemWithOffset:0];
    __int16 v18 = (void *)MRContentItemCopyMinimalReadableDescription();
    int v28 = 138543874;
    uint64_t v29 = v17;
    __int16 v30 = 2114;
    CFStringRef v31 = @"nowPlayingItem";
    __int16 v32 = 2112;
    uint64_t v33 = v18;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v28, 0x20u);
  }
  uint64_t v19 = [*(id *)(a1 + 40) contentItemWithOffset:0];
  __int16 v20 = [*(id *)(*(void *)(a1 + 32) + 32) playbackQueue];
  uint64_t v21 = [v20 contentItemWithOffset:0];
  if (v19 == v21) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = [v19 isEqual:v21] ^ 1;
  }

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  uint64_t v23 = *(void *)(a1 + 40);
  if (v23) {
    BOOL v24 = [[MRDPlaybackQueue alloc] initWithPlaybackQueue:*(void *)(a1 + 40)];
  }
  else {
    BOOL v24 = 0;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), v24);
  if (v23) {

  }
  uint64_t v25 = *(id **)(a1 + 32);
  uint64_t v26 = [v25[4] playbackQueue];
  objc_msgSend(v25, "_onQueue_playbackQueueDidChange:nowPlayingItemChanged:", v26, v22);

  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
}

void sub_100047480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100047498(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 32) playbackQueue];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1000475C8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 64) playbackState];
  if (result != *(_DWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
    [*(id *)(*(void *)(a1 + 32) + 64) playbackState];
    uint64_t v3 = (void *)MRMediaRemoteCopyPlaybackStateDescription();

    uint64_t v4 = _MRLogForCategory();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 8);
        [*(id *)(v6 + 64) playbackState];
        uint64_t v8 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
        id v9 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
        int v17 = 138544130;
        uint64_t v18 = v7;
        __int16 v19 = 2114;
        CFStringRef v20 = @"inferred playback state";
        __int16 v21 = 2112;
        uint64_t v22 = v8;
        __int16 v23 = 2112;
        BOOL v24 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v17, 0x2Au);

LABEL_7:
      }
    }
    else if (v5)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
      int v17 = 138543874;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      CFStringRef v20 = @"inferred playback state";
      __int16 v21 = 2112;
      uint64_t v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v17, 0x20u);
      goto LABEL_7;
    }

    BOOL v11 = [MRDNowPlayingPlayerClientPlaybackState alloc];
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    uint64_t v13 = +[NSDate date];
    int v14 = [(MRDNowPlayingPlayerClientPlaybackState *)v11 initWithPlaybackState:v12 date:v13];
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = *(void **)(v15 + 64);
    *(void *)(v15 + 64) = v14;

    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }
  return result;
}

void sub_1000478B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000478CC(uint64_t a1)
{
}

id sub_100047988(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 56) playbackState];
  if (result != *(_DWORD *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
    [*(id *)(*(void *)(a1 + 32) + 56) playbackState];
    uint64_t v3 = (void *)MRMediaRemoteCopyPlaybackStateDescription();

    uint64_t v4 = _MRLogForCategory();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 8);
        [*(id *)(v6 + 56) playbackState];
        uint64_t v8 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
        id v9 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
        int v14 = 138544130;
        uint64_t v15 = v7;
        __int16 v16 = 2114;
        CFStringRef v17 = @"playback state";
        __int16 v18 = 2112;
        __int16 v19 = v8;
        __int16 v20 = 2112;
        __int16 v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v14, 0x2Au);

LABEL_7:
      }
    }
    else if (v5)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = (void *)MRMediaRemoteCopyPlaybackStateDescription();
      int v14 = 138543874;
      uint64_t v15 = v10;
      __int16 v16 = 2114;
      CFStringRef v17 = @"playback state";
      __int16 v18 = 2112;
      __int16 v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v14, 0x20u);
      goto LABEL_7;
    }

    BOOL v11 = [[MRDNowPlayingPlayerClientPlaybackState alloc] initWithPlaybackState:*(unsigned int *)(a1 + 48) date:*(void *)(a1 + 40)];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 56);
    *(void *)(v12 + 56) = v11;

    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_popState");
  }
  return result;
}

uint64_t sub_100047C08(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 120) = [*(id *)(a1 + 40) copy];

  return _objc_release_x1();
}

void sub_100047CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100047D10(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 81);
  return result;
}

unsigned __int8 *sub_100047D9C(uint64_t a1)
{
  id result = *(unsigned __int8 **)(a1 + 32);
  if (result[81] != *(unsigned __int8 *)(a1 + 40))
  {
    objc_msgSend(result, "_onQueue_pushState");
    *(unsigned char *)(*(void *)(a1 + 32) + 81) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void **)(a1 + 32);
    return (unsigned __int8 *)objc_msgSend(v3, "_onQueue_popState");
  }
  return result;
}

void sub_100047EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100047F08(uint64_t a1)
{
}

void sub_100047FB4(uint64_t a1)
{
}

void sub_1000480A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000480B8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState");

  return _objc_release_x1();
}

void sub_1000481F4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v5 date];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100048458(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 40);
  if (result != v2)
  {
    uint64_t v4 = (void *)MRPlaybackQueueCapabilitiesCopyDescription();

    id v5 = _MRLogForCategory();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v8 = (void *)MRPlaybackQueueCapabilitiesCopyDescription();
        id v9 = (void *)MRPlaybackQueueCapabilitiesCopyDescription();
        int v11 = 138544130;
        uint64_t v12 = v7;
        __int16 v13 = 2114;
        CFStringRef v14 = @"playbackQueueCapabilities";
        __int16 v15 = 2112;
        __int16 v16 = v8;
        __int16 v17 = 2112;
        __int16 v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v11, 0x2Au);

LABEL_7:
      }
    }
    else if (v6)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = (void *)MRPlaybackQueueCapabilitiesCopyDescription();
      int v11 = 138543874;
      uint64_t v12 = v10;
      __int16 v13 = 2114;
      CFStringRef v14 = @"playbackQueueCapabilities";
      __int16 v15 = 2112;
      __int16 v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v11, 0x20u);
      goto LABEL_7;
    }

    *(void *)(*(void *)(a1 + 32) + 40) = *(void *)(a1 + 40);
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackQueueCapabilitiesDidChange:", *(void *)(*(void *)(a1 + 32) + 40));
  }
  return result;
}

void sub_1000486AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000486C4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 40);
  return result;
}

void sub_100048784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004879C(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_isPlaying");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000488C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000488E0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 80);
  return result;
}

void sub_1000489A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000489B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32) || [*(id *)(v2 + 16) count]) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_onQueue_isPlaying");
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100048AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048B14(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MRNowPlayingState) initWithPlayerPath:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = [*(id *)(a1 + 32) supportedRemoteControlCommands];
  id v6 = [v5 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setSupportedCommands:v6];

  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 32) playbackQueue];
  id v8 = [v7 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPlaybackQueue:v8];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPlaybackQueueCapabilities:*(void *)(*(void *)(a1 + 32) + 40)];
  id v9 = [*(id *)(*(void *)(a1 + 32) + 8) client];
  uint64_t v10 = [v9 displayName];
  id v11 = [v10 copy];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setDisplayName:v11];

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_playbackState");
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setPlaybackState:", objc_msgSend(v13, "playbackState"));
  uint64_t v12 = [v13 date];
  [v12 timeIntervalSinceReferenceDate];
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setPlaybackStateTimestamp:");
}

void sub_100048D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048D68(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_lastPlayingDate");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v3 timeIntervalSinceNow];
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -v2;
}

void sub_100048F18(uint64_t a1)
{
}

id sub_100048FC4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  double v2 = [*(id *)(a1 + 40) player];
  id v3 = [v2 copy];
  [*(id *)(*(void *)(a1 + 32) + 8) setPlayer:v3];

  uint64_t v4 = *(void **)(a1 + 32);

  return objc_msgSend(v4, "_onQueue_popState");
}

id sub_1000490B0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = *(unsigned char *)(a1 + 40);
  double v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_popState");
}

void sub_100049190(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  [*(id *)(*(void *)(a1 + 32) + 8) setClient:v2];
}

id sub_100049280(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) player];
  [v2 mergeFrom:*(void *)(a1 + 40)];

  id v3 = *(void **)(a1 + 32);

  return objc_msgSend(v3, "_onQueue_popState");
}

id sub_1000493A8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_updatePlaybackQueue:fromRequest:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

id sub_1000497A4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) clearArtworkForContentItems:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return objc_msgSend(v2, "_onQueue_playbackQueueContentItemsArtworkDidChange:", v3);
}

void sub_1000498D8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  id v6 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = [v2 objectForKeyedSubscript:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100049A30(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "allValues", 0);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        [v7 playbackState];
        if (*(unsigned __int8 *)(a1 + 48) == MRMediaRemotePlaybackStateIsAdvancing()) {
          [*(id *)(a1 + 40) addObject:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100049C8C(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  id v6 = [v2[9] allValues];
  uint64_t v3 = [v2 _sortSnapshots:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

int64_t sub_100049D10(id a1, MRDNowPlayingPlayerClientPlaybackStateSnapshot *a2, MRDNowPlayingPlayerClientPlaybackStateSnapshot *a3)
{
  return [(MRDNowPlayingPlayerClientPlaybackStateSnapshot *)a3 compare:a2];
}

void sub_100049EDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    obuint64_t j = *(id *)(v7 + 40);
    uint64_t v8 = [v3 createPlaybackQueueForRequest:v5 cachingPolicy:v4 playerPath:v6 partiallyCachedItems:&obj capabilities:*(void *)(v2 + 40)];
    objc_storeStrong((id *)(v7 + 40), obj);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    long long v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [objc_alloc((Class)MRPlaybackQueue) initWithContentItems:&__NSArray0__struct];
    _objc_release_x1();
  }
}

void sub_10004A088(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);
  if (!v2)
  {
    uint64_t v3 = +[NSMapTable strongToStrongObjectsMapTable];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 112);
    *(void *)(v4 + 112) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);
  }
  id v6 = v2;
  uint64_t v7 = [*(id *)(a1 + 40) identifier];
  [v6 setObject:*(void *)(a1 + 40) forKey:v7];
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x3032000000;
  __int16 v20 = sub_100046398;
  __int16 v21 = sub_1000463A8;
  id v22 = 0;
  uint64_t v8 = +[NSNotificationCenter defaultCenter];
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10004A284;
  v13[3] = &unk_100417800;
  objc_copyWeak(&v16, &location);
  id v10 = v7;
  id v14 = v10;
  __int16 v15 = &v17;
  uint64_t v11 = [v8 addObserverForName:@"MRDMusicHandoffSessionDidFinishNotification" object:v9 queue:0 usingBlock:v13];
  uint64_t v12 = (void *)v18[5];
  void v18[5] = v11;

  objc_destroyWeak(&v16);
  _Block_object_dispose(&v17, 8);

  objc_destroyWeak(&location);
}

void sub_10004A254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 72));
  _Unwind_Resume(a1);
}

void sub_10004A284(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained[12];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004A344;
    block[3] = &unk_100416870;
    uint64_t v8 = WeakRetained;
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = v6;
    dispatch_sync(v4, block);
  }
}

void sub_10004A344(void *a1)
{
  [*(id *)(a1[4] + 112) removeObjectForKey:a1[5]];
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_10004A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004A500(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 112);
  id v6 = [*(id *)(a1 + 40) sessionIdentifier];
  uint64_t v3 = [v2 objectForKey:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10004A644(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 32) clearArtwork];
}

void sub_10004A6E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
  [WeakRetained nowPlayingPlayerClient:*(void *)(a1 + 32) playbackQueueParticipantsDidChange:*(void *)(a1 + 40)];
}

void sub_10004BB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004BBCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlNetworkService] Bluetooth address changed to %{public}@", (uint8_t *)&v6, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLastKnownBluetoothAddress:v3];
  [WeakRetained _txtDataChanged];
}

void sub_10004BCA8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _initializeBonjourServiceWithDeviceInfo:v3];
}

void sub_10004C398(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = dispatch_time(0, 30000000000);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10004C45C;
  v6[3] = &unk_1004158D8;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, v6);
}

id sub_10004C45C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initializeBonjourServiceWithDeviceInfo:*(void *)(a1 + 40)];
}

id sub_10004C6BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _txtDataChangedWithDeviceInfo:a2];
}

id sub_10004CFD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10004D28C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D360(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v11 = [v3[8] remoteObjectProxy];
    [v11 hostedExternalDeviceConnectionStateDidChange:*(unsigned int *)(a1 + 48) withError:*(void *)(a1 + 40)];
  }
  else
  {
    dispatch_time_t v4 = v3;
    objc_sync_enter(v4);
    id v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      id v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = (void *)MRExternalDeviceConnectionStateCopyDescription();
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412802;
        id v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        uint64_t v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching connectionState %@ %@ for %@", buf, 0x20u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 104) setConnectionState:*(unsigned int *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 32) + 104) setConnectionStateError:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }
}

void sub_10004D4F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D5C0(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v10 = [v3[8] remoteObjectProxy];
    [v10 hostedExternalDeviceDeviceInfoDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    dispatch_time_t v4 = v3;
    objc_sync_enter(v4);
    id v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      id v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching deviceInfo %@ for %@", buf, 0x16u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 104) setDeviceInfo:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }
}

void sub_10004D724(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D814(void *a1, int a2)
{
  if (a2)
  {
    id v9 = [*(id *)(a1[4] + 64) remoteObjectProxy];
    [v9 hostedExternalDeviceDidReceiveCustomData:a1[5] withName:a1[6]];
  }
  else
  {
    id v3 = +[MRUserSettings currentSettings];
    unsigned int v4 = [v3 verboseHostedExternalDeviceClientLogging];

    if (v4)
    {
      id v5 = MRLogCategoryConnections();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = a1[5];
        uint64_t v6 = a1[6];
        uint64_t v8 = a1[4];
        *(_DWORD *)long long buf = 138412802;
        uint64_t v11 = v7;
        __int16 v12 = 2112;
        uint64_t v13 = v6;
        __int16 v14 = 2112;
        uint64_t v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching customData %@ %@ for %@", buf, 0x20u);
      }
    }
  }
}

void sub_10004DA0C(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v10 = [v3[8] remoteObjectProxy];
    [v10 hostedExternalDeviceEndpointDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    id v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching endpoint %@ for %@", buf, 0x16u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 104) setEndpoint:*(void *)(a1 + 40)];
    objc_sync_exit(v4);
  }
}

void sub_10004DB70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004DC44(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v17 = [v3[8] remoteObjectProxy];
    [v17 hostedExternalDeviceVolumeCapabilitiesDidChange:*(unsigned int *)(a1 + 48) forOutputDevice:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    id v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = (void *)MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription();
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v19 = v8;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching volumeCapabilities %@ outputDevice %@ for %@", buf, 0x20u);
      }
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolumeCapabilities];
      BOOL v12 = v11 == 0;

      if (v12)
      {
        id v13 = objc_alloc_init((Class)NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceVolumeCapabilities:v13];
      }
      uint64_t v14 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
      uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolumeCapabilities];
      __int16 v16 = [*(id *)(a1 + 40) uid];
      [v15 setObject:v14 forKeyedSubscript:v16];
    }
    else
    {
      uint64_t v14 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
      [*(id *)(*(void *)(a1 + 32) + 104) setVolumeCapabilities:v14];
    }

    objc_sync_exit(v4);
  }
}

void sub_10004DE88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004DF68(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    unsigned int v4 = [v3[8] remoteObjectProxy];
    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    id v21 = v4;
    [v4 hostedExternalDeviceVolumeDidChange:*(void *)(a1 + 40) forOutputDevice:v5];
  }
  else
  {
    unsigned int v6 = v3;
    objc_sync_enter(v6);
    uint64_t v7 = +[MRUserSettings currentSettings];
    unsigned int v8 = [v7 verboseHostedExternalDeviceClientLogging];

    if (v8)
    {
      uint64_t v10 = MRLogCategoryConnections();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        double v11 = *(float *)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 134218498;
        double v23 = v11;
        __int16 v24 = 2112;
        uint64_t v25 = v12;
        __int16 v26 = 2112;
        uint64_t v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching volume %lf outputDevice %@ for %@", buf, 0x20u);
      }
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v14 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolume];
      BOOL v15 = v14 == 0;

      if (v15)
      {
        id v17 = objc_alloc_init((Class)NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceVolume:v17];
      }
      LODWORD(v16) = *(_DWORD *)(a1 + 48);
      __int16 v18 = +[NSNumber numberWithFloat:v16];
      uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceVolume];
      __int16 v20 = [*(id *)(a1 + 40) uid];
      [v19 setObject:v18 forKeyedSubscript:v20];
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a1 + 48);
      __int16 v18 = +[NSNumber numberWithFloat:v9];
      [*(id *)(*(void *)(a1 + 32) + 104) setVolume:v18];
    }

    objc_sync_exit(v6);
  }
}

void sub_10004E1A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E278(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v17 = [v3[8] remoteObjectProxy];
    [v17 hostedExternalDeviceIsMutedDidChange:*(unsigned __int8 *)(a1 + 48) forOutputDevice:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(unsigned __int8 *)(a1 + 48);
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 67109634;
        int v19 = v8;
        __int16 v20 = 2112;
        uint64_t v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching isMuted %u outputDevice %@ for %@", buf, 0x1Cu);
      }
    }
    if (*(void *)(a1 + 40))
    {
      double v11 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceMute];
      BOOL v12 = v11 == 0;

      if (v12)
      {
        id v13 = objc_alloc_init((Class)NSMutableDictionary);
        [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceMute:v13];
      }
      uint64_t v14 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
      BOOL v15 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceMute];
      double v16 = [*(id *)(a1 + 40) uid];
      [v15 setObject:v14 forKeyedSubscript:v16];
    }
    else
    {
      uint64_t v14 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
      [*(id *)(*(void *)(a1 + 32) + 104) setIsMuted:v14];
    }

    objc_sync_exit(v4);
  }
}

void sub_10004E4B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E57C(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v14 = [v3[8] remoteObjectProxy];
    [v14 hostedExternalDeviceDidAddOutputDevice:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching didAddOutputDevice %@ for %@", buf, 0x16u);
      }
    }
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      BOOL v12 = objc_alloc_init(MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v12];
    }
    id v13 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    [v13 addOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }
}

void sub_10004E738(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004E804(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v14 = [v3[8] remoteObjectProxy];
    [v14 hostedExternalDeviceDidChangeOutputDevice:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching didChangeOutputDevice %@ for %@", buf, 0x16u);
      }
    }
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      BOOL v12 = objc_alloc_init(MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v12];
    }
    id v13 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    [v13 changeOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }
}

void sub_10004E9C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004EA8C(uint64_t a1, int a2)
{
  id v3 = *(id **)(a1 + 32);
  if (a2)
  {
    id v14 = [v3[8] remoteObjectProxy];
    [v14 hostedExternalDeviceDidRemoveOutputDevice:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching didRemoveOutputDevice %@ for %@", buf, 0x16u);
      }
    }
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      BOOL v12 = objc_alloc_init(MRDAVHostedExternalDevicePendingClientStateOutputDeviceModifications);
      [*(id *)(*(void *)(a1 + 32) + 104) setOutputDeviceModifications:v12];
    }
    id v13 = [*(id *)(*(void *)(a1 + 32) + 104) outputDeviceModifications];
    [v13 removeOutputDevice:*(void *)(a1 + 40)];

    objc_sync_exit(v4);
  }
}

void sub_10004EC48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004ED38(void *a1, int a2)
{
  id v3 = (id *)a1[4];
  if (a2)
  {
    id v16 = [v3[8] remoteObjectProxy];
    [v16 discoveryOutputDevicesChanged:a1[5] forConfiguration:a1[6]];
  }
  else
  {
    unsigned int v4 = v3;
    objc_sync_enter(v4);
    double v5 = +[MRUserSettings currentSettings];
    unsigned int v6 = [v5 verboseHostedExternalDeviceClientLogging];

    if (v6)
    {
      uint64_t v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = a1[5];
        uint64_t v8 = a1[6];
        uint64_t v10 = a1[4];
        *(_DWORD *)long long buf = 138412802;
        uint64_t v18 = v9;
        __int16 v19 = 2112;
        uint64_t v20 = v8;
        __int16 v21 = 2112;
        uint64_t v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[HostedExternalDeviceClient] Caching discoverySessionOutputDevicesChanged %@ configuration %@ for %@", buf, 0x20u);
      }
    }
    BOOL v11 = [*(id *)(a1[4] + 104) discoverySessionConfigurationsResults];
    BOOL v12 = v11 == 0;

    if (v12)
    {
      id v13 = objc_alloc_init((Class)NSMutableDictionary);
      [*(id *)(a1[4] + 104) setDiscoverySessionConfigurationsResults:v13];
    }
    uint64_t v14 = a1[5];
    BOOL v15 = [*(id *)(a1[4] + 104) discoverySessionConfigurationsResults];
    [v15 setObject:v14 forKeyedSubscript:a1[6]];

    objc_sync_exit(v4);
  }
}

void sub_10004EF04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004F064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004F12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004F1F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F2D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F3F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F478(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004FBAC(uint64_t a1, void *a2, void *a3)
{
  unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 64);
  id v5 = a3;
  id v6 = a2;
  id v7 = [v4 remoteObjectProxy];
  [v7 discoveryOutputDevicesChanged:v5 forConfiguration:v6];
}

void sub_10004FC2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 unsignedIntValue];
  id v7 = [*(id *)(a1 + 32) endpoint];
  uint64_t v8 = [v7 outputDevices];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004FD38;
  v12[3] = &unk_100417940;
  id v13 = v5;
  id v9 = v5;
  uint64_t v10 = objc_msgSend(v8, "msv_firstWhere:", v12);

  BOOL v11 = [*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy];
  [v11 hostedExternalDeviceVolumeCapabilitiesDidChange:v6 forOutputDevice:v10];
}

id sub_10004FD38(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10004FD7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 floatValue];
  int v7 = v6;
  uint64_t v8 = [*(id *)(a1 + 32) endpoint];
  id v9 = [v8 outputDevices];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10004FE90;
  v14[3] = &unk_100417940;
  id v15 = v5;
  id v10 = v5;
  BOOL v11 = objc_msgSend(v9, "msv_firstWhere:", v14);

  BOOL v12 = [*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy];
  LODWORD(v13) = v7;
  [v12 hostedExternalDeviceVolumeDidChange:v11 forOutputDevice:v13];
}

id sub_10004FE90(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10004FED4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 BOOLValue];
  int v7 = [*(id *)(a1 + 32) endpoint];
  uint64_t v8 = [v7 outputDevices];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004FFE0;
  v12[3] = &unk_100417940;
  id v13 = v5;
  id v9 = v5;
  id v10 = objc_msgSend(v8, "msv_firstWhere:", v12);

  BOOL v11 = [*(id *)(*(void *)(a1 + 40) + 64) remoteObjectProxy];
  [v11 hostedExternalDeviceIsMutedDidChange:v6 forOutputDevice:v10];
}

id sub_10004FFE0(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100050554(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 unsignedIntValue];
  id v6 = (id)MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription();
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_100050B30(id a1)
{
  uint64_t v1 = [MRDIDSService alloc];
  id v4 = +[IDSService mr_sharedIDSService];
  id v2 = [(MRDIDSService *)v1 initWithService:v4];
  id v3 = (void *)qword_10047DF30;
  qword_10047DF30 = (uint64_t)v2;
}

void sub_100050D9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100050E70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100050F30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100051070(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051160(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051244(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100051258(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_1000516EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051CB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100051CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100051CE4(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100051DE8;
  v3[3] = &unk_100417A78;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 88);
  [v2 enumerateObjectsUsingBlock:v3];
}

uint64_t sub_100051DE8(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void))(a2 + 16))(a2, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10]);
}

void sub_100051E0C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100051EFC;
  v3[3] = &unk_100417AC8;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  [v2 enumerateObjectsUsingBlock:v3];
}

uint64_t sub_100051EFC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(a2 + 16))(a2, a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_10005270C(id a1)
{
  qword_10047DF40 = objc_alloc_init(MRDNowPlayingDataSource);

  _objc_release_x1();
}

void sub_100052898(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100052914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000529F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052A04()
{
  return objc_opt_respondsToSelector() & 1;
}

id sub_100052AEC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 32)];
  [v2 setObject:v3 forKeyedSubscript:@"reason"];

  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 > 7) {
    CFStringRef v5 = @"?";
  }
  else {
    CFStringRef v5 = off_100417B70[v4];
  }
  [v2 setObject:v5 forKeyedSubscript:@"reasonString"];
  id v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v2 setObject:v6 forKeyedSubscript:@"wasPopped"];

  return v2;
}

void sub_100052E7C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidStartNotification" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100052F8C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:184];
  id v3 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v6 = @"MRDMusicHandoffSessionErrorKey";
  id v7 = v2;
  CFStringRef v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v3 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_10005321C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  CFStringRef v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  CFStringRef v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_1000532DC(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  CFStringRef v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  CFStringRef v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidFinishNotification" object:v4 userInfo:v5];
}

void sub_10005339C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  CFStringRef v6 = @"MRDMusicHandoffSessionEventKey";
  uint64_t v7 = v3;
  CFStringRef v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v2 postNotificationName:@"MRDMusicHandoffSessionDidStartNotification" object:v4 userInfo:v5];
}

void sub_100053D5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v7 - 104));
  _Unwind_Resume(a1);
}

void sub_100053DE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v11 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v12 = [WeakRetained createDelocalizedPlayerPath:a2];
    id v13 = [a4 mutableCopy];
    [v13 setObject:&__kCFBooleanTrue forKeyedSubscript:kMRMediaRemoteOptionIsRedirectingCommand];
    uint64_t v14 = +[MRUserSettings currentSettings];
    unsigned int v15 = [v14 verboseOriginForwarderLogging];

    if (v15)
    {
      id v16 = _MRLogForCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[MRDOriginForwarder] %@ forwarding command", buf, 0xCu);
      }
    }
    __int16 v17 = [[MRDRemoteControlCommand alloc] initWithCommandType:a3 playerPath:v12 unresolvedPlayerPath:v12 senderAppDisplayID:0 options:v13];
    uint64_t v18 = +[MRDMediaRemoteServer server];
    __int16 v19 = [v18 remoteControlServer];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100054008;
    v20[3] = &unk_100416820;
    id v21 = v9;
    [v19 sendRemoteControlCommand:v17 completion:v20];
  }
  else
  {
    (*((void (**)(id, void *))v9 + 2))(v9, &__NSArray0__struct);
  }
}

void sub_100054008(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 handlerReturnStatuses];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100054068(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained createDelocalizedPlayerPath:a3];
    id v10 = +[MRUserSettings currentSettings];
    unsigned int v11 = [v10 verboseOriginForwarderLogging];

    if (v11)
    {
      BOOL v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDOriginForwarder] %@ forwarding playbackQueueRequest", buf, 0xCu);
      }
    }
    id v14 = v6;
    MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync();
  }
  else
  {
    id v13 = [objc_alloc((Class)NSError) initWithMRError:123];
    (*((void (**)(id, void, id))v6 + 2))(v6, 0, v13);
  }
}

uint64_t sub_100054228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100054238(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained createDelocalizedPlayerPath:a3];
    id v10 = +[MRUserSettings currentSettings];
    unsigned int v11 = [v10 verboseOriginForwarderLogging];

    if (v11)
    {
      BOOL v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDOriginForwarder] %@ forwarding playbackSessionRequest", buf, 0xCu);
      }
    }
    id v14 = v6;
    MRMediaRemotePlaybackSessionRequest();
  }
  else
  {
    id v13 = [objc_alloc((Class)NSError) initWithMRError:123];
    (*((void (**)(id, void, id))v6 + 2))(v6, 0, v13);
  }
}

uint64_t sub_1000543F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100054408(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v14 = WeakRetained;
  if (WeakRetained)
  {
    id v15 = [WeakRetained createDelocalizedPlayerPath:v11];
    id v16 = +[MRUserSettings currentSettings];
    unsigned int v17 = [v16 verboseOriginForwarderLogging];

    if (v17)
    {
      uint64_t v18 = _MRLogForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v21 = v14;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[MRDOriginForwarder] %@ forwarding playbackSessionMigrationRequest", buf, 0xCu);
      }
    }
    id v19 = v12;
    MRMediaRemoteSendPlaybackSession();
  }
  else
  {
    id v15 = [objc_alloc((Class)NSError) initWithMRError:123];
    (*((void (**)(id, void, id))v12 + 2))(v12, 0, v15);
  }
}

uint64_t sub_1000545F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100054608(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained createDelocalizedPlayerPath:a3];
    id v11 = v6;
    MRMediaRemoteSendPlaybackSessionMigrateBegin();
  }
  else
  {
    id v10 = [objc_alloc((Class)NSError) initWithMRError:123];
    (*((void (**)(id, id))v6 + 2))(v6, v10);
  }
}

uint64_t sub_100054718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100054728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = [WeakRetained createDelocalizedPlayerPath:a4];
    id v12 = v7;
    MRMediaRemoteSendPlaybackSessionMigrateEnd();
  }
  else
  {
    id v11 = [objc_alloc((Class)NSError) initWithMRError:123];
    (*((void (**)(id, id))v7 + 2))(v7, v11);
  }
}

uint64_t sub_100054848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100057824(uint64_t a1, void *a2)
{
  if ([a2 isMediaRemoteDaemon])
  {
    id v3 = +[MRMediaRemoteServiceClient sharedServiceClient];
    uint64_t v4 = [v3 notificationClient];
    CFStringRef v5 = [v4 notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100057900;
    block[3] = &unk_100416938;
    id v8 = *(id *)(a1 + 32);
    dispatch_async(v5, block);
  }
  return 0;
}

void sub_100057900(uint64_t a1)
{
  qos_class_t v2 = qos_class_self();
  id v3 = dispatch_get_global_queue(v2, 0);
  id v4 = *(id *)(a1 + 32);
  MRMediaRemoteNowPlayingPing();
}

uint64_t sub_1000579A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100058384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000583B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000583C0(uint64_t a1)
{
}

void sub_1000583C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if ([v6 count])
  {
    switch(*(_DWORD *)(a1 + 64))
    {
      case 1:
        uint64_t v9 = [(objc_class *)off_100475D88() sharedAudioPresentationOutputContext];
        goto LABEL_10;
      case 2:
        uint64_t v9 = [(objc_class *)off_100475D88() sharedSystemAudioContext];
        goto LABEL_10;
      case 3:
        uint64_t v9 = [(objc_class *)off_100475D88() sharedSystemScreenContext];
        goto LABEL_10;
      case 4:
        uint64_t v9 = [(objc_class *)off_100475D88() iTunesAudioContext];
        goto LABEL_10;
      case 5:
        uint64_t v9 = [(objc_class *)off_100475D88() auxiliaryOutputContext];
LABEL_10:
        id v10 = v9;
        if (!v9) {
          goto LABEL_12;
        }
        unsigned int v11 = *(_DWORD *)(a1 + 64);
        break;
      default:
LABEL_12:
        id v12 = _MRLogForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[ODDSRouting] No output context strictly matches compatible context type. Using system audio context.", (uint8_t *)&v20, 2u);
        }

        id v10 = [(objc_class *)off_100475D88() sharedSystemAudioContext];
        unsigned int v11 = 2;
        break;
    }
    uint64_t v13 = [v6 firstObject];
    uint64_t v14 = [v13 avOutputDevice];
    uint64_t v15 = _MRLogForCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (v11 > 5) {
        CFStringRef v16 = @"<Unknown>";
      }
      else {
        CFStringRef v16 = off_100417D78[v11];
      }
      int v20 = 138543874;
      id v21 = v14;
      __int16 v22 = 2114;
      uint64_t v23 = v10;
      __int16 v24 = 2114;
      CFStringRef v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[ODDSRouting] Found output device: %{public}@ - setting on context %{public}@ (%{public}@)", (uint8_t *)&v20, 0x20u);
    }

    [v10 setOutputDevice:v14 options:*(void *)(a1 + 32)];
  }
  else
  {
    id v10 = _MRLogForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10032B4DC(a1, (uint64_t)v7, v10);
    }
  }

  uint64_t v17 = (id *)*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v18 = v17;
  if (v17) {
    BOOL v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    objc_msgSend(v17[6], "removeObject:");
  }
}

Class sub_1000587D8()
{
  if (qword_10047DF60 != -1) {
    dispatch_once(&qword_10047DF60, &stru_100417D58);
  }
  Class result = objc_getClass("AVOutputDeviceDiscoverySession");
  qword_10047DF58 = (uint64_t)result;
  off_100475D78 = (uint64_t (*)())sub_10005883C;
  return result;
}

id sub_10005883C()
{
  return (id)qword_10047DF58;
}

void sub_100058848(id a1)
{
  qword_10047DF68 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_100058874()
{
  if (qword_10047DF60 != -1) {
    dispatch_once(&qword_10047DF60, &stru_100417D58);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047DF68, "AVOutputContextSetOutputDevicePasswordKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047DF50, *v0);
  }
  off_100475D80 = (uint64_t (*)())sub_100058904;
  uint64_t v1 = (void *)qword_10047DF50;

  return v1;
}

id sub_100058904()
{
  return (id)qword_10047DF50;
}

Class sub_100058910()
{
  if (qword_10047DF60 != -1) {
    dispatch_once(&qword_10047DF60, &stru_100417D58);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_10047DF70 = (uint64_t)result;
  off_100475D88 = (uint64_t (*)())sub_100058974;
  return result;
}

id sub_100058974()
{
  return (id)qword_10047DF70;
}

void sub_100058BC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_100058C04(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v11 = WeakRetained[1];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100058D14;
  v16[3] = &unk_100415B98;
  id v17 = WeakRetained;
  id v18 = v8;
  id v19 = v7;
  id v20 = v9;
  id v12 = v9;
  id v13 = v7;
  id v14 = v8;
  uint64_t v15 = WeakRetained;
  dispatch_async(v11, v16);
}

uint64_t sub_100058D14(uint64_t a1)
{
  qos_class_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) objectForKeyedSubscript:RPOptionSenderID];
    uint64_t v4 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"destination"];
    CFStringRef v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"destinationGroupUID"];
    id v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"session"];
    id v7 = [*(id *)(a1 + 48) name];
    objc_msgSend(v2, "_onWorkerQueue_connectRemoteControlChannelForSource:destination:destinationGroupUID:session:name:", v3, v4, v5, v6, v7);
  }
  id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v8();
}

void sub_100058E1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = WeakRetained[1];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100058EE0;
    v8[3] = &unk_1004158D8;
    id v9 = v4;
    id v10 = v6;
    dispatch_async(v7, v8);
  }
}

void sub_100058EE0(uint64_t a1)
{
  qos_class_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:RPOptionSenderID];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"destination"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"destinationGroupUID"];
  CFStringRef v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"session"];
  id v6 = [objc_alloc((Class)NSError) initWithMRError:104 description:@"MRDRapportRemoteControlService received disconect event"];
  id v7 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100059050;
  v12[3] = &unk_100417DD8;
  id v13 = v2;
  id v14 = v3;
  id v15 = v4;
  id v16 = v5;
  id v8 = v5;
  id v9 = v4;
  id v10 = v3;
  id v11 = v2;
  objc_msgSend(v7, "_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:", v6, v12);
}

uint64_t sub_100059050(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 sourceUID];
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = [v3 destinationOutputDeviceUID];
    id v10 = a1[5];
    if (v9 == v10)
    {
    }
    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0;
LABEL_18:

        goto LABEL_19;
      }
    }
    id v13 = [v3 destinationGroupUID];
    id v14 = a1[6];
    if (v13 == v14)
    {
    }
    else
    {
      id v15 = v14;
      unsigned int v16 = [v13 isEqual:v14];

      if (!v16)
      {
        uint64_t v8 = 0;
LABEL_17:

        goto LABEL_18;
      }
    }
    id v17 = [v3 sessionUID];
    id v18 = v17;
    if (v17 == a1[7]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v17, "isEqual:");
    }

    goto LABEL_17;
  }
  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0;
LABEL_19:

  return v8;
}

void sub_1000591AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v7 = WeakRetained[1];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100059270;
    v8[3] = &unk_1004158D8;
    id v9 = v4;
    id v10 = v6;
    dispatch_async(v7, v8);
  }
}

void sub_100059270(uint64_t a1)
{
  qos_class_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:RPOptionSenderID];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"destination"];
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"destinationGroupUID"];
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"session"];
  id v6 = [objc_alloc((Class)NSError) initWithMRError:104 description:@"MRDRapportRemoteControlService received reset event"];
  unsigned int v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000593AC;
  v9[3] = &unk_100417E28;
  id v10 = v2;
  id v8 = v2;
  objc_msgSend(v7, "_onWorkerQueue_disconnectRemoteControlChannelsWithError:predicate:", v6, v9);
}

uint64_t sub_1000593AC(uint64_t a1, void *a2)
{
  id v3 = [a2 sourceUID];
  id v4 = v3;
  if (v3 == *(void **)(a1 + 32)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

void sub_100059458(id a1)
{
  qword_10047DF78 = (uint64_t)[objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.mediaremote"];

  _objc_release_x1();
}

uint64_t sub_1000595B4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 sessionUID];
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = [v3 destinationOutputDeviceUID];
    id v10 = a1[5];
    if (v9 == v10)
    {
    }
    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0;
LABEL_13:

        goto LABEL_14;
      }
    }
    id v13 = [v3 sourceUID];
    id v14 = v13;
    if (v13 == a1[6]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v13, "isEqual:");
    }

    goto LABEL_13;
  }
  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

void sub_100059A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100059AD8(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100059BD0;
    block[3] = &unk_100416780;
    id v6 = WeakRetained;
    id v7 = a1[4];
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = a1[7];
    dispatch_async(v4, block);
  }
}

void sub_100059BD0(uint64_t a1)
{
  qos_class_t v2 = [*(id *)(a1 + 32) _connectionForSource:*(void *)(a1 + 40) destination:*(void *)(a1 + 48) session:*(void *)(a1 + 56)];

  if (v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    [v3 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"session"];
    [v3 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"destination"];
    [v3 setObject:*(void *)(a1 + 64) forKeyedSubscript:@"destinationGroupUID"];
    [*(id *)(*(void *)(a1 + 32) + 24) sendEvent:@"com.apple.mediaremote.remotecontrol.disconnect" destination:*(void *)(a1 + 40) userInfo:v3];
  }
}

BOOL sub_100059CE4(id a1, MRDRapportRemoteControlServiceConnection *a2)
{
  return 1;
}

uint64_t sub_100059DDC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 sourceUID];
  id v5 = a1[4];
  if (v4 == v5)
  {

LABEL_5:
    id v9 = [v3 destinationOutputDeviceUID];
    id v10 = a1[5];
    if (v9 == v10)
    {
    }
    else
    {
      id v11 = v10;
      unsigned int v12 = [v9 isEqual:v10];

      if (!v12)
      {
        uint64_t v8 = 0;
LABEL_13:

        goto LABEL_14;
      }
    }
    id v13 = [v3 sessionUID];
    id v14 = v13;
    if (v13 == a1[6]) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (uint64_t)objc_msgSend(v13, "isEqual:");
    }

    goto LABEL_13;
  }
  id v6 = v5;
  unsigned int v7 = [v4 isEqual:v5];

  if (v7) {
    goto LABEL_5;
  }
  uint64_t v8 = 0;
LABEL_14:

  return v8;
}

void sub_10005A198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10005A3B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005ACBC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_immediatelyReevaluateRemoteControlState");
}

uint64_t sub_10005AD48(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

uint64_t sub_10005AD6C(uint64_t a1, void *a2)
{
  qos_class_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 ase];
  unsigned int v5 = [v4 containsOutputDeviceWithUID:v3];

  return v5 ^ 1;
}

id sub_10005AE78(id a1, HMHome *a2)
{
  qos_class_t v2 = [(HMHome *)a2 currentUser];
  id v3 = [v2 uniqueIdentifier];
  id v4 = [v3 UUIDString];

  return v4;
}

void sub_10005B2A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005B2E8(id a1, HMHome *a2)
{
  qos_class_t v2 = [(HMHome *)a2 currentUser];
  id v3 = [v2 uniqueIdentifier];
  id v4 = [v3 UUIDString];

  return v4;
}

void sub_10005B494(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v8 = [v5 destination];
    id v9 = [v8 endpoint];

    id v10 = +[NSSet setWithArray:*(void *)(a1 + 40)];
    id v11 = [v9 resolvedOutputDevices];
    unsigned int v12 = objc_msgSend(v11, "msv_compactMap:", &stru_100417FA0);
    id v13 = +[NSSet setWithArray:v12];

    if ([v10 isEqualToSet:v13])
    {
      [v5 playbackState];
      if (!MRMediaRemotePlaybackStateIsAdvancing())
      {
LABEL_13:
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

        goto LABEL_14;
      }
      id v14 = *(id *)(a1 + 56);
      objc_sync_enter(v14);
      if (![*(id *)(a1 + 56) count])
      {
        id v15 = [*(id *)(a1 + 64) queue];
        id v18 = _NSConcreteStackBlock;
        uint64_t v19 = 3221225472;
        id v20 = sub_10005B754;
        id v21 = &unk_1004158D8;
        unsigned int v16 = *(void **)(a1 + 72);
        uint64_t v22 = *(void *)(a1 + 64);
        id v23 = v16;
        dispatch_async(v15, &v18);
      }
      objc_msgSend(*(id *)(a1 + 56), "addObject:", *(void *)(a1 + 72), v18, v19, v20, v21, v22);
      objc_sync_exit(v14);
    }
    else
    {
      id v14 = _MRLogForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v13;
        __int16 v28 = 2112;
        uint64_t v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[ProximityController] Topology mismatch: recommended does not match response - recommended: (%@), response: (%@) skipping %@", buf, 0x20u);
      }
    }

    goto LABEL_13;
  }
  unsigned int v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10032B568((uint64_t)v6, v7);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
LABEL_14:
}

void sub_10005B730(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

NSString *__cdecl sub_10005B74C(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)[(MRAVOutputDevice *)a2 uid];
}

id sub_10005B754(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateRecommendedEndpointWithOutputDeviceUID:*(void *)(a1 + 40) reason:@"nearby device is playing"];
}

void sub_10005B768(uint64_t a1)
{
  qos_class_t v2 = +[MRUserSettings currentSettings];
  unsigned int v3 = [v2 supportManyRecommendationsPlatters];

  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10005B848;
    v7[3] = &unk_100417F00;
    id v4 = *(void **)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    id v5 = objc_msgSend(v4, "msv_filter:", v7);
    id v6 = [*(id *)(a1 + 48) uiController];
    [v6 acquireRouteRecommendationAssertionForIdentifiers:v5];
  }
}

id sub_10005B848(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

id sub_10005BB8C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateRecommendedEndpointWithOutputDeviceUID:*(void *)(a1 + 40) reason:@"received device event"];
}

void sub_10005BD70(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setAse:a2];
  unsigned int v3 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005BE0C;
  block[3] = &unk_100415CC8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);
}

id sub_10005BE0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) devicesUpdated];
}

void sub_10005BFC4(id a1)
{
  uint64_t v1 = +[MRUserSettings currentSettings];
  unsigned int v2 = [v1 supportMultiplayerHost];

  if (v2)
  {
    qword_10047DF88 = [[MRDAVOutputContextManager alloc] _init];
    _objc_release_x1();
  }
}

id sub_10005C3B4(id a1, MRAVOutputContext *a2)
{
  return [(MRAVOutputContext *)a2 debugDescription];
}

id sub_10005C454(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

id sub_10005C4F8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

uint64_t sub_10005C5F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005C604(uint64_t a1)
{
}

void sub_10005C60C(uint64_t a1)
{
  id v8 = [*(id *)(*(void *)(a1 + 32) + 8) allValues];
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 24) allValues];
  unsigned int v3 = [v8 arrayByAddingObjectsFromArray:v2];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) allValues];
  uint64_t v5 = [v3 arrayByAddingObjectsFromArray:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  unsigned int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

uint64_t sub_10005C7C0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) allValues];

  return _objc_release_x1();
}

void sub_10005C8F4(uint64_t a1, void *a2)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unsigned int v3 = objc_msgSend(a2, "allValues", 0);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unsigned int v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) registerCommunicationChannelForOutputContext:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        unsigned int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

uint64_t sub_10005C9EC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

id sub_10005CB2C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

void sub_10005CDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005CE18(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 8) allValues];
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_10005D3BC;
  v51[3] = &unk_1004180C8;
  unsigned int v3 = (id *)(a1 + 40);
  id v52 = *(id *)(a1 + 40);
  id v4 = objc_msgSend(v2, "msv_filter:", v51);

  uint64_t v5 = [v4 firstObject];
  uint64_t v6 = a1 + 56;
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  if (*(unsigned char *)(a1 + 64))
  {
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_10005D52C;
    v49[3] = &unk_1004180C8;
    id v50 = *v3;
    long long v9 = objc_msgSend(v4, "msv_filter:", v49);

    uint64_t v10 = [v9 firstObject];
    uint64_t v11 = *(void *)(*(void *)v6 + 8);
    unsigned int v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    id v4 = v9;
  }
  if (*(void *)(*(void *)(*(void *)v6 + 8) + 40))
  {
    id v13 = _MRLogForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      sub_10032B7C4(v6, (uint64_t *)v3, v13);
    }
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v14 = *v3;
    id v15 = [v14 countByEnumeratingWithState:&v45 objects:v59 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v46;
      while (2)
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v46 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(*((void *)&v45 + 1) + 8 * i)];
          if (v19)
          {
            uint64_t v27 = v19;
            __int16 v28 = _MRLogForCategory();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
              sub_10032B75C();
            }

            uint64_t v29 = *(void *)(*(void *)v6 + 8);
            __int16 v30 = *(void **)(v29 + 40);
            *(void *)(v29 + 40) = v27;

            goto LABEL_34;
          }
        }
        id v16 = [v14 countByEnumeratingWithState:&v45 objects:v59 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }

    id v20 = [*(id *)(*(void *)(a1 + 32) + 24) allValues];
    uint64_t v39 = _NSConcreteStackBlock;
    uint64_t v40 = 3221225472;
    id v41 = sub_10005D69C;
    __int16 v42 = &unk_1004180F0;
    id v21 = *(void **)(a1 + 40);
    uint64_t v43 = *(void *)(a1 + 32);
    id v44 = v21;
    uint64_t v22 = objc_msgSend(v20, "msv_firstWhere:", &v39);

    id v23 = objc_msgSend(v22, "contextID", v39, v40, v41, v42, v43);
    if (v23)
    {
      __int16 v24 = _MRLogForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = *v3;
        __int16 v26 = [v22 outputDeviceUIDs];
        *(_DWORD *)long long buf = 138543874;
        id v54 = v22;
        __int16 v55 = 2114;
        id v56 = v25;
        __int16 v57 = 2114;
        long long v58 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] Reusing inactive outputContext %{public}@ for: %{public}@ (%{public}@)", buf, 0x20u);
      }
      [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:v23];
    }
    else
    {
      CFStringRef v31 = [(objc_class *)off_100475F78() addSharedAudioOutputContext];
      if (v31)
      {
        id v32 = [objc_alloc((Class)MRAVConcreteOutputContext) initWithAVOutputContext:v31 type:5];

        [*(id *)(a1 + 32) registerOutputContext:v32];
        uint64_t v33 = _MRLogForCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          id v34 = *v3;
          *(_DWORD *)long long buf = 138543618;
          id v54 = v32;
          __int16 v55 = 2114;
          id v56 = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] Created new outputContext %{public}@ for: %{public}@", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v33 = _MRLogForCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          sub_10032B6E0((uint64_t *)(a1 + 40), v33);
        }
        id v32 = v22;
      }

      uint64_t v22 = v32;
    }
    uint64_t v35 = _MRLogForCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      id v36 = *v3;
      *(_DWORD *)long long buf = 138543618;
      id v54 = v22;
      __int16 v55 = 2114;
      id v56 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] Reserving outputContext %{public}@ for: %{public}@", buf, 0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setObject:v22 forKeyedSubscript:*(void *)(a1 + 48)];
    if (*(unsigned char *)(a1 + 65)) {
      [*(id *)(a1 + 32) _notifyLocalDeviceDidChangeOutputContext];
    }
    uint64_t v37 = *(void *)(*(void *)v6 + 8);
    __int16 v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = v22;
  }
LABEL_34:
}

id sub_10005D3BC(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 outputDevices];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10005D464;
  v6[3] = &unk_100417940;
  id v7 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(v3, "mr_any:", v6);

  return v4;
}

id sub_10005D464(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) allObjects];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005D520;
  v8[3] = &unk_100417F00;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_10005D520(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

id sub_10005D52C(uint64_t a1, void *a2)
{
  id v3 = [a2 outputDevices];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10005D5D4;
  v6[3] = &unk_100417940;
  id v7 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(v3, "mr_all:", v6);

  return v4;
}

id sub_10005D5D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) allObjects];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005D690;
  v8[3] = &unk_100417F00;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_10005D690(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

uint64_t sub_10005D69C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 40);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v8), "isOutputContextInUse:", v3, (void)v12))
        {
          uint64_t v10 = _MRLogForCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            sub_10032B890((uint64_t)v3, a1, v10);
          }

          uint64_t v9 = 0;
          goto LABEL_13;
        }
        long long v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 1;
LABEL_13:

  return v9;
}

id sub_10005DC1C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 16);

  return [v2 removeAllObjects];
}

id sub_10005DC6C(uint64_t a1)
{
  [*(id *)(a1 + 32) reloadOutputContexts];
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 _notifyLocalDeviceDidChangeOutputContext];
}

MRAVConcreteOutputContext *__cdecl sub_10005DDE4(id a1, AVOutputContext *a2)
{
  unsigned int v2 = a2;
  id v3 = [objc_alloc((Class)MRAVConcreteOutputContext) initWithAVOutputContext:v2 type:5];

  return (MRAVConcreteOutputContext *)v3;
}

void sub_10005DF30(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) outputDevices];
  id v3 = [v2 count];

  id v4 = [*(id *)(a1 + 40) activeOutputContexts];
  id v5 = [v4 objectForKey:*(void *)(a1 + 48)];
  id v6 = v5;
  if (v3)
  {

    if (v6) {
      goto LABEL_18;
    }
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      long long v8 = *(void **)(a1 + 32);
      uint64_t v9 = [v8 outputDeviceUIDs];
      uint64_t v10 = [v9 firstObject];
      *(_DWORD *)long long buf = 138412546;
      long long v47 = v8;
      __int16 v48 = 2112;
      unsigned int v49 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] OutputContext became active %@ with: %@", buf, 0x16u);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    long long v12 = [*(id *)(a1 + 40) activeOutputContexts];
    [v12 setObject:v11 forKeyedSubscript:*(void *)(a1 + 48)];

    long long v13 = [*(id *)(a1 + 40) inactiveOutputContexts];
    [v13 removeObjectForKey:*(void *)(a1 + 48)];

    long long v14 = (void *)MRMediaRemoteCopyDeviceUID();
    long long v15 = [*(id *)(a1 + 32) outputDevices];
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10005E3F8;
    v43[3] = &unk_100417940;
    id v16 = v14;
    id v44 = v16;
    unsigned int v17 = objc_msgSend(v15, "mr_any:", v43);

    if (v17)
    {
      id v18 = _MRLogForCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void **)(a1 + 32);
        id v20 = [v19 outputDeviceUIDs];
        id v21 = [v20 firstObject];
        *(_DWORD *)long long buf = 138412546;
        long long v47 = v19;
        __int16 v48 = 2112;
        unsigned int v49 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] OutputContext became active %@ with local: %@", buf, 0x16u);
      }
      [*(id *)(a1 + 40) _notifyLocalDeviceDidChangeOutputContext];
    }
  }
  else
  {

    if (v6)
    {
      uint64_t v22 = [*(id *)(a1 + 40) activeOutputContexts];
      [v22 removeObjectForKey:*(void *)(a1 + 48)];

      id v23 = _MRLogForCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v24 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        long long v47 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] OutputContext deactiviating %@", buf, 0xCu);
      }
    }
    id v25 = _MRLogForCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v26 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      long long v47 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[MRDAVOutputContextManager] OutputContext became inactive %@", buf, 0xCu);
    }

    uint64_t v27 = *(void *)(a1 + 32);
    id v16 = [*(id *)(a1 + 40) inactiveOutputContexts];
    [v16 setObject:v27 forKeyedSubscript:*(void *)(a1 + 48)];
  }

LABEL_18:
  __int16 v28 = [*(id *)(a1 + 32) outputDeviceUIDs];
  uint64_t v29 = +[NSMutableSet setWithArray:v28];

  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  __int16 v30 = objc_msgSend(*(id *)(a1 + 32), "outputDevices", 0);
  id v31 = [v30 countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v31)
  {
    id v32 = v31;
    uint64_t v33 = *(void *)v40;
    do
    {
      for (uint64_t i = 0; i != v32; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v35 = [*(id *)(*((void *)&v39 + 1) + 8 * i) clusterComposition];
        id v36 = objc_msgSend(v35, "mr_map:", &stru_100418198);
        [v29 addObjectsFromArray:v36];
      }
      id v32 = [v30 countByEnumeratingWithState:&v39 objects:v45 count:16];
    }
    while (v32);
  }

  uint64_t v37 = [*(id *)(a1 + 40) reservedOutputContexts];
  __int16 v38 = [v29 allObjects];
  [v37 removeObjectsForKeys:v38];
}

id sub_10005E3F8(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

id sub_10005E404(id a1, MRAVOutputDeviceDescription *a2)
{
  return [(MRAVOutputDeviceDescription *)a2 uid];
}

id sub_10005E5E8(id a1, MRDeviceInfo *a2)
{
  return [(MRDeviceInfo *)a2 deviceUID];
}

uint64_t sub_10005E5F0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_10005E6E0()
{
  if (qword_10047DFA0 != -1) {
    dispatch_once(&qword_10047DFA0, &stru_1004181D8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047DFA8, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047DF98, *v0);
  }
  off_100475F70 = (uint64_t (*)())sub_10005E770;
  uint64_t v1 = (void *)qword_10047DF98;

  return v1;
}

id sub_10005E770()
{
  return (id)qword_10047DF98;
}

void sub_10005E77C(id a1)
{
  qword_10047DFA8 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

Class sub_10005E7A8()
{
  if (qword_10047DFA0 != -1) {
    dispatch_once(&qword_10047DFA0, &stru_1004181D8);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_10047DFB0 = (uint64_t)result;
  off_100475F78 = (uint64_t (*)())sub_10005E80C;
  return result;
}

id sub_10005E80C()
{
  return (id)qword_10047DFB0;
}

void sub_10005E818(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_10005F030(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005F150(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10005F164(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_scheduleReload");
}

MRAVOutputDevice *__cdecl sub_10005F244(id a1, IDSDevice *a2)
{
  return (MRAVOutputDevice *)[(IDSDevice *)a2 mr_outputDevice];
}

id sub_10005F300(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_reload");
}

void sub_10005F518(uint64_t a1)
{
  unsigned int v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleDeviceInfoDidChange:" name:kMRDeviceInfoDidChangeNotification object:0];

  id v7 = +[MRDMediaRemoteServer server];
  id v3 = [v7 nowPlayingServer];
  uint64_t v4 = [*(id *)(a1 + 32) origin];
  id v5 = [v3 originClientForOrigin:v4];
  id v6 = [v5 deviceInfo];
  [*(id *)(a1 + 32) setDeviceInfo:v6];
}

void sub_10005F7A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005FB48(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) outputContext];
  id v3 = [v2 concreteOutputDevices];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10005FC08;
  v5[3] = &unk_100418280;
  void v5[4] = *(void *)(a1 + 32);
  uint64_t v4 = objc_msgSend(v3, "msv_filter:", v5);

  [*(id *)(a1 + 32) publishToOutputDevices:v4];
}

id sub_10005FC08(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isValidOutputDevice:a2];
}

void sub_100060F74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activeTopologyChangeIdentifiers];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000610A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activeTopologyChangeIdentifiers];
  unsigned int v3 = [v2 containsObject:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) activeTopologyChangeIdentifiers];
    [v4 removeObject:*(void *)(a1 + 40)];

    id v5 = [*(id *)(a1 + 32) activeTopologyChangeIdentifiers];
    id v6 = [v5 count];

    if (!v6)
    {
      id v7 = +[NSString stringWithFormat:@"alltopologyChangesFinished-%@", *(void *)(a1 + 40)];
      [*(id *)(a1 + 32) eventuallyCommitOutputDevice:v7];
    }
  }
}

void sub_100061334(uint64_t a1)
{
  id v2 = +[MRDMediaRemoteServer server];
  unsigned int v3 = [v2 deviceInfo];

  if ([*(id *)(a1 + 32) _shouldRemoveLocalDeviceWithReason:*(void *)(a1 + 40) deviceInfo:v3])
  {
    uint64_t v4 = +[MRDAVOutputContextManager sharedManager];
    id v5 = [v3 WHAIdentifier];
    id v6 = [v4 outputContextForOutputDeviceUID:v5];

    id v7 = [v6 outputDevices];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_100061524;
    v13[3] = &unk_100417940;
    id v14 = v3;
    long long v8 = objc_msgSend(v7, "msv_firstWhere:", v13);

    if (v8)
    {
      id v9 = [objc_alloc((Class)MRRequestDetails) initWithName:@"LocalDeviceCommitManager.removeLocalDevice" requestID:0 reason:*(void *)(a1 + 40)];
      id v10 = objc_alloc((Class)MRGroupTopologyModificationRequest);
      long long v15 = v8;
      uint64_t v11 = +[NSArray arrayWithObjects:&v15 count:1];
      id v12 = [v10 initWithRequestDetails:v9 type:2 outputDevices:v11];

      [v6 modifyTopologyWithRequest:v12 withReplyQueue:0 completion:0];
    }
  }
}

id sub_100061524(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 deviceUID];
  id v5 = [v3 containsUID:v4];

  return v5;
}

void sub_100061704(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  if (v3)
  {
    [v3 invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0;

    id v2 = *(void **)(a1 + 32);
  }
  objc_initWeak(&location, v2);
  id v6 = objc_alloc((Class)MSVTimer);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006183C;
  v11[3] = &unk_1004182A8;
  objc_copyWeak(&v13, &location);
  id v12 = *(id *)(a1 + 40);
  id v8 = [v6 initWithInterval:0 repeats:v7 queue:v11 block:8.0];
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 24);
  *(void *)(v9 + 24) = v8;

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_100061818(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006183C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained maybeCommitLocalDeviceWithReason:*(void *)(a1 + 32)];
}

void sub_10006226C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      id v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[LocalDeviceCommitManager] Error %@ commiting local device for %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100062800(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [v3 bundleIdentifier];
    *(_DWORD *)long long buf = 138412290;
    long long v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting client %@ to begin loading browsable content", buf, 0xCu);
  }
  int v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100062950;
  v10[3] = &unk_1004164F0;
  id v11 = v3;
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = v3;
  [v9 relayXPCMessage:v6 andReply:1 resultCallback:v10];
}

void sub_100062950(id *a1)
{
  uint64_t v2 = (void *)MRCreateClientErrorFromXPCMessage();
  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [a1[4] bundleIdentifier];
    *(_DWORD *)id v7 = 138412546;
    *(void *)&void v7[4] = v4;
    __int16 v8 = 2112;
    id v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client %@ finished loading browsable content with error: %@", v7, 0x16u);
  }
  *(void *)id v7 = 0;
  data = xpc_dictionary_get_data(a1[5], "MRXPC_INDEXPATH_DATA_KEY", (size_t *)v7);
  if (data) {
    uint64_t v6 = *(void *)v7 >> 3;
  }
  else {
    uint64_t v6 = 0;
  }
  objc_msgSend(a1[6], "_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:", a1[4], data, v6, v2);
}

void sub_1000630E4(void *a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[6];
      int v7 = 138543362;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = *(void **)(a1[4] + 8);
    [v6 addObject:v5];
  }
}

void sub_100063694(void *a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[5];
      uint64_t v4 = a1[6];
      int v8 = 138412546;
      uint64_t v9 = v4;
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to launch %@ for relayable browsable content message %{public}@.", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    uint64_t v6 = a1[5];
    int v7 = *(void **)(a1[4] + 16);
    [v7 addObject:v6];
  }
}

uint64_t sub_10006431C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100064A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        if ((objc_msgSend(v3, "containsOutputDeviceWithUID:", v10, (void)v12) & 1) == 0) {
          [v4 addObject:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v4;
}

id sub_100064B54(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v16 = objc_alloc_init((Class)NSMutableArray);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = [v15 outputDevices];
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v9 = *(id *)(a1 + 32);
        id v10 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v18;
          while (2)
          {
            for (uint64_t j = 0; j != v11; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v18 != v12) {
                objc_enumerationMutation(v9);
              }
              if ([v8 containsUID:*(void *)(*((void *)&v17 + 1) + 8 * (void)j)])
              {

                goto LABEL_16;
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v17 objects:v25 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        [v16 addObject:v8];
LABEL_16:
        ;
      }
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v5);
  }

  return v16;
}

BOOL sub_100064D30(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100064DCC;
  v5[3] = &unk_100417F00;
  uint64_t v1 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v2 = objc_msgSend(v1, "msv_firstWhere:", v5);
  BOOL v3 = v2 != 0;

  return v3;
}

uint64_t sub_100064DCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) deviceUID];
  if ([v4 isEqualToString:v3])
  {
    uint64_t v5 = 1;
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) clusterID];
    uint64_t v5 = (uint64_t)[v6 isEqualToString:v3];
  }
  return v5;
}

void sub_100064E4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v8 = [v5 debugName];

    id v7 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = [v5 debugName];
      long long v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v50 = v10;
      __int16 v51 = 2114;
      id v52 = v11;
      __int16 v53 = 2112;
      id v54 = v12;
      __int16 v55 = 2048;
      uint64_t v56 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", buf, 0x2Au);
    }
    else
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      id v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v50 = v15;
      __int16 v51 = 2114;
      id v52 = v11;
      __int16 v53 = 2048;
      id v54 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", buf, 0x20u);
    }

    goto LABEL_10;
  }
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10032AEE8(a1);
  }
LABEL_10:

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100065340;
  v44[3] = &unk_100418320;
  id v45 = *(id *)(a1 + 56);
  id v17 = v6;
  id v46 = v17;
  id v48 = *(id *)(a1 + 72);
  id v18 = v5;
  id v47 = v18;
  long long v19 = objc_retainBlock(v44);
  id v20 = objc_alloc((Class)MRBlockGuard);
  long long v21 = [*(id *)(a1 + 40) requestReasonID];
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_1000653A0;
  v42[3] = &unk_100415FA8;
  long long v22 = v19;
  id v43 = v22;
  id v23 = [v20 initWithTimeout:v21 reason:v42 handler:0.0];

  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1000653B0;
  v33[3] = &unk_100418370;
  id v40 = *(id *)(a1 + 80);
  id v24 = v18;
  id v34 = v24;
  id v35 = *(id *)(a1 + 32);
  id v36 = *(id *)(a1 + 40);
  id v37 = *(id *)(a1 + 56);
  id v38 = *(id *)(a1 + 64);
  id v25 = v23;
  id v39 = v25;
  __int16 v26 = v22;
  id v41 = v26;
  uint64_t v27 = objc_retainBlock(v33);
  if (*(void *)(a1 + 88) && (!v6 || [v17 isInformational]))
  {
    __int16 v28 = [*(id *)(a1 + 56) waitForCompletion];
    [v28 start];

    uint64_t v29 = *(void *)(a1 + 88);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100065728;
    v30[3] = &unk_100416988;
    id v31 = *(id *)(a1 + 56);
    id v32 = v27;
    (*(void (**)(uint64_t, id, void *))(v29 + 16))(v29, v24, v30);
  }
}

uint64_t sub_100065340(uint64_t a1)
{
  [*(id *)(a1 + 32) trackWithError:*(void *)(a1 + 40)];
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1000653A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000653B0(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  if ([v2 count])
  {
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"Adding the remaining outputDevices: %@", v2];
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 48) requestID];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v19 = v5;
      __int16 v20 = 2114;
      long long v21 = v6;
      __int16 v22 = 2112;
      id v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
    id v7 = [*(id *)(a1 + 56) followupOutputContextModification];
    [v7 start];

    id v8 = [objc_alloc((Class)MRGroupTopologyModificationRequest) initWithRequestDetails:*(void *)(a1 + 48) type:3 outputDeviceUIDs:*(void *)(a1 + 64)];
    BOOL v9 = *(void **)(a1 + 32);
    qos_class_t v10 = qos_class_self();
    id v11 = dispatch_get_global_queue(v10, 0);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000655F8;
    v12[3] = &unk_100418348;
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 88);
    [v9 modifyTopologyWithRequest:v8 withReplyQueue:v11 completion:v12];
  }
}

id sub_1000655F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [*(id *)(a1 + 40) requestID];
    int v9 = 138543874;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    CFStringRef v14 = @"SetOutputDevices completed";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", (uint8_t *)&v9, 0x20u);
  }
  id v7 = [*(id *)(a1 + 48) followupOutputContextModification];
  [v7 endWithError:v3];

  id result = [*(id *)(a1 + 56) disarm];
  if (result) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  return result;
}

uint64_t sub_100065728(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) waitForCompletion];
  [v2 end];

  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_10006577C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100065794(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10006580C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) searchEndpointsForLocalDevice];
  [v7 endWithError:v6];

  id v8 = [v5 outputDevices];
  objc_msgSend(*(id *)(a1 + 32), "setNumberOfDevicesOnLocal:", objc_msgSend(v8, "count"));

  if (v6 && ![v6 isInformational])
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    int v9 = (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    if ([v9 count])
    {
      id v10 = objc_alloc((Class)NSString);
      __int16 v11 = objc_msgSend(v9, "msv_map:", &stru_1004183B8);
      uint64_t v12 = (__CFString *)[v10 initWithFormat:@"Endpoint contains undesirable devices: %@", v11];

      __int16 v13 = _MRLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [*(id *)(a1 + 48) requestID];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v43 = v14;
        __int16 v44 = 2114;
        id v45 = v15;
        __int16 v46 = 2112;
        CFStringRef v47 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
      objc_msgSend(*(id *)(a1 + 32), "setNumberOfUndesiredDevices:", objc_msgSend(v9, "count"));
      id v16 = [v5 designatedGroupLeader];
      unsigned int v17 = [v16 supportsMultiplayer];

      id v18 = _MRLogForCategory();
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v17)
      {
        if (v19)
        {
          uint64_t v20 = *(void *)(a1 + 40);
          long long v21 = [*(id *)(a1 + 48) requestID];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v43 = v20;
          __int16 v44 = 2114;
          id v45 = v21;
          __int16 v46 = 2112;
          CFStringRef v47 = @"Creating new endpoint with just localDevice, will add the rest later...";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
        }
        __int16 v22 = [*(id *)(a1 + 32) createEndpoint];
        [v22 start];

        id v23 = [*(id *)(a1 + 56) deviceUID];
        id v41 = v23;
        id v24 = +[NSArray arrayWithObjects:&v41 count:1];
        double v25 = *(double *)(a1 + 80);
        uint64_t v26 = *(void *)(a1 + 48);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_100065D34;
        v38[3] = &unk_1004183E0;
        id v39 = *(id *)(a1 + 32);
        id v40 = *(id *)(a1 + 72);
        +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:v24 timeout:v26 details:v38 completion:v25];

        id v27 = v39;
      }
      else
      {
        if (v19)
        {
          uint64_t v28 = *(void *)(a1 + 40);
          uint64_t v29 = [*(id *)(a1 + 48) requestID];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v43 = v28;
          __int16 v44 = 2114;
          id v45 = v29;
          __int16 v46 = 2112;
          CFStringRef v47 = @"Removing undesired outputDevices, will add the rest later...";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
        }
        __int16 v30 = [*(id *)(a1 + 32) removeUndesiredDevicesOutputContextModification];
        [v30 start];

        id v27 = [objc_alloc((Class)MRGroupTopologyModificationRequest) initWithRequestDetails:*(void *)(a1 + 48) type:2 outputDevices:v9];
        id v31 = +[MRAVLocalEndpoint sharedLocalEndpoint];
        qos_class_t v32 = qos_class_self();
        uint64_t v33 = dispatch_get_global_queue(v32, 0);
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_100065DC8;
        v34[3] = &unk_100418408;
        id v35 = *(id *)(a1 + 32);
        id v36 = v6;
        id v37 = *(id *)(a1 + 72);
        [v31 modifyTopologyWithRequest:v27 withReplyQueue:v33 completion:v34];
      }
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
  }
}

id sub_100065D2C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

void sub_100065D34(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = [v5 createEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100065DC8(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = [v3 removeUndesiredDevicesOutputContextModification];
  [v5 endWithError:a1[5]];

  uint64_t v6 = a1[6];
  id v7 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v4);
}

void sub_100065E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v7 = [*(id *)(a1 + 32) discoverOutputDevices];
  [v7 endWithError:v6];

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) createEndpoint];
    [v8 start];

    double v9 = *(double *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100065F9C;
    v12[3] = &unk_1004183E0;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 56);
    +[MRDCreateEndpointRequest createEndpointWithOutputDeviceUIDs:v10 timeout:v11 details:v12 completion:v9];
  }
}

void sub_100065F9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  id v7 = [v5 createEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100066398(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v8 = [v5 debugName];

    id v7 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = [v5 debugName];
      id v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v17 = 138544130;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      __int16 v22 = v12;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", (uint8_t *)&v17, 0x2Au);
    }
    else
    {
      if (!v9) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v11 = [*(id *)(a1 + 40) requestID];
      uint64_t v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v17 = 138543874;
      uint64_t v18 = v15;
      __int16 v19 = 2114;
      uint64_t v20 = v11;
      __int16 v21 = 2048;
      __int16 v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v17, 0x20u);
    }

    goto LABEL_10;
  }
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10032AEE8(a1);
  }
LABEL_10:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1000665C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100066630(id a1)
{
  qword_10047DFB8 = objc_alloc_init(MRDMRRelayConnectionManager);

  _objc_release_x1();
}

void sub_100066A30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066A64(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v8 = *(void *)(a1 + 40);
          BOOL v9 = objc_msgSend(*(id *)(a1 + 48), "connection", (void)v10);
          [v7 relayConnectionManager:v8 didIngestNewConnection:v9];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100066C20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066FCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100066FEC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v8 = _MRLogForCategory();
  BOOL v9 = v8;
  if (v5 && !v6)
  {
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v10)
      {
        uint64_t v12 = a1[4];
        uint64_t v11 = a1[5];
        long long v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[6]];
        int v30 = 138544386;
        CFStringRef v31 = @"MRDMRRelayConnectionManager.waitForConnection";
        __int16 v32 = 2114;
        uint64_t v33 = v11;
        __int16 v34 = 2112;
        id v35 = v5;
        __int16 v36 = 2114;
        uint64_t v37 = v12;
        __int16 v38 = 2048;
        uint64_t v39 = v14;
        uint64_t v15 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v16 = v9;
        uint32_t v17 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v30, v17);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v26 = a1[5];
    long long v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138544130;
    CFStringRef v31 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v32 = 2114;
    uint64_t v33 = v26;
    __int16 v34 = 2112;
    id v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = v27;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    id v16 = v9;
    uint32_t v17 = 42;
    goto LABEL_16;
  }
  if (v6)
  {
    BOOL v18 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v18)
      {
        uint64_t v20 = a1[4];
        uint64_t v19 = a1[5];
        long long v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[6]];
        int v30 = 138544386;
        CFStringRef v31 = @"MRDMRRelayConnectionManager.waitForConnection";
        __int16 v32 = 2114;
        uint64_t v33 = v19;
        __int16 v34 = 2114;
        id v35 = v6;
        __int16 v36 = 2114;
        uint64_t v37 = v20;
        __int16 v38 = 2048;
        uint64_t v39 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v30, 0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }
    else if (v18)
    {
      sub_10032B9EC((uint64_t)a1, (uint64_t)v6, v9);
    }
    goto LABEL_22;
  }
  BOOL v22 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (!v22) {
      goto LABEL_22;
    }
    uint64_t v28 = a1[5];
    long long v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138543874;
    CFStringRef v31 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v32 = 2114;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v29;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    id v16 = v9;
    uint32_t v17 = 32;
    goto LABEL_16;
  }
  if (v22)
  {
    uint64_t v24 = (void *)a1[4];
    uint64_t v23 = a1[5];
    long long v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138544130;
    CFStringRef v31 = @"MRDMRRelayConnectionManager.waitForConnection";
    __int16 v32 = 2114;
    uint64_t v33 = v23;
    __int16 v34 = 2114;
    id v35 = v24;
    __int16 v36 = 2048;
    uint64_t v37 = v25;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }
LABEL_22:

  (*(void (**)(void))(a1[7] + 16))();
}

void sub_100067380(uint64_t a1)
{
  obuint64_t j = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  id v2 = *(void **)(a1 + 40);
  id v3 = objc_retainBlock(*(id *)(a1 + 48));
  LODWORD(v2) = [v2 containsObject:v3];

  if (v2)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = objc_retainBlock(*(id *)(a1 + 48));
    [v4 removeObject:v5];

    objc_sync_exit(obj);
    obuint64_t j = [objc_alloc((Class)NSError) initWithMRError:26];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    objc_sync_exit(obj);
  }
}

void sub_100067460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100067628(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100067648(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 connection];
  BOOL v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

void sub_10006773C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000677C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100067864(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:a2];
  if (v6)
  {
    uint64_t v8 = _NSConcreteStackBlock;
    uint64_t v9 = 3221225472;
    BOOL v10 = sub_100067954;
    uint64_t v11 = &unk_1004158D8;
    id v12 = [v5 copy];
    id v13 = v6;
    id v7 = v12;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &v8);
    objc_msgSend(v5, "removeAllObjects", v8, v9, v10, v11);
  }
}

void sub_100067954(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100067D68(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  MRAVEndpointResolveActiveSystemEndpointWithTimeout();
}

id sub_100067DF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setActiveSystemEndpoint:a2];
}

id sub_100067DFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluatePredictedRoutes];
}

void sub_100067E04(uint64_t a1, void *a2)
{
  id v3 = [a2 object];
  if ([v3 containsLocalDevice]) {
    [*(id *)(a1 + 32) _pausePredicatedRoutesSync];
  }
}

void sub_100067E60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activeSystemEndpoint];

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    [v3 _reevaluatePredictedRoutes];
  }
  else
  {
    id v4 = +[MRAVLocalEndpoint sharedLocalEndpoint];
    [*(id *)(a1 + 32) setActiveSystemEndpoint:v4];
  }
}

void sub_100068238(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100068264(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluatePredictedRoutes];
}

id sub_100068748(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 WHAIdentifier];
  id v5 = [*(id *)(a1 + 32) WHAIdentifier];
  if ([v4 isEqual:v5])
  {
    long long v6 = 0;
  }
  else
  {
    long long v6 = [v3 WHAIdentifier];
  }

  return v6;
}

id sub_1000687DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) leaderDeviceInfo];
  id v3 = [v2 deviceUID];

  if (!v3) {
    goto LABEL_6;
  }
  id v4 = [*(id *)(a1 + 32) leaderDeviceInfo];
  id v5 = [v4 WHAIdentifier];
  long long v6 = [*(id *)(a1 + 32) WHAIdentifier];
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if (v7) {
    goto LABEL_6;
  }
  long long v8 = [*(id *)(a1 + 32) leaderDeviceInfo];
  long long v9 = [v8 groupUID];
  BOOL v10 = [*(id *)(a1 + 32) groupUID];
  unsigned int v11 = [v9 isEqualToString:v10];

  if (!v11) {
    goto LABEL_6;
  }
  id v12 = [*(id *)(a1 + 32) leaderDeviceInfo];
  if ([v12 supportsMultiplayer])
  {
    id v13 = [*(id *)(a1 + 32) leaderDeviceInfo];
    unsigned __int8 v14 = [v13 isProxyGroupPlayer];

    if (v14)
    {
LABEL_6:
      uint64_t v15 = 0;
      goto LABEL_7;
    }
  }
  else
  {
  }
  uint32_t v17 = [*(id *)(a1 + 32) leaderDeviceInfo];
  uint64_t v15 = [v17 WHAIdentifier];

LABEL_7:

  return v15;
}

uint64_t sub_100068948(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 deviceType] == 1)
  {
    id v4 = [v3 uid];
    id v5 = [*(id *)(a1 + 32) WHAIdentifier];
    uint64_t v6 = (uint64_t)[v4 isEqualToString:v5];
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

uint64_t sub_1000689CC(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [*(id *)(a1 + 32) WHAIdentifier];
  uint64_t v5 = [v3 isEqualToString:v4] ^ 1;

  return v5;
}

id sub_100068A30(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

BOOL sub_100068A38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 deviceType] == 1)
  {
    BOOL v4 = 1;
  }
  else if ([v3 isLocalDevice])
  {
    uint64_t v5 = [*(id *)(a1 + 32) deviceUID];
    BOOL v4 = v5 != 0;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

id sub_100068AA8(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

void sub_100068C94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = MRLogCategoryDiscovery();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRoutingContinuityManager] Error performing request: %@ - %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100068EC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100068EDC(uint64_t a1)
{
  id v2 = MRLogCategoryDiscovery();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDRoutingContinuityManager] Resuming PredictedRoutesSync", v4, 2u);
  }

  return [*(id *)(a1 + 32) setPausePredictedRoutesTimer:0];
}

void sub_100069470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000694C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadLocalEndpointConnection];
}

void sub_1000694C8(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  MRGetOriginFromUserInfo();
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  if ([v5 isLocal])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _scheduleAvailableOutputDevicesReload];
  }
}

void sub_100069544(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_100069584(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

id sub_1000695C4(uint64_t a1)
{
  [*(id *)(a1 + 32) _initializeDiscoverySessions];
  id result = (id)MSVDeviceOSIsInternalInstall();
  if (result)
  {
    id v3 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.mediaremote"];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 176);
    *(void *)(v4 + 176) = v3;

    [*(id *)(*(void *)(a1 + 32) + 176) addObserver:*(void *)(a1 + 32) forKeyPath:@"remotecontrol-denylist" options:0 context:off_100476040];
    [*(id *)(*(void *)(a1 + 32) + 176) addObserver:*(void *)(a1 + 32) forKeyPath:@"remotecontrol-allowlist" options:0 context:off_100476048];
    int v6 = *(void **)(a1 + 32);
    return [v6 _loadDefaults];
  }
  return result;
}

void sub_1000698C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000698E0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2[12])
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = MRCreateIndentedDebugDescriptionFromObject();
    [v3 appendFormat:@"  avDiscoverySession = %@\n", v4];

    id v2 = *(void **)(a1 + 32);
  }
  if (v2[13])
  {
    id v5 = *(void **)(a1 + 40);
    int v6 = MRCreateIndentedDebugDescriptionFromObject();
    [v5 appendFormat:@"  idsDiscoverySession = %@\n", v6];

    id v2 = *(void **)(a1 + 32);
  }
  if (v2[14])
  {
    uint64_t v7 = *(void **)(a1 + 40);
    __int16 v8 = MRCreateIndentedDebugDescriptionFromObject();
    [v7 appendFormat:@"  groupSessionDiscoverySession = %@\n", v8];

    id v2 = *(void **)(a1 + 32);
  }
  id v9 = (void *)v2[15];
  if (v9)
  {
    BOOL v10 = *(void **)(a1 + 40);
    unsigned int v11 = [v9 debugDescription];
    [v10 appendFormat:@"  companionDiscoverySession=%@\n", v11];

    id v2 = *(void **)(a1 + 32);
  }
  id v12 = (void *)v2[16];
  if (v12)
  {
    id v13 = *(void **)(a1 + 40);
    unsigned __int8 v14 = [v12 debugDescription];
    [v13 appendFormat:@"  externalDiscoverySession=%@\n", v14];

    id v2 = *(void **)(a1 + 32);
  }
  uint64_t v15 = (void *)v2[17];
  if (v15)
  {
    id v16 = *(void **)(a1 + 40);
    uint32_t v17 = [v15 debugDescription];
    [v16 appendFormat:@"  companionConnectionController=%@\n", v17];

    id v2 = *(void **)(a1 + 32);
  }
  BOOL v18 = (void *)v2[18];
  if (v18)
  {
    uint64_t v19 = *(void **)(a1 + 40);
    id v20 = [v18 debugDescription];
    [v19 appendFormat:@"  undiscoverableGroupLeader=%@\n", v20];
  }
}

void sub_100069E04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100069E30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadLocalEndpointConnection];
}

void sub_10006A118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006A12C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 52))
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = [v2 availableOutputDevices];
    [v2 logOutputDevicesChanged:v3 oldOutputDevices:0];
  }
  [*(id *)(*(void *)(a1 + 32) + 96) setDiscoveryMode:*(unsigned int *)(a1 + 48) forClientIdentifiers:*(void *)(a1 + 40)];
  if (*(unsigned char *)(a1 + 52))
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription();
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v5;
      __int16 v21 = 2114;
      BOOL v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[RemoteControlDiscoverySession] %@ - Discovery mode changed to: %{public}@", buf, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 32) + 104) setDiscoveryMode:*(unsigned int *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 32) + 128) setDiscoveryMode:*(unsigned int *)(a1 + 48)];
    uint64_t v7 = +[MRUserSettings currentSettings];
    [v7 persistentDiscoveryABCDuration];
    double v9 = v8;

    if (v9 > 0.0)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      if (!*(_DWORD *)(a1 + 48))
      {
LABEL_11:
        [*(id *)(v10 + 88) invalidate];
        uint64_t v16 = *(void *)(a1 + 32);
        uint32_t v17 = *(void **)(v16 + 88);
        *(void *)(v16 + 88) = 0;

        return;
      }
      if (!*(void *)(v10 + 88))
      {
        id v11 = objc_alloc((Class)MSVTimer);
        id v12 = dispatch_get_global_queue(-2, 0);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10006A384;
        v18[3] = &unk_1004171F0;
        *(double *)&v18[4] = v9;
        id v13 = [v11 initWithInterval:0 repeats:v12 queue:v18 block:v9];
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void **)(v14 + 88);
        *(void *)(v14 + 88) = v13;

        if (!*(_DWORD *)(a1 + 48))
        {
          uint64_t v10 = *(void *)(a1 + 32);
          goto LABEL_11;
        }
      }
    }
  }
}

id sub_10006A384(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[RemoteControlDiscoverySession] Discovery still on after %lf seconds. ABC...", buf, 0xCu);
  }

  return +[MSVAutoBugCapture snapshotWithDomain:@"MediaRemote" type:@"Discovery" subType:@"Power" context:@"Persistent RemoteControl Discovery" triggerThresholdValues:0 events:0 completion:0];
}

void sub_10006A62C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006A70C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006A914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10006AAA4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  }
  [v2 addObject:*(void *)(a1 + 40)];
  uint64_t v6 = *(void **)(a1 + 32);

  return [v6 _reloadOutputDevices];
}

id sub_10006ABB8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 80) removeObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 _reloadOutputDevices];
}

void sub_10006AC7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006ADB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10006AE84(uint64_t a1)
{
  [*(id *)(a1 + 32) _loadDefaults];
  id v2 = *(void **)(a1 + 32);

  return [v2 _scheduleAvailableOutputDevicesReload];
}

id sub_10006AF60(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupProxiedDiscoveryWithDestinationEndpoint:*(void *)(a1 + 40)];
}

id sub_10006AFE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupStandaloneDiscovery];
}

id sub_10006B0A0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  objc_sync_exit(v2);

  id v3 = *(void **)(a1 + 32);

  return [v3 _reloadOutputDevices];
}

id sub_10006B3C8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 160);
  id v3 = [a2 uid];
  id v4 = [v2 containsObject:v3];

  return v4;
}

uint64_t sub_10006B41C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 168);
  id v3 = [a2 uid];
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

id sub_10006B470(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10006B6E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v6 = [[MRDAVRemoteControlClusterOutputDevice alloc] initWithDevices:v4];

  uint64_t v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v5 = v6;
  }
}

id sub_10006C184(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimaryLocalDevice])
  {
    id v4 = [v3 descriptor];
    [*(id *)(a1 + 32) _mergeDeviceInfo:*(void *)(a1 + 40) intoProtobuf:v4];
    [*(id *)(a1 + 32) _logChangesInModifyingOutputDevice:v3 toOutputDevice:v4 reason:@"deviceInfo"];
    id v5 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v4];
  }
  else
  {
    id v5 = v3;
  }

  return v5;
}

id sub_10006C2B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPrimaryLocalDevice])
  {
    id v4 = +[MRDAVOutputContextManager sharedManager];
    id v5 = [*(id *)(a1 + 32) deviceInfo];
    uint64_t v6 = [v5 deviceUID];
    uint64_t v7 = [v4 outputContextForOutputDeviceUID:v6];

    double v8 = [v7 contextID];
    [*(id *)(a1 + 32) setRoutingContextUID:v8];
    if (v8)
    {
      double v9 = [v3 descriptor];
      uint64_t v10 = [v3 groupID];
      id v11 = MRComputeGroupContextID();
      if (v11 && ([v8 isEqualToString:v11] & 1) == 0)
      {
        id v12 = [v10 stringByReplacingOccurrencesOfString:v11 withString:v8];
        [v9 setGroupID:v12];
      }
      id v13 = [v3 airPlayGroupID];
      uint64_t v14 = MRComputeGroupContextID();
      if (v14 && ([v8 isEqualToString:v14] & 1) == 0)
      {
        uint64_t v15 = [v13 stringByReplacingOccurrencesOfString:v14 withString:v8];
        [v9 setAirPlayGroupID:v15];
      }
      [*(id *)(a1 + 32) _logChangesInModifyingOutputDevice:v3 toOutputDevice:v9 reason:@"reservedOutputContext"];
      id v16 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v9];
    }
    else
    {
      id v16 = v3;
    }
  }
  else
  {
    id v16 = v3;
  }

  return v16;
}

BOOL sub_10006C89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10006C948;
  v9[3] = &unk_100417940;
  id v10 = v3;
  id v5 = v3;
  uint64_t v6 = objc_msgSend(v4, "msv_firstWhere:", v9);
  BOOL v7 = v6 != 0;

  return v7;
}

id sub_10006C948(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [*(id *)(a1 + 32) uid];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10006C9AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setIsRemoteControllable:1];
  [v3 setTransportType:5];
  id v4 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v3];
  [*(id *)(a1 + 32) addObject:v4];
  [*(id *)(a1 + 40) _logChangesInModifyingOutputDevice:0 toOutputDevice:v3 reason:@"addFromOutputContext"];
}

void sub_10006DFAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006DFDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10006E01C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10006E05C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10006E2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E2C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10006E53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E564(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scheduleAvailableOutputDevicesReload];
}

void sub_10006EBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006EBDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _invalidate];
    id WeakRetained = v2;
  }
}

void sub_10006EF84(id a1)
{
  qword_10047DFC8 = (uint64_t)dispatch_queue_create("com.apple.mediaremote.MRDAVHostedDiscoverySession.calloutQueue", 0);

  _objc_release_x1();
}

void sub_10006F150(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  if (*(_DWORD *)(v2 + 20))
  {
    if (!v3)
    {
      id v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"com.apple.mediaremoted.MRDAVHostedDiscoverySession/%@(%d)", *(void *)(v2 + 112), [*(id *)(v2 + 32) processIdentifier]);
      id v5 = [objc_alloc((Class)MROSTransaction) initWithName:v4];
      uint64_t v6 = *(void *)(a1 + 32);
      BOOL v7 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v5;

      MRRegisterTransaction();
      uint64_t v2 = *(void *)(a1 + 32);
    }
    if (!*(void *)(v2 + 168))
    {
      double v8 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", [*(id *)(v2 + 32) processIdentifier]);
      double v9 = +[RBSProcessHandle handleForIdentifier:v8 error:0];

      if (v9)
      {
        objc_initWeak(&location, *(id *)(a1 + 32));
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        void v14[2] = sub_10006F364;
        v14[3] = &unk_100418780;
        id v15 = v9;
        objc_copyWeak(&v16, &location);
        uint64_t v10 = +[RBSProcessMonitor monitorWithConfiguration:v14];
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = *(void **)(v11 + 168);
        *(void *)(v11 + 168) = v10;

        objc_destroyWeak(&v16);
        objc_destroyWeak(&location);
      }
      id v13 = [v9 currentState];
      objc_msgSend(*(id *)(a1 + 32), "setProcessSuspended:", objc_msgSend(v13, "taskState") == 3);
    }
  }
  else
  {
    *(void *)(v2 + 56) = 0;
  }
}

void sub_10006F348(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006F364(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[RBSProcessStateDescriptor descriptor];
  [v4 setValues:1];
  [v3 setStateDescriptor:v4];
  id v5 = +[RBSProcessPredicate predicateMatchingHandle:*(void *)(a1 + 32)];
  double v9 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v9 count:1];
  [v3 setPredicates:v6];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006F4D0;
  v7[3] = &unk_100418758;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  [v3 setUpdateHandler:v7];
  objc_destroyWeak(&v8);
}

void sub_10006F4B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10006F4D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = [a4 state];
  BOOL v5 = [v7 taskState] == 3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setProcessSuspended:v5];
}

uint64_t sub_10006F5EC(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 24);
  return result;
}

void sub_10006F760(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MRLogCategoryDiscovery();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HostedDiscoverySession] %@ error fetching configuration: %@", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006F83C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setConfiguration:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10006F994(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10006F9A4(uint64_t a1)
{
}

void sub_10006F9AC(uint64_t a1)
{
}

void sub_10006FA58(uint64_t a1)
{
}

void sub_10006FBFC(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:*(void *)(a1 + 32)];
}

void *sub_10006FCD8(void *result)
{
  uint64_t v1 = result[4];
  int v2 = *((unsigned __int8 *)result + 40);
  if (*(unsigned __int8 *)(v1 + 18) != v2)
  {
    id v3 = result;
    *(unsigned char *)(v1 + 18) = v2;
    id v4 = MRLogCategoryDiscovery();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v3[4];
      int v6 = *((unsigned __int8 *)v3 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HostedDiscoverySession] %@ setting processSuspended to %{BOOL}u", (uint8_t *)&v7, 0x12u);
    }

    return [(id)v3[4] _reevaluateEffectiveDiscoveryMode];
  }
  return result;
}

void sub_10006FEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006FF04(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 20);
  return result;
}

id sub_10006FFB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDiscoveryMode:*(unsigned int *)(a1 + 40)];
}

id sub_100070150(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) stateMonitor];
  [v2 invalidate];

  id v3 = *(void **)(a1 + 32);

  return _[v3 setEffectiveDiscoveryMode:0];
}

void sub_100070240(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 104);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000702E0;
  v6[3] = &unk_1004178C8;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  [v4 canSendMessage:v6];
}

void sub_1000702E0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v7 = [*(id *)(v3 + 32) remoteObjectProxy];
    [v7 availableOutputDevicesDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    id v4 = *(NSObject **)(v3 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000703B8;
    block[3] = &unk_1004158D8;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    dispatch_sync(v4, block);
  }
}

void sub_1000703B8(uint64_t a1)
{
  id v2 = +[MRUserSettings currentSettings];
  unsigned int v3 = [v2 verboseHostedDiscoverySessionLogging];

  if (v3)
  {
    id v4 = MRLogCategoryDiscovery();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HostedDiscoverySession] Caching outputDevices %@ for %@", (uint8_t *)&v7, 0x16u);
    }
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 96), *(id *)(a1 + 32));
}

void sub_100070544(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 104);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000705E4;
  v6[3] = &unk_1004178C8;
  void v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  [v4 canSendMessage:v6];
}

void sub_1000705E4(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v7 = [*(id *)(v3 + 32) remoteObjectProxy];
    [v7 availableEndpointsDidChange:*(void *)(a1 + 40)];
  }
  else
  {
    id v4 = *(NSObject **)(v3 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000706BC;
    block[3] = &unk_1004158D8;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    dispatch_sync(v4, block);
  }
}

void sub_1000706BC(uint64_t a1)
{
  id v2 = +[MRUserSettings currentSettings];
  unsigned int v3 = [v2 verboseHostedDiscoverySessionLogging];

  if (v3)
  {
    id v4 = MRLogCategoryDiscovery();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[HostedDiscoverySession] Caching endpoints %@ for %@", (uint8_t *)&v7, 0x16u);
    }
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 88), *(id *)(a1 + 32));
}

void sub_100070A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100070A80(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 96));
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 88));
  uint64_t v2 = a1[4];
  unsigned int v3 = *(void **)(v2 + 96);
  *(void *)(v2 + 96) = 0;

  uint64_t v4 = a1[4];
  uint64_t v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 88) = 0;
}

id sub_1000710C8(uint64_t a1)
{
  [*(id *)(a1 + 32) initializeObserversAndState];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 reevaluateSystemStateWithReason:@"Initial evaluation"];
}

void sub_1000714C4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) identifier];
  unsigned int v3 = [*(id *)(a1 + 40) remoteASEDeviceInfo];
  uint64_t v4 = [v3 identifier];
  unsigned int v5 = [v2 isEqualToString:v4];

  if (v5)
  {
    [*(id *)(a1 + 40) setRemoteASEDeviceInfo:*(void *)(a1 + 32)];
    uint64_t v6 = *(void **)(a1 + 40);
    [v6 reevaluateSystemStateWithReason:@"Remote ASE device info changed"];
  }
}

void sub_100071634(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v4);

  unsigned int v5 = +[MRNowPlayingOriginClientManager sharedManager];
  uint64_t v6 = [v5 activeSystemEndpointOutputDeviceUIDForType:0];

  if (v6 && ([v3 containsOutputDeviceWithUID:v6] & 1) == 0)
  {
    uint64_t v13 = _MRLogForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[MRDRemoteControlGroupSessionCoordinator] Not refreshing ASE info because it changed while resolving", buf, 2u);
    }
  }
  else
  {
    if (![v3 isLocalEndpoint])
    {
      uint64_t v10 = [v3 designatedGroupLeader];
      id v11 = [v10 transportType];

      if (v11 != (id)6)
      {
        uint64_t v21 = MREndpointConnectionReasonUserInfoKey;
        CFStringRef v22 = @"RemoteControlCoordinator";
        uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_1000718B4;
        v17[3] = &unk_100418848;
        id v15 = v3;
        uint64_t v16 = *(void *)(a1 + 32);
        id v18 = v15;
        uint64_t v19 = v16;
        [v15 connectToExternalDeviceWithUserInfo:v14 completion:v17];

        goto LABEL_15;
      }
      uint64_t v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[MRDRemoteControlGroupSessionCoordinator] Clearing ASE info because remote device is connected via GroupSession", buf, 2u);
      }

      [*(id *)(a1 + 32) setRemoteASEDeviceInfo:0];
      uint64_t v8 = *(void **)(a1 + 32);
      CFStringRef v9 = @"Remote ASE connected via GroupSession";
      goto LABEL_10;
    }
    int v7 = [*(id *)(a1 + 32) remoteASEDeviceInfo];

    if (v7)
    {
      [*(id *)(a1 + 32) setRemoteASEDeviceInfo:0];
      uint64_t v8 = *(void **)(a1 + 32);
      CFStringRef v9 = @"Remote ASE changed to local";
LABEL_10:
      [v8 reevaluateSystemStateWithReason:v9];
    }
  }
LABEL_15:
}

void sub_1000718B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (id *)(a1 + 32);
  uint64_t v5 = [*(id *)(a1 + 32) origin];
  uint64_t v6 = (void *)v5;
  if (a2 || !v5)
  {
    uint64_t v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10032BAD8();
    }
  }
  else
  {
    int v7 = +[MRNowPlayingOriginClientManager sharedManager];
    uint64_t v8 = [v7 activeSystemEndpointOutputDeviceUIDForType:0];

    if (v8 && ([*v4 containsOutputDeviceWithUID:v8] & 1) != 0)
    {
      CFStringRef v9 = +[MRDMediaRemoteServer server];
      uint64_t v10 = [v9 nowPlayingServer];
      id v11 = [v10 originClientForOrigin:v6];
      uint64_t v12 = [v11 deviceInfo];
      id v13 = [v12 copy];

      uint64_t v14 = [*(id *)(a1 + 40) queue];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100071AA0;
      v16[3] = &unk_1004158D8;
      void v16[4] = *(void *)(a1 + 40);
      id v17 = v13;
      id v15 = v13;
      dispatch_async(v14, v16);
    }
    else
    {
      id v15 = _MRLogForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[MRDRemoteControlGroupSessionCoordinator] Not refreshing ASE info because it changed while connecting", buf, 2u);
      }
    }
  }
}

id sub_100071AA0(uint64_t a1)
{
  [*(id *)(a1 + 32) setRemoteASEDeviceInfo:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 reevaluateSystemStateWithReason:@"Remote ASE changed"];
}

void sub_100072600(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000726DC;
  block[3] = &unk_1004159B8;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v8;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

id sub_1000726DC(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 138543362;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlGroupSessionCoordinator] Started session: %{public}@.", (uint8_t *)&v8, 0xCu);
  }

  [*(id *)(a1 + 32) addObserver:*(void *)(a1 + 40)];
  uint64_t v4 = [*(id *)(a1 + 32) identifier];
  [*(id *)(a1 + 40) setHostedSessionIdentifier:v4];

  [*(id *)(a1 + 40) setStartingSession:0];
  if (*(void *)(a1 + 48))
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032BB88();
    }

    [*(id *)(a1 + 40) reevaluateAfterInterval:@"Failed to start group session" withReason:15.0];
  }
  if ([*(id *)(a1 + 32) state] == (id)4)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10032BB44(v6);
    }

    [*(id *)(a1 + 40) reevaluateAfterInterval:@"Fast invalidation after start group session" withReason:15.0];
  }
  return [*(id *)(a1 + 40) reevaluateSystemStateWithReason:@"Started group session"];
}

void sub_100072874(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100072918;
  v4[3] = &unk_1004158D8;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, v4);
}

id sub_100072918(uint64_t a1)
{
  [*(id *)(a1 + 32) setJoiningSession:0];
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10032BBF4();
  }

  return [*(id *)(a1 + 32) reevaluateAfterInterval:@"Timed out trying to auto-join remote session" withReason:15.0];
}

void sub_100072988(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100072A88;
  block[3] = &unk_100416780;
  id v11 = a1[5];
  id v12 = v5;
  id v13 = a1[4];
  id v14 = v6;
  id v15 = a1[6];
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

id sub_100072A88(uint64_t a1)
{
  if (([*(id *)(a1 + 32) disarm] & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v9) {
        sub_10032BD58();
      }

      id v10 = [*(id *)(a1 + 48) sessionManager];
      [v10 leaveRemoteControlGroupSession:*(void *)(a1 + 40)];

      id v5 = *(void **)(a1 + 48);
      CFStringRef v6 = @"Session auto-joined, but not within timeout";
    }
    else
    {
      if (v9) {
        sub_10032BCEC();
      }

      id v5 = *(void **)(a1 + 48);
      CFStringRef v6 = @"Failed to auto-join group session after timeout";
    }
    return [v5 reevaluateAfterInterval:v6 withReason:15.0];
  }
  [*(id *)(a1 + 48) setJoiningSession:0];
  [*(id *)(a1 + 40) addObserver:*(void *)(a1 + 48)];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = _MRLogForCategory();
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10032BC60();
    }

    id v5 = *(void **)(a1 + 48);
    CFStringRef v6 = @"Failed to auto-join group session";
    return [v5 reevaluateAfterInterval:v6 withReason:15.0];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    int v13 = 138543362;
    uint64_t v14 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlGroupSessionCoordinator] Auto-joined remote session: %{public}@", (uint8_t *)&v13, 0xCu);
  }

  return [*(id *)(a1 + 48) reevaluateSystemStateWithReason:@"Auto-joined remote session"];
}

void sub_100072E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100072E24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setThrottled:0];
  uint64_t v2 = +[NSString stringWithFormat:@"[Delayed] %@", *(void *)(a1 + 32)];
  [WeakRetained reevaluateSystemStateWithReason:v2];
}

void sub_100072FB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) diagnosticDescription];
  [*(id *)(a1 + 32) setGroupSessionCoordinatorState:v2];
}

void sub_1000730C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) hostedSessionIdentifier];
  id v3 = [*(id *)(a1 + 40) identifier];
  if (v2 == v3)
  {

    goto LABEL_7;
  }
  uint64_t v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if (v5)
  {
LABEL_7:
    if (*(void *)(a1 + 48) != 4) {
      return;
    }
    id v10 = _MRLogForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlGroupSessionCoordinator] Hosted session invalidated.", buf, 2u);
    }

    [*(id *)(a1 + 32) clearHostedSessionState];
    uint64_t v11 = *(void **)(a1 + 32);
    CFStringRef v12 = @"Hosted session invalidated";
    double v13 = 15.0;
    goto LABEL_15;
  }
  id v6 = [*(id *)(a1 + 32) rotatingSessionIdentifier];
  id v7 = [*(id *)(a1 + 40) identifier];
  if (v6 == v7)
  {

    goto LABEL_12;
  }
  id v8 = v7;
  unsigned __int8 v9 = [v6 isEqual:v7];

  if (v9)
  {
LABEL_12:
    uint64_t v14 = _MRLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlGroupSessionCoordinator] Completed session rotation.", v15, 2u);
    }

    [*(id *)(a1 + 32) clearHostedSessionState];
    uint64_t v11 = *(void **)(a1 + 32);
    CFStringRef v12 = @"Completed session rotation";
    double v13 = 1.0;
LABEL_15:
    [v11 reevaluateAfterInterval:v12 withReason:v13];
  }
}

void sub_100073334(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) hostedSessionIdentifier];
  id v3 = [*(id *)(a1 + 40) identifier];
  if (v2 == v3)
  {
  }
  else
  {
    uint64_t v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0) {
      return;
    }
  }
  id v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlGroupSessionCoordinator] Rotating hosted session.", v9, 2u);
  }

  [*(id *)(a1 + 32) clearHostedSessionState];
  id v7 = [*(id *)(a1 + 40) identifier];
  [*(id *)(a1 + 32) setRotatingSessionIdentifier:v7];

  id v8 = [*(id *)(a1 + 32) sessionManager];
  [v8 finishRemoteControlGroupSession:*(void *)(a1 + 40)];
}

id sub_100073500(uint64_t a1)
{
  [*(id *)(a1 + 32) setEligibilityStatus:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 reevaluateSystemStateWithReason:@"Eligibility status changed"];
}

id sub_1000735D8(uint64_t a1)
{
  [*(id *)(a1 + 32) setClusterStatus:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 reevaluateSystemStateWithReason:@"Cluster status changed"];
}

void sub_10007373C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_100073EA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100073EB0(uint64_t a1)
{
}

uint64_t sub_100073EB8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) copy];

  return _objc_release_x1();
}

uint64_t sub_100074004(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) copy];

  return _objc_release_x1();
}

id sub_1000741A0(void *a1)
{
  uint64_t v2 = a1[5];
  id v3 = *(void **)(a1[4] + 48);
  uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  [v3 setObject:v2 forKey:v4];

  uint64_t v6 = a1[4];
  unsigned __int8 v5 = (void *)a1[5];

  return [v5 setDelegate:v6];
}

void sub_100074314(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 48);
  id v6 = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  uint64_t v3 = [v2 objectForKey:v6];
  uint64_t v4 = *(void *)(a1[5] + 8);
  unsigned __int8 v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100074418(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 48);
  id v2 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  [v1 removeObjectForKey:v2];
}

void sub_100074548(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 40) uniqueIdentifier]);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 48)];
  [v2 setObject:v4 forKey:v3];
}

void sub_1000746F4(void *a1)
{
  id v2 = *(void **)(a1[4] + 32);
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:a1[6]];
  id v4 = [v2 objectForKey:v3];
  id v5 = [v4 longLongValue];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v6 = *(id *)(a1[4] + 8);
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v11, "uniqueIdentifier", (void)v12) == v5)
        {
          objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), v11);
          goto LABEL_11;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

id sub_1000748E4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v2 removeAllObjects];
}

void sub_100074A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100074A80(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  id v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  [v1 addObject:v2];
}

void sub_100074AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained && [WeakRetained voiceRecordingState] != a3)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)MRVoiceRecordingStateCopyDescription();
      int v9 = 138412546;
      id v10 = v7;
      __int16 v11 = 2112;
      long long v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceConnection(Server)] Setting new voice recording state: %@ on client: %@", (uint8_t *)&v9, 0x16u);
    }
    [v5 setVoiceRecordingState:a3];
    id v8 = [objc_alloc((Class)MRSetRecordingStateMessage) initWithRecordingState:a3];
    [v5 sendMessage:v8];
  }
}

void sub_100074DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100074E04(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) copy];

  return _objc_release_x1();
}

id sub_100074F64(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

void sub_100075018(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * i);
        MRLyricsEventGetToken();
        id v8 = MRLyricsItemTokenGetIdentifier();
        MRLyricsEventGetToken();
        int v9 = MRLyricsItemTokenGetIdentifier();
        if (objc_msgSend(v9, "isEqualToString:", v8, (void)v10))
        {
          [*(id *)(*(void *)(a1 + 32) + 64) removeObject:v7];

          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_100075348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100075370(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 64);

  return [v5 removeAllObjects];
}

uint64_t sub_100075450(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 44);
  if (v1 == 234)
  {
    int v2 = *(unsigned __int8 *)(result + 48);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 84;
  }
  else
  {
    if (v1 != 233) {
      return result;
    }
    int v2 = *(unsigned __int8 *)(result + 48);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 72;
  }
  uint64_t v5 = v3 + v4;
  if (v2)
  {
    uint64_t v6 = *(void *)(result + 40);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(result + 48);
    *(void *)uint64_t v5 = v6;
  }
  else
  {
    *(_DWORD *)(v5 + 8) = 0;
    *(void *)uint64_t v5 = 0;
  }
  return result;
}

void sub_1000755D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void *sub_1000755FC(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 72))
  {
    *(unsigned char *)(*(void *)(result[5] + 8) + 24) = 1;
    uint64_t v1 = result[4];
  }
  if (*(_DWORD *)(v1 + 84)) {
    *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 1;
  }
  return result;
}

void sub_100075714(void *a1)
{
  if (!*(void *)(a1[4] + 96))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void **)(v3 + 96);
    *(void *)(v3 + 96) = v2;
  }
  id v8 = [objc_alloc((Class)MSVPair) initWithFirst:a1[5] second:a1[6]];
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = *(void **)(a1[4] + 96);
  id v7 = [v5 requestIdentifier];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_100075894(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 96);
  uint64_t v3 = [*(id *)(a1 + 40) requestIdentifier];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 96);
    uint64_t v6 = [*(id *)(a1 + 40) requestIdentifier];
    [v5 setObject:0 forKeyedSubscript:v6];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_100075B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100075B54(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 96);

  return [v5 removeAllObjects];
}

void sub_100075C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  id v10 = v3;
  if (v3)
  {
    id v5 = objc_alloc((Class)MRPlayerPath);
    uint64_t v6 = [v10 origin];
    id v7 = [*(id *)(a1 + 32) client];
    id v8 = [*(id *)(a1 + 32) player];
    id v9 = [v5 initWithOrigin:v6 client:v7 player:v8];
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
  }
}

void sub_100075E40(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 origin];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100075F34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connectOptions];
  id v5 = [*(id *)(a1 + 32) connectUserInfo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100076008;
  v8[3] = &unk_1004189B0;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  [v7 connectToExternalDeviceWithOptions:v4 userInfo:v5 completion:v8];
}

uint64_t sub_100076008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_1000761CC(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "setDestinationEndpoint:");
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_100076640(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000768F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [a2 command]);
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

void sub_100076DDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076E84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100076EF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100077034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007704C(uint64_t a1)
{
  uint64_t v2 = +[MRUserSettings currentSettings];
  unsigned __int8 v3 = [v2 supportOutputContextSync];

  if ((v3 & 1) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    id v5 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = @"FF disabled";
    goto LABEL_9;
  }
  uint64_t v4 = [*(id *)(a1 + 32) deviceInfo];
  id v5 = v4;
  if (!v4)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = *(void **)(v8 + 40);
    CFStringRef v10 = @"deviceInfo==nil";
LABEL_8:
    *(void *)(v8 + 40) = v10;

    uint64_t v6 = 0;
    goto LABEL_9;
  }
  if (([v4 supportsOutputContextSync] & 1) == 0)
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = *(void **)(v8 + 40);
    CFStringRef v10 = @"endpoint does not support outputContextSync";
    goto LABEL_8;
  }
  uint64_t v6 = 1;
LABEL_9:

  return v6;
}

void sub_1000773C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000773DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10007747C;
  v5[3] = &unk_100418A50;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void *sub_10007747C(void *result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (result[4] == a3)
  {
    id v5 = result;
    id result = [a2 shortValue];
    *(void *)(*(void *)(v5[5] + 8) + 24) = (int)result;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_100077960(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100077970(uint64_t a1)
{
}

void sub_100077978(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) availableDistantEndpoints];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if (objc_msgSend(v7, "connectionType", (void)v16) == (id)1)
        {
          if (![*(id *)(a1 + 40) type])
          {
            uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
            id v14 = v7;
            long long v15 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v14;
LABEL_16:

            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 32);
          id v9 = [v7 uniqueIdentifier];
          long long v15 = [v8 externalDeviceForEndpoint:v9];

          CFStringRef v10 = [v15 externalDevice];
          long long v11 = [v10 customOrigin];

          if (v11)
          {
            unsigned int v12 = [v11 identifier];
            if ([*(id *)(a1 + 40) identifier] == v12)
            {
              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v7);

              goto LABEL_16;
            }
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_17:
}

void sub_100077C64(void *a1)
{
  [*(id *)(a1[4] + 32) availableEndpoints];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v7, "containsOutputDeviceWithUID:", a1[5], (void)v8))
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

id sub_100077E28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_100077F0C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

void sub_100077FB0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setHostedRouteDiscoveryMode:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 32), "discoveryMode"));
  id v2 = [*(id *)(*(void *)(a1 + 40) + 24) allObjects];
  [*(id *)(a1 + 32) setHostedDiscoverySessions:v2];

  id v3 = [*(id *)(*(void *)(a1 + 40) + 32) availableDistantEndpoints];
  [*(id *)(a1 + 32) setEndpoints:v3];

  id v4 = [*(id *)(*(void *)(a1 + 40) + 32) availableExternalDevices];
  [*(id *)(a1 + 32) setHostedExternalDevices:v4];

  id v5 = [*(id *)(*(void *)(a1 + 40) + 32) debugDescription];
  [*(id *)(a1 + 32) setDiscoverySession:v5];
}

uint64_t sub_10007821C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007822C(uint64_t a1)
{
}

void sub_100078234(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:", *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 64), *(void *)(a1 + 56));
  id v3 = v2;
  if (v2)
  {
    if ([v2 isPrimaryLocalDevice]
      && (+[MRUserSettings currentSettings],
          id v4 = objc_claimAutoreleasedReturnValue(),
          unsigned int v5 = [v4 supportMultiplayerHost],
          v4,
          v5))
    {
      id v6 = +[MRDAVOutputContextManager sharedManager];
      uint64_t v7 = [*(id *)(a1 + 40) firstObject];
      long long v8 = [v6 outputContextForOutputDevice:v7];

      long long v9 = [v8 contextID];

      uint64_t v10 = 6;
    }
    else if ([v3 supportsMultiplayer])
    {
      long long v9 = 0;
      uint64_t v10 = 5;
    }
    else if ([v3 isRemoteControllable])
    {
      long long v9 = 0;
      uint64_t v10 = 2;
    }
    else
    {
      long long v9 = 0;
      if ([v3 canRelayCommunicationChannel]) {
        uint64_t v10 = 3;
      }
      else {
        uint64_t v10 = 2;
      }
    }
    id v13 = [objc_alloc((Class)MRConcreteEndpoint) initWithDesignatedGroupLeader:v3 outputDevices:*(void *)(a1 + 40) preferredSuffix:v9 connectionType:v10];
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
    long long v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    unsigned int v12 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0);
    id v16 = objc_alloc((Class)MRAVDistantEndpoint);
    long long v11 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) descriptor];
    id v17 = [v16 initWithDescriptor:v11];
    [v12 hostedExternalDeviceEndpointDidChange:v17];

    goto LABEL_15;
  }
  long long v9 = MRLogCategoryDiscovery();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    long long v11 = [*(id *)(a1 + 40) valueForKey:@"uid"];
    unsigned int v12 = [v11 componentsJoinedByString:@", "];
    int v18 = 138543362;
    long long v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to make endpoint due to no qualified group leader in devices: %{public}@", (uint8_t *)&v18, 0xCu);
LABEL_15:
  }
}

uint64_t sub_100078F6C(uint64_t a1)
{
  id v2 = +[MRUserSettings currentSettings];
  unsigned __int8 v3 = [v2 supportMultiplayerHost];

  if (v3) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40)) {
    return 1;
  }
  return [*(id *)(*(void *)(a1 + 32) + 72) groupContainsDiscoverableGroupLeader] ^ 1;
}

id sub_100078FEC(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return [(MRDAVHostedRoutingControllerGroup *)a2 distantEndpoint];
}

id sub_100078FF4(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return [(MRDAVHostedRoutingControllerGroup *)a2 distantEndpoint];
}

id sub_100078FFC(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  return [(MRDAVHostedRoutingControllerGroup *)a2 concreteEndpoint];
}

void sub_100079004(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v7, "hostedRoutingController:availableEndpointsDidChange:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v10);
        }
        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = objc_msgSend(*(id *)(a1 + 56), "copy", (void)v10);
        [v7 hostedRoutingController:v8 endpointsDidChange:v9];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

MRDAVHostedRoutingControllerGroup *sub_1000791FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:", v4, *(void *)(a1 + 40), 0);
  id v6 = v5;
  if (!v5)
  {
    long long v10 = 0;
    goto LABEL_18;
  }
  if (![v5 isLocalDevice]
    || (+[MRUserSettings currentSettings],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        unsigned int v8 = [v7 supportMultiplayerHost],
        v7,
        !v8))
  {
    id v9 = 0;
LABEL_9:
    id v11 = [v4 mutableCopy];
    if (([v6 supportsMultiplayer] & 1) == 0
      && [v6 isProxyGroupPlayer])
    {
      [v11 removeObject:v6];
    }
    id v12 = [objc_alloc((Class)MRConcreteEndpoint) initWithDesignatedGroupLeader:v6 outputDevices:v11 preferredSuffix:v9];
    long long v13 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeHostedExternalDeviceForEndpoint:didCreate:", v12, 0);
    if (v13) {
      long long v10 = [[MRDAVHostedRoutingControllerGroup alloc] initWithEndpoint:v12 externalDevice:v13];
    }
    else {
      long long v10 = 0;
    }

    goto LABEL_17;
  }
  id v9 = [(id)objc_opt_class() _expectedSuffixForNewEndpointWithGroupLeader:v6 outputDevices:v4];
  if (v9) {
    goto LABEL_9;
  }
  id v9 = MRLogCategoryDiscovery();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cannot computed expected groupID suffix (ie contextID) for localDevice, ignoring until next update", v15, 2u);
  }
  long long v10 = 0;
LABEL_17:

LABEL_18:

  return v10;
}

BOOL sub_1000795AC(id a1, MRDAVHostedRoutingControllerGroup *a2)
{
  id v2 = a2;
  id v3 = [(MRDAVHostedRoutingControllerGroup *)v2 concreteEndpoint];
  id v4 = [v3 designatedGroupLeader];
  if ([v4 isPrimaryLocalDevice])
  {
    uint64_t v5 = [(MRDAVHostedRoutingControllerGroup *)v2 concreteEndpoint];
    id v6 = [v5 outputDevices];
    uint64_t v7 = objc_msgSend(v6, "msv_firstWhere:", &stru_100418BA8);
    BOOL v8 = v7 != 0;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

BOOL sub_100079658(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

int64_t sub_100079670(id a1, MRDAVHostedRoutingControllerGroup *a2, MRDAVHostedRoutingControllerGroup *a3)
{
  id v4 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v5 = [(MRDAVHostedRoutingControllerGroup *)a2 concreteEndpoint];
  id v6 = [v5 outputDevices];

  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    int64_t v10 = 1;
LABEL_3:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v21 != v9) {
        objc_enumerationMutation(v6);
      }
      if ([*(id *)(*((void *)&v20 + 1) + 8 * v11) isPrimaryLocalDevice]) {
        break;
      }
      if (v8 == (id)++v11)
      {
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
        if (v8) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:

    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v12 = [(MRDAVHostedRoutingControllerGroup *)v4 concreteEndpoint];
    id v6 = [v12 outputDevices];

    int64_t v10 = (int64_t)[v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v10)
    {
      uint64_t v13 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v17 != v13) {
            objc_enumerationMutation(v6);
          }
          if ([*(id *)(*((void *)&v16 + 1) + 8 * i) isPrimaryLocalDevice])
          {
            int64_t v10 = -1;
            goto LABEL_19;
          }
        }
        int64_t v10 = (int64_t)[v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
  }
LABEL_19:

  return v10;
}

BOOL sub_100079AF4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

BOOL sub_100079BCC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isPrimaryLocalDevice];
}

id sub_100079D14(id a1, MRAVEndpoint *a2)
{
  return [(MRAVEndpoint *)a2 uniqueIdentifier];
}

BOOL sub_100079D1C(id a1, MRAVEndpoint *a2, MRAVEndpoint *a3)
{
  id v4 = a3;
  uint64_t v5 = [(MRAVEndpoint *)a2 outputDeviceUIDs];
  id v6 = [(MRAVEndpoint *)v4 outputDeviceUIDs];

  LOBYTE(v4) = [v5 isEqualToArray:v6] ^ 1;
  return (char)v4;
}

NSString *__cdecl sub_100079D8C(id a1, MRAVEndpoint *a2)
{
  return (NSString *)[(MRAVEndpoint *)a2 description];
}

BOOL sub_10007A354(sqlite3_stmt *a1, int a2, id a3)
{
  id v5 = a3;
  id v6 = (const char *)[v5 UTF8String];
  int v7 = [v5 length];

  int v8 = sqlite3_bind_text(a1, a2, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (v8)
  {
    uint64_t v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error binding statement to database query", v11, 2u);
    }
  }
  return v8 == 0;
}

void sub_10007AFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007B000(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v17 = WeakRetained[5];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10007B14C;
  v23[3] = &unk_100418D10;
  id v24 = v13;
  uint64_t v25 = WeakRetained;
  id v26 = v11;
  id v27 = v12;
  id v28 = v14;
  id v29 = v15;
  id v18 = v15;
  id v19 = v14;
  id v20 = v12;
  id v21 = v11;
  id v22 = v13;
  dispatch_async(v17, v23);
}

id sub_10007B14C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:MRIDSServiceMessageTypeDiscovery])
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    return _objc_msgSend(v4, "_handleDiscoveryMessage:fromDevice:", v5, v6, v2, v3);
  }
  else
  {
    id result = [*(id *)(a1 + 32) isEqualToString:MRIDSServiceMessageTypeConnectRemoteControl];
    if (result)
    {
      int v7 = *(void **)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      uint64_t v11 = *(void *)(a1 + 72);
      return _[v7 _handleConnectRemoteControlMessage:v8 fromDevice:v9 destination:v10 session:v11];
    }
  }
  return result;
}

void sub_10007B3A4(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(a1 + 32) deviceInfo];
    uint64_t v4 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDIDSRemoteControlService] Removing DiscoveryChannel for client %@ with error %@", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 48);
  uint64_t v6 = [*(id *)(a1 + 32) deviceInfo];
  int v7 = [v6 deviceUID];
  [v5 setObject:0 forKeyedSubscript:v7];
}

void sub_10007B58C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mode];
  [*(id *)(a1 + 40) setDiscoveryMode:v2];
  uint64_t v3 = [*(id *)(a1 + 32) configuration];
  [*(id *)(a1 + 40) setConfiguration:v3];

  if (v2)
  {
    id v6 = objc_alloc_init((Class)MRProtocolMessageOptions);
    [v6 setPriority:5];
    [v6 setWaking:1];
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = +[MRAVLocalEndpoint sharedLocalEndpoint];
    objc_msgSend(v4, "_onWorkerQueue_sendEndpoint:toClient:options:", v5, *(void *)(a1 + 40), v6);
  }
}

void sub_10007B848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007B868(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = WeakRetained[5];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007B930;
  block[3] = &unk_1004159B8;
  void block[4] = WeakRetained;
  id v8 = *(id *)(a1 + 32);
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10007B930(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v4 = [*(id *)(v1 + 48) objectForKeyedSubscript:a1[5]];
    id v3 = [v4 client];
    [v3 disconnectWithError:a1[6]];

    [*(id *)(a1[4] + 48) setObject:0 forKeyedSubscript:a1[5]];
  }
}

void sub_10007BCE4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = [objc_alloc((Class)MRPromptForRouteAuthorizationMessage) initWithRoute:0 inputType:a3];
  id v8 = (void *)a1[4];
  id v9 = [v7 protobufData];
  uint64_t v10 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10007BDF4;
  v14[3] = &unk_100418D80;
  id v15 = v6;
  id v13 = v6;
  [v8 sendMessage:v9 type:v10 destination:v12 session:v11 options:0 priority:300 response:v14];
}

void sub_10007BDF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 data];

  if (v4)
  {
    uint64_t v5 = [v3 data];
    uint64_t v9 = 0;
    id v6 = +[MRProtocolMessage protocolMessageWithProtobufData:v5 error:&v9];
    uint64_t v7 = v9;

    id v8 = 0;
    if (!v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v8 = [v6 response];
      }
      else
      {
        id v8 = 0;
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007BEE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [v6 protobufData];
  [v4 replyWithData:v5 priority:300];
}

void sub_10007C14C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.MRDIDSRemoteControlService.discoveryChannelClientQueue", v3);
  id v2 = (void *)qword_10047DFD8;
  qword_10047DFD8 = (uint64_t)v1;
}

void sub_10007C560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007C59C(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained(a1 + 8);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10007C6A4;
    v7[3] = &unk_100418D10;
    void v7[4] = WeakRetained;
    id v8 = a1[4];
    id v9 = a1[5];
    id v10 = a1[6];
    id v11 = v3;
    id v12 = a1[7];
    dispatch_async(v6, v7);
  }
}

void sub_10007C6A4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v8 = [v2 channelForDestination:*(void *)(a1 + 48) session:*(void *)(a1 + 56)];

  if (v8)
  {
    id v3 = [*(id *)(a1 + 64) object];
    id v4 = objc_alloc((Class)MRProtocolMessage);
    uint64_t v5 = [v3 error];
    id v6 = [v4 initWithUnderlyingCodableMessage:0 error:v5];
    uint64_t v7 = [v6 protobufData];

    [*(id *)(a1 + 72) sendMessage:v7 type:MRIDSServiceMessageTypeDisconnectRemoteControl destination:*(void *)(a1 + 48) session:*(void *)(a1 + 56) options:0 priority:300];
  }
}

void sub_10007C8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) transport];
  uint64_t v5 = [v3 groupLeader];
  id v6 = [v4 exportOutputDevice:v5 endpoint:v3];

  uint64_t v7 = [*(id *)(a1 + 32) destination];
  LOBYTE(v5) = [v6 containsUID:v7];

  if (v5)
  {
    id v8 = [*(id *)(a1 + 40) destinationOutputDeviceUID];
    id v9 = [v3 outputDeviceWithUID:v8];

    if (*(unsigned char *)(a1 + 72) && ([*(id *)(a1 + 40) isDestinationLocal] & 1) == 0)
    {
      id v10 = *(void **)(*(void *)(a1 + 48) + 8);
      id v11 = [v9 primaryID];
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10007CB54;
      v27[3] = &unk_100418DF0;
      id v29 = *(id *)(a1 + 64);
      id v28 = v9;
      [v10 addAuthorizationCallbackForRouteID:v11 requestCallback:v27];
    }
    id v12 = *(void **)(a1 + 40);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10007CB70;
    v21[3] = &unk_100418E18;
    char v26 = *(unsigned char *)(a1 + 72);
    id v13 = v12;
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = *(void **)(a1 + 56);
    id v22 = v13;
    uint64_t v23 = v14;
    id v24 = v9;
    id v25 = v15;
    id v16 = v9;
    [v13 requestConnectedDestinationEndpoint:v21];
  }
  else
  {
    id v17 = objc_alloc((Class)NSError);
    id v18 = [v3 debugName];
    id v19 = [*(id *)(a1 + 32) destination];
    id v20 = [v17 initWithMRError:118, @"Tried to connect to endpoint but its groupLeader changed from %@ to %@", v18, v19 format];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

uint64_t sub_10007CB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2, a3);
}

void sub_10007CB70(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 64) && ([*(id *)(a1 + 32) isDestinationLocal] & 1) == 0)
  {
    id v6 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = [*(id *)(a1 + 48) primaryID];
    [v6 removeAuthorizationCallbackForRouteID:v7];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10007CE30(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)MRPromptForRouteAuthorizationMessage) initWithRoute:a1[4] inputType:a2];
  uint64_t v7 = +[MRIDSCompanionConnection sharedManager];
  id v8 = [v6 protobufData];
  uint64_t v9 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v11 = a1[5];
  uint64_t v10 = a1[6];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10007CF58;
  v13[3] = &unk_100418E68;
  id v14 = v5;
  id v12 = v5;
  [v7 sendMessage:v8 type:v9 destination:v11 session:v10 options:0 priority:300 response:v13];
}

void sub_10007CF58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 data];

  if (v4)
  {
    id v5 = [v3 data];
    uint64_t v9 = 0;
    id v6 = +[MRProtocolMessage protocolMessageWithProtobufData:v5 error:&v9];
    uint64_t v7 = v9;

    id v8 = 0;
    if (!v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v8 = [v6 response];
      }
      else
      {
        id v8 = 0;
      }
    }
  }
  else
  {
    id v8 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10007D538(id a1, NSMutableDictionary *a2)
{
  return [(NSMutableDictionary *)a2 allValues];
}

void sub_10007D738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D750(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007D760(uint64_t a1)
{
}

void sub_10007D768(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v9 = v4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v5 = [objc_alloc((Class)NSError) initWithMRError:104, @"New RemoteControlChannel created for destination %@, clearing all previous channels for this destination", *(void *)(a1 + 32) format];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v4 = v9;
  }
  id v8 = [v4 transport];
  [v8 closeWithError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_10007DED4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) invalidated];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return _[v3 _configureObserver];
  }
  return result;
}

void sub_10007E18C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 88));
  _Unwind_Resume(a1);
}

void sub_10007E1E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained nearbyDevices];
    uint64_t v7 = [v3 mediaRouteID];
    unsigned int v8 = [v6 containsObject:v7];

    if (v8)
    {
      id v9 = _MRLogForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [v3 mediaRouteID];
        int v13 = 138412290;
        id v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ProximityController] Removing device %@", (uint8_t *)&v13, 0xCu);
      }
      uint64_t v11 = [v5 nearbyDevices];
      id v12 = [v3 mediaRouteID];
      [v11 removeObject:v12];

      objc_msgSend(v5, "_onQueue_reevaluateRemoteControlState");
    }
  }
}

void sub_10007E348(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained nearbyDevices];
    uint64_t v7 = [v3 mediaRouteID];
    unsigned __int8 v8 = [v6 containsObject:v7];

    if ((v8 & 1) == 0)
    {
      id v9 = _MRLogForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [v3 mediaRouteID];
        int v13 = 138412290;
        id v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ProximityController] Adding device %@", (uint8_t *)&v13, 0xCu);
      }
      uint64_t v11 = [v5 nearbyDevices];
      id v12 = [v3 mediaRouteID];
      [v11 addObject:v12];

      objc_msgSend(v5, "_onQueue_reevaluateRemoteControlState");
    }
  }
}

void sub_10007E4AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10032BDC4((uint64_t)v3, v4);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained setInvalidated:1];
  }
}

void sub_10007E530(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      [WeakRetained setInvalidated:1];
      uint64_t v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10032BE3C((uint64_t)v3, v6);
      }
    }
    else
    {
      [WeakRetained setInvalidated:0];
      uint64_t v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ProximityController] Activated.", v7, 2u);
      }
    }
  }
}

int64_t sub_10007E9C4(id a1, PCLockscreenControlsDevice *a2, PCLockscreenControlsDevice *a3)
{
  id v4 = a3;
  uint64_t v5 = [(PCLockscreenControlsDevice *)a2 distance];
  uint64_t v6 = [(PCLockscreenControlsDevice *)v4 distance];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_10007EA34(id a1, PCLockscreenControlsDevice *a2)
{
  return [(PCLockscreenControlsDevice *)a2 mediaRouteID];
}

void sub_10007EA3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10032BEB4(a1, v5, v7);
  }

  [v5 playbackState];
  if (MRMediaRemotePlaybackStateIsAdvancing())
  {
    id v8 = *(id *)(a1 + 40);
    objc_sync_enter(v8);
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    objc_sync_exit(v8);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10007EAF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007EB04(id *a1)
{
  if (![a1[4] hasTriggered])
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v3 = a1[5];
    id v4 = [v3 countByEnumeratingWithState:&v37 objects:v50 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v38;
LABEL_6:
      uint64_t v7 = 0;
      while (1)
      {
        if (*(void *)v38 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v37 + 1) + 8 * v7);
        if ([a1[6] containsObject:v8]) {
          break;
        }
        if (v5 == (id)++v7)
        {
          id v5 = [v3 countByEnumeratingWithState:&v37 objects:v50 count:16];
          if (v5) {
            goto LABEL_6;
          }
          goto LABEL_12;
        }
      }
      id v2 = v8;

      if (!v2) {
        goto LABEL_23;
      }
      [a1[4] setMediaSuggestionDeviceID:0];
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v9 = a1[7];
      id v10 = [v9 countByEnumeratingWithState:&v33 objects:v49 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v34;
        while (2)
        {
          for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v34 != v11) {
              objc_enumerationMutation(v9);
            }
            int v13 = *(void **)(*((void *)&v33 + 1) + 8 * i);
            id v14 = [v13 mediaRouteID];
            unsigned int v15 = [v14 isEqualToString:v2];

            if (v15)
            {
              id v10 = v13;
              goto LABEL_35;
            }
          }
          id v10 = [v9 countByEnumeratingWithState:&v33 objects:v49 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }
LABEL_35:

      [a1[4] setHasTriggered:1];
      id v25 = _MRLogForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v42 = v2;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[ProximityController] Updating active endpoint to device %@.", buf, 0xCu);
      }

      id v17 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:v2 reason:@"Nearby device"];
      [v17 setChangeType:0];
      char v26 = [a1[4] queue];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10007F03C;
      v30[3] = &unk_100418F88;
      id v27 = a1[4];
      id v31 = v10;
      id v32 = v27;
      id v28 = v10;
      [v17 perform:v26 completion:v30];

      goto LABEL_41;
    }
LABEL_12:

LABEL_23:
    id v16 = _MRLogForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[ProximityController] Found no devices that met requirements for automatic remote control.", buf, 2u);
    }

    id v2 = [a1[5] firstObject];
    id v17 = [a1[4] mediaSuggestionDeviceID];
    if (v17)
    {
      if ([a1[5] containsObject:v17])
      {
LABEL_41:

        goto LABEL_42;
      }
      [*((id *)a1[4] + 8) timeIntervalSinceNow];
      double v19 = v18;
      id v20 = _MRLogForCategory();
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if (v19 >= -60.0)
      {
        if (v21)
        {
          [*((id *)a1[4] + 8) timeIntervalSinceNow];
          *(_DWORD *)long long buf = 138413058;
          long long v42 = v2;
          __int16 v43 = 2112;
          id v44 = v17;
          __int16 v45 = 2048;
          uint64_t v46 = 0x404E000000000000;
          __int16 v47 = 2048;
          double v48 = -v29;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[ProximityController] Not replacing mediaSuggestionDeviceID with %@ even though previous %@ is no longer available because it has not been more than %lf seconds (%lf seconds)", buf, 0x2Au);
        }

        goto LABEL_41;
      }
      if (v21)
      {
        *(_DWORD *)long long buf = 138412802;
        long long v42 = v2;
        __int16 v43 = 2112;
        id v44 = v17;
        __int16 v45 = 2048;
        uint64_t v46 = 0x404E000000000000;
        id v22 = "[ProximityController] Replacing mediaSuggestionDeviceID with %@ beause previous %@ is no longer available "
              "and its been more than %lf seconds";
        uint64_t v23 = v20;
        uint32_t v24 = 32;
LABEL_32:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
      }
    }
    else
    {
      id v20 = _MRLogForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v42 = v2;
        id v22 = "[ProximityController] Initializing mediaSuggestionDeviceID %@";
        uint64_t v23 = v20;
        uint32_t v24 = 12;
        goto LABEL_32;
      }
    }

    [a1[4] setMediaSuggestionDeviceID:v2];
    goto LABEL_41;
  }
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ProximityController] Playback state requests completed but a device has already been chosen", buf, 2u);
  }
LABEL_42:
}

void sub_10007F03C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032BF6C(v3, v5);
    }
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = [*(id *)(a1 + 40) observer];
    [v6 didSwitchRouteToDevice:*(void *)(a1 + 32)];
  }
}

id sub_10007F24C(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10032B5E0(a1, v2);
  }

  id v3 = [*(id *)(a1 + 32) displayMonitor];
  unsigned __int8 v4 = [v3 displayOn];

  if ((v4 & 1) == 0)
  {
    id v5 = [*(id *)(a1 + 32) nearbyDevices];
    id v6 = [v5 count];

    if (v6)
    {
      uint64_t v7 = _MRLogForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[ProximityController] Removing all nearby devices because screen off.", v14, 2u);
      }

      id v8 = [*(id *)(a1 + 32) nearbyDevices];
      [v8 removeAllObjects];
    }
    [*(id *)(a1 + 32) setHasTriggered:0];
  }
  id v9 = [*(id *)(a1 + 32) displayMonitor];
  unsigned __int8 v10 = [v9 lockScreenVisible];
  uint64_t v11 = *(void **)(a1 + 32);
  if (v10)
  {
    id v12 = [v11 displayMonitor];
    objc_msgSend(*(id *)(a1 + 32), "setShouldRun:", objc_msgSend(v12, "controlCenterVisible") ^ 1);
  }
  else
  {
    [v11 setShouldRun:0];
  }

  id result = [*(id *)(a1 + 32) shouldRun];
  if (result) {
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateRemoteControlState");
  }
  return result;
}

Class sub_10007F574()
{
  if (qword_10047DFF8 != -1) {
    dispatch_once(&qword_10047DFF8, &stru_100418FA8);
  }
  Class result = objc_getClass("PCLockscreenControlsObserver");
  qword_10047DFF0 = (uint64_t)result;
  off_1004762F0 = (uint64_t (*)())sub_10007F5D8;
  return result;
}

id sub_10007F5D8()
{
  return (id)qword_10047DFF0;
}

void sub_10007F5E4(id a1)
{
  qword_10047E000 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ProximityControl.framework/ProximityControl", 2);
}

id sub_10007F7B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_restoreState");
}

id sub_10007F834(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_recalculateStateForReason:", @"Personal devices did change.");
}

void sub_10007FE94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 personalDeviceControllerStateDidChange:*(void *)(a1 + 32)];
}

void sub_100080000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100080024(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v4 = [*(id *)(a1 + 32) currentPersonalDeviceUIDs];
      int v5 = 138412290;
      id v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDPersonalDeviceController] Timeout reached. Personal devices %@ are now stale.", (uint8_t *)&v5, 0xCu);
    }
    [*(id *)(a1 + 32) setPersonalDeviceWasRecentlyAttached:0];
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_recalculateStateForReason:", @"Timeout reached.");
  }
}

void sub_1000802C0(id a1)
{
  qword_10047E010 = +[NSMutableDictionary dictionary];

  _objc_release_x1();
}

void sub_1000803FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(void **)(a1 + 32);
    id v6 = [v5 backgroundActivityIdentifier];
    int v7 = 138413058;
    id v8 = v5;
    __int16 v9 = 2048;
    unsigned __int8 v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "([MRDRRC]<%@: %p (%@)>{MRDRRC} - interaction: %@", (uint8_t *)&v7, 0x2Au);
  }
}

void sub_10008063C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100080658(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v5 = [v3 activeBackgroundActivities];
  unsigned int v6 = [v5 containsObject:WeakRetained[4]];

  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
  else
  {
    id v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = [WeakRetained backgroundActivityIdentifier];
      int v10 = 138413058;
      __int16 v11 = WeakRetained;
      __int16 v12 = 2048;
      __int16 v13 = WeakRetained;
      __int16 v14 = 2112;
      unsigned int v15 = v9;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "(<%@: %p (%@)>{MRDRRC} - not handling this interaction: %@", (uint8_t *)&v10, 0x2Au);
    }
  }
}

void sub_100080970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008098C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v6, "removeAttribution:");
  }
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v6, "addAttribution:");
  }
  [v5 setUserInitiated:1];
}

void sub_100080A0C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  objc_storeStrong(WeakRetained + 1, *(id *)(a1 + 32));
}

void sub_100080B28(id a1)
{
  id v1 = objc_alloc((Class)IDSService);
  id v4 = +[IDSService mr_sharedGroupSessionServiceName];
  id v2 = [v1 initWithService:v4];
  id v3 = (void *)qword_10047E018;
  qword_10047E018 = (uint64_t)v2;
}

void sub_100080E98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MRDRouteRecommendationSuppressionContext alloc];
  id v5 = [*(id *)(a1 + 32) localEndpoint];
  uint64_t v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v7 = +[MRUserSettings currentSettings];
  id v8 = -[MRDRouteRecommendationSuppressionContext initWithLocalEndpoint:activeSystemEndpoint:eligibleToShowRecommendationsOutsideApp:eligibleToShowDeltaBanners:](v4, "initWithLocalEndpoint:activeSystemEndpoint:eligibleToShowRecommendationsOutsideApp:eligibleToShowDeltaBanners:", v5, v3, v6, [v7 enableDeltaRouteRecommendations]);

  __int16 v9 = [*(id *)(a1 + 32) suppressionController];
  int v10 = [v9 suppressionPolicyWithContext:v8];

  if ([v10 shouldSuppress])
  {
    __int16 v11 = _MRLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = [v10 reason];
      int v13 = 138412290;
      __int16 v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV %@, ignoring all recommendations", (uint8_t *)&v13, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    [*(id *)(a1 + 32) _bestRecommendationIn:*(void *)(a1 + 40) primaryBundleIdentifier:*(void *)(a1 + 48) activeSystemEndpoint:v3 completion:*(void *)(a1 + 56)];
  }
}

void sub_1000811E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v12 = MREndpointConnectionReasonUserInfoKey;
  CFStringRef v13 = @"intelligentRoutingRecommendationValidator";
  id v4 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100081304;
  v8[3] = &unk_100418408;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  [v7 connectToExternalDeviceWithUserInfo:v4 completion:v8];
}

void sub_100081304(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = [*(id *)(a1 + 32) debugName];
      int v12 = 138412546;
      CFStringRef v13 = v6;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Failed to connect to active system endpoint %@ with error %@. Fallback to local", (uint8_t *)&v12, 0x16u);
    }
    id v7 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  }
  else
  {
    if (v5)
    {
      id v8 = [*(id *)(a1 + 32) debugName];
      int v12 = 138412290;
      CFStringRef v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Setting active system endpoint to %@", (uint8_t *)&v12, 0xCu);
    }
    id v7 = *(id *)(a1 + 32);
  }
  id v9 = v7;
  [*(id *)(a1 + 40) setActiveSystemEndpoint:v7];
  uint64_t v10 = [*(id *)(a1 + 40) activeSystemEndpointLock];
  [v10 unlock];

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v9);
  }
}

uint64_t sub_100081684(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 route];
  BOOL v5 = [v4 nodes];

  if (![v5 count])
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412290;
      id v24 = v3;
      uint64_t v10 = "[MRDRRC].RV Ignoring %@ - Recommendation has no devices";
      uint64_t v11 = v9;
      uint32_t v12 = 12;
      goto LABEL_11;
    }
LABEL_12:

LABEL_13:
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  if ([v5 isEqualToSet:*(void *)(a1 + 32)])
  {
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v23 = 138412802;
      id v24 = v3;
      __int16 v25 = 2112;
      char v26 = v5;
      __int16 v27 = 2112;
      uint64_t v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Ignoring %@ - %@ same as routed (%@)", (uint8_t *)&v23, 0x20u);
    }
  }
  id v8 = objc_msgSend(v5, "msv_firstWhere:", &stru_100419110);

  if (v8)
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412546;
      id v24 = v3;
      __int16 v25 = 2112;
      char v26 = v5;
      uint64_t v10 = "[MRDRRC].RV Ignoring %@ - %@ has Speaker, ignoring";
      uint64_t v11 = v9;
      uint32_t v12 = 22;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v23, v12);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  unsigned int v15 = [v5 intersectsSet:*(void *)(a1 + 32)];
  __int16 v16 = +[MRUserSettings currentSettings];
  unsigned int v17 = [v16 enableDeltaRouteRecommendations];

  if (!v17)
  {
    if (!v15)
    {
      uint64_t v13 = 1;
      goto LABEL_14;
    }
    BOOL v21 = _MRLogForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      int v23 = 138412802;
      id v24 = v3;
      __int16 v25 = 2112;
      char v26 = v5;
      __int16 v27 = 2112;
      uint64_t v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Ignoring %@ - %@ intersects with routed (%@)", (uint8_t *)&v23, 0x20u);
    }

    goto LABEL_13;
  }
  unsigned int v18 = [v5 isEqualToSet:*(void *)(a1 + 32)];
  if (v18)
  {
    double v19 = _MRLogForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      int v23 = 138412802;
      id v24 = v3;
      __int16 v25 = 2112;
      char v26 = v5;
      __int16 v27 = 2112;
      uint64_t v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Ignoring %@ - %@ same as routed (%@)", (uint8_t *)&v23, 0x20u);
    }
  }
  uint64_t v13 = v18 ^ 1;
LABEL_14:

  return v13;
}

BOOL sub_1000819AC(id a1, MRRouteNodeRepresentable *a2)
{
  id v2 = [(MRRouteNodeRepresentable *)a2 avOutputDeviceIdentifier];
  unsigned __int8 v3 = [v2 isEqualToString:MRIRRouteDeviceSpeakerRoute];

  return v3;
}

void sub_1000819F4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, unsigned int a6, void *a7, void *a8)
{
  id v14 = a2;
  id v58 = a3;
  id v15 = a4;
  id v60 = a7;
  id v16 = a8;
  unsigned int v17 = [MRDRouteRecommendationDemotionContext alloc];
  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = [v14 recommendationType];
  id v20 = [*(id *)(a1 + 40) isLocalEndpoint];
  uint64_t v21 = *(unsigned __int8 *)(a1 + 64);
  long long v59 = v15;
  uint64_t v22 = v15;
  uint64_t v23 = a5;
  uint64_t v24 = a1;
  LOBYTE(v54) = [v22 groupContainsDiscoverableGroupLeader];
  id v25 = v19;
  char v26 = v14;
  __int16 v27 = [(MRDRouteRecommendationDemotionContext *)v17 initWithPrimaryBundleIdentifier:v18 recommendationType:v25 isASELocal:v20 localOutputContextHasAirPlay:v21 isSourceEndpointPlaying:v23 isTargetEndpointPlaying:a6 targetNowPlayingBundleIdentifier:v16 targetEndpointContainsDiscoverableGroupLeader:v54];

  uint64_t v28 = [*(id *)(v24 + 48) demotionController];
  double v29 = [v28 demotionPolicyWithContext:v27];

  if ([v29 shouldDemote])
  {
    int v30 = _MRLogForCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = [v29 reason];
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v62 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV %@. Downgrading to OTS", buf, 0xCu);
    }
    [v14 setRecommendationType:0];
  }
  if (![v14 recommendationType])
  {
    if (v23)
    {
      id v32 = +[MRUserSettings currentSettings];
      unsigned int v33 = [v32 enableDeltaRouteRecommendations];

      if (v33)
      {
        unsigned int v34 = [*(id *)(v24 + 40) isGroupable];
        unsigned int v35 = [v59 isGroupable];
        unsigned int v36 = objc_msgSend(v58, "mr_all:", &stru_100419158);
        unsigned int v37 = v36;
        if (v59) {
          unsigned int v38 = v35;
        }
        else {
          unsigned int v38 = v36;
        }
        if (v60)
        {
          unsigned int v57 = v36;
          unsigned int v39 = v34;
          long long v40 = +[MRDDisplayMonitor sharedMonitor];
          if ([v40 displayOn])
          {
            unsigned int v55 = v35;
            id v41 = +[MRDDisplayMonitor sharedMonitor];
            long long v42 = [v41 presentedBundleIdentifiers];
            unsigned int v43 = [v42 containsObject:v60];

            unsigned int v34 = v39;
            if ((v39 & v38) == 1)
            {
              unsigned int v35 = v55;
              unsigned int v37 = v57;
              if (v43)
              {
                id v44 = _MRLogForCategory();
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138413570;
                  CFStringRef v45 = @"NO";
                  CFStringRef v62 = @"YES";
                  if (v59) {
                    CFStringRef v46 = @"YES";
                  }
                  else {
                    CFStringRef v46 = @"NO";
                  }
                  __int16 v63 = 2112;
                  CFStringRef v64 = v46;
                  if (v55) {
                    CFStringRef v47 = @"YES";
                  }
                  else {
                    CFStringRef v47 = @"NO";
                  }
                  __int16 v65 = 2112;
                  if (v57) {
                    CFStringRef v45 = @"YES";
                  }
                  CFStringRef v66 = v47;
                  __int16 v67 = 2112;
                  CFStringRef v68 = v45;
                  __int16 v69 = 2112;
                  id v70 = v60;
                  __int16 v71 = 2112;
                  CFStringRef v72 = @"YES";
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Mutating to deltaOTS: sG:%@; e:%@, eG:%@, dG: %@, np: %@ (visible: %@)",
                    buf,
                    0x3Eu);
                }

                [v26 setRecommendationType:3];
                goto LABEL_47;
              }
              goto LABEL_30;
            }
            unsigned int v35 = v55;
          }
          else
          {

            unsigned int v43 = 0;
          }
          unsigned int v37 = v57;
        }
        else
        {
          unsigned int v43 = 0;
        }
LABEL_30:
        double v48 = _MRLogForCategory();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v49 = @"NO";
          if (v34) {
            CFStringRef v50 = @"YES";
          }
          else {
            CFStringRef v50 = @"NO";
          }
          *(_DWORD *)long long buf = 138413570;
          CFStringRef v62 = v50;
          if (v59) {
            CFStringRef v51 = @"YES";
          }
          else {
            CFStringRef v51 = @"NO";
          }
          __int16 v63 = 2112;
          CFStringRef v64 = v51;
          if (v35) {
            CFStringRef v52 = @"YES";
          }
          else {
            CFStringRef v52 = @"NO";
          }
          __int16 v65 = 2112;
          CFStringRef v66 = v52;
          if (v37) {
            CFStringRef v53 = @"YES";
          }
          else {
            CFStringRef v53 = @"NO";
          }
          __int16 v67 = 2112;
          if (v43) {
            CFStringRef v49 = @"YES";
          }
          CFStringRef v68 = v53;
          __int16 v69 = 2112;
          id v70 = v60;
          __int16 v71 = 2112;
          CFStringRef v72 = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV Not mutating to deltaOTS: sG:%@; e:%@, eG:%@, dG: %@, np: %@ (visible: %@)",
            buf,
            0x3Eu);
        }
      }
    }
  }
LABEL_47:
  (*(void (**)(void))(*(void *)(v24 + 56) + 16))();
}

BOOL sub_100081E8C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isGroupable];
}

id sub_100082284(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 134218242;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV retrying with %lu remaining: %@", (uint8_t *)&v6, 0x16u);
  }

  return [*(id *)(a1 + 40) evaluateRecommendations:*(void *)(a1 + 32) localOutputContextHasAirPlay:*(unsigned __int8 *)(a1 + 72) primaryBundleIdentifier:*(void *)(a1 + 48) activeSystemEndpoint:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100082358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100082A74;
  v57[3] = &unk_1004191D0;
  id v8 = v5;
  id v58 = v8;
  uint64_t v9 = objc_msgSend(v7, "msv_compactMap:", v57);
  id v10 = [v9 count];
  id v11 = [*(id *)(a1 + 32) count];

  uint32_t v12 = _MRLogForCategory();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v10 == v11)
  {
    if (v13)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV all devices were found!", buf, 2u);
    }

    if (!v6)
    {
      unsigned int v35 = objc_msgSend(v8, "mr_first:", &stru_1004191F0);
      if (v35)
      {
        unsigned int v36 = _MRLogForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v60 = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV no unanimous endpoint and at least one RC member: %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
        goto LABEL_31;
      }
      CFStringRef v45 = +[MRDMediaRemoteServer server];
      CFStringRef v46 = [v45 nowPlayingServer];
      CFStringRef v47 = [*(id *)(a1 + 40) origin];
      uint64_t v18 = [v46 originClientForOrigin:v47];

      double v48 = [v18 activeNowPlayingClient];
      CFStringRef v49 = [v48 activePlayerClient];
      [v49 isPlaying];

      CFStringRef v50 = [v18 activeNowPlayingClient];
      CFStringRef v51 = [v50 client];
      CFStringRef v52 = [v51 bundleIdentifier];

      CFStringRef v53 = _MRLogForCategory();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v60 = v8;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV no endpoint, no RC, returning device collection: %@", buf, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
LABEL_30:

LABEL_31:
      goto LABEL_32;
    }
    id v14 = +[MRIRRoute routeWithEndpoint:v6];
    uint64_t v56 = [v14 nodes];

    id v15 = +[MRDMediaRemoteServer server];
    id v16 = [v15 nowPlayingServer];
    unsigned int v17 = [*(id *)(a1 + 40) origin];
    uint64_t v18 = [v16 originClientForOrigin:v17];

    id v19 = +[MRDMediaRemoteServer server];
    id v20 = [v19 nowPlayingServer];
    uint64_t v21 = [v6 origin];
    uint64_t v22 = [v20 originClientForOrigin:v21];

    uint64_t v23 = [v18 activeNowPlayingClient];
    uint64_t v24 = [v23 activePlayerClient];
    unsigned int v55 = [v24 isPlaying];

    id v25 = [v22 activeNowPlayingClient];
    char v26 = [v25 activePlayerClient];
    id v27 = [v26 isPlaying];

    uint64_t v28 = [v18 activeNowPlayingClient];
    double v29 = [v28 client];
    int v30 = [v29 bundleIdentifier];

    id v31 = [v22 activeNowPlayingClient];
    id v32 = [v31 client];
    unsigned int v33 = [v32 bundleIdentifier];

    if (*(unsigned char *)(a1 + 80) && v27)
    {
      unsigned int v34 = _MRLogForCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV endpoint is not a perfect match.\n local endpoint is airplaying and target is playing.", buf, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      unsigned int v35 = v56;
      if (![v56 isSubsetOfSet:*(void *)(a1 + 48)])
      {
        unsigned int v43 = _MRLogForCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          id v44 = *(void **)(a1 + 48);
          *(_DWORD *)long long buf = 138412546;
          id v60 = v44;
          __int16 v61 = 2112;
          CFStringRef v62 = v56;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV endpoint is not a perfect match.\n desired nodes: %@\n available nodes: %@", buf, 0x16u);
        }

        (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
        goto LABEL_29;
      }
      unsigned int v37 = +[NSMutableSet setWithSet:*(void *)(a1 + 48)];
      [v37 minusSet:v56];
      if ([v37 count])
      {
        unsigned int v38 = _MRLogForCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v60 = v37;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV could not find nodes: %@", buf, 0xCu);
        }
      }
      uint64_t v54 = v30;
      unsigned int v39 = _MRLogForCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v60 = v6;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV endpoint is a perfect match, returning endpoint: %@", buf, 0xCu);
      }

      uint64_t v40 = *(void *)(a1 + 72);
      uint64_t v41 = *(void *)(a1 + 56);
      long long v42 = [v6 outputDevices];
      (*(void (**)(uint64_t, uint64_t, void *, id, void, id, void *, void *))(v40 + 16))(v40, v41, v42, v6, v55, v27, v54, v33);

      int v30 = v54;
    }
    unsigned int v35 = v56;
LABEL_29:

    goto LABEL_30;
  }
  if (v13)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDRRC].RV not all devices were found!", buf, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_32:
}

id sub_100082A74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100082B28;
  v8[3] = &unk_100417940;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_first:", v8);

  return v6;
}

id sub_100082B28(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_100082B6C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isRemoteControllable];
}

void sub_100082E84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000830A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a3;
  id v5 = [[MRDExternalDeviceHomeServerRecentlyPlayedEntry alloc] initWithDictionaryRepresentation:v4];

  [v3 _addEntry:v5];
}

void sub_100083118(id a1, MRDeviceInfo *a2, NSDictionary *a3, id a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [(NSDictionary *)v7 objectForKeyedSubscript:kMRPlaybackQueueRequestUserInfoKey];
  id v10 = MRGetPlayerPathFromUserInfo();
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x3032000000;
  v43[3] = sub_1000834BC;
  void v43[4] = sub_1000834CC;
  id v44 = 0;
  uint32_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  id v13 = &_dispatch_main_q;
  unsigned int v36 = _NSConcreteStackBlock;
  uint64_t v37 = 3221225472;
  unsigned int v38 = sub_1000834D4;
  unsigned int v39 = &unk_1004192B0;
  long long v42 = v43;
  id v40 = v11;
  uint64_t v41 = v12;
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync();

  dispatch_group_enter(v41);
  double v29 = _NSConcreteStackBlock;
  uint64_t v30 = 3221225472;
  id v31 = sub_10008354C;
  id v32 = &unk_1004192D8;
  unsigned int v35 = v43;
  id v33 = v40;
  unsigned int v34 = v41;
  MRMediaRemoteGetSupportedCommandsForPlayer();

  dispatch_group_enter(v34);
  id v14 = +[MROrigin localOrigin];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000835C4;
  v24[3] = &unk_100419300;
  uint64_t v28 = v43;
  id v15 = v6;
  id v25 = v15;
  id v16 = v33;
  id v26 = v16;
  unsigned int v17 = v34;
  id v27 = v17;
  +[MRDeviceInfoRequest deviceInfoForOrigin:v14 queue:&_dispatch_main_q completion:v24];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100083668;
  block[3] = &unk_100419328;
  id v21 = v16;
  id v22 = v8;
  uint64_t v23 = v43;
  id v18 = v16;
  id v19 = v8;
  dispatch_group_notify(v17, (dispatch_queue_t)&_dispatch_main_q, block);

  _Block_object_dispose(v43, 8);
}

void sub_1000834A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000834BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000834CC(uint64_t a1)
{
}

void sub_1000834D4(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  if (a2 && !*(void *)(v5 + 40))
  {
    [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:kMRPlaybackQueueUserInfoKey];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  objc_storeStrong((id *)(v5 + 40), obj);
  id v6 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v6);
}

void sub_10008354C(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  if (a2 && !*(void *)(v5 + 40))
  {
    [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:kMRSupportedCommandsUserInfoKey];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  objc_storeStrong((id *)(v5 + 40), obj);
  id v6 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v6);
}

void sub_1000835C4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  if (!*(void *)(v6 + 40) && *(void *)(a1 + 32))
  {
    MRAddDeviceInfoToUserInfo();
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  }
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_100083668(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_100083688(id a1, MRDeviceInfo *a2, NSDictionary *a3, id a4)
{
  id v5 = a4;
  uint64_t v6 = kMRPlaybackSessionRequestUserInfoKey;
  id v7 = a3;
  id v8 = [(NSDictionary *)v7 objectForKeyedSubscript:v6];
  id v9 = MRGetPlayerPathFromUserInfo();

  id v10 = v5;
  MRMediaRemotePlaybackSessionRequest();
}

void sub_100083774(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    [v4 setObject:a2 forKeyedSubscript:kMRPlaybackSessionUserInfoKey];
  }
  else
  {
    id v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100083808(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = [a3 objectForKeyedSubscript:MRCompanionLinkClientActiveSystemEndpointUIDUserInfoKey];
  if (v5)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    [v6 setObject:v5 forKeyedSubscript:MRAVEndpointOutputDeviceUserInfoKey];
    MRAddDeviceInfoToUserInfo();
    id v7 = +[NSNotificationCenter defaultCenter];
    [v7 postNotificationName:@"MRDExternalDeviceHomeServerDidReceiveSystemEndpointUpdateRequestNotification" object:*(void *)(a1 + 32) userInfo:v6];
  }
}

void sub_100083C68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + 8) = 1;
    id v3 = +[MRUserSettings currentSettings];
    [v3 sendPlaybackSessionUpdateToCompanionCoalesceInterval];
    double v5 = v4;

    dispatch_time_t v6 = dispatch_time(0, (uint64_t)(v5 * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100083D40;
    block[3] = &unk_100415CC8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_100083D40(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  return _[*(id *)(a1 + 32) _maybeSendPlaybackStateMessageToCompanion];
}

void sub_1000842C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100084564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000846EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000847F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [MRDExternalDeviceHomeServerRecentlyPlayedEntry alloc];
  double v5 = MRCreateDecodedUserInfo();

  uint32_t v12 = [(MRDExternalDeviceHomeServerRecentlyPlayedEntry *)v4 initWithDictionaryRepresentation:v5];
  dispatch_time_t v6 = [(MRDExternalDeviceHomeServerRecentlyPlayedEntry *)v12 date];
  [v6 timeIntervalSinceNow];
  double v8 = v7;
  id v9 = +[MRUserSettings currentSettings];
  [v9 lastPlayingDeviceThresholdInterval];
  double v11 = v10;

  if (v8 < v11) {
    [*(id *)(a1 + 32) addObject:v12];
  }
}

int64_t sub_1000848D4(id a1, MRDExternalDeviceHomeServerRecentlyPlayedEntry *a2, MRDExternalDeviceHomeServerRecentlyPlayedEntry *a3)
{
  double v4 = a3;
  double v5 = [(MRDExternalDeviceHomeServerRecentlyPlayedEntry *)a2 date];
  dispatch_time_t v6 = [(MRDExternalDeviceHomeServerRecentlyPlayedEntry *)v4 date];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1000854BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000854D8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained resetWithError:v3];
}

void sub_100085660(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100085924(id a1, MRDIDSServiceMessage *a2)
{
  id v2 = a2;
  id v3 = [(MRDIDSServiceMessage *)v2 data];
  id v10 = 0;
  double v4 = +[MRProtocolMessage protocolMessageWithProtobufData:v3 error:&v10];
  id v5 = v10;

  if (!v5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      dispatch_time_t v6 = +[MRMediaRemoteServiceClient sharedServiceClient];
      id v7 = [v6 workerQueue];

      id v8 = v4;
      MRGetSharedService();
      id v9 = v2;
      MRMediaRemoteServicePromptRouteAuthorization();
    }
  }
}

void sub_100085A70(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 protobufData];
  [v2 replyWithData:v3 priority:300];
}

void sub_100085ACC(uint64_t a1)
{
}

void sub_100085D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100085D88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100085D98(uint64_t a1)
{
}

void sub_100085DA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 data];

  if (v4)
  {
    id v5 = [v3 data];
    id v11 = 0;
    dispatch_time_t v6 = +[MRProtocolMessage protocolMessageWithProtobufData:v5 error:&v11];
    id v7 = v11;

    uint64_t v8 = [v6 error];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100085EDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100085F60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000860D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000860F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = [v3 data];
    uint64_t v8 = 0;
    dispatch_time_t v6 = +[MRProtocolMessage protocolMessageWithProtobufData:v5 error:&v8];

    id v7 = [v6 error];
    [WeakRetained resetWithError:v7];
  }
}

void sub_1000863D0(id a1)
{
  uint64_t v1 = (void *)qword_10047E030;
  qword_10047E030 = (uint64_t)&off_1004385F0;
}

uint64_t sub_100086560(uint64_t a1)
{
  return notify_post(*(const char **)(a1 + 32));
}

id sub_100086748(uint64_t a1)
{
  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

void sub_1000868C4(id a1)
{
  id v2 = +[MRUserSettings currentSettings];
  [v2 transactionWaitDurationOnOutOfMemory];
  qword_10047E040 = v1;
}

uint64_t sub_100086B34(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3 == &_xpc_error_connection_invalid || v3 == &_xpc_error_connection_interrupted) {
      uint64_t v5 = 4;
    }
    else {
      uint64_t v5 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v5);
  }
  return result;
}

id sub_100086D90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

id sub_1000870D0(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%p Checking for available memory", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 32) _query:*(void *)(a1 + 40)];
}

id sub_100087184(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _processMessage:a2];
}

void sub_1000872D0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

uint64_t sub_100087318(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100087324(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t start()
{
  dispatch_semaphore_t v0 = _MRLogForCategory();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Starting MediaRemote server", buf, 2u);
  }

  sub_100102DD0();
  uint64_t v1 = getenv("MR_WAIT_FOR_DEBUGGER");
  if (v1 && *v1 == 49) {
    raise(2);
  }
  uint64_t v3 = +[MRDMediaRemoteServer server];
  [v3 initializeServer];

  double v4 = +[MRDMediaRemoteServer server];
  [v4 start];

  int v5 = +[NSRunLoop currentRunLoop];
  [v5 run];

  uint64_t v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MediaRemote server exiting", v8, 2u);
  }

  return 0;
}

void sub_10008757C(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremoted.MRDRoutingDiscoverySession", v3);
  id v2 = (void *)qword_10047E050;
  qword_10047E050 = (uint64_t)v1;
}

void sub_1000875E0(uint64_t a1)
{
  id v5 = +[MRDMediaRemoteServer server];
  id v2 = [v5 routingServer];
  uint64_t v3 = [v2 hostedRoutingService];
  double v4 = [v3 hostedRoutingController];
  [v4 addObserver:*(void *)(a1 + 32)];
}

void sub_1000876E8(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:0];
}

void sub_100087B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_100087B34(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDAVHostedRoutingObserverDiscoveryModeDidChangeNotification" object:*(void *)(a1 + 32)];
}

id sub_100087C3C(id a1, MRAVDistantEndpoint *a2)
{
  id v2 = a2;
  if ([(MRAVDistantEndpoint *)v2 isLocalEndpoint])
  {
    uint64_t v3 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  }
  else
  {
    uint64_t v3 = v2;
  }
  double v4 = v3;

  return v4;
}

id sub_100087D00(id a1, MRAVDistantEndpoint *a2)
{
  id v2 = a2;
  if ([(MRAVDistantEndpoint *)v2 isLocalEndpoint])
  {
    uint64_t v3 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  }
  else
  {
    uint64_t v3 = v2;
  }
  double v4 = v3;

  return v4;
}

id sub_100087FE0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  }
  uint64_t v6 = *(void *)(a1 + 40);

  return [v2 addObject:v6];
}

id sub_1000880DC(uint64_t a1)
{
  [*(id *)(a1 + 32) setTransactions:*(void *)(*(void *)(a1 + 40) + 40)];
  [*(id *)(a1 + 32) setUsedTransactionMemory:*(void *)(*(void *)(a1 + 40) + 16)];
  [*(id *)(a1 + 32) setAllowedTransactionMemory:*(void *)(*(void *)(a1 + 40) + 24)];
  id v2 = *(void **)(a1 + 32);
  double v3 = *(double *)(*(void *)(a1 + 40) + 32);

  return _[v2 setTransactionWaitDuration:v3];
}

id sub_1000881E0(uint64_t a1)
{
  [*(id *)(a1 + 32) adjustMemory:-*(void *)(a1 + 48)];
  uint64_t v2 = *(void *)(a1 + 40);
  double v3 = *(void **)(*(void *)(a1 + 32) + 40);

  return [v3 removeObject:v2];
}

id sub_1000882F4(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) name] - 2;
  if (v2 <= 8 && ((0x17Fu >> v2) & 1) != 0) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = qword_1003C5440[v2];
  }
  double v3 = *(void **)(a1 + 40);
  unint64_t v4 = v3[3] - v3[2];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  unint64_t v6 = *(void *)(v5 + 24);
  if (v6 > v4)
  {
    *(void *)(v5 + 24) = v4;
    double v3 = *(void **)(a1 + 40);
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }

  return [v3 adjustMemory:v6];
}

id sub_100088574(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustMemory:*(void *)(a1 + 48) - *(void *)(a1 + 40)];
}

uint64_t sub_100088588(void *a1)
{
  uint64_t v2 = a1[4];
  double v3 = *(NSObject **)(v2 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10008861C;
  v6[3] = &unk_1004165E8;
  uint64_t v4 = a1[6];
  void v6[4] = v2;
  void v6[5] = v4;
  dispatch_sync(v3, v6);
  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

id sub_10008861C(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustMemory:-*(void *)(a1 + 40)];
}

void sub_100088B0C(uint64_t a1, int a2)
{
  uint64_t v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_10032C734(a1, v4);
  }

  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (v5) {
    dispatch_group_leave(v5);
  }
  if (a2) {
    [*(id *)(a1 + 48) cancel];
  }
}

id sub_10008915C(void *a1)
{
  id v2 = a1;
  id v20 = objc_alloc_init((Class)NSMutableDictionary);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    uint64_t v7 = _kMRPlaybackQueueRequestIDUserInfoKey;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = [*(id *)(*((void *)&v21 + 1) + 8 * i) key];
        uint64_t v10 = v9;
        if (v9)
        {
          id v11 = [v9 userData];

          if (v11)
          {
            uint32_t v12 = [v10 userData];
            id v13 = MSVPropertyListDataClasses();
            id v14 = MRCreateFromData();

            id v15 = [v14 objectForKey:v7];
            id v11 = [v15 copy];
          }
          id v16 = [v10 identifier];

          if (v16)
          {
            id v17 = v11;
            if (!v11)
            {
              id v1 = +[NSNull null];
              id v17 = v1;
            }
            id v18 = [v10 identifier];
            [v20 setObject:v17 forKey:v18];

            if (!v11) {
          }
            }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }

  return v20;
}

void sub_10008937C(id *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1[4])
  {
    uint64_t v6 = +[NSNull null];
    if ([v5 isEqual:v6])
    {
    }
    else
    {
      unsigned int v7 = [a1[5] hasRequest:v5];

      if (!v7) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v8 = [a1[5] requestForSubscribedContentItemIdentifier:v9];
  if (v8 && [a1[4] match:v8]) {
    [a1[6] addObject:v9];
  }

LABEL_9:
}

void sub_10008945C(uint64_t a1)
{
  id v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_group_leave(v1);
  }
}

id sub_100089624(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendContentItemTransaction:*(void *)(a1 + 40) request:*(void *)(a1 + 48) playerPath:*(void *)(a1 + 56)];
}

void sub_10008A458(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [*(id *)(a1 + 32) interruptions];
  [v7 start];

  uint64_t v8 = +[MRDStreamCapacityManager sharedManager];
  id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%@<%@>", *(void *)(a1 + 40), *(void *)(a1 + 48)];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10008A5FC;
  v13[3] = &unk_100419668;
  id v14 = *(id *)(a1 + 32);
  id v15 = v6;
  id v16 = v5;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 64);
  id v10 = *(id *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 72);
  id v22 = v10;
  id v11 = v5;
  id v12 = v6;
  [v8 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v11 reason:v9 completion:v13];
}

id sub_10008A5FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) interruptions];
  [v2 end];

  if (!*(void *)(a1 + 40))
  {
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    id v4 = _MRLogForCategory();
    BOOL v14 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v12)
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v15 = *(void *)(a1 + 64);
        uint64_t v16 = *(void *)(a1 + 72);
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(a1 + 56);
        id v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 80)];
        int v35 = 138544386;
        uint64_t v36 = v15;
        __int16 v37 = 2114;
        uint64_t v38 = v16;
        __int16 v39 = 2112;
        uint64_t v40 = v17;
        __int16 v41 = 2114;
        uint64_t v42 = v18;
        __int16 v43 = 2048;
        uint64_t v44 = v19;
        id v20 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v21 = v4;
        uint32_t v22 = 52;
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v35, v22);
        goto LABEL_20;
      }
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v27 = *(void *)(a1 + 64);
      uint64_t v28 = *(void *)(a1 + 72);
      uint64_t v29 = *(void *)(a1 + 48);
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v35 = 138544130;
      uint64_t v36 = v27;
      __int16 v37 = 2114;
      uint64_t v38 = v28;
      __int16 v39 = 2112;
      uint64_t v40 = v29;
      __int16 v41 = 2048;
      uint64_t v42 = v30;
      id v20 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    }
    else
    {
      if (!v12)
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v31 = *(void *)(a1 + 64);
        uint64_t v32 = *(void *)(a1 + 72);
        id v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 80)];
        int v35 = 138543874;
        uint64_t v36 = v31;
        __int16 v37 = 2114;
        uint64_t v38 = v32;
        __int16 v39 = 2048;
        uint64_t v40 = v33;
        id v20 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v21 = v4;
        uint32_t v22 = 32;
        goto LABEL_19;
      }
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v24 = *(void *)(a1 + 64);
      uint64_t v23 = *(void *)(a1 + 72);
      uint64_t v25 = *(void *)(a1 + 56);
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v35 = 138544130;
      uint64_t v36 = v24;
      __int16 v37 = 2114;
      uint64_t v38 = v23;
      __int16 v39 = 2114;
      uint64_t v40 = v25;
      __int16 v41 = 2048;
      uint64_t v42 = v26;
      id v20 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    }
    uint64_t v21 = v4;
    uint32_t v22 = 42;
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  id v4 = _MRLogForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 64);
      uint64_t v6 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 56);
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 80)];
      int v35 = 138544386;
      uint64_t v36 = v7;
      __int16 v37 = 2114;
      uint64_t v38 = v6;
      __int16 v39 = 2114;
      uint64_t v40 = v8;
      __int16 v41 = 2114;
      uint64_t v42 = v9;
      __int16 v43 = 2048;
      uint64_t v44 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v35, 0x34u);
LABEL_20:
    }
  }
  else if (v5)
  {
    sub_10032C858(a1);
  }
LABEL_21:

  (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  [*(id *)(a1 + 32) trackWithError:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 88) setStartingNowPlayingSession:0];
}

uint64_t sub_10008A98C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008A9A4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10008AA1C(uint64_t a1)
{
  id v2 = +[MRDMediaRemoteServer server];
  uint64_t v3 = [v2 nowPlayingServer];
  id v4 = [v3 localOriginClient];
  id v5 = [v4 deviceInfoDataSource];
  id v6 = [v5 deviceInfo];

  unsigned int v7 = [v6 parentGroupContainsDiscoverableGroupLeader];
  uint64_t v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 setDiscoverableGroupLeader:1];
    uint64_t v9 = [*(id *)(a1 + 32) originForward];
    [v9 start];

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10008AC44;
    v29[3] = &unk_100416988;
    id v10 = &v30;
    id v30 = *(id *)(a1 + 32);
    uint64_t v11 = &v31;
    id v31 = *(id *)(a1 + 64);
    +[MRDOriginForwarder waitUntilForwardingOperationsHaveFinished:v29];
    uint64_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = [v6 groupUID];
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = v12;
    uint64_t v17 = v13;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v19 = [v8 findEndpoint];
    [v19 start];

    id v20 = *(void **)(a1 + 40);
    uint64_t v13 = [v6 groupUID];
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472;
    uint64_t v25 = sub_10008ACF8;
    uint64_t v26 = &unk_1004196B8;
    id v10 = &v27;
    id v27 = *(id *)(a1 + 32);
    uint64_t v11 = &v28;
    id v28 = *(id *)(a1 + 64);
    uint64_t v18 = &v23;
    uint64_t v16 = v20;
    uint64_t v17 = v13;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
  }
  objc_msgSend(v16, "_findEndpointContainingGroupID:andDeviceID:requestID:completion:", v17, v14, v15, v18, v23, v24, v25, v26);
}

void sub_10008AC44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) originForward];
  [v2 end];

  id v3 = objc_alloc((Class)MRPlayerPath);
  id v4 = +[MROrigin localOrigin];
  id v5 = [v3 initWithOrigin:v4 client:0 player:0];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008ACF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  unsigned int v7 = [v5 findEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10008AD8C(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_10008AD98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    id v4 = [*(id *)(a1 + 40) removeLocalDevice];
    [v4 start];

    id v5 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    id v6 = +[NSArray arrayWithObjects:&v14 count:1];
    uint64_t v7 = *(void *)(a1 + 56);
    qos_class_t v8 = qos_class_self();
    uint64_t v9 = dispatch_get_global_queue(v8, 0);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008AF30;
    v11[3] = &unk_100419708;
    id v12 = *(id *)(a1 + 40);
    id v13 = v3;
    [v5 removeOutputDevices:v6 initiator:v7 withCallbackQueue:v9 block:v11];
  }
  else
  {
    id v10 = [objc_alloc((Class)NSError) initWithMRError:39 description:@"Failed to remove local device from existing context"];
    (*((void (**)(id, id))v3 + 2))(v3, v10);
  }
}

uint64_t sub_10008AF30(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) removeLocalDevice];
  [v4 endWithError:a2];

  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v5();
}

void sub_10008AF98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    id v4 = +[MRDAVOutputContextManager sharedManager];
    id v5 = [v4 outputContextForOutputDeviceUID:*(void *)(a1 + 40)];

    if (v5)
    {
      id v6 = [*(id *)(a1 + 48) addLocalDevice];
      [v6 start];

      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v7 = +[NSArray arrayWithObjects:&v15 count:1];
      uint64_t v8 = *(void *)(a1 + 56);
      qos_class_t v9 = qos_class_self();
      id v10 = dispatch_get_global_queue(v9, 0);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10008B194;
      v12[3] = &unk_100419708;
      id v13 = *(id *)(a1 + 48);
      id v14 = v3;
      [v5 setOutputDevices:v7 initiator:v8 withCallbackQueue:v10 block:v12];
    }
    else
    {
      id v11 = [objc_alloc((Class)NSError) initWithMRError:32 description:@"Failed to reserve output context for local device"];
      (*((void (**)(id, id))v3 + 2))(v3, v11);
    }
  }
  else
  {
    id v5 = [objc_alloc((Class)NSError) initWithMRError:39 description:@"Failed to find local device from existing context"];
    (*((void (**)(id, id))v3 + 2))(v3, v5);
  }
}

uint64_t sub_10008B194(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) addLocalDevice];
  [v4 endWithError:a2];

  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v5();
}

void sub_10008B1FC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v10 = a2;
  id v4 = [v3 reloadDeviceInfo];
  [v4 start];

  id v5 = +[MRDMediaRemoteServer server];
  id v6 = [v5 nowPlayingServer];
  uint64_t v7 = [v6 localOriginClient];
  uint64_t v8 = [v7 deviceInfoDataSource];
  [v8 reloadDeviceInfoImmediately];

  qos_class_t v9 = [*(id *)(a1 + 32) reloadDeviceInfo];
  [v9 end];

  v10[2](v10, 0);
}

void sub_10008B2E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v4 = [objc_alloc((Class)NSError) initWithMRError:32 description:@"Failed prepare outputContext for nowPlayingSession"];
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v4);
  }
  else
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

void sub_10008BC78(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v8 = _MRLogForCategory();
  qos_class_t v9 = v8;
  if (v5 && !v6)
  {
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v10) {
        goto LABEL_22;
      }
      uint64_t v12 = a1[5];
      uint64_t v11 = a1[6];
      uint64_t v13 = a1[4];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544386;
      uint64_t v37 = v12;
      __int16 v38 = 2114;
      uint64_t v39 = v11;
      __int16 v40 = 2112;
      id v41 = v5;
      __int16 v42 = 2114;
      uint64_t v43 = v13;
      __int16 v44 = 2048;
      uint64_t v45 = v15;
      uint64_t v16 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v17 = v9;
      uint32_t v18 = 52;
      goto LABEL_16;
    }
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v29 = a1[5];
    uint64_t v30 = a1[6];
    id v14 = +[NSDate date];
    [v14 timeIntervalSinceDate:a1[7]];
    int v36 = 138544130;
    uint64_t v37 = v29;
    __int16 v38 = 2114;
    uint64_t v39 = v30;
    __int16 v40 = 2112;
    id v41 = v5;
    __int16 v42 = 2048;
    uint64_t v43 = v31;
    uint64_t v16 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_15;
  }
  if (v6)
  {
    BOOL v19 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v19) {
        goto LABEL_22;
      }
      uint64_t v21 = a1[5];
      uint64_t v20 = a1[6];
      uint64_t v22 = a1[4];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544386;
      uint64_t v37 = v21;
      __int16 v38 = 2114;
      uint64_t v39 = v20;
      __int16 v40 = 2114;
      id v41 = v6;
      __int16 v42 = 2114;
      uint64_t v43 = v22;
      __int16 v44 = 2048;
      uint64_t v45 = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v36, 0x34u);
      goto LABEL_17;
    }
    if (v19) {
      sub_10032C92C((uint64_t)a1);
    }
  }
  else
  {
    BOOL v24 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v24) {
        goto LABEL_22;
      }
      uint64_t v26 = a1[5];
      uint64_t v25 = a1[6];
      id v27 = (void *)a1[4];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138544130;
      uint64_t v37 = v26;
      __int16 v38 = 2114;
      uint64_t v39 = v25;
      __int16 v40 = 2114;
      id v41 = v27;
      __int16 v42 = 2048;
      uint64_t v43 = v28;
      uint64_t v16 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_15:
      uint64_t v17 = v9;
      uint32_t v18 = 42;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v36, v18);
LABEL_17:

      goto LABEL_22;
    }
    if (v24)
    {
      uint64_t v32 = a1[5];
      uint64_t v33 = a1[6];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:a1[7]];
      int v36 = 138543874;
      uint64_t v37 = v32;
      __int16 v38 = 2114;
      uint64_t v39 = v33;
      __int16 v40 = 2048;
      id v41 = v34;
      uint64_t v16 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v17 = v9;
      uint32_t v18 = 32;
      goto LABEL_16;
    }
  }
LABEL_22:

  uint64_t v35 = a1[8];
  if (v35) {
    (*(void (**)(uint64_t, id, id))(v35 + 16))(v35, v5, v6);
  }
}

id sub_10008BFF4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 outputDevices];
  id v5 = objc_msgSend(v4, "mr_first:", &stru_1004197A0);

  if (!v5)
  {
    id v5 = [v3 designatedGroupLeader];
    if ([v5 containsUID:a1[4]]
      && ([v3 outputDevices],
          uint32_t v18 = objc_claimAutoreleasedReturnValue(),
          id v19 = [v18 count],
          v18,
          !v19))
    {
      if (v5) {
        goto LABEL_2;
      }
    }
    else
    {

      id v5 = 0;
    }
LABEL_16:
    id v9 = 0;
    goto LABEL_17;
  }
LABEL_2:
  if (([v5 isAirPlayReceiverSessionActive] & 1) == 0)
  {
    uint64_t v20 = +[MRUserSettings currentSettings];
    unsigned int v21 = [v20 verboseRemoteControlDiscoveryLogging];

    if (v21)
    {
      uint64_t v22 = _MRLogForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = a1[5];
        uint64_t v24 = a1[6];
        id v25 = objc_alloc((Class)NSString);
        uint64_t v26 = [v3 debugName];
        id v27 = [v5 debugName];
        id v28 = [v25 initWithFormat:@"Rejecting endpoint %@ because localDevice %@ isAirPlayReceiverSessionActive=NO", v26, v27];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v31 = v23;
        __int16 v32 = 2114;
        uint64_t v33 = v24;
        __int16 v34 = 2112;
        id v35 = v28;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
    goto LABEL_16;
  }
  id v6 = [v3 outputDevices];
  uint64_t v7 = [v6 firstObject];
  uint64_t v8 = [v7 groupID];

  id v9 = [v8 containsString:a1[7]];
  if ((v9 & 1) == 0)
  {
    BOOL v10 = +[MRUserSettings currentSettings];
    unsigned int v11 = [v10 verboseRemoteControlDiscoveryLogging];

    if (v11)
    {
      uint64_t v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = a1[5];
        uint64_t v14 = a1[6];
        id v15 = objc_alloc((Class)NSString);
        uint64_t v16 = [v3 debugName];
        id v17 = [v15 initWithFormat:@"Rejecting endpoint %@ because endpointGroupID %@ != %@", v16, v8, a1[7]];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v31 = v13;
        __int16 v32 = 2114;
        uint64_t v33 = v14;
        __int16 v34 = 2112;
        id v35 = v17;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
  }

LABEL_17:
  return v9;
}

BOOL sub_10008C314(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isPrimaryLocalDevice];
}

void sub_10008C31C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[NSString stringWithFormat:@"Discovered local device on endpoint: %@", v5];
  uint64_t v8 = _MRLogForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v24 = v9;
    __int16 v25 = 2114;
    uint64_t v26 = v10;
    __int16 v27 = 2112;
    id v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  if (v5)
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    [v11 setObject:*(void *)(a1 + 32) forKeyedSubscript:MREndpointConnectionReasonUserInfoKey];
    [v11 setObject:*(void *)(a1 + 40) forKeyedSubscript:MREndpointConnectionCorrelationIDUserInfoKey];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10008C5B4;
    v20[3] = &unk_1004187A8;
    id v21 = v5;
    id v22 = *(id *)(a1 + 48);
    [v21 connectToExternalDeviceWithUserInfo:v11 completion:v20];

    id v12 = v21;
  }
  else
  {
    id v19 = v6;
    id v11 = v6;
    uint64_t v13 = +[MRDMediaRemoteServer server];
    uint64_t v14 = [v13 routingServer];
    id v15 = [v14 hostedRoutingService];
    uint64_t v16 = [v15 hostedRoutingController];
    id v17 = [v16 discoverySession];
    id v12 = [v17 localEndpointConnection];

    if (!v12)
    {
      id v18 = [objc_alloc((Class)NSError) initWithMRError:131];

      id v11 = v18;
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v6 = v19;
  }
}

void sub_10008C5B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) origin];
    if (v9)
    {
      id v4 = objc_alloc((Class)MRPlayerPath);
      id v5 = [*(id *)(a1 + 32) origin];
      id v6 = [v4 initWithOrigin:v5 client:0 player:0];

      uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v6 = [objc_alloc((Class)NSError) initWithMRError:121 description:@"endpoint connected but then closed immediately after"];
      uint64_t v7 = *(void (**)(void))(v8 + 16);
    }
    v7();
  }
}

void sub_10008C93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C958(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = [v3 data];

  [WeakRetained ingestData:v4];
}

void sub_10008CBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008CC40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008CE94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10008D05C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalDevice])
  {
    id v4 = 0;
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) _exportDescriptorForOutputDevice:v3 endpoint:*(void *)(a1 + 40) remoteControl:1];
  }

  return v4;
}

BOOL sub_10008D448(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 deviceType] == 1;
}

id sub_10008DDBC(id a1, MRDGroupSessionParticipant *a2)
{
  uint64_t v2 = a2;
  if ([(MRDGroupSessionParticipant *)v2 connected])
  {
    id v3 = [(MRDGroupSessionParticipant *)v2 identifier];
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_10008DE18(id a1, MRDGroupSessionParticipant *a2)
{
  uint64_t v2 = a2;
  if ([(MRDGroupSessionParticipant *)v2 connected])
  {
    id v3 = 0;
  }
  else
  {
    id v3 = [(MRDGroupSessionParticipant *)v2 identifier];
  }

  return v3;
}

id sub_10008DE74(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_10008E02C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10008E644(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v15 = [v5 uniqueIdentifier];

    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v8 = _MRLogForCategory();
    BOOL v17 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v27 = *(void *)(a1 + 40);
        uint64_t v26 = *(void *)(a1 + 48);
        id v28 = *(void **)(a1 + 32);
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v39 = 138544130;
        uint64_t v40 = v27;
        __int16 v41 = 2114;
        uint64_t v42 = v26;
        __int16 v43 = 2114;
        id v44 = v28;
        __int16 v45 = 2048;
        uint64_t v46 = v29;
        uint64_t v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v31 = v8;
        uint32_t v32 = 42;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v36 = *(void *)(a1 + 40);
        uint64_t v37 = *(void *)(a1 + 48);
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v39 = 138543874;
        uint64_t v40 = v36;
        __int16 v41 = 2114;
        uint64_t v42 = v37;
        __int16 v43 = 2048;
        id v44 = v38;
        uint64_t v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v31 = v8;
        uint32_t v32 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v39, v32);
      goto LABEL_20;
    }
    if (v16)
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v13 = [v5 uniqueIdentifier];
      uint64_t v20 = *(void *)(a1 + 32);
      id v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v39 = 138544386;
      uint64_t v40 = v18;
      __int16 v41 = 2114;
      uint64_t v42 = v19;
      __int16 v43 = 2112;
      id v44 = v13;
      __int16 v45 = 2114;
      uint64_t v46 = v20;
      __int16 v47 = 2048;
      uint64_t v48 = v22;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v24 = v8;
      uint32_t v25 = 52;
    }
    else
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v33 = *(void *)(a1 + 40);
      uint64_t v34 = *(void *)(a1 + 48);
      uint64_t v13 = [v5 uniqueIdentifier];
      id v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v39 = 138544130;
      uint64_t v40 = v33;
      __int16 v41 = 2114;
      uint64_t v42 = v34;
      __int16 v43 = 2112;
      id v44 = v13;
      __int16 v45 = 2048;
      uint64_t v46 = v35;
      uint64_t v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v24 = v8;
      uint32_t v25 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v39, v25);

    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = _MRLogForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v39 = 138544386;
      uint64_t v40 = v11;
      __int16 v41 = 2114;
      uint64_t v42 = v10;
      __int16 v43 = 2114;
      id v44 = v6;
      __int16 v45 = 2114;
      uint64_t v46 = v12;
      __int16 v47 = 2048;
      uint64_t v48 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v39, 0x34u);
LABEL_20:
    }
  }
  else if (v9)
  {
    sub_10032CA00();
  }
LABEL_21:

  [*(id *)(a1 + 64) trackWithError:v6];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

uint64_t sub_10008EA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10008EA30(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10008EAA8(uint64_t a1)
{
  [*(id *)(a1 + 32) _maybeSendCommandPreviewForOutputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48)];
  uint64_t v2 = +[MRDAVOutputContextManager sharedManager];
  id v3 = [v2 outputContextForOutputDeviceUIDs:*(void *)(a1 + 40) strict:1];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 56) modifyOutputContext];
    [v4 start];

    id v5 = [objc_alloc((Class)MRGroupTopologyModificationRequest) initWithRequestDetails:*(void *)(a1 + 48) type:3 outputDeviceUIDs:*(void *)(a1 + 40)];
    qos_class_t v6 = qos_class_self();
    uint64_t v7 = dispatch_get_global_queue(v6, 0);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10008EC60;
    v10[3] = &unk_1004198F0;
    id v11 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 32);
    id v15 = v8;
    uint64_t v12 = v9;
    id v13 = v3;
    uint64_t v16 = *(void *)(a1 + 72);
    id v14 = *(id *)(a1 + 48);
    [v13 modifyTopologyWithRequest:v5 withReplyQueue:v7 completion:v10];
  }
  else
  {
    id v5 = [objc_alloc((Class)NSError) initWithMRError:32];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_10008EC60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) modifyOutputContext];
  [v4 endWithError:v3];

  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    qos_class_t v6 = objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 28);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 32) searchForGroupUID];
    [v7 start];

    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 48) uniqueIdentifier];
    double v10 = *(double *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10008EDBC;
    v12[3] = &unk_100416B18;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 64);
    [v8 _searchForContextUID:v9 timeout:v11 details:v12 completion:v10];
  }
}

void sub_10008EDBC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = [v5 searchForGroupUID];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008EE50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) searchForBuddy];
  [v4 end];

  if (v3)
  {
    uint64_t v5 = [*(id *)(a1 + 32) createRemoteHostedEndpoint];
    [v5 start];

    id v6 = [v3 groupLeader];
    uint64_t v7 = [v6 uid];
    double v8 = *(double *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008EFA8;
    v11[3] = &unk_100419940;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    +[MRDCreateRemoteHostedEndpointRequest createRemoteHostedEndpointWithGroupLeaderOutputDeviceUID:v7 withOutputDeviceUIDs:v9 timeout:v10 details:v11 completion:v8];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_10008EFA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = [v5 createRemoteHostedEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10008F500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MRLogForCategory();
  id v8 = v7;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10032CACC();
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v10 = [*(id *)(a1 + 40) requestID];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      uint64_t v24 = v10;
      __int16 v25 = 2048;
      id v26 = v17;
      id v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v14 = v8;
      uint32_t v15 = 32;
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) requestID];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544130;
    uint64_t v22 = v9;
    __int16 v23 = 2114;
    uint64_t v24 = v10;
    __int16 v25 = 2112;
    id v26 = v5;
    __int16 v27 = 2048;
    uint64_t v28 = v12;
    id v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v21, v15);
  }
  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v5, v6, v18, v19, v20);
}

void sub_10008F704(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [a2 firstObject];
  uint64_t v10 = [v9 clusterComposition];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10008F83C;
  v13[3] = &unk_100419990;
  id v11 = v7;
  id v14 = v11;
  objc_msgSend(v10, "mr_any:", v13);

  uint64_t v12 = [v9 primaryID];
  [v12 isEqualToString:*(void *)(a1 + 32)];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10008F83C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 groupLeader];
  id v5 = [v3 uid];

  id v6 = [v4 containsUID:v5];
  return v6;
}

void sub_10008FBB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  id v8 = v7;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10032CACC();
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v10 = [*(id *)(a1 + 40) requestID];
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      uint64_t v24 = v10;
      __int16 v25 = 2048;
      id v26 = v17;
      id v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v14 = v8;
      uint32_t v15 = 32;
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) requestID];
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544130;
    uint64_t v22 = v9;
    __int16 v23 = 2114;
    uint64_t v24 = v10;
    __int16 v25 = 2112;
    id v26 = v5;
    __int16 v27 = 2048;
    uint64_t v28 = v12;
    id v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v21, v15);
  }
  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v5, v6, v18, v19, v20);
}

id sub_10008FDB8(uint64_t a1, void *a2)
{
  id v3 = [a2 outputDevices];
  id v4 = [v3 firstObject];
  id v5 = [v4 groupContextID];

  id v6 = [v5 isEqualToString:*(void *)(a1 + 32)];
  return v6;
}

void sub_10008FE28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "mr_errorByEnvelopingWithMRError:", 47);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_10008FFBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009069C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  id v8 = v7;
  if (v5 && !v6)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) requestID];
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v19 = 138544130;
    uint64_t v20 = v9;
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    __int16 v23 = 2112;
    id v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v12;
    id v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, v15);

    goto LABEL_11;
  }
  if (!v6)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v10 = [*(id *)(a1 + 40) requestID];
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v19 = 138543874;
    uint64_t v20 = v16;
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    __int16 v23 = 2048;
    id v24 = v17;
    id v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 32;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10032CACC();
  }
LABEL_11:

  [*(id *)(a1 + 56) trackWithError:v6];
  uint64_t v18 = *(void *)(a1 + 64);
  if (v18) {
    (*(void (**)(uint64_t, id, id, void))(v18 + 16))(v18, v5, v6, *(void *)(a1 + 56));
  }
}

uint64_t sub_1000908B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000908CC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_100090944(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_100090950(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) connectToTransientExternalDevice];
  [v4 endWithError:v3];

  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) createHostedEndpoint];
    [v5 start];

    id v6 = *(void **)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    qos_class_t v8 = qos_class_self();
    uint64_t v9 = dispatch_get_global_queue(v8, 0);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_100090AB8;
    v13[3] = &unk_100419A58;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 64);
    id v14 = v10;
    uint64_t v15 = v11;
    uint64_t v19 = *(void *)(a1 + 80);
    id v16 = v12;
    id v18 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 40);
    [v6 createHostedEndpointWithOutputDeviceUIDs:v7 queue:v9 completion:v13];
  }
}

void sub_100090AB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) createHostedEndpoint];
  [v7 endWithError:v6];

  if (v6 || ([0 isInformational] & 1) != 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    qos_class_t v8 = [*(id *)(a1 + 32) searchForGroupUID];
    [v8 start];

    double v9 = *(double *)(a1 + 72);
    id v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100090C94;
    v16[3] = &unk_100416B18;
    id v17 = *(id *)(a1 + 32);
    id v18 = *(id *)(a1 + 64);
    [v10 _searchForGroupUID:v5 timeout:v11 details:v16 completion:v9];
  }
  dispatch_time_t v12 = dispatch_time(0, 7000000000);
  id v13 = dispatch_get_global_queue(9, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100090D28;
  block[3] = &unk_100415CC8;
  id v15 = *(id *)(a1 + 56);
  dispatch_after(v12, v13, block);
}

void sub_100090C94(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = [v5 searchForGroupUID];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100090D28(uint64_t a1)
{
  return [*(id *)(a1 + 32) disconnect:0];
}

void sub_10009103C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MRLogForCategory();
  id v8 = v7;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10032CACC();
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      id v10 = [*(id *)(a1 + 40) requestID];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      id v24 = v10;
      __int16 v25 = 2048;
      id v26 = v17;
      id v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v14 = v8;
      uint32_t v15 = 32;
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = [*(id *)(a1 + 40) requestID];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544130;
    uint64_t v22 = v9;
    __int16 v23 = 2114;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v5;
    __int16 v27 = 2048;
    uint64_t v28 = v12;
    id v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v21, v15);
  }
  (*(void (**)(void, id, id, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v5, v6, v18, v19, v20);
}

id sub_100091240(uint64_t a1, void *a2)
{
  id v3 = [a2 outputDevices];
  uint64_t v4 = [v3 firstObject];
  id v5 = [v4 groupID];
  id v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  return v6;
}

void sub_1000912AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "mr_errorByEnvelopingWithMRError:", 129);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

id sub_10009133C(void *a1, const char *a2)
{
  uint64_t v4 = *(void *)(v2 + 48);
  return [a1 timeIntervalSinceDate:v4];
}

uint64_t sub_100091354(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void sub_10009184C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100091870(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100091880(uint64_t a1)
{
}

void sub_100091888(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v8 = a2;
  if ([v8 isClusterLeader])
  {
    [*(id *)(a1 + 32) removeObjectAtIndex:a3];
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

BOOL sub_100091910(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 supportsMultiplayer];
}

BOOL sub_100091918(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isPrimaryLocalDevice];
}

uint64_t sub_100091920(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uid];
  uint64_t v4 = [*(id *)(a1 + 32) uid];
  uint64_t v5 = [v3 isEqual:v4] ^ 1;

  return v5;
}

id sub_100091A84(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc((Class)MRAVOutputDeviceDescription);
  uint64_t v4 = [(MRAVOutputDevice *)v2 descriptor];

  id v5 = [v3 initWithDescriptor:v4];

  return v5;
}

id sub_100091B18(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc((Class)MRAVOutputDeviceDescription);
  uint64_t v4 = [(MRAVOutputDevice *)v2 descriptor];

  id v5 = [v3 initWithDescriptor:v4];

  return v5;
}

BOOL sub_100091BAC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

void sub_100091DF4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "_createStereoPairRepresentationFrom:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v1 addObject:v2];
}

BOOL sub_100091FE0(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice] ^ 1;
}

id sub_100092000(id a1, MRAVOutputDevice *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init((Class)_MRAVOutputDeviceDescriptorProtobuf);
  uint64_t v4 = [(MRAVOutputDevice *)v2 uid];
  [v3 setUniqueIdentifier:v4];

  id v5 = [(MRAVOutputDevice *)v2 modelID];
  [v3 setModelID:v5];

  id v6 = [(MRAVOutputDevice *)v2 name];

  [v3 setName:v6];
  [v3 setDeviceType:1];
  [v3 setDeviceSubType:12];

  return v3;
}

uint64_t sub_100092290(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000922A0(uint64_t a1)
{
}

void sub_1000922A8(id a1)
{
  id v4 = +[MRSystemMediaBundles systemMediaBundleIDForBundle:0 type:1];
  id v1 = +[MRSystemMediaBundles systemMediaBundleIDForBundle:2 type:1];
  uint64_t v2 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v1, 0);
  id v3 = (void *)qword_10047E068;
  qword_10047E068 = v2;
}

void sub_100092994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000929D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[BSServiceQuality userInitiated];
  [v3 setServiceQuality:v4];

  id v5 = +[MRDUIControllerConnection serviceInterface];
  [v3 setInterface:v5];

  id v6 = [*(id *)(a1 + 32) client];
  [v3 setInterfaceTarget:v6];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100092BD4;
  v11[3] = &unk_100419C60;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  [v3 setInvalidationHandler:v11];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100092CB8;
  v9[3] = &unk_100419C60;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  [v3 setInterruptionHandler:v9];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100092D98;
  v7[3] = &unk_100419C60;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  [v3 setActivationHandler:v7];
  objc_destroyWeak(&v8);
  objc_destroyWeak(&v10);
  objc_destroyWeak(&v12);
}

void sub_100092BA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100092BD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    id v6 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRUIControllerConnection] <%p> BSServiceConnection invalidate.", (uint8_t *)&v5, 0xCu);
  }

  if (WeakRetained)
  {
    id v3 = [WeakRetained invalidationHandler];
    v3[2]();

    id v4 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;
  }
}

void sub_100092CB8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    int v5 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRUIControllerConnection] <%p> BSServiceConnection interrupt. Re-activating.", (uint8_t *)&v4, 0xCu);
  }

  if (WeakRetained)
  {
    id v3 = [WeakRetained invalidationHandler];
    v3[2]();

    [WeakRetained[2] activate];
  }
}

void sub_100092D98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    id v4 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRUIControllerConnection] <%p> BSServiceConnection activated.", (uint8_t *)&v3, 0xCu);
  }
}

void sub_100092EA0(id a1)
{
  id v5 = +[BSMutableServiceInterface interfaceWithIdentifier:@"com.apple.mediaremoteui.ui-service"];
  id v1 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___MRUIServerProtocol];
  [v5 setServer:v1];

  uint64_t v2 = +[BSObjCProtocol protocolForProtocol:&OBJC_PROTOCOL___MRUIClientProtocol];
  [v5 setClient:v2];

  [v5 setClientMessagingExpectation:0];
  id v3 = [v5 copy];
  id v4 = (void *)qword_10047E070;
  qword_10047E070 = (uint64_t)v3;
}

id sub_100093460(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_1000935B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000936BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10009388C(id *a1, void *a2)
{
  id v3 = a2;
  [a1[4] trackWithError:v3];
  id v4 = [a1[5] notificationQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10009395C;
  v7[3] = &unk_100417A50;
  id v5 = a1[6];
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10009395C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100093974(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v3 = [*(id *)(a1 + 32) pendingCompletions];
  id v4 = [v3 count];

  if (v4)
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032CD10();
    }

    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = MRGroupSessionError;
    CFStringRef v8 = @"Cannot start session while starting/joining is in progress.";
LABEL_9:
    uint64_t v16 = +[NSError msv_errorWithDomain:v7 code:5 debugDescription:v8];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v16);
    goto LABEL_10;
  }
  if (*(void *)(*(void *)v2 + 24))
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10032CC9C(v2, v9, v10, v11, v12, v13, v14, v15);
    }

    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = MRGroupSessionError;
    CFStringRef v8 = @"Cannot start session while already in a session.";
    goto LABEL_9;
  }
  id v17 = +[MRDMusicUserStateCenter sharedCenter];
  uint64_t v16 = [v17 localActiveIdentity];

  if (v16
    && ([v16 displayName], uint64_t v18 = objc_claimAutoreleasedReturnValue(), v18, v18))
  {
    uint64_t v19 = +[NSDate date];
    [*(id *)(a1 + 32) setLastSessionEventDate:v19];
    id v20 = objc_alloc((Class)MRBlockGuard);
    int v21 = +[MRUserSettings currentSettings];
    [v21 groupSessionNearbyGroupCreateTimeout];
    double v23 = v22;
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_100093D08;
    v38[3] = &unk_100415F80;
    id v39 = *(id *)(a1 + 40);
    id v24 = [v20 initWithTimeout:@"NearbyGroupCreate" reason:v38 handler:v23];

    __int16 v25 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100093D74;
    block[3] = &unk_100419D20;
    void block[4] = *(void *)(a1 + 32);
    id v31 = v19;
    id v35 = *(id *)(a1 + 48);
    id v32 = *(id *)(a1 + 40);
    id v33 = v24;
    id v34 = v16;
    char v37 = *(unsigned char *)(a1 + 64);
    id v36 = *(id *)(a1 + 56);
    id v26 = v24;
    id v27 = v19;
    dispatch_async(v25, block);
  }
  else
  {
    uint64_t v28 = _MRLogForCategory();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_10032CC68();
    }

    uint64_t v29 = *(void *)(a1 + 48);
    id v27 = +[NSError msv_errorWithDomain:MRGroupSessionError code:4 debugDescription:@"Cannot host session without identity."];
    (*(void (**)(uint64_t, id))(v29 + 16))(v29, v27);
  }

LABEL_10:
}

void sub_100093D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10032CD44();
  }

  [*(id *)(a1 + 32) trackWithError:v3];
}

void sub_100093D74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) lastSessionEventDate];
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {

    goto LABEL_7;
  }
  id v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if (v5)
  {
LABEL_7:
    id v9 = [*(id *)(a1 + 48) nearbyGroup];
    [v9 start];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_100093F6C;
    v13[3] = &unk_100419D48;
    id v14 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    id v15 = v10;
    uint64_t v16 = v11;
    id v17 = v12;
    id v18 = *(id *)(a1 + 64);
    char v21 = *(unsigned char *)(a1 + 88);
    id v20 = *(id *)(a1 + 80);
    +[MRDNearbyGroup createWithCompletion:v13];

    CFStringRef v8 = v14;
    goto LABEL_8;
  }
  uint64_t v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] New session event occurred after generating metadata.", buf, 2u);
  }

  uint64_t v7 = *(void *)(a1 + 72);
  CFStringRef v8 = +[NSError msv_errorWithDomain:MRGroupSessionError code:13 debugDescription:@"Implicitly cancelled due to new session request"];
  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
LABEL_8:
}

void sub_100093F6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032CDAC();
    }

    [*(id *)(a1 + 32) trackWithError:v6];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    if (([*(id *)(a1 + 40) disarm] & 1) == 0)
    {
      CFStringRef v8 = _MRLogForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10032CD78();
      }
    }
    id v9 = [*(id *)(a1 + 32) nearbyGroup];
    [v9 end];

    id v10 = [*(id *)(a1 + 48) queue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100094144;
    v12[3] = &unk_100419D20;
    uint64_t v11 = *(void **)(a1 + 56);
    void v12[4] = *(void *)(a1 + 48);
    id v13 = v11;
    id v17 = *(id *)(a1 + 72);
    id v14 = v5;
    id v15 = *(id *)(a1 + 32);
    id v16 = *(id *)(a1 + 64);
    char v19 = *(unsigned char *)(a1 + 88);
    id v18 = *(id *)(a1 + 80);
    dispatch_async(v10, v12);
  }
}

void sub_100094144(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) lastSessionEventDate];
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {
  }
  else
  {
    id v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      id v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] New session event occurred after generating nearby group.", buf, 2u);
      }

      uint64_t v7 = *(void *)(a1 + 72);
      CFStringRef v8 = +[NSError msv_errorWithDomain:MRGroupSessionError code:13 debugDescription:@"Implicitly cancelled due to new session request"];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
      goto LABEL_10;
    }
  }
  id v9 = _MRLogForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Generated MRDNearbyGroup: %{public}@.", buf, 0xCu);
  }

  id v11 = objc_alloc((Class)MRBlockGuard);
  uint64_t v12 = +[MRUserSettings currentSettings];
  [v12 groupSessionNearbyInvitationCreateTimeout];
  double v14 = v13;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000944AC;
  v32[3] = &unk_100415F80;
  id v33 = *(id *)(a1 + 56);
  id v15 = [v11 initWithTimeout:@"NearbyInvitationCreate" reason:v32 handler:v14];

  id v16 = [*(id *)(a1 + 56) nearbyInvitation];
  [v16 start];

  uint64_t v17 = *(void *)(a1 + 48);
  id v18 = [*(id *)(a1 + 64) displayName];
  uint64_t v19 = *(unsigned __int8 *)(a1 + 88);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100094518;
  v23[3] = &unk_100419CF8;
  id v24 = *(id *)(a1 + 56);
  id v30 = *(id *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 32);
  char v21 = *(void **)(a1 + 40);
  id v25 = v15;
  uint64_t v26 = v20;
  id v27 = v21;
  id v28 = *(id *)(a1 + 48);
  id v29 = *(id *)(a1 + 64);
  id v31 = *(id *)(a1 + 80);
  id v22 = v15;
  +[MRDNearbyInvitation createWithNearbyGroup:v17 displayName:v18 routeType:v19 completion:v23];

  CFStringRef v8 = v33;
LABEL_10:
}

void sub_1000944AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10032CD44();
  }

  [*(id *)(a1 + 32) trackWithError:v3];
}

void sub_100094518(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032CE48();
    }

    [*(id *)(a1 + 32) trackWithError:v6];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    if (([*(id *)(a1 + 40) disarm] & 1) == 0)
    {
      CFStringRef v8 = _MRLogForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10032CE14();
      }
    }
    id v9 = [*(id *)(a1 + 32) nearbyInvitation];
    [v9 end];

    uint64_t v10 = [*(id *)(a1 + 48) queue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000946FC;
    v12[3] = &unk_100419CD0;
    id v11 = *(void **)(a1 + 56);
    void v12[4] = *(void *)(a1 + 48);
    id v13 = v11;
    id v18 = *(id *)(a1 + 80);
    id v14 = v5;
    id v15 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 88);
    dispatch_async(v10, v12);
  }
}

void sub_1000946FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) lastSessionEventDate];
  id v3 = *(id *)(a1 + 40);
  if (v2 == v3)
  {
  }
  else
  {
    id v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      id v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] New session event occurred after creating nearby invitation.", (uint8_t *)&v20, 2u);
      }

      uint64_t v7 = *(void *)(a1 + 80);
      CFStringRef v8 = +[NSError msv_errorWithDomain:MRGroupSessionError code:13 debugDescription:@"Implicitly cancelled due to new session request"];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
      goto LABEL_12;
    }
  }
  id v9 = _MRLogForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void **)(a1 + 48);
    int v20 = 138543362;
    char v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Generated MRDNearbyInvitation: %{public}@.", (uint8_t *)&v20, 0xCu);
  }

  CFStringRef v8 = +[MRDGroupSessionProvider createRemoteControlSessionWithNearbyGroup:*(void *)(a1 + 56) nearbyInvitation:*(void *)(a1 + 48) identity:*(void *)(a1 + 64)];
  [*(id *)(a1 + 72) track];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), v8);
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 64);
  *(void *)(v12 + 64) = v11;

  id v14 = _MRLogForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    id v15 = [v8 joinToken];
    id v16 = [v15 joinURLString];
    int v20 = 138412290;
    char v21 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Generated join URL: %@", (uint8_t *)&v20, 0xCu);
  }
  id v17 = [*(id *)(a1 + 32) pendingCompletions];
  id v18 = objc_retainBlock(*(id *)(a1 + 88));
  id v19 = [v8 identifier];
  [v17 setObject:v18 forKey:v19];

  [v8 addObserver:*(void *)(a1 + 32)];
  [v8 start];
  [*(id *)(a1 + 32) reevaluateDiscoveryMode];
LABEL_12:
}

void sub_100094B5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = objc_alloc_init((Class)MRAVLightweightReconnaissanceSession);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100094D0C;
    v17[3] = &qword_1004199E0;
    id v18 = v5;
    uint64_t v7 = +[MRUserSettings currentSettings];
    [v7 groupSessionEndpointDiscoveryInterval];
    double v9 = v8;
    uint64_t v10 = MRGroupSessionSubsystemGetQueue();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100094D80;
    v12[3] = &unk_100419D98;
    id v13 = v6;
    id v16 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 32);
    id v15 = v18;
    id v11 = v6;
    [v11 searchEndpointsWithPredicate:v17 timeout:@"MRGroupSession.waitForGroupSessionEndpoint" reason:v10 queue:v12 completion:v9];
  }
}

id sub_100094D0C(uint64_t a1, void *a2)
{
  id v3 = [a2 groupSessionInfo];
  id v4 = [v3 identifier];
  id v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_100094D80(uint64_t a1, void *a2, uint64_t a3)
{
  id v15 = a2;
  id v5 = *(id *)(a1 + 32);
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = +[NSError msv_errorWithDomain:MRGroupSessionError code:1 underlyingError:a3 debugDescription:@"waitForGroupSessionEndpoint timeout"];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    double v8 = [*(id *)(a1 + 40) sharedSecret];

    if (!v8)
    {
      double v9 = [v15 groupLeader];
      uint64_t v10 = [v9 uid];

      id v11 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:v10 reason:@"MRGroupSession.joined"];
      uint64_t v12 = +[MRDMediaRemoteServer server];
      id v13 = [v12 routingServer];
      id v14 = [v13 systemEndpointController];
      [v14 updateSystemEndpointForRequest:v11];
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1000950E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) notificationQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000951A8;
  v7[3] = &unk_100417A50;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1000951A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1000951C0(id *a1)
{
  id v2 = a1[4];
  id v16 = 0;
  unsigned __int8 v3 = [v2 checkCanJoinGroupSessionWithError:&v16];
  id v4 = v16;
  if (v3)
  {
    id v5 = +[NSDate date];
    [a1[4] setLastSessionEventDate:v5];
    [a1[4] cleanupExistingSessionIfNeeded];
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Fetch identity.", buf, 2u);
    }

    id v7 = a1[4];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10009537C;
    v10[3] = &unk_100419E38;
    void v10[4] = v7;
    id v13 = a1[6];
    id v11 = v5;
    id v12 = a1[5];
    id v14 = a1[7];
    id v8 = v5;
    [v7 fetchUserIdentity:v10];
  }
  else
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10032CF80();
    }

    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_10009537C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] queue];
  dispatch_assert_queue_V2(v7);

  if (!v6)
  {
    id v9 = +[MRDMusicUserStateCenter sharedCenter];
    uint64_t v10 = [v9 localActiveUserState];

    if ([v10 isMinor])
    {
      id v11 = (void (**)(id, void *))a1[7];
      uint64_t v12 = MRGroupSessionError;
      CFStringRef v13 = @"User is minor.";
      uint64_t v14 = 16;
LABEL_12:
      int v20 = +[NSError msv_errorWithDomain:v12 code:v14 debugDescription:v13];
      v11[2](v11, v20);
LABEL_25:

      goto LABEL_26;
    }
    id v15 = [a1[4] lastSessionEventDate];
    id v16 = a1[5];
    if (v15 == v16)
    {
    }
    else
    {
      id v17 = v16;
      unsigned __int8 v18 = [v15 isEqual:v16];

      if ((v18 & 1) == 0)
      {
        id v19 = _MRLogForCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] New session event occurred after fetching identity.", buf, 2u);
        }

        id v11 = (void (**)(id, void *))a1[7];
        uint64_t v12 = MRGroupSessionError;
        CFStringRef v13 = @"Implicitly cancelled due to new session request";
        uint64_t v14 = 13;
        goto LABEL_12;
      }
    }
    char v21 = [a1[6] discoveredSession];
    int v20 = [v21 identifier];

    id v22 = [a1[4] listenerForSessionWithIdentifier:v20];
    double v23 = _MRLogForCategory();
    id v24 = v23;
    if (v22)
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v36 = v5;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Will join as: %{public}@", buf, 0xCu);
      }

      [a1[4] dismissAllDiscoveredSessions];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100095798;
      v30[3] = &unk_100419E10;
      void v30[4] = a1[4];
      id v33 = a1[7];
      id v31 = a1[5];
      id v32 = a1[6];
      id v34 = a1[8];
      id v25 = objc_retainBlock(v30);
      if (v20)
      {
        id v26 = a1[4];
        id v27 = [a1[6] discoveredSession];
        [v26 acknowledgeSession:v27];

        [v22 requestToJoinDiscoveredSession:v20 completion:v25];
      }
      else
      {
        [v22 requestToJoinSession:a1[6] completion:v25];
      }
    }
    else
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10032CFE8();
      }

      id v28 = (void (**)(id, void *))a1[7];
      id v29 = +[NSError msv_errorWithDomain:MRGroupSessionError code:9 debugDescription:@"No listener available to join session"];
      v28[2](v28, v29);
    }
    goto LABEL_25;
  }
  id v8 = _MRLogForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10032D01C();
  }

  (*((void (**)(void))a1[7] + 2))();
LABEL_26:
}

void sub_100095798(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000958C0;
  block[3] = &unk_100419DE8;
  id v14 = v5;
  id v15 = v6;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 40);
  id v19 = v8;
  uint64_t v16 = v9;
  id v17 = v10;
  id v18 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 64);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v7, block);
}

void sub_1000958C0(uint64_t a1)
{
  if (!*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    id v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10032D084(a1, v2, v3, v4, v5, v6, v7, v8);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    return;
  }
  id v9 = [*(id *)(a1 + 48) lastSessionEventDate];
  id v10 = *(id *)(a1 + 56);
  if (v9 == v10)
  {
  }
  else
  {
    id v11 = v10;
    unsigned __int8 v12 = [v9 isEqual:v10];

    if ((v12 & 1) == 0)
    {
      CFStringRef v13 = _MRLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v24) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] New session event occurred after requesting to join with token.", (uint8_t *)&v24, 2u);
      }

      uint64_t v14 = *(void *)(a1 + 72);
      id v15 = +[NSError msv_errorWithDomain:MRGroupSessionError code:13 debugDescription:@"Implicitly cancelled due to new session request"];
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);

      return;
    }
  }
  uint64_t v16 = _MRLogForCategory();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    id v17 = [*(id *)(a1 + 32) sessionIdentifier];
    int v24 = 138543362;
    id v25 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Got invitation response with sessionID: %{public}@. Joining session", (uint8_t *)&v24, 0xCu);
  }
  id v18 = [*(id *)(a1 + 32) joinToken];
  id v19 = v18;
  if (!v18) {
    id v19 = *(void **)(a1 + 64);
  }
  id v20 = v19;

  char v21 = *(void **)(a1 + 48);
  id v22 = [*(id *)(a1 + 32) nearbyGroup];
  double v23 = [*(id *)(a1 + 32) publicSigningKeyData];
  [v21 joinGroupSessionWithNearbyGroup:v22 hostSigningKey:v23 joinToken:v20 completion:*(void *)(a1 + 80)];
}

void sub_100095C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100095C4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100095C5C(uint64_t a1)
{
}

void sub_100095C64(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) nearbyInvitation];
  [v2 markAsUsed];

  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 72) assertPublicAdvertisement];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  ++*(void *)(*(void *)(a1 + 32) + 200);
}

uint64_t sub_100095D5C(uint64_t result)
{
  return result;
}

void sub_100095E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100095E48(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 200) > 0;
  return result;
}

void sub_1000960B4(id *a1)
{
  id v2 = [*((id *)a1[4] + 2) copy];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10009627C;
  v13[3] = &unk_100419E60;
  id v14 = a1[5];
  uint64_t v3 = objc_msgSend(v2, "msv_firstWhere:", v13);
  if (v3)
  {
    uint64_t v4 = [a1[6] objectForKeyedSubscript:MRGroupSessionEventOptionLaunchInBackground];
    char v5 = [v4 BOOLValue] ^ 1;

    uint64_t v6 = [a1[4] notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000962D4;
    block[3] = &unk_100419E88;
    void block[4] = a1[4];
    id v10 = v3;
    char v12 = v5;
    id v11 = a1[7];
    dispatch_async(v6, block);
  }
  else
  {
    uint64_t v7 = (void (**)(id, void *))a1[7];
    uint64_t v8 = +[NSError msv_errorWithDomain:MRGroupSessionError code:2 debugDescription:@"No discovered session found for identifier."];
    v7[2](v7, v8);
  }
}

uint64_t sub_10009627C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  uint64_t v4 = v3;
  if (v3 == *(void **)(a1 + 32)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (uint64_t)objc_msgSend(v3, "isEqual:");
  }

  return v5;
}

void sub_1000962D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uiManager];
  [v2 openMusicForDiscoveredSession:*(void *)(a1 + 40) foreground:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
}

void sub_10009671C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError msv_errorWithDomain:MRGroupSessionError code:13 debugDescription:@"Implicitly cancelled due to new join request"];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10009679C(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_msgSend(*(id *)(a1 + 40), "isHosted", (void)v8))
        {
          if (objc_opt_respondsToSelector()) {
            [v7 manager:*(void *)(a1 + 48) didEndHostedGroupSession:*(void *)(a1 + 40)];
          }
        }
        else if (objc_opt_respondsToSelector())
        {
          [v7 manager:*(void *)(a1 + 48) didLeaveRemoteGroupSession:*(void *)(a1 + 40)];
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100096BF4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100096C18(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) disarm])
  {
    id v4 = +[NSNotificationCenter defaultCenter];
    [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

    uint64_t v5 = [*(id *)(a1 + 32) queue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100096D18;
    v6[3] = &unk_100417A50;
    id v8 = *(id *)(a1 + 40);
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100096D18(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100096D30(uint64_t a1)
{
  id v2 = +[MRDMusicUserStateCenter sharedCenter];
  id v7 = [v2 localActiveUserState];

  unsigned int v3 = [v7 identitySupportsCollaboration];
  id v4 = [v7 userIdentity];
  uint64_t v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && [v4 type] == (id)1) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100096DE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError msv_errorWithDomain:MRGroupSessionError code:4 debugDescription:@"No resolvable identity available."];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_100096E68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009714C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) notificationQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100097210;
  v7[3] = &unk_100417A50;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100097210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100097328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100097340(uint64_t a1)
{
  id v2 = +[MRDMusicUserStateCenter sharedCenter];
  id v3 = [v2 localActiveUserState];

  if (([v3 groupSessionsSupportedForAccountRegion] & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    CFStringRef v12 = @"Feature not available in account region.";
    uint64_t v13 = 17;
LABEL_8:
    uint64_t v14 = +[NSError msv_errorWithDomain:v11 code:v13 debugDescription:v12];
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v10 = 0;
    goto LABEL_9;
  }
  id v4 = [*(id *)(a1 + 32) eligibilityMonitor];
  id v5 = [v4 eligibilityStatus];
  unsigned __int8 v6 = [v5 isManateeEnabled];

  if ((v6 & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    CFStringRef v12 = @"Manatee reported unavailable for current account.";
    uint64_t v13 = 10;
    goto LABEL_8;
  }
  id v7 = [*(id *)(a1 + 32) eligibilityMonitor];
  id v8 = [v7 eligibilityStatus];
  unsigned __int8 v9 = [v8 idsAccountIsValid];

  if ((v9 & 1) == 0)
  {
    uint64_t v11 = MRGroupSessionError;
    CFStringRef v12 = @"No active IDS account for Group Session service";
    uint64_t v13 = 11;
    goto LABEL_8;
  }
  uint64_t v10 = 1;
LABEL_9:

  return v10;
}

void sub_1000975AC(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      unsigned __int8 v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        id v8 = objc_msgSend(*(id *)(a1 + 40), "uiManager", (void)v10);
        unsigned __int8 v9 = [v7 identifier];
        [v8 dismissDiscoveredSession:v9];

        unsigned __int8 v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

id sub_100097E80(uint64_t a1)
{
  [*(id *)(a1 + 32) setAdvertisingPreferenceEnabled:MRGroupSessionNearbyContactDiscoveryEnabled()];
  id v2 = *(void **)(a1 + 32);

  return [v2 reevaluateAdvertisement];
}

void sub_100098300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100098324(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Removing acknowledgement for session: %{public}@", (uint8_t *)&v5, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained resetAcknowledgementForSessionIdentifier:*(void *)(a1 + 32)];
}

void sub_100098600(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        id v8 = objc_msgSend(*(id *)(a1 + 40), "uiManager", (void)v10);
        unsigned __int8 v9 = [v7 identifier];
        [v8 dismissDiscoveredSession:v9];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100098728(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(*(void *)(a1 + 32) + 16)];
  }
}

void sub_100098A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098A44(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = +[MRDMediaRemoteServer server];
    id v4 = [v3 nowPlayingServer];
    uint64_t v5 = +[MROrigin localOrigin];
    uint64_t v6 = [v4 originClientForOrigin:v5];
    id v7 = [v6 activeNowPlayingClient];
    id v8 = [v7 activePlayerClient];

    [v8 timeSincePlaying];
    double v10 = v9;
    if (v9 >= *(double *)(a1 + 40))
    {
      long long v11 = _MRLogForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 134217984;
        double v13 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Ending session because: No playback in session for: %.2f seconds", (uint8_t *)&v12, 0xCu);
      }

      [WeakRetained[3] removeAllParticipants];
    }
  }
}

void sub_100098EEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2 == 4 || v2 == 2)
  {
    id v4 = [*(id *)(a1 + 32) pendingCompletions];
    uint64_t v5 = [*(id *)(a1 + 40) identifier];
    id v8 = [v4 objectForKey:v5];

    uint64_t v6 = [*(id *)(a1 + 32) pendingCompletions];
    id v7 = [*(id *)(a1 + 40) identifier];
    [v6 removeObjectForKey:v7];
  }
  else
  {
    id v8 = 0;
  }
  double v9 = (id *)(a1 + 40);
  id v10 = *(id *)(*(void *)(a1 + 32) + 24);
  id v11 = *(id *)(a1 + 40);
  if (v10 == v11)
  {

LABEL_14:
    uint64_t v18 = *(void *)(a1 + 48);
    switch(v18)
    {
      case 4:
        if ([*v9 isHosted])
        {
          id v27 = [*(id *)(a1 + 32) advertiser];
          [v27 setActiveSession:0 identity:0];

          [*(id *)(a1 + 32) reevaluateAdvertisement];
        }
        id v28 = [*(id *)(a1 + 32) observers];
        id v29 = [v28 allObjects];

        id v30 = [*(id *)(a1 + 32) notificationQueue];
        id v44 = _NSConcreteStackBlock;
        uint64_t v45 = 3221225472;
        uint64_t v46 = sub_100099764;
        __int16 v47 = &unk_100419F78;
        id v51 = v8;
        id v48 = v29;
        id v31 = *(id *)(a1 + 40);
        uint64_t v32 = *(void *)(a1 + 32);
        id v49 = v31;
        uint64_t v50 = v32;
        id v17 = v29;
        dispatch_async(v30, &v44);

        uint64_t v33 = *(void *)(a1 + 32);
        id v34 = *(void **)(v33 + 24);
        *(void *)(v33 + 24) = 0;

        id v35 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v36 = *(void *)(a1 + 32);
        char v37 = *(void **)(v36 + 64);
        *(void *)(v36 + 64) = v35;

        *(unsigned char *)(*(void *)(a1 + 32) + 11) = 0;
        objc_msgSend(*(id *)(a1 + 32), "reevaluatePlaybackState", v44, v45, v46, v47);
        [*(id *)(a1 + 32) reevaluateDiscoveryMode];

        id v26 = v51;
        break;
      case 3:
        __int16 v38 = [*(id *)(a1 + 32) observers];
        id v39 = [v38 allObjects];

        uint64_t v40 = [*(id *)(a1 + 32) notificationQueue];
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_100099644;
        v52[3] = &unk_1004159B8;
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v42 = *(void **)(a1 + 40);
        CFStringRef v53 = v39;
        uint64_t v54 = v41;
        id v55 = v42;
        id v17 = v39;
        dispatch_async(v40, v52);

        id v26 = v53;
        break;
      case 2:
        if (!v8)
        {
          id v17 = _MRLogForCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            id v43 = *v9;
            *(_DWORD *)long long buf = 138543362;
            id v63 = v43;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] No completion for session in state .joined: %{public}@.", buf, 0xCu);
          }
          goto LABEL_26;
        }
        if ([*v9 isHosted])
        {
          id v19 = [*(id *)(a1 + 32) advertiser];
          id v20 = *(void **)(a1 + 40);
          char v21 = [v20 localIdentity];
          [v19 setActiveSession:v20 identity:v21];

          [*(id *)(a1 + 32) reevaluateAdvertisement];
        }
        id v22 = [*(id *)(a1 + 32) observers];
        double v23 = [v22 allObjects];

        int v24 = [*(id *)(a1 + 32) notificationQueue];
        v56[0] = _NSConcreteStackBlock;
        v56[1] = 3221225472;
        v56[2] = sub_1000994BC;
        v56[3] = &unk_100418320;
        id v25 = *(void **)(a1 + 40);
        v56[4] = *(void *)(a1 + 32);
        id v57 = v25;
        id v58 = v23;
        id v59 = v8;
        id v17 = v23;
        dispatch_async(v24, v56);

        id v26 = v57;
        break;
      default:
        goto LABEL_27;
    }

    goto LABEL_26;
  }
  int v12 = v11;
  id v13 = v10;
  unsigned __int8 v14 = [v13 isEqual:v12];

  if (v14) {
    goto LABEL_14;
  }
  uint64_t v15 = _MRLogForCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
    sub_10032D1C4((uint64_t *)(a1 + 40), v15);
  }

  if (v8)
  {
    uint64_t v16 = [*(id *)(a1 + 32) notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009943C;
    block[3] = &unk_100416938;
    __int16 v61 = v8;
    dispatch_async(v16, block);

    id v17 = v61;
LABEL_26:
  }
LABEL_27:
}

void sub_10009943C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError msv_errorWithDomain:MRGroupSessionError code:2 debugDescription:@"Session is untracked."];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000994BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uiManager];
  [v2 beginObservingSession:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 48);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        if (objc_msgSend(*(id *)(a1 + 40), "isHosted", (void)v9))
        {
          if (objc_opt_respondsToSelector()) {
            [v8 manager:*(void *)(a1 + 32) didStartHostedGroupSession:*(void *)(a1 + 40)];
          }
        }
        else if (objc_opt_respondsToSelector())
        {
          [v8 manager:*(void *)(a1 + 32) didJoinRemoteGroupSession:*(void *)(a1 + 40)];
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_100099644(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v7, "manager:activeSessionDidChange:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100099764(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    id v9 = +[NSError msv_errorWithDomain:MRGroupSessionError code:1 debugDescription:@"Group session invalidated during start."];
    (*(void (**)(uint64_t, void))(v1 + 16))(v1, 0);
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          long long v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
          if ([*(id *)(a1 + 40) isHosted])
          {
            if (objc_opt_respondsToSelector()) {
              [v8 manager:*(void *)(a1 + 48) didEndHostedGroupSession:*(void *)(a1 + 40)];
            }
          }
          else if (objc_opt_respondsToSelector())
          {
            [v8 manager:*(void *)(a1 + 48) didLeaveRemoteGroupSession:*(void *)(a1 + 40)];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }
  }
}

id sub_1000999D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluatePlaybackState];
}

void sub_100099ABC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_100099FEC;
  v53[3] = &unk_100419878;
  v53[4] = *(void *)(a1 + 40);
  id v3 = objc_msgSend(v2, "msv_filter:", v53);
  id v4 = [*(id *)(*(void *)(a1 + 40) + 64) allKeys];
  id v5 = +[NSMutableSet setWithArray:v4];

  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "msv_map:", &stru_100419F98);
  uint64_t v7 = +[NSSet setWithArray:v6];

  uint64_t v36 = (void *)v7;
  [v5 minusSet:v7];
  long long v8 = *(void **)(*(void *)(a1 + 40) + 64);
  id v9 = [v5 allObjects];
  long long v10 = +[NSNull null];
  char v37 = [v8 objectsForKeys:v9 notFoundMarker:v10];

  long long v11 = *(void **)(*(void *)(a1 + 40) + 64);
  long long v12 = [v5 allObjects];
  [v11 removeObjectsForKeys:v12];

  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  obuint64_t j = v3;
  id v13 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v15) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(MRDGroupSessionParticipant **)(*((void *)&v49 + 1) + 8 * i);
        uint64_t v18 = _MRLogForCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v56 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Observed new remote pending participant: %@", buf, 0xCu);
        }

        id v20 = sub_10009A04C(v19, v17);
        char v21 = *(void **)(*(void *)(a1 + 40) + 64);
        id v22 = [(MRDGroupSessionParticipant *)v17 identifier];
        [v21 setObject:v17 forKeyedSubscript:v22];

        double v23 = [*(id *)(a1 + 40) notificationQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10009A0E8;
        block[3] = &unk_1004159B8;
        int v24 = *(void **)(a1 + 48);
        void block[4] = *(void *)(a1 + 40);
        id v47 = v20;
        id v48 = v24;
        id v25 = v20;
        dispatch_async(v23, block);
      }
      id v14 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
    }
    while (v14);
  }

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v38 = v37;
  id v26 = [v38 countByEnumeratingWithState:&v42 objects:v54 count:16];
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = *(void *)v43;
    do
    {
      for (uint64_t j = 0; j != v27; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v43 != v28) {
          objc_enumerationMutation(v38);
        }
        id v30 = *(MRDGroupSessionParticipant **)(*((void *)&v42 + 1) + 8 * (void)j);
        id v31 = _MRLogForCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v56 = v30;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Observed removed remote pending participant: %@", buf, 0xCu);
        }

        uint64_t v32 = *(void **)(*(void *)(a1 + 40) + 64);
        uint64_t v33 = [(MRDGroupSessionParticipant *)v30 identifier];
        [v32 setObject:0 forKeyedSubscript:v33];

        id v34 = [*(id *)(a1 + 40) notificationQueue];
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_10009A318;
        v40[3] = &unk_10041A008;
        uint64_t v35 = *(void *)(a1 + 40);
        v40[5] = v30;
        uint64_t v41 = &stru_100419FB8;
        v40[4] = v35;
        dispatch_async(v34, v40);
      }
      id v27 = [v38 countByEnumeratingWithState:&v42 objects:v54 count:16];
    }
    while (v27);
  }
}

BOOL sub_100099FEC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64);
  id v3 = [a2 identifier];
  id v4 = [v2 objectForKeyedSubscript:v3];
  BOOL v5 = v4 == 0;

  return v5;
}

id sub_10009A044(id a1, MRDGroupSessionParticipant *a2)
{
  return [(MRDGroupSessionParticipant *)a2 identifier];
}

id sub_10009A04C(id a1, MRDGroupSessionParticipant *a2)
{
  id v2 = a2;
  id v3 = [MRDGroupSessionJoinRequest alloc];
  id v4 = [(MRDGroupSessionParticipant *)v2 identifier];
  BOOL v5 = [(MRDGroupSessionParticipant *)v2 identity];

  uint64_t v6 = [(MRDGroupSessionJoinRequest *)v3 initWithIdentifier:v4 identity:v5 oobKeys:&__NSArray0__struct];

  return v6;
}

void sub_10009A0E8(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10009A19C;
  v6[3] = &unk_100419FE0;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  [v3 displayJoinRequest:v7 handler:v6];
}

void sub_10009A19C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] User interacted with remote authorization request: %@", (uint8_t *)&v13, 0xCu);
    }

    uint64_t v5 = +[MRDMediaRemoteServer server];
    uint64_t v6 = [v5 routingServer];
    id v7 = [v6 systemEndpointController];
    id v8 = objc_alloc((Class)MRUpdateActiveSystemEndpointRequest);
    uint64_t v9 = [*(id *)(a1 + 40) joinToken];
    long long v10 = [v9 effectiveIdentifier];
    id v11 = [v8 initWithOutputDeviceUID:v10 reason:@"MRGroupSession.remote-join.WHA"];
    [v7 updateSystemEndpointForRequest:v11];

    long long v12 = [*(id *)(a1 + 48) uiManager];
    [v12 openMusicParticipantManagementWithCompletion:0];
  }
}

void sub_10009A318(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) uiManager];
  id v2 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  [v3 dismissJoinRequest:v2];
}

void sub_10009A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009A5E4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) copy];

  return _objc_release_x1();
}

id sub_10009A714(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateAdvertisement];
}

id sub_10009A800(uint64_t a1)
{
  [*(id *)(a1 + 32) reevaluateAdvertisement];
  id v2 = *(void **)(a1 + 32);

  return [v2 reevaluatePlaybackState];
}

id sub_10009A8C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_10009AA0C(uint64_t a1)
{
  id v8 = *(id *)(*(void *)(a1 + 32) + 32);
  id v2 = *(id *)(a1 + 40);
  if (v8 == v2)
  {
  }
  else
  {
    id v3 = v8;
    unsigned __int8 v4 = [v3 isEqual:v2];

    if ((v4 & 1) == 0)
    {
      uint64_t v5 = _MRLogForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32);
        *(_DWORD *)long long buf = 138543618;
        uint64_t v10 = v7;
        __int16 v11 = 2114;
        uint64_t v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Leader token changed from %{public}@ to %{public}@", buf, 0x16u);
      }

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
      [*(id *)(a1 + 32) reevaluateProxyAdvertisement];
    }
  }
}

id sub_10009ABE8(uint64_t a1)
{
  [*(id *)(a1 + 32) reevaluateAdvertisement];
  id v2 = *(void **)(a1 + 32);

  return [v2 reevaluateProxyAdvertisement];
}

void sub_10009ADA4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  id v8 = [*(id *)(a1 + 32) queue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10009AE98;
  v10[3] = &unk_10041A0C0;
  uint64_t v9 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v9;
  uint64_t v14 = a3;
  char v15 = a2;
  id v12 = *(id *)(a1 + 48);
  char v16 = a4;
  id v13 = *(id *)(a1 + 56);
  dispatch_async(v8, v10);
}

void sub_10009AE98(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uiManager];
  int v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472;
  id v26 = sub_10009B1A8;
  id v27 = &unk_10041A030;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  id v28 = v3;
  uint64_t v29 = v4;
  MRAnalyticsSendEvent();
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Will auto approve request: %{public}@", buf, 0xCu);
    }

    uint64_t v7 = [*(id *)(a1 + 40) identity];
    +[MRDGroupSessionApprovalManager donateApprovedIdentity:v7];

    [*(id *)(a1 + 48) handleApprovedJoinRequest:*(void *)(a1 + 40) isGuest:*(unsigned __int8 *)(a1 + 73)];
    id v8 = [*(id *)(a1 + 32) notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009B2C4;
    block[3] = &unk_100416938;
    id v23 = *(id *)(a1 + 56);
    dispatch_async(v8, block);

    uint64_t v9 = v23;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 48);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 73);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10009B2D8;
    v18[3] = &unk_10041A058;
    v18[4] = *(void *)(a1 + 32);
    id v19 = v2;
    id v20 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 56);
    id v13 = [v10 handleJoinRequest:v11 isGuest:v12 completion:v18];
    uint64_t v14 = [*(id *)(a1 + 32) notificationQueue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10009B428;
    v16[3] = &unk_1004158D8;
    char v15 = *(void **)(a1 + 40);
    void v16[4] = *(void *)(a1 + 32);
    id v17 = v15;
    dispatch_async(v14, v16);

    uint64_t v9 = v19;
  }
}

id sub_10009B1A8(uint64_t a1)
{
  v7[0] = kMREventGroupSessionJoinRequestHasOOBKeysKey;
  id v2 = [*(id *)(a1 + 32) oobKeys];
  id v3 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v2 count] != 0);
  v8[0] = v3;
  v8[1] = &__kCFBooleanFalse;
  v7[1] = kMREventGroupSessionJoinRequestIsProxy;
  v7[2] = kMREventGroupSessionJoinRequestAutoApprovedReasonKey;
  uint64_t v4 = MRDGroupSessionAutoApproveReasonEnum(*(id *)(a1 + 40));
  v8[2] = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];

  return v5;
}

uint64_t sub_10009B2C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009B2D8(id *a1, int a2)
{
  uint64_t v4 = [a1[4] notificationQueue];
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  id v8 = sub_10009B3DC;
  uint64_t v9 = &unk_100419E88;
  id v10 = a1[5];
  id v11 = a1[6];
  id v12 = a1[7];
  char v13 = a2;
  dispatch_async(v4, &v6);

  if (a2)
  {
    uint64_t v5 = objc_msgSend(a1[6], "identity", v6, v7, v8, v9, v10, v11);
    +[MRDGroupSessionApprovalManager donateApprovedIdentity:v5];
  }
}

uint64_t sub_10009B3DC(uint64_t a1)
{
  [*(id *)(a1 + 32) dismissJoinRequest:*(void *)(a1 + 40)];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

id sub_10009B428(uint64_t a1)
{
  return [*(id *)(a1 + 32) displayJoinRequest:*(void *)(a1 + 40) handler:&stru_10041A098];
}

void sub_10009B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10009B88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MRLogForCategory();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [*(id *)(a1 + 32) identifier];
      int v10 = 138412546;
      id v11 = v6;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] %@ - Discovered equivalent WHA endpoint: %@", (uint8_t *)&v10, 0x16u);
    }
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    id v8 = v3;
    uint64_t v5 = *(NSObject **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void **)(a1 + 40);
    int v10 = 138412290;
    id v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Unable to discover endpoint for WHA identifier: %@", (uint8_t *)&v10, 0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

NSDictionary *__cdecl sub_10009B9D4(id a1)
{
  v3[0] = kMREventGroupSessionJoinRequestIsProxy;
  v3[1] = kMREventGroupSessionJoinRequestHasOOBKeysKey;
  v4[0] = &__kCFBooleanTrue;
  v4[1] = &__kCFBooleanFalse;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];

  return (NSDictionary *)v1;
}

void sub_10009BA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v4, 1);
  }
  if (a2 != 1)
  {
    uint64_t v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      id v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] User interacted with proxy authorization request: %@", buf, 0xCu);
    }

    id v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472;
    uint64_t v25 = sub_10009BD84;
    id v26 = &unk_1004158D8;
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v27 = v7;
    uint64_t v28 = v8;
    uint64_t v9 = objc_retainBlock(&v23);
    int v10 = objc_msgSend(*(id *)(a1 + 48), "session", v23, v24, v25, v26);
    id v11 = [v10 identifier];
    __int16 v12 = [*(id *)(a1 + 56) sessionIdentifier];
    unsigned int v13 = [v11 isEqualToString:v12];

    if (v13)
    {
      uint64_t v14 = _MRLogForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        char v15 = [*(id *)(a1 + 32) identifier];
        char v16 = [*(id *)(a1 + 56) sessionIdentifier];
        *(_DWORD *)long long buf = 138412546;
        id v30 = v15;
        __int16 v31 = 2112;
        uint64_t v32 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] %@ - User already joined to session: %@. Short-circuiting request", buf, 0x16u);
      }
    }
    else
    {
      id v17 = *(NSObject **)(a1 + 64);
      dispatch_time_t v18 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 88) * 1000000000.0));
      dispatch_group_wait(v17, v18);
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      id v20 = _MRLogForCategory();
      id v21 = v20;
      if (!v19)
      {
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_10032D2A8(a1, a1 + 56, v21);
        }

        goto LABEL_15;
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = [*(id *)(a1 + 32) identifier];
        *(_DWORD *)long long buf = 138412290;
        id v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] %@ Using equivalent WHA endpoint", buf, 0xCu);
      }
    }
    ((void (*)(void ***))v9[2])(v9);
LABEL_15:
  }
}

void sub_10009BD84(uint64_t a1)
{
  id v2 = +[MRDMediaRemoteServer server];
  id v3 = [v2 routingServer];
  uint64_t v4 = [v3 systemEndpointController];
  id v5 = [objc_alloc((Class)MRUpdateActiveSystemEndpointRequest) initWithOutputDeviceUID:*(void *)(a1 + 32) reason:@"MRGroupSession.proxy.WHA"];
  [v4 updateSystemEndpointForRequest:v5];

  id v6 = [*(id *)(a1 + 40) uiManager];
  [v6 openMusicParticipantManagementWithCompletion:0];
}

void sub_10009BF34(uint64_t a1)
{
  id v2 = +[MRDMusicUserStateCenter sharedCenter];
  id v3 = [v2 localActiveUserState];

  if (([v3 isMinor] & 1) != 0
    || ([v3 groupSessionsSupportedForAccountRegion] & 1) == 0)
  {
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Ignore session listener callback for user.", buf, 2u);
    }
  }
  else
  {
    if (![*(id *)(a1 + 32) source])
    {
      uint64_t v4 = [*(id *)(a1 + 32) hostInfo];
      id v5 = [v4 modelIdentifier];
      unsigned int v6 = [v5 containsString:@"AudioAccessory"];

      if (v6)
      {
        id v7 = _MRLogForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_10032D35C();
        }
        goto LABEL_17;
      }
    }
    [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
    id v7 = [*(id *)(*(void *)(a1 + 40) + 16) copy];
    uint64_t v8 = *(void **)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 32) identifier];
    [v8 cancelAcknowledgeResetTimerForSessionIdentifier:v9];

    int v10 = *(void **)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) identifier];
    LOBYTE(v10) = [v10 shouldNotifyForSessionIdentifier:v11];

    if ((v10 & 1) == 0)
    {
      unsigned int v13 = _MRLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Not displaying discovered session: %{public}@ because it was already acknowledged by the user.", buf, 0xCu);
      }
      goto LABEL_16;
    }
    __int16 v12 = *(void **)(a1 + 40);
    if (v12[3])
    {
      unsigned int v13 = _MRLogForCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Not displaying session %{public}@ because there is an active session.", buf, 0xCu);
      }
LABEL_16:

      goto LABEL_17;
    }
    unsigned __int8 v16 = [v12 automaticSharePlayPreferenceEnabled];
    id v17 = _MRLogForCategory();
    unsigned int v13 = v17;
    if ((v16 & 1) == 0)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138543362;
        uint64_t v31 = v23;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[MRDGroupSessionManager] Not displaying session %{public}@ because automatic SharePlay preference is disabled.", buf, 0xCu);
      }
      goto LABEL_16;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v31 = v18;
      __int16 v32 = 2048;
      uint64_t v33 = v19;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[MRDGroupSessionManager] Displaying UI for discovered session: %{public}@, listener=%p", buf, 0x16u);
    }

    objc_initWeak((id *)buf, *(id *)(a1 + 40));
    id v20 = [*(id *)(a1 + 40) notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009C3EC;
    block[3] = &unk_10041A1A0;
    int8x16_t v24 = *(int8x16_t *)(a1 + 32);
    id v21 = (id)v24.i64[0];
    int8x16_t v28 = vextq_s8(v24, v24, 8uLL);
    objc_copyWeak(&v29, (id *)buf);
    dispatch_async(v20, block);

    id v22 = *(void **)(a1 + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_10009C5A0;
    v25[3] = &unk_10041A1C8;
    v25[4] = v22;
    id v7 = v7;
    id v26 = v7;
    [v22 notifyObserversWithBlock:v25];

    objc_destroyWeak(&v29);
    objc_destroyWeak((id *)buf);
  }
LABEL_17:
}

void sub_10009C3C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10009C3EC(id *a1)
{
  uint64_t v2 = [a1[4] uiManager];
  id v3 = a1[5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10009C4C8;
  v4[3] = &unk_1004182A8;
  objc_copyWeak(&v6, a1 + 6);
  id v5 = a1[5];
  [v2 displayDiscoveredSession:v3 dismissalHandler:v4];

  objc_destroyWeak(&v6);
}

void sub_10009C4B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009C4C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = [WeakRetained queue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10009C594;
    v5[3] = &unk_1004158D8;
    id v6 = v3;
    id v7 = *(id *)(a1 + 32);
    dispatch_async(v4, v5);
  }
}

id sub_10009C594(uint64_t a1)
{
  return [*(id *)(a1 + 32) acknowledgeSession:*(void *)(a1 + 40)];
}

void sub_10009C5A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }
}

void sub_10009C6B4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  id v3 = [*(id *)(a1 + 32) notificationQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009C808;
  block[3] = &unk_1004158D8;
  uint64_t v4 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v12 = v4;
  dispatch_async(v3, block);

  id v5 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) identifier];
  [v5 startAcknowledgeResetTimerForSessionIdentifier:v6];

  id v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10009C874;
  v9[3] = &unk_10041A1C8;
  void v9[4] = v7;
  id v10 = v2;
  id v8 = v2;
  [v7 notifyObserversWithBlock:v9];
}

void sub_10009C808(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) uiManager];
  id v2 = [*(id *)(a1 + 40) identifier];
  [v3 dismissDiscoveredSession:v2];
}

void sub_10009C874(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 manager:*(void *)(a1 + 32) discoveredSessionsDidChange:*(void *)(a1 + 40)];
  }
}

void sub_10009C9D4(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

id sub_10009CB58(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateDiscoveryMode];
}

void sub_10009CC14(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 24) description];
  [*(id *)(a1 + 32) setCurrentGroupSession:v2];

  [*(id *)(a1 + 32) setGroupSessionDiscoveryEnabled:*(void *)(*(void *)(a1 + 40) + 104) != 0];
  id v13 = +[NSMutableArray array];
  id v3 = [*(id *)(a1 + 40) notAdvertisingReason];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 40) notAdvertisingReason];
    uint64_t v5 = +[NSString stringWithFormat:@"Not advertising because: %@", v4];
    [v13 addObject:v5];
  }
  id v6 = [*(id *)(a1 + 40) notProxyAdvertisingReason];

  if (v6)
  {
    long long v7 = [*(id *)(a1 + 40) notProxyAdvertisingReason];
    long long v8 = +[NSString stringWithFormat:@"Not proxy-advertising because: %@", v7];
    [v13 addObject:v8];
  }
  long long v9 = [v13 componentsJoinedByString:@","];
  long long v10 = +[NSString stringWithFormat:@"<%@>", v9];

  [*(id *)(a1 + 32) setGroupSessionManagerAdvertiseReason:v10];
  id v11 = [*(id *)(a1 + 40) advertiser];
  [v11 collectDiagnostic:*(void *)(a1 + 32)];

  id v12 = [*(id *)(a1 + 40) listener];
  [v12 collectDiagnostic:*(void *)(a1 + 32)];
}

void sub_10009D080(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_10009D1A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009D46C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  [*(id *)(*(void *)(a1 + 32) + 8) error];

  id v3 = [*(id *)(*(void *)v2 + 8) error];

  uint64_t v4 = _MRLogForCategory();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032D390(a1, v2, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 40) requestID];
    long long v7 = +[NSDate date];
    [v7 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)long long buf = 138543874;
    CFStringRef v31 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
    __int16 v32 = 2114;
    uint64_t v33 = v6;
    __int16 v34 = 2048;
    uint64_t v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", buf, 0x20u);
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (v9)
  {
    long long v10 = [*(id *)(*(void *)v2 + 8) error];
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  id v11 = MRLogCategoryMigrationOversize();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v12 = *(const __CFString **)(*(void *)v2 + 8);
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v13 = +[NSMutableDictionary dictionary];
  uint64_t v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 56) count]);
  [v13 setObject:v14 forKeyedSubscript:@"requestDeviceCount"];

  uint64_t v15 = [*(id *)(a1 + 40) reason];
  [v13 setObject:v15 forKeyedSubscript:@"source"];

  unsigned __int8 v16 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) endpointsForcedRemoved]);
  [v13 setObject:v16 forKeyedSubscript:@"forceRemovedEndpointCount"];

  id v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) devicesForcedRemoved]);
  [v13 setObject:v17 forKeyedSubscript:@"forceRemoveDeviceCount"];

  uint64_t v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) endpointsRemoved]);
  [v13 setObject:v18 forKeyedSubscript:@"removedEndpointCount"];

  uint64_t v19 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) devicesRemoved]);
  [v13 setObject:v19 forKeyedSubscript:@"removedDeviceCount"];

  id v20 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) devicesPaused]);
  [v13 setObject:v20 forKeyedSubscript:@"pausedDeviceCount"];

  id v21 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) endpointsPaused]);
  [v13 setObject:v21 forKeyedSubscript:@"pausedEndpointCount"];

  id v22 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) appletvsEffected]);
  [v13 setObject:v22 forKeyedSubscript:@"appleTVsAffected"];

  uint64_t v23 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(*(void *)(a1 + 32) + 8) homepodsEffected]);
  [v13 setObject:v23 forKeyedSubscript:@"homepodsAffected"];

  [*(id *)(*(void *)(a1 + 32) + 8) duration];
  int8x16_t v24 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v13 setObject:v24 forKeyedSubscript:@"duration"];

  uint64_t v25 = [*(id *)(*(void *)(a1 + 32) + 8) error];
  if (v25) {
    id v26 = &__kCFBooleanTrue;
  }
  else {
    id v26 = &__kCFBooleanFalse;
  }
  [v13 setObject:v26 forKeyedSubscript:@"success"];

  id v27 = [*(id *)(*(void *)(a1 + 32) + 8) error];
  id v29 = v13;
  id v28 = v13;
  MRAnalyticsSendEvent();
}

id sub_10009D9B0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10009DB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  uint64_t v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 endEvent:@"discover" withError:0];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    obuint64_t j = v5;
    id v9 = [obj countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v9)
    {
      id v10 = v9;
      id v29 = v6;
      id v30 = v5;
      uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
      uint64_t v12 = MREndpointConnectionCorrelationIDUserInfoKey;
      uint64_t v32 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v41 != v32) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          uint64_t v15 = [[MRDPauseOutputDevicesRequestEndpointOperation alloc] initWithEndpoint:v14];
          [*(id *)(*(void *)(a1 + 40) + 8) addOperation:v15];
          id v16 = objc_alloc((Class)NSString);
          id v17 = [v14 debugName];
          id v18 = [v16 initWithFormat:@"Discovered endpoint: %@", v17];

          uint64_t v19 = _MRLogForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            id v20 = [*(id *)(a1 + 48) requestID];
            *(_DWORD *)long long buf = 138543874;
            CFStringRef v45 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
            __int16 v46 = 2114;
            id v47 = v20;
            __int16 v48 = 2112;
            id v49 = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
          }
          dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
          [(MRDPauseOutputDevicesRequestEndpointOperation *)v15 startEvent:@"Connect"];
          id v21 = objc_alloc_init((Class)NSMutableDictionary);
          id v22 = [*(id *)(a1 + 48) reason];
          [v21 setObject:v22 forKeyedSubscript:v11];

          uint64_t v23 = [*(id *)(a1 + 48) requestID];
          [v21 setObject:v23 forKeyedSubscript:v12];

          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472;
          v33[2] = sub_10009DF7C;
          v33[3] = &unk_10041A240;
          __int16 v34 = v15;
          uint64_t v35 = v14;
          id v24 = *(id *)(a1 + 48);
          uint64_t v25 = *(void *)(a1 + 40);
          id v36 = v24;
          uint64_t v37 = v25;
          id v38 = *(id *)(a1 + 64);
          id v39 = *(id *)(a1 + 56);
          id v26 = v15;
          [v14 connectToExternalDeviceWithUserInfo:v21 completion:v33];
        }
        id v10 = [obj countByEnumeratingWithState:&v40 objects:v50 count:16];
      }
      while (v10);
      id v6 = v29;
      id v5 = v30;
    }
  }
  else
  {
    [v8 endEvent:@"discover" withError:v6];
    obuint64_t j = [objc_alloc((Class)NSString) initWithFormat:@"Could not discover any endpoints"];
    id v27 = _MRLogForCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = [*(id *)(a1 + 48) requestID];
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v45 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
      __int16 v46 = 2114;
      id v47 = v28;
      __int16 v48 = 2112;
      id v49 = obj;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10009DF7C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) endEvent:@"Connect" withError:a2];
  id v3 = [*(id *)(a1 + 40) origin];
  if (v3)
  {
    id v4 = objc_alloc((Class)NSString);
    id v5 = [*(id *)(a1 + 40) debugName];
    id v6 = [v4 initWithFormat:@"Connected to endpoint: %@", v5];

    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [*(id *)(a1 + 48) requestID];
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v29 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
      __int16 v30 = 2114;
      CFStringRef v31 = v8;
      __int16 v32 = 2112;
      id v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
    id v9 = +[MRDMediaRemoteServer server];
    id v10 = [v9 nowPlayingServer];
    uint64_t v11 = [v10 originClientForOrigin:v3];

    unsigned int v12 = [v11 isPlaying];
    id v13 = objc_alloc((Class)NSString);
    uint64_t v14 = [*(id *)(a1 + 40) debugName];
    uint64_t v15 = (void *)v14;
    if (v12)
    {
      id v16 = [v13 initWithFormat:@"Endpoint is playing %@", v14];

      id v17 = _MRLogForCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [*(id *)(a1 + 48) requestID];
        *(_DWORD *)long long buf = 138543874;
        CFStringRef v29 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
        __int16 v30 = 2114;
        CFStringRef v31 = v18;
        __int16 v32 = 2112;
        id v33 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
      uint64_t v19 = [*(id *)(a1 + 56) _calculateOperationForEndpoint:*(void *)(a1 + 40) outputDeviceUIDs:*(void *)(a1 + 64)];
      [*(id *)(a1 + 32) setPauseOperation:v19];

      dispatch_group_enter(*(dispatch_group_t *)(a1 + 72));
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 48);
      id v21 = *(void **)(a1 + 56);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10009E33C;
      v26[3] = &unk_100415CC8;
      id v27 = *(id *)(a1 + 72);
      [v21 _performOperation:v20 details:v22 completion:v26];
      id v23 = v27;
    }
    else
    {
      id v23 = [v13 initWithFormat:@"Endpoint is NOT playing %@", v14];

      id v24 = _MRLogForCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = [*(id *)(a1 + 48) requestID];
        *(_DWORD *)long long buf = 138543874;
        CFStringRef v29 = @"MRDPauseOutputDevicesRequest.pauseOutputDeviceUIDs";
        __int16 v30 = 2114;
        CFStringRef v31 = v25;
        __int16 v32 = 2112;
        id v33 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

void sub_10009E33C(uint64_t a1)
{
}

uint64_t sub_10009E440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_10009EA80(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  if ([(MRAVOutputDevice *)v2 isRemoteControllable]) {
    unsigned __int8 v3 = 0;
  }
  else {
    unsigned __int8 v3 = [(MRAVOutputDevice *)v2 canRelayCommunicationChannel];
  }

  return v3;
}

uint64_t sub_10009F31C(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = [a2 error];
  [v3 endEvent:@"pause" withError:v4];

  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v5();
}

uint64_t sub_10009F38C(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = MRGroupTopologyModificationRequestTypeDescription();
  [v3 endEvent:v5 withError:v4];

  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

uint64_t sub_10009F404(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) endEvent:@"removeFromParentGroup" withError:a2];
  unsigned __int8 v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

BOOL sub_10009F454(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isRemoteControllable] ^ 1;
}

uint64_t sub_10009F474(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pauseOperation];
  id v5 = [v4 relevantOutputDeviceUIDs];
  id v6 = [v3 uid];

  uint64_t v7 = [v5 containsObject:v6] ^ 1;
  return v7;
}

void sub_10009F4F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 48))
  {

    id v4 = 0;
  }
  [*(id *)(a1 + 32) endEvent:@"modifyRelayEndpoint" withError:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10009F5F8(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

BOOL sub_10009FA64(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  uint64_t v2 = [(MRDPauseOutputDevicesRequestEndpointOperationEvent *)a2 error];
  BOOL v3 = v2 != 0;

  return v3;
}

id sub_10009FB78(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  return [(MRDPauseOutputDevicesRequestEndpointOperationEvent *)a2 startDate];
}

id sub_10009FB80(id a1, MRDPauseOutputDevicesRequestEndpointOperationEvent *a2)
{
  return [(MRDPauseOutputDevicesRequestEndpointOperationEvent *)a2 endDate];
}

int64_t sub_10009FB88(id a1, NSDate *a2, NSDate *a3)
{
  return [(NSDate *)a2 compare:a3];
}

int64_t sub_10009FB90(id a1, NSDate *a2, NSDate *a3)
{
  return [(NSDate *)a2 compare:a3];
}

void sub_10009FD64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10009FDD0(id a1, MRDPauseOutputDevicesRequestEndpointOperation *a2)
{
  uint64_t v2 = [(MRDPauseOutputDevicesRequestEndpointOperation *)a2 error];
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10009FF74(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(MRAVOutputDevice *)v2 deviceSubtype] == 12
    || [(MRAVOutputDevice *)v2 clusterType] == 1;

  return v3;
}

BOOL sub_1000A0110(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(MRAVOutputDevice *)v2 deviceSubtype] == 13
    || [(MRAVOutputDevice *)v2 clusterType] == 2;

  return v3;
}

void sub_1000A1158(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = v10[5];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000A1254;
  v15[3] = &unk_1004162F8;
  id v16 = v7;
  id v17 = v10;
  id v18 = v8;
  id v19 = v9;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

void sub_1000A1254(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) data];
  if (v2)
  {
    BOOL v3 = [*(id *)(a1 + 32) data];
    id v11 = 0;
    id v4 = +[NSPropertyListSerialization propertyListWithData:v3 options:0 format:0 error:&v11];
    id v5 = v11;
  }
  else
  {
    id v4 = 0;
    id v5 = 0;
  }

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A137C;
  v9[3] = &unk_100419418;
  id v10 = *(id *)(a1 + 32);
  objc_msgSend(v6, "_onWorkerQueue_connectRemoteControlChannelForDestination:session:userInfo:completion:", v7, v8, v4, v9);
}

void sub_1000A137C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 protobufData];
  [v2 replyWithData:v3 priority:300];
}

id sub_1000A13D8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_initializeDiscoveryChannel");
}

id sub_1000A1594(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_connectDiscoveryChannelWithReason:", @"Start");
}

id sub_1000A1640(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectDiscoveryChannel");
}

id sub_1000A1738(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_connectDiscoveryChannelWithReason:", @"IDS Connected");
}

void sub_1000A17BC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectDiscoveryChannel");
  id v2 = [objc_alloc((Class)NSError) initWithMRError:104 description:@"IDSConnection Disconnected"];
  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:", v2);
}

void sub_1000A19F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000A1A04(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(unsigned char *)(*(void *)(a1 + 32) + 49) = 0;
  objc_sync_exit(v2);

  id v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = [v4 discoveryChannel];
  objc_msgSend(v4, "_onWorkerQueue_sendEndpoint:toClient:options:", v3, v5, 0);
}

void sub_1000A1BA8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:104 description:@"MRDIDSCompanionRemoteControlService.setConnectionState"];
  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectAllRemoteControlChannelsWithError:", v2);
}

id sub_1000A1DDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_sendEndpoint:toClient:options:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1000A2280(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.MRDIDSCompanionRemoteControlService.discoveryChannelClientQueue", v3);
  id v2 = (void *)qword_10047E080;
  qword_10047E080 = (uint64_t)v1;
}

void sub_1000A27D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_1000A2818(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000A2904;
    void v7[3] = &unk_1004162F8;
    uint64_t v8 = WeakRetained;
    id v9 = a1[4];
    id v10 = a1[5];
    id v11 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_1000A2904(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 48)];

  if (v3)
  {
    id v9 = [*(id *)(a1 + 56) object];
    id v4 = +[MRIDSCompanionConnection sharedManager];
    id v5 = objc_alloc((Class)MRProtocolMessage);
    id v6 = [v9 error];
    id v7 = [v5 initWithUnderlyingCodableMessage:0 error:v6];
    uint64_t v8 = [v7 protobufData];
    [v4 sendMessage:v8 type:MRIDSServiceMessageTypeDisconnectRemoteControl destination:*(void *)(a1 + 40) session:*(void *)(a1 + 48) options:0 priority:300];
  }
}

void sub_1000A2A30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 groupLeader];
  id v6 = [v4 exportOutputDevice:v5 endpoint:v3];

  if ([v6 containsUID:*(void *)(a1 + 40)])
  {
    id v7 = [*(id *)(a1 + 48) destinationOutputDeviceUID];
    uint64_t v8 = [v3 outputDeviceWithUID:v7];

    if (*(unsigned char *)(a1 + 80) && ([*(id *)(a1 + 48) isDestinationLocal] & 1) == 0) {
      [*(id *)(a1 + 56) _addAuthorizationCallbackForOutputDevice:v8 destination:*(void *)(a1 + 40) session:*(void *)(a1 + 64)];
    }
    id v9 = *(void **)(a1 + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000A2C20;
    v17[3] = &unk_100418E18;
    char v22 = *(unsigned char *)(a1 + 80);
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 56);
    id v18 = v10;
    uint64_t v19 = v11;
    id v20 = v8;
    id v21 = *(id *)(a1 + 72);
    id v12 = v8;
    [v10 requestConnectedDestinationEndpoint:v17];
  }
  else
  {
    id v13 = objc_alloc((Class)NSError);
    id v14 = [v3 debugName];
    id v15 = [v13 initWithMRError:118, @"Tried to connect to endpoint but its groupLeader changed from %@ to %@", v14, *(void *)(a1 + 40) format];

    id v16 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v15];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1000A2C20(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 64) && ([*(id *)(a1 + 32) isDestinationLocal] & 1) == 0) {
    [*(id *)(a1 + 40) _removeAuthorizationCallbackForOutputDevice:*(void *)(a1 + 48)];
  }
  id v6 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v5];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000A2DD4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)MRPromptForRouteAuthorizationMessage) initWithRoute:a1[4] inputType:a2];
  id v7 = +[MRIDSCompanionConnection sharedManager];
  uint64_t v8 = [v6 protobufData];
  uint64_t v9 = MRIDSServiceMessageTypeProtobuf;
  uint64_t v11 = a1[5];
  uint64_t v10 = a1[6];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_1000A2EFC;
  v13[3] = &unk_100418E68;
  id v14 = v5;
  id v12 = v5;
  [v7 sendMessage:v8 type:v9 destination:v11 session:v10 options:0 priority:300 response:v13];
}

void sub_1000A2EFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 data];

  if (v4)
  {
    id v5 = [v3 data];
    uint64_t v9 = 0;
    id v6 = +[MRProtocolMessage protocolMessageWithProtobufData:v5 error:&v9];
    uint64_t v7 = v9;

    uint64_t v8 = 0;
    if (!v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v8 = [v6 response];
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A3138(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MRLogCategoryConnections();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 138412546;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[IDSCompanionRemoteControlService] Disconnecting remoteControlChannel from %@-%@...", (uint8_t *)&v10, 0x16u);
  }

  uint64_t v9 = [v6 connection];

  [v9 closeWithError:*(void *)(a1 + 40)];
}

id sub_1000A32E8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_disconnectRemoteControlChannelsForDestination:error:", a2, *(void *)(a1 + 40));
}

void sub_1000A3FA0(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 120), *(id *)(a1 + 40));
  id v2 = [*(id *)(a1 + 32) deviceInfo];
  [*(id *)(*(void *)(a1 + 32) + 120) setDeviceInfo:v2];
}

void sub_1000A4108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4120(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A4130(uint64_t a1)
{
}

void sub_1000A4138(uint64_t a1)
{
}

void *sub_1000A41F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 128))
  {
    id v3 = +[MRDMediaRemoteServer server];
    id v4 = [v3 nowPlayingServer];
    [v4 unregisterOrigin:*(void *)(*(void *)(a1 + 32) + 128)];

    uint64_t v2 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v2 + 128), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (result[16])
  {
    return _objc_msgSend(result, "_onSerialQueue_registerOriginCallbacks");
  }
  return result;
}

void sub_1000A4398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A43B0(uint64_t a1)
{
}

id sub_1000A4470(uint64_t a1)
{
  uint64_t v2 = +[NSBundle mainBundle];
  id v3 = [v2 bundleIdentifier];
  [*(id *)(a1 + 32) setLinkAgent:v3];

  if ([*(id *)(a1 + 32) isCompanion])
  {
    id v4 = [*(id *)(a1 + 32) WHAIdentifier];
    [*(id *)(a1 + 32) setDeviceUID:v4];
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 136), *(id *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(*(void *)(a1 + 40) + 120);

  return [v6 setDeviceInfo:v5];
}

void sub_1000A4674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A468C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_deviceInfo");

  return _objc_release_x1();
}

void sub_1000A47D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A47F0(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 40);
  return result;
}

void sub_1000A4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A4918(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(void *)(a1 + 32) + 40);
  *(_DWORD *)(*(void *)(a1 + 32) + 40) = *(_DWORD *)(a1 + 56);
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)MRExternalDeviceConnectionStateCopyDescription();
    id v5 = v4;
    id v6 = (void *)MRExternalDeviceConnectionStateCopyDescription();
    [*(id *)(*(void *)(a1 + 32) + 32) timeIntervalSinceNow];
    double v8 = v7;

    int v12 = 138544130;
    uint64_t v13 = v3;
    __int16 v14 = 2114;
    id v15 = v4;
    __int16 v16 = 2112;
    id v17 = v6;
    __int16 v18 = 2050;
    double v19 = -v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WHAPRO: ConnectionState for device %{public}@ change from %{public}@ to %@ in %{public}f seconds", (uint8_t *)&v12, 0x2Au);
  }
  uint64_t v9 = +[NSDate date];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 32);
  *(void *)(v10 + 32) = v9;

  if ((*(_DWORD *)(a1 + 56) & 0xFFFFFFFE) == 2) {
    [*(id *)(a1 + 32) _callAllPendingCompletionsWithError:*(void *)(a1 + 40)];
  }
}

id sub_1000A4BA4(uint64_t a1)
{
  [*(id *)(a1 + 32) setPairingCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setPairingCallbackQueue:v3];
}

id sub_1000A4CC4(uint64_t a1)
{
  [*(id *)(a1 + 32) setConnectionStateCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setConnectionStateCallbackQueue:v3];
}

id sub_1000A4DE4(uint64_t a1)
{
  [*(id *)(a1 + 32) setNameCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setNameCallbackQueue:v3];
}

id sub_1000A4F04(uint64_t a1)
{
  [*(id *)(a1 + 32) setPairingAllowedCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setPairingAllowedCallbackQueue:v3];
}

id sub_1000A5024(uint64_t a1)
{
  [*(id *)(a1 + 32) setCustomDataCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setCustomDataCallbackQueue:v3];
}

id sub_1000A5144(uint64_t a1)
{
  [*(id *)(a1 + 32) setOutputDevicesUpdatedCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setOutputDevicesUpdatedCallbackQueue:v3];
}

id sub_1000A5264(uint64_t a1)
{
  [*(id *)(a1 + 32) setOutputDevicesRemovedCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setOutputDevicesRemovedCallbackQueue:v3];
}

id sub_1000A5384(uint64_t a1)
{
  [*(id *)(a1 + 32) setVolumeCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setVolumeCallbackQueue:v3];
}

id sub_1000A54A4(uint64_t a1)
{
  [*(id *)(a1 + 32) setVolumeControlCapabilitiesCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setVolumeControlCapabilitiesCallbackQueue:v3];
}

id sub_1000A55C4(uint64_t a1)
{
  [*(id *)(a1 + 32) setVolumeMutedCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setVolumeMutedCallbackQueue:v3];
}

id sub_1000A56E4(uint64_t a1)
{
  [*(id *)(a1 + 32) setDeviceInfoCallback:*(void *)(a1 + 48)];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return _[v2 setDeviceInfoCallbackQueue:v3];
}

void sub_1000A6874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,id location)
{
  _Block_object_dispose((const void *)(v61 - 160), 8);
  objc_destroyWeak(v60);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A68B0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  id v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v15 = a1[5];
      uint64_t v14 = a1[6];
      __int16 v16 = (void *)a1[4];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:a1[7]];
      int v25 = 138544130;
      uint64_t v26 = v15;
      __int16 v27 = 2114;
      uint64_t v28 = v14;
      __int16 v29 = 2114;
      id v30 = v16;
      __int16 v31 = 2048;
      uint64_t v32 = v17;
      __int16 v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      double v19 = v6;
      uint32_t v20 = 42;
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v21 = a1[5];
      uint64_t v22 = a1[6];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:a1[7]];
      int v25 = 138543874;
      uint64_t v26 = v21;
      __int16 v27 = 2114;
      uint64_t v28 = v22;
      __int16 v29 = 2048;
      id v30 = v23;
      __int16 v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      double v19 = v6;
      uint32_t v20 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v25, v20);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v9 = a1[5];
    uint64_t v8 = a1[6];
    uint64_t v10 = a1[4];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:a1[7]];
    int v25 = 138544386;
    uint64_t v26 = v9;
    __int16 v27 = 2114;
    uint64_t v28 = v8;
    __int16 v29 = 2114;
    id v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v25, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v7) {
    sub_10032D4A4();
  }
LABEL_14:

  uint64_t v24 = a1[8];
  if (v24) {
    (*(void (**)(uint64_t, id))(v24 + 16))(v24, v3);
  }
}

id sub_1000A6B04(uint64_t a1)
{
  uint64_t v6 = 0;
  BOOL v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = sub_1000A4120;
  uint64_t v10 = sub_1000A4130;
  id v11 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000A6BFC;
  v5[3] = &unk_100415940;
  void v5[4] = v1;
  void v5[5] = &v6;
  dispatch_sync(v2, v5);
  id v3 = (id)v7[5];
  _Block_object_dispose(&v6, 8);

  return v3;
}

uint64_t sub_1000A6BFC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 57) || *(_DWORD *)(v1 + 40) != 1)
  {
    *(void *)(*(void *)(*(void *)(result + 40) + 8) + 40) = MRMediaRemoteCreateError();
    return _objc_release_x1();
  }
  return result;
}

id sub_1000A6C78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = [WeakRetained deviceInfo];
  if (v3)
  {
    uint64_t v4 = [WeakRetained deviceInfo];
    MRAnalyticsCompositionForDeviceInfo();
  }
  v19[0] = kMREventOriginatorKey;
  MRAnalyticsCompositionForLocalDevice();
  id v5 = MRAnalyticsDeviceCompositionDescription();
  v20[0] = v5;
  v19[1] = kMREventDestinationKey;
  uint64_t v6 = MRAnalyticsDeviceCompositionDescription();
  v20[1] = v6;
  v19[2] = kMRConnectionIsRetryKey;
  uint64_t v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 88)];
  uint64_t v8 = (void *)v7;
  CFStringRef v9 = @"NONE";
  CFStringRef v10 = *(const __CFString **)(a1 + 32);
  CFStringRef v11 = *(const __CFString **)(a1 + 40);
  if (!v10) {
    CFStringRef v10 = @"NONE";
  }
  v20[2] = v7;
  v20[3] = v10;
  v19[3] = kMRConnectionReasonKey;
  v19[4] = @"requestID";
  if (v11) {
    CFStringRef v12 = v11;
  }
  else {
    CFStringRef v12 = @"NONE";
  }
  if (*(void *)(a1 + 48)) {
    CFStringRef v9 = *(const __CFString **)(a1 + 48);
  }
  void v20[4] = v12;
  v20[5] = v9;
  void v19[5] = kMREventAppBundleKey;
  v19[6] = kMRConnectionAllowAuthenticationPromptKey;
  BOOL v13 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 89)];
  v20[6] = v13;
  v19[7] = kMREventDurationKey;
  uint64_t v14 = +[NSNumber numberWithDouble:*(double *)(a1 + 80)];
  v20[7] = v14;
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:8];
  id v16 = [v15 mutableCopy];

  [v16 addEntriesFromDictionary:*(void *)(a1 + 56)];
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17) {
    [v16 setObject:v17 forKeyedSubscript:kMRConnectionFailureReasonKey];
  }

  return v16;
}

id sub_1000A6EC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_prepareToDisconnect:userInfo:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1000A6ED4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 48) = 0;
  if (!*(void *)(*(void *)(a1 + 32) + 80))
  {
    uint64_t v2 = +[NSDate date];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 80);
    *(void *)(v3 + 80) = v2;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_1000A6F48(uint64_t a1)
{
  id v2 = +[MRPowerLogger sharedLogger];
  [v2 logEvent:MRPowerLogEventRemoteControlSession withInfo:*(void *)(a1 + 32)];
}

uint64_t sub_1000A74B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000A74C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_1000A7524(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_connectWithOptions:isRetry:userInfo:completion:", *(unsigned int *)(a1 + 56), 0, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1000A79C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"qos: %u->%u", *(unsigned int *)(a1 + 72), qos_class_self());
  id v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543874;
    CFStringRef v30 = @"TransportExternalDevice.connectWithOptions";
    __int16 v31 = 2114;
    uint64_t v32 = v6;
    __int16 v33 = 2112;
    id v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = _MRLogForCategory();
  CFStringRef v9 = v8;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v15) {
        goto LABEL_16;
      }
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(a1 + 40);
      BOOL v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544130;
      CFStringRef v30 = @"TransportExternalDevice.connectWithOptions";
      __int16 v31 = 2114;
      uint64_t v32 = v16;
      __int16 v33 = 2114;
      id v34 = v17;
      __int16 v35 = 2048;
      uint64_t v36 = v18;
      double v19 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint32_t v20 = v9;
      uint32_t v21 = 42;
    }
    else
    {
      if (!v15) {
        goto LABEL_16;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      BOOL v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v30 = @"TransportExternalDevice.connectWithOptions";
      __int16 v31 = 2114;
      uint64_t v32 = v22;
      __int16 v33 = 2048;
      id v34 = v23;
      double v19 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint32_t v20 = v9;
      uint32_t v21 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
    goto LABEL_15;
  }
  BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v10) {
      goto LABEL_16;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    BOOL v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)long long buf = 138544386;
    CFStringRef v30 = @"TransportExternalDevice.connectWithOptions";
    __int16 v31 = 2114;
    uint64_t v32 = v11;
    __int16 v33 = 2114;
    id v34 = v3;
    __int16 v35 = 2114;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_15:

    goto LABEL_16;
  }
  if (v10) {
    sub_10032D560();
  }
LABEL_16:

  uint64_t v24 = *(void **)(a1 + 64);
  if (v24)
  {
    int v25 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A7D3C;
    block[3] = &unk_100417A50;
    id v28 = v24;
    id v27 = v3;
    dispatch_async(v25, block);
  }
}

uint64_t sub_1000A7D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1000A7D50(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 352);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 352);
    *(void *)(v4 + 352) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 352);
  }
  [v2 addObject:*(void *)(a1 + 40)];
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  CFStringRef v9 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000A7E14;
  v11[3] = &unk_100415F80;
  void v11[4] = v9;
  return objc_msgSend(v9, "_onSerialQueue_prepareToConnectWithOptions:userInfo:connectionAttemptDetails:connectionHandler:", v6, v7, v8, v11);
}

id sub_1000A7E14(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _callAllPendingCompletionsWithError:a2];
}

uint64_t sub_1000A7F1C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 57) = 0;
  return result;
}

void sub_1000A880C(id a1)
{
  qword_10047E090 = (uint64_t)[objc_alloc((Class)NSSet) initWithArray:&off_100438608];

  _objc_release_x1();
}

id sub_1000A8854(uint64_t a1)
{
  v7[0] = kMREventDurationKey;
  id v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v8[0] = v2;
  v7[1] = kMRDisconnectionRetryCount;
  id v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  v8[1] = v3;
  v7[2] = kMRDisconnectionWillAttemptReconnection;
  uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  v8[2] = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:3];

  return v5;
}

void sub_1000A896C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:3];
  [v2 setObject:*(void *)(a1 + 32) forKeyedSubscript:MRExternalDeviceConnectionReasonUserInfoKey];
  [v2 setObject:*(void *)(a1 + 40) forKeyedSubscript:MRExternalDeviceConnectionCorrelationIDUserInfoKey];
  [v2 setObject:*(void *)(a1 + 48) forKeyedSubscript:MRExternalDeviceConnectionClientBundleIDUserInfoKey];
  id v3 = *(unsigned int **)(a1 + 56);
  uint64_t v4 = v3[11];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000A8AA8;
  v5[3] = &unk_100415990;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  objc_msgSend(v3, "_onWorkerQueue_connectWithOptions:isRetry:userInfo:completion:", v4, 1, v2, v5);
}

void sub_1000A8AA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) shortDescription];

  id v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v12 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (!v4)
    {
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v15 = *(void *)(a1 + 40);
      CFStringRef v9 = +[NSDate date];
      [v9 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v18 = 138543874;
      CFStringRef v19 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
      __int16 v20 = 2114;
      uint64_t v21 = v15;
      __int16 v22 = 2048;
      id v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v18, 0x20u);
      goto LABEL_13;
    }
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v13 = *(void *)(a1 + 40);
    CFStringRef v9 = [*(id *)(a1 + 32) shortDescription];
    BOOL v10 = +[NSDate date];
    [v10 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v18 = 138544130;
    CFStringRef v19 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
    __int16 v20 = 2114;
    uint64_t v21 = v13;
    __int16 v22 = 2114;
    id v23 = v9;
    __int16 v24 = 2048;
    int v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", (uint8_t *)&v18, 0x2Au);
LABEL_8:

LABEL_13:
    goto LABEL_14;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    CFStringRef v9 = [*(id *)(a1 + 32) shortDescription];
    BOOL v10 = +[NSDate date];
    [v10 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v18 = 138544386;
    CFStringRef v19 = @"TransportExternalDevice.connectWithOptions.attemptReconnection";
    __int16 v20 = 2114;
    uint64_t v21 = v8;
    __int16 v22 = 2114;
    id v23 = v3;
    __int16 v24 = 2114;
    int v25 = v9;
    __int16 v26 = 2048;
    uint64_t v27 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v18, 0x34u);
    goto LABEL_8;
  }
  if (v7) {
    sub_10032D68C();
  }
LABEL_14:

  objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_sendBatchedMessages");
  uint64_t v17 = *(void *)(a1 + 56);
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v3);
  }
}

uint64_t sub_1000A8D3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained) {
    objc_msgSend(WeakRetained, "_onWorkerQueue_disconnect:", *(void *)(a1 + 32));
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }

  return _objc_release_x1();
}

void sub_1000A9064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A909C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 352) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 352);

  return [v5 removeAllObjects];
}

id sub_1000A919C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_prepareToDisconnect:userInfo:completion:", *(void *)(a1 + 40), 0, 0);
}

void sub_1000A928C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000A92A8(uint64_t a1, __CFError *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (a2 && WeakRetained)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    CFStringRef v9 = @"reason";
    uint64_t v10 = v6;
    BOOL v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    id v8 = [objc_alloc((Class)NSError) initWithMRError:CFErrorGetCode(a2) userInfo:v7];
    [v5 disconnect:v8];
  }
}

void sub_1000A96AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1000A9768;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000A9768(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000A977C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = [v5 error];
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
}

void sub_1000A98F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A9908(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 120) isValid] & 1) == 0)
  {
    uint64_t Error = MRMediaRemoteCreateError();
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = Error;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 120) cryptoSession];
    if (([v5 isValid] & 1) == 0)
    {
      unsigned int v6 = [*(id *)(*(void *)(a1 + 32) + 152) requiresCustomPairing];

      if (!v6) {
        goto LABEL_8;
      }
      uint64_t v7 = MRMediaRemoteCreateError();
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v5 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }
  }
LABEL_8:
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (*(void *)(*(void *)(a1 + 32) + 136)
      || (uint64_t v9 = MRMediaRemoteCreateError(),
          uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8),
          uint64_t v11 = *(void **)(v10 + 40),
          *(void *)(v10 + 40) = v9,
          v11,
          !*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)))
    {
      if (!*(void *)(*(void *)(a1 + 32) + 128))
      {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = MRMediaRemoteCreateError();
        _objc_release_x1();
      }
    }
  }
}

void sub_1000A9DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A9DCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (WeakRetained) {
    *((unsigned char *)WeakRetained + 58) = 0;
  }
  qos_class_t v6 = qos_class_self();
  uint64_t v7 = dispatch_get_global_queue(v6, 0);
  uint64_t v9 = v3;
  id v10 = *(id *)(a1 + 32);
  id v8 = v3;
  MRMediaRemoteNowPlayingPing();
}

uint64_t sub_1000A9EB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000A9ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = qos_class_self();
  id v5 = dispatch_get_global_queue(v4, 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A9FA4;
  void v8[3] = &unk_100417A50;
  id v6 = *(id *)(a1 + 32);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_1000A9FA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000AA298(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1000AA34C;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000AA34C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000AA360(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000AA3C0(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 72);
  return [*(id *)(a1 + 32) setOutputDeviceVolume:*(void *)(a1 + 40) outputDeviceUID:*(void *)(a1 + 48) details:*(void *)(a1 + 56) queue:*(void *)(a1 + 64) completion:a2];
}

void sub_1000AA670(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1000AA724;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000AA724(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000AA738(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000AA798(uint64_t a1)
{
  return [*(id *)(a1 + 32) muteOutputDeviceVolume:*(unsigned __int8 *)(a1 + 72) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48) queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000AAA48(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1000AAAFC;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000AAAFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000AAB10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000AAB70(uint64_t a1)
{
  return [*(id *)(a1 + 32) adjustOutputDeviceVolume:*(void *)(a1 + 72) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48) queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000AAD34(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error getting volume %@", buf, 0xCu);
    }
  }
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(a1 + 32);
    if (v8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000AAE84;
      block[3] = &unk_1004162A8;
      id v11 = v7;
      float v12 = a3;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_1000AAE84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(float *)(a1 + 48));
}

void sub_1000AAE9C(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [v8 error];

  float v4 = 0.0;
  if (!v3)
  {
    [v8 volume];
    float v4 = v5;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [v8 error];
  (*(void (**)(uint64_t, void *, float))(v6 + 16))(v6, v7, v4);
}

void sub_1000AB1AC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error getting volume control capablities %@", buf, 0xCu);
    }
  }
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(a1 + 32);
    if (v8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000AB2F4;
      block[3] = &unk_1004162A8;
      id v11 = v7;
      int v12 = a2;
      id v10 = v5;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_1000AB2F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_1000AB30C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 error];

  if (v3) {
    id v4 = 0;
  }
  else {
    id v4 = [v7 capabilities];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = [v7 error];
  (*(void (**)(uint64_t, id, void *))(v5 + 16))(v5, v4, v6);
}

uint64_t sub_1000AB3B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AB580(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error setting listening mode %@", buf, 0xCu);
    }
  }
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 32);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1000AB6C0;
      void v7[3] = &unk_100417A50;
      id v9 = v5;
      id v8 = v3;
      dispatch_async(v6, v7);
    }
  }
}

uint64_t sub_1000AB6C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000AB6D4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000AB8E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error setting conversation detection %@", buf, 0xCu);
    }
  }
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 32);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1000ABA24;
      void v7[3] = &unk_100417A50;
      id v9 = v5;
      id v8 = v3;
      dispatch_async(v6, v7);
    }
  }
}

uint64_t sub_1000ABA24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000ABA38(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000ABCD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1000ABD84;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1000ABD84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000ABD98(uint64_t a1, void *a2)
{
  id v3 = [a2 error];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000ABDF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyTopologyWithRequest:*(void *)(a1 + 40) withReplyQueue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000AC044(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    id v8 = *(NSObject **)(a1 + 32);
    if (v8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000AC120;
      block[3] = &unk_1004170B8;
      id v12 = v7;
      id v10 = v5;
      id v11 = v6;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_1000AC120(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000AC138(uint64_t a1, void *a2)
{
  id v9 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v4 = *(void *)(a1 + 32);
  if (isKindOfClass)
  {
    id v5 = v9;
    id v6 = [v5 groupUID];
    id v7 = [v5 error];

    (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v6, v7);
  }
  else
  {
    id v6 = [v9 error];
    if (v6)
    {
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v6);
    }
    else
    {
      id v8 = [objc_alloc((Class)NSError) initWithMRError:1];
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v8);
    }
  }
}

id sub_1000AC258(uint64_t a1)
{
  return [*(id *)(a1 + 32) createHostedEndpointWithOutputDeviceUIDs:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000AC4BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error removing from parent group %@", buf, 0xCu);
    }
  }
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(NSObject **)(a1 + 32);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1000AC5FC;
      void v7[3] = &unk_100417A50;
      id v9 = v5;
      id v8 = v3;
      dispatch_async(v6, v7);
    }
  }
}

uint64_t sub_1000AC5FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1000AC610(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeFromParentGroup:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000AC81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AC834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AC908;
  block[3] = &unk_1004170B8;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1000AC908(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000AC920(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_deviceInfo");
  id v3 = [v2 groupSessionToken];
  uint64_t v4 = [v3 sessionIdentifier];

  if (v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v5 = objc_alloc((Class)MRBlockGuard);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000ACB5C;
    v18[3] = &unk_100415FA8;
    id v19 = *(id *)(a1 + 40);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000ACB74;
    v15[3] = &unk_10041A930;
    id v7 = [v5 initWithTimeout:@"requestGroupSession" reason:v6 queue:v18 handler:30.0];
    id v16 = v7;
    id v17 = *(id *)(a1 + 40);
    id v8 = objc_retainBlock(v15);
    id v9 = *(void **)(*(void *)(a1 + 32) + 104);
    if (!v9)
    {
      id v10 = objc_alloc_init((Class)NSMutableSet);
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = *(void **)(v11 + 104);
      *(void *)(v11 + 104) = v10;

      id v9 = *(void **)(*(void *)(a1 + 32) + 104);
    }
    id v13 = [v8 copy];
    id v14 = objc_retainBlock(v13);
    [v9 addObject:v14];

    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 104) count] >= 2) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    }
  }
}

uint64_t sub_1000ACB5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000ACB74(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000AD638(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.transportExternalDevice.clientConnectionQueue", v3);
  uint64_t v2 = (void *)qword_10047E0A0;
  qword_10047E0A0 = (uint64_t)v1;
}

void sub_1000ADCCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 64))
  {
    id v3 = [*(id *)(v1 + 152) name];
    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 152) uid];
    id v8 = +[NSString stringWithFormat:@"com.apple.mediaremote.MRExternalDevice/%@(%@)", v3, v4];

    id v5 = [objc_alloc((Class)MROSTransaction) initWithName:v8];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 64);
    *(void *)(v6 + 64) = v5;

    MRRegisterTransaction();
  }
}

void sub_1000AE49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,char a27)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1000AE4D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = [v3 error];

    if (v5)
    {
      uint64_t v6 = [v3 error];
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      goto LABEL_10;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v9 = v3;
      uint64_t v10 = [v9 deviceInfo];
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        id v16 = WeakRetained;
        id v17 = v11;
        id v9 = v9;
        id v12 = v11;
        msv_dispatch_sync_on_queue();

LABEL_9:
        goto LABEL_10;
      }
    }
    else
    {
      id v9 = 0;
    }
    id v13 = [objc_alloc((Class)NSError) initWithMRError:100 format:@"deviceInfo response was nil"];
    uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    goto LABEL_9;
  }
LABEL_10:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000AE670(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = [v2 deviceInfo];
  [v2 _handleDeviceInfoChange:v3 oldDevice:v4];

  id v6 = [*(id *)(a1 + 48) supportedProtocolMessages];
  id v5 = [*(id *)(a1 + 32) clientConnection];
  [v5 setSupportedMessages:v6];
}

void sub_1000AE708(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = qos_class_self();
  id v5 = dispatch_get_global_queue(v4, 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000AE7D4;
  void v8[3] = &unk_100417A50;
  id v6 = *(id *)(a1 + 32);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

uint64_t sub_1000AE7D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1000AEFC4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_registerOriginCallbacks");
}

intptr_t sub_1000AF444(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000AF658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1000AF684(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  qos_class_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 96);
  *(void *)(v5 + 96) = 0;
}

void sub_1000AF888(uint64_t a1)
{
  [*(id *)(a1 + 32) setCustomOrigin:0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;

  *(_DWORD *)(*(void *)(a1 + 32) + 44) = 0;
}

void sub_1000AFEF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

void sub_1000AFF68(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000B0084;
    v14[3] = &unk_100416820;
    id v15 = v11;
    [WeakRetained _handleRemoteCommand:a3 withOptions:v10 playerPath:v9 completion:v14];
  }
  else
  {
    id v13 = +[MRCommandResult commandResultWithSendError:2];
    (*((void (**)(id, void *))v11 + 2))(v11, v13);
  }
}

uint64_t sub_1000B0084(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B0094(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000B0194;
    v10[3] = &unk_10041AA18;
    id v11 = v7;
    [WeakRetained _handlePlaybackQueueRequest:a2 forPlayerPath:a3 completion:v10];
  }
  else
  {
    id v9 = [objc_alloc((Class)NSError) initWithMRError:100 description:@"Connection Dealloc"];
    (*((void (**)(id, void, id))v7 + 2))(v7, 0, v9);
  }
}

uint64_t sub_1000B0194(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B01A4(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = [WeakRetained errorForCurrentState];
    if (v5)
    {
      id v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10032D830((uint64_t)v5, v6);
      }
    }
    else
    {
      id v6 = [objc_alloc((Class)MRSendLyricsEventMessage) initWithEvent:a2];
      id v7 = [v4 clientConnection];
      [v7 sendMessage:v6];
    }
  }
}

void sub_1000B025C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000B0348;
    v10[3] = &unk_10041AA68;
    id v11 = v7;
    [WeakRetained _handlePlaybackSessionRequest:a2 forPlayerPath:a3 completion:v10];
  }
  else
  {
    uint64_t Error = (void *)MRMediaRemoteCreateError();
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0, Error);
  }
}

uint64_t sub_1000B0348(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B0358(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v15 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v13 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _handlePlaybackSessionMigrateRequest:v15 request:v9 forPlayerPath:v10 completion:v11];
  }
  else
  {
    id v14 = [objc_alloc((Class)NSError) initWithMRError:100 description:@"TransportExternalDevice Dealloc"];
    v11[2](v11, v9, v14);
  }
}

void sub_1000B0448(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000B0544;
    v10[3] = &unk_100415FA8;
    id v11 = v7;
    [WeakRetained _handlePlaybackSessionMigrateBeginRequest:a2 forPlayerPath:a3 completion:v10];
  }
  else
  {
    id v9 = [objc_alloc((Class)NSError) initWithMRError:100 description:@"TransportExternalDevice Dealloc"];
    (*((void (**)(id, id))v7 + 2))(v7, v9);
  }
}

uint64_t sub_1000B0544(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B055C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000B0668;
    v12[3] = &unk_100415FA8;
    id v13 = v9;
    [WeakRetained _handlePlaybackSessionMigrateEndRequest:a2 error:a3 forPlayerPath:a4 completion:v12];
  }
  else
  {
    id v11 = [objc_alloc((Class)NSError) initWithMRError:100 description:@"TransportExternalDevice Dealloc"];
    (*((void (**)(id, id))v9 + 2))(v9, v11);
  }
}

uint64_t sub_1000B0668(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000B0680(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _sendClientMessage:v8 completion:v5];
  }
}

void sub_1000B06F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v12 = objc_alloc((Class)MRCreateApplicationConnectionMessage);
    id v13 = [v7 context];
    id v14 = [v12 initWithConnectionContext:v13 requestInfo:v8];

    id v15 = objc_alloc_init((Class)MRProtocolMessageOptions);
    [v15 setPriority:4];
    [v15 setWaking:1];
    [v14 setTransportOptions:v15];
    [v7 setRemoteInvalidationExternalDevice:WeakRetained];
    [v7 setType:2];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000B092C;
    v19[3] = &unk_100416758;
    objc_copyWeak(&v20, v10);
    [v7 setServerBoundMessageHandler:v19];
    id v16 = [WeakRetained clientConnection];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000B09E0;
    v17[3] = &unk_10041A818;
    id v18 = v9;
    [v16 sendMessage:v14 reply:v17];

    objc_destroyWeak(&v20);
  }
  else
  {
    id v14 = [objc_alloc((Class)NSError) initWithMRError:176];
    (*((void (**)(id, id))v9 + 2))(v9, v14);
  }
}

void sub_1000B0914(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000B092C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = [WeakRetained clientConnection];
    [v8 sendMessage:v5];
  }
  else
  {
    id v8 = [objc_alloc((Class)NSError) initWithMRError:176];
    [v9 invalidate:v8];
  }
}

void sub_1000B09E0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000B0A40(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = [objc_alloc((Class)NSError) initWithMRError:132];
  (*((void (**)(id, id))a4 + 2))(v5, v6);
}

void sub_1000B0ABC(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = [objc_alloc((Class)NSError) initWithMRError:180];
  (*((void (**)(id, id))a4 + 2))(v5, v6);
}

void sub_1000B0D9C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1000B0DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    uint64_t Error = (void *)MRMediaRemoteCreateError();
    uint64_t v16 = *(void *)(a1 + 40);
    id v15 = *(void (**)(uint64_t, void *, void *))(v16 + 16);
LABEL_7:
    id v17 = 0;
    id v18 = Error;
    goto LABEL_16;
  }
  id v5 = [v3 error];

  if (v5)
  {
    id v6 = [v3 error];
    id v7 = [v6 code];

    if (v7 == (id)26)
    {
      id v8 = objc_alloc((Class)NSString);
      id v9 = [*(id *)(a1 + 32) requestIdentifier];
      id v10 = [v3 error];
      id v11 = [v10 description];
      id v12 = [v8 initWithFormat:@"event = <playbackQueueRequest>, request = <%@>, error = <%@>", v9, v11];
      [WeakRetained verifyConnectionStatusAndMaybeDisconnect:v12];
    }
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t Error = [v3 error];
    id v15 = *(void (**)(uint64_t, void *, void *))(v13 + 16);
    uint64_t v16 = v13;
    goto LABEL_7;
  }
  id v19 = [v3 state];
  uint64_t Error = [v19 playbackQueue];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v20 = [Error contentItems];
  id v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v23) {
          objc_enumerationMutation(v20);
        }
        int v25 = [*(id *)(*((void *)&v26 + 1) + 8 * i) metadata];
        [v25 setDeviceSpecificUserInfo:0];
      }
      id v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v22);
  }

  uint64_t v16 = *(void *)(a1 + 40);
  id v15 = *(void (**)(uint64_t, void *, void *))(v16 + 16);
  id v17 = Error;
  id v18 = 0;
LABEL_16:
  v15(v16, v17, v18);
}

void sub_1000B1040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _handlePlaybackQueueRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000B1284(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000B12B0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 error];

  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [v7 playbackSession];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v7 error];
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v4, v6);
}

void sub_1000B135C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _handlePlaybackSessionRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000B15A4(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 error];

  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = [v7 request];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v7 error];
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v4, v6);
}

id sub_1000B1650(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateRequest:*(void *)(a1 + 40) request:*(void *)(a1 + 48) forPlayerPath:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000B182C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000B188C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateBeginRequest:*(void *)(a1 + 40) forPlayerPath:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000B1A88(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 error];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

id sub_1000B1AE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackSessionMigrateEndRequest:*(void *)(a1 + 40) error:*(void *)(a1 + 48) forPlayerPath:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000B1BAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[22];
  if (v3 && v2[23])
  {
    id v4 = [v3 copy];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(NSObject **)(v5 + 184);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B1D14;
    block[3] = &unk_10041ABB8;
    void block[4] = v5;
    id v17 = v4;
    int v18 = *(_DWORD *)(a1 + 48);
    id v16 = *(id *)(a1 + 40);
    id v7 = v4;
    dispatch_async(v6, block);

    uint64_t v2 = *(void **)(a1 + 32);
  }
  id v8 = v2[2];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000B1D6C;
  v11[3] = &unk_1004176F8;
  int v14 = *(_DWORD *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v12 = v9;
  uint64_t v13 = v10;
  dispatch_async(v8, v11);
}

id sub_1000B1D14(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B1D6C(uint64_t a1)
{
  id v5 = +[NSMutableDictionary dictionary];
  uint64_t v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  [v5 setObject:v2 forKey:kMRExternalDeviceConnectionStateUserInfoKey];

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    [v5 setObject:v3 forKey:NSUnderlyingErrorKey];
  }
  id v4 = +[NSNotificationCenter defaultCenter];
  [v4 postNotificationName:kMRExternalDeviceConnectionStateDidChangeNotification object:*(void *)(a1 + 40) userInfo:v5];
}

void sub_1000B1EDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 160) && *(void *)(v2 + 168))
  {
    uint64_t v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 138543362;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "<%{public}@> Calling pairingCallback", buf, 0xCu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 160) copy];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(NSObject **)(v6 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B20C8;
    block[3] = &unk_10041AC08;
    void block[4] = v6;
    id v12 = v5;
    id v13 = *(id *)(a1 + 40);
    id v8 = v5;
    dispatch_async(v7, block);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000B2240;
    v9[3] = &unk_100416938;
    id v10 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);
    id v8 = v10;
  }
}

void sub_1000B20C8(uint64_t a1)
{
  uint64_t v2 = +[MRPasscodeCredentials standardCredentials];
  unsigned int v3 = [v2 type];
  id v4 = [v2 characterCount];
  id v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling Client Registered Pairing Callback", buf, 2u);
  }

  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B21F8;
  void v8[3] = &unk_10041ABE0;
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  (*(void (**)(uint64_t, void, id, void *))(v6 + 16))(v6, v3, v4, v8);
}

id sub_1000B21F8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

uint64_t sub_1000B2240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B22F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 192);
  if (v3)
  {
    if (*(void *)(v2 + 200))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 200);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B23D8;
      block[3] = &unk_1004161E0;
      void block[4] = v5;
      id v9 = *(id *)(a1 + 40);
      id v10 = v4;
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }
}

id sub_1000B23D8(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling Client Registered Name Callback with %@", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000B2528(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 208))
  {
    if (*(void *)(v1 + 216))
    {
      unsigned __int8 v3 = [*(id *)(v1 + 136) isPairingAllowed];
      id v4 = [*(id *)(*(void *)(a1 + 32) + 208) copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 216);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B2610;
      block[3] = &unk_10041AC30;
      unsigned __int8 v10 = v3;
      void block[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }
}

id sub_1000B2610(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v3 = @"true";
    }
    else {
      CFStringRef v3 = @"false";
    }
    int v5 = 138412290;
    CFStringRef v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling Client Registered pairing allowed Callback with %@", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000B27D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(void **)(v2 + 224);
  if (v3)
  {
    if (*(void *)(v2 + 232))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      CFStringRef v6 = *(NSObject **)(v5 + 232);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000B28C8;
      void v8[3] = &unk_10041AC58;
      void v8[4] = v5;
      id v11 = v4;
      id v9 = *(id *)(a1 + 40);
      id v10 = *(id *)(a1 + 48);
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }
}

id sub_1000B28C8(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling Client Registered custom data Callback", v4, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  return [*(id *)(a1 + 32) setIsCallingClientCallback:0];
}

void sub_1000B2A04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(void **)(v2 + 240);
  if (v3)
  {
    if (*(void *)(v2 + 248))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      CFStringRef v6 = *(NSObject **)(v5 + 248);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B2AE8;
      block[3] = &unk_10041A008;
      void block[4] = v5;
      id v10 = v4;
      id v9 = *(id *)(a1 + 40);
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }
}

id sub_1000B2AE8(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B2BDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef v3 = *(void **)(v2 + 256);
  if (v3)
  {
    if (*(void *)(v2 + 264))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      CFStringRef v6 = *(NSObject **)(v5 + 264);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B2CC0;
      block[3] = &unk_10041A008;
      void block[4] = v5;
      id v10 = v4;
      id v9 = *(id *)(a1 + 40);
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }
}

id sub_1000B2CC0(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B2DC4(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v3 = [*(id *)(a1 + 32) name];
    double v4 = *(float *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543874;
    id v17 = v3;
    __int16 v18 = 2048;
    double v19 = v4;
    __int16 v20 = 2114;
    uint64_t v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "<%{public}@> Volume did change to %lf for outputDevice: <%{public}@>", buf, 0x20u);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 272);
  if (v7)
  {
    if (*(void *)(v6 + 280))
    {
      id v8 = [v7 copy];
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = *(NSObject **)(v9 + 280);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000B2F68;
      v12[3] = &unk_10041ABB8;
      void v12[4] = v9;
      id v14 = v8;
      int v15 = *(_DWORD *)(a1 + 48);
      id v13 = *(id *)(a1 + 40);
      id v11 = v8;
      dispatch_async(v10, v12);
    }
  }
}

id sub_1000B2F68(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(float))(*(void *)(a1 + 48) + 16))(*(float *)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B3070(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 288);
  if (v2)
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(v4 + 296);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000B3154;
    void v7[3] = &unk_10041ABB8;
    void v7[4] = v4;
    id v9 = v3;
    int v10 = *(_DWORD *)(a1 + 48);
    id v8 = *(id *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v5, v7);
  }
}

id sub_1000B3154(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B325C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 304);
  if (v3)
  {
    if (*(void *)(v2 + 312))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(NSObject **)(v5 + 312);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000B3348;
      void v8[3] = &unk_10041AC80;
      void v8[4] = v5;
      id v10 = v4;
      char v11 = *(unsigned char *)(a1 + 48);
      id v9 = *(id *)(a1 + 40);
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }
}

id sub_1000B3348(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B346C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[40];
  if (v3 && v2[41])
  {
    id v4 = [v3 copy];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(NSObject **)(v5 + 328);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B35D8;
    block[3] = &unk_10041A008;
    void block[4] = v5;
    id v17 = v4;
    id v16 = *(id *)(a1 + 40);
    id v7 = v4;
    dispatch_async(v6, block);

    uint64_t v2 = *(void **)(a1 + 32);
  }
  id v8 = v2[2];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000B362C;
  v11[3] = &unk_1004159B8;
  id v12 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v13 = v9;
  uint64_t v14 = v10;
  dispatch_async(v8, v11);
}

id sub_1000B35D8(uint64_t a1)
{
  [*(id *)(a1 + 32) setIsCallingClientCallback:1];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsCallingClientCallback:0];
}

void sub_1000B362C(void *a1)
{
  id v3 = +[NSMutableDictionary dictionary];
  [v3 setObject:a1[4] forKeyedSubscript:MRExternalDevicePreviousDeviceInfoUserInfoKey];
  [v3 setObject:a1[5] forKeyedSubscript:MRExternalDeviceDeviceInfoUserInfoKey];
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:MRExternalDeviceDeviceInfoDidChangeNotification object:a1[6] userInfo:v3];
}

void sub_1000B37AC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 96))
  {
    uint64_t v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Batching Request...", v5, 2u);
    }

    id v3 = *(void **)(*(void *)(a1 + 32) + 96);
    id v4 = objc_retainBlock(*(id *)(a1 + 40));
    [v3 addObject:v4];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1000B3C8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_1000B3CB0(uint64_t a1, void *a2)
{
  id v24 = a2;
  id v3 = +[MRCommandResult commandResultWithSendError:0];
  id v4 = [v24 error];

  if (v4)
  {
    uint64_t v5 = [v24 error];
    id v6 = [v5 code];

    if (v6 == (id)26)
    {
      id v7 = *(void **)(a1 + 32);
      if (v7)
      {
        id v8 = v7;
        id v9 = objc_alloc((Class)NSString);
        uint64_t v10 = (void *)MRMediaRemoteCopyCommandDescription();
        char v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:kMRMediaRemoteOptionCommandID];
        id v12 = [v24 error];
        id v13 = [v12 description];
        id v14 = [v9 initWithFormat:@"event = <%@>, command = <%@>, error = <%@>", v10, v11, v13];
        [v8 verifyConnectionStatusAndMaybeDisconnect:v14];
      }
      uint64_t v15 = 5;
    }
    else
    {
      uint64_t v15 = 2;
    }
    uint64_t v16 = +[MRCommandResult commandResultWithSendError:v15];
  }
  else
  {
    uint64_t v16 = [v24 commandResult];
  }
  id v17 = (void *)v16;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  double v19 = [WeakRetained deviceInfo];
  if ([v19 supportsImplicitChangeShuffleAndRepeatModeInSetPlaybackQueueCommandOptions])
  {
  }
  else
  {
    __int16 v20 = [v17 error];

    if (v20) {
      goto LABEL_16;
    }
    uint64_t v21 = [v17 playerPath];
    id v22 = v21;
    if (!v21) {
      id v22 = *(void **)(a1 + 48);
    }
    id WeakRetained = v22;

    MRMediaRemoteSendImplicitCommandsForOptions();
  }

LABEL_16:
  uint64_t v23 = *(void *)(a1 + 56);
  if (v23) {
    (*(void (**)(uint64_t, void *))(v23 + 16))(v23, v17);
  }
}

void sub_1000B3EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B3F94;
  void v7[3] = &unk_100417A50;
  id v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1000B3F94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_1000B3FA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleRemoteCommand:*(unsigned int *)(a1 + 64) withOptions:*(void *)(a1 + 40) playerPath:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000B4C20(id *a1)
{
  [a1[4] setDeviceInfo:a1[5]];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B4D7C;
  void v8[3] = &unk_1004159B8;
  id v2 = a1[5];
  void v8[4] = a1[4];
  id v9 = v2;
  id v10 = a1[6];
  id v3 = objc_retainBlock(v8);
  if (*((void *)a1[4] + 16))
  {
    id v4 = +[MRDMediaRemoteServer server];
    id v5 = [v4 nowPlayingServer];
    [v5 updateDeviceInfo:*((void *)a1[4] + 17) origin:*((void *)a1[4] + 16)];
  }
  id v6 = [a1[5] groupSessionToken];
  id v7 = [v6 sessionIdentifier];

  if (v7) {
    objc_msgSend(a1[4], "_onSerialQueue_completeGroupSessionRequestsWithIdentifier:error:", v7, 0);
  }
  ((void (*)(void *))v3[2])(v3);
}

void sub_1000B4D7C(uint64_t a1)
{
  [*(id *)(a1 + 32) _callDeviceInfoCallback:*(void *)(a1 + 40) oldDeviceInfo:*(void *)(a1 + 48)];
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v6 = [v2 name];
  }
  else
  {
    id v6 = 0;
  }
  id v3 = *(void **)(*(void *)(a1 + 32) + 136);
  if (v3)
  {
    id v4 = [v3 name];
  }
  else
  {
    id v4 = 0;
  }
  if (([v6 isEqualToString:v4] & 1) == 0) {
    [*(id *)(a1 + 32) _callClientNameCallback];
  }
  unsigned int v5 = [*(id *)(a1 + 48) isPairingAllowed];
  if (v5 != [*(id *)(*(void *)(a1 + 32) + 136) isPairingAllowed]) {
    [*(id *)(a1 + 32) _callClientAllowsPairingCallback];
  }
}

id sub_1000B5170(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) replyWithMessage:a2];
}

id sub_1000B5250(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) replyWithMessage:a2];
}

void sub_1000B545C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = objc_alloc((Class)MRProtocolMessage);
  id v6 = [v3 error];

  id v5 = [v4 initWithUnderlyingCodableMessage:0 error:v6];
  [v2 replyWithMessage:v5];
}

uint64_t sub_1000B5BCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000B5BDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendClientMessage:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000B6348(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.transportExternalDevice.jsonClientConnectionQueue", v3);
  id v2 = (void *)qword_10047E0B0;
  qword_10047E0B0 = (uint64_t)v1;
}

void sub_1000B63E8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1000B697C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (!v12)
  {
    uint64_t v20 = objc_opt_class();
    id v13 = _MRLogForCategory();
    BOOL v21 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (!v20)
    {
      if (v10)
      {
        if (!v21) {
          goto LABEL_22;
        }
        uint64_t v15 = +[NSDate date];
        [v15 timeIntervalSinceDate:*(void *)(a1 + 32)];
        int v36 = 138544130;
        CFStringRef v37 = @"handlePlaybackQueueRequest";
        __int16 v38 = 2114;
        id v39 = v9;
        __int16 v40 = 2114;
        uint64_t v41 = (uint64_t)v10;
        __int16 v42 = 2048;
        id v43 = v29;
        CFStringRef v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        __int16 v31 = v13;
        uint32_t v32 = 42;
      }
      else
      {
        if (!v21) {
          goto LABEL_22;
        }
        uint64_t v15 = +[NSDate date];
        [v15 timeIntervalSinceDate:*(void *)(a1 + 32)];
        int v36 = 138543874;
        CFStringRef v37 = @"handlePlaybackQueueRequest";
        __int16 v38 = 2114;
        id v39 = v9;
        __int16 v40 = 2048;
        uint64_t v41 = v35;
        CFStringRef v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int16 v31 = v13;
        uint32_t v32 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v36, v32);
      goto LABEL_21;
    }
    if (v10)
    {
      if (!v21) {
        goto LABEL_22;
      }
      uint64_t v22 = objc_opt_class();
      uint64_t v23 = +[NSDate date];
      [v23 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v36 = 138544386;
      CFStringRef v37 = @"handlePlaybackQueueRequest";
      __int16 v38 = 2114;
      id v39 = v9;
      __int16 v40 = 2112;
      uint64_t v41 = v22;
      __int16 v42 = 2114;
      id v43 = v10;
      __int16 v44 = 2048;
      uint64_t v45 = v24;
      int v25 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      long long v26 = v13;
      uint32_t v27 = 52;
    }
    else
    {
      if (!v21) {
        goto LABEL_22;
      }
      uint64_t v33 = objc_opt_class();
      uint64_t v23 = +[NSDate date];
      [v23 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v36 = 138544130;
      CFStringRef v37 = @"handlePlaybackQueueRequest";
      __int16 v38 = 2114;
      id v39 = v9;
      __int16 v40 = 2112;
      uint64_t v41 = v33;
      __int16 v42 = 2048;
      id v43 = v34;
      int v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      long long v26 = v13;
      uint32_t v27 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v36, v27);

    goto LABEL_22;
  }
  id v13 = _MRLogForCategory();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (v14)
    {
      uint64_t v15 = +[NSDate date];
      [v15 timeIntervalSinceDate:*(void *)(a1 + 32)];
      int v36 = 138544386;
      CFStringRef v37 = @"handlePlaybackQueueRequest";
      __int16 v38 = 2114;
      id v39 = v9;
      __int16 v40 = 2114;
      uint64_t v41 = (uint64_t)v12;
      __int16 v42 = 2114;
      id v43 = v10;
      __int16 v44 = 2048;
      uint64_t v45 = v16;
      id v17 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      __int16 v18 = v13;
      uint32_t v19 = 52;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v36, v19);
LABEL_21:
    }
  }
  else if (v14)
  {
    uint64_t v15 = +[NSDate date];
    [v15 timeIntervalSinceDate:*(void *)(a1 + 32)];
    int v36 = 138544130;
    CFStringRef v37 = @"handlePlaybackQueueRequest";
    __int16 v38 = 2114;
    id v39 = v9;
    __int16 v40 = 2114;
    uint64_t v41 = (uint64_t)v12;
    __int16 v42 = 2048;
    id v43 = v28;
    id v17 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    __int16 v18 = v13;
    uint32_t v19 = 42;
    goto LABEL_11;
  }
LABEL_22:
}

void sub_1000B6D98(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_1000B6DF0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v5) {
    [*(id *)(a1 + 32) removeRequest:*(void *)(a1 + 40)];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1000B6F9C(uint64_t a1, uint64_t a2)
{
  return _MRAddPlaybackQueueToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_1000B732C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) playerPath];

    id v8 = _MRLogForCategory();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (!v9) {
        goto LABEL_20;
      }
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 32) playerPath];
      id v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v30 = 138544386;
      CFStringRef v31 = @"relayPlaybackQueueRequest";
      __int16 v32 = 2114;
      uint64_t v33 = v10;
      __int16 v34 = 2114;
      uint64_t v35 = (uint64_t)v6;
      __int16 v36 = 2114;
      CFStringRef v37 = v11;
      __int16 v38 = 2048;
      uint64_t v39 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v30, 0x34u);
LABEL_14:

LABEL_19:
      goto LABEL_20;
    }
    if (v9) {
      sub_10032D8A8(a1);
    }
  }
  else
  {
    uint64_t v14 = objc_opt_class();
    uint64_t v15 = [*(id *)(a1 + 32) playerPath];

    id v8 = _MRLogForCategory();
    BOOL v16 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v14)
    {
      if (!v15)
      {
        if (!v16) {
          goto LABEL_20;
        }
        uint64_t v27 = *(void *)(a1 + 40);
        id v11 = +[NSDate date];
        [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v30 = 138543874;
        CFStringRef v31 = @"relayPlaybackQueueRequest";
        __int16 v32 = 2114;
        uint64_t v33 = v27;
        __int16 v34 = 2048;
        uint64_t v35 = v28;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v30, 0x20u);
        goto LABEL_19;
      }
      if (!v16) {
        goto LABEL_20;
      }
      uint64_t v21 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 32) playerPath];
      id v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v30 = 138544130;
      CFStringRef v31 = @"relayPlaybackQueueRequest";
      __int16 v32 = 2114;
      uint64_t v33 = v21;
      __int16 v34 = 2114;
      uint64_t v35 = (uint64_t)v11;
      __int16 v36 = 2048;
      CFStringRef v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", (uint8_t *)&v30, 0x2Au);
      goto LABEL_14;
    }
    if (v15)
    {
      if (!v16) {
        goto LABEL_20;
      }
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = objc_opt_class();
      id v11 = [*(id *)(a1 + 32) playerPath];
      uint32_t v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v30 = 138544386;
      CFStringRef v31 = @"relayPlaybackQueueRequest";
      __int16 v32 = 2114;
      uint64_t v33 = v17;
      __int16 v34 = 2112;
      uint64_t v35 = v18;
      __int16 v36 = 2114;
      CFStringRef v37 = v11;
      __int16 v38 = 2048;
      uint64_t v39 = v20;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds", (uint8_t *)&v30, 0x34u);

      goto LABEL_19;
    }
    if (v16)
    {
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = objc_opt_class();
      int v25 = +[NSDate date];
      [v25 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v30 = 138544130;
      CFStringRef v31 = @"relayPlaybackQueueRequest";
      __int16 v32 = 2114;
      uint64_t v33 = v23;
      __int16 v34 = 2112;
      uint64_t v35 = v24;
      __int16 v36 = 2048;
      CFStringRef v37 = v26;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", (uint8_t *)&v30, 0x2Au);
    }
  }
LABEL_20:

  uint64_t v29 = *(void *)(a1 + 56);
  if (v29) {
    (*(void (**)(uint64_t, id, id))(v29 + 16))(v29, v5, v6);
  }
}

void sub_1000B7754(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)MRCreateClientErrorFromXPCMessage();
  if (v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = (void *)MRCreatePlaybackQueueFromXPCMessage();
    if (v4)
    {
      [*(id *)(a1 + 32) subscribeToPlaybackQueue:v4 forRequest:*(void *)(a1 + 40)];
      id v5 = [*(id *)(a1 + 48) playerClient];
      [v5 updatePlaybackQueue:v4 fromRequest:*(void *)(a1 + 40)];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000B7BF0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  id v8 = _MRLogForCategory();
  BOOL v9 = v8;
  if (v5 && !v6)
  {
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v10)
      {
        uint64_t v12 = a1[4];
        uint64_t v11 = a1[5];
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[6]];
        int v30 = 138544386;
        CFStringRef v31 = @"requestArtworkForContentItems";
        __int16 v32 = 2114;
        uint64_t v33 = v11;
        __int16 v34 = 2112;
        id v35 = v5;
        __int16 v36 = 2114;
        uint64_t v37 = v12;
        __int16 v38 = 2048;
        uint64_t v39 = v14;
        uint64_t v15 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        BOOL v16 = v9;
        uint32_t v17 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v30, v17);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
    if (!v10) {
      goto LABEL_22;
    }
    uint64_t v26 = a1[5];
    uint64_t v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138544130;
    CFStringRef v31 = @"requestArtworkForContentItems";
    __int16 v32 = 2114;
    uint64_t v33 = v26;
    __int16 v34 = 2112;
    id v35 = v5;
    __int16 v36 = 2048;
    uint64_t v37 = v27;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    BOOL v16 = v9;
    uint32_t v17 = 42;
    goto LABEL_16;
  }
  if (v6)
  {
    BOOL v18 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (v18)
      {
        uint64_t v20 = a1[4];
        uint64_t v19 = a1[5];
        uint64_t v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[6]];
        int v30 = 138544386;
        CFStringRef v31 = @"requestArtworkForContentItems";
        __int16 v32 = 2114;
        uint64_t v33 = v19;
        __int16 v34 = 2114;
        id v35 = v6;
        __int16 v36 = 2114;
        uint64_t v37 = v20;
        __int16 v38 = 2048;
        uint64_t v39 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v30, 0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }
    else if (v18)
    {
      sub_10032D964((uint64_t)a1);
    }
    goto LABEL_22;
  }
  BOOL v22 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (!v22) {
      goto LABEL_22;
    }
    uint64_t v28 = a1[5];
    uint64_t v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138543874;
    CFStringRef v31 = @"requestArtworkForContentItems";
    __int16 v32 = 2114;
    uint64_t v33 = v28;
    __int16 v34 = 2048;
    id v35 = v29;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    BOOL v16 = v9;
    uint32_t v17 = 32;
    goto LABEL_16;
  }
  if (v22)
  {
    uint64_t v24 = (void *)a1[4];
    uint64_t v23 = a1[5];
    uint64_t v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[6]];
    int v30 = 138544130;
    CFStringRef v31 = @"requestArtworkForContentItems";
    __int16 v32 = 2114;
    uint64_t v33 = v23;
    __int16 v34 = 2114;
    id v35 = v24;
    __int16 v36 = 2048;
    uint64_t v37 = v25;
    uint64_t v15 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }
LABEL_22:
}

id sub_1000B7F6C(id a1, MRContentItem *a2)
{
  return [(MRContentItem *)a2 identifier];
}

void sub_1000B7F74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 contentItems];
  uint64_t v7 = v6;
  if (!v5)
  {
    id v8 = objc_msgSend(v6, "msv_compactMap:", &stru_10041AE88);
    if ([v8 count])
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      MRAddPlayerPathToUserInfo();
      MRAddContentItemsToUserInfo();
      BOOL v10 = +[MRDMediaRemoteServer server];
      uint64_t v11 = _MRPlayerPlaybackQueueContentItemArtworkChangedNotification;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000B8150;
      v12[3] = &unk_100416020;
      id v13 = *(id *)(a1 + 40);
      [v10 postClientNotificationNamed:v11 userInfo:v9 predicate:v12];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

MRContentItem *__cdecl sub_1000B80D0(id a1, MRContentItem *a2)
{
  id v2 = a2;
  id v3 = [(MRContentItem *)v2 artwork];
  uint64_t v4 = [v3 imageData];
  if (v4)
  {
    id v5 = [(MRContentItem *)v2 skeleton];
  }
  else
  {
    id v5 = 0;
  }

  return (MRContentItem *)v5;
}

BOOL sub_1000B8150(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

void sub_1000B89C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *a11, id *a12, id *location)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v16 - 144));
  _Unwind_Resume(a1);
}

void sub_1000B8AA4(uint64_t a1)
{
  obuint64_t j = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(obj);
  [obj setDeviceName:0];
  objc_sync_exit(obj);

  [obj _deviceInfoDidChange];
}

void sub_1000B8B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000B8B28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceInfoDidChange];
}

void sub_1000B8B68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceInfoDidChange];
}

void sub_1000B8BA8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(v3);
  [v3 setDeviceUID:0];
  objc_sync_exit(v3);

  [v3 _deviceInfoDidChange];
}

void sub_1000B8C24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B8C38(uint64_t a1)
{
  obuint64_t j = objc_loadWeakRetained((id *)(a1 + 32));
  objc_sync_enter(obj);
  [obj setDeviceUID:0];
  objc_sync_exit(obj);

  [obj _deviceInfoDidChange];
}

void sub_1000B8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000B8CBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = [(id)objc_opt_class() _workerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B8D70;
  block[3] = &unk_100415CC8;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);
}

id sub_1000B8D70(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadDeviceInfoImmediately];
}

void sub_1000B8D78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = [(id)objc_opt_class() _workerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B8E2C;
  block[3] = &unk_100415CC8;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);
}

id sub_1000B8E2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reloadDeviceInfoImmediately];
}

void sub_1000B8E34(uint64_t a1)
{
  id v4 = +[MRSharedSettings currentSettings];
  if ([v4 supportAirPlayLeaderInfoSync])
  {
    id v2 = +[MRUserSettings currentSettings];
    unsigned __int8 v3 = [v2 supportMultiplayerHost];

    if (v3) {
      return;
    }
    *(void *)(*(void *)(a1 + 32) + 56) = objc_alloc_init(MRDAirPlayLeaderInfoPublisher);
  }

  _objc_release_x1();
}

void sub_1000B9054(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000B90D4(id a1)
{
  unsigned __int8 v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.MRDDeviceInfoDataSource.workerQueue", v3);
  id v2 = (void *)qword_10047E0C0;
  qword_10047E0C0 = (uint64_t)v1;
}

void sub_1000B9210(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000B9224(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
  objc_sync_exit(v2);

  unsigned __int8 v3 = *(void **)(a1 + 32);

  return [v3 reloadDeviceInfoImmediately];
}

void sub_1000B9388(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000B93A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) deviceInfoDataSource:*(void *)(a1 + 40) deviceInfoDidChange:*(void *)(a1 + 48)];
}

void sub_1000B94E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000BA134(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 deviceInfo];
  id v4 = [v3 deviceUID];
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

BOOL sub_1000BA190(id a1, MRAVOutputDevice *a2)
{
  id v2 = [(MRAVOutputDevice *)a2 groupID];
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_1000BA1C8(id a1, MRAVOutputDevice *a2)
{
  id v2 = [(MRAVOutputDevice *)a2 airPlayGroupID];
  BOOL v3 = v2 != 0;

  return v3;
}

void sub_1000BA254(id a1)
{
  qword_10047E0D0 = +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:1];

  _objc_release_x1();
}

void sub_1000BABCC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _deviceInfoFilePath];
  BOOL v3 = +[NSData dataWithContentsOfFile:v2];
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) _deviceInfoArchiveClasses];
    id v15 = 0;
    uint64_t v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v3 error:&v15];
    id v6 = v15;
    uint64_t v7 = (void *)qword_10047E0E0;
    qword_10047E0E0 = v5;

    if (v6)
    {
      id v8 = _MRLogForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to unarchive device info data", v14, 2u);
      }
    }
  }
  if (!qword_10047E0E0)
  {
    id v9 = [*(id *)(a1 + 32) _readLegacyDeviceInfoIdentifier];
    if (!v9)
    {
      id v9 = [*(id *)(a1 + 32) deviceUID];
      if (!v9)
      {
        BOOL v10 = +[NSUUID UUID];
        id v9 = [v10 UUIDString];
      }
    }
    uint64_t v11 = (void *)MRMediaRemoteCopySenderDefaultGroupUID();
    id v12 = objc_alloc_init((Class)NSMutableDictionary);
    id v13 = (void *)qword_10047E0E0;
    qword_10047E0E0 = (uint64_t)v12;

    [(id)qword_10047E0E0 setObject:v9 forKeyedSubscript:@"identifier"];
    [(id)qword_10047E0E0 setObject:v11 forKeyedSubscript:@"defaultGroupUID"];
    [*(id *)(a1 + 32) _writeDeviceInfo:qword_10047E0E0 toPath:v2];
  }
}

id sub_1000BB268(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:", 0);
}

uint64_t sub_1000BB760(uint64_t a1, void *a2, void *a3)
{
  if (*(void **)(*(void *)(a1 + 32) + 64) == a2) {
    return -1;
  }
  id v4 = a3;
  uint64_t v5 = [a2 playerPath];
  id v6 = [v5 client];
  uint64_t v7 = [v6 displayName];
  id v8 = [v4 playerPath];

  id v9 = [v8 client];
  BOOL v10 = [v9 displayName];
  id v11 = [v7 compare:v10 options:1];

  return (uint64_t)v11;
}

uint64_t sub_1000BB930(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BB940(uint64_t a1)
{
}

uint64_t sub_1000BB948(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 24) copy];

  return _objc_release_x1();
}

uint64_t sub_1000BBA84(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) _playerPathForNowPlayingClient:*(void *)(*(void *)(a1 + 32) + 64)];

  return _objc_release_x1();
}

void sub_1000BBB6C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  id v23 = *(id *)(*(void *)(a1 + 32) + 48);
  id v2 = (void **)(a1 + 40);
  id v3 = *(id *)(a1 + 40);
  if (v23 == v3)
  {
  }
  else
  {
    id v4 = v23;
    unsigned __int8 v5 = [v4 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      uint64_t v6 = *(void *)(*(void *)v1 + 48);
      uint64_t v7 = _MRLogForCategory();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          uint64_t v9 = *(void *)(*(void *)v1 + 112);
          BOOL v10 = (void *)MRPairedDeviceCopyDeltaMinimalDescription();
          *(_DWORD *)long long buf = 138412546;
          uint64_t v25 = v9;
          __int16 v26 = 2112;
          uint64_t v27 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:\n %@", buf, 0x16u);
        }
        id v11 = _MRLogForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          sub_10032DAA8(v1, (uint64_t)v2);
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v12 = *(void *)(*(void *)v1 + 112);
          id v13 = (void *)MRPairedDeviceCopyMinimalDescription();
          *(_DWORD *)long long buf = 138412546;
          uint64_t v25 = v12;
          __int16 v26 = 2112;
          uint64_t v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRDNowPlayingOriginClient] Set: deviceInfo for <%@>:\n %@", buf, 0x16u);
        }
        id v11 = _MRLogForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          sub_10032DA20(v1, (uint64_t)v2);
        }
      }

      uint64_t v14 = *v2;
      id v15 = *(id *)(*(void *)v1 + 48);
      id v16 = [v14 copy];
      uint32_t v17 = *(void **)(*(void *)v1 + 48);
      *(void *)(*(void *)v1 + 48) = v16;

      BOOL v18 = *(void **)(*(void *)v1 + 120);
      *(void *)(*(void *)v1 + 120) = 0;

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)v1 + 192));
      uint64_t v20 = *(void *)v1;
      id v21 = [*(id *)(v20 + 48) copy];
      id v22 = [v15 copy];
      [WeakRetained nowPlayingOriginClient:v20 deviceInfoDidChange:v21 previousDeviceInfo:v22];
    }
  }
}

void sub_1000BBF20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  if (!v3)
  {
    uint64_t v4 = [*(id *)(v2 + 48) data];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 120);
    *(void *)(v5 + 120) = v4;

    id v3 = *(void **)(*(void *)(a1 + 32) + 120);
  }
  uint64_t v7 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v7, v3);
}

void sub_1000BC040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float sub_1000BC058(uint64_t a1)
{
  float result = *(float *)(*(void *)(a1 + 32) + 36);
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1000BC0E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  float v2 = *(float *)(a1 + 40);
  if (vabds_f32(*(float *)(v1 + 36), v2) > 2.2204e-16)
  {
    *(float *)(v1 + 36) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
    LODWORD(v4) = *(_DWORD *)(*(void *)(a1 + 32) + 36);
    objc_msgSend(WeakRetained, "nowPlayingOriginClient:currentRouteVolumeDidChange:", v4);
  }
}

void sub_1000BC21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC234(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 32);
  return result;
}

void sub_1000BC2C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(v1 + 32) != v2)
  {
    *(_DWORD *)(v1 + 32) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
    [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) currentRouteVolumeControlCapabilitiesDidChange:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  }
}

void sub_1000BC3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC404(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 40);
  return result;
}

void sub_1000BC490(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 40);
  if (v1 != *(unsigned __int8 *)(a1 + 40))
  {
    id v3 = +[NSNumber numberWithBool:v1 != 0];

    double v4 = _MRLogForCategory();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 112);
        BOOL v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v6 + 40)];
        uint64_t v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
        int v12 = 138544130;
        uint64_t v13 = v7;
        __int16 v14 = 2114;
        CFStringRef v15 = @"isMuted";
        __int16 v16 = 2112;
        uint32_t v17 = v8;
        __int16 v18 = 2112;
        uint64_t v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v12, 0x2Au);

LABEL_7:
      }
    }
    else if (v5)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 112);
      BOOL v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
      int v12 = 138543874;
      uint64_t v13 = v10;
      __int16 v14 = 2114;
      CFStringRef v15 = @"isMuted";
      __int16 v16 = 2112;
      uint32_t v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v12, 0x20u);
      goto LABEL_7;
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 40) = *(unsigned char *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
    [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) currentRouteIsMutedDidChange:*(unsigned __int8 *)(*(void *)(a1 + 32) + 40)];
  }
}

void sub_1000BC748(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 64)) {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
  }
  int v2 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
  id v3 = [objc_alloc((Class)MRClient) initWithProcessIdentifier:0 bundleIdentifier:v2];
  double v4 = [*(id *)(a1 + 32) existingNowPlayingClientForClient:v3];
  if (v4) {
    [*(id *)(a1 + 40) addObject:v4];
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = *(id *)(*(void *)(a1 + 32) + 16);
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        objc_msgSend(*(id *)(a1 + 40), "addObject:", *(void *)(*((void *)&v10 + 1) + 8 * (void)v9), (void)v10);
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

id sub_1000BC96C(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  obuint64_t j = [*(id *)(a1 + 32) nowPlayingClients];
  id v2 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v15 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v6 = [v5 playerClients];
        id v7 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v17;
          do
          {
            for (uint64_t j = 0; j != v8; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v17 != v9) {
                objc_enumerationMutation(v6);
              }
              long long v11 = *(void **)(*((void *)&v16 + 1) + 8 * (void)j);
              if ([v5 canBeNowPlayingForPlayerClient:v11])
              {
                long long v12 = [v11 snapshotForIsPlaying:1];

                if (v12) {
                  [*(id *)(a1 + 40) addObject:v11];
                }
              }
            }
            id v8 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }
          while (v8);
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v3);
  }

  return [*(id *)(a1 + 40) sortUsingComparator:&stru_10041B040];
}

int64_t sub_1000BCB4C(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  double v4 = a2;
  id v5 = [(MRDNowPlayingPlayerClient *)a3 snapshotForIsPlaying:1];
  id v6 = [v5 date];
  id v7 = [(MRDNowPlayingPlayerClient *)v4 snapshotForIsPlaying:1];

  id v8 = [v7 date];
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

id sub_1000BCC88(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 200);
  if (result != v2)
  {
    double v4 = [result client];

    id v5 = _MRLogForCategory();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(v7 + 112);
        id v9 = [*(id *)(v7 + 200) client];
        long long v10 = [*(id *)(a1 + 40) client];
        int v12 = 138544130;
        uint64_t v13 = v8;
        __int16 v14 = 2114;
        CFStringRef v15 = @"computedNowPlayingClient";
        __int16 v16 = 2112;
        long long v17 = v9;
        __int16 v18 = 2112;
        long long v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v12, 0x2Au);

LABEL_7:
      }
    }
    else if (v6)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 112);
      id v9 = [*(id *)(a1 + 40) client];
      int v12 = 138543874;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      CFStringRef v15 = @"computedNowPlayingClient";
      __int16 v16 = 2112;
      long long v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v12, 0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 200), *(id *)(a1 + 40));
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Updated computedNowPlayingClient.");
  }
  return result;
}

id sub_1000BCEE0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 56);
  if (result != v2)
  {
    double v4 = [result client];

    id v5 = _MRLogForCategory();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(v7 + 112);
        id v9 = [*(id *)(v7 + 56) client];
        long long v10 = [*(id *)(a1 + 40) client];
        int v12 = 138544130;
        uint64_t v13 = v8;
        __int16 v14 = 2114;
        CFStringRef v15 = @"explicitNowPlayingClient";
        __int16 v16 = 2112;
        long long v17 = v9;
        __int16 v18 = 2112;
        long long v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v12, 0x2Au);

LABEL_7:
      }
    }
    else if (v6)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 112);
      id v9 = [*(id *)(a1 + 40) client];
      int v12 = 138543874;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      CFStringRef v15 = @"explicitNowPlayingClient";
      __int16 v16 = 2112;
      long long v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v12, 0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), *(id *)(a1 + 40));
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Updated explicitNowPlayingClient.");
  }
  return result;
}

id sub_1000BD138(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = *(id *)(*(void *)(a1 + 32) + 208);
  if (result != v2)
  {
    double v4 = [result client];

    id v5 = _MRLogForCategory();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(v7 + 112);
        id v9 = [*(id *)(v7 + 208) client];
        long long v10 = [*(id *)(a1 + 40) client];
        int v12 = 138544130;
        uint64_t v13 = v8;
        __int16 v14 = 2114;
        CFStringRef v15 = @"inferredNowPlayingClient";
        __int16 v16 = 2112;
        long long v17 = v9;
        __int16 v18 = 2112;
        long long v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v12, 0x2Au);

LABEL_7:
      }
    }
    else if (v6)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 112);
      id v9 = [*(id *)(a1 + 40) client];
      int v12 = 138543874;
      uint64_t v13 = v11;
      __int16 v14 = 2114;
      CFStringRef v15 = @"inferredNowPlayingClient";
      __int16 v16 = 2112;
      long long v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v12, 0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 208), *(id *)(a1 + 40));
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Updated inferredNowPlayingClient.");
  }
  return result;
}

id sub_1000BD390(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  id result = *(id *)(*(void *)(a1 + 32) + 136);
  if (result != *(id *)(a1 + 40))
  {
    id v3 = [result displayName];

    double v4 = _MRLogForCategory();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 112);
        uint64_t v8 = [*(id *)(v6 + 136) displayName];
        id v9 = [*(id *)(a1 + 40) displayName];
        int v11 = 138544130;
        uint64_t v12 = v7;
        __int16 v13 = 2114;
        CFStringRef v14 = @"overrideNowPlayingClient";
        __int16 v15 = 2112;
        __int16 v16 = v8;
        __int16 v17 = 2112;
        __int16 v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v11, 0x2Au);

LABEL_7:
      }
    }
    else if (v5)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 112);
      uint64_t v8 = [*(id *)(a1 + 40) displayName];
      int v11 = 138543874;
      uint64_t v12 = v10;
      __int16 v13 = 2114;
      CFStringRef v14 = @"overrideNowPlayingClient";
      __int16 v15 = 2112;
      __int16 v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v11, 0x20u);
      goto LABEL_7;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136), *(id *)(a1 + 40));
    return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Updated overrideNowPlayingClient.");
  }
  return result;
}

void sub_1000BD5F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 128);
  if (v2 != *(void *)(a1 + 40))
  {
    id v3 = _MRLogForCategory();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = *(void *)(v5 + 112);
        uint64_t v8 = *(void *)(v5 + 128);
        *(_DWORD *)long long v20 = 138544130;
        *(void *)&void v20[4] = v7;
        *(_WORD *)&v20[12] = 2114;
        *(void *)&v20[14] = @"applicationActivity";
        *(_WORD *)&v20[22] = 2112;
        uint64_t v21 = v8;
        LOWORD(v22) = 2112;
        *(void *)((char *)&v22 + 2) = v6;
        id v9 = "Set: %{public}@ setting %{public}@ from <%@> to <%@>";
        uint64_t v10 = v3;
        uint32_t v11 = 42;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, v20, v11);
      }
    }
    else if (v4)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 112);
      *(_DWORD *)long long v20 = 138543874;
      *(void *)&void v20[4] = v15;
      *(_WORD *)&v20[12] = 2114;
      *(void *)&v20[14] = @"applicationActivity";
      *(_WORD *)&v20[22] = 2112;
      uint64_t v21 = v14;
      id v9 = "Set: %{public}@ setting %{public}@ to <%@>";
      uint64_t v10 = v3;
      uint32_t v11 = 32;
      goto LABEL_10;
    }

    uint64_t v16 = *(void *)(a1 + 32);
    if (*(void *)(v16 + 128))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v16 + 192));
      [WeakRetained nowPlayingOriginClient:*(void *)(a1 + 32) applicationActivityDidEnd:*(void *)(*(void *)(a1 + 32) + 128)];

      uint64_t v16 = *(void *)(a1 + 32);
    }
    objc_msgSend((id)v16, "_onQueue_updateActivityStatus:", 4, *(_OWORD *)v20, *(void *)&v20[16], v21, v22);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), *(id *)(a1 + 40));
    uint64_t v18 = *(void *)(a1 + 32);
    if (*(void *)(v18 + 128))
    {
      id v19 = objc_loadWeakRetained((id *)(v18 + 192));
      [v19 nowPlayingOriginClient:*(void *)(a1 + 32) applicationActivityDidBegin:*(void *)(*(void *)(a1 + 32) + 128)];

      uint64_t v18 = *(void *)(a1 + 32);
    }
    objc_msgSend((id)v18, "_onQueue_reevaluateStateWithReason:", @"Updated applicationActivity.");
    return;
  }
  uint64_t v12 = _MRLogForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 128);
    *(_DWORD *)long long v20 = 138543362;
    *(void *)&void v20[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDNowPlayingOriginClient] Application Activity %{public}@ already set", v20, 0xCu);
  }
}

void sub_1000BD8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BD8E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 128);
  if (v2)
  {
    unsigned int v3 = [v2 creatorProcessID];
    id v5 = [*(id *)(a1 + 32) activeNowPlayingClient];
    BOOL v4 = [v5 client];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3 == [v4 processIdentifier];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_1000BDA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BDA58(uint64_t a1)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v6);
        long long v13 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v8 = objc_msgSend(v7, "playerClients", 0);
        id v9 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v14;
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v14 != v11) {
                objc_enumerationMutation(v8);
              }
              *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) |= [*(id *)(*((void *)&v13 + 1) + 8 * (void)v12) isPlaying];
              uint64_t v12 = (char *)v12 + 1;
            }
            while (v10 != v12);
            id v10 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
          }
          while (v10);
        }

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v4);
  }
}

void sub_1000BDCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BDCC4(uint64_t a1)
{
  id v2 = +[NSDate date];
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 96)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v3;

  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 16);
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        id v10 = objc_msgSend(v9, "playerClients", 0);
        id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v19;
          do
          {
            for (uint64_t j = 0; j != v12; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v19 != v13) {
                objc_enumerationMutation(v10);
              }
              long long v15 = *(void **)(*((void *)&v18 + 1) + 8 * (void)j);
              [v15 timeSincePlaying];
              if (v16 < *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
              {
                [v15 timeSincePlaying];
                *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v17;
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
          }
          while (v12);
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v6);
  }
}

void sub_1000BDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BDF78(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 96))
  {
    id v3 = +[NSDate date];
    [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 96)];
  }
  else
  {
    id v3 = +[NSDate distantPast];
    [v3 timeIntervalSinceNow];
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
}

void sub_1000BE1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BE1B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) client];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 40) existingNowPlayingClientForPlayerPath:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 40), "_onQueue_addNowPlayingClient:", *(void *)(a1 + 32));
      _objc_release_x1();
    }
  }
}

id sub_1000BE414(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "copy", 0);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(a1 + 32), "_onQueue_removeNowPlayingClient:", *(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"RemoveAllClients");
}

uint64_t sub_1000BE5C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) existingNowPlayingClientForClient:*(void *)(a1 + 40)];
  if (v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_removeNowPlayingClient:", v2);
    objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"Removed nowPlayingClient.");
  }

  return _objc_release_x1();
}

void sub_1000BE994(void *a1)
{
  if ([*(id *)(a1[4] + 104) isLocal])
  {
    id v8 = +[MRUserSettings currentSettings];
    [v8 updateDefaultSupportedCommandsData:a1[5] forClient:a1[6]];
  }
  else
  {
    uint64_t v2 = *(void **)(a1[4] + 80);
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v4 = a1[4];
      uint64_t v5 = *(void **)(v4 + 80);
      *(void *)(v4 + 80) = v3;

      uint64_t v2 = *(void **)(a1[4] + 80);
    }
    uint64_t v6 = a1[5];
    uint64_t v7 = a1[6];
    [v2 setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_1000BEB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BEB7C(void *a1)
{
  if ([*(id *)(a1[4] + 104) isLocal])
  {
    +[MRUserSettings currentSettings];
    uint64_t v2 = [(id)objc_claimAutoreleasedReturnValue() defaultSupportedCommandsDataForClient:a1[5]];
    uint64_t v3 = *(void *)(a1[6] + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  else
  {
    *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 80) objectForKeyedSubscript:a1[5]];
  }

  return _objc_release_x1();
}

void sub_1000BEE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BEE58(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) isLocal])
  {
    +[MRUserSettings currentSettings];
    uint64_t v2 = [(id)objc_claimAutoreleasedReturnValue() defaultSupportedCommandsData];
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  }

  return _objc_release_x1();
}

void sub_1000BEEF4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = +[MRCommandInfo commandInfosFromData:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];

  LODWORD(v6) = MRMediaRemoteApplicationIsSystemApplication();
  if (v6) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

id sub_1000BEFF0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) removeAllObjects];
}

uint64_t sub_1000BF094(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 96) = [*(id *)(a1 + 40) copy];

  return _objc_release_x1();
}

void sub_1000BF1C0(uint64_t a1)
{
}

uint64_t sub_1000BF264(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 176) = objc_retainBlock(*(id *)(a1 + 40));

  return _objc_release_x1();
}

uint64_t sub_1000BF340(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 184) = objc_retainBlock(*(id *)(a1 + 40));

  return _objc_release_x1();
}

id sub_1000BF438(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(*(void *)(a1 + 32) + 144), @"setNowPlayingDataSource");
}

id sub_1000BF4E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(a1 + 40), @"nowPlayingApplicationDidChange");
}

id sub_1000BF590(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(a1 + 40), @"nowPlayingApplicationPlaybackStateDidChange");
}

id sub_1000BF63C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(a1 + 40), @"nowPlayingDataSourceNowPlayingApplicationsPlaybackStateDidChange");
}

id sub_1000BF6E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(a1 + 40), @"nowPlayingDataSourceNowPlayingSessionsPlaybackStateDidChange");
}

void sub_1000BFAA0(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_calculateComputedNowPlayingClient");
  [*(id *)(a1 + 32) setComputedNowPlayingClient:v2];

  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc((Class)NSString);
  id v8 = [*(id *)(a1 + 40) name];
  id v5 = [*(id *)(a1 + 40) userInfo];
  uint64_t v6 = MRGetPlayerPathFromUserInfo();
  id v7 = [v4 initWithFormat:@"%@-%@", v8, v6];
  objc_msgSend(v3, "_onQueue_reevaluateStateWithReason:", v7);
}

id sub_1000BFC30(uint64_t a1)
{
  uint64_t v2 = +[NSDate date];
  uint64_t v3 = [v2 laterDate:*(void *)(*(void *)(a1 + 32) + 96)];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 96);
  *(void *)(v4 + 96) = v3;

  id result = [*(id *)(*(void *)(a1 + 32) + 104) isLocal];
  if (result)
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    return _objc_msgSend(v7, "_onQueue_maybeSavePlaybackStateForNotification:", v8);
  }
  return result;
}

id sub_1000BFD88(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_maybeSetupPlaybackTimeoutTimerForNotification:", *(void *)(a1 + 40));
}

id sub_1000BFEB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(*(void *)(a1 + 32) + 144), *(void *)(a1 + 40));
}

id sub_1000BFF7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"PlayerPictureInPictureEnabledDidChange");
}

id sub_1000C0044(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"ActivePlayerDidChange");
}

id sub_1000C010C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateStateWithReason:", @"NowPlayingApplicationDidUnregisterCanBeNowPlaying");
}

id sub_1000C0270(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadInferredStateFromDataSource:reason:", *(void *)(*(void *)(a1 + 32) + 144), *(void *)(a1 + 40));
}

id sub_1000C13B4(id a1, MRDNowPlayingPlayerClient *a2)
{
  return [(MRDNowPlayingPlayerClient *)a2 playerPath];
}

id sub_1000C13BC(id a1, MRDNowPlayingPlayerClient *a2)
{
  return [(MRDNowPlayingPlayerClient *)a2 playerPath];
}

uint64_t sub_1000C18B8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 104) isLocal])
  {
    uint64_t v2 = +[MRUserSettings currentSettings];
    unsigned __int8 v3 = [v2 computeNowPlayingApplication];

    if (v3) {
      return 1;
    }
  }
  uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 104) isLocallyHosted];
  if (result)
  {
    id v5 = +[MRUserSettings currentSettings];
    id v6 = [v5 computeDevicePlaybackSessionID];

    return (uint64_t)v6;
  }
  return result;
}

void sub_1000C1950(uint64_t a1)
{
  uint64_t v2 = +[NSUUID UUID];
  uint64_t v3 = [v2 UUIDString];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 160);
  *(void *)(v4 + 160) = v3;

  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  long long v10 = sub_1000C1A30;
  long long v11 = &unk_1004158D8;
  id v6 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, &v8);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
  objc_msgSend(WeakRetained, "nowPlayingOriginClientPlaybackDidTimeout:", *(void *)(a1 + 32), v8, v9, v10, v11, v12);
}

id sub_1000C1A30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNowPlayingAppMaybeDidChange:*(void *)(a1 + 40)];
}

void sub_1000C1B64(id a1)
{
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v1 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.originClient.userDefaults.serialQueue", v1);
  uint64_t v3 = (void *)qword_10047E0F0;
  qword_10047E0F0 = (uint64_t)v2;
}

void sub_1000C1BE8(uint64_t a1)
{
  dispatch_queue_t v2 = +[MRUserSettings currentSettings];
  [v2 setLocalPlaybackState:*(unsigned int *)(a1 + 40)];

  LODWORD(v2) = MRMediaRemotePlaybackStateIsAdvancing();
  if (v2 != MRMediaRemotePlaybackStateIsAdvancing())
  {
    id v3 = +[MRUserSettings currentSettings];
    [v3 setLocalLastPlayingDate:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1000C1F90(uint64_t a1)
{
  int v2 = _os_feature_enabled_impl();
  id v3 = &stru_10041B178;
  if (v2) {
    id v3 = &stru_10041B130;
  }
  *(void *)(*(void *)(a1 + 32) + 176) = v3;

  return _objc_release_x1();
}

void sub_1000C1FF8(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [(MRDApplicationConnection *)v6 context];
  long long v10 = [(MRDApplicationConnection *)v6 context];
  long long v11 = [v10 destinationPlayerPath];
  uint64_t v12 = [v11 client];

  id v13 = [v12 bundleIdentifier];
  long long v14 = (void *)MRMediaRemoteCopyLocalizedDisplayID();

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000C2168;
  v19[3] = &unk_10041B158;
  long long v20 = v6;
  id v21 = v9;
  long long v22 = v7;
  id v23 = v8;
  long long v15 = v7;
  id v16 = v9;
  uint64_t v17 = v6;
  id v18 = v8;
  sub_1001693F4(v14, 0, v19, 7.0);
}

void sub_1000C2168(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    objc_initWeak(&location, v5);
    [*(id *)(a1 + 32) setType:1];
    long long v19 = _NSConcreteStackBlock;
    uint64_t v20 = 3221225472;
    id v21 = sub_1000C2410;
    long long v22 = &unk_100416758;
    objc_copyWeak(&v23, &location);
    [*(id *)(a1 + 32) setServerBoundMessageHandler:&v19];
    id v7 = objc_msgSend(v5, "bundleIdentifier", v19, v20, v21, v22);
    sub_100169F18(v7);

    id v8 = +[MRDMediaRemoteServer server];
    uint64_t v9 = [v8 nowPlayingServer];
    long long v10 = [*(id *)(a1 + 40) destinationPlayerPath];
    long long v11 = [v9 resolveExistingPlayerPath:v10];

    if ([v11 isResolved])
    {
      MRCreateXPCMessage();
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      id v13 = objc_alloc((Class)MRApplicationConnectionContext);
      long long v14 = [*(id *)(a1 + 40) identifier];
      long long v15 = [*(id *)(a1 + 40) service];
      id v16 = [v13 initWithIdentifier:v14 service:v15 destinationPlayerPath:v11];

      id v17 = [objc_alloc((Class)MRCreateApplicationConnectionMessage) initWithConnectionContext:v16 requestInfo:*(void *)(a1 + 48)];
      MRAddProtobufToXPCMessage();
      [v5 relayXPCMessage:v12 andReply:0];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 56);
      id v12 = [objc_alloc((Class)NSError) initWithMRError:42];
      (*(void (**)(uint64_t, id))(v18 + 16))(v18, v12);
    }

    objc_destroyWeak(&v23);
    objc_destroyWeak(&location);
  }
}

void sub_1000C23D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C2410(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    MRCreateXPCMessage();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    MRAddProtobufToXPCMessage();
    [WeakRetained relayXPCMessage:v7 andReply:0];
  }
  else
  {
    id v7 = [objc_alloc((Class)NSError) initWithMRError:178];
    [v8 invalidate:v7];
  }
}

void sub_1000C24D8(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = [objc_alloc((Class)NSError) initWithMRError:132];
  (*((void (**)(id, id))a4 + 2))(v5, v6);
}

void sub_1000C2820(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1000C283C(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

id sub_1000C2C6C(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v2 uniqueIdentifier];
  id v5 = [v3 containsUID:v4];

  return v5;
}

void sub_1000C366C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [*(id *)(a1 + 40) irCandidateFor:*(void *)(a1 + 48)];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000C3940;
    v16[3] = &unk_10041B1F0;
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v17 = v5;
    id v18 = v3;
    id v6 = objc_retainBlock(v16);
    id v7 = [v5 candidateIdentifier];

    if (v7)
    {
      id v8 = [v4 bundleID];
      if (v8)
      {
        uint64_t v9 = +[MRDMediaBundleManager shared];
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1000C3A18;
        v12[3] = &unk_10041B218;
        id v8 = v8;
        id v13 = v8;
        id v14 = v4;
        long long v15 = v6;
        [v9 queryEligibilityOf:v8 completionHandler:v12];
      }
      else
      {
        ((void (*)(void *, id))v6[2])(v6, v4);
      }
    }
    else
    {
      id v8 = _MRLogForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412802;
        id v20 = v4;
        __int16 v21 = 2112;
        long long v22 = v5;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD EVENT: MR is DROPPING %@ for candidate %@, no candidate identifier - %@", buf, 0x20u);
      }
    }
  }
  else
  {
    long long v10 = _MRLogForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10032DD24((uint64_t)v4, v10);
    }

    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10032DC80((uint64_t)v4, v5);
    }
  }
}

void sub_1000C3940(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD EVENT: MR is adding %@ for candidate %@", (uint8_t *)&v6, 0x16u);
  }

  [*(id *)(a1 + 40) addEvent:v3 forCandidate:*(void *)(a1 + 32)];
}

void sub_1000C3A18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032DDC8(a1, (uint64_t)v6, v7);
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "setIsEligibleApp:", objc_msgSend(v5, "isEligible"));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000C3AC4(id a1, IRSession *a2)
{
  int v2 = a2;
  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD requestCurrentContext", v4, 2u);
  }

  [(IRSession *)v2 requestCurrentContext];
}

void sub_1000C3BD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD requestCurrentContextWithBundleID:%@", (uint8_t *)&v6, 0xCu);
  }

  [*(id *)(a1 + 40) setAllowedContextUpdates:1];
  [*(id *)(a1 + 40) setBundleIdentifierPendingUpdate:*(void *)(a1 + 32)];
  if (objc_opt_respondsToSelector()) {
    [v3 requestCurrentContextWithBundleID:*(void *)(a1 + 32)];
  }
  else {
    [v3 requestCurrentContext];
  }
}

void sub_1000C3D6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [*(id *)(a1 + 32) donateAsCandidate];
  uint64_t v5 = _MRLogForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD updateRouteCandidate: %@", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v5 = [*(id *)(a1 + 40) irCandidateFor:*(void *)(a1 + 32)];
    [v3 updateCandidate:v5];
  }
  else if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD NOT donating %@", (uint8_t *)&v9, 0xCu);
  }
}

void sub_1000C3F38(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = objc_msgSend(*(id *)(a1 + 32), "msv_filter:", &stru_10041B2E8);
  uint64_t v5 = +[NSUUID UUID];
  BOOL v6 = [v5 UUIDString];

  id v31 = v3;
  if ([v4 count])
  {
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_1000C43BC;
    v40[3] = &unk_10041B310;
    uint64_t v30 = a1;
    v40[4] = *(void *)(a1 + 40);
    uint64_t v7 = objc_msgSend(v4, "msv_map:", v40);
    uint64_t v8 = +[NSSet setWithArray:v7];

    int v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v4 count];
      *(_DWORD *)long long buf = 134218242;
      id v44 = v10;
      __int16 v45 = 2112;
      __int16 v46 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD will updateRouteCandidates (%lu) [batch: %@]", buf, 0x16u);
    }

    uint64_t v29 = (void *)v8;
    [v3 updateCandidates:v8];
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v11 = v4;
    id v12 = [v11 countByEnumeratingWithState:&v36 objects:v42 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(void **)(*((void *)&v36 + 1) + 8 * i);
          id v17 = _MRLogForCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412546;
            id v44 = v16;
            __int16 v45 = 2112;
            __int16 v46 = v6;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD updateRouteCandidate: %@ [batch: %@]", buf, 0x16u);
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v36 objects:v42 count:16];
      }
      while (v13);
    }

    id v3 = v31;
    a1 = v30;
  }
  id v18 = [v4 count];
  if (v18 != [*(id *)(a1 + 32) count])
  {
    long long v19 = objc_msgSend(*(id *)(a1 + 32), "msv_filter:", &stru_10041B330);
    id v20 = _MRLogForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = [v19 count];
      *(_DWORD *)long long buf = 134218242;
      id v44 = v21;
      __int16 v45 = 2112;
      __int16 v46 = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD will NOT donate (%lu) [batch: %@]", buf, 0x16u);
    }

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v22 = v19;
    id v23 = [v22 countByEnumeratingWithState:&v32 objects:v41 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v24; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v33 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void **)(*((void *)&v32 + 1) + 8 * (void)j);
          uint64_t v28 = _MRLogForCategory();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412546;
            id v44 = v27;
            __int16 v45 = 2112;
            __int16 v46 = v6;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD NOT donating %@ [batch: %@]", buf, 0x16u);
          }
        }
        id v24 = [v22 countByEnumeratingWithState:&v32 objects:v41 count:16];
      }
      while (v24);
    }

    id v3 = v31;
  }
}

BOOL sub_1000C43B4(id a1, MRRouteRepresentable *a2)
{
  return [(MRRouteRepresentable *)a2 donateAsCandidate];
}

id sub_1000C43BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) irCandidateFor:a2];
}

BOOL sub_1000C43C8(id a1, MRRouteRepresentable *a2)
{
  return [(MRRouteRepresentable *)a2 donateAsCandidate] ^ 1;
}

int64_t sub_1000C43E8(id a1, IRCandidateResult *a2, IRCandidateResult *a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = a3;
  id v6 = [(IRCandidateResult *)v4 classification];
  if ((uint64_t)v6 <= (uint64_t)[(IRCandidateResult *)v5 classification])
  {
    id v8 = [(IRCandidateResult *)v4 classification];
    int64_t v7 = (uint64_t)v8 < (uint64_t)[(IRCandidateResult *)v5 classification];
  }
  else
  {
    int64_t v7 = -1;
  }

  return v7;
}

id sub_1000C446C(uint64_t a1, uint64_t a2)
{
  return +[MRDIRRouteRecommendation recommendationWithIRCandidateResult:a2 contextIdentifier:*(void *)(a1 + 32)];
}

IRNode *__cdecl sub_1000C455C(id a1, MRRouteNodeRepresentable *a2)
{
  int v2 = a2;
  id v3 = objc_alloc_init((Class)IRNode);
  unsigned int v4 = [(MRRouteNodeRepresentable *)v2 avOutputDeviceIdentifier];
  [v3 setAvOutpuDeviceIdentifier:v4];

  uint64_t v5 = [(MRRouteNodeRepresentable *)v2 rapportIdentifier];
  [v3 setRapportIdentifier:v5];

  id v6 = [(MRRouteNodeRepresentable *)v2 idsIdentifier];
  [v3 setIdsIdentifier:v6];

  id v7 = [(MRRouteNodeRepresentable *)v2 isLocal];
  [v3 setIsLocal:v7];

  return (IRNode *)v3;
}

void sub_1000C462C(uint64_t a1)
{
  int v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD Received first unlock notification", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_initializeSessionWithCompletion:", *(void *)(a1 + 32));
}

void sub_1000C482C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = _MRLogForCategory();
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD createRunningSession: service token found: %@", (uint8_t *)&v10, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_onQueue_createRunningSessionWithServiceToken:", v3);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [*(id *)(a1 + 32) session];
    (*(void (**)(uint64_t, id, void))(v6 + 16))(v6, v7, 0);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032DE88();
    }

    id v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      sub_10032DE54();
    }

    uint64_t v9 = *(void *)(a1 + 40);
    id v7 = [objc_alloc((Class)NSError) initWithMRError:175];
    (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v7);
  }
}

void sub_1000C4BA0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v2 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v2();
  }
  else
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10032DEF0();
    }

    unsigned int v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_10032DEBC();
    }
  }
}

void sub_1000C4DC8(id *a1)
{
  int v2 = [a1[4] configuration];

  if (!v2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10032DF58();
    }

    unsigned int v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_10032DF24();
    }
  }
  uint64_t v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = a1[5];
    int v21 = 138412290;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD session:didFailWithError: %@", (uint8_t *)&v21, 0xCu);
  }

  id v7 = a1[4];
  id v8 = [a1[6] session];
  if (v7 == v8)
  {
    uint64_t v9 = [a1[5] domain];
    unsigned int v10 = [v9 isEqualToString:IRErrorDomain];

    if (v10)
    {
      if ([a1[5] code] == (id)-12887)
      {
        id v11 = _MRLogForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = a1[4];
          int v21 = 134217984;
          id v22 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[MRDRRC].IRD Session %p invalidated, recreating", (uint8_t *)&v21, 0xCu);
        }

        objc_msgSend(a1[6], "_onQueue_invalidateSession");
        [a1[6] initializeSessionIfNeededWithCompletion:0];
      }
      else if ([a1[5] code] == (id)-12889)
      {
        id v13 = [a1[4] configuration];
        uint64_t v14 = [v13 serviceToken];

        long long v15 = _MRLogForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          id v17 = a1[4];
          id v18 = a1[5];
          int v21 = 138412802;
          id v22 = v14;
          __int16 v23 = 2048;
          id v24 = v17;
          __int16 v25 = 2112;
          id v26 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[MRDRRC].IRD Dynamic token %@ invalidated for session %p, discarding session and giving up - %@", (uint8_t *)&v21, 0x20u);
        }

        id v16 = _MRLogForCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          id v19 = a1[4];
          id v20 = a1[5];
          int v21 = 138412802;
          id v22 = v14;
          __int16 v23 = 2048;
          id v24 = v19;
          __int16 v25 = 2112;
          id v26 = v20;
          _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Dynamic token %@ invalidated for session %p, discarding session and giving up - %@", (uint8_t *)&v21, 0x20u);
        }

        [a1[6] setSession:0];
      }
    }
  }
  else
  {
  }
}

void sub_1000C5564(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1000C57CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000C5F4C(id a1)
{
  qword_10047E100 = +[NSSet setWithArray:&off_100438620];

  _objc_release_x1();
}

void sub_1000C6014(id a1)
{
  qword_10047E110 = +[NSSet setWithArray:&off_100438638];

  _objc_release_x1();
}

uint64_t sub_1000C633C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C634C(uint64_t a1)
{
}

void sub_1000C6354(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSString);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(v5 + 32);
  uint64_t v7 = *(unsigned int *)(v5 + 36);
  id v12 = [*(id *)(v5 + 56) allValues];
  id v8 = MRCreateIndentedDebugDescriptionFromArray();
  id v9 = [v2 initWithFormat:@"<%p> %@ {\nregisteredForNowPlayingCount = %u\nregisteredForVolumeCount = %u\ncoalescingStates = %@\n}>", v3, v4, v6, v7, v8];
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1000C66C4(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 48) nowPlayingClient];
  id v2 = [v4 client];
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  [v3 setClientProperties:v2];
}

void sub_1000C6B60(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 48) playerClient];
  id v2 = [v4 supportedRemoteControlCommands];
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  [v3 setSupportedCommands:v2];
}

void sub_1000C6CF4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 48) playerClient];
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v2 playbackState]);
  [v6 setPlaybackState:v3];

  id v4 = [*(id *)(a1 + 48) playerClient];
  uint64_t v5 = [v4 playbackStateTimestamp];
  [v6 setPlaybackStateTimestamp:v5];
}

void sub_1000C6EDC(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 48) playerClient];
  id v2 = [v4 playbackQueue];
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  [v3 setPlaybackQueue:v2];
}

void sub_1000C7070(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 48) playerClient];
  id v2 = [v4 playbackQueueCapabilities];
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  [v3 setPlaybackQueueCapabilities:v2];
}

void sub_1000C7220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setContentItems:v1];
}

void sub_1000C73B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setContentItemsArtwork:v1];
}

void sub_1000C751C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 40) player];
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_stateForPlayerPath:", *(void *)(a1 + 40));
  [v2 setPlayerProperties:v3];
}

id sub_1000C76B0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

unsigned __int8 *sub_1000C7738(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 5);
  if (v1 == 2) {
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "_onQueue_setReceiveVolumeControlUpdates:", result[48]);
  }
  if (v1 == 1) {
    return (unsigned __int8 *)_objc_msgSend(*((id *)result + 4), "_onQueue_setReceiveNowPlayingUpdates:", result[48]);
  }
  return result;
}

void sub_1000C7B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C7BB4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _handleVolumeAvailabilityDidChangeNotification:v5];
  }
}

id sub_1000C7FD8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_notifyCoalescedPlayerPath:", *(void *)(a1 + 40));
}

void sub_1000C8180(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 48));
  [WeakRetained stateObserver:a1[4] didReceiveCoalescedNowPlayingStateChange:a1[5] playerPath:a1[6]];
}

id sub_1000CAC1C()
{
  if (qword_10047E128 != -1) {
    dispatch_once(&qword_10047E128, &stru_10041B560);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E130, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E120, *v0);
  }
  off_100476898 = (uint64_t (*)())sub_1000CACAC;
  uint64_t v1 = (void *)qword_10047E120;

  return v1;
}

id sub_1000CACAC()
{
  return (id)qword_10047E120;
}

void sub_1000CACB8(id a1)
{
  qword_10047E130 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_1000CB01C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateShouldShowLockScreenForReason:", @"Startup");
}

void sub_1000CB0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CB0F0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 72);
  return result;
}

id sub_1000CB1B0(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_isLockScreenWidgetVisible");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_1000CB288(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "lockScreenController:lockScreenWidgetActiveDidChange:");
}

uint64_t sub_1000CB344(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 73);
  return result;
}

uint64_t sub_1000CB3D0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 73) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1000CB4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CB504(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    [WeakRetained setPreviousPlayerPath:0];
    id v2 = objc_alloc((Class)NSString);
    id v3 = [v5 previousPlayerPath];
    id v4 = [v2 initWithFormat:@"Previous playerPath %@ invalidated", v3];
    objc_msgSend(v5, "_onQueue_reevaluateShouldShowLockScreenForReason:", v4);

    id WeakRetained = v5;
  }
}

void sub_1000CB904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000CB928(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "lockScreenController:playerPathDidChange:");
}

void sub_1000CB934(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_onSerialQueue_restoreElectedPlayer");
    id WeakRetained = v2;
  }
}

id sub_1000CBA10(uint64_t a1)
{
  if (([*(id *)(a1 + 32) personalDeviceWasRecentlyAttached] & 1) == 0)
  {
    [*(id *)(a1 + 40) setHasPresentedForCurrentPersonalDevices:0];
    [*(id *)(a1 + 40) setShouldFinishPresentationForCurrentPersonalDevices:0];
  }
  id v2 = *(void **)(a1 + 40);

  return objc_msgSend(v2, "_onQueue_reevaluateShouldShowLockScreenForReason:", @"Personal devices changed");
}

id sub_1000CBAE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reevaluateShouldShowLockScreenForReason:", @"Lock screen content changed");
}

id sub_1000CBCF0(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 40));
  id result = [*(id *)(a1 + 40) isEqual:*(void *)(*(void *)(a1 + 32) + 24)];
  if ((result & 1) == 0)
  {
    *(void *)(*(void *)(a1 + 32) + 112) = *(void *)(a1 + 48);
    *(void *)(*(void *)(a1 + 32) + 120) = *(void *)(a1 + 56);
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v3[13];
    return [v3 setPlayerPath:v4];
  }
  return result;
}

void sub_1000CBE00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  MRGetPlayerPathFromUserInfo();
  id v10 = (id)objc_claimAutoreleasedReturnValue();

  if ([*(id *)(*(void *)(a1 + 40) + 104) isEqual:v10])
  {
    id v3 = [*(id *)(a1 + 32) userInfo];
    uint64_t v4 = [v3 objectForKeyedSubscript:kMRMediaRemotePlayerIsPlayingDidChangeNotification];
    unsigned int v5 = [v4 BOOLValue];

    id v6 = *(void **)(a1 + 40);
    id v7 = objc_alloc((Class)NSString);
    CFStringRef v8 = @"stopped";
    if (v5) {
      CFStringRef v8 = @"started";
    }
    id v9 = [v7 initWithFormat:@"ElectedPlayer %@ playback", v8];
    objc_msgSend(v6, "_onQueue_reevaluateShouldShowLockScreenForReason:", v9);
  }
}

void sub_1000CC558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CC580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDLockScreenController] lockScreenAssertion error %{public}@", (uint8_t *)&v7, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setAssertion:0];
    [v6 delayCreateAssertion];
  }
}

void sub_1000CC720(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained createAssertion];
    id WeakRetained = v2;
  }
}

Class sub_1000CC810()
{
  if (qword_10047E148 != -1) {
    dispatch_once(&qword_10047E148, &stru_10041B5A8);
  }
  Class result = objc_getClass("SBSLockScreenContentAssertion");
  qword_10047E140 = (uint64_t)result;
  off_100476960 = (uint64_t (*)())sub_1000CC874;
  return result;
}

id sub_1000CC874()
{
  return (id)qword_10047E140;
}

void sub_1000CC880(id a1)
{
  qword_10047E150 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
}

id sub_1000CC8AC()
{
  if (qword_10047E148 != -1) {
    dispatch_once(&qword_10047E148, &stru_10041B5A8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E150, "SBSLockScreenContentAssertionSlotPlatter");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E138, *v0);
  }
  off_100476968 = (uint64_t (*)())sub_1000CC93C;
  uint64_t v1 = (void *)qword_10047E138;

  return v1;
}

id sub_1000CC93C()
{
  return (id)qword_10047E138;
}

id sub_1000CC948()
{
  if (qword_10047E158 != -1) {
    dispatch_once(&qword_10047E158, &stru_10041B5C8);
  }
  dispatch_semaphore_t v0 = (void *)qword_10047E160;

  return v0;
}

void sub_1000CC99C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.MediaRemote.MRDConnectionLifetimeSubsystem.targetQueue", v3);
  id v2 = (void *)qword_10047E160;
  qword_10047E160 = (uint64_t)v1;
}

id sub_1000CCC58(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [*(id *)(v3 + 112) displayName];
    signed int v5 = [*(id *)(*(void *)(a1 + 32) + 112) identifier];
    int v10 = 134218498;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    id v13 = v4;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDCLC] <%p> Initializing for origin-%@-%ld.", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(a1 + 32) registerForChanges];
  id v6 = +[MRDDisplayMonitor sharedMonitor];
  unsigned int v7 = [v6 displayOn];

  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = 0;
  }
  [*(id *)(a1 + 32) setDeviceState:v8];
  [*(id *)(a1 + 32) _adjustPlaybackTimerIfNeeded];
  [*(id *)(a1 + 32) _adjustContinuousPlaybackDetectionTimerIfNeeded];
  return [*(id *)(a1 + 32) evaluateShouldDisconnectWithReason:@"Init"];
}

id sub_1000CCF48(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = *(void **)(a1 + 40);
  signed int v5 = [v4 origin];
  [v2 appendFormat:@"<%@:%p origin=<%@>, deviceState=<%lu>, hasDeferredDisconnectionDueToDeviceState=<%u>", v3, v4, v5, objc_msgSend(*(id *)(a1 + 40), "deviceState"), objc_msgSend(*(id *)(a1 + 40), "hasDeferredDisconnectionDueToDeviceState")];

  id v6 = [*(id *)(a1 + 40) maintainReason];

  if (v6)
  {
    unsigned int v7 = *(void **)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 40) maintainReason];
    [v7 appendFormat:@", maintainReason=<%@>", v8];
  }
  id v9 = [*(id *)(a1 + 40) previousMaintainReason];

  if (v9)
  {
    int v10 = *(void **)(a1 + 32);
    uint64_t v11 = [*(id *)(a1 + 40) previousMaintainReason];
    [v10 appendFormat:@", previousMaintainReason=<%@>", v11];
  }
  __int16 v12 = [*(id *)(a1 + 40) playbackTimer];
  unsigned int v13 = [v12 isValid];

  if (v13)
  {
    __int16 v14 = *(void **)(a1 + 32);
    uint64_t v15 = [*(id *)(a1 + 40) playbackTimer];
    [v15 timeRemaining];
    [v14 appendFormat:@", playbackTimer=<%lf seconds remaining>", v16];
  }
  id v17 = [*(id *)(a1 + 40) continuousPlaybackDetectionTimer];
  unsigned int v18 = [v17 isValid];

  if (v18)
  {
    id v19 = *(void **)(a1 + 32);
    id v20 = [*(id *)(a1 + 40) continuousPlaybackDetectionTimer];
    [v20 timeRemaining];
    [v19 appendFormat:@", continuousPlaybackDetectionTimer=<%lf seconds remaining>", v21];
  }
  id v22 = [*(id *)(a1 + 40) disconnectTimer];
  unsigned int v23 = [v22 isValid];

  if (v23)
  {
    id v24 = *(void **)(a1 + 32);
    __int16 v25 = [*(id *)(a1 + 40) disconnectTimer];
    [v25 timeRemaining];
    [v24 appendFormat:@", disconnectTimer=<%lf seconds remaining>", v26];
  }
  if ([*(id *)(a1 + 40) disconnected]) {
    [*(id *)(a1 + 32) appendString:@", <Disconnected>"];
  }
  uint64_t v27 = *(void **)(a1 + 32);

  return [v27 appendString:@">"];
}

void sub_1000CD84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CD878(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = [WeakRetained disconnectTimer];

    if (v4)
    {
      if ([v3 deviceState])
      {
        signed int v5 = _MRLogForCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          id v6 = [*(id *)(a1 + 32) displayName];
          signed int v7 = [*(id *)(a1 + 32) identifier];
          int v8 = 134218498;
          id v9 = v3;
          __int16 v10 = 2112;
          uint64_t v11 = v6;
          __int16 v12 = 2048;
          uint64_t v13 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDCLC] <%p> Defer disconnect for origin-%@-%ld due to device state.", (uint8_t *)&v8, 0x20u);
        }
        [v3 setHasDeferredDisconnectionDueToDeviceState:1];
      }
      else
      {
        [v3 disconnectOrigin:*(void *)(a1 + 32)];
      }
    }
  }
}

void sub_1000CDBA4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v5 = [v2 objectForKeyedSubscript:kMRMediaRemoteOriginUserInfoKey];

  id v3 = *(id *)(*(void *)(a1 + 40) + 112);
  if (v5 == v3)
  {

    goto LABEL_5;
  }
  unsigned int v4 = [v5 isEqual:v3];

  if (v4) {
LABEL_5:
  }
    [*(id *)(a1 + 40) evaluateShouldDisconnectWithReason:@"DeviceInfo changed"];
}

void sub_1000CDD10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v7 = [v2 objectForKeyedSubscript:kMRNowPlayingPlayerPathUserInfoKey];

  id v3 = [v7 origin];
  id v4 = *(id *)(*(void *)(a1 + 40) + 112);
  if (v3 == v4)
  {

    goto LABEL_5;
  }
  id v5 = v4;
  unsigned int v6 = [v3 isEqual:v4];

  if (v6)
  {
LABEL_5:
    [*(id *)(a1 + 40) _adjustPlaybackTimerIfNeeded];
    [*(id *)(a1 + 40) _adjustContinuousPlaybackDetectionTimerIfNeeded];
    [*(id *)(a1 + 40) evaluateShouldDisconnectWithReason:@"isPlayingDidChange"];
  }
}

void sub_1000CDFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CE020(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained evaluateShouldDisconnectWithReason:@"Has not played recently"];
}

void sub_1000CE274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CE298(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained evaluateShouldDisconnectWithReason:@"Continuous Playback Detected"];
}

id sub_1000CE368(uint64_t a1)
{
  id v2 = +[MRDDisplayMonitor sharedMonitor];
  unsigned int v3 = [v2 displayOn];

  id v4 = +[MRDDisplayMonitor sharedMonitor];
  if ([v4 lockScreenForegrounded])
  {
    id v5 = +[MRDDisplayMonitor sharedMonitor];
    unsigned int v6 = [v5 controlCenterForegrounded] ^ 1;
  }
  else
  {
    unsigned int v6 = 0;
  }

  id result = [*(id *)(a1 + 32) deviceState];
  if (result == (id)2)
  {
    if (v3) {
      return result;
    }
    [*(id *)(a1 + 32) setDeviceState:0];
    CFStringRef v9 = @"InUse -> ScreenOff";
  }
  else if (result == (id)1)
  {
    if (v3)
    {
      if (v6) {
        return result;
      }
      [*(id *)(a1 + 32) setDeviceState:2];
      CFStringRef v9 = @"CoverSheet -> InUse";
    }
    else
    {
      [*(id *)(a1 + 32) setDeviceState:0];
      CFStringRef v9 = @"CoverSheet -> ScreenOff";
    }
  }
  else
  {
    if (result || !v3) {
      return result;
    }
    int v8 = *(void **)(a1 + 32);
    if (v6)
    {
      [v8 setDeviceState:1];
      CFStringRef v9 = @"ScreenOff -> CoverSheet";
    }
    else
    {
      [v8 setDeviceState:2];
      CFStringRef v9 = @"ScreenOff -> InUse";
    }
  }
  __int16 v10 = *(void **)(a1 + 32);

  return [v10 evaluateShouldDisconnectWithReason:v9];
}

void sub_1000CE574(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  unsigned int v3 = [v2 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointTypeUserInfoKey];
  unsigned int v4 = [v3 intValue];

  if (!v4)
  {
    id v5 = *(void **)(a1 + 40);
    [v5 evaluateShouldDisconnectWithReason:@"Active endpoint changed"];
  }
}

void sub_1000CF104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF11C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000CF12C(uint64_t a1)
{
}

uint64_t sub_1000CF134(uint64_t a1)
{
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = [*(id *)(v3 + 32) debugName];
  uint64_t v5 = +[NSString stringWithFormat:@"<%@:%p %@", v2, v3, v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (*(unsigned char *)(*(void *)(a1 + 32) + 9))
  {
    uint64_t v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) stringByAppendingFormat:@" TOMBSTONED"];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    __int16 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) stringByAppendingString:@">"];

  return _objc_release_x1();
}

void sub_1000CF330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000CF348(uint64_t a1)
{
  uint64_t v2 = objc_opt_class();
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = v2;
  id v24 = MRCreateIndentedDebugDescriptionFromObject();
  id v19 = MRCreateIndentedDebugDescriptionFromObject();
  [*(id *)(*(void *)(a1 + 32) + 24) connectionState];
  unsigned int v18 = (void *)MRExternalDeviceConnectionStateCopyDescription();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(v3 + 88);
  unsigned int v23 = [*(id *)(v3 + 24) deviceInfo];
  uint64_t v15 = MRCreateIndentedDebugDescriptionFromObject();
  unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 24) discoveryDescription];
  id v20 = [*(id *)(*(void *)(a1 + 32) + 64) allObjects];
  uint64_t v5 = MRCreateIndentedDebugDescriptionFromArray();
  id v17 = [*(id *)(*(void *)(a1 + 32) + 72) description];
  uint64_t v6 = MRCreateIndentedDebugDescriptionFromObject();
  id v7 = MRCreateIndentedDebugDescriptionFromObject();
  uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 24) groupSessionToken];
  uint64_t v9 = MRCreateIndentedDebugDescriptionFromObject();
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
  uint64_t v11 = MRCreateIndentedDebugDescriptionFromObject();
  uint64_t v12 = +[NSString stringWithFormat:@"%@: %p {\n    endpoint = %@\n    external device = %@\n    connection state = %@\n    last can migrate to local endpoint error = %@\n    deviceInfo = %@\n    discovery modes = %@    external device clients = %@\n    external output context = %@\n    external output context debug = %@\n    groupSession token = %@\n    subscribed playerPaths = %@\n    lifetimeController = %@\n}", v22, v21, v24, v19, v18, v16, v15, v4, v5, v6, v7, v9, v10, v11];
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
}

void sub_1000CF65C(uint64_t a1)
{
}

uint64_t sub_1000CF768(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 64) allObjects];

  return _objc_release_x1();
}

void sub_1000CF8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF90C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 24) uid];

  return _objc_release_x1();
}

void sub_1000CFA74(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) setDelegate:0];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
}

void sub_1000CFB74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 88))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v3 = objc_msgSend(*(id *)(v1 + 80), "availableOutputDevices", 0);
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if ([v8 deviceType] == 4 && objc_msgSend(v8, "deviceSubtype") != 4
            || [v8 isPersonalRoute])
          {
            uint64_t v9 = [v8 descriptor];
            if ([v8 deviceType] == 4)
            {
              uint64_t v10 = MSVCopyLocalizedModelName();
            }
            else
            {
              uint64_t v10 = [v8 name];
            }
            uint64_t v11 = (void *)v10;
            [v9 setName:v10];

            uint64_t v12 = [v8 uid];
            [v9 setUniqueIdentifier:v12];

            uint64_t v13 = *(void **)(a1 + 40);
            id v14 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v9];
            [v13 addObject:v14];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v5);
    }
  }
}

void sub_1000D01E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,id a38)
{
  _Block_object_dispose((const void *)(v38 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D0244(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 9);
  return result;
}

void sub_1000D0258(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000D031C;
  block[3] = &unk_100415FF8;
  uint64_t v3 = *(NSObject **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  id v4 = a2;
  dispatch_sync(v3, block);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _externalDeviceClientDidInvalidate:v6 withError:v4];
}

uint64_t sub_1000D031C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1000D0330(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:1 description:@"xpc interruption"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D03A0(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:1 description:@"xpc invalidation"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *sub_1000D0410(void *result)
{
  if (!*(unsigned char *)(*(void *)(result[6] + 8) + 24)) {
    return [*(id *)(result[4] + 64) addObject:result[5]];
  }
  return result;
}

void sub_1000D0D98(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  id v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v15 = a1[5];
      uint64_t v14 = a1[6];
      long long v16 = (void *)a1[4];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:a1[7]];
      int v25 = 138544130;
      uint64_t v26 = v15;
      __int16 v27 = 2114;
      uint64_t v28 = v14;
      __int16 v29 = 2114;
      id v30 = v16;
      __int16 v31 = 2048;
      uint64_t v32 = v17;
      long long v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      id v19 = v6;
      uint32_t v20 = 42;
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v21 = a1[5];
      uint64_t v22 = a1[6];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:a1[7]];
      int v25 = 138543874;
      uint64_t v26 = v21;
      __int16 v27 = 2114;
      uint64_t v28 = v22;
      __int16 v29 = 2048;
      id v30 = v23;
      long long v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v19 = v6;
      uint32_t v20 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v25, v20);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v9 = a1[5];
    uint64_t v8 = a1[6];
    uint64_t v10 = a1[4];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:a1[7]];
    int v25 = 138544386;
    uint64_t v26 = v9;
    __int16 v27 = 2114;
    uint64_t v28 = v8;
    __int16 v29 = 2114;
    id v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v25, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v7) {
    sub_10032CA00();
  }
LABEL_14:

  uint64_t v24 = a1[8];
  if (v24) {
    (*(void (**)(uint64_t, id))(v24 + 16))(v24, v3);
  }
}

uint64_t sub_1000D0FEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D0FFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setHasConnectionAttemptCompleted:1];
  if (!v3) {
    [*(id *)(a1 + 32) hostedExternalDeviceConnectionStateDidChange:2 withError:0];
  }
  if ([*(id *)(a1 + 40) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000D134C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(*(void *)(a1 + 32) + 72);
    id v13 = 0;
    unsigned int v4 = [v3 volumeControlCapabilitiesForOutputDeviceUID:v2 error:&v13];
    id v5 = v13;
  }
  else
  {
    id v5 = 0;
    unsigned int v4 = 0;
  }
  id v6 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D1440;
  v9[3] = &unk_1004162A8;
  id v7 = *(id *)(a1 + 48);
  unsigned int v12 = v4;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1000D1440(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_1000D1458(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [objc_alloc((Class)NSError) initWithMRError:123];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1000D19D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1000D1A00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v9 = [*(id *)(a1 + 48) requestID];
      uint64_t v15 = *(void **)(a1 + 32);
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v26 = v14;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      id v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 42;
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v9 = [*(id *)(a1 + 48) requestID];
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v26 = v20;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2048;
      id v30 = v21;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 48) requestID];
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v26 = v8;
    __int16 v27 = 2114;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    id v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v7) {
    sub_10032E220();
  }
LABEL_14:

  uint64_t v22 = *(void **)(a1 + 72);
  if (v22)
  {
    id v24 = v22;
    id v23 = v3;
    msv_dispatch_async_on_queue();
  }
}

uint64_t sub_1000D1CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D1CF8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  id v3 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);

  objc_storeStrong(v3, v2);
}

uint64_t sub_1000D1D54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D1D64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D1F3C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(*(void *)(a1 + 32) + 72);
    id v14 = 0;
    [v3 volumeForOutputDeviceUID:v2 error:&v14];
    int v5 = v4;
    id Error = v14;
  }
  else
  {
    id Error = (id)MRMediaRemoteCreateError();
    int v5 = 0;
  }
  BOOL v7 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000D2040;
  v10[3] = &unk_1004162A8;
  id v8 = *(id *)(a1 + 48);
  int v13 = v5;
  id v11 = Error;
  id v12 = v8;
  id v9 = Error;
  dispatch_async(v7, v10);
}

uint64_t sub_1000D2040(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(float *)(a1 + 48));
}

void sub_1000D2058(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [objc_alloc((Class)NSError) initWithMRError:123];
  (*(void (**)(uint64_t, id, double))(v1 + 16))(v1, v2, 0.0);
}

void sub_1000D25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1000D2618(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v14 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      uint64_t v15 = *(void **)(a1 + 32);
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v26 = v14;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      id v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 42;
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v26 = v20;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2048;
      id v30 = v21;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 48) requestID];
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v26 = v8;
    __int16 v27 = 2114;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    id v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v7) {
    sub_10032E220();
  }
LABEL_14:

  uint64_t v22 = *(void **)(a1 + 72);
  if (v22)
  {
    id v24 = v22;
    id v23 = v3;
    msv_dispatch_async_on_queue();
  }
}

uint64_t sub_1000D28FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D2910(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  id v3 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);

  objc_storeStrong(v3, v2);
}

uint64_t sub_1000D296C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D297C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D2EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1000D2F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = _MRLogForCategory();
  id v6 = v5;
  if (!v3)
  {
    BOOL v13 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v14 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      uint64_t v15 = *(void **)(a1 + 32);
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v26 = v14;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      id v30 = v15;
      __int16 v31 = 2048;
      uint64_t v32 = v16;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 42;
    }
    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v26 = v20;
      __int16 v27 = 2114;
      uint64_t v28 = v9;
      __int16 v29 = 2048;
      id v30 = v21;
      uint64_t v17 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      long long v18 = v6;
      uint32_t v19 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v7) {
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 48) requestID];
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v26 = v8;
    __int16 v27 = 2114;
    uint64_t v28 = v9;
    __int16 v29 = 2114;
    id v30 = v3;
    __int16 v31 = 2114;
    uint64_t v32 = v10;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v7) {
    sub_10032E220();
  }
LABEL_14:

  uint64_t v22 = *(void **)(a1 + 72);
  if (v22)
  {
    id v24 = v22;
    id v23 = v3;
    msv_dispatch_async_on_queue();
  }
}

uint64_t sub_1000D3204(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D3218(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(a1 + 32) _endpointSupportsVolumeControl:*(void *)(*(void *)(a1 + 32) + 32)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  id v3 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);

  objc_storeStrong(v3, v2);
}

uint64_t sub_1000D3274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000D3284(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D3670(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [objc_alloc((Class)NSError) initWithMRError:123];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000D3888(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [objc_alloc((Class)NSError) initWithMRError:123];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_1000D3C44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000D3C5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [objc_alloc((Class)NSError) initWithMRError:123];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1000D3F30(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) discoveryOutputDevicesChanged:a2 forConfiguration:*(void *)(a1 + 40)];
}

void sub_1000D44A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D44BC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) lifetimeController];

  return _objc_release_x1();
}

id sub_1000D4508(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setLifetimeController:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_1000D4518(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setLifetimeController:0];
}

void sub_1000D4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1000D4B10(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 24) customOrigin];
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 32));
  int v5 = *(void **)(a1[4] + 24);
  id v6 = (id *)(*(void *)(a1[7] + 8) + 40);

  objc_storeStrong(v6, v5);
}

void sub_1000D4B90(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 48);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  int v5 = [*(id *)(a1 + 32) name];
  [WeakRetained _processCanMigrateToLocalEndpointEvent:v5 timestamp:*(void *)(a1 + 40) error:v4];
}

void sub_1000D4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D4D64(uint64_t a1)
{
  [*(id *)(a1 + 32) timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 104)];
  if (v2 > 0.0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 104), *(id *)(a1 + 32));
    id v3 = [*(id *)(a1 + 48) code];
    id v4 = [*(id *)(*(void *)(a1 + 40) + 88) code];
    int v5 = *(void **)(a1 + 48);
    if (v3 == v4)
    {
LABEL_14:
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 88), v5);
      return;
    }
    if (!v5)
    {
      BOOL v7 = MRLogCategoryConnections();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = *(void *)(a1 + 56);
        int v17 = 138543618;
        uint64_t v18 = v13;
        __int16 v19 = 2114;
        uint64_t v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRDAVHostedExternalDevice] %{public}@ adding iPhone row for pull handoff back to self for: <%{public}@>", (uint8_t *)&v17, 0x16u);
      }
      goto LABEL_12;
    }
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 88);
    BOOL v7 = MRLogCategoryConnections();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v8) {
        goto LABEL_12;
      }
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) localizedDescription];
      int v17 = 138543874;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      uint64_t v22 = v11;
      uint64_t v12 = "[MRDAVHostedExternalDevice] %{public}@ maintaing iPhone row for pull handoff back to self for: <%{public}@> "
            "because: <%{public}@>";
    }
    else
    {
      if (!v8) {
        goto LABEL_12;
      }
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) localizedDescription];
      int v17 = 138543874;
      uint64_t v18 = v16;
      __int16 v19 = 2114;
      uint64_t v20 = v15;
      __int16 v21 = 2114;
      uint64_t v22 = v11;
      uint64_t v12 = "[MRDAVHostedExternalDevice] %{public}@ removing iPhone row for pull handoff back to self for: <%{public}@> b"
            "ecause: <%{public}@>";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, 0x20u);

LABEL_12:
    int v5 = *(void **)(a1 + 48);
    if ((v5 != 0) == (*(void *)(*(void *)(a1 + 40) + 88) == 0))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      int v5 = *(void **)(a1 + 48);
    }
    goto LABEL_14;
  }
}

id sub_1000D55DC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 72) removeAllOutputDevices];
}

void sub_1000D5B30(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_reevaluateVolumeControlCapabilitiesForEndpoint:", *(void *)(a1 + 40));
  double v2 = *(void **)(a1 + 40);
  id v3 = (id *)(*(void *)(a1 + 32) + 32);

  objc_storeStrong(v3, v2);
}

void sub_1000D5B74(uint64_t a1)
{
}

id sub_1000D66C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
}

void sub_1000D67E4(void *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1[4] + 64);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        BOOL v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        BOOL v8 = objc_msgSend(v7, "connection", (void)v10);
        unsigned int v9 = [v8 isEqual:a1[5]];

        if (v9)
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000D6A10(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 64) allObjects];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1000D6B1C(uint64_t a1, void *a2)
{
  return (*(void *)(a1 + 32) & ~(unint64_t)[a2 registeredCallbacks]) == 0;
}

BOOL sub_1000D6BF4(uint64_t a1, void *a2)
{
  return (*(void *)(a1 + 32) & (unint64_t)[a2 notifications]) != 0;
}

BOOL sub_1000D6C7C(id a1, MRDAVHostedExternalDeviceClient *a2)
{
  return [(MRDAVHostedExternalDeviceClient *)a2 hasConnectionAttemptCompleted];
}

BOOL sub_1000D6CD8(id a1, MRDAVHostedExternalDeviceClient *a2)
{
  return [(MRDAVHostedExternalDeviceClient *)a2 hasAttemptedToConnect];
}

void sub_1000D72B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, id *a13)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak((id *)(v18 - 112));
  _Unwind_Resume(a1);
}

void sub_1000D7358(uint64_t a1, int a2, void *a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v7 = a3;
    BOOL v8 = [*(id *)(*(void *)(a1 + 32) + 72) notificationQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D743C;
    block[3] = &unk_1004176F8;
    int v13 = a2;
    id v11 = WeakRetained;
    id v12 = v7;
    id v9 = v7;
    dispatch_async(v8, block);
  }
}

id sub_1000D743C(uint64_t a1)
{
  return [*(id *)(a1 + 32) hostedExternalDeviceConnectionStateDidChange:*(unsigned int *)(a1 + 48) withError:*(void *)(a1 + 40)];
}

void sub_1000D744C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained setUseOutputDeviceCache:1];
    id v5 = [v4 externalOutputContext];
    [v5 updateOutputDevices:v6];
  }
}

void sub_1000D74CC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = [WeakRetained externalOutputContext];
  [v4 removeOutputDevices:v3];
}

void sub_1000D7538(uint64_t a1, void *a2, float a3)
{
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v10)
  {
    id v10 = [WeakRetained outputDeviceUID];
  }
  if (WeakRetained)
  {
    if ([WeakRetained useOutputDeviceCache])
    {
      id v6 = [WeakRetained externalOutputContext];
      *(float *)&double v7 = a3;
      [v6 updateVolume:v10 outputDeviceUID:v7];
    }
    else
    {
      id v6 = objc_alloc_init((Class)_MRAVOutputDeviceDescriptorProtobuf);
      [v6 setUniqueIdentifier:v10];
      id v8 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v6];
      *(float *)&double v9 = a3;
      [WeakRetained _maybePostVolumeDidChange:v8 outputDevice:v9];
    }
  }
}

void sub_1000D7630(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v8)
  {
    id v8 = [WeakRetained outputDeviceUID];
  }
  if (WeakRetained)
  {
    if ([WeakRetained useOutputDeviceCache])
    {
      id v6 = [WeakRetained externalOutputContext];
      [v6 updateVolumeControlCapabilities:a2 outputDeviceUID:v8];
    }
    else
    {
      id v6 = objc_alloc_init((Class)_MRAVOutputDeviceDescriptorProtobuf);
      [v6 setUniqueIdentifier:v8];
      id v7 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v6];
      [WeakRetained _maybePostVolumeControlCapabilitiesDidChange:a2 outputDevice:v7];
    }
  }
}

void sub_1000D7720(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = (uint64_t)v8;
  if (!v8)
  {
    uint64_t v6 = [WeakRetained outputDeviceUID];
  }
  id v9 = (id)v6;
  if (WeakRetained)
  {
    id v7 = [WeakRetained externalOutputContext];
    [v7 updateVolumeMuted:a2 outputDeviceUID:v9];
  }
}

void sub_1000D77BC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained hostedExternalDeviceDeviceInfoDidChange:v3];
}

void sub_1000D7818(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000;
    uint64_t v20 = sub_1000CF11C;
    __int16 v21 = sub_1000CF12C;
    id v22 = 0;
    uint64_t v6 = WeakRetained[6];
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    int v13 = sub_1000D7980;
    uint64_t v14 = &unk_100415CF0;
    uint64_t v16 = &v17;
    id v7 = WeakRetained;
    id v15 = v7;
    dispatch_sync(v6, &v11);
    id v8 = objc_msgSend((id)v18[5], "count", v11, v12, v13, v14);
    id v9 = [v7 personalOutputDevices];
    id v10 = [v9 count];

    if (v8 != v10) {
      [v7 _reloadEndpoint];
    }

    _Block_object_dispose(&v17, 8);
  }
}

void sub_1000D7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7980(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 32) personalOutputDevices];

  return _objc_release_x1();
}

void sub_1000D7BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D7C04(uint64_t a1)
{
}

void sub_1000D7DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v24 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000D7DF8(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 24));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(a1[4] + 64);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) |= (unint64_t)objc_msgSend(*(id *)(*((void *)&v7 + 1)+ 8 * (void)v6), "registeredCallbacks", (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000D7F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained hostedExternalDeviceDidReceiveCustomData:a3 withName:a2];
}

void sub_1000D8078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1000D809C(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 24));
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(a1[4] + 64);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        *(void *)(*(void *)(a1[6] + 8) + 24) |= (unint64_t)objc_msgSend(*(id *)(*((void *)&v7 + 1)+ 8 * (void)v6), "notifications", (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000D82E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D82F8(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 24));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1[4] + 64);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v7 = (void *)a1[5];
        long long v8 = objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "subscribedPlayerPaths", (void)v9);
        [v7 addObjectsFromArray:v8];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_1000D8534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D854C(uint64_t a1)
{
}

void sub_1000D866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D8684(uint64_t a1)
{
}

void sub_1000D87A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D87BC(uint64_t a1)
{
}

void sub_1000D88C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D88E0(uint64_t a1)
{
}

void sub_1000D89EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D8A04(uint64_t a1)
{
}

void sub_1000D8B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D8B28(uint64_t a1)
{
}

id sub_1000D8F48(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) hostedExternalDeviceVolumeCapabilitiesDidChange:*(unsigned int *)(a1 + 40) forOutputDevice:0];
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    id v4 = *(void **)(a1 + 32);
    LODWORD(v3) = *(_DWORD *)(a1 + 44);
    return [v4 hostedExternalDeviceVolumeDidChange:0 forOutputDevice:v3];
  }
  return result;
}

id sub_1000D95C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerCallbacks];
}

id sub_1000D9A64(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

uint64_t sub_1000D9B60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D9B70(uint64_t a1)
{
}

uint64_t sub_1000D9B78(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) copy];

  return _objc_release_x1();
}

uint64_t sub_1000D9CB4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) copy];

  return _objc_release_x1();
}

id sub_1000DA770(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000DA868(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000DAA04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MRCompositeMessage);
  [v4 setTransportOptions:*(void *)(a1 + 32)];
  [v4 addMessage:*(void *)(a1 + 40)];
  if (([*(id *)(a1 + 48) _connection:v3 wasPreviouslySubscribedToPlayerPath:*(void *)(a1 + 56)] & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 64);
    uint64_t v6 = [*(id *)(a1 + 56) origin];
    long long v7 = [v5 originClientForOrigin:v6];

    if (v7)
    {
      [*(id *)(a1 + 48) _addSubscribedStateToMessage:v4 forClient:v3 originClient:v7];
      long long v8 = *(void **)(a1 + 48);
      long long v9 = [v7 activeNowPlayingClient];
      [v8 _addSubscribedStateToMessage:v4 forClient:v3 nowPlayingClient:v9];

      long long v10 = *(void **)(a1 + 48);
      long long v11 = [v7 activeNowPlayingClient];
      long long v12 = [v11 activePlayerClient];
      [v10 _addSubscribedStateToMessage:v4 forClient:v3 playerClient:v12];
    }
  }

  return v4;
}

id sub_1000DAC24(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000DAD20(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000DAEBC(void *a1, uint64_t a2)
{
  id v4 = (void *)a1[4];
  uint64_t v5 = +[NSNumber numberWithInteger:a2];
  id v6 = [v4 objectForKeyedSubscript:v5];

  if (!v6)
  {
    id v6 = [objc_alloc((Class)MRSetDefaultSupportedCommandsMessage) initWithDefaultSupportedCommands:a1[5] forPlayerPath:a1[6] encoding:a2];
    long long v7 = (void *)a1[4];
    long long v8 = +[NSNumber numberWithInteger:a2];
    [v7 setObject:v6 forKeyedSubscript:v8];
  }

  return v6;
}

id sub_1000DAF84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 supportedMessages];
  unsigned int v5 = [v4 isSupported:72];

  if (v5)
  {
    id v6 = [v3 deviceInfo];
    [v6 preferredEncoding];

    long long v7 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    long long v7 = 0;
  }

  return v7;
}

id sub_1000DB124(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MRCompositeMessage);
  unsigned int v5 = [*(id *)(a1 + 32) clientProperties];
  if (v5)
  {
    id v6 = [objc_alloc((Class)MRUpdateClientMessage) initWithClient:v5];
    [v4 addMessage:v6];
  }
  int v25 = [*(id *)(a1 + 32) playerProperties];
  if (v25)
  {
    id v7 = [objc_alloc((Class)MRUpdatePlayerMessage) initWithPlayerPath:*(void *)(a1 + 40)];
    [v4 addMessage:v7];
  }
  long long v8 = [*(id *)(a1 + 32) state];
  long long v9 = [v3 exportNowPlayingState:v8 forPlayerPath:*(void *)(a1 + 40)];

  long long v10 = [v3 deviceInfo];
  id v11 = [v10 preferredEncoding];

  if (v9)
  {
    id v12 = [objc_alloc((Class)MRSetStateMessage) initWithNowPlayingState:v9 encoding:v11];
    [v4 addMessage:v12];
  }
  int v13 = [v9 playbackQueue];
  if (v13)
  {
    uint64_t v14 = +[MRPlaybackQueueRequest defaultPlaybackQueueRequest];
    id v15 = [v3 playbackQueueRequests];
    uint64_t v16 = [v15 subscriptionControllerForPlayerPath:*(void *)(a1 + 40)];

    [v16 subscribeToPlaybackQueue:v13 forRequest:v14];
  }
  uint64_t v17 = [*(id *)(a1 + 32) contentItems];
  uint64_t v18 = [v3 exportContentItems:v17 forPlayerPath:*(void *)(a1 + 40)];

  if ([v18 count])
  {
    id v19 = [objc_alloc((Class)MRUpdateContentItemMessage) initWithContentItems:v18 forPlayerPath:*(void *)(a1 + 40) encoding:v11];
    [v4 addMessage:v19];
  }
  uint64_t v20 = [*(id *)(a1 + 32) contentItemsArtwork];
  __int16 v21 = [v3 exportContentItemArtworkUpdates:v20 forPlayerPath:*(void *)(a1 + 40)];

  if ([v21 count])
  {
    id v22 = [objc_alloc((Class)MRUpdateContentItemArtworkMessage) initWithContentItems:v21 forPlayerPath:*(void *)(a1 + 40) encoding:v11];
    [v4 addMessage:v22];
  }
  id v23 = objc_alloc_init((Class)MRProtocolMessageOptions);
  [v23 setPriority:4];
  [v4 setTransportOptions:v23];

  return v4;
}

void sub_1000DB6A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRUserSettings currentSettings];
  unsigned int v5 = [v4 shouldLogPairingSetupCode];

  if (v5)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Remote Passcode: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  if ([v3 isPairingAllowed])
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v15 = 0x3032000000;
    uint64_t v16 = sub_1000D9B60;
    uint64_t v17 = sub_1000D9B70;
    id v18 = *(id *)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000DB88C;
    block[3] = &unk_100416730;
    p_long long buf = &buf;
    int8x16_t v10 = *(int8x16_t *)(a1 + 32);
    id v8 = (id)v10.i64[0];
    int8x16_t v12 = vextq_s8(v10, v10, 8uLL);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    id Error = (void *)MRMediaRemoteCreateError();
    [*(id *)(a1 + 40) _notifyAndDisconnectClient:*(void *)(a1 + 48) withError:Error];
  }
}

void sub_1000DB88C(void *a1)
{
  if (*(void *)(*(void *)(a1[6] + 8) + 40)) {
    objc_msgSend(*(id *)(a1[4] + 64), "showWithPin:forClient:", a1[5]);
  }
}

void sub_1000DBB40(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) closeForClient:*(void *)(a1 + 40)];
}

uint64_t sub_1000DBF98(uint64_t a1, void *a2)
{
  id v3 = [a2 parentUID];
  if (v3)
  {
    id v4 = +[MRUserSettings currentSettings];
    if ([v4 supportGenericAudioGroup])
    {
      unsigned int v5 = [*(id *)(a1 + 32) deviceInfo];
      uint64_t v6 = (uint64_t)[v5 isAwareOfCluster:3];
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

id sub_1000DC02C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned int v5 = [v3 connection];
  uint64_t v6 = [v5 exportOutputDevice:v4 endpoint:*(void *)(a1 + 40)];

  return v6;
}

id sub_1000DC0A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 32))
  {
    unsigned int v5 = [v3 descriptor];
    [v5 setIsVolumeControlAvailable:0];
    [v5 setHasIsVolumeControlAvailable:0];
    [v5 setVolumeCapabilities:0];
    [v5 setHasVolumeCapabilities:0];
    [v5 setVolume:0.0];
    [v5 setHasVolume:0];
    [v5 setVolumeMuted:0];
    [v5 setHasVolumeMuted:0];
    id v6 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v5];
  }
  else
  {
    id v6 = v3;
  }

  return v6;
}

id sub_1000DC288(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)MRCompositeMessage);
  unsigned int v5 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:v3 endpoint:*(void *)(a1 + 48)];
  if (v5)
  {
    id v6 = objc_alloc((Class)MRSyncOutputDevicesMessage);
    id v11 = v5;
    uint64_t v7 = +[NSArray arrayWithObjects:&v11 count:1];
    id v8 = [v6 initWithOutputDevices:v7];

    [v4 addMessage:v8];
    long long v9 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:v3 endpoint:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) _addVolumeToMessage:v4 forClient:v3 outputDevice:v9 withEndpoint:*(void *)(a1 + 48)];
  }

  return v4;
}

id sub_1000DC4D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 deviceInfo];
  unsigned int v5 = [v4 supportsOutputContextSync];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:v3 endpoint:*(void *)(a1 + 48)];
    if (v6)
    {
      id v7 = objc_alloc((Class)MRSyncOutputDevicesMessage);
      id v11 = v6;
      id v8 = +[NSArray arrayWithObjects:&v11 count:1];
      id v9 = [v7 initWithOutputDevices:v8];
    }
    else
    {
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id sub_1000DC6E4(uint64_t a1, uint64_t a2)
{
  id v2 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:1 forClient:a2 endpoint:*(void *)(a1 + 48)];
  id v3 = objc_alloc((Class)MRRemoveSyncedOutputDevicesMessage);
  id v4 = [v2 uid];
  id v5 = [v3 initWithOutputDeviceUID:v4];

  return v5;
}

id sub_1000DC8C4(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)];
  id v4 = objc_alloc((Class)MRVolumeControlCapabilitiesDidChangeMessage);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  id v6 = [v3 groupID];
  id v7 = [v3 uid];
  id v8 = [v4 initWithCapabilities:v5 endpointUID:v6 outputDeviceUID:v7];

  return v8;
}

id sub_1000DCAD4(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)];
  id v4 = objc_alloc((Class)MRVolumeDidChangeMessage);
  int v5 = *(_DWORD *)(a1 + 56);
  id v6 = [v3 groupID];
  id v7 = [v3 uid];
  LODWORD(v8) = v5;
  id v9 = [v4 initWithVolume:v6 endpointUID:v7 outputDeviceUID:v8];

  return v9;
}

id sub_1000DCCDC(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) _createLocalizedOutputDevice:*(void *)(a1 + 40) redactVolume:0 forClient:a2 endpoint:*(void *)(a1 + 48)];
  id v4 = objc_alloc((Class)MRVolumeMutedDidChangeMessage);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  id v6 = [v3 uid];
  id v7 = [v4 initWithMuted:v5 outputDeviceUID:v6];

  return v7;
}

void sub_1000DCED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000DCEE8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v2)
  {
    id v3 = [objc_alloc((Class)MRDeviceInfoUpdateMessage) initWithDeviceInfo:*(void *)(a1 + 32)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }

  return v2;
}

id sub_1000DD11C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000DD240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000DD258(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v2)
  {
    id v3 = +[MRDMediaRemoteServer server];
    uint64_t v4 = [v3 nowPlayingServer];
    uint64_t v5 = [v4 originClientForOrigin:*(void *)(a1 + 32)];

    [v5 timeSincePlaying];
    id v7 = +[NSDate dateWithTimeIntervalSinceNow:-v6];
    double v8 = [v5 devicePlaybackSessionID];
    id v9 = [objc_alloc((Class)MROriginClientPropertiesMessage) initWithLastPlayingDate:v7 devicePlaybackSessionID:v8];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }

  return v2;
}

id sub_1000DD6E0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000DD95C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 8) allObjects];
  [*(id *)(a1 + 32) setConnectedExternalDevices:v2];

  id v3 = [*(id *)(*(void *)(a1 + 40) + 16) allObjects];
  [*(id *)(a1 + 32) setTelevisionEndpoints:v3];

  id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "count"));
  uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 104);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000DDACC;
  v9[3] = &unk_10041BA28;
  id v10 = v4;
  id v6 = v4;
  [v5 enumerateKeysAndObjectsUsingBlock:v9];
  [*(id *)(a1 + 32) setDiscoverySessions:v6];
  [*(id *)(a1 + 32) setRemoteControlService:*(void *)(*(void *)(a1 + 40) + 136)];
  id v7 = [*(id *)(*(void *)(a1 + 40) + 56) debugDescription];
  [*(id *)(a1 + 32) setBatchedNowPlayingState:v7];

  double v8 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 112), "mr_formattedDebugDescription");
  [*(id *)(a1 + 32) setRemoteASEState:v8];
}

void sub_1000DDACC(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)NSString);
  id v11 = [v6 description];

  [v5 discoveryMode];
  double v8 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription();
  id v9 = [v5 availableOutputDevices];

  id v10 = [v7 initWithFormat:@"%@ -> %@\n%@", v11, v8, v9];
  [v4 addObject:v10];
}

id sub_1000DDD34(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 40) setDelegate:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);

  return _[v2 setServerDelegate:v3];
}

void sub_1000DE270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id sub_1000DE2AC(void *a1)
{
  id result = [*(id *)(a1[4] + 8) containsObject:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (_BYTE)result;
  if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    [*(id *)(a1[4] + 8) removeObject:a1[5]];
    *(void *)(*(void *)(a1[7] + 8) + 40) = [*(id *)(a1[4] + 144) objectForKey:a1[5]];
    return (id)_objc_release_x1();
  }
  return result;
}

void sub_1000DE33C(id a1, _MRLyricsEventProtobuf *a2)
{
  id v2 = a2;
  id v5 = +[NSDate date];
  MRLyricsEventGetStartDate();
  MRLyricsEventGetToken();

  End = (void *)MRLyricsEventCreateEnd();
  id v4 = +[MROrigin localOrigin];
  MRMediaRemoteRemoteSendLyricsEvent();
}

void sub_1000DE3F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)NSError);
  id v10 = [*(id *)(a1 + 32) deviceInfo];
  double v8 = [v10 name];
  id v9 = [v7 initWithMRError:25, @"Connection %@ exited in the middle of a migration", v8 format];
  MRMediaRemoteSendPlaybackSessionMigrateEnd();
}

BOOL sub_1000DE6B4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 cryptoSession];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

id sub_1000DE7A4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 deviceInfo];
  BOOL v4 = [v3 identifier];
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

void sub_1000DF0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DF0E0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v3 = *(void *)(a1 + 40);
    BOOL v4 = [*(id *)(a1 + 32) origin];
    LODWORD(v3) = [WeakRetained _connection:v3 canReceiveUpdatesForOrigin:v4];

    id v5 = WeakRetained;
    if (v3)
    {
      id v6 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      if (v6) {
        [*(id *)(a1 + 40) sendMessage:v6];
      }

      id v5 = WeakRetained;
    }
  }
}

id sub_1000DF280(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) parentUID];
  if (!v4) {
    goto LABEL_4;
  }
  id v5 = (void *)v4;
  id v6 = +[MRUserSettings currentSettings];
  if ([v6 supportGenericAudioGroup])
  {
    id v7 = [v3 deviceInfo];
    unsigned int v8 = [v7 isAwareOfCluster:3];

    if (v8)
    {
LABEL_4:
      id v9 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      goto LABEL_7;
    }
  }
  else
  {
  }
  id v9 = 0;
LABEL_7:

  return v9;
}

void sub_1000DFA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFAB0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 8) copy];

  return _objc_release_x1();
}

id sub_1000DFC9C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000E0020(id *a1)
{
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1000E0400;
  v37[3] = &unk_10041BB40;
  id v38 = a1[4];
  id v2 = objc_retainBlock(v37);
  id v3 = objc_alloc_init((Class)MRProtocolMessageOptions);
  [v3 setPriority:5];
  int v25 = v3;
  [v3 setWaking:1];
  group = dispatch_group_create();
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v4 = a1[5];
  id v5 = [v4 countByEnumeratingWithState:&v33 objects:v40 count:16];
  BOOL v6 = v5 != 0;
  if (!v5) {
    goto LABEL_12;
  }
  id v7 = v5;
  char v8 = 0;
  uint64_t v9 = *(void *)v34;
  do
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v34 != v9) {
        objc_enumerationMutation(v4);
      }
      id v11 = *(void **)(*((void *)&v33 + 1) + 8 * i);
      if (((unsigned int (*)(void *, void *))v2[2])(v2, v11))
      {
        id v12 = [objc_alloc((Class)MRSetConnectionStateMessage) initWithConnectionState:3];
        [v12 setTransportOptions:v25];
        [v12 setError:a1[4]];
        dispatch_group_enter(group);
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_1000E04D8;
        v31[3] = &unk_100419418;
        uint64_t v32 = group;
        [v11 sendMessage:v12 reply:v31];

        char v8 = 1;
      }
    }
    id v7 = [v4 countByEnumeratingWithState:&v33 objects:v40 count:16];
  }
  while (v7);

  if (v8)
  {
    id v4 = +[MRUserSettings currentSettings];
    [v4 externalDeviceDisconnectWaitDuration];
    dispatch_time_t v14 = dispatch_time(0, (uint64_t)(v13 * 1000000000.0));
    dispatch_group_wait(group, v14);
LABEL_12:

    goto LABEL_14;
  }
  BOOL v6 = 0;
LABEL_14:
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v15 = a1[5];
  id v16 = [v15 countByEnumeratingWithState:&v27 objects:v39 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v28;
    do
    {
      for (uint64_t j = 0; j != v17; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v28 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v27 + 1) + 8 * (void)j);
        if (((unsigned int (*)(void *, uint64_t))v2[2])(v2, v20)) {
          [a1[6] _disconnectClient:v20 withError:a1[4]];
        }
      }
      id v17 = [v15 countByEnumeratingWithState:&v27 objects:v39 count:16];
    }
    while (v17);
  }

  __int16 v21 = (void (**)(void))a1[7];
  if (v6)
  {
    if (v21)
    {
      id v22 = +[MRUserSettings currentSettings];
      [v22 externalDeviceDisconnectSleepDuration];
      dispatch_time_t v24 = dispatch_time(0, (uint64_t)(v23 * 1000000000.0));
      dispatch_after(v24, (dispatch_queue_t)&_dispatch_main_q, a1[7]);
    }
  }
  else if (v21)
  {
    v21[2]();
  }
}

BOOL sub_1000E0400(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) code] == (id)115)
  {
    id v4 = [v3 deviceInfo];
    id v5 = [v4 bundleIdentifier];
    BOOL v6 = [v4 bundleVersion];
    if ([v5 isEqualToString:@"com.apple.TVRemote"]) {
      BOOL v7 = (uint64_t)[v6 integerValue] > 165;
    }
    else {
      BOOL v7 = 0;
    }
    BOOL v8 = (v7 | [v5 isEqualToString:@"com.apple.tvremotecore.xpc"]) != 0;
  }
  else
  {
    BOOL v8 = 1;
  }

  return v8;
}

void sub_1000E04D8(uint64_t a1)
{
}

void sub_1000E05B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000E05D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138543362;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] System pairing removed: %{public}@ -- Attempting to disconnect...", (uint8_t *)&v11, 0xCu);
  }

  BOOL v6 = [v3 info];
  BOOL v7 = [v6 objectForKey:kMRMediaRemoteTelevisionPairingExtendedInfoKey];

  BOOL v8 = [v7 objectForKey:kMRMediaRemoteTelevisionPairingExtendedInfoIdentifierKey];
  if (v8)
  {
    uint64_t v9 = [WeakRetained _clientForIdentifier:v8];
    if (v9)
    {
      id Error = MRMediaRemoteCreateError();
      [WeakRetained _notifyAndDisconnectClient:v9 withError:Error];
    }
    else
    {
      id Error = _MRLogForCategory();
      if (os_log_type_enabled(Error, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, Error, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] No active connection to disconnect", (uint8_t *)&v11, 2u);
      }
    }
  }
  else
  {
    uint64_t v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] No TVRemote pairing found coresponding to removed system pairing", (uint8_t *)&v11, 2u);
    }
  }
}

void sub_1000E0C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1000E0C9C(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained outputDevicesChanged:v4 forConfiguration:*(void *)(a1 + 32)];
}

void sub_1000E0DA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000E0DB4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v2, "setServerDiscoveryMode:forConfiguration:", objc_msgSend(v2, "serverDiscoveryModeForConfiguration:", v3), v3);
}

void sub_1000E10DC(uint64_t a1, void *a2)
{
  id v15 = *(id *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  if (([v4 features] & 8) != 0)
  {
    BOOL v6 = +[MRDMediaRemoteServer server];
    BOOL v7 = [v6 routingServer];
    BOOL v8 = [v7 hostedRoutingService];
    uint64_t v9 = [v8 hostedRoutingController];
    id v10 = [v9 discoverySession];
    uint64_t v11 = [v10 unclusteredOutputDevices];

    id v15 = (id)v11;
  }
  id v12 = [*(id *)(a1 + 48) connection];
  double v13 = [v12 exportOutputDevices:v15 endpoint:v5];

  id v14 = [objc_alloc((Class)MRDiscoveryUpdateOutputDevicesMessage) initWithOutputDevices:v13 configuration:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) sendMessage:v14];
}

void sub_1000E156C(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v15 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v15)
  {
    uint64_t v13 = *(void *)v21;
    do
    {
      uint64_t v1 = 0;
      do
      {
        if (*(void *)v21 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v2 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v1);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v3 = *(id *)(*(void *)(a1 + 40) + 8);
        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v4)
        {
          id v5 = v4;
          uint64_t v6 = *(void *)v17;
          do
          {
            BOOL v7 = 0;
            do
            {
              if (*(void *)v17 != v6) {
                objc_enumerationMutation(v3);
              }
              BOOL v8 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) deviceInfo];
              uint64_t v9 = [v2 identifier];
              id v10 = [v8 identifier];
              unsigned int v11 = [v9 isEqualToString:v10];

              if (v11) {
                [v2 setConnected:1];
              }

              BOOL v7 = (char *)v7 + 1;
            }
            while (v5 != v7);
            id v5 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }
          while (v5);
        }

        uint64_t v1 = (char *)v1 + 1;
      }
      while (v1 != v15);
      id v15 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v15);
  }
}

id sub_1000E19A8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id v3 = _MRLogForCategory();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 138543362;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Adding television endpoint %{public}@", (uint8_t *)&v8, 0xCu);
    }

    return [*(id *)(*(void *)(a1 + 40) + 16) addObject:*(void *)(a1 + 32)];
  }
  else
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Removing television endpoint %{public}@", (uint8_t *)&v8, 0xCu);
    }

    return [*(id *)(*(void *)(a1 + 40) + 16) removeObject:*(void *)(a1 + 32)];
  }
}

id sub_1000E1C00(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000E1CA0(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = objc_alloc_init((Class)MRProtocolMessageOptions);
  [v6 setPriority:5];
  [v6 setWaking:1];
  if (v15)
  {
    uint64_t v7 = +[MRDMediaRemoteServer server];
    int v8 = [v7 nowPlayingServer];
    uint64_t v9 = [v15 origin];
    id v10 = [v8 originClientForOrigin:v9];
    unsigned int v11 = [v10 deviceInfo];

    id v12 = [objc_alloc((Class)MRDeviceInfoMessage) initWithDeviceInfo:v11];
  }
  else if (v5)
  {
    id v12 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v5];
  }
  else
  {
    id v12 = 0;
  }
  [v12 setTransportOptions:v6];
  [*(id *)(a1 + 32) replyWithMessage:v12];
  uint64_t v13 = *(void **)(a1 + 40);
  id v14 = [*(id *)(a1 + 32) deviceInfo];
  [v13 _handleRemoteDeviceInfo:v14];
}

void sub_1000E1EF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (id *)(a1 + 32);
  id v5 = [*(id *)(a1 + 32) options];
  id v6 = [v5 mutableCopy];

  uint64_t v7 = [v6 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID];
  [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:kMRMediaRemoteOptionOriginatedFromRemoteDevice];
  long long v22 = _NSConcreteStackBlock;
  uint64_t v23 = 3221225472;
  dispatch_time_t v24 = sub_1000E227C;
  int v25 = &unk_100416460;
  id v8 = v7;
  id v26 = v8;
  id v27 = *(id *)(a1 + 32);
  uint64_t v9 = objc_retainBlock(&v22);
  if ((objc_msgSend(*(id *)(a1 + 40), "hasAccessToPlayerPath:", v3, v22, v23, v24, v25) & 1) == 0)
  {
    long long v19 = _MRLogForCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_10032E8E0();
    }

    CFStringRef v20 = @"Client not authorized to send command to playerPath";
    goto LABEL_11;
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isAllowedToSendCommand:", objc_msgSend(*(id *)(a1 + 32), "command")) & 1) == 0)
  {
    long long v21 = _MRLogForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      sub_10032E848(v4, v21);
    }

    CFStringRef v20 = @"Client not authorized to send command type";
LABEL_11:
    id v14 = +[MRCommandResult commandResultWithSendError:3 description:v20];
    ((void (*)(void ***, id))v9[2])(v9, v14);
    goto LABEL_12;
  }
  id v10 = [v6 objectForKeyedSubscript:kMRMediaRemoteOptionPrepareForSetQueueIsProactive];
  unsigned int v11 = [v10 BOOLValue];

  if (v11)
  {
    id v12 = objc_alloc((Class)MRPlayerPath);
    uint64_t v13 = [v3 origin];
    id v14 = [v12 initWithOrigin:v13 bundleIdentifier:kMRMediaRemoteSystemMediaApplicationDisplayIdentifier player:0];

    [*v4 command];
    [*v4 appOptions];
    id v15 = dispatch_get_global_queue(0, 0);
    MRMediaRemoteSendCommandToPlayerWithResult();

    id v16 = objc_alloc((Class)MRPlayerPath);
    long long v17 = [v3 origin];
    id v18 = [v16 initWithOrigin:v17 bundleIdentifier:kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier player:0];

    [*v4 command];
    [*v4 appOptions];
    MRMediaRemoteSendCommandToPlayerWithResult();
  }
  else
  {
    [*v4 command];
    [*v4 appOptions];
    dispatch_get_global_queue(0, 0);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    MRMediaRemoteSendCommandToPlayerWithResult();
  }
LABEL_12:
}

void sub_1000E227C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = objc_alloc_init((Class)MRProtocolMessageOptions);
  [v5 setPriority:5];
  id v4 = [objc_alloc((Class)MRSendCommandResultMessage) initWithCommandID:*(void *)(a1 + 32) commandResult:v3];

  [v4 setTransportOptions:v5];
  [*(id *)(a1 + 40) replyWithMessage:v4];
}

void sub_1000E2864(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)MRProtocolMessageOptions);
  [v7 setPriority:5];
  [v7 setWaking:1];
  if (v6)
  {
    id v8 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v6];
    [v8 setTransportOptions:v7];
    [*(id *)(a1 + 32) replyWithMessage:v8];
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setRegisteredKeyboardUpdates:", objc_msgSend(*(id *)(a1 + 32), "keyboardUpdates"));
    objc_msgSend(*(id *)(a1 + 40), "setRegisteredToOutputDeviceUpdates:", objc_msgSend(*(id *)(a1 + 32), "outputDeviceUpdates"));
    objc_msgSend(*(id *)(a1 + 40), "setRegisteredToSystemEndpointUpdates:", objc_msgSend(*(id *)(a1 + 32), "systemEndpointUpdates"));
    objc_msgSend(*(id *)(a1 + 40), "setRegisteredToNowPlayingUpdates:", objc_msgSend(*(id *)(a1 + 32), "nowPlayingUpdates"));
    uint64_t v9 = [v5 origin];
    id v10 = [*(id *)(a1 + 32) subscribedPlayerPaths];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1000E2BC4;
    v25[3] = &unk_10041BC80;
    id v8 = v9;
    id v26 = v8;
    unsigned int v11 = objc_msgSend(v10, "mr_map:", v25);
    [*(id *)(a1 + 40) setSubscribedPlayerPaths:v11];

    id v12 = objc_alloc_init((Class)MRCompositeMessage);
    [v12 setTransportOptions:v7];
    uint64_t v13 = dispatch_group_create();
    if (!*(unsigned char *)(a1 + 64) && [*(id *)(a1 + 32) outputDeviceUpdates]) {
      [*(id *)(a1 + 48) _addOutputDevicesToMessage:v12 forClient:*(void *)(a1 + 40) withEndpoint:v5];
    }
    if (!*(unsigned char *)(a1 + 65) && [*(id *)(a1 + 32) volumeUpdates])
    {
      dispatch_group_enter(v13);
      uint64_t v15 = *(void *)(a1 + 40);
      id v14 = *(void **)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1000E2C8C;
      v23[3] = &unk_100415CC8;
      dispatch_time_t v24 = v13;
      [v14 _addVolumeToMessage:v12 forClient:v15 withEndpoint:v5 completion:v23];
    }
    id v16 = [*(id *)(a1 + 40) subscribedPlayerPaths];
    long long v17 = v16;
    if (v16 == *(void **)(a1 + 56)) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = objc_msgSend(v16, "isEqual:") ^ 1;
    }

    if (!*(unsigned char *)(a1 + 66) || v18)
    {
      if ([*(id *)(a1 + 32) nowPlayingUpdates]) {
        [*(id *)(a1 + 48) _addNowPlayingStateToMessage:v12 forClient:*(void *)(a1 + 40) withEndpoint:v5];
      }
    }
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000E2C94;
    v20[3] = &unk_1004158D8;
    id v21 = *(id *)(a1 + 32);
    id v22 = v12;
    id v19 = v12;
    dispatch_group_notify(v13, (dispatch_queue_t)&_dispatch_main_q, v20);
  }
}

id sub_1000E2BC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 origin];
  if ([v4 isLocal])
  {
    id v5 = objc_alloc((Class)MRPlayerPath);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [v3 client];
    id v8 = [v3 player];
    id v9 = [v5 initWithOrigin:v6 client:v7 player:v8];
  }
  else
  {
    id v9 = v3;
  }

  return v9;
}

void sub_1000E2C8C(uint64_t a1)
{
}

id sub_1000E2C94(uint64_t a1)
{
  return [*(id *)(a1 + 32) replyWithMessage:*(void *)(a1 + 40)];
}

void sub_1000E3308(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = objc_alloc((Class)MRVolumeControlCapabilitiesDidChangeMessage);
    uint64_t v6 = [*(id *)(a1 + 40) groupID];
    id v7 = [*(id *)(a1 + 40) uid];
    id v8 = [v5 initWithCapabilities:a2 endpointUID:v6 outputDeviceUID:v7];
    [v4 addMessage:v8];

    id v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000E34F0;
    v19[3] = &unk_10041BCD0;
    int v21 = a2;
    uint64_t v11 = *(void *)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    [v9 _addToMessage:v11 withAllClusterDeviceMembers:v10 block:v19];
    if (a2 == 2)
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
      id v12 = *(void **)(a1 + 72);
      uint64_t v13 = [*(id *)(a1 + 56) uid];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1000E3594;
      v14[3] = &unk_10041BCF8;
      id v15 = *(id *)(a1 + 32);
      id v16 = *(id *)(a1 + 40);
      long long v17 = *(_OWORD *)(a1 + 48);
      id v18 = *(id *)(a1 + 64);
      [v12 outputDeviceVolume:v13 queue:&_dispatch_main_q completion:v14];
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1000E34F0(uint64_t a1, void *a2, int a3)
{
  if (a3 == 13)
  {
    id v3 = 0;
  }
  else
  {
    id v5 = a2;
    id v6 = objc_alloc((Class)MRVolumeControlCapabilitiesDidChangeMessage);
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    id v8 = [*(id *)(a1 + 32) groupID];
    id v3 = [v6 initWithCapabilities:v7 endpointUID:v8 outputDeviceUID:v5];
  }

  return v3;
}

void sub_1000E3594(uint64_t a1, float a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = objc_alloc((Class)MRVolumeDidChangeMessage);
  id v6 = [*(id *)(a1 + 40) groupID];
  uint64_t v7 = [*(id *)(a1 + 40) uid];
  *(float *)&double v8 = a2;
  id v9 = [v5 initWithVolume:v6 endpointUID:v7 outputDeviceUID:v8];
  [v4 addMessage:v9];

  uint64_t v10 = *(void **)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_1000E36B8;
  v13[3] = &unk_10041BCD0;
  float v15 = a2;
  uint64_t v12 = *(void *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  [v10 _addToMessage:v12 withAllClusterDeviceMembers:v11 block:v13];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1000E36B8(uint64_t a1, void *a2, int a3)
{
  if (a3 == 13)
  {
    id v3 = 0;
  }
  else
  {
    id v5 = a2;
    id v6 = objc_alloc((Class)MRVolumeDidChangeMessage);
    int v7 = *(_DWORD *)(a1 + 40);
    double v8 = [*(id *)(a1 + 32) groupID];
    LODWORD(v9) = v7;
    id v3 = [v6 initWithVolume:v8 endpointUID:v5 outputDeviceUID:v9];
  }

  return v3;
}

uint64_t sub_1000E375C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E4314(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v12 = [objc_alloc((Class)MRClient) initWithBundleIdentifier:v6];

  id v7 = [objc_alloc((Class)MRPlayerPath) initWithOrigin:0 client:v12 player:0];
  double v8 = *(void **)(a1 + 32);
  id v9 = objc_alloc((Class)MRSetDefaultSupportedCommandsMessage);
  uint64_t v10 = [*(id *)(a1 + 40) deviceInfo];
  id v11 = objc_msgSend(v9, "initWithDefaultSupportedCommands:forPlayerPath:encoding:", v5, v7, objc_msgSend(v10, "preferredEncoding"));

  [v8 addMessage:v11];
}

void sub_1000E4D20(uint64_t a1, uint64_t a2, __CFError *a3)
{
  id v6 = _MRLogForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v7)
    {
      int v11 = 138543362;
      id v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Error registering new virtual voice input device. %{public}@", (uint8_t *)&v11, 0xCu);
    }

    CFIndex Code = CFErrorGetCode(a3);
  }
  else
  {
    if (v7)
    {
      int v11 = 67109120;
      LODWORD(v12) = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Successfully registered new virtual voice input device with ID %u", (uint8_t *)&v11, 8u);
    }

    [*(id *)(a1 + 32) addRegisteredVirtualVoiceInputDevice:a2];
    CFIndex Code = 0;
  }
  id v9 = *(void **)(a1 + 40);
  id v10 = [objc_alloc((Class)MRRegisterVoiceInputDeviceResponseMessage) initWithDeviceID:a2 errorCode:Code];
  [v9 replyWithMessage:v10];
}

void sub_1000E500C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 nowPlayingServer];
  id v6 = [v5 resolveExistingPlayerPath:v3];

  BOOL v7 = [*(id *)(a1 + 32) playbackQueueRequests];
  double v8 = [v7 subscriptionControllerForPlayerPath:v6];

  id v9 = [*(id *)(a1 + 40) request];
  [v8 addRequest:v9];

  objc_initWeak(&location, *(id *)(a1 + 32));
  id v10 = [*(id *)(a1 + 40) request];
  id v11 = &_dispatch_main_q;
  objc_copyWeak(&v14, &location);
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  MRMediaRemoteRequestNowPlayingPlaybackQueueForPlayerSync();

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_1000E51B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E51D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v16 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    if (a3)
    {
      id v7 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:a3];
    }
    else
    {
      double v8 = [WeakRetained playbackQueueRequests];
      id v9 = [v8 subscriptionControllerForPlayerPath:*(void *)(a1 + 32)];

      id v10 = [*(id *)(a1 + 40) request];
      [v9 subscribeToPlaybackQueue:v16 forRequest:v10];

      id v11 = [objc_alloc((Class)MRNowPlayingState) initWithPlayerPath:*(void *)(a1 + 32)];
      id v12 = [*(id *)(a1 + 40) request];
      [v11 setRequest:v12];

      [v11 setPlaybackQueue:v16];
      id v13 = objc_alloc((Class)MRSetStateMessage);
      id v14 = [v6 deviceInfo];
      id v7 = objc_msgSend(v13, "initWithNowPlayingState:encoding:", v11, objc_msgSend(v14, "preferredEncoding"));
    }
    id v15 = objc_alloc_init((Class)MRProtocolMessageOptions);
    [v15 setPriority:5];
    [v15 setWaking:1];
    [v7 setTransportOptions:v15];
    [*(id *)(a1 + 40) replyWithMessage:v7];
  }
}

void sub_1000E596C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = [v3 event];
  uint64_t EndDate = MRLyricsEventGetEndDate();
  MRMediaRemoteRemoteSendLyricsEvent();

  id v6 = *(void **)(a1 + 40);
  if (EndDate) {
    [v6 removeLyricsEvent:v7];
  }
  else {
    [v6 addLyricsEvent:v7];
  }
}

void sub_1000E5B90(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [objc_alloc((Class)MRPromptForRouteAuthorizationMessage) initWithRoute:*(void *)(a1 + 32) inputType:a2];
  id v7 = *(void **)(a1 + 40);
  double v8 = MRExternalDeviceAuthenticatedConnectionTimeout;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000E5C74;
  v10[3] = &unk_10041A818;
  id v11 = v5;
  id v9 = v5;
  [v7 sendMessage:v6 timeout:v10 reply:v8];
}

void sub_1000E5C74(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 error];

  if (v3)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = [v5 response];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E5E40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    id v4 = +[MRAVClusterController sharedController];
    [v4 getClusterStatus:&stru_10041BE28];
  }
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_1000E6288;
  v49[3] = &unk_100415F80;
  id v50 = *(id *)(a1 + 32);
  long long v34 = objc_retainBlock(v49);
  id v5 = [*(id *)(a1 + 32) addingOutputDeviceUIDs];
  id v6 = (char *)[v5 count];
  id v7 = [*(id *)(a1 + 32) removingOutputDeviceUIDs];
  double v8 = &v6[(void)[v7 count]];
  id v9 = [*(id *)(a1 + 32) settingOutputDeviceUIDs];
  id v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (char *)[v9 count] + (void)v8);

  id v11 = [*(id *)(a1 + 32) addingOutputDeviceUIDs];

  if (v11)
  {
    id v12 = [*(id *)(a1 + 32) addingOutputDeviceUIDs];
    [v10 addObjectsFromArray:v12];
  }
  id v13 = [*(id *)(a1 + 32) removingOutputDeviceUIDs];

  if (v13)
  {
    id v14 = [*(id *)(a1 + 32) removingOutputDeviceUIDs];
    [v10 addObjectsFromArray:v14];
  }
  id v15 = [*(id *)(a1 + 32) settingOutputDeviceUIDs];

  if (v15)
  {
    id v16 = [*(id *)(a1 + 32) settingOutputDeviceUIDs];
    [v10 addObjectsFromArray:v16];
  }
  long long v17 = +[MROrigin localOrigin];
  id v18 = +[MRDeviceInfoRequest deviceInfoForOrigin:v17];

  long long v33 = v18;
  id v19 = [v18 WHAIdentifier];
  unsigned __int8 v20 = [v10 containsObject:v19];
  unsigned __int8 v21 = [v3 isProxyGroupPlayer];
  id v22 = [v3 outputDevices];
  uint64_t v23 = +[NSSet setWithArray:v22];

  id v24 = [objc_alloc((Class)MRAVReconnaissanceSession) initWithOutputDeviceUIDs:v10 outputDeviceGroupID:0 features:1];
  [v24 setReturnPartialResults:1];
  objc_initWeak(&location, v24);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1000E6304;
  v35[3] = &unk_10041BEF0;
  id v36 = *(id *)(a1 + 32);
  id v25 = v19;
  id v37 = v25;
  unsigned __int8 v46 = v21;
  id v26 = v10;
  id v38 = v26;
  unsigned __int8 v47 = v20;
  id v27 = v23;
  id v39 = v27;
  id v28 = v3;
  uint64_t v29 = *(void *)(a1 + 40);
  long long v30 = *(void **)(a1 + 48);
  id v40 = v28;
  uint64_t v41 = v29;
  id v42 = v30;
  uint64_t v31 = v34;
  id v44 = v31;
  objc_copyWeak(&v45, &location);
  id v32 = v24;
  id v43 = v32;
  [v32 beginSearchWithTimeout:v35 mapCompletion:2.0];
  [*(id *)(*(void *)(a1 + 40) + 24) addObject:v32];

  objc_destroyWeak(&v45);
  objc_destroyWeak(&location);
}

void sub_1000E6248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E6268(id a1, unint64_t a2)
{
  if (a2 != 1) {
    sub_10016A990(1);
  }
}

void sub_1000E6288(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000E6304(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v51 = a3;
  id v52 = a4;
  id v10 = a5;
  id v11 = objc_alloc_init((Class)NSMutableSet);
  id v12 = objc_alloc_init((Class)NSMutableSet);
  id v13 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v92 = 0;
  uint64_t v93 = &v92;
  uint64_t v94 = 0x2020000000;
  char v95 = 0;
  v84[0] = _NSConcreteStackBlock;
  v84[1] = 3221225472;
  v84[2] = sub_1000E6BCC;
  v84[3] = &unk_10041BE50;
  id v85 = *(id *)(a1 + 32);
  id v14 = v11;
  id v86 = v14;
  id v15 = *(id *)(a1 + 40);
  char v91 = *(unsigned char *)(a1 + 112);
  id v87 = v15;
  uint64_t v90 = &v92;
  id v16 = v12;
  id v88 = v16;
  id v53 = v13;
  id v89 = v53;
  [v9 enumerateKeysAndObjectsUsingBlock:v84];
  if (!v10)
  {
LABEL_10:
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v98 = 0x3032000000;
    uint64_t v99 = sub_1000D9B60;
    unint64_t v100 = sub_1000D9B70;
    id v101 = 0;
    v82[0] = 0;
    v82[1] = v82;
    v82[2] = 0x3032000000;
    v82[3] = sub_1000D9B60;
    v82[4] = sub_1000D9B70;
    id v83 = 0;
    v80[0] = 0;
    v80[1] = v80;
    v80[2] = 0x3032000000;
    v80[3] = sub_1000D9B60;
    v80[4] = sub_1000D9B70;
    id v81 = 0;
    group = dispatch_group_create();
    queue = dispatch_get_global_queue(0, 0);
    if ([v14 count] || objc_msgSend(v16, "count"))
    {
      if ([v14 count])
      {
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        id v19 = v14;
        id v20 = [v19 countByEnumeratingWithState:&v73 objects:v96 count:16];
        if (v20)
        {
          uint64_t v21 = *(void *)v74;
          do
          {
            for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v74 != v21) {
                objc_enumerationMutation(v19);
              }
              [*(id *)(a1 + 72) addAuthorizationCallbackForOutputDevice:*(void *)(*((void *)&v73 + 1) + 8 * i) client:*(void *)(a1 + 80)];
            }
            id v20 = [v19 countByEnumeratingWithState:&v73 objects:v96 count:16];
          }
          while (v20);
        }

        dispatch_group_enter(group);
        unsigned __int8 v23 = [v19 isSubsetOfSet:*(void *)(a1 + 56)];
        id v24 = [*(id *)(a1 + 32) replyIdentifier];
        id v25 = v24;
        if (v24)
        {
          id v26 = v24;
        }
        else
        {
          id v28 = +[NSUUID UUID];
          id v26 = [v28 UUIDString];
        }
        uint64_t v29 = *(void **)(a1 + 64);
        long long v30 = [v19 allObjects];
        char v27 = v23 ^ 1;
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_1000E6E50;
        v64[3] = &unk_10041BEA0;
        char v71 = *(unsigned char *)(a1 + 112);
        __int16 v69 = &v92;
        p_long long buf = &buf;
        char v72 = v23 ^ 1;
        id v65 = v19;
        id v31 = *(id *)(a1 + 80);
        uint64_t v32 = *(void *)(a1 + 72);
        id v66 = v31;
        uint64_t v67 = v32;
        CFStringRef v68 = group;
        [v29 addOutputDevices:v30 initiator:v26 withReplyQueue:queue completion:v64];
      }
      else
      {
        char v27 = 0;
      }
      if (![v16 count]) {
        goto LABEL_35;
      }
      dispatch_group_enter(group);
      unsigned __int8 v33 = [v16 intersectsSet:*(void *)(a1 + 56)];
      long long v34 = [*(id *)(a1 + 32) replyIdentifier];
      long long v35 = v34;
      if (v34)
      {
        id v36 = v34;
      }
      else
      {
        id v37 = +[NSUUID UUID];
        id v36 = [v37 UUIDString];
      }
      id v38 = *(void **)(a1 + 64);
      id v39 = [v16 allObjects];
      char v40 = v33 | v27;
      uint64_t v41 = v61;
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3221225472;
      v61[2] = sub_1000E70AC;
      v61[3] = &unk_10041BE78;
      char v62 = *(unsigned char *)(a1 + 112);
      v61[5] = &v92;
      v61[6] = v82;
      char v63 = v40;
      v61[4] = group;
      [v38 removeOutputDevices:v39 initiator:v36 withReplyQueue:queue completion:v61];
    }
    else
    {
      dispatch_group_enter(group);
      unsigned __int8 v42 = [v53 isEqualToSet:*(void *)(a1 + 56)];
      id v43 = [*(id *)(a1 + 32) replyIdentifier];
      id v44 = v43;
      if (v43)
      {
        id v36 = v43;
      }
      else
      {
        id v45 = +[NSUUID UUID];
        id v36 = [v45 UUIDString];
      }
      unsigned __int8 v46 = *(void **)(a1 + 64);
      id v39 = [v53 allObjects];
      char v47 = v42 ^ 1;
      uint64_t v41 = v77;
      v77[0] = _NSConcreteStackBlock;
      v77[1] = 3221225472;
      v77[2] = sub_1000E6D10;
      v77[3] = &unk_10041BE78;
      char v78 = *(unsigned char *)(a1 + 112);
      v77[5] = &v92;
      v77[6] = v80;
      char v79 = v47;
      v77[4] = group;
      [v46 setOutputDevices:v39 initiator:v36 withReplyQueue:queue completion:v77];
    }

LABEL_35:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000E71E4;
    block[3] = &unk_10041BEC8;
    id v57 = &buf;
    id v56 = *(id *)(a1 + 96);
    id v58 = v82;
    id v59 = v80;
    objc_copyWeak(&v60, (id *)(a1 + 104));
    void block[4] = *(void *)(a1 + 72);
    dispatch_group_notify(group, queue, block);
    objc_destroyWeak(&v60);

    _Block_object_dispose(v80, 8);
    _Block_object_dispose(v82, 8);

    _Block_object_dispose(&buf, 8);
    id v10 = 0;
    goto LABEL_36;
  }
  if ([v9 count])
  {
    long long v17 = [v9 count];
    if (v17 == (char *)[*(id *)(a1 + 48) count] - 1 && *(unsigned char *)(a1 + 113) && !*((unsigned char *)v93 + 24))
    {

      goto LABEL_10;
    }
  }
  id v18 = _MRLogForCategory();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    sub_10032E97C();
  }

  (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
LABEL_36:
  __int16 v48 = _MRLogForCategory();
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v49 = *(void *)(a1 + 88);
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Completed recon session: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  _Block_object_dispose(&v92, 8);
}

void sub_1000E6B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose((const void *)(v66 - 176), 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1000E6BCC(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) addingOutputDeviceUIDs];
  unsigned int v7 = [v6 containsObject:v12];

  if (v7)
  {
    [*(id *)(a1 + 40) addObject:v5];
    if (![v12 isEqualToString:*(void *)(a1 + 48)] || !*(unsigned char *)(a1 + 80)) {
      goto LABEL_12;
    }
LABEL_11:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    goto LABEL_12;
  }
  double v8 = [*(id *)(a1 + 32) removingOutputDeviceUIDs];
  unsigned int v9 = [v8 containsObject:v12];

  if (v9)
  {
    [*(id *)(a1 + 56) addObject:v5];
    if ([v12 isEqualToString:*(void *)(a1 + 48)] && !*(unsigned char *)(a1 + 80)) {
      goto LABEL_11;
    }
  }
  else
  {
    id v10 = [*(id *)(a1 + 32) settingOutputDeviceUIDs];
    unsigned int v11 = [v10 containsObject:v12];

    if (v11)
    {
      [*(id *)(a1 + 64) addObject:v5];
      if ([v12 isEqualToString:*(void *)(a1 + 48)]) {
        goto LABEL_11;
      }
    }
  }
LABEL_12:
}

void sub_1000E6D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    v12[0] = 67109376;
    v12[1] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Set output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u", (uint8_t *)v12, 0xEu);
  }

  if (v3)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = v3;
    unsigned int v9 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
LABEL_8:

    goto LABEL_9;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && (*(unsigned char *)(a1 + 56) || !*(unsigned char *)(a1 + 57)))
  {
    uint64_t Error = MRMediaRemoteCreateError();
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v9 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = Error;
    goto LABEL_8;
  }
LABEL_9:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E6E50(uint64_t a1, void *a2)
{
  id v4 = a2;
  int v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 80);
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    *(_DWORD *)long long buf = 67109376;
    int v27 = v6;
    __int16 v28 = 1024;
    int v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Add output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u", buf, 0xEu);
  }

  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a2);
    if (MRMediaRemoteErrorIsInformational()) {
      goto LABEL_9;
    }
    id v8 = [*(id *)(a1 + 32) allObjects];
    unsigned int v9 = [v8 firstObject];

    id v10 = *(void **)(a1 + 40);
    id v11 = [objc_alloc((Class)MRPresentRouteAuthorizationStatusMessage) initWithRoute:v9 status:5];
    [v10 sendMessage:v11];

    goto LABEL_8;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) || !*(unsigned char *)(a1 + 81))
  {
    uint64_t Error = MRMediaRemoteCreateError();
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    unsigned int v9 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = Error;
LABEL_8:
  }
LABEL_9:
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = *(id *)(a1 + 32);
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      id v18 = 0;
      do
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = *(void **)(*(void *)(a1 + 48) + 128);
        id v20 = objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)v18), "uid", (void)v21);
        [v19 removeAuthorizationCallbackForRouteID:v20];

        id v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v16);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000E70AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    v12[0] = 67109376;
    v12[1] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Remove output devices. Silent Primary = %{BOOL}u, Set Local = %{BOOL}u", (uint8_t *)v12, 0xEu);
  }

  if (v3)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = v3;
    unsigned int v9 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v8;
LABEL_7:

    goto LABEL_8;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) || !*(unsigned char *)(a1 + 57))
  {
    uint64_t Error = MRMediaRemoteCreateError();
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v9 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = Error;
    goto LABEL_7;
  }
LABEL_8:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000E71E4(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    int v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10032EABC();
    }
LABEL_4:

    uint64_t v3 = *(void *)(a1 + 40);
LABEL_13:
    uint64_t v7 = *(void (**)(void))(v3 + 16);
    goto LABEL_14;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    int v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10032EA50();
    }
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  int v5 = _MRLogForCategory();
  int v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10032E9E4();
    }

    uint64_t v3 = *(void *)(a1 + 40);
    goto LABEL_13;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Successfully executed output context modification.", v9, 2u);
  }

  uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_14:
  v7();
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained) {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObject:WeakRetained];
  }
}

void sub_1000E7414(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = [v3 outputDeviceUID];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000E74D8;
  v6[3] = &unk_10041BF18;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolume:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000E74D8(uint64_t a1, float a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc((Class)MRGetVolumeResultMessage);
  *(float *)&double v5 = a2;
  id v6 = [v4 initWithVolume:v5];
  [v3 replyWithMessage:v6];
}

void sub_1000E75D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  double v5 = [v3 outputDeviceUID];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000E769C;
  v6[3] = &unk_10041BF40;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolumeControlCapabilities:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000E769C(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [objc_alloc((Class)MRGetVolumeControlCapabilitiesResultMessage) initWithCapabilities:a2];
  [v2 replyWithMessage:v3];
}

void sub_1000E7794(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 volume];
  int v6 = v5;
  id v7 = [*(id *)(a1 + 32) outputDeviceUID];
  id v8 = [*(id *)(a1 + 32) details];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000E7888;
  v10[3] = &unk_100415F80;
  id v11 = *(id *)(a1 + 32);
  LODWORD(v9) = v6;
  [v4 setOutputDeviceVolume:v7 outputDevice:v8 details:&_dispatch_main_q queue:v10 completion:v9];
}

void sub_1000E7888(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000E79C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRDMediaRemoteServer server];
  int v5 = [v4 nowPlayingServer];
  int v6 = [v5 resolveExistingPlayerPath:v3];

  id v7 = [*(id *)(a1 + 32) request];
  id v8 = *(id *)(a1 + 32);
  MRMediaRemotePlaybackSessionRequest();
}

void sub_1000E7AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:a3];
  }
  else {
    id v4 = [objc_alloc((Class)MRPlaybackSessionResponseMessage) initWithPlaybackSession:a2];
  }
  id v5 = v4;
  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000E7C38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 nowPlayingServer];
  int v6 = [v5 resolveExistingPlayerPath:v3];

  id v7 = [v6 origin];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1000E7EF8;
  v26[3] = &unk_10041BFE0;
  id v27 = *(id *)(a1 + 32);
  id v28 = v7;
  id v29 = v6;
  id v30 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v7;
  id v10 = objc_retainBlock(v26);
  id v11 = objc_alloc((Class)MRBlockGuard);
  id v12 = objc_alloc((Class)NSString);
  __int16 v13 = [*(id *)(a1 + 32) request];
  int v14 = [v13 requestID];
  id v15 = [v12 initWithFormat:@"sendPlaybackSession<%@>", v14];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000E868C;
  v24[3] = &unk_100415FA8;
  id v16 = v10;
  id v25 = v16;
  id v17 = [v11 initWithTimeout:v15 reason:v24 handler:10.0];

  id v18 = [*(id *)(a1 + 32) playbackSession];
  id v19 = [*(id *)(a1 + 32) request];
  long long v22 = v17;
  long long v23 = v16;
  id v20 = v16;
  id v21 = v17;
  MRMediaRemoteSendPlaybackSession();
}

void sub_1000E7EF8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6) {
    id v7 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v6];
  }
  else {
    id v7 = [objc_alloc((Class)MRPlaybackSessionMigrateResponseMessage) initWithRequest:v5];
  }
  id v8 = v7;
  [a1[4] replyWithMessage:v7];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1000E8208;
  v29[3] = &unk_100416910;
  id v30 = a1[5];
  id v31 = a1[6];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_1000E82C8;
  v25[3] = &unk_1004170B8;
  id v9 = objc_retainBlock(v29);
  id v28 = v9;
  id v26 = a1[5];
  id v27 = a1[7];
  id v10 = objc_retainBlock(v25);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000E83F0;
  v19[3] = &unk_10041BFB8;
  id v11 = v9;
  id v23 = v11;
  id v20 = a1[5];
  id v21 = a1[6];
  id v22 = a1[7];
  id v12 = v10;
  id v24 = v12;
  __int16 v13 = objc_retainBlock(v19);
  int v14 = [a1[4] playbackSession];

  if (v6)
  {
    id v15 = v12;
    if (!v14) {
      goto LABEL_8;
    }
  }
  else
  {
    id v15 = v13;
    if (v14) {
LABEL_8:
    }
      ((void (*)(void))v15[2])();
  }
  id v16 = +[MRAVClusterController sharedController];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000E8618;
  v17[3] = &unk_1004167D0;
  id v18 = a1[4];
  [v16 getClusterStatus:v17];
}

BOOL sub_1000E8208(uint64_t a1)
{
  int v2 = +[MRDMediaRemoteServer server];
  id v3 = [v2 nowPlayingServer];
  id v4 = [v3 originClientForOrigin:*(void *)(a1 + 32)];
  id v5 = [v4 activeNowPlayingClient];
  id v6 = [v5 client];
  unsigned int v7 = [v6 processIdentifier];
  id v8 = [*(id *)(a1 + 40) client];
  BOOL v9 = v7 == [v8 processIdentifier];

  return v9;
}

void sub_1000E82C8(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))() & 1) == 0)
  {
    int v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Reseting Facade", v10, 2u);
    }

    id v3 = objc_alloc((Class)MRSetNowPlayingClientMessage);
    id v4 = +[MRDMediaRemoteServer server];
    id v5 = [v4 nowPlayingServer];
    id v6 = [v5 originClientForOrigin:*(void *)(a1 + 32)];
    unsigned int v7 = [v6 activeNowPlayingClient];
    id v8 = [v7 client];
    id v9 = [v3 initWithClient:v8];

    [*(id *)(a1 + 40) sendMessage:v9];
  }
}

void sub_1000E83F0(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))() & 1) == 0)
  {
    int v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = +[MRDMediaRemoteServer server];
      id v4 = [v3 nowPlayingServer];
      id v5 = [v4 originClientForOrigin:*(void *)(a1 + 32)];
      id v6 = [v5 activeNowPlayingClient];
      unsigned int v7 = [v6 client];
      id v8 = [*(id *)(a1 + 40) client];
      *(_DWORD *)long long buf = 138412546;
      id v16 = v7;
      __int16 v17 = 2112;
      id v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Facading NowPlayingClient from %@ to %@", buf, 0x16u);
    }
    id v9 = objc_alloc((Class)MRSetNowPlayingClientMessage);
    id v10 = [*(id *)(a1 + 40) client];
    id v11 = [v9 initWithClient:v10];

    [*(id *)(a1 + 48) sendMessage:v11];
    dispatch_time_t v12 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000E8608;
    block[3] = &unk_100416938;
    id v14 = *(id *)(a1 + 64);
    dispatch_after(v12, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

uint64_t sub_1000E8608(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000E8618(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    id v4 = [*(id *)(a1 + 32) request];
    id v3 = [v4 description];
    sub_10016A990(1);
  }
}

uint64_t sub_1000E868C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_1000E86AC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000E87F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 nowPlayingServer];
  id v6 = [v5 resolveExistingPlayerPath:v3];

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000E8A20;
  v21[3] = &unk_100415F80;
  id v22 = *(id *)(a1 + 32);
  unsigned int v7 = objc_retainBlock(v21);
  id v8 = *(void **)(a1 + 40);
  id v9 = [*(id *)(a1 + 32) request];
  [v8 addPendingPlaybackSessionMigrateEvent:v9 playerPath:v6];

  id v10 = objc_alloc((Class)MRBlockGuard);
  id v11 = objc_alloc((Class)NSString);
  dispatch_time_t v12 = [*(id *)(a1 + 32) request];
  __int16 v13 = [v12 requestIdentifier];
  id v14 = [v11 initWithFormat:@"sendPlaybackSessionMigrateBegin<%@>", v13];
  id v15 = [v10 initWithTimeout:v14 reason:v7 handler:10.0];

  id v16 = [*(id *)(a1 + 32) request];
  id v19 = v15;
  id v20 = v7;
  __int16 v17 = v7;
  id v18 = v15;
  MRMediaRemoteSendPlaybackSessionMigrateBegin();
}

void sub_1000E8A20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000E8A9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000E8CB8(id a1, MRCommandResult *a2)
{
  uint64_t v2 = [(MRCommandResult *)a2 error];

  if (!v2)
  {
    id v4 = +[MRDMediaRemoteServer server];
    id v3 = [v4 uiServer];
    [v3 releaseTimeBasedNowPlayingActivityAssertions];
  }
}

void sub_1000E8E14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 nowPlayingServer];
  id v6 = [v5 resolveExistingPlayerPath:v3];

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000E9050;
  v22[3] = &unk_100415F80;
  id v23 = *(id *)(a1 + 32);
  unsigned int v7 = objc_retainBlock(v22);
  id v8 = *(void **)(a1 + 40);
  id v9 = [*(id *)(a1 + 32) request];
  [v8 removePendingPlaybackSessionMigrateEvent:v9];

  id v10 = objc_alloc((Class)MRBlockGuard);
  id v11 = objc_alloc((Class)NSString);
  dispatch_time_t v12 = [*(id *)(a1 + 32) request];
  __int16 v13 = [v12 requestIdentifier];
  id v14 = [v11 initWithFormat:@"sendPlaybackSessionMigrateEnd<%@>", v13];
  id v15 = [v10 initWithTimeout:v14 reason:v7 handler:10.0];

  id v16 = [*(id *)(a1 + 32) request];
  __int16 v17 = [*(id *)(a1 + 32) error];
  id v20 = v15;
  id v21 = v7;
  id v18 = v7;
  id v19 = v15;
  MRMediaRemoteSendPlaybackSessionMigrateEnd();
}

void sub_1000E9050(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000E90CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000E932C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = objc_alloc((Class)MRProtocolMessage);
  id v6 = [v3 error];

  id v5 = [v4 initWithUnderlyingCodableMessage:0 error:v6];
  [v2 replyWithMessage:v5];
}

void sub_1000E9558(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = [objc_alloc((Class)MRAudioFadeResponseMessage) initWithFadeDuration:a2 error:v5];

  [v4 replyWithMessage:v6];
}

void sub_1000E95D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [v2 replyWithMessage:v4];
}

void sub_1000E9824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1000E984C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v14 = objc_alloc_init((Class)MRCompositeMessage);
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) availableOutputDevices];
  if (([*(id *)(a1 + 32) features] & 8) != 0)
  {
    id v5 = +[MRDMediaRemoteServer server];
    id v6 = [v5 routingServer];
    unsigned int v7 = [v6 hostedRoutingService];
    id v8 = [v7 hostedRoutingController];
    id v9 = [v8 discoverySession];
    uint64_t v10 = [v9 unclusteredOutputDevices];

    id v4 = (void *)v10;
  }
  id v11 = [*(id *)(a1 + 40) connection];
  dispatch_time_t v12 = [v11 exportOutputDevices:v4 endpoint:v3];

  id v13 = [objc_alloc((Class)MRDiscoveryUpdateOutputDevicesMessage) initWithOutputDevices:v12 configuration:*(void *)(a1 + 32)];
  [v14 addMessage:v13];

  [*(id *)(a1 + 40) sendMessage:v14];
}

void sub_1000E9A54(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 listeningMode];
  id v6 = [*(id *)(a1 + 32) outputDeviceUID];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000E9B30;
  void v7[3] = &unk_100415F80;
  id v8 = *(id *)(a1 + 32);
  [v4 setListeningMode:v5 outputDeviceUID:v6 queue:&_dispatch_main_q completion:v7];
}

void sub_1000E9B30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000E9C40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 enabled];
  id v6 = [*(id *)(a1 + 32) outputDeviceUID];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000E9D14;
  void v7[3] = &unk_100415F80;
  id v8 = *(id *)(a1 + 32);
  [v4 setConversationDetectionEnabled:v5 outputDeviceUID:v6 queue:&_dispatch_main_q completion:v7];
}

void sub_1000E9D14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000E9EC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v16 = a2;
  id v7 = a3;
  id v8 = a4;
  if (!v16 || v7)
  {
    id v14 = objc_alloc((Class)MRProtocolMessage);
    id v15 = v14;
    if (v7)
    {
      id v13 = [v14 initWithUnderlyingCodableMessage:0 error:v7];
      goto LABEL_8;
    }
    id v10 = [objc_alloc((Class)NSError) initWithMRError:1];
    id v13 = [v15 initWithUnderlyingCodableMessage:0 error:v10];
  }
  else
  {
    id v9 = objc_alloc((Class)MRCreateHostedEndpointResponseMessage);
    id v10 = [v16 outputDevices];
    id v11 = [v10 firstObject];
    dispatch_time_t v12 = [v11 groupID];
    id v13 = [v9 initWithGroupUID:v12];
  }
LABEL_8:
  [*(id *)(a1 + 32) replyWithMessage:v13];
}

void sub_1000EA0A4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 adjustment];
  id v6 = [*(id *)(a1 + 32) outputDeviceUID];
  id v7 = [*(id *)(a1 + 32) details];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000EA198;
  void v8[3] = &unk_100415F80;
  id v9 = *(id *)(a1 + 32);
  [v4 adjustOutputDeviceVolume:v5 outputDevice:v6 details:v7 queue:&_dispatch_main_q completion:v8];
}

void sub_1000EA198(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000EA2A8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 outputDeviceUID];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000EA36C;
  v6[3] = &unk_10041C0E8;
  id v7 = *(id *)(a1 + 32);
  [v4 outputDeviceVolumeMuted:v5 queue:&_dispatch_main_q completion:v6];
}

void sub_1000EA36C(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (v7) {
    id v5 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v7];
  }
  else {
    id v5 = [objc_alloc((Class)MRGetVolumeMutedResultMessage) initWithMuted:a2];
  }
  id v6 = v5;
  [*(id *)(a1 + 32) replyWithMessage:v5];
}

void sub_1000EA490(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 isMuted];
  id v6 = [*(id *)(a1 + 32) outputDeviceUID];
  id v7 = [*(id *)(a1 + 32) details];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000EA584;
  void v8[3] = &unk_100415F80;
  id v9 = *(id *)(a1 + 32);
  [v4 muteOutputDeviceVolume:v5 outputDevice:v6 details:v7 queue:&_dispatch_main_q completion:v8];
}

void sub_1000EA584(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v3];

  [*(id *)(a1 + 32) replyWithMessage:v4];
}

void sub_1000EA694(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [*(id *)(a1 + 32) details];
    [v5 requestGroupSessionWithDetails:v7 queue:&_dispatch_main_q completion:&stru_10041C128];
  }
  else
  {
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032EB28();
    }
  }
}

void sub_1000EA73C(id a1, NSString *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032EB28();
    }
  }
}

void sub_1000EA8D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000EA8F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)MRApplicationConnectionContext);
  id v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [*(id *)(a1 + 32) service];
  id v7 = [v4 initWithIdentifier:v5 service:v6 destinationPlayerPath:v3];

  id v8 = objc_alloc((Class)MRCreateApplicationConnectionMessage);
  id v9 = [*(id *)(a1 + 40) requestInfo];
  id v10 = [v8 initWithConnectionContext:v7 requestInfo:v9];

  id v11 = +[MRDMediaRemoteServer server];
  dispatch_time_t v12 = [v11 remoteControlServer];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000EAAEC;
  v17[3] = &unk_100416758;
  objc_copyWeak(&v18, (id *)(a1 + 64));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1000EAB94;
  v14[3] = &unk_10041C1C8;
  id v13 = *(void **)(a1 + 56);
  void v14[4] = *(void *)(a1 + 48);
  id v15 = v13;
  id v16 = *(id *)(a1 + 40);
  [v12 registerIncomingApplicationConnection:v10 clientBoundMessageHandler:v17 completion:v14];

  objc_destroyWeak(&v18);
}

void sub_1000EAAD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000EAAEC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained sendMessage:v5];
  }
  else
  {
    id v8 = [objc_alloc((Class)NSError) initWithMRError:177];
    [v9 invalidate:v8];
  }
}

void sub_1000EAB94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v23 = 0;
  id v24 = &v23;
  uint64_t v25 = 0x2020000000;
  char v26 = 0;
  objc_initWeak(&location, v5);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 32);
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  id v15 = sub_1000EAD4C;
  id v16 = &unk_10041C1A0;
  id v20 = &v23;
  uint64_t v17 = v7;
  id v18 = *(id *)(a1 + 40);
  id v9 = v6;
  id v19 = v9;
  objc_copyWeak(&v21, &location);
  dispatch_sync(v8, &v13);
  if (!*((unsigned char *)v24 + 24))
  {
    id v10 = objc_alloc((Class)NSError);
    id v11 = objc_msgSend(v10, "initWithMRError:", 35, v13, v14, v15, v16, v17, v18, v19, v20);
    [v5 invalidate:v11];
  }
  id v12 = [objc_alloc((Class)MRProtocolMessage) initWithUnderlyingCodableMessage:0 error:v9];
  [*(id *)(a1 + 48) replyWithMessage:v12];

  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&v23, 8);
}

void sub_1000EAD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1000EAD4C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 8) containsObject:*(void *)(a1 + 40)];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (!*(void *)(a1 + 48))
    {
      uint64_t v2 = *(void **)(a1 + 32);
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      void v3[2] = sub_1000EAE30;
      v3[3] = &unk_10041C178;
      objc_copyWeak(&v4, (id *)(a1 + 64));
      objc_msgSend(v2, "_onQueue_registerDisconnectionHandler:forClient:", v3, *(void *)(a1 + 40));
      objc_destroyWeak(&v4);
    }
  }
}

void sub_1000EAE1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000EAE30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [objc_alloc((Class)NSError) initWithMRError:177];
  [WeakRetained invalidate:v1];
}

void sub_1000EAF80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)MRApplicationConnectionContext);
  id v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [*(id *)(a1 + 32) service];
  id v12 = [v4 initWithIdentifier:v5 service:v6 destinationPlayerPath:v3];

  id v7 = objc_alloc((Class)MRApplicationConnectionProtocolMessage);
  id v8 = [*(id *)(a1 + 40) message];
  id v9 = [v7 initWithMessage:v8 connectionContext:v12];

  id v10 = +[MRDMediaRemoteServer server];
  id v11 = [v10 remoteControlServer];
  [v11 handleServerBoundApplicationConnectionMessage:v9];
}

void sub_1000EB17C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)MRApplicationConnectionContext);
  id v5 = [*(id *)(a1 + 32) identifier];
  id v6 = [*(id *)(a1 + 32) service];
  id v12 = [v4 initWithIdentifier:v5 service:v6 destinationPlayerPath:v3];

  id v7 = objc_alloc((Class)MRInvalidateApplicationConnectionMessage);
  id v8 = [*(id *)(a1 + 40) error];
  id v9 = [v7 initWithConnectionContext:v12 error:v8];

  id v10 = +[MRDMediaRemoteServer server];
  id v11 = [v10 remoteControlServer];
  [v11 handleInvalidateApplicationConnectionMessage:v9];
}

void sub_1000EB340(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);
  id v3 = +[MROrigin localOrigin];
  id v4 = [v2 objectForKeyedSubscript:v3];
  id v5 = v4;
  if (v4) {
    id v6 = v4;
  }
  else {
    id v6 = objc_alloc_init((Class)NSMutableSet);
  }
  id v7 = v6;

  int v8 = *(unsigned __int8 *)(a1 + 48);
  unsigned int v9 = [v7 containsObject:*(void *)(a1 + 40)];
  if (v8)
  {
    if ((v9 & 1) == 0)
    {
      id v10 = _MRLogForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        int v26 = 138412290;
        uint64_t v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Device: %@ has ASE set to local, adding assertion", (uint8_t *)&v26, 0xCu);
      }

      [v7 addObject:*(void *)(a1 + 40)];
    }
  }
  else if (v9)
  {
    id v12 = _MRLogForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v26 = 138412290;
      uint64_t v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[ExternalDeviceServer] Device: %@ no longer has ASE set to local, removing assertion", (uint8_t *)&v26, 0xCu);
    }

    [v7 removeObject:*(void *)(a1 + 40)];
  }
  uint64_t v14 = *(void **)(*(void *)(a1 + 32) + 112);
  id v15 = +[MROrigin localOrigin];
  [v14 setObject:v7 forKeyedSubscript:v15];

  id v16 = [v7 count];
  uint64_t v17 = +[MRDMediaRemoteServer server];
  id v18 = [v17 groupSessionServer];

  if (v16) {
    [v18 requestEligibilityMonitoring];
  }
  id v19 = +[MRUserSettings currentSettings];
  unsigned int v20 = [v19 groupSessionASEAssertionEnabled];

  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = *(void **)(v21 + 120);
    if (!v22 && v16)
    {
      id v22 = [v18 assertionManager];
      uint64_t v23 = [v22 createAssertionWithReason:@"Remote device(s) has ASE set to local"];
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(void **)(v24 + 120);
      *(void *)(v24 + 120) = v23;

LABEL_22:
      goto LABEL_23;
    }
    if (v22 && !v16)
    {
      *(void *)(v21 + 120) = 0;
      goto LABEL_22;
    }
  }
LABEL_23:
}

void sub_1000EB6C0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

Class sub_1000EBBD4(id a1, MRAVRoutingDiscoverySessionConfiguration *a2)
{
  uint64_t v2 = a2;
  if ([(MRAVRoutingDiscoverySessionConfiguration *)v2 isLocal]
    && ([(MRAVRoutingDiscoverySessionConfiguration *)v2 features] & 8) != 0)
  {
    id v3 = objc_opt_class();
  }
  else
  {
    id v3 = 0;
  }

  return (Class)v3;
}

void sub_1000EC004(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1000EC03C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EC0D8;
    block[3] = &unk_100415CC8;
    id v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

id sub_1000EC0D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
}

void sub_1000EC0E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EC17C;
    block[3] = &unk_100415CC8;
    id v5 = WeakRetained;
    dispatch_async(v3, block);
  }
}

id sub_1000EC17C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

id sub_1000EC184(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
  uint64_t v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_reloadEndpoints");
}

id sub_1000EC60C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000EC6AC;
  void v8[3] = &unk_100417F00;
  id v9 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "mr_any:", v8);

  return v6;
}

id sub_1000EC6AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsUID:a2];
}

uint64_t sub_1000EC888(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000EC898(uint64_t a1)
{
}

uint64_t sub_1000EC8A0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeExternalDeviceForEndpoint:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

void sub_1000EC9F0(uint64_t a1)
{
}

void sub_1000ECAF4(uint64_t a1)
{
}

id sub_1000ECB5C(id a1, MRAVDistantEndpoint *a2)
{
  uint64_t v2 = a2;
  if ([(MRAVDistantEndpoint *)v2 isLocalEndpoint])
  {
    id v3 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  }
  else
  {
    id v3 = v2;
  }
  id v4 = v3;

  return v4;
}

uint64_t sub_1000ECCAC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 96) availableExternalDevices];

  return _objc_release_x1();
}

void sub_1000ECDEC(uint64_t a1)
{
}

uint64_t sub_1000ECEF0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 48) allValues];

  return _objc_release_x1();
}

id sub_1000ECFE8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

id sub_1000ED09C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

uint64_t sub_1000ED23C(void *a1)
{
  *(void *)(*(void *)(a1[6] + 8) + 40) = [*(id *)(a1[4] + 96) hostedExternalDeviceForEndpointIdentifier:a1[5]];

  return _objc_release_x1();
}

uint64_t sub_1000ED28C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 96) hostedExternalDeviceForEndpointIdentifier:*(void *)(a1 + 40)];

  return _objc_release_x1();
}

id sub_1000ED3A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_makeExternalDeviceForEndpoint:", *(void *)(a1 + 40));
}

MRDAVOutputContextExternalDevice *sub_1000ED478(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) designatedProxyGroupLeader];
  uint64_t v2 = +[MRDAVOutputContextManager sharedManager];
  id v3 = [v2 outputContextForOutputDevice:v1];

  id v4 = [[MRDAVOutputContextExternalDevice alloc] initWithOutputContext:v3];

  return v4;
}

uint64_t sub_1000EDA44(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_determineGroupLeaderForOutputDevices:availableOutputDevices:options:", *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 64), *(void *)(a1 + 56));

  return _objc_release_x1();
}

void sub_1000EDBA0(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "allValues", 0);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObjectsFromArray:*(void *)(*((void *)&v7 + 1) + 8 * (void)v6)];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000EDD80(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) virtualOutputDeviceDictionary];
  id v3 = [*(id *)(a1 + 40) displayName];
  id v6 = [v2 objectForKeyedSubscript:v3];

  if (!v6)
  {
    id v6 = +[NSMutableArray array];
    id v4 = [*(id *)(a1 + 32) virtualOutputDeviceDictionary];
    uint64_t v5 = [*(id *)(a1 + 40) displayName];
    [v4 setObject:v6 forKeyedSubscript:v5];
  }
  [v6 addObject:*(void *)(a1 + 48)];
}

void sub_1000EDF1C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) virtualOutputDeviceDictionary];
  uint64_t v2 = [*(id *)(a1 + 40) displayName];
  [v3 setObject:0 forKeyedSubscript:v2];
}

int64_t sub_1000EEBEC(id a1, MRAVOutputDevice *a2, MRAVOutputDevice *a3)
{
  id v4 = a3;
  uint64_t v5 = [(MRAVOutputDevice *)a2 uid];
  id v6 = [(MRAVOutputDevice *)v4 uid];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_1000EEC5C(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  if ([(MRAVOutputDevice *)v2 isGroupLeader]) {
    unsigned int v3 = [(MRAVOutputDevice *)v2 supportsMultiplayer] ^ 1;
  }
  else {
    LOBYTE(v3) = 0;
  }

  return v3;
}

BOOL sub_1000EECA4(uint64_t a1)
{
  return ([*(id *)(a1 + 32) isAuxiliary] & 1) != 0
      || !*(unsigned char *)(a1 + 48) && (*(unsigned char *)(a1 + 40) & 0x80) == 0;
}

MRAVDistantOutputDevice *__cdecl sub_1000EF08C(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc((Class)MRAVDistantOutputDevice);
  id v4 = [(MRAVOutputDevice *)v2 descriptor];

  id v5 = [v3 initWithDescriptor:v4];

  return (MRAVDistantOutputDevice *)v5;
}

void sub_1000EF108(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = objc_msgSend(*(id *)(a1 + 48), "copy", (void)v10);
        [v7 hostedRoutingController:v8 outputDevicesDidChange:v9 forFeature:8];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

id sub_1000EF2EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

id sub_1000EF36C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
}

void sub_1000EF40C(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = v6;
  void v6[2] = 0x3032000000;
  v6[3] = sub_1000EC888;
  void v6[4] = sub_1000EC898;
  id v7 = 0;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) availableExternalDevices];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000EF524;
  v3[3] = &unk_10041C3C8;
  uint64_t v5 = v6;
  id v4 = *(id *)(a1 + 40);
  [v2 enumerateKeysAndObjectsUsingBlock:v3];

  _Block_object_dispose(v6, 8);
}

void sub_1000EF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EF524(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = [a3 externalDevice];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v4)
    {
      id v5 = objc_alloc((Class)NSError);
      id v6 = [*(id *)(a1 + 32) name];
      id v7 = [v5 initWithMRError:1 description:v6];
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    [v10 disconnect:v4];
  }
}

void sub_1000EF674(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) allObjects];
  id v3 = [v2 copy];

  uint64_t v4 = +[NSMutableSet set];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(v5);
        }
        long long v11 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v12 = objc_msgSend(v11, "discoveryMode", (void)v25);
        if (v12 <= v8)
        {
          if (v12 == v8) {
            [v4 addObject:v11];
          }
        }
        else
        {
          uint64_t v13 = (uint64_t)v12;
          uint64_t v14 = +[NSMutableSet setWithObject:v11];

          uint64_t v4 = (void *)v14;
          uint64_t v8 = v13;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v7);

    if (v8)
    {
      objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
      objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadEndpoints");
    }
  }
  else
  {

    uint64_t v8 = 0;
  }
  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "endpointFeatures", (void)v25) == 8)
  {
    id v15 = +[MRSharedSettings currentSettings];
    unsigned __int8 v16 = [v15 supportNanoStandalone];

    if ((v16 & 1) == 0 && v8 == 3)
    {
      uint64_t v17 = objc_msgSend(v5, "msv_filter:", &stru_10041C408);
      [v4 addObjectsFromArray:v17];

      uint64_t v8 = 2;
    }
  }
  id v18 = objc_msgSend(v4, "msv_compactMap:", &stru_10041C448);
  id v19 = +[NSSet setWithArray:v18];

  if (v8 != [*(id *)(*(void *)(a1 + 32) + 104) discoveryMode]
    || ([*(id *)(*(void *)(a1 + 32) + 104) lastReportedClientIdentifiers],
        unsigned int v20 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v21 = [v19 isEqualToSet:v20],
        v20,
        (v21 & 1) == 0))
  {
    id v22 = _MRLogForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription();
      uint64_t v24 = objc_msgSend(v4, "msv_map:", &stru_10041C468);
      *(_DWORD *)long long buf = 138543618;
      id v30 = v23;
      __int16 v31 = 2114;
      uint64_t v32 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[HostedRoutingController] Updating shared discovery session discovery mode to %{public}@ for: %{public}@", buf, 0x16u);
    }
    [*(id *)(*(void *)(a1 + 32) + 104) setDiscoveryMode:v8 forClientIdentifiers:v19];
  }
}

BOOL sub_1000EF99C(id a1, MRDAVHostedRoutingObserver *a2)
{
  return [(MRDAVHostedRoutingObserver *)a2 discoveryMode] == 2;
}

NSString *__cdecl sub_1000EF9C0(id a1, MRDAVHostedRoutingObserver *a2)
{
  return (NSString *)[(MRDAVHostedRoutingObserver *)a2 clientIdentifier];
}

NSString *__cdecl sub_1000EF9C8(id a1, MRDAVHostedRoutingObserver *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = [(MRDAVHostedRoutingObserver *)v2 clientIdentifier];
  [(MRDAVHostedRoutingObserver *)v2 discoveryMode];
  id v5 = (void *)MRMediaRemoteCopyRouteDiscoveryModeDescription();
  id v6 = +[NSString stringWithFormat:@"<%@: %p> %@: %@", v3, v2, v4, v5];

  return (NSString *)v6;
}

id sub_1000EFB40(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_reloadOutputDevices");
  id v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_reloadEndpoints");
}

void sub_1000EFB7C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDHostedRoutingControllerAvailableExternalDevicesDidChangeNotification" object:*(void *)(a1 + 32)];
}

NSString *__cdecl sub_1000EFFD4(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)[(MRAVOutputDevice *)a2 baseGroupID];
}

BOOL sub_1000EFFDC(id a1, MRAVDistantOutputDevice *a2)
{
  return [(MRAVDistantOutputDevice *)a2 deviceSubtype] != 15;
}

BOOL sub_1000F0000(id a1, MRAVOutputDevice *a2)
{
  id v2 = a2;
  if ([(MRAVOutputDevice *)v2 deviceSubtype] == 12)
  {
    unsigned __int8 v3 = 1;
  }
  else if ([(MRAVOutputDevice *)v2 supportsMultiplayer])
  {
    uint64_t v4 = +[MRUserSettings currentSettings];
    unsigned __int8 v3 = [v4 isMultiplayerAware];
  }
  else
  {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

BOOL sub_1000F007C(id a1, MRAVDistantOutputDevice *a2)
{
  return [(MRAVDistantOutputDevice *)a2 isPrimaryLocalDevice];
}

id sub_1000F0084(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

_MRAVOutputDeviceDescriptorProtobuf *__cdecl sub_1000F01AC(id a1, MRAVOutputDevice *a2, MRAVOutputDevice *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned __int8 v6 = [(MRAVOutputDevice *)v4 isEqual:v5];
  id v7 = [(MRAVOutputDevice *)v5 descriptor];

  if ((v6 & 1) == 0)
  {
    objc_msgSend(v7, "setIsRemoteControllable:", -[MRAVOutputDevice isRemoteControllable](v4, "isRemoteControllable"));
    objc_msgSend(v7, "setCanAccessiCloudMusicLibrary:", -[MRAVOutputDevice canAccessiCloudMusicLibrary](v4, "canAccessiCloudMusicLibrary"));
    objc_msgSend(v7, "setCanAccessAppleMusic:", -[MRAVOutputDevice canAccessAppleMusic](v4, "canAccessAppleMusic"));
    objc_msgSend(v7, "setCanAccessRemoteAssets:", -[MRAVOutputDevice canAccessRemoteAssets](v4, "canAccessRemoteAssets"));
  }

  return (_MRAVOutputDeviceDescriptorProtobuf *)v7;
}

id sub_1000F0274(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 baseGroupID];
  if (v4
    && [v3 isAuxiliary]
    && (([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v4],
         (id v5 = objc_claimAutoreleasedReturnValue()) != 0)
     || [v3 shouldBeLocallyHosted]))
  {
    id v6 = objc_alloc((Class)MRAVDistantOutputDevice);
    id v7 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v8 = [v6 initWithDescriptor:v7];
  }
  else
  {
    id v8 = v3;
  }

  return v8;
}

uint64_t sub_1000F06B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(a1 + 32)
    && ([v3 isRemoteControllable] & 1) == 0
    && ![v4 canRelayCommunicationChannel])
  {
    goto LABEL_15;
  }
  id v5 = +[MRUserSettings currentSettings];
  if (([v5 showUncommitedDevices] & 1) == 0
    && [v4 supportsMultiplayer]
    && ([v4 isLocalDevice] & 1) == 0
    && ![v4 canRelayCommunicationChannel])
  {
    id v8 = [v4 groupContextID];

    if (v8) {
      goto LABEL_9;
    }
    uint64_t v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = [v4 uid];
      long long v11 = [v4 name];
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      id v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Ignoring uncommitted output device: %@ (%@)", (uint8_t *)&v12, 0x16u);
    }
LABEL_15:
    uint64_t v6 = 0;
    goto LABEL_10;
  }

LABEL_9:
  uint64_t v6 = 1;
LABEL_10:

  return v6;
}

id sub_1000F092C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 contextID];
  id v5 = [v3 hasSuffix:v4];

  return v5;
}

id sub_1000F0B74(uint64_t a1, void *a2)
{
  id v3 = [a2 outputDeviceUIDs];
  id v4 = [*(id *)(a1 + 32) uid];
  id v5 = [v3 containsObject:v4];

  return v5;
}

void sub_1000F15D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F15E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000F15F8(uint64_t a1)
{
}

void sub_1000F1600(uint64_t a1)
{
}

void sub_1000F1704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F171C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_activeOriginClient");

  return _objc_release_x1();
}

void sub_1000F1858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1870(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_companionOriginClient");

  return _objc_release_x1();
}

void sub_1000F1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1BAC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_allNowPlayingInfoClients");

  return _objc_release_x1();
}

void sub_1000F1EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1EC8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_allNowPlayingInfoClients");

  return _objc_release_x1();
}

void sub_1000F20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F20C8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "addObject:", *(void *)(*((void *)&v7 + 1) + 8 * (void)v6), (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000F24DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000F24F0(id a1)
{
  qword_10047E168 = (uint64_t)objc_alloc_init((Class)NSMutableSet);

  _objc_release_x1();
}

id sub_1000F252C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v4 = @"bundleID";
  uint64_t v5 = v1;
  id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];

  return v2;
}

void sub_1000F270C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F2724(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) origin];
  if (!v2)
  {
    id v2 = +[MROrigin localOrigin];
  }
  id v3 = objc_msgSend(*(id *)(a1 + 40), "_onQueue_originClientForOrigin:", v2);
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) client];
    if (!v4)
    {
      id v5 = objc_alloc((Class)MRClient);
      id v6 = [*(id *)(a1 + 48) pid];
      long long v7 = [*(id *)(a1 + 48) bundleIdentifier];
      id v4 = [v5 initWithProcessIdentifier:v6 bundleIdentifier:v7];
    }
    long long v8 = [v3 origin];
    unsigned int v9 = [v8 isLocallyHosted];

    if (!v9) {
      goto LABEL_18;
    }
    int v10 = [v4 processIdentifier];
    long long v11 = (id *)(a1 + 48);
    if (v10 != [*(id *)(a1 + 48) pid]
      && ([*v11 isEntitledFor:64] & 1) == 0)
    {
      int v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10032EB90((id *)(a1 + 48), v10, v12);
      }

      objc_msgSend(v4, "setProcessIdentifier:", objc_msgSend(*v11, "pid"));
    }
    uint64_t v13 = [v4 bundleIdentifier];
    if (v13)
    {
      __int16 v14 = [*v11 bundleIdentifier];
      if ([v13 isEqualToString:v14])
      {
LABEL_16:

        goto LABEL_17;
      }
      unsigned __int8 v15 = [*v11 isEntitledFor:64];

      if ((v15 & 1) == 0)
      {
        __int16 v14 = [*v11 bundleIdentifier];
        [v4 setBundleIdentifier:v14];
        goto LABEL_16;
      }
    }
LABEL_17:

LABEL_18:
    id v16 = objc_alloc((Class)MRPlayerPath);
    uint64_t v17 = [v3 origin];
    id v18 = [*(id *)(a1 + 32) player];
    id v19 = [v16 initWithOrigin:v17 client:v4 player:v18];
    unsigned int v20 = [v3 nowPlayingClientForPlayerPath:v19];

    uint64_t v21 = [*(id *)(a1 + 32) player];
    id v22 = (void *)v21;
    if (*(unsigned char *)(a1 + 64) && !v21)
    {
      id v22 = +[MRPlayer defaultPlayer];
    }
    long long v35 = v4;
    if (v22)
    {
      uint64_t v23 = [v20 playerClientForPlayer:v22];
    }
    else
    {
      uint64_t v23 = 0;
    }
    id v24 = objc_alloc((Class)MRPlayerPath);
    long long v25 = [v3 origin];
    long long v26 = [v20 client];
    long long v27 = [v23 player];
    id v28 = [v24 initWithOrigin:v25 client:v26 player:v27];
    uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
    id v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;

    __int16 v31 = _MRLogForCategory();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = *(void *)(a1 + 48);
      uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v37 = v32;
      __int16 v38 = 2114;
      uint64_t v39 = v34;
      __int16 v40 = 2112;
      uint64_t v41 = v33;
      _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Resolving %{public}@ -> %{public}@ for client %@", buf, 0x20u);
    }
  }
}

void sub_1000F2C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2C2C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_queryExistingPlayerPath:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

void sub_1000F3254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F326C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

uint64_t sub_1000F33CC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForDeviceUID:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

uint64_t sub_1000F352C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForGroupLeaderOfDeviceUID:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

void sub_1000F3770(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)MRPlaybackSessionMigrateEndMessage);
  id v8 = objc_alloc((Class)NSError);
  unsigned int v9 = [*(id *)(a1 + 32) bundleIdentifier];
  id v10 = [v8 initWithMRError:4, @"%@ has exited in the middle of a migration attempt", v9 format];
  id v13 = [v7 initWithRequest:v6 error:v10 playerPath:v5];

  long long v11 = [*(id *)(a1 + 40) xpcClientForPlayerPath:v5];

  int v12 = MRCreateXPCMessage();
  MRAddProtobufToXPCMessage();
  [v11 relayXPCMessage:v12 andReply:0];
}

void sub_1000F451C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) hasRequestedSupportedCommands])
  {
    id v6 = [*(id *)(a1 + 40) supportedRemoteControlCommandsData];
    [v5 setObject:v6 forKeyedSubscript:kMRSupportedCommandsDataUserInfoKey];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000F45C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasRequestedLegacyNowPlayingInfo])
  {
    id v7 = [*(id *)(a1 + 40) contentItemWithOffset:0];
    if (v7)
    {
      id v8 = +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:](MRPlaybackQueueRequest, "defaultPlaybackQueueRequestWithRange:", 0, 1);
      unsigned int v9 = (void *)MRContentItemCreateFromRequest();
      id v19 = v9;
      id v10 = +[NSArray arrayWithObjects:&v19 count:1];
      MRAddContentItemsToUserInfo();

      if (v9)
      {
        long long v11 = [*(id *)(a1 + 32) playbackQueueRequests];
        int v12 = [*(id *)(a1 + 48) playerPath];
        id v13 = [v11 subscriptionControllerForPlayerPath:v12];

        id v14 = objc_alloc((Class)MRPlaybackQueue);
        id v18 = v9;
        unsigned __int8 v15 = +[NSArray arrayWithObjects:&v18 count:1];
        id v16 = [v14 initWithContentItems:v15 location:0];

        uint64_t v17 = +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:](MRPlaybackQueueRequest, "defaultPlaybackQueueRequestWithRange:", 0, 1);
        [v13 subscribeToPlaybackQueue:v16 forRequest:v17];
      }
    }
    else
    {
      MRAddContentItemsToUserInfo();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000F47C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = [v5 playbackQueueRequests];
  unsigned int v9 = [*(id *)(a1 + 40) playerPath];
  id v12 = [v8 existingSubscriptionControllerForPlayerPath:v9];

  id v10 = [*(id *)(a1 + 48) contentItems];
  long long v11 = [v12 filteredContentItemsBySubscriptionsForContentItems:v10];

  MRAddContentItemsToUserInfo();
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000F48C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [objc_alloc((Class)MRPlaybackQueueRequest) initFromTransactionName:7];
  id v8 = [*(id *)(a1 + 32) playbackQueueRequests];
  unsigned int v9 = [*(id *)(a1 + 40) playerPath];
  id v10 = [v8 existingSubscriptionControllerForPlayerPath:v9];

  long long v11 = [*(id *)(a1 + 40) playbackQueue];
  id v12 = [v11 contentItems];
  id v13 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v12 count]);

  id v14 = [*(id *)(a1 + 48) contentItems];
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472;
  uint64_t v21 = sub_1000F4AB4;
  id v22 = &unk_10041C6C8;
  id v15 = v7;
  id v23 = v15;
  id v16 = v13;
  id v24 = v16;
  [v10 enumerateFilteredContentItemsBySubscriptionsForContentItems:v14 block:&v19];

  if (objc_msgSend(v16, "count", v19, v20, v21, v22))
  {
    id v17 = [objc_alloc((Class)MRPlaybackQueueRequest) initFromTransactionName:0];
    id v18 = (void *)MRContentItemsCreateFromRequest();
    MRAddContentItemsToUserInfo();
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000F4AB4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) match:a3]) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_1000F4C1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v7 = [MRDMusicHandoffSession alloc];
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = a1 + 40;
    id v10 = [(MRDMusicHandoffSession *)v7 initWithSource:*(void *)(v8 - 8) destination:v9];
    (*(void (**)(void))(*(void *)(v8 + 16) + 16))();
    uint64_t v36 = 0;
    uint64_t v37 = &v36;
    uint64_t v38 = 0x3032000000;
    uint64_t v39 = sub_1000F15E8;
    __int16 v40 = sub_1000F15F8;
    id v41 = 0;
    uint64_t v30 = 0;
    __int16 v31 = &v30;
    uint64_t v32 = 0x3032000000;
    uint64_t v33 = sub_1000F15E8;
    uint64_t v34 = sub_1000F15F8;
    id v35 = 0;
    uint64_t v11 = *(void *)(v8 + 8);
    id v12 = *(NSObject **)(v11 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F4F30;
    block[3] = &unk_10041C6F0;
    void block[4] = v11;
    id v13 = v5;
    id v26 = v13;
    id v28 = &v36;
    uint64_t v29 = &v30;
    id v14 = v10;
    long long v27 = v14;
    dispatch_sync(v12, block);
    if (v37[5])
    {
      [(MRDMusicHandoffSession *)v14 invalidate];
    }
    else
    {
      [(MRDMusicHandoffSession *)v14 start];
      id v15 = [*(id *)v8 origin];
      unsigned int v16 = [v15 isLocallyHosted];
      id v17 = (id *)(v31 + 5);
      if (!v16) {
        id v17 = (id *)v8;
      }
      id v18 = *v17;

      id v19 = objc_alloc((Class)MRMusicHandoffSession);
      uint64_t v20 = [(MRDMusicHandoffSession *)v14 identifier];
      uint64_t v21 = [(MRDMusicHandoffSession *)v14 sourcePlayerPath];
      id v22 = [v19 initWithIdentifier:v20 sourcePlayerPath:v21 destinationPlayerPath:v18];

      id v23 = MRCreateXPCMessage();
      MRAddPlayerPathToXPCMessage();
      id v24 = [v22 protobufData];
      MRAddDataToXPCMessage();

      [v13 relayXPCMessage:v23 andReply:0];
    }

    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v36, 8);
  }
}

void sub_1000F4F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000F4F30(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = objc_alloc((Class)MRPlayerPath);
  id v4 = [*(id *)(a1 + 40) createNowPlayingClient];
  id v5 = [v3 initWithOrigin:0 client:v4 player:0];
  objc_msgSend(v2, "onQueue_resolveExistingPlayerPath:", v5);
  id v17 = (id)objc_claimAutoreleasedReturnValue();

  if ([v17 isResolved])
  {
    id v6 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_queryExistingPlayerPath:", v17);
    id v7 = [v6 playerClient];
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 playerPath];
      uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      [v8 registerHandoffSession:*(void *)(a1 + 48)];
    }
    else
    {
      id v14 = [objc_alloc((Class)NSError) initWithMRError:29];
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;
    }
  }
  else
  {
    id v12 = [objc_alloc((Class)NSError) initWithMRError:42];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v6 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

uint64_t sub_1000F5240(uint64_t a1, uint64_t a2)
{
  return _MRAddOriginsToXPCMessage(a2, *(void *)(a1 + 32));
}

uint64_t sub_1000F5400()
{
  return MRAddOriginToXPCMessage();
}

uint64_t sub_1000F60D8()
{
  return MRAddErrorToXPCMessage();
}

uint64_t sub_1000F61AC(uint64_t a1, uint64_t a2)
{
  return _MRAddApplicationActivityToXPCMessage(a2, *(void *)(a1 + 32));
}

void sub_1000F64B8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = [v3 playerClient];
  [v4 playbackQueueCapabilities];
  MRAddPlaybackQueueCapabilitiesToXPCMessage();

  [*(id *)(a1 + 32) error];
  MRAddErrorToXPCMessage();
}

void sub_1000F68A0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 nowPlayingClient];
  id v6 = [v5 client];

  MRAddClientToXPCMessage();
  [*(id *)(a1 + 32) error];
  MRAddErrorToXPCMessage();
}

void sub_1000F6A64(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_1000F6BEC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1 + 32) nowPlayingClient];

  if (!v3)
  {
    [*(id *)(a1 + 32) error];
    MRAddErrorToXPCMessage();
  }
}

void sub_1000F6D18(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 playerClient];
  id v6 = [v5 player];

  MRAddPlayerToXPCMessage();
  [*(id *)(a1 + 32) error];
  MRAddErrorToXPCMessage();
}

void sub_1000F6EC0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_1000F7044(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_1000F7158(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 playerClient];
  id v7 = v5;
  if (v5) {
    uint64_t v6 = [v5 playbackState];
  }
  else {
    uint64_t v6 = 2;
  }
  xpc_dictionary_set_uint64(v4, "MRXPC_PLAYBACK_STATE_KEY", v6);
  [*(id *)(a1 + 32) error];
  MRAddErrorToXPCMessage();
}

uint64_t sub_1000F7D18(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) playerPath];
  LODWORD(v2) = [v2 isAllowedAccessToDataFromPlayerPath:v3];

  if (!v2) {
    return 0;
  }
  id v4 = [*(id *)(a1 + 40) playerPath];
  id v5 = [v4 origin];
  unsigned int v6 = [v5 isLocal];

  if (!v6) {
    return 1;
  }
  id v7 = *(void **)(a1 + 40);

  return (uint64_t)[v7 canBeNowPlaying];
}

int64_t sub_1000F7DC8(id a1, MRDNowPlayingClient *a2, MRDNowPlayingClient *a3)
{
  id v4 = a2;
  id v5 = [(MRDNowPlayingClient *)a3 activePlayerClient];
  unsigned int v6 = [v5 lastPlayingDate];
  id v7 = [(MRDNowPlayingClient *)v4 activePlayerClient];

  uint64_t v8 = [v7 lastPlayingDate];
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

id sub_1000F7E64(id a1, MRDNowPlayingClient *a2)
{
  id v2 = [(MRDNowPlayingClient *)a2 client];
  id v3 = [v2 data];

  return v3;
}

void sub_1000F7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F8010(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40));
  id v3 = v2;
  if (!v2)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    int v8 = 5;
LABEL_8:
    *(_DWORD *)(v7 + 24) = v8;
    goto LABEL_14;
  }
  id v4 = [v2 origin];
  if ([v4 isLocallyHosted])
  {
    unsigned __int8 v5 = [*(id *)(a1 + 48) isEntitledFor:32];

    if ((v5 & 1) == 0)
    {
      unsigned int v6 = _MRLogForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10032ED68();
      }

      uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
      int v8 = 3;
      goto LABEL_8;
    }
  }
  else
  {
  }
  id v9 = [*(id *)(a1 + 56) client];
  if (v9)
  {
    uint64_t v10 = [v3 nowPlayingClientForPlayerPath:*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v10 = 0;
  }
  [v3 setExplicitNowPlayingClient:v10];

LABEL_14:
}

void sub_1000F81D8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 nowPlayingClient];
  id v5 = [v4 client];

  MRAddClientToXPCMessage();
}

void sub_1000F870C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 playerClient];
  id v5 = [v4 player];

  MRAddPlayerToXPCMessage();
}

NSData *__cdecl sub_1000F8904(id a1, MRDNowPlayingPlayerClient *a2)
{
  id v2 = [(MRDNowPlayingPlayerClient *)a2 playerPath];
  id v3 = [v2 data];

  return (NSData *)v3;
}

void sub_1000F8A30(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  xpc_object_t xdict = a2;
  [v3 error];
  MRAddErrorToXPCMessage();
  xpc_dictionary_set_BOOL(xdict, "MRXPC_PICTURE_IN_PICTURE_ENABLED_KEY", *(unsigned char *)(a1 + 40));
}

void sub_1000F8E18(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddErrorToXPCMessage();
  MRAddDeviceInfoToXPCMessage();
}

void sub_1000F8EE4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 96);
  id v3 = a2;
  id v4 = [v2 electedPlayerPath];
  MRAddPlayerPathToXPCMessage();
}

void sub_1000F9054(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 error];
  MRAddErrorToXPCMessage();
}

void sub_1000F92D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000F92E8(uint64_t a1, void *a2)
{
  id v17 = a2;
  id v3 = [*(id *)(a1 + 32) queryExistingPlayerPathForXPCMessage:*(void *)(a1 + 40) forClient:*(void *)(a1 + 48)];
  uint64_t v4 = [v3 unresolvedPlayerPath];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  unsigned int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = [v3 playerClient];
  int v8 = [v7 supportedRemoteControlCommandsData];

  if (v8)
  {
    id v9 = [v3 playerClient];
    uint64_t v10 = [v9 supportedRemoteControlCommandsData];
  }
  else
  {
    uint64_t v11 = [v3 originClient];
    id v12 = [v11 origin];
    if ([v12 isHosted]) {
      [*(id *)(a1 + 32) localOriginClient];
    }
    else {
    id v9 = [v3 originClient];
    }

    uint64_t v13 = [v3 unresolvedPlayerPath];
    id v14 = [v13 client];
    uint64_t v15 = [v14 bundleIdentifier];
    uint64_t v10 = [v9 defaultSupportedCommandsDataForClient:v15];
  }
  if (v10) {
    id v16 = 0;
  }
  else {
    id v16 = [v3 error];
  }
  v17[2](v17, v10, v16);
}

void sub_1000F947C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000F953C;
  v10[3] = &unk_100415DF0;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_100014324(v7, v10);
}

void sub_1000F953C(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRAddSupportedCommandsDataToXPCMessage();
  [*(id *)(a1 + 40) code];
  MRAddErrorToXPCMessage();
}

void sub_1000F95A0(uint64_t a1, void *a2)
{
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1000F98FC;
  v33[3] = &unk_10041C898;
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  id v34 = v3;
  uint64_t v36 = v4;
  id v35 = *(id *)(a1 + 32);
  id v5 = objc_retainBlock(v33);
  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) client];
  uint64_t v7 = [v6 bundleIdentifier];

  if (((unsigned int (*)(void *, void *))v5[2])(v5, v7))
  {
    id v8 = +[MRUserSettings currentSettings];
    [v8 launchApplicationTimeoutInterval];
    double v10 = v9;

    id v11 = objc_alloc((Class)MRBlockGuard);
    id v12 = [objc_alloc((Class)NSString) initWithFormat:@"Application <%@> waiting for can be now playing", v7];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1000F9988;
    v31[3] = &unk_100415FA8;
    id v32 = *(id *)(a1 + 40);
    id v13 = [v11 initWithTimeout:v12 reason:v31 handler:v10];

    id v14 = +[NSNotificationCenter defaultCenter];
    uint64_t v15 = kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000F99A8;
    v26[3] = &unk_10041C8E8;
    id v16 = v7;
    id v27 = v16;
    id v17 = v13;
    id v28 = v17;
    id v29 = *(id *)(a1 + 48);
    id v30 = *(id *)(a1 + 40);
    uint64_t v18 = [v14 addObserverForName:v15 object:0 queue:0 usingBlock:v26];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000F9B10;
    v21[3] = &unk_10041C910;
    double v25 = v10;
    id v22 = v18;
    id v23 = v17;
    id v24 = *(id *)(a1 + 40);
    id v19 = v17;
    id v20 = v18;
    sub_100168898(v16, 0, v21, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

unint64_t sub_1000F98FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    unint64_t v4 = 0;
  }
  else
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) origin];
    if ([v5 isLocal] && MRMediaRemoteApplicationIsSystemApplication()) {
      unint64_t v4 = ((unint64_t)[*(id *)(a1 + 40) entitlements] >> 1) & 1;
    }
    else {
      unint64_t v4 = 0;
    }
  }
  return v4;
}

uint64_t sub_1000F9988(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_1000F99A8(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  unint64_t v4 = MRGetClientFromUserInfo();

  id v5 = [v4 bundleIdentifier];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6 && [*(id *)(a1 + 40) disarm])
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000F9A98;
    void v8[3] = &unk_10041C8C0;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_1000F9A98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id Error = (id)MRMediaRemoteCreateError();
  (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, Error);
}

void sub_1000F9B10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = +[NSNotificationCenter defaultCenter];
    [v7 removeObserver:*(void *)(a1 + 32)];

    if ([*(id *)(a1 + 40) disarm]) {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    dispatch_time_t v8 = dispatch_time(0, (uint64_t)((*(double *)(a1 + 56) + *(double *)(a1 + 56)) * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F9C34;
    block[3] = &unk_100415CC8;
    id v10 = *(id *)(a1 + 32);
    dispatch_after(v8, (dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_1000F9C34(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(a1 + 32)];
}

void sub_1000FA170(uint64_t a1, void *a2)
{
  xpc_object_t xdict = a2;
  id v3 = +[NSDate distantPast];
  [v3 timeIntervalSinceReferenceDate];
  double v5 = v4;

  id v6 = [*(id *)(a1 + 32) client];
  if (v6 || ([*(id *)(a1 + 32) player], (id v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
  }
  else
  {
    id v13 = [*(id *)(a1 + 40) originClient];

    if (v13)
    {
      dispatch_time_t v8 = [*(id *)(a1 + 40) originClient];
      goto LABEL_6;
    }
  }
  uint64_t v7 = [*(id *)(a1 + 40) playerClient];

  if (!v7) {
    goto LABEL_7;
  }
  dispatch_time_t v8 = [*(id *)(a1 + 40) playerClient];
LABEL_6:
  id v9 = v8;
  [v8 timeSincePlaying];
  id v11 = +[NSDate dateWithTimeIntervalSinceNow:-v10];
  [v11 timeIntervalSinceReferenceDate];
  double v5 = v12;

LABEL_7:
  xpc_dictionary_set_double(xdict, "MRXPC_TIMESTAMP", v5);
  [*(id *)(a1 + 40) error];
  MRAddErrorToXPCMessage();
}

uint64_t sub_1000FA684()
{
  return MRAddClientErrorToXPCMessage();
}

uint64_t sub_1000FA81C()
{
  return MRAddArrayToXPCMessage();
}

NSData *__cdecl sub_1000FA83C(id a1, MRNowPlayingAudioFormatContentInfo *a2)
{
  return (NSData *)[(MRNowPlayingAudioFormatContentInfo *)a2 data];
}

void sub_1000FA8F0(uint64_t a1, void *a2)
{
  double v3 = *(double *)(a1 + 32);
  xpc_object_t xdict = a2;
  xpc_dictionary_set_double(xdict, "MRXPC_ARTWORK_DIMENSION_WIDTH_KEY", v3);
  xpc_dictionary_set_double(xdict, "MRXPC_ARTWORK_DIMENSION_HEIGHT_KEY", *(double *)(a1 + 40));
}

id sub_1000FAA74(id a1, MRPlaybackQueueParticipant *a2)
{
  return [(MRPlaybackQueueParticipant *)a2 protobufData];
}

void sub_1000FAA7C(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    double v4 = +[NSPropertyListSerialization dataWithPropertyList:v3 format:200 options:0 error:0];
    MRAddDataToXPCMessage();
  }
  [*(id *)(a1 + 40) error];
  MRAddErrorToXPCMessage();
}

void sub_1000FAC18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6)
  {
    sub_1001679D8(*(void **)(a1 + 32), [v6 code]);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x3032000000;
    id v17 = sub_1000F15E8;
    uint64_t v18 = sub_1000F15F8;
    id v19 = 0;
    dispatch_time_t v8 = +[NSNotificationCenter defaultCenter];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000FADA0;
    v11[3] = &unk_10041CA00;
    id v13 = &v14;
    id v12 = *(id *)(a1 + 32);
    uint64_t v9 = [v8 addObserverForName:@"MRDMusicHandoffSessionDidFinishNotification" object:v5 queue:0 usingBlock:v11];
    double v10 = (void *)v15[5];
    void v15[5] = v9;

    _Block_object_dispose(&v14, 8);
  }
}

void sub_1000FAD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000FADA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = +[NSNotificationCenter defaultCenter];
  [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  id v5 = [v3 userInfo];

  id v6 = [v5 objectForKeyedSubscript:@"MRDMusicHandoffSessionErrorKey"];

  uint64_t v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000FAEB4;
  v9[3] = &unk_100415DF0;
  id v10 = v6;
  id v11 = v7;
  id v8 = v6;
  sub_100014324(v7, v9);
}

void *sub_1000FAEB4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    [result code];
    return (void *)MRAddErrorToXPCMessage();
  }
  return result;
}

void *sub_1000FB0DC(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result)
  {
    [result code];
    return (void *)MRAddErrorToXPCMessage();
  }
  return result;
}

id sub_1000FB30C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) startObservingNowPlayingInfoForNowPlayingPlayerClient:*(void *)(a1 + 40)];
}

void sub_1000FB9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v12 - 120));
  objc_destroyWeak((id *)(v12 - 112));
  _Unwind_Resume(a1);
}

void sub_1000FBA38(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v6 = [v4 userInfo];

  uint64_t v7 = MRGetPlayerPathFromUserInfo();

  if ([v7 isEqual:*(void *)(a1 + 32)])
  {
    id v8 = (id *)(a1 + 48);
    id v9 = objc_loadWeakRetained(v8);
    id v10 = [v9 playbackQueue];
    id v11 = [v10 contentItems];
    uint64_t v12 = [v11 firstObject];
    id v13 = [v12 metadata];
    id v14 = [v13 mediaType];

    if (v14)
    {
      uint64_t v15 = WeakRetained[9];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1000FBBA8;
      v16[3] = &unk_100419F00;
      void v16[4] = WeakRetained;
      objc_copyWeak(&v17, v8);
      dispatch_async(v15, v16);
      objc_destroyWeak(&v17);
    }
  }
}

void sub_1000FBBA8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 wakeDeviceIfNecessaryForNowPlayingPlayerClient:WeakRetained];
}

void sub_1000FBBFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained wakeDeviceIfNecessaryForNowPlayingPlayerClient:v2];
}

id sub_1000FBC60(uint64_t a1)
{
  return [*(id *)(a1 + 32) wakeDeviceIfNecessaryForNowPlayingPlayerClient:*(void *)(a1 + 40)];
}

BOOL sub_1000FC280(uint64_t a1, void *a2)
{
  return [a2 pid] == *(_DWORD *)(a1 + 32);
}

BOOL sub_1000FCA18(uint64_t a1, void *a2)
{
  return [a2 pid] == *(_DWORD *)(a1 + 32);
}

void sub_1000FCD34(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 16) sortedArrayUsingComparator:&stru_10041CAD8];
  [*(id *)(a1 + 32) setOriginClients:v2];

  id v3 = [*(id *)(*(void *)(a1 + 40) + 80) origin];
  [*(id *)(a1 + 32) setActiveOrigin:v3];

  id v4 = [*(id *)(*(void *)(a1 + 40) + 96) electedPlayerPath];
  [*(id *)(a1 + 32) setElectedPlayer:v4];

  id v5 = objc_alloc((Class)NSString);
  id v6 = [*(id *)(*(void *)(a1 + 40) + 96) event];
  uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 96) eventReason];
  id v8 = [*(id *)(*(void *)(a1 + 40) + 96) selectionReason];
  id v9 = [*(id *)(*(void *)(a1 + 40) + 96) mostRecentEvent];
  id v10 = [*(id *)(*(void *)(a1 + 40) + 96) mostRecentEventReason];
  id v11 = [*(id *)(*(void *)(a1 + 40) + 96) mostRecentSelectionReason];
  id v12 = [v5 initWithFormat:@"event %@, eventReason = <%@>, selectionReason = <%@>, mostRecentEVent = %@, mostRecentEventReason = <%@>, mostRecentSelectionReason = <%@>", v6, v7, v8, v9, v10, v11];
  [*(id *)(a1 + 32) setElectedPlayerReason:v12];

  objc_msgSend(*(id *)(a1 + 32), "setLockScreenWidgetActive:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "isLockScreenWidgetActive"));
  objc_msgSend(*(id *)(a1 + 32), "setLockScreenWidgetVisible:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 104), "isLockScreenWidgetVisible"));
  id v13 = [*(id *)(*(void *)(a1 + 40) + 104) playerPath];
  [*(id *)(a1 + 32) setLockScreenPlayerPath:v13];

  id v14 = [*(id *)(*(void *)(a1 + 40) + 40) allObjects];
  [*(id *)(a1 + 32) setOriginForwarders:v14];
}

int64_t sub_1000FCF40(id a1, MRDNowPlayingOriginClient *a2, MRDNowPlayingOriginClient *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [(MRDNowPlayingOriginClient *)v4 origin];
  unsigned __int8 v7 = [v6 isLocal];

  if (v7)
  {
    int64_t v8 = -1;
  }
  else
  {
    id v9 = [(MRDNowPlayingOriginClient *)v4 origin];
    id v10 = [v9 displayName];
    id v11 = [(MRDNowPlayingOriginClient *)v5 origin];
    id v12 = [v11 displayName];
    int64_t v8 = (int64_t)[v10 compare:v12 options:1];
  }
  return v8;
}

uint64_t sub_1000FD110(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = MRGetPlayerPathFromUserInfo();
  if (v9 && ![v7 isAllowedAccessToDataFromPlayerPath:v9])
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, id, id, uint64_t))(v10 + 16))(v10, v7, v8, a4);
    }
    else {
      uint64_t v11 = 1;
    }
  }

  return v11;
}

BOOL sub_1000FD5D0(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return -[MRDMediaRemoteClient isEntitledFor:](a2, "isEntitledFor:", 0x2000, a4);
}

uint64_t sub_1000FE7B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if ([a2 hasRequestedSupportedCommands]) {
    *a4 = *(id *)(a1 + 32);
  }
  return 1;
}

id sub_1000FEAD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 hasRequestedLegacyNowPlayingInfo];
  if (v4 && *(void *)(a1 + 32))
  {
    id v5 = [v3 playbackQueueRequests];
    id v6 = [v5 subscriptionControllerForPlayerPath:*(void *)(a1 + 40)];

    id v7 = objc_alloc((Class)MRPlaybackQueue);
    uint64_t v12 = *(void *)(a1 + 32);
    id v8 = +[NSArray arrayWithObjects:&v12 count:1];
    id v9 = [v7 initWithContentItems:v8 location:0];

    uint64_t v10 = +[MRPlaybackQueueRequest defaultPlaybackQueueRequestWithRange:](MRPlaybackQueueRequest, "defaultPlaybackQueueRequestWithRange:", 0, 1);
    [v6 subscribeToPlaybackQueue:v9 forRequest:v10];
  }
  return v4;
}

BOOL sub_1000FEC04(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return ![(MRDMediaRemoteClient *)a2 hasRequestedLegacyNowPlayingInfo];
}

BOOL sub_1000FEE20(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [v6 playbackQueueRequests];
  id v8 = [v7 existingSubscriptionControllerForPlayerPath:*(void *)(a1 + 32)];

  id v9 = [v8 filteredContentItemsBySubscriptionsForContentItems:*(void *)(a1 + 40)];
  id v10 = [v9 count];
  if (v10)
  {
    *a4 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v11 = _MRLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = [v6 displayName];
      uint64_t v15 = (void *)MRContentItemsCopyMinimalReadableDescription();
      int v16 = 138543874;
      uint64_t v17 = v13;
      __int16 v18 = 2114;
      id v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Posting contentItemChange for path %{public}@ to xpcClient %{public}@ %@", (uint8_t *)&v16, 0x20u);
    }
    MRAddContentItemsToUserInfo();
  }

  return v10 != 0;
}

BOOL sub_1000FF0E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = [objc_alloc((Class)MRPlaybackQueueRequest) initFromTransactionName:7];
  id v8 = [v6 playbackQueueRequests];

  id v9 = [v8 existingSubscriptionControllerForPlayerPath:*(void *)(a1 + 32)];

  id v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(a1 + 40) count]);
  uint64_t v11 = *(void *)(a1 + 40);
  __int16 v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  id v22 = sub_1000FF29C;
  id v23 = &unk_10041C6C8;
  id v12 = v7;
  id v24 = v12;
  id v13 = v10;
  id v25 = v13;
  [v9 enumerateFilteredContentItemsBySubscriptionsForContentItems:v11 block:&v20];
  id v14 = objc_msgSend(v13, "count", v20, v21, v22, v23);
  if (v14)
  {
    id v15 = [objc_alloc((Class)MRPlaybackQueueRequest) initFromTransactionName:0];
    int v16 = (void *)MRContentItemsCreateFromRequest();
    id v17 = objc_alloc_init((Class)NSMutableDictionary);
    MRAddContentItemsToUserInfo();
    id v18 = v17;
    *a4 = v18;
  }
  return v14 != 0;
}

void sub_1000FF29C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) match:a3]) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

BOOL sub_1000FF81C(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return 1;
}

BOOL sub_1000FF8E0(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = [(MRDMediaRemoteClient *)a2 pid];
  return v4 == getpid();
}

BOOL sub_1000FF9D0(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = [(MRDMediaRemoteClient *)a2 pid];
  return v4 == getpid();
}

BOOL sub_1000FFB50(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  unsigned int v4 = [(MRDMediaRemoteClient *)a2 pid];
  return v4 == getpid();
}

void sub_1000FFB84(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000FFCB8;
  void v7[3] = &unk_100418568;
  void v7[4] = *(void *)(a1 + 32);
  id v3 = [v2 addObserverForName:kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification object:0 queue:0 usingBlock:v7];

  unsigned int v4 = +[NSNotificationCenter defaultCenter];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000FFD60;
  v6[3] = &unk_100418568;
  void v6[4] = *(void *)(a1 + 32);
  id v5 = [v4 addObserverForName:MROriginNowPlayingPlaybackQueueNowPlayingItemChangedNotification object:0 queue:0 usingBlock:v6];
}

void sub_1000FFCB8(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  unsigned int v4 = MRGetPlayerPathFromUserInfo();
  id v5 = [*(id *)(*(void *)(a1 + 32) + 104) playerPath];
  unsigned int v6 = [v4 isEqual:v5];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    [v7 postLockScreenControlsDidChangeDistributedNotification];
  }
}

void sub_1000FFD60(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  unsigned int v4 = MRGetPlayerPathFromUserInfo();
  id v5 = [*(id *)(*(void *)(a1 + 32) + 104) playerPath];
  unsigned int v6 = [v4 isEqual:v5];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    [v7 postLockScreenControlsDidChangeDistributedNotification];
  }
}

void sub_1000FFF38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activePlayerClient];
  unsigned int v3 = [v2 isPlaying];
  unsigned int v4 = [v2 playerPath];
  id v5 = [v4 skeleton];

  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  unsigned int v6 = [*(id *)(a1 + 32) localOriginClient];
  id v7 = [v6 activePlayerClients];

  id v8 = [v7 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v8)
  {
    id v9 = v8;
    LOBYTE(IsAdvancing) = 0;
    uint64_t v11 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v11) {
          objc_enumerationMutation(v7);
        }
        if (IsAdvancing)
        {
          int IsAdvancing = 1;
        }
        else
        {
          [*(id *)(*((void *)&v34 + 1) + 8 * i) playbackState];
          int IsAdvancing = MRMediaRemotePlaybackStateIsAdvancing();
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v9);
  }
  else
  {
    int IsAdvancing = 0;
  }

  if (qword_10047E1A8 != -1) {
    dispatch_once(&qword_10047E1A8, &stru_10041CC08);
  }
  if (byte_10047E180 != v3)
  {
    id v13 = _MRLogForCategory();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    id v15 = (void *)kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName;
    if (v14)
    {
      CFStringRef v16 = @"Not Playing";
      if (v3) {
        CFStringRef v16 = @"Playing";
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v39 = kMRNowPlayingAppIsPlayingDidChangeDistributedNotificationName;
      __int16 v40 = 2112;
      uint64_t v41 = (uint64_t)v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Posting %@ with <%@>", buf, 0x16u);
    }

    notify_post((const char *)[v15 UTF8String]);
    dispatch_async((dispatch_queue_t)qword_10047E1A0, &stru_10041CC28);
  }
  id v17 = (id)qword_10047E188;
  id v18 = v5;
  if (v17 != v5)
  {
    id v19 = v17;
    unsigned __int8 v20 = [v17 isEqual:v5];

    if (v20) {
      goto LABEL_27;
    }
    uint64_t v21 = _MRLogForCategory();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    id v23 = (void *)kMRNowPlayingActivePlayerPathDidChangeDistributedNotificationName;
    if (v22)
    {
      *(_DWORD *)long long buf = 138412802;
      uint64_t v39 = kMRNowPlayingActivePlayerPathDidChangeDistributedNotificationName;
      __int16 v40 = 2114;
      uint64_t v41 = qword_10047E188;
      __int16 v42 = 2114;
      id v43 = v5;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Posting %@ because activePlayerPath changed from <%{public}@> to <%{public}@>", buf, 0x20u);
    }

    notify_post((const char *)[v23 UTF8String]);
    id v24 = qword_10047E1A0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001004F0;
    block[3] = &unk_100415CC8;
    id v33 = v5;
    dispatch_async(v24, block);
    id v18 = v33;
  }

LABEL_27:
  if (byte_10047E190 != IsAdvancing)
  {
    id v25 = _MRLogForCategory();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    id v27 = (void *)kMRNowPlayingActivePlayersIsPlayingDidChangeDistributedNotificationName;
    if (v26)
    {
      CFStringRef v28 = @"Not Playing";
      if (IsAdvancing) {
        CFStringRef v28 = @"Playing";
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v39 = kMRNowPlayingActivePlayersIsPlayingDidChangeDistributedNotificationName;
      __int16 v40 = 2112;
      uint64_t v41 = (uint64_t)v28;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Posting %@ with <%@>", buf, 0x16u);
    }

    notify_post((const char *)[v27 UTF8String]);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100100554;
    v30[3] = &unk_10041CC48;
    char v31 = IsAdvancing;
    dispatch_async((dispatch_queue_t)qword_10047E1A0, v30);
  }
  byte_10047E180 = v3;
  id v29 = (void *)qword_10047E188;
  qword_10047E188 = (uint64_t)v5;

  byte_10047E190 = IsAdvancing;
}

void sub_1001003C0(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.maybePostDistributedNotifications.serialQueue", v2);
  unsigned int v4 = (void *)qword_10047E1A0;
  qword_10047E1A0 = (uint64_t)v3;

  uint64_t v5 = +[NSUserDefaults standardUserDefaults];
  unsigned int v6 = (void *)qword_10047E198;
  qword_10047E198 = v5;

  byte_10047E180 = [(id)qword_10047E198 BOOLForKey:@"LastNowPlayingAppIsPlayingState"];
  id v7 = objc_alloc((Class)MRPlayerPath);
  id v8 = [(id)qword_10047E198 dataForKey:@"_MRDActivePlayerPathDateDefaultsKey"];
  id v9 = [v7 initWithData:v8];
  id v10 = (void *)qword_10047E188;
  qword_10047E188 = (uint64_t)v9;

  byte_10047E190 = [(id)qword_10047E198 BOOLForKey:@"_MRDAnyNowPlayingAppIsPlayingDefaultsKey"];
}

void sub_1001004CC(id a1)
{
  [(id)qword_10047E198 setBool:byte_10047E180 == 0 forKey:@"LastNowPlayingAppIsPlayingState"];
}

void sub_1001004F0(uint64_t a1)
{
  uint64_t v1 = (void *)qword_10047E198;
  id v2 = [*(id *)(a1 + 32) data];
  [v1 setObject:v2 forKey:@"_MRDActivePlayerPathDateDefaultsKey"];
}

id sub_100100554(uint64_t a1)
{
  return [(id)qword_10047E198 setBool:*(unsigned __int8 *)(a1 + 32) forKey:@"_MRDAnyNowPlayingAppIsPlayingDefaultsKey"];
}

id sub_100100770(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  if (!v2)
  {
    uint64_t v3 = +[NSHashTable weakObjectsHashTable];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  }
  uint64_t v6 = *(void *)(a1 + 40);

  return [v2 addObject:v6];
}

id sub_100100870(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

void sub_100100B1C(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40));
  uint64_t v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v20 = 138543362;
    uint64_t v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering origin %{public}@", (uint8_t *)&v20, 0xCu);
  }

  unsigned int v5 = [*(id *)(a1 + 40) isLocal];
  uint64_t v6 = [MRDNowPlayingOriginClient alloc];
  if (v5)
  {
    id v7 = -[MRDNowPlayingOriginClient initWithDeviceInfoDataSource:delegate:](v6, "initWithDeviceInfoDataSource:delegate:", *(void *)(*(void *)(a1 + 32) + 48));
    id v8 = +[MRUserSettings currentSettings];
    unsigned __int8 v9 = [v8 supportMultiplayerHost];

    if ((v9 & 1) == 0)
    {
      id v10 = +[MRDNowPlayingDataSource sharedDataSource];
      [(MRDNowPlayingOriginClient *)v7 setNowPlayingDataSource:v10];
    }
    [*(id *)(a1 + 32) setLocalOriginClient:v7];
  }
  else
  {
    id v7 = [(MRDNowPlayingOriginClient *)v6 initWithOrigin:*(void *)(a1 + 40) deviceInfo:*(void *)(a1 + 48) delegate:*(void *)(a1 + 32)];
    if ([*(id *)(a1 + 40) isLocallyHosted])
    {
      uint64_t v11 = +[MRUserSettings currentSettings];
      unsigned int v12 = [v11 supportMultiplayerHost];

      if (v12)
      {
        id v13 = +[MRDNowPlayingDataSource sharedDataSource];
        [(MRDNowPlayingOriginClient *)v7 setNowPlayingDataSource:v13];
      }
    }
  }
  BOOL v14 = *(void **)(*(void *)(a1 + 32) + 16);
  if (!v14)
  {
    id v15 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(v16 + 16);
    *(void *)(v16 + 16) = v15;

    BOOL v14 = *(void **)(*(void *)(a1 + 32) + 16);
  }
  [v14 addObject:v7];
  if (*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 32) postOriginDidRegister:*(void *)(a1 + 40) handler:0];
  }
  id v18 = *(void **)(a1 + 32);
  id v19 = [(MRDNowPlayingOriginClient *)v7 deviceInfo];
  [v18 handleNowPlayingOriginClient:v7 deviceInfoDidChange:v19 previousDeviceInfo:0];
}

void sub_100100E0C(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_originClientForOrigin:", *(void *)(a1 + 40));
  uint64_t v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unregistering origin %{public}@", buf, 0xCu);
  }

  unsigned int v5 = objc_msgSend(*(id *)(a1 + 32), "_onQueue_activeOriginClient");

  if (v2 == v5)
  {
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing active origin %{public}@. Setting active origin to the local one.", buf, 0xCu);
    }

    id v8 = *(void **)(a1 + 32);
    unsigned __int8 v9 = +[MROrigin localOrigin];
    objc_msgSend(v8, "_onQueue_setActiveOrigin:saveState:", v9, 0);
  }
  id v10 = [v2 nowPlayingClients];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      BOOL v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = [*(id *)(*((void *)&v19 + 1) + 8 * (void)v14) client];
        [v2 removeNowPlayingClientForClient:v15];

        BOOL v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }
  uint64_t v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = [v2 deviceInfo];
  [v16 postOriginDidUnRegister:v17 deviceInfo:v18 handler:0];

  [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v2];
}

id sub_100101224(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_setActiveOrigin:saveState:", *(void *)(a1 + 40), 1);
}

id sub_100101E38(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = MRIDSCompanionConnectionDeviceDidConnect;
  unsigned int v5 = +[MRIDSCompanionConnection sharedManager];
  [v2 addObserver:v3 selector:"_handleCompanionDeviceConnectedNotification:" name:v4 object:v5];

  uint64_t v6 = +[NSNotificationCenter defaultCenter];
  [v6 addObserver:*(void *)(a1 + 32) selector:"_handleExternalDeviceConnectionStateDidChangeNotification:" name:kMRExternalDeviceConnectionStateDidChangeNotification object:0];

  uint64_t v7 = *(void **)(a1 + 32);

  return [v7 _maybeAttemptToDiscoverAndConnectToCompanionWithReason:@"Startup"];
}

void sub_100102234(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100102258(uint64_t a1)
{
  return [*(id *)(a1 + 32) _maybeAttemptToDiscoverAndConnectToCompanionWithReason:@"Try again"];
}

void sub_100102268(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 controllerDidUndiscoverCompanion:*(void *)(a1 + 32)];
}

void sub_1001022BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 controller:*(void *)(a1 + 32) didDiscoverCompanion:*(void *)(a1 + 40)];
}

void sub_10010247C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010278C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001027B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  if (v5)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 17) = 1;
    [*(id *)(a1 + 32) setCompanionEndpoint:v5];
    id v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v9 = +[NSDate date];
      [v9 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 32)];
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRCompanionConnectionController] Discovered companion endpoint in <%lf> seconds. Attempting to connect because <%@>", buf, 0x16u);
    }
    uint64_t v17 = MREndpointConnectionReasonUserInfoKey;
    CFStringRef v18 = @"discoverAndConnectToCompanion";
    id v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100102A20;
    v15[3] = &unk_100418848;
    uint64_t v13 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v13;
    [v5 connectToExternalDeviceWithUserInfo:v12 completion:v15];
  }
  else
  {
    BOOL v14 = _MRLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_10032EE14((uint64_t)v6, v14);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), a3);
    [*(id *)(a1 + 32) setCompanionEndpoint:0];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  objc_sync_exit(v7);
}

void sub_1001029F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102A20(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  if (v4)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10032EE8C((uint64_t)v4, v6);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 40), a2);
    [*(id *)(a1 + 32) setCompanionEndpoint:0];
  }
  else
  {
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = +[NSDate date];
      [v8 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 32)];
      uint64_t v9 = *(void *)(a1 + 40);
      int v11 = 134218242;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[MRCompanionConnectionController] Connected to companion endpoint in <%lf> seconds because <%@>", (uint8_t *)&v11, 0x16u);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 17) = 0;
  objc_sync_exit(v5);
}

void sub_100102B94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102D48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100102DD0()
{
  if ((_set_user_dir_suffix() & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_10032EF04();
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    dispatch_semaphore_t v0 = NSTemporaryDirectory();
    int v1 = 138412290;
    id v2 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Temporary directory set to %@", (uint8_t *)&v1, 0xCu);
  }
}

intptr_t sub_100103170(uint64_t a1, uint64_t a2)
{
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);
    int v7 = 138543618;
    uint64_t v8 = v5;
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDNowPlayingClient] Setting pid for %{public}@ to %d", (uint8_t *)&v7, 0x12u);
  }

  [*(id *)(a1 + 40) setProcessIdentifier:a2];
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_1001035E8(uint64_t a1, void *a2, void *a3)
{
  if (*(void **)(*(void *)(a1 + 32) + 56) == a2) {
    return -1;
  }
  id v4 = a3;
  uint64_t v5 = [a2 playerPath];
  id v6 = [v5 player];
  int v7 = [v6 displayName];
  uint64_t v8 = [v4 playerPath];

  __int16 v9 = [v8 player];
  int v10 = [v9 displayName];
  id v11 = [v7 compare:v10 options:1];

  return (uint64_t)v11;
}

void sub_1001037B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001037D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001037E0(uint64_t a1)
{
}

uint64_t sub_1001037E8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 16) copy];

  return _objc_release_x1();
}

id sub_100103C08(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_initializeDisplayName");
  id v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_popState");
}

void sub_100103D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100103D54(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 32) copy];

  return _objc_release_x1();
}

void sub_100103E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100103EA8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) activePlayerClient];
  uint64_t v3 = [v2 playerPath];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) playerPath];
    _objc_release_x1();
  }
}

id sub_100103FD8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  [*(id *)(*(void *)(a1 + 32) + 32) setClient:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return objc_msgSend(v2, "_onQueue_popState");
}

id sub_1001040B8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onQueue_pushState");
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) client];
  [v2 mergeFrom:*(void *)(a1 + 40)];

  uint64_t v3 = *(void **)(a1 + 32);

  return objc_msgSend(v3, "_onQueue_popState");
}

void sub_100104204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010421C(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 32) client];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10010431C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_setActivePlayerClient:", *(void *)(a1 + 40));
}

void sub_1001045DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001045F4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_activePlayerClient");

  return _objc_release_x1();
}

void sub_1001046F0(uint64_t a1)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10010486C;
  v10[3] = &unk_10041B0F0;
  void v10[4] = *(void *)(a1 + 32);
  id v2 = objc_retainBlock(v10);
  int v3 = ((uint64_t (*)(void))v2[2])();
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 25) != v3)
  {
    int v5 = v3;
    *(unsigned char *)(v4 + 25) = v3;
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"false";
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32);
      if (v5) {
        CFStringRef v7 = @"true";
      }
      *(_DWORD *)long long buf = 138543618;
      CFStringRef v12 = v7;
      __int16 v13 = 2114;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDNowPlayingClient] CanBeNowPlaying changed to %{public}@ for %{public}@", buf, 0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    [WeakRetained nowPlayingPlayerClient:*(void *)(a1 + 32) clientCanBeNowPlayingDidChange:*(unsigned __int8 *)(*(void *)(a1 + 32) + 25)];
  }
}

BOOL sub_10010486C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 26)) {
    return *(unsigned char *)(v1 + 24) != 0;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(v1 + 16);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "canBeNowPlayingPlayer", (void)v8))
        {

          return 1;
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  return 0;
}

id sub_100104A00(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 26) = *(unsigned char *)(a1 + 40);
  return [*(id *)(a1 + 32) _reevaluateCanBeNowPlaying];
}

id sub_100104A8C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = *(unsigned char *)(a1 + 40);
  return [*(id *)(a1 + 32) _reevaluateCanBeNowPlaying];
}

void sub_100104B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100104B64(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 25);
  return result;
}

void sub_100104C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100104C80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 26))
  {
    id v3 = [(id)v2 activePlayerClient];
    uint64_t v4 = [v3 canBeNowPlayingPlayerTimestamp];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  CFStringRef v7 = *(void **)(v2 + 40);
  long long v8 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v8, v7);
}

void sub_100104DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100104DC0(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_onQueue_anyPlayerIsPlaying");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100104FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 27) != v2)
  {
    *(unsigned char *)(v1 + 27) = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    [WeakRetained nowPlayingClient:*(void *)(a1 + 32) applicationDidForeground:*(unsigned __int8 *)(*(void *)(a1 + 32) + 27)];
  }
}

void sub_100105164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10010517C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_playerClientForPlayer:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

void sub_1001055EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100105604(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "_onQueue_existingPlayerClientForPlayer:", *(void *)(a1 + 40));

  return _objc_release_x1();
}

id sub_100105838(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onQueue_removePlayerClientForPlayer:", *(void *)(a1 + 40));
}

void sub_1001059A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001059B8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * i), "hasNowPlayingData", (void)v7))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_100106610(id a1)
{
  qword_10047E1B0 = [[MRDMediaRemoteServer alloc] _init];

  _objc_release_x1();
}

id sub_100106B00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _terminationHandler];
}

void sub_100106B08(id a1, int a2)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received AppleLanguagePreferencesChangedNotification. Will tell libxpc to kill us once we're clean. Will invalidate MROSTransactions.", buf, 2u);
  }

  xpc_transaction_exit_clean();
  MRInvalidateTransactions();
  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received AppleLanguagePreferencesChangedNotification. Did tell libxpc to kill us once we're clean. Did invalidate MROSTransactions.", v4, 2u);
  }
}

AVOutputContext *__cdecl sub_100106BC4(id a1)
{
  uint64_t v1 = (void *)MRMediaRemoteCopyDeviceUID();
  if (v1)
  {
    id v2 = +[MRDAVOutputContextManager sharedManager];
    id v3 = [v2 outputContextForOutputDeviceUID:v1];
  }
  else
  {
    id v3 = 0;
  }
  id v4 = [v3 avOutputContext];

  return (AVOutputContext *)v4;
}

void sub_100106C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  if (string)
  {
    uint64_t v5 = string;
    if (strcmp("com.apple.ProximityControl.LockScreenDiscovery", string))
    {
      *(double *)&uint64_t v6 = COERCE_DOUBLE(xpc_dictionary_get_uint64(v3, "_State"));
      long long v7 = _MRLogForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 136315138;
        uint64_t v22 = (uint64_t)v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received DACP command '%s'.", (uint8_t *)&v21, 0xCu);
      }

      long long v8 = [*(id *)(*(void *)(a1 + 32) + 40) activeOriginClient];
      long long v9 = [v8 origin];

      if (!strcmp("com.apple.AirTunes.DACP.nextitem", v5))
      {
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 4;
      }
      else if (!strcmp("com.apple.AirTunes.DACP.previtem", v5))
      {
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 5;
      }
      else if (!strcmp("com.apple.AirTunes.DACP.pause", v5))
      {
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 1;
      }
      else if (!strcmp("com.apple.AirTunes.DACP.play", v5))
      {
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 0;
      }
      else if (!strcmp("com.apple.AirTunes.DACP.repeatadv", v5))
      {
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 7;
      }
      else
      {
        if (strcmp("com.apple.AirTunes.DACP.shuffletoggle", v5))
        {
          if (!strcmp("com.apple.AirTunes.DACP.volumeup", v5))
          {
            id v15 = +[AVSystemController sharedAVSystemController];
            CFStringRef v12 = v15;
            int v17 = 1031798784;
          }
          else
          {
            if (strcmp("com.apple.AirTunes.DACP.volumedown", v5))
            {
              if (!strcmp("com.apple.AirTunes.DACP.mutetoggle", v5))
              {
                CFStringRef v12 = +[AVSystemController sharedAVSystemController];
                [v12 toggleActiveCategoryMuted];
              }
              else
              {
                if (strcmp("com.apple.AirTunes.DACP.devicevolume", v5))
                {
                  if (!strcmp("com.apple.AirTunes.DACP.devicevolumechanged", v5))
                  {
                    long long v10 = _MRLogForCategory();
                    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                    {
                      int v21 = 134217984;
                      uint64_t v22 = v6;
                      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "System volume was set to %f", (uint8_t *)&v21, 0xCu);
                    }
                  }
                  goto LABEL_30;
                }
                double v18 = *(double *)&v6;
                long long v19 = _MRLogForCategory();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  int v21 = 134217984;
                  uint64_t v22 = v6;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Setting volume to %f", (uint8_t *)&v21, 0xCu);
                }

                CFStringRef v12 = +[AVSystemController sharedAVSystemController];
                *(float *)&double v20 = v18;
                [v12 setActiveCategoryVolumeTo:v20];
              }
              goto LABEL_22;
            }
            id v15 = +[AVSystemController sharedAVSystemController];
            CFStringRef v12 = v15;
            int v17 = -1115684864;
          }
          LODWORD(v16) = v17;
          [v15 changeActiveCategoryVolumeBy:v16];
LABEL_22:

LABEL_30:
          goto LABEL_31;
        }
        __int16 v13 = *(void **)(a1 + 32);
        uint64_t v14 = 6;
      }
      [v13 _sendMediaRemoteCommand:v14 withOrigin:v9];
      goto LABEL_30;
    }
    long long v11 = _MRLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received Proximity event.", (uint8_t *)&v21, 2u);
    }

    long long v9 = [*(id *)(a1 + 32) nowPlayingServer];
    CFStringRef v12 = [v9 lockScreenRoutingController];
    [v12 startObservationIfNeeded];
    goto LABEL_22;
  }
LABEL_31:
}

void sub_100107048(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 object];
  [v2 _removeClient:v3];
}

void sub_10010737C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001073A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001073B8(uint64_t a1)
{
}

void sub_1001073C0(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 152));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 152);
  *(void *)(v2 + 152) = 0;
}

void sub_100107540(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 128) objectForKey:v2];
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    long long v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing client %{public}@", buf, 0xCu);
  }

  if (([v3 keepAlive] & 1) == 0) {
    [*(id *)(*(void *)(a1 + 32) + 128) removeObjectForKey:v2];
  }
  uint64_t v5 = +[NSMutableArray array];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "allValues", 0);
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      long long v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        long long v11 = [*(id *)(*((void *)&v13 + 1) + 8 * (void)v10) auditToken];
        [v5 addObject:v11];

        long long v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  CFStringRef v12 = +[MRUserSettings currentSettings];
  [v12 setConnectedClientAuditTokens:v5];
}

void sub_100107834(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 128);
  id v6 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = [v2 objectForKey:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1001079C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 128);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100107A5C;
  v5[3] = &unk_10041CD98;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100107A5C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  uint64_t v7 = [v9 bundleIdentifier];
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

int64_t sub_100107FAC(id a1, MRDNowPlayingPlayerClient *a2, MRDNowPlayingPlayerClient *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = [(MRDNowPlayingPlayerClient *)a2 snapshotForIsPlaying:1];
  id v6 = [v5 date];
  uint64_t v7 = [(MRDNowPlayingPlayerClient *)v4 snapshotForIsPlaying:1];

  unsigned int v8 = [v7 date];
  id v9 = [v6 compare:v8];

  return (int64_t)v9;
}

void sub_1001082D8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 152);
  if (v1)
  {
    id v2 = objc_retainBlock(*(id *)(a1 + 40));
    [v1 addObject:v2];
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001083AC;
    block[3] = &unk_100416938;
    id v4 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

uint64_t sub_1001083AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100108544(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.mediaremoted.notificationQueue", v3);
  id v2 = (void *)qword_10047E1C8;
  qword_10047E1C8 = (uint64_t)v1;
}

void sub_1001085A8(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = [v2 mutableCopy];
  }
  else {
    id v3 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:1];
  }
  id v4 = v3;
  [v3 setObject:*(void *)(v1 + 40) forKey:@"_MROriginatingNotification"];
  id v33 = (uint64_t *)(v1 + 40);
  if (*(void *)(v1 + 48))
  {
    uint64_t v5 = objc_msgSend(*(id *)(*(void *)(v1 + 56) + 40), "augmentedUserInfoForPlayerPath:");
    [v4 addEntriesFromDictionary:v5];
  }
  id v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_10032F0CC(v33, v6);
  }

  uint64_t v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10032F038((uint64_t)v4, v7);
  }

  id v8 = [objc_alloc((Class)MRNotification) initWithNotification:*(void *)(v1 + 40) userInfo:v4];
  [*(id *)(v1 + 56) allClients];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  id v9 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
  if (!v9)
  {
LABEL_27:
    uint64_t v25 = [v8 notification];
    BOOL v26 = [v8 userInfo];
    id v27 = +[MRMediaRemoteServiceClient sharedServiceClient];
    MRNotificationServiceClientPostNotificationCallback();

    goto LABEL_28;
  }
  id v11 = v9;
  id v34 = v8;
  char v12 = 0;
  uint64_t v13 = *(void *)v38;
  *(void *)&long long v10 = 138412546;
  long long v28 = v10;
  uint64_t v31 = v1;
  id v32 = v4;
  do
  {
    for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v38 != v13) {
        objc_enumerationMutation(obj);
      }
      long long v15 = *(void **)(*((void *)&v37 + 1) + 8 * i);
      unsigned __int8 v16 = objc_msgSend(v15, "isMediaRemoteDaemon", v28);
      uint64_t v17 = *(void *)(v1 + 64);
      if (!v17) {
        goto LABEL_23;
      }
      id v36 = 0;
      int v18 = (*(uint64_t (**)(uint64_t, void *, void *, id *))(v17 + 16))(v17, v15, v4, &v36);
      id v19 = v36;
      double v20 = v19;
      if (!v18) {
        goto LABEL_24;
      }
      if (v19)
      {
        id v21 = [v4 mutableCopy];
        [v21 addEntriesFromDictionary:v20];
        id v22 = [objc_alloc((Class)MRNotification) initWithNotification:*v33 userInfo:v21];
        id v23 = _MRLogForCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v29 = *v33;
          id v30 = [v15 displayName];
          *(_DWORD *)long long buf = v28;
          uint64_t v44 = v29;
          __int16 v45 = 2112;
          unsigned __int8 v46 = v30;
          _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Posting Custom Notification %@ to %@", buf, 0x16u);
        }
        id v24 = _MRLogForCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG)) {
          sub_10032EFC4(v41, (uint64_t)v21, &v42, v24);
        }

        [v15 postNotification:v22];
        uint64_t v1 = v31;
        id v4 = v32;
      }
      else
      {
LABEL_23:
        [v15 postNotification:v34];
        double v20 = 0;
      }
LABEL_24:
      v12 |= v16;
    }
    id v11 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
  }
  while (v11);
  id v8 = v34;
  if ((v12 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
}

void sub_100108A2C(uint64_t a1, void *a2, void *a3)
{
  id v14 = a3;
  id v5 = a2;
  id v6 = MRGetPlayerPathFromUserInfo();
  if (v14) {
    id v7 = [v14 mutableCopy];
  }
  else {
    id v7 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:1];
  }
  id v8 = v7;
  id v9 = +[MRDMediaRemoteServer server];
  long long v10 = [v9 nowPlayingServer];
  id v11 = [v10 augmentedUserInfoForPlayerPath:v6];
  [v8 addEntriesFromDictionary:v11];

  char v12 = *(void **)(a1 + 32);
  id v13 = [objc_alloc((Class)MRNotification) initWithNotification:v5 userInfo:v8];

  [v12 postNotification:v13];
}

id sub_100108D2C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 128);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100108DA8;
  v3[3] = &unk_10041CE28;
  void v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_100108DA8(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  id v7 = [v9 bundleIdentifier];
  int IsSystemMediaApplication = MRMediaRemoteApplicationIsSystemMediaApplication();

  if (IsSystemMediaApplication)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }
}

id sub_100108F2C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 128);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100108FA8;
  v3[3] = &unk_10041CE28;
  void v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_100108FA8(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  id v7 = [v9 bundleIdentifier];
  int IsSystemPodcastApplication = MRMediaRemoteApplicationIsSystemPodcastApplication();

  if (IsSystemPodcastApplication)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }
}

void sub_10010913C(id a1)
{
  id v1 = objc_alloc_init((Class)RPCompanionLinkClient);
  id v2 = (void *)qword_10047E1D0;
  qword_10047E1D0 = (uint64_t)v1;

  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.mediaremote.companionLinkClient", v3);
  [(id)qword_10047E1D0 setDispatchQueue:v4];

  [(id)qword_10047E1D0 setInvalidationHandler:&stru_10041CE68];
  [(id)qword_10047E1D0 setInterruptionHandler:&stru_10041CE88];
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  id v6 = (void *)qword_10047E1D0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001092F0;
  void v8[3] = &unk_100415F80;
  dispatch_semaphore_t v9 = v5;
  id v7 = v5;
  [v6 activateWithCompletion:v8];
  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_100109260(id a1)
{
  id v1 = _MRLogForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_10032F148();
  }
}

void sub_1001092A8(id a1)
{
  id v1 = _MRLogForCategory();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_10032F17C();
  }
}

void sub_1001092F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_queue_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032F1B0((uint64_t)v3, v4);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100109884(uint64_t a1)
{
  id v2 = (id)MRCreateDiagnosticFromXPCMessage();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100109E58()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_100109F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRGetVolumeMutedResultMessage) initWithMuted:*(unsigned __int8 *)(a1 + 32)];
  MRAddProtobufToXPCMessage();
}

uint64_t sub_10010A090()
{
  return MRAddClientErrorToXPCMessage();
}

uint64_t sub_10010A35C(uint64_t a1, unsigned int a2)
{
  return sub_10001432C(*(void **)(a1 + 32), (uint64_t)"MRXPC_BOOL_RESULT_KEY", 2, a2, 0);
}

void sub_10010A378(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032F290((uint64_t)v6, v7);
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      dispatch_semaphore_t v9 = [*(id *)(a1 + 32) bundleIdentifier];
      long long v10 = +[NSString stringWithFormat:@"System Media Wake - %@", v9];
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, [v5 takeAssertionAndBlessForReason:v10]);

      goto LABEL_7;
    }
    id v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10032F25C();
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_7:
}

uint64_t sub_10010A878(uint64_t a1, unsigned int a2)
{
  return sub_10001432C(*(void **)(a1 + 32), (uint64_t)"MRXPC_BOOL_RESULT_KEY", 2, a2, 0);
}

void sub_10010AAD4(uint64_t a1, xpc_object_t xdict)
{
}

void sub_10010ABEC(id *a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "** Beginning Diagnostic Collection **", buf, 2u);
  }

  id v3 = _MRLogForCategory();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Main Server **", buf, 2u);
  }

  [a1[4] collectDiagnostic:a1[5]];
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for UI Server **", buf, 2u);
  }

  [*((id *)a1[4] + 11) collectDiagnostic:a1[5]];
  id v5 = _MRLogForCategory();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Now Playing Server **", buf, 2u);
  }

  [*((id *)a1[4] + 5) collectDiagnostic:a1[5]];
  id v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Remote Control Server **", buf, 2u);
  }

  [*((id *)a1[4] + 7) collectDiagnostic:a1[5]];
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Browsable Content Server **", buf, 2u);
  }

  [*((id *)a1[4] + 8) collectDiagnostic:a1[5]];
  uint64_t v8 = _MRLogForCategory();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for External Device Server **", buf, 2u);
  }

  [*((id *)a1[4] + 9) collectDiagnostic:a1[5]];
  dispatch_semaphore_t v9 = _MRLogForCategory();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Routing Server **", buf, 2u);
  }

  [*((id *)a1[4] + 10) collectDiagnostic:a1[5]];
  long long v10 = _MRLogForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Group Session Server **", buf, 2u);
  }

  [*((id *)a1[4] + 22) collectDiagnostic:a1[5]];
  id v11 = _MRLogForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Virtual Audio Input Server **", buf, 2u);
  }

  [*((id *)a1[4] + 13) collectDiagnostic:a1[5]];
  char v12 = _MRLogForCategory();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Transaction Server **", buf, 2u);
  }

  [*((id *)a1[4] + 14) collectDiagnostic:a1[5]];
  id v13 = _MRLogForCategory();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "** Collecting Diagnostic for Media Control Server **", buf, 2u);
  }

  [*((id *)a1[4] + 12) collectDiagnostic:a1[5]];
  id v14 = a1[4];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10010B070;
  v15[3] = &unk_10041CF48;
  id v16 = a1[6];
  id v17 = a1[5];
  [v14 _handleCollectClientDiagnosticsMessageWithCompletion:v15];
}

void sub_10010B070(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "** Diagnostic Complete **", buf, 2u);
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10010B168;
  void v7[3] = &unk_100415DF0;
  id v5 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v6 = v3;
  sub_100014324(v5, v7);
}

void sub_10010B168(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = [v3 createDiagnosticInfo];
  id v5 = objc_alloc((Class)NSString);
  id v6 = [v9 diagnosticInfo];
  id v7 = [*(id *)(a1 + 40) diagnosticInfo];
  id v8 = [v5 initWithFormat:@"%@\n%@", v6, v7];
  [v9 setDiagnosticInfo:v8];

  MRAddDiagnosticToXPCMessage();
}

void sub_10010B2CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10010B364;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_10010B364()
{
  return MRAddDiagnosticToXPCMessage();
}

void sub_10010B710(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10010B7DC;
  void v8[3] = &unk_1004162F8;
  id v5 = *(NSObject **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v6;
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_sync(v5, v8);
}

void sub_10010B7DC(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)MRDiagnosticCopyInfo();
  if (!v2) {
    CFStringRef v2 = @"No diagnostic info";
  }
  id v5 = (__CFString *)v2;
  id v3 = [*(id *)(a1 + 40) displayName];
  uint64_t v4 = +[NSString stringWithFormat:@"XPC Client: %@:\n%@\n", v3, v5];

  [*(id *)(a1 + 48) addObject:v4];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10010B890(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableString);
  id v3 = objc_alloc_init((Class)NSDate);
  [v2 appendString:@"MediaRemote Client Diagnostic\n"];
  [v2 appendFormat:@"Collected at: %@\n", v3];
  [v2 appendString:@"================================================================================\n"];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010B9B8;
  block[3] = &unk_1004158D8;
  uint64_t v4 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v2;
  id v5 = v2;
  dispatch_sync(v4, block);
  id v6 = (void *)MRDiagnosticCreate();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10010B9B8(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(a1 + 40), "appendString:", *(void *)(*((void *)&v7 + 1) + 8 * (void)v6), (void)v7);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

uint64_t sub_10010BAAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10010BABC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) disarm];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return (id)v3();
  }
  return result;
}

void sub_10010BCC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = _MRLogForCategory();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    long long v8 = [*(id *)(a1 + 40) bundleIdentifier];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v16 = v7;
    __int16 v17 = 2114;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding authorization callback for route UID: %{public}@ | process: %{public}@", buf, 0x16u);
  }
  long long v9 = [*(id *)(a1 + 40) pairingHandler];
  [v9 addHandlerForRouteUID:*(void *)(a1 + 32) completion:v5];

  long long v10 = +[NSNumber numberWithInteger:a2, kMRMediaRemotePairingHandlerRouteUIDUserInfoKey, @"inputType", *(void *)(a1 + 32)];
  v14[1] = v10;
  id v11 = +[NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:2];

  id v12 = +[MRDMediaRemoteServer server];
  [v12 postClientNotificationNamed:kMRMediaRemotePairingHandlerNotification userInfo:v11];
}

void sub_10010C328(uint64_t a1)
{
  id v2 = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10010C3BC;
  block[3] = &unk_100415CC8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

id sub_10010C3BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateClientsForActiveCriticalSection];
}

void sub_10010C5F4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 40) + 128) allValues];
  id v3 = [v2 sortedArrayUsingComparator:&stru_10041D018];
  [*(id *)(a1 + 32) setActiveClients:v3];

  MRCopyRegisteredTransactionDescriptions();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setActiveTransactions:v4];
}

int64_t sub_10010C68C(id a1, MRDMediaRemoteClient *a2, MRDMediaRemoteClient *a3)
{
  id v4 = a2;
  id v5 = a3;
  unsigned int v6 = [(MRDMediaRemoteClient *)v4 pid];
  if (v6 == getpid())
  {
    int64_t v7 = -1;
  }
  else
  {
    long long v8 = [(MRDMediaRemoteClient *)v4 displayName];
    long long v9 = [v8 stringByReplacingOccurrencesOfString:@"com.apple." withString:&stru_10042ACB0];
    long long v10 = [(MRDMediaRemoteClient *)v5 displayName];
    id v11 = [v10 stringByReplacingOccurrencesOfString:@"com.apple." withString:&stru_10042ACB0];
    int64_t v7 = (int64_t)[v9 compare:v11 options:1];
  }
  return v7;
}

void sub_10010C8A4(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  qword_10047E1E0 = (uint64_t)objc_msgSend(v1, "initWithObjects:", kMRMediaRemoteSupportedCommandsDidChangeNotification, kMRMediaRemoteNowPlayingApplicationPlaybackStateDidChangeNotification, kMRMediaRemoteNowPlayingApplicationDisplayNameDidChangeNotification, kMRMediaRemoteApplicationDidReportPlaybackErrorNotification, kMRMediaRemoteBrowsableContentEndpointChangedNotification, kMRMediaRemoteApplicationFinishedLoadingContentNotification, kMRMediaRemoteApplicationInvalidatedBrowsableContentDataSourceNotification, kMRMediaRemoteContentItemsUpdatedNotification, kMRMediaRemoteBrowsableContentNowPlayingIdentifiersUpdatedNotification, kMRMediaRemoteApplicationInitiatedPlaybackOfContentItemNotification, kMRMediaRemoteBrowsableContentAPIChangedNotification, kMRMediaRemoteSystemAppDidSkipTrackNotification, 0);

  _objc_release_x1();
}

void sub_10010CE30(id a1)
{
  memset(v7, 0, sizeof(v7));
  size_t v6 = 37;
  if (sysctlbyname("kern.bootsessionuuid", v7, &v6, 0, 0) < 0)
  {
    id v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10032F3D8();
    }

    id v1 = 0;
  }
  else
  {
    id v1 = +[NSString stringWithUTF8String:v7];
  }
  if ([v1 length])
  {
    id v3 = +[MRUserSettings currentSettings];
    id v4 = [v3 lastBootUUID];
    byte_1004770F0 = [v1 isEqualToString:v4] ^ 1;

    id v5 = +[MRUserSettings currentSettings];
    [v5 setLastBootUUID:v1];
  }
}

void sub_10010D31C(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(obj);
        }
        size_t v6 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        int64_t v7 = objc_msgSend(*(id *)(a1 + 40), "clientForPID:", objc_msgSend(v6, "intValue"));
        long long v8 = [MRDTaskAssertion alloc];
        id v9 = [v6 intValue];
        long long v10 = [v7 bundleIdentifier];
        id v11 = [(MRDTaskAssertion *)v8 initWithType:5 pid:v9 bundleID:v10 name:@"Restoring state of client after daemon launch"];

        [(MRDTaskAssertion *)v11 invalidateInDuration:10.0];
      }
      id v3 = [obj countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v3);
  }
}

void sub_10010D4A4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)MRMutableApplicationActivity);
  [v2 setStatus:4];
  [*(id *)(a1 + 32) _postAppActivityNotificationNamed:kMRApplicationActivityStatusDidChangeNotification withActivity:v2];
}

void sub_10010D8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010D8EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (id *)(a1 + 32);
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = [v4 localizedDescription];

  [WeakRetained invalidateWithReason:v5];
}

void sub_10010DD64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010E1F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10010E21C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invalidateWithReason:a2];
}

void sub_10010E274(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010E2DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010E408(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10010E478(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.mrdtaskassertion", v3);
  id v2 = (void *)qword_10047E1F8;
  qword_10047E1F8 = (uint64_t)v1;
}

void sub_10010E8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010E900(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained invalidateWithReason:@"Timer Elapsed"];
}

id sub_10010EC48(id a1, NSData *a2)
{
  id v2 = a2;
  memset(&v7, 0, sizeof(v7));
  [(NSData *)v2 getBytes:&v7 length:32];
  audit_token_t atoken = v7;
  uint64_t v3 = audit_token_to_pid(&atoken);
  audit_token_t atoken = v7;
  id v4 = +[NSString stringWithFormat:@"PID: %i, PID_V: %i", v3, audit_token_to_pidversion(&atoken)];

  return v4;
}

void sub_10010EF94(id a1)
{
  qword_10047E208 = [[MRDAutoConnectionController alloc] _init];

  _objc_release_x1();
}

void sub_10010F27C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MRGetPlayerPathFromUserInfo();
  id v5 = [objc_alloc((Class)NSString) initWithFormat:@"player %@ started playing", v4];
  size_t v6 = +[MRDAutoConnectionControllerReason reasonWithType:1 string:v5];
  audit_token_t v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10010F390;
  v9[3] = &unk_10041D1D8;
  id v10 = v3;
  id v8 = v3;
  [v7 connectToAllOutputDevicesForReason:v6 comparator:v9 queue:0 completion:0];
}

uint64_t sub_10010F390(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  size_t v6 = [a2 outputDeviceUIDs];
  audit_token_t v7 = [*(id *)(a1 + 32) deviceUID];
  unsigned __int8 v8 = [v6 containsObject:v7];

  if (v8)
  {
    uint64_t v9 = 1;
  }
  else
  {
    id v10 = [v5 outputDeviceUIDs];
    id v11 = [*(id *)(a1 + 32) deviceUID];
    id v12 = [v10 containsObject:v11];

    uint64_t v9 = (uint64_t)((void)v12 << 63) >> 63;
  }

  return v9;
}

void sub_10010F454(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRGetPlayerPathFromUserInfo();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [objc_alloc((Class)NSString) initWithFormat:@"player %@ started playing", v8];
  id v5 = +[MRDAutoConnectionControllerReason reasonWithType:1 string:v4];
  size_t v6 = *(void **)(a1 + 32);
  audit_token_t v7 = [v3 deviceUID];

  [v6 connectToOutputDevice:v7 reason:v5 queue:0 completion:0];
}

void sub_10010F538(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"_handleActiveSystemEndpointDidChangeNotification:" name:kMRMediaRemoteActiveSystemEndpointDidChangeNotification object:0];

  id v3 = *(id *)(a1 + 32);
  MRAVEndpointGetActiveSystemEndpointUID();
}

void sub_10010F608(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc((Class)NSString);
  uint64_t active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription();
  id v7 = [v4 initWithFormat:@"%@ endpoint changed", active];

  size_t v6 = +[MRDAutoConnectionControllerReason reasonWithType:2 string:v7];
  [*(id *)(a1 + 32) connectToOutputDevice:a2 reason:v6 queue:0 completion:0];
}

uint64_t sub_10010F7B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10010F7C0(uint64_t a1)
{
}

uint64_t sub_10010F7C8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 64) allValues];

  return _objc_release_x1();
}

uint64_t sub_10010F908(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 56) allObjects];

  return _objc_release_x1();
}

void sub_10010FAAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10010FB68;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_10010FB68(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10010FCC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10010FD7C;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_10010FD7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10010FED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10010FF90;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_10010FF90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001100E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1001101A4;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1001101A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001102FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm])
  {
    id v4 = *(void **)(a1 + 48);
    if (v4)
    {
      id v5 = *(NSObject **)(a1 + 40);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1001103B8;
      v6[3] = &unk_100417A50;
      id v8 = v4;
      id v7 = v3;
      dispatch_async(v5, v6);
    }
  }
}

uint64_t sub_1001103B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001106B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100110798;
  block[3] = &unk_10041D318;
  id v13 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  size_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100110798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "sortedArrayUsingComparator:");
    id v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v4 = v3;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  obuint64_t j = v4;
  id v5 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v8);
        uint64_t v10 = *(void **)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        id v13[2] = sub_10011093C;
        v13[3] = &unk_100418848;
        id v14 = *(id *)(a1 + 56);
        uint64_t v15 = v9;
        objc_msgSend(v10, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v9, v11, &_dispatch_main_q, v13);

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
}

id *sub_10011093C(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)[result[4] addObject:result[5]];
  }
  return result;
}

id sub_100110950(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDAutoConnectionController] Begin DiscoverySession %@ because %@", (uint8_t *)&v6, 0x16u);
  }

  return [*(id *)(a1 + 48) setDiscoveryMode:3];
}

void sub_100110A14(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDAutoConnectionController] End DiscoverySession %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) setDiscoveryMode:0];
  if (*(void *)(a1 + 64))
  {
    id v4 = [*(id *)(a1 + 48) copy];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100110B60;
    void v8[3] = &unk_100417A50;
    id v5 = *(NSObject **)(a1 + 56);
    id v6 = *(id *)(a1 + 64);
    id v9 = v4;
    id v10 = v6;
    id v7 = v4;
    dispatch_async(v5, v8);
  }
}

uint64_t sub_100110B60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_100110C58(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_discoverOutputDevice:connect:reason:completion:", *(void *)(a1 + 40), 1, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

id sub_100110D50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_discoverGroup:connect:reason:completion:", *(void *)(a1 + 40), 1, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

id sub_100110E48(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_discoverOutputDevice:connect:reason:completion:", *(void *)(a1 + 40), 0, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

id sub_100110F40(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_discoverGroup:connect:reason:completion:", *(void *)(a1 + 40), 0, *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1001112A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  [*(id *)(*(void *)(a1 + 32) + 24) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", *(void *)(a1 + 40), 0);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      __int16 v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))();
        __int16 v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_1001113E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = +[MRAVLocalEndpoint sharedLocalEndpoint];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else if (v3 && *(unsigned char *)(a1 + 56))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v6[1];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100111510;
    v9[3] = &unk_1004189B0;
    id v11 = *(id *)(a1 + 48);
    id v10 = v3;
    objc_msgSend(v6, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v10, v7, v8, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100111510(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_100111534(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100111858(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v4 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "objectForKeyedSubscript:", *(void *)(a1 + 40), 0);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))();
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 48) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10011199C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isLocalEndpoint])
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = +[MRAVLocalEndpoint sharedLocalEndpoint];
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else if (v3 && *(unsigned char *)(a1 + 56))
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v6[1];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100111AC8;
    v9[3] = &unk_1004189B0;
    id v11 = *(id *)(a1 + 48);
    id v10 = v3;
    objc_msgSend(v6, "_onSerialQueue_connectToEndpoint:reason:queue:completion:", v10, v7, v8, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100111AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_100111AEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100111EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100111F8C;
    v6[3] = &unk_100417A50;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_100111F8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100111FA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 72);
  id v5 = objc_msgSend(*(id *)(a1 + 40), "uniqueIdentifier", 0);
  id v6 = [v4 objectForKeyedSubscript:v5];

  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8 * (void)v10) + 16))();
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  id v11 = *(void **)(a1 + 40);
  long long v12 = *(void **)(*(void *)(a1 + 32) + 72);
  id v13 = [v11 uniqueIdentifier];
  [v12 setObject:0 forKeyedSubscript:v13];
}

void sub_100112108(uint64_t a1)
{
  uint64_t v2 = +[NSUUID UUID];
  id v3 = [v2 UUIDString];

  uint64_t v4 = +[NSDate date];
  id v5 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", @"autoConnectToEndpoint", v3];
  id v6 = [*(id *)(a1 + 32) debugName];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) debugName];
    [v5 appendFormat:@" for %@", v7];
  }
  id v8 = [*(id *)(a1 + 40) string];

  if (v8)
  {
    uint64_t v9 = [*(id *)(a1 + 40) string];
    [v5 appendFormat:@" because %@", v9];
  }
  id v10 = _MRLogForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  unint64_t v11 = (unint64_t)[*(id *)(a1 + 40) type];
  if (v11 > 4) {
    CFStringRef v12 = @"endpointChanged";
  }
  else {
    CFStringRef v12 = off_10041D3B0[v11];
  }
  id v13 = +[NSString stringWithFormat:@"autoConnectToEndpoint-%@", v12];
  v26[0] = MREndpointConnectionReasonUserInfoKey;
  v26[1] = MREndpointConnectionCorrelationIDUserInfoKey;
  v27[0] = v13;
  v27[1] = v3;
  long long v14 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:2];
  long long v15 = *(void **)(a1 + 32);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001123E4;
  v20[3] = &unk_100418348;
  id v21 = v15;
  id v22 = v3;
  uint64_t v16 = *(void *)(a1 + 48);
  long long v17 = *(void **)(a1 + 56);
  id v23 = v4;
  uint64_t v24 = v16;
  id v25 = v17;
  id v18 = v4;
  id v19 = v3;
  [v21 connectToExternalDeviceWithUserInfo:v14 completion:v20];
}

void sub_1001123E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) debugName];

  id v5 = _MRLogForCategory();
  id v6 = v5;
  if (v3)
  {
    BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v4)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = [*(id *)(a1 + 32) debugName];
        id v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138544386;
        CFStringRef v25 = @"autoConnectToEndpoint";
        __int16 v26 = 2114;
        uint64_t v27 = v8;
        __int16 v28 = 2114;
        id v29 = v3;
        __int16 v30 = 2114;
        uint64_t v31 = v9;
        __int16 v32 = 2048;
        uint64_t v33 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_8:

LABEL_13:
      }
    }
    else if (v7)
    {
      sub_10032F580(a1, (uint64_t)v3, v6);
    }
  }
  else
  {
    BOOL v12 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v9 = [*(id *)(a1 + 32) debugName];
        id v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138544130;
        CFStringRef v25 = @"autoConnectToEndpoint";
        __int16 v26 = 2114;
        uint64_t v27 = v13;
        __int16 v28 = 2114;
        id v29 = v9;
        __int16 v30 = 2048;
        uint64_t v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", buf, 0x2Au);
        goto LABEL_8;
      }
    }
    else if (v12)
    {
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v9 = +[NSDate date];
      [v9 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v25 = @"autoConnectToEndpoint";
      __int16 v26 = 2114;
      uint64_t v27 = v15;
      __int16 v28 = 2048;
      id v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", buf, 0x20u);
      goto LABEL_13;
    }
  }

  uint64_t v17 = *(void *)(a1 + 56);
  id v18 = *(NSObject **)(v17 + 8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001126EC;
  v20[3] = &unk_100415B98;
  void v20[4] = v17;
  id v21 = *(id *)(a1 + 32);
  id v22 = v3;
  id v23 = *(id *)(a1 + 64);
  id v19 = v3;
  dispatch_sync(v18, v20);
}

uint64_t sub_1001126EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64);
  id v3 = [*(id *)(a1 + 40) uniqueIdentifier];
  [v2 setObject:0 forKeyedSubscript:v3];

  if (!*(void *)(a1 + 48)) {
    objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_addConnectedEndpoint:", *(void *)(a1 + 40));
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);

  return v4();
}

id sub_100112D8C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onSerialQueue_removeConnectedEndpoint:", *(void *)(a1 + 40));
}

void sub_100113258(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001132F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001133C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113690(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113770(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113880(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100113A00(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
  CFStringRef v12 = @"activeSystemEndpointDidChange";
  uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100113B24;
  void v7[3] = &unk_10041D3E8;
  id v5 = (void *)a1[5];
  void v7[4] = a1[4];
  id v8 = v5;
  id v9 = v3;
  uint64_t v10 = a1[6];
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}

void sub_100113B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  id v5 = [*(id *)(a1 + 32) activeSystemEndpointOutputDeviceUID];
  id v6 = *(void **)(a1 + 40);
  id v7 = v5;
  id v8 = v6;
  if (v7 == v8)
  {
  }
  else
  {
    id v9 = v8;
    unsigned int v10 = [v7 isEqual:v8];

    if (!v10)
    {
      uint64_t v11 = _MRLogForCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = [*(id *)(a1 + 32) activeSystemEndpointOutputDeviceUID];
        int v22 = 138412546;
        uint64_t v23 = v12;
        __int16 v24 = 2112;
        id v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[MRDElectedPlayerController] Ignoring activeSystemEndpointDidChange for %@ because a new change for %@ was received", (uint8_t *)&v22, 0x16u);
      }
      goto LABEL_12;
    }
  }
  if (v3)
  {
    long long v14 = _MRLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      int v22 = 138412546;
      uint64_t v23 = v15;
      __int16 v24 = 2112;
      id v25 = v3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[MRDElectedPlayerController] Failed to connect to proactive endpoint %@ with error %@. Reset to local.", (uint8_t *)&v22, 0x16u);
    }

    id v16 = &_dispatch_main_q;
    MRAVEndpointUpdateActiveSystemEndpointWithReason();
  }
  else
  {
    uint64_t v17 = [*(id *)(a1 + 48) origin];
    id v18 = *(void **)(a1 + 32);
    id v19 = +[MRDMediaRemoteServer server];
    double v20 = [v19 nowPlayingServer];
    id v21 = [v20 originClientForOrigin:v17];
    [v18 setOriginClient:v21 withChangeType:*(void *)(a1 + 56)];
  }
LABEL_12:
  objc_sync_exit(v4);
}

void sub_100113D88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100114158(uint64_t a1)
{
  return _objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "electedPlayerController:electedPlayerDidChange:change:event:reason:");
}

void sub_1001148E4(uint64_t a1)
{
  obuint64_t j = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = objc_alloc((Class)NSString);
  unint64_t v4 = *(void *)(a1 + 48);
  if (v4 > 5) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (uint64_t)*(&off_10041D458 + v4);
  }
  id v6 = [v3 initWithFormat:@"%@ playback timeout event %@ after <%lf> seconds", *(void *)(a1 + 40), v5, *(void *)(a1 + 56)];
  objc_msgSend(v2, "_onSyncSelf_reevaluateElectedPlayerForEvent:withReason:", 2, v6);

  objc_sync_exit(obj);
}

void sub_100114998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_100114B6C(id a1)
{
  qword_10047E220 = +[NSMutableDictionary dictionary];

  _objc_release_x1();
}

void sub_100114CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [v3 activeStatusItems];
  unsigned int v5 = [v4 containsObject:*(void *)(a1 + 32)];

  id v6 = _MRLogForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      int v11 = 138412290;
      id v12 = v3;
      id v8 = "[MRDRRC].SIC handled interaction, %@";
      id v9 = v6;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, v10);
    }
  }
  else if (v7)
  {
    LOWORD(v11) = 0;
    id v8 = "[MRDRRC].SIC not handling this interaction";
    id v9 = v6;
    uint32_t v10 = 2;
    goto LABEL_6;
  }
}

void sub_100114FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100114FF8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v6, "removeAttribution:");
  }
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v6, "addAttribution:");
  }
  [v5 setUserInitiated:1];
}

void sub_100115078(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  objc_storeStrong(WeakRetained + 1, *(id *)(a1 + 32));
}

void sub_1001153EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100115714(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void **)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001157CC;
  v5[3] = &unk_10041D510;
  id v6 = v4;
  id v7 = *(id *)(a1 + 56);
  [v2 _didReceiveData:v3 fromCommunicationChannel:v6 connectionFactory:v5];
}

id sub_1001157CC(uint64_t a1)
{
  id v1 = [objc_alloc((Class)MRAirPlayTransportConnection) initWithOutputContextCommunicationChannel:*(void *)(a1 + 32) outputContext:*(void *)(a1 + 40)];

  return v1;
}

void sub_1001158A8(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:105 description:@"AVOutputContextCommunicationChannel.didCloseCommunicationChannel"];
  [*(id *)(a1 + 32) _didCloseCommunicationChannel:*(void *)(a1 + 40) error:v2];
}

void sub_1001159D4(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)a1[6];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100115A68;
  v4[3] = &unk_10041D538;
  id v5 = v3;
  [v1 _didReceiveData:v2 fromCommunicationChannel:v5 connectionFactory:v4];
}

id sub_100115A68(uint64_t a1)
{
  id v1 = [objc_alloc((Class)MRAirPlayTransportConnection) initWithAPCommunicationChannel:*(void *)(a1 + 32)];

  return v1;
}

void sub_100115B44(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSError) initWithMRError:105 description:@"APReceiverMediaRemoteCommunicationChannel.didCloseCommunicationChannel"];
  [*(id *)(a1 + 32) _didCloseCommunicationChannel:*(void *)(a1 + 40) error:v2];
}

void sub_100115F2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100115FE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100116138(id a1)
{
  qword_10047E230 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver", 2);
}

void sub_100116164(void *a1)
{
  uint64_t v1 = qword_10047E228;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_10047E228, &stru_10041D558);
  }
  off_100477280 = (uint64_t (*)())dlsym((void *)qword_10047E230, "APReceiverMediaRemoteXPCClient_SetDelegate");
  ((void (*)(id))off_100477280)(v2);
}

Class sub_1001161F4()
{
  if (qword_10047E240 != -1) {
    dispatch_once(&qword_10047E240, &stru_10041D578);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_10047E238 = (uint64_t)result;
  off_1004771B8 = (uint64_t (*)())sub_100116258;
  return result;
}

id sub_100116258()
{
  return (id)qword_10047E238;
}

void sub_100116264(id a1)
{
  qword_10047E248 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

void sub_100117178(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [v3 uniqueIdentifier];
  if (v4) {
    [*(id *)(a1 + 32) addObject:v4];
  }
  id v5 = *(void **)(a1 + 40);
  id v12 = v3;
  id v6 = +[NSArray arrayWithObjects:&v12 count:1];
  [v5 _appendDescribableArray:v6 toString:*(void *)(a1 + 48) withTitle:@"Endpoint" indentLevel:0 usingDebugDescription:1];

  uint64_t v7 = [*(id *)(*(void *)(a1 + 40) + 352) objectForKeyedSubscript:v4];
  id v8 = (void *)v7;
  if (v7)
  {
    id v9 = *(void **)(a1 + 40);
    uint64_t v11 = v7;
    uint32_t v10 = +[NSArray arrayWithObjects:&v11 count:1];
    [v9 _appendDescribableArray:v10 toString:*(void *)(a1 + 48) withTitle:@"External Device" indentLevel:1 usingDebugDescription:1];
  }
  [*(id *)(a1 + 48) appendString:@"\n"];
}

void sub_1001172C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 appendFormat:@"EndpointID: %@\n", a2];
  uint64_t v7 = *(void **)(a1 + 40);
  id v9 = v6;
  id v8 = +[NSArray arrayWithObjects:&v9 count:1];
  [v7 _appendDescribableArray:v8 toString:*(void *)(a1 + 32) withTitle:@"External Device" indentLevel:1 usingDebugDescription:1];

  [*(id *)(a1 + 32) appendString:@"\n"];
}

void sub_1001177D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001177EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001177FC(uint64_t a1)
{
}

void sub_100117804(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_100118034(uint64_t a1, void *a2)
{
  return [a2 deviceType] == *(_DWORD *)(a1 + 32);
}

id sub_100118314()
{
  if (qword_10047E250 != -1) {
    dispatch_once(&qword_10047E250, &stru_10041D630);
  }
  dispatch_semaphore_t v0 = (void *)qword_10047E258;

  return v0;
}

void sub_100118368(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.MediaRemote.MRDParticipantDataSource.notification.targetQueue", v3);
  id v2 = (void *)qword_10047E258;
  qword_10047E258 = (uint64_t)v1;
}

id sub_1001186A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) dataSource:*(void *)(a1 + 40) didUpdateParticipants:*(void *)(a1 + 48)];
}

void sub_1001189B8(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleMusicStateUpdateNotification:" name:@"MRDMusicUserStateCenterCloudStateDidUpdateNotification" object:0];

  id v3 = +[NSNotificationCenter defaultCenter];
  [v3 addObserver:*(void *)(a1 + 32) selector:"handleGroupSessionServerDidStartNotification:" name:@"MRDGroupSessionServerDidStartNotification" object:0];

  id v4 = +[MRDMediaRemoteServer server];
  id v5 = [v4 groupSessionServer];
  id v6 = [v5 sessionManager];

  [v6 addObserver:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) loadFromStorage];
  [*(id *)(a1 + 32) loadLocalIdentities];
}

void sub_100118C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100118C5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100118C6C(uint64_t a1)
{
}

void sub_100118C74(uint64_t a1)
{
}

void sub_100118DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100118DCC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) localIdentityMap];
  uint64_t v3 = [v2 objectForKey:*(void *)(a1 + 40)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v6 = [*(id *)(a1 + 32) remoteIdentityMap];
    uint64_t v7 = [v6 objectForKey:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = [*(id *)(a1 + 32) pepper];
      uint64_t v12 = +[MRPlaybackQueueParticipant expectedIdentifierForUserIdentity:v10 withRandomData:v11];
      uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
      long long v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      uint64_t v15 = [*(id *)(a1 + 32) remoteIdentityMap];
      [v15 setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKey:*(void *)(a1 + 40)];

      id v16 = *(void **)(a1 + 32);
      [v16 rebuildParticipants];
    }
  }
}

void sub_100119324(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 dataSource:*(void *)(a1 + 32) didUpdateParticipants:*(void *)(a1 + 40)];
}

void sub_100119A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100119A5C(uint64_t a1)
{
  id v2 = +[MRDMediaRemoteServer server];
  uint64_t v3 = [v2 groupSessionServer];
  id v6 = [v3 sessionManager];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [v6 session];
  [WeakRetained updatePepperIfNeededWithSession:v5];
}

void sub_100119DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100119DC8(uint64_t a1)
{
  id v2 = +[MRDMediaRemoteServer server];
  uint64_t v3 = [v2 groupSessionServer];
  id v6 = [v3 sessionManager];

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [v6 session];
  [WeakRetained updatePepperIfNeededWithSession:v5];
}

id sub_10011A08C(uint64_t a1)
{
  return [*(id *)(a1 + 32) loadLocalIdentities];
}

id sub_10011A1CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePepperIfNeededWithSession:*(void *)(a1 + 40)];
}

id sub_10011A28C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updatePepperIfNeededWithSession:*(void *)(a1 + 40)];
}

id sub_10011A6D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _initializeIDSRemoteControlServiceWithRoutingDataSource:*(void *)(a1 + 40)];
}

void sub_10011A9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10011A9F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10011AA04(uint64_t a1)
{
}

void sub_10011AA0C(void *a1)
{
  id v2 = [[MRDIDSCompanionRemoteControlService alloc] initWithRoutingDataSource:a1[5]];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;

  objc_msgSend(*(id *)(a1[4] + 56), "setDelegate:");
  uint64_t v5 = a1[4];
  if (*(unsigned char *)(v5 + 8)) {
    [*(id *)(v5 + 56) start];
  }
  id v6 = +[NSNotificationCenter defaultCenter];
  [v6 removeObserver:*(void *)(*(void *)(a1[6] + 8) + 40)];
}

void sub_10011AAB0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) disarm])
  {
    id v2 = +[NRPairedDeviceRegistry sharedInstance];
    uint64_t v3 = [v2 getActivePairedDevice];

    uint64_t v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [v3 name];
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRemoteControlService] observed new activePairedDevice <%@>, creating IDSRemoteControlService...", (uint8_t *)&v6, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10011AF68(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.remoteControlService.serverClientConnectionQueue", v3);
  id v2 = (void *)qword_10047E260;
  qword_10047E260 = (uint64_t)v1;
}

void sub_10011B574(id a1)
{
  dispatch_queue_t v1 = objc_alloc_init(MRDUIServer);
  uint64_t v2 = qword_10047E270;
  qword_10047E270 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10011B9A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = [v2 listener];
  uint64_t v4 = [v6 endpoint];
  uint64_t v5 = [v4 _endpoint];
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v5);
}

void sub_10011BBD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10011BC70;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

void sub_10011BC70(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 _endpoint];
  xpc_dictionary_set_value(v3, "MRXPC_MEDIA_CONTROLS_XPC_ENDPOINT_KEY", v4);
}

void sub_10011BE74(id a1, OS_xpc_object *a2)
{
  xpc_object_t xdict = a2;
  char v2 = MRSupportsSystemUIActivities();
  xpc_dictionary_set_BOOL(xdict, "MRXPC_BOOL_RESULT_KEY", v2);
}

id sub_10011C284(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addClient:*(void *)(a1 + 40)];
}

id sub_10011C290(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeClient:*(void *)(a1 + 40)];
}

void sub_10011CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10011CEA4(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) bargeCalls];
  if ([v3 count])
  {
    char v2 = objc_opt_respondsToSelector();

    if (v2) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "handleMediaRemoteCommandForBargeCalls:", objc_msgSend(*(id *)(a1 + 40), "commandType"));
    }
  }
  else
  {
  }
}

void sub_10011D1E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) playerPath];

    id v7 = _MRLogForCategory();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!v6)
    {
      if (!v8) {
        goto LABEL_19;
      }
      id v9 = [*(id *)(a1 + 32) commandID];
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v24 = 138544130;
      CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
      __int16 v26 = 2114;
      uint64_t v27 = v9;
      __int16 v28 = 2114;
      id v29 = v5;
      __int16 v30 = 2048;
      uint64_t v31 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds", (uint8_t *)&v24, 0x2Au);
      goto LABEL_18;
    }
    if (!v8) {
      goto LABEL_19;
    }
    id v9 = [*(id *)(a1 + 32) commandID];
    uint64_t v10 = [*(id *)(a1 + 32) playerPath];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v24 = 138544386;
    CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    __int16 v28 = 2114;
    id v29 = v5;
    __int16 v30 = 2114;
    uint64_t v31 = v10;
    __int16 v32 = 2048;
    uint64_t v33 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v24, 0x34u);
    goto LABEL_17;
  }
  uint64_t v13 = +[NSNumber numberWithBool:a2];

  long long v14 = [*(id *)(a1 + 32) playerPath];

  id v7 = _MRLogForCategory();
  BOOL v15 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v14)
    {
      if (!v15) {
        goto LABEL_19;
      }
      id v9 = [*(id *)(a1 + 32) commandID];
      uint64_t v10 = +[NSNumber numberWithBool:a2];
      uint64_t v11 = [*(id *)(a1 + 32) playerPath];
      id v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v24 = 138544386;
      CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
      __int16 v26 = 2114;
      uint64_t v27 = v9;
      __int16 v28 = 2112;
      id v29 = v10;
      __int16 v30 = 2114;
      uint64_t v31 = v11;
      __int16 v32 = 2048;
      uint64_t v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds", (uint8_t *)&v24, 0x34u);

      goto LABEL_17;
    }
    if (!v15) {
      goto LABEL_19;
    }
    id v9 = [*(id *)(a1 + 32) commandID];
    uint64_t v10 = +[NSNumber numberWithBool:a2];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v24 = 138544130;
    CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    __int16 v28 = 2112;
    id v29 = v10;
    __int16 v30 = 2048;
    uint64_t v31 = v21;
    double v20 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v24, 0x2Au);
LABEL_17:

LABEL_18:
    goto LABEL_19;
  }
  if (v14)
  {
    if (!v15) {
      goto LABEL_19;
    }
    id v9 = [*(id *)(a1 + 32) commandID];
    uint64_t v10 = [*(id *)(a1 + 32) playerPath];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v24 = 138544130;
    CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    __int16 v28 = 2114;
    id v29 = v10;
    __int16 v30 = 2048;
    uint64_t v31 = v19;
    double v20 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_16;
  }
  if (v15)
  {
    id v9 = [*(id *)(a1 + 32) commandID];
    uint64_t v10 = +[NSDate date];
    [v10 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v24 = 138543874;
    CFStringRef v25 = @"MRDPhoneCallObserver.handleMediaRemoteCommand";
    __int16 v26 = 2114;
    uint64_t v27 = v9;
    __int16 v28 = 2048;
    id v29 = v23;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v24, 0x20u);
    goto LABEL_18;
  }
LABEL_19:

  uint64_t v22 = *(void *)(a1 + 48);
  if (v22) {
    (*(void (**)(uint64_t, uint64_t, id))(v22 + 16))(v22, a2, v5);
  }
}

void sub_10011E388(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) userInfo];
  id v5 = [v2 objectForKeyedSubscript:kMRNowPlayingPlayerPathUserInfoKey];

  id v3 = [v5 origin];
  unsigned int v4 = [v3 isLocallyHosted];

  if (v4) {
    objc_msgSend(*(id *)(a1 + 40), "_onQueue_adjustPlaybackTimerIfNeededForPlayerPath:", v5);
  }
}

void sub_10011E758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011E780(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_onQueue_simplifyToplogyOfPlayerPathIfNeeded:", *(void *)(a1 + 32));
}

id sub_10011E9B8(uint64_t a1, void *a2)
{
  id v3 = [a2 origin];
  unsigned int v4 = [*(id *)(a1 + 32) origin];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10011EA1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v11 = _MRLogForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v23 = v16;
      __int16 v24 = 2112;
      id v25 = v17;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[MRDITS] <%p> Could not find endpoint for playerPath <%@> - error: %@", buf, 0x20u);
    }
    goto LABEL_10;
  }
  if ([v5 connectionType] == (id)6)
  {
    if ([v5 hasASmartDevice])
    {
      id v7 = [*(id *)(a1 + 32) localDeviceUID];
      unsigned __int8 v8 = [v5 containsOutputDeviceWithUID:v7];

      if ((v8 & 1) == 0)
      {
        id v9 = _MRLogForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 134218242;
          uint64_t v23 = v10;
          __int16 v24 = 2112;
          id v25 = v5;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDITS] <%p> Letting endpoint be hosted by a smart device - %@", buf, 0x16u);
        }

        uint64_t v11 = [v5 outputDevices];
        uint64_t v12 = [v5 outputDeviceUIDs];
        uint64_t v13 = *(void *)(a1 + 48);
        uint64_t v14 = *(void *)(a1 + 56);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10011EC84;
        v18[3] = &unk_1004167A8;
        void v18[4] = *(void *)(a1 + 32);
        id v19 = v12;
        id v20 = v5;
        id v21 = *(id *)(a1 + 56);
        id v15 = v12;
        [v20 removeOutputDevices:v11 initiator:v13 withReplyQueue:v14 completion:v18];

LABEL_10:
      }
    }
  }
}

void sub_10011EC84(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = _MRLogForCategory();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v5)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = [*(id *)(a1 + 48) uniqueIdentifier];
      uint64_t v14 = [*(id *)(a1 + 40) componentsJoinedByString:@","];
      *(_DWORD *)long long buf = 134218498;
      uint64_t v24 = v12;
      __int16 v25 = 2112;
      __int16 v26 = v13;
      __int16 v27 = 2112;
      __int16 v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDITS] <%p> Removed devices from existing endpoint %@: <%@>", buf, 0x20u);
    }
    id v15 = [*(id *)(a1 + 48) outputDevices];
    if ([v15 count] == (id)1)
    {
      uint64_t v16 = [*(id *)(a1 + 48) outputDevices];
      uint64_t v17 = [v16 firstObject];
      unsigned int v18 = [v17 isSmartDevice];

      if (v18)
      {
        unsigned int v4 = _MRLogForCategory();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_5;
        }
        uint64_t v19 = *(void *)(a1 + 32);
        id v7 = [*(id *)(a1 + 48) uniqueIdentifier];
        unsigned __int8 v8 = [*(id *)(a1 + 40) firstObject];
        *(_DWORD *)long long buf = 134218498;
        uint64_t v24 = v19;
        __int16 v25 = 2112;
        __int16 v26 = v7;
        __int16 v27 = 2112;
        __int16 v28 = v8;
        id v9 = "[MRDITS] <%p> Not trying to recreate WHA group; Endpoint (%@) only had one smart device (%@)";
        uint64_t v10 = v4;
        uint32_t v11 = 32;
        goto LABEL_4;
      }
    }
    else
    {
    }
    uint64_t v20 = *(void *)(a1 + 56);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10011EF60;
    v22[3] = &unk_10041C150;
    uint64_t v21 = *(void *)(a1 + 40);
    void v22[4] = *(void *)(a1 + 32);
    +[MRAVEndpoint createEndpointWithOutputDeviceUIDs:v21 options:128 queue:v20 completion:v22];
    goto LABEL_14;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) componentsJoinedByString:@","];
    unsigned __int8 v8 = [*(id *)(a1 + 48) uniqueIdentifier];
    *(_DWORD *)long long buf = 134218754;
    uint64_t v24 = v6;
    __int16 v25 = 2112;
    __int16 v26 = v7;
    __int16 v27 = 2112;
    __int16 v28 = v8;
    __int16 v29 = 2112;
    id v30 = v3;
    id v9 = "[MRDITS] <%p> Could not remove devices <%@> from existing endpoint (%@) - error: %@";
    uint64_t v10 = v4;
    uint32_t v11 = 42;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
  }
LABEL_5:

LABEL_14:
}

void sub_10011EF60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v12 = 134218242;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      uint64_t v10 = "[MRDITS] <%p> Topology not simplified, error: %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v12, 0x16u);
    }
  }
  else if (v8)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 134218242;
    uint64_t v13 = v11;
    __int16 v14 = 2112;
    id v15 = v5;
    uint64_t v10 = "[MRDITS] <%p> Topology simplified, new endpoint: %@";
    goto LABEL_6;
  }
}

BOOL sub_10011F14C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isSmartDevice];
}

id sub_10011F784(uint64_t a1)
{
  return [*(id *)(a1 + 32) cleanUp];
}

id sub_10011F8BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) prewarmSoon];
}

void sub_10011F8C4(uint64_t a1, void *a2)
{
  id v13 = a2;
  char v2 = [v13 userInfo];
  id v3 = MRGetPlayerPathFromUserInfo();

  unsigned int v4 = [v3 origin];
  unsigned int v5 = [v4 isLocallyHosted];

  if (v5)
  {
    id v6 = [v13 userInfo];
    id v7 = [v6 objectForKeyedSubscript:kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey];
    unsigned int v8 = [v7 BOOLValue];

    if (v8)
    {
      uint64_t v9 = [v3 origin];
      if ([v9 isLocal])
      {
        uint64_t v10 = +[MRDMediaRemoteServer server];
        uint64_t v11 = [v10 deviceInfo];
        unsigned int v12 = [v11 considerLocalOriginAsSeperateStream];

        if (!v12) {
          goto LABEL_8;
        }
      }
      else
      {
      }
      [(id)objc_opt_class() _reportStreamCountAnalytics];
    }
  }
LABEL_8:
}

id sub_10011FAAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) prewarm];
}

void sub_10011FDFC(uint64_t a1)
{
  char v2 = +[NSNotificationCenter defaultCenter];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10011FEAC;
  v4[3] = &unk_10041D790;
  void v4[4] = *(void *)(a1 + 32);
  id v3 = [v2 addObserverForName:_MRMediaRemoteDefaultSupportedCommandsDidChangeNotification object:0 queue:0 usingBlock:v4];
}

void sub_10011FEAC(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  MRGetPlayerPathFromUserInfo();
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  unsigned int v4 = [v6 origin];
  unsigned int v5 = [v4 isLocal];

  if (v5) {
    [*(id *)(a1 + 32) prewarmSoon];
  }
}

void sub_10012018C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a1[4];
  uint64_t v11 = _MRLogForCategory();
  unsigned int v12 = v11;
  if (v8 && !v9)
  {
    BOOL v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v13)
      {
        uint64_t v15 = a1[5];
        uint64_t v14 = a1[6];
        uint64_t v16 = a1[4];
        uint64_t v17 = +[NSDate date];
        [v17 timeIntervalSinceDate:a1[7]];
        int v38 = 138544386;
        uint64_t v39 = v15;
        __int16 v40 = 2114;
        uint64_t v41 = v14;
        __int16 v42 = 2112;
        id v43 = v8;
        __int16 v44 = 2114;
        uint64_t v45 = v16;
        __int16 v46 = 2048;
        uint64_t v47 = v18;
        uint64_t v19 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v20 = v12;
        uint32_t v21 = 52;
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v38, v21);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
    if (!v13) {
      goto LABEL_22;
    }
    uint64_t v32 = a1[5];
    uint64_t v33 = a1[6];
    uint64_t v17 = +[NSDate date];
    [v17 timeIntervalSinceDate:a1[7]];
    int v38 = 138544130;
    uint64_t v39 = v32;
    __int16 v40 = 2114;
    uint64_t v41 = v33;
    __int16 v42 = 2112;
    id v43 = v8;
    __int16 v44 = 2048;
    uint64_t v45 = v34;
    uint64_t v19 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_15:
    uint64_t v20 = v12;
    uint32_t v21 = 42;
    goto LABEL_16;
  }
  if (v9)
  {
    BOOL v22 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v22)
      {
        uint64_t v24 = a1[5];
        uint64_t v23 = a1[6];
        uint64_t v25 = a1[4];
        uint64_t v17 = +[NSDate date];
        [v17 timeIntervalSinceDate:a1[7]];
        int v38 = 138544386;
        uint64_t v39 = v24;
        __int16 v40 = 2114;
        uint64_t v41 = v23;
        __int16 v42 = 2114;
        id v43 = v9;
        __int16 v44 = 2114;
        uint64_t v45 = v25;
        __int16 v46 = 2048;
        uint64_t v47 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v38, 0x34u);
LABEL_17:

        goto LABEL_22;
      }
    }
    else if (v22)
    {
      sub_10032D4A4();
    }
    goto LABEL_22;
  }
  BOOL v27 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (!v27) {
      goto LABEL_22;
    }
    uint64_t v35 = a1[5];
    uint64_t v36 = a1[6];
    uint64_t v17 = +[NSDate date];
    [v17 timeIntervalSinceDate:a1[7]];
    int v38 = 138543874;
    uint64_t v39 = v35;
    __int16 v40 = 2114;
    uint64_t v41 = v36;
    __int16 v42 = 2048;
    id v43 = v37;
    uint64_t v19 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint64_t v20 = v12;
    uint32_t v21 = 32;
    goto LABEL_16;
  }
  if (v27)
  {
    uint64_t v29 = a1[5];
    uint64_t v28 = a1[6];
    id v30 = (void *)a1[4];
    uint64_t v17 = +[NSDate date];
    [v17 timeIntervalSinceDate:a1[7]];
    int v38 = 138544130;
    uint64_t v39 = v29;
    __int16 v40 = 2114;
    uint64_t v41 = v28;
    __int16 v42 = 2114;
    id v43 = v30;
    __int16 v44 = 2048;
    uint64_t v45 = v31;
    uint64_t v19 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_15;
  }
LABEL_22:
}

void sub_10012060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120624(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100120634(uint64_t a1)
{
}

id sub_10012063C(uint64_t a1)
{
  char v2 = [*(id *)(*(void *)(a1 + 32) + 48) debugName];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v2 forKeyedSubscript:@"designatedGroupLeader"];

  id v3 = [*(id *)(*(void *)(a1 + 32) + 72) displayName];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v3 forKeyedSubscript:@"origin"];

  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 64);
  unsigned int v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return [v5 setObject:v4 forKeyedSubscript:@"outputContext"];
}

void sub_100120A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120A70(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) name];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100120BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120BF0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100120D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120D54(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100120E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120E74(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_100120FA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100120FB8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 48);
  BOOL v3 = *(_DWORD *)(*(void *)(result + 32) + 8) != v1 || v1 == 3;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v3;
  *(_DWORD *)(*(void *)(result + 32) + 8) = *(_DWORD *)(result + 48);
  return result;
}

void sub_100120FF0(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v4 = +[NSMutableDictionary dictionary];
    id v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
    [v4 setObject:v2 forKey:kMRExternalDeviceConnectionStateUserInfoKey];

    BOOL v3 = +[NSNotificationCenter defaultCenter];
    [v3 postNotificationName:kMRExternalDeviceConnectionStateDidChangeNotification object:*(void *)(a1 + 32) userInfo:v4];
  }
}

void sub_1001211BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001211D4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) uid];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1001215D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001215F8(void *a1)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 16));
  uint64_t v2 = (void *)a1[5];
  uint64_t v3 = (id *)(a1[4] + 16);

  objc_storeStrong(v3, v2);
}

void sub_100121650(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 200);
  if (v3)
  {
    if (*(void *)(v2 + 208))
    {
      id v4 = [v3 copy];
      unsigned int v5 = *(NSObject **)(*(void *)(a1 + 32) + 208);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100121730;
      void v7[3] = &unk_100417A50;
      id v9 = v4;
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, v7);
    }
  }
}

uint64_t sub_100121730(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100121744(void *a1)
{
  id v3 = +[NSMutableDictionary dictionary];
  [v3 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:MRExternalDevicePreviousDeviceInfoUserInfoKey];
  [v3 setObject:a1[4] forKeyedSubscript:MRExternalDeviceDeviceInfoUserInfoKey];
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:MRExternalDeviceDeviceInfoDidChangeNotification object:a1[5] userInfo:v3];
}

void sub_100121CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_100121D74(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    BOOL v13 = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:v9];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100121EA8;
    v15[3] = &unk_100416820;
    id v16 = v11;
    [WeakRetained _handleRemoteCommand:a3 withOptions:v10 playerPath:v13 completion:v15];
  }
  else
  {
    uint64_t v14 = +[MRCommandResult commandResultWithSendError:2];
    (*((void (**)(id, void *))v11 + 2))(v11, v14);
  }
}

uint64_t sub_100121EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100121EB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained(v7);
  if (WeakRetained)
  {
    id Error = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3];
    [WeakRetained _handlePlaybackQueueRequest:a2 forPlayerPath:Error completion:v8];
  }
  else
  {
    id Error = (void *)MRMediaRemoteCreateError();
    v8[2](v8, 0, Error);
  }
}

void sub_100121F80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v9 = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10012208C;
    v11[3] = &unk_10041AA68;
    id v12 = v7;
    [WeakRetained _handlePlaybackSessionRequest:a2 forPlayerPath:v9 completion:v11];
  }
  else
  {
    id Error = (void *)MRMediaRemoteCreateError();
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0, Error);
  }
}

uint64_t sub_10012208C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10012209C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v14 = a2;
  id v9 = a4;
  id v10 = a5;
  id v11 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id Error = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:v9];
    [WeakRetained _handlePlaybackSessionMigrateRequest:v14 request:v11 forPlayerPath:Error completion:v10];
  }
  else
  {
    id Error = (void *)MRMediaRemoteCreateError();
    v10[2](v10, v11, Error);
  }
}

void sub_100122190(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v9 = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a3];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001222A4;
    v11[3] = &unk_100415FA8;
    id v12 = v7;
    [WeakRetained _handlePlaybackSessionMigrateBeginRequest:a2 forPlayerPath:v9 completion:v11];
  }
  else
  {
    id v10 = [objc_alloc((Class)NSError) initWithMRError:100];
    (*((void (**)(id, id))v7 + 2))(v7, v10);
  }
}

uint64_t sub_1001222A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001222BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v11 = [*(id *)(a1 + 32) _createResolvedPlayerPathFromPlayerPath:a4];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    id v13[2] = sub_1001223D8;
    v13[3] = &unk_100415FA8;
    id v14 = v9;
    [WeakRetained _handlePlaybackSessionMigrateEndRequest:a2 error:a3 forPlayerPath:v11 completion:v13];
  }
  else
  {
    id v12 = [objc_alloc((Class)NSError) initWithMRError:100];
    (*((void (**)(id, id))v9 + 2))(v9, v12);
  }
}

uint64_t sub_1001223D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001223F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = [v7 context];
  id v12 = v11;
  if (WeakRetained)
  {
    BOOL v13 = *(void **)(a1 + 32);
    id v14 = [v11 destinationPlayerPath];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100122530;
    v15[3] = &unk_10041D8A8;
    id v19 = v9;
    id v16 = v7;
    id v17 = v12;
    id v18 = v8;
    [v13 _createPlayerAndWaitForCanBeNowPlaying:v14 completion:v15];
  }
}

void sub_100122530(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v10 = [v7 bundleIdentifier];
    sub_100169F18(v10);

    objc_initWeak(&location, v7);
    [*(id *)(a1 + 32) setType:1];
    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    id v19 = sub_10012275C;
    uint64_t v20 = &unk_100416758;
    objc_copyWeak(&v21, &location);
    [*(id *)(a1 + 32) setServerBoundMessageHandler:&v17];
    objc_msgSend(*(id *)(a1 + 32), "setLocalHostedInvalidationPlayerPath:", v8, v17, v18, v19, v20);
    id v11 = MRCreateXPCMessage();
    id v12 = objc_alloc((Class)MRApplicationConnectionContext);
    BOOL v13 = [*(id *)(a1 + 40) identifier];
    id v14 = [*(id *)(a1 + 40) service];
    id v15 = [v12 initWithIdentifier:v13 service:v14 destinationPlayerPath:v8];

    id v16 = [objc_alloc((Class)MRCreateApplicationConnectionMessage) initWithConnectionContext:v15 requestInfo:*(void *)(a1 + 48)];
    MRAddProtobufToXPCMessage();
    [v7 relayXPCMessage:v11 andReply:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
}

void sub_100122728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012275C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    [v5 type];
    MRCreateXPCMessage();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    MRAddProtobufToXPCMessage();
    [WeakRetained relayXPCMessage:v7 andReply:0];
  }
  else
  {
    id v7 = [objc_alloc((Class)NSError) initWithMRError:178];
    [v8 invalidate:v7];
  }
}

void sub_100122844(id a1, MRDApplicationConnection *a2, MRApplicationConnectionRequestInfo *a3, id a4)
{
  id v5 = a4;
  id v6 = [objc_alloc((Class)NSError) initWithMRError:132];
  (*((void (**)(id, id))a4 + 2))(v5, v6);
}

void sub_1001229B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001229D0(uint64_t a1)
{
}

void sub_100122BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  _Unwind_Resume(a1);
}

void sub_100122C0C(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 40) + 48);
  id v3 = *(id *)(a1 + 32);
  id v4 = v3;
  if (v3 == v2) {
    char v5 = 0;
  }
  else {
    char v5 = [v3 isEqual:v2] ^ 1;
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    return;
  }
  id v6 = [*(id *)(*(void *)(a1 + 40) + 48) debugName];

  id v7 = _MRLogForCategory();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = [*(id *)(v9 + 48) debugName];
      id v11 = [*(id *)(a1 + 32) debugName];
      int v15 = 138544130;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      CFStringRef v18 = @"designatedGroupLeader";
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      __int16 v21 = 2112;
      BOOL v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ from <%@> to <%@>", (uint8_t *)&v15, 0x2Au);

LABEL_10:
    }
  }
  else if (v8)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v10 = [*(id *)(a1 + 32) debugName];
    int v15 = 138543874;
    uint64_t v16 = v12;
    __int16 v17 = 2114;
    CFStringRef v18 = @"designatedGroupLeader";
    __int16 v19 = 2112;
    uint64_t v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set: %{public}@ setting %{public}@ to <%@>", (uint8_t *)&v15, 0x20u);
    goto LABEL_10;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(a1 + 40) + 48));
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 32));
  [*(id *)(*(void *)(a1 + 40) + 40) setDesignatedGroupLeaderWhenContextEmpty:*(void *)(a1 + 32)];
  if (([*(id *)(a1 + 32) isLocalDevice] & 1) == 0) {
    objc_msgSend(*(id *)(a1 + 40), "_onQueue_clearLocalOriginForwaderWithReason:", @"designatedGroupLeader no longer local");
  }
  if ([*(id *)(a1 + 32) isLocalDevice])
  {
    BOOL v13 = *(void **)(a1 + 40);
    id v14 = [v13 origin];
    objc_msgSend(v13, "_onQueue_forwardOriginToLocalOrigin:", v14);
  }
  [*(id *)(a1 + 40) _reevaluateDeviceInfo];
}

void sub_1001231DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100123200(uint64_t a1)
{
  uint64_t v2 = kMRMediaRemoteOptionDestinationDeviceUIDs;
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKeyedSubscript:kMRMediaRemoteOptionDestinationDeviceUIDs];

  if (!v3)
  {
    id v4 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) mutableCopy];
    char v5 = [*(id *)(a1 + 32) outputContext];
    id v6 = [v5 outputDeviceUIDs];
    id v7 = +[NSKeyedArchiver archivedDataWithRootObject:v6 requiringSecureCoding:1 error:0];
    [v4 setObject:v7 forKeyedSubscript:v2];

    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v4;
  }
  uint64_t v10 = [*(id *)(a1 + 40) origin];
  unsigned int v11 = [v10 isLocal];

  if (!v11)
  {
    if (!*(unsigned char *)(a1 + 68))
    {
      uint64_t v26 = *(void **)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_1001235FC;
      v34[3] = &unk_10041D918;
      int v38 = *(_DWORD *)(a1 + 64);
      uint64_t v29 = *(void *)(a1 + 56);
      id v30 = *(void **)(a1 + 40);
      void v34[4] = *(void *)(a1 + 32);
      uint64_t v37 = v29;
      id v35 = v30;
      id v36 = *(id *)(a1 + 48);
      [v26 _createPlayerAndWaitForConnection:v27 command:v28 completion:v34];

      return;
    }
    uint64_t v33 = [[MRDRemoteControlCommand alloc] initWithCommandType:*(unsigned int *)(a1 + 64) playerPath:*(void *)(a1 + 40) unresolvedPlayerPath:*(void *)(a1 + 40) senderAppDisplayID:0 options:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    CFStringRef v18 = +[MRDMediaRemoteServer server];
    __int16 v19 = [v18 nowPlayingServer];
    uint64_t v20 = [v19 localOriginClient];
    __int16 v17 = [v20 overrideClient];

    if (v17) {
      goto LABEL_14;
    }
    __int16 v21 = +[MRDMediaRemoteServer server];
    BOOL v22 = [v21 deviceInfo];
    unsigned int v23 = [v22 isAirPlayActive];

    if (v23) {
      CFStringRef v24 = @"Could not find overrideClient";
    }
    else {
      CFStringRef v24 = @"AirPlay not active";
    }
    id v25 = [objc_alloc((Class)MRCommandResult) initWithWithSendError:22 description:v24];
LABEL_17:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

    goto LABEL_18;
  }
  uint64_t v33 = [[MRDRemoteControlCommand alloc] initWithCommandType:*(unsigned int *)(a1 + 64) playerPath:*(void *)(a1 + 40) unresolvedPlayerPath:*(void *)(a1 + 40) senderAppDisplayID:0 options:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  int v12 = *(unsigned __int8 *)(a1 + 68);
  BOOL v13 = +[MRDMediaRemoteServer server];
  id v14 = v13;
  if (v12)
  {
    int v15 = [v13 nowPlayingServer];
    uint64_t v16 = [v15 localOriginClient];
    __int16 v17 = [v16 overrideClient];
  }
  else
  {
    int v15 = [*(id *)(a1 + 40) client];
    __int16 v17 = objc_msgSend(v14, "clientForPID:", objc_msgSend(v15, "processIdentifier"));
  }

  if (!v17)
  {
    id v31 = objc_alloc((Class)MRCommandResult);
    id v32 = [objc_alloc((Class)NSString) initWithFormat:@"Could not find xpcClient for playerPath %@", *(void *)(a1 + 40)];
    id v25 = [v31 initWithWithSendError:1 description:v32];

    goto LABEL_17;
  }
LABEL_14:
  [v17 sendRemoteControlCommand:v33 withCompletionBlock:*(void *)(a1 + 48)];
LABEL_18:
}

void sub_1001235FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v14)
  {
    uint64_t v9 = [*(id *)(a1 + 32) designatedGroupLeader];
    unsigned int v10 = [v9 isLocalDevice];

    if (v10) {
      [(id)objc_opt_class() _sendCommandPreview:*(unsigned int *)(a1 + 64) options:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) playerPath:v7];
    }
    unsigned int v11 = [[MRDRemoteControlCommand alloc] initWithCommandType:*(unsigned int *)(a1 + 64) playerPath:v7 unresolvedPlayerPath:*(void *)(a1 + 40) senderAppDisplayID:0 options:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    [v14 sendRemoteControlCommand:v11 withCompletionBlock:*(void *)(a1 + 48)];
  }
  else
  {
    id v12 = objc_alloc((Class)MRCommandResult);
    BOOL v13 = [v8 localizedFailureReason];
    unsigned int v11 = (MRDRemoteControlCommand *)[v12 initWithWithSendError:1 description:v13];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10012374C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2 <= 121)
  {
    if (v2)
    {
      if (v2 != 2) {
        goto LABEL_9;
      }
      id v3 = +[MRDMediaRemoteServer server];
      uint64_t v4 = [v3 nowPlayingServer];
      char v5 = [(id)v4 queryExistingPlayerPath:*(void *)(a1 + 32)];

      id v6 = [v5 playerClient];
      LOBYTE(v4) = [v6 isPlaying];

      if (v4) {
        goto LABEL_9;
      }
    }
LABEL_8:
    id v7 = +[MRDStreamCapacityManager sharedManager];
    uint64_t v9 = *(void *)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001238D0;
    v11[3] = &unk_10041D968;
    id v12 = v8;
    id v13 = *(id *)(a1 + 48);
    [v7 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v9 reason:v12 completion:v11];

    return;
  }
  if (v2 == 122 || v2 == 133) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);

  v10();
}

uint64_t sub_1001238D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = [objc_alloc((Class)NSString) initWithFormat:@"Needed to interrupt %@ in order to continue with command", v3];

    char v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v9 = @"originCommand";
      __int16 v10 = 2114;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001239EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v4 = [objc_alloc((Class)MRCommandResult) initWithWithSendError:21 description:@"Failed to commit group leader to output context"];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
}

BOOL sub_100123CA8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

id sub_100123FC8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32) || !*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  uint64_t v1 = +[MRDMediaRemoteServer server];
  int v2 = [v1 nowPlayingServer];
  id v3 = [v2 localOriginClient];
  id v4 = [v3 overrideClient];
  char v5 = [v4 nowPlayingAirPlaySession];
  uint64_t v6 = [v5 origin];
  id v7 = [v6 isLocal];

  return v7;
}

void sub_10012417C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001242C4;
  v18[3] = &unk_10041D9B0;
  id v19 = *(id *)(a1 + 40);
  __int16 v10 = objc_retainBlock(v18);
  uint64_t v11 = (void (**)(void, void, void, void))v10;
  if (v9)
  {
    ((void (*)(void *, id, void, id))v10[2])(v10, v7, 0, v9);
  }
  else
  {
    __int16 v12 = *(void **)(a1 + 32);
    id v17 = 0;
    unsigned __int8 v13 = [v12 verifyCreatedPlayerPath:v8 forClient:v7 error:&v17];
    id v14 = v17;
    if (v13)
    {
      id v15 = v8;
      id v16 = 0;
    }
    else
    {
      id v15 = 0;
      id v16 = v14;
    }
    ((void (**)(void, id, id, id))v11)[2](v11, v7, v15, v16);
  }
}

uint64_t sub_1001242C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10012493C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    id v8 = 0;
  }
  else
  {
    id v9 = +[MRDMediaRemoteServer server];
    __int16 v10 = [v5 client];
    id v8 = objc_msgSend(v9, "clientForPID:", objc_msgSend(v10, "processIdentifier"));

    if (v8) {
      id v7 = 0;
    }
    else {
      id v7 = [objc_alloc((Class)NSError) initWithMRError:4, @"Could not find xpcClient for playerPath %@", v5 format];
    }
  }
  uint64_t v11 = _MRLogForCategory();
  __int16 v12 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v13 = (os_signpost_id_t)v12;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v13, "createPlayerAndWaitForConnection", "", buf, 2u);
    }
  }

  if (!v7)
  {
    unsigned int v23 = [v8 displayName];

    id v14 = _MRLogForCategory();
    BOOL v24 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (!v23)
    {
      if (v5)
      {
        if (!v24) {
          goto LABEL_30;
        }
        uint64_t v36 = *(void *)(a1 + 32);
        uint64_t v35 = *(void *)(a1 + 40);
        CFStringRef v18 = +[NSDate date];
        [v18 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v48 = v35;
        __int16 v49 = 2114;
        uint64_t v50 = v36;
        __int16 v51 = 2114;
        id v52 = v5;
        __int16 v53 = 2048;
        id v54 = v37;
        int v38 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v39 = v14;
        uint32_t v40 = 42;
      }
      else
      {
        if (!v24) {
          goto LABEL_30;
        }
        uint64_t v45 = *(void *)(a1 + 32);
        uint64_t v44 = *(void *)(a1 + 40);
        CFStringRef v18 = +[NSDate date];
        [v18 timeIntervalSinceDate:*(void *)(a1 + 48)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v48 = v44;
        __int16 v49 = 2114;
        uint64_t v50 = v45;
        __int16 v51 = 2048;
        id v52 = v46;
        int v38 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v39 = v14;
        uint32_t v40 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
      goto LABEL_29;
    }
    if (v5)
    {
      if (!v24) {
        goto LABEL_30;
      }
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v25 = *(void *)(a1 + 40);
      CFStringRef v18 = [v8 displayName];
      uint64_t v27 = +[NSDate date];
      [v27 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v48 = v25;
      __int16 v49 = 2114;
      uint64_t v50 = v26;
      __int16 v51 = 2112;
      id v52 = v18;
      __int16 v53 = 2114;
      id v54 = v5;
      __int16 v55 = 2048;
      uint64_t v56 = v28;
      uint64_t v29 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v30 = v14;
      uint32_t v31 = 52;
    }
    else
    {
      if (!v24) {
        goto LABEL_30;
      }
      uint64_t v42 = *(void *)(a1 + 32);
      uint64_t v41 = *(void *)(a1 + 40);
      CFStringRef v18 = [v8 displayName];
      uint64_t v27 = +[NSDate date];
      [v27 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v48 = v41;
      __int16 v49 = 2114;
      uint64_t v50 = v42;
      __int16 v51 = 2112;
      id v52 = v18;
      __int16 v53 = 2048;
      id v54 = v43;
      uint64_t v29 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v30 = v14;
      uint32_t v31 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);

    goto LABEL_29;
  }
  id v14 = _MRLogForCategory();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v15)
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      CFStringRef v18 = +[NSDate date];
      [v18 timeIntervalSinceDate:*(void *)(a1 + 48)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v48 = v16;
      __int16 v49 = 2114;
      uint64_t v50 = v17;
      __int16 v51 = 2114;
      id v52 = v7;
      __int16 v53 = 2114;
      id v54 = v5;
      __int16 v55 = 2048;
      uint64_t v56 = v19;
      uint64_t v20 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      __int16 v21 = v14;
      uint32_t v22 = 52;
LABEL_19:
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
LABEL_29:
    }
  }
  else if (v15)
  {
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v32 = *(void *)(a1 + 40);
    CFStringRef v18 = +[NSDate date];
    [v18 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v48 = v32;
    __int16 v49 = 2114;
    uint64_t v50 = v33;
    __int16 v51 = 2114;
    id v52 = v7;
    __int16 v53 = 2048;
    id v54 = v34;
    uint64_t v20 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
    __int16 v21 = v14;
    uint32_t v22 = 42;
    goto LABEL_19;
  }
LABEL_30:

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_100124E44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100124E5C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100124ED4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_3:
    v6();
    goto LABEL_6;
  }
  if (!v9)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    goto LABEL_3;
  }
  id v7 = [*(id *)(a1 + 32) copy];
  id v8 = [v9 createNowPlayingClient];
  [v7 setClient:v8];

  [(id)objc_opt_class() _createPlayerForClient:v9 playerPath:v7 deviceInfo:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
LABEL_6:
}

void sub_100125098(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1001251BC;
  v17[3] = &unk_10041D9B0;
  id v18 = *(id *)(a1 + 40);
  id v9 = a2;
  __int16 v10 = objc_retainBlock(v17);
  uint64_t v11 = *(void **)(a1 + 32);
  id v16 = 0;
  unsigned __int8 v12 = [v11 verifyCreatedPlayerPath:v7 forClient:v9 error:&v16];
  id v13 = v16;
  if (v12)
  {
    id v14 = v7;
    id v15 = v8;
  }
  else
  {
    id v14 = 0;
    id v15 = v13;
  }
  ((void (*)(void *, id, id, id))v10[2])(v10, v9, v14, v15);
}

uint64_t sub_1001251BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100125698(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001256BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int16 v10 = _MRLogForCategory();
  uint64_t v11 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v12 = (os_signpost_id_t)v11;
    if (os_signpost_enabled(v10))
    {
      LOWORD(v49) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v12, "createPlayerAndWaitForCanBeNowPlaying", "", (uint8_t *)&v49, 2u);
    }
  }

  if (v9)
  {
    id v13 = _MRLogForCategory();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      if (!v14) {
        goto LABEL_25;
      }
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v17 = +[NSDate date];
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v49 = 138544386;
      uint64_t v50 = v15;
      __int16 v51 = 2114;
      uint64_t v52 = v16;
      __int16 v53 = 2114;
      id v54 = v9;
      __int16 v55 = 2114;
      id v56 = v8;
      __int16 v57 = 2048;
      uint64_t v58 = v18;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      uint64_t v20 = v13;
      uint32_t v21 = 52;
    }
    else
    {
      if (!v14) {
        goto LABEL_25;
      }
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v31 = *(void *)(a1 + 40);
      uint64_t v17 = +[NSDate date];
      [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v49 = 138544130;
      uint64_t v50 = v31;
      __int16 v51 = 2114;
      uint64_t v52 = v32;
      __int16 v53 = 2114;
      id v54 = v9;
      __int16 v55 = 2048;
      id v56 = v33;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      uint64_t v20 = v13;
      uint32_t v21 = 42;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v49, v21);
  }
  else
  {
    uint32_t v22 = [v7 displayName];

    id v13 = _MRLogForCategory();
    BOOL v23 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      if (v8)
      {
        if (!v23) {
          goto LABEL_25;
        }
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v17 = [v7 displayName];
        uint64_t v26 = +[NSDate date];
        [v26 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v49 = 138544386;
        uint64_t v50 = v24;
        __int16 v51 = 2114;
        uint64_t v52 = v25;
        __int16 v53 = 2112;
        id v54 = v17;
        __int16 v55 = 2114;
        id v56 = v8;
        __int16 v57 = 2048;
        uint64_t v58 = v27;
        uint64_t v28 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        uint64_t v29 = v13;
        uint32_t v30 = 52;
      }
      else
      {
        if (!v23) {
          goto LABEL_25;
        }
        uint64_t v41 = *(void *)(a1 + 32);
        uint64_t v40 = *(void *)(a1 + 40);
        uint64_t v17 = [v7 displayName];
        uint64_t v26 = +[NSDate date];
        [v26 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v49 = 138544130;
        uint64_t v50 = v40;
        __int16 v51 = 2114;
        uint64_t v52 = v41;
        __int16 v53 = 2112;
        id v54 = v17;
        __int16 v55 = 2048;
        id v56 = v42;
        uint64_t v28 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        uint64_t v29 = v13;
        uint32_t v30 = 42;
      }
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v49, v30);
    }
    else
    {
      if (v8)
      {
        if (!v23) {
          goto LABEL_25;
        }
        uint64_t v35 = *(void *)(a1 + 32);
        uint64_t v34 = *(void *)(a1 + 40);
        uint64_t v17 = +[NSDate date];
        [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v49 = 138544130;
        uint64_t v50 = v34;
        __int16 v51 = 2114;
        uint64_t v52 = v35;
        __int16 v53 = 2114;
        id v54 = v8;
        __int16 v55 = 2048;
        id v56 = v36;
        uint64_t v37 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        int v38 = v13;
        uint32_t v39 = 42;
      }
      else
      {
        if (!v23) {
          goto LABEL_25;
        }
        uint64_t v44 = *(void *)(a1 + 32);
        uint64_t v43 = *(void *)(a1 + 40);
        uint64_t v17 = +[NSDate date];
        [v17 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v49 = 138543874;
        uint64_t v50 = v43;
        __int16 v51 = 2114;
        uint64_t v52 = v44;
        __int16 v53 = 2048;
        id v54 = v45;
        uint64_t v37 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        int v38 = v13;
        uint32_t v39 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, (uint8_t *)&v49, v39);
    }
  }

LABEL_25:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    __int16 v46 = +[NSNotificationCenter defaultCenter];
    [v46 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    uint64_t v47 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v48 = *(void **)(v47 + 40);
    *(void *)(v47 + 40) = 0;
  }
}

uint64_t sub_100125B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100125BB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100125C4C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v9 = +[NSNotificationCenter defaultCenter];
    uint64_t v10 = kMRMediaRemoteNowPlayingPlayerDidRegisterCanBeNowPlaying;
    uint64_t v26 = _NSConcreteStackBlock;
    uint64_t v27 = 3221225472;
    uint64_t v28 = sub_100125F00;
    uint64_t v29 = &unk_10041DAA0;
    id v11 = v8;
    id v30 = v11;
    id v32 = *(id *)(a1 + 48);
    id v12 = v7;
    id v31 = v12;
    uint64_t v13 = [v9 addObserverForName:v10 object:0 queue:0 usingBlock:&v26];
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    uint64_t v16 = +[MRDMediaRemoteServer server];
    uint64_t v17 = [v16 nowPlayingServer];
    uint64_t v18 = [v17 queryExistingPlayerPath:v11];

    uint64_t v19 = [v18 playerClient];
    LODWORD(v17) = [v19 canBeNowPlayingPlayer];

    if (v17)
    {
      uint64_t v20 = *(void *)(a1 + 48);
      id v21 = [v18 playerClient];
      uint32_t v22 = [v21 playerPath];
      (*(void (**)(uint64_t, id, NSObject *, void))(v20 + 16))(v20, v12, v22, 0);
    }
    else
    {
      id v23 = objc_alloc((Class)NSString);
      id v21 = [v23 initWithFormat:@"Waiting for %@ to set canBeNowPlayingPlayer=YES", v11, v26, v27, v28, v29, v30];
      uint32_t v22 = _MRLogForCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v25 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v34 = v24;
        __int16 v35 = 2114;
        uint64_t v36 = v25;
        __int16 v37 = 2112;
        id v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
  }
}

void sub_100125F00(uint64_t a1, void *a2)
{
  id v3 = [a2 userInfo];
  MRGetPlayerPathFromUserInfo();
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  if ([v4 isEqual:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1001262DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  id v8 = (char *)[*(id *)(a1 + 32) hash];
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v9 = (os_signpost_id_t)v8;
    if (os_signpost_enabled(v7))
    {
      LOWORD(v39) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, v9, "CreatePlayer", "", (uint8_t *)&v39, 2u);
    }
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = _MRLogForCategory();
  id v12 = v11;
  if (v5 && !v6)
  {
    BOOL v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v13) {
        goto LABEL_26;
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544386;
      CFStringRef v40 = @"createPlayer";
      __int16 v41 = 2114;
      uint64_t v42 = v14;
      __int16 v43 = 2112;
      id v44 = v5;
      __int16 v45 = 2114;
      uint64_t v46 = v15;
      __int16 v47 = 2048;
      uint64_t v48 = v17;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v19 = v12;
      uint32_t v20 = 52;
      goto LABEL_19;
    }
    if (!v13) {
      goto LABEL_26;
    }
    uint64_t v32 = *(void *)(a1 + 32);
    uint64_t v16 = +[NSDate date];
    [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v39 = 138544130;
    CFStringRef v40 = @"createPlayer";
    __int16 v41 = 2114;
    uint64_t v42 = v32;
    __int16 v43 = 2112;
    id v44 = v5;
    __int16 v45 = 2048;
    uint64_t v46 = v33;
    uint64_t v18 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    goto LABEL_18;
  }
  if (v6)
  {
    BOOL v21 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (!v21) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544386;
      CFStringRef v40 = @"createPlayer";
      __int16 v41 = 2114;
      uint64_t v42 = v22;
      __int16 v43 = 2114;
      id v44 = v6;
      __int16 v45 = 2114;
      uint64_t v46 = v23;
      __int16 v47 = 2048;
      uint64_t v48 = v24;
      uint64_t v25 = "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds";
      uint64_t v26 = v12;
      uint32_t v27 = 52;
      goto LABEL_23;
    }
    if (v21)
    {
      uint64_t v34 = *(void *)(a1 + 32);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544130;
      CFStringRef v40 = @"createPlayer";
      __int16 v41 = 2114;
      uint64_t v42 = v34;
      __int16 v43 = 2114;
      id v44 = v6;
      __int16 v45 = 2048;
      uint64_t v46 = v35;
      uint64_t v25 = "Response: %{public}@<%{public}@> returned with error <%{public}@> in %.4lf seconds";
      uint64_t v26 = v12;
      uint32_t v27 = 42;
LABEL_23:
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&v39, v27);
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v28 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v28) {
        goto LABEL_26;
      }
      uint64_t v29 = *(void *)(a1 + 32);
      id v30 = *(void **)(a1 + 40);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544130;
      CFStringRef v40 = @"createPlayer";
      __int16 v41 = 2114;
      uint64_t v42 = v29;
      __int16 v43 = 2114;
      id v44 = v30;
      __int16 v45 = 2048;
      uint64_t v46 = v31;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
LABEL_18:
      uint64_t v19 = v12;
      uint32_t v20 = 42;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v39, v20);
LABEL_20:

      goto LABEL_26;
    }
    if (v28)
    {
      uint64_t v36 = *(void *)(a1 + 32);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138543874;
      CFStringRef v40 = @"createPlayer";
      __int16 v41 = 2114;
      uint64_t v42 = v36;
      __int16 v43 = 2048;
      id v44 = v37;
      uint64_t v18 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v19 = v12;
      uint32_t v20 = 32;
      goto LABEL_19;
    }
  }
LABEL_26:

  uint64_t v38 = *(void *)(a1 + 56);
  if (v38) {
    (*(void (**)(uint64_t, id, id))(v38 + 16))(v38, v5, v6);
  }
}

void sub_100126748(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a3;
  MRCreatePlayerPathFromXPCMessage();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v5, v4);
}

id sub_1001268F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MRCreateXPCMessage();
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
    MRAddProtobufToXPCMessage();
  }
  MRAddPlayerPathToXPCMessage();

  return v4;
}

void sub_100126984(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = v5;
    id v7 = 0;
  }
  else
  {
    id v7 = MRCreateProtobufFromXPCMessage();
    id v6 = [v7 error];
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, v7, v6);
  }
}

uint64_t sub_100126C28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100126C40(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100126CB8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v8 = a2;
  if (a4)
  {
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    id v6 = (*(void (**)(void))(a1[6] + 16))();
    [v8 takeAssertion:2 forReason:a1[4] duration:30.0];
    id v7 = [v8 connection];
    [v7 sendMessage:v6 queue:*(void *)(a1[5] + 88) reply:a1[7]];
  }
}

uint64_t sub_100127084(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100127094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001270AC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5) {
    id v6 = 0;
  }
  else {
    id v6 = (void *)MRCreatePlaybackQueueFromXPCMessage();
  }
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_1001272A4(uint64_t a1)
{
  id v1 = [objc_alloc((Class)MRPlaybackSessionRequestMessage) initWithRequest:*(void *)(a1 + 32) forPlayerPath:*(void *)(a1 + 40)];

  return v1;
}

void sub_1001272E8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = a3;
    id v7 = [v8 playbackSession];
    (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v6);
  }
}

void sub_100127490(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v3();
  }
  else
  {
    [*(id *)(a1 + 32) startEvent:@"interruptBestStreamIfNecessary"];
    id v4 = +[MRDStreamCapacityManager sharedManager];
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [*(id *)(a1 + 32) requestID];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001275F0;
    v9[3] = &unk_10041DBE0;
    id v10 = *(id *)(a1 + 32);
    int8x16_t v8 = *(int8x16_t *)(a1 + 40);
    id v7 = (id)v8.i64[0];
    int8x16_t v11 = vextq_s8(v8, v8, 8uLL);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v4 interruptBestStreamIfNecessaryToActivateStreamWithPlayerPath:v5 reason:v6 completion:v9];
  }
}

void sub_1001275F0(uint64_t a1)
{
  [*(id *)(a1 + 32) endEvent:@"interruptBestStreamIfNecessary"];
  int v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [v2 _resolveReason:@"_handlePlaybackSessionMigrateRequest"];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100127738;
  void v7[3] = &unk_10041DB90;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001277A0;
  v5[3] = &unk_10041DBB8;
  id v6 = *(id *)(a1 + 64);
  [v2 sendMessageWithType:0x400000000000007 playerPath:v3 timeout:v4 reason:v7 factory:v5 completion:7.0];
}

id sub_100127738(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRPlaybackSessionMigrateRequestMessage) initWithPlaybackSession:*(void *)(a1 + 32) request:*(void *)(a1 + 40) forPlayerPath:v3];

  return v4;
}

void sub_1001277A0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = a3;
    id v7 = [v8 request];
    (*(void (**)(uint64_t, void *, id))(v5 + 16))(v5, v7, v6);
  }
}

id sub_10012797C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRPlaybackSessionMigrateBeginMessage) initWithRequest:*(void *)(a1 + 32) playerPath:v3];

  return v4;
}

uint64_t sub_1001279E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

id sub_100127B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRPlaybackSessionMigrateEndMessage) initWithRequest:*(void *)(a1 + 32) error:*(void *)(a1 + 40) playerPath:v3];

  return v4;
}

uint64_t sub_100127BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_100127CD0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 152);
  *(void *)(v3 + 152) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 160);

  objc_storeStrong(v6, v5);
}

void sub_100127E10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 168);
  *(void *)(v3 + 168) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 176);

  objc_storeStrong(v6, v5);
}

void sub_100127F50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 184);
  *(void *)(v3 + 184) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 192);

  objc_storeStrong(v6, v5);
}

void sub_100128090(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 128);

  objc_storeStrong(v6, v5);
}

void sub_1001281D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 144);

  objc_storeStrong(v6, v5);
}

void sub_100128310(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 112);

  objc_storeStrong(v6, v5);
}

void sub_100128450(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 200);
  *(void *)(v3 + --*(void *)(*(void *)(result + 32) + 200) = v2;

  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = (id *)(*(void *)(a1 + 32) + 208);

  objc_storeStrong(v6, v5);
}

uint64_t sub_1001285A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_1001286C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, float))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(float *)(a1 + 48));
}

void sub_100128AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 80);
    id v13 = +[NSNumber numberWithFloat:v4];

    uint64_t v14 = *(void *)(a1 + 32);
    id v6 = _MRLogForCategory();
    BOOL v15 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (!v13)
    {
      if (v14)
      {
        if (!v15) {
          goto LABEL_21;
        }
        uint64_t v24 = *(void *)(a1 + 40);
        id v9 = [*(id *)(a1 + 48) requestID];
        uint64_t v25 = *(void **)(a1 + 32);
        int8x16_t v11 = +[NSDate date];
        [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v42 = v24;
        __int16 v43 = 2114;
        id v44 = v9;
        __int16 v45 = 2114;
        id v46 = v25;
        __int16 v47 = 2048;
        uint64_t v48 = v26;
        uint32_t v27 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        BOOL v28 = v6;
        uint32_t v29 = 42;
      }
      else
      {
        if (!v15) {
          goto LABEL_21;
        }
        uint64_t v33 = *(void *)(a1 + 40);
        id v9 = [*(id *)(a1 + 48) requestID];
        int8x16_t v11 = +[NSDate date];
        [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v42 = v33;
        __int16 v43 = 2114;
        id v44 = v9;
        __int16 v45 = 2048;
        id v46 = v34;
        uint32_t v27 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        BOOL v28 = v6;
        uint32_t v29 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_20;
    }
    if (v14)
    {
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      LODWORD(v17) = *(_DWORD *)(a1 + 80);
      int8x16_t v11 = +[NSNumber numberWithFloat:v17];
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v42 = v16;
      __int16 v43 = 2114;
      id v44 = v9;
      __int16 v45 = 2112;
      id v46 = v11;
      __int16 v47 = 2114;
      uint64_t v48 = v18;
      __int16 v49 = 2048;
      uint64_t v50 = v20;
      BOOL v21 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v22 = v6;
      uint32_t v23 = 52;
    }
    else
    {
      if (!v15) {
        goto LABEL_21;
      }
      uint64_t v30 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      LODWORD(v31) = *(_DWORD *)(a1 + 80);
      int8x16_t v11 = +[NSNumber numberWithFloat:v31];
      uint64_t v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v42 = v30;
      __int16 v43 = 2114;
      id v44 = v9;
      __int16 v45 = 2112;
      id v46 = v11;
      __int16 v47 = 2048;
      uint64_t v48 = v32;
      BOOL v21 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v22 = v6;
      uint32_t v23 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);

    goto LABEL_20;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = _MRLogForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = [*(id *)(a1 + 48) requestID];
      uint64_t v10 = *(void *)(a1 + 32);
      int8x16_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v42 = v8;
      __int16 v43 = 2114;
      id v44 = v9;
      __int16 v45 = 2114;
      id v46 = v3;
      __int16 v47 = 2114;
      uint64_t v48 = v10;
      __int16 v49 = 2048;
      uint64_t v50 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_20:
    }
  }
  else if (v7)
  {
    sub_10032E220();
  }
LABEL_21:

  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100128F40;
  v38[3] = &unk_100417A50;
  uint64_t v35 = *(NSObject **)(a1 + 64);
  id v36 = *(id *)(a1 + 72);
  id v39 = v3;
  id v40 = v36;
  id v37 = v3;
  dispatch_async(v35, v38);
}

uint64_t sub_100128F40(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100128F54(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 64);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 40) setVolume:*(void *)(a1 + 40) outputDeviceUID:*(void *)(a1 + 48) details:a2];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_100128FC8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100129448(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v12 = MRMediaRemoteVolumeControlAdjustmentDescription();

    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v5 = _MRLogForCategory();
    BOOL v14 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (!v12)
    {
      if (v13)
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v8 = [*(id *)(a1 + 48) requestID];
        uint64_t v25 = *(void **)(a1 + 32);
        uint64_t v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v41 = v24;
        __int16 v42 = 2114;
        __int16 v43 = v8;
        __int16 v44 = 2114;
        id v45 = v25;
        __int16 v46 = 2048;
        uint64_t v47 = v26;
        uint32_t v27 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        BOOL v28 = v5;
        uint32_t v29 = 42;
      }
      else
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v32 = *(void *)(a1 + 40);
        uint64_t v8 = [*(id *)(a1 + 48) requestID];
        uint64_t v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v41 = v32;
        __int16 v42 = 2114;
        __int16 v43 = v8;
        __int16 v44 = 2048;
        id v45 = v33;
        uint32_t v27 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        BOOL v28 = v5;
        uint32_t v29 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_20;
    }
    if (v13)
    {
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = [*(id *)(a1 + 48) requestID];
      double v17 = MRMediaRemoteVolumeControlAdjustmentDescription();
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v41 = v15;
      __int16 v42 = 2114;
      __int16 v43 = v16;
      __int16 v44 = 2112;
      id v45 = v17;
      __int16 v46 = 2114;
      uint64_t v47 = v18;
      __int16 v48 = 2048;
      uint64_t v49 = v20;
      BOOL v21 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v22 = v5;
      uint32_t v23 = 52;
    }
    else
    {
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v16 = [*(id *)(a1 + 48) requestID];
      double v17 = MRMediaRemoteVolumeControlAdjustmentDescription();
      uint64_t v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v41 = v30;
      __int16 v42 = 2114;
      __int16 v43 = v16;
      __int16 v44 = 2112;
      id v45 = v17;
      __int16 v46 = 2048;
      uint64_t v47 = v31;
      BOOL v21 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v22 = v5;
      uint32_t v23 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);

    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = _MRLogForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 48) requestID];
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v41 = v7;
      __int16 v42 = 2114;
      __int16 v43 = v8;
      __int16 v44 = 2114;
      id v45 = v3;
      __int16 v46 = 2114;
      uint64_t v47 = v9;
      __int16 v48 = 2048;
      uint64_t v49 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_20:
    }
  }
  else if (v6)
  {
    sub_10032E220();
  }
LABEL_21:

  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10012989C;
  v37[3] = &unk_100417A50;
  uint64_t v34 = *(NSObject **)(a1 + 64);
  id v35 = *(id *)(a1 + 72);
  id v38 = v3;
  id v39 = v35;
  id v36 = v3;
  dispatch_async(v34, v37);
}

uint64_t sub_10012989C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001298B0(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) adjustVolume:a1[8] outputDeviceUID:a1[5] details:a1[6]];
  (*(void (**)(void))(a1[7] + 16))();
}

uint64_t sub_100129924(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100129DA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v12 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];

    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v5 = _MRLogForCategory();
    BOOL v14 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (!v12)
    {
      if (v13)
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v22 = *(void *)(a1 + 40);
        uint64_t v8 = [*(id *)(a1 + 48) requestID];
        uint32_t v23 = *(void **)(a1 + 32);
        uint64_t v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v39 = v22;
        __int16 v40 = 2114;
        uint64_t v41 = v8;
        __int16 v42 = 2114;
        id v43 = v23;
        __int16 v44 = 2048;
        uint64_t v45 = v24;
        uint64_t v25 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v26 = v5;
        uint32_t v27 = 42;
      }
      else
      {
        if (!v14) {
          goto LABEL_21;
        }
        uint64_t v30 = *(void *)(a1 + 40);
        uint64_t v8 = [*(id *)(a1 + 48) requestID];
        uint64_t v10 = +[NSDate date];
        [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v39 = v30;
        __int16 v40 = 2114;
        uint64_t v41 = v8;
        __int16 v42 = 2048;
        id v43 = v31;
        uint64_t v25 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v26 = v5;
        uint32_t v27 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
      goto LABEL_20;
    }
    if (v13)
    {
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 48) requestID];
      uint64_t v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
      uint64_t v16 = *(void *)(a1 + 32);
      double v17 = +[NSDate date];
      [v17 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v39 = v15;
      __int16 v40 = 2114;
      uint64_t v41 = v8;
      __int16 v42 = 2112;
      id v43 = v10;
      __int16 v44 = 2114;
      uint64_t v45 = v16;
      __int16 v46 = 2048;
      uint64_t v47 = v18;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      uint64_t v20 = v5;
      uint32_t v21 = 52;
    }
    else
    {
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 48) requestID];
      uint64_t v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
      double v17 = +[NSDate date];
      [v17 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v39 = v28;
      __int16 v40 = 2114;
      uint64_t v41 = v8;
      __int16 v42 = 2112;
      id v43 = v10;
      __int16 v44 = 2048;
      uint64_t v45 = v29;
      uint64_t v19 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      uint64_t v20 = v5;
      uint32_t v21 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);

    goto LABEL_20;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = _MRLogForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = [*(id *)(a1 + 48) requestID];
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544386;
      uint64_t v39 = v7;
      __int16 v40 = 2114;
      uint64_t v41 = v8;
      __int16 v42 = 2114;
      id v43 = v3;
      __int16 v44 = 2114;
      uint64_t v45 = v9;
      __int16 v46 = 2048;
      uint64_t v47 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_20:
    }
  }
  else if (v6)
  {
    sub_10032E220();
  }
LABEL_21:

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10012A200;
  v35[3] = &unk_100417A50;
  uint64_t v32 = *(NSObject **)(a1 + 64);
  id v33 = *(id *)(a1 + 72);
  id v36 = v3;
  id v37 = v33;
  id v34 = v3;
  dispatch_async(v32, v35);
}

uint64_t sub_10012A200(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10012A214(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) muteVolume:*(unsigned __int8 *)(a1 + 64) outputDeviceUID:*(void *)(a1 + 40) details:*(void *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_10012A288(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10012A394(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) outputContext];
  [v2 modifyTopologyWithRequest:*(void *)(a1 + 40) withReplyQueue:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_10012A480(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10012A8B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  qos_class_t v4 = *(_DWORD *)(a1 + 80);
  qos_class_t v5 = qos_class_self();
  if (!v3 && v4 < v5)
  {
    id v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"qos: %u->%u", *(unsigned int *)(a1 + 80), qos_class_self());
    uint64_t v7 = _MRLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v36 = v8;
      __int16 v37 = 2114;
      uint64_t v38 = v9;
      __int16 v39 = 2112;
      id v40 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }

    goto LABEL_10;
  }
  if (!v3)
  {
LABEL_10:
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v11 = _MRLogForCategory();
    BOOL v19 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (!v19) {
        goto LABEL_19;
      }
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = *(void **)(a1 + 48);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v36 = v20;
      __int16 v37 = 2114;
      uint64_t v38 = v21;
      __int16 v39 = 2114;
      id v40 = v22;
      __int16 v41 = 2048;
      uint64_t v42 = v23;
      uint64_t v24 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v25 = v11;
      uint32_t v26 = 42;
    }
    else
    {
      if (!v19) {
        goto LABEL_19;
      }
      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v36 = v27;
      __int16 v37 = 2114;
      uint64_t v38 = v28;
      __int16 v39 = 2048;
      id v40 = v29;
      uint64_t v24 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v25 = v11;
      uint32_t v26 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = _MRLogForCategory();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = +[NSDate date];
    [v16 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v36 = v13;
    __int16 v37 = 2114;
    uint64_t v38 = v14;
    __int16 v39 = 2114;
    id v40 = v3;
    __int16 v41 = 2114;
    uint64_t v42 = v15;
    __int16 v43 = 2048;
    uint64_t v44 = v17;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_16:

    goto LABEL_19;
  }
  if (v12) {
    sub_10032FAA0();
  }
LABEL_19:

  uint64_t v30 = *(void **)(a1 + 72);
  if (v30)
  {
    uint64_t v31 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10012AC44;
    block[3] = &unk_100417A50;
    id v34 = v30;
    id v33 = v3;
    dispatch_async(v31, block);
  }
}

uint64_t sub_10012AC44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10012AC58(uint64_t a1)
{
  if ([*(id *)(a1 + 32) connectionState] == 2)
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v2();
  }
  else
  {
    id v3 = *(void **)(a1 + 32);
    if (v3[28])
    {
      qos_class_t v4 = _MRLogForCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v24 = v5;
        __int16 v25 = 2114;
        uint64_t v26 = v6;
        __int16 v27 = 2112;
        CFStringRef v28 = @"Previously Disconnected";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      uint64_t v7 = [v3 outputContext];
      uint64_t v8 = [v7 contextID];

      uint64_t v9 = [*(id *)(a1 + 32) designatedGroupLeader];

      if (v9 && v8)
      {
        id v10 = [v8 hash];
        id v11 = objc_alloc((Class)MROrigin);
        BOOL v12 = [*(id *)(a1 + 32) name];
        id v13 = [v11 initWithIdentifier:v10 type:1 displayName:v12];

        [v13 setLocallyHosted:1];
        uint64_t v14 = +[MRDMediaRemoteServer server];
        uint64_t v15 = [v14 nowPlayingServer];
        [v15 registerOrigin:v13 deviceInfo:*(void *)(a1 + 56)];

        [*(id *)(a1 + 32) setOrigin:v13];
        [*(id *)(a1 + 32) setConnectionState:2];

        id v16 = 0;
      }
      else
      {
        id v16 = [objc_alloc((Class)NSError) initWithMRError:32 description:@"Called connect without a group leader (usually this means we are in the process of disconnecting)"];
        [*(id *)(a1 + 32) setConnectionState:3];
      }
      msv_dispatch_sync_on_queue();
      msv_dispatch_sync_on_queue();
      (*(void (**)(void, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v16, v17, v18, v19, v20, v21, v22, _NSConcreteStackBlock, 3221225472);
    }
  }
}

void sub_10012AFA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 104);
  if (v3)
  {
    if (*(void *)(v2 + 112))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 112);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10012B064;
      void v8[3] = &unk_100417A50;
      void v8[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }
}

uint64_t sub_10012B064(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) connectionState];
  id v3 = *(uint64_t (**)(uint64_t, id, void))(v1 + 16);

  return v3(v1, v2, 0);
}

void sub_10012B0AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(NSObject **)(v5 + 128);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10012B16C;
      void v8[3] = &unk_100417A50;
      void v8[4] = v5;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, v8);
    }
  }
}

void sub_10012B16C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) outputDevices];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_10012B4F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) uid];
  unsigned __int8 v5 = [v3 containsUID:v4];

  if (v5) {
    id v6 = 0;
  }
  else {
    id v6 = [objc_alloc((Class)MRDeviceInfo) initWithOutputDevice:v3];
  }

  return v6;
}

void sub_10012B6B8(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 224), *(id *)(a1 + 40));
  [*(id *)(a1 + 32) cleanUp];
  [*(id *)(a1 + 32) setConnectionState:3];
  id v3 = objc_msgSend(*(id *)(a1 + 40), "mr_errorByEnvelopingWithMRError:", 128);
  id v2 = v3;
  msv_dispatch_sync_on_queue();
}

void sub_10012B790(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 104);
  if (v3)
  {
    if (*(void *)(v2 + 112))
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(NSObject **)(v5 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012B874;
      block[3] = &unk_1004170B8;
      id v10 = v4;
      void block[4] = v5;
      id v9 = *(id *)(a1 + 40);
      id v7 = v4;
      dispatch_async(v6, block);
    }
  }
}

uint64_t sub_10012B874(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) connectionState];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(uint64_t (**)(uint64_t, id, uint64_t))(v2 + 16);

  return v5(v2, v3, v4);
}

void sub_10012BB3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012BC10;
  block[3] = &unk_1004170B8;
  id v7 = *(NSObject **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10012BC10(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10012BF54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 128);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10012C034;
      void v7[3] = &unk_100417A50;
      id v9 = v4;
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, v7);
    }
  }
}

void sub_10012C034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = +[NSArray arrayWithObjects:&v3 count:1];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10012C190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if (*(void *)(v2 + 128))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 128);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10012C270;
      void v7[3] = &unk_100417A50;
      id v9 = v4;
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, v7);
    }
  }
}

void sub_10012C270(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = +[NSArray arrayWithObjects:&v3 count:1];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10012C3CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 136);
  if (v3)
  {
    if (*(void *)(v2 + 144))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10012C4AC;
      void v7[3] = &unk_100417A50;
      id v9 = v4;
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, v7);
    }
  }
}

void sub_10012C4AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = [*(id *)(a1 + 32) uid];
  id v4 = v2;
  uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

void sub_10012C674(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 168);
  if (v3)
  {
    if (*(void *)(v2 + 176))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 176);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012C75C;
      block[3] = &unk_1004162A8;
      id v9 = v4;
      int v10 = *(_DWORD *)(a1 + 48);
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, block);
    }
  }
}

void sub_10012C75C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) uid];
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

void sub_10012C8E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 152);
  if (v3)
  {
    if (*(void *)(v2 + 160))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 160);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012C9DC;
      block[3] = &unk_1004170B8;
      id v10 = v4;
      id v8 = *(id *)(a1 + 40);
      id v9 = *(id *)(a1 + 48);
      id v6 = v4;
      dispatch_async(v5, block);
    }
  }
}

void sub_10012C9DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  [*(id *)(a1 + 32) floatValue];
  float v4 = v3;
  id v5 = [*(id *)(a1 + 40) uid];
  (*(void (**)(uint64_t, id, float))(v2 + 16))(v2, v5, v4);
}

void sub_10012CB7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(void **)(v2 + 184);
  if (v3)
  {
    if (*(void *)(v2 + 192))
    {
      id v4 = [v3 copy];
      id v5 = *(NSObject **)(*(void *)(a1 + 32) + 192);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10012CC64;
      block[3] = &unk_10041DD20;
      id v9 = v4;
      char v10 = *(unsigned char *)(a1 + 48);
      id v8 = *(id *)(a1 + 40);
      id v6 = v4;
      dispatch_async(v5, block);
    }
  }
}

void sub_10012CC64(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) uid];
  (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, v1, v3);
}

BOOL sub_10012D15C(uint64_t a1, void *a2)
{
  id v3 = [a2 outputDevices];
  id v4 = objc_msgSend(v3, "msv_firstWhere:", &stru_10041DD40);

  if (v4) {
    BOOL v5 = [v4 clusterType] == *(_DWORD *)(a1 + 32);
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

BOOL sub_10012D1D4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

void sub_10012D1DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = MRLogCategoryConnections();
  BOOL v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      id v17 = v3;
      id v7 = "%{public}@ Found endpoint containing local in discovery that matches cluster type: %{public}@";
      id v8 = v5;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      uint32_t v10 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, buf, v10);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v15 = v11;
    id v7 = "%{public}@ Timed out waiting for local device to appear with expected clusterType in discovery";
    id v8 = v5;
    os_log_type_t v9 = OS_LOG_TYPE_ERROR;
    uint32_t v10 = 12;
    goto LABEL_6;
  }

  id v12 = objc_msgSend(objc_alloc((Class)NSError), "initWithMRError:format:", 32, @"Local device changed clusterType to %u", *(unsigned int *)(a1 + 40));
  [*(id *)(a1 + 32) disconnect:v12];
  id v13 = +[NSNotificationCenter defaultCenter];
  [v13 postNotificationName:@"MRDAVOutputContextExternalDeviceDiscoveryLocalClusterTypeDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_10012D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012D5A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 64) outputDevices];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10012D664;
  v6[3] = &unk_100417940;
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = objc_msgSend(v2, "mr_first:", v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10012D664(uint64_t a1, void *a2)
{
  return [a2 containsUID:*(void *)(a1 + 32)];
}

void sub_10012D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012D82C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x3032000000;
  uint64_t v22 = sub_100120624;
  uint64_t v23 = sub_100120634;
  id v24 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(NSObject **)(v4 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012DA98;
  block[3] = &unk_100415CF0;
  void block[4] = v4;
  void block[5] = &v19;
  dispatch_sync(v5, block);
  uint64_t v6 = MRLogCategoryConnections();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [(id)v20[5] count];
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v27 = v7;
    __int16 v28 = 2048;
    id v29 = v8;
    __int16 v30 = 2114;
    uint64_t v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ Calling %lu completions - Original reason: %{public}@", buf, 0x20u);
  }

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v10 = (id)v20[5];
  id v11 = [v10 countByEnumeratingWithState:&v14 objects:v25 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v15;
    do
    {
      id v13 = 0;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v14 + 1) + 8 * (void)v13) + 16))(*(void *)(*((void *)&v14 + 1) + 8 * (void)v13));
        id v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v10 countByEnumeratingWithState:&v14 objects:v25 count:16];
    }
    while (v11);
  }

  _Block_object_dispose(&v19, 8);
}

void sub_10012DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10012DA98(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  BOOL v5 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v5 removeAllObjects];
}

void sub_10012DAF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 48))
  {
    uint64_t v3 = *(void **)(v2 + 32);
    if (!v3)
    {
      id v4 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = v4;

      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32);
    }
    id v7 = [*(id *)(a1 + 48) copy];
    [v3 addObject:v7];

    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 32) count] < 2)
    {
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_10012E088;
      v43[3] = &unk_10041B0F0;
      void v43[4] = *(void *)(a1 + 32);
      long long v17 = objc_retainBlock(v43);
      id v35 = [*(id *)(*(void *)(a1 + 32) + 48) uid];
      if (((unsigned int (*)(void *))v17[2])(v17))
      {
        id v18 = *(id *)(*(void *)(a1 + 32) + 64);
        uint64_t v19 = [*(id *)(a1 + 32) description];
        uint64_t v20 = MRLogCategoryConnections();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138544130;
          uint64_t v46 = v21;
          __int16 v47 = 2114;
          __int16 v48 = v35;
          __int16 v49 = 2114;
          id v50 = v18;
          __int16 v51 = 2114;
          uint64_t v52 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@ Committing output device: %{public}@ to: %{public}@ because %{public}@", buf, 0x2Au);
        }

        objc_initWeak((id *)buf, *(id *)(a1 + 32));
        uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 64);
        uint64_t v44 = *(void *)(*(void *)(a1 + 32) + 48);
        id v24 = +[NSArray arrayWithObjects:&v44 count:1];
        __int16 v25 = (objc_class *)objc_opt_class();
        uint64_t v26 = NSStringFromClass(v25);
        uint64_t v27 = +[NSString stringWithFormat:@"%@-%@", v26, *(void *)(a1 + 40)];
        uint64_t v28 = *(void *)(*(void *)(a1 + 32) + 88);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_10012E14C;
        v36[3] = &unk_10041DDD0;
        id v29 = v19;
        id v37 = v29;
        id v38 = v35;
        id v30 = v18;
        id v39 = v30;
        id v40 = *(id *)(a1 + 40);
        objc_copyWeak(&v42, (id *)buf);
        id v41 = *(id *)(a1 + 56);
        [v23 setOutputDevices:v24 initiator:v27 withCallbackQueue:v28 block:v36];

        objc_destroyWeak(&v42);
        objc_destroyWeak((id *)buf);
      }
      else if (*(void *)(a1 + 48))
      {
        uint64_t v31 = MRLogCategoryConnections();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *(void *)(a1 + 32);
          uint64_t v33 = *(void *)(a1 + 40);
          id v34 = *(void **)(v32 + 64);
          *(_DWORD *)long long buf = 138544130;
          uint64_t v46 = v32;
          __int16 v47 = 2114;
          __int16 v48 = v35;
          __int16 v49 = 2114;
          id v50 = v34;
          __int16 v51 = 2114;
          uint64_t v52 = v33;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@ Skipping commit of output device: %{public}@ to: %{public}@ because %{public}@", buf, 0x2Au);
        }

        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      }
    }
    else
    {
      id v8 = MRLogCategoryConnections();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        id v10 = *(void **)(v9 + 48);
        id v11 = [*(id *)(v9 + 64) contextID];
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138544130;
        uint64_t v46 = v9;
        __int16 v47 = 2114;
        __int16 v48 = v10;
        __int16 v49 = 2114;
        id v50 = v11;
        __int16 v51 = 2114;
        uint64_t v52 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@ Already committing output device: %{public}@ to: %{public}@. New reason: %{public}@", buf, 0x2Au);
      }
    }
  }
  else
  {
    id v13 = MRLogCategoryConnections();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      long long v15 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v46 = v14;
      __int16 v47 = 2114;
      __int16 v48 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ Ignoring request to commit in an invalid state (no designatedGroupLeader) reason: %{public}@", buf, 0x16u);
    }

    id v16 = [objc_alloc((Class)NSError) initWithMRError:5 description:@"External device is invalid (no designatedGroupLeader)"];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10012E05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10012E088(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  uint64_t v3 = (void *)MRMediaRemoteCopyDeviceUID();
  unsigned __int8 v4 = [v2 containsUID:v3];

  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 64) outputDevices];
  unsigned int v6 = objc_msgSend(v5, "mr_any:", &stru_10041DDA8);

  if ((v4 & 1) == 0)
  {
    id v7 = [*(id *)(*(void *)(a1 + 32) + 64) outputDevices];
    unsigned int v6 = [v7 containsObject:*(void *)(*(void *)(a1 + 32) + 48)];
  }
  return v6 ^ 1;
}

BOOL sub_10012E144(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

void sub_10012E14C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && (MRMediaRemoteErrorIsInformational() & 1) == 0)
  {
    unsigned __int8 v4 = MRLogCategoryConnections();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      id v7 = [*(id *)(a1 + 48) contextID];
      uint64_t v8 = *(void *)(a1 + 56);
      int v11 = 138544386;
      uint64_t v12 = v5;
      __int16 v13 = 2114;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      id v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      id v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Failed to commit output device: %{public}@ to: %{public}@ because %{public}@ - %{public}@", (uint8_t *)&v11, 0x34u);
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    id v10 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained disconnect:v3];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10012EEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10012EF04(uint64_t a1)
{
}

BOOL sub_10012F37C(id a1, MRAVEndpoint *a2)
{
  return [(MRAVEndpoint *)a2 connectionType] == (id)6;
}

id sub_10012F3A0(uint64_t a1, void *a2)
{
  id v3 = [a2 origin];
  unsigned __int8 v4 = [*(id *)(a1 + 32) originClientForOrigin:v3];

  return v4;
}

BOOL sub_10012F3FC(id a1, MRDNowPlayingOriginClient *a2)
{
  return [(MRDNowPlayingOriginClient *)a2 isPlaying];
}

BOOL sub_10012F404(id a1, MRAVEndpoint *a2)
{
  uint64_t v2 = [(MRAVEndpoint *)a2 outputDevices];
  id v3 = objc_msgSend(v2, "msv_firstWhere:", &stru_10041DEC0);
  BOOL v4 = v3 != 0;

  return v4;
}

BOOL sub_10012F454(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isAuxiliary] ^ 1;
}

BOOL sub_10012F474(id a1, MRDNowPlayingOriginClient *a2)
{
  uint64_t v2 = [(MRDNowPlayingOriginClient *)a2 deviceInfo];
  unsigned __int8 v3 = [v2 containsLocalDevice];

  return v3;
}

id sub_10012F4B0(id a1, MRAVEndpoint *a2)
{
  return [(MRAVEndpoint *)a2 debugName];
}

id sub_10012F4B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSMutableString);
  uint64_t v5 = [v3 origin];
  uint64_t v6 = (int)[v5 identifier];
  id v7 = [*(id *)(a1 + 32) name];
  uint64_t v8 = [*(id *)(a1 + 32) deviceUID];
  id v9 = [v4 initWithFormat:@"origin-%ld %@ (%@)", v6, v7, v8];

  id v10 = [*(id *)(a1 + 32) groupedDevices];
  id v11 = [v10 count];

  if (v11) {
    [v9 appendString:@" + "];
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v12 = [*(id *)(a1 + 32) groupedDevices];
  id v13 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v15) {
          objc_enumerationMutation(v12);
        }
        __int16 v17 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v18 = [v17 name];
        __int16 v19 = [v17 deviceUID];
        [v9 appendFormat:@"%@ (%@) + ", v18, v19];
      }
      id v14 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v14);
  }

  id v20 = objc_alloc((Class)NSString);
  uint64_t v21 = [v3 activePlayerPath];
  id v22 = [v20 initWithFormat:@"%@ (%@)", v21, v9];

  return v22;
}

id sub_10012F6F8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10012FD60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10012FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FF14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10012FF24(uint64_t a1)
{
}

intptr_t sub_10012FF2C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)a1[4];
  id v6 = a2;
  [v5 setError:a3];
  uint64_t v7 = [v6 connection];

  uint64_t v8 = *(void *)(a1[6] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v10 = a1[5];

  return dispatch_semaphore_signal(v10);
}

void sub_1001300C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100130500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130610(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _canSendMessage];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

void sub_1001306FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100130994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001309E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_onCalloutQueue_notifyStatusDidChange:", 1);
}

void sub_100130A28(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  *(void *)(*(void *)(a1 + 32) + 64) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  objc_sync_exit(v2);

  if ([*(id *)(a1 + 40) disarm])
  {
    id v3 = +[MRUserSettings currentSettings];
    unsigned int v4 = [v3 verboseConnectionMonitorLogging];

    if (v4)
    {
      uint64_t v5 = _MRLogForCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        [*(id *)(v6 + 88) timeIntervalSinceNow];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v12 = v6;
        __int16 v13 = 2048;
        double v14 = -v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[ConnectionMonitor] Checked-in connection %@ in %lf seconds", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(NSObject **)(v8 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100130BAC;
    block[3] = &unk_100415CC8;
    void block[4] = v8;
    dispatch_async(v9, block);
  }
}

id sub_100130BAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onCalloutQueue_notifyStatusDidChange:", 0);
}

void sub_100130E8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100130EB0(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidateWithReason:@"task finished: connection successfully resumed"];
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    [*(id *)(a1 + 48) timeIntervalSinceNow];
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    double v8 = -v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[ConnectionMonitor] Resumed connection %@ in %lf seconds", (uint8_t *)&v5, 0x16u);
  }
}

id sub_100131680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "searchEndpointsForOutputDeviceUID:timeout:details:completion:", a2, a3);
}

void sub_100131690(id a1, MRGroupTopologyModificationRequest *a2, MRAVConcreteOutputContext *a3, OS_dispatch_queue *a4, id a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  uint64_t v12 = [[MRDOutputContextModification alloc] initWithRequest:v11];

  [(MRDOutputContextModification *)v12 modifyWithOutputContext:v10 queue:v9 completion:v8];
}

void sub_100131744(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateSystemRouteDiscoveryMode];
  id v2 = +[MRUserSettings currentSettings];
  unsigned __int8 v3 = [v2 supportMultiplayerHost];

  if ((v3 & 1) == 0)
  {
    int out_token = 0;
    double v4 = _NSConcreteStackBlock;
    uint64_t v5 = 3221225472;
    uint64_t v6 = sub_100131828;
    __int16 v7 = &unk_10041DFE8;
    id v8 = *(id *)(a1 + 32);
    notify_register_dispatch("com.apple.airplay.active", &out_token, (dispatch_queue_t)&_dispatch_main_q, &v4);
    objc_msgSend(*(id *)(a1 + 32), "setAirplayActive:", MRMediaRemoteGetIsAirPlayActive(), v4, v5, v6, v7);
  }
}

id sub_100131828(uint64_t a1)
{
  uint64_t IsAirPlayActive = MRMediaRemoteGetIsAirPlayActive();
  unsigned __int8 v3 = *(void **)(a1 + 32);

  return [v3 setAirplayActive:IsAirPlayActive];
}

id sub_100132C1C(id result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = (uint64_t)result;
    unsigned __int8 v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10032FB5C(v2, v3);
    }

    return [*(id *)(v2 + 48) _clearPasswordForOutputDevice:*(void *)(v2 + 32)];
  }
  return result;
}

uint64_t sub_100132C80(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] User cancelled authorization request for %{public}@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 40) cancel];
  return notify_post("com.apple.mediaplayer.airPlayPasswordAlertDidCancel");
}

void sub_100132D40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 length])
  {
    double v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = [*(id *)(a1 + 32) name];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v15 = v5;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] Responding to authorization request using user entered password for %{public}@: %@", buf, 0x16u);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100132ECC;
    v9[3] = &unk_10041E010;
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v10 = v7;
    uint64_t v11 = v8;
    id v12 = v3;
    id v13 = *(id *)(a1 + 32);
    [v6 respondWithAuthorizationToken:v12 completionHandler:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100132ECC(uint64_t a1, int a2)
{
  double v4 = _MRLogForCategory();
  int v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v13 = 138543362;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] Authorization token accepted for %{public}@. Updating keychain with new passcode.", (uint8_t *)&v13, 0xCu);
    }

    [*(id *)(a1 + 40) _storePassword:*(void *)(a1 + 48) forOutputDevice:*(void *)(a1 + 56)];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032FC08(a1, v5, v7, v8, v9, v10, v11, v12);
    }
  }
}

void sub_10013359C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1001335D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (v5)
  {
    uint64_t v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v22 = 138543618;
      uint64_t v23 = v9;
      __int16 v24 = 2114;
      id v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] AV reconnaissance session found route with UID %{public}@ : %{public}@", (uint8_t *)&v22, 0x16u);
    }

    uint64_t v10 = [v5 dictionary];
    [WeakRetained setPickedRoute:v10 withPassword:*(void *)(a1 + 40) options:*(unsigned int *)(a1 + 72)];

    unsigned int v11 = 0;
  }
  else
  {
    uint64_t v12 = _MRLogForCategory();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v13) {
        sub_10032FD1C();
      }

      unsigned int v11 = [v6 code];
    }
    else
    {
      if (v13) {
        sub_10032FCAC(a1, v12, v14, v15, v16, v17, v18, v19);
      }

      unsigned int v11 = 1;
    }
  }
  id v20 = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v21 = v20;
  if (WeakRetained && v20) {
    [WeakRetained[4] removeObject:v20];
  }
  sub_1001679D8(*(void **)(a1 + 48), v11);
}

void sub_100134110(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _createAirPlaySecuritySettings];
  ExternalRepresentation = (void *)MRAVAirPlaySecuritySettingsCreateExternalRepresentation();
  sub_1001678A4(*(void **)(a1 + 40), (uint64_t)"MRXPC_AIRPLAY_SEC_SETTINGS_DATA_KEY", ExternalRepresentation, 0);
}

void sub_10013424C(uint64_t a1)
{
  uint64_t v2 = +[MRUserSettings currentSettings];
  unsigned int v3 = [v2 supportsNativeThirdPartyApps];

  if (!v3 || ([*(id *)(a1 + 32) entitlements] & 0x8000) != 0)
  {
    id v6 = [*(id *)(*(void *)(a1 + 40) + 160) xpcEndpoint];
    int v7 = 0;
  }
  else
  {
    double v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10032FEE0((id *)(a1 + 32), v4);
    }

    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10032FE3C((id *)(a1 + 32), v5);
    }

    id v6 = 0;
    int v7 = 130;
  }
  uint64_t v8 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001343A0;
  v10[3] = &unk_10041C820;
  id v11 = v6;
  int v12 = v7;
  id v9 = v6;
  sub_100014324(v8, v10);
}

void sub_1001343A0(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  xpc_object_t xdict = a2;
  double v4 = [v3 _endpoint];
  xpc_dictionary_set_value(xdict, "MRXPC_CUSTOM_XPC_ENDPOINT_KEY", v4);

  xpc_dictionary_set_uint64(xdict, "MRXPC_ERROR_CODE_KEY", *(unsigned int *)(a1 + 40));
}

void sub_100134668(uint64_t a1)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001347F0;
  v10[3] = &unk_100415F80;
  id v11 = *(id *)(a1 + 32);
  uint64_t v2 = objc_retainBlock(v10);
  unsigned int v3 = MRCreateProtobufFromXPCMessage();
  if (!*(void *)(*(void *)(a1 + 40) + 168))
  {
    id v8 = objc_alloc((Class)NSError);
    CFStringRef v9 = @"SystemEndpointController is not supported on platform";
LABEL_6:
    id v7 = [v8 initWithMRError:6 format:v9];
    ((void (*)(void *, id))v2[2])(v2, v7);
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v8 = objc_alloc((Class)NSError);
    CFStringRef v9 = @"Malformed xpc message types";
    goto LABEL_6;
  }
  double v4 = [*(id *)(a1 + 48) bundleIdentifier];
  id v5 = [v3 request];
  [v5 setClientBundleIdentifier:v4];

  id v6 = *(void **)(*(void *)(a1 + 40) + 168);
  id v7 = [v3 request];
  [v6 updateSystemEndpointForRequest:v7 completion:v2];
LABEL_7:
}

void sub_1001347F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100134888;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_100134888()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_100134964(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEntitledFor:0x10000];
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    double v4 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 168), "activeOutputDeviceUID:", xpc_dictionary_get_int64(v3, "MRXPC_ROUTE_OPTIONS_KEY"));
    id v5 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100134A54;
    void v7[3] = &unk_100415DC8;
    id v8 = v4;
    id v6 = v4;
    sub_100014324(v5, v7);
  }
  else
  {
    sub_1001679D8(v3, 0x82u);
  }
}

uint64_t sub_100134A54(uint64_t a1, uint64_t a2)
{
  return _MRAddStringToXPCMessage(a2, *(void *)(a1 + 32), "MRXPC_ROUTE_UID_KEY");
}

void sub_100134B38(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEntitledFor:0x8000];
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100134BFC;
    v6[3] = &unk_100415DF0;
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = v4;
    uint64_t v8 = v5;
    sub_100014324(v4, v6);
  }
  else
  {
    sub_1001679D8(v3, 0x82u);
  }
}

void sub_100134BFC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = MRCreateStringFromXPCMessage();
  id v4 = [*(id *)(*(void *)(a1 + 40) + 160) endpointForDeviceUID:v3];
  if (v4) {
    MRAddDistantEndpointToXPCMessage();
  }
  MRAddErrorToXPCMessage();
}

void sub_100134E40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100134ED8;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

void sub_100134ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRPromptForRouteAuthorizationResponseMessage) initWithResponse:*(void *)(a1 + 32)];
  MRAddProtobufToXPCMessage();
}

uint64_t sub_100134F50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001350BC(uint64_t a1)
{
  int LocalGroupContainsDiscoverableGroupLeader = MRMediaRemoteGetLocalGroupContainsDiscoverableGroupLeader();
  unsigned int v3 = [*(id *)(a1 + 32) airplayActive];
  uint64_t v4 = 1;
  if (LocalGroupContainsDiscoverableGroupLeader) {
    uint64_t v4 = 2;
  }
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = *(void **)(a1 + 40);

  return sub_10001432C(v6, (uint64_t)"MRXPC_AIRPLAY_LEADER_TYPE", 1, v5, 0);
}

uint64_t sub_1001351B0()
{
  return MRAddErrorToXPCMessage();
}

void sub_100135254(uint64_t a1)
{
  unsigned int v2 = MRCreateStringFromXPCMessage();
  unsigned int v3 = +[MRAVLocalEndpoint sharedLocalEndpointForRoutingContextWithUID:0];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100135330;
  v4[3] = &unk_100415F80;
  id v5 = *(id *)(a1 + 32);
  [v3 setOutputDevices:0 initiator:v2 withReplyQueue:&_dispatch_main_q completion:v4];
}

void sub_100135330(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001353C8;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_1001353C8()
{
  return MRAddClientToXPCMessage();
}

void sub_100135464(id a1, OS_xpc_object *a2)
{
}

void sub_1001354FC(id a1, OS_xpc_object *a2)
{
}

void sub_1001355CC(uint64_t a1)
{
  unsigned int v2 = (void *)MRCreatePropertyListFromXPCMessage();
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "MRXPC_ENDPOINT_LEADER_OPTIONS_KEY");
  MRCreateRequestDetailsFromXPCMessage();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    id v5 = objc_alloc((Class)MRRequestDetails);
    uint64_t v6 = MRRequestDetailsInitiatorInfer;
    id v7 = [*(id *)(a1 + 40) bundleIdentifier];
    id v4 = [v5 initWithInitiator:v6 requestID:0 reason:@"RoutingServer.handleCreateGroupWithDevices" userInitiated:0 originatingBundleID:v7];
  }
  uint64_t v8 = *(void **)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100135710;
  v9[3] = &unk_10041E0C8;
  id v10 = *(id *)(a1 + 32);
  [v8 createEndpointForOutputDeviceIDs:v2 options:uint64 details:v4 completion:v9];
}

void sub_100135710(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a3 && (MRMediaRemoteErrorCodeIsInformational() & 1) == 0)
  {
    sub_1001679D8(*(void **)(a1 + 32), a3);
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001357D8;
    void v7[3] = &unk_10041C820;
    id v8 = v5;
    unsigned int v9 = a3;
    sub_100014324(v6, v7);
  }
}

void sub_1001357D8(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) designatedGroupLeader];
  id v4 = [v3 uid];
  MRAddPropertyListToXPCMessage();

  if (*(_DWORD *)(a1 + 40)) {
    MRAddErrorToXPCMessage();
  }
}

void sub_100135938(uint64_t a1)
{
  [*(id *)(a1 + 32) setDeclaringAirplayActive:1];
  unsigned int v2 = *(void **)(*(void *)(a1 + 40) + 120);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1001359F0;
  v5[3] = &unk_10041E110;
  id v6 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = v3;
  uint64_t v8 = v4;
  [v2 startNowPlayingSessionWithCompletion:v5];
}

void sub_1001359F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 copy];
  id v7 = +[MRDMediaRemoteServer server];
  uint64_t v8 = [v7 nowPlayingServer];
  unsigned int v9 = [v6 origin];
  id v10 = [v8 originClientForOrigin:v9];
  id v11 = [v10 deviceInfo];

  int v12 = [v11 routingContextID];

  if (v12)
  {
    if (!v5)
    {
LABEL_5:
      uint64_t v14 = +[MRUserSettings currentSettings];
      unsigned int v15 = [v14 forceNowPlayingSessionFailure];

      if (v15)
      {
        id v5 = [objc_alloc((Class)NSError) initWithMRError:6];
        if (v5) {
          goto LABEL_7;
        }
      }
      else
      {
        id v5 = 0;
      }
      char v19 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    id v13 = [objc_alloc((Class)NSError) initWithMRError:32];

    id v5 = v13;
    if (!v13) {
      goto LABEL_5;
    }
  }
LABEL_7:
  id v16 = objc_alloc((Class)MRPlayerPath);
  uint64_t v17 = +[MROrigin localOrigin];
  id v18 = [v16 initWithOrigin:v17 client:0 player:0];

  char v19 = 0;
  id v6 = v18;
LABEL_10:
  [*(id *)(a1 + 32) setNowPlayingAirPlaySession:v6];
  id v20 = *(void **)(a1 + 40);
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 3221225472;
  id v30 = sub_100135D00;
  uint64_t v31 = &unk_1004164F0;
  id v21 = v5;
  id v32 = v21;
  id v22 = v11;
  id v33 = v22;
  id v23 = v6;
  id v34 = v23;
  sub_100014324(v20, &v28);
  if ((v19 & 1) == 0)
  {
    __int16 v24 = +[MRUserSettings currentSettings];
    unsigned int v25 = [v24 startNowPlayingSessionABC];

    if (v25)
    {
      long long v26 = [*(id *)(*(void *)(a1 + 48) + 120) description];
      id v35 = v26;
      long long v27 = +[NSArray arrayWithObjects:&v35 count:1];
      +[MSVAutoBugCapture snapshotWithDomain:@"MediaRemote", &stru_10042ACB0, @"Routing", @"StartNowPlayingSession", 0, v27, &stru_10041E0E8, v28, v29, v30, v31, v32, v33 type subType context triggerThresholdValues events completion];
    }
  }
}

void sub_100135D00(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddClientErrorToXPCMessage();
  MRAddDeviceInfoToXPCMessage();
  MRAddPlayerPathToXPCMessage();
}

uint64_t sub_100135E38(uint64_t a1)
{
  [*(id *)(a1 + 32) setDeclaringAirplayActive:0];
  [*(id *)(a1 + 32) setNowPlayingAirPlaySession:0];
  [*(id *)(*(void *)(a1 + 40) + 120) stopNowPlayingSesion];
  id v2 = *(void **)(a1 + 48);

  return sub_100014324(v2, 0);
}

uint64_t sub_100135F8C(uint64_t a1)
{
  [*(id *)(a1 + 32) setDeclaringAirplayActive:1];
  [*(id *)(a1 + 32) setNowPlayingAirPlaySession:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 48) + 120) resumeNowPlayingSesion];
  id v2 = *(void **)(a1 + 56);

  return sub_100014324(v2, 0);
}

void sub_1001360B0(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.routingServer.getDeviceUID", v3);
  id v2 = (void *)qword_10047E288;
  qword_10047E288 = (uint64_t)v1;
}

void sub_100136114(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[MRDAVOutputContextManager sharedManager];
  id v5 = [v4 outputContextForOutputDeviceUID:v3];

  id v6 = [v5 contextID];
  id v7 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001361F8;
  v9[3] = &unk_100415DC8;
  id v10 = v6;
  id v8 = v6;
  sub_100014324(v7, v9);
}

uint64_t sub_1001361F8(uint64_t a1, uint64_t a2)
{
  return _MRAddStringToXPCMessage(a2, *(void *)(a1 + 32), "MRXPC_ROUTING_CONTEXT_UID_KEY");
}

void sub_1001362A8(uint64_t a1)
{
  id v3 = (void *)MRCreateDataFromXPCMessage();
  uint64_t v4 = MSVPropertyListDataClasses();
  id v5 = MSVUnarchivedObjectOfClasses();

  id v6 = objc_msgSend(v5, "mr_map:", &stru_10041E150);
  id v7 = MRCreateStringFromXPCMessage();
  if (v7)
  {
    id v8 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
    unsigned int v9 = [v8 availableEndpoints];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1001365C0;
    v25[3] = &qword_1004199E0;
    dispatch_queue_t v1 = &v26;
    id v26 = v7;
    objc_msgSend(v9, "mr_first:", v25);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = (id)MRAVEndpointGetLocalEndpoint();
  }
  id v11 = objc_alloc((Class)MRPlaybackSessionMigrateRequest);
  int v12 = (void *)MRCreateDataFromXPCMessage();
  id v13 = [v11 initWithData:v12];

  id v18 = _NSConcreteStackBlock;
  uint64_t v19 = 3221225472;
  id v20 = sub_100136604;
  id v21 = &unk_1004175B8;
  id v14 = v10;
  id v22 = v14;
  id v23 = *(id *)(a1 + 32);
  id v15 = v13;
  id v24 = v15;
  id v16 = objc_retainBlock(&v18);
  if (v14 && objc_msgSend(v6, "count", v18, v19, v20, v21, v22, v23))
  {
    [v14 performMigrationToOutputDevices:v6 request:v15 initiator:&stru_10042ACB0 queue:&_dispatch_main_q completion:v16];
  }
  else
  {
    id Error = (void *)MRMediaRemoteCreateError();
    ((void (*)(void ***, void *))v16[2])(v16, Error);
  }
  if (v7) {
}
  }

id sub_10013653C(id a1, NSData *a2)
{
  id v2 = a2;
  id v3 = objc_alloc((Class)MRAVDistantOutputDevice);
  id v4 = [objc_alloc((Class)_MRAVOutputDeviceDescriptorProtobuf) initWithData:v2];

  id v5 = [v3 initWithDescriptor:v4];

  return v5;
}

id sub_1001365C0(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100136604(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001366C4;
  void v8[3] = &unk_100415DF0;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v6 = v3;
  id v7 = v5;
  sub_100014324(v4, v8);
}

void sub_1001366C4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1 + 32) protobufData];
  MRAddDataToXPCMessage();

  if (*(void *)(a1 + 40)) {
    MRAddClientErrorToXPCMessage();
  }
}

void sub_1001367D8(uint64_t a1)
{
  id v3 = MRCreateStringFromXPCMessage();
  id v4 = MRCreateStringFromXPCMessage();
  id v5 = (id *)&qword_1004199E0;
  if (!v3)
  {
    id v8 = (id)MRAVEndpointGetLocalEndpoint();
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    id v11 = (id)MRAVEndpointGetLocalEndpoint();
    goto LABEL_6;
  }
  id v6 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
  id v7 = [v6 availableEndpoints];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  void v27[2] = sub_100136AF0;
  v27[3] = &qword_1004199E0;
  dispatch_queue_t v1 = &v28;
  id v28 = v3;
  objc_msgSend(v7, "mr_first:", v27);
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  id v9 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
  id v10 = [v9 availableEndpoints];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100136B34;
  v25[3] = &qword_1004199E0;
  id v5 = &v26;
  id v26 = v4;
  objc_msgSend(v10, "mr_first:", v25);
  id v11 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
  id v12 = objc_alloc((Class)MRPlaybackSessionMigrateRequest);
  id v13 = (void *)MRCreateDataFromXPCMessage();
  id v14 = [v12 initWithData:v13];

  uint64_t v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472;
  id v21 = sub_100136B78;
  id v22 = &unk_100418848;
  id v23 = *(id *)(a1 + 32);
  id v15 = v14;
  id v24 = v15;
  id v16 = objc_retainBlock(&v19);
  if (v8 && v11)
  {
    objc_msgSend(v8, "performMigrationToEndpoint:request:queue:completion:", v11, v15, &_dispatch_main_q, v16, v19, v20, v21, v22, v23);
  }
  else
  {
    uint64_t v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_10032FF7C();
    }

    id Error = (void *)MRMediaRemoteCreateError();
    ((void (*)(void ***, void *))v16[2])(v16, Error);
  }
  if (v4) {

  }
  if (v3) {
}
  }

id sub_100136AF0(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_100136B34(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100136B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100136C28;
  v6[3] = &unk_100415DF0;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

void sub_100136C28(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [*(id *)(a1 + 32) protobufData];
  MRAddDataToXPCMessage();

  if (*(void *)(a1 + 40)) {
    MRAddClientErrorToXPCMessage();
  }
}

void sub_100136D74(uint64_t a1)
{
  id v2 = (void *)MRCreatePropertyListFromXPCMessage();
  MRCreateRequestDetailsFromXPCMessage();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    id v4 = objc_alloc((Class)MRRequestDetails);
    uint64_t v5 = MRRequestDetailsInitiatorInfer;
    id v6 = [*(id *)(a1 + 40) bundleIdentifier];
    id v3 = [v4 initWithInitiator:v5 requestID:0 reason:@"RoutingServer.handleCreateDirectEndpointForDevices" userInitiated:0 originatingBundleID:v6];
  }
  id v7 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100136EA4;
  v10[3] = &unk_10041E1A0;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v11 = v8;
  uint64_t v12 = v9;
  [v7 createEndpointForOutputDeviceIDs:v2 details:v3 completion:v10];
}

void sub_100136EA4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100136F4C;
  v9[3] = &unk_10041E178;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v10 = v5;
  uint64_t v11 = v6;
  int v12 = a3;
  id v8 = v5;
  sub_100014324(v7, v9);
}

void sub_100136F4C(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (*(void *)(a1 + 32))
  {
    id v3 = objc_alloc((Class)MRAVDistantEndpoint);
    id v4 = [*(id *)(a1 + 32) descriptor];
    id v5 = [v3 initWithDescriptor:v4];

    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
    id v7 = [v5 uniqueIdentifier];
    id v8 = [v6 externalDeviceForEndpoint:v7];
    uint64_t v9 = [v8 externalDeviceListenerEndpoint];
    [v5 setExternalDeviceListenerEndpoint:v9];

    MRAddDistantEndpointToXPCMessage();
  }
  if (*(_DWORD *)(a1 + 48)) {
    MRAddErrorToXPCMessage();
  }
}

void sub_100137120(uint64_t a1)
{
  id v2 = (void *)MRCreatePropertyListFromXPCMessage();
  MRCreateRequestDetailsFromXPCMessage();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    id v4 = objc_alloc((Class)MRRequestDetails);
    uint64_t v5 = MRRequestDetailsInitiatorInfer;
    uint64_t v6 = [*(id *)(a1 + 40) bundleIdentifier];
    id v3 = [v4 initWithInitiator:v5 requestID:0 reason:@"RoutingServer.handleGroupDevicesAndSendCommand" userInitiated:0 originatingBundleID:v6];
  }
  id v7 = *(void **)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10013724C;
  void v8[3] = &unk_10041E0C8;
  id v9 = *(id *)(a1 + 32);
  [v7 createEndpointForOutputDeviceIDs:v2 details:v3 completion:v8];
}

void sub_10013724C(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a3 && !MRMediaRemoteErrorCodeIsInformational())
  {
    sub_1001679D8(*(void **)(a1 + 32), a3);
  }
  else
  {
    uint64_t v11 = MREndpointConnectionReasonUserInfoKey;
    CFStringRef v12 = @"groupDevicesAndSendCommand";
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100137390;
    void v7[3] = &unk_10041E1F0;
    id v8 = *(id *)(a1 + 32);
    id v9 = v5;
    unsigned int v10 = a3;
    [v9 connectToExternalDeviceWithUserInfo:v6 completion:v7];
  }
}

void sub_100137390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (v3)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1001375FC;
    v19[3] = &unk_100415DC8;
    id v20 = v3;
    sub_100014324(v5, v19);
    uint64_t v6 = v20;
  }
  else
  {
    xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "MRXPC_COMMAND_KEY");
    uint64_t v6 = MRCreatePlayerPathFromXPCMessage();
    id v7 = (void *)MRCreatePropertyListFromXPCMessage();
    MRAVEndpointGetExternalDevice();
    id v8 = (void *)MRExternalDeviceCopyCustomOrigin();
    [v6 setOrigin:v8];
    id v9 = +[MRDMediaRemoteServer server];
    unsigned int v10 = [v9 nowPlayingServer];
    uint64_t v11 = [v10 queryExistingPlayerPath:v6];

    CFStringRef v12 = [v6 client];
    id v13 = [v11 originClient];
    id v14 = [v13 deviceInfo];
    [v12 resolvePlaceholdersForDeviceInfo:v14];

    id v15 = [v7 objectForKeyedSubscript:kMRMediaRemoteOptionSendOptionsNumber];
    [v15 intValue];

    id v16 = dispatch_get_global_queue(0, 0);
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 32);
    MRMediaRemoteSendCommandToPlayerWithResult();
  }
}

uint64_t sub_1001375FC()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_10013760C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 sendError])
  {
    id v4 = *(void **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001377EC;
    v9[3] = &unk_100415DC8;
    id v5 = &v10;
    id v10 = v3;
    id v6 = v3;
    sub_100014324(v4, v9);
  }
  else
  {
    MRAVEndpointUpdateActiveSystemEndpointWithReason();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100137750;
    v11[3] = &unk_10041E178;
    id v5 = &v12;
    id v12 = v3;
    id v7 = *(void **)(a1 + 40);
    id v13 = *(id *)(a1 + 32);
    int v14 = *(_DWORD *)(a1 + 48);
    id v8 = v3;
    sub_100014324(v7, v11);
  }
}

void sub_100137750(uint64_t a1, void *a2)
{
  id v5 = a2;
  MRAddCommandResultToXPCMessage();
  id v3 = [*(id *)(a1 + 40) designatedGroupLeader];
  id v4 = [v3 uid];
  MRAddPropertyListToXPCMessage();

  if (*(_DWORD *)(a1 + 48)) {
    MRAddErrorToXPCMessage();
  }
}

uint64_t sub_1001377EC()
{
  return MRAddCommandResultToXPCMessage();
}

void sub_1001378C0(uint64_t a1)
{
  id v2 = (void *)MRCreatePropertyListFromXPCMessage();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100137A70;
  v15[3] = &unk_10041BC30;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v16 = v3;
  uint64_t v17 = v4;
  id v5 = objc_retainBlock(v15);
  MRCreateRequestDetailsFromXPCMessage();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    id v7 = objc_alloc((Class)MRRequestDetails);
    uint64_t v8 = MRRequestDetailsInitiatorInfer;
    id v9 = [*(id *)(a1 + 48) bundleIdentifier];
    id v6 = [v7 initWithInitiator:v8 requestID:0 reason:@"RoutingServer.handleCreateHostedEndpointForDevices" userInitiated:0 originatingBundleID:v9];
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100137C4C;
  v12[3] = &unk_10041E218;
  id v13 = v6;
  id v14 = v5;
  id v10 = v6;
  uint64_t v11 = v5;
  +[MRDCreateHostedEndpointRequest createHostedEndpointWithOutputDeviceUIDs:v2 timeout:v10 details:v12 completion:0.0];
}

void sub_100137A70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100137B34;
  v11[3] = &unk_1004164F0;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  sub_100014324(v8, v11);
}

void sub_100137B34(uint64_t a1, void *a2)
{
  id v11 = a2;
  if (*(void *)(a1 + 32))
  {
    id v3 = objc_alloc((Class)MRAVDistantEndpoint);
    uint64_t v4 = [*(id *)(a1 + 32) descriptor];
    id v5 = [v3 initWithDescriptor:v4];

    id v6 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
    uint64_t v7 = [v5 uniqueIdentifier];
    uint64_t v8 = [v6 externalDeviceForEndpoint:v7];
    id v9 = [v8 externalDeviceListenerEndpoint];
    [v5 setExternalDeviceListenerEndpoint:v9];

    MRAddDistantEndpointToXPCMessage();
  }
  id v10 = *(void **)(a1 + 48);
  if (v10)
  {
    [v10 code];
    MRAddErrorToXPCMessage();
  }
}

void sub_100137C4C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v12[0] = @"createHostedEndpointForDevices";
    v11[0] = MREndpointConnectionReasonUserInfoKey;
    v11[1] = MREndpointConnectionCorrelationIDUserInfoKey;
    id v6 = [*(id *)(a1 + 32) requestID];
    v12[1] = v6;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100137DB0;
    void v8[3] = &unk_1004189B0;
    id v10 = *(id *)(a1 + 40);
    id v9 = v5;
    [v9 connectToExternalDeviceWithUserInfo:v7 completion:v8];
  }
}

uint64_t sub_100137DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0, a2);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
}

void sub_100137EA0(uint64_t a1)
{
  id v2 = (void *)MRCreatePropertyListFromXPCMessage();
  MRCreateRequestDetailsFromXPCMessage();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    id v4 = objc_alloc((Class)MRRequestDetails);
    uint64_t v5 = MRRequestDetailsInitiatorInfer;
    id v6 = [*(id *)(a1 + 40) bundleIdentifier];
    id v3 = [v4 initWithInitiator:v5 requestID:0 reason:@"RoutingServer.handlePredictGroupLeader" userInitiated:0 originatingBundleID:v6];
  }
  uint64_t v7 = [*(id *)(a1 + 48) _predictGroupLeaderForOutputDeviceIDs:v2 options:0 details:v3];
  uint64_t v8 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100137FE0;
  v10[3] = &unk_100415DC8;
  id v11 = v7;
  id v9 = v7;
  sub_100014324(v8, v10);
}

void sub_100137FE0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 uid];
  MRAddPropertyListToXPCMessage();
}

void sub_100138198(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100138230;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_100138230()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_100138340(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.routingServer.getExternalDevice", v3);
  id v2 = (void *)qword_10047E298;
  qword_10047E298 = (uint64_t)v1;
}

void sub_1001383A4(id a1, OS_xpc_object *a2)
{
}

void sub_1001383B0(uint64_t a1)
{
  id v2 = MRCreateStringFromXPCMessage();
  id v3 = [*(id *)(*(void *)(a1 + 40) + 160) hostedRoutingController];
  id v4 = [v3 externalDeviceForEndpoint:v2];

  if (v4) {
    id v5 = 0;
  }
  else {
    id v5 = [objc_alloc((Class)NSError) initWithMRError:127];
  }
  id v6 = [v4 externalDeviceListenerEndpoint];
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001384E0;
  v10[3] = &unk_100415DF0;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_100014324(v7, v10);
}

void sub_1001384E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  MRAddClientErrorToXPCMessage();
  id v4 = [*(id *)(a1 + 40) _endpoint];
  xpc_dictionary_set_value(v3, "MRXPC_EXTERNAL_DEVICE_LISTENER_KEY", v4);
}

void sub_1001385F8(uint64_t a1)
{
  id v2 = (void *)MRCreateDataFromXPCMessage();
  id v3 = [objc_alloc((Class)MRGroupTopologyModificationRequest) initWithData:v2];
  id v4 = MRCreateStringFromXPCMessage();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100138850;
  v16[3] = &unk_100415F80;
  id v17 = *(id *)(a1 + 32);
  id v5 = objc_retainBlock(v16);
  id v6 = +[MRUserSettings currentSettings];
  unsigned int v7 = [v6 supportMultiplayerHost];

  if (!v7)
  {
    id v10 = +[MRAVConcreteOutputContext createOutputContextWithUniqueIdentifier:v4];
    if (v10) {
      goto LABEL_3;
    }
LABEL_5:
    id v11 = (MRDOutputContextModification *)[objc_alloc((Class)NSError) initWithMRError:32, @"Failed to create output context with UID=%@", v4 format];
    ((void (*)(void *, MRDOutputContextModification *))v5[2])(v5, v11);
    goto LABEL_6;
  }
  id v8 = +[MRDAVOutputContextManager sharedManager];
  id v9 = [v8 outputContexts];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1001388F8;
  v14[3] = &unk_1004180C8;
  id v15 = v4;
  id v10 = objc_msgSend(v9, "msv_firstWhere:", v14);

  if (!v10) {
    goto LABEL_5;
  }
LABEL_3:
  id v11 = [[MRDOutputContextModification alloc] initWithRequest:v3];
  qos_class_t v12 = qos_class_self();
  uint64_t v13 = dispatch_get_global_queue(v12, 0);
  [(MRDOutputContextModification *)v11 modifyWithOutputContext:v10 queue:v13 completion:v5];

LABEL_6:
}

void sub_100138850(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001388E8;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_1001388E8()
{
  return MRAddClientErrorToXPCMessage();
}

id sub_1001388F8(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001389D4(uint64_t a1)
{
  dispatch_queue_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100138A50;
  v2[3] = &unk_100415DC8;
  id v3 = v1;
  sub_100014324(v3, v2);
}

void sub_100138A50(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v4 = (id)MRCreatePropertyListFromXPCMessage();
  id v3 = +[MRDStreamCapacityManager sharedManager];
  xpc_dictionary_set_BOOL(v2, "MRXPC_BOOL_RESULT_KEY", (BOOL)[v3 willStartingPlaybackToOutputDevicesInterrupt:v4]);
}

void sub_100138C18(uint64_t a1)
{
  MRCreateStringFromXPCMessage();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = MRCreateStringFromXPCMessage();
  unsigned int v3 = [v2 isEqualToString:@"auto"];
  id v4 = [v2 isEqualToString:@"cta"];
  uint64_t v5 = 2;
  if (!v4) {
    uint64_t v5 = 3;
  }
  if (v3) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = v5;
  }
  [*(id *)(*(void *)(a1 + 40) + 176) ingestMockedRecommendation:v7 classification:v6 isCallToAction:v4];
}

id sub_100138E4C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 176) dismissAllBannerRequests];
}

void sub_100138F8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100139024;
  v6[3] = &unk_100415DC8;
  id v7 = v3;
  id v5 = v3;
  sub_100014324(v4, v6);
}

uint64_t sub_100139024()
{
  return MRAddClientErrorToXPCMessage();
}

void sub_1001390CC(uint64_t a1)
{
  id v2 = MRCreateStringFromXPCMessage();
  double v3 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v4 = objc_alloc((Class)MRRequestDetails);
  id v5 = (void *)MRCreateDataFromXPCMessage();
  id v6 = [v4 initWithData:v5];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100139200;
  v10[3] = &unk_10041BC30;
  int8x16_t v9 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v9.i64[0];
  int8x16_t v11 = vextq_s8(v9, v9, 8uLL);
  id v8 = objc_retainBlock(v10);
  [*(id *)(a1 + 40) searchEndpointsForOutputDeviceUID:v2 timeout:v6 details:v8 completion:v3];
}

void sub_100139200(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(*(void *)(a1 + 32) + 160) hostedRoutingController];
  id v8 = [v7 availableDistantEndpoints];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100139364;
  v17[3] = &unk_10041E280;
  id v18 = v5;
  id v9 = v5;
  id v10 = objc_msgSend(v8, "msv_firstWhere:", v17);

  int8x16_t v11 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1001393C8;
  v14[3] = &unk_100415DF0;
  id v15 = v10;
  id v16 = v6;
  id v12 = v6;
  id v13 = v10;
  sub_100014324(v11, v14);
}

id sub_100139364(uint64_t a1, void *a2)
{
  double v3 = [a2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_1001393C8(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddDistantEndpointToXPCMessage();
  MRAddClientErrorToXPCMessage();
}

void sub_100139914(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) resolvedAvailableEndpoints];
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100139DA4;
  v39[3] = &qword_1004199E0;
  id v8 = v5;
  id v40 = v8;
  id v9 = objc_msgSend(v7, "msv_firstWhere:", v39);

  if (!v6)
  {
    id v18 = [v9 debugName];

    uint64_t v19 = *(void *)(a1 + 40);
    int8x16_t v11 = _MRLogForCategory();
    BOOL v20 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (v19)
      {
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v21 = *(void *)(a1 + 48);
        id v14 = [*(id *)(a1 + 56) requestID];
        id v16 = [v9 debugName];
        uint64_t v22 = *(void *)(a1 + 40);
        id v23 = +[NSDate date];
        [v23 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 138544386;
        uint64_t v42 = v21;
        __int16 v43 = 2114;
        uint64_t v44 = v14;
        __int16 v45 = 2112;
        id v46 = v16;
        __int16 v47 = 2114;
        uint64_t v48 = v22;
        __int16 v49 = 2048;
        uint64_t v50 = v24;
        unsigned int v25 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v26 = v11;
        uint32_t v27 = 52;
      }
      else
      {
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v34 = *(void *)(a1 + 48);
        id v14 = [*(id *)(a1 + 56) requestID];
        id v16 = [v9 debugName];
        id v23 = +[NSDate date];
        [v23 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v42 = v34;
        __int16 v43 = 2114;
        uint64_t v44 = v14;
        __int16 v45 = 2112;
        id v46 = v16;
        __int16 v47 = 2048;
        uint64_t v48 = v35;
        unsigned int v25 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        id v26 = v11;
        uint32_t v27 = 42;
      }
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
    }
    else
    {
      if (v19)
      {
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v28 = *(void *)(a1 + 48);
        id v14 = [*(id *)(a1 + 56) requestID];
        uint64_t v29 = *(void **)(a1 + 40);
        id v16 = +[NSDate date];
        [v16 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 138544130;
        uint64_t v42 = v28;
        __int16 v43 = 2114;
        uint64_t v44 = v14;
        __int16 v45 = 2114;
        id v46 = v29;
        __int16 v47 = 2048;
        uint64_t v48 = v30;
        uint64_t v31 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v32 = v11;
        uint32_t v33 = 42;
      }
      else
      {
        if (!v20) {
          goto LABEL_21;
        }
        uint64_t v36 = *(void *)(a1 + 48);
        id v14 = [*(id *)(a1 + 56) requestID];
        id v16 = +[NSDate date];
        [v16 timeIntervalSinceDate:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v42 = v36;
        __int16 v43 = 2114;
        uint64_t v44 = v14;
        __int16 v45 = 2048;
        id v46 = v37;
        uint64_t v31 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v32 = v11;
        uint32_t v33 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
    }
    goto LABEL_20;
  }
  uint64_t v10 = *(void *)(a1 + 40);
  int8x16_t v11 = _MRLogForCategory();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    if (!v12) {
      goto LABEL_21;
    }
    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = [*(id *)(a1 + 56) requestID];
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = +[NSDate date];
    [v16 timeIntervalSinceDate:*(void *)(a1 + 64)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v42 = v13;
    __int16 v43 = 2114;
    uint64_t v44 = v14;
    __int16 v45 = 2114;
    id v46 = v6;
    __int16 v47 = 2114;
    uint64_t v48 = v15;
    __int16 v49 = 2048;
    uint64_t v50 = v17;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_20:

    goto LABEL_21;
  }
  if (v12) {
    sub_10032FFF8();
  }
LABEL_21:

  uint64_t v38 = *(void *)(a1 + 72);
  if (v38) {
    (*(void (**)(uint64_t, void *, id))(v38 + 16))(v38, v9, v6);
  }
}

id sub_100139DA4(uint64_t a1, void *a2)
{
  double v3 = [a2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100139E08(uint64_t a1, void *a2)
{
  return [a2 containsOutputDeviceWithUID:*(void *)(a1 + 32)];
}

void sub_100139E14(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  id v4 = [*(id *)(a1 + 32) availableEndpoints];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100139FC8;
  v12[3] = &unk_10041E2A8;
  id v13 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "msv_firstWhere:", v12);

  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:*(void *)(a1 + 40) forKeyedSubscript:MREndpointConnectionReasonUserInfoKey];
  id v8 = [*(id *)(a1 + 48) requestID];
  [v7 setObject:v8 forKeyedSubscript:MREndpointConnectionCorrelationIDUserInfoKey];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10013A02C;
  v9[3] = &unk_100418848;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  [v6 connectToExternalDeviceWithUserInfo:v7 completion:v9];
}

id sub_100139FC8(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_10013A02C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      id v5 = [*(id *)(a1 + 40) requestID];
      int v6 = 138543874;
      uint64_t v7 = v4;
      __int16 v8 = 2114;
      id v9 = v5;
      __int16 v10 = 2112;
      CFStringRef v11 = @"Endpoint failed to connect";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_10013A1AC(uint64_t a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "command");
  id v3 = (void *)MRCreatePropertyListFromXPCMessage();
  uint64_t v4 = (void *)MRCreatePropertyListFromXPCMessage();
  double v5 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v6 = objc_alloc((Class)MRRequestDetails);
  uint64_t v7 = [v3 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID];
  __int16 v8 = [v3 objectForKeyedSubscript:kMRMediaRemoteOptionRemoteControlInterfaceIdentifier];
  id v9 = [v6 initWithName:@"RoutingServer.sendCommandToEachEndpointContainingOutputDeviceUIDs" requestID:v7 reason:v8];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10013A33C;
  v10[3] = &unk_10041E338;
  id v11 = *(id *)(a1 + 32);
  +[MRDSendCommandToOutputDevicesRequest sendCommand:uint64 withOptions:v3 toEachEndpointContainingOutputDeviceUIDs:v4 timeout:v9 details:v10 completion:v5];
}

void sub_10013A33C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10013A3FC;
  v10[3] = &unk_100415DF0;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_100014324(v7, v10);
}

void sub_10013A3FC(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddArrayToXPCMessage();
  MRAddClientErrorToXPCMessage();
}

NSData *__cdecl sub_10013A468(id a1, MRCommandResult *a2)
{
  return (NSData *)[(MRCommandResult *)a2 data];
}

void sub_10013A508(uint64_t a1)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), "command");
  id v3 = (void *)MRCreatePropertyListFromXPCMessage();
  uint64_t v4 = (void *)MRCreatePropertyListFromXPCMessage();
  id v5 = MRCreatePlayerPathFromXPCMessage();
  double v6 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v7 = objc_alloc((Class)MRRequestDetails);
  id v8 = [v3 objectForKeyedSubscript:kMRMediaRemoteOptionCommandID];
  id v9 = [v3 objectForKeyedSubscript:kMRMediaRemoteOptionRemoteControlInterfaceIdentifier];
  id v10 = [v7 initWithName:@"RoutingServer.sendCommandToNewGroupContainingOutputDeviceUIDs" requestID:v8 reason:v9];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10013A6C0;
  v13[3] = &unk_10041E360;
  int8x16_t v12 = *(int8x16_t *)(a1 + 32);
  id v11 = (id)v12.i64[0];
  int8x16_t v14 = vextq_s8(v12, v12, 8uLL);
  +[MRDSendCommandToOutputDevicesRequest sendCommand:uint64 withOptions:v3 toNewEndpointContainingOutputDeviceUIDs:v4 playerPath:v5 timeout:v10 details:v13 completion:v6];
}

void sub_10013A6C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) hostedRoutingService];
  id v8 = [v7 hostedRoutingController];
  id v9 = [v8 availableDistantEndpoints];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10013A838;
  v18[3] = &unk_10041E280;
  id v19 = v5;
  id v10 = v5;
  id v11 = objc_msgSend(v9, "msv_firstWhere:", v18);

  int8x16_t v12 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10013A89C;
  v15[3] = &unk_100415DF0;
  id v16 = v6;
  id v17 = v11;
  id v13 = v11;
  id v14 = v6;
  sub_100014324(v12, v15);
}

id sub_10013A838(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  uint64_t v4 = [*(id *)(a1 + 32) uniqueIdentifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10013A89C(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddCommandResultToXPCMessage();
  MRAddDistantEndpointToXPCMessage();
}

void sub_10013A990(uint64_t a1)
{
  id v2 = MRCreateStringFromXPCMessage();
  double v3 = xpc_dictionary_get_double(*(xpc_object_t *)(a1 + 32), "timeout");
  id v4 = objc_alloc((Class)MRRequestDetails);
  id v5 = (void *)MRCreateDataFromXPCMessage();
  id v6 = [v4 initWithData:v5];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10013AAA4;
  void v8[3] = &unk_10041C150;
  id v7 = *(void **)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  [v7 searchEndpointsForRoutingContextUID:v2 timeout:v6 details:v8 completion:v3];
}

void sub_10013AAA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10013AB64;
  v10[3] = &unk_100415DF0;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  sub_100014324(v7, v10);
}

void sub_10013AB64(uint64_t a1, void *a2)
{
  id v2 = a2;
  MRAddDistantEndpointToXPCMessage();
  MRAddClientErrorToXPCMessage();
}

void sub_10013AFEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v15 = [v5 debugName];

    uint64_t v16 = *(void *)(a1 + 32);
    id v8 = _MRLogForCategory();
    BOOL v17 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v25 = *(void *)(a1 + 40);
        id v11 = [*(id *)(a1 + 48) requestID];
        id v26 = *(void **)(a1 + 32);
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v36 = 138544130;
        uint64_t v37 = v25;
        __int16 v38 = 2114;
        id v39 = v11;
        __int16 v40 = 2114;
        id v41 = v26;
        __int16 v42 = 2048;
        uint64_t v43 = v27;
        uint64_t v28 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        uint64_t v29 = v8;
        uint32_t v30 = 42;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v33 = *(void *)(a1 + 40);
        id v11 = [*(id *)(a1 + 48) requestID];
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
        int v36 = 138543874;
        uint64_t v37 = v33;
        __int16 v38 = 2114;
        id v39 = v11;
        __int16 v40 = 2048;
        id v41 = v34;
        uint64_t v28 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        uint64_t v29 = v8;
        uint32_t v30 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&v36, v30);
      goto LABEL_20;
    }
    if (v16)
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) requestID];
      id v13 = [v5 debugName];
      uint64_t v19 = *(void *)(a1 + 32);
      BOOL v20 = +[NSDate date];
      [v20 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v36 = 138544386;
      uint64_t v37 = v18;
      __int16 v38 = 2114;
      id v39 = v11;
      __int16 v40 = 2112;
      id v41 = v13;
      __int16 v42 = 2114;
      uint64_t v43 = v19;
      __int16 v44 = 2048;
      uint64_t v45 = v21;
      uint64_t v22 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v23 = v8;
      uint32_t v24 = 52;
    }
    else
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v31 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) requestID];
      id v13 = [v5 debugName];
      BOOL v20 = +[NSDate date];
      [v20 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v36 = 138544130;
      uint64_t v37 = v31;
      __int16 v38 = 2114;
      id v39 = v11;
      __int16 v40 = 2112;
      id v41 = v13;
      __int16 v42 = 2048;
      uint64_t v43 = v32;
      uint64_t v22 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v23 = v8;
      uint32_t v24 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&v36, v24);

    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = _MRLogForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) requestID];
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
      int v36 = 138544386;
      uint64_t v37 = v10;
      __int16 v38 = 2114;
      id v39 = v11;
      __int16 v40 = 2114;
      id v41 = v6;
      __int16 v42 = 2114;
      uint64_t v43 = v12;
      __int16 v44 = 2048;
      uint64_t v45 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v36, 0x34u);
LABEL_20:
    }
  }
  else if (v9)
  {
    sub_10032E220();
  }
LABEL_21:

  uint64_t v35 = +[NSNotificationCenter defaultCenter];
  [v35 removeObserver:*(void *)(a1 + 64)];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

uint64_t sub_10013B414(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10013B434(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 160) hostedRoutingController];
  double v3 = [v2 availableExternalDevices];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10013B5BC;
  v12[3] = &unk_10041E388;
  id v13 = *(id *)(a1 + 40);
  id v4 = objc_msgSend(v3, "msv_firstWhere:", v12);
  id v5 = [v4 second];
  id v6 = [v5 endpoint];

  if (v6 && [*(id *)(a1 + 48) disarm])
  {
    id v7 = objc_alloc((Class)MRAVDistantEndpoint);
    id v8 = [v6 descriptor];
    BOOL v9 = [v4 second];
    uint64_t v10 = [v9 externalDeviceListenerEndpoint];
    id v11 = [v7 initWithDescriptor:v8 xpcEndpointListener:v10];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

id sub_10013B5BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 externalDevice];
  id v5 = [v4 deviceInfo];
  id v6 = [v5 routingContextID];
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  return v7;
}

uint64_t sub_10013B628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_10013B974(id a1, MRDMediaRemoteClient *a2, NSDictionary *a3, id *a4)
{
  return -[MRDMediaRemoteClient isEntitledFor:](a2, "isEntitledFor:", 0x10000, a4);
}

void sub_10013C460(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) name];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] Custom authorization callback returned for route %{public}@", (uint8_t *)&v6, 0xCu);
  }
  [*(id *)(a1 + 40) respondWithAuthorizationToken:v3];
}

void sub_10013C53C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 buttonIdentifier];
  if (!v4 || v4 == (id)2)
  {
    v13[0] = &off_100438298;
    v12[0] = kMRMediaRemoteRouteStatusUserInfoKey;
    v12[1] = kMRMediaRemoteRouteDescriptionUserInfoKey;
    id v8 = [a1[5] dictionary];
    v13[1] = v8;
    BOOL v9 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
    uint64_t v10 = +[NSMutableDictionary dictionaryWithDictionary:v9];

    [a1[4] cancel];
    id v11 = +[MRDMediaRemoteServer server];
    [v11 postClientNotificationNamed:kMRMediaRemoteRouteStatusDidChangeNotification userInfo:v10];
  }
  else if (v4 == (id)1)
  {
    id v5 = a1[4];
    int v6 = [v3 textFieldValues];
    id v7 = [v6 firstObject];
    [v5 respondWithAuthorizationToken:v7];
  }
  [a1[6] setActivePasswordDialog:0];
}

id sub_10013C8EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reevaluateAirplayActive];
}

id sub_10013C8F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reevaluateAirplayActive];
}

void sub_10013D684(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013D6B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10013D6C4(uint64_t a1)
{
}

void sub_10013D6CC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  id v5 = _MRLogForCategory();
  int v6 = v5;
  if (!v3)
  {
    BOOL v12 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v14 = (void *)a1[4];
      uint64_t v13 = a1[5];
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:a1[6]];
      int v22 = 138544130;
      CFStringRef v23 = @"Dialog.handleClusterErrorStatus";
      __int16 v24 = 2114;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      id v27 = v14;
      __int16 v28 = 2048;
      uint64_t v29 = v15;
      uint64_t v16 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      BOOL v17 = v6;
      uint32_t v18 = 42;
    }
    else
    {
      if (!v12) {
        goto LABEL_14;
      }
      uint64_t v19 = a1[5];
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:a1[6]];
      int v22 = 138543874;
      CFStringRef v23 = @"Dialog.handleClusterErrorStatus";
      __int16 v24 = 2114;
      uint64_t v25 = v19;
      __int16 v26 = 2048;
      id v27 = v20;
      uint64_t v16 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      BOOL v17 = v6;
      uint32_t v18 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v22, v18);
    goto LABEL_13;
  }
  BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v7)
    {
      uint64_t v9 = a1[4];
      uint64_t v8 = a1[5];
      uint64_t v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:a1[6]];
      int v22 = 138544386;
      CFStringRef v23 = @"Dialog.handleClusterErrorStatus";
      __int16 v24 = 2114;
      uint64_t v25 = v8;
      __int16 v26 = 2114;
      id v27 = v3;
      __int16 v28 = 2114;
      uint64_t v29 = v9;
      __int16 v30 = 2048;
      uint64_t v31 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v22, 0x34u);
LABEL_13:
    }
  }
  else if (v7)
  {
    sub_100330180();
  }
LABEL_14:

  [*(id *)(*(void *)(a1[7] + 8) + 40) dismiss];
  uint64_t v21 = +[NSNotificationCenter defaultCenter];
  [v21 removeObserver:*(void *)(*(void *)(a1[8] + 8) + 40)];
}

uint64_t sub_10013D948(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10013D958(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_10013D9BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10013D9D0(uint64_t a1, void *a2)
{
  id v3 = [a2 buttonIdentifier];
  if (v3 == (id)1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0;
  }
  else if (v3 == (id)2)
  {
    [*(id *)(a1 + 32) _launchTVClusterSettings];
  }
  int v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_10013DB04(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138543362;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AVRoutingServer] Failed to open TVSettings: %{public}@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_10013E8F4(uint64_t a1, void *a2)
{
  id v9 = a2;
  if ([v9 buttonIdentifier] == (id)1)
  {
    id v3 = [v9 textFieldValues];
    int v4 = [v3 firstObject];

    id v5 = [v4 length];
    int v6 = *(id **)(a1 + 32);
    if (v5)
    {
      BOOL v7 = [*(id *)(a1 + 40) dictionary];
      unsigned int v8 = [v6 setPickedRoute:v7 withPassword:v4 options:*(unsigned int *)(a1 + 48)];

      if (v8) {
        [*(id *)(a1 + 32) _storePassword:v4 forRoute:*(void *)(a1 + 40)];
      }
    }
    else
    {
      [v6[19] userCancelledPickingRoute:*(void *)(a1 + 40)];
      notify_post("com.apple.mediaplayer.airPlayPasswordAlertDidCancel");
    }
  }
  [*(id *)(a1 + 32) setActivePasswordDialog:0];
}

void sub_10013EE70(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, [a3 code]);
}

id sub_10013F2B8(uint64_t a1, void *a2)
{
  id v3 = [a2 uid];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10013F808(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013F838(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  id v4 = _MRLogForCategory();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100330330(a1, v2, v5);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = [*(id *)(a1 + 32) requestID];
    BOOL v7 = +[NSDate date];
    [v7 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v10 = 138543874;
    CFStringRef v11 = @"removeOutputDeviceUIDsFromParentGroup";
    __int16 v12 = 2114;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v10, 0x20u);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)v2 + 8) + 40));
  }
  return result;
}

void sub_10013F998(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10013F9F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3 && !MRMediaRemoteErrorCodeIsInformational())
  {
    id v8 = [objc_alloc((Class)NSError) initWithMRError:a3];
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
    int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_10013FAFC;
    v11[3] = &unk_1004159E0;
    uint64_t v13 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    [v5 removeOutputDeviceFromParentGroup:v6 queue:v7 completion:v11];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10013FAFC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_10013FB5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10013FED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(v3, "containsUID:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9))
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

BOOL sub_100140098(id a1, MRDMediaRemoteClient *a2)
{
  return [(MRDMediaRemoteClient *)a2 declaringAirplayActive];
}

Class sub_100140264()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  Class result = objc_getClass("AVOutputDeviceAuthorizationSession");
  qword_10047E2F8 = (uint64_t)result;
  off_100477888 = (uint64_t (*)())sub_1001402C8;
  return result;
}

id sub_1001402C8()
{
  return (id)qword_10047E2F8;
}

void sub_1001402D4(id a1)
{
  qword_10047E308 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_100140300()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputDeviceAuthorizationTokenTypePIN");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2A8, *v0);
  }
  off_100477890 = (uint64_t (*)())sub_100140390;
  uint64_t v1 = (void *)qword_10047E2A8;

  return v1;
}

id sub_100140390()
{
  return (id)qword_10047E2A8;
}

id sub_10014039C()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextManagerOutputDeviceKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2B8, *v0);
  }
  off_100477898 = (uint64_t (*)())sub_10014042C;
  uint64_t v1 = (void *)qword_10047E2B8;

  return v1;
}

id sub_10014042C()
{
  return (id)qword_10047E2B8;
}

id sub_100140438()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextManagerFailureReasonKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2C0, *v0);
  }
  off_1004778A0 = (uint64_t (*)())sub_1001404C8;
  uint64_t v1 = (void *)qword_10047E2C0;

  return v1;
}

id sub_1001404C8()
{
  return (id)qword_10047E2C0;
}

id sub_1001404D4()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextManagerDidFailToConnectToOutputDeviceUserInfoKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2F0, *v0);
  }
  off_1004778A8 = (uint64_t (*)())sub_100140564;
  uint64_t v1 = (void *)qword_10047E2F0;

  return v1;
}

id sub_100140564()
{
  return (id)qword_10047E2F0;
}

id sub_100140570()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextDeviceConnectionFailureReasonDeviceInUse");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2C8, *v0);
  }
  off_1004778B0 = (uint64_t (*)())sub_100140600;
  uint64_t v1 = (void *)qword_10047E2C8;

  return v1;
}

id sub_100140600()
{
  return (id)qword_10047E2C8;
}

id sub_10014060C()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2D0, *v0);
  }
  off_1004778B8 = (uint64_t (*)())sub_10014069C;
  uint64_t v1 = (void *)qword_10047E2D0;

  return v1;
}

id sub_10014069C()
{
  return (id)qword_10047E2D0;
}

id sub_1001406A8()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2D8, *v0);
  }
  off_1004778C0 = (uint64_t (*)())sub_100140738;
  uint64_t v1 = (void *)qword_10047E2D8;

  return v1;
}

id sub_100140738()
{
  return (id)qword_10047E2D8;
}

id sub_100140744()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextDeviceConnectionFailureReasonInfraRelayFailedMultiDFSNetwork");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2E8, *v0);
  }
  off_1004778C8 = (uint64_t (*)())sub_1001407D4;
  uint64_t v1 = (void *)qword_10047E2E8;

  return v1;
}

id sub_1001407D4()
{
  return (id)qword_10047E2E8;
}

id sub_1001407E0()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextDeviceConnectionFailureReasonInfraRelayFailed2GHzNetwork");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2E0, *v0);
  }
  off_1004778D0 = (uint64_t (*)())sub_100140870;
  uint64_t v1 = (void *)qword_10047E2E0;

  return v1;
}

id sub_100140870()
{
  return (id)qword_10047E2E0;
}

id sub_10014087C()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E308, "AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E2B0, *v0);
  }
  off_1004778D8 = (uint64_t (*)())sub_10014090C;
  uint64_t v1 = (void *)qword_10047E2B0;

  return v1;
}

id sub_10014090C()
{
  return (id)qword_10047E2B0;
}

Class sub_100140918()
{
  if (qword_10047E300 != -1) {
    dispatch_once(&qword_10047E300, &stru_10041E548);
  }
  Class result = objc_getClass("AVOutputContextManager");
  qword_10047E310 = (uint64_t)result;
  off_1004778E0 = (uint64_t (*)())sub_10014097C;
  return result;
}

id sub_10014097C()
{
  return (id)qword_10047E310;
}

void sub_100140988(id a1)
{
  qword_10047E320 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MediaControlReceiver.framework/MediaControlReceiver", 2);
}

uint64_t sub_1001409B4(uint64_t a1, uint64_t a2)
{
  if (qword_10047E318 != -1) {
    dispatch_once(&qword_10047E318, &stru_10041E568);
  }
  id v4 = (uint64_t (*)())dlsym((void *)qword_10047E320, "APReceiverMediaRemoteXPCClient_CopyProperty");
  off_1004779A8[0] = v4;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void sub_100140A5C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

id sub_100140BA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initialize];
}

void sub_100140F34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100141030(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_reevaluate");
}

void sub_100141128(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) lastFetchAttemptToken];

  if (v3 == v4) {
    [*(id *)(a1 + 40) setActiveEndpoint:v5];
  }
}

id sub_10014129C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_onWorkerQueue_reevaluateWithEndpoint:deviceInfo:previousDeviceInfo:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_100141904(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setDiscoveryMode:0];
  if (!v5)
  {
    id v5 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  }
  uint64_t v7 = _MRLogForCategory();
  id v8 = v7;
  if (v6 || !v5)
  {
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10032B298((void *)a1, (uint64_t)v6, v8);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 48);
      long long v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v26 = v16;
      __int16 v27 = 2114;
      uint64_t v28 = v17;
      __int16 v29 = 2048;
      id v30 = v18;
      uint64_t v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      __int16 v14 = v8;
      uint32_t v15 = 32;
      goto LABEL_12;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    long long v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v26 = v9;
    __int16 v27 = 2114;
    uint64_t v28 = v10;
    __int16 v29 = 2112;
    id v30 = v5;
    __int16 v31 = 2048;
    uint64_t v32 = v12;
    uint64_t v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    __int16 v14 = v8;
    uint32_t v15 = 42;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100141B6C;
  v22[3] = &unk_100417A50;
  uint64_t v19 = *(NSObject **)(a1 + 64);
  id v20 = *(id *)(a1 + 72);
  id v23 = v5;
  id v24 = v20;
  id v21 = v5;
  dispatch_async(v19, v22);
}

uint64_t sub_100141B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100141B80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [objc_alloc((Class)MRRequestDetails) initWithName:*(void *)(a1 + 32) requestID:*(void *)(a1 + 40) reason:*(void *)(a1 + 32)];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_100141C8C;
    v5[3] = &unk_1004189B0;
    id v7 = *(id *)(a1 + 48);
    id v6 = v3;
    [v6 connectToExternalDeviceWithOptions:0 details:v4 completion:v5];
  }
  else
  {
    id v4 = [objc_alloc((Class)NSError) initWithMRError:24];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100141C8C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

void sub_1001420A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001421FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100142274(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001423D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100142448(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001425A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001426A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001427CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100142F0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100143300(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014340C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014368C(uint64_t a1)
{
}

uint64_t sub_100143798(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001437A8(uint64_t a1)
{
}

void sub_1001437B0(uint64_t a1)
{
}

void sub_100144014(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100144F90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001457B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100145890()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E350, *v0);
  }
  off_1004779B0[0] = (uint64_t (*)())sub_100145920;
  uint64_t v1 = (void *)qword_10047E350;

  return v1;
}

id sub_100145920()
{
  return (id)qword_10047E350;
}

void sub_10014592C(id a1)
{
  qword_10047E368 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

Class sub_100145958()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  Class result = objc_getClass("AVAudioSession");
  qword_10047E370 = (uint64_t)result;
  off_1004779B8[0] = (uint64_t (*)())sub_1001459BC;
  return result;
}

id sub_1001459BC()
{
  return (id)qword_10047E370;
}

id sub_1001459C8()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionSourceContentCurrentlyPlayingFormatKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E328, *v0);
  }
  off_1004779C0[0] = (uint64_t (*)())sub_100145A58;
  uint64_t v1 = (void *)qword_10047E328;

  return v1;
}

id sub_100145A58()
{
  return (id)qword_10047E328;
}

id sub_100145A64()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionSourceContentCurrentlyPlayingChannelCountKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E330, *v0);
  }
  off_1004779C8[0] = (uint64_t (*)())sub_100145AF4;
  uint64_t v1 = (void *)qword_10047E330;

  return v1;
}

id sub_100145AF4()
{
  return (id)qword_10047E330;
}

id sub_100145B00()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionSourceContentCurrentlyPlayingIsEligibleForSpatializationKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E340, *v0);
  }
  off_1004779D0[0] = (uint64_t (*)())sub_100145B90;
  uint64_t v1 = (void *)qword_10047E340;

  return v1;
}

id sub_100145B90()
{
  return (id)qword_10047E340;
}

id sub_100145B9C()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionSourceContentCurrentlyPlayingIsSpatializedKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E348, *v0);
  }
  off_1004779D8[0] = (uint64_t (*)())sub_100145C2C;
  uint64_t v1 = (void *)qword_10047E348;

  return v1;
}

id sub_100145C2C()
{
  return (id)qword_10047E348;
}

id sub_100145C38()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionSourceContentBestAvailableContentTypeKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E338, *v0);
  }
  off_1004779E0[0] = (uint64_t (*)())sub_100145CC8;
  uint64_t v1 = (void *)qword_10047E338;

  return v1;
}

id sub_100145CC8()
{
  return (id)qword_10047E338;
}

id sub_100145CD4()
{
  if (qword_10047E360 != -1) {
    dispatch_once(&qword_10047E360, &stru_10041E5F8);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E368, "AVAudioSessionRenderingModeChangeNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E358, *v0);
  }
  off_1004779E8[0] = (uint64_t (*)())sub_100145D64;
  uint64_t v1 = (void *)qword_10047E358;

  return v1;
}

id sub_100145D64()
{
  return (id)qword_10047E358;
}

void sub_1001460F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointTypeUserInfoKey];
  unsigned int v4 = [v3 intValue];

  if (v4 == 1)
  {
    id v7 = +[MRUserSettings currentSettings];
    unsigned int v8 = [v7 sendProactivePFSQOnProactiveASEChange];

    if (!v8) {
      return;
    }
LABEL_6:
    uint64_t v9 = [*(id *)(a1 + 40) systemMediaAppPlayerPathForNotification:*(void *)(a1 + 32)];
    uint64_t active = (void *)MRMediaRemoteActiveEndpointTypeCopyDescription();
    long long v11 = +[NSString stringWithFormat:@"%@ ASE Change", active];

    uint64_t v12 = [*(id *)(a1 + 32) userInfo];
    uint64_t v13 = [v12 objectForKeyedSubscript:kMRMediaRemoteActiveEndpointReasonUserInfoKey];

    __int16 v14 = _MRLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      __int16 v27 = v11;
      __int16 v28 = 2112;
      __int16 v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[MRDPPFSQS] %@ - Reported reason: %@", buf, 0x16u);
    }

    uint64_t v15 = [v9 origin];
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      uint64_t v17 = [v9 origin];
      if ([v17 isLocal])
      {
      }
      else
      {
        unsigned int v18 = [v9 isSystemMediaApplication];

        if (v18)
        {
          uint64_t v19 = _MRLogForCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            __int16 v27 = v9;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[MRDPPFSQS] Will send PPFSQ to <%@>", buf, 0xCu);
          }

          objc_msgSend(*(id *)(a1 + 40), "_onQueue_sendPrepareForSetQueueTo:reason:type:", v9, v11, 2);
          goto LABEL_20;
        }
      }
    }
    id v20 = [*(id *)(a1 + 32) userInfo];
    id v21 = [v20 objectForKeyedSubscript:kMRAVEndpointOutputDeviceIdentifierUserInfoKey];

    int v22 = _MRLogForCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = [v9 origin];
      unsigned int v24 = [v23 isLocal];
      CFStringRef v25 = @"NO";
      *(_DWORD *)long long buf = 138412802;
      __int16 v27 = v21;
      __int16 v28 = 2112;
      if (v24) {
        CFStringRef v25 = @"YES";
      }
      __int16 v29 = v9;
      __int16 v30 = 2112;
      CFStringRef v31 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "[MRDPPFSQS] Won't send PFSQ for ASE change - endpoint: <%@>, playerPath:<%@>, isLocal:<%@>", buf, 0x20u);
    }
LABEL_20:

    return;
  }
  if (!v4)
  {
    id v5 = +[MRUserSettings currentSettings];
    unsigned __int8 v6 = [v5 sendProactivePFSQOnUserSelectedASEChange];

    if (v6) {
      goto LABEL_6;
    }
  }
}

void sub_1001465FC(uint64_t a1)
{
  id v7 = +[MRDMediaRemoteServer server];
  if ([v7 isFirstLaunchAfterBoot])
  {
    uint64_t v2 = +[MRUserSettings currentSettings];
    unsigned int v3 = [v2 sendProactivePFSQAfterBoot];

    if (v3)
    {
      if (MSVDeviceIsAudioAccessory())
      {
        uint64_t v4 = *(void *)(a1 + 32);
        id v5 = *(void **)(v4 + 8);
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_100146748;
        v9[3] = &unk_100415CC8;
        void v9[4] = v4;
        sub_10016A738(v5, v9);
      }
      else
      {
        unsigned __int8 v6 = _MRLogForCategory();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[MRDPPFSQS] First MRD launch after boot, device is not an AudioAccessory", buf, 2u);
        }
      }
    }
  }
  else
  {
  }
}

void sub_100146748(uint64_t a1)
{
  uint64_t v2 = kMRMediaRemoteSystemMediaApplicationDisplayIdentifier;
  id v3 = objc_alloc((Class)MRPlayerPath);
  uint64_t v4 = +[MROrigin localOrigin];
  id v5 = [objc_alloc((Class)MRClient) initWithBundleIdentifier:v2];
  id v9 = [v3 initWithOrigin:v4 client:v5 player:0];

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_sendPrepareForSetQueueTo:reason:type:", v9, @"AudioAccessory Boot", 1);
  id v6 = objc_alloc((Class)MRPlayerPath);
  id v7 = +[MROrigin localOrigin];
  id v8 = [v6 initWithOrigin:v7 bundleIdentifier:kMRMediaRemoteSystemPodcastApplicationDisplayIdentifier player:0];

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_sendPrepareForSetQueueTo:reason:type:", v8, @"AudioAccessory Boot", 1);
}

void sub_100146AB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];
  if (v4)
  {
  }
  else
  {
    uint64_t v10 = [v3 resultStatuses];

    if (v10)
    {
      long long v11 = [v3 playerPath];

      id v8 = _MRLogForCategory();
      BOOL v12 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (!v12) {
          goto LABEL_23;
        }
        uint64_t v13 = *(void *)(a1 + 32);
        __int16 v14 = [v3 resultStatuses];
        uint64_t v15 = [v3 playerPath];
        uint64_t v16 = +[NSDate date];
        [v16 timeIntervalSinceDate:*(void *)(a1 + 40)];
        int v26 = 138544386;
        CFStringRef v27 = @"proactivePrepareForSetQueue";
        __int16 v28 = 2114;
        uint64_t v29 = v13;
        __int16 v30 = 2112;
        CFStringRef v31 = v14;
        __int16 v32 = 2114;
        uint64_t v33 = v15;
        __int16 v34 = 2048;
        uint64_t v35 = v17;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds", (uint8_t *)&v26, 0x34u);

        goto LABEL_21;
      }
      if (!v12) {
        goto LABEL_23;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      __int16 v14 = [v3 resultStatuses];
      uint64_t v15 = +[NSDate date];
      [v15 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v26 = 138544130;
      CFStringRef v27 = @"proactivePrepareForSetQueue";
      __int16 v28 = 2114;
      uint64_t v29 = v24;
      __int16 v30 = 2112;
      CFStringRef v31 = v14;
      __int16 v32 = 2048;
      uint64_t v33 = v25;
      id v21 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v26, 0x2Au);
LABEL_21:

      goto LABEL_22;
    }
  }
  id v5 = [v3 error];

  id v6 = [v3 playerPath];

  id v7 = _MRLogForCategory();
  id v8 = v7;
  if (!v5)
  {
    BOOL v18 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (!v6)
    {
      if (!v18) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      __int16 v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v26 = 138543874;
      CFStringRef v27 = @"proactivePrepareForSetQueue";
      __int16 v28 = 2114;
      uint64_t v29 = v22;
      __int16 v30 = 2048;
      CFStringRef v31 = v23;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v26, 0x20u);
LABEL_22:

      goto LABEL_23;
    }
    if (!v18) {
      goto LABEL_23;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    __int16 v14 = [v3 playerPath];
    uint64_t v15 = +[NSDate date];
    [v15 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v26 = 138544130;
    CFStringRef v27 = @"proactivePrepareForSetQueue";
    __int16 v28 = 2114;
    uint64_t v29 = v19;
    __int16 v30 = 2114;
    CFStringRef v31 = v14;
    __int16 v32 = 2048;
    uint64_t v33 = v20;
    id v21 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
    goto LABEL_20;
  }
  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v6)
  {
    if (v9) {
      sub_10033052C(a1, v3, v8);
    }
  }
  else if (v9)
  {
    sub_100330430(a1, v3, v8);
  }
LABEL_23:
}

void sub_10014701C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10014703C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _frontmostApplicationDidChange:v5];
  }
}

id sub_1001470A0(uint64_t a1)
{
  [*(id *)(a1 + 32) _reloadCachedNowPlayingClients];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _reloadCachedNowPlayingItem];
}

void sub_1001473B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001473C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001473D8(uint64_t a1)
{
}

void sub_1001473E0(uint64_t a1)
{
}

id sub_10014765C(uint64_t a1)
{
  [*(id *)(a1 + 32) setCachedNowPlayingClients:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _notifyDelegateNowPlayingApplicationDidChange];
}

id sub_100147740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = MRPlaybackQueueCopyContentItems();
    id v5 = v4;
    if (v4)
    {
      id v6 = [v4 firstObject];
      [*(id *)(a1 + 32) setCachedNowPlayingContentItem:v6];
    }
LABEL_7:

    return [*(id *)(a1 + 32) _notifyDelegateNowPlayingPlaybackStateDidChange];
  }
  if (a3)
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138543362;
      uint64_t v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[iOSSim Data Source] Failed to load playback queue: %{public}@", (uint8_t *)&v9, 0xCu);
    }
    goto LABEL_7;
  }
  return [*(id *)(a1 + 32) _notifyDelegateNowPlayingPlaybackStateDidChange];
}

void sub_1001478AC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) observersForSelector:"nowPlayingDataSourceNowPlayingApplicationDidChange:"];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) nowPlayingDataSourceNowPlayingApplicationDidChange:*(void *)(a1 + 32)];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100147A20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) observersForSelector:"nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:"];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:*(void *)(a1 + 32)];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100147DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100147E28(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100148950(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  CFStringRef v6 = @"MRDApplicationConnectionInvalidationReasonKey";
  uint64_t v7 = v3;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v2 postNotificationName:@"MRDApplicationConnectionDidInvalidateNotification" object:v4 userInfo:v5];
}

void sub_100149264(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  id v6 = a1;
  uint64_t v7 = +[NSDate date];
  long long v8 = +[NSUUID UUID];
  long long v9 = [v8 UUIDString];

  switch(a3)
  {
    case -536870288:
      CFStringRef v10 = @"CanSleep";
      break;
    case -536870112:
      CFStringRef v10 = @"WillPowerOn";
      break;
    case -536870272:
      CFStringRef v10 = @"WillSleep";
      break;
    default:
      CFStringRef v10 = 0;
      goto LABEL_11;
  }
  long long v11 = _MRLogForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    CFStringRef v24 = v10;
    __int16 v25 = 2114;
    int v26 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "POWER: Did recieve power callback %{public}@-%{public}@", buf, 0x16u);
  }

LABEL_11:
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100149664;
  v17[3] = &unk_10041E658;
  BOOL v18 = (__CFString *)v10;
  id v19 = v9;
  id v20 = v7;
  id v12 = v6;
  id v21 = v12;
  uint64_t v22 = a4;
  id v13 = v7;
  id v14 = v9;
  uint64_t v15 = objc_retainBlock(v17);
  uint64_t v16 = v15;
  switch(a3)
  {
    case -536870112:
      [v12 notifyDelegateOfWake];
      break;
    case -536870272:
      ((void (*)(void *))v15[2])(v15);
      break;
    case -536870288:
      [v12 notifyDelegateOfSleepWithCompletion:v15];
      break;
  }
}

void sub_100149664(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100149734;
  block[3] = &unk_10041E658;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v2 = *(id *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  id v8 = v2;
  uint64_t v9 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_100149734(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = _MRLogForCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = +[NSDate date];
      [v5 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v8 = 138543874;
      uint64_t v9 = v3;
      __int16 v10 = 2114;
      uint64_t v11 = v4;
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "POWER: Responding to power callback %{public}@-%{public}@ in %lf seconds", (uint8_t *)&v8, 0x20u);
    }
  }
  return IOAllowPowerChange((io_connect_t)[*(id *)(a1 + 56) connection], *(void *)(a1 + 64));
}

void sub_100149A04(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_1003307F4((uint64_t)v5, v6);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setFirewall:a2];
    id v7 = [*(id *)(a1 + 32) allowedDestinations];

    if (v7)
    {
      int v8 = *(void **)(a1 + 32);
      uint64_t v9 = [v8 allowedDestinations];
      [v8 _updateAllowedDestinations:v9];
    }
  }
}

id sub_100149F84(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAllowedDestinations:*(void *)(a1 + 40)];
}

id sub_10014A10C(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)IDSURI) initWithPrefixedURI:v2];

  if (v3) {
    id v4 = [objc_alloc((Class)IDSFirewallEntry) initWithURI:v3];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

void sub_10014A18C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_10033086C((uint64_t)v3, v4);
    }

    id v5 = [*(id *)(a1 + 32) errorHandler];
    ((void (**)(void, id))v5)[2](v5, v3);
  }
}

void sub_10014A5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014A5D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5 && ([v5 isValid] & 1) != 0)
    {
      int v8 = [MRDTaskAssertion alloc];
      id v9 = [v5 pid];
      __int16 v10 = [v5 bundleIdentifier];
      uint64_t v11 = [(MRDTaskAssertion *)v8 initWithType:4 pid:v9 bundleID:v10 name:@"NowPlayingCap"];

      [(MRDTaskAssertion *)v11 invalidateInDuration:10.0];
      if ([WeakRetained options]) {
        objc_msgSend(WeakRetained, "_monitorForTermination:", objc_msgSend(v5, "pid"));
      }
      __int16 v12 = _MRLogForCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v16 = 138543362;
        uint64_t v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Launched %{public}@", (uint8_t *)&v16, 0xCu);
      }
    }
    else
    {
      id v14 = _MRLogForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        int v16 = 138543618;
        uint64_t v17 = v15;
        __int16 v18 = 2114;
        id v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to open %{public}@: %{public}@", (uint8_t *)&v16, 0x16u);
      }

      [WeakRetained _cleanup];
      [WeakRetained _submitLaunchFailure];
    }
  }
}

void sub_10014A974(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Suspended %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10014ADF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014AE20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v6 = _MRLogForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [WeakRetained bundleIdentifier];
      int v8 = [v4 status];
      id v9 = [v8 error];
      int v14 = 138543618;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Process %{public}@ did terminate: %{public}@", (uint8_t *)&v14, 0x16u);
    }
    [WeakRetained _cleanup];
    __int16 v10 = [v4 status];
    objc_msgSend(WeakRetained, "_submitTerminationEvent:", objc_msgSend(v10, "code"));

    uint64_t v11 = [v4 status];
    if ([v11 isCrash])
    {

LABEL_7:
      [WeakRetained _relaunch];
      goto LABEL_8;
    }
    __int16 v12 = [v4 status];
    unsigned int v13 = [v12 isJetsam];

    if (v13) {
      goto LABEL_7;
    }
  }
LABEL_8:
}

void sub_10014B144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014B170(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _nowPlayingPlaybackStateDidChange:v5];
  }
}

void sub_10014B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10014B60C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v3 = +[MRDMediaRemoteServer server];
    id v4 = [v3 nowPlayingServer];

    id v5 = [v4 queryExistingPlayerPath:*(void *)(a1 + 32)];
    id v6 = [v5 playerClient];
    unsigned int v7 = [v6 playbackState];

    if (*(_DWORD *)(a1 + 56) != v7)
    {
      +[MSVAutoBugCapture snapshotWithDomain:@"MediaRemote" type:@"NowPlayingLauncher" subType:@"PlaybackStateDidChange" context:@"Notification and server states diverge" triggerThresholdValues:*(void *)(a1 + 40) events:0 completion:0];
      int v8 = _MRLogForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = [WeakRetained bundleIdentifier];
        int v10 = *(_DWORD *)(a1 + 56);
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138544386;
        int v14 = v9;
        __int16 v15 = 2114;
        uint64_t v16 = v11;
        __int16 v17 = 1026;
        int v18 = v10;
        __int16 v19 = 1026;
        unsigned int v20 = v7;
        __int16 v21 = 2114;
        uint64_t v22 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@ received PlaybackStateDidChangeNotification (%{public}@) with playback state %{public}d, expected %{public}d for %{public}@.", buf, 0x2Cu);
      }
    }
  }
}

id sub_10014B860(uint64_t a1)
{
  v4[0] = @"type";
  v4[1] = @"bundleID";
  uint64_t v1 = *(void *)(a1 + 32);
  v5[0] = &off_1004382B0;
  v5[1] = v1;
  void v4[2] = @"error";
  void v5[2] = &__kCFBooleanTrue;
  id v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];

  return v2;
}

id sub_10014B9B4(uint64_t a1)
{
  v5[0] = @"type";
  v5[1] = @"bundleID";
  uint64_t v1 = *(void *)(a1 + 32);
  v6[0] = &off_1004382C8;
  v6[1] = v1;
  void v5[2] = @"relaunching";
  id v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  void v6[2] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3];

  return v3;
}

id sub_10014BB2C(uint64_t a1)
{
  v6[0] = @"type";
  v6[1] = @"bundleID";
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  v7[0] = &off_1004382E0;
  v7[1] = v2;
  void v6[2] = @"exitCode";
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:v1];
  v7[2] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];

  return v4;
}

void sub_10014BDEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014BFA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014BFCC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:*(void *)(a1 + 32)];
}

void sub_10014C094(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014C178(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10014C18C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 outputDeviceUID];
  id v5 = [v4 isEqual:*(void *)(a1 + 32)];

  return v5;
}

void sub_10014C340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10014C354(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10014C428;
  v10[3] = &qword_1004199E0;
  id v8 = v5;
  id v11 = v8;
  id v9 = objc_msgSend(v7, "msv_firstWhere:", v10);
  if (!v9) {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v8];
  }
}

id sub_10014C428(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10014C46C(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = [v5 externalDevice];
  if (([v6 disconnectWhenUndiscoverable] & 1) == 0)
  {
    unsigned int v7 = [v5 externalDevice];
    if ([v7 connectionState] != 3)
    {
      uint64_t v12 = [v5 endpoint];
      unsigned int v13 = [v12 groupLeader];
      id v14 = [v13 transportType];

      if (v14 != (id)6) {
        goto LABEL_8;
      }
      goto LABEL_5;
    }
  }
LABEL_5:
  id v8 = [objc_alloc((Class)NSError) initWithMRError:24 description:@"undiscoverable"];
  id v9 = [v5 externalDevice];
  unsigned int v10 = [v9 disconnectWhenUndiscoverable];

  if (v10)
  {
    id v11 = [v5 externalDevice];
    [v11 disconnect:v8];
  }
  [*(id *)(a1 + 32) _removeExternalDeviceWithEndpointIdentifier:v15 error:v8];
  [*(id *)(a1 + 40) addObject:v5];

LABEL_8:
}

void sub_10014C760(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:*(void *)(a1 + 32)];
}

void sub_10014C970(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [v6 outputDeviceUID];
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    id v9 = MRLogCategoryDiscovery();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138543874;
      id v13 = v6;
      __int16 v14 = 2114;
      uint64_t v15 = v10;
      __int16 v16 = 2114;
      uint64_t v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@", (uint8_t *)&v12, 0x20u);
    }

    [*(id *)(a1 + 48) addObject:v5];
  }
}

void sub_10014CB88(id a1)
{
  id v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_UTILITY, 0);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.HostedExternalDeviceManager.graveYardQueue", v1);
  uint64_t v3 = (void *)qword_10047E380;
  qword_10047E380 = (uint64_t)v2;
}

void sub_10014CC0C(uint64_t a1)
{
  obuint64_t j = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(*(void *)(a1 + 32) + 8) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  objc_sync_exit(obj);
}

void sub_10014CC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10014CE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_10014CE54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014CE64(uint64_t a1)
{
}

void sub_10014CE6C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v10 = a2;
  unsigned int v8 = [a3 externalDevice];
  id v9 = *(void **)(a1 + 32);

  if (v8 == v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

uint64_t sub_10014D13C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10014D14C(uint64_t a1)
{
}

uint64_t sub_10014D154(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_10014D290(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10014D3D0(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        unsigned int v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v7, "deviceID", (void)v8) == *(_DWORD *)(a1 + 48))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v7);
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_10014D58C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        long long v9 = objc_msgSend(v8, "owningClient", (void)v11);
        long long v10 = *(void **)(a1 + 40);

        if (v9 == v10) {
          [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v8];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
}

void sub_10014D75C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      unsigned int v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) == *(void *)(a1 + 40)) {
          [*(id *)(*(void *)(a1 + 32) + 8) removeObject:(void)v8];
        }
        unsigned int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

id sub_10014DA28(uint64_t a1)
{
  [*(id *)(a1 + 32) setRecordingEndpointClients:*(void *)(*(void *)(a1 + 40) + 8)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 16);

  return _[v2 setRegisteredVirtualAudioDevices:v3];
}

void sub_10014DB64(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        unsigned int v7 = *(void **)(a1 + 40);
        long long v8 = objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "data", (void)v9);
        [v7 addObject:v8];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

id sub_10014DF74(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_10014E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10014E250(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v10 != v5) {
        objc_enumerationMutation(v2);
      }
      unsigned int v7 = *(void **)(*((void *)&v9 + 1) + 8 * v6);
      if (objc_msgSend(v7, "deviceID", (void)v9) == *(_DWORD *)(a1 + 48)) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }
    id v8 = v7;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;

    if (!v8) {
      return;
    }
    [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v8];
    id v2 = v8;
  }
LABEL_12:
}

id sub_10014E6C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 8) indexOfObject:*(void *)(a1 + 40)];
    if (result == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = *(void **)(*(void *)(a1 + 32) + 8);
      return [v4 addObject:v3];
    }
    if (*(unsigned char *)(a1 + 48)) {
      return result;
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);

  return [v6 removeObject:v5];
}

id sub_10014ECE8(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  id v4 = v3;
  if (*(void *)(a1 + 32)) {
    [v3 setMetadata:0];
  }

  return v4;
}

void sub_10014ED3C(id a1)
{
}

int64_t sub_10014F81C(id a1, MRDPlaybackQueueArtworkCacheSize *a2, MRDPlaybackQueueArtworkCacheSize *a3)
{
  return [(MRDPlaybackQueueArtworkCacheSize *)a3 compare:a2];
}

void sub_10014F94C(id a1, NSString *a2, NSMutableDictionary *a3, BOOL *a4)
{
  id v8 = a3;
  id v4 = [(NSMutableDictionary *)v8 allKeys];
  uint64_t v5 = objc_msgSend(v4, "msv_filter:", &stru_10041E950);
  uint64_t v6 = [v5 sortedArrayUsingComparator:&stru_10041E970];

  if ((unint64_t)[v6 count] >= 2)
  {
    unsigned int v7 = [v6 lastObject];
    [(NSMutableDictionary *)v8 setObject:0 forKeyedSubscript:v7];
  }
}

BOOL sub_10014FA08(id a1, MRDPlaybackQueueArtworkCacheSize *a2)
{
  id v2 = a2;
  id v3 = +[MRDPlaybackQueueArtworkCacheSize defaultSize];
  unsigned __int8 v4 = [(MRDPlaybackQueueArtworkCacheSize *)v2 isEqual:v3];

  return v4 ^ 1;
}

int64_t sub_10014FA6C(id a1, MRDPlaybackQueueArtworkCacheSize *a2, MRDPlaybackQueueArtworkCacheSize *a3)
{
  return [(MRDPlaybackQueueArtworkCacheSize *)a2 compare:a3];
}

void sub_10014FD40(id a1)
{
  uint64_t v1 = [[MRDPlaybackQueueArtworkCacheSize alloc] initWithW:600.0 h:600.0];
  uint64_t v2 = qword_10047E390;
  qword_10047E390 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10014FF08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initVolumeDataIfNeccessary];
}

uint64_t sub_1001502B4(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) volumeCategoryForAudioCategory:@"MediaPlayback"];
  uint64_t v2 = qword_10047E3A0;
  qword_10047E3A0 = v1;

  return _objc_release_x1(v1, v2);
}

id sub_100150F34()
{
  if (qword_10047E3B8 != -1) {
    dispatch_once(&qword_10047E3B8, &stru_10041E9B0);
  }
  dispatch_semaphore_t v0 = (id *)dlsym((void *)qword_10047E3C0, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E3B0, *v0);
  }
  off_1004779F0 = (uint64_t (*)())sub_100150FC4;
  uint64_t v1 = (void *)qword_10047E3B0;

  return v1;
}

id sub_100150FC4()
{
  return (id)qword_10047E3B0;
}

void sub_100150FD0(id a1)
{
  qword_10047E3C0 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

void sub_1001512E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v10 = MREndpointConnectionReasonUserInfoKey;
  CFStringRef v11 = @"Media.Route Biome Stream Donation";
  unsigned __int8 v4 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100151408;
  void v7[3] = &unk_1004175B8;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}

void sub_100151408(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  if (v3)
  {
    uint64_t v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      id v8 = [*(id *)(a1 + 32) activeSystemEndpoint];
      int v13 = 138413058;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      id v18 = v3;
      __int16 v19 = 2112;
      unsigned int v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[MRDRRC].AMRBD Failed to connect to active system endpoint %@<%@> with error %@. Reset to %@.", (uint8_t *)&v13, 0x2Au);
    }
  }
  else
  {
    id v9 = _MRLogForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      long long v12 = [*(id *)(a1 + 32) activeSystemEndpoint];
      int v13 = 138412802;
      uint64_t v14 = v11;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[MRDRRC].AMRBD Setting active system endpoint to %@<%@> (old value: %@)", (uint8_t *)&v13, 0x20u);
    }
    [*(id *)(a1 + 32) setActiveSystemEndpoint:*(void *)(a1 + 40)];
  }
  objc_sync_exit(v4);
}

void sub_1001515B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001517D4(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = [(MRAVOutputDevice *)v2 localizedName];
  id v4 = [(MRAVOutputDevice *)v2 uid];

  uint64_t v5 = +[NSString stringWithFormat:@"%@-%@", v3, v4];

  return v5;
}

id sub_100151868(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = [(MRAVOutputDevice *)v2 localizedName];
  id v4 = [(MRAVOutputDevice *)v2 uid];

  uint64_t v5 = +[NSString stringWithFormat:@"%@-%@", v3, v4];

  return v5;
}

void sub_100151BE4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = [v2 activeSystemEndpoint];
    id v4 = [v2 mediaRouteEventForType:1 endpoint:v3];

    id v5 = [*(id *)(a1 + 32) lastASEEvent];
    if (v5 == v4)
    {
    }
    else
    {
      uint64_t v6 = v5;
      unsigned __int8 v7 = [v5 isEqual:v4];

      if ((v7 & 1) == 0)
      {
        id v8 = BiomeLibrary();
        id v9 = [v8 Media];
        uint64_t v10 = [v9 Route];

        uint64_t v11 = [v10 source];
        [v11 sendEvent:v4];
        [*(id *)(a1 + 32) setLastASEEvent:v4];
        long long v12 = _MRLogForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 138412290;
          id v14 = v4;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[MRDRRC].AMRBD donated ASE event %@", (uint8_t *)&v13, 0xCu);
        }

LABEL_10:
        return;
      }
    }
    uint64_t v10 = _MRLogForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[MRDRRC].AMRBD dropping duplicated ASE event %@", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_10;
  }
}

BMMediaRouteOutputDevice *__cdecl sub_100151EB8(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = [(MRAVOutputDevice *)v2 deviceType];
  unsigned int v4 = [(MRAVOutputDevice *)v2 deviceSubtype];
  id v5 = [(MRAVOutputDevice *)v2 clusterType];
  if (v5)
  {
    uint64_t v6 = [(MRAVOutputDevice *)v2 clusterCompositionOutputDevices];
    unsigned __int8 v7 = objc_msgSend(v6, "msv_map:", &stru_10041EA70);
  }
  else
  {
    unsigned __int8 v7 = &__NSArray0__struct;
  }
  id v8 = objc_alloc((Class)BMMediaRouteOutputDevice);
  id v9 = [(MRAVOutputDevice *)v2 uid];
  id v10 = [v8 initWithOutputDeviceID:v9 type:v3 subType:v4 + 1 clusterType:v5 flattenedClusterLeafMembers:v7];

  return (BMMediaRouteOutputDevice *)v10;
}

BMMediaRouteOutputDeviceClusterMember *__cdecl sub_100151FB0(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_alloc((Class)BMMediaRouteOutputDeviceClusterMember);
  unsigned int v4 = [(MRAVOutputDevice *)v2 uid];
  id v5 = [(MRAVOutputDevice *)v2 deviceType];
  unsigned int v6 = [(MRAVOutputDevice *)v2 deviceSubtype];

  id v7 = [v3 initWithOutputDeviceID:v4 type:v5 subType:v6 + 1];

  return (BMMediaRouteOutputDeviceClusterMember *)v7;
}

void sub_100152704()
{
  id v0 = [objc_alloc((Class)NSString) initWithFormat:@"com.apple.mediaremote.%@.xpcTargetQueue", objc_opt_class()];
  uint64_t v1 = (const char *)[v0 UTF8String];
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create(v1, v2);
  unsigned int v4 = (void *)qword_10047E3D0;
  qword_10047E3D0 = (uint64_t)v3;

  id v9 = [objc_alloc((Class)NSString) initWithFormat:@"com.apple.mediaremote.%@.workerQueue", objc_opt_class()];
  id v5 = (const char *)[v9 UTF8String];
  unsigned int v6 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v7 = dispatch_queue_create(v5, v6);
  id v8 = (void *)qword_10047E3C8;
  qword_10047E3C8 = (uint64_t)v7;
}

void sub_100152830(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidate];
}

uint64_t sub_100152F58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100152F68(uint64_t a1)
{
}

uint64_t sub_100152F70(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_100153054(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100153188(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 192);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(MRDPairingHandler);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 192);
    *(void *)(v4 + 192) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 192);
  }
  unsigned int v6 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  objc_storeStrong(v6, v2);
}

void sub_100153314(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[130])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v3 = [v2 bundleIdentifier];
    if ([v3 isEqualToString:@"com.apple.iapd"])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    else
    {
      uint64_t v4 = [*(id *)(a1 + 32) bundleIdentifier];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 isEqualToString:@"com.apple.iap2d"];
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 130) = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1001535DC(void *a1)
{
  if (!*(void *)(a1[4] + 80))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void **)(v3 + 80);
    *(void *)(v3 + 80) = v2;
  }
  id v8 = [objc_alloc((Class)MSVPair) initWithFirst:a1[5] second:a1[6]];
  id v5 = (void *)a1[5];
  unsigned int v6 = *(void **)(a1[4] + 80);
  dispatch_queue_t v7 = [v5 requestIdentifier];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_10015374C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  uint64_t v3 = [*(id *)(a1 + 40) requestIdentifier];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 80);
    unsigned int v6 = [*(id *)(a1 + 40) requestIdentifier];
    [v5 setObject:0 forKeyedSubscript:v6];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1001539D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001539FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 80) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 80);

  return [v5 removeAllObjects];
}

void sub_100153BEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100153C08(id *a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained && a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    unsigned int v6 = *((void *)a1[4] + 2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100153D18;
    block[3] = &unk_100419598;
    void block[4] = WeakRetained;
    id v9 = &v10;
    id v8 = a1[5];
    dispatch_sync(v6, block);
    if (*((unsigned char *)v11 + 24)) {
      [a1[4] _postNotification:a1[5]];
    }

    _Block_object_dispose(&v10, 8);
  }
}

void sub_100153D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_100153D18(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 104)) {
    return [*(id *)(v1 + 112) addObject:result[5]];
  }
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 1;
  return result;
}

uint64_t sub_100153DCC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 104) = 1;
  return result;
}

id sub_100153E98(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 88) count];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result != 0;
  return result;
}

uint64_t sub_100153F70(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) mutableCopy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 88);
  *(void *)(v3 + 88) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10015417C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1001541A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v6 = WeakRetained[2];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10015425C;
    void v7[3] = &unk_1004158D8;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

id sub_10015425C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_100154268(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v4 = WeakRetained[7];
    id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (!v5) {
      goto LABEL_14;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (1)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v10 = [v9 type];
        if (v10 == [v9 type])
        {
          id v11 = [v9 name];
          if ([v11 isEqualToString:*(void *)(a1 + 32)])
          {
            [v9 remainingDuration];
            double v13 = v12;
            double v14 = *(double *)(a1 + 56);

            if (v13 >= v14) {
              continue;
            }
            id v11 = [objc_alloc((Class)NSString) initWithFormat:@"Replaced by %@", *(void *)(a1 + 32)];
            [v9 invalidateWithReason:v11];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (!v6)
      {
LABEL_14:

        [v3[7] addObject:*(void *)(a1 + 40)];
        break;
      }
    }
  }
}

void sub_1001545D8(id *a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Claiming critical section for requestID: %@", buf, 0xCu);
    }
    id v5 = objc_alloc((Class)NSString);
    id v6 = [a1[4] UUIDString];
    id v7 = [v5 initWithFormat:@"Starting playback for %@", v6];

    id v8 = [MRDTaskAssertion alloc];
    id v9 = [a1[5] pid];
    id v10 = [a1[5] bundleIdentifier];
    long long v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    long long v17 = sub_100154828;
    long long v18 = &unk_10041EB78;
    __int16 v19 = WeakRetained;
    id v20 = a1[4];
    id v21 = a1[6];
    id v11 = [(MRDTaskAssertion *)v8 initWithType:8 pid:v9 bundleID:v10 name:v7 invalidationHandler:&v15];

    [(MRDTaskAssertion *)v11 invalidateInDuration:20.0];
    double v12 = [WeakRetained[15] objectForKey:a1[4]];
    if (v12)
    {
      id v13 = objc_alloc((Class)NSString);
      id v14 = [v13 initWithFormat:@"Replaced by %@", v7, v15, v16, v17, v18, v19, v20];
      [v12 invalidateWithReason:v14];
    }
    [WeakRetained[15] setObject:v11 forKeyedSubscript:a1[4]];
  }
}

void sub_100154828(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = a1[4];
  if (v6)
  {
    [*(id *)(v6 + 120) removeObjectForKey:a1[5]];
    uint64_t v7 = a1[6];
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
}

void sub_100154974(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v4 = (id *)(a1 + 32);
    uint64_t v6 = [WeakRetained[15] objectForKeyedSubscript:v5];
    uint64_t v7 = _MRLogForCategory();
    id v8 = v7;
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [*v4 UUIDString];
        *(_DWORD *)long long buf = 138412290;
        id v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Releasing critical section claimed for requestID: %@", buf, 0xCu);
      }
      id v10 = objc_alloc((Class)NSString);
      id v8 = [*v4 UUIDString];
      id v11 = [v10 initWithFormat:@"exited the critical section for requestID: %@", v8];
      [v6 invalidateWithReason:v11];
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_100330F20(v4, v8);
    }
  }
}

void sub_100155420(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1001554A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 error];

  id v4 = [v3 error];

  uint64_t v5 = [v3 playerPath];

  uint64_t v6 = _MRLogForCategory();
  uint64_t v7 = v6;
  if (v4)
  {
    BOOL v8 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v8) {
        sub_1003310B8(a1, v3, v7);
      }
    }
    else if (v8)
    {
      sub_100330FBC(a1, v3, v7);
    }
  }
  else
  {
    BOOL v9 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (!v9) {
        goto LABEL_13;
      }
      id v10 = [*(id *)(a1 + 32) commandID];
      id v11 = [v3 playerPath];
      double v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v16 = 138544130;
      CFStringRef v17 = @"sendRemoteControlCommand";
      __int16 v18 = 2114;
      __int16 v19 = v10;
      __int16 v20 = 2114;
      id v21 = v11;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", (uint8_t *)&v16, 0x2Au);
    }
    else
    {
      if (!v9) {
        goto LABEL_13;
      }
      id v10 = [*(id *)(a1 + 32) commandID];
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v16 = 138543874;
      CFStringRef v17 = @"sendRemoteControlCommand";
      __int16 v18 = 2114;
      __int16 v19 = v10;
      __int16 v20 = 2048;
      id v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v16, 0x20u);
    }
  }
LABEL_13:

  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    (*(void (**)(uint64_t, id))(v15 + 16))(v15, v3);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) invalidate];
}

void sub_1001556FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRCommandResult) initWithError:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015577C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001557E0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = +[RBSProcessPredicate predicateMatchingHandle:v3];
  BOOL v9 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v9 count:1];
  [v4 setPredicates:v6];

  [v4 setEvents:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10015590C;
  void v7[3] = &unk_10041EBC8;
  id v8 = *(id *)(a1 + 40);
  [v4 setUpdateHandler:v7];
}

void sub_10015590C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v13 = a4;
  uint64_t v5 = [v13 exitEvent];

  if (v5)
  {
    id v6 = objc_alloc((Class)MRCommandResult);
    uint64_t v7 = [v13 exitEvent];
    id v8 = [v7 context];
    BOOL v9 = [v8 status];
    id v10 = [v9 error];
    id v11 = [v10 description];
    id v12 = [v6 initWithWithSendError:19 description:v11];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100155A0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[2];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100155AC4;
    void v7[3] = &unk_1004158D8;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

id sub_100155AC4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_100155AD0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained[7] addObject:*(void *)(a1 + 32)];
}

void sub_100155B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace();
  id v4 = _MRLogForCategory();
  uint64_t v5 = [*(id *)(a1 + 32) commandID];
  id v6 = (char *)[v5 hash];

  if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v6, "SendCommandXPCResultFromApp", "", buf, 2u);
  }

  uint64_t v7 = MRCreateCommandResultFromXPCMessage();

  if ([v7 sendError] == 11)
  {
    dispatch_time_t v8 = dispatch_time(0, 1000000000);
    BOOL v9 = *(NSObject **)(*(void *)(a1 + 40) + 24);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100155CD0;
    v10[3] = &unk_100417A50;
    id v12 = *(id *)(a1 + 48);
    id v11 = v7;
    dispatch_after(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100155CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100155DF4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100155E10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) _relayXPCMessage:*(void *)(a1 + 40) andReply:*(unsigned __int8 *)(a1 + 64) resultCallback:*(void *)(a1 + 48)];
  }
  else
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 40), "MRXPC_MESSAGE_ID_KEY");
      int v5 = 134217984;
      uint64_t v6 = uint64;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unable to relay message with id %lu", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_10015620C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100156230(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) addObject:*(void *)(a1 + 40)];
  if ((byte_10047E3E0 & 1) == 0 && [*(id *)(*(void *)(a1 + 32) + 56) count] == (id)100)
  {
    uint64_t v2 = +[MRUserSettings currentSettings];
    unsigned int v3 = [v2 excessiveTaskAssertionsABC];

    if (v3)
    {
      id v4 = *(id *)(*(void *)(a1 + 32) + 40);
      int v5 = dispatch_get_global_queue(-2, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100156348;
      block[3] = &unk_100415CC8;
      id v8 = v4;
      id v6 = v4;
      dispatch_async(v5, block);

      byte_10047E3E0 = 1;
    }
  }
}

id sub_100156348(uint64_t a1)
{
  return +[MSVAutoBugCapture snapshotWithDomain:@"MediaRemote" type:@"Excessive TaskAssertions" subType:@"Power" context:*(void *)(a1 + 32) triggerThresholdValues:0 events:0 completion:0];
}

void sub_10015639C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
      uint64_t v7 = reply;
      if (reply)
      {
        if (v3 == &_xpc_error_connection_invalid || v3 == &_xpc_error_connection_interrupted) {
          xpc_dictionary_set_uint64(reply, "MRXPC_ERROR_CODE_KEY", 1uLL);
        }
        else {
          sub_1001677D8(reply, v3);
        }
        xpc_connection_send_message(v5, v7);
      }
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 40) invalidateWithReason:@"Request Returned"];
    BOOL v9 = WeakRetained[2];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100156510;
    v10[3] = &unk_1004158D8;
    id v11 = WeakRetained;
    id v12 = *(id *)(a1 + 40);
    dispatch_sync(v9, v10);
  }
}

id sub_100156510(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_100156720(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MRGetPlayerPathFromUserInfo();
  id v8 = +[MRUserSettings currentSettings];
  unsigned int v9 = [v8 verboseMRDMediaRemoteClientLogging];

  if (v7)
  {
    if (!v9) {
      goto LABEL_10;
    }
    id v10 = _MRLogForCategory();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    id v11 = [*(id *)(a1 + 32) bundleIdentifier];
    *(_DWORD *)int v26 = 138412802;
    *(void *)&void v26[4] = v11;
    *(_WORD *)&v26[12] = 2112;
    *(void *)&v26[14] = v5;
    *(_WORD *)&v26[22] = 2112;
    CFStringRef v27 = v7;
    id v12 = "[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>";
    id v13 = v10;
    uint32_t v14 = 32;
    goto LABEL_8;
  }
  if (!v9) {
    goto LABEL_10;
  }
  id v10 = _MRLogForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 32) bundleIdentifier];
    *(_DWORD *)int v26 = 138412546;
    *(void *)&void v26[4] = v11;
    *(_WORD *)&v26[12] = 2112;
    *(void *)&v26[14] = v5;
    id v12 = "[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>";
    id v13 = v10;
    uint32_t v14 = 22;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, v26, v14);
  }
LABEL_9:

LABEL_10:
  uint64_t v15 = +[MRUserSettings currentSettings];
  unsigned int v16 = [v15 verboseMRDMediaRemoteClientLogging];

  if (v16)
  {
    CFStringRef v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)MRMediaRemoteCopyReadableDictionaryDescription();
      *(_DWORD *)int v26 = 138412290;
      *(void *)&void v26[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[MRDMediaRemoteClient] Restoring connection with notification userInfo %@", v26, 0xCu);
    }
  }
  if (v6) {
    id v19 = [v6 mutableCopy];
  }
  else {
    id v19 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:1];
  }
  __int16 v20 = v19;
  id v21 = +[MRDMediaRemoteServer server];
  __int16 v22 = [v21 nowPlayingServer];
  uint64_t v23 = [v22 augmentedUserInfoForPlayerPath:v7];
  [v20 addEntriesFromDictionary:v23];

  [v20 setObject:&__kCFBooleanTrue forKeyedSubscript:_MRMediaRemoteIsRestoringClientStateUserInfoKey];
  CFStringRef v24 = *(void **)(a1 + 32);
  id v25 = [objc_alloc((Class)MRNotification) initWithNotification:v5 userInfo:v20];
  [v24 _postNotification:v25];
}

void sub_1001571B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001571DC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  unsigned int v9 = v8;
  if (v8) {
    [v8 MRHIDTouchEventValue];
  }
  unsigned int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 6 * v10 + 32) = v10 + 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8)
           + 6 * *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
           + 33) = 0;
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8)
           + 6 * *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
           + 34) = (int)0.0;
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8)
           + 6 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))++
           + 36) = (int)0.0;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 2u) {
    *a4 = 1;
  }
}

void sub_1001574F0(id a1)
{
  uint64_t v1 = objc_alloc_init(MRDDisplayMonitor);
  uint64_t v2 = qword_10047E3F0;
  qword_10047E3F0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1001575F8(uint64_t a1)
{
  uint64_t v2 = +[FBSDisplayLayoutMonitorConfiguration configurationForDefaultMainDisplayMonitor];
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472;
  id v8 = sub_10000F77C;
  unsigned int v9 = &unk_10041ED10;
  objc_copyWeak(&v10, &location);
  [v2 setTransitionHandler:&v6];
  uint64_t v3 = +[FBSDisplayLayoutMonitor monitorWithConfiguration:](FBSDisplayLayoutMonitor, "monitorWithConfiguration:", v2, v6, v7, v8, v9);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = v3;

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_1001576E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10015774C(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"MRDisplayMonitorDisplayDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100157CE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100157CFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleDidReceiveResetConnectionRequest];
}

id sub_100157D3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _maybeDeviceConnectionStatusChanged];
}

void sub_100157F70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_100158188(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v12 = (id *)(a1 + 32);
  id v13 = a7;
  id v14 = a6;
  id v15 = a5;
  id v16 = a4;
  id v17 = a3;
  id v18 = a2;
  id WeakRetained = objc_loadWeakRetained(v12);
  [WeakRetained handleIncomingMessage:v18 type:v17 destination:v16 session:v15 messageID:v14 replyID:v13];
}

void sub_100158608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001587F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001588CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158A7C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100158B10(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) invalidationHandler];

  if (v2)
  {
    id v3 = [objc_alloc((Class)NSError) initWithMRError:105 format:@"Device Connection was manually reset by the peer"];
    uint64_t v4 = [*(id *)(a1 + 32) invalidationHandler];
    ((void (**)(void, id))v4)[2](v4, v3);
  }
  if ([*(id *)(a1 + 32) isConnected])
  {
    id v5 = [*(id *)(a1 + 32) connectionHandler];

    if (v5)
    {
      id v6 = [*(id *)(a1 + 32) connectionHandler];
      v6[2]();
    }
  }
}

void sub_100158FD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100158FF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10015900C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_100159024(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100159294(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001592B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  if (*(void *)(a1 + 40))
  {
    id v3 = [objc_alloc((Class)NSError) initWithMRError:105 format:@"Device fell out of IDS service"];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100159774(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100159E3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = _MRLogForCategory();
  id v8 = v7;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1003312A0(a1, (uint64_t)v6, v8);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      id v10 = [*(id *)(a1 + 40) requestID];
      uint64_t v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v20 = 138543874;
      uint64_t v21 = v16;
      __int16 v22 = 2114;
      uint64_t v23 = v10;
      __int16 v24 = 2048;
      id v25 = v17;
      id v13 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v14 = v8;
      uint32_t v15 = 32;
      goto LABEL_10;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = [*(id *)(a1 + 40) requestID];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v20 = 138544130;
    uint64_t v21 = v9;
    __int16 v22 = 2114;
    uint64_t v23 = v10;
    __int16 v24 = 2112;
    id v25 = v5;
    __int16 v26 = 2048;
    uint64_t v27 = v12;
    id v13 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v14 = v8;
    uint32_t v15 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v20, v15);
  }
  [*(id *)(a1 + 56) trackWithError:v6];
  (*(void (**)(void, id, id, void, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v5, v6, *(void *)(a1 + 56), v18, v19);
}

uint64_t sub_10015A04C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015A064(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10015A0DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = [v5 createHostedEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10015A170(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = [v5 createRemoteHostedEndpoint];
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10015A204(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = [v3 modifyOutputContext];
  [v4 endWithError:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10015A60C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_onIDSQueue_initializeDiscoveryChannel");
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [v2 discoveryChannel];
  objc_msgSend(v2, "_onIDSQueue_connectDiscoveryChannel:", v3);
}

void sub_10015A994(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10015AB6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onIDSQueue_disconnectDiscoveryChannel:", *(void *)(*(void *)(a1 + 32) + 8));
}

void sub_10015ABFC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [v1 discoveryChannel];
  objc_msgSend(v1, "_onIDSQueue_connectDiscoveryChannel:", v2);
}

id sub_10015AD34(id a1, MRAVOutputDevice *a2)
{
  id v2 = [(MRAVOutputDevice *)a2 descriptor];
  [v2 setTransportType:3];
  id v3 = [objc_alloc((Class)MRAVDistantOutputDevice) initWithDescriptor:v2];

  return v3;
}

void sub_10015B074(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10015B348(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaremote.MRIDSCompanionDiscoverySession.discoveryChannelClientQueue", v3);
  id v2 = (void *)qword_10047E3F8;
  qword_10047E3F8 = (uint64_t)v1;
}

id sub_10015B638(void *a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = [a1 discoveredConcreteOutputDevices];
    id v2 = objc_msgSend(v1, "msv_map:", &stru_10041EE08);
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10015B698(id a1, MRAVConcreteOutputDevice *a2)
{
  return [(MRAVConcreteOutputDevice *)a2 uid];
}

void sub_10015BB20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qos_class_self();
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 80) != v4)
    {
      id v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"priority degraded from %u -> %u", *(unsigned int *)(a1 + 80), v4);
      id v14 = _MRLogForCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v31 = v15;
        __int16 v32 = 2114;
        uint64_t v33 = v16;
        __int16 v34 = 2112;
        id v35 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
    id v17 = [*(id *)(a1 + 48) contextID];

    id v6 = _MRLogForCategory();
    BOOL v18 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (!v17)
    {
      if (!v18) {
        goto LABEL_18;
      }
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 40);
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v31 = v22;
      __int16 v32 = 2114;
      uint64_t v33 = v23;
      __int16 v34 = 2048;
      id v35 = v24;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", buf, 0x20u);
      goto LABEL_17;
    }
    if (!v18) {
      goto LABEL_18;
    }
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 40);
    id v10 = [*(id *)(a1 + 48) contextID];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v31 = v19;
    __int16 v32 = 2114;
    uint64_t v33 = v20;
    __int16 v34 = 2114;
    id v35 = v10;
    __int16 v36 = 2048;
    uint64_t v37 = v21;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", buf, 0x2Au);
LABEL_12:

LABEL_17:
    goto LABEL_18;
  }
  id v5 = [*(id *)(a1 + 48) contextID];

  id v6 = _MRLogForCategory();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (!v7) {
      goto LABEL_18;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = [*(id *)(a1 + 48) contextID];
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v31 = v8;
    __int16 v32 = 2114;
    uint64_t v33 = v9;
    __int16 v34 = 2114;
    id v35 = v3;
    __int16 v36 = 2114;
    uint64_t v37 = v10;
    __int16 v38 = 2048;
    uint64_t v39 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
    goto LABEL_12;
  }
  if (v7) {
    sub_100331394();
  }
LABEL_18:

  id v25 = *(void **)(a1 + 72);
  if (v25)
  {
    __int16 v26 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015BED8;
    block[3] = &unk_100417A50;
    id v29 = v25;
    id v28 = v3;
    dispatch_async(v26, block);
  }
}

uint64_t sub_10015BED8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10015BEEC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v11 = +[NSMutableDictionary dictionary];
    uint64_t v4 = [v3 uniqueIdentifier];
    [v11 setObject:v4 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v5 = [v3 outputDeviceUIDs];
    [v11 setObject:v5 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v6 = [*(id *)(a1 + 8) requestDetails];
    BOOL v7 = [v6 initiator];
    [v11 setObject:v7 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v8 = [*(id *)(a1 + 8) requestDetails];
    uint64_t v9 = [v8 requestID];
    [v11 setObject:v9 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    id v10 = +[NSNotificationCenter defaultCenter];
    [v10 postNotificationName:MRAVOutputContextModificationRequestToClearPredictedRoutesNotifications object:v3 userInfo:v11];
  }
}

void sub_10015C05C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, id))(v3 + 16);
  id v5 = a2;
  v4(v3, v5);
  sub_10015C0D0(*(id **)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 56), v5);
}

void sub_10015C0D0(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v13 = a2;
  id v6 = a4;
  if (a1)
  {
    id v7 = [a1[1] type];
    uint64_t v8 = (id *)&kMRTopologyModificationTypeAdd;
    switch((unint64_t)v7)
    {
      case 0uLL:
        goto LABEL_8;
      case 1uLL:
        goto LABEL_6;
      case 2uLL:
        uint64_t v8 = (id *)&kMRTopologyModificationTypeRemove;
        goto LABEL_6;
      case 3uLL:
        uint64_t v8 = (id *)&kMRTopologyModificationTypeSet;
LABEL_6:
        id v9 = *v8;
        break;
      default:
        id v9 = 0;
        break;
    }
    id v10 = [a1[1] requestDetails];
    id v11 = [v10 reason];
    MRAnalyticsCompositionForLocalDevice();
    uint64_t v12 = [a1 discoveredConcreteOutputDevices];
    MRAnalyticsTrackTopologyChangeEvent();
  }
LABEL_8:
}

void sub_10015C220(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = objc_alloc_init((Class)NSMutableArray);
    id v11 = +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:1];
    [v11 setDiscoveryMode:3];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10015CB80;
    v31[3] = &unk_10041EEC0;
    id v12 = v10;
    id v32 = v12;
    uint64_t v33 = a1;
    id v37 = v9;
    id v34 = v7;
    id v35 = v8;
    id v36 = v11;
    id v26 = v11;
    id v27 = v8;
    id v13 = objc_retainBlock(v31);
    id v14 = objc_alloc_init((Class)MRAVLightweightReconnaissanceSession);
    uint64_t v23 = [*(id *)(a1 + 8) outputDeviceUIDs];
    v38[0] = &stru_10042ACB0;
    id v25 = off_100477A00();
    v38[1] = v25;
    uint64_t v15 = off_100477A08();
    v38[2] = v15;
    uint64_t v16 = +[NSArray arrayWithObjects:v38 count:3];
    id v17 = [*(id *)(a1 + 8) requestDetails];
    [v17 requestID];
    v19 = id v18 = v7;
    qos_class_t v20 = qos_class_self();
    uint64_t v21 = dispatch_get_global_queue(v20, 0);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10015EC28;
    v28[3] = &unk_10041EEE8;
    id v29 = v12;
    id v30 = v13;
    uint64_t v22 = v13;
    id v24 = v12;
    [v14 searchForOutputDevices:v23 categories:v16 timeout:v19 reason:v21 queue:v28 completion:7.0];

    id v7 = v18;
    id v8 = v27;
  }
}

uint64_t sub_10015CB5C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

void sub_10015CB80(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]
    || ([*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs],
        uint64_t v21 = objc_claimAutoreleasedReturnValue(),
        id v22 = [v21 count],
        v21,
        !v22))
  {
    if ([*(id *)(a1 + 48) type] == 1
      && (objc_msgSend(*(id *)(a1 + 32), "mr_filter:", &stru_10041EE70),
          id v2 = objc_claimAutoreleasedReturnValue(),
          id v3 = [v2 count],
          v2,
          v3))
    {
      id v29 = [[MRDOutputContextModification alloc] initWithRequest:*(void *)(*(void *)(a1 + 40) + 8)];
      uint64_t v4 = +[MRAVConcreteOutputContext sharedSystemAudioContext];
      [(MRDOutputContextModification *)v29 modifyWithOutputContext:v4 queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 72)];
    }
    else
    {
      sub_10015CF50(*(id **)(a1 + 40), *(void **)(a1 + 48));
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 16), *(id *)(a1 + 32));
      id v5 = *(id *)(*(void *)(a1 + 40) + 16);
      id v6 = objc_alloc_init((Class)NSMutableArray);
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v7 = v5;
      id v8 = [v7 countByEnumeratingWithState:&v35 objects:v39 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v36;
        do
        {
          for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v36 != v10) {
              objc_enumerationMutation(v7);
            }
            id v12 = [*(id *)(*((void *)&v35 + 1) + 8 * i) avOutputDevice];
            [v6 addObject:v12];
          }
          id v9 = [v7 countByEnumeratingWithState:&v35 objects:v39 count:16];
        }
        while (v9);
      }

      uint64_t v13 = *(void *)(a1 + 40);
      id v14 = *(void **)(v13 + 24);
      *(void *)(v13 + 24) = v6;

      uint64_t v15 = *(id **)(a1 + 40);
      uint64_t v16 = *(void **)(a1 + 48);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10015D12C;
      v30[3] = &unk_10041EE98;
      id v17 = *(void **)(a1 + 56);
      id v31 = *(id *)(a1 + 64);
      id v18 = *(id *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 40);
      qos_class_t v20 = *(void **)(a1 + 48);
      id v34 = v18;
      uint64_t v32 = v19;
      id v33 = v20;
      sub_10015D3AC(v15, v16, v17, v30);
    }
  }
  else
  {
    uint64_t v23 = _MRLogForCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_10033143C((uint64_t *)(a1 + 40), v23);
    }

    uint64_t v24 = *(void *)(a1 + 72);
    id v25 = objc_alloc((Class)NSError);
    uint64_t v26 = *(void *)(a1 + 32);
    id v27 = [*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs];
    id v28 = [v25 initWithMRError:47, @"Failed to discover all output devices involved in modification: discovered=%@ vs requested=%@", v26, v27 format];
    (*(void (**)(uint64_t, id))(v24 + 16))(v24, v28);
  }
}

BOOL sub_10015CF00(id a1, MRAVConcreteOutputDevice *a2)
{
  id v2 = a2;
  BOOL v3 = [(MRAVConcreteOutputDevice *)v2 deviceType] == 4
    && [(MRAVConcreteOutputDevice *)v2 deviceSubtype] == 4;

  return v3;
}

void sub_10015CF50(id *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v13 = +[NSMutableDictionary dictionary];
    uint64_t v4 = [v3 uniqueIdentifier];
    [v13 setObject:v4 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v5 = [v3 outputDeviceUIDs];
    [v13 setObject:v5 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v6 = sub_10015B638(a1);
    [v13 setObject:v6 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1[1] type]);
    [v13 setObject:v7 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v8 = [a1[1] requestDetails];
    id v9 = [v8 reason];
    [v13 setObject:v9 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v10 = [a1[1] requestDetails];
    id v11 = [v10 requestID];
    [v13 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    id v12 = +[NSNotificationCenter defaultCenter];
    [v12 postNotificationName:MRAVOutputContextDidBeginModificationNotification object:v3 userInfo:v13];
  }
}

void sub_10015D12C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setDiscoveryMode:0];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  sub_10015D1A0(*(id **)(a1 + 40), *(void **)(a1 + 48), v4);
}

void sub_10015D1A0(id *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v16 = +[NSMutableDictionary dictionary];
    id v7 = [v6 uniqueIdentifier];
    [v16 setObject:v7 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v8 = [v6 outputDeviceUIDs];
    [v16 setObject:v8 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v9 = sub_10015B638(a1);
    [v16 setObject:v9 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    uint64_t v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a1[1] type]);
    [v16 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v11 = [a1[1] requestDetails];
    id v12 = [v11 reason];
    [v16 setObject:v12 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    id v13 = [a1[1] requestDetails];
    id v14 = [v13 requestID];
    [v16 setObject:v14 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    [v16 setObject:v5 forKeyedSubscript:MRAVOutputContextModificationErrorUserInfoKey];
    uint64_t v15 = +[NSNotificationCenter defaultCenter];
    [v15 postNotificationName:MRAVOutputContextDidFinishModificationNotification object:v6 userInfo:v16];
  }
}

void sub_10015D3AC(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  dispatch_queue_t queue = a3;
  id v132 = a4;
  v144 = a1;
  v136 = v7;
  if (a1)
  {
    id v8 = [v7 avOutputContext];
    if (!queue)
    {
      dispatch_queue_t queue = (dispatch_queue_t)&_dispatch_main_q;
      id v9 = &_dispatch_main_q;
    }
    uint64_t v10 = +[NSDate date];
    id v11 = [v144[1] requestDetails];
    id v12 = [v11 requestID];

    id v13 = objc_alloc((Class)NSString);
    [v144[1] type];
    id v14 = MRGroupTopologyModificationRequestTypeDescription();
    id v15 = [v13 initWithFormat:@"%@OutputDevices", v14];

    id v16 = objc_alloc((Class)NSString);
    id v17 = MRAVOutputDeviceArrayDescription();
    id v18 = [v16 initWithFormat:@"devices=%@, outputContext=%@", v17, v136];

    id v19 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", v15, v12];
    qos_class_t v20 = v19;
    if (v18) {
      [v19 appendFormat:@" for %@", v18];
    }
    uint64_t v21 = _MRLogForCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
    }

    id v22 = objc_alloc((Class)NSString);
    uint64_t v23 = [v8 outputDevices];
    uint64_t v130 = (__CFString *)[v22 initWithFormat:@"Existing devices in context %@", v23];

    uint64_t v24 = _MRLogForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2112;
      CFStringRef v206 = v130;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }

    v193[0] = _NSConcreteStackBlock;
    v193[1] = 3221225472;
    v193[2] = sub_10015F7E0;
    v193[3] = &unk_10041EFE8;
    id v143 = v8;
    id v194 = v143;
    id v25 = v15;
    id v195 = v25;
    id v135 = v12;
    id v196 = v135;
    id v26 = v136;
    id v197 = v26;
    v198 = v144;
    id v127 = v18;
    id v199 = v127;
    id v125 = v10;
    id v200 = v125;
    id v202 = v132;
    dispatch_queue_t queue = queue;
    dispatch_queue_t v201 = queue;
    id v27 = objc_retainBlock(v193);
    CFStringRef v211 = @"com.apple.avfoundation.allows-set-output-device";
    +[NSArray arrayWithObjects:&v211 count:1];
    v131 = (void *)MRMediaRemoteCopyEntitlements();
    unint64_t v134 = [v131 objectForKeyedSubscript:@"com.apple.avfoundation.allows-set-output-device"];
    if (!v134 || ([v134 BOOLValue] & 1) == 0)
    {
      id v28 = _MRLogForCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543874;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v135;
        *(_WORD *)&buf[22] = 2112;
        CFStringRef v206 = @"Missing entitlement needed to modify output context. Operation will likley not work";
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }
    }
    id v29 = objc_alloc((Class)MRBlockGuard);
    id v30 = [objc_alloc((Class)NSString) initWithFormat:@"%@<%@>", v25, v135];
    v190[0] = _NSConcreteStackBlock;
    v190[1] = 3221225472;
    v190[2] = sub_10015FDA0;
    v190[3] = &unk_1004187A8;
    id v129 = v25;
    id v191 = v129;
    id v31 = v27;
    id v192 = v31;
    id v32 = [v29 initWithTimeout:v30 reason:v190 handler:60.0];

    v187[0] = _NSConcreteStackBlock;
    v187[1] = 3221225472;
    v187[2] = sub_10015FE40;
    v187[3] = &unk_1004187A8;
    id v128 = v32;
    id v188 = v128;
    uint64_t v126 = v31;
    id v189 = v126;
    uint64_t v133 = objc_retainBlock(v187);
    if ([v144[1] type] == (id)3)
    {
      id v33 = [v144[1] outputDeviceUIDs];
      BOOL v34 = [v33 count] == 0;

      if (v34)
      {
        id v145 = (id)MRMediaRemoteCopyLocalAirPlayReceiverTightSyncIdentity();
        id v53 = objc_alloc_init((Class)NSMutableArray);
        long long v185 = 0u;
        long long v186 = 0u;
        long long v183 = 0u;
        long long v184 = 0u;
        id v54 = [v26 outputDevices];
        id v55 = [v54 countByEnumeratingWithState:&v183 objects:v210 count:16];
        if (v55)
        {
          uint64_t v56 = *(void *)v184;
          do
          {
            for (uint64_t i = 0; i != v55; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v184 != v56) {
                objc_enumerationMutation(v54);
              }
              uint64_t v58 = *(void **)(*((void *)&v183 + 1) + 8 * i);
              if (([v58 isLocalDevice] & 1) == 0)
              {
                id v59 = [v58 uid];
                unsigned __int8 v60 = [v59 isEqualToString:v145];

                if ((v60 & 1) == 0) {
                  [v53 addObject:v58];
                }
              }
            }
            id v55 = [v54 countByEnumeratingWithState:&v183 objects:v210 count:16];
          }
          while (v55);
        }

        if ([v53 count])
        {
          id v61 = v144[1];
          char v62 = objc_msgSend(v53, "msv_compactMap:", &stru_10041F008);
          id v63 = [v61 copyWithType:2 outputDeviceUIDs:v62];

          CFStringRef v64 = [[MRDOutputContextModification alloc] initWithRequest:v63];
          id v65 = _MRLogForCategory();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543874;
            *(void *)&uint8_t buf[4] = v129;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v135;
            *(_WORD *)&buf[22] = 2112;
            CFStringRef v206 = @"instead of setting nil devices removing all non local devices...";
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
          }

          v181[0] = _NSConcreteStackBlock;
          v181[1] = 3221225472;
          v181[2] = sub_10015FEAC;
          v181[3] = &unk_100415FA8;
          v182 = v133;
          sub_10015C220(v64, v26, queue, v181);
        }
        else
        {
          char v78 = _MRLogForCategory();
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543874;
            *(void *)&uint8_t buf[4] = v129;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v135;
            *(_WORD *)&buf[22] = 2112;
            CFStringRef v206 = @"instead of setting nil devices removing all non local devices, but only local devices remain so nothing to do...";
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
          }

          ((void (*)(void *, void))v133[2])(v133, 0);
        }

        goto LABEL_74;
      }
    }
    if ([v144[1] type] == (id)2
      && ([v144[1] shouldNotPauseIfLastDeviceRemoved] & 1) == 0)
    {
      uint64_t v52 = +[MROrigin localOrigin];
      v174[0] = _NSConcreteStackBlock;
      v174[1] = 3221225472;
      v174[2] = sub_10015FEBC;
      v174[3] = &unk_10041F058;
      v180 = v133;
      id v175 = v26;
      v176 = v144;
      id v177 = v129;
      id v178 = v135;
      v179 = queue;
      +[MRDeviceInfoRequest deviceInfoForOrigin:v52 queue:v179 completion:v174];

LABEL_75:
      goto LABEL_76;
    }
    long long v172 = 0u;
    long long v173 = 0u;
    long long v170 = 0u;
    long long v171 = 0u;
    id v35 = v144[3];
    id v36 = [v35 countByEnumeratingWithState:&v170 objects:v209 count:16];
    if (v36)
    {
      uint64_t v37 = *(void *)v171;
      while (2)
      {
        for (uint64_t j = 0; j != v36; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v171 != v37) {
            objc_enumerationMutation(v35);
          }
          uint64_t v39 = *(void **)(*((void *)&v170 + 1) + 8 * (void)j);
          if (([v39 canBeGrouped] & 1) == 0
            && ([v39 supportsBluetoothSharing] & 1) == 0)
          {
            if ([v144[1] type] == (id)1)
            {
              unsigned int v41 = [v39 canBeGrouped];
              id v42 = objc_alloc((Class)NSString);
              if (v41) {
                CFStringRef v43 = @"device %@ does not support bluetooth sharing";
              }
              else {
                CFStringRef v43 = @"device %@ is not groupable";
              }
              id v44 = objc_msgSend(v42, "initWithFormat:", v43, v39);
              ErrorWithDescription = (void *)MRMediaRemoteCreateErrorWithDescription();

              ((void (*)(void *, void *))v133[2])(v133, ErrorWithDescription);
            }
            int v40 = 0;
            goto LABEL_35;
          }
        }
        id v36 = [v35 countByEnumeratingWithState:&v170 objects:v209 count:16];
        if (v36) {
          continue;
        }
        break;
      }
    }
    int v40 = 1;
LABEL_35:

    sub_1001603E0(v144, v26);
    id v145 = objc_alloc_init((Class)NSMutableDictionary);
    id v46 = [v144[1] data];
    __int16 v47 = (objc_class *)objc_opt_class();
    uint64_t v48 = NSStringFromClass(v47);
    [v145 setObject:v46 forKeyedSubscript:v48];

    if ((((unint64_t)[v144[3] count] > 1) & ~v40) == 0)
    {
      if ((unint64_t)[v144[3] count] >= 2
        && ![v143 supportsMultipleOutputDevices])
      {
        id v77 = [objc_alloc((Class)NSString) initWithFormat:@"Output context modification failed. Output context doesn't support multiple devices"];
        v141 = (void *)MRMediaRemoteCreateErrorWithDescription();

        ((void (*)(void *, void *))v133[2])(v133, v141);
        goto LABEL_74;
      }
      if ([v143 supportsMultipleOutputDevices])
      {
        __int16 v49 = [v144[1] password];
        BOOL v50 = v49 == 0;

        if (!v50)
        {
          v138 = (void *)MRMediaRemoteCreateErrorWithDescription();
          ((void (*)(void *, void *))v133[2])(v133, v138);

LABEL_74:
          goto LABEL_75;
        }
        id v89 = [v144[1] type];
        if (v89 == (id)3)
        {
          id v142 = objc_alloc_init((Class)NSMutableDictionary);
          v116 = off_100477A10();
          [v142 setObject:v135 forKeyedSubscript:v116];

          uint64_t v117 = off_100477A30();
          [v142 setObject:v135 forKeyedSubscript:v117];

          uint64_t v118 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] fadeAudio]);
          uint64_t v119 = off_100477A50();
          [v142 setObject:v118 forKeyedSubscript:v119];

          int v120 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] muteUntilFinished]);
          Swift::Int v121 = off_100477A58();
          [v142 setObject:v120 forKeyedSubscript:v121];

          Swift::Int v122 = off_100477A60();
          [v142 setObject:v145 forKeyedSubscript:v122];

          id v123 = v144[3];
          v148[0] = _NSConcreteStackBlock;
          v148[1] = 3221225472;
          v148[2] = sub_100160944;
          v148[3] = &unk_10041F0D0;
          Swift::Int v124 = v133;
          v148[4] = v144;
          id v149 = v124;
          [v143 setOutputDevices:v123 options:v142 completionHandler:v148];

          goto LABEL_74;
        }
        if (v89 == (id)2)
        {
          id v140 = objc_alloc_init((Class)NSMutableDictionary);
          unint64_t v102 = off_100477A10();
          [v140 setObject:v135 forKeyedSubscript:v102];

          uint64_t v103 = off_100477A30();
          [v140 setObject:v135 forKeyedSubscript:v103];

          v104 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] fadeAudio]);
          unint64_t v105 = off_100477A38();
          [v140 setObject:v104 forKeyedSubscript:v105];

          uint64_t v106 = [v144[1] requestDetails];
          uint64_t v107 = [v106 reason];
          LODWORD(v105) = [v107 containsString:kMRMigrateInitiatorProximity];

          if (v105)
          {
            unint64_t v108 = off_100477A40();
            [v140 setObject:&__kCFBooleanTrue forKeyedSubscript:v108];
          }
          uint64_t v109 = off_100477A48();
          [v140 setObject:v145 forKeyedSubscript:v109];

          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000;
          CFStringRef v206 = (const __CFString *)sub_10015F1E4;
          v207 = sub_10015F1F4;
          id v208 = 0;
          unint64_t v110 = dispatch_group_create();
          long long v156 = 0u;
          long long v157 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          id v111 = [v144[3] copy];
          id v112 = [v111 countByEnumeratingWithState:&v156 objects:v203 count:16];
          if (v112)
          {
            uint64_t v113 = *(void *)v157;
            do
            {
              for (uint64_t k = 0; k != v112; uint64_t k = (char *)k + 1)
              {
                if (*(void *)v157 != v113) {
                  objc_enumerationMutation(v111);
                }
                uint64_t v115 = *(void *)(*((void *)&v156 + 1) + 8 * (void)k);
                dispatch_group_enter(v110);
                v153[0] = _NSConcreteStackBlock;
                v153[1] = 3221225472;
                v153[2] = sub_1001608D4;
                v153[3] = &unk_10041F080;
                v155 = buf;
                v153[4] = v144;
                v154 = v110;
                [v143 removeOutputDevice:v115 options:v140 completionHandler:v153];
              }
              id v112 = [v111 countByEnumeratingWithState:&v156 objects:v203 count:16];
            }
            while (v112);
          }

          v150[0] = _NSConcreteStackBlock;
          v150[1] = 3221225472;
          v150[2] = sub_100160928;
          v150[3] = &unk_10041F0A8;
          v151 = v133;
          v152 = buf;
          dispatch_group_notify(v110, queue, v150);

          _Block_object_dispose(buf, 8);
        }
        else
        {
          if (v89 != (id)1) {
            goto LABEL_74;
          }
          id v140 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v90 = off_100477A10();
          [v140 setObject:v135 forKeyedSubscript:v90];

          char v91 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] fadeAudio]);
          uint64_t v92 = off_100477A18();
          [v140 setObject:v91 forKeyedSubscript:v92];

          uint64_t v93 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] muteUntilFinished]);
          uint64_t v94 = off_100477A20();
          [v140 setObject:v93 forKeyedSubscript:v94];

          char v95 = off_100477A28();
          [v140 setObject:v145 forKeyedSubscript:v95];

          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000;
          CFStringRef v206 = (const __CFString *)sub_10015F1E4;
          v207 = sub_10015F1F4;
          id v208 = 0;
          char v96 = dispatch_group_create();
          long long v166 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v169 = 0u;
          id v97 = [v144[3] copy];
          id v98 = [v97 countByEnumeratingWithState:&v166 objects:v204 count:16];
          if (v98)
          {
            uint64_t v99 = *(void *)v167;
            do
            {
              for (uint64_t m = 0; m != v98; uint64_t m = (char *)m + 1)
              {
                if (*(void *)v167 != v99) {
                  objc_enumerationMutation(v97);
                }
                uint64_t v101 = *(void *)(*((void *)&v166 + 1) + 8 * (void)m);
                dispatch_group_enter(v96);
                v163[0] = _NSConcreteStackBlock;
                v163[1] = 3221225472;
                v163[2] = sub_10016078C;
                v163[3] = &unk_10041F080;
                v165 = buf;
                v163[4] = v144;
                v164 = v96;
                [v143 addOutputDevice:v101 options:v140 completionHandler:v163];
              }
              id v98 = [v97 countByEnumeratingWithState:&v166 objects:v204 count:16];
            }
            while (v98);
          }

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1001608B8;
          block[3] = &unk_10041F0A8;
          v161 = v133;
          v162 = buf;
          dispatch_group_notify(v96, queue, block);

          _Block_object_dispose(buf, 8);
        }
      }
      else
      {
        uint64_t v66 = _MRLogForCategory();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v129;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v135;
          *(_WORD *)&buf[22] = 2112;
          CFStringRef v206 = @"outputContext does not support mutiple devices";
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
        }

        id v140 = objc_alloc_init((Class)NSMutableDictionary);
        id v67 = [v144[1] type];
        id v68 = v144[1];
        if (v67 == (id)2)
        {
          if ([v68 shouldNotPauseIfLastDeviceRemoved])
          {
            __int16 v69 = off_100477A40();

            if (v69)
            {
              id v70 = off_100477A40();
              [v140 setObject:&__kCFBooleanTrue forKeyedSubscript:v70];
            }
          }
          char v71 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] fadeAudio]);
          char v72 = off_100477A38();
          [v140 setObject:v71 forKeyedSubscript:v72];

          long long v73 = off_100477A48();
          [v140 setObject:v145 forKeyedSubscript:v73];

          long long v74 = [v144[3] firstObject];
          long long v75 = v147;
          v147[0] = _NSConcreteStackBlock;
          v147[1] = 3221225472;
          v147[2] = sub_1001609A0;
          v147[3] = &unk_10041F0D0;
          long long v76 = v133;
          v147[4] = v144;
          v147[5] = v76;
          [v143 removeOutputDevice:v74 options:v140 completionHandler:v147];
        }
        else
        {
          char v79 = [v68 password];

          if (v79)
          {
            uint64_t v80 = [v144[1] password];
            id v81 = off_100477A68();
            [v140 setObject:v80 forKeyedSubscript:v81];

            BOOL v82 = off_100477A70();
            [v140 setObject:&__kCFBooleanTrue forKeyedSubscript:v82];
          }
          id v83 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] fadeAudio]);
          char v84 = off_100477A78();
          [v140 setObject:v83 forKeyedSubscript:v84];

          id v85 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v144[1] muteUntilFinished]);
          id v86 = off_100477A80();
          [v140 setObject:v85 forKeyedSubscript:v86];

          id v87 = off_100477A88();
          [v140 setObject:v145 forKeyedSubscript:v87];

          long long v74 = [v144[3] firstObject];
          long long v75 = v146;
          v146[0] = _NSConcreteStackBlock;
          v146[1] = 3221225472;
          v146[2] = sub_1001609FC;
          v146[3] = &unk_10041F0D0;
          id v88 = v133;
          v146[4] = v144;
          v146[5] = v88;
          [v143 setOutputDevice:v74 options:v140 completionHandler:v146];
        }
      }
      goto LABEL_74;
    }
    id v51 = [objc_alloc((Class)NSString) initWithFormat:@"Output context modification failed. Attempted to group multiple devices where at least one is not groupable"];
    uint64_t v139 = (void *)MRMediaRemoteCreateErrorWithDescription();

    ((void (*)(void *, void *))v133[2])(v133, v139);
    goto LABEL_74;
  }
LABEL_76:
}

void sub_10015EBF4(_Unwind_Exception *a1)
{
}

void sub_10015EC28(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10015ED28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    long long v10 = +[NSDate now];
    id v11 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", @"waitForOutputContextModificationVerification", v8];
    id v12 = [v7 uniqueIdentifier];

    if (v12)
    {
      id v13 = [v7 uniqueIdentifier];
      [v11 appendFormat:@" for %@", v13];
    }
    id v14 = _MRLogForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v50 = 0x3032000000;
    id v51 = sub_10015F1E4;
    uint64_t v52 = sub_10015F1F4;
    id v53 = 0;
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10015F1FC;
    v43[3] = &unk_10041EF10;
    p_long long buf = &buf;
    id v15 = v7;
    id v44 = v15;
    id v16 = v8;
    id v45 = v16;
    id v17 = v10;
    id v46 = v17;
    id v47 = v9;
    id v18 = objc_retainBlock(v43);
    id v19 = objc_alloc((Class)MRBlockGuard);
    id v20 = [objc_alloc((Class)NSString) initWithFormat:@"waitForOutputContextModificationVerification<%@>", v16];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_10015F4D4;
    v39[3] = &unk_100418408;
    id v21 = v15;
    id v40 = v21;
    id v41 = v16;
    id v22 = v18;
    id v42 = v22;
    id v23 = [v19 initWithTimeout:v20 reason:v39 handler:7.0];

    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10015F62C;
    v37[3] = &unk_10041B0F0;
    id v24 = v21;
    id v38 = v24;
    id v25 = objc_retainBlock(v37);
    id v26 = +[NSNotificationCenter defaultCenter];
    uint64_t v27 = MRAVOutputContextOutputDevicesDidChangeNotification;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10015F774;
    v33[3] = &unk_10041EF98;
    id v28 = v25;
    id v35 = v28;
    id v29 = v23;
    id v34 = v29;
    id v30 = v22;
    id v36 = v30;
    uint64_t v31 = [v26 addObserverForName:v27 object:v24 queue:0 usingBlock:v33];
    id v32 = *(void **)(*((void *)&buf + 1) + 40);
    *(void *)(*((void *)&buf + 1) + 40) = v31;

    if (v28[2](v28) && [v29 disarm]) {
      ((void (*)(void *, void))v30[2])(v30, 0);
    }

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10015F1C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015F1E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10015F1F4(uint64_t a1)
{
}

void sub_10015F1FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    id v4 = +[NSNotificationCenter defaultCenter];
    [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;
  }
  id v7 = [*(id *)(a1 + 32) uniqueIdentifier];

  id v8 = _MRLogForCategory();
  id v9 = v8;
  if (!v3)
  {
    BOOL v15 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v7)
    {
      if (!v15) {
        goto LABEL_16;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      id v12 = +[NSDate date];
      [v12 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v21 = 138543874;
      CFStringRef v22 = @"waitForOutputContextModificationVerification";
      __int16 v23 = 2114;
      uint64_t v24 = v18;
      __int16 v25 = 2048;
      id v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v21, 0x20u);
      goto LABEL_15;
    }
    if (!v15) {
      goto LABEL_16;
    }
    uint64_t v16 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) uniqueIdentifier];
    id v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544130;
    CFStringRef v22 = @"waitForOutputContextModificationVerification";
    __int16 v23 = 2114;
    uint64_t v24 = v16;
    __int16 v25 = 2114;
    id v26 = v12;
    __int16 v27 = 2048;
    id v28 = v17;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds", (uint8_t *)&v21, 0x2Au);
LABEL_10:

LABEL_15:
    goto LABEL_16;
  }
  BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v10) {
      goto LABEL_16;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = [*(id *)(a1 + 32) uniqueIdentifier];
    id v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v21 = 138544386;
    CFStringRef v22 = @"waitForOutputContextModificationVerification";
    __int16 v23 = 2114;
    uint64_t v24 = v11;
    __int16 v25 = 2114;
    id v26 = v3;
    __int16 v27 = 2114;
    id v28 = v12;
    __int16 v29 = 2048;
    uint64_t v30 = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v21, 0x34u);
    goto LABEL_10;
  }
  if (v10) {
    sub_1003314B8();
  }
LABEL_16:

  uint64_t v20 = *(void *)(a1 + 56);
  if (v20) {
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v3);
  }
}

uint64_t sub_10015F4D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = objc_alloc((Class)NSString);
    id v4 = [*(id *)(a1 + 32) outputDevices];
    uint64_t v5 = [*(id *)(a1 + 32) avOutputContext];
    uint64_t v6 = [v5 outputDevices];
    id v7 = [v3 initWithFormat:@"Timed out waiting for verification %@ vs %@", v4, v6];

    id v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v12 = @"waitForOutputContextModificationVerification";
      __int16 v13 = 2114;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_10015F62C(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSSet);
  id v3 = [*(id *)(a1 + 32) concreteOutputDevices];
  id v4 = objc_msgSend(v3, "msv_compactMap:", &stru_10041EF30);
  id v5 = [v2 initWithArray:v4];

  id v6 = objc_alloc((Class)NSSet);
  id v7 = [*(id *)(a1 + 32) avOutputContext];
  id v8 = [v7 outputDevices];
  uint64_t v9 = objc_msgSend(v8, "msv_compactMap:", &stru_10041EF70);
  id v10 = [v6 initWithArray:v9];

  id v11 = [v5 isEqualToSet:v10];
  return v11;
}

id sub_10015F71C(id a1, MRAVConcreteOutputDevice *a2)
{
  id v2 = [(MRAVConcreteOutputDevice *)a2 avOutputDevice];
  id v3 = [v2 ID];

  return v3;
}

id sub_10015F76C(id a1, AVOutputDevice *a2)
{
  return [(AVOutputDevice *)a2 ID];
}

id sub_10015F774(uint64_t a1)
{
  id result = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  if (result)
  {
    id result = [*(id *)(a1 + 32) disarm];
    if (result)
    {
      id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
      return (id)v3();
    }
  }
  return result;
}

void sub_10015F7E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSString);
  id v5 = [*(id *)(a1 + 32) outputDevices];
  id v6 = [v4 initWithFormat:@"Final devices in context %@", v5];

  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v24 = v8;
    __int16 v25 = 2114;
    uint64_t v26 = v9;
    __int16 v27 = 2112;
    id v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  [*(id *)(a1 + 56) _reloadOutputDevices];
  id v10 = *(void **)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  CFStringRef v12 = *(void **)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_10015FA04;
  v14[3] = &unk_10041EFC0;
  id v15 = v10;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v3;
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  id v22 = *(id *)(a1 + 96);
  id v21 = *(id *)(a1 + 88);
  id v13 = v3;
  sub_10015ED28(v11, v15, v12, v14);
}

void sub_10015FA04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSString);
  id v5 = [*(id *)(a1 + 32) outputDevices];
  id v6 = [v4 initWithFormat:@"Final devices in context %@", v5];

  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v38 = v8;
    __int16 v39 = 2114;
    uint64_t v40 = v9;
    __int16 v41 = 2112;
    id v42 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  id v10 = *(void **)(a1 + 56);
  if (!v10) {
    id v10 = v3;
  }
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 64);
  id v13 = _MRLogForCategory();
  uint64_t v14 = v13;
  if (!v11)
  {
    BOOL v21 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void **)(a1 + 64);
      id v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 72)];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v38 = v22;
      __int16 v39 = 2114;
      uint64_t v40 = v23;
      __int16 v41 = 2114;
      id v42 = v24;
      __int16 v43 = 2048;
      uint64_t v44 = v25;
      uint64_t v26 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      __int16 v27 = v14;
      uint32_t v28 = 42;
    }
    else
    {
      if (!v21) {
        goto LABEL_18;
      }
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v30 = *(void *)(a1 + 48);
      id v19 = +[NSDate date];
      [v19 timeIntervalSinceDate:*(void *)(a1 + 72)];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v38 = v29;
      __int16 v39 = 2114;
      uint64_t v40 = v30;
      __int16 v41 = 2048;
      id v42 = v31;
      uint64_t v26 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      __int16 v27 = v14;
      uint32_t v28 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
    goto LABEL_17;
  }
  BOOL v15 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  if (v12)
  {
    if (!v15) {
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 64);
    id v19 = +[NSDate date];
    [v19 timeIntervalSinceDate:*(void *)(a1 + 72)];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v38 = v16;
    __int16 v39 = 2114;
    uint64_t v40 = v17;
    __int16 v41 = 2114;
    id v42 = v11;
    __int16 v43 = 2114;
    uint64_t v44 = v18;
    __int16 v45 = 2048;
    uint64_t v46 = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_17:

    goto LABEL_18;
  }
  if (v15) {
    sub_10033158C();
  }
LABEL_18:

  id v32 = *(void **)(a1 + 88);
  if (v32)
  {
    id v33 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015FD8C;
    block[3] = &unk_100417A50;
    id v36 = v32;
    id v35 = v11;
    dispatch_async(v33, block);
  }
}

uint64_t sub_10015FD8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10015FDA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if ([v3 code] == (id)26)
  {
    id v4 = [objc_alloc((Class)NSError) initWithMRError:125, @"%@OutputContextModification timedout after %lf seconds", *(void *)(a1 + 32), 0x404E000000000000 format];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10015FE40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10015FEA4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

uint64_t sub_10015FEAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10015FEBC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v6 = [*(id *)(a1 + 32) outputDevices];
    id v7 = [v6 countByEnumeratingWithState:&v44 objects:v56 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v45;
      char v10 = 1;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v12 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          id v13 = [*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs];
          uint64_t v14 = [v12 uid];
          unsigned __int8 v15 = [v13 containsObject:v14];

          v10 &= v15;
        }
        id v8 = [v6 countByEnumeratingWithState:&v44 objects:v56 count:16];
      }
      while (v8);
      char v16 = v10 ^ 1;
    }
    else
    {
      char v16 = 0;
    }

    uint64_t v17 = [v5 deviceUID];
    id v18 = [v17 length];

    unsigned int v19 = [v5 isProxyGroupPlayer];
    id v20 = [*(id *)(*(void *)(a1 + 40) + 8) copy];
    [v20 setShouldNotPauseIfLastDeviceRemoved:1];
    BOOL v21 = [[MRDOutputContextModification alloc] initWithRequest:v20];
    if ((v16 & 1) == 0 && v18 && v19)
    {
      uint64_t v54 = kMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
      CFStringRef v55 = @"No devices on output context";
      uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
      qos_class_t v23 = qos_class_self();
      uint64_t v24 = dispatch_get_global_queue(v23, 0);
      uint64_t v25 = _MRLogForCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void *)(a1 + 48);
        uint64_t v27 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v49 = v26;
        __int16 v50 = 2114;
        uint64_t v51 = v27;
        __int16 v52 = 2112;
        CFStringRef v53 = @"pausing now playing app before removing last output device...";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      uint32_t v28 = +[MROrigin localOrigin];
      id v36 = _NSConcreteStackBlock;
      uint64_t v37 = 3221225472;
      uint64_t v38 = sub_100160324;
      __int16 v39 = &unk_10041F030;
      uint64_t v40 = v21;
      id v41 = *(id *)(a1 + 32);
      id v42 = *(id *)(a1 + 64);
      id v43 = *(id *)(a1 + 72);
      MRMediaRemoteSendCommandForOriginWithReply();
    }
    else
    {
      uint64_t v29 = _MRLogForCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void *)(a1 + 48);
        uint64_t v31 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 138543874;
        uint64_t v49 = v30;
        __int16 v50 = 2114;
        uint64_t v51 = v31;
        __int16 v52 = 2112;
        CFStringRef v53 = @"removing last output device...";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
      }

      uint64_t v32 = *(void *)(a1 + 32);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_1001603D0;
      v34[3] = &unk_100415FA8;
      uint64_t v33 = *(void *)(a1 + 64);
      id v35 = *(id *)(a1 + 72);
      sub_10015C220(v21, v32, v33, v34);
      uint64_t v22 = v35;
    }
  }
}

void sub_100160324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1001603C0;
  void v4[3] = &unk_100415FA8;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_10015C220(v1, v2, v3, v4);
}

uint64_t sub_1001603C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001603D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001603E0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (((unint64_t)[a1[1] type] | 2) == 3)
    {
      id v4 = [a1 discoveredConcreteOutputDevices];
      sub_100160A58((uint64_t)a1, v4, v3);

      id v5 = [v3 outputDeviceUIDs];
      id v6 = +[NSMutableSet setWithArray:v5];

      id v7 = [a1 discoveredConcreteOutputDevices];
      id v8 = +[NSMutableSet setWithArray:v7];

      [v8 minusSet:v6];
      uint64_t v9 = [a1 discoveredConcreteOutputDevices];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100160DC4;
      v30[3] = &unk_100418280;
      id v31 = v8;
      id v10 = v8;
      id v11 = objc_msgSend(v9, "msv_filter:", v30);

      if ([v11 count]) {
        sub_100160E0C((uint64_t)a1, v11, v3);
      }
    }
    id v12 = [a1[1] type];
    if (v12 == (id)3)
    {
      uint64_t v22 = [v3 outputDeviceUIDs];
      qos_class_t v23 = +[NSMutableSet setWithArray:v22];

      uint64_t v24 = sub_10015B638(a1);
      unsigned __int8 v15 = +[NSMutableSet setWithArray:v24];

      [v23 minusSet:v15];
      id v18 = [v3 outputDevices];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      void v26[2] = sub_100161854;
      v26[3] = &unk_100417940;
      unsigned int v19 = &v27;
      uint64_t v27 = v23;
      id v20 = v23;
      BOOL v21 = v26;
    }
    else
    {
      if (v12 != (id)2) {
        goto LABEL_13;
      }
      id v13 = [a1 discoveredConcreteOutputDevices];
      sub_100161160((uint64_t)a1, v13, v3);

      uint64_t v14 = [v3 outputDeviceUIDs];
      unsigned __int8 v15 = +[NSMutableSet setWithArray:v14];

      char v16 = sub_10015B638(a1);
      uint64_t v17 = +[NSMutableSet setWithArray:v16];

      [v17 intersectSet:v15];
      id v18 = [a1 discoveredConcreteOutputDevices];
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1001614B8;
      v28[3] = &unk_100418280;
      unsigned int v19 = &v29;
      uint64_t v29 = v17;
      id v20 = v17;
      BOOL v21 = v28;
    }
    uint64_t v25 = objc_msgSend(v18, "msv_filter:", v21);

    if ([v25 count]) {
      sub_100161500((uint64_t)a1, v25, v3);
    }
  }
LABEL_13:
}

void sub_10016078C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001607E0(*(void **)(a1 + 32), a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v6);
}

id sub_1001607E0(void *ErrorWithDescription, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (ErrorWithDescription)
  {
    id v5 = [v3 status];
    if ((unint64_t)v5 < 2 || v5 == (id)3)
    {
      id v7 = [ErrorWithDescription description];
      goto LABEL_8;
    }
    if (v5 == (id)4)
    {
      id v6 = [v4 cancellationReason];

      if (v6)
      {
        id v7 = [v4 cancellationReason];
LABEL_8:
        ErrorWithDescription = (void *)MRMediaRemoteCreateErrorWithDescription();

        goto LABEL_11;
      }
      ErrorWithDescription = (void *)MRMediaRemoteCreateError();
    }
    else
    {
      ErrorWithDescription = 0;
    }
  }
LABEL_11:

  return ErrorWithDescription;
}

uint64_t sub_1001608B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1001608D4(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1001607E0(*(void **)(a1 + 32), a2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v6);
}

uint64_t sub_100160928(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100160944(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1001607E0(*(void **)(a1 + 32), a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1001609A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1001607E0(*(void **)(a1 + 32), a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1001609FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1001607E0(*(void **)(a1 + 32), a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100160A58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = +[NSMutableDictionary dictionary];
    id v8 = [v6 uniqueIdentifier];
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = [v6 outputDeviceUIDs];
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v10 = objc_msgSend(v5, "msv_compactMap:", &stru_10041F0F0);
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 8) type]);
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v12 = [*(id *)(a1 + 8) requestDetails];
    id v13 = [v12 reason];
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = [*(id *)(a1 + 8) requestDetails];
    unsigned __int8 v15 = [v14 requestID];
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = objc_msgSend(v5, "msv_map:", &stru_10041F110);
    uint64_t v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412546;
      uint64_t v24 = v16;
      __int16 v25 = 2112;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Request to add outputDevices %@ to context %@", (uint8_t *)&v23, 0x16u);
    }

    id v18 = +[NSNotificationCenter defaultCenter];
    [v18 postNotificationName:MRAVOutputContextModificationRequestToAddOutputDeviceNotification object:v6 userInfo:v7];

    unsigned int v19 = objc_msgSend(v5, "msv_firstWhere:", &stru_10041F130);
    if (v19)
    {
      id v20 = _MRLogForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v21 = [v19 debugName];
        int v23 = 138412546;
        uint64_t v24 = v21;
        __int16 v25 = 2112;
        id v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Will add localDevice %@ to context %@", (uint8_t *)&v23, 0x16u);
      }
      if ((([v19 clusterType] - 1) & 0xFFFFFFFD) == 0) {
        MRMediaRemoteSetClusterLeader();
      }
      uint64_t v22 = +[NSNotificationCenter defaultCenter];
      [v22 postNotificationName:MRAVOutputContextModificationRequestToAddLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

id sub_100160DC4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 uid];
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_100160E0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = +[NSMutableDictionary dictionary];
    id v8 = [v6 uniqueIdentifier];
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = [v6 outputDeviceUIDs];
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v10 = objc_msgSend(v5, "msv_compactMap:", &stru_10041F150);
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 8) type]);
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v12 = [*(id *)(a1 + 8) requestDetails];
    id v13 = [v12 reason];
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = [*(id *)(a1 + 8) requestDetails];
    unsigned __int8 v15 = [v14 requestID];
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = objc_msgSend(v5, "msv_map:", &stru_10041F170);
    uint64_t v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412546;
      uint64_t v24 = v16;
      __int16 v25 = 2112;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Will add outputDevices %@ to context %@", (uint8_t *)&v23, 0x16u);
    }

    id v18 = +[NSNotificationCenter defaultCenter];
    [v18 postNotificationName:MRAVOutputContextModificationWillAddOutputDeviceNotification object:v6 userInfo:v7];

    unsigned int v19 = objc_msgSend(v5, "msv_firstWhere:", &stru_10041F190);
    if (v19)
    {
      id v20 = _MRLogForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v21 = [v19 debugName];
        int v23 = 138412546;
        uint64_t v24 = v21;
        __int16 v25 = 2112;
        id v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Will add localDevice %@ to context %@", (uint8_t *)&v23, 0x16u);
      }
      uint64_t v22 = +[NSNotificationCenter defaultCenter];
      [v22 postNotificationName:MRAVOutputContextModificationWillAddLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

void sub_100161160(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = +[NSMutableDictionary dictionary];
    id v8 = [v6 uniqueIdentifier];
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = [v6 outputDeviceUIDs];
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v10 = objc_msgSend(v5, "msv_compactMap:", &stru_10041F1B0);
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 8) type]);
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v12 = [*(id *)(a1 + 8) requestDetails];
    id v13 = [v12 reason];
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = [*(id *)(a1 + 8) requestDetails];
    unsigned __int8 v15 = [v14 requestID];
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = objc_msgSend(v5, "msv_map:", &stru_10041F1D0);
    uint64_t v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 138412546;
      __int16 v25 = v16;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Request to remove outputDevices %@ from context %@", (uint8_t *)&v24, 0x16u);
    }

    id v18 = +[NSNotificationCenter defaultCenter];
    uint64_t v19 = MRAVOutputContextModificationRequestToRemoveLocalDeviceNotification;
    [v18 postNotificationName:MRAVOutputContextModificationRequestToRemoveLocalDeviceNotification object:v6 userInfo:v7];

    id v20 = objc_msgSend(v5, "msv_firstWhere:", &stru_10041F1F0);
    if (v20)
    {
      BOOL v21 = _MRLogForCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = [v20 debugName];
        int v24 = 138412546;
        __int16 v25 = v22;
        __int16 v26 = 2112;
        id v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Request to remove localDevice %@ from context %@", (uint8_t *)&v24, 0x16u);
      }
      int v23 = +[NSNotificationCenter defaultCenter];
      [v23 postNotificationName:v19 object:v6 userInfo:v7];
    }
  }
}

id sub_1001614B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 uid];
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_100161500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = +[NSMutableDictionary dictionary];
    id v8 = [v6 uniqueIdentifier];
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = [v6 outputDeviceUIDs];
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v10 = objc_msgSend(v5, "msv_compactMap:", &stru_10041F210);
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 8) type]);
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v12 = [*(id *)(a1 + 8) requestDetails];
    id v13 = [v12 reason];
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = [*(id *)(a1 + 8) requestDetails];
    unsigned __int8 v15 = [v14 requestID];
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = objc_msgSend(v5, "msv_map:", &stru_10041F230);
    uint64_t v17 = _MRLogForCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412546;
      int v24 = v16;
      __int16 v25 = 2112;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Will remove outputDevices %@ from context %@", (uint8_t *)&v23, 0x16u);
    }

    id v18 = +[NSNotificationCenter defaultCenter];
    [v18 postNotificationName:MRAVOutputContextModificationWillRemoveOutputDeviceNotification object:v6 userInfo:v7];

    uint64_t v19 = objc_msgSend(v5, "msv_firstWhere:", &stru_10041F250);
    if (v19)
    {
      id v20 = _MRLogForCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v21 = [v19 debugName];
        int v23 = 138412546;
        int v24 = v21;
        __int16 v25 = 2112;
        id v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[OutputContextModification] Will remove localDevice %@ from context %@", (uint8_t *)&v23, 0x16u);
      }
      uint64_t v22 = +[NSNotificationCenter defaultCenter];
      [v22 postNotificationName:MRAVOutputContextModificationWillRemoveLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

id sub_100161854(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 uid];
  id v4 = [v2 containsObject:v3];

  return v4;
}

id sub_10016189C(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

id sub_1001618A4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

BOOL sub_1001618AC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

id sub_1001618B4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

id sub_1001618BC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

BOOL sub_1001618C4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

id sub_1001618CC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

id sub_1001618D4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

BOOL sub_1001618DC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

id sub_1001618E4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 uid];
}

id sub_1001618EC(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

BOOL sub_1001618F4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 isLocalDevice];
}

id sub_100161964()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVAudioSessionCategoryPlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E408, *v0);
  }
  off_100477A00 = (uint64_t (*)())sub_1001619F4;
  uint64_t v1 = (void *)qword_10047E408;

  return v1;
}

id sub_1001619F4()
{
  return (id)qword_10047E408;
}

void sub_100161A00(id a1)
{
  qword_10047E4A0 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_100161A2C()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVAudioSessionCategoryPlayAndRecord");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E410, *v0);
  }
  off_100477A08 = (uint64_t (*)())sub_100161ABC;
  uint64_t v1 = (void *)qword_10047E410;

  return v1;
}

id sub_100161ABC()
{
  return (id)qword_10047E410;
}

id sub_100161AC8()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextAddOutputDeviceOptionInitiator");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E418, *v0);
  }
  off_100477A10 = (uint64_t (*)())sub_100161B58;
  uint64_t v1 = (void *)qword_10047E418;

  return v1;
}

id sub_100161B58()
{
  return (id)qword_10047E418;
}

id sub_100161B64()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextAddOutputDeviceOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E440, *v0);
  }
  off_100477A18 = (uint64_t (*)())sub_100161BF4;
  uint64_t v1 = (void *)qword_10047E440;

  return v1;
}

id sub_100161BF4()
{
  return (id)qword_10047E440;
}

id sub_100161C00()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E480, *v0);
  }
  off_100477A20 = (uint64_t (*)())sub_100161C90;
  uint64_t v1 = (void *)qword_10047E480;

  return v1;
}

id sub_100161C90()
{
  return (id)qword_10047E480;
}

id sub_100161C9C()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E460, *v0);
  }
  off_100477A28 = (uint64_t (*)())sub_100161D2C;
  uint64_t v1 = (void *)qword_10047E460;

  return v1;
}

id sub_100161D2C()
{
  return (id)qword_10047E460;
}

id sub_100161D38()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextRemoveOutputDeviceOptionInitiator");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E420, *v0);
  }
  off_100477A30 = (uint64_t (*)())sub_100161DC8;
  uint64_t v1 = (void *)qword_10047E420;

  return v1;
}

id sub_100161DC8()
{
  return (id)qword_10047E420;
}

id sub_100161DD4()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextRemoveOutputDeviceOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E458, *v0);
  }
  off_100477A38 = (uint64_t (*)())sub_100161E64;
  uint64_t v1 = (void *)qword_10047E458;

  return v1;
}

id sub_100161E64()
{
  return (id)qword_10047E458;
}

id sub_100161E70()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E428, *v0);
  }
  off_100477A40 = (uint64_t (*)())sub_100161F00;
  uint64_t v1 = (void *)qword_10047E428;

  return v1;
}

id sub_100161F00()
{
  return (id)qword_10047E428;
}

id sub_100161F0C()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E468, *v0);
  }
  off_100477A48 = (uint64_t (*)())sub_100161F9C;
  uint64_t v1 = (void *)qword_10047E468;

  return v1;
}

id sub_100161F9C()
{
  return (id)qword_10047E468;
}

id sub_100161FA8()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDevicesOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E448, *v0);
  }
  off_100477A50 = (uint64_t (*)())sub_100162038;
  uint64_t v1 = (void *)qword_10047E448;

  return v1;
}

id sub_100162038()
{
  return (id)qword_10047E448;
}

id sub_100162044()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E490, *v0);
  }
  off_100477A58 = (uint64_t (*)())sub_1001620D4;
  uint64_t v1 = (void *)qword_10047E490;

  return v1;
}

id sub_1001620D4()
{
  return (id)qword_10047E490;
}

id sub_1001620E0()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E470, *v0);
  }
  off_100477A60 = (uint64_t (*)())sub_100162170;
  uint64_t v1 = (void *)qword_10047E470;

  return v1;
}

id sub_100162170()
{
  return (id)qword_10047E470;
}

id sub_10016217C()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDevicePasswordKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E438, *v0);
  }
  off_100477A68 = (uint64_t (*)())sub_10016220C;
  uint64_t v1 = (void *)qword_10047E438;

  return v1;
}

id sub_10016220C()
{
  return (id)qword_10047E438;
}

id sub_100162218()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDeviceCancelIfAuthRequiredKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E430, *v0);
  }
  off_100477A70 = (uint64_t (*)())sub_1001622A8;
  uint64_t v1 = (void *)qword_10047E430;

  return v1;
}

id sub_1001622A8()
{
  return (id)qword_10047E430;
}

id sub_1001622B4()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDeviceFadePlaybackKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E450, *v0);
  }
  off_100477A78 = (uint64_t (*)())sub_100162344;
  uint64_t v1 = (void *)qword_10047E450;

  return v1;
}

id sub_100162344()
{
  return (id)qword_10047E450;
}

id sub_100162350()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E488, *v0);
  }
  off_100477A80 = (uint64_t (*)())sub_1001623E0;
  uint64_t v1 = (void *)qword_10047E488;

  return v1;
}

id sub_1001623E0()
{
  return (id)qword_10047E488;
}

id sub_1001623EC()
{
  if (qword_10047E498 != -1) {
    dispatch_once(&qword_10047E498, &stru_10041F270);
  }
  id v0 = (id *)dlsym((void *)qword_10047E4A0, "AVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey");
  if (v0) {
    objc_storeStrong((id *)&qword_10047E478, *v0);
  }
  off_100477A88 = (uint64_t (*)())sub_10016247C;
  uint64_t v1 = (void *)qword_10047E478;

  return v1;
}

id sub_10016247C()
{
  return (id)qword_10047E478;
}

void sub_100162614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100162634(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSuggestionCountIfNeeded];
}

void sub_100162864(uint64_t a1)
{
  id v2 = [objc_alloc((Class)MRMediaSuggestionRequest) initWithBlock:&stru_10041F2B0];
  id v3 = [*(id *)(a1 + 32) suggestionPreferences];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100162930;
  void v4[3] = &unk_10041F2D8;
  void v4[4] = *(void *)(a1 + 32);
  [v2 performWithPreferences:v3 completion:v4];
}

void sub_100162924(id a1, MRMediaSuggestionRequestConfigurable *a2)
{
}

void sub_100162930(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = _MRLogForCategory();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_100331678((uint64_t)v6, v7);
  }

  if (v6)
  {
    id v8 = _MRLogForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[MRDLockScreenContentController] Failed to retrieve suggestions with error %@", (uint8_t *)&v11, 0xCu);
    }
    id v9 = 0;
  }
  else
  {
    id v8 = [v5 objectForKeyedSubscript:MRSuggestionContextHomeScreen];
    id v9 = [v8 count];
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  id v10 = [*(id *)(a1 + 32) suggestionCount];
  [*(id *)(a1 + 32) setSuggestionCount:v9];
  [*(id *)(a1 + 32) setIsQuerying:0];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
  if (v9 != v10) {
    [*(id *)(a1 + 32) _notifyDelegate];
  }
}

void sub_100162F4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100163010;
  void v6[3] = &unk_1004158D8;
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100163010(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) name];
  [v1 _reevaluateWithReason:v2];
}

id sub_100163064(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluateWithReason:@"Startup"];
}

void sub_1001630C8(id a1)
{
  id v1 = [[MRDPreemptiveRemoteControlConnectionManager alloc] _init];
  uint64_t v2 = qword_10047E4A8;
  qword_10047E4A8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100163208(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    [*(id *)(a1 + 40) appendFormat:@"    previousGroupID = %@\n", *(void *)(v2 + 32)];
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if ([*(id *)(v2 + 40) operationCount]) {
    objc_msgSend(*(id *)(a1 + 40), "appendFormat:", @"    groupLeaderOperationsCount = %ld\n", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "operationCount"));
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 8))
  {
    [*(id *)(a1 + 40) appendFormat:@"    groupLeaderEndpoint = %@\n", *(void *)(v3 + 8)];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (*(void *)(v3 + 48))
  {
    [*(id *)(a1 + 40) appendFormat:@"    previousClusterLeaderID = %@\n", *(void *)(v3 + 48)];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  id result = [*(id *)(v3 + 56) operationCount];
  if (result) {
    id result = objc_msgSend(*(id *)(a1 + 40), "appendFormat:", @"    clusterLeaderOperationsCount = %ld\n", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "operationCount"));
  }
  if (*(void *)(*(void *)(a1 + 32) + 16)) {
    return [*(id *)(a1 + 40) appendFormat:@"    clusterLeaderEndpoint = %@\n", *(void *)(*(void *)(a1 + 32) + 16)];
  }
  return result;
}

void sub_1001633C4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) observers];

  if (!v2)
  {
    uint64_t v3 = +[NSHashTable weakObjectsHashTable];
    [*(id *)(a1 + 32) setObservers:v3];
  }
  id v4 = [*(id *)(a1 + 32) observers];
  [v4 addObject:*(void *)(a1 + 40)];
}

void sub_100163508(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) observers];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1001639B0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v7, "preemptiveRemoteControlConnectionManager:didConnectToGroupLeader:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100163F24(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v7, "preemptiveRemoteControlConnectionManager:didConnectToPreferredClusterLeader:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1001640CC()
{
  id v0 = +[MRDMediaRemoteServer server];
  id v1 = [v0 deviceInfo];
}

void sub_1001643CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1001643EC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isAirPlayActive])
  {
    unsigned __int8 v2 = [*(id *)(a1 + 32) parentGroupContainsDiscoverableGroupLeader];
    id v3 = objc_alloc((Class)MRResultReason);
    if (v2)
    {
      CFStringRef v4 = @"airplayActive with discoverableGroupLeader";
      uint64_t v5 = 1;
      goto LABEL_7;
    }
    CFStringRef v4 = @"parentGroupContainsDiscoverableGroupLeader=YES";
  }
  else
  {
    id v3 = objc_alloc((Class)MRResultReason);
    CFStringRef v4 = @"airplayActive=NO";
  }
  uint64_t v5 = 0;
LABEL_7:
  id v6 = [v3 initWithResult:v5 reason:v4];

  return v6;
}

id sub_10016447C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) previousGroupID];
  id v3 = [*(id *)(a1 + 40) groupUID];
  if (v2 == v3)
  {

LABEL_5:
    long long v8 = [*(id *)(a1 + 32) groupLeaderOperations];
    id v9 = [v8 operationCount];

    if (v9)
    {
      id v6 = objc_alloc((Class)MRResultReason);
      CFStringRef v7 = @"operationInProgress";
    }
    else
    {
      long long v10 = [*(id *)(a1 + 32) groupLeader];

      id v6 = objc_alloc((Class)MRResultReason);
      if (!v10)
      {
        CFStringRef v7 = @"Unknown";
        goto LABEL_11;
      }
      CFStringRef v7 = @"exisitingConnection";
    }
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  CFStringRef v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if (v5) {
    goto LABEL_5;
  }
  id v6 = objc_alloc((Class)MRResultReason);
  CFStringRef v7 = @"groupLeaderChanged";
LABEL_11:
  uint64_t v11 = 1;
LABEL_12:
  id v12 = [v6 initWithResult:v11 reason:v7];

  return v12;
}

void sub_1001645A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained endpoint];

  CFStringRef v4 = [*(id *)(a1 + 32) queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10016466C;
  void v6[3] = &unk_1004158D8;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_sync(v4, v6);
}

id sub_10016466C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setGroupLeader:*(void *)(a1 + 40)];
}

void sub_1001648F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100164910(uint64_t a1)
{
  if (![*(id *)(a1 + 32) clusterType])
  {
    id v5 = objc_alloc((Class)MRResultReason);
    CFStringRef v6 = @"clusterType=None";
    goto LABEL_5;
  }
  id v2 = [*(id *)(a1 + 32) clusterLeaderID];
  id v3 = [*(id *)(a1 + 32) deviceUID];
  unsigned int v4 = [v2 isEqualToString:v3];

  id v5 = objc_alloc((Class)MRResultReason);
  if (v4)
  {
    CFStringRef v6 = @"isClusterLeader=YES";
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  CFStringRef v6 = @"isClusterLeader=NO";
  uint64_t v7 = 1;
LABEL_7:
  id v8 = [v5 initWithResult:v7 reason:v6];

  return v8;
}

id sub_1001649D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) previousClusterLeaderID];
  id v3 = [*(id *)(a1 + 40) clusterLeaderID];
  if (v2 == v3)
  {

LABEL_5:
    id v8 = [*(id *)(a1 + 32) clusterLeaderOperations];
    id v9 = [v8 operationCount];

    if (v9)
    {
      id v6 = objc_alloc((Class)MRResultReason);
      CFStringRef v7 = @"operationInProgress";
    }
    else
    {
      long long v10 = [*(id *)(a1 + 32) preferredClusterLeader];

      id v6 = objc_alloc((Class)MRResultReason);
      if (!v10)
      {
        CFStringRef v7 = @"Unknown";
        goto LABEL_11;
      }
      CFStringRef v7 = @"exisitingConnection";
    }
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  unsigned int v4 = v3;
  unsigned __int8 v5 = [v2 isEqual:v3];

  if (v5) {
    goto LABEL_5;
  }
  id v6 = objc_alloc((Class)MRResultReason);
  CFStringRef v7 = @"clusterLeaderChanged";
LABEL_11:
  uint64_t v11 = 1;
LABEL_12:
  id v12 = [v6 initWithResult:v11 reason:v7];

  return v12;
}

void sub_100164AF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained endpoint];

  unsigned int v4 = [*(id *)(a1 + 32) queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100164BC4;
  void v6[3] = &unk_1004158D8;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_sync(v4, v6);
}

id sub_100164BC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPreferredClusterLeader:*(void *)(a1 + 40)];
}

void sub_1001650DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [objc_alloc((Class)NSError) initWithMRError:25];
    id v9 = v7;
  }
  else
  {
    if (!v6)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(v10 + 8);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_100165204;
      v12[3] = &unk_1004175B8;
      void v12[4] = v10;
      id v13 = v5;
      id v14 = 0;
      [v13 connectToExternalDeviceWithOptions:0 details:v11 completion:v12];

      goto LABEL_7;
    }
    objc_msgSend(v6, "mr_errorByEnvelopingWithMRError:", 47);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v9 = *(void **)(a1 + 32);
  }
  [v9 finishWithError:v8];

LABEL_7:
}

void sub_100165204(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    unsigned int v4 = *(void **)(a1 + 32);
    id v5 = [objc_alloc((Class)NSError) initWithMRError:25];
    id v8 = v5;
    id v6 = v4;
LABEL_5:
    [v6 finishWithError:v5];

    return;
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 48), "mr_errorByEnvelopingWithMRError:", 100);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v8 = v5;
    id v6 = *(void **)(a1 + 32);
    goto LABEL_5;
  }
  [*(id *)(a1 + 32) setEndpoint:*(void *)(a1 + 40)];
  id v7 = *(void **)(a1 + 32);

  [v7 finish];
}

void sub_100165A84(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [objc_alloc((Class)NSError) initWithMRError:25];
    [v5 finishWithError:v6];
  }
  else
  {
    if (v4)
    {
      id v7 = objc_msgSend(v4, "mr_errorByEnvelopingWithMRError:", 47);
      [*(id *)(a1 + 32) finishWithError:v7];
    }
    else
    {
      id v8 = +[MRDMediaRemoteServer server];
      id v9 = [v8 routingServer];
      id v7 = [v9 createTransientEndpointForOutputDeviceUID:*(void *)(*(void *)(a1 + 32) + 16) details:*(void *)(*(void *)(a1 + 32) + 8)];

      if (v7)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = *(void *)(v10 + 8);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        void v13[2] = sub_100165C24;
        v13[3] = &unk_1004175B8;
        void v13[4] = v10;
        id v14 = v7;
        id v15 = 0;
        [v14 connectToExternalDeviceWithOptions:0 details:v11 completion:v13];
      }
      else
      {
        id v12 = objc_msgSend(0, "mr_errorByEnvelopingWithMRError:", 39);
        [*(id *)(a1 + 32) finishWithError:v12];
      }
    }
  }
}

void sub_100165C24(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [objc_alloc((Class)NSError) initWithMRError:25];
    id v8 = v5;
    id v6 = v4;
LABEL_5:
    [v6 finishWithError:v5];

    return;
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 48), "mr_errorByEnvelopingWithMRError:", 100);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v8 = v5;
    id v6 = *(void **)(a1 + 32);
    goto LABEL_5;
  }
  [*(id *)(a1 + 32) setEndpoint:*(void *)(a1 + 40)];
  id v7 = *(void **)(a1 + 32);

  [v7 finish];
}

void sub_100166254(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void sub_100166A94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 route:*(void *)(a1 + 40) endpoint:*(void *)(a1 + 48) bundleIdentifier:*(void *)(a1 + 56) emittedEvent:*(void *)(a1 + 64)];
}

id sub_100166D24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onQueue_controller:didLoadResponse:retry:", *(void *)(a1 + 40), *(void *)(a1 + 48), 1);
}

id sub_1001670C4(uint64_t a1)
{
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    id v5 = [v3 destination];
    uint64_t v6 = *(void *)(a1 + 48);
    int v8 = 138413058;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRDRRC].NPM %@ - endpoint was nil, trying again - %@ (%@), response: %@", (uint8_t *)&v8, 0x2Au);
  }
  return objc_msgSend(*(id *)(a1 + 32), "onQueue_controller:didLoadResponse:retry:", *(void *)(a1 + 40), *(void *)(a1 + 48), 0);
}

void sub_10016732C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) destination];
  id v6 = [v2 endpoint];

  id v3 = [*(id *)(a1 + 32) destination];
  uint64_t v4 = [v3 client];
  id v5 = [v4 representedBundleID];

  objc_msgSend(*(id *)(a1 + 40), "onQueue_setLastPlaybackState:bundleIdentifier:forEndpoint:", *(unsigned int *)(a1 + 48), v5, v6);
}

uint64_t sub_10016775C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100167788(unsigned int a1)
{
  return (a1 < 0xC) & (0xF33u >> a1);
}

BOOL sub_1001677A0(unsigned int a1)
{
  if (a1 > 0xB) {
    return a1 - 127 >= 2;
  }
  uint64_t v1 = 0;
  if (((1 << a1) & 0xA0A) == 0) {
    return a1 - 127 >= 2;
  }
  return v1;
}

void sub_1001677D8(void *a1, void *a2)
{
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_10016786C;
  applier[3] = &unk_10041F398;
  id v5 = a1;
  id v3 = v5;
  xpc_dictionary_apply(a2, applier);
}

uint64_t sub_10016786C(uint64_t a1, const char *a2, void *a3)
{
  return 1;
}

uint64_t sub_1001678A4(void *a1, uint64_t a2, void *a3, void *a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100167954;
  v10[3] = &unk_10041F3E0;
  id v11 = a3;
  uint64_t v12 = a2;
  id v7 = v11;
  uint64_t v8 = sub_10000BDE0(a1, v10, a4);

  return v8;
}

void sub_100167954(uint64_t a1, void *a2)
{
  uint64_t v4 = *(const char **)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  xpc_object_t xdict = a2;
  xpc_dictionary_set_data(xdict, v4, [v5 bytes], (size_t)objc_msgSend(*(id *)(a1 + 32), "length"));
}

uint64_t sub_1001679D8(void *a1, unsigned int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100006F1C;
  v3[3] = &unk_10041F3B8;
  void v3[4] = "MRXPC_ERROR_CODE_KEY";
  void v3[5] = 1;
  v3[6] = a2;
  return sub_10000BDE0(a1, v3, 0);
}

void sub_100167A5C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = a3;
  id v10 = a4;
  qos_class_t v11 = qos_class_self();
  dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(v9, 0);
  id v13 = v9;
  __int16 v14 = v13;
  if (qos_class < v11)
  {
    uint64_t v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    qos_class_t v16 = qos_class_self();
    uint64_t v17 = dispatch_queue_attr_make_with_qos_class(v15, v16, 0);
    __int16 v14 = dispatch_queue_create_with_target_V2(0, v17, v13);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100167BC0;
  handler[3] = &unk_10041CEB0;
  id v20 = v10;
  id v18 = v10;
  xpc_connection_send_message_with_reply(v7, v8, v14, handler);
}

uint64_t sub_100167BC0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100167BD8(void *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = dispatch_get_global_queue(0, 0);
  id v6 = v2;
  MRProcessIDForApplication();
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);

  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_100167CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100167CF8(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 > 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100167D14(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  kdebug_trace();
  if (qword_10047E4C0 != -1) {
    dispatch_once(&qword_10047E4C0, &stru_10041F400);
  }
  id v16 = 0;
  id v8 = +[LSApplicationIdentity identityStringsForApplicationWithBundleIdentifier:v5 error:&v16];
  id v9 = v16;
  if (v9) {
    goto LABEL_8;
  }
  id v10 = objc_alloc((Class)LSApplicationIdentity);
  qos_class_t v11 = [v8 firstObject];
  id v12 = [v10 initWithIdentityString:v11];

  if (![(id)qword_10047E4B8 requiresPreflightForApplication:v12])
  {

LABEL_8:
    qos_class_t v14 = qos_class_self();
    dispatch_get_global_queue(v14, 0);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v15 = v7;
    MSVLaunchApplicationWithOptions();
    id v13 = v15;
    goto LABEL_9;
  }
  if (v7)
  {
    id v13 = [objc_alloc((Class)NSError) initWithMRError:126];
    (*((void (**)(id, id))v7 + 2))(v7, v13);
LABEL_9:
  }
}

void sub_100167EF8(id a1)
{
  id v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.mediaremote.launchApplication.preflightManager", v1);

  id v2 = [objc_alloc((Class)PDCPreflightManager) initWithTargetQueue:v4];
  id v3 = (void *)qword_10047E4B8;
  qword_10047E4B8 = (uint64_t)v2;
}

uint64_t sub_100167F80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }

  return kdebug_trace();
}

void sub_100167FD0(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  kdebug_trace();
  qos_class_t v11 = +[NSDate date];
  id v12 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", @"MRDLaunchApplicationWithReason", v8];
  id v13 = v12;
  if (v7) {
    [v12 appendFormat:@" for %@", v7];
  }
  qos_class_t v14 = _MRLogForCategory();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1001684B4;
  v28[3] = &unk_100418348;
  id v15 = v8;
  id v29 = v15;
  id v16 = v7;
  id v30 = v16;
  id v31 = @"MRDLaunchApplicationWithReason";
  id v17 = v11;
  id v32 = v17;
  id v18 = v10;
  id v33 = v18;
  uint64_t v19 = objc_retainBlock(v28);
  if (sub_100168340((uint64_t)v19, v16))
  {
    id v20 = [v9 objectForKeyedSubscript:kMRMediaRemoteOptionCommandType];
    [v20 unsignedIntValue];

    id v27 = (void *)MRMediaRemoteCopyCommandDescription();
    id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@.%@.%@", @"com.apple.MediaRemote.command", v27, @"invoked.notify.client", v16];
    id v22 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@.%@", @"com.apple.MediaRemote.command", @"invoked.notify.client", v16];
    id v23 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", @"com.apple.MediaRemote.command", @"invoked.notify.client"];
    id v24 = v21;
    notify_post((const char *)[v24 UTF8String]);
    id v25 = v22;
    notify_post((const char *)[v25 UTF8String]);
    id v26 = v23;
    notify_post((const char *)[v26 UTF8String]);
    ((void (*)(void *, void))v19[2])(v19, 0);
  }
  else
  {
    sub_100167D14(v16, v9, v19);
  }
}

id sub_100168340(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_10047E4D8 != -1) {
    dispatch_once(&qword_10047E4D8, &stru_10041F420);
  }
  int IsAudioAccessory = MSVDeviceIsAudioAccessory();
  dispatch_queue_t v4 = &qword_10047E4D0;
  if (!IsAudioAccessory) {
    dispatch_queue_t v4 = &qword_10047E4C8;
  }
  id v5 = [(id)*v4 containsObject:v2];

  return v5;
}

void sub_1001683C0(id a1)
{
  id v1 = [objc_alloc((Class)NSSet) initWithArray:&off_100438698];
  id v2 = (void *)qword_10047E4C8;
  qword_10047E4C8 = (uint64_t)v1;

  id v7 = [objc_alloc((Class)NSMutableSet) initWithArray:&off_1004386B0];
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    id v3 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID();
    [v7 addObject:v3];
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    dispatch_queue_t v4 = (void *)MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID();
    [v7 addObject:v4];
  }
  id v5 = [v7 copy];
  id v6 = (void *)qword_10047E4D0;
  qword_10047E4D0 = (uint64_t)v5;
}

void sub_1001684B4(void *a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v12 = [objc_alloc((Class)NSString) initWithFormat:@"post-launch setup for  %@", a1[4]];
    id v13 = [[MRDTaskAssertion alloc] initWithType:1 pid:0 bundleID:a1[5] name:v12];
    [(MRDTaskAssertion *)v13 invalidateInDuration:30.0];

    uint64_t v14 = a1[5];
    id v5 = _MRLogForCategory();
    BOOL v15 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (!v15) {
        goto LABEL_14;
      }
      id v17 = (void *)a1[5];
      uint64_t v16 = a1[6];
      uint64_t v18 = a1[4];
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:a1[7]];
      *(_DWORD *)long long buf = 138544130;
      uint64_t v28 = v16;
      __int16 v29 = 2114;
      uint64_t v30 = v18;
      __int16 v31 = 2114;
      id v32 = v17;
      __int16 v33 = 2048;
      uint64_t v34 = v19;
      id v20 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      id v21 = v5;
      uint32_t v22 = 42;
    }
    else
    {
      if (!v15) {
        goto LABEL_14;
      }
      uint64_t v23 = a1[6];
      uint64_t v24 = a1[4];
      id v10 = +[NSDate date];
      [v10 timeIntervalSinceDate:a1[7]];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v28 = v23;
      __int16 v29 = 2114;
      uint64_t v30 = v24;
      __int16 v31 = 2048;
      id v32 = v25;
      id v20 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v21 = v5;
      uint32_t v22 = 32;
    }
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
    goto LABEL_13;
  }
  uint64_t v4 = a1[5];
  id v5 = _MRLogForCategory();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (!v6) {
      goto LABEL_14;
    }
    uint64_t v8 = a1[5];
    uint64_t v7 = a1[6];
    uint64_t v9 = a1[4];
    id v10 = +[NSDate date];
    [v10 timeIntervalSinceDate:a1[7]];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v28 = v7;
    __int16 v29 = 2114;
    uint64_t v30 = v9;
    __int16 v31 = 2114;
    id v32 = v3;
    __int16 v33 = 2114;
    uint64_t v34 = v8;
    __int16 v35 = 2048;
    uint64_t v36 = v11;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", buf, 0x34u);
LABEL_13:

    goto LABEL_14;
  }
  if (v6) {
    sub_1003318E8();
  }
LABEL_14:

  uint64_t v26 = a1[8];
  if (v26) {
    (*(void (**)(uint64_t, id))(v26 + 16))(v26, v3);
  }
  kdebug_trace();
}

void sub_100168794(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  uint64_t v7 = +[FBSOpenApplicationOptions optionsWithDictionary:a2];
  uint64_t v8 = +[FBSOpenApplicationService serviceWithDefaultShellEndpoint];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100168884;
  v10[3] = &unk_10041F448;
  id v11 = v5;
  id v9 = v5;
  [v8 openApplication:v6 withOptions:v7 completion:v10];
}

uint64_t sub_100168884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100168898(void *a1, void *a2, void *a3, double a4)
{
}

void sub_1001688A8(void *a1, void *a2, void *a3, void *a4, double a5)
{
  id v9 = a1;
  id v37 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = +[NSDate date];
  id v13 = +[NSUUID UUID];
  uint64_t v14 = [v13 UUIDString];

  id v15 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", @"launchAppAndWaitForXpcConnection", v14];
  uint64_t v16 = v15;
  if (v9) {
    [v15 appendFormat:@" for %@", v9];
  }
  id v17 = _MRLogForCategory();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v57 = 0x3032000000;
  uint64_t v58 = sub_100168DEC;
  id v59 = sub_100168DFC;
  id v60 = 0;
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_100168E04;
  v49[3] = &unk_10041F470;
  id v18 = v9;
  id v50 = v18;
  uint64_t v51 = @"launchAppAndWaitForXpcConnection";
  id v19 = v14;
  id v52 = v19;
  id v20 = v12;
  id v53 = v20;
  id v21 = v11;
  id v54 = v21;
  p_long long buf = &buf;
  uint32_t v22 = objc_retainBlock(v49);
  id v23 = objc_alloc((Class)MRBlockGuard);
  id v24 = [objc_alloc((Class)NSString) initWithFormat:@"Application <%@> waiting for xpcConnection", v18];
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  v47[2] = sub_10016921C;
  v47[3] = &unk_100415FA8;
  id v25 = v22;
  id v48 = v25;
  id v26 = [v23 initWithTimeout:v24 reason:v47 handler:a5];

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10016923C;
  v44[3] = &unk_10041F498;
  id v27 = v26;
  id v45 = v27;
  uint64_t v28 = v25;
  id v46 = v28;
  __int16 v29 = objc_retainBlock(v44);
  uint64_t v30 = +[NSNotificationCenter defaultCenter];
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_1001692B4;
  v41[3] = &unk_10041D658;
  id v31 = v18;
  id v42 = v31;
  id v32 = v29;
  id v43 = v32;
  uint64_t v33 = [v30 addObserverForName:@"MRDMediaRemoteClientDidConnect" object:0 queue:0 usingBlock:v41];
  uint64_t v34 = *(void **)(*((void *)&buf + 1) + 40);
  *(void *)(*((void *)&buf + 1) + 40) = v33;

  __int16 v35 = +[MRDMediaRemoteServer server];
  uint64_t v36 = [v35 clientForBundleIdentifier:v31];

  if (v36)
  {
    ((void (*)(void *, void *, void))v32[2])(v32, v36, 0);
  }
  else
  {
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_100169340;
    void v38[3] = &unk_1004187A8;
    id v39 = v31;
    uint64_t v40 = v32;
    sub_100167FD0(v39, @"launchAppAndWaitForXpcConnection", v10, v38);
  }
  _Block_object_dispose(&buf, 8);
}

void sub_100168DC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100168DEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100168DFC(uint64_t a1)
{
}

void sub_100168E04(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v15 = [v5 displayName];

    uint64_t v16 = a1[4];
    uint64_t v8 = _MRLogForCategory();
    BOOL v17 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v18 = a1[5];
        uint64_t v19 = a1[6];
        id v13 = [v5 displayName];
        uint64_t v20 = a1[4];
        id v21 = +[NSDate date];
        [v21 timeIntervalSinceDate:a1[7]];
        int v43 = 138544386;
        uint64_t v44 = v18;
        __int16 v45 = 2114;
        uint64_t v46 = v19;
        __int16 v47 = 2112;
        id v48 = v13;
        __int16 v49 = 2114;
        uint64_t v50 = v20;
        __int16 v51 = 2048;
        uint64_t v52 = v22;
        id v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v24 = v8;
        uint32_t v25 = 52;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v33 = a1[5];
        uint64_t v34 = a1[6];
        id v13 = [v5 displayName];
        id v21 = +[NSDate date];
        [v21 timeIntervalSinceDate:a1[7]];
        int v43 = 138544130;
        uint64_t v44 = v33;
        __int16 v45 = 2114;
        uint64_t v46 = v34;
        __int16 v47 = 2112;
        id v48 = v13;
        __int16 v49 = 2048;
        uint64_t v50 = v35;
        id v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        id v24 = v8;
        uint32_t v25 = 42;
      }
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v43, v25);
    }
    else
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v27 = a1[5];
        uint64_t v26 = a1[6];
        uint64_t v28 = (void *)a1[4];
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[7]];
        int v43 = 138544130;
        uint64_t v44 = v27;
        __int16 v45 = 2114;
        uint64_t v46 = v26;
        __int16 v47 = 2114;
        id v48 = v28;
        __int16 v49 = 2048;
        uint64_t v50 = v29;
        uint64_t v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v31 = v8;
        uint32_t v32 = 42;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v36 = a1[5];
        uint64_t v37 = a1[6];
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[7]];
        int v43 = 138543874;
        uint64_t v44 = v36;
        __int16 v45 = 2114;
        uint64_t v46 = v37;
        __int16 v47 = 2048;
        id v48 = v38;
        uint64_t v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v31 = v8;
        uint32_t v32 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v43, v32);
    }
    goto LABEL_20;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = _MRLogForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v11 = a1[5];
    uint64_t v10 = a1[6];
    uint64_t v12 = a1[4];
    id v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:a1[7]];
    int v43 = 138544386;
    uint64_t v44 = v11;
    __int16 v45 = 2114;
    uint64_t v46 = v10;
    __int16 v47 = 2114;
    id v48 = v6;
    __int16 v49 = 2114;
    uint64_t v50 = v12;
    __int16 v51 = 2048;
    uint64_t v52 = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v43, 0x34u);
LABEL_20:

    goto LABEL_21;
  }
  if (v9) {
    sub_100331994();
  }
LABEL_21:

  uint64_t v39 = a1[8];
  if (v39) {
    (*(void (**)(uint64_t, id, id))(v39 + 16))(v39, v5, v6);
  }
  if (*(void *)(*(void *)(a1[9] + 8) + 40))
  {
    uint64_t v40 = +[NSNotificationCenter defaultCenter];
    [v40 removeObserver:*(void *)(*(void *)(a1[9] + 8) + 40)];

    uint64_t v41 = *(void *)(a1[9] + 8);
    id v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = 0;
  }
}

uint64_t sub_10016921C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_10016923C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001692B4(uint64_t a1, void *a2)
{
  id v5 = [a2 object];
  id v3 = [v5 bundleIdentifier];
  unsigned int v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if (v4) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100169340(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = +[MRDMediaRemoteServer server];
  unsigned int v4 = [v3 clientForBundleIdentifier:*(void *)(a1 + 32)];

  if (v4)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (!v6) {
      goto LABEL_6;
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v5();
LABEL_6:
}

void sub_1001693F4(void *a1, void *a2, void *a3, double a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = +[NSDate date];
  uint64_t v11 = +[NSUUID UUID];
  uint64_t v12 = [v11 UUIDString];

  id v13 = [objc_alloc((Class)NSMutableString) initWithFormat:@"%@<%@>", @"launchAppAndWaitForCanBeNowPlaying", v12];
  uint64_t v14 = v13;
  if (v7) {
    [v13 appendFormat:@" for %@", v7];
  }
  id v15 = _MRLogForCategory();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1001696C4;
  v29[3] = &unk_10041F4C0;
  id v16 = v7;
  id v30 = v16;
  id v31 = @"launchAppAndWaitForCanBeNowPlaying";
  id v32 = v12;
  id v33 = v10;
  id v34 = v8;
  id v17 = v8;
  id v18 = v10;
  id v19 = v12;
  uint64_t v20 = objc_retainBlock(v29);
  +[NSDate date];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100169A8C;
  v24[3] = &unk_10041DA28;
  id v26 = v16;
  id v27 = v20;
  double v28 = a4;
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  id v21 = v16;
  id v22 = v25;
  id v23 = v20;
  sub_1001688A8(v21, 0, v9, v24, a4);
}

void sub_1001696C4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v15 = [v5 displayName];

    uint64_t v16 = a1[4];
    id v8 = _MRLogForCategory();
    BOOL v17 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v15)
    {
      if (v16)
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v27 = a1[5];
        uint64_t v26 = a1[6];
        double v28 = (void *)a1[4];
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[7]];
        int v39 = 138544130;
        uint64_t v40 = v27;
        __int16 v41 = 2114;
        uint64_t v42 = v26;
        __int16 v43 = 2114;
        id v44 = v28;
        __int16 v45 = 2048;
        uint64_t v46 = v29;
        id v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v31 = v8;
        uint32_t v32 = 42;
      }
      else
      {
        if (!v17) {
          goto LABEL_21;
        }
        uint64_t v36 = a1[5];
        uint64_t v37 = a1[6];
        id v13 = +[NSDate date];
        [v13 timeIntervalSinceDate:a1[7]];
        int v39 = 138543874;
        uint64_t v40 = v36;
        __int16 v41 = 2114;
        uint64_t v42 = v37;
        __int16 v43 = 2048;
        id v44 = v38;
        id v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v31 = v8;
        uint32_t v32 = 32;
      }
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v39, v32);
      goto LABEL_20;
    }
    if (v16)
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v18 = a1[5];
      uint64_t v19 = a1[6];
      id v13 = [v5 displayName];
      uint64_t v20 = a1[4];
      id v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:a1[7]];
      int v39 = 138544386;
      uint64_t v40 = v18;
      __int16 v41 = 2114;
      uint64_t v42 = v19;
      __int16 v43 = 2112;
      id v44 = v13;
      __int16 v45 = 2114;
      uint64_t v46 = v20;
      __int16 v47 = 2048;
      uint64_t v48 = v22;
      id v23 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v24 = v8;
      uint32_t v25 = 52;
    }
    else
    {
      if (!v17) {
        goto LABEL_21;
      }
      uint64_t v33 = a1[5];
      uint64_t v34 = a1[6];
      id v13 = [v5 displayName];
      id v21 = +[NSDate date];
      [v21 timeIntervalSinceDate:a1[7]];
      int v39 = 138544130;
      uint64_t v40 = v33;
      __int16 v41 = 2114;
      uint64_t v42 = v34;
      __int16 v43 = 2112;
      id v44 = v13;
      __int16 v45 = 2048;
      uint64_t v46 = v35;
      id v23 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v24 = v8;
      uint32_t v25 = 42;
    }
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v39, v25);

    goto LABEL_20;
  }
  uint64_t v7 = a1[4];
  id v8 = _MRLogForCategory();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (v9)
    {
      uint64_t v11 = a1[5];
      uint64_t v10 = a1[6];
      uint64_t v12 = a1[4];
      id v13 = +[NSDate date];
      [v13 timeIntervalSinceDate:a1[7]];
      int v39 = 138544386;
      uint64_t v40 = v11;
      __int16 v41 = 2114;
      uint64_t v42 = v10;
      __int16 v43 = 2114;
      id v44 = v6;
      __int16 v45 = 2114;
      uint64_t v46 = v12;
      __int16 v47 = 2048;
      uint64_t v48 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v39, 0x34u);
LABEL_20:
    }
  }
  else if (v9)
  {
    sub_100331994();
  }
LABEL_21:

  (*(void (**)(void))(a1[8] + 16))();
}

void sub_100169A8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    double v7 = *(double *)(a1 + 56);
    id v8 = +[NSDate date];
    [v8 timeIntervalSinceDate:*(void *)(a1 + 32)];
    double v10 = v7 - v9;

    id v11 = objc_alloc((Class)MRBlockGuard);
    id v12 = [objc_alloc((Class)NSString) initWithFormat:@"Application <%@> waiting for CanBeNowPlaying", *(void *)(a1 + 40)];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100169DD0;
    v28[3] = &unk_100415FA8;
    id v29 = *(id *)(a1 + 48);
    id v13 = [v11 initWithTimeout:v12 reason:v28 handler:v10];

    objc_initWeak(&location, v5);
    uint64_t v14 = +[NSNotificationCenter defaultCenter];
    uint64_t v15 = kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100169DF0;
    v22[3] = &unk_10041F4E8;
    objc_copyWeak(&v26, &location);
    id v23 = *(id *)(a1 + 40);
    id v16 = v13;
    id v24 = v16;
    id v25 = *(id *)(a1 + 48);
    BOOL v17 = [v14 addObserverForName:v15 object:0 queue:0 usingBlock:v22];

    if ([v5 canBeNowPlaying])
    {
      if ([v16 disarm]) {
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      }
      uint64_t v18 = +[NSNotificationCenter defaultCenter];
      [v18 removeObserver:v17];
    }
    else
    {
      dispatch_time_t v19 = dispatch_time(0, (uint64_t)((v10 + 2.0) * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100169EC0;
      block[3] = &unk_100415CC8;
      id v21 = v17;
      dispatch_after(v19, (dispatch_queue_t)&_dispatch_main_q, block);
      uint64_t v18 = v21;
    }

    objc_destroyWeak(&v26);
    objc_destroyWeak(&location);
  }
}

void sub_100169DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100169DD0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a2);
  }
  return result;
}

void sub_100169DF0(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 56);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = [v4 userInfo];

  id v6 = MRGetClientFromUserInfo();

  double v7 = [v6 bundleIdentifier];
  LODWORD(v5) = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v5 && [*(id *)(a1 + 40) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100169EC0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(a1 + 32)];
}

id sub_100169F18(void *a1)
{
  id v1 = a1;
  id v2 = +[AVSystemController sharedAVSystemController];
  id v7 = 0;
  id v3 = [v2 setAttribute:v1 forKey:AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute error:&v7];
  id v4 = v7;

  if ((v3 & 1) == 0)
  {
    id v5 = _MRLogForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v9 = v1;
      __int16 v10 = 2112;
      id v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error blessing %@ for playback initialization. %@", buf, 0x16u);
    }
  }
  return v3;
}

uint64_t sub_10016A02C(void *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = dispatch_get_global_queue(0, 0);
  id v6 = v2;
  MRProcessIDForApplication();
  dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = *((unsigned int *)v8 + 6);

  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_10016A134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10016A14C(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10016A160(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_10016A1D8(a1);
  id v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"FallbackIdentifier-%d", a1);
  }
  id v5 = v4;

  return v5;
}

id sub_10016A1D8(int a1)
{
  dispatch_semaphore_t v2 = +[NSProcessInfo processInfo];
  unsigned int v3 = [v2 processIdentifier];

  if (v3 == a1)
  {
    id v4 = +[NSBundle mainBundle];
    id v5 = [v4 bundleIdentifier];
  }
  else
  {
    id v6 = +[MRDMediaRemoteServer server];
    uint64_t v7 = [v6 allClients];

    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = v7;
    id v8 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v4);
          }
          id v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          if (objc_msgSend(v12, "pid", (void)v16) == a1)
          {
            id v13 = [v12 bundleIdentifier];
            id v14 = [v13 length];

            if (v14)
            {
              id v5 = [v12 bundleIdentifier];
              goto LABEL_14;
            }
          }
        }
        id v9 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
    id v5 = 0;
LABEL_14:
  }

  return v5;
}

id sub_10016A3A0()
{
  id v0 = (void *)MSVWeakLinkSymbol();
  if (v0)
  {
    id v1 = (uint64_t (*)(void))MSVWeakLinkSymbol();
    id v0 = (void *)v1();
  }

  return v0;
}

id sub_10016A3F4(uint64_t a1)
{
  id v1 = +[LSApplicationProxy applicationProxyForIdentifier:a1];
  dispatch_semaphore_t v2 = [v1 localizedName];
  id v3 = [v2 copy];

  return v3;
}

id sub_10016A460()
{
  id v0 = (void *)MGCopyAnswer();
  if (![v0 length])
  {
    id v1 = (void *)MGCopyAnswer();
    if (v1) {
      id v2 = [objc_alloc((Class)NSString) initWithData:v1 encoding:4];
    }
    else {
      id v2 = 0;
    }

    id v0 = v2;
  }
  if (![v0 length])
  {
    uint64_t v3 = MGCopyAnswer();

    id v0 = (void *)v3;
  }
  if (![v0 length])
  {
    id v4 = _MRLogForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Unknown device network ID", v6, 2u);
    }
  }

  return v0;
}

id sub_10016A57C(int a1)
{
  id v2 = +[NSProcessInfo processInfo];
  unsigned int v3 = [v2 processIdentifier];

  if (v3 == a1)
  {
    return (id)getuid();
  }
  else
  {
    id v5 = +[MRDMediaRemoteServer server];
    id v6 = [v5 allClients];

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          if (objc_msgSend(v12, "pid", (void)v15) == a1)
          {
            id v14 = [v12 connection];
            id v13 = [v14 uid];

            goto LABEL_15;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
    id v13 = 0;
LABEL_15:

    return v13;
  }
}

void sub_10016A738(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10016A8DC;
  v15[3] = &unk_10041F510;
  id v5 = v3;
  long long v16 = v5;
  id v6 = v4;
  id v17 = v6;
  id v7 = objc_retainBlock(v15);
  id v8 = off_100477A90();
  id v9 = v8;
  if (v8)
  {
    int out_token = 0;
    uint64_t v10 = (const char *)[v8 UTF8String];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10016A980;
    v12[3] = &unk_10041F538;
    id v11 = v7;
    id v13 = v11;
    notify_register_dispatch(v10, &out_token, v5, v12);
    if ((off_100477A98() & 1) == 0) {
      ((void (*)(void *, void))v11[2])(v11, out_token);
    }
  }
  else
  {
    ((void (*)(void *, void))v7[2])(v7, 0);
  }
}

void sub_10016A8DC(uint64_t a1, int token)
{
  notify_cancel(token);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016A970;
  block[3] = &unk_100416938;
  id v3 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_10016A970(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10016A980(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10016A990(int a1)
{
  uint64_t result = MSVWeakLinkSymbol();
  if (result) {
    BOOL v3 = a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    id v4 = (uint64_t (*)(void))MSVWeakLinkSymbol();
    return v4();
  }
  return result;
}

uint64_t sub_10016AA00()
{
  if (qword_10047E4E0 != -1) {
    dispatch_once(&qword_10047E4E0, &stru_10041F558);
  }
  return byte_10047E4E8;
}

void sub_10016AA44(id a1)
{
  id v1 = +[LockdownModeManager shared];
  byte_10047E4E8 = [v1 enabled];
}

uint64_t sub_10016AA94()
{
  if (qword_10047E4F8 != -1) {
    dispatch_once(&qword_10047E4F8, &stru_10041F578);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_10047E500, "BYSetupAssistantFinishedDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10047E4F0 = result;
  }
  else
  {
    uint64_t result = qword_10047E4F0;
  }
  off_100477A90 = sub_10016AB14;
  return result;
}

uint64_t sub_10016AB14()
{
  return qword_10047E4F0;
}

void sub_10016AB20(id a1)
{
  qword_10047E500 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

uint64_t sub_10016AB4C()
{
  if (qword_10047E4F8 != -1) {
    dispatch_once(&qword_10047E4F8, &stru_10041F578);
  }
  id v0 = (uint64_t (*)())dlsym((void *)qword_10047E500, "BYSetupAssistantNeedsToRun");
  off_100477A98 = v0;

  return v0();
}

uint64_t sub_10016C3EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10016C520(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10016CF90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 error];

  if (v6 && !v7)
  {
    id v8 = [v5 debugName];

    id v9 = _MRLogForCategory();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v10) {
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = [*(id *)(a1 + 40) requestID];
      id v13 = [v5 debugName];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544386;
      uint64_t v40 = v11;
      __int16 v41 = 2114;
      uint64_t v42 = v12;
      __int16 v43 = 2112;
      id v44 = v6;
      __int16 v45 = 2114;
      uint64_t v46 = v13;
      __int16 v47 = 2048;
      uint64_t v48 = v15;
      long long v16 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v17 = v9;
      uint32_t v18 = 52;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v39, v18);
LABEL_14:

LABEL_22:
      goto LABEL_23;
    }
    if (!v10) {
      goto LABEL_23;
    }
    uint64_t v29 = *(void *)(a1 + 32);
    id v12 = [*(id *)(a1 + 40) requestID];
    id v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v39 = 138544130;
    uint64_t v40 = v29;
    __int16 v41 = 2114;
    uint64_t v42 = v12;
    __int16 v43 = 2112;
    id v44 = v6;
    __int16 v45 = 2048;
    uint64_t v46 = v30;
    id v31 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    uint32_t v32 = v9;
    uint32_t v33 = 42;
    goto LABEL_21;
  }
  long long v19 = [v6 error];

  uint64_t v20 = [v5 debugName];

  id v21 = _MRLogForCategory();
  id v9 = v21;
  if (!v19)
  {
    BOOL v26 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      if (!v26) {
        goto LABEL_23;
      }
      uint64_t v27 = *(void *)(a1 + 32);
      id v12 = [*(id *)(a1 + 40) requestID];
      id v13 = [v5 debugName];
      id v14 = +[NSDate date];
      [v14 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v39 = 138544130;
      uint64_t v40 = v27;
      __int16 v41 = 2114;
      uint64_t v42 = v12;
      __int16 v43 = 2114;
      id v44 = v13;
      __int16 v45 = 2048;
      uint64_t v46 = v28;
      long long v16 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      id v17 = v9;
      uint32_t v18 = 42;
      goto LABEL_13;
    }
    if (!v26) {
      goto LABEL_23;
    }
    uint64_t v34 = *(void *)(a1 + 32);
    id v12 = [*(id *)(a1 + 40) requestID];
    id v13 = +[NSDate date];
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v39 = 138543874;
    uint64_t v40 = v34;
    __int16 v41 = 2114;
    uint64_t v42 = v12;
    __int16 v43 = 2048;
    id v44 = v35;
    id v31 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint32_t v32 = v9;
    uint32_t v33 = 32;
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, (uint8_t *)&v39, v33);
    goto LABEL_22;
  }
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (v20)
  {
    if (!v22) {
      goto LABEL_23;
    }
    uint64_t v23 = *(void *)(a1 + 32);
    id v12 = [*(id *)(a1 + 40) requestID];
    id v13 = [v6 error];
    id v14 = [v5 debugName];
    id v24 = +[NSDate date];
    [v24 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v39 = 138544386;
    uint64_t v40 = v23;
    __int16 v41 = 2114;
    uint64_t v42 = v12;
    __int16 v43 = 2114;
    id v44 = v13;
    __int16 v45 = 2114;
    uint64_t v46 = v14;
    __int16 v47 = 2048;
    uint64_t v48 = v25;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds", (uint8_t *)&v39, 0x34u);

    goto LABEL_14;
  }
  if (v22) {
    sub_100331A3C(a1, v6, v9);
  }
LABEL_23:

  uint64_t v36 = *(void **)(a1 + 56);
  uint64_t v37 = [v6 error];
  [v36 trackWithError:v37];

  uint64_t v38 = *(void *)(a1 + 64);
  if (v38) {
    (*(void (**)(uint64_t, id, id))(v38 + 16))(v38, v5, v6);
  }
}

void sub_10016D414(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRCommandResult) initWithError:v3];

  (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v4);
}

void sub_10016D498(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10016D510(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = [objc_alloc((Class)MRCommandResult) initWithError:v3];

  (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v4);
}

void sub_10016D594(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) connect];
  [v7 start];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10016D6C4;
  v11[3] = &unk_10041F5F0;
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 72);
  id v15 = *(id *)(a1 + 56);
  id v16 = v6;
  id v17 = *(id *)(a1 + 64);
  id v9 = v6;
  id v10 = v5;
  [v10 connectToExternalDeviceWithOptions:0 details:v8 completion:v11];
}

void sub_10016D6C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connect];
  [v4 endWithError:v3];

  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 100);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) sendCommand];
    [v7 start];

    id v6 = [objc_alloc((Class)MRDestination) initWithEndpoint:*(void *)(a1 + 40)];
    uint64_t v8 = [*(id *)(a1 + 48) client];
    [v6 setClient:v8];

    id v9 = [*(id *)(a1 + 48) player];
    [v6 setPlayer:v9];

    id v10 = [objc_alloc((Class)MRNowPlayingRequest) initWithDestination:v6];
    uint64_t v11 = *(unsigned int *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 56);
    qos_class_t v13 = qos_class_self();
    id v14 = dispatch_get_global_queue(v13, 0);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10016D898;
    v15[3] = &unk_100416848;
    id v16 = *(id *)(a1 + 32);
    id v17 = *(id *)(a1 + 64);
    [v10 sendCommand:v11 options:v12 queue:v14 completion:v15];
  }
}

void sub_10016D898(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  id v4 = [v3 sendCommand];
  uint64_t v5 = [v6 error];
  [v4 endWithError:v5];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10016D930(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isRequestForCompanionOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCompanionOrigin:1];
    id v2 = [objc_alloc((Class)MROrigin) initWithIdentifier:1129140302 type:1 displayName:&stru_10042ACB0];
  }
  else if ([*(id *)(a1 + 32) _isRequestForLocalOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForLocalOrigin:1];
    id v2 = +[MROrigin localOrigin];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_10016D9D4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = [v3 sendCommand];
  id v6 = [v4 error];
  [v5 endWithError:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = +[MRAVLocalEndpoint sharedLocalEndpoint];
  (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v4);
}

void sub_10016DA8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) createPartialEndpoint];
  [v7 end];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10016DB8C;
  v13[3] = &unk_10041F668;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v9;
  id v16 = v6;
  id v10 = *(void (**)(uint64_t, id, void *))(v8 + 16);
  id v11 = v6;
  id v12 = v5;
  v10(v8, v12, v13);
}

uint64_t sub_10016DB8C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

uint64_t sub_10016DBE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v4 = [*(id *)(a1 + 32) createPartialEndpoint];
  [v4 endWithError:v9];

  id v5 = [*(id *)(a1 + 32) createEndpointWithCurrentTopology];
  [v5 endWithError:v9];

  id v7 = v9;
  if (v9)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v7 = v9;
  }

  return _objc_release_x1(v6, v7);
}

void sub_10016DC74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) createPartialEndpoint];
  [v7 end];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10016DD74;
  v13[3] = &unk_10041F668;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v9;
  id v16 = v6;
  id v10 = *(void (**)(uint64_t, id, void *))(v8 + 16);
  id v11 = v6;
  id v12 = v5;
  v10(v8, v12, v13);
}

uint64_t sub_10016DD74(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

uint64_t sub_10016DDC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v4 = [*(id *)(a1 + 32) createPartialEndpoint];
  [v4 endWithError:v9];

  id v5 = [*(id *)(a1 + 32) createOptimizedEndpoint];
  [v5 endWithError:v9];

  id v7 = v9;
  if (v9)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v7 = v9;
  }

  return _objc_release_x1(v6, v7);
}

void sub_10016E734(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6
    || (objc_msgSend(v5, "msv_firstWhere:", &stru_10041F6D0),
        id v7 = objc_claimAutoreleasedReturnValue(),
        [v7 error],
        id v6 = (id)objc_claimAutoreleasedReturnValue(),
        v7,
        v6))
  {
    uint64_t v8 = objc_msgSend(v5, "msv_firstWhere:", &stru_10041F6F0);
    if (!v8) {
      goto LABEL_10;
    }
    id v9 = (void *)v8;
  }
  if ([v5 count]
    || (id v6 = [objc_alloc((Class)NSError) initWithMRError:26]) == 0)
  {
    id v10 = objc_msgSend(v5, "mr_formattedDebugDescription");

    id v11 = _MRLogForCategory();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        id v14 = [*(id *)(a1 + 40) requestID];
        id v15 = objc_msgSend(v5, "mr_formattedDebugDescription");
        id v16 = +[NSDate date];
        [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v23 = 138544130;
        uint64_t v24 = v13;
        __int16 v25 = 2114;
        BOOL v26 = v14;
        __int16 v27 = 2112;
        double v28 = v15;
        __int16 v29 = 2048;
        uint64_t v30 = v17;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds", (uint8_t *)&v23, 0x2Au);

LABEL_14:
      }
    }
    else if (v12)
    {
      uint64_t v18 = *(void *)(a1 + 32);
      id v14 = [*(id *)(a1 + 40) requestID];
      id v15 = +[NSDate date];
      [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v23 = 138543874;
      uint64_t v24 = v18;
      __int16 v25 = 2114;
      BOOL v26 = v14;
      __int16 v27 = 2048;
      double v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Response: %{public}@<%{public}@> returned in %.4lf seconds", (uint8_t *)&v23, 0x20u);
      goto LABEL_14;
    }
    id v6 = 0;
    goto LABEL_16;
  }
LABEL_10:
  id v11 = _MRLogForCategory();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_100331B38(a1, (uint64_t)v6, v11);
  }
LABEL_16:

  uint64_t v20 = objc_msgSend(v5, "msv_filter:", &stru_10041F710);
  objc_msgSend(*(id *)(a1 + 56), "setNumberOfErrorsAtTimeout:", objc_msgSend(v20, "count"));

  id v21 = objc_msgSend(v5, "msv_filter:", &stru_10041F730);
  objc_msgSend(*(id *)(a1 + 56), "setNumberOfSuccessAtTimeout:", objc_msgSend(v21, "count"));

  objc_msgSend(*(id *)(a1 + 56), "setNumberOfPendingAtTimeout:", (unsigned char *)objc_msgSend(*(id *)(a1 + 56), "numberOfEndpoints") - (unsigned char *)objc_msgSend(v5, "count"));
  [*(id *)(a1 + 56) trackWithError:v6];
  uint64_t v22 = *(void *)(a1 + 64);
  if (v22) {
    (*(void (**)(uint64_t, id, id))(v22 + 16))(v22, v5, v6);
  }
}

BOOL sub_10016EA64(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10016EA9C(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 == 0;

  return v3;
}

BOOL sub_10016EAD4(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10016EB0C(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 == 0;

  return v3;
}

void sub_10016EB44(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  id v4 = [*(id *)(a1 + 32) copy];
  objc_sync_exit(v3);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10016EBD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016EBE8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) disarm]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10016EC60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) sendCommands];
  [v4 start];

  id v5 = dispatch_group_create();
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obuint64_t j = v3;
  id v6 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v26;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v9);
        dispatch_group_enter(v5);
        uint64_t v11 = *(void *)(a1 + 40);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10016EEE4;
        v19[3] = &unk_10041F780;
        uint64_t v20 = v5;
        id v21 = v10;
        int v24 = *(_DWORD *)(a1 + 72);
        id v22 = *(id *)(a1 + 48);
        id v23 = *(id *)(a1 + 56);
        [v10 connectToExternalDeviceWithOptions:0 details:v11 completion:v19];

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v7);
  }

  qos_class_t v12 = qos_class_self();
  uint64_t v13 = dispatch_get_global_queue(v12, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10016F120;
  block[3] = &unk_1004161E0;
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 64);
  dispatch_group_notify(v5, v13, block);
}

void sub_10016EEE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc((Class)MRCommandResult);
    id v5 = objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 100);
    id v6 = [v4 initWithError:v5];

    id v7 = *(id *)(a1 + 56);
    objc_sync_enter(v7);
    [*(id *)(a1 + 56) addObject:v6];
    objc_sync_exit(v7);
  }
  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    id v6 = [objc_alloc((Class)MRDestination) initWithEndpoint:*(void *)(a1 + 40)];
    id v7 = [objc_alloc((Class)MRNowPlayingRequest) initWithDestination:v6];
    uint64_t v8 = *(unsigned int *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 48);
    qos_class_t v10 = qos_class_self();
    uint64_t v11 = dispatch_get_global_queue(v10, 0);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10016F098;
    v12[3] = &unk_100416460;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 32);
    [v7 sendCommand:v8 options:v9 queue:v11 completion:v12];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10016F084(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016F098(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) addObject:v4];
  objc_sync_exit(v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10016F10C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10016F120(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  id v6 = [*(id *)(a1 + 32) copy];
  objc_sync_exit(v2);

  id v3 = [*(id *)(a1 + 40) sendCommands];
  [v3 end];

  id v4 = objc_msgSend(v6, "msv_filter:", &stru_10041F7A0);
  objc_msgSend(*(id *)(a1 + 40), "setNumberOfErrorsAtCompletion:", objc_msgSend(v4, "count"));

  id v5 = objc_msgSend(v6, "msv_filter:", &stru_10041F7C0);
  objc_msgSend(*(id *)(a1 + 40), "setNumberOfSuccessAtCompletion:", objc_msgSend(v5, "count"));

  if ([*(id *)(a1 + 40) tracked])
  {
    [*(id *)(a1 + 40) setTracked:0];
    [*(id *)(a1 + 40) track];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10016F22C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016F240(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10016F278(id a1, MRCommandResult *a2)
{
  id v2 = [(MRCommandResult *)a2 error];
  BOOL v3 = v2 == 0;

  return v3;
}

id sub_10016F2B0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isRequestForCurrentCongifuration:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCurrentConfiguration:1];
LABEL_5:
    id v2 = +[MROrigin localOrigin];
    goto LABEL_6;
  }
  if ([*(id *)(a1 + 32) _isRequestForLocalOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForLocalOrigin:1];
    goto LABEL_5;
  }
  if ([*(id *)(a1 + 32) _isRequestForCompanionOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCompanionOrigin:1];
    id v2 = [objc_alloc((Class)MROrigin) initWithIdentifier:1129140302 type:1 displayName:&stru_10042ACB0];
  }
  else
  {
    id v2 = 0;
  }
LABEL_6:

  return v2;
}

void sub_10016F370(uint64_t a1, void *a2)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 sendCommands];
  id v6 = [v4 error];
  [v5 endWithError:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v8 = +[NSArray arrayWithObjects:&v9 count:1];
  (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v8, 0);
}

void sub_10016F450(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v36 = a2;
  id v37 = a3;
  id v8 = a5;
  id v9 = [*(id *)(a1 + 32) discoverOutputDevices];
  qos_class_t v10 = objc_msgSend(v8, "mr_errorByEnvelopingWithMRError:", 47);
  [v9 endWithError:v10];

  id v11 = objc_alloc_init((Class)NSMutableArray);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v35 = a1;
  id v12 = *(id *)(a1 + 40);
  id v13 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v40;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v39 + 1) + 8 * i);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_10016F8D8;
        void v38[3] = &qword_1004199E0;
        void v38[4] = v17;
        id v18 = objc_msgSend(v37, "msv_firstWhere:", v38);
        if (!v18) {
          [v11 addObject:v17];
        }
      }
      id v14 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
    }
    while (v14);
  }

  if ([v11 count])
  {
    id v19 = [objc_alloc((Class)NSString) initWithFormat:@"Unable to find outputDeviceUIDs=%@", v11];
    uint64_t v20 = _MRLogForCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 48);
      id v22 = [*(id *)(v35 + 56) requestID];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v44 = v21;
      __int16 v45 = 2114;
      uint64_t v46 = v22;
      __int16 v47 = 2112;
      id v48 = v19;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
    }
    objc_msgSend(*(id *)(v35 + 32), "setNumberOfMissingOutputDeviceUIDs:", objc_msgSend(v11, "count"));
  }
  id v23 = objc_alloc((Class)NSString);
  int v24 = objc_msgSend(v36, "msv_map:", &stru_10041F808);
  id v25 = [v23 initWithFormat:@"Resolved outputDevices=%@", v24];

  long long v26 = _MRLogForCategory();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(void *)(v35 + 48);
    long long v28 = [*(id *)(v35 + 56) requestID];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v44 = v27;
    __int16 v45 = 2114;
    uint64_t v46 = v28;
    __int16 v47 = 2112;
    id v48 = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }
  objc_msgSend(*(id *)(v35 + 32), "setNumberOfDiscoveredOutputDeviceUIDs:", objc_msgSend(v36, "count"));

  id v29 = objc_alloc((Class)NSString);
  uint64_t v30 = objc_msgSend(v37, "msv_map:", &stru_10041F828);
  id v31 = [v29 initWithFormat:@"Resolved endpoints=%@", v30];

  uint32_t v32 = _MRLogForCategory();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *(void *)(v35 + 48);
    uint64_t v34 = [*(id *)(v35 + 56) requestID];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v44 = v33;
    __int16 v45 = 2114;
    uint64_t v46 = v34;
    __int16 v47 = 2112;
    id v48 = v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }
  objc_msgSend(*(id *)(v35 + 32), "setNumberOfEndpoints:", objc_msgSend(v37, "count"));

  (*(void (**)(void))(*(void *)(v35 + 64) + 16))();
}

id sub_10016F8D8(uint64_t a1, void *a2)
{
  return [a2 containsOutputDeviceWithUID:*(void *)(a1 + 32)];
}

id sub_10016F8E4(id a1, MRAVOutputDevice *a2)
{
  return [(MRAVOutputDevice *)a2 debugName];
}

id sub_10016F8EC(id a1, MRAVEndpoint *a2)
{
  return [(MRAVEndpoint *)a2 debugName];
}

id sub_10016F9F4(id a1, NSString *a2)
{
  id v2 = a2;
  if ([(NSString *)v2 isEqualToString:@"LOCAL_DEVICE"])
  {
    BOOL v3 = +[MRAVOutputDevice localDeviceUID];
  }
  else
  {
    BOOL v3 = v2;
  }
  id v4 = v3;

  return v4;
}

id sub_10016FA5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[MRAVOutputDevice localDeviceUID];
  if ([v3 isEqualToString:v4])
  {
    id v5 = [*(id *)(a1 + 32) deviceUID];

    if (v5)
    {
      id v6 = [*(id *)(a1 + 32) deviceUID];
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v6 = v3;
LABEL_6:
  uint64_t v7 = v6;

  return v7;
}

BOOL sub_10016FCC8(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = +[MRAVOutputDevice localDeviceUID];
  unsigned __int8 v4 = [(NSString *)v2 isEqualToString:v3];

  return v4;
}

uint64_t sub_10016FE60(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [*(id *)(a1 + 32) WHAIdentifier];
  if ([v4 isEqualToString:v3]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = (uint64_t)[v3 isEqualToString:@"CMPN"];
  }

  return v5;
}

uint64_t sub_10016FFB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [*(id *)(a1 + 32) deviceUID];
  if ([v4 isEqualToString:v3])
  {
    uint64_t v5 = 1;
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) clusterID];
    uint64_t v5 = (uint64_t)[v6 isEqualToString:v3];
  }
  return v5;
}

void sub_10017035C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100170388(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained invalidate];
    id WeakRetained = v2;
  }
}

void sub_100170600(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100331C20();
    }
  }
}

void sub_10017079C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100331C8C();
    }
  }
}

void sub_100170914(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = _MRLogForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100331CF8();
    }
  }
}

void sub_1001713E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100171418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    id v5 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRUIController][D] <%p> XPC interrupted.", (uint8_t *)&v4, 0xCu);
  }

  id v3 = [WeakRetained xpcConnection];
  [v3 invalidate];
}

void sub_1001714E4(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    id v5 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MRUIController][D] <%p> XPC invalidated.", (uint8_t *)&v4, 0xCu);
  }

  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 4);
    id v3 = *(void **)&WeakRetained[6]._os_unfair_lock_opaque;
    *(void *)&WeakRetained[6]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(WeakRetained + 4);
  }
}

void sub_100171660(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 134218242;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRUIController][D] <%p> Server proxy error %@.", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1001717D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 134218242;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRUIController][D] <%p> Server proxy error %@.", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100171AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100171B04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100171B14(uint64_t a1)
{
}

void sub_100171B1C(uint64_t a1, void *a2)
{
}

void sub_100172054(id a1)
{
  byte_10047E510 = SBSIsSystemApertureAvailable();
}

void sub_1001720E0(id a1)
{
  id v1 = objc_alloc_init(MRDGroupSessionEligibilityMonitor);
  uint64_t v2 = qword_10047E520;
  qword_10047E520 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100172288(uint64_t a1)
{
  [*(id *)(a1 + 32) initializeObserversAndState];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 reevaluateState];
}

void sub_100172624(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_100172654(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    unsigned int v3 = [*(id *)(a1 + 32) manateeAvailable];
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[MRDGroupSessionEligibilityMonitor] SystemMonitor.manateeChangedHandler. Manatee available: %{BOOL}u", (uint8_t *)v5, 8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained reevaluateState];
}

void sub_100172718(uint64_t a1)
{
  uint64_t v2 = _MRLogForCategory();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    unsigned int v3 = [*(id *)(a1 + 32) manateeAvailable];
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[MRDGroupSessionEligibilityMonitor] SystemMonitor.activateWithCompletion. Manatee available: %{BOOL}u", (uint8_t *)v5, 8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained reevaluateState];
}

uint64_t sub_1001729E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001729F4(uint64_t a1)
{
}

uint64_t sub_1001729FC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

id sub_100172F14(id a1, MRDMediaUserState *a2)
{
  return [(MRDMediaUserState *)a2 frameworkState];
}

void sub_100172FB4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100173088;
  block[3] = &unk_1004159B8;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v2;
  id v6 = v2;
  dispatch_async(v3, block);
}

id sub_100173088(uint64_t a1)
{
  return [*(id *)(a1 + 32) eligibilityMonitor:*(void *)(a1 + 40) eligibilityStatusDidChange:*(void *)(a1 + 48)];
}

id sub_100173130(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_100173208(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * (void)v6), "eligibilityMonitor:eligibilityStatusDidChange:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v7);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

id sub_1001736CC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v11 = 0;
  id v4 = a2;
  id v5 = [v3 hostingStateForUserState:v4 reason:&v11];
  id v6 = v11;
  long long v7 = *(void **)(a1 + 40);
  long long v8 = [v4 identifier];

  [v7 appendFormat:@"\n  %@> %@", v8, v6];
  long long v9 = +[NSNumber numberWithUnsignedInteger:v5];

  return v9;
}

id sub_100173BA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100173C30(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100173D3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100173DDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100173E6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

void sub_10017463C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001746A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_msgSend(v3, "msv_map:", &stru_10041FBB0);
    int v9 = 138412290;
    long long v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC] addEndpointsAddedCallback: %@", (uint8_t *)&v9, 0xCu);
  }
  id v6 = objc_msgSend(v3, "msv_compactMap:", &stru_10041FBF0);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v8 = [WeakRetained recommender];
  [v8 updateRouteCandidates:v6];
}

NSString *__cdecl sub_1001747C0(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  id v3 = [(MRAVEndpoint *)v2 localizedName];
  id v4 = [(MRAVEndpoint *)v2 uniqueIdentifier];

  id v5 = +[NSString stringWithFormat:@"%@ - %@", v3, v4];

  return (NSString *)v5;
}

MRIRRoute *__cdecl sub_100174854(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  if ([(MRAVEndpoint *)v2 shouldDonate])
  {
    id v3 = +[MRIRRoute routeWithEndpoint:v2];
  }
  else
  {
    id v3 = 0;
  }

  return (MRIRRoute *)v3;
}

void sub_1001748B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = _MRLogForCategory();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = objc_msgSend(v3, "msv_map:", &stru_10041FC10);
    int v9 = 138412290;
    long long v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[MRDRRC] addEndpointsModifiedCallback: %@", (uint8_t *)&v9, 0xCu);
  }
  id v6 = objc_msgSend(v3, "msv_compactMap:", &stru_10041FC30);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v8 = [WeakRetained recommender];
  [v8 updateRouteCandidates:v6];
}

NSString *__cdecl sub_1001749D4(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  id v3 = [(MRAVEndpoint *)v2 localizedName];
  id v4 = [(MRAVEndpoint *)v2 uniqueIdentifier];

  id v5 = +[NSString stringWithFormat:@"%@ - %@", v3, v4];

  return (NSString *)v5;
}

MRIRRoute *__cdecl sub_100174A68(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  if ([(MRAVEndpoint *)v2 shouldDonate])
  {
    id v3 = +[MRIRRoute routeWithEndpoint:v2];
  }
  else
  {
    id v3 = 0;
  }

  return (MRIRRoute *)v3;
}

void sub_100174CC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v10 = MREndpointConnectionReasonUserInfoKey;
  CFStringRef v11 = @"intelligentRoutingRecommendationController";
  id v4 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100174DE4;
  void v7[3] = &unk_1004175B8;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}