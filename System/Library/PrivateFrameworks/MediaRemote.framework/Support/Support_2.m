uint64_t sub_1002272C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 360) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    v2 = sub_100227848;
  }
  else
  {
    v2 = sub_1002273E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002273E0()
{
  v1 = *(void **)(v0 + 344);

  *(void *)(v0 + 80) = v0;
  *(void *)(v0 + 88) = sub_1002274D8;
  uint64_t v2 = swift_continuation_init();
  *(void *)(v0 + 248) = _NSConcreteStackBlock;
  *(void *)(v0 + 256) = 0x40000000;
  *(void *)(v0 + 264) = sub_10018A4F0;
  *(void *)(v0 + 272) = &unk_1004225A0;
  *(void *)(v0 + 280) = v2;
  [v1 retainTransientSubscriptionAssertionWithCompletion:v0 + 248];
  return _swift_continuation_await(v0 + 80);
}

uint64_t sub_1002274D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 368) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1002278B8;
  }
  else
  {
    uint64_t v2 = sub_1002275F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002275F0()
{
  v13 = v0;
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10018A9A8(v1, (uint64_t)qword_10047F3A8);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[36] = sub_10018A9E0(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[37] = sub_10018A9E0(v7, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] Done asserting presence with payload: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100227848()
{
  uint64_t v1 = *(void **)(v0 + 352);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002278B8()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100227924(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100013A80(&qword_100479F70);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10018FF5C(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10018FF5C(v35, v36);
    sub_10018FF5C(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10018FF5C(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10018F864();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100227CE4()
{
  *(void *)(v1 + 184) = v0;
  *(void *)(v1 + 192) = swift_getObjectType();
  return _swift_task_switch(sub_100227D54, 0, 0);
}

uint64_t sub_100227D54()
{
  uint64_t v1 = *(void **)(v0[23]
                + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence);
  v0[25] = v1;
  v0[2] = v0;
  v0[3] = sub_100227E58;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_10018A4F0;
  v0[21] = &unk_100422558;
  v0[22] = v2;
  [v1 releaseTransientSubscriptionAssertionWithCompletion:v0 + 18];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100227E58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 208) = v1;
  if (v1) {
    uint64_t v2 = sub_10022832C;
  }
  else {
    uint64_t v2 = sub_100227F68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100227F68()
{
  uint64_t v1 = (void *)v0[25];
  v0[10] = v0;
  v0[11] = sub_10022805C;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_10018A4F0;
  v0[21] = &unk_100422570;
  v0[22] = v2;
  [v1 releasePresenceWithCompletion:v0 + 18];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10022805C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 216) = v1;
  if (v1) {
    uint64_t v2 = sub_100228398;
  }
  else {
    uint64_t v2 = sub_10022816C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10022816C()
{
  uint64_t v10 = v0;
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10018A9A8(v1, (uint64_t)qword_10047F3A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    uint64_t v5 = _typeName(_:qualified:)();
    *(void *)(v0 + 144) = sub_10018A9E0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%{public}s] Done releasing presence.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10022832C()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100228398()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10022846C(char *a1)
{
  uint64_t v3 = v1;
  v93[1] = swift_getObjectType();
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (void *)((char *)v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)&v3[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_queue];
  *int64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  id v11 = [a1 presentDevices];
  sub_10018FE08(0, &qword_100479F30);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = sub_100231F08(v12);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  a1 = (char *)v97[0];
  sub_100229B64(v2, v97[0]);
  LOBYTE(v12) = v13;
  swift_bridgeObjectRelease();
  uint64_t v96 = v2;
  v94 = v3;
  if (v12) {
    goto LABEL_6;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  v97[0] = v2;
  swift_bridgeObjectRetain();
  a1 = v3;
  static Published.subscript.setter();
  if (qword_10047F3C0 != -1) {
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for Logger();
    sub_10018A9A8(v14, (uint64_t)qword_10047F3C8);
    int64_t v15 = a1;
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      uint64_t v19 = _typeName(_:qualified:)();
      uint64_t v98 = sub_10018A9E0(v19, v20, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      a1 = (char *)(v18 + 14);
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      sub_100236E24();
      uint64_t v21 = Set.description.getter();
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v98 = sub_10018A9E0(v21, v23, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] Present devices updated: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v96;
      swift_slowDealloc();

LABEL_6:
      unint64_t v24 = v2 & 0xC000000000000001;
      if ((v2 & 0xC000000000000001) != 0)
      {
LABEL_7:
        uint64_t v25 = __CocoaSet.count.getter();
        goto LABEL_10;
      }
    }
    else
    {

      unint64_t v24 = v2 & 0xC000000000000001;
      if ((v2 & 0xC000000000000001) != 0) {
        goto LABEL_7;
      }
    }
    uint64_t v25 = *(void *)(v2 + 16);
LABEL_10:
    uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
    if (!v25)
    {
LABEL_29:
      sub_100217510(v96);
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      uint64_t v54 = *(void *)(v2 + 16);
      uint64_t v55 = *(void *)(v53 + 16);
      swift_bridgeObjectRelease();
      if (v54 != v55)
      {
        if (qword_10047F3A0 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        sub_10018A9A8(v56, (uint64_t)qword_10047F3A8);
        v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          v97[0] = swift_slowAlloc();
          *(_DWORD *)v59 = 136446210;
          uint64_t v60 = _typeName(_:qualified:)();
          uint64_t v98 = sub_10018A9E0(v60, v61, v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%{public}s] Some devices are missing payload.", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }
      uint64_t v62 = swift_bridgeObjectRetain();
      uint64_t v63 = sub_10000B4EC(v62);
      swift_bridgeObjectRelease();
      v64 = v94;
      uint64_t v65 = swift_bridgeObjectRetain();
      uint64_t v66 = sub_10022E114(v65, v63);
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      char v67 = sub_1001DC3B0(v66, v97[0]);
      swift_bridgeObjectRelease();
      if (v67)
      {
        swift_release();
      }
      else
      {
        swift_getKeyPath();
        swift_getKeyPath();
        v97[0] = v66;
        id v68 = v64;
        static Published.subscript.setter();
        if (qword_10047F3A0 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        uint64_t v70 = sub_10018A9A8(v69, (uint64_t)qword_10047F3A8);
        id v71 = v68;
        uint64_t v96 = v70;
        v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = swift_slowAlloc();
          v97[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v74 = 136446466;
          uint64_t v75 = _typeName(_:qualified:)();
          uint64_t v98 = sub_10018A9E0(v75, v76, v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2082;
          uint64_t v95 = v74 + 14;
          swift_getKeyPath();
          swift_getKeyPath();
          uint64_t v77 = v54;
          static Published.subscript.getter();
          swift_release();
          swift_release();
          uint64_t v78 = Set.description.getter();
          unint64_t v80 = v79;
          swift_bridgeObjectRelease();
          uint64_t v81 = v78;
          uint64_t v54 = v77;
          uint64_t v98 = sub_10018A9E0(v81, v80, v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "[%{public}s] Present handles updated: %{public}s", (uint8_t *)v74, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v82 = swift_bridgeObjectRetain();
        uint64_t v83 = sub_10000B4EC(v82);
        swift_bridgeObjectRelease();
        uint64_t v84 = *(void *)(v83 + 16);
        swift_bridgeObjectRelease();
        if (v84 != v54)
        {
          swift_bridgeObjectRetain();
          v85 = Logger.logObject.getter();
          os_log_type_t v86 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v85, v86))
          {
            uint64_t v87 = swift_slowAlloc();
            v97[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v87 = 136446466;
            uint64_t v88 = _typeName(_:qualified:)();
            uint64_t v98 = sub_10018A9E0(v88, v89, v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v87 + 12) = 2082;
            swift_bridgeObjectRetain();
            uint64_t v90 = Array.description.getter();
            unint64_t v92 = v91;
            swift_bridgeObjectRelease();
            uint64_t v98 = sub_10018A9E0(v90, v92, v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v85, v86, "[%{public}s] Handle collision. Handles: %{public}s", (uint8_t *)v87, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          return;
        }
      }
      swift_bridgeObjectRelease();
      return;
    }
    v101 = _swiftEmptyArrayStorage;
    sub_100014688(0, v25 & ~(v25 >> 63), 0);
    uint64_t v26 = v96;
    if (v24)
    {
      uint64_t v27 = __CocoaSet.startIndex.getter();
      char v29 = 1;
    }
    else
    {
      uint64_t v27 = sub_10018DCC8(v96);
      char v29 = v30 & 1;
    }
    uint64_t v98 = v27;
    uint64_t v99 = v28;
    char v100 = v29;
    if ((v25 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    swift_once();
  }
  uint64_t v31 = v26 & 0xFFFFFFFFFFFFFF8;
  if (v26 < 0) {
    uint64_t v31 = v26;
  }
  uint64_t v95 = v31;
  while (1)
  {
    while (1)
    {
      int64_t v38 = v98;
      uint64_t v37 = v99;
      char v39 = v100;
      sub_10022EB4C(v98, v99, v100, v26);
      v41 = v40;
      id v42 = [v40 handle];
      id v43 = [v42 handleString];

      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v46 = v45;

      v47 = v101;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v47[2] + 1, 1);
        v47 = v101;
      }
      unint64_t v49 = v47[2];
      unint64_t v48 = v47[3];
      if (v49 >= v48 >> 1)
      {
        sub_100014688(v48 > 1, v49 + 1, 1);
        v47 = v101;
      }
      v47[2] = v49 + 1;
      v50 = &v47[2 * v49];
      v50[4] = v44;
      v50[5] = v46;
      if (v24) {
        break;
      }
      uint64_t v26 = v96;
      int64_t v32 = sub_100013AC4(v38, v37, v39, v96);
      uint64_t v34 = v33;
      char v36 = v35;
      sub_100015510(v38, v37, v39);
      uint64_t v98 = v32;
      uint64_t v99 = v34;
      char v100 = v36 & 1;
      if (!--v25) {
        goto LABEL_28;
      }
    }
    uint64_t v26 = v96;
    if ((v39 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_100013A80(&qword_100479F38);
    v51 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v51(v97, 0);
    if (!--v25)
    {
LABEL_28:
      sub_100015510(v98, v99, v100);
      uint64_t v2 = (uint64_t)v101;
      goto LABEL_29;
    }
  }
  __break(1u);
}

id sub_100229184()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresenceDataSource();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1002292CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1001F4038();
  *a1 = result;
  return result;
}

void sub_1002292F8(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 24);
  *(void *)(*(void *)a2 + 24) = *a1;
  id v3 = v2;
}

id sub_100229340@<X0>(void *a1@<X8>)
{
  id result = sub_1001F403C();
  *a1 = result;
  return result;
}

void sub_10022936C(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 32);
  *(void *)(*(void *)a2 + 32) = *a1;
  id v3 = v2;
}

id sub_1002293B4@<X0>(void *a1@<X8>)
{
  id result = sub_1001F409C();
  *a1 = result;
  return result;
}

void sub_1002293E0(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 40);
  *(void *)(*(void *)a2 + 40) = *a1;
  id v3 = v2;
}

id sub_100229428@<X0>(void *a1@<X8>)
{
  id result = sub_1001F40FC();
  *a1 = result;
  return result;
}

void sub_100229454(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 48);
  *(void *)(*(void *)a2 + 48) = *a1;
  id v3 = v2;
}

id sub_10022949C@<X0>(void *a1@<X8>)
{
  id result = sub_1001F415C();
  *a1 = result;
  return result;
}

void sub_1002294C8(void **a1, uint64_t a2)
{
  objc_super v2 = *a1;
  id v4 = *(id *)(*(void *)a2 + 56);
  *(void *)(*(void *)a2 + 56) = *a1;
  id v3 = v2;
}

uint64_t sub_100229510()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_100229550(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = a1;
  return result;
}

uint64_t (*sub_100229594())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002295EC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_100229600()
{
  uint64_t v1 = *v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  char v4 = *(unsigned char *)(v1 + 64);
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = v4;
  return sub_1001FA360(inited);
}

uint64_t (*sub_100229680())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1002296D8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_1002296E8()
{
  return sub_1001FA498((uint64_t)_swiftEmptyArrayStorage, &qword_100479F20, &qword_100479F28);
}

unint64_t sub_100229718()
{
  uint64_t v1 = *v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  char v4 = *(unsigned char *)(v1 + 32);
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = v4;
  return sub_1001FA360(inited);
}

id sub_100229794(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100229910;
  aBlock[3] = &unk_100423718;
  os_log_type_t v17 = _Block_copy(aBlock);
  v21[4] = a7;
  v21[5] = a8;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_1002299BC;
  v21[3] = &unk_100423740;
  uint64_t v18 = _Block_copy(v21);
  id v19 = [v9 initWithService:a1 handle:v16 queue:a4 messageHandler:v17 errorHandler:v18];

  _Block_release(v17);
  _Block_release(v18);
  swift_release();
  swift_release();
  return v19;
}

uint64_t sub_100229910(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2, v4, v5);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1002299BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100229A24@<X0>(void *a1@<X8>)
{
  return sub_100229A60(a1);
}

uint64_t sub_100229A38(uint64_t a1, void **a2)
{
  return sub_100229AF0(a1, a2);
}

uint64_t sub_100229A4C@<X0>(void *a1@<X8>)
{
  return sub_100229A60(a1);
}

uint64_t sub_100229A60@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100229ADC(uint64_t a1, void **a2)
{
  return sub_100229AF0(a1, a2);
}

uint64_t sub_100229AF0(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

void sub_100229B64(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    if (v4)
    {
      if (a2 < 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      goto _$ss10__CocoaSetV7isEqual2toSbAB_tF;
    }
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    goto LABEL_18;
  }
  if (v4)
  {
    if (a2 < 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v8 = a1;
LABEL_18:
    sub_100229E9C(v7, v8);
    return;
  }
  if (a1 == a2 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v29 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(a1 + 56);
  uint64_t v6 = sub_10018FE08(0, &qword_100479F30);
  int64_t v12 = 0;
  int64_t v30 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = a2 + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_46;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v16 >= v30) {
      return;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v30) {
        return;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v30) {
          return;
        }
        unint64_t v17 = *(void *)(v29 + 8 * v12);
        if (!v17)
        {
          int64_t v12 = v16 + 3;
          if (v16 + 3 >= v30) {
            return;
          }
          unint64_t v17 = *(void *)(v29 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_45:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_46:
    Swift::Int v19 = *(void *)(a2 + 40);
    id v20 = *(id *)(*(void *)(a1 + 48) + 8 * v15);
    Swift::Int v21 = NSObject._rawHashValue(seed:)(v19);
    uint64_t v22 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v23 = v21 & ~v22;
    if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
      goto LABEL_53;
    }
    int64_t v31 = v12;
    id v24 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
    char v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0)
    {
      uint64_t v26 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
          break;
        }
        id v27 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
        char v28 = static NSObject.== infix(_:_:)();

        if (v28) {
          goto LABEL_27;
        }
      }
LABEL_53:

      return;
    }
LABEL_27:

    int64_t v12 = v31;
  }
  int64_t v18 = v16 + 4;
  if (v18 >= v30) {
    return;
  }
  unint64_t v17 = *(void *)(v29 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v30) {
      return;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_45;
    }
  }
LABEL_56:
  __break(1u);
_$ss10__CocoaSetV7isEqual2toSbAB_tF:
  __CocoaSet.isEqual(to:)(v6, v5);
}

void sub_100229E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != __CocoaSet.count.getter()) {
    return;
  }
  int64_t v4 = 0;
  uint64_t v5 = a2 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v4 << 6);
LABEL_6:
    id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v11);
    char v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) == 0) {
      return;
    }
  }
  int64_t v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v14);
  ++v4;
  if (v15) {
    goto LABEL_19;
  }
  int64_t v4 = v14 + 1;
  if (v14 + 1 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v4);
  if (v15)
  {
LABEL_19:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v9) {
    return;
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v9) {
      return;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_23:
  __break(1u);
}

void *sub_100229FF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100013A80(&qword_100478690);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100231E14(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_10022A100(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10022AEAC(a1, v4);
}

unint64_t sub_10022A144(uint64_t a1, uint64_t *a2)
{
  sub_100013A80(a2);
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10022AFC8(a1, v4, a2);
}

uint64_t sub_10022A1C4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10018FE08(0, &qword_100479F30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_10022A464(v7, result + 1);
    char v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_10022A65C();
      unint64_t v23 = v28;
    }
    else
    {
      unint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    sub_1001F1428((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10018FE08(0, &qword_100479F30);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_10022A8FC((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int sub_10022A464(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100013A80((uint64_t *)&unk_100479F58);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10018FE08(0, &qword_100479F30);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_10022A65C();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_10022A65C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80((uint64_t *)&unk_100479F58);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    char v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

void sub_10022A8FC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10022A65C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_10022AA84();
      goto LABEL_14;
    }
    sub_10022AC30();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10018FE08(0, &qword_100479F30);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id sub_10022AA84()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_100479F58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10022AC30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80((uint64_t *)&unk_100479F58);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  char v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_10022AEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10018FE08(0, &qword_10047A068);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10022AFC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    sub_100013A80(a3);
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_10022B094(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100013660(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10022C344();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1001B6C58(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10022B17C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100013660(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10022C894(&qword_10047A078);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001F1A4C(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10022B254(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10022A100(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10022C6E8();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_10022CBF8(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10022B31C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_100479F78);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    int64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    char v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    Swift::Int v19 = (void *)(*(void *)(v7 + 48) + v18);
    *Swift::Int v19 = v34;
    v19[1] = v33;
    id v20 = (void *)(*(void *)(v7 + 56) + v18);
    *id v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022B644(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_100479F70);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10018FF5C((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10018FF6C(v25, (uint64_t)&v38);
      sub_10018FDAC(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10018FF5C(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022B95C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047A0B0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    char v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022BC34(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100013A80(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    id v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_10022BF40(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047A088);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t *sub_10022C258(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *result;
  if (*result)
  {
    uint64_t v8 = (void *)*a3;
    if (a2)
    {
      *(void *)(v8[7] + 8 * a4) = v7;
    }
    else
    {
      v8[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v9 = 8 * a4;
      *(void *)(v8[6] + v9) = a5;
      *(void *)(v8[7] + v9) = v7;
      uint64_t v10 = v8[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11)
      {
        __break(1u);
        return result;
      }
      v8[2] = v12;
      id v13 = a5;
    }
  }
  else if (a2)
  {
    sub_10018FE08(0, &qword_10047A068);
    swift_arrayDestroy();
    sub_10022CBF8(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

void *sub_10022C344()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_100479F78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022C500()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_100479F70);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10018FF6C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10018FDAC(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_10018FF5C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022C6E8()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047A0B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10022C894(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100013A80(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022CA40()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047A088);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10022CBF8(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              void *v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            unint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

_OWORD *sub_10022CDAC(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  id result = sub_10018FF5C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10022CE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  long long v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100013660(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10022C344();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10022B31C(v17, a5 & 1);
  unint64_t v23 = sub_100013660(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (void *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10022CFB0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_10018C3C4(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10022C500();
      goto LABEL_7;
    }
    sub_10022B644(v13, a3 & 1);
    unint64_t v19 = sub_10018C3C4(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10018FF6C(a2, (uint64_t)v21);
      return sub_10022CDAC(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10018FD5C((uint64_t)v17);

  return sub_10018FF5C(a1, v17);
}

id sub_10022D0FC(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10022A100((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10022C6E8();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10022B95C(v12, a3 & 1);
  unint64_t v18 = sub_10022A100((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_10018FE08(0, &qword_10047A068);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v23;

  return a2;
}

void sub_10022D270(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100013660(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10022C894(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10022BC34(v17, a4 & 1, a5);
  unint64_t v22 = sub_100013660(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v24 = (uint64_t *)(v20[6] + 16 * v14);
  *char v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

uint64_t sub_10022D3F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10022D418(a1, a2, a3, *v3);
  *int64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10022D418(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100013A80(&qword_10047A058);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  char v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t *sub_10022D580(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    unint64_t v6 = sub_10022D6D8((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    int64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_10022D6D8((unint64_t *)v7, v4, (uint64_t)v2);
    swift_slowDealloc();
  }
  return v2;
}

unint64_t *sub_10022D6D8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16) >= 2uLL)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_10022D82C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10022D82C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100013A80(&qword_10047A088);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    char v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10022DAC8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100013A80(&qword_100479F78);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  char v39 = a1;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v41 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v40) {
        return v9;
      }
      unint64_t v16 = v39[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v40) {
          return v9;
        }
        unint64_t v16 = v39[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v40) {
            return v9;
          }
          unint64_t v16 = v39[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v40) {
              return v9;
            }
            unint64_t v16 = v39[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v40) {
                  return v9;
                }
                unint64_t v16 = v39[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v41 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = 16 * v14;
    uint64_t v20 = v4;
    uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + v19);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    unint64_t v24 = (uint64_t *)(*(void *)(v4 + 56) + v19);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v12 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t v35 = 16 * v30;
    char v36 = (void *)(*(void *)(v9 + 48) + v35);
    *char v36 = v23;
    v36[1] = v22;
    int64_t v37 = (void *)(*(void *)(v9 + 56) + v35);
    *int64_t v37 = v25;
    v37[1] = v26;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v20;
    uint64_t v11 = v41;
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10022DD88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100013A80(&qword_10047A060);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_100015B28(&qword_100479AF8, (void (*)(uint64_t))&type metadata accessor for Participant);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10022E114(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_10022E29C((uint64_t)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v7 = sub_10022E29C((uint64_t)v8, v5, a2, v3);
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

uint64_t sub_10022E29C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  v57 = (unint64_t *)result;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v58 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v59 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v61 = 0;
    uint64_t v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          unint64_t v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          int64_t v62 = v6;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59) {
            goto LABEL_79;
          }
          unint64_t v14 = *(void *)(v58 + 8 * v13);
          int64_t v15 = v6 + 1;
          if (!v14)
          {
            int64_t v15 = v6 + 2;
            if (v6 + 2 >= v59) {
              goto LABEL_79;
            }
            unint64_t v14 = *(void *)(v58 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v6 + 3;
              if (v6 + 3 >= v59) {
                goto LABEL_79;
              }
              unint64_t v14 = *(void *)(v58 + 8 * v15);
              if (!v14)
              {
                uint64_t v16 = v6 + 4;
                if (v6 + 4 >= v59) {
                  goto LABEL_79;
                }
                unint64_t v14 = *(void *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    int64_t v15 = v16 + 1;
                    if (__OFADD__(v16, 1)) {
                      goto LABEL_83;
                    }
                    if (v15 >= v59) {
                      goto LABEL_79;
                    }
                    unint64_t v14 = *(void *)(v58 + 8 * v15);
                    ++v16;
                    if (v14) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          unint64_t v9 = (v14 - 1) & v14;
          int64_t v62 = v15;
          unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v22 = v20 & ~v21;
        unint64_t v23 = v22 >> 6;
        uint64_t v24 = 1 << v22;
        if (((1 << v22) & *(void *)(v10 + 8 * (v22 >> 6))) != 0) {
          break;
        }
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v6 = v62;
        uint64_t v5 = a3;
        uint64_t v4 = a4;
      }
      uint64_t v25 = *(void *)(a3 + 48);
      unint64_t v26 = (void *)(v25 + 16 * v22);
      BOOL v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v28 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v30 + 1)
        {
          unint64_t v30 = i & v28;
          if (((*(void *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0) {
            break;
          }
          char v31 = (void *)(v25 + 16 * v30);
          BOOL v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v23 = v30 >> 6;
            uint64_t v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_38:
      int64_t v6 = v62;
      uint64_t v5 = a3;
      v57[v23] |= v24;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v4 = a4;
      if (v33) {
        goto LABEL_82;
      }
    }
  }
  int64_t v34 = 0;
  uint64_t v60 = a3 + 56;
  uint64_t v61 = 0;
  uint64_t v35 = 1 << *(unsigned char *)(a3 + 32);
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & *(void *)(a3 + 56);
  int64_t v63 = (unint64_t)(v35 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v63) {
        goto LABEL_79;
      }
      unint64_t v42 = *(void *)(v60 + 8 * v34);
      if (!v42)
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v63) {
          goto LABEL_79;
        }
        unint64_t v42 = *(void *)(v60 + 8 * v34);
        if (!v42) {
          break;
        }
      }
    }
LABEL_62:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    uint64_t v44 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v40);
    uint64_t v46 = *v44;
    uint64_t v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v47 = Hasher._finalize()();
    uint64_t v48 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v49 = v47 & ~v48;
    if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
      goto LABEL_46;
    }
    uint64_t v50 = *(void *)(a4 + 48);
    v51 = (void *)(v50 + 16 * v49);
    BOOL v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      BOOL v33 = __OFADD__(v61++, 1);
      uint64_t v5 = a3;
      uint64_t v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return sub_100014844(v57, a2, v61, v5);
      }
    }
    else
    {
      uint64_t v53 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v53;
        if (((*(void *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        uint64_t v54 = (void *)(v50 + 16 * v49);
        BOOL v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_76;
        }
      }
LABEL_46:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = a3;
      uint64_t v4 = a4;
    }
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v63) {
    goto LABEL_79;
  }
  unint64_t v42 = *(void *)(v60 + 8 * v43);
  if (v42)
  {
    int64_t v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    int64_t v34 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v34 >= v63) {
      goto LABEL_79;
    }
    unint64_t v42 = *(void *)(v60 + 8 * v34);
    ++v43;
    if (v42) {
      goto LABEL_62;
    }
  }
LABEL_84:
  __break(1u);
  return result;
}

void *sub_10022E7DC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    Swift::Int v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10022E9D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100013A80(&qword_100478380);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_10022E7DC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10018F864();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10022EAC4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_10022EB4C(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10018FE08(0, &qword_100479F30);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10018FE08(0, &qword_100479F30);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  int64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  int64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

void *sub_10022EDC4(void *a1)
{
  return sub_100229FF0(0, a1[2], 0, a1);
}

unint64_t sub_10022EDD8(unint64_t result)
{
  if (result > 7) {
    return 0;
  }
  return result;
}

unint64_t sub_10022EDE8(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

uint64_t sub_10022EDF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10022EE30()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___MRDFastSyncGroupSession__state);
  *(unsigned char *)(v1 + 8) = 0;
}

uint64_t sub_10022EE4C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10022EE5C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier + 8);
  if (v2)
  {
    uint64_t v3 = *(void ***)(v0 + 24);
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier);
    char v5 = (uint64_t *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_guests);
    swift_beginAccess();
    uint64_t v6 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v7 = sub_10018835C(v4, v2, v6);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void **)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_localIdentity);
    id v9 = objc_allocWithZone((Class)MRDFastSyncGroupSessionParticipant);
    id v10 = v8;
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v9 initWithIdentifier:v11 identity:v10 connected:1 guest:v7 & 1];

    char v13 = *v3;
    *uint64_t v3 = v12;
  }
}

uint64_t sub_10022EF74()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for RemoteControlActivity()
{
  return self;
}

uint64_t type metadata accessor for MRDFastSyncGroupSession()
{
  return self;
}

void sub_10022EFCC(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100013A80((uint64_t *)&unk_100479F58);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  char v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_10018FE08(0, &qword_100479F30);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10018FE08(0, &qword_100479F30);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t _s12mediaremoted23MRDFastSyncGroupSessionC13stateToStringySSAA0bcdE5StateOFZ_0(unint64_t a1)
{
  if (a1 < 5) {
    return *(void *)&aInitial_0[8 * a1];
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_10022F38C()
{
  sub_1001F7708(*(void **)(v0 + 16));
}

void *sub_10022F394()
{
  return sub_100215528(0);
}

void *sub_10022F3BC()
{
  return sub_1001F97C4(*(char **)(v0 + 16));
}

void sub_10022F3C8()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  unint64_t v4 = v0[4];
  uint64_t v3 = (void *)v0[5];
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10018A9A8(v5, (uint64_t)qword_10047F3A8);
  id v6 = v1;
  swift_bridgeObjectRetain_n();
  id v7 = v3;
  uint64_t v8 = (char *)v6;
  uint64_t v9 = (char *)v7;
  BOOL v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v41 = v2;
    uint64_t v13 = (void *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138544130;
    uint64_t v44 = v8;
    log = v10;
    unint64_t v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v8;

    *(_WORD *)(v12 + 12) = 2082;
    os_log_type_t type = v11;
    uint64_t v16 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v15 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    sub_10018A9E0(v16, v15, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v12 + 22) = 2082;
    swift_bridgeObjectRetain();
    sub_10018A9E0(v41, v4, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 32) = 2112;
    uint64_t v44 = v9;
    uint64_t v17 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13[1] = v9;

    _os_log_impl((void *)&_mh_execute_header, log, type, "[%{public}@]<%{public}s> Prewarm identifier: %{public}s for identity: %@.", (uint8_t *)v12, 0x2Au);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    uint64_t v2 = v41;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v18 = &v8[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  swift_beginAccess();
  if (!*(void *)v18) {
    goto LABEL_27;
  }
  if (!*(void *)(*(void *)v18 + 16)
    || (char v19 = v9,
        swift_bridgeObjectRetain(),
        sub_10022A100((uint64_t)v19),
        char v21 = v20,
        swift_bridgeObjectRelease(),
        v19,
        (v21 & 1) == 0))
  {
    swift_beginAccess();
    if (!*(void *)v18)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    char v22 = v9;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *(void *)v18;
    *(void *)id v18 = 0x8000000000000000;
    sub_10022D0FC((uint64_t)_swiftEmptyArrayStorage, v22, isUniquelyReferenced_nonNull_native);
    *(void *)id v18 = v43;
    swift_bridgeObjectRelease();

    swift_endAccess();
  }
  swift_beginAccess();
  if (!*(void *)v18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = v9;
  uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *(void *)v18;
  uint64_t v26 = v43;
  *(void *)id v18 = 0x8000000000000000;
  id v27 = v24;
  unint64_t v29 = sub_10022A100((uint64_t)v27);
  uint64_t v30 = *(void *)(v26 + 16);
  BOOL v31 = (v28 & 1) == 0;
  uint64_t v32 = v30 + v31;
  if (__OFADD__(v30, v31))
  {
    __break(1u);
    goto LABEL_24;
  }
  char v33 = v28;
  if (*(void *)(v26 + 24) >= v32)
  {
    if (v25)
    {
      if (v28) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_10022C6E8();
      if (v33) {
        goto LABEL_19;
      }
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_10022B95C(v32, v25);
  unint64_t v34 = sub_10022A100((uint64_t)v27);
  if ((v33 & 1) != (v35 & 1))
  {
LABEL_30:
    sub_10018FE08(0, &qword_10047A068);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v29 = v34;
  if ((v33 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_19:
  uint64_t v25 = *(void *)(*(void *)(v43 + 56) + 8 * v29);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_24:
  }
    uint64_t v25 = (uint64_t)sub_100229FF0(0, *(void *)(v25 + 16) + 1, 1, (void *)v25);
  unint64_t v37 = *(void *)(v25 + 16);
  unint64_t v36 = *(void *)(v25 + 24);
  if (v37 >= v36 >> 1) {
    uint64_t v25 = (uint64_t)sub_100229FF0((void *)(v36 > 1), v37 + 1, 1, (void *)v25);
  }
  *(void *)(v25 + 16) = v37 + 1;
  uint64_t v38 = v25 + 16 * v37;
  *(void *)(v38 + 32) = v2;
  *(void *)(v38 + 40) = v4;
  uint64_t v42 = v25;
  sub_10022C258(&v42, 1, &v43, v29, v27);

  swift_bridgeObjectRelease();
  *(void *)id v18 = v43;
  swift_endAccess();
}

uint64_t sub_10022F954()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022F968()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10022F9B0()
{
  uint64_t v1 = v0[2];
  uint64_t v62 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  if (qword_10047F3A0 != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v4 = type metadata accessor for Logger();
  sub_10018A9A8(v4, (uint64_t)qword_10047F3A8);
  id v5 = (id)v1;
  swift_bridgeObjectRetain_n();
  id v6 = (id)v2;
  id v7 = (char *)v5;
  uint64_t v8 = (char *)v6;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v2, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    unint64_t v63 = v3;
    os_log_type_t v11 = (void *)swift_slowAlloc();
    v68[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138544130;
    uint64_t v66 = v7;
    uint64_t v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v11 = v7;

    *(_WORD *)(v10 + 12) = 2082;
    os_log_type_t type = v9;
    uint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v66 = (char *)sub_10018A9E0(v14, v13, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v66 = (char *)sub_10018A9E0(v62, v63, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 32) = 2112;
    uint64_t v66 = v8;
    unint64_t v15 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = v8;

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, type, "[%{public}@]<%{public}s> Cancel prewarming identifier: %{public}s for identity: %@.", (uint8_t *)v10, 0x2Au);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    uint64_t v3 = v63;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  uint64_t v16 = &v7[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  swift_beginAccess();
  if (!*(void *)v16)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (*(void *)(*(void *)v16 + 16))
  {
    uint64_t v1 = v8;
    swift_bridgeObjectRetain();
    sub_10022A100(v1);
    uint64_t v2 = v17;
    swift_bridgeObjectRelease();

    if (v2)
    {
      swift_beginAccess();
      if (!*(void *)v16) {
        goto LABEL_62;
      }
      swift_bridgeObjectRetain();
      id v18 = (id)v1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v67 = *(void **)v16;
      uint64_t v20 = (uint64_t)v67;
      *(void *)uint64_t v16 = 0x8000000000000000;
      id v21 = v18;
      uint64_t v2 = sub_10022A100((uint64_t)v21);
      uint64_t v23 = *(void *)(v20 + 16);
      BOOL v24 = (v22 & 1) == 0;
      uint64_t v25 = v23 + v24;
      uint64_t v26 = v62;
      if (__OFADD__(v23, v24)) {
        goto LABEL_53;
      }
      LOBYTE(v1) = v22;
      if (*(void *)(v20 + 24) < v25)
      {
        sub_10022B95C(v25, isUniquelyReferenced_nonNull_native);
        unint64_t v27 = sub_10022A100((uint64_t)v21);
        if ((v1 & 1) != (v28 & 1)) {
          goto LABEL_66;
        }
        uint64_t v2 = v27;
        if (v1) {
          goto LABEL_20;
        }
        goto LABEL_58;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_57;
      }
      if ((v22 & 1) == 0)
      {
LABEL_58:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      while (1)
      {
LABEL_20:
        uint64_t v41 = *(void **)(v67[7] + 8 * v2);
        uint64_t v65 = v41;
        uint64_t v42 = sub_10023205C((uint64_t)v41, v26, v3);
        if (v43) {
          goto LABEL_25;
        }
        uint64_t v1 = v42;
        unint64_t v44 = v42 + 1;
        if (__OFADD__(v42, 1)) {
          goto LABEL_59;
        }
        unint64_t v45 = v41[2];
        os_log_t log = (os_log_t)v2;
        if (v44 != v45)
        {
          if ((v44 & 0x8000000000000000) != 0) {
            goto LABEL_60;
          }
          uint64_t v2 = 16 * v42;
          id v64 = v21;
          while (1)
          {
            if (v44 >= v45)
            {
              __break(1u);
              goto LABEL_51;
            }
            uint64_t v54 = (char *)v41 + v2;
            BOOL v55 = *(void *)((char *)v41 + v2 + 48) == v26 && *(void *)((char *)v41 + v2 + 56) == v3;
            if (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v44 != v1)
              {
                if (v1 >= v45) {
                  goto LABEL_55;
                }
                uint64_t v26 = v3;
                uint64_t v56 = &v41[2 * v1 + 4];
                uint64_t v3 = *v56;
                uint64_t v57 = v56[1];
                id v21 = (id)*((void *)v54 + 6);
                uint64_t v58 = *((void *)v54 + 7);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v41 = sub_10022EDC4(v41);
                }
                int64_t v59 = &v41[2 * v1];
                v59[4] = v21;
                v59[5] = v58;
                swift_bridgeObjectRelease();
                if (v44 >= v41[2]) {
                  goto LABEL_56;
                }
                BOOL v52 = (char *)v41 + v2;
                *((void *)v52 + 6) = v3;
                *((void *)v52 + 7) = v57;
                swift_bridgeObjectRelease();
                uint64_t v65 = v41;
                uint64_t v3 = v26;
                uint64_t v26 = v62;
                id v21 = v64;
              }
              if (__OFADD__(v1++, 1)) {
                break;
              }
            }
            ++v44;
            unint64_t v45 = v41[2];
            v2 += 16;
            if (v44 == v45) {
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
LABEL_23:
        uint64_t v2 = (uint64_t)log;
        if ((uint64_t)v44 < v1) {
          break;
        }
LABEL_26:
        sub_1002320F0(v1, v44);
        sub_10022C258((uint64_t *)&v65, 1, (uint64_t *)&v67, v2, v21);
        uint64_t v2 = (uint64_t)v65;

        swift_bridgeObjectRelease();
        *(void *)uint64_t v16 = v67;
        swift_endAccess();

        swift_bridgeObjectRelease();
        uint64_t v46 = *(void **)v16;
        if (!*(void *)v16) {
          goto LABEL_63;
        }
        if (v46[2])
        {
          uint64_t v2 = (uint64_t)v21;
          swift_bridgeObjectRetain();
          unint64_t v47 = sub_10022A100(v2);
          if (v48)
          {
            uint64_t v49 = *(void *)(v46[7] + 8 * v47);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();

            uint64_t v50 = *(void *)(v49 + 16);
            swift_bridgeObjectRelease();
            if (v50) {
              return;
            }
            swift_beginAccess();
            if (*(void *)v16)
            {
              id v51 = (id)v2;
              sub_10022B254((uint64_t)v51);
              swift_endAccess();

              swift_bridgeObjectRelease();
              return;
            }
LABEL_65:
            __break(1u);
LABEL_66:
            swift_bridgeObjectRelease();
            sub_10018FE08(0, &qword_10047A068);
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return;
          }
LABEL_64:
          swift_bridgeObjectRelease();

          __break(1u);
          goto LABEL_65;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        sub_10022C6E8();
        if ((v1 & 1) == 0) {
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_25:
      uint64_t v1 = v41[2];
      unint64_t v44 = v1;
      goto LABEL_26;
    }
  }
  unint64_t v29 = v7;
  uint64_t v30 = v8;
  BOOL v31 = v29;
  uint64_t v32 = v30;
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    unint64_t v36 = (void *)swift_slowAlloc();
    uint64_t v66 = (char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 138543874;
    char v67 = v31;
    unint64_t v37 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v36 = v31;

    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v38 = *(void *)&v37[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v39 = *(void *)&v37[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    char v67 = (void *)sub_10018A9E0(v38, v39, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v35 + 22) = 2112;
    char v67 = v32;
    uint64_t v40 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v36[1] = v32;

    _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}@]<%{public}s> No prewarmed identifiers for identity: %@.", (uint8_t *)v35, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1002302A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002302B8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession__state) == 1
    && !*(void *)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_presenceTask))
  {
    return sub_100216338();
  }
  return result;
}

uint64_t sub_100230300()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100230340()
{
  uint64_t v2 = (char *)v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = (unsigned char *)v0[4];
  swift_beginAccess();
  id v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  LOBYTE(v1) = sub_10023225C(v5, v4);

  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v6 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_removedParticipantIdentityIdentifiers];
    swift_bridgeObjectRetain();
    id v7 = [v4 identifier];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    LOBYTE(v7) = sub_10018835C(v8, v10, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      if (qword_10047F3A0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10018A9A8(v11, (uint64_t)qword_10047F3A8);
      uint64_t v12 = v2;
      id v13 = v4;
      uint64_t v14 = v12;
      id v15 = v13;
      uint64_t v16 = v14;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = (void *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 138543874;
        id v21 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v20 = v16;

        *(_WORD *)(v19 + 12) = 2082;
        uint64_t v22 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v23 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        sub_10018A9E0(v22, v23, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v19 + 22) = 2112;
        id v24 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v20[1] = v15;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}@]<%{public}s> Auto-approving pre-authorized identity: %@", (uint8_t *)v19, 0x20u);
        sub_100013A80((uint64_t *)&unk_10047B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      *uint64_t v3 = 1;
    }
  }
}

uint64_t sub_1002306A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002306B8()
{
  return sub_100239CC0((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002306D0()
{
  sub_1001FB360(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1002306DC()
{
  return sub_100239E9C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1002306F4()
{
  id v1 = [*(id *)(v0 + 24) identifier];
  Swift::Int v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::Int v4 = v3;

  swift_beginAccess();
  sub_10000DDD8(&v6, v2, v4);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100230794()
{
  return sub_100239E9C((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_1002307AC()
{
  Swift::Int v2 = *(void **)(v0 + 16);
  id v1 = *(void **)(v0 + 24);
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10018A9A8(v3, (uint64_t)qword_10047F3A8);
  id v4 = v2;
  swift_unknownObjectRetain_n();
  uint64_t v5 = (char *)v4;
  Swift::Int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    os_log_type_t v18 = (void *)swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543874;
    uint64_t v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v18 = v5;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    sub_10018A9E0(v11, v10, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 22) = 2080;
    id v12 = [v1 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_10018A9E0(v13, v15, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}@]<%{public}s> Adding pending participant: %s", (uint8_t *)v8, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }

  uint64_t v16 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants];
  swift_beginAccess();
  swift_unknownObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v16 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return sub_1002121F0(1);
}

uint64_t sub_100230AFC()
{
  return sub_100239E9C((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_100230B14()
{
  Swift::Int v2 = *(void **)(v0 + 16);
  id v1 = *(void **)(v0 + 24);
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10018A9A8(v3, (uint64_t)qword_10047F3A8);
  id v4 = v2;
  swift_unknownObjectRetain_n();
  uint64_t v5 = (char *)v4;
  Swift::Int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543874;
    uint64_t v9 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v5;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    sub_10018A9E0(v11, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 22) = 2080;
    id v12 = [v1 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_10018A9E0(v13, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}@]<%{public}s> Removing pending participant: %s", (uint8_t *)v8, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }

  uint64_t v16 = (unint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants];
  swift_beginAccess();
  swift_unknownObjectRetain();
  uint64_t v17 = sub_1002332F4(v16, v1);
  id result = (id)swift_unknownObjectRelease();
  if (*v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    id result = (id)swift_bridgeObjectRelease();
    if (v19 >= v17) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19 >= v17)
    {
LABEL_8:
      sub_1002336D8(v17, v19);
      swift_endAccess();
      return sub_1002121F0(1);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100230E9C()
{
  return sub_100239E9C((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_100230EB4()
{
  sub_1001FD118(*(void **)(v0 + 16), *(void **)(v0 + 24), "[%{public}@]<%{public}s> Requesting to approve pending participant: %s", 1);
}

uint64_t sub_100230EDC()
{
  return sub_100239E9C((void (*)(void))&_swift_unknownObjectRelease);
}

void sub_100230EF4()
{
  sub_1001FD118(*(void **)(v0 + 16), *(void **)(v0 + 24), "[%{public}@]<%{public}s> Requesting to reject pending participant: %s", 0);
}

uint64_t sub_100230F1C()
{
  return sub_100239CC0((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100230F34()
{
  sub_1001FDBBC(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100230F40()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100230F78()
{
  sub_1001FE660(*(void **)(v0 + 16));
}

uint64_t sub_100230F80()
{
  return sub_100239CC0((void (*)(void))&_swift_release);
}

uint64_t sub_100230F98()
{
  return sub_1001FF24C(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100230FA4()
{
  return sub_100239CC0((void (*)(void))&_swift_release);
}

uint64_t sub_100230FBC()
{
  return sub_100202510(v0[2], v0[3], v0[4]);
}

uint64_t sub_100230FC8()
{
  sub_10018FE9C(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100231008()
{
  id v1 = *(void **)(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8))();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2A0))();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      [v3 session:v1 didReceiveRemoteControlMessage:isa from:v4];
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100231130()
{
  sub_10018FE9C(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100231178()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x2B8))();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v5 session:v2 didReceiveRemoteControlMessage:isa from:v3];
    swift_unknownObjectRelease();
  }
}

unint64_t sub_100231260()
{
  unint64_t result = qword_100479B08;
  if (!qword_100479B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B08);
  }
  return result;
}

uint64_t sub_1002312B4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1002312C4(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v4 = *(v3 - 1);
      Swift::Int v5 = *v3;
      swift_bridgeObjectRetain();
      sub_10000DDD8(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t sub_100231344(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v4 = a1;
  sub_10022D3F8(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v6 = sub_10022EAC4(v4);
  uint64_t v7 = 0;
  uint64_t v8 = v4 + 64;
  char v9 = *(unsigned char *)(v4 + 32);
  uint64_t v48 = v4 + 80;
  int64_t v49 = v2;
  uint64_t v51 = v4 + 64;
  uint64_t v52 = v4;
  int v50 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    unint64_t v13 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v4 + 36) != v5) {
      goto LABEL_30;
    }
    uint64_t v54 = v7;
    BOOL v55 = v3;
    unint64_t v14 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v6);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (uint64_t *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_guests);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v18 = *v17;
    swift_bridgeObjectRetain();
    sub_10018835C(v15, v16, v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap);
    swift_beginAccess();
    uint64_t v20 = *v19;
    uint64_t v21 = *(void *)(v20 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v21) {
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_100013660(v15, v16);
    if ((v24 & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v25 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v28 = (void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_identities);
    swift_beginAccess();
    uint64_t v3 = (void *)*v28;
    if (!v3[2]) {
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    unint64_t v29 = sub_100013660(v26, v27);
    if ((v30 & 1) == 0) {
      goto LABEL_34;
    }
    id v31 = *(id *)(v3[7] + 8 * v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10028A950();
    if (v53)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    uint64_t v38 = v34;
    int v39 = v35;
    swift_bridgeObjectRelease();
    uint64_t v3 = v55;
    unint64_t v41 = v55[2];
    unint64_t v40 = v55[3];
    if (v41 >= v40 >> 1)
    {
      sub_10022D3F8(v40 > 1, v41 + 1, 1);
      uint64_t v3 = v55;
    }
    v3[2] = v41 + 1;
    uint64_t v42 = &v3[4 * v41];
    v42[4] = v36;
    v42[5] = v37;
    v42[6] = v38;
    *((unsigned char *)v42 + 56) = v39 & 1;
    *((unsigned char *)v42 + 57) = BYTE1(v39) & 1;
    *((unsigned char *)v42 + 58) = BYTE2(v39) & 1;
    uint64_t v4 = v52;
    char v9 = *(unsigned char *)(v52 + 32);
    unint64_t v10 = 1 << v9;
    if (v6 >= 1 << v9) {
      goto LABEL_31;
    }
    uint64_t v8 = v51;
    uint64_t v43 = *(void *)(v51 + 8 * v13);
    if ((v43 & (1 << v6)) == 0) {
      goto LABEL_32;
    }
    int v5 = v50;
    if (*(_DWORD *)(v52 + 36) != v50) {
      goto LABEL_33;
    }
    unint64_t v44 = v43 & (-2 << (v6 & 0x3F));
    if (v44)
    {
      unint64_t v10 = __clz(__rbit64(v44)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v49;
      uint64_t v12 = v54;
    }
    else
    {
      unint64_t v45 = v13 + 1;
      unint64_t v46 = (v10 + 63) >> 6;
      int64_t v11 = v49;
      uint64_t v12 = v54;
      if (v13 + 1 < v46)
      {
        unint64_t v47 = *(void *)(v51 + 8 * v45);
        if (v47)
        {
LABEL_25:
          unint64_t v10 = __clz(__rbit64(v47)) + (v45 << 6);
        }
        else
        {
          while (v46 - 2 != v13)
          {
            unint64_t v47 = *(void *)(v48 + 8 * v13++);
            if (v47)
            {
              unint64_t v45 = v13 + 1;
              goto LABEL_25;
            }
          }
        }
      }
    }
    uint64_t v7 = v12 + 1;
    uint64_t v6 = v10;
    if (v7 == v11) {
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_36:
  uint64_t result = swift_bridgeObjectRelease();
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100231718(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a2;
  uint64_t v51 = a1;
  uint64_t v57 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v65 - 8);
  uint64_t v9 = __chkstk_darwin(v65);
  id v64 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v63 = a3;
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v58 = a3 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  BOOL v55 = (void *)(a4 + OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier);
  uint64_t v61 = a4 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap;
  uint64_t result = swift_beginAccess();
  uint64_t v52 = 0;
  int64_t v18 = 0;
  uint64_t v19 = v8 + 16;
  uint64_t v54 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v62 = v8;
  int64_t v59 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v60 = (void (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v25 >= v59) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v58 + 8 * v25);
    ++v18;
    if (!v26)
    {
      int64_t v18 = v25 + 1;
      if (v25 + 1 >= v59) {
        goto LABEL_34;
      }
      unint64_t v26 = *(void *)(v58 + 8 * v18);
      if (!v26)
      {
        int64_t v18 = v25 + 2;
        if (v25 + 2 >= v59) {
          goto LABEL_34;
        }
        unint64_t v26 = *(void *)(v58 + 8 * v18);
        if (!v26) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_22:
    char v28 = *(void (**)(char *, unint64_t, uint64_t))(v62 + 16);
    uint64_t v29 = v19;
    v28(v12, *(void *)(v63 + 48) + *(void *)(v62 + 72) * v24, v65);
    uint64_t v30 = Participant.handle.getter();
    uint64_t v32 = v31;
    if (!*(void *)(*(void *)v61 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v33 = v30;
    swift_bridgeObjectRetain();
    sub_100013660(v33, v32);
    char v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35)
    {
      uint64_t v19 = v29;
      v28(v64, (unint64_t)v12, v65);
      uint64_t v36 = v56;
      Participant.id.getter();
      uint64_t v37 = UUID.uuidString.getter();
      uint64_t v39 = v38;
      (*v54)(v36, v57);
      uint64_t v40 = v55[1];
      if (v40)
      {
        if (v37 == *v55 && v40 == v39)
        {
          unint64_t v41 = *v60;
          uint64_t v42 = v65;
          (*v60)(v64, v65);
          swift_bridgeObjectRelease();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v41)(v12, v42);
        }
        else
        {
          int v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v43 = *v60;
          uint64_t v44 = v65;
          (*v60)(v64, v65);
          swift_bridgeObjectRelease();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v12, v44);
          if ((v53 & 1) == 0) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        unint64_t v45 = *v60;
        uint64_t v46 = v65;
        (*v60)(v64, v65);
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v12, v46);
LABEL_31:
        *(unint64_t *)((char *)v51 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
        if (__OFADD__(v52++, 1))
        {
          __break(1u);
LABEL_34:
          uint64_t v48 = v63;
          swift_retain();
          return sub_10022DD88(v51, v50, v52, v48);
        }
      }
    }
    else
    {
LABEL_5:
      uint64_t v20 = v64;
      uint64_t v21 = v65;
      uint64_t v19 = v29;
      v28(v64, (unint64_t)v12, v65);
      uint64_t v22 = *v60;
      (*v60)(v20, v21);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v12, v21);
    }
  }
  int64_t v27 = v25 + 3;
  if (v27 >= v59) {
    goto LABEL_34;
  }
  unint64_t v26 = *(void *)(v58 + 8 * v27);
  if (v26)
  {
    int64_t v18 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v18 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v18 >= v59) {
      goto LABEL_34;
    }
    unint64_t v26 = *(void *)(v58 + 8 * v18);
    ++v27;
    if (v26) {
      goto LABEL_21;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100231C60(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (char *)&v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = sub_100231718((unint64_t *)v9, v6, a1, (uint64_t)v10);
    swift_release();

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, 8 * v6);
    id v13 = v8;
    uint64_t v11 = sub_100231718((unint64_t *)v12, v6, a1, (uint64_t)v13);
    swift_release();

    swift_slowDealloc();
  }
  return v11;
}

uint64_t sub_100231E14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100231F08(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10018FE08(0, &qword_100479F30);
  sub_100236E24();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        unint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10022A1C4(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_10022A1C4(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10023205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  for (uint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    BOOL v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1002320F0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100229FF0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10023225C(uint64_t a1, void *a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_21;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v25) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v24 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v25) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(v24 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v25) {
          goto LABEL_29;
        }
        unint64_t v10 = *(void *)(v24 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v25) {
            goto LABEL_29;
          }
          unint64_t v10 = *(void *)(v24 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 4;
            if (v11 >= v25)
            {
LABEL_29:
              swift_release();
              return 0;
            }
            unint64_t v10 = *(void *)(v24 + 8 * v11);
            int64_t v6 = v11;
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_21:
    uint64_t v12 = *(void **)(*(void *)(a1 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    id v13 = v12;
    id v14 = [v13 identifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    id v18 = [a2 identifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (v15 == v19 && v17 == v21)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_28:
      swift_release();
      return 1;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_28;
    }
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v25) {
      goto LABEL_29;
    }
    unint64_t v10 = *(void *)(v24 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_20;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1002324D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a3;
  uint64_t v55 = a2;
  uint64_t v48 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unint64_t v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Participant();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12);
  uint64_t v51 = (char *)&v42 - v15;
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v46 = (void *)(a4 + OBJC_IVAR___MRDFastSyncGroupSession_leaderFastSyncIdentifier);
  uint64_t v56 = v9 + 16;
  int64_t v44 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v45 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v49 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v50 = v9 + 32;
  uint64_t v53 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v19) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v26 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if (v26 >= v44) {
    goto LABEL_34;
  }
  unint64_t v27 = *(void *)(v43 + 8 * v26);
  ++i;
  if (v27) {
    goto LABEL_22;
  }
  int64_t i = v26 + 1;
  if (v26 + 1 >= v44) {
    goto LABEL_34;
  }
  unint64_t v27 = *(void *)(v43 + 8 * i);
  if (v27) {
    goto LABEL_22;
  }
  int64_t i = v26 + 2;
  if (v26 + 2 >= v44) {
    goto LABEL_34;
  }
  unint64_t v27 = *(void *)(v43 + 8 * i);
  if (v27) {
    goto LABEL_22;
  }
  int64_t i = v26 + 3;
  if (v26 + 3 >= v44) {
    goto LABEL_34;
  }
  unint64_t v27 = *(void *)(v43 + 8 * i);
  if (v27) {
    goto LABEL_22;
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v44)
  {
LABEL_34:
    swift_release();
    return 0;
  }
  unint64_t v27 = *(void *)(v43 + 8 * v28);
  for (int64_t i = v28; !v27; ++v28)
  {
    int64_t i = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_37;
    }
    if (i >= v44) {
      goto LABEL_34;
    }
    unint64_t v27 = *(void *)(v43 + 8 * i);
  }
LABEL_22:
  unint64_t v19 = (v27 - 1) & v27;
  for (unint64_t j = __clz(__rbit64(v27)) + (i << 6); ; unint64_t j = v24 | (i << 6))
  {
    uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v30 = v51;
    v29(v51, *(void *)(v53 + 48) + *(void *)(v9 + 72) * j, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v30, v8);
    if (Participant.handle.getter() == v55 && v31 == v52) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = v54;
    v29(v54, (unint64_t)v14, v8);
    if (v32) {
      goto LABEL_33;
    }
    char v34 = v47;
    Participant.id.getter();
    uint64_t v35 = UUID.uuidString.getter();
    uint64_t v37 = v36;
    (*v45)(v34, v48);
    uint64_t v38 = v46[1];
    if (v38)
    {
      if (v35 == *v46 && v38 == v37)
      {
        unint64_t v41 = *v49;
        (*v49)(v54, v8);
        swift_bridgeObjectRelease();
        v41(v14, v8);
        goto LABEL_35;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      char v23 = *v49;
      (*v49)(v54, v8);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v14, v8);
      if (v22) {
        goto LABEL_35;
      }
      if (!v19) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v39 = *v49;
      (*v49)(v33, v8);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v39)(v14, v8);
      if (!v19) {
        goto LABEL_8;
      }
    }
LABEL_7:
    unint64_t v24 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = v54;
  v29(v54, (unint64_t)v14, v8);
LABEL_33:
  uint64_t v40 = *v49;
  (*v49)(v33, v8);
  v40(v14, v8);
LABEL_35:
  swift_release();
  return 1;
}

uint64_t sub_100232A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  char v32 = (void *)(a2 + OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v33 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v21 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= v29) {
    goto LABEL_29;
  }
  unint64_t v22 = *(void *)(v28 + 8 * v21);
  ++v17;
  if (!v22)
  {
    int64_t v17 = v21 + 1;
    if (v21 + 1 >= v29) {
      goto LABEL_29;
    }
    unint64_t v22 = *(void *)(v28 + 8 * v17);
    if (!v22)
    {
      int64_t v17 = v21 + 2;
      if (v21 + 2 >= v29) {
        goto LABEL_29;
      }
      unint64_t v22 = *(void *)(v28 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 3;
        if (v21 + 3 >= v29) {
          goto LABEL_29;
        }
        unint64_t v22 = *(void *)(v28 + 8 * v17);
        if (!v22)
        {
          int64_t v23 = v21 + 4;
          if (v23 < v29)
          {
            unint64_t v22 = *(void *)(v28 + 8 * v23);
            int64_t v17 = v23;
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  break;
                }
                if (v17 >= v29) {
                  goto LABEL_29;
                }
                unint64_t v22 = *(void *)(v28 + 8 * v17);
                ++v23;
                if (v22) {
                  goto LABEL_22;
                }
              }
LABEL_32:
              __break(1u);
              return result;
            }
            goto LABEL_22;
          }
LABEL_29:
          swift_release();
          return 0;
        }
      }
    }
  }
LABEL_22:
  unint64_t v14 = (v22 - 1) & v22;
  for (unint64_t i = __clz(__rbit64(v22)) + (v17 << 6); ; unint64_t i = v19 | (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v10, *(void *)(v33 + 48) + *(void *)(v5 + 72) * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    uint64_t v24 = Participant.handle.getter();
    uint64_t v26 = v32[1];
    if (!v26)
    {
      swift_bridgeObjectRelease();
      uint64_t result = (*v15)(v8, v4);
      if (!v14) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (v24 == *v32 && v26 == v25) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = (*v15)(v8, v4);
    if (v18) {
      goto LABEL_30;
    }
    if (!v14) {
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v19 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
  }
  swift_bridgeObjectRelease();
  (*v15)(v8, v4);
LABEL_30:
  swift_release();
  return 1;
}

uint64_t sub_100232D8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(result + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(result + 64);
  int64_t v20 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v11 = v10 | (v6 << 6);
LABEL_22:
    uint64_t v15 = 16 * v11;
    uint64_t v16 = *(void *)(*(void *)(v5 + 48) + v15);
    int64_t v17 = (void *)(*(void *)(v5 + 56) + v15);
    if (*v17 != a2 || v17[1] != a3)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v16;
  }
  int64_t v12 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v12 >= v20) {
    return 0;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v12);
  ++v6;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v6 = v12 + 1;
  if (v12 + 1 >= v20) {
    return 0;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v6);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v6 = v12 + 2;
  if (v12 + 2 >= v20) {
    return 0;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v6);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v6 = v12 + 3;
  if (v12 + 3 >= v20) {
    return 0;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v6);
  if (v13)
  {
LABEL_21:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
    goto LABEL_22;
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v20) {
    return 0;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v14);
  if (v13)
  {
    int64_t v6 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v20) {
      return 0;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_100232F94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          unint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v10 = (void *)swift_unknownObjectRetain();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        unint64_t v13 = v10;
        uint64_t v14 = a3;
        id v15 = objc_msgSend(v10, "identifier", v22);
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }
        swift_unknownObjectRelease();
        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100233140(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    uint64_t v6 = 0;
    uint64_t v19 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        unint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v7 = *(void **)(a1 + 8 * v6 + 32);
        swift_unknownObjectRetain();
      }
      id v8 = objc_msgSend(v7, "identifier", v19);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      id v12 = [a2 identifier];
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      if (v9 == v3 && v11 == v14)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        return v6;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16) {
        return v6;
      }
      uint64_t v17 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      ++v6;
      if (v17 == v5) {
        return 0;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_1002332F4(unint64_t *a1, void *a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  id v34 = a2;
  unint64_t v35 = sub_100233140(v5, a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v33 = v2;
  if (v2) {
    return v35;
  }
  if ((v7 & 1) == 0)
  {
    id v8 = (id)(v35 + 1);
    if (__OFADD__(v35, 1)) {
      goto LABEL_60;
    }
    if (*a1 >> 62)
    {
LABEL_61:
      swift_bridgeObjectRetain();
      uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8 != (id)v31) {
        goto LABEL_6;
      }
    }
    else if (v8 != *(id *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (unint64_t i = v35 + 5; ; ++i)
      {
        unint64_t v10 = i - 4;
        unint64_t v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
            goto LABEL_61;
          }
          if (v10 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v12 = *(void **)(v11 + 8 * i);
          swift_unknownObjectRetain();
        }
        id v13 = objc_msgSend(v12, "identifier", v33);
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v15;

        id v8 = [v34 identifier];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        if (v14 == v17 && v16 == v19)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_38;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_38;
        }
        if (v10 != v35) {
          break;
        }
LABEL_35:
        if (__OFADD__(v35, 1)) {
          goto LABEL_53;
        }
        ++v35;
LABEL_38:
        id v8 = (id)(i - 3);
        if (__OFADD__(v10, 1)) {
          goto LABEL_52;
        }
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v28 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v8 == (id)v28) {
          return v35;
        }
      }
      unint64_t v22 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v22 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v10 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v10 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          uint64_t v24 = *(void *)(v22 + 8 * i);
          swift_unknownObjectRetain();
          goto LABEL_24;
        }
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_54;
        }
        if (v35 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_55;
        }
        uint64_t v23 = *(void *)(v22 + 8 * v35 + 32);
        swift_unknownObjectRetain();
        if ((v22 & 0xC000000000000001) == 0) {
          goto LABEL_21;
        }
      }
      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v22 = *a1;
LABEL_24:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v22;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v22 & 0x8000000000000000) != 0
        || (v22 & 0x4000000000000000) != 0)
      {
        unint64_t v22 = sub_1001E1378(v22);
        *a1 = v22;
      }
      *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 8 * v35 + 0x20) = v24;
      swift_unknownObjectRelease();
      specialized Array._endMutation()();
      unint64_t v26 = *a1;
      int v27 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v26;
      if (!v27 || (v26 & 0x8000000000000000) != 0 || (v26 & 0x4000000000000000) != 0)
      {
        unint64_t v26 = sub_1001E1378(v26);
        *a1 = v26;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_58;
      }
      if (v10 >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_59;
      }
      *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v23;
      swift_unknownObjectRelease();
      specialized Array._endMutation()();
      goto LABEL_35;
    }
    return v35;
  }
  unint64_t v29 = *a1;
  if (!(v29 >> 62)) {
    return *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_1002336D8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  id v13 = (char *)(v11 + 32 + 8 * v4);
  sub_100013A80(&qword_10047A1C0);
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

Swift::Int sub_1002339E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100013A80(&qword_100478260);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_100233B90(uint64_t a1)
{
  sub_10021F280(a1, *(void **)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100233BA0()
{
  sub_10018FE9C(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100233BF0()
{
  sub_10021F59C(*(NSObject **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void (**)(void))(v0 + 48), *(void *)(v0 + 56));
}

unint64_t sub_100233C24()
{
  unint64_t result = qword_100479B30;
  if (!qword_100479B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B30);
  }
  return result;
}

unint64_t sub_100233C7C()
{
  unint64_t result = qword_100479B38;
  if (!qword_100479B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B38);
  }
  return result;
}

unint64_t sub_100233CD4()
{
  unint64_t result = qword_100479B40;
  if (!qword_100479B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B40);
  }
  return result;
}

unint64_t sub_100233D2C()
{
  unint64_t result = qword_100479B48;
  if (!qword_100479B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B48);
  }
  return result;
}

unint64_t sub_100233D88()
{
  unint64_t result = qword_100479B58;
  if (!qword_100479B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479B58);
  }
  return result;
}

ValueMetadata *type metadata accessor for FastSyncSessionError()
{
  return &type metadata for FastSyncSessionError;
}

ValueMetadata *type metadata accessor for MRDFastSyncGroupSessionState()
{
  return &type metadata for MRDFastSyncGroupSessionState;
}

uint64_t type metadata accessor for JoinTimingEvents()
{
  return self;
}

uint64_t type metadata accessor for SessionTimingEvents()
{
  return self;
}

uint64_t sub_100233E44()
{
  return type metadata accessor for PresenceDataSource();
}

uint64_t type metadata accessor for PresenceDataSource()
{
  uint64_t result = qword_10047F870;
  if (!qword_10047F870) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100233E98()
{
  sub_100233FAC(319, &qword_100479EB8, &qword_100479EC0);
  if (v0 <= 0x3F)
  {
    sub_100233FAC(319, &qword_100479EC8, qword_100479ED0);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100233FAC(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_10018F8A4(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *sub_100233FFC()
{
  return &protocol witness table for String;
}

uint64_t sub_100234008()
{
  return sub_1002340D8(&qword_10047FA00);
}

uint64_t sub_10023403C()
{
  return sub_1002340D8(qword_10047FA08);
}

uint64_t sub_100234070()
{
  return sub_1002340D8(&qword_10047FA90);
}

uint64_t sub_1002340A4()
{
  return sub_1002340D8(qword_10047FA98);
}

uint64_t sub_1002340D8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RemoteControlActivity();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100234118()
{
  return &protocol witness table for String;
}

void *sub_100234124()
{
  return &protocol witness table for String;
}

unint64_t sub_100234130()
{
  unint64_t result = qword_10047FB20[0];
  if (!qword_10047FB20[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047FB20);
  }
  return result;
}

uint64_t sub_100234184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v25 - v10;
  uint64_t v31 = a1;
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v26 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v28 = v6 + 16;
  uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v17 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v19 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v17 + 48) + *(void *)(v6 + 72) * i, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    sub_100211E68(&v31, (uint64_t)v9, v29);
    if (v30)
    {
      swift_bridgeObjectRelease();
      (*v16)(v9, v5);
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v16)(v9, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_25;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_25;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v19);
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_25;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v19);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v23 - 1) & v23;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_25:
    swift_release();
    return v31;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v27) {
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v19);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100234474(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v6 - 8);
  unint64_t v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char **)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *unint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  if ((v1[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0)
  {
    sub_100231260();
    uint64_t v24 = swift_allocError();
    *uint64_t v25 = 5;
    sub_100215528(v24);
    return swift_errorRelease();
  }
  if (qword_10047F3A0 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v39 = v3;
  uint64_t v15 = type metadata accessor for Logger();
  sub_10018A9A8(v15, (uint64_t)qword_10047F3A8);
  uint64_t v16 = v1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v37 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v38 = v2;
    int64_t v22 = (void *)v21;
    *(_DWORD *)unint64_t v20 = 138543362;
    uint64_t v42 = v16;
    unint64_t v23 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int64_t v22 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}@] Leader should not receive session end messages.", v20, 0xCu);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    uint64_t v2 = v38;
    swift_slowDealloc();
    uint64_t v5 = v37;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }

  uint64_t v28 = *(uint64_t *)((char *)&v16->isa + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
  uint64_t v27 = *(uint64_t *)((char *)&v16[1].isa + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
  uint64_t v29 = type metadata accessor for TaskPriority();
  uint64_t v30 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v41, 1, 1, v29);
  uint64_t v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v32 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v5, v40, v2);
  uint64_t v33 = v5;
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  unint64_t v35 = (char *)swift_allocObject();
  *((void *)v35 + 2) = 0;
  *((void *)v35 + 3) = 0;
  *((void *)v35 + 4) = v31;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v35[v34], v33, v2);
  uint64_t v36 = &v35[(v4 + v34 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v36 = v28;
  *((void *)v36 + 1) = v27;
  swift_bridgeObjectRetain();
  sub_10018A588(v30, (uint64_t)&unk_10047A0E0, (uint64_t)v35);
  return swift_release();
}

void sub_100234938(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v108 = a1;
  uint64_t v107 = type metadata accessor for Participant();
  uint64_t v104 = *(void *)(v107 - 8);
  uint64_t v3 = __chkstk_darwin(v107);
  v103 = &v99[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v99[-v6];
  __chkstk_darwin(v5);
  uint64_t v9 = &v99[-v8];
  uint64_t v10 = type metadata accessor for Participants();
  Class isa = v10[-1].isa;
  os_log_t v106 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  id v13 = &v99[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v99[-v15];
  __chkstk_darwin(v14);
  os_log_type_t v18 = &v99[-v17];
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  int64_t v22 = &v99[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v23 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *int64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_33:
    swift_once();
LABEL_7:
    uint64_t v31 = type metadata accessor for Logger();
    sub_10018A9A8(v31, (uint64_t)qword_10047F3A8);
    uint64_t v32 = v2;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 138543362;
      v110[1] = (uint64_t)v32;
      uint64_t v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}@] Participant should not receive transport migration messages.", v35, 0xCu);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  if (v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1)
  {
    if (qword_10047F3A0 == -1) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
  if (v2[OBJC_IVAR___MRDFastSyncGroupSession_hasEncounteredLowPowerError] == 1)
  {
    uint64_t v27 = MRDFastSyncGroupSessionState.rawValue.getter(0xD000000000000024, 0x80000001003B6010, v25, v26);
    id v29 = sub_10028BECC(v27, v28);
    swift_bridgeObjectRelease();
    static Participants.only(_:)();
    uint64_t v30 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v30)
    {
      swift_retain();
      sub_10021E92C(7u, v29, (uint64_t)v18, v30, 0, 0);

      swift_release();
      (*((void (**)(unsigned char *, os_log_t))isa + 1))(v18, v106);
      return;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v38 = v108;
  uint64_t v39 = Participant.handle.getter();
  uint64_t v41 = v40;
  uint64_t v42 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess();
  if (*(void *)(*(void *)v42 + 16))
  {
    swift_bridgeObjectRetain();
    sub_100013660(v39, v41);
    char v44 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v44)
    {
      unint64_t v45 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
      swift_getKeyPath();
      swift_getKeyPath();
      id v46 = v45;
      static Published.subscript.getter();

      swift_release();
      swift_release();
      uint64_t v47 = v110[0];
      uint64_t v48 = Participant.handle.getter();
      char v50 = sub_10018835C(v48, v49, v47);
      swift_bridgeObjectRelease();
      if ((v50 & 1) == 0)
      {
        if (qword_10047F3A0 != -1) {
          swift_once();
        }
        uint64_t v71 = type metadata accessor for Logger();
        sub_10018A9A8(v71, (uint64_t)qword_10047F3A8);
        uint64_t v72 = v104;
        uint64_t v73 = v107;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v104 + 16))(v9, v38, v107);
        uint64_t v74 = v2;
        swift_bridgeObjectRetain();
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        int v77 = v76;
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v78 = swift_slowAlloc();
          v103 = (void *)swift_slowAlloc();
          uint64_t v102 = swift_slowAlloc();
          uint64_t v109 = (uint64_t)v74;
          v110[0] = v102;
          *(_DWORD *)uint64_t v78 = 138543874;
          os_log_t v101 = v75;
          int v100 = v77;
          unint64_t v79 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v103 = v74;

          *(_WORD *)(v78 + 12) = 2080;
          sub_100015B28(&qword_100479B28, (void (*)(uint64_t))&type metadata accessor for Participant);
          uint64_t v80 = v107;
          uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v109 = sub_10018A9E0(v81, v82, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v9, v80);
          *(_WORD *)(v78 + 22) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v83 = Set.description.getter();
          unint64_t v85 = v84;
          swift_bridgeObjectRelease();
          uint64_t v109 = sub_10018A9E0(v83, v85, v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          os_log_t v86 = v101;
          _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v100, "[%{public}@] Could not find: %s in present handles: %{public}s. Cannot continue transport migration.", (uint8_t *)v78, 0x20u);
          sub_100013A80((uint64_t *)&unk_10047B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v9, v73);
          swift_bridgeObjectRelease_n();
        }
        uint64_t v89 = MRDFastSyncGroupSessionState.rawValue.getter(0xD000000000000021, 0x80000001003B5FE0, v87, v88);
        id v91 = sub_10028BECC(v89, v90);
        swift_bridgeObjectRelease();
        static Participants.only(_:)();
        uint64_t v92 = *(void *)&v74[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
        if (v92)
        {
          swift_retain();
          sub_10021E92C(7u, v91, (uint64_t)v13, v92, 0, 0);

          swift_release();
          (*((void (**)(unsigned char *, os_log_t))isa + 1))(v13, v106);
          return;
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
      uint64_t v51 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
      uint64_t v52 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
      if (v52)
      {
        swift_retain();
        uint64_t v53 = Participant.handle.getter();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 368))(1, v53, v54);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void *)&v2[v51];
        if (v55)
        {
          swift_retain();
          uint64_t v56 = Participant.handle.getter();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55 + 392))(1, v56, v57);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v95 = MRDFastSyncGroupSessionState.rawValue.getter(0, 0, v93, v94);
          id v97 = sub_10028BECC(v95, v96);
          swift_bridgeObjectRelease();
          static Participants.only(_:)();
          uint64_t v98 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
          if (v98)
          {
            swift_retain();
            sub_10021E92C(7u, v97, (uint64_t)v16, v98, 0, 0);

            swift_release();
            (*((void (**)(unsigned char *, os_log_t))isa + 1))(v16, v106);
            return;
          }
          goto LABEL_38;
        }
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        return;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  sub_10018A9A8(v58, (uint64_t)qword_10047F3A8);
  uint64_t v59 = v104;
  uint64_t v60 = v38;
  uint64_t v61 = v107;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v104 + 16))(v7, v60, v107);
  uint64_t v62 = v2;
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = swift_slowAlloc();
    uint64_t v66 = (void *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    uint64_t v109 = (uint64_t)v62;
    v110[0] = v108;
    *(_DWORD *)uint64_t v65 = 138543618;
    os_log_t v106 = v63;
    char v67 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v66 = v62;

    *(_WORD *)(v65 + 12) = 2080;
    sub_100015B28(&qword_100479B28, (void (*)(uint64_t))&type metadata accessor for Participant);
    uint64_t v68 = v107;
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v109 = sub_10018A9E0(v69, v70, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v7, v68);
    uint64_t v63 = v106;
    _os_log_impl((void *)&_mh_execute_header, v106, v64, "[%{public}@] Ignoring transport migration message from unmapped participant %s.", (uint8_t *)v65, 0x16u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v59 + 8))(v7, v61);
  }
}

void sub_100235984(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v102 = type metadata accessor for DispatchWorkItemFlags();
  os_log_t v101 = *(os_log_t *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v99 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchQoS();
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  id v97 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v103 - 8);
  uint64_t v7 = __chkstk_darwin(v103);
  uint64_t v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v92 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v92 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (uint64_t *)((char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *os_log_type_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  uint64_t v21 = _dispatchPreconditionTest(_:)();
  unint64_t v23 = *(void (**)(void *, uint64_t))(v16 + 8);
  uint64_t v22 = v16 + 8;
  v23(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v24 = Participant.handle.getter();
  uint64_t v26 = v25;
  uint64_t v27 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess();
  uint64_t v28 = *(void *)v27;
  if (!*(void *)(v28 + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = v6;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_100013660(v24, v26);
  uint64_t v22 = v6;
  if ((v30 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v21 = v103;
    if (qword_10047F3A0 == -1)
    {
LABEL_12:
      uint64_t v47 = type metadata accessor for Logger();
      sub_10018A9A8(v47, (uint64_t)qword_10047F3A8);
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v9, a1, v21);
      uint64_t v48 = v2;
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v40, v49))
      {

        (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
        goto LABEL_16;
      }
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      aBlock[0] = v102;
      *(_DWORD *)uint64_t v50 = 138543874;
      os_log_t v101 = v40;
      uint64_t v107 = (uint64_t)v48;
      uint64_t v52 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v51 = v48;

      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v107 = sub_10018A9E0(0xD00000000000002CLL, 0x80000001003B6040, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 22) = 2082;
      uint64_t v53 = Participant.handle.getter();
      uint64_t v107 = sub_10018A9E0(v53, v54, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v103);
      uint64_t v40 = v101;
      _os_log_impl((void *)&_mh_execute_header, v101, v49, "[%{public}@] %s message received from unknown handle: %{public}s", (uint8_t *)v50, 0x20u);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_14:
      swift_slowDealloc();
LABEL_16:

      return;
    }
LABEL_28:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v31 = (uint64_t *)(*(void *)(v28 + 56) + 16 * v29);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v34 = (uint64_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_guests];
  swift_beginAccess();
  uint64_t v35 = *v34;
  swift_bridgeObjectRetain();
  char v36 = sub_10018835C(v32, v33, v35);
  swift_bridgeObjectRelease();
  if (v36)
  {
    swift_bridgeObjectRelease();
    if (qword_10047F3A0 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10018A9A8(v37, (uint64_t)qword_10047F3A8);
    uint64_t v38 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, a1, v103);
    uint64_t v39 = v2;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v40, v41))
    {

      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v38);
      goto LABEL_16;
    }
    uint64_t v42 = swift_slowAlloc();
    char v43 = (void *)swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    aBlock[0] = v102;
    *(_DWORD *)uint64_t v42 = 138543874;
    os_log_t v101 = v40;
    uint64_t v106 = (uint64_t)v39;
    char v44 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v43 = v39;

    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v106 = sub_10018A9E0(0xD00000000000002CLL, 0x80000001003B6040, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 22) = 2082;
    uint64_t v45 = Participant.handle.getter();
    uint64_t v106 = sub_10018A9E0(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v103);
    uint64_t v40 = v101;
    _os_log_impl((void *)&_mh_execute_header, v101, v41, "[%{public}@] %s guest cannot request to remove all participants: %{public}s", (uint8_t *)v42, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_14;
  }
  uint64_t v55 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
  swift_beginAccess();
  uint64_t v56 = *(void *)v55;
  if (!*(void *)(v56 + 16))
  {
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v57 = sub_100013660(v32, v33);
  if ((v58 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v59 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v57);
  uint64_t v60 = *v59;
  uint64_t v61 = v59[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v62 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_identities];
  swift_beginAccess();
  uint64_t v63 = *(void *)v62;
  if (!*(void *)(v63 + 16))
  {
LABEL_32:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  unint64_t v64 = sub_100013660(v60, v61);
  if ((v65 & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  id v66 = *(id *)(*(void *)(v63 + 56) + 8 * v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v67 = objc_allocWithZone((Class)MRDFastSyncGroupSessionParticipant);
  NSString v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v96 = [v67 initWithIdentifier:v68 identity:v66 connected:1 guest:0];

  if (qword_10047F3A0 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v69 = type metadata accessor for Logger();
  sub_10018A9A8(v69, (uint64_t)qword_10047F3A8);
  unint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v71 = v103;
  v70(v14, a1, v103);
  uint64_t v72 = v2;
  uint64_t v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  int v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v76 = swift_slowAlloc();
    int v94 = v75;
    uint64_t v77 = v76;
    uint64_t v78 = (void *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    uint64_t v104 = v72;
    aBlock[0] = v95;
    *(_DWORD *)uint64_t v77 = 138543874;
    os_log_t v93 = v73;
    unint64_t v79 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v78 = v72;

    *(_WORD *)(v77 + 12) = 2080;
    uint64_t v104 = (void *)sub_10018A9E0(0xD00000000000002CLL, 0x80000001003B6040, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v77 + 22) = 2082;
    uint64_t v80 = Participant.handle.getter();
    uint64_t v104 = (void *)sub_10018A9E0(v80, v81, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v71);
    os_log_t v82 = v93;
    _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v94, "[%{public}@] %s from: %{public}s", (uint8_t *)v77, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v71);
  }
  uint64_t v83 = v102;
  os_log_t v84 = v101;
  unint64_t v85 = v96;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = v72;
  *(void *)(v86 + 24) = v85;
  aBlock[4] = (uint64_t)sub_10023913C;
  aBlock[5] = v86;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100006760;
  aBlock[3] = (uint64_t)&unk_100422D40;
  uint64_t v87 = _Block_copy(aBlock);
  uint64_t v88 = v72;
  id v89 = v85;
  NSString v90 = v97;
  static DispatchQoS.unspecified.getter();
  uint64_t v104 = _swiftEmptyArrayStorage;
  sub_100015B28((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  id v91 = v99;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v87);

  ((void (*)(char *, uint64_t))v84[1].isa)(v91, v83);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v90, v100);
  swift_release();
}

uint64_t sub_1002367E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v32 = (unint64_t *)result;
  uint64_t v33 = 0;
  int64_t v5 = 0;
  uint64_t v8 = *(void *)(a3 + 64);
  uint64_t v6 = a3 + 64;
  uint64_t v7 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v6 - 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v7;
  uint64_t v35 = v6;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v38 = a4 + 56;
  while (1)
  {
    while (v11)
    {
      unint64_t v12 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v13 = v12 | (v5 << 6);
      if (*(void *)(v4 + 16)) {
        goto LABEL_23;
      }
    }
    int64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v14 >= v36) {
      return sub_10022DAC8(v32, a2, v33, a3);
    }
    unint64_t v15 = *(void *)(v35 + 8 * v14);
    ++v5;
    if (!v15)
    {
      int64_t v5 = v14 + 1;
      if (v14 + 1 >= v36) {
        return sub_10022DAC8(v32, a2, v33, a3);
      }
      unint64_t v15 = *(void *)(v35 + 8 * v5);
      if (!v15)
      {
        int64_t v5 = v14 + 2;
        if (v14 + 2 >= v36) {
          return sub_10022DAC8(v32, a2, v33, a3);
        }
        unint64_t v15 = *(void *)(v35 + 8 * v5);
        if (!v15) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
    if (*(void *)(v4 + 16))
    {
LABEL_23:
      int64_t v37 = v5;
      uint64_t v17 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v13);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t v21 = v4;
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = v20 & ~v22;
      if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v24 = *(void *)(v21 + 48);
      uint64_t v25 = (void *)(v24 + 16 * v23);
      BOOL v26 = *v25 == v18 && v25[1] == v19;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(unint64_t *)((char *)v32 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        BOOL v30 = __OFADD__(v33++, 1);
        uint64_t v4 = v21;
        int64_t v5 = v37;
        if (v30)
        {
          __break(1u);
          return sub_10022DAC8(v32, a2, v33, a3);
        }
      }
      else
      {
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v38 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          uint64_t v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v18 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_36;
          }
        }
LABEL_5:
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v4 = v21;
        int64_t v5 = v37;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v36) {
    return sub_10022DAC8(v32, a2, v33, a3);
  }
  unint64_t v15 = *(void *)(v35 + 8 * v16);
  if (v15)
  {
    int64_t v5 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v5 >= v36) {
      return sub_10022DAC8(v32, a2, v33, a3);
    }
    unint64_t v15 = *(void *)(v35 + 8 * v5);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100236AD8(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002367E8((uint64_t)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1002367E8((uint64_t)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

uint64_t sub_100236C94(uint64_t a1, uint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100236D04()
{
  return 25705;
}

unint64_t sub_100236D10()
{
  sub_100013A80(&qword_100479F08);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5780;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v2;
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 96) = v3;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 120) = v4;
  *(void *)(inited + 128) = swift_getKeyPath();
  *(void *)(inited + 136) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 144) = v5;
  return sub_1001FA498(inited, &qword_100479F10, &qword_100479F18);
}

unint64_t sub_100236E24()
{
  unint64_t result = qword_100479F40;
  if (!qword_100479F40)
  {
    sub_10018FE08(255, &qword_100479F30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100479F40);
  }
  return result;
}

uint64_t sub_100236E90()
{
  uint64_t v1 = *(char **)(v0 + 16);
  if (!*(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession]
    || (swift_retain(),
        uint64_t v2 = GroupSession.activeParticipants.getter(),
        swift_release(),
        uint64_t v3 = v1,
        char v4 = sub_100232A2C(v2, (uint64_t)v3),
        v3,
        uint64_t result = swift_bridgeObjectRelease(),
        (v4 & 1) == 0))
  {
    if (qword_10047F3A0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10018A9A8(v6, (uint64_t)qword_10047F3A8);
    unint64_t v7 = v1;
    size_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412546;
      unint64_t v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v11 = v7;

      *(_WORD *)(v10 + 12) = 2082;
      uint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      sub_10018A9E0(v14, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@]<%{public}s> Leader remains undiscovered.", (uint8_t *)v10, 0x16u);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_100231260();
    uint64_t v15 = swift_allocError();
    *int64_t v16 = 4;
    sub_100215528(v15);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100237158()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

unint64_t sub_1002371E8()
{
  type metadata accessor for Date();
  sub_100013A80(&qword_100478708);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  Date.timeIntervalSinceNow.getter();
  *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
  return sub_10019A6D8(inited);
}

uint64_t sub_100237298()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002372D0(uint64_t a1, unint64_t a2, char *a3)
{
}

uint64_t sub_1002372D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100237310(char *a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v1 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = sub_100013A80(&qword_100479FB8);
  return v3(v4, v5, &a1[*(int *)(v6 + 48)]);
}

uint64_t sub_100237370()
{
  return sub_1002374CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10021C498);
}

uint64_t sub_100237388(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 11) {
    return sub_10018FE44(a2, a3);
  }
  return result;
}

uint64_t sub_1002373A4(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 11) {
    return sub_10018FE9C(a2, a3);
  }
  return result;
}

uint64_t sub_1002373C4()
{
  return sub_1002374CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10021CB70);
}

uint64_t sub_1002373E0()
{
  uint64_t v1 = type metadata accessor for GroupSessionMessenger.MessageContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  sub_10018FE9C(*(void *)(v0 + 32), *(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002374B4()
{
  return sub_1002374CC((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10021CF2C);
}

uint64_t sub_1002374CC(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for GroupSessionMessenger.MessageContext() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = *(unsigned __int8 *)(v1 + 24);

  return a1(v3, v7, v4, v5, v6);
}

uint64_t sub_100237550()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_100237588()
{
  return sub_100239148((SEL *)&selRef_session_didChangeState_);
}

uint64_t sub_100237594()
{
  return sub_100239A5C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002375AC(uint64_t *a1)
{
  return sub_100216B68(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002375B8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100237608()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100013F84;
  return sub_1002179D0((uint64_t)v6, v7, v8, v2, v3, v5, v4);
}

uint64_t sub_1002376B4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002376FC()
{
  long long v5 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100013F84;
  *(void *)(v3 + 224) = v2;
  *(_OWORD *)(v3 + 208) = v5;
  return _swift_task_switch(sub_100219280, 0, 0);
}

void sub_1002377B8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100231260();
    uint64_t v2 = swift_allocError();
    *uint64_t v3 = 0;
    sub_100215528(v2);
    swift_errorRelease();
  }
}

uint64_t sub_100237838()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100237888()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10000D170;
  *(_OWORD *)(v2 + 200) = v4;
  *(_OWORD *)(v2 + 184) = v3;
  return _swift_task_switch(sub_100225A0C, 0, 0);
}

void sub_100237938()
{
  sub_10022846C(*(char **)(*(void *)(v0 + 16)
                         + OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_presence));
}

uint64_t sub_100237968()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100237978()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002379C0()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v4 = v0[4];
  unint64_t v3 = v0[5];
  sub_1002171C8(v2);
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10018A9A8(v5, (uint64_t)qword_10047F3A8);
  id v6 = v1;
  swift_bridgeObjectRetain_n();
  uint64_t v7 = (char *)v6;
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v31 = v4;
    uint64_t v10 = swift_slowAlloc();
    os_log_t log = v8;
    unint64_t v11 = (void *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138543874;
    unint64_t v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v11 = v7;

    *(_WORD *)(v10 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_10018A9E0(v31, v3, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v13 = Array.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    sub_10018A9E0(v13, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v8 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v9, "[%{public}@]<%{public}s> NearbyGroup tokens: %s", (uint8_t *)v10, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v16 = sub_10020CAD8(v2, (uint64_t)v33, (uint64_t (*)(void))&type metadata accessor for NearbyGroup.Member, (uint64_t (*)(uint64_t))&NearbyGroup.Member.handle.getter);
  uint64_t v17 = *(void *)&v7[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
  if (v17)
  {
    uint64_t v18 = (void *)v16;
    uint64_t v19 = *(void *)&v7[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    Swift::Int v20 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      Swift::Int v20 = sub_100229FF0(0, v18[2] + 1, 1, v18);
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1) {
      Swift::Int v20 = sub_100229FF0((void *)(v21 > 1), v22 + 1, 1, v20);
    }
    v20[2] = v22 + 1;
    unint64_t v23 = &v20[2 * v22];
    v23[4] = v19;
    v23[5] = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = (char *)*(id *)&v7[OBJC_IVAR___MRDFastSyncGroupSession_presenceDataSource];
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_10000B4EC(v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)&v24[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members];
    *(void *)&v24[OBJC_IVAR____TtC12mediaremotedP33_5F812221C055B7907E48F2E367000FFE18PresenceDataSource_members] = v26;
    sub_1002252D0(v27);
    swift_bridgeObjectRelease();

    if (v7[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] != 1)
    {
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v28 = *(void **)&v7[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
    if (v28)
    {
      id v29 = v28;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v29 updateAllowedDestinations:isa];

      sub_1002121F0(0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100237E54()
{
  return sub_100239A5C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100237E6C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  unint64_t v2 = *(void *)(v0 + 32);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = Strong + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap;
    swift_beginAccess();
    if (*(void *)(*(void *)v5 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013660(v1, v2);
      char v7 = v6;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7)
      {
        if (qword_10047F3A0 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10018A9A8(v8, (uint64_t)qword_10047F3A8);
        id v9 = v4;
        swift_bridgeObjectRetain_n();
        id v10 = v9;
        unint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v11, v12))
        {
          os_log_type_t type = v12;
          uint64_t v13 = swift_slowAlloc();
          uint64_t v18 = (void *)swift_slowAlloc();
          uint64_t v20 = (uint64_t)v10;
          v21[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 138543874;
          unint64_t v14 = (char *)v10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v18 = v4;

          *(_WORD *)(v13 + 12) = 2082;
          uint64_t v16 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
          unint64_t v15 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
          swift_bridgeObjectRetain();
          sub_10018A9E0(v16, v15, v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v13 + 22) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v20 = sub_10018A9E0(v1, v2, v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v11, type, "[%{public}@]<%{public}s> Lost handle: %{public}s timed out.", (uint8_t *)v13, 0x20u);
          sub_100013A80((uint64_t *)&unk_10047B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }

        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v17 = (void *)sub_10022B17C(v1, v2);
        swift_endAccess();
        swift_bridgeObjectRelease();

        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_10000DDD8(&v20, v1, v2);
        swift_endAccess();
        swift_bridgeObjectRelease();
        sub_1002121F0(0);
      }
    }
  }
}

uint64_t sub_100238260()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002382A8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  unint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8);
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_10018FE08(0, &qword_10047A068);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v4 session:v1 didUpdateMembers:isa];
    swift_unknownObjectRelease();
  }
  uint64_t v6 = v2();
  if (v6)
  {
    char v7 = (void *)v6;
    sub_10018FE08(0, &qword_10047A070);
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    [v7 session:v1 didUpdateParticipants:v8];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100238400()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10023843C()
{
  return sub_1002384B0((SEL *)&selRef_session_didReceiveRemoteRemoveRequestForParticipant_from_);
}

void *sub_10023844C()
{
  return sub_1002384B0((SEL *)&selRef_session_didReceiveRemoteRejectionForPendingParticipant_from_);
}

uint64_t sub_10023845C()
{
  return _swift_deallocObject(v0, 40, 7);
}

void *sub_1002384A4()
{
  return sub_1002384B0((SEL *)&selRef_session_didReceiveRemoteApprovalForPendingParticipant_from_);
}

void *sub_1002384B0(SEL *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x2B8))();
  if (result)
  {
    objc_msgSend(result, *a1, v4, v5, v6);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10023856C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100238580(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100238598()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *id v9 = v1;
  v9[1] = sub_100013F84;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return _swift_task_switch(sub_100208FE8, 0, 0);
}

uint64_t sub_1002386BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10023870C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8);
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_10018FE08(0, &qword_10047A068);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v4 session:v1 didUpdateMembers:isa];
    swift_unknownObjectRelease();
  }
  uint64_t v6 = v2();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    sub_10018FE08(0, &qword_10047A070);
    Class v8 = Array._bridgeToObjectiveC()().super.isa;
    [v7 session:v1 didUpdateParticipants:v8];
    swift_unknownObjectRelease();
  }
  uint64_t v9 = v2();
  if (v9)
  {
    id v10 = (void *)v9;
    sub_10018FE08(0, &qword_10047A070);
    Class v11 = Array._bridgeToObjectiveC()().super.isa;
    [v10 session:v1 didUpdatePendingParticipants:v11];
    swift_unknownObjectRelease();
  }
}

void *sub_1002388D4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x2B8))();
  if (result)
  {
    [result sessionDidCompleteIdentityShare:v1];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_100238968(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002389C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_100238A14(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(v1 + 16);
    swift_errorRetain();
    if (qword_10047F3A0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10018A9A8(v3, (uint64_t)qword_10047F3A8);
    id v4 = v2;
    swift_errorRetain();
    id v5 = v4;
    swift_errorRetain();
    id v6 = v5;
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138543874;
      id v10 = (char *)v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v6;

      *(_WORD *)(v8 + 12) = 2082;
      uint64_t v11 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v12 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      sub_10018A9E0(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v8 + 22) = 2114;
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v9[1] = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "[%{public}@]<%{public}s> IdentityShareReplyMessage send error %{public}@.", (uint8_t *)v8, 0x20u);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100238D14()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  id v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100013F84;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return _swift_task_switch(sub_100208FE8, 0, 0);
}

unint64_t sub_100238E38()
{
  unint64_t result = qword_10047A0C8;
  if (!qword_10047A0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A0C8);
  }
  return result;
}

unint64_t sub_100238E8C()
{
  unint64_t result = qword_10047A0D0;
  if (!qword_10047A0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10047A0D0);
  }
  return result;
}

uint64_t sub_100238EE4()
{
  uint64_t v1 = type metadata accessor for Participant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100238FD8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Participant() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_10000D170;
  v9[14] = v7;
  v9[15] = v8;
  v9[12] = v4;
  v9[13] = v5;
  return _swift_task_switch(sub_10020D628, 0, 0);
}

uint64_t sub_1002390FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_10023913C()
{
  return sub_100239148((SEL *)&selRef_session_didReceiveRemoteRemoveAllRequestFromParticipant_);
}

void *sub_100239148(SEL *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  unint64_t result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0x2B8))();
  if (result)
  {
    objc_msgSend(result, *a1, v4, v5);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1002391F4()
{
  return sub_100239E9C((void (*)(void))&_swift_release);
}

void sub_10023920C()
{
  sub_100205098(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100239214(uint64_t *a1)
{
  return sub_1002058BC(a1);
}

uint64_t sub_10023921C(uint64_t a1)
{
  return sub_100205EB0(a1);
}

uint64_t sub_100239224()
{
  uint64_t v1 = sub_100013A80(&qword_100479FC8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1002392F4()
{
  uint64_t v1 = *(void *)(sub_100013A80(&qword_100479FC8) - 8);
  sub_100219F20((v0
                           + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))));
}

uint64_t sub_10023935C()
{
  return sub_100239E9C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100239374()
{
  sub_100210EAC(*(void *)(v0 + 24));
}

uint64_t sub_10023939C()
{
  return sub_1001F8670(*(void **)(v0 + 16));
}

uint64_t sub_1002393A4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002393E4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100013F84;
  return sub_1001F8A44((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_100239478()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (qword_10047F3A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10018A9A8(v2, (uint64_t)qword_10047F3A8);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543618;
    uint64_t v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    *(_WORD *)(v6 + 12) = 2082;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v9 = *(void *)&v8[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    sub_10018A9E0(v10, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}@]<%{public}s> Timed out waiting for session.", (uint8_t *)v6, 0x16u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100231260();
  uint64_t v11 = swift_allocError();
  *unint64_t v12 = 1;
  uint64_t v17 = sub_1001F43DC();
  uint64_t v13 = type metadata accessor for JoinTimingEvents();
  sub_100252DB4(v11, v13, (uint64_t)&off_1004224C0);
  *(void *)&v3[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = v17;
  swift_release();
  swift_errorRelease();
  uint64_t v14 = swift_allocError();
  *uint64_t v15 = 1;
  sub_100215528(v14);
  return swift_errorRelease();
}

uint64_t sub_100239758()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100239790(uint64_t a1)
{
  sub_100201FA4(a1, *(void *)(v1 + 16));
}

unint64_t sub_100239798()
{
  unint64_t result = qword_10047A178;
  if (!qword_10047A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A178);
  }
  return result;
}

uint64_t sub_1002397EC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100239834()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100013F84;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100215E88, 0, 0);
}

uint64_t sub_1002398E0()
{
  return sub_100239AB8(6);
}

uint64_t sub_1002398E8()
{
  return sub_100239A5C((void (*)(void))&_swift_release);
}

uint64_t sub_100239900(uint64_t a1)
{
  return sub_10020397C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100239910()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100013F84;
  return sub_100203EE4((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1002399C0()
{
  return sub_100239E9C((void (*)(void))&_swift_errorRelease);
}

void *sub_1002399D8()
{
  return sub_100215528(*(void *)(v0 + 24));
}

uint64_t sub_100239A00()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_100239A30()
{
  return sub_100239AB8(2);
}

uint64_t sub_100239A38()
{
  return sub_100239AB8(3);
}

uint64_t sub_100239A44()
{
  return sub_100239A5C((void (*)(void))&_swift_release);
}

uint64_t sub_100239A5C(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_100239AAC(uint64_t a1)
{
  sub_100200958(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100239AB8(uint64_t a1)
{
  uint64_t v3 = *(void (**)(void))(v1 + 16);
  sub_100231260();
  swift_allocError();
  *uint64_t v4 = a1;
  v3();

  return swift_errorRelease();
}

uint64_t sub_100239B28()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100239B70()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100013F84;
  return sub_100200ED4((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_100239C1C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_100239C50()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100239C90()
{
  return sub_100239E9C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100239CA8()
{
  return sub_100239CC0((void (*)(void))&_swift_release);
}

uint64_t sub_100239CC0(void (*a1)(void))
{
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_100239D10()
{
  return sub_100201C7C(v0[2], v0[3], v0[4]);
}

uint64_t sub_100239D1C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100239D6C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100013F84;
  *(_OWORD *)(v4 + 80) = v5;
  *(void *)(v4 + 64) = v2;
  *(void *)(v4 + 72) = v3;
  return _swift_task_switch(sub_1001FC498, 0, 0);
}

uint64_t sub_100239E28(uint64_t a1)
{
  return sub_1001F9CB0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100239E34()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100239E7C(uint64_t a1)
{
  return sub_1001F7FD4(a1);
}

uint64_t sub_100239E84()
{
  return sub_100239E9C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100239E9C(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_100239EEC()
{
  return sub_1001F6BB0();
}

void sub_100239EF4(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    long long v5 = (void *)Strong;
    sub_100206668(a3);
  }
}

void sub_100239F74()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_100206270();
  }
}

id sub_100239FD0()
{
  return sub_1002121F0(0);
}

uint64_t getEnumTagSinglePayload for ConceptualRouteType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for RemoteControlActivity.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10023A0E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteControlActivity.CodingKeys()
{
  return &type metadata for RemoteControlActivity.CodingKeys;
}

unint64_t sub_10023A124()
{
  unint64_t result = qword_10047FC70[0];
  if (!qword_10047FC70[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047FC70);
  }
  return result;
}

unint64_t sub_10023A17C()
{
  unint64_t result = qword_10047FD80;
  if (!qword_10047FD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047FD80);
  }
  return result;
}

unint64_t sub_10023A1D4()
{
  unint64_t result = qword_10047FD88[0];
  if (!qword_10047FD88[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10047FD88);
  }
  return result;
}

uint64_t sub_10023A4C4()
{
  return sub_10020D958();
}

unint64_t sub_10023A540(char a1)
{
  if (a1) {
    return 0xD00000000000002ELL;
  }
  else {
    return 0xD00000000000002FLL;
  }
}

uint64_t sub_10023A57C(char *a1, char *a2)
{
  return sub_10023A800(*a1, *a2);
}

uint64_t sub_10023A588(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000018;
  }
  else {
    unint64_t v3 = 0xD000000000000019;
  }
  if (v2) {
    unint64_t v4 = 0x80000001003B6450;
  }
  else {
    unint64_t v4 = 0x80000001003B6470;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000018;
  }
  else {
    unint64_t v5 = 0xD000000000000019;
  }
  if (a2) {
    unint64_t v6 = 0x80000001003B6470;
  }
  else {
    unint64_t v6 = 0x80000001003B6450;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10023A634(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x65707954415347;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x65707954415347;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "requestIdentifier";
      goto LABEL_4;
    case 2:
      unint64_t v6 = "sessionIdentifier";
LABEL_4:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v5 = 0x4474736575716572;
      unint64_t v3 = 0xEB00000000617461;
      break;
    case 4:
      unint64_t v5 = 0x7461446E656B6F74;
      unint64_t v3 = 0xE900000000000061;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v8 = "requestIdentifier";
      goto LABEL_10;
    case 2:
      uint64_t v8 = "sessionIdentifier";
LABEL_10:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000011) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      uint64_t v2 = 0x4474736575716572;
      unint64_t v7 = 0xEB00000000617461;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xE900000000000061;
      if (v5 != 0x7461446E656B6F74) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_17:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10023A800(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v3 = 0xD00000000000002FLL;
  }
  if (v2) {
    unint64_t v4 = 0x80000001003B63B0;
  }
  else {
    unint64_t v4 = 0x80000001003B63E0;
  }
  if (a2) {
    unint64_t v5 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v5 = 0xD00000000000002FLL;
  }
  if (a2) {
    unint64_t v6 = 0x80000001003B63E0;
  }
  else {
    unint64_t v6 = 0x80000001003B63B0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10023A8AC@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100423848;
  return sub_10023B058(v2, a1, a2);
}

void sub_10023A8B8(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000002ELL;
  }
  else {
    unint64_t v2 = 0xD00000000000002FLL;
  }
  unint64_t v3 = 0x80000001003B63B0;
  if (*v1) {
    unint64_t v3 = 0x80000001003B63E0;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_10023A8FC()
{
  return sub_10023A904();
}

Swift::Int sub_10023A904()
{
  return Hasher._finalize()();
}

Swift::Int sub_10023A98C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10023AA88()
{
  return Hasher._finalize()();
}

uint64_t sub_10023AB10()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10023AB84()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10023AC6C()
{
  return sub_10023AC74();
}

Swift::Int sub_10023AC74()
{
  return Hasher._finalize()();
}

Swift::Int sub_10023ACF8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10023ADF0()
{
  return Hasher._finalize()();
}

unint64_t sub_10023AE74(char a1)
{
  unint64_t result = 0x65707954415347;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x4474736575716572;
      break;
    case 4:
      unint64_t result = 0x7461446E656B6F74;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10023AF28(unsigned __int8 *a1, char *a2)
{
  return sub_10023A634(*a1, *a2);
}

unint64_t sub_10023AF34@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10023B17C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10023AF64@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10023AE74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10023AF90()
{
  return sub_10023A98C();
}

uint64_t sub_10023AF98()
{
  return sub_10023AB84();
}

Swift::Int sub_10023AFA0()
{
  return sub_10023ACF8();
}

uint64_t sub_10023AFA8(Swift::String a1)
{
  v1._rawValue = &off_100423930;
  return sub_10023AFB4(a1, v1);
}

uint64_t sub_10023AFB4(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

unint64_t sub_10023B004(char a1)
{
  if (a1) {
    return 0xD000000000000018;
  }
  else {
    return 0xD000000000000019;
  }
}

uint64_t sub_10023B040(char *a1, char *a2)
{
  return sub_10023A588(*a1, *a2);
}

uint64_t sub_10023B04C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100423930;
  return sub_10023B058(v2, a1, a2);
}

uint64_t sub_10023B058@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_10023B0B4(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000018;
  }
  else {
    unint64_t v2 = 0xD000000000000019;
  }
  unint64_t v3 = 0x80000001003B6450;
  if (*v1) {
    unint64_t v3 = 0x80000001003B6470;
  }
  *a1 = v2;
  a1[1] = v3;
}

Swift::Int sub_10023B0F8()
{
  return sub_10023AA88();
}

uint64_t sub_10023B100()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10023B174()
{
  return sub_10023ADF0();
}

unint64_t sub_10023B17C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100423898, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_10023B1CC()
{
  unint64_t result = qword_10047A220;
  if (!qword_10047A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A220);
  }
  return result;
}

unint64_t sub_10023B224()
{
  unint64_t result = qword_10047A228;
  if (!qword_10047A228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A228);
  }
  return result;
}

unint64_t sub_10023B27C()
{
  unint64_t result = qword_10047A230;
  if (!qword_10047A230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A230);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationEventIDs()
{
  return &type metadata for GroupSessionAuthorizationEventIDs;
}

uint64_t getEnumTagSinglePayload for GroupSessionAuthorizationMessageKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GroupSessionAuthorizationMessageKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023B444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *sub_10023B46C(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationMessageKeys()
{
  return &type metadata for GroupSessionAuthorizationMessageKeys;
}

unsigned char *_s12mediaremoted33GroupSessionAuthorizationEventIDsOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023B550);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionAuthorizationMessageType()
{
  return &type metadata for GroupSessionAuthorizationMessageType;
}

uint64_t sub_10023B590()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10019001C(v0, qword_100480298);
  sub_10018A9A8(v0, (uint64_t)qword_100480298);
  id v1 = (id)*sub_1001A6778();
  return Logger.init(_:)();
}

uint64_t sub_10023B648()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10023B6E8()
{
  return swift_unknownObjectRelease();
}

void (*sub_10023B744(void *a1))(void **a1, char a2)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_1001F5098;
}

id sub_10023B7C8()
{
  return sub_10023B830(&OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___messageQueue, 0x6567617373656D2DLL, (void *)0xE800000000000000, (uint64_t (*)(void))&_MRGroupSessionSubsystemGetNotificationQueue);
}

id sub_10023B7FC()
{
  return sub_10023B830(&OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___serialQueue, 0x6C61697265732DLL, (void *)0xE700000000000000, (uint64_t (*)(void))&_MRGroupSessionSubsystemGetQueue);
}

id sub_10023B830(uint64_t *a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  unint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v7 = v4;
  swift_getObjectType();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v25 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = *a1;
  uint64_t v14 = *(void **)(v4 + *a1);
  if (v14)
  {
    id v15 = *(id *)(v4 + *a1);
  }
  else
  {
    uint64_t v26 = (void *)_typeName(_:qualified:)();
    uint64_t v27 = v16;
    v22[2] = sub_10023E6F4();
    v17._countAndFlagsBits = a2;
    v17._object = v23;
    String.append(_:)(v17);
    unint64_t v23 = v26;
    v22[1] = v27;
    uint64_t v24 = (uint64_t (*)(void))(id)v24();
    static DispatchQoS.unspecified.getter();
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100015B70((unint64_t *)&qword_10047A1F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100013A80(&qword_10047A200);
    sub_100015600((unint64_t *)&qword_10047A208, &qword_10047A200);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v8);
    uint64_t v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v19 = *(void **)(v4 + v13);
    *(void *)(v7 + v13) = v18;
    id v15 = v18;

    uint64_t v14 = 0;
  }
  id v20 = v14;
  return v15;
}

char *sub_10023BAF0()
{
  id v1 = objc_allocWithZone(v0);
  return sub_10023BB24();
}

char *sub_10023BB24()
{
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___messageQueue] = 0;
  *(void *)&v0[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener____lazy_storage___serialQueue] = 0;
  uint64_t v2 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_linkClient;
  id v3 = objc_allocWithZone((Class)RPCompanionLinkClient);
  uint64_t v4 = v0;
  *(void *)&v0[v2] = [v3 init];
  *(void *)&v4[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID] = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_lock;
  type metadata accessor for Lock();
  *(void *)&v4[v5] = sub_1002898BC();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for GroupSessionProxyAuthorizationListener();
  unsigned int v6 = (char *)objc_msgSendSuper2(&v15, "init");
  uint64_t v7 = *(void **)&v6[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_linkClient];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = v6;
  v8[4] = ObjectType;
  aBlock[4] = sub_10023BD8C;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001872F8;
  aBlock[3] = &unk_100423B58;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = v6;
  id v11 = v7;
  uint64_t v12 = v10;
  swift_release();
  [v11 activateWithCompletion:v9];

  swift_unknownObjectRelease();
  _Block_release(v9);

  return v12;
}

uint64_t type metadata accessor for GroupSessionProxyAuthorizationListener()
{
  return self;
}

uint64_t sub_10023BD4C()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_10023BD8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100480290 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10018A9A8(v3, (uint64_t)qword_100480298);
    swift_errorRetain();
    swift_errorRetain();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      unsigned int v6 = (void *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v7 = _typeName(_:qualified:)();
      sub_10018A9E0(v7, v8, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2112;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned int v6 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "[%s] Failed to activate rapport listener: %@", (uint8_t *)v5, 0x16u);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v9 = *(void **)(v1 + 16);
    if (qword_100480290 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10018A9A8(v10, (uint64_t)qword_100480298);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = _typeName(_:qualified:)();
      sub_10018A9E0(v14, v15, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] Registering rapport events", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10023A540(0);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v2;
    BOOL v30 = sub_10023E7A4;
    uint64_t v31 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v27 = 1107296256;
    uint64_t v28 = sub_10023C324;
    id v29 = &unk_100423D88;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_release();
    [v9 registerEventID:v16 options:0 handler:v19];
    _Block_release(v19);

    sub_10023A540(1);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v2;
    BOOL v30 = sub_10023E7C8;
    uint64_t v31 = v22;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v27 = 1107296256;
    uint64_t v28 = sub_10023C324;
    id v29 = &unk_100423DD8;
    unint64_t v23 = _Block_copy(&aBlock);
    swift_release();
    [v9 registerEventID:v20 options:0 handler:v23];
    _Block_release(v23);
  }
}

uint64_t sub_10023C324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v4 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_10023C3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    long long v41 = 0u;
    long long v42 = 0u;
LABEL_13:
    sub_100194AE4((uint64_t)&v41);
    uint64_t v39 = 0;
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  *(void *)&long long v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v41 + 1) = v13;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a2 + 16) && (unint64_t v14 = sub_10018C3C4((uint64_t)v40), (v15 & 1) != 0))
  {
    sub_10018FDAC(*(void *)(a2 + 56) + 32 * v14, (uint64_t)&v41);
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  sub_10018FFC8((uint64_t)v40);
  if (!*((void *)&v42 + 1)) {
    goto LABEL_13;
  }
  int v16 = swift_dynamicCast();
  uint64_t v17 = v40[0];
  if (!v16) {
    uint64_t v17 = 0;
  }
  uint64_t v39 = v17;
  if (v16) {
    uint64_t v18 = v40[1];
  }
  else {
    uint64_t v18 = 0;
  }
LABEL_14:
  uint64_t v19 = a3 + 16;
  if (qword_100480290 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10018A9A8(v9, (uint64_t)qword_100480298);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    int64_t v36 = a5;
    uint64_t v24 = v23;
    uint64_t v35 = swift_slowAlloc();
    v40[0] = v35;
    *(_DWORD *)uint64_t v24 = 136315650;
    uint64_t v38 = v10;
    uint64_t v25 = _typeName(_:qualified:)();
    uint64_t v37 = v9;
    uint64_t v26 = a1;
    *(void *)&long long v41 = sub_10018A9E0(v25, v27, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    if (v18) {
      uint64_t v28 = v39;
    }
    else {
      uint64_t v28 = 0x4E574F4E4B4E55;
    }
    if (v18) {
      unint64_t v29 = v18;
    }
    else {
      unint64_t v29 = 0xE700000000000000;
    }
    uint64_t v39 = v19;
    swift_bridgeObjectRetain();
    *(void *)&long long v41 = sub_10018A9E0(v28, v29, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v30 = Dictionary.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *(void *)&long long v41 = sub_10018A9E0(v30, v32, v40);
    a1 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v36, (uint8_t *)v24, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v37);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    os_log_type_t v34 = (void *)Strong;
    sub_10023C8B0(a1);
  }
}

void sub_10023C8B0(uint64_t a1)
{
  swift_getObjectType();
  v57._countAndFlagsBits = sub_10023AE74(0);
  v57._object = v2;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v3 = sub_10018C3C4((uint64_t)v64), (v4 & 1) != 0))
  {
    sub_10018FDAC(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v65);
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  sub_10018FFC8((uint64_t)v64);
  if (!*((void *)&v66 + 1))
  {
    sub_100194AE4((uint64_t)&v65);
    return;
  }
  if (swift_dynamicCast())
  {
    char v5 = sub_10023AFA8(v57);
    if (v5 != 2)
    {
      int v6 = v5 & 1;
      LOBYTE(v64[0]) = 0;
      LOBYTE(v65) = v5 & 1;
      sub_10023B27C();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
        || (LOBYTE(v64[0]) = 1, LOBYTE(v65) = v6, (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
      {
        unint64_t v58 = sub_10023AE74(2);
        uint64_t v61 = v7;
        AnyHashable.init<A>(_:)();
        if (*(void *)(a1 + 16) && (unint64_t v8 = sub_10018C3C4((uint64_t)v64), (v9 & 1) != 0))
        {
          sub_10018FDAC(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v65);
        }
        else
        {
          long long v65 = 0u;
          long long v66 = 0u;
        }
        sub_10018FFC8((uint64_t)v64);
        if (*((void *)&v66 + 1))
        {
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_38:
            if (qword_100480290 != -1) {
              swift_once();
            }
            uint64_t v26 = type metadata accessor for Logger();
            sub_10018A9A8(v26, (uint64_t)qword_100480298);
            swift_bridgeObjectRetain_n();
            unint64_t v27 = Logger.logObject.getter();
            os_log_type_t v28 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = swift_slowAlloc();
              v64[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v29 = 136315394;
              uint64_t v30 = _typeName(_:qualified:)();
              *(void *)&long long v65 = sub_10018A9E0(v30, v31, v64);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v29 + 12) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v32 = Dictionary.description.getter();
              unint64_t v34 = v33;
              swift_bridgeObjectRelease();
              *(void *)&long long v65 = sub_10018A9E0(v32, v34, v64);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s] Failed to parse message: %s", (uint8_t *)v29, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            return;
          }
          unint64_t v11 = v58;
          uint64_t v10 = v61;
          sub_10023AE74(1);
          AnyHashable.init<A>(_:)();
          if (*(void *)(a1 + 16) && (unint64_t v12 = sub_10018C3C4((uint64_t)v64), (v13 & 1) != 0))
          {
            sub_10018FDAC(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v65);
          }
          else
          {
            long long v65 = 0u;
            long long v66 = 0u;
          }
          sub_10018FFC8((uint64_t)v64);
          if (*((void *)&v66 + 1))
          {
            if ((swift_dynamicCast() & 1) == 0) {
              goto LABEL_44;
            }
            unint64_t v59 = sub_10023AE74(3);
            unint64_t v62 = v14;
            AnyHashable.init<A>(_:)();
            if (*(void *)(a1 + 16) && (unint64_t v15 = sub_10018C3C4((uint64_t)v64), (v16 & 1) != 0))
            {
              sub_10018FDAC(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v65);
            }
            else
            {
              long long v65 = 0u;
              long long v66 = 0u;
            }
            sub_10018FFC8((uint64_t)v64);
            if (*((void *)&v66 + 1))
            {
              if (swift_dynamicCast())
              {
                uint64_t v54 = v11;
                id v17 = objc_allocWithZone((Class)_MRGroupSessionJoinRequestProtobuf);
                sub_10018FE44(v59, v62);
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_10018FE9C(v59, v62);
                id v19 = [v17 initWithData:isa];

                if (v19)
                {
                  uint64_t v20 = v19;
                  unint64_t v55 = v62;
                  uint64_t v56 = v59;
                  id v21 = [v19 identity];
                  id v22 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v21];

                  if (v22)
                  {
                    unint64_t v60 = sub_10023AE74(4);
                    unint64_t v63 = v23;
                    AnyHashable.init<A>(_:)();
                    if (*(void *)(a1 + 16) && (unint64_t v24 = sub_10018C3C4((uint64_t)v64), (v25 & 1) != 0))
                    {
                      sub_10018FDAC(*(void *)(a1 + 56) + 32 * v24, (uint64_t)&v65);
                    }
                    else
                    {
                      long long v65 = 0u;
                      long long v66 = 0u;
                    }
                    sub_10018FFC8((uint64_t)v64);
                    if (*((void *)&v66 + 1))
                    {
                      if (swift_dynamicCast())
                      {
                        uint64_t v52 = v22;
                        uint64_t v53 = v20;
                        id v37 = objc_allocWithZone((Class)_MRGroupSessionTokenProtobuf);
                        sub_10018FE44(v60, v63);
                        Class v38 = Data._bridgeToObjectiveC()().super.isa;
                        sub_10018FE9C(v60, v63);
                        id v39 = [v37 initWithData:v38];

                        if (v39)
                        {
                          id v40 = [objc_allocWithZone((Class)MRGroupSessionToken) initWithProtobuf:v39];
                          id v41 = objc_allocWithZone((Class)MRDGroupSessionJoinRequest);
                          id v42 = v52;
                          NSString v43 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          Class v44 = Array._bridgeToObjectiveC()().super.isa;
                          id v45 = [v41 initWithIdentifier:v43 identity:v42 oobKeys:v44];

                          if (v6)
                          {
                            sub_10023E06C(v45, v40);
                            sub_10018FE9C(v56, v55);

                            sub_10018FE9C(v60, v63);
                            swift_bridgeObjectRelease();
                          }
                          else
                          {
                            sub_10023D2A8(v45, v54, v10, v40);
                            sub_10018FE9C(v56, v55);

                            sub_10018FE9C(v60, v63);
                            swift_bridgeObjectRelease();
                          }
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (qword_100480290 != -1) {
                            swift_once();
                          }
                          uint64_t v46 = type metadata accessor for Logger();
                          sub_10018A9A8(v46, (uint64_t)qword_100480298);
                          uint64_t v47 = Logger.logObject.getter();
                          os_log_type_t v48 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v47, v48))
                          {
                            os_log_type_t v49 = (uint8_t *)swift_slowAlloc();
                            v64[0] = swift_slowAlloc();
                            *(_DWORD *)os_log_type_t v49 = 136315138;
                            uint64_t v50 = _typeName(_:qualified:)();
                            *(void *)&long long v65 = sub_10018A9E0(v50, v51, v64);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%s] Failed to parse join token", v49, 0xCu);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();

                            sub_10018FE9C(v60, v63);
                            sub_10018FE9C(v56, v55);
                          }
                          else
                          {
                            sub_10018FE9C(v56, v55);

                            sub_10018FE9C(v60, v63);
                          }
                        }
                        return;
                      }

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_10018FE9C(v56, v55);
                      goto LABEL_38;
                    }

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_10018FE9C(v56, v55);
                    goto LABEL_37;
                  }

                  unint64_t v36 = v62;
                  uint64_t v35 = v59;
                }
                else
                {
                  uint64_t v35 = v59;
                  unint64_t v36 = v62;
                }
                sub_10018FE9C(v35, v36);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_38;
              }
              swift_bridgeObjectRelease();
LABEL_44:
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
LABEL_37:
        sub_100194AE4((uint64_t)&v65);
        goto LABEL_38;
      }
    }
  }
}

uint64_t sub_10023D2A8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = sub_10023B7C8();
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = v4;
  v14[3] = a1;
  v14[4] = a4;
  uint64_t v46 = sub_10023D878;
  uint64_t v47 = v14;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  Class v38 = &v44;
  Class v44 = sub_100006760;
  id v45 = &unk_100423BA8;
  unint64_t v15 = _Block_copy(&aBlock);
  id v35 = v4;
  id v16 = a1;
  id v34 = a4;
  static DispatchQoS.unspecified.getter();
  id v41 = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_100015600((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v36);
  swift_release();
  id v17 = [v16 identifier];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  id v21 = (void *)swift_allocObject();
  unint64_t v23 = v34;
  id v22 = v35;
  v21[2] = v35;
  uint64_t v21[3] = v16;
  uint64_t v24 = v40;
  v21[4] = v39;
  v21[5] = v24;
  void v21[6] = v23;
  uint64_t v46 = sub_10023DA0C;
  uint64_t v47 = v21;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  Class v44 = sub_100006760;
  id v45 = &unk_100423BF8;
  char v25 = _Block_copy(&aBlock);
  uint64_t v26 = v22;
  id v27 = v16;
  id v28 = v23;
  swift_bridgeObjectRetain();
  swift_release();
  id v29 = [self timerWithInterval:0 repeats:v25 block:60.0];
  _Block_release(v25);
  uint64_t v30 = &v26[OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID];
  swift_beginAccess();
  if (v29)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v41 = *(void **)v30;
    *(void *)uint64_t v30 = 0x8000000000000000;
    sub_10023DD48((uint64_t)v29, v18, v20, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v30 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = (void *)sub_10022B17C(v18, v20);
    swift_bridgeObjectRelease();
  }
  return swift_endAccess();
}

uint64_t sub_10023D730(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

id sub_10023D7B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupSessionProxyAuthorizationListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10023D878()
{
  uint64_t v1 = v0;
  objc_super v2 = *(void **)(v0 + 16);
  char v4 = *(void **)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x80))();
  if (v5)
  {
    int v6 = (void *)v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = v4;
    v11[4] = sub_10023E414;
    v11[5] = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10023D730;
    v11[3] = &unk_100423C98;
    uint64_t v8 = _Block_copy(v11);
    char v9 = v2;
    id v10 = v4;
    swift_release();
    [v6 groupSessionProxyAuthorizationListener:v9 didReceiveJoinRequest:v10 withSessionToken:v3 handler:v8];
    swift_unknownObjectRelease();
    _Block_release(v8);
  }
}

uint64_t sub_10023D9BC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10023DA0C()
{
  return sub_10023E06C(*(void **)(v0 + 24), *(void **)(v0 + 48));
}

uint64_t sub_10023DA38(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047A078);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  id v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_10023DD48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10023DEB8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10023DA38(v15, a4 & 1);
  unint64_t v20 = sub_100013660(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  id v22 = (uint64_t *)(v18[6] + 16 * v12);
  *id v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

id sub_10023DEB8()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047A078);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10023E06C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = sub_10023B7C8();
  int64_t v13 = (void *)swift_allocObject();
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_10023E32C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100423C48;
  unint64_t v14 = _Block_copy(aBlock);
  id v15 = v2;
  id v16 = a1;
  id v17 = a2;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_100015600((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v19[0]);
  return swift_release();
}

void *sub_10023E32C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  id result = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x80))();
  if (result)
  {
    [result groupSessionProxyAuthorizationListener:v2 didCancelJoinRequest:v3 withSessionToken:v4];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10023E3D4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10023E414()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = sub_10023B7FC();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10023E580;
  *(void *)(v6 + 24) = v5;
  v11[4] = sub_1001BA8E4;
  v11[5] = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1001F4BF0;
  v11[3] = &unk_100423D10;
  uint64_t v7 = _Block_copy(v11);
  id v8 = v2;
  id v9 = v3;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);

  _Block_release(v7);
  LODWORD(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

void sub_10023E580()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  id v3 = [v1 identifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR___MRDGroupSessionProxyAuthorizationListener_cancellationTimersByRequestID);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(*v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_100013660(v4, v6);
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    id v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = 0;
  }
  swift_bridgeObjectRelease();
  [v11 invalidate];

LABEL_7:
  id v12 = [v1 identifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  swift_beginAccess();
  id v16 = (void *)sub_10022B17C(v13, v15);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t sub_10023E6E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10023E6F4()
{
  unint64_t result = qword_100479FC0;
  if (!qword_100479FC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100479FC0);
  }
  return result;
}

uint64_t sub_10023E734()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10023E76C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10023E7A4(uint64_t a1, uint64_t a2)
{
  sub_10023C3E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), "[%s] Rapport proxyAuthorizationRequest event received from: %s\n%s");
}

void sub_10023E7C8(uint64_t a1, uint64_t a2)
{
  sub_10023C3E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), "[%s] Rapport proxyAuthorizationCancel event received from: %s\n%s");
}

uint64_t sub_10023E82C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10019001C(v0, qword_1004802B8);
  sub_10018A9A8(v0, (uint64_t)qword_1004802B8);
  id v1 = (id)*sub_1001A6778();
  return Logger.init(_:)();
}

uint64_t sub_10023E888()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10023E8D4(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager_currentSession);
  swift_beginAccess();
  *id v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_10023E928())()
{
  return j__swift_endAccess;
}

uint64_t sub_10023E984()
{
  uint64_t v1 = OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender;
  if (*(void *)(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender);
  }
  else
  {
    type metadata accessor for GroupSessionProxyAuthorizationSender();
    uint64_t v2 = sub_10018A7B8();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10023E9F4(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender) = a1;
  return swift_release();
}

uint64_t (*sub_10023EA0C(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_10023E984();
  return sub_10023EA54;
}

uint64_t sub_10023EA54(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR____TtC12mediaremoted16HomePodUIManager____lazy_storage___proxyAuthorizationSender) = *a1;
  return swift_release();
}

void sub_10023EA6C(void *a1, void (*a2)(uint64_t))
{
  id v3 = v2;
  swift_getObjectType();
  uint64_t v6 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x60))();
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 remoteParticipants];
    sub_100013A80(&qword_10047A1C0);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v10 < 1)
    {
      id v17 = [self currentSettings];
      unsigned int v18 = [v17 supportGroupSessionHomePodBoop];

      if (v18)
      {
        if (qword_1004802B0 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        sub_10018A9A8(v19, (uint64_t)qword_1004802B8);
        id v20 = a1;
        char v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          os_log_type_t type = v22;
          uint64_t v23 = swift_slowAlloc();
          uint64_t v28 = (void *)swift_slowAlloc();
          uint64_t v30 = swift_slowAlloc();
          *(_DWORD *)uint64_t v23 = 136315394;
          uint64_t v24 = _typeName(_:qualified:)();
          sub_10018A9E0(v24, v25, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2112;
          id v26 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v28 = v20;

          _os_log_impl((void *)&_mh_execute_header, v21, type, "[%s] Requesting to notify nearby devices for join request: %@", (uint8_t *)v23, 0x16u);
          sub_100013A80((uint64_t *)&unk_10047B850);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v27 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x78))();
        (*(void (**)(id, void *))(*(void *)v27 + 232))(v20, v7);
        swift_release();
      }
      a2(1);
      swift_unknownObjectRelease();
    }
    else
    {
      if (qword_1004802B0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10018A9A8(v11, (uint64_t)qword_1004802B8);
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        uint64_t v15 = _typeName(_:qualified:)();
        sub_10018A9E0(v15, v16, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] Participants are present in session - Not notifying nearby devices", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t sub_10023F058(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x60))();
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [self currentSettings];
    unsigned int v6 = [v5 supportGroupSessionHomePodBoop];

    if (v6)
    {
      uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78))();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 240))(a1, v4);
      swift_release();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10023F224(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  if (a3)
  {
    type metadata accessor for MRGroupSessionError(0);
    uint64_t v5 = v4;
    uint64_t v8 = 9;
    uint64_t v6 = sub_10023F828(&qword_1004786A0, type metadata accessor for MRGroupSessionError);
    sub_1002483C4((uint64_t)&v8, 0xD00000000000001FLL, 0x80000001003B6740, 0, v5, v6);
    uint64_t v7 = v9;
    a3(v9);
  }
}

void sub_10023F414(void (*a1)(void *))
{
  if (a1)
  {
    type metadata accessor for MRGroupSessionError(0);
    uint64_t v3 = v2;
    uint64_t v6 = 9;
    uint64_t v4 = sub_10023F828(&qword_1004786A0, type metadata accessor for MRGroupSessionError);
    sub_1002483C4((uint64_t)&v6, 0xD00000000000001FLL, 0x80000001003B6740, 0, v3, v4);
    uint64_t v5 = v7;
    a1(v7);
  }
}

uint64_t sub_10023F5EC()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x68);
  uint64_t v1 = swift_unknownObjectRetain();

  return v3(v1);
}

uint64_t sub_10023F6F4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))(0);
}

id sub_10023F784()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HomePodUIManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HomePodUIManager()
{
  return self;
}

uint64_t sub_10023F828(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10023F870()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10023F8A8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10023F8BC()
{
  sub_1001B9788(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t sub_10023F8F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  switch(a1)
  {
    case 0:
      return 0x72676F72506E692ELL;
    case 2:
      return 0x6C6C65636E61632ELL;
    case 1:
      return 0x646565636375732ELL;
  }
  swift_errorRetain();
  sub_100185894(a2, a3, a4);
  sub_1001BB378();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_errorRelease();
  sub_1001859D4(a2, a3, a4);
  return 0x2864656C6961662ELL;
}

uint64_t sub_10023FA34(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (*a1)
  {
    if (v2 == 1)
    {
      if (v3 == 1) {
        return 1;
      }
    }
    else if (v2 == 2)
    {
      if (v3 == 2) {
        return 1;
      }
    }
    else if (v3 >= 3)
    {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10023FA84()
{
  return sub_10023F8F4(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10023FA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10023FAF8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  swift_beginAccess();
  unint64_t v2 = *(void *)v1;
  sub_10023FB74(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
  return v2;
}

unint64_t sub_10023FB74(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result >= 3)
  {
    swift_errorRetain();
    return sub_100185894(a2, a3, a4);
  }
  return result;
}

unint64_t sub_10023FBD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  swift_beginAccess();
  unint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(void *)(v9 + 16) = a3;
  unsigned __int8 v13 = *(unsigned char *)(v9 + 24);
  *(unsigned char *)(v9 + 24) = a4;
  return sub_1001E5894(v10, v11, v12, v13);
}

uint64_t sub_10023FC50()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = 60;
  v21[1] = 0xE100000000000000;
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 60;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v0 + 160))();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8254;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  unsigned __int8 v15 = v14;
  v16._countAndFlagsBits = sub_10023F8F4(v9, v10, v12, v14);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  sub_1001E5894(v9, v11, v13, v15);
  v17._countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  (*(void (**)(void))(*(void *)v0 + 168))();
  sub_1002478D4(&qword_100477FF0, (void (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t sub_10023FED4()
{
  return j___s12MediaControl18RoutingInteractionV10identifierSSvg();
}

uint64_t sub_10023FF00()
{
  return j___s12MediaControl18RoutingInteractionV6actionAC6ActionOvg();
}

uint64_t sub_10023FF2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent;
  uint64_t v4 = type metadata accessor for RoutingInteraction();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10023FFA0(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = 0;
  uint64_t v3 = v2 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 24) = 0;
  sub_100240010(a1, v2 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent);
  return v2;
}

uint64_t sub_100240010(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100240074()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_1002400F8()
{
  sub_100247004(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent);
  swift_release();
  sub_1001E5894(*(void *)(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state), *(void *)(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state + 8), *(void *)(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state + 16), *(unsigned char *)(v0 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state + 24));

  return swift_deallocClassInstance();
}

Swift::Int sub_100240188()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 192))(v2);
  return Hasher._finalize()();
}

uint64_t sub_1002401E8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_10024022C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_100240270()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

Swift::Int sub_1002402B4()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 192))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100240314(uint64_t *a1, uint64_t *a2)
{
  return sub_100246EF8(*a1, *a2);
}

void *sub_100240320()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (void **)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *Swift::String v5 = (*(uint64_t (**)(uint64_t))(*v0 + 120))(v3);
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  char v6 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    swift_beginAccess();
    uint64_t v1 = v0[4];
    unsigned __int8 v15 = _swiftEmptyArrayStorage;
    if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t result = (void *)swift_retain();
      if (v7) {
        goto LABEL_5;
      }
LABEL_17:
      swift_release();
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  swift_retain();
  uint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = (uint64_t)result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_5:
  if (v7 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v10 = *(void *)(v1 + 8 * i + 32);
        swift_retain();
      }
      unint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 128))();
      sub_1001E5894(v11, v12, v13, v14);
      if (v11)
      {
        swift_release();
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_release();
    return v15;
  }
  return result;
}

uint64_t sub_100240574()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  Swift::String v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *Swift::String v5 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 120))(v3);
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  char v6 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    swift_beginAccess();
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002406B8()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_retain();
    uint64_t result = swift_retain();
    unint64_t v4 = 0;
    Swift::String v5 = _swiftEmptyArrayStorage;
    while (v4 < *(void *)(v1 + 16))
    {
      char v6 = *(uint64_t (**)(uint64_t))(**(void **)(v1 + 8 * v4 + 32) + 152);
      uint64_t v7 = swift_retain();
      uint64_t v8 = v6(v7);
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v5 = sub_100229FF0(0, v5[2] + 1, 1, v5);
      }
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1) {
        Swift::String v5 = sub_100229FF0((void *)(v11 > 1), v12 + 1, 1, v5);
      }
      ++v4;
      v5[2] = v12 + 1;
      uint64_t v13 = &v5[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      uint64_t result = swift_release();
      if (v2 == v4)
      {
        swift_release();
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    sub_100013A80(&qword_10047A080);
    sub_1000155BC((unint64_t *)&qword_1004789C0, &qword_10047A080);
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    Swift::String v16 = v15;
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 10;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    return 10;
  }
  return result;
}

uint64_t sub_1002408E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v7);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for RoutingTimeline.Observer();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v11 + 24) = a2;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v3 + 40) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v3 + 40) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
LABEL_5:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_100240AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v2 + 120))(v7);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  char v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v13 >= a2) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  swift_beginAccess();
  swift_unknownObjectRetain();
  a2 = sub_100247084(v2 + 5, a1);
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v12 = v2[5];
  if (v12 >> 62) {
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v13 >= a2)
  {
LABEL_4:
    sub_100247458(a2, v13);
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100240C90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = sub_100013A80((uint64_t *)&unk_10047BC50);
  __chkstk_darwin(v5 - 8);
  unint64_t v60 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v7 = *(void (***)(char *, uint64_t, uint64_t))(v63 - 8);
  __chkstk_darwin(v63);
  unint64_t v62 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoutingEvent();
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v61 = (uint64_t)&v56 - v14;
  __chkstk_darwin(v13);
  Swift::String v16 = (char *)&v56 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  char v21 = (void **)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = v4;
  *char v21 = (*(uint64_t (**)(uint64_t))(v4 + 120))(v19);
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  LOBYTE(v4) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v4)
  {
    unint64_t v58 = v12;
    sub_10023FA94(a1, (uint64_t)v16);
    type metadata accessor for RoutingTimeline.Event();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = 0;
    uint64_t v24 = v23 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0;
    *(void *)uint64_t v24 = 0;
    *(unsigned char *)(v24 + 24) = 0;
    sub_100240010((uint64_t)v16, v23 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent);
    v65[0] = *(void *)(a1 + *(int *)(v9 + 24));
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v23;
    swift_retain();
    swift_retain();
    sub_100013A80(&qword_100478F20);
    sub_1000155BC(&qword_100478F28, &qword_100478F20);
    uint64_t v27 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)(v23 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_observer) = v27;
    swift_release();
    uint64_t v28 = sub_1001A69C4();
    uint64_t v29 = v63;
    v7[2](v62, v28, v63);
    sub_10023FA94(a1, v61);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    uint64_t v32 = v7;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v57 = a1;
      uint64_t v34 = v33;
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v35 = _typeName(_:qualified:)();
      uint64_t v56 = v2;
      uint64_t v64 = sub_10018A9E0(v35, v36, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v37 = swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = v61;
      uint64_t v39 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v37);
      uint64_t v64 = sub_10018A9E0(v39, v40, v65);
      uint64_t v2 = v56;
      uint64_t v41 = (uint64_t)v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100247004(v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] addEvent<%s>", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v29 = v63;
      a1 = v57;
      swift_slowDealloc();

      id v42 = v32[1];
      ((void (*)(char *, uint64_t))v42)(v62, v29);
    }
    else
    {
      sub_100247004(v61);

      id v42 = v7[1];
      ((void (*)(char *, uint64_t))v42)(v62, v29);
      uint64_t v41 = (uint64_t)v60;
    }
    swift_beginAccess();
    sub_1002459FC(v23);
    swift_endAccess();
    uint64_t v43 = sub_1001A6DEC();
    sub_1001A6BB8(v43, v41);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v32[6])(v41, 1, v29) == 1)
    {
      sub_10024782C(v41);
    }
    else
    {
      uint64_t v44 = (uint64_t)v58;
      sub_10023FA94(a1, (uint64_t)v58);
      swift_retain_n();
      id v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        v65[0] = v61;
        *(_DWORD *)uint64_t v47 = 136315650;
        unint64_t v62 = (char *)v32;
        uint64_t v48 = _typeName(_:qualified:)();
        uint64_t v64 = sub_10018A9E0(v48, v49, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v50 = swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        uint64_t v51 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v50);
        uint64_t v64 = sub_10018A9E0(v51, v52, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v53 = sub_100247004(v44);
        *(_WORD *)(v47 + 22) = 2080;
        uint64_t v54 = (*(uint64_t (**)(uint64_t))(*v2 + 192))(v53);
        uint64_t v64 = sub_10018A9E0(v54, v55, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%s] addEvent<%s> - updated timeline:%s", (uint8_t *)v47, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100247004(v44);
        swift_release_n();
      }
      ((void (*)(char *, uint64_t))v42)(v60, v63);
    }
    sub_10024521C();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002414EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)result + 120))(result);
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    char v14 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
    if (v14)
    {
      sub_100241684(a3, v9, v10, v11, v12);
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_100241684(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v10 = *(uint64_t (**)(void))(*a1 + 128);
  unint64_t result = v10();
  if (result != 2)
  {
    unint64_t v15 = sub_1001E5894(result, v12, v13, v14);
    unint64_t v16 = ((uint64_t (*)(unint64_t))v10)(v15);
    if (v16)
    {
      sub_1001E5894(v16, v17, v18, v19);
      _StringGuts.grow(_:)(52);
      v28._countAndFlagsBits = 91;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      v29._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 0xD000000000000017;
      v30._object = (void *)0x80000001003B6BD0;
      String.append(_:)(v30);
      v31._countAndFlagsBits = (*(uint64_t (**)(void))(*a1 + 160))();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v32._object = (void *)0x80000001003B6BF0;
      v32._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v32);
      v33._countAndFlagsBits = (*(uint64_t (**)(void))(*a1 + 152))();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v20 = (char *)a1 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
      swift_beginAccess();
      if (a2)
      {
        uint64_t v21 = *((void *)v20 + 1);
        unint64_t v34 = *(void *)v20;
        uint64_t v22 = *((void *)v20 + 2);
        *(void *)uint64_t v20 = a2;
        *((void *)v20 + 1) = a3;
        *((void *)v20 + 2) = a4;
        unsigned __int8 v23 = v20[24];
        v20[24] = a5;
        swift_errorRetain();
        sub_100185894(a3, a4, a5);
        unint64_t v24 = v34;
        uint64_t v25 = v21;
        uint64_t v26 = v22;
        unsigned __int8 v27 = v23;
      }
      else
      {
        unint64_t v24 = *(void *)v20;
        uint64_t v25 = *((void *)v20 + 1);
        uint64_t v26 = *((void *)v20 + 2);
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = 0;
        *(void *)uint64_t v20 = 1;
        unsigned __int8 v27 = v20[24];
        v20[24] = 0;
      }
      sub_1001E5894(v24, v25, v26, v27);
      return sub_100241948(a1);
    }
  }
  return result;
}

uint64_t sub_100241948(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v168 = *v1;
  uint64_t v4 = sub_100013A80((uint64_t *)&unk_10047BC50);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v162 = (uint64_t)v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v163 = (uint64_t)v155 - v7;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  v156 = (char *)v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v165 = (char *)v155 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)v155 - v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*a1 + 160))(v14);
  unsigned __int8 v19 = v18;
  uint64_t v20 = sub_1001A69C4();
  v170 = v9;
  uint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v9[2];
  uint64_t v160 = v20;
  v161 = v9 + 2;
  v159 = v21;
  ((void (*)(char *))v21)(v16);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v171 = v8;
  v172 = v19;
  v173 = v1;
  uint64_t v164 = v17;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    v167 = v9;
    uint64_t v26 = v25;
    v169 = (void (*)(void, void))swift_slowAlloc();
    v174 = v169;
    *(_DWORD *)uint64_t v26 = 136315650;
    uint64_t v27 = _typeName(_:qualified:)();
    uint64_t v182 = sub_10018A9E0(v27, v28, (uint64_t *)&v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v182 = sub_10018A9E0(v17, (unint64_t)v19, (uint64_t *)&v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 22) = 2080;
    Swift::String v29 = *(uint64_t (**)(uint64_t))(*a1 + 152);
    uint64_t v30 = swift_retain();
    uint64_t v31 = v29(v30);
    unint64_t v33 = v32;
    swift_release();
    uint64_t v182 = sub_10018A9E0(v31, v33, (uint64_t *)&v174);
    uint64_t v2 = v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unsigned __int8 v19 = v172;
    uint64_t v8 = v171;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%s] rebuild<%s> - rebuild for event: %s", (uint8_t *)v26, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v167;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  v169 = (void (*)(void, void))v9[1];
  v169(v16, v8);
  uint64_t v157 = sub_1001A6DEC();
  uint64_t v34 = v163;
  sub_1001A6BB8(v157, v163);
  unint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v9[6];
  uint64_t v35 = v9 + 6;
  v158 = v36;
  unsigned int v37 = v36(v34, 1, v8);
  v166 = a1;
  if (v37 == 1)
  {
    sub_10024782C(v34);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      v174 = (void (*)(void, void))swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315650;
      uint64_t v41 = _typeName(_:qualified:)();
      uint64_t v182 = sub_10018A9E0(v41, v42, (uint64_t *)&v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v182 = sub_10018A9E0(v164, (unint64_t)v19, (uint64_t *)&v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v43 = swift_bridgeObjectRelease_n();
      *(_WORD *)(v40 + 22) = 2080;
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(*v173 + 192))(v43);
      uint64_t v182 = sub_10018A9E0(v44, v45, (uint64_t *)&v174);
      uint64_t v2 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%s] rebuild<%s> - current: %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      uint64_t v34 = v163;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    a1 = v166;
    v169(v34, v8);
  }
  os_log_type_t v46 = v2 + 3;
  swift_beginAccess();
  uint64_t v48 = v2[3];
  uint64_t v47 = v2[4];
  uint64_t v49 = *(void *)(v47 + 16);
  swift_retain();
  if (v48)
  {
    swift_retain();
    Swift::Int v50 = sub_100245FF4((uint64_t)a1, v47 + 32, v49, (void *)(v48 + 16), v48 + 32);
  }
  else
  {
    Swift::Int v50 = sub_100245E58((uint64_t)a1, v47 + 32, v49);
  }
  uint64_t v52 = v50;
  char v53 = v51;
  v167 = v35;
  swift_release();
  uint64_t v54 = swift_release();
  if (v53)
  {
LABEL_65:
    v174 = 0;
    unint64_t v175 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v139._countAndFlagsBits = 91;
    v139._object = (void *)0xE100000000000000;
    String.append(_:)(v139);
    v140._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v140);
    swift_bridgeObjectRelease();
    v141._countAndFlagsBits = 0x6C6975626572205DLL;
    v141._object = (void *)0xEA00000000003C64;
    String.append(_:)(v141);
    v142._countAndFlagsBits = v164;
    v142._object = v172;
    String.append(_:)(v142);
    swift_bridgeObjectRelease();
    v143._countAndFlagsBits = 0xD00000000000002FLL;
    v143._object = (void *)0x80000001003B6AF0;
    String.append(_:)(v143);
    v144._countAndFlagsBits = (*(uint64_t (**)(void))(*a1 + 152))();
    String.append(_:)(v144);
    swift_bridgeObjectRelease();
LABEL_68:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1002430C8);
  }
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(*a1 + 128))(v54);
  uint64_t v59 = v173;
  switch(v55)
  {
    case 1:
      goto LABEL_15;
    case 0:
      v174 = 0;
      unint64_t v175 = 0xE000000000000000;
      _StringGuts.grow(_:)(60);
      v145._countAndFlagsBits = 91;
      v145._object = (void *)0xE100000000000000;
      String.append(_:)(v145);
      v146._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      v147._countAndFlagsBits = 0x6C6975626572205DLL;
      v147._object = (void *)0xEA00000000003C64;
      String.append(_:)(v147);
      v148._countAndFlagsBits = v164;
      v148._object = v172;
      String.append(_:)(v148);
      swift_bridgeObjectRelease();
      v149._countAndFlagsBits = 0xD00000000000002DLL;
      v149._object = (void *)0x80000001003B6B20;
      String.append(_:)(v149);
      goto LABEL_68;
    case 2:
      v174 = 0;
      unint64_t v175 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v150._countAndFlagsBits = 91;
      v150._object = (void *)0xE100000000000000;
      String.append(_:)(v150);
      v151._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v151);
      swift_bridgeObjectRelease();
      v152._countAndFlagsBits = 0x6C6975626572205DLL;
      v152._object = (void *)0xEA00000000003C64;
      String.append(_:)(v152);
      v153._countAndFlagsBits = v164;
      v153._object = v172;
      String.append(_:)(v153);
      swift_bridgeObjectRelease();
      v154._object = (void *)0x80000001003B6B50;
      v154._countAndFlagsBits = 0xD00000000000002BLL;
      String.append(_:)(v154);
      goto LABEL_68;
  }
  uint64_t v72 = v168;
  uint64_t v73 = v56;
  uint64_t v74 = v57;
  switch(v58)
  {
    case 1:
      swift_bridgeObjectRetain();
      sub_100244130(v73, v74, v52, (uint64_t)v59, v164, v172, (uint64_t)a1, v72);
      swift_errorRelease();
      sub_1001859D4(v73, v74, 1u);
      sub_1001859D4(v73, v74, 1u);
      goto LABEL_15;
    case 2:
      swift_bridgeObjectRetain();
      sub_1002430DC(v73, v74, 0, (uint64_t)v59, v164, v172, (uint64_t)a1, v72);
      swift_errorRelease();
      sub_1001859D4(v73, v74, 2u);
      sub_1001859D4(v73, v74, 2u);
      goto LABEL_15;
    case 3:
      swift_bridgeObjectRetain();
      sub_100244130(v73, v74, 0, (uint64_t)v59, v164, v172, (uint64_t)a1, v72);
      swift_errorRelease();
      sub_1001859D4(v73, v74, 3u);
      sub_1001859D4(v73, v74, 3u);
      goto LABEL_15;
    case 4:
      if (v56 | v57)
      {
        uint64_t v163 = v56;
        a1 = (void *)v173[4];
        uint64_t v118 = a1[2];
        v155[1] = v173[3];
        if (v118)
        {
          swift_retain();
          swift_retain();
          unint64_t v119 = 0;
          while (v119 < a1[2])
          {
            uint64_t v120 = a1[v119 + 4];
            v121 = *(uint64_t (**)(uint64_t))(*(void *)v120 + 128);
            uint64_t v122 = swift_retain();
            unint64_t v123 = v121(v122);
            if (!v123)
            {
              uint64_t v127 = v120 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
              swift_beginAccess();
              unint64_t v123 = *(void *)v127;
              uint64_t v124 = *(void *)(v127 + 8);
              uint64_t v125 = *(void *)(v127 + 16);
              *(void *)(v127 + 8) = 0;
              *(void *)(v127 + 16) = 0;
              *(void *)uint64_t v127 = 2;
              unsigned __int8 v126 = *(unsigned char *)(v127 + 24);
              *(unsigned char *)(v127 + 24) = 0;
            }
            sub_1001E5894(v123, v124, v125, v126);
            ++v119;
            swift_release();
            if (v118 == v119) {
              goto LABEL_60;
            }
          }
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        swift_retain();
        swift_retain();
LABEL_60:
        swift_errorRelease();
        sub_1001859D4(v163, v74, 4u);
        swift_release();
        swift_release();
        uint64_t v59 = v173;
      }
      else
      {
        swift_errorRelease();
      }
LABEL_15:
      unint64_t v60 = v165;
      uint64_t v61 = v171;
      v159(v165, v160, v171);
      unint64_t v62 = (unint64_t)v172;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc();
        v174 = (void (*)(void, void))swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315650;
        uint64_t v66 = _typeName(_:qualified:)();
        uint64_t v182 = sub_10018A9E0(v66, v67, (uint64_t *)&v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v65 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v182 = sub_10018A9E0(v164, v62, (uint64_t *)&v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v68 = swift_bridgeObjectRelease_n();
        *(_WORD *)(v65 + 22) = 2080;
        uint64_t v69 = (*(uint64_t (**)(uint64_t))(*v173 + 192))(v68);
        uint64_t v182 = sub_10018A9E0(v69, v70, (uint64_t *)&v174);
        uint64_t v59 = v173;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "[%s] rebuild<%s> - before advancing: %s", (uint8_t *)v65, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v71 = v165;
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
        uint64_t v71 = v60;
      }
      v169(v71, v61);
      sub_10024521C();
      uint64_t v75 = v59[4];
      if (*(void *)(v75 + 16) && *(void **)(v75 + 32) == v166)
      {
        do
        {
          a1 = *(void **)(v75 + 32);
          uint64_t v80 = *(uint64_t (**)(uint64_t))(*a1 + 128);
          uint64_t v81 = swift_retain();
          uint64_t v82 = v80(v81);
          if ((unint64_t)(v82 - 1) >= 2)
          {
            if (!v82)
            {
              v128 = v156;
              uint64_t v129 = v171;
              v159(v156, v160, v171);
              swift_retain_n();
              unint64_t v130 = (unint64_t)v172;
              swift_bridgeObjectRetain();
              v131 = Logger.logObject.getter();
              os_log_type_t v132 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v131, v132))
              {
                uint64_t v133 = swift_slowAlloc();
                v174 = (void (*)(void, void))swift_slowAlloc();
                *(_DWORD *)uint64_t v133 = 136315650;
                uint64_t v134 = _typeName(_:qualified:)();
                uint64_t v181 = sub_10018A9E0(v134, v135, (uint64_t *)&v174);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v133 + 12) = 2080;
                swift_bridgeObjectRetain();
                uint64_t v181 = sub_10018A9E0(v164, v130, (uint64_t *)&v174);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                uint64_t v136 = swift_bridgeObjectRelease_n();
                *(_WORD *)(v133 + 22) = 2080;
                uint64_t v137 = (*(uint64_t (**)(uint64_t))(*v59 + 192))(v136);
                uint64_t v181 = sub_10018A9E0(v137, v138, (uint64_t *)&v174);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v131, v132, "[%s] rebuild<%s> - advanced: %s", (uint8_t *)v133, 0x20u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_release();
                v116 = v156;
                uint64_t v117 = v171;
              }
              else
              {

                swift_release();
                swift_release_n();
                swift_bridgeObjectRelease_n();
                v116 = v128;
                uint64_t v117 = v129;
              }
              return ((uint64_t (*)(char *, uint64_t))v169)(v116, v117);
            }
            uint64_t v86 = v83;
            uint64_t v87 = v84;
            unsigned __int8 v88 = v85;
            swift_errorRelease();
            sub_1001859D4(v86, v87, v88);
          }
          swift_beginAccess();
          uint64_t v89 = v59[4];
          if (!*(void *)(v89 + 16))
          {
            __break(1u);
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          uint64_t v90 = *v46;
          if (*v46)
          {
            uint64_t v91 = v90 + 16;
            uint64_t v92 = *(void *)(v89 + 32);
            Hasher.init(_seed:)();
            os_log_t v93 = *(void (**)(void))(*(void *)v92 + 192);
            swift_retain();
            swift_retain();
            v93(&v174);
            Swift::Int v94 = Hasher._finalize()();
            uint64_t v95 = 1 << *(void *)(v90 + 16);
            BOOL v96 = __OFSUB__(v95, 1);
            uint64_t v97 = v95 - 1;
            if (v96) {
              goto LABEL_62;
            }
            unint64_t v98 = v90 + 32;
            uint64_t v79 = v97 & v94;
            uint64_t v99 = _HashTable.UnsafeHandle._startIterator(bucket:)();
            uint64_t v101 = v100;
            uint64_t v103 = v102;
            swift_release();
            v174 = (void (*)(void, void))(v90 + 16);
            unint64_t v175 = v90 + 32;
            uint64_t v176 = v79;
            uint64_t v177 = v99;
            uint64_t v178 = v101;
            uint64_t v179 = v103;
            char v180 = 0;
            uint64_t v59 = v173;
            if (!v99) {
              goto LABEL_64;
            }
            char v104 = 0;
            while (1)
            {
              uint64_t v182 = v91;
              unint64_t v183 = v98;
              uint64_t v184 = v79;
              uint64_t v185 = v99;
              uint64_t v186 = v101;
              uint64_t v187 = v103;
              char v188 = v104 & 1;
              uint64_t v105 = _HashTable.BucketIterator.currentValue.getter();
              if ((v106 & 1) == 0 && !v105) {
                break;
              }
              _HashTable.BucketIterator.advance()();
              uint64_t v91 = (uint64_t)v174;
              unint64_t v98 = v175;
              uint64_t v79 = v176;
              uint64_t v99 = v177;
              uint64_t v101 = v178;
              uint64_t v103 = v179;
              char v104 = v180;
              if (!v177) {
                goto LABEL_64;
              }
            }
            swift_release();
          }
          else
          {
            uint64_t v79 = 0;
          }
          sub_100246268(0, v79);
          swift_endAccess();
          swift_release();
          sub_10024521C();
          swift_release();
          uint64_t v75 = v59[4];
        }
        while (*(void *)(v75 + 16));
      }
      uint64_t v76 = v162;
      sub_1001A6BB8(v157, v162);
      uint64_t v77 = v171;
      if (v158(v76, 1, v171) == 1)
      {
        swift_bridgeObjectRelease();
        return sub_10024782C(v76);
      }
      else
      {
        swift_retain_n();
        unint64_t v107 = (unint64_t)v172;
        swift_bridgeObjectRetain();
        uint64_t v108 = Logger.logObject.getter();
        os_log_type_t v109 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v108, v109))
        {
          uint64_t v110 = swift_slowAlloc();
          v174 = (void (*)(void, void))swift_slowAlloc();
          *(_DWORD *)uint64_t v110 = 136315650;
          uint64_t v111 = _typeName(_:qualified:)();
          uint64_t v181 = sub_10018A9E0(v111, v112, (uint64_t *)&v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v110 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v181 = sub_10018A9E0(v164, v107, (uint64_t *)&v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v113 = swift_bridgeObjectRelease_n();
          *(_WORD *)(v110 + 22) = 2080;
          uint64_t v114 = (*(uint64_t (**)(uint64_t))(*v59 + 192))(v113);
          uint64_t v181 = sub_10018A9E0(v114, v115, (uint64_t *)&v174);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v108, v109, "[%s] rebuild<%s> - after fully advancing: %s", (uint8_t *)v110, 0x20u);
          swift_arrayDestroy();
          uint64_t v76 = v162;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
          swift_bridgeObjectRelease_n();
        }

        v116 = (char *)v76;
        uint64_t v117 = v77;
        return ((uint64_t (*)(char *, uint64_t))v169)(v116, v117);
      }
    default:
      swift_bridgeObjectRetain();
      sub_1002430DC(v73, v74, v52, (uint64_t)v59, v164, v172, (uint64_t)a1, v72);
      swift_errorRelease();
      sub_1001859D4(v73, v74, 0);
      sub_1001859D4(v73, v74, 0);
      goto LABEL_15;
  }
}

uint64_t sub_1002430DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v123 = a8;
  uint64_t v124 = a5;
  uint64_t v135 = a2;
  uint64_t v140 = a1;
  uint64_t v114 = type metadata accessor for RoutingControl.Target();
  uint64_t v12 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v113 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for RoutingControl();
  uint64_t v14 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  unint64_t v115 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v138 - 8);
  uint64_t v17 = __chkstk_darwin(v138);
  unint64_t v112 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  Swift::String v139 = (char *)&v101 - v19;
  uint64_t v137 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v20 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v136 = (uint64_t *)((char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = swift_beginAccess();
  uint64_t v141 = *(void *)(*(void *)(a4 + 32) + 16);
  if (v141 <= a3) {
    return result;
  }
  uint64_t v134 = (uint64_t (**)(uint64_t *, uint64_t))(v20 + 88);
  int v133 = enum case for RoutingInteraction.Action.add(_:);
  int v125 = enum case for RoutingInteraction.Action.remove(_:);
  int v118 = enum case for RoutingInteraction.Action.set(_:);
  int v117 = enum case for RoutingInteraction.Action.setActiveSession(_:);
  int v111 = enum case for RoutingInteraction.Action.setActiveItem(_:);
  int v110 = enum case for RoutingInteraction.Action.handoff(_:);
  os_log_type_t v132 = (void (**)(uint64_t *, uint64_t))(v20 + 96);
  os_log_type_t v109 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v108 = (uint64_t (**)(void *, uint64_t))(v12 + 88);
  unint64_t v107 = (void (**)(char *, uint64_t))(v14 + 8);
  char v104 = (void (**)(void *, uint64_t))(v12 + 8);
  uint64_t v103 = (void (**)(void *, uint64_t))(v12 + 96);
  unint64_t v130 = (void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v131 = (void (**)(char *, uint64_t))(v16 + 8);
  v121 = &v143;
  int v106 = enum case for RoutingInteraction.Action.control(_:);
  int v105 = enum case for RoutingControl.Target.session(_:);
  unint64_t v119 = (char *)&type metadata for Any + 8;
  *(void *)&long long v23 = 136315906;
  long long v120 = v23;
  unint64_t v24 = a3;
  uint64_t v122 = a4;
  uint64_t v129 = a3;
  while ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v30 = *(void *)(a4 + 32);
    if (v24 >= *(void *)(v30 + 16)) {
      goto LABEL_44;
    }
    uint64_t v31 = *(uint64_t **)(v30 + 8 * v24 + 32);
    unint64_t v32 = *(uint64_t (**)(uint64_t))(*v31 + 128);
    uint64_t v33 = swift_retain();
    unint64_t v34 = v32(v33);
    if (v34)
    {
      sub_1001E5894(v34, v35, v36, v37);
    }
    else
    {
      uint64_t v38 = v136;
      (*(void (**)(void))(*v31 + 168))();
      uint64_t v39 = v137;
      int v40 = (*v134)(v38, v137);
      if (v40 == v133)
      {
        (*v132)(v38, v39);
        uint64_t v41 = v38[2];
        uint64_t v42 = v38[3];
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      uint64_t v43 = v139;
      if (v40 == v125 || v40 == v118)
      {
        (*v132)(v38, v39);
        uint64_t v41 = v38[2];
        uint64_t v42 = v38[3];
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (v40 == v117)
      {
        (*v132)(v38, v39);
        uint64_t v41 = *v38;
        uint64_t v42 = v38[1];
        goto LABEL_17;
      }
      if (v40 == v111)
      {
        swift_release();
        (*v132)(v38, v39);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      if (v40 == v110)
      {
        (*v132)(v38, v39);
        uint64_t v41 = *(void *)(*v38 + 16);
        uint64_t v42 = *(void *)(*v38 + 24);
        swift_bridgeObjectRetain();
        swift_release();
LABEL_13:
        uint64_t v43 = v139;
LABEL_17:
        if (v41 == v140 && v42 == v135)
        {
          swift_bridgeObjectRelease();
LABEL_21:
          uint64_t v45 = sub_1001A69C4();
          uint64_t v46 = v138;
          (*v130)(v43, v45, v138);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          uint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.info.getter();
          int v49 = v48;
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v50 = swift_slowAlloc();
            uint64_t v128 = swift_slowAlloc();
            uint64_t v144 = v128;
            *(_DWORD *)uint64_t v50 = v120;
            os_log_t v127 = v47;
            uint64_t v51 = _typeName(_:qualified:)();
            uint64_t v142 = sub_10018A9E0(v51, v52, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v142 = sub_10018A9E0(v124, (unint64_t)a6, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v50 + 22) = 2080;
            uint64_t v53 = *v31;
            LODWORD(v126) = v49;
            uint64_t v54 = *(uint64_t (**)(uint64_t))(v53 + 152);
            uint64_t v55 = a6;
            uint64_t v56 = swift_retain();
            uint64_t v57 = v54(v56);
            unint64_t v59 = v58;
            swift_release();
            uint64_t v142 = sub_10018A9E0(v57, v59, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 32) = 2080;
            unint64_t v60 = *(uint64_t (**)(uint64_t))(*(void *)a7 + 152);
            uint64_t v61 = swift_retain();
            a6 = v55;
            uint64_t v62 = v60(v61);
            unint64_t v64 = v63;
            swift_release();
            uint64_t v142 = sub_10018A9E0(v62, v64, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            a4 = v122;
            swift_bridgeObjectRelease();
            os_log_t v65 = v127;
            _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v126, "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s", (uint8_t *)v50, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*v131)(v139, v138);
          }
          else
          {

            swift_release_n();
            swift_release_n();
            swift_bridgeObjectRelease_n();
            (*v131)(v43, v46);
          }
          uint64_t v25 = (uint64_t)v31 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
          swift_beginAccess();
          unint64_t v26 = *(void *)v25;
          uint64_t v27 = *(void *)(v25 + 8);
          uint64_t v28 = *(void *)(v25 + 16);
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + 16) = 0;
          *(void *)uint64_t v25 = 2;
          unsigned __int8 v29 = *(unsigned char *)(v25 + 24);
          *(unsigned char *)(v25 + 24) = 0;
          sub_1001E5894(v26, v27, v28, v29);
          uint64_t result = swift_release();
          a3 = v129;
          goto LABEL_5;
        }
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v44) {
          goto LABEL_21;
        }
        goto LABEL_10;
      }
      uint64_t v66 = v113;
      if (v40 != v106) {
        goto LABEL_45;
      }
      (*v132)(v38, v39);
      uint64_t v128 = *v38;
      uint64_t v67 = swift_projectBox();
      uint64_t v68 = v115;
      uint64_t v69 = v116;
      (*v109)(v115, v67, v116);
      RoutingControl.target.getter();
      uint64_t v70 = v114;
      int v71 = (*v108)(v66, v114);
      if (v71 == v105)
      {
        (*v103)(v66, v70);
        if (*v66 == v140 && v66[1] == v135)
        {
          swift_bridgeObjectRelease();
          uint64_t v72 = v112;
          goto LABEL_36;
        }
        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v72 = v112;
        if (v73)
        {
LABEL_36:
          uint64_t v74 = sub_1001A69C4();
          uint64_t v75 = v138;
          (*v130)(v72, v74, v138);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.info.getter();
          LODWORD(v127) = v77;
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = swift_slowAlloc();
            uint64_t v126 = swift_slowAlloc();
            uint64_t v144 = v126;
            *(_DWORD *)uint64_t v78 = v120;
            os_log_t v102 = v76;
            uint64_t v79 = _typeName(_:qualified:)();
            uint64_t v142 = sub_10018A9E0(v79, v80, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v78 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v142 = sub_10018A9E0(v124, (unint64_t)a6, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v78 + 22) = 2080;
            uint64_t v81 = *(uint64_t (**)(uint64_t))(*v31 + 152);
            uint64_t v82 = swift_retain();
            uint64_t v83 = v81(v82);
            unint64_t v85 = v84;
            swift_release();
            uint64_t v142 = sub_10018A9E0(v83, v85, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v78 + 32) = 2080;
            uint64_t v86 = *(uint64_t (**)(uint64_t))(*(void *)a7 + 152);
            uint64_t v87 = swift_retain();
            uint64_t v88 = v86(v87);
            unint64_t v90 = v89;
            swift_release();
            uint64_t v142 = sub_10018A9E0(v88, v90, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            a4 = v122;
            swift_bridgeObjectRelease();
            os_log_t v91 = v102;
            _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v127, "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s", (uint8_t *)v78, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            a3 = v129;
            swift_slowDealloc();

            (*v131)(v112, v138);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_release_n();
            swift_release_n();

            (*v131)(v72, v75);
          }
          (*v107)(v115, v116);
          uint64_t v92 = (uint64_t)v31 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
          swift_beginAccess();
          unint64_t v93 = *(void *)v92;
          uint64_t v94 = *(void *)(v92 + 8);
          uint64_t v95 = *(void *)(v92 + 16);
          *(void *)(v92 + 8) = 0;
          *(void *)(v92 + 16) = 0;
          *(void *)uint64_t v92 = 2;
          unsigned __int8 v96 = *(unsigned char *)(v92 + 24);
          *(unsigned char *)(v92 + 24) = 0;
          sub_1001E5894(v93, v94, v95, v96);
        }
        else
        {
          (*v107)(v115, v116);
        }
        swift_release();
        goto LABEL_10;
      }
      (*v107)(v68, v69);
      swift_release();
      (*v104)(v66, v70);
    }
LABEL_10:
    uint64_t result = swift_release();
LABEL_5:
    if (v141 == ++v24) {
      return result;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t v144 = 0;
  unint64_t v145 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t v144 = 91;
  unint64_t v145 = 0xE100000000000000;
  v97._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 0x6C6975626572205DLL;
  v98._object = (void *)0xEA00000000003C64;
  String.append(_:)(v98);
  v99._countAndFlagsBits = v124;
  v99._object = a6;
  String.append(_:)(v99);
  v100._object = (void *)0x80000001003B6BA0;
  v100._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v100);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100244130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v128 = a8;
  char v143 = a6;
  uint64_t v129 = a5;
  uint64_t v138 = a2;
  uint64_t v144 = a1;
  uint64_t v117 = type metadata accessor for RoutingControl.Target();
  uint64_t v11 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v116 = &v102[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v119 = type metadata accessor for RoutingControl();
  uint64_t v13 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  int v118 = &v102[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v140 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v140 - 8);
  uint64_t v16 = __chkstk_darwin(v140);
  unint64_t v115 = &v102[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  uint64_t v142 = &v102[-v18];
  uint64_t v19 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v121 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v114 = &v102[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  Swift::String v139 = &v102[-v22];
  uint64_t result = swift_beginAccess();
  uint64_t v145 = *(void *)(*(void *)(a4 + 32) + 16);
  if (v145 <= a3) {
    return result;
  }
  uint64_t v137 = (uint64_t (**)(unsigned char *, uint64_t))(v121 + 88);
  int v136 = enum case for RoutingInteraction.Action.add(_:);
  int v130 = enum case for RoutingInteraction.Action.remove(_:);
  int v122 = enum case for RoutingInteraction.Action.set(_:);
  int v120 = enum case for RoutingInteraction.Action.setActiveSession(_:);
  int v113 = enum case for RoutingInteraction.Action.setActiveItem(_:);
  int v112 = enum case for RoutingInteraction.Action.handoff(_:);
  uint64_t v135 = (void (**)(unsigned char *, uint64_t))(v121 + 96);
  int v111 = (void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16);
  int v110 = (uint64_t (**)(uint64_t, uint64_t))(v11 + 88);
  os_log_type_t v109 = (void (**)(unsigned char *, uint64_t))(v13 + 8);
  int v106 = (void (**)(uint64_t, uint64_t))(v11 + 8);
  int v105 = (void (**)(uint64_t, uint64_t))(v11 + 96);
  int v133 = (void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v134 = (void (**)(uint64_t, uint64_t))(v15 + 8);
  int v125 = &v147;
  int v108 = enum case for RoutingInteraction.Action.control(_:);
  int v107 = enum case for RoutingControl.Target.item(_:);
  uint64_t v123 = (char *)&type metadata for Any + 8;
  *(void *)&long long v24 = 136315906;
  long long v124 = v24;
  unint64_t v25 = a3;
  uint64_t v127 = v19;
  uint64_t v126 = a4;
  uint64_t v141 = a3;
  while ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v26 = *(void *)(a4 + 32);
    if (v25 >= *(void *)(v26 + 16)) {
      goto LABEL_43;
    }
    uint64_t v27 = *(void *)(v26 + 8 * v25 + 32);
    uint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 128);
    uint64_t v15 = *(void *)v27 + 128;
    uint64_t v29 = swift_retain();
    unint64_t v30 = v28(v29);
    if (v30) {
      goto LABEL_18;
    }
    uint64_t v15 = *(void *)(*(void *)v27 + 168);
    unint64_t v34 = v139;
    ((void (*)(void))v15)();
    int v35 = (*v137)(v34, v19);
    if (v35 == v136 || v35 == v130 || v35 == v122)
    {
      (*v135)(v34, v19);
      uint64_t v36 = v34;
      uint64_t v37 = *(void *)v34;
      uint64_t v38 = *((void *)v36 + 1);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v35 == v120)
      {
        swift_release();
        (*v135)(v34, v19);
        uint64_t result = swift_bridgeObjectRelease();
        a3 = v141;
        goto LABEL_20;
      }
      if (v35 == v113)
      {
        (*v135)(v34, v19);
        uint64_t v62 = v34;
        uint64_t v37 = *(void *)v34;
        uint64_t v38 = *((void *)v62 + 1);
      }
      else
      {
        if (v35 != v112)
        {
          if (v35 != v108) {
            goto LABEL_44;
          }
          (*v135)(v34, v19);
          uint64_t v64 = *(void *)v34;
          uint64_t v65 = swift_projectBox();
          uint64_t v66 = v118;
          uint64_t v67 = v119;
          (*v111)(v118, v65, v119);
          uint64_t v15 = (uint64_t)v116;
          RoutingControl.target.getter();
          uint64_t v68 = v117;
          int v69 = (*v110)(v15, v117);
          if (v69 != v107)
          {
            (*v109)(v66, v67);
            swift_release();
            (*v106)(v15, v68);
            uint64_t result = swift_release();
            a3 = v141;
            goto LABEL_20;
          }
          uint64_t v132 = v64;
          (*v105)(v15, v68);
          a3 = v141;
          if (*(void *)v15 == v144 && *(void *)(v15 + 8) == v138)
          {
            swift_bridgeObjectRelease();
            uint64_t v15 = (uint64_t)v115;
            goto LABEL_35;
          }
          char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v15 = (uint64_t)v115;
          if (v70)
          {
LABEL_35:
            uint64_t v71 = sub_1001A69C4();
            uint64_t v72 = v140;
            (*v133)(v15, v71, v140);
            swift_retain_n();
            swift_bridgeObjectRetain_n();
            swift_retain_n();
            char v73 = Logger.logObject.getter();
            os_log_type_t v74 = static os_log_type_t.info.getter();
            int v75 = v74;
            if (os_log_type_enabled(v73, v74))
            {
              uint64_t v15 = swift_slowAlloc();
              uint64_t v131 = swift_slowAlloc();
              uint64_t v148 = v131;
              *(_DWORD *)uint64_t v15 = v124;
              os_log_t v104 = v73;
              uint64_t v76 = _typeName(_:qualified:)();
              int v103 = v75;
              uint64_t v146 = sub_10018A9E0(v76, v77, &v148);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v15 + 12) = 2080;
              unint64_t v78 = (unint64_t)v143;
              swift_bridgeObjectRetain();
              uint64_t v146 = sub_10018A9E0(v129, v78, &v148);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v15 + 22) = 2080;
              uint64_t v79 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 152);
              uint64_t v80 = swift_retain();
              uint64_t v81 = v79(v80);
              unint64_t v83 = v82;
              swift_release();
              uint64_t v146 = sub_10018A9E0(v81, v83, &v148);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v15 + 32) = 2080;
              unint64_t v84 = *(uint64_t (**)(uint64_t))(*(void *)a7 + 152);
              uint64_t v85 = swift_retain();
              uint64_t v86 = v84(v85);
              a4 = v126;
              uint64_t v87 = v86;
              unint64_t v89 = v88;
              swift_release();
              uint64_t v146 = sub_10018A9E0(v87, v89, &v148);
              a3 = v141;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              uint64_t v19 = v127;
              swift_bridgeObjectRelease();
              os_log_t v90 = v104;
              _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v103, "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s", (uint8_t *)v15, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v134)((uint64_t)v115, v140);
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_release_n();
              swift_release_n();

              (*v134)(v15, v72);
            }
            (*v109)(v118, v119);
            uint64_t v91 = v27 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
            swift_beginAccess();
            unint64_t v92 = *(void *)v91;
            uint64_t v93 = *(void *)(v91 + 8);
            uint64_t v94 = *(void *)(v91 + 16);
            *(void *)(v91 + 8) = 0;
            *(void *)(v91 + 16) = 0;
            *(void *)uint64_t v91 = 2;
            unsigned __int8 v95 = *(unsigned char *)(v91 + 24);
            *(unsigned char *)(v91 + 24) = 0;
            sub_1001E5894(v92, v93, v94, v95);
          }
          else
          {
            (*v109)(v118, v119);
          }
          swift_release();
          goto LABEL_19;
        }
        (*v135)(v34, v19);
        uint64_t v63 = *(void *)v34;
        uint64_t v37 = *(void *)(*(void *)v34 + 32);
        uint64_t v38 = *(void *)(v63 + 40);
        swift_bridgeObjectRetain();
        swift_release();
      }
    }
    a3 = v141;
    uint64_t v15 = (uint64_t)v142;
    if (v37 == v144 && v38 == v138)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v40 = sub_1001A69C4();
      uint64_t v41 = v140;
      (*v133)(v15, v40, v140);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v42 = v15;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      int v44 = v43;
      if (os_log_type_enabled((os_log_t)v15, v43))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v132 = swift_slowAlloc();
        uint64_t v148 = v132;
        *(_DWORD *)uint64_t v45 = v124;
        uint64_t v46 = _typeName(_:qualified:)();
        uint64_t v47 = a7;
        uint64_t v146 = sub_10018A9E0(v46, v48, &v148);
        LODWORD(v131) = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2080;
        unint64_t v49 = (unint64_t)v143;
        swift_bridgeObjectRetain();
        uint64_t v146 = sub_10018A9E0(v129, v49, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v45 + 22) = 2080;
        uint64_t v50 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 152);
        uint64_t v51 = swift_retain();
        uint64_t v52 = v50(v51);
        unint64_t v54 = v53;
        swift_release();
        uint64_t v146 = sub_10018A9E0(v52, v54, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 32) = 2080;
        uint64_t v55 = *(uint64_t (**)(uint64_t))(*(void *)a7 + 152);
        uint64_t v56 = swift_retain();
        uint64_t v57 = v55(v56);
        a3 = v141;
        uint64_t v58 = v57;
        unint64_t v60 = v59;
        swift_release();
        uint64_t v146 = sub_10018A9E0(v58, v60, &v148);
        uint64_t v19 = v127;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        a7 = v47;
        a4 = v126;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v15, (os_log_type_t)v131, "[%s] rebuild<%s> - cancel event: %s as per resolution of failed event: %s", (uint8_t *)v45, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*v134)((uint64_t)v142, v140);
      }
      else
      {

        swift_release_n();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        (*v134)(v42, v41);
      }
      uint64_t v61 = v27 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_state;
      swift_beginAccess();
      unint64_t v30 = *(void *)v61;
      uint64_t v31 = *(void *)(v61 + 8);
      uint64_t v32 = *(void *)(v61 + 16);
      *(void *)(v61 + 8) = 0;
      *(void *)(v61 + 16) = 0;
      *(void *)uint64_t v61 = 2;
      unsigned __int8 v33 = *(unsigned char *)(v61 + 24);
      *(unsigned char *)(v61 + 24) = 0;
LABEL_18:
      sub_1001E5894(v30, v31, v32, v33);
      goto LABEL_19;
    }
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_14;
    }
LABEL_19:
    uint64_t result = swift_release();
LABEL_20:
    if (v145 == ++v25) {
      return result;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t v148 = 0;
  unint64_t v149 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  uint64_t v148 = 91;
  unint64_t v149 = 0xE100000000000000;
  v96._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 0x6C6975626572205DLL;
  v97._object = (void *)0xEA00000000003C64;
  String.append(_:)(v97);
  v98._countAndFlagsBits = v129;
  v98._object = v143;
  String.append(_:)(v98);
  v99._object = (void *)0x80000001003B6B80;
  v99._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v99);
  Swift::String v100 = v114;
  ((void (*)(void))v15)();
  sub_1002478D4(&qword_100477FF0, (void (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action);
  v101._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v121 + 8))(v100, v19);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10024521C()
{
  uint64_t v2 = v0;
  uint64_t v3 = (unint64_t *)(v0 + 40);
  swift_beginAccess();
  unint64_t v4 = *(void *)(v2 + 40);
  if (v4 >> 62) {
    goto LABEL_74;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    if (*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      unint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      unint64_t v1 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    swift_release();
    swift_unknownObjectRelease();
    if (!Strong) {
      break;
    }
    uint64_t v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_3;
    }
    ++v6;
    if (v8 == v5) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v1 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_85;
  }
  if (*v3 >> 62) {
    goto LABEL_86;
  }
  if (v1 != *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    uint64_t v15 = v6 + 5;
    while (1)
    {
      unint64_t v4 = v15 - 4;
      if ((*v3 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_64;
        }
        if (v4 >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_65;
        }
        swift_retain();
      }
      unint64_t v1 = swift_unknownObjectWeakLoadStrong();
      swift_release();
      swift_unknownObjectRelease();
      if (!v1) {
        goto LABEL_54;
      }
      if (v4 != v6) {
        break;
      }
LABEL_53:
      if (__OFADD__(v6++, 1)) {
        goto LABEL_67;
      }
LABEL_54:
      unint64_t v1 = v15 - 3;
      if (__OFADD__(v4, 1)) {
        goto LABEL_66;
      }
      if (*v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v15;
      if (v1 == v21) {
        goto LABEL_12;
      }
    }
    unint64_t v1 = *v3;
    if ((*v3 & 0xC000000000000001) != 0)
    {
      uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v1 = *v3;
      if ((*v3 & 0xC000000000000001) == 0)
      {
LABEL_39:
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        if (v4 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_71;
        }
        uint64_t v17 = *(void *)(v1 + 8 * v15);
        swift_retain();
        goto LABEL_42;
      }
    }
    else
    {
      if (v6 < 0) {
        goto LABEL_68;
      }
      if ((unint64_t)v6 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_69;
      }
      uint64_t v16 = *(void *)(v1 + 8 * v6 + 32);
      swift_retain();
      if ((v1 & 0xC000000000000001) == 0) {
        goto LABEL_39;
      }
    }
    uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v1 = *v3;
LABEL_42:
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v3 = v1;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v1 & 0x8000000000000000) != 0
      || (v1 & 0x4000000000000000) != 0)
    {
      unint64_t v1 = sub_1001E1378(v1);
      *uint64_t v3 = v1;
    }
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v17;
    swift_release();
    specialized Array._endMutation()();
    unint64_t v1 = *v3;
    int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v3 = v1;
    if (!v19 || (v1 & 0x8000000000000000) != 0 || (v1 & 0x4000000000000000) != 0)
    {
      unint64_t v1 = sub_1001E1378(v1);
      *uint64_t v3 = v1;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_72;
    }
    if (v4 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_73;
    }
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v15) = v16;
    swift_release();
    specialized Array._endMutation()();
    goto LABEL_53;
  }
  while (1)
  {
LABEL_12:
    if (*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 < v6)
      {
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9 < v6) {
        goto LABEL_77;
      }
    }
    sub_100247458(v6, v9);
    swift_endAccess();
    uint64_t v6 = *v3;
    if (!(*v3 >> 62))
    {
      uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v10) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
LABEL_78:
    if (v6 < 0) {
      uint64_t v3 = (unint64_t *)v6;
    }
    else {
      uint64_t v3 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (!v10) {
      return swift_bridgeObjectRelease();
    }
LABEL_16:
    if (v10 >= 1) {
      break;
    }
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v1 != v23) {
      goto LABEL_28;
    }
  }
  for (uint64_t i = 0; i != v10; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v14 = *(void *)(v6 + 8 * i + 32);
      swift_retain();
    }
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v12 = *(void *)(v14 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v2, ObjectType, v12);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100245734()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *sub_10024578C()
{
  uint64_t v0 = (void *)swift_allocObject();
  unint64_t v1 = sub_100266CC0();
  uint64_t v2 = (void *)*v1;
  v0[2] = *v1;
  id v3 = v2;
  unint64_t v4 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0) {
    unint64_t v4 = sub_100245904((unint64_t)_swiftEmptyArrayStorage);
  }
  v0[3] = 0;
  v0[4] = v4;
  v0[5] = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t sub_1002457FC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

unint64_t sub_100245840()
{
  _StringGuts.grow(_:)(19);
  uint64_t v1 = swift_bridgeObjectRelease();
  v2._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192))(v1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

unint64_t sub_1002458E0()
{
  return sub_100245840();
}

void *sub_100245904(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      id v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100013A80(&qword_100478380);
      id v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100246B9C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_1002459FC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v3 + 32;
  uint64_t v6 = *(void *)(v3 + 16);
  if (*v1)
  {
    swift_retain();
    sub_100245FF4(a1, v5, v6, (void *)(v4 + 16), v4 + 32);
    char v8 = v7;
    swift_release();
    if (v8) {
      goto LABEL_6;
    }
    return 0;
  }
  sub_100245E58(a1, v3 + 32, *(void *)(v3 + 16));
  if ((v9 & 1) == 0) {
    return 0;
  }
LABEL_6:
  sub_100245ACC();
  return 1;
}

uint64_t sub_100245ACC()
{
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t result = specialized ContiguousArray._endMutation()();
  uint64_t v2 = *(void *)(v0[1] + 16);
  if (*v0)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() >= v2)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v3 = *v0;
      if (!result)
      {
        if (!v3)
        {
LABEL_12:
          __break(1u);
          return result;
        }
        uint64_t v3 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v0 = v3;
      }
      if (v3) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_12;
    }
  }
  else if ((unint64_t)v2 < 0x10)
  {
    return result;
  }
  return sub_100245BF8();
}

uint64_t sub_100245BF8()
{
  uint64_t v1 = *v0;
  Swift::Int v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = static _HashTable.scale(forCapacity:)();
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = sub_100245C9C(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  *uint64_t v0 = v5;
  return result;
}

uint64_t sub_100245C9C(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = static _HashTable.scale(forCapacity:)();
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = _HashTable.init(scale:reservedScale:)();
    sub_100245D24(a1, (void *)(v9 + 16), v9 + 32);
  }
  return v9;
}

Swift::Int sub_100245D24(Swift::Int result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = 0;
    Swift::Int v7 = result + 32;
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      Hasher.init(_seed:)();
      uint64_t v9 = *(void (**)(void *))(*(void *)v8 + 192);
      swift_retain();
      v9(v19);
      uint64_t result = Hasher._finalize()();
      uint64_t v10 = 1 << *a2;
      BOOL v11 = __OFSUB__(v10, 1);
      uint64_t v12 = v10 - 1;
      if (v11) {
        break;
      }
      Swift::Int v13 = v12 & result;
      uint64_t v14 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      swift_release();
      v19[0] = a2;
      v19[1] = a3;
      void v19[2] = v13;
      uint64_t v20 = v14;
      uint64_t v21 = v16;
      uint64_t v22 = v18;
      char v23 = 0;
      while (v20)
        _HashTable.BucketIterator.advance()();
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v6 == v3) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100245E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + 8 * v6);
      swift_retain();
      if (j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ()) {
        break;
      }
      swift_release();
LABEL_4:
      if (v3 == ++v6) {
        return 0;
      }
    }
    uint64_t v8 = a2;
    unint64_t v9 = (*(uint64_t (**)(void))(*(void *)v7 + 128))();
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unsigned __int8 v15 = v14;
    unint64_t v16 = (*(uint64_t (**)(void))(*(void *)a1 + 128))();
    unint64_t v20 = v16;
    if (v9)
    {
      if (v9 == 1)
      {
        if (v16 == 1) {
          goto LABEL_18;
        }
      }
      else
      {
        if (v9 != 2)
        {
          sub_1001E5894(v16, v17, v18, v19);
          sub_1001E5894(v9, v11, v13, v15);
          if (v20 >= 3)
          {
LABEL_18:
            swift_release();
            return v6;
          }
          goto LABEL_16;
        }
        if (v16 == 2) {
          goto LABEL_18;
        }
      }
    }
    else if (!v16)
    {
      goto LABEL_18;
    }
    sub_1001E5894(v16, v17, v18, v19);
LABEL_16:
    swift_release();
    a2 = v8;
    uint64_t v3 = a3;
    goto LABEL_4;
  }
  return 0;
}

Swift::Int sub_100245FF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  Hasher.init(_seed:)();
  uint64_t v34 = a1;
  (*(void (**)(long long *))(*(void *)a1 + 192))(&v39);
  Swift::Int result = Hasher._finalize()();
  uint64_t v10 = 1 << *a4;
  BOOL v11 = __OFSUB__(v10, 1);
  uint64_t v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    return result;
  }
  Swift::Int v13 = v12 & result;
  uint64_t v14 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  *(void *)&long long v39 = a4;
  *((void *)&v39 + 1) = a5;
  *(void *)&long long v40 = v13;
  *((void *)&v40 + 1) = v14;
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  char v42 = 0;
  uint64_t v17 = _HashTable.BucketIterator.currentValue.getter();
  long long v35 = v39;
  long long v36 = v40;
  long long v37 = v41;
  char v38 = v42;
  if (v18) {
    return v17;
  }
  while (1)
  {
    uint64_t v20 = *(void *)(a2 + 8 * v17);
    swift_retain();
    if (j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ()) {
      break;
    }
    swift_release();
LABEL_5:
    _HashTable.BucketIterator.advance()();
    long long v43 = v35;
    long long v44 = v36;
    long long v45 = v37;
    char v46 = v38;
    uint64_t v17 = _HashTable.BucketIterator.currentValue.getter();
    if (v19) {
      return v17;
    }
  }
  uint64_t v21 = a2;
  unint64_t v22 = (*(uint64_t (**)(void))(*(void *)v20 + 128))();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  unsigned __int8 v28 = v27;
  unint64_t v29 = (*(uint64_t (**)(void))(*(void *)v34 + 128))();
  unint64_t v33 = v29;
  switch(v22)
  {
    case 0uLL:
      if (!v29) {
        goto LABEL_19;
      }
      goto LABEL_15;
    case 1uLL:
      if (v29 == 1) {
        goto LABEL_19;
      }
      goto LABEL_15;
    case 2uLL:
      if (v29 == 2) {
        goto LABEL_19;
      }
LABEL_15:
      sub_1001E5894(v29, v30, v31, v32);
LABEL_17:
      swift_release();
      a2 = v21;
      goto LABEL_5;
  }
  sub_1001E5894(v29, v30, v31, v32);
  sub_1001E5894(v22, v24, v26, v28);
  if (v33 < 3) {
    goto LABEL_17;
  }
LABEL_19:
  swift_release();
  return v17;
}

unint64_t sub_100246268(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  uint64_t v5 = *v2;
  if (!*v2)
  {
    if (v4) {
      return sub_1002463DC(a1);
    }
    goto LABEL_15;
  }
  swift_beginAccess();
  if ((*(void *)(v5 + 16) & 0x3FLL) == (*(void *)(v5 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_15:
    uint64_t v10 = sub_1002463DC(a1);
    sub_100245BF8();
    return v10;
  }
  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v8 = *v2;
  if (!result)
  {
    if (!v8) {
      goto LABEL_20;
    }
    uint64_t v8 = _HashTable.copy()();
    unint64_t result = swift_release();
    *Swift::Int v2 = v8;
  }
  if (v8)
  {
    swift_retain();
    unint64_t result = sub_1002464B4(a2, (void *)(v8 + 16), v8 + 32, (uint64_t)v2);
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (a1 + 1 >= a1)
    {
      uint64_t v9 = v2[1];
      swift_retain();
      sub_1002466B4(a1, a1 + 1, v9, (void *)(v8 + 16), v8 + 32);
      swift_release();
      swift_release();
      return sub_1002463DC(a1);
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1002463DC(unint64_t a1)
{
  uint64_t v3 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_100014674(v3);
    uint64_t *v1 = v3;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    if (v7 >= 0)
    {
      uint64_t v8 = v3 + 8 * a1;
      uint64_t v9 = *(void *)(v8 + 32);
      memmove((void *)(v8 + 32), (const void *)(v8 + 40), 8 * v7);
      *(void *)(v3 + 16) = v6;
      specialized ContiguousArray._endMutation()();
      return v9;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1002464B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  *(void *)&long long v26 = a2;
  *((void *)&v26 + 1) = a3;
  uint64_t v27 = a1;
  uint64_t v28 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  char v31 = 0;
  _HashTable.BucketIterator.advance()();
  uint64_t v9 = v28;
  if (v28)
  {
    char v10 = v31;
    uint64_t v11 = v29;
    uint64_t v12 = v30;
    uint64_t v13 = v27;
    uint64_t v14 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
    long long v15 = v26;
    uint64_t v16 = v14;
    do
    {
      long long v32 = v15;
      uint64_t v33 = v13;
      uint64_t v34 = v9;
      uint64_t v35 = v11;
      uint64_t v36 = v12;
      char v37 = v10 & 1;
      unint64_t result = _HashTable.BucketIterator.currentValue.getter();
      if (v18)
      {
LABEL_20:
        __break(1u);
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      uint64_t v19 = *(void *)(a4 + 8);
      if (result >= *(void *)(v19 + 16)) {
        goto LABEL_18;
      }
      uint64_t v20 = *(void *)(v19 + 8 * result + 32);
      Hasher.init(_seed:)();
      uint64_t v21 = *(void (**)(char *))(*(void *)v20 + 192);
      swift_retain();
      v21(v25);
      Swift::Int v22 = Hasher._finalize()();
      unint64_t result = swift_release();
      uint64_t v23 = 1 << *a2;
      if (__OFSUB__(v23, 1)) {
        goto LABEL_19;
      }
      uint64_t v24 = (v23 - 1) & v22;
      if (v6 >= v16)
      {
        if (v24 < v16) {
          goto LABEL_3;
        }
      }
      else if (v24 >= v16)
      {
        goto LABEL_13;
      }
      if (v6 >= v24)
      {
LABEL_13:
        _HashTable.BucketIterator.currentValue.getter();
        _HashTable.UnsafeHandle.subscript.setter();
        uint64_t v6 = v13;
      }
LABEL_3:
      _HashTable.BucketIterator.advance()();
      long long v15 = v26;
      uint64_t v13 = v27;
      uint64_t v9 = v28;
      uint64_t v11 = v29;
      uint64_t v12 = v30;
      char v10 = v31;
    }
    while (v28);
  }

  return _HashTable.UnsafeHandle.subscript.setter();
}

void sub_1002466B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v6 >= 1)
  {
    unint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = v11 - v6;
    if ((uint64_t)v11 < v6) {
      ++v12;
    }
    if (a1 < v12 >> 1)
    {
      if (static _HashTable.maximumCapacity(forScale:)() / 3 > a1)
      {
        if (a1 < 0)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v11 < a1)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        if (a1)
        {
          uint64_t v13 = a3 + 32;
          swift_retain();
          uint64_t v14 = 0;
          while (1)
          {
            uint64_t v15 = *(void *)(v13 + 8 * v14);
            Hasher.init(_seed:)();
            uint64_t v16 = *(void (**)(long long *))(*(void *)v15 + 192);
            swift_retain();
            v16(&v57);
            Swift::Int v17 = Hasher._finalize()();
            uint64_t v18 = 1 << *a4;
            BOOL v19 = __OFSUB__(v18, 1);
            uint64_t v20 = v18 - 1;
            if (v19) {
              break;
            }
            Swift::Int v21 = v20 & v17;
            uint64_t v22 = _HashTable.UnsafeHandle._startIterator(bucket:)();
            *(void *)&long long v57 = a4;
            *((void *)&v57 + 1) = a5;
            Swift::Int v58 = v21;
            *(void *)&long long v59 = v22;
            *((void *)&v59 + 1) = v23;
            uint64_t v60 = v24;
            char v61 = 0;
            if (v22)
            {
              char v25 = 0;
              long long v26 = a4;
              uint64_t v27 = a5;
              do
              {
                *(void *)&long long v62 = v26;
                *((void *)&v62 + 1) = v27;
                Swift::Int v63 = v21;
                *(void *)&long long v64 = v22;
                *((void *)&v64 + 1) = v23;
                uint64_t v65 = v24;
                char v66 = v25 & 1;
                uint64_t v28 = _HashTable.BucketIterator.currentValue.getter();
                if ((v29 & 1) == 0 && v28 == v14) {
                  break;
                }
                _HashTable.BucketIterator.advance()();
                uint64_t v27 = *((void *)&v57 + 1);
                long long v26 = (void *)v57;
                Swift::Int v21 = v58;
                uint64_t v23 = *((void *)&v59 + 1);
                uint64_t v22 = v59;
                uint64_t v24 = v60;
                char v25 = v61;
              }
              while ((void)v59);
            }
            if (__OFADD__(v14, v6)) {
              goto LABEL_58;
            }
            ++v14;
            _HashTable.BucketIterator.currentValue.setter();
            swift_release();
            if (v14 == a1)
            {
              swift_release();
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        goto LABEL_20;
      }
      *(void *)&long long v62 = a4;
      *((void *)&v62 + 1) = a5;
      Swift::Int v63 = 0;
      *(void *)&long long v64 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((void *)&v64 + 1) = v34;
      uint64_t v65 = v35;
      char v66 = 0;
      long long v57 = v62;
      Swift::Int v58 = 0;
      long long v59 = v64;
      uint64_t v60 = v65;
      char v61 = v66;
      uint64_t v36 = _HashTable.BucketIterator.currentValue.getter();
      if ((v37 & 1) != 0 || v36 >= a1)
      {
LABEL_32:
        _HashTable.BucketIterator.advance()();
LABEL_20:
        uint64_t v30 = a4[1];
        if (__OFSUB__(v30 >> 6, v6))
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v31 = 1 << *a4;
        BOOL v19 = __OFSUB__(v31, 1);
        uint64_t v32 = v31 - 1;
        if (v19)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        uint64_t v33 = (v32 & (((v30 >> 6) - v6) >> 63)) + (v30 >> 6) - v6;
        if (v33 < v32) {
          uint64_t v32 = 0;
        }
        a4[1] = a4[1] & 0x3FLL | ((v33 - v32) << 6);
        return;
      }
      if (!__OFADD__(v36, v6))
      {
        _HashTable.BucketIterator.currentValue.setter();
        goto LABEL_32;
      }
      __break(1u);
LABEL_38:
      *(void *)&long long v62 = a4;
      *((void *)&v62 + 1) = a5;
      Swift::Int v63 = 0;
      *(void *)&long long v64 = _HashTable.UnsafeHandle._startIterator(bucket:)();
      *((void *)&v64 + 1) = v38;
      uint64_t v65 = v39;
      char v66 = 0;
      long long v57 = v62;
      Swift::Int v58 = 0;
      long long v59 = v64;
      uint64_t v60 = v65;
      char v61 = v66;
      uint64_t v40 = _HashTable.BucketIterator.currentValue.getter();
      if ((v41 & 1) == 0 && v40 >= v5)
      {
        if (__OFSUB__(v40, v6))
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        _HashTable.BucketIterator.currentValue.setter();
      }
      _HashTable.BucketIterator.advance()();
      return;
    }
    uint64_t v5 = a2;
    if (__OFSUB__(v11, a2))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if ((uint64_t)(v11 - a2) >= static _HashTable.maximumCapacity(forScale:)() / 3) {
      goto LABEL_38;
    }
    if ((uint64_t)v11 < v5)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v5 < 0)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v11 != v5)
    {
      if (v11 <= v5)
      {
LABEL_70:
        __break(1u);
        return;
      }
      uint64_t v42 = a3 + 32;
      swift_retain();
      while (1)
      {
        uint64_t v43 = *(void *)(v42 + 8 * v5);
        Hasher.init(_seed:)();
        long long v44 = *(void (**)(long long *))(*(void *)v43 + 192);
        swift_retain();
        v44(&v57);
        Swift::Int v45 = Hasher._finalize()();
        uint64_t v46 = 1 << *a4;
        BOOL v19 = __OFSUB__(v46, 1);
        uint64_t v47 = v46 - 1;
        if (v19) {
          goto LABEL_60;
        }
        Swift::Int v48 = v47 & v45;
        uint64_t v49 = _HashTable.UnsafeHandle._startIterator(bucket:)();
        *(void *)&long long v57 = a4;
        *((void *)&v57 + 1) = a5;
        Swift::Int v58 = v48;
        *(void *)&long long v59 = v49;
        *((void *)&v59 + 1) = v50;
        uint64_t v60 = v51;
        char v61 = 0;
        if (v49)
        {
          char v52 = 0;
          unint64_t v53 = a4;
          uint64_t v54 = a5;
          do
          {
            *(void *)&long long v62 = v53;
            *((void *)&v62 + 1) = v54;
            Swift::Int v63 = v48;
            *(void *)&long long v64 = v49;
            *((void *)&v64 + 1) = v50;
            uint64_t v65 = v51;
            char v66 = v52 & 1;
            uint64_t v55 = _HashTable.BucketIterator.currentValue.getter();
            if ((v56 & 1) == 0 && v55 == v5) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            uint64_t v54 = *((void *)&v57 + 1);
            unint64_t v53 = (void *)v57;
            Swift::Int v48 = v58;
            uint64_t v50 = *((void *)&v59 + 1);
            uint64_t v49 = v59;
            uint64_t v51 = v60;
            char v52 = v61;
          }
          while ((void)v59);
        }
        if (__OFSUB__(v5, v6)) {
          goto LABEL_61;
        }
        ++v5;
        _HashTable.BucketIterator.currentValue.setter();
        swift_release();
        if (v5 == v11)
        {
          swift_release();
          return;
        }
      }
    }
  }
}

uint64_t sub_100246B9C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000155BC(&qword_10047A698, &qword_10047A690);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100013A80(&qword_10047A690);
          uint64_t v12 = sub_100246DC0(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for RoutingTimeline.Event();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_100246DC0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100246E70(v6, a2, a3);
  return sub_100246E28;
}

void sub_100246E28(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100246E70(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_100246EF0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100246EF0()
{
  return swift_release();
}

uint64_t sub_100246EF8(uint64_t a1, uint64_t a2)
{
  if ((j___s12MediaControl18RoutingInteractionV2eeoiySbAC_ACtFZ() & 1) == 0) {
    return 0;
  }
  unint64_t v4 = (*(uint64_t (**)(void))(*(void *)a1 + 128))();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unsigned __int8 v10 = v9;
  unint64_t v11 = (*(uint64_t (**)(void))(*(void *)a2 + 128))();
  if (v4)
  {
    if (v4 != 1)
    {
      if (v4 != 2)
      {
        BOOL v15 = v11 > 2;
        sub_1001E5894(v11, v12, v13, v14);
        sub_1001E5894(v4, v6, v8, v10);
        return v15;
      }
      if (v11 == 2) {
        return 1;
      }
      goto LABEL_8;
    }
    if (v11 != 1)
    {
LABEL_8:
      sub_1001E5894(v11, v12, v13, v14);
      return 0;
    }
  }
  else if (v11)
  {
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_100247004(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RoutingTimeline.Observer()
{
  return self;
}

uint64_t sub_100247084(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  if (*a1 >> 62) {
    goto LABEL_64;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v5)
  {
LABEL_3:
    unint64_t v6 = 0;
    while (1)
    {
      if ((v4 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      swift_release();
      if (Strong)
      {
        swift_unknownObjectRelease();
        if (Strong == a2) {
          break;
        }
      }
      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        if (!v5) {
          goto LABEL_11;
        }
        goto LABEL_3;
      }
      ++v6;
      if (v8 == v5) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else if (!(*a1 >> 62))
    {
      if (v11 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_17:
        for (unint64_t i = v6 + 5; ; ++i)
        {
          unint64_t v4 = i - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v4 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (v4 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            swift_retain();
          }
          uint64_t v13 = swift_unknownObjectWeakLoadStrong();
          swift_release();
          if (v13)
          {
            swift_unknownObjectRelease();
            if (v13 == a2) {
              goto LABEL_44;
            }
          }
          if (v4 != v6) {
            break;
          }
LABEL_43:
          if (__OFADD__(v6++, 1)) {
            goto LABEL_57;
          }
LABEL_44:
          unint64_t v21 = i - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_56;
          }
          if (*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v22 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v21 == v22) {
            return v6;
          }
        }
        unint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v14 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_29:
            if ((v4 & 0x8000000000000000) != 0) {
              goto LABEL_60;
            }
            if (v4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_61;
            }
            uint64_t v16 = *(void *)(v14 + 8 * i);
            swift_retain();
            goto LABEL_32;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_58;
          }
          if (v6 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_59;
          }
          uint64_t v15 = *(void *)(v14 + 8 * v6 + 32);
          swift_retain();
          if ((v14 & 0xC000000000000001) == 0) {
            goto LABEL_29;
          }
        }
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v14 = *a1;
LABEL_32:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v14;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v14 & 0x8000000000000000) != 0
          || (v14 & 0x4000000000000000) != 0)
        {
          unint64_t v14 = sub_1001E1378(v14);
          *a1 = v14;
        }
        *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v16;
        swift_release();
        specialized Array._endMutation()();
        unint64_t v18 = *a1;
        int v19 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v18;
        if (!v19 || (v18 & 0x8000000000000000) != 0 || (v18 & 0x4000000000000000) != 0)
        {
          unint64_t v18 = sub_1001E1378(v18);
          *a1 = v18;
        }
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_62;
        }
        if (v4 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_63;
        }
        *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v15;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_43;
      }
      return v6;
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11 != v24) {
      goto LABEL_17;
    }
    return v6;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  unint64_t v9 = *a1;
  if (!(v9 >> 62)) {
    return *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100247458(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for RoutingTimeline.Observer();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t type metadata accessor for RoutingTimeline.Event()
{
  uint64_t result = qword_1004805E0;
  if (!qword_1004805E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002477AC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002477E4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100247824(uint64_t a1)
{
  return sub_1002414EC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10024782C(uint64_t a1)
{
  uint64_t v2 = sub_100013A80((uint64_t *)&unk_10047BC50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10024788C()
{
  return sub_1002478D4(&qword_10047A380, (void (*)(uint64_t))type metadata accessor for RoutingTimeline.Event);
}

uint64_t sub_1002478D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for RoutingTimeline()
{
  return self;
}

uint64_t sub_100247940()
{
  return type metadata accessor for RoutingTimeline.Event();
}

uint64_t sub_100247948()
{
  uint64_t result = type metadata accessor for RoutingEvent();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t destroy for RoutingTimeline.Event.State(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_errorRelease();
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 16);
    unsigned __int8 v5 = *(unsigned char *)(a1 + 24);
    return sub_1001859D4(v3, v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for RoutingTimeline.Event.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)((char *)a2 + 9);
  }
  else
  {
    swift_errorRetain();
    *(void *)a1 = v4;
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    unsigned __int8 v7 = *((unsigned char *)a2 + 24);
    sub_100185894(v5, v6, v7);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for RoutingTimeline.Event.State(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      swift_errorRetain();
      *(void *)a1 = v4;
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v12 = *((void *)a2 + 2);
      unsigned __int8 v13 = *((unsigned char *)a2 + 24);
      sub_100185894(v11, v12, v13);
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v12;
      *(unsigned char *)(a1 + 24) = v13;
      return a1;
    }
LABEL_7:
    long long v14 = *a2;
    *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
    *(_OWORD *)a1 = v14;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease();
    sub_1001859D4(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
    goto LABEL_7;
  }
  swift_errorRetain();
  *(void *)a1 = v4;
  swift_errorRelease();
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a2 + 2);
  unsigned __int8 v7 = *((unsigned char *)a2 + 24);
  sub_100185894(v5, v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7;
  sub_1001859D4(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for RoutingTimeline.Event.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_errorRelease();
    sub_1001859D4(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_errorRelease();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1001859D4(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingTimeline.Event.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 25)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RoutingTimeline.Event.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_100247CF8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100247D10(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RoutingTimeline.Event.State()
{
  return &type metadata for RoutingTimeline.Event.State;
}

uint64_t sub_100247D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t result = a6();
  if (v6)
  {
    sub_100247DFC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_100247E3C(a1, a2, a3, a4, a5, v6);
    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

unint64_t sub_100247DFC()
{
  unint64_t result = qword_10047A198;
  if (!qword_10047A198)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_10047A198);
  }
  return result;
}

id sub_100247E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = &_swiftEmptyDictionarySingleton;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (a5)
  {
    uint64_t v33 = &type metadata for String;
    *(void *)&long long v32 = a4;
    *((void *)&v32 + 1) = a5;
    sub_10018FF5C(&v32, v29);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = (void *)0x8000000000000000;
    sub_1002490A8(v29, v12, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v34 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100248ACC(v10, v11, &v32);
    swift_bridgeObjectRelease();
    sub_100194AE4((uint64_t)&v32);
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  if (a6)
  {
    swift_getErrorValue();
    uint64_t v19 = v30;
    uint64_t v20 = v31;
    uint64_t v33 = v31;
    uint64_t v21 = sub_1001922CC((uint64_t *)&v32);
    (*(void (**)(uint64_t *, uint64_t, void *))(*(v20 - 1) + 16))(v21, v19, v20);
    sub_10018FF5C(&v32, v29);
    uint64_t v22 = v34;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v34 = (void *)0x8000000000000000;
    sub_1002490A8(v29, v17, v18, v23);
    uint64_t v34 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100248ACC(v15, v16, &v32);
    swift_bridgeObjectRelease();
    sub_100194AE4((uint64_t)&v32);
  }
  id v24 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = [v24 initWithDomain:v25 code:a3 userInfo:isa];
  swift_errorRelease();

  return v27;
}

uint64_t sub_1002480CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  v7[5] = a5;
  v7[6] = a6;
  v7[3] = a3;
  v7[4] = a4;
  v7[2] = a2;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)a7 + *a7);
  uint64_t v9 = (void *)swift_task_alloc();
  v7[7] = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1002481B8;
  return v11(a1);
}

uint64_t sub_1002481B8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002482EC, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1002482EC()
{
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v6 = v0[2];
  sub_100247DFC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  sub_100247E3C(v6, v5, v4, v3, v2, v1);
  swift_willThrow();
  swift_errorRelease();
  unsigned __int8 v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002483C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100247DFC();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  uint64_t v13 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  sub_100247E3C(v11, v13, v17, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_dynamicCast();
}

uint64_t sub_100248514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 24))(a6, a8);
  uint64_t v10 = v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  sub_100247D44(v8, v10, v14, a2, a3, sub_1002491FC);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100248640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = a8;
  v8[11] = v10;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  v8[4] = a2;
  v8[5] = a3;
  v8[3] = a1;
  return _swift_task_switch(sub_100248678, 0, 0);
}

uint64_t sub_100248678()
{
  uint64_t v1 = *(void *)(v0 + 88);
  long long v11 = *(_OWORD *)(v0 + 72);
  long long v12 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(v1 + 24))(*(void *)(v0 + 72), v1);
  uint64_t v4 = v3;
  *(void *)(v0 + 96) = v3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 104) = v6;
  *(_OWORD *)(v6 + 16) = v11;
  *(void *)(v6 + 32) = v1;
  *(_OWORD *)(v6 + 40) = v12;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *(void *)uint64_t v7 = v0;
  *(void *)(v7 + 8) = sub_100248860;
  uint64_t v8 = *(void *)(v0 + 24);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v0 + 40);
  *(void *)(v7 + 24) = v4;
  *(void *)(v7 + 32) = v5;
  *(void *)(v7 + 16) = v2;
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&dword_10047A6B8 + dword_10047A6B8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v7 + 56) = v9;
  *uint64_t v9 = v7;
  v9[1] = sub_1002481B8;
  return v13(v8);
}

uint64_t sub_100248860()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002489D8, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1002489D8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002489F0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10000D170;
  return v6(a1);
}

double sub_100248ACC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100013660(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100249444();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10018FF5C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_100248ED0(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_100248BD0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80((uint64_t *)&unk_10047B7F0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      id v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10018FF5C(v24, v35);
      }
      else
      {
        sub_10018FDAC((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10018FF5C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_100248ED0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1002490A8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100249444();
      goto LABEL_7;
    }
    sub_100248BD0(v15, a4 & 1);
    unint64_t v21 = sub_100013660(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10018FD5C((uint64_t)v19);
    return sub_10018FF5C(a1, v19);
  }
LABEL_13:
  sub_1002493D8(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_1002491FC()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_100249224(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10000D170;
  unint64_t v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  unint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *unint64_t v6 = v5;
  v6[1] = sub_10000D170;
  return v8(a1);
}

uint64_t sub_100249348()
{
  return sub_100249390((unint64_t *)&unk_100478870, type metadata accessor for Code);
}

uint64_t sub_100249390(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_1002493D8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10018FF5C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100249444()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_10047B7F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10018FDAC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10018FF5C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10024962C()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void **)(v0 + 16);
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_100249674()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void **)(v0 + 24);
  }
  else
  {
    uint64_t v1 = &_swiftEmptySetSingleton;
    *(void *)(v0 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *sub_1002496BC()
{
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = *(void **)(v0 + 48);
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 48) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

double sub_100249704(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = a1;
  return result;
}

uint64_t sub_100249740(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v3 + 56);
  *int64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    swift_bridgeObjectRetain();
    if (*((void *)sub_10024962C() + 2) && (sub_100013660(a1, a2), (v12 & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_1001E78B8();
      uint64_t v15 = v14;
      uint64_t v16 = sub_10024962C();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = v16;
      sub_10022CE28(v13, v15, a1, a2, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v25;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v3 + 16) = v18;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10024962C();
    if (v19[2])
    {
      unint64_t v20 = sub_100013660(a1, a2);
      if (v21)
      {
        uint64_t v22 = *(void *)(v19[7] + 16 * v20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v22;
      }
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10024997C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 56);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    uint64_t v10 = sub_1002496BC();
    if (v10[2] && (unint64_t v11 = sub_1001B5DEC(a1), (v12 & 1) != 0))
    {
      uint64_t v13 = *(void *)(v10[7] + 16 * v11);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = 0;
    }
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100249AD4(uint64_t a1)
{
  uint64_t v99 = *v1;
  uint64_t v3 = type metadata accessor for HostedRoutingSourceSession(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_t v102 = v1;
  unint64_t v11 = (void *)v1[7];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v98 = v11;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v12 & 1) == 0) {
    goto LABEL_85;
  }
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_100014688(0, v13, 0);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v14 = (void *)aBlock[0];
    do
    {
      sub_10024D2A4(v15, (uint64_t)v6);
      uint64_t v17 = *v6;
      uint64_t v18 = v6[1];
      swift_bridgeObjectRetain();
      sub_10024D308((uint64_t)v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v14[2] + 1, 1);
        uint64_t v14 = (void *)aBlock[0];
      }
      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      if (v20 >= v19 >> 1)
      {
        sub_100014688(v19 > 1, v20 + 1, 1);
        uint64_t v14 = (void *)aBlock[0];
      }
      v14[2] = v20 + 1;
      char v21 = &v14[2 * v20];
      v21[4] = v17;
      v21[5] = v18;
      v15 += v16;
      --v13;
    }
    while (v13);
  }
  uint64_t v22 = sub_10000B4EC((uint64_t)v14);
  swift_bridgeObjectRelease();
  v102[3] = v22;
  swift_bridgeObjectRelease();
  unint64_t v23 = sub_100249674();
  uint64_t v24 = v23;
  int64_t v25 = 0;
  uint64_t v26 = 1 << v23[32];
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  char v28 = v23 + 56;
  unint64_t v29 = v27 & *((void *)v23 + 7);
  int64_t v30 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      unint64_t v31 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v32 = v31 | (v25 << 6);
      goto LABEL_28;
    }
    int64_t v33 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if (v33 >= v30) {
      goto LABEL_35;
    }
    unint64_t v34 = *(void *)&v28[8 * v33];
    ++v25;
    if (!v34)
    {
      int64_t v25 = v33 + 1;
      if (v33 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v34 = *(void *)&v28[8 * v25];
      if (!v34)
      {
        int64_t v25 = v33 + 2;
        if (v33 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v34 = *(void *)&v28[8 * v25];
        if (!v34) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v29 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v25 << 6);
LABEL_28:
    uint64_t v36 = (uint64_t *)(*((void *)v24 + 6) + 16 * v32);
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_1001BF780();
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_100013660(v37, v38);
    LOBYTE(v37) = v41;
    swift_bridgeObjectRelease();
    if (v37)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v39;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10023DEB8();
        uint64_t v39 = (void *)aBlock[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void **)(v39[7] + 8 * v40);
      sub_1001F1A4C(v40, (uint64_t)v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = 0;
    }
    v102[4] = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
      [v43 invalidate];
    }
  }
  int64_t v35 = v33 + 3;
  if (v35 >= v30)
  {
LABEL_35:
    swift_release();
    long long v44 = sub_10024962C();
    Swift::Int v45 = v44;
    int64_t v46 = 0;
    uint64_t v47 = v44[8];
    Swift::String v100 = (char *)(v44 + 8);
    uint64_t v48 = 1 << *((unsigned char *)v44 + 32);
    uint64_t v49 = -1;
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    unint64_t v50 = v49 & v47;
    int64_t v101 = (unint64_t)(v48 + 63) >> 6;
    Swift::String v97 = v104;
    Swift::String v96 = v44;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v50)
          {
            unint64_t v51 = __clz(__rbit64(v50));
            v50 &= v50 - 1;
            unint64_t v52 = v51 | (v46 << 6);
          }
          else
          {
            int64_t v53 = v46 + 1;
            if (__OFADD__(v46, 1)) {
              goto LABEL_80;
            }
            if (v53 >= v101) {
              return swift_release();
            }
            unint64_t v54 = *(void *)&v100[8 * v53];
            ++v46;
            if (!v54)
            {
              int64_t v46 = v53 + 1;
              if (v53 + 1 >= v101) {
                return swift_release();
              }
              unint64_t v54 = *(void *)&v100[8 * v46];
              if (!v54)
              {
                int64_t v46 = v53 + 2;
                if (v53 + 2 >= v101) {
                  return swift_release();
                }
                unint64_t v54 = *(void *)&v100[8 * v46];
                if (!v54)
                {
                  int64_t v55 = v53 + 3;
                  if (v55 >= v101) {
                    return swift_release();
                  }
                  unint64_t v54 = *(void *)&v100[8 * v55];
                  if (!v54)
                  {
                    while (1)
                    {
                      int64_t v46 = v55 + 1;
                      if (__OFADD__(v55, 1)) {
                        goto LABEL_83;
                      }
                      if (v46 >= v101) {
                        return swift_release();
                      }
                      unint64_t v54 = *(void *)&v100[8 * v46];
                      ++v55;
                      if (v54) {
                        goto LABEL_54;
                      }
                    }
                  }
                  int64_t v46 = v55;
                }
              }
            }
LABEL_54:
            unint64_t v50 = (v54 - 1) & v54;
            unint64_t v52 = __clz(__rbit64(v54)) + (v46 << 6);
          }
          uint64_t v56 = 16 * v52;
          long long v57 = (uint64_t *)(v45[6] + v56);
          uint64_t v58 = *v57;
          uint64_t v59 = v57[1];
          uint64_t v60 = (uint64_t *)(v45[7] + v56);
          uint64_t v62 = *v60;
          uint64_t v61 = v60[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          Swift::Int v63 = sub_100249674();
          char v64 = sub_10018835C(v62, v61, (uint64_t)v63);
          swift_bridgeObjectRelease();
          if ((v64 & 1) == 0) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        if (!*((void *)sub_1001BF780() + 2)) {
          break;
        }
        sub_100013660(v62, v61);
        if ((v65 & 1) == 0) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v66 = swift_allocObject();
      swift_weakInit();
      uint64_t v67 = (void *)swift_allocObject();
      v67[2] = v66;
      v67[3] = v62;
      v67[4] = v61;
      v67[5] = v58;
      uint64_t v68 = v99;
      v67[6] = v59;
      v67[7] = v68;
      id v69 = objc_allocWithZone((Class)MSVTimer);
      v104[2] = sub_10024D4B8;
      v104[3] = v67;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v104[0] = sub_100006760;
      v104[1] = &unk_100423F68;
      char v70 = _Block_copy(aBlock);
      id v71 = v98;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v72 = v102;
      swift_release();
      id v73 = [v69 initWithInterval:0 repeats:v71 queue:v70 block:300.0];

      _Block_release(v70);
      swift_release();
      os_log_type_t v74 = sub_1001BF780();
      if (v73) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v84 = sub_100013660(v62, v61);
      char v86 = v85;
      swift_bridgeObjectRelease();
      if (v86)
      {
        char v87 = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v74;
        if ((v87 & 1) == 0)
        {
          sub_10023DEB8();
          os_log_type_t v74 = (void *)aBlock[0];
        }
        swift_bridgeObjectRelease();
        unint64_t v88 = *(void **)(v74[7] + 8 * v84);
        sub_1001F1A4C(v84, (uint64_t)v74);

        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_77:
      Swift::Int v45 = v96;
      v72[4] = v74;
      swift_bridgeObjectRelease();
    }
    char v75 = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = v74;
    unint64_t v77 = sub_100013660(v62, v61);
    uint64_t v78 = v74[2];
    BOOL v79 = (v76 & 1) == 0;
    uint64_t v80 = v78 + v79;
    if (__OFADD__(v78, v79)) {
      goto LABEL_81;
    }
    char v81 = v76;
    if (v74[3] < v80)
    {
      sub_10023DA38(v80, v75);
      unint64_t v82 = sub_100013660(v62, v61);
      if ((v81 & 1) != (v83 & 1)) {
        goto LABEL_86;
      }
      unint64_t v77 = v82;
      os_log_type_t v74 = (void *)aBlock[0];
      if ((v81 & 1) == 0) {
        goto LABEL_74;
      }
LABEL_71:
      uint64_t v89 = v74[7];

      *(void *)(v89 + 8 * v77) = v73;
LABEL_76:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v72 = v102;
      goto LABEL_77;
    }
    if (v75)
    {
      os_log_type_t v74 = (void *)aBlock[0];
      if (v76) {
        goto LABEL_71;
      }
    }
    else
    {
      sub_10023DEB8();
      os_log_type_t v74 = (void *)aBlock[0];
      if (v81) {
        goto LABEL_71;
      }
    }
LABEL_74:
    v74[(v77 >> 6) + 8] |= 1 << v77;
    os_log_t v90 = (uint64_t *)(v74[6] + 16 * v77);
    *os_log_t v90 = v62;
    v90[1] = v61;
    *(void *)(v74[7] + 8 * v77) = v73;
    uint64_t v91 = v74[2];
    BOOL v92 = __OFADD__(v91, 1);
    uint64_t v93 = v91 + 1;
    if (v92) {
      goto LABEL_84;
    }
    v74[2] = v93;
    swift_bridgeObjectRetain();
    goto LABEL_76;
  }
  unint64_t v34 = *(void *)&v28[8 * v35];
  if (v34)
  {
    int64_t v25 = v35;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v25 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v25 >= v30) {
      goto LABEL_35;
    }
    unint64_t v34 = *(void *)&v28[8 * v25];
    ++v35;
    if (v34) {
      goto LABEL_27;
    }
  }
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10024A460(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_100014688(0, v1, 0);
  uint64_t result = (void *)sub_10022EAC4(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v28 = v2 + 80;
  int64_t v29 = v1;
  int v30 = v4;
  uint64_t v31 = v2 + 64;
  uint64_t v32 = v2;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v33 = v6;
    uint64_t v11 = *(void *)(v2 + 56);
    char v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v14 = *v12;
    int64_t v13 = (void *)v12[1];
    uint64_t v15 = (uint64_t *)(v11 + 16 * v5);
    uint64_t v16 = (void *)v15[1];
    uint64_t v34 = *v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = v14;
    v17._object = v13;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD000000000000017;
    v18._object = (void *)0x80000001003B6C90;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v34;
    v19._object = v16;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v21 = _swiftEmptyArrayStorage[2];
    unint64_t v20 = _swiftEmptyArrayStorage[3];
    if (v21 >= v20 >> 1) {
      uint64_t result = (void *)sub_100014688(v20 > 1, v21 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v21 + 1;
    uint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
    v22[4] = 0xD000000000000015;
    v22[5] = 0x80000001003B6DB0;
    uint64_t v2 = v32;
    int64_t v8 = 1 << *(unsigned char *)(v32 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v31;
    uint64_t v23 = *(void *)(v31 + 8 * v10);
    if ((v23 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v30;
    if (*(_DWORD *)(v32 + 36) != v30) {
      goto LABEL_27;
    }
    unint64_t v24 = v23 & (-2 << (v5 & 0x3F));
    if (v24)
    {
      int64_t v8 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v29;
    }
    else
    {
      unint64_t v25 = v10 + 1;
      unint64_t v26 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v29;
      if (v10 + 1 < v26)
      {
        unint64_t v27 = *(void *)(v31 + 8 * v25);
        if (v27)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v10)
          {
            unint64_t v27 = *(void *)(v28 + 8 * v10++);
            if (v27)
            {
              unint64_t v25 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v33 + 1;
    uint64_t v5 = v8;
    if (v33 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10024A728(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = sub_100013A80((uint64_t *)&unk_10047BC50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v33 = sub_1001BF780();
    uint64_t v14 = (void *)sub_10022B17C(a2, a3);
    *(void *)(v13 + 32) = v33;
    swift_bridgeObjectRelease();
    if (v14
      && (v14,
          uint64_t v15 = sub_100249674(),
          char v16 = sub_10018835C(a2, a3, (uint64_t)v15),
          swift_bridgeObjectRelease(),
          (v16 & 1) == 0))
    {
      uint64_t v17 = sub_1001A6B94();
      sub_1001A6BB8(v17, (uint64_t)v11);
      uint64_t v18 = type metadata accessor for Logger();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18) == 1)
      {
        sub_100009A08((uint64_t)v11, (uint64_t *)&unk_10047BC50);
      }
      else
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.default.getter();
        int v31 = v21;
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v30 = v18;
          uint64_t v23 = v22;
          int64_t v29 = (void *)swift_slowAlloc();
          uint64_t v33 = v29;
          *(_DWORD *)uint64_t v23 = 136315650;
          uint64_t v27 = v23 + 4;
          uint64_t v24 = _typeName(_:qualified:)();
          uint64_t v32 = sub_10018A9E0(v24, v25, (uint64_t *)&v33);
          os_log_t v28 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v32 = sub_10018A9E0(a2, a3, (uint64_t *)&v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v32 = sub_10018A9E0(a4, a5, (uint64_t *)&v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v26 = v28;
          _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v31, "[%s] expirationTimer - remove session identifier: %s for lost groupIdentifier: %s", (uint8_t *)v23, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v18 = v30;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
      }
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_10024962C();
      sub_10022B094(a4, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v13 + 16) = v33;
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10024AB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v78 = a3;
  uint64_t v79 = a1;
  uint64_t v80 = a2;
  os_log_t v67 = *(os_log_t *)v3;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  __chkstk_darwin(v4);
  char v75 = &v64[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for RoutingInteraction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v64[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = &v64[-v12];
  uint64_t v74 = v14;
  __chkstk_darwin(v11);
  char v16 = &v64[-v15];
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = &v64[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  os_log_type_t v21 = *(void **)(v3 + 56);
  *unint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v73 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if (v21)
  {
    uint64_t v68 = v13;
    uint64_t v23 = v10;
    uint64_t v24 = v3;
    unint64_t v25 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v26 = v78;
    v25(v16, v78, v6);
    uint64_t v27 = v80;
    swift_bridgeObjectRetain();
    os_log_t v28 = sub_1002496BC();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock[0] = (uint64_t)v28;
    sub_10024CE14(v79, v27, (uint64_t)v16, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = aBlock[0];
    swift_bridgeObjectRelease();
    uint64_t v72 = v7;
    int v31 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    char v70 = v16;
    uint64_t v32 = v16;
    uint64_t v33 = v31;
    v31(v32, v6);
    uint64_t v69 = v24;
    *(void *)(v24 + 48) = v30;
    uint64_t v34 = v23;
    int64_t v35 = v68;
    swift_bridgeObjectRelease();
    uint64_t v36 = sub_1001A69C4();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v76 + 16))(v75, v36, v77);
    v25(v35, v26, v6);
    id v71 = v25;
    v25(v34, v26, v6);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      aBlock[0] = v66;
      *(_DWORD *)uint64_t v40 = 136315650;
      int v65 = v39;
      uint64_t v41 = _typeName(_:qualified:)();
      os_log_t v67 = v37;
      uint64_t v81 = sub_10018A9E0(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v43 = RoutingInteraction.identifier.getter();
      uint64_t v81 = sub_10018A9E0(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v33(v35, v6);
      *(_WORD *)(v40 + 22) = 2080;
      sub_10024D790(&qword_100478968);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v81 = sub_10018A9E0(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v33(v34, v6);
      uint64_t v37 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v65, "[%s] prewarmSessionIdentifier<%s> - interaction: %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v33(v35, v6);
      v33(v34, v6);
    }

    (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v75, v77);
    uint64_t v47 = swift_allocObject();
    uint64_t v48 = v69;
    swift_weakInit();
    uint64_t v49 = v70;
    v71(v70, v78, v6);
    uint64_t v50 = v72;
    unint64_t v51 = (*(unsigned __int8 *)(v72 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    unint64_t v52 = (char *)swift_allocObject();
    uint64_t v53 = v79;
    uint64_t v54 = v80;
    *((void *)v52 + 2) = v47;
    *((void *)v52 + 3) = v53;
    *((void *)v52 + 4) = v54;
    (*(void (**)(char *, unsigned char *, uint64_t))(v50 + 32))(&v52[v51], v49, v6);
    id v55 = objc_allocWithZone((Class)MSVTimer);
    aBlock[4] = (uint64_t)sub_10024D59C;
    aBlock[5] = (uint64_t)v52;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_100006760;
    aBlock[3] = (uint64_t)&unk_100423FB8;
    uint64_t v56 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n();
    id v57 = v73;
    swift_retain();
    swift_release();
    id v58 = [v55 initWithInterval:0 repeats:v57 queue:v56 block:120.0];

    _Block_release(v56);
    swift_release();
    uint64_t v59 = sub_1001BF7C8();
    aBlock[0] = (uint64_t)v59;
    if (v58)
    {
      uint64_t v60 = (uint64_t)v59;
      char v61 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v81 = v60;
      sub_10023DD48((uint64_t)v58, v79, v80, v61);
      uint64_t v62 = v81;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::Int v63 = (void *)sub_10022B17C(v79, v80);
      swift_bridgeObjectRelease();

      uint64_t v62 = aBlock[0];
    }
    *(void *)(v48 + 40) = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return v79;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024B2F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v101 = a5;
  uint64_t v103 = a4;
  unint64_t v107 = a2;
  uint64_t v95 = *v5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v104 = v8;
  uint64_t v105 = v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v94 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  os_log_t v102 = (char *)&v88 - v12;
  uint64_t v13 = type metadata accessor for RoutingInteraction();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  Swift::String v96 = ((char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_t v97 = (os_log_t)((char *)&v88 - v18);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v88 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v109 = v5;
  unint64_t v25 = (void *)v5[7];
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  os_log_t v28 = *(void (**)(void *, uint64_t))(v22 + 8);
  uint64_t v27 = v22 + 8;
  v28(v24, v21);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v27 = v14;
  int64_t v29 = *(void (**)(os_log_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v106 = v13;
  uint64_t v99 = v29;
  uint64_t v100 = v14 + 16;
  v29((os_log_t)v20, a3, v13);
  uint64_t v30 = sub_1002496BC();
  if (!v30[2])
  {
LABEL_26:
    swift_bridgeObjectRelease();
    char v87 = *(void (**)(char *, uint64_t))(v27 + 8);
    v27 += 8;
    v87(v20, v106);
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v31 = a3;
  unint64_t v32 = sub_1001B5DEC((uint64_t)v20);
  uint64_t v33 = v102;
  if ((v34 & 1) == 0)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v20, v106);
    __break(1u);
    return result;
  }
  int64_t v35 = (uint64_t *)(v30[7] + 16 * v32);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v38 = v37 == a1 && v36 == v107;
  uint64_t v39 = v27;
  if (v38) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
  }
  uint64_t v40 = v104;
  uint64_t v41 = v106;
  unint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  uint64_t v42 = v39 + 8;
  uint64_t v43 = v44;
  v44(v20, v106);
  swift_bridgeObjectRelease();
  if (v27)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v98 = v42;
  uint64_t v108 = a1;
  uint64_t v45 = sub_1001A69C4();
  uint64_t v46 = v105;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
  uint64_t v92 = v45;
  uint64_t v91 = v47;
  uint64_t v90 = v105 + 16;
  ((void (*)(char *))v47)(v33);
  os_log_t v48 = v97;
  v99(v97, v31, v41);
  unint64_t v49 = v101;
  swift_bridgeObjectRetain_n();
  uint64_t v50 = v33;
  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  BOOL v53 = os_log_type_enabled(v51, v52);
  uint64_t v93 = v31;
  uint64_t v89 = v43;
  if (v53)
  {
    uint64_t v54 = swift_slowAlloc();
    v111[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315650;
    uint64_t v55 = _typeName(_:qualified:)();
    uint64_t v110 = sub_10018A9E0(v55, v56, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    uint64_t v57 = RoutingInteraction.identifier.getter();
    uint64_t v110 = sub_10018A9E0(v57, v58, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v43((char *)v48, v106);
    *(_WORD *)(v54 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v110 = sub_10018A9E0(v103, v49, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "[%s] commitPrewarmedIdentifier<%s> - groupIdentifier: %s", (uint8_t *)v54, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v40 = v104;
    swift_slowDealloc();

    uint64_t v59 = *(char **)(v105 + 8);
    uint64_t v60 = v102;
  }
  else
  {
    v43((char *)v48, v41);

    swift_bridgeObjectRelease_n();
    uint64_t v59 = *(char **)(v46 + 8);
    uint64_t v60 = v50;
  }
  os_log_t v102 = v59;
  ((void (*)(char *, uint64_t))v59)(v60, v40);
  uint64_t v61 = v49;
  uint64_t v62 = v96;
  Swift::Int v63 = sub_10024962C();
  unint64_t v64 = v107;
  swift_bridgeObjectRetain();
  uint64_t v65 = sub_100232D8C((uint64_t)v63, v108, v64);
  unint64_t v67 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v103;
  if (v67)
  {
    if (v65 == v103 && v67 == v61 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v69 = v94;
      v91(v94, v92, v40);
      uint64_t v70 = v106;
      v99(v62, v93, v106);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.fault.getter();
      LODWORD(v100) = v72;
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = swift_slowAlloc();
        uint64_t v99 = (void (*)(os_log_t, uint64_t, uint64_t))swift_slowAlloc();
        v111[0] = (uint64_t)v99;
        *(_DWORD *)uint64_t v73 = 136315906;
        os_log_t v97 = v71;
        uint64_t v74 = _typeName(_:qualified:)();
        uint64_t v110 = sub_10018A9E0(v74, v75, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2080;
        uint64_t v76 = RoutingInteraction.identifier.getter();
        uint64_t v110 = sub_10018A9E0(v76, v77, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v89((char *)v62, v70);
        *(_WORD *)(v73 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v110 = sub_10018A9E0(v108, v64, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v73 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v110 = sub_10018A9E0(v65, v67, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        os_log_t v78 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v100, "[%s] commitPrewarmedIdentifier<%s> - identifier: %s already mapped to groupIdentifier: %s -> unmapping", (uint8_t *)v73, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v68 = v103;
        swift_slowDealloc();

        uint64_t v79 = v104;
        uint64_t v80 = v94;
      }
      else
      {
        v89((char *)v62, v70);

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v80 = v69;
        uint64_t v79 = v40;
      }
      ((void (*)(char *, uint64_t))v102)(v80, v79);
      uint64_t v81 = v109;
      v111[0] = (uint64_t)sub_10024962C();
      sub_10022B094(v65, v67);
      swift_bridgeObjectRelease();
      v81[2] = v111[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = v101;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v82 = v109;
  char v83 = sub_10024962C();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v111[0] = (uint64_t)v83;
  sub_10022CE28(v108, v64, v68, v61, isUniquelyReferenced_nonNull_native);
  uint64_t v85 = v111[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v82[2] = v85;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10024BD74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10024BDD4()
{
  uint64_t v94 = sub_100013A80(&qword_10047A6E0);
  uint64_t v1 = __chkstk_darwin(v94);
  uint64_t v93 = (char *)v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v92 = (uint64_t)v84 - v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v91 = (char *)v84 - v6;
  __chkstk_darwin(v5);
  uint64_t v90 = (uint64_t)v84 - v7;
  unint64_t v101 = 0xD000000000000019;
  unint64_t v102 = 0x80000001003B6C10;
  v100._countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)&v100, "Identifiers:\n");
  HIWORD(v100._object) = -4864;
  uint64_t v8 = sub_10024962C();
  uint64_t v9 = sub_10024A460((uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v97 = (uint64_t)v9;
  uint64_t v10 = sub_100013A80(&qword_10047A080);
  unint64_t v11 = sub_10024D6A8();
  v84[1] = v10;
  v84[0] = v11;
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 10;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v100._countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v100._countAndFlagsBits = 0xD000000000000014;
  v100._object = (void *)0x80000001003B6C30;
  uint64_t v17 = sub_100249674();
  int64_t v18 = v17[2];
  if (v18)
  {
    int64_t v95 = v0;
    uint64_t v99 = _swiftEmptyArrayStorage;
    sub_100014688(0, v18, 0);
    uint64_t v19 = v99;
    uint64_t result = sub_10001551C((uint64_t)v17);
    int64_t v21 = result;
    int v23 = v22;
    char v25 = v24 & 1;
    Swift::String v96 = (char *)(v17 + 7);
    while ((v21 & 0x8000000000000000) == 0 && v21 < 1 << *((unsigned char *)v17 + 32))
    {
      if (((*(void *)&v96[((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v21) & 1) == 0) {
        goto LABEL_28;
      }
      if (*((_DWORD *)v17 + 9) != v23) {
        goto LABEL_29;
      }
      id v26 = (uint64_t *)(v17[6] + 16 * v21);
      uint64_t v27 = *v26;
      os_log_t v28 = (void *)v26[1];
      uint64_t v97 = 538976288;
      unint64_t v98 = 0xE400000000000000;
      swift_bridgeObjectRetain();
      v29._countAndFlagsBits = v27;
      v29._object = v28;
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v30 = v97;
      unint64_t v31 = v98;
      uint64_t v99 = v19;
      unint64_t v33 = v19[2];
      unint64_t v32 = v19[3];
      if (v33 >= v32 >> 1)
      {
        sub_100014688(v32 > 1, v33 + 1, 1);
        uint64_t v19 = v99;
      }
      void v19[2] = v33 + 1;
      char v34 = &v19[2 * v33];
      v34[4] = v30;
      v34[5] = v31;
      uint64_t result = sub_100013AC4(v21, v23, v25 & 1, (uint64_t)v17);
      int64_t v21 = result;
      int v23 = v35;
      char v25 = v36 & 1;
      if (!--v18)
      {
        sub_100015510(result, v35, v36 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = _swiftEmptyArrayStorage;
LABEL_12:
  uint64_t v97 = (uint64_t)v19;
  uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 10;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v100._countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v100._countAndFlagsBits = 0xD000000000000017;
  v100._object = (void *)0x80000001003B6C50;
  uint64_t v42 = (char *)sub_1002496BC();
  int64_t v43 = *((void *)v42 + 2);
  if (v43)
  {
    uint64_t v99 = _swiftEmptyArrayStorage;
    sub_100014688(0, v43, 0);
    uint64_t v44 = sub_10022EAC4((uint64_t)v42);
    uint64_t v46 = v45;
    uint64_t v85 = v42 + 64;
    char v48 = v47 & 1;
    int64_t v95 = v43 - 1;
    unint64_t v88 = 0xD000000000000011;
    uint64_t v89 = v42;
    unint64_t v87 = 0x80000001003B6C70;
    char v86 = (void *)0x80000001003B6C90;
    while (1)
    {
      uint64_t v49 = v94;
      uint64_t v50 = v90;
      unint64_t v51 = (uint64_t *)(v90 + *(int *)(v94 + 48));
      Swift::String v96 = v46;
      uint64_t v52 = sub_10024D364(v90, v44, (int)v46, v48 & 1, (uint64_t)v42);
      uint64_t v54 = v53;
      uint64_t *v51 = v52;
      v51[1] = v53;
      uint64_t v55 = type metadata accessor for RoutingInteraction();
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
      unint64_t v58 = v91;
      v57(v91, v50, v55);
      uint64_t v59 = (uint64_t *)&v58[*(int *)(v49 + 48)];
      uint64_t *v59 = v52;
      v59[1] = v54;
      uint64_t v60 = (uint64_t)v58;
      uint64_t v61 = v92;
      sub_10024D704(v60, v92);
      swift_bridgeObjectRetain();
      sub_100009A08(v50, &qword_10047A6E0);
      uint64_t v97 = 0;
      unint64_t v98 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      uint64_t v97 = v88;
      unint64_t v98 = v87;
      uint64_t v62 = *(int *)(v49 + 48);
      Swift::Int v63 = v93;
      unint64_t v64 = (uint64_t *)&v93[v62];
      uint64_t v65 = (Swift::String *)(v61 + v62);
      v57(v93, v61, v55);
      object = v65->_object;
      uint64_t *v64 = v65->_countAndFlagsBits;
      v64[1] = (uint64_t)object;
      uint64_t v67 = RoutingInteraction.identifier.getter();
      uint64_t v69 = v68;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v63, v55);
      v70._countAndFlagsBits = v67;
      v70._object = v69;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._countAndFlagsBits = 0xD000000000000017;
      v71._object = v86;
      String.append(_:)(v71);
      String.append(_:)(*v65);
      uint64_t v72 = v97;
      unint64_t v73 = v98;
      sub_100009A08(v61, &qword_10047A6E0);
      uint64_t v74 = v99;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_100014688(0, v74[2] + 1, 1);
        uint64_t v74 = v99;
      }
      unint64_t v76 = v74[2];
      unint64_t v75 = v74[3];
      if (v76 >= v75 >> 1)
      {
        uint64_t result = sub_100014688(v75 > 1, v76 + 1, 1);
        uint64_t v74 = v99;
      }
      v74[2] = v76 + 1;
      unint64_t v77 = &v74[2 * v76];
      v77[4] = v72;
      v77[5] = v73;
      uint64_t v42 = v89;
      if (v44 < 0 || v44 >= -(-1 << v89[32])) {
        break;
      }
      if (((*(void *)&v85[((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v44) & 1) == 0) {
        goto LABEL_31;
      }
      if (*((_DWORD *)v89 + 9) != v96) {
        goto LABEL_32;
      }
      uint64_t v78 = _HashTable.occupiedBucket(after:)();
      if (!v95)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      uint64_t v44 = v78;
      char v48 = 0;
      uint64_t v46 = (char *)*((unsigned int *)v42 + 9);
      --v95;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v74 = _swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v97 = (uint64_t)v74;
  uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v81 = v80;
  swift_bridgeObjectRelease();
  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = 10;
  v83._object = (void *)0xE100000000000000;
  String.append(_:)(v83);
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  return v101;
}

uint64_t sub_10024C5D4()
{
  return sub_10024BDD4();
}

uint64_t sub_10024C5F8(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1001B5DEC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10024CFCC();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for RoutingInteraction();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_10024CB30(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10024C704(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for RoutingInteraction();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100013A80(&qword_10047A850);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  Swift::String v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  char v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    char v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      Swift::String v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      unint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_10024D790(&qword_100478000);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  char v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

unint64_t sub_10024CB30(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingInteraction();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      unint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_10024D790(&qword_100478000);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            int64_t v23 = (_OWORD *)(v22 + 16 * a1);
            char v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *int64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *unint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10024CE14(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for RoutingInteraction();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_1001B5DEC(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_10024CFCC();
    goto LABEL_7;
  }
  sub_10024C704(v18, a4 & 1);
  unint64_t v25 = sub_1001B5DEC(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1001B7C04(v15, (uint64_t)v12, a1, v28, v21);
}

void *sub_10024CFCC()
{
  uint64_t v38 = type metadata accessor for RoutingInteraction();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  unint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013A80(&qword_10047A850);
  unint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v40;
    BOOL v29 = v32;
LABEL_25:
    *BOOL v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  char v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    uint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    unint64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *unint64_t v25 = v23;
    v25[1] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    BOOL v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10024D2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSourceSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024D308(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HostedRoutingSourceSession(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10024D364(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = type metadata accessor for RoutingInteraction();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v9);
    uint64_t v10 = *(void *)(*(void *)(a5 + 56) + 16 * a2);
    swift_bridgeObjectRetain();
    return v10;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10024D438()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024D470()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10024D4B8()
{
  return sub_10024A728(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_10024D4C8()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10024D59C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RoutingInteraction() - 8) + 80);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_1001BF7C8();

    *(void *)(v5 + 40) = v6;
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1002496BC();
    sub_10024C5F8(v0 + ((v1 + 40) & ~v1));
    swift_bridgeObjectRelease();
    *(void *)(v5 + 48) = v7;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10024D6A8()
{
  unint64_t result = qword_1004789C0;
  if (!qword_1004789C0)
  {
    sub_10018F8A4(&qword_10047A080);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004789C0);
  }
  return result;
}

uint64_t sub_10024D704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047A6E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SessionIdentifierStore()
{
  return self;
}

uint64_t sub_10024D790(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RoutingInteraction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10024D7DC()
{
  return sub_10024EB14(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon);
}

id sub_10024D7E8@<X0>(void *a1@<X8>)
{
  id result = sub_10024D7DC();
  *a1 = result;
  return result;
}

void sub_10024D814(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon) = *a1;
  id v3 = v2;
}

id sub_10024D864()
{
  return sub_10024EB14(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect);
}

id sub_10024D870@<X0>(void *a1@<X8>)
{
  id result = sub_10024D864();
  *a1 = result;
  return result;
}

void sub_10024D89C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect) = *a1;
  id v3 = v2;
}

id sub_10024DB44(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_10024F778(a1);

  return v4;
}

uint64_t sub_10024DC98()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10024DCE4(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked);
}

uint64_t (*sub_10024DCF0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10024DD50(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_eventName);
}

uint64_t sub_10024DD5C()
{
  return sub_10024E470();
}

unint64_t sub_10024DD68()
{
  uint64_t v1 = *v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  id v4 = (void **)(v1 + OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_joinMode);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *(void *)(inited + 72) = sub_1001A7744();
  *(void *)(inited + 48) = v5;
  id v6 = v5;
  return sub_1001FA360(inited);
}

uint64_t sub_10024DE08()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7260;
  *(void *)(v0 + 32) = sub_10024EB14(&OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___request);
  *(void *)(v0 + 40) = sub_10024D7DC();
  *(void *)(v0 + 48) = sub_10024D864();
  specialized Array._endMutation()();
  return v0;
}

id sub_10024DE88()
{
  return sub_10024EB14(&OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup);
}

id sub_10024DE94@<X0>(void *a1@<X8>)
{
  id result = sub_10024DE88();
  *a1 = result;
  return result;
}

void sub_10024DEC0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup) = *a1;
  id v3 = v2;
}

id sub_10024DF10()
{
  return sub_10024EB14(&OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation);
}

id sub_10024DF1C@<X0>(void *a1@<X8>)
{
  id result = sub_10024DF10();
  *a1 = result;
  return result;
}

void sub_10024DF48(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation);
  *(void *)(*a2 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation) = *a1;
  id v3 = v2;
}

id sub_10024E144(char a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10024E178(a1);
}

id sub_10024E178(char a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked] = 0;
  uint64_t v5 = (uint64_t *)&v2[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_eventName];
  *uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[1] = v6;
  uint64_t v7 = OBJC_IVAR___MRDGroupSessionCreateTimingEvents_propertyMap;
  sub_100013A80(&qword_10047A8A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5BA0;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v10;
  uint64_t v11 = v2;
  *(void *)&v2[v7] = sub_1001FA498(inited, &qword_10047A9C8, &qword_10047A9D0);
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyGroup] = 0;
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionCreateTimingEvents____lazy_storage___nearbyInvitation] = 0;
  v11[OBJC_IVAR___MRDGroupSessionCreateTimingEvents_routeType] = a1;

  v13.receiver = v11;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_10024E3A0()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10024E3EC(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDGroupSessionCreateTimingEvents_tracked);
}

uint64_t (*sub_10024E3F8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10024E458(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDGroupSessionCreateTimingEvents_eventName);
}

uint64_t sub_10024E464()
{
  return sub_10024E470();
}

uint64_t sub_10024E470()
{
  return swift_bridgeObjectRetain();
}

unint64_t sub_10024E4BC()
{
  uint64_t v1 = *v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  id v4 = (unsigned char *)(v1 + OBJC_IVAR___MRDGroupSessionCreateTimingEvents_routeType);
  swift_beginAccess();
  LOBYTE(v4) = *v4;
  type metadata accessor for MRGroupSessionRouteType();
  *(void *)(inited + 72) = v5;
  *(unsigned char *)(inited + 48) = (_BYTE)v4;
  return sub_1001FA360(inited);
}

uint64_t sub_10024E558()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7270;
  *(void *)(v0 + 32) = sub_10024DE88();
  *(void *)(v0 + 40) = sub_10024DF10();
  specialized Array._endMutation()();
  return v0;
}

id sub_10024E7D8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext);
}

id sub_10024E7E4@<X0>(void *a1@<X8>)
{
  id result = sub_10024E7D8();
  *a1 = result;
  return result;
}

void sub_10024E810(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext) = *a1;
  id v3 = v2;
}

id sub_10024E860()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice);
}

id sub_10024E86C@<X0>(void *a1@<X8>)
{
  id result = sub_10024E860();
  *a1 = result;
  return result;
}

void sub_10024E898(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice) = *a1;
  id v3 = v2;
}

id sub_10024E8E8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice);
}

id sub_10024E8F4@<X0>(void *a1@<X8>)
{
  id result = sub_10024E8E8();
  *a1 = result;
  return result;
}

void sub_10024E920(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice) = *a1;
  id v3 = v2;
}

id sub_10024E970()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo);
}

id sub_10024E97C@<X0>(void *a1@<X8>)
{
  id result = sub_10024E970();
  *a1 = result;
  return result;
}

void sub_10024E9A8(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo) = *a1;
  id v3 = v2;
}

id sub_10024E9F8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward);
}

id sub_10024EA04@<X0>(void *a1@<X8>)
{
  id result = sub_10024E9F8();
  *a1 = result;
  return result;
}

void sub_10024EA30(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward) = *a1;
  id v3 = v2;
}

id sub_10024EA80()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint);
}

id sub_10024EA8C@<X0>(void *a1@<X8>)
{
  id result = sub_10024EA80();
  *a1 = result;
  return result;
}

void sub_10024EAB8(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint) = *a1;
  id v3 = v2;
}

id sub_10024EB08()
{
  return sub_10024EB14(&OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions);
}

id sub_10024EB14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    id v4 = *(id *)(v1 + *a1);
  }
  else
  {
    uint64_t v5 = v1;
    type metadata accessor for TimingEvent();
    id v6 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v7 = *(void **)(v1 + v2);
    *(void *)(v5 + v2) = v6;
    id v4 = v6;

    id v3 = 0;
  }
  id v8 = v3;
  return v4;
}

id sub_10024EB80@<X0>(void *a1@<X8>)
{
  id result = sub_10024EB08();
  *a1 = result;
  return result;
}

void sub_10024EBAC(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions);
  *(void *)(*a2 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions) = *a1;
  id v3 = v2;
}

uint64_t sub_10024EBFC()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7280;
  *(void *)(v0 + 32) = sub_10024E7D8();
  *(void *)(v0 + 40) = sub_10024E860();
  *(void *)(v0 + 48) = sub_10024E8E8();
  *(void *)(v0 + 56) = sub_10024E970();
  *(void *)(v0 + 64) = sub_10024E9F8();
  *(void *)(v0 + 72) = sub_10024EA80();
  *(void *)(v0 + 80) = sub_10024EB08();
  specialized Array._endMutation()();
  return v0;
}

unint64_t sub_10024EC90()
{
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5F10;
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x80000001003B6E60;
  uint64_t v2 = (unsigned char *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_discoverableGroupLeader);
  swift_beginAccess();
  *(unsigned char *)(inited + 48) = *v2;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 0x5472657473756C63;
  *(void *)(inited + 88) = 0xEB00000000657079;
  id v3 = (_DWORD *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType);
  swift_beginAccess();
  *(_DWORD *)(inited + 96) = *v3;
  *(void *)(inited + 120) = &type metadata for UInt32;
  *(void *)(inited + 128) = 0x44496C65646F6DLL;
  *(void *)(inited + 136) = 0xE700000000000000;
  id v4 = (uint64_t *)(v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_modelID);
  swift_beginAccess();
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = v5;
  swift_bridgeObjectRetain();
  return sub_1001FA360(inited);
}

void sub_10024F1BC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = a1;
  id v8 = a1;
  id v9 = a3;
  sub_100252DB4((uint64_t)v9, ObjectType, a4);
}

void sub_10024F248(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  id v6 = a1;
  sub_100252448(ObjectType, a3);
}

id sub_10024F2B0(int a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_10024F2FC(a1, a2, a3);
}

id sub_10024F2FC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_discoverableGroupLeader] = 0;
  id v8 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType];
  *(_DWORD *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_clusterType] = 0;
  id v9 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_modelID];
  *id v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v10 = &v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_eventName];
  *uint64_t v10 = 0xD00000000000002CLL;
  v10[1] = 0x80000001003B6E30;
  v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___sourceOutputContext] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___removeLocalDevice] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___addLocalDevice] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___reloadDeviceInfo] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___originForward] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___findEndpoint] = 0;
  *(void *)&v3[OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents____lazy_storage___interruptions] = 0;
  swift_beginAccess();
  *id v8 = a1;
  swift_beginAccess();
  *id v9 = a2;
  v9[1] = a3;
  swift_bridgeObjectRelease();
  v12.receiver = v3;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

id sub_10024F4C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10024F5C4()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10024F610(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_tracked);
}

uint64_t sub_10024F61C(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (unsigned char *)(*v4 + *a4);
  uint64_t result = swift_beginAccess();
  *id v6 = a1;
  return result;
}

uint64_t (*sub_10024F668())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10024F6C8(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDNowPlayingAirPlaySessionEvents_eventName);
}

uint64_t sub_10024F6D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (uint64_t *)(*v3 + *a3);
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  return v5;
}

unint64_t sub_10024F730()
{
  return sub_10024EC90();
}

uint64_t sub_10024F754()
{
  return sub_10024EBFC();
}

id sub_10024F778(void *a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_tracked] = 0;
  uint64_t v5 = (uint64_t *)&v2[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_eventName];
  *uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5[1] = v6;
  uint64_t v7 = OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_propertyMap;
  sub_100013A80(&qword_10047A868);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5BA0;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v10;
  uint64_t v11 = v2;
  *(void *)&v2[v7] = sub_1001FA498(inited, &qword_10047A9D8, &qword_10047A9E0);
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___request] = 0;
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___recon] = 0;
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics____lazy_storage___whaConnect] = 0;
  *(void *)&v11[OBJC_IVAR___MRDGroupSessionJoinAttemptAnalytics_joinMode] = a1;
  id v12 = a1;

  v14.receiver = v11;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

unint64_t sub_10024F8D0()
{
  sub_100013A80(&qword_10047A9B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C6380;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD000000000000013;
  *(void *)(inited + 48) = 0x80000001003C7400;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD000000000000011;
  *(void *)(inited + 72) = 0x80000001003C7420;
  *(void *)(inited + 80) = swift_getKeyPath();
  strcpy((char *)(inited + 88), "addLocalDevice");
  *(unsigned char *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 0xD000000000000010;
  *(void *)(inited + 120) = 0x80000001003C7450;
  *(void *)(inited + 128) = swift_getKeyPath();
  strcpy((char *)(inited + 136), "originForward");
  *(_WORD *)(inited + 150) = -4864;
  *(void *)(inited + 152) = swift_getKeyPath();
  strcpy((char *)(inited + 160), "findEndpoint");
  *(unsigned char *)(inited + 173) = 0;
  *(_WORD *)(inited + 174) = -5120;
  *(void *)(inited + 176) = swift_getKeyPath();
  *(void *)(inited + 184) = 0x7075727265746E69;
  *(void *)(inited + 192) = 0xE900000000000074;
  return sub_1001FA498(inited, &qword_10047A9B8, &qword_10047A9C0);
}

uint64_t type metadata accessor for GroupSessionJoinAttemptAnalytics()
{
  return self;
}

uint64_t type metadata accessor for GroupSessionCreateTimingEvents()
{
  return self;
}

uint64_t type metadata accessor for NowPlayingAirPlaySessionEvents()
{
  return self;
}

void type metadata accessor for MRAVOutputDeviceClusterType(uint64_t a1)
{
}

id sub_10024FAF0()
{
  uint64_t v0 = self;
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 isRemoteControllableApp:v1];

  return v2;
}

uint64_t sub_10024FB5C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

uint64_t type metadata accessor for MediaAppInFocusMonitor()
{
  return self;
}

uint64_t sub_10024FC34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  id v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, a1);
  }
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t result = kMRMediaRemoteFrameworkErrorDomain;
  if (kMRMediaRemoteFrameworkErrorDomain)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    id v12 = [v7 domain];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    if (v13 == v9 && v15 == v11)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_13;
      }
    }
    if ((uint64_t)[v7 code] < 200)
    {
LABEL_13:

      return 0;
    }
    uint64_t v18 = (uint64_t)[v7 code];

    return v18 < 300;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10024FE50@<X0>(uint64_t a1@<X8>)
{
  return sub_10024FEDC(&OBJC_IVAR___MRDTimingEvent_startDate, a1);
}

uint64_t sub_10024FE5C(uint64_t a1)
{
  return sub_10024FF40(a1, &OBJC_IVAR___MRDTimingEvent_startDate);
}

uint64_t sub_10024FE68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_100479F98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024FED0@<X0>(uint64_t a1@<X8>)
{
  return sub_10024FEDC(&OBJC_IVAR___MRDTimingEvent_endDate, a1);
}

uint64_t sub_10024FEDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess();
  return sub_1001E71E8(v4, a2, &qword_100479F98);
}

uint64_t sub_10024FF34(uint64_t a1)
{
  return sub_10024FF40(a1, &OBJC_IVAR___MRDTimingEvent_endDate);
}

uint64_t sub_10024FF40(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess();
  sub_10024FE68(a1, v4);
  return swift_endAccess();
}

uint64_t sub_10025001C()
{
  NSString v1 = (uint64_t *)(v0 + OBJC_IVAR___MRDTimingEvent_error);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_errorRetain();
  return v2;
}

uint64_t sub_1002500D4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MRDTimingEvent_error);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_errorRelease();
}

uint64_t (*sub_100250128())()
{
  return j__swift_endAccess;
}

uint64_t sub_100250184()
{
  uint64_t v1 = sub_100013A80(&qword_100479F98);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x80))(v12);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v15(v6, 1, v7) == 1)
  {
    uint64_t v16 = (uint64_t)v6;
LABEL_5:
    sub_100009A08(v16, &qword_100479F98);
    return 0;
  }
  char v17 = v6;
  uint64_t v18 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v19 = v18(v14, v17, v7);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x68))(v19);
  if (v15(v4, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    uint64_t v16 = (uint64_t)v4;
    goto LABEL_5;
  }
  v18(v11, v4, v7);
  Date.timeIntervalSince(_:)();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v11, v7);
  v23(v14, v7);
  return v22;
}

NSNumber sub_1002504D8()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0xB0))();
  if (v1) {
    return 0;
  }
  else {
    return Double._bridgeToObjectiveC()();
  }
}

BOOL sub_100250538()
{
  uint64_t v1 = sub_100013A80(&qword_100479F98);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v13 - v6;
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x68))(v5);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  sub_100009A08((uint64_t)v7, &qword_100479F98);
  if (v10 == 1)
  {
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    uint64_t v11 = (uint64_t)v0 + OBJC_IVAR___MRDTimingEvent_startDate;
    swift_beginAccess();
    sub_10024FE68((uint64_t)v4, v11);
    swift_endAccess();
  }
  return v10 == 1;
}

BOOL sub_100250720(void *a1)
{
  uint64_t v3 = sub_100013A80(&qword_100479F98);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v17 - v8;
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x80))(v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  sub_100009A08((uint64_t)v9, &qword_100479F98);
  if (v12 == 1)
  {
    Date.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    uint64_t v13 = (uint64_t)v1 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess();
    sub_10024FE68((uint64_t)v6, v13);
    swift_endAccess();
    if (a1)
    {
      v17[1] = a1;
      swift_errorRetain();
      sub_100013A80(&qword_100478740);
      sub_10018FE08(0, &qword_10047A198);
      if ((swift_dynamicCast() & 1) != 0
        && (id v14 = v17[0],
            id v15 = [v17[0] recursiveUnderlyingError],
            v14,
            v15))
      {
        a1 = v15;
      }
      else
      {
        swift_errorRetain();
      }
    }
    (*(void (**)(void *))((swift_isaMask & *v1) + 0xA0))(a1);
  }
  return v12 == 1;
}

uint64_t sub_1002509EC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))(0);
}

uint64_t type metadata accessor for TimingEvent()
{
  uint64_t result = qword_100480B48;
  if (!qword_100480B48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_100250BB4()
{
  return sub_1002523BC(0, type metadata accessor for TimingEvent);
}

void MRDTimingEvents.orderedEvents.getter()
{
}

NSNumber MRDTimingEvents.objC_totalDuration.getter()
{
  id v1 = v0;
  sub_100250D88();

  return Double._bridgeToObjectiveC()();
}

uint64_t sub_100250D88()
{
  uint64_t v1 = sub_100013A80(&qword_100479F98);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  unint64_t v51 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v44 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v44 - v8);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v54 = type metadata accessor for Date();
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v12 = __chkstk_darwin(v54);
  uint64_t v49 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x50);
  uint64_t v46 = (swift_isaMask & *v0) + 80;
  int v47 = v14;
  unint64_t v15 = v14(v12);
  unint64_t v16 = v15;
  uint64_t v45 = v6;
  char v48 = v0;
  uint64_t v50 = v11;
  if (!(v15 >> 62))
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v25 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, 1, 1, v54);
    return sub_100009A08(v25, &qword_100479F98);
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v53 = v16 & 0xC000000000000001;
  uint64_t v55 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48);
  uint64_t v18 = 4;
  while (1)
  {
    if (v53) {
      uint64_t v19 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v19 = *(id *)(v16 + 8 * v18);
    }
    uint64_t v20 = v19;
    uint64_t v21 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v22 = *(void (**)(void))((swift_isaMask & *v19) + 0x68);
    v22();
    uint64_t v23 = *v55;
    unsigned int v24 = (*v55)(v9, 1, v54);
    sub_100009A08((uint64_t)v9, &qword_100479F98);
    if (v24 != 1) {
      break;
    }

    ++v18;
    if (v21 == v17) {
      goto LABEL_10;
    }
  }
  uint64_t v27 = swift_bridgeObjectRelease_n();
  uint64_t v25 = (uint64_t)v50;
  ((void (*)(uint64_t))v22)(v27);

  uint64_t v28 = v54;
  if (v23((uint64_t *)v25, 1, v54) == 1) {
    return sub_100009A08(v25, &qword_100479F98);
  }
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 32))(v49, v25, v28);
  unint64_t v30 = v47(v29);
  unint64_t v31 = v30;
  unint64_t v56 = v30;
  if (v30 >> 62)
  {
LABEL_36:
    unint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v16 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_15:
      unint64_t v53 = v31 & 0xFFFFFFFFFFFFFF8;
      uint64_t v9 = &qword_100479F98;
      uint64_t v32 = (uint64_t)v51;
      while (!__OFSUB__(v16--, 1))
      {
        if ((v31 & 0xC000000000000001) != 0)
        {
          int64_t v34 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v16 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          if (v16 >= *(void *)(v53 + 16)) {
            goto LABEL_35;
          }
          int64_t v34 = *(id *)(v31 + 32 + 8 * v16);
        }
        uint64_t v35 = v34;
        (*(void (**)(void))((swift_isaMask & *v34) + 0x80))();
        unsigned int v36 = v23((uint64_t *)v32, 1, v28);
        sub_100009A08(v32, &qword_100479F98);

        if (v36 != 1)
        {
          __chkstk_darwin(v37);
          *(&v44 - 2) = (uint64_t)&v56;
          unint64_t v57 = v16;
          sub_1002538F0(&v57, (unint64_t *)&v58);
          uint64_t v38 = v58;
          uint64_t v28 = v54;
          goto LABEL_26;
        }
        if (!v16) {
          goto LABEL_24;
        }
      }
      goto LABEL_31;
    }
  }
LABEL_24:
  uint64_t v38 = 0;
LABEL_26:
  uint64_t v39 = swift_bridgeObjectRelease();
  if (!v38) {
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v49, v28);
  }
  uint64_t v40 = v28;
  Swift::String v41 = (uint64_t *)v45;
  (*(void (**)(uint64_t))((swift_isaMask & *v38) + 0x80))(v39);
  uint64_t result = v23(v41, 1, v40);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    int64_t v42 = v49;
    Date.timeIntervalSince(_:)();

    int64_t v43 = *(void (**)(char *, uint64_t))(v52 + 8);
    v43(v42, v40);
    return ((uint64_t (*)(uint64_t *, uint64_t))v43)(v41, v40);
  }
  return result;
}

uint64_t sub_100251370(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100013A80(&qword_100479F98);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v54 = (char *)&v46 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v46 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v46 - v14;
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v52 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  uint64_t v49 = a1;
  uint64_t v50 = v2;
  int v47 = v17;
  uint64_t v48 = a2 + 8;
  unint64_t v18 = v17(a1, a2);
  unint64_t v19 = v18;
  uint64_t v46 = v8;
  uint64_t v51 = a2;
  unint64_t v53 = v15;
  if (!(v18 >> 62))
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    uint64_t v28 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v53, 1, 1, v57);
    return sub_100009A08(v28, &qword_100479F98);
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v56 = v19 & 0xC000000000000001;
  unint64_t v58 = (uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  uint64_t v21 = 4;
  while (1)
  {
    if (v56) {
      uint64_t v22 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v22 = *(id *)(v19 + 8 * v21);
    }
    uint64_t v23 = v22;
    uint64_t v24 = v21 - 3;
    if (__OFADD__(v21 - 4, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    uint64_t v25 = *(void (**)(void))((swift_isaMask & *v22) + 0x68);
    v25();
    int64_t v26 = *v58;
    unsigned int v27 = (*v58)(v13, 1, v57);
    sub_100009A08((uint64_t)v13, &qword_100479F98);
    if (v27 != 1) {
      break;
    }

    ++v21;
    if (v24 == v20) {
      goto LABEL_10;
    }
  }
  uint64_t v30 = swift_bridgeObjectRelease_n();
  uint64_t v28 = (uint64_t)v53;
  ((void (*)(uint64_t))v25)(v30);

  uint64_t v31 = v57;
  if (v26((char *)v28, 1, v57) == 1) {
    return sub_100009A08(v28, &qword_100479F98);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v52, v28, v31);
  unint64_t v32 = v47(v49, v51);
  unint64_t v33 = v32;
  unint64_t v59 = v32;
  if (v32 >> 62)
  {
LABEL_36:
    unint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v19 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_15:
      unint64_t v56 = v33 & 0xFFFFFFFFFFFFFF8;
      uint64_t v13 = (char *)(v33 + 32);
      uint64_t v34 = (uint64_t)v54;
      while (!__OFSUB__(v19--, 1))
      {
        if ((v33 & 0xC000000000000001) != 0)
        {
          unsigned int v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v19 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          if (v19 >= *(void *)(v56 + 16)) {
            goto LABEL_35;
          }
          unsigned int v36 = *(id *)&v13[8 * v19];
        }
        uint64_t v37 = v36;
        (*(void (**)(void))((swift_isaMask & *v36) + 0x80))();
        unsigned int v38 = v26((char *)v34, 1, v31);
        sub_100009A08(v34, &qword_100479F98);

        if (v38 != 1)
        {
          __chkstk_darwin(v39);
          *(&v46 - 2) = (char *)&v59;
          unint64_t v60 = v19;
          sub_1002538F0(&v60, (unint64_t *)&v61);
          uint64_t v40 = v61;
          goto LABEL_26;
        }
        if (!v19) {
          goto LABEL_24;
        }
      }
      goto LABEL_31;
    }
  }
LABEL_24:
  uint64_t v40 = 0;
LABEL_26:
  uint64_t v41 = swift_bridgeObjectRelease();
  if (!v40) {
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v52, v57);
  }
  int64_t v42 = v46;
  (*(void (**)(uint64_t))((swift_isaMask & *v40) + 0x80))(v41);
  uint64_t v43 = v57;
  uint64_t result = v26(v42, 1, v57);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v44 = v52;
    Date.timeIntervalSince(_:)();

    uint64_t v45 = *(void (**)(char *, uint64_t))(v55 + 8);
    v45(v44, v43);
    return ((uint64_t (*)(char *, uint64_t))v45)(v42, v43);
  }
  return result;
}

uint64_t MRDTimingEvents.objC_firstError.getter()
{
  id v1 = v0;
  uint64_t v2 = sub_1002519E8();

  return v2;
}

uint64_t sub_1002519E8()
{
  unint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x50))();
  unint64_t v2 = v1;
  if (v1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      uint64_t v5 = (v2 & 0xC000000000000001) != 0
         ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = *(uint64_t (**)(void))((swift_isaMask & *v5) + 0x98);
      uint64_t v9 = v8();
      swift_errorRelease();
      if (v9)
      {
        uint64_t v11 = swift_bridgeObjectRelease_n();
        uint64_t v12 = ((uint64_t (*)(uint64_t))v8)(v11);

        return v12;
      }

      ++v4;
      if (v7 == v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t sub_100251B58(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 8))();
  unint64_t v3 = v2;
  if (v2 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      uint64_t v6 = (v3 & 0xC000000000000001) != 0
         ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v3 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v9 = *(uint64_t (**)(void))((swift_isaMask & *v6) + 0x98);
      uint64_t v10 = v9();
      swift_errorRelease();
      if (v10)
      {
        uint64_t v12 = swift_bridgeObjectRelease_n();
        uint64_t v13 = ((uint64_t (*)(uint64_t))v9)(v12);

        return v13;
      }

      ++v5;
      if (v8 == v4) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

unint64_t MRDTimingEvents.objC_condensedEvent.getter()
{
  id v1 = v0;
  unint64_t v2 = sub_100251D28();

  return v2;
}

unint64_t sub_100251D28()
{
  uint64_t v1 = sub_100013A80(&qword_100479F98);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v20 - v6;
  unint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x50))(v5);
  unint64_t v9 = v8;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t result = (unint64_t)[objc_allocWithZone((Class)type metadata accessor for TimingEvent()) init];
  uint64_t v12 = (void *)result;
  if ((v9 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    uint64_t v13 = *(id *)(v9 + 32);
  }
  (*(void (**)(void))((swift_isaMask & *v13) + 0x68))();

  uint64_t v14 = (uint64_t)v12 + OBJC_IVAR___MRDTimingEvent_startDate;
  swift_beginAccess();
  sub_10024FE68((uint64_t)v7, v14);
  swift_endAccess();
  unint64_t result = v10 - 1;
  if (__OFSUB__(v10, 1))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    unint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
    uint64_t v16 = v15;
    uint64_t v17 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0x80))(v17);

    uint64_t v18 = (uint64_t)v12 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess();
    sub_10024FE68((uint64_t)v4, v18);
    swift_endAccess();
    uint64_t v19 = sub_1002519E8();
    (*(void (**)(uint64_t))((swift_isaMask & *v12) + 0xA0))(v19);
    return (unint64_t)v12;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (result < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    unint64_t v15 = *(id *)(v9 + 8 * result + 32);
    goto LABEL_12;
  }
LABEL_20:
  __break(1u);
  return result;
}

unint64_t sub_100252020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_100479F98);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v22 - v8;
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  unint64_t v11 = v10;
  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t result = (unint64_t)[objc_allocWithZone((Class)type metadata accessor for TimingEvent()) init];
  uint64_t v14 = (void *)result;
  if ((v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    unint64_t v15 = *(id *)(v11 + 32);
  }
  (*(void (**)(void))((swift_isaMask & *v15) + 0x68))();

  uint64_t v16 = (uint64_t)v14 + OBJC_IVAR___MRDTimingEvent_startDate;
  swift_beginAccess();
  sub_10024FE68((uint64_t)v9, v16);
  swift_endAccess();
  unint64_t result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v17 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
    uint64_t v18 = v17;
    uint64_t v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((swift_isaMask & *v18) + 0x80))(v19);

    uint64_t v20 = (uint64_t)v14 + OBJC_IVAR___MRDTimingEvent_endDate;
    swift_beginAccess();
    sub_10024FE68((uint64_t)v7, v20);
    swift_endAccess();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
    (*(void (**)(uint64_t))((swift_isaMask & *v14) + 0xA0))(v21);
    return (unint64_t)v14;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_19;
  }
  if (result < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v17 = *(id *)(v11 + 8 * result + 32);
    goto LABEL_12;
  }
LABEL_20:
  __break(1u);
  return result;
}

id MRDTimingEvents.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MRDTimingEvents();
  return objc_msgSendSuper2(&v2, "init");
}

id MRDTimingEvents.__deallocating_deinit(uint64_t a1)
{
  return sub_1002523BC(a1, type metadata accessor for MRDTimingEvents);
}

id sub_1002523BC(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_1002523F4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x50))();
}

void sub_100252448(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((*(uint64_t (**)(void))(a2 + 16))()) {
    return;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 24))(1, a1, a2);
  uint64_t v6 = swift_allocObject();
  sub_100013A80(&qword_100478708);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  uint64_t v53 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t))(v53 + 16))(a1);
  *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
  unint64_t v58 = (id *)v6;
  *(void *)(v6 + 16) = sub_10019A6D8(inited);
  uint64_t v55 = a2;
  uint64_t v56 = a1;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v60 = v9 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v59 = (unint64_t)(v12 + 63) >> 6;
  if ((v13 & v11) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v15 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v15 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v10 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v9 + 56) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v3;
    uint64_t v21 = swift_getAtKeyPath();
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)aBlock[0]) + 0xB0))(v21);
    char v23 = v22;

    if (v23)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v3 = v20;
      if (v14) {
        goto LABEL_5;
      }
    }
    else
    {
      v54.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v58[2];
      uint64_t v28 = aBlock[0];
      v58[2] = (id)0x8000000000000000;
      unint64_t v30 = sub_100013660(v18, v19);
      uint64_t v31 = v28[2];
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        goto LABEL_41;
      }
      if (v28[3] >= v33)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          char v45 = v29;
          sub_10025373C();
          char v29 = v45;
        }
      }
      else
      {
        char v57 = v29;
        sub_10025342C(v33, isUniquelyReferenced_nonNull_native);
        unint64_t v34 = sub_100013660(v18, v19);
        int v36 = v35 & 1;
        char v29 = v57;
        if ((v57 & 1) != v36) {
          goto LABEL_43;
        }
        unint64_t v30 = v34;
      }
      uint64_t v3 = v20;
      uint64_t v37 = aBlock[0];
      if (v29)
      {
        uint64_t v38 = *((void *)aBlock[0] + 7);
        uint64_t v39 = 8 * v30;
        id v40 = aBlock[0];

        *(NSNumber *)(v38 + v39) = v54;
      }
      else
      {
        *((void *)aBlock[0] + (v30 >> 6) + 8) |= 1 << v30;
        uint64_t v41 = (uint64_t *)(v37[6] + 16 * v30);
        uint64_t *v41 = v18;
        v41[1] = v19;
        *(NSNumber *)(v37[7] + 8 * v30) = v54;
        uint64_t v42 = v37[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_42;
        }
        _OWORD v37[2] = v44;
        id v40 = v37;
        swift_bridgeObjectRetain();
      }
      v58[2] = v40;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_5;
      }
    }
LABEL_8:
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v24 >= v59) {
      goto LABEL_32;
    }
    unint64_t v25 = *(void *)(v60 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v59) {
        goto LABEL_32;
      }
      unint64_t v25 = *(void *)(v60 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_19:
    unint64_t v14 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 2;
  if (v26 < v59)
  {
    unint64_t v25 = *(void *)(v60 + 8 * v26);
    if (!v25)
    {
      while (1)
      {
        int64_t v10 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          break;
        }
        if (v10 >= v59) {
          goto LABEL_32;
        }
        unint64_t v25 = *(void *)(v60 + 8 * v10);
        ++v26;
        if (v25) {
          goto LABEL_19;
        }
      }
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    int64_t v10 = v26;
    goto LABEL_19;
  }
LABEL_32:
  swift_release();
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(v55 + 56))(v56);
  sub_100252A1C(v46);
  unint64_t v48 = v47;
  swift_bridgeObjectRelease();
  if (!v48) {
    unint64_t v48 = sub_10019A6D8((uint64_t)_swiftEmptyArrayStorage);
  }
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = v58[2];
  v58[2] = (id)0x8000000000000000;
  sub_100253144(v48, (uint64_t)sub_100253964, 0, v49, aBlock);
  v58[2] = aBlock[0];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(v55 + 40))(v56);
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((*(uint64_t (**)(uint64_t))(v53 + 24))(v56))
  {
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v51 = 0;
  }
  aBlock[4] = sub_1002539B0;
  aBlock[5] = v58;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  void aBlock[2] = sub_10019A7F4;
  aBlock[3] = &unk_100424198;
  uint64_t v52 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  MRAnalyticsSendEvent();
  _Block_release(v52);
  swift_release();
}

void sub_100252A1C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100013A80((uint64_t *)&unk_100478710);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 64);
  uint64_t v6 = &v41;
  int64_t v34 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (uint64_t *)&unk_10047AAE0;
  uint64_t v9 = &qword_100479FA0;
  int64_t v10 = NSObject_ptr;
  while (1)
  {
    if (v5)
    {
      uint64_t v36 = (v5 - 1) & v5;
      int64_t v37 = v7;
      unint64_t v19 = __clz(__rbit64(v5)) | (v7 << 6);
    }
    else
    {
      int64_t v20 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_36;
      }
      if (v20 >= v34)
      {
LABEL_33:
        sub_10018F864();
        return;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v20);
      int64_t v22 = v7 + 1;
      if (!v21)
      {
        int64_t v22 = v7 + 2;
        if (v7 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v7 + 3;
          if (v7 + 3 >= v34) {
            goto LABEL_33;
          }
          unint64_t v21 = *(void *)(v35 + 8 * v22);
          if (!v21)
          {
            int64_t v22 = v7 + 4;
            if (v7 + 4 >= v34) {
              goto LABEL_33;
            }
            unint64_t v21 = *(void *)(v35 + 8 * v22);
            if (!v21)
            {
              uint64_t v23 = v7 + 5;
              if (v7 + 5 >= v34) {
                goto LABEL_33;
              }
              unint64_t v21 = *(void *)(v35 + 8 * v23);
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_37;
                  }
                  if (v22 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = *(void *)(v35 + 8 * v22);
                  ++v23;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v22 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v36 = (v21 - 1) & v21;
      int64_t v37 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    int64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    sub_10018FDAC(*(void *)(v1 + 56) + 32 * v19, (uint64_t)v6);
    v40[0] = v26;
    v40[1] = v25;
    sub_10018FDAC((uint64_t)v6, (uint64_t)v39);
    swift_bridgeObjectRetain_n();
    sub_100009A08((uint64_t)v40, v8);
    sub_10018FE08(0, v9);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();

      sub_10018F864();
      swift_release();
      return;
    }
    unint64_t v27 = sub_100013660(v26, v25);
    unint64_t v28 = v27;
    if (v29)
    {
      uint64_t v11 = v10;
      uint64_t v12 = v9;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      unint64_t v15 = v8;
      uint64_t v16 = (uint64_t *)(v2[6] + 16 * v27);
      swift_bridgeObjectRelease();
      *uint64_t v16 = v26;
      v16[1] = v25;
      uint64_t v8 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v9 = v12;
      int64_t v10 = v11;
      uint64_t v17 = v2[7];
      uint64_t v18 = 8 * v28;

      *(void *)(v17 + v18) = v38;
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v27;
    unint64_t v30 = (uint64_t *)(v2[6] + 16 * v27);
    *unint64_t v30 = v26;
    v30[1] = v25;
    *(void *)(v2[7] + 8 * v27) = v38;
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_35;
    }
    v2[2] = v33;
LABEL_8:
    unint64_t v5 = v36;
    int64_t v7 = v37;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100252DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100013A80(&qword_100479F98);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v30 = v10 + 8;
  uint64_t v31 = v10;
  char v29 = v11;
  unint64_t v12 = ((uint64_t (*)(uint64_t))v11)(a2);
  unint64_t v13 = v12;
  unint64_t v36 = v12;
  uint64_t v34 = a2;
  uint64_t v35 = v3;
  uint64_t v32 = a1;
  uint64_t v33 = a3;
  if (v12 >> 62) {
    goto LABEL_26;
  }
  for (unint64_t i = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10); i; unint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    while (!__OFSUB__(i--, 1))
    {
      if ((v13 & 0xC000000000000001) != 0)
      {
        uint64_t v16 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((i & 0x8000000000000000) != 0) {
          goto LABEL_24;
        }
        if (i >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_25;
        }
        uint64_t v16 = *(id *)(v13 + 32 + 8 * i);
      }
      uint64_t v17 = v16;
      (*(void (**)(void))((swift_isaMask & *v16) + 0x68))();
      uint64_t v18 = type metadata accessor for Date();
      int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v9, 1, v18);
      sub_100009A08((uint64_t)v9, &qword_100479F98);

      if (v19 != 1)
      {
        __chkstk_darwin(v20);
        *(&v28 - 2) = (uint64_t)&v36;
        unint64_t v37 = i;
        sub_1002538F0(&v37, (unint64_t *)&v38);
        uint64_t v22 = v34;
        unint64_t v21 = v38;
        goto LABEL_14;
      }
      if (!i) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    ;
  }
LABEL_12:
  unint64_t v21 = 0;
  uint64_t v22 = v34;
LABEL_14:
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_21;
  }
  unint64_t v23 = v29(v22, v31);
  unint64_t v24 = v23;
  if (!(v23 >> 62))
  {
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_17;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_28;
  }
LABEL_17:
  if ((v24 & 0xC000000000000001) != 0)
  {
    uint64_t v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_20;
  }
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v25 = *(id *)(v24 + 32);
LABEL_20:
    unint64_t v21 = v25;
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v26 = *(void (**)(uint64_t))((swift_isaMask & *v21) + 0xC8);
    unint64_t v27 = v21;
    v26(v32);

LABEL_22:
    sub_100252448(v22, v33);
    return;
  }
  __break(1u);
}

unint64_t sub_1002530E8(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0) {
    return specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return (unint64_t)*(id *)(a2 + 8 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t sub_100253144(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100253AE4();
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  unint64_t v13 = (void *)*a5;
  unint64_t v15 = sub_100013660(v7, v8);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      uint64_t v22 = (void *)*a5;
      if (v14) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_10025373C();
      uint64_t v22 = (void *)*a5;
      if (v19) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    uint64_t v25 = (uint64_t *)(v22[6] + 16 * v15);
    *uint64_t v25 = v10;
    v25[1] = v11;
    *(void *)(v22[7] + 8 * v15) = v12;
    uint64_t v26 = v22[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v28;
LABEL_13:
    sub_100253AE4();
    if (v30)
    {
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      uint64_t v34 = v31;
      do
      {
        id v40 = (void *)*a5;
        unint64_t v42 = sub_100013660(v32, v33);
        uint64_t v43 = v40[2];
        BOOL v44 = (v41 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          goto LABEL_25;
        }
        char v46 = v41;
        if (v40[3] < v45)
        {
          sub_10025342C(v45, 1);
          unint64_t v47 = sub_100013660(v32, v33);
          if ((v46 & 1) != (v48 & 1)) {
            goto LABEL_27;
          }
          unint64_t v42 = v47;
        }
        char v49 = (void *)*a5;
        if (v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = v49[7];
          uint64_t v36 = 8 * v42;

          *(void *)(v35 + v36) = v34;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          NSString v50 = (uint64_t *)(v49[6] + 16 * v42);
          uint64_t *v50 = v32;
          v50[1] = v33;
          *(void *)(v49[7] + 8 * v42) = v34;
          uint64_t v51 = v49[2];
          BOOL v27 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v27) {
            goto LABEL_26;
          }
          v49[2] = v52;
        }
        sub_100253AE4();
        uint64_t v32 = v37;
        uint64_t v33 = v38;
        uint64_t v34 = v39;
      }
      while (v38);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10018F864();
    return swift_release();
  }
  sub_10025342C(v18, a4 & 1);
  unint64_t v20 = sub_100013660(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    uint64_t v22 = (void *)*a5;
    if ((v19 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v23 = v22[7];
    uint64_t v24 = 8 * v15;

    *(void *)(v23 + v24) = v12;
    goto LABEL_13;
  }
LABEL_27:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10025342C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80((uint64_t *)&unk_100478710);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

id sub_10025373C()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_100478710);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1002538F0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_100253C78(a1, a2);
}

uint64_t type metadata accessor for MRDTimingEvents()
{
  return self;
}

uint64_t sub_10025392C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

id sub_100253964@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  id v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();

  return v4;
}

uint64_t sub_1002539B0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002539E8()
{
  return type metadata accessor for TimingEvent();
}

void sub_1002539F0()
{
  sub_100253A8C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100253A8C()
{
  if (!qword_10047AAB0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047AAB0);
    }
  }
}

void sub_100253AE4()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    unint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      unint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

unint64_t sub_100253C78@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_1002530E8(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100253CBC()
{
  type metadata accessor for MediaControlActor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static MediaControlActor.shared = v0;
  return result;
}

uint64_t sub_100253CF8()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t *MediaControlActor.shared.unsafeMutableAddressor()
{
  if (qword_100480B60 != -1) {
    swift_once();
  }
  return &static MediaControlActor.shared;
}

uint64_t static MediaControlActor.shared.getter()
{
  if (qword_100480B60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MediaControlActor.shared.setter(uint64_t a1)
{
  if (qword_100480B60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static MediaControlActor.shared = a1;
  return swift_release();
}

uint64_t (*static MediaControlActor.shared.modify())()
{
  if (qword_100480B60 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t MediaControlActor.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t MediaControlActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t MediaControlActor.unownedExecutor.getter()
{
  return v0;
}

unint64_t sub_100253F5C()
{
  unint64_t result = qword_10047AAE8;
  if (!qword_10047AAE8)
  {
    type metadata accessor for MediaControlActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047AAE8);
  }
  return result;
}

uint64_t type metadata accessor for MediaControlActor()
{
  return self;
}

uint64_t sub_100253FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MediaControlActor();

  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_10025400C()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t withTimeout<A>(duration:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = v6;
  sub_100013A80(&qword_10047AB98);
  uint64_t inited = swift_initStackObject();
  v6[8] = inited;
  *(void *)(inited + 16) = 0;
  sub_100013A80(&qword_10047ABA0);
  uint64_t v13 = swift_initStackObject();
  v6[9] = v13;
  *(void *)(v13 + 16) = 0;
  sub_100013A80(&qword_10047ABA8);
  uint64_t v14 = swift_allocObject();
  v6[10] = v14;
  *(unsigned char *)(v14 + 16) = 0;
  sub_100013A80(&qword_10047CEF0);
  uint64_t v15 = swift_allocObject();
  v11[11] = v15;
  *(_DWORD *)(v15 + 16) = 0;
  uint64_t v16 = (void *)swift_task_alloc();
  v11[12] = v16;
  v16[2] = a6;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = v15;
  v16[6] = v14;
  v16[7] = inited;
  v16[8] = a2;
  v16[9] = a3;
  v16[10] = v13;
  uint64_t v17 = swift_task_alloc();
  v11[13] = v17;
  *(void *)(v17 + 16) = inited;
  *(void *)(v17 + 24) = v13;
  uint64_t v18 = (void *)swift_task_alloc();
  v11[14] = v18;
  *uint64_t v18 = v11;
  v18[1] = sub_100254284;
  return withTaskCancellationHandler<A>(operation:onCancel:)(a1, &unk_10047ABB8, v16, sub_10025599C, v17, a6);
}

uint64_t sub_100254284()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100254438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[10] = v10;
  v8[11] = v11;
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return _swift_task_switch(sub_100254470, 0, 0);
}

uint64_t sub_100254470()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  long long v11 = *(_OWORD *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  long long v5 = *(_OWORD *)(v0 + 24);
  long long v6 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 56) = v11;
  *(void *)(v4 + 72) = v3;
  *(void *)(v4 + 80) = v2;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100254594;
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v9, 0, 0, 0xD000000000000018, 0x80000001003B7400, sub_100255C84, v4, v8);
}

uint64_t sub_100254594()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002546D0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1002546D0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100254734(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  long long v9 = *(_OWORD *)(v1 + 72);
  long long v10 = *(_OWORD *)(v1 + 56);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 24);
  long long v7 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_10000D170;
  *(void *)(v5 + 88) = v4;
  *(_OWORD *)(v5 + 72) = v9;
  *(_OWORD *)(v5 + 56) = v10;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return _swift_task_switch(sub_100254470, 0, 0);
}

uint64_t sub_10025481C(uint64_t a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v49 = a8;
  NSString v50 = a2;
  uint64_t v53 = a4;
  uint64_t v54 = a7;
  uint64_t v51 = a3;
  uint64_t v52 = a6;
  sub_10018F8A4(&qword_100478740);
  uint64_t v12 = type metadata accessor for CheckedContinuation();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Task<>.checkCancellation()();
  uint64_t v47 = a9;
  uint64_t v45 = type metadata accessor for TaskPriority();
  uint64_t v19 = *(void *)(v45 - 8);
  BOOL v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v46 = v19 + 56;
  v44(v18, 1, 1, v45);
  uint64_t v40 = a10;
  uint64_t v41 = a1;
  unint64_t v20 = v15;
  char v48 = v15;
  uint64_t v21 = v13;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v42 = v13 + 16;
  uint64_t v43 = v22;
  v22(v20, a1, v12);
  uint64_t v23 = a5;
  uint64_t v24 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v39 = v24 | 7;
  char v25 = (void *)swift_allocObject();
  uint64_t v26 = v53;
  uint64_t v27 = (uint64_t)v25;
  _OWORD v25[2] = 0;
  v25[3] = 0;
  uint64_t v28 = v50;
  uint64_t v29 = v51;
  v25[4] = a10;
  v25[5] = v28;
  v25[6] = v29;
  v25[7] = v26;
  uint64_t v30 = v26;
  v25[8] = v23;
  NSString v50 = *(void (**)(void, void, void))(v21 + 32);
  v50((char *)v25 + ((v24 + 72) & ~v24), v48, v12);
  swift_retain();
  swift_retain();
  uint64_t v31 = v23;
  swift_retain();
  uint64_t v32 = sub_10018A588((uint64_t)v18, (uint64_t)&unk_10047ABD8, v27);
  *(void *)(v52 + 16) = v32;
  swift_retain();
  swift_release();
  v44(v18, 1, 1, v45);
  id v33 = v48;
  v43(v48, v41, v12);
  uint64_t v34 = (v24 + 80) & ~v24;
  uint64_t v35 = (void *)swift_allocObject();
  _OWORD v35[2] = 0;
  v35[3] = 0;
  uint64_t v36 = v54;
  v35[4] = v40;
  v35[5] = v36;
  v35[6] = v49;
  v35[7] = v32;
  v35[8] = v30;
  v35[9] = v31;
  v50((char *)v35 + v34, v33, v12);
  swift_retain();
  swift_retain();
  uint64_t v37 = sub_100196EE0((uint64_t)v18, (uint64_t)&unk_10047ABE8, (uint64_t)v35);
  *(void *)(v47 + 16) = v37;
  return swift_release();
}

uint64_t sub_100254B98(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[4] = a8;
  v8[5] = v18;
  v8[2] = a6;
  v8[3] = a7;
  sub_10018F8A4(&qword_100478740);
  uint64_t v10 = type metadata accessor for CheckedContinuation();
  v8[6] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[7] = v11;
  v8[8] = *(void *)(v11 + 64);
  v8[9] = swift_task_alloc();
  v8[10] = swift_task_alloc();
  uint64_t v12 = *(void *)(v18 - 8);
  v8[11] = v12;
  v8[12] = *(void *)(v12 + 64);
  v8[13] = swift_task_alloc();
  uint64_t v13 = swift_task_alloc();
  v8[14] = v13;
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v14 = (void *)swift_task_alloc();
  v8[15] = v14;
  *uint64_t v14 = v8;
  v14[1] = sub_100254D88;
  return v16(v13);
}

uint64_t sub_100254D88()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002550F0;
  }
  else {
    uint64_t v2 = sub_100254E9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100254E9C()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v19 = v0[3];
  unint64_t v20 = (os_unfair_lock_s *)v0[2];
  uint64_t v21 = v0[16];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v4, v0[4], v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v8);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v10 = (v5 + *(unsigned __int8 *)(v3 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v11 + v9, v4, v7);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v2, v8);
  uint64_t v12 = (void *)swift_task_alloc();
  v12[2] = v19;
  v12[3] = sub_100256AF4;
  v12[4] = v11;
  uint64_t v13 = swift_task_alloc();
  *(void *)(v13 + 16) = sub_10025675C;
  *(void *)(v13 + 24) = v12;
  os_unfair_lock_lock(v20 + 4);
  sub_100013C90();
  os_unfair_lock_unlock(v20 + 4);
  if (v21)
  {
    return swift_task_dealloc();
  }
  else
  {
    uint64_t v15 = v0[14];
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[5];
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_1002550F0()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[3];
  uint64_t v15 = (os_unfair_lock_s *)v0[2];
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 16))(v3, v0[4], v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v8, v3, v4);
  *(void *)(v10 + v9) = v1;
  uint64_t v11 = (void *)swift_task_alloc();
  v11[2] = v7;
  v11[3] = sub_1002568D4;
  v11[4] = v10;
  uint64_t v12 = swift_task_alloc();
  *(void *)(v12 + 16) = sub_10025675C;
  *(void *)(v12 + 24) = v11;
  swift_errorRetain();
  os_unfair_lock_lock(v15 + 4);
  sub_100013C90();
  os_unfair_lock_unlock(v15 + 4);
  swift_errorRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002552DC(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10018F8A4(&qword_100478740);
  type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1002553BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v14;
  v8[8] = v15;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  sub_10018F8A4(&qword_100478740);
  uint64_t v9 = type metadata accessor for CheckedContinuation();
  v8[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[10] = v10;
  v8[11] = *(void *)(v10 + 64);
  v8[12] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContinuousClock();
  v8[13] = v11;
  v8[14] = *(void *)(v11 - 8);
  v8[15] = swift_task_alloc();
  return _swift_task_switch(sub_100255510, 0, 0);
}

uint64_t sub_100255510()
{
  ContinuousClock.init()();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10047ABF0 + dword_10047ABF0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  void *v1 = v0;
  v1[1] = sub_1002555D0;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  return v5(v3, v2, 0, 0, 1);
}

uint64_t sub_1002555D0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 120);
  uint64_t v3 = *(void *)(*(void *)v1 + 112);
  uint64_t v4 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10025592C;
  }
  else {
    uint64_t v5 = sub_100255740;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100255740()
{
  uint64_t v15 = v0[17];
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = (os_unfair_lock_s *)v0[5];
  uint64_t v7 = v0[6];
  Task.cancel()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v9 + v8, v1, v2);
  uint64_t v10 = (void *)swift_task_alloc();
  v10[2] = v7;
  v10[3] = sub_100256684;
  v10[4] = v9;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v11 + 16) = sub_10025675C;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = v6 + 4;
  os_unfair_lock_lock(v6 + 4);
  sub_100013CA8();
  if (v15)
  {
    os_unfair_lock_unlock(v12);
    return swift_task_dealloc();
  }
  else
  {
    os_unfair_lock_unlock(v12);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10025592C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10025599C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(void *)(*(void *)(v0 + 16) + 16))
  {
    swift_retain();
    Task.cancel()();
    uint64_t result = swift_release();
  }
  if (*(void *)(v1 + 16))
  {
    swift_retain();
    sub_100013A80(&qword_100478740);
    Task.cancel()();
    return swift_release();
  }
  return result;
}

unint64_t sub_100255A58()
{
  unint64_t result = qword_10047ABC0;
  if (!qword_10047ABC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047ABC0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimeoutError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100255B48);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_100255B80()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Reference()
{
  return sub_1001A65D8();
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_10047ABC8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, &qword_10047ABC8);
    }
  }
}

uint64_t sub_100255C84(uint64_t a1)
{
  return sub_10025481C(a1, *(void (**)(void, void, void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16));
}

uint64_t sub_100255CBC()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100255DC0()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v2 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  uint64_t v3 = (int *)v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *unint64_t v8 = v1;
  v8[1] = sub_10000D170;
  return sub_100254B98((uint64_t)v8, v9, v10, v3, v4, v5, v6, v7);
}

uint64_t sub_100255EDC()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100255FE0()
{
  sub_10018F8A4(&qword_100478740);
  type metadata accessor for CheckedContinuation();
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100013F84;
  return sub_1002553BC((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

uint64_t sub_100256108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_10025620C, 0, 0);
}

uint64_t sub_10025620C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1002567C8(&qword_10047AC00, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1002567C8(&qword_10047AC08, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1002563AC;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1002563AC()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100256568, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100256568()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002565D4()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100256684()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_10025675C()
{
  return sub_100256BD8();
}

unint64_t sub_100256774()
{
  unint64_t result = qword_10047ABF8;
  if (!qword_10047ABF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047ABF8);
  }
  return result;
}

uint64_t sub_1002567C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100256810()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v1 = type metadata accessor for CheckedContinuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002568D4()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1002569CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10018F8A4(&qword_100478740);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v1 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + *(void *)(v3 + 64) + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v4 | v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v1);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_100256AF4()
{
  sub_10018F8A4(&qword_100478740);
  uint64_t v1 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1002552DC(v2);
}

uint64_t sub_100256BD8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 24);
    *(unsigned char *)(v1 + 16) = 1;
    return v2();
  }
  return result;
}

uint64_t (*sub_100256C20())()
{
  return j__swift_endAccess;
}

uint64_t sub_100256C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if ((a1 & 0x100000000) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_100013660(a2, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if (v11)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v3;
      uint64_t v16 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002619FC();
        uint64_t v13 = v16;
      }
      swift_bridgeObjectRelease();
      sub_10026154C(v9, v13);
      *uint64_t v4 = v13;
      swift_bridgeObjectRelease();
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
  }
  else
  {
    float v7 = *(float *)&a1;
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100261724(a2, a3, v8, v7);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100256DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10026188C(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_100013660(a2, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if (v11)
    {
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v3;
      uint64_t v16 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        sub_100261BAC();
        uint64_t v13 = v16;
      }
      swift_bridgeObjectRelease();
      sub_1001F1A4C(v9, v13);
      *uint64_t v4 = v13;
      swift_release();
      swift_bridgeObjectRelease();
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100256F30()
{
  uint64_t v1 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v5 - 8);
  float v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  uint64_t v26 = 60;
  unint64_t v27 = 0xE100000000000000;
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x746E656469202D20;
  v9._object = (void *)0xEF203A7265696669;
  String.append(_:)(v9);
  uint64_t v10 = *(void *)(v0 + 16);
  char v11 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A736D657469202CLL;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x616C50776F6E202CLL;
  v15._object = (void *)0xEE00203A676E6979;
  String.append(_:)(v15);
  uint64_t v16 = v0
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  swift_beginAccess();
  sub_1001E71E8(v16, (uint64_t)v7, &qword_1004794C0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    sub_100009A08((uint64_t)v7, &qword_1004794C0);
    uint64_t v17 = (void *)0xE300000000000000;
    uint64_t v18 = 7104878;
  }
  else
  {
    sub_100262B6C((uint64_t)v7, (uint64_t)v4, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    sub_100009A08((uint64_t)v7, &qword_1004794C0);
    uint64_t v18 = sub_1002A5B80();
    uint64_t v17 = v19;
    sub_100262BD4((uint64_t)v4, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 15913;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  return v26;
}

uint64_t sub_100257264()
{
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002572A4(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  a2(0);
  sub_10026377C(a3, a4);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100257330()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100009A08(v0+ OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo, &qword_1004794C0);

  return swift_deallocClassInstance();
}

uint64_t sub_1002573B4()
{
  return sub_100256F30();
}

uint64_t sub_1002573D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v881 = a7;
  uint64_t v920 = a5;
  uint64_t v912 = a4;
  uint64_t v911 = a3;
  uint64_t v950 = a2;
  uint64_t v9 = sub_100013A80(&qword_1004794B8);
  __chkstk_darwin(v9 - 8);
  uint64_t v935 = (uint64_t)v805 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v916 = type metadata accessor for RoutingControls();
  uint64_t v891 = *(void *)(v916 - 8);
  __chkstk_darwin(v916);
  v934 = (char *)v805 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v915 = type metadata accessor for Date();
  uint64_t v890 = *(void *)(v915 - 8);
  uint64_t v12 = __chkstk_darwin(v915);
  v931 = (char *)v805 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v914 = (char *)v805 - v14;
  uint64_t v15 = sub_100013A80(&qword_100478988);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)v805 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v939 = (uint64_t)v805 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v805 - v21;
  uint64_t v951 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v899 = *(void *)(v951 - 8);
  uint64_t v23 = __chkstk_darwin(v951);
  uint64_t v941 = (uint64_t)v805 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v936 = (uint64_t)v805 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v949 = (uint64_t)v805 - v28;
  __chkstk_darwin(v27);
  uint64_t v938 = (uint64_t)v805 - v29;
  uint64_t v864 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v945 = *(void *)(v864 - 8);
  __chkstk_darwin(v864);
  v863 = (char *)v805 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v878 = type metadata accessor for RoutingControl.RoutingControlType();
  unint64_t v937 = *(void *)(v878 - 8);
  __chkstk_darwin(v878);
  v877 = (char *)v805 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v882 = type metadata accessor for RoutingControl.Target();
  v932 = *(char **)(v882 - 8);
  uint64_t v32 = __chkstk_darwin(v882);
  v856 = (char *)v805 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  v874 = (void *)((char *)v805 - v35);
  uint64_t v36 = __chkstk_darwin(v34);
  char v38 = (char *)v805 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)v805 - v39;
  uint64_t v883 = type metadata accessor for RoutingControl();
  v908 = *(void (***)(char *, char *, uint64_t))(v883 - 8);
  __chkstk_darwin(v883);
  v886 = (char *)v805 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v918 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v898 = *(void *)(v918 - 8);
  uint64_t v42 = __chkstk_darwin(v918);
  uint64_t v906 = (uint64_t)v805 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  v858 = (void *)((char *)v805 - v45);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v862 = (uint64_t)v805 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  v865 = (void *)((char *)v805 - v49);
  __chkstk_darwin(v48);
  v870 = (void **)((char *)v805 - v50);
  uint64_t v880 = type metadata accessor for RoutingInteraction();
  v905 = *(void (***)(uint64_t, void, uint64_t, uint64_t))(v880 - 8);
  __chkstk_darwin(v880);
  v879 = (char *)v805 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v907 = type metadata accessor for Logger();
  uint64_t v897 = *(void *)(v907 - 8);
  uint64_t v52 = __chkstk_darwin(v907);
  uint64_t v54 = (char *)v805 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __chkstk_darwin(v52);
  v873 = (char *)v805 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v868 = (char *)v805 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v876 = (char *)v805 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v867 = (char *)v805 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v861 = (char *)v805 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v872 = (char *)v805 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v922 = (char *)v805 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v888 = (char *)v805 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v894 = (char *)v805 - v72;
  __chkstk_darwin(v71);
  v900 = (char *)v805 - v73;
  uint64_t v74 = sub_100013A80((uint64_t *)&unk_10047BC50);
  uint64_t v75 = __chkstk_darwin(v74 - 8);
  uint64_t v859 = (uint64_t)v805 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __chkstk_darwin(v75);
  v875 = (char *)v805 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v887 = (char *)v805 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v889 = (uint64_t)v805 - v82;
  __chkstk_darwin(v81);
  v895 = (char *)v805 - v83;
  v910 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))type metadata accessor for RoutingSessionConfiguration.Context();
  v904 = (void (**)(char *, uint64_t, uint64_t))*(v910 - 1);
  __chkstk_darwin(v910);
  v909 = (void (**)(char *, char *, uint64_t))((char *)v805 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v921 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v892 = *(void *)(v921 - 8);
  uint64_t v85 = __chkstk_darwin(v921);
  v855 = (char *)v805 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v85);
  v928 = (char *)v805 - v87;
  uint64_t v88 = sub_100013A80(&qword_1004794C0);
  uint64_t v89 = __chkstk_darwin(v88 - 8);
  uint64_t v930 = (uint64_t)v805 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __chkstk_darwin(v89);
  v917 = (char *)v805 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  uint64_t v923 = (uint64_t)v805 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  uint64_t v860 = (uint64_t)v805 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  uint64_t v866 = (uint64_t)v805 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  uint64_t v857 = (uint64_t)v805 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  uint64_t v869 = (uint64_t)v805 - v102;
  __chkstk_darwin(v101);
  uint64_t v925 = (uint64_t)v805 - v103;
  uint64_t v924 = type metadata accessor for HostedRoutingSourceSession(0);
  uint64_t v927 = *(void *)(v924 - 8);
  uint64_t v104 = __chkstk_darwin(v924);
  v929 = (void *)((char *)v805 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v106 = __chkstk_darwin(v104);
  uint64_t v913 = (uint64_t)v805 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v933 = (void *)((char *)v805 - v109);
  uint64_t v110 = __chkstk_darwin(v108);
  v947 = (void *)((char *)v805 - v111);
  uint64_t v112 = __chkstk_darwin(v110);
  uint64_t v114 = (void *)((char *)v805 - v113);
  uint64_t v115 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 112))(v112);
  unint64_t v116 = swift_bridgeObjectRetain();
  uint64_t inited = sub_100260560(v116);
  swift_bridgeObjectRelease();
  if (inited)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)a1;
  }
  uint64_t v944 = v115;
  var60[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
  int v118 = (char *)a1[2];
  v943 = v18;
  v919 = a1;
  v942 = v22;
  v852 = v54;
  v926 = v118;
  v847 = v38;
  v849 = (uint64_t *)v40;
  if (v118)
  {
    v948 = ((char *)v114 + *(int *)(v924 + 28));
    uint64_t v119 = (uint64_t)a1 + ((*(unsigned __int8 *)(v927 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v927 + 80));
    uint64_t v946 = *(void *)(v927 + 72);
    swift_bridgeObjectRetain();
    int v120 = v926;
    uint64_t v121 = v925;
    do
    {
      sub_100262B6C(v119, (uint64_t)v114, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v122 = *v114;
      uint64_t v123 = v114[1];
      uint64_t v124 = v114[4];
      sub_1001E71E8((uint64_t)v948, v121, &qword_1004794C0);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_100262BD4((uint64_t)v114, type metadata accessor for HostedRoutingSourceSession);
      type metadata accessor for RoutingOptimisticEngine.ItemSet();
      uint64_t v125 = swift_allocObject();
      sub_100261D64(v122, v123, v124, v121);
      swift_bridgeObjectRelease();
      uint64_t inited = (uint64_t)var60;
      sub_100256DD4(v125, v122, v123);
      v119 += v946;
      --v120;
    }
    while (v120);
    a1 = v919;
    swift_bridgeObjectRelease();
    uint64_t v22 = v942;
  }
  v960 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  uint64_t v126 = v944;
  uint64_t i = sub_100260608(v944);
  if (!i)
  {
    v948 = 0;
    uint64_t v128 = v947;
LABEL_10:
    swift_bridgeObjectRelease();
    v959 = _swiftEmptyArrayStorage;
    if (!v926)
    {
      LODWORD(v946) = enum case for RoutingItem.SelectionIndicator.selected(_:);
LABEL_61:
      uint64_t v196 = v960[7];
      v932 = (char *)(v960 + 7);
      uint64_t v197 = 1 << *((unsigned char *)v960 + 32);
      if (v197 < 64) {
        uint64_t v198 = ~(-1 << v197);
      }
      else {
        uint64_t v198 = -1;
      }
      uint64_t inited = v198 & v196;
      uint64_t v936 = (unint64_t)(v197 + 63) >> 6;
      v199 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v899 + 48);
      unint64_t v937 = (unint64_t)v960;
      swift_bridgeObjectRetain();
      uint64_t v200 = 0;
      while (1)
      {
        if (inited)
        {
          uint64_t v938 = (inited - 1) & inited;
          uint64_t v939 = v200;
          unint64_t v214 = __clz(__rbit64(inited)) | (v200 << 6);
          uint64_t v215 = (uint64_t)v943;
          v216 = v948;
        }
        else
        {
          BOOL v150 = __OFADD__(v200, 1);
          uint64_t v217 = v200 + 1;
          uint64_t v215 = (uint64_t)v943;
          v216 = v948;
          if (v150) {
            goto LABEL_355;
          }
          if (v217 >= v936)
          {
LABEL_109:
            swift_release();
            swift_bridgeObjectRelease();
            a1 = v959;
            swift_bridgeObjectRelease();
            return (uint64_t)a1;
          }
          unint64_t v218 = *(void *)&v932[8 * v217];
          if (!v218)
          {
            uint64_t v219 = v217 + 1;
            if (v217 + 1 >= v936) {
              goto LABEL_109;
            }
            unint64_t v218 = *(void *)&v932[8 * v219];
            if (!v218)
            {
              uint64_t v219 = v217 + 2;
              if (v217 + 2 >= v936) {
                goto LABEL_109;
              }
              unint64_t v218 = *(void *)&v932[8 * v219];
              if (!v218)
              {
                uint64_t v219 = v217 + 3;
                if (v217 + 3 >= v936) {
                  goto LABEL_109;
                }
                unint64_t v218 = *(void *)&v932[8 * v219];
                if (!v218)
                {
                  while (1)
                  {
                    uint64_t v217 = v219 + 1;
                    if (__OFADD__(v219, 1)) {
                      goto LABEL_356;
                    }
                    if (v217 >= v936) {
                      goto LABEL_109;
                    }
                    unint64_t v218 = *(void *)&v932[8 * v217];
                    ++v219;
                    if (v218) {
                      goto LABEL_78;
                    }
                  }
                }
              }
            }
            uint64_t v217 = v219;
          }
LABEL_78:
          uint64_t v938 = (v218 - 1) & v218;
          uint64_t v939 = v217;
          unint64_t v214 = __clz(__rbit64(v218)) + (v217 << 6);
        }
        v220 = (uint64_t *)(*(void *)(v937 + 48) + 16 * v214);
        uint64_t v126 = *v220;
        uint64_t v221 = v220[1];
        uint64_t v222 = var60[0];
        swift_bridgeObjectRetain_n();
        uint64_t v945 = v126;
        uint64_t inited = sub_1002605C4(v126, v221, v222);
        uint64_t v944 = v221;
        swift_bridgeObjectRelease();
        if (!inited) {
          goto LABEL_357;
        }
        v957 = _swiftEmptyArrayStorage;
        swift_beginAccess();
        uint64_t i = inited;
        uint64_t v126 = *(void *)(inited + 32);
        uint64_t v223 = *(void *)(v126 + 56);
        v947 = (uint64_t *)(v126 + 56);
        uint64_t v224 = 1 << *(unsigned char *)(v126 + 32);
        if (v224 < 64) {
          uint64_t v225 = ~(-1 << v224);
        }
        else {
          uint64_t v225 = -1;
        }
        unint64_t v226 = v225 & v223;
        v948 = ((unint64_t)(v224 + 63) >> 6);
        swift_bridgeObjectRetain();
        uint64_t v227 = 0;
        v942 = (char *)v126;
        while (v226)
        {
          while (1)
          {
            unint64_t v236 = __clz(__rbit64(v226));
            v226 &= v226 - 1;
            unint64_t v237 = v236 | (v227 << 6);
LABEL_98:
            v240 = (uint64_t *)(*(void *)(v126 + 48) + 16 * v237);
            uint64_t inited = *v240;
            uint64_t v241 = v240[1];
            swift_bridgeObjectRetain_n();
            sub_100260668(v950, inited, v241, v215);
            swift_bridgeObjectRelease();
            uint64_t v242 = v951;
            if ((*v199)(v215, 1, v951) == 1) {
              break;
            }
            v228 = v199;
            v229 = v216;
            uint64_t v230 = v941;
            sub_1002635B8(v215, v941, type metadata accessor for HostedRoutingItem);
            uint64_t v231 = v944;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v230 + 16) = v945;
            *(void *)(v230 + 24) = v231;
            *(unsigned char *)(v230 + *(int *)(v242 + 36)) = 1;
            uint64_t v232 = v230 + *(int *)(v242 + 32);
            sub_100009A08(v232, &qword_100478990);
            uint64_t v233 = type metadata accessor for RoutingItem.SelectionIndicator();
            uint64_t v234 = *(void *)(v233 - 8);
            (*(void (**)(uint64_t, void, uint64_t))(v234 + 104))(v232, v946, v233);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56))(v232, 0, 1, v233);
            uint64_t v215 = (uint64_t)v943;
            uint64_t v235 = v949;
            sub_100262B6C(v230, v949, type metadata accessor for HostedRoutingItem);
            uint64_t inited = (uint64_t)&v957;
            sub_10026084C(v235);
            v216 = v229;
            v199 = v228;
            uint64_t v126 = (uint64_t)v942;
            sub_100262BD4(v230, type metadata accessor for HostedRoutingItem);
            if (!v226) {
              goto LABEL_87;
            }
          }
          sub_100009A08(v215, &qword_100478988);
        }
LABEL_87:
        BOOL v150 = __OFADD__(v227++, 1);
        if (v150)
        {
          __break(1u);
          goto LABEL_350;
        }
        if (v227 < (uint64_t)v948)
        {
          unint64_t v238 = v947[v227];
          if (v238) {
            goto LABEL_97;
          }
          uint64_t v239 = v227 + 1;
          if (v227 + 1 < (uint64_t)v948)
          {
            unint64_t v238 = v947[v239];
            if (v238) {
              goto LABEL_96;
            }
            uint64_t v239 = v227 + 2;
            if (v227 + 2 < (uint64_t)v948)
            {
              unint64_t v238 = v947[v239];
              if (v238) {
                goto LABEL_96;
              }
              uint64_t v239 = v227 + 3;
              if (v227 + 3 < (uint64_t)v948) {
                break;
              }
            }
          }
        }
LABEL_65:
        v948 = v216;
        uint64_t v201 = i;
        swift_release();
        uint64_t v202 = (uint64_t)v957;
        uint64_t v203 = v201
             + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
        swift_beginAccess();
        uint64_t v204 = v930;
        sub_1001E71E8(v203, v930, &qword_1004794C0);
        uint64_t v205 = (uint64_t)v931;
        static Date.now.getter();
        uint64_t v206 = type metadata accessor for RoutingSession.HostInfo();
        uint64_t v207 = v935;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56))(v935, 1, 1, v206);
        v208 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
        v209 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
        char v210 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
        uint64_t v211 = (uint64_t)v934;
        j___s12MediaControl15RoutingControlsVACycfC();
        char v954 = 1;
        uint64_t v804 = v207;
        v212 = v929;
        sub_1002A3E0C(v945, v944, v202, v204, (uint64_t)v208, (uint64_t)v209, v205, v210 & 1, v929, 0, 1, v211, 1397702987, 0xE400000000000000, v804);
        uint64_t v126 = (uint64_t)type metadata accessor for HostedRoutingSourceSession;
        v213 = v933;
        sub_100262B6C((uint64_t)v212, (uint64_t)v933, type metadata accessor for HostedRoutingSourceSession);
        sub_1002609BC((uint64_t)v213);
        swift_release();
        sub_100262BD4((uint64_t)v212, type metadata accessor for HostedRoutingSourceSession);
        uint64_t v200 = v939;
        uint64_t inited = v938;
      }
      unint64_t v238 = v947[v239];
      if (v238)
      {
LABEL_96:
        uint64_t v227 = v239;
LABEL_97:
        unint64_t v226 = (v238 - 1) & v238;
        unint64_t v237 = __clz(__rbit64(v238)) + (v227 << 6);
        goto LABEL_98;
      }
      while (1)
      {
        uint64_t v227 = v239 + 1;
        if (__OFADD__(v239, 1)) {
          break;
        }
        if (v227 >= (uint64_t)v948) {
          goto LABEL_65;
        }
        unint64_t v238 = v947[v227];
        ++v239;
        if (v238) {
          goto LABEL_97;
        }
      }
LABEL_351:
      __break(1u);
LABEL_352:
      __break(1u);
LABEL_353:
      __break(1u);
LABEL_354:
      __break(1u);
LABEL_355:
      __break(1u);
LABEL_356:
      __break(1u);
LABEL_357:
      __break(1u);
LABEL_358:
      __break(1u);
LABEL_359:
      swift_errorRelease();
      __break(1u);
      swift_errorRelease();
      __break(1u);
LABEL_360:
      swift_errorRelease();
      __break(1u);
LABEL_361:
      v952 = 0;
      unint64_t v953 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      v794._countAndFlagsBits = 91;
      v794._object = (void *)0xE100000000000000;
      DefaultStringInterpolation.appendLiteral(_:)(v794);
      sub_100257264();
      v795._object = (void *)0x80000001003B7450;
      v795._countAndFlagsBits = 0xD000000000000027;
      DefaultStringInterpolation.appendLiteral(_:)(v795);
      uint64_t v796 = (uint64_t)v855;
      ((void (*)(void))v126)();
      sub_1002572A4(v796, (void (*)(void))&type metadata accessor for RoutingInteraction.Action, &qword_100477FF0, (void (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action);
      (*(void (**)(uint64_t, uint64_t))(v892 + 8))(v796, inited);
      v797._countAndFlagsBits = 0;
      v797._object = (void *)0xE000000000000000;
      DefaultStringInterpolation.appendLiteral(_:)(v797);
      LODWORD(vars8) = 0;
      uint64_t v798 = 241;
      goto LABEL_363;
    }
    v922 = (char *)a1 + ((*(unsigned __int8 *)(v927 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v927 + 80));
    v904 = (void (**)(char *, uint64_t, uint64_t))(v897 + 16);
    v903 = (void (**)(char *, uint64_t))(v897 + 8);
    int v130 = (unsigned int (**)(char *, uint64_t, uint64_t))(v899 + 48);
    LODWORD(v946) = enum case for RoutingItem.SelectionIndicator.selected(_:);
    v910 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v898 + 48);
    v905 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v898 + 56);
    v909 = (void (**)(char *, char *, uint64_t))(v890 + 16);
    v908 = (void (**)(char *, char *, uint64_t))(v891 + 16);
    swift_bridgeObjectRetain();
    uint64_t v131 = 0;
    long long v902 = xmmword_1003C5F10;
    v900 = (char *)&type metadata for Any + 8;
    unint64_t v937 = (unint64_t)v130;
    while (1)
    {
      if (a1[2] <= (unint64_t)v131) {
        goto LABEL_354;
      }
      uint64_t v132 = *(void *)(v927 + 72);
      v932 = v131;
      sub_100262B6C((uint64_t)&v922[v132 * (void)v131], (uint64_t)v128, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v133 = (uint64_t)v960;
      uint64_t v126 = *v128;
      uint64_t inited = v128[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v134 = sub_10018835C(v126, inited, v133);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v134)
      {
        sub_100262BD4((uint64_t)v128, type metadata accessor for HostedRoutingSourceSession);
      }
      else
      {
        uint64_t v135 = var60[0];
        swift_bridgeObjectRetain();
        int v136 = (void *)sub_1002605C4(v126, inited, v135);
        swift_bridgeObjectRelease();
        if (!v136) {
          goto LABEL_358;
        }
        uint64_t v137 = v136 + 4;
        swift_beginAccess();
        uint64_t v138 = *(void *)(v136[4] + 16);
        v928 = (char *)v136;
        if (!v138 && (v136[2] != v911 || v136[3] != v912))
        {
          uint64_t v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v139 & 1) == 0)
          {
            uint64_t inited = (uint64_t)v128;
            if ((sub_1002A0454(v139) & 1) == 0)
            {
              sub_100262BD4((uint64_t)v128, type metadata accessor for HostedRoutingSourceSession);
              swift_release();
              goto LABEL_13;
            }
            uint64_t v187 = sub_1001A69C4();
            (*v904)(v852, v187, v907);
            uint64_t v188 = swift_allocObject();
            *(void *)(v188 + 16) = v901;
            v189 = Logger.logObject.getter();
            int v190 = static os_log_type_t.error.getter();
            uint64_t v191 = swift_allocObject();
            *(unsigned char *)(v191 + 16) = 32;
            uint64_t v192 = swift_allocObject();
            *(unsigned char *)(v192 + 16) = 8;
            uint64_t v193 = swift_allocObject();
            *(void *)(v193 + 16) = sub_1002637D8;
            *(void *)(v193 + 24) = v188;
            uint64_t v126 = swift_allocObject();
            *(void *)(v126 + 16) = sub_1002621AC;
            *(void *)(v126 + 24) = v193;
            uint64_t v194 = swift_allocObject();
            *(void *)(v194 + 16) = sub_1002621B0;
            *(void *)(v194 + 24) = v126;
            sub_100013A80(&qword_10047AC10);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v902;
            *(void *)(inited + 32) = sub_100262188;
            *(void *)(inited + 40) = v191;
            *(void *)(inited + 48) = sub_1002639A0;
            *(void *)(inited + 56) = v192;
            *(void *)(inited + 64) = sub_1002621D8;
            *(void *)(inited + 72) = v194;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            LODWORD(v945) = v190;
            if (os_log_type_enabled(v189, (os_log_type_t)v190))
            {
              uint64_t v126 = swift_slowAlloc();
              v195 = (void *)swift_slowAlloc();
              v955[0] = 0;
              v957 = v195;
              *(_WORD *)uint64_t v126 = 258;
              *(unsigned char *)(v126 + 2) = *(unsigned char *)(v191 + 16);
              if (v948) {
                goto LABEL_359;
              }
              uint64_t inited = (uint64_t)v195;
              swift_release();
              *(unsigned char *)(v126 + 3) = *(unsigned char *)(v192 + 16);
              v956[0] = v126 + 4;
              swift_release();
              sub_100260EB4(v956, (uint64_t)v955, (uint64_t *)&v957, *(uint64_t (**)(void))(v194 + 16));
              uint64_t v22 = v942;
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v945, "[%s] optimisticSessions - Local item set is empty", (uint8_t *)v126, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v903)(v852, v907);
            }
            else
            {
              swift_release();
              swift_release();
              swift_release();

              (*v903)(v852, v907);
              uint64_t v22 = v942;
            }
          }
        }
        v956[0] = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v140 = *v137;
        uint64_t v141 = *(void *)(v140 + 56);
        uint64_t v944 = v140 + 56;
        uint64_t v142 = 1 << *(unsigned char *)(v140 + 32);
        if (v142 < 64) {
          uint64_t v143 = ~(-1 << v142);
        }
        else {
          uint64_t v143 = -1;
        }
        unint64_t v144 = v143 & v141;
        uint64_t v945 = (unint64_t)(v142 + 63) >> 6;
        swift_bridgeObjectRetain();
        uint64_t v145 = 0;
        for (uint64_t i = v140; v144; v140 = i)
        {
          while (1)
          {
            unint64_t v148 = __clz(__rbit64(v144));
            v144 &= v144 - 1;
            unint64_t v149 = v148 | (v145 << 6);
LABEL_39:
            Swift::String v153 = (uint64_t *)(*(void *)(v140 + 48) + 16 * v149);
            uint64_t v126 = *v153;
            uint64_t inited = v153[1];
            swift_bridgeObjectRetain_n();
            uint64_t v154 = swift_bridgeObjectRetain();
            v155 = v948;
            sub_100260668(v154, v126, inited, (uint64_t)v22);
            swift_bridgeObjectRelease();
            v156 = *v130;
            if ((*v130)(v22, 1, v951) == 1) {
              break;
            }
            v948 = v155;
            swift_bridgeObjectRelease();
            uint64_t v146 = v938;
            sub_1002635B8((uint64_t)v22, v938, type metadata accessor for HostedRoutingItem);
            uint64_t v126 = (uint64_t)type metadata accessor for HostedRoutingItem;
            uint64_t v147 = v949;
            sub_100262B6C(v146, v949, type metadata accessor for HostedRoutingItem);
            uint64_t inited = (uint64_t)v956;
            sub_10026084C(v147);
            sub_100262BD4(v146, type metadata accessor for HostedRoutingItem);
            if (!v144) {
              goto LABEL_28;
            }
          }
          sub_100009A08((uint64_t)v22, &qword_100478988);
          swift_bridgeObjectRetain();
          uint64_t v157 = v939;
          sub_100260668(v950, v126, inited, v939);
          v948 = v155;
          uint64_t v158 = v951;
          swift_bridgeObjectRelease();
          if (v156((char *)v157, 1, v158) == 1)
          {
            sub_100009A08(v157, &qword_100478988);
          }
          else
          {
            uint64_t v159 = v157;
            uint64_t v160 = v936;
            sub_1002635B8(v159, v936, type metadata accessor for HostedRoutingItem);
            uint64_t v162 = *v947;
            uint64_t v161 = v947[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(void *)(v160 + 16) = v162;
            *(void *)(v160 + 24) = v161;
            *(unsigned char *)(v160 + *(int *)(v158 + 36)) = 1;
            uint64_t v163 = v160 + *(int *)(v158 + 32);
            sub_100009A08(v163, &qword_100478990);
            uint64_t v164 = type metadata accessor for RoutingItem.SelectionIndicator();
            uint64_t v165 = *(void *)(v164 - 8);
            (*(void (**)(uint64_t, void, uint64_t))(v165 + 104))(v163, v946, v164);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v165 + 56))(v163, 0, 1, v164);
            uint64_t v126 = (uint64_t)type metadata accessor for HostedRoutingItem;
            uint64_t v166 = v949;
            sub_100262B6C(v160, v949, type metadata accessor for HostedRoutingItem);
            uint64_t inited = (uint64_t)v956;
            sub_10026084C(v166);
            sub_100262BD4(v160, type metadata accessor for HostedRoutingItem);
          }
          uint64_t v22 = v942;
          int v130 = (unsigned int (**)(char *, uint64_t, uint64_t))v937;
        }
LABEL_28:
        BOOL v150 = __OFADD__(v145++, 1);
        if (v150)
        {
LABEL_350:
          __break(1u);
          goto LABEL_351;
        }
        if (v145 < v945)
        {
          unint64_t v151 = *(void *)(v944 + 8 * v145);
          if (v151) {
            goto LABEL_38;
          }
          uint64_t v152 = v145 + 1;
          if (v145 + 1 < v945)
          {
            unint64_t v151 = *(void *)(v944 + 8 * v152);
            if (v151) {
              goto LABEL_37;
            }
            uint64_t v152 = v145 + 2;
            if (v145 + 2 < v945)
            {
              unint64_t v151 = *(void *)(v944 + 8 * v152);
              if (v151) {
                goto LABEL_37;
              }
              uint64_t v152 = v145 + 3;
              if (v145 + 3 < v945)
              {
                unint64_t v151 = *(void *)(v944 + 8 * v152);
                if (v151)
                {
LABEL_37:
                  uint64_t v145 = v152;
LABEL_38:
                  unint64_t v144 = (v151 - 1) & v151;
                  unint64_t v149 = __clz(__rbit64(v151)) + (v145 << 6);
                  goto LABEL_39;
                }
                while (1)
                {
                  uint64_t v145 = v152 + 1;
                  if (__OFADD__(v152, 1)) {
                    goto LABEL_352;
                  }
                  if (v145 >= v945) {
                    break;
                  }
                  unint64_t v151 = *(void *)(v944 + 8 * v145);
                  ++v152;
                  if (v151) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }
        }
        uint64_t v167 = (uint64_t)v917;
        uint64_t v168 = v947;
        swift_release();
        uint64_t v169 = v923;
        sub_1001E71E8((uint64_t)v168 + *(int *)(v924 + 28), v923, &qword_1004794C0);
        uint64_t v170 = (uint64_t)&v928[OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo];
        swift_beginAccess();
        sub_1001E71E8(v170, v167, &qword_1004794C0);
        uint64_t v171 = v918;
        if ((*v910)(v167, 1, v918) == 1)
        {
          sub_100009A08(v167, &qword_1004794C0);
        }
        else
        {
          sub_100009A08(v169, &qword_1004794C0);
          uint64_t v172 = v167;
          uint64_t v173 = v906;
          sub_1002635B8(v172, v906, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          sub_1002635B8(v173, v169, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          (*v905)(v169, 0, 1, v171);
        }
        uint64_t v174 = v168[1];
        uint64_t v945 = *v168;
        uint64_t v944 = v956[0];
        sub_1001E71E8(v169, v925, &qword_1004794C0);
        unint64_t v175 = (int *)v924;
        uint64_t v176 = (uint64_t)v914;
        (*v909)(v914, (char *)v168 + *(int *)(v924 + 60), v915);
        uint64_t v177 = v175[12];
        LODWORD(i) = *((unsigned __int8 *)v168 + v175[13]);
        uint64_t v921 = *(unsigned int *)((char *)v168 + v177);
        LODWORD(v920) = *((unsigned __int8 *)v168 + v177 + 4);
        uint64_t v178 = (char *)v168 + v175[8];
        uint64_t v179 = v934;
        (*v908)(v934, v178, v916);
        uint64_t v180 = v947[2];
        uint64_t v181 = v947[3];
        uint64_t v182 = v935;
        sub_1001E71E8((uint64_t)v947 + v175[14], v935, &qword_1004794B8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v183 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
        uint64_t v184 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
        LOBYTE(v955[0]) = v920;
        uint64_t v803 = (uint64_t)v179;
        uint64_t v128 = v947;
        uint64_t v185 = v933;
        sub_1002A3E0C(v945, v174, v944, v925, (uint64_t)v183, (uint64_t)v184, v176, i, v933, v921, (v921 | ((unint64_t)v920 << 32)) >> 32, v803, v180, v181, v182);
        uint64_t v126 = (uint64_t)type metadata accessor for HostedRoutingSourceSession;
        uint64_t v186 = v913;
        sub_100262B6C((uint64_t)v185, v913, type metadata accessor for HostedRoutingSourceSession);
        uint64_t inited = (uint64_t)&v959;
        sub_1002609BC(v186);
        swift_release();
        sub_100262BD4((uint64_t)v185, type metadata accessor for HostedRoutingSourceSession);
        sub_100009A08(v923, &qword_1004794C0);
        sub_100262BD4((uint64_t)v128, type metadata accessor for HostedRoutingSourceSession);
        a1 = v919;
        uint64_t v22 = v942;
      }
LABEL_13:
      uint64_t v131 = v932 + 1;
      if (v932 + 1 == v926)
      {
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
  }
  v948 = 0;
  v833 = (void (**)(char *, uint64_t, uint64_t))(v908 + 2);
  v903 = (void (**)(char *, uint64_t))(v904 + 1);
  v830 = (uint64_t (**)(uint64_t *, uint64_t))(v932 + 88);
  v834 = (void (**)(uint64_t, uint64_t))(v932 + 8);
  v826 = (void (**)(uint64_t *, uint64_t))(v932 + 96);
  v832 = (void (**)(char *, uint64_t))(v908 + 1);
  v828 = (uint64_t (**)(unsigned int *, uint64_t))(v937 + 88);
  v815 = (void (**)(unsigned int *, uint64_t))(v937 + 8);
  v814 = (void (**)(char *, void, uint64_t))(v945 + 104);
  v819 = (void (**)(unsigned int *, uint64_t))(v937 + 96);
  v835 = (void (**)(char *, uint64_t))(v905 + 1);
  LODWORD(v908) = enum case for RoutingInteraction.Action.add(_:);
  int v896 = enum case for RoutingInteraction.Action.remove(_:);
  int v854 = enum case for RoutingInteraction.Action.set(_:);
  long long v885 = xmmword_1003C6370;
  long long v850 = xmmword_1003C5F00;
  long long v837 = xmmword_1003C7890;
  int v851 = enum case for RoutingInteraction.Action.setActiveSession(_:);
  int v843 = enum case for RoutingInteraction.Action.setActiveItem(_:);
  int v836 = enum case for RoutingInteraction.Action.handoff(_:);
  int v831 = enum case for RoutingInteraction.Action.control(_:);
  int v829 = enum case for RoutingControl.Target.session(_:);
  int v820 = enum case for RoutingControl.Target.item(_:);
  int v827 = enum case for RoutingControl.RoutingControlType.absoluteVolume(_:);
  int v818 = enum case for RoutingControl.RoutingControlType.play(_:);
  int v816 = enum case for RoutingControl.RoutingControlType.pause(_:);
  unsigned int v812 = enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.paused(_:);
  unsigned int v813 = enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:);
  unint64_t v937 = v126 & 0xC000000000000001;
  v905 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v892 + 88);
  v904 = (void (**)(char *, uint64_t, uint64_t))(v892 + 96);
  v817 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v898 + 48);
  v884 = (void (**)(char *, uint64_t, uint64_t))(v897 + 16);
  v893 = (void (**)(char *, uint64_t))(v897 + 8);
  v853 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v897 + 48);
  v825 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v898 + 56);
  uint64_t v127 = 4;
  v848 = (char *)&type metadata for Any + 8;
  uint64_t v128 = v947;
  uint64_t v129 = v922;
  while (1)
  {
    uint64_t inited = v127 - 4;
    uint64_t v946 = v127;
    if (v937)
    {
      uint64_t v245 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v246 = inited + 1;
      if (__OFADD__(inited, 1)) {
        goto LABEL_353;
      }
    }
    else
    {
      uint64_t v245 = *(void *)(v126 + 8 * v127);
      swift_retain();
      uint64_t v246 = inited + 1;
      if (__OFADD__(inited, 1)) {
        goto LABEL_353;
      }
    }
    uint64_t v945 = v246;
    v247 = *(uint64_t (**)(void))(*(void *)v245 + 128);
    unint64_t v248 = v247();
    if (v248 == 2) {
      goto LABEL_129;
    }
    unint64_t v252 = sub_1001E5894(v248, v249, v250, v251);
    unint64_t v253 = ((uint64_t (*)(unint64_t))v247)(v252);
    uint64_t v257 = v254;
    uint64_t v258 = v255;
    unsigned __int8 v259 = v256;
    if (v253 >= 3)
    {
      swift_errorRelease();
      sub_1001859D4(v257, v258, v259);
LABEL_129:
      swift_release();
      goto LABEL_130;
    }
    v260 = v128;
    v261 = a1;
    unint64_t v262 = sub_1001E5894(v253, v254, v255, v256);
    uint64_t v126 = *(void *)(*(void *)v245 + 168);
    v263 = v928;
    ((void (*)(unint64_t))v126)(v262);
    uint64_t inited = v921;
    int v264 = ((uint64_t (*)(char *, uint64_t))*v905)(v263, v921);
    v932 = (char *)v245;
    if (v264 != v908) {
      break;
    }
    ((void (*)(char *, uint64_t))*v904)(v263, inited);
    uint64_t v265 = *((void *)v263 + 1);
    *(void *)&long long v902 = *(void *)v263;
    uint64_t v267 = *((void *)v263 + 2);
    uint64_t v266 = *((void *)v263 + 3);
    v268 = v909;
    RoutingSessionConfiguration.context.getter();
    char v269 = sub_1002AC7F4();
    (*v903)((char *)v268, (uint64_t)v910);
    if ((v269 & 1) == 0)
    {
      v270 = sub_1002A0458();
      if ((v267 != *(void *)v270 || v266 != *((void *)v270 + 1))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_182;
      }
    }
    v271 = (void *)var60[0];
    uint64_t v272 = sub_1002605C4(v267, v266, var60[0]);
    swift_bridgeObjectRelease();
    if (!v272)
    {
      swift_bridgeObjectRelease();
      uint64_t v310 = sub_1001A69C4();
      (*v884)(v900, v310, v907);
      uint64_t v311 = swift_allocObject();
      *(void *)(v311 + 16) = v901;
      uint64_t v312 = swift_allocObject();
      *(void *)(v312 + 16) = sub_1002637C4;
      *(void *)(v312 + 24) = v245;
      swift_retain();
      *(void *)&long long v902 = Logger.logObject.getter();
      LODWORD(v871) = static os_log_type_t.error.getter();
      uint64_t v313 = swift_allocObject();
      *(unsigned char *)(v313 + 16) = 32;
      uint64_t v314 = swift_allocObject();
      *(unsigned char *)(v314 + 16) = 8;
      uint64_t v315 = swift_allocObject();
      *(void *)(v315 + 16) = sub_100263150;
      *(void *)(v315 + 24) = v311;
      uint64_t v316 = swift_allocObject();
      *(void *)(v316 + 16) = sub_1002621AC;
      *(void *)(v316 + 24) = v315;
      uint64_t v317 = swift_allocObject();
      *(void *)(v317 + 16) = sub_1002637C8;
      *(void *)(v317 + 24) = v316;
      uint64_t v318 = swift_allocObject();
      *(unsigned char *)(v318 + 16) = 32;
      uint64_t v319 = swift_allocObject();
      *(unsigned char *)(v319 + 16) = 8;
      uint64_t v320 = swift_allocObject();
      *(void *)(v320 + 16) = sub_1002637CC;
      *(void *)(v320 + 24) = v312;
      uint64_t v321 = swift_allocObject();
      *(void *)(v321 + 16) = sub_1002637C8;
      *(void *)(v321 + 24) = v320;
      sub_100013A80(&qword_10047AC10);
      uint64_t v322 = swift_allocObject();
      *(_OWORD *)(v322 + 16) = v885;
      *(void *)(v322 + 32) = sub_1002639A0;
      *(void *)(v322 + 40) = v313;
      *(void *)(v322 + 48) = sub_1002639A0;
      *(void *)(v322 + 56) = v314;
      *(void *)(v322 + 64) = sub_1002637D4;
      *(void *)(v322 + 72) = v317;
      *(void *)(v322 + 80) = sub_1002639A0;
      *(void *)(v322 + 88) = v318;
      *(void *)(v322 + 96) = sub_1002639A0;
      *(void *)(v322 + 104) = v319;
      *(void *)(v322 + 112) = sub_1002637D4;
      *(void *)(v322 + 120) = v321;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t inited = v902;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v871))
      {
        uint64_t v126 = swift_slowAlloc();
        uint64_t v323 = swift_slowAlloc();
        Swift::Int v958 = 0;
        v956[0] = v323;
        *(_WORD *)uint64_t v126 = 514;
        *(unsigned char *)(v126 + 2) = *(unsigned char *)(v313 + 16);
        if (v948) {
          goto LABEL_359;
        }
        swift_release();
        *(unsigned char *)(v126 + 3) = *(unsigned char *)(v314 + 16);
        v952 = (unsigned char *)(v126 + 4);
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v317 + 16));
        uint64_t v22 = v942;
        swift_release();
        v324 = v952;
        unsigned char *v952 = *(unsigned char *)(v318 + 16);
        swift_release();
        v324[1] = *(unsigned char *)(v319 + 16);
        v952 = v324 + 2;
        a1 = v919;
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v321 + 16));
        uint64_t v129 = v922;
        swift_release();
        v325 = (void *)v902;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v902, (os_log_type_t)v871, "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.", (uint8_t *)v126, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
        (*v893)(v900, v907);
        goto LABEL_200;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*v893)(v900, v907);
LABEL_202:
      a1 = v919;
      uint64_t v22 = v942;
LABEL_203:
      uint64_t v128 = v947;
      uint64_t v129 = v922;
LABEL_130:
      uint64_t v126 = v944;
LABEL_131:
      uint64_t inited = v945;
      goto LABEL_113;
    }
    sub_10018FE08(0, &qword_100478998);
    id v273 = sub_10031CA84();
    uint64_t v274 = v902;
    NSString v275 = String._bridgeToObjectiveC()();
    unsigned int v276 = [v273 matchesUID:v275];

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v277 = v274;
    v278 = v948;
    v279 = sub_1002626A0(v271, v277, v265);
    swift_bridgeObjectRelease();
    if (sub_100260608((unint64_t)v279) < 2)
    {
      uint64_t v126 = v944;
    }
    else
    {
      uint64_t v126 = v944;
      if ((v276 & 1) == 0)
      {
        v948 = v279;
        LODWORD(v871) = v276;
        uint64_t v280 = sub_1001A6B94();
        uint64_t v281 = (uint64_t)v895;
        sub_1001E71E8(v280, (uint64_t)v895, (uint64_t *)&unk_10047BC50);
        if ((*v853)(v281, 1, v907) == 1)
        {
          sub_100009A08(v281, (uint64_t *)&unk_10047BC50);
        }
        else
        {
          uint64_t v822 = (uint64_t)v278;
          uint64_t v824 = v272;
          uint64_t v349 = swift_allocObject();
          *(void *)(v349 + 16) = v901;
          uint64_t v350 = swift_allocObject();
          v351 = v932;
          *(void *)(v350 + 16) = sub_1002637C4;
          *(void *)(v350 + 24) = v351;
          uint64_t v352 = swift_allocObject();
          *(void *)(v352 + 16) = v948;
          uint64_t v353 = swift_allocObject();
          *(void *)(v353 + 16) = sub_10026399C;
          *(void *)(v353 + 24) = v352;
          swift_retain();
          swift_bridgeObjectRetain();
          os_log_t v842 = (os_log_t)Logger.logObject.getter();
          LODWORD(v841) = static os_log_type_t.info.getter();
          v845 = (void *)swift_allocObject();
          *((unsigned char *)v845 + 16) = 32;
          uint64_t v844 = swift_allocObject();
          *(unsigned char *)(v844 + 16) = 8;
          uint64_t v354 = swift_allocObject();
          *(void *)(v354 + 16) = sub_1002637D8;
          *(void *)(v354 + 24) = v349;
          uint64_t v355 = swift_allocObject();
          *(void *)(v355 + 16) = sub_1002621AC;
          *(void *)(v355 + 24) = v354;
          uint64_t v356 = swift_allocObject();
          *(void *)(v356 + 16) = sub_1002637C8;
          *(void *)(v356 + 24) = v355;
          v846 = (uint8_t *)swift_allocObject();
          v846[16] = 32;
          uint64_t v357 = swift_allocObject();
          *(unsigned char *)(v357 + 16) = 8;
          uint64_t v358 = swift_allocObject();
          *(void *)(v358 + 16) = sub_1002637CC;
          *(void *)(v358 + 24) = v350;
          uint64_t v359 = swift_allocObject();
          *(void *)(v359 + 16) = sub_1002637C8;
          *(void *)(v359 + 24) = v358;
          uint64_t v360 = v359;
          uint64_t v838 = v359;
          os_log_t v839 = (os_log_t)swift_allocObject();
          LOBYTE(v839[2].isa) = 32;
          uint64_t v840 = swift_allocObject();
          *(unsigned char *)(v840 + 16) = 8;
          uint64_t v361 = swift_allocObject();
          *(void *)(v361 + 16) = sub_1002637D0;
          *(void *)(v361 + 24) = v353;
          uint64_t v362 = swift_allocObject();
          *(void *)(v362 + 16) = sub_1002637C8;
          *(void *)(v362 + 24) = v361;
          sub_100013A80(&qword_10047AC10);
          uint64_t v363 = swift_allocObject();
          *(_OWORD *)(v363 + 16) = v850;
          *(void *)(v363 + 32) = sub_1002639A0;
          uint64_t v364 = v844;
          *(void *)(v363 + 40) = v845;
          *(void *)(v363 + 48) = sub_1002639A0;
          *(void *)(v363 + 56) = v364;
          *(void *)(v363 + 64) = sub_1002637D4;
          *(void *)(v363 + 72) = v356;
          *(void *)(v363 + 80) = sub_1002639A0;
          *(void *)(v363 + 88) = v846;
          *(void *)(v363 + 96) = sub_1002639A0;
          *(void *)(v363 + 104) = v357;
          *(void *)(v363 + 112) = sub_1002637D4;
          *(void *)(v363 + 120) = v360;
          *(void *)(v363 + 128) = sub_1002639A0;
          uint64_t v365 = v840;
          *(void *)(v363 + 136) = v839;
          *(void *)(v363 + 144) = sub_1002639A0;
          *(void *)(v363 + 152) = v365;
          *(void *)(v363 + 160) = sub_1002637D4;
          *(void *)(v363 + 168) = v362;
          swift_retain();
          swift_retain();
          uint64_t v821 = v356;
          swift_retain();
          swift_retain();
          uint64_t v823 = v357;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          os_log_t v366 = v842;
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v366, (os_log_type_t)v841))
          {
            uint64_t v367 = v821;
            v278 = v822;
            uint64_t v126 = v844;
            uint64_t inited = swift_slowAlloc();
            uint64_t v368 = swift_slowAlloc();
            Swift::Int v958 = 0;
            v956[0] = v368;
            *(_WORD *)uint64_t inited = 770;
            *(unsigned char *)(inited + 2) = *((unsigned char *)v845 + 16);
            if (v278) {
              goto LABEL_359;
            }
            swift_release();
            *(unsigned char *)(inited + 3) = *(unsigned char *)(v126 + 16);
            v952 = (unsigned char *)(inited + 4);
            swift_release();
            sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v367 + 16));
            uint64_t v22 = v942;
            uint64_t v369 = v362;
            swift_release();
            v370 = v952;
            unsigned char *v952 = v846[16];
            uint64_t v371 = v838;
            v845 = (void *)v368;
            swift_release();
            v370[1] = *(unsigned char *)(v823 + 16);
            v952 = v370 + 2;
            swift_release();
            sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v371 + 16));
            swift_release();
            v372 = v952;
            unsigned char *v952 = v839[2].isa;
            swift_release();
            v372[1] = *(unsigned char *)(v840 + 16);
            v952 = v372 + 2;
            swift_release();
            sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v369 + 16));
            swift_release();
            os_log_t v373 = v842;
            _os_log_impl((void *)&_mh_execute_header, v842, (os_log_type_t)v841, "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s. Continuing.", (uint8_t *)inited, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v22 = v942;
            v278 = v822;
          }
          (*v893)(v895, v907);
          uint64_t v126 = v944;
        }
        LOBYTE(v276) = (_BYTE)v871;
        v279 = v948;
      }
    }
    swift_bridgeObjectRetain();
    Swift::Int v244 = v902;
    sub_100262508((unint64_t)v279, v276, v902, v265);
    v948 = v278;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_10000DDD8(&v958, v244, v265);
    swift_endAccess();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v128 = v947;
    uint64_t v129 = v922;
    uint64_t inited = v945;
    a1 = v919;
LABEL_113:
    uint64_t v127 = v946 + 1;
    if (inited == i) {
      goto LABEL_10;
    }
  }
  if (v264 == v896)
  {
    v282 = (uint64_t *)v928;
    ((void (*)(char *, uint64_t))*v904)(v928, inited);
    uint64_t v284 = *v282;
    uint64_t v283 = v282[1];
    uint64_t v286 = v282[2];
    uint64_t v285 = v282[3];
    v287 = v909;
    RoutingSessionConfiguration.context.getter();
    char v288 = sub_1002AC7F4();
    (*v903)((char *)v287, (uint64_t)v910);
    if ((v288 & 1) == 0)
    {
      v289 = sub_1002A0458();
      if ((v286 != *(void *)v289 || v285 != *((void *)v289 + 1))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_182:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_183;
      }
    }
    uint64_t v290 = sub_1002605C4(v286, v285, var60[0]);
    swift_bridgeObjectRelease();
    v291 = v932;
    if (v290)
    {
      swift_beginAccess();
      uint64_t v292 = *(void *)(v290 + 32);
      swift_bridgeObjectRetain();
      char v293 = sub_10018835C(v284, v283, v292);
      swift_bridgeObjectRelease();
      if (v293)
      {
        swift_beginAccess();
        sub_10018C4D0(v284, v283);
        swift_endAccess();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_183:
        swift_bridgeObjectRelease();
        uint64_t v129 = v922;
        uint64_t v126 = v944;
        uint64_t inited = v945;
        a1 = v261;
        uint64_t v128 = v947;
        goto LABEL_113;
      }
      uint64_t v347 = sub_1001A6B94();
      uint64_t v348 = v889;
      sub_1001E71E8(v347, v889, (uint64_t *)&unk_10047BC50);
      if ((*v853)(v348, 1, v907) == 1)
      {
        a1 = v261;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_100009A08(v348, (uint64_t *)&unk_10047BC50);
      }
      else
      {
        uint64_t v406 = swift_allocObject();
        *(void *)(v406 + 16) = v901;
        uint64_t v407 = swift_allocObject();
        v408 = v932;
        *(void *)(v407 + 16) = sub_1002637C4;
        *(void *)(v407 + 24) = v408;
        uint64_t v409 = swift_allocObject();
        *(void *)(v409 + 16) = sub_100262FF0;
        *(void *)(v409 + 24) = v290;
        uint64_t v410 = swift_allocObject();
        uint64_t v838 = v410;
        *(void *)(v410 + 16) = v284;
        *(void *)(v410 + 24) = v283;
        swift_retain();
        swift_retain();
        os_log_t v839 = (os_log_t)Logger.logObject.getter();
        LODWORD(v840) = static os_log_type_t.info.getter();
        os_log_t v842 = (os_log_t)swift_allocObject();
        LOBYTE(v842[2].isa) = 32;
        v846 = (uint8_t *)swift_allocObject();
        v846[16] = 8;
        uint64_t v411 = swift_allocObject();
        *(void *)(v411 + 16) = sub_1002637D8;
        *(void *)(v411 + 24) = v406;
        uint64_t v412 = swift_allocObject();
        *(void *)(v412 + 16) = sub_1002621AC;
        *(void *)(v412 + 24) = v411;
        uint64_t v413 = swift_allocObject();
        *(void *)(v413 + 16) = sub_1002637C8;
        *(void *)(v413 + 24) = v412;
        uint64_t v414 = v413;
        uint64_t v415 = swift_allocObject();
        *(unsigned char *)(v415 + 16) = 32;
        uint64_t v416 = v415;
        uint64_t v841 = swift_allocObject();
        *(unsigned char *)(v841 + 16) = 8;
        uint64_t v417 = swift_allocObject();
        *(void *)(v417 + 16) = sub_1002637CC;
        *(void *)(v417 + 24) = v407;
        uint64_t v418 = swift_allocObject();
        *(void *)(v418 + 16) = sub_1002637C8;
        *(void *)(v418 + 24) = v417;
        v845 = (void *)swift_allocObject();
        *((unsigned char *)v845 + 16) = 32;
        uint64_t v844 = swift_allocObject();
        *(unsigned char *)(v844 + 16) = 8;
        uint64_t v419 = swift_allocObject();
        *(void *)(v419 + 16) = sub_100262FFC;
        *(void *)(v419 + 24) = v409;
        uint64_t v420 = swift_allocObject();
        *(void *)(v420 + 16) = sub_1002637C8;
        *(void *)(v420 + 24) = v419;
        uint64_t v421 = v420;
        v871 = (void (*)(uint64_t *, uint64_t))swift_allocObject();
        *((unsigned char *)v871 + 16) = 32;
        *(void *)&long long v902 = swift_allocObject();
        *(unsigned char *)(v902 + 16) = 8;
        uint64_t v422 = swift_allocObject();
        uint64_t v423 = v838;
        *(void *)(v422 + 16) = sub_100263090;
        *(void *)(v422 + 24) = v423;
        uint64_t v424 = swift_allocObject();
        uint64_t v822 = v424;
        *(void *)(v424 + 16) = sub_1002637C8;
        *(void *)(v424 + 24) = v422;
        sub_100013A80(&qword_10047AC10);
        uint64_t v425 = swift_allocObject();
        *(_OWORD *)(v425 + 16) = v837;
        *(void *)(v425 + 32) = sub_1002639A0;
        *(void *)(v425 + 40) = v842;
        *(void *)(v425 + 48) = sub_1002639A0;
        unint64_t v426 = (unint64_t)v845;
        *(void *)(v425 + 56) = v846;
        *(void *)(v425 + 64) = sub_1002637D4;
        uint64_t v823 = v290;
        *(void *)(v425 + 72) = v414;
        *(void *)(v425 + 80) = sub_1002639A0;
        *(void *)(v425 + 88) = v416;
        *(void *)(v425 + 96) = sub_1002639A0;
        *(void *)(v425 + 104) = v841;
        *(void *)(v425 + 112) = sub_1002637D4;
        *(void *)(v425 + 120) = v418;
        *(void *)(v425 + 128) = sub_1002639A0;
        *(void *)(v425 + 136) = v426;
        *(void *)(v425 + 144) = sub_1002639A0;
        *(void *)(v425 + 152) = v844;
        *(void *)(v425 + 160) = sub_1002637D4;
        uint64_t v427 = v421;
        *(void *)(v425 + 168) = v421;
        *(void *)(v425 + 176) = sub_1002639A0;
        *(void *)(v425 + 184) = v871;
        *(void *)(v425 + 192) = sub_1002639A0;
        *(void *)(v425 + 200) = v902;
        *(void *)(v425 + 208) = sub_1002637D4;
        uint64_t v428 = v822;
        *(void *)(v425 + 216) = v822;
        swift_retain();
        swift_retain();
        uint64_t v824 = v414;
        swift_retain();
        uint64_t v838 = v416;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        os_log_t v429 = v839;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v429, (os_log_type_t)v840))
        {
          uint64_t inited = v824;
          uint64_t v126 = v838;
          v430 = v846;
          uint64_t v821 = v427;
          uint64_t v431 = v418;
          v432 = (uint8_t *)swift_slowAlloc();
          uint64_t v433 = swift_slowAlloc();
          Swift::Int v958 = 0;
          uint64_t v811 = v433;
          v956[0] = v433;
          *(_WORD *)v432 = 1026;
          v432[2] = (uint8_t)v842[2].isa;
          if (v948) {
            goto LABEL_360;
          }
          swift_release();
          v432[3] = v430[16];
          v952 = v432 + 4;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(inited + 16));
          swift_release();
          v434 = v952;
          unsigned char *v952 = *(unsigned char *)(v126 + 16);
          swift_release();
          v434[1] = *(unsigned char *)(v841 + 16);
          v952 = v434 + 2;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v431 + 16));
          uint64_t v22 = v942;
          swift_release();
          v435 = v952;
          unsigned char *v952 = *((unsigned char *)v845 + 16);
          uint64_t v436 = v821;
          swift_release();
          v435[1] = *(unsigned char *)(v844 + 16);
          v952 = v435 + 2;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v436 + 16));
          swift_release();
          v437 = v952;
          unsigned char *v952 = *((unsigned char *)v871 + 16);
          swift_release();
          v437[1] = *(unsigned char *)(v902 + 16);
          v952 = v437 + 2;
          a1 = v919;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v428 + 16));
          uint64_t v438 = v889;
          swift_release();
          os_log_t v439 = v839;
          _os_log_impl((void *)&_mh_execute_header, v839, (os_log_type_t)v840, "[%s] optimisticSessions - Potential inconsistency when applying event: %s. Target set: %s does not contain item: %s. Skipping.", v432, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          swift_release();
        }
        else
        {
          swift_release();

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          a1 = v919;
          uint64_t v22 = v942;
          uint64_t v438 = v889;
        }
        (*v893)((char *)v438, v907);
      }
      goto LABEL_203;
    }
    swift_bridgeObjectRelease();
    uint64_t v331 = sub_1001A69C4();
    (*v884)(v894, v331, v907);
    uint64_t v332 = swift_allocObject();
    *(void *)(v332 + 16) = v901;
    uint64_t v333 = swift_allocObject();
    *(void *)(v333 + 16) = sub_1002637C4;
    *(void *)(v333 + 24) = v291;
    swift_retain();
    *(void *)&long long v902 = Logger.logObject.getter();
    LODWORD(v871) = static os_log_type_t.error.getter();
    uint64_t v334 = swift_allocObject();
    *(unsigned char *)(v334 + 16) = 32;
    uint64_t v335 = swift_allocObject();
    *(unsigned char *)(v335 + 16) = 8;
    uint64_t v336 = swift_allocObject();
    *(void *)(v336 + 16) = sub_1002637D8;
    *(void *)(v336 + 24) = v332;
    uint64_t v337 = swift_allocObject();
    *(void *)(v337 + 16) = sub_1002621AC;
    *(void *)(v337 + 24) = v336;
    uint64_t v338 = swift_allocObject();
    *(void *)(v338 + 16) = sub_1002637C8;
    *(void *)(v338 + 24) = v337;
    uint64_t v339 = swift_allocObject();
    *(unsigned char *)(v339 + 16) = 32;
    uint64_t v340 = swift_allocObject();
    *(unsigned char *)(v340 + 16) = 8;
    uint64_t v341 = swift_allocObject();
    *(void *)(v341 + 16) = sub_1002637CC;
    *(void *)(v341 + 24) = v333;
    uint64_t v342 = swift_allocObject();
    *(void *)(v342 + 16) = sub_1002637C8;
    *(void *)(v342 + 24) = v341;
    sub_100013A80(&qword_10047AC10);
    uint64_t v343 = swift_allocObject();
    *(_OWORD *)(v343 + 16) = v885;
    *(void *)(v343 + 32) = sub_1002639A0;
    *(void *)(v343 + 40) = v334;
    *(void *)(v343 + 48) = sub_1002639A0;
    *(void *)(v343 + 56) = v335;
    *(void *)(v343 + 64) = sub_1002637D4;
    *(void *)(v343 + 72) = v338;
    *(void *)(v343 + 80) = sub_1002639A0;
    *(void *)(v343 + 88) = v339;
    *(void *)(v343 + 96) = sub_1002639A0;
    *(void *)(v343 + 104) = v340;
    *(void *)(v343 + 112) = sub_1002637D4;
    *(void *)(v343 + 120) = v342;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t inited = v902;
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled((os_log_t)inited, (os_log_type_t)v871))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*v893)(v894, v907);
      goto LABEL_202;
    }
    uint64_t v126 = swift_slowAlloc();
    uint64_t v344 = swift_slowAlloc();
    Swift::Int v958 = 0;
    v956[0] = v344;
    *(_WORD *)uint64_t v126 = 514;
    *(unsigned char *)(v126 + 2) = *(unsigned char *)(v334 + 16);
    if (v948) {
      goto LABEL_359;
    }
    swift_release();
    *(unsigned char *)(v126 + 3) = *(unsigned char *)(v335 + 16);
    v952 = (unsigned char *)(v126 + 4);
    swift_release();
    sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v338 + 16));
    uint64_t v22 = v942;
    swift_release();
    v345 = v952;
    unsigned char *v952 = *(unsigned char *)(v339 + 16);
    swift_release();
    v345[1] = *(unsigned char *)(v340 + 16);
    v952 = v345 + 2;
    a1 = v919;
    swift_release();
    sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v342 + 16));
    uint64_t v129 = v922;
    swift_release();
    v346 = (void *)v902;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v902, (os_log_type_t)v871, "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.", (uint8_t *)v126, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    (*v893)(v894, v907);
    goto LABEL_200;
  }
  a1 = v261;
  if (v264 == v854)
  {
    v294 = (uint64_t *)v928;
    ((void (*)(char *, uint64_t))*v904)(v928, inited);
    uint64_t v296 = *v294;
    uint64_t v295 = v294[1];
    uint64_t v298 = v294[2];
    uint64_t v297 = v294[3];
    v299 = v909;
    RoutingSessionConfiguration.context.getter();
    char v300 = sub_1002AC7F4();
    (*v903)((char *)v299, (uint64_t)v910);
    if ((v300 & 1) != 0
      || (v301 = sub_1002A0458(), v298 == *(void *)v301) && v297 == *((void *)v301 + 1)
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v302 = (void *)var60[0];
      uint64_t v303 = sub_1002605C4(v298, v297, var60[0]);
      swift_bridgeObjectRelease();
      if (v303)
      {
        sub_10018FE08(0, &qword_100478998);
        id v304 = sub_10031CA84();
        NSString v305 = String._bridgeToObjectiveC()();
        LODWORD(v902) = [v304 matchesUID:v305];

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v306 = v948;
        v307 = sub_1002626A0(v302, v296, v295);
        swift_bridgeObjectRelease();
        if (sub_100260608((unint64_t)v307) >= 2)
        {
          uint64_t v308 = sub_1001A6B94();
          uint64_t v309 = (uint64_t)v887;
          sub_1001E71E8(v308, (uint64_t)v887, (uint64_t *)&unk_10047BC50);
          if ((*v853)(v309, 1, v907) == 1)
          {
            sub_100009A08(v309, (uint64_t *)&unk_10047BC50);
          }
          else
          {
            uint64_t v838 = (uint64_t)v306;
            uint64_t v840 = v296;
            uint64_t v484 = swift_allocObject();
            *(void *)(v484 + 16) = v901;
            uint64_t v485 = swift_allocObject();
            v486 = v932;
            *(void *)(v485 + 16) = sub_1002637C4;
            *(void *)(v485 + 24) = v486;
            uint64_t v487 = swift_allocObject();
            *(void *)(v487 + 16) = v307;
            uint64_t v488 = swift_allocObject();
            uint64_t v824 = v488;
            *(void *)(v488 + 16) = sub_100262F24;
            *(void *)(v488 + 24) = v487;
            swift_retain();
            os_log_t v839 = v307;
            swift_bridgeObjectRetain();
            v948 = Logger.logObject.getter();
            LODWORD(v842) = static os_log_type_t.info.getter();
            v846 = (uint8_t *)swift_allocObject();
            v846[16] = 32;
            uint64_t v489 = swift_allocObject();
            *(unsigned char *)(v489 + 16) = 8;
            uint64_t v490 = swift_allocObject();
            *(void *)(v490 + 16) = sub_1002637D8;
            *(void *)(v490 + 24) = v484;
            uint64_t v491 = swift_allocObject();
            *(void *)(v491 + 16) = sub_1002621AC;
            *(void *)(v491 + 24) = v490;
            uint64_t v492 = swift_allocObject();
            *(void *)(v492 + 16) = sub_1002637C8;
            *(void *)(v492 + 24) = v491;
            uint64_t v493 = v492;
            uint64_t v844 = v492;
            uint64_t v494 = swift_allocObject();
            *(unsigned char *)(v494 + 16) = 32;
            uint64_t v126 = v494;
            v871 = (void (*)(uint64_t *, uint64_t))swift_allocObject();
            *((unsigned char *)v871 + 16) = 8;
            uint64_t v495 = swift_allocObject();
            *(void *)(v495 + 16) = sub_1002637CC;
            *(void *)(v495 + 24) = v485;
            v845 = (void *)v489;
            uint64_t v496 = swift_allocObject();
            *(void *)(v496 + 16) = sub_1002637C8;
            *(void *)(v496 + 24) = v495;
            uint64_t v497 = swift_allocObject();
            *(unsigned char *)(v497 + 16) = 32;
            uint64_t v498 = v497;
            uint64_t v841 = swift_allocObject();
            *(unsigned char *)(v841 + 16) = 8;
            uint64_t v499 = swift_allocObject();
            uint64_t v500 = v824;
            *(void *)(v499 + 16) = sub_1002637D0;
            *(void *)(v499 + 24) = v500;
            uint64_t v501 = swift_allocObject();
            *(void *)(v501 + 16) = sub_1002637C8;
            *(void *)(v501 + 24) = v499;
            sub_100013A80(&qword_10047AC10);
            uint64_t v502 = swift_allocObject();
            *(_OWORD *)(v502 + 16) = v850;
            *(void *)(v502 + 32) = sub_1002639A0;
            *(void *)(v502 + 40) = v846;
            *(void *)(v502 + 48) = sub_1002639A0;
            *(void *)(v502 + 56) = v489;
            *(void *)(v502 + 64) = sub_1002637D4;
            *(void *)(v502 + 72) = v493;
            *(void *)(v502 + 80) = sub_1002639A0;
            *(void *)(v502 + 88) = v126;
            *(void *)(v502 + 96) = sub_1002639A0;
            *(void *)(v502 + 104) = v871;
            *(void *)(v502 + 112) = sub_1002637D4;
            *(void *)(v502 + 120) = v496;
            *(void *)(v502 + 128) = sub_1002639A0;
            *(void *)(v502 + 136) = v498;
            *(void *)(v502 + 144) = sub_1002639A0;
            *(void *)(v502 + 152) = v841;
            *(void *)(v502 + 160) = sub_1002637D4;
            *(void *)(v502 + 168) = v501;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            v503 = v948;
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v503, (os_log_type_t)v842))
            {
              uint64_t v822 = v496;
              uint64_t v823 = v501;
              uint64_t v504 = v844;
              unint64_t v505 = (unint64_t)v845;
              uint64_t v824 = v498;
              uint64_t inited = swift_slowAlloc();
              uint64_t v506 = swift_slowAlloc();
              Swift::Int v958 = 0;
              v956[0] = v506;
              *(_WORD *)uint64_t inited = 770;
              *(unsigned char *)(inited + 2) = v846[16];
              v306 = v838;
              if (v838) {
                goto LABEL_359;
              }
              swift_release();
              *(unsigned char *)(inited + 3) = *(unsigned char *)(v505 + 16);
              v952 = (unsigned char *)(inited + 4);
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v504 + 16));
              uint64_t v22 = v942;
              v846 = (uint8_t *)inited;
              swift_release();
              v507 = v952;
              unsigned char *v952 = *(unsigned char *)(v126 + 16);
              swift_release();
              v507[1] = *((unsigned char *)v871 + 16);
              v952 = v507 + 2;
              uint64_t v508 = v822;
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v508 + 16));
              uint64_t v296 = v840;
              swift_release();
              v509 = v952;
              unsigned char *v952 = *(unsigned char *)(v824 + 16);
              swift_release();
              v509[1] = *(unsigned char *)(v841 + 16);
              v952 = v509 + 2;
              a1 = v919;
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v823 + 16));
              v307 = v839;
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v948, (os_log_type_t)v842, "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s. Continuing.", v846, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              a1 = v919;
              uint64_t v22 = v942;
              v307 = v839;
              uint64_t v296 = v840;
              v306 = v838;
            }
            (*v893)(v887, v907);
          }
        }
        uint64_t v126 = v944;
        swift_bridgeObjectRetain();
        sub_100262508((unint64_t)v307, v902, v296, v295);
        v948 = v306;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        swift_bridgeObjectRelease();
        *(void *)(v303 + 32) = &_swiftEmptySetSingleton;
        sub_10000DDD8(&v958, v296, v295);
        swift_endAccess();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_219;
      }
      swift_bridgeObjectRelease();
      uint64_t v390 = sub_1001A69C4();
      (*v884)(v888, v390, v907);
      uint64_t v391 = swift_allocObject();
      *(void *)(v391 + 16) = v901;
      uint64_t v392 = swift_allocObject();
      *(void *)(v392 + 16) = sub_1002637C4;
      *(void *)(v392 + 24) = v932;
      swift_retain();
      *(void *)&long long v902 = Logger.logObject.getter();
      LODWORD(v871) = static os_log_type_t.error.getter();
      uint64_t v393 = swift_allocObject();
      *(unsigned char *)(v393 + 16) = 32;
      uint64_t v394 = swift_allocObject();
      *(unsigned char *)(v394 + 16) = 8;
      uint64_t v395 = swift_allocObject();
      *(void *)(v395 + 16) = sub_1002637D8;
      *(void *)(v395 + 24) = v391;
      uint64_t v396 = swift_allocObject();
      *(void *)(v396 + 16) = sub_1002621AC;
      *(void *)(v396 + 24) = v395;
      uint64_t v397 = swift_allocObject();
      *(void *)(v397 + 16) = sub_1002637C8;
      *(void *)(v397 + 24) = v396;
      uint64_t v398 = swift_allocObject();
      *(unsigned char *)(v398 + 16) = 32;
      uint64_t v399 = swift_allocObject();
      *(unsigned char *)(v399 + 16) = 8;
      uint64_t v400 = swift_allocObject();
      *(void *)(v400 + 16) = sub_1002637CC;
      *(void *)(v400 + 24) = v392;
      uint64_t v401 = swift_allocObject();
      *(void *)(v401 + 16) = sub_1002637C8;
      *(void *)(v401 + 24) = v400;
      sub_100013A80(&qword_10047AC10);
      uint64_t v402 = swift_allocObject();
      *(_OWORD *)(v402 + 16) = v885;
      *(void *)(v402 + 32) = sub_1002639A0;
      *(void *)(v402 + 40) = v393;
      *(void *)(v402 + 48) = sub_1002639A0;
      *(void *)(v402 + 56) = v394;
      *(void *)(v402 + 64) = sub_1002637D4;
      *(void *)(v402 + 72) = v397;
      *(void *)(v402 + 80) = sub_1002639A0;
      *(void *)(v402 + 88) = v398;
      *(void *)(v402 + 96) = sub_1002639A0;
      *(void *)(v402 + 104) = v399;
      *(void *)(v402 + 112) = sub_1002637D4;
      *(void *)(v402 + 120) = v401;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t inited = v902;
      swift_bridgeObjectRelease();
      if (!os_log_type_enabled((os_log_t)inited, (os_log_type_t)v871))
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*v893)(v888, v907);
        goto LABEL_202;
      }
      uint64_t v126 = swift_slowAlloc();
      uint64_t v403 = swift_slowAlloc();
      Swift::Int v958 = 0;
      v956[0] = v403;
      *(_WORD *)uint64_t v126 = 514;
      *(unsigned char *)(v126 + 2) = *(unsigned char *)(v393 + 16);
      if (v948) {
        goto LABEL_359;
      }
      swift_release();
      *(unsigned char *)(v126 + 3) = *(unsigned char *)(v394 + 16);
      v952 = (unsigned char *)(v126 + 4);
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v397 + 16));
      uint64_t v22 = v942;
      swift_release();
      v404 = v952;
      unsigned char *v952 = *(unsigned char *)(v398 + 16);
      swift_release();
      v404[1] = *(unsigned char *)(v399 + 16);
      v952 = v404 + 2;
      a1 = v919;
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v401 + 16));
      uint64_t v129 = v922;
      swift_release();
      v405 = (void *)v902;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v902, (os_log_type_t)v871, "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.", (uint8_t *)v126, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      (*v893)(v888, v907);
LABEL_200:
      uint64_t v128 = v947;
      goto LABEL_130;
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_223:
    swift_bridgeObjectRelease();
    goto LABEL_203;
  }
  if (v264 == v851)
  {
    v326 = (uint64_t *)v928;
    ((void (*)(char *, uint64_t))*v904)(v928, inited);
    uint64_t v328 = *v326;
    uint64_t v327 = v326[1];
    uint64_t v329 = var60[0];
    swift_bridgeObjectRetain();
    uint64_t v330 = sub_1002605C4(v328, v327, v329);
    swift_bridgeObjectRelease();
    if (v330)
    {
      uint64_t v128 = v260;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v911 = v328;
      uint64_t v912 = v327;
      goto LABEL_130;
    }
    swift_bridgeObjectRelease();
    uint64_t v468 = sub_1001A69C4();
    (*v884)(v129, v468, v907);
    uint64_t v469 = swift_allocObject();
    *(void *)(v469 + 16) = v901;
    uint64_t v470 = swift_allocObject();
    *(void *)(v470 + 16) = sub_1002637C4;
    *(void *)(v470 + 24) = v932;
    swift_retain();
    *(void *)&long long v902 = Logger.logObject.getter();
    LODWORD(v871) = static os_log_type_t.error.getter();
    uint64_t v471 = swift_allocObject();
    *(unsigned char *)(v471 + 16) = 32;
    uint64_t v472 = swift_allocObject();
    *(unsigned char *)(v472 + 16) = 8;
    uint64_t v473 = swift_allocObject();
    *(void *)(v473 + 16) = sub_1002637D8;
    *(void *)(v473 + 24) = v469;
    uint64_t v474 = swift_allocObject();
    *(void *)(v474 + 16) = sub_1002621AC;
    *(void *)(v474 + 24) = v473;
    uint64_t v475 = swift_allocObject();
    *(void *)(v475 + 16) = sub_1002637C8;
    *(void *)(v475 + 24) = v474;
    uint64_t v476 = swift_allocObject();
    *(unsigned char *)(v476 + 16) = 32;
    uint64_t v477 = swift_allocObject();
    *(unsigned char *)(v477 + 16) = 8;
    uint64_t v478 = swift_allocObject();
    *(void *)(v478 + 16) = sub_1002637CC;
    *(void *)(v478 + 24) = v470;
    uint64_t v479 = swift_allocObject();
    *(void *)(v479 + 16) = sub_1002637C8;
    *(void *)(v479 + 24) = v478;
    sub_100013A80(&qword_10047AC10);
    uint64_t v480 = swift_allocObject();
    *(_OWORD *)(v480 + 16) = v885;
    *(void *)(v480 + 32) = sub_1002639A0;
    *(void *)(v480 + 40) = v471;
    *(void *)(v480 + 48) = sub_1002639A0;
    *(void *)(v480 + 56) = v472;
    *(void *)(v480 + 64) = sub_1002637D4;
    *(void *)(v480 + 72) = v475;
    *(void *)(v480 + 80) = sub_1002639A0;
    *(void *)(v480 + 88) = v476;
    *(void *)(v480 + 96) = sub_1002639A0;
    *(void *)(v480 + 104) = v477;
    *(void *)(v480 + 112) = sub_1002637D4;
    *(void *)(v480 + 120) = v479;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t inited = v902;
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled((os_log_t)inited, (os_log_type_t)v871))
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v129 = v922;
      (*v893)(v922, v907);
      a1 = v919;
      uint64_t v22 = v942;
      uint64_t v128 = v947;
      goto LABEL_130;
    }
    uint64_t v126 = swift_slowAlloc();
    uint64_t v481 = swift_slowAlloc();
    Swift::Int v958 = 0;
    v956[0] = v481;
    *(_WORD *)uint64_t v126 = 514;
    *(unsigned char *)(v126 + 2) = *(unsigned char *)(v471 + 16);
    if (v948) {
      goto LABEL_359;
    }
    swift_release();
    *(unsigned char *)(v126 + 3) = *(unsigned char *)(v472 + 16);
    v952 = (unsigned char *)(v126 + 4);
    swift_release();
    sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v475 + 16));
    uint64_t v22 = v942;
    swift_release();
    v482 = v952;
    unsigned char *v952 = *(unsigned char *)(v476 + 16);
    swift_release();
    v482[1] = *(unsigned char *)(v477 + 16);
    v952 = v482 + 2;
    a1 = v919;
    swift_release();
    sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v479 + 16));
    uint64_t v129 = v922;
    swift_release();
    v483 = (void *)v902;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v902, (os_log_type_t)v871, "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.", (uint8_t *)v126, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    (*v893)(v129, v907);
    goto LABEL_200;
  }
  if (v264 == v843)
  {
    v374 = v928;
    ((void (*)(char *, uint64_t))*v904)(v928, inited);
    v375 = *(NSObject **)v374;
    uint64_t v376 = *((void *)v374 + 1);
    v377 = v909;
    RoutingSessionConfiguration.context.getter();
    char v378 = sub_1002AC7F4();
    uint64_t v379 = ((uint64_t (*)(void (**)(char *, char *, uint64_t), unsigned int (**)(uint64_t, uint64_t, uint64_t)))*v903)(v377, v910);
    if ((v378 & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v128 = v947;
      goto LABEL_130;
    }
    v380 = v879;
    (*(void (**)(uint64_t))(*(void *)v932 + 176))(v379);
    Swift::Int v381 = (*(uint64_t (**)(char *))(*(void *)v881 + 264))(v380);
    Swift::Int v383 = v382;
    (*v835)(v380, v880);
    if (!v383)
    {
      swift_release();
      goto LABEL_223;
    }
    swift_bridgeObjectRetain();
    uint64_t v911 = v381;
    sub_10000DDD8((Swift::Int *)&v952, v381, v383);
    swift_bridgeObjectRelease();
    v384 = (void *)var60[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v385 = v948;
    v386 = sub_1002626A0(v384, (uint64_t)v375, v376);
    swift_bridgeObjectRelease();
    if (sub_100260608((unint64_t)v386) > 1)
    {
      uint64_t v387 = sub_1001A6B94();
      uint64_t v388 = (uint64_t)v875;
      sub_1001E71E8(v387, (uint64_t)v875, (uint64_t *)&unk_10047BC50);
      if ((*v853)(v388, 1, v907) != 1)
      {
        uint64_t v824 = (uint64_t)v385;
        os_log_t v839 = v375;
        uint64_t v528 = swift_allocObject();
        *(void *)(v528 + 16) = v901;
        uint64_t v529 = swift_allocObject();
        v530 = v932;
        *(void *)(v529 + 16) = sub_1002637C4;
        *(void *)(v529 + 24) = v530;
        uint64_t v531 = swift_allocObject();
        *(void *)(v531 + 16) = v386;
        uint64_t v532 = swift_allocObject();
        uint64_t v823 = v532;
        *(void *)(v532 + 16) = sub_10026399C;
        *(void *)(v532 + 24) = v531;
        swift_retain();
        uint64_t v838 = (uint64_t)v386;
        swift_bridgeObjectRetain();
        v948 = Logger.logObject.getter();
        LODWORD(v841) = static os_log_type_t.info.getter();
        v846 = (uint8_t *)swift_allocObject();
        v846[16] = 32;
        v845 = (void *)swift_allocObject();
        *((unsigned char *)v845 + 16) = 8;
        uint64_t v533 = swift_allocObject();
        *(void *)(v533 + 16) = sub_1002637D8;
        *(void *)(v533 + 24) = v528;
        uint64_t v534 = swift_allocObject();
        *(void *)(v534 + 16) = sub_1002621AC;
        *(void *)(v534 + 24) = v533;
        uint64_t v535 = swift_allocObject();
        uint64_t v844 = v535;
        *(void *)(v535 + 16) = sub_1002637C8;
        *(void *)(v535 + 24) = v534;
        uint64_t v536 = swift_allocObject();
        *(unsigned char *)(v536 + 16) = 32;
        uint64_t v537 = v536;
        os_log_t v842 = (os_log_t)v536;
        uint64_t v538 = swift_allocObject();
        *(unsigned char *)(v538 + 16) = 8;
        uint64_t v539 = v538;
        uint64_t v540 = swift_allocObject();
        *(void *)(v540 + 16) = sub_1002637CC;
        *(void *)(v540 + 24) = v529;
        uint64_t v541 = swift_allocObject();
        *(void *)(v541 + 16) = sub_1002637C8;
        *(void *)(v541 + 24) = v540;
        uint64_t v542 = v541;
        uint64_t v840 = v541;
        v871 = (void (*)(uint64_t *, uint64_t))swift_allocObject();
        *((unsigned char *)v871 + 16) = 32;
        *(void *)&long long v902 = swift_allocObject();
        *(unsigned char *)(v902 + 16) = 8;
        uint64_t v543 = swift_allocObject();
        uint64_t v544 = v823;
        *(void *)(v543 + 16) = sub_1002637D0;
        *(void *)(v543 + 24) = v544;
        uint64_t v545 = swift_allocObject();
        *(void *)(v545 + 16) = sub_1002637C8;
        *(void *)(v545 + 24) = v543;
        sub_100013A80(&qword_10047AC10);
        uint64_t v546 = swift_allocObject();
        *(_OWORD *)(v546 + 16) = v850;
        *(void *)(v546 + 32) = sub_1002639A0;
        unint64_t v547 = (unint64_t)v845;
        *(void *)(v546 + 40) = v846;
        *(void *)(v546 + 48) = sub_1002639A0;
        *(void *)(v546 + 56) = v547;
        *(void *)(v546 + 64) = sub_1002637D4;
        *(void *)(v546 + 72) = v844;
        *(void *)(v546 + 80) = sub_1002639A0;
        *(void *)(v546 + 88) = v537;
        *(void *)(v546 + 96) = sub_1002639A0;
        *(void *)(v546 + 104) = v539;
        *(void *)(v546 + 112) = sub_1002637D4;
        *(void *)(v546 + 120) = v542;
        *(void *)(v546 + 128) = sub_1002639A0;
        *(void *)(v546 + 136) = v871;
        *(void *)(v546 + 144) = sub_1002639A0;
        *(void *)(v546 + 152) = v902;
        *(void *)(v546 + 160) = sub_1002637D4;
        *(void *)(v546 + 168) = v545;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t inited = (uint64_t)v948;
        swift_bridgeObjectRelease();
        if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v841))
        {
          uint64_t v548 = v844;
          unint64_t v549 = (unint64_t)v845;
          uint64_t v126 = (uint64_t)v842;
          uint64_t v822 = v539;
          uint64_t v823 = v545;
          uint64_t v550 = swift_slowAlloc();
          uint64_t v551 = swift_slowAlloc();
          Swift::Int v958 = 0;
          uint64_t v821 = v551;
          v956[0] = v551;
          *(_WORD *)uint64_t v550 = 770;
          *(unsigned char *)(v550 + 2) = v846[16];
          v385 = v824;
          if (v824) {
            goto LABEL_359;
          }
          swift_release();
          *(unsigned char *)(v550 + 3) = *(unsigned char *)(v549 + 16);
          v952 = (unsigned char *)(v550 + 4);
          v552 = (uint8_t *)v550;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v548 + 16));
          uint64_t v22 = v942;
          swift_release();
          v553 = v952;
          unsigned char *v952 = *(unsigned char *)(v126 + 16);
          swift_release();
          v553[1] = *(unsigned char *)(v822 + 16);
          v952 = v553 + 2;
          uint64_t v554 = v840;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v554 + 16));
          v386 = (void *)v838;
          swift_release();
          v555 = v952;
          unsigned char *v952 = *((unsigned char *)v871 + 16);
          swift_release();
          v555[1] = *(unsigned char *)(v902 + 16);
          v952 = v555 + 2;
          a1 = v919;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v823 + 16));
          v375 = v839;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v948, (os_log_type_t)v841, "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s -> continuing", v552, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v389 = v925;
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          a1 = v919;
          uint64_t v22 = v942;
          uint64_t v389 = v925;
          v386 = (void *)v838;
          v375 = v839;
          v385 = v824;
        }
        (*v893)(v875, v907);
        goto LABEL_283;
      }
      sub_100009A08(v388, (uint64_t *)&unk_10047BC50);
    }
    uint64_t v389 = v925;
LABEL_283:
    uint64_t v126 = v944;
    swift_bridgeObjectRetain();
    sub_100262A28((unint64_t)v386, (uint64_t)v375, v376);
    v948 = v385;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v825)(v389, 1, 1, v918);
    swift_bridgeObjectRetain_n();
    uint64_t v662 = v911;
    v663 = sub_1002623B0(v911, v383, (uint64_t)v375, v376, v389);
    sub_100256DD4((uint64_t)v663, v662, v383);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v912 = v383;
LABEL_219:
    uint64_t v128 = v947;
    uint64_t v129 = v922;
    goto LABEL_131;
  }
  if (v264 == v836)
  {
    v440 = v928;
    ((void (*)(char *, uint64_t))*v904)(v928, inited);
    uint64_t v441 = *(void *)v440;
    uint64_t v442 = *(void *)(*(void *)v440 + 24);
    *(void *)&long long v902 = *(void *)(*(void *)v440 + 16);
    v444 = *(NSObject **)(v441 + 32);
    uint64_t v443 = *(void *)(v441 + 40);
    v445 = *(NSObject **)(v441 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v446 = v909;
    RoutingSessionConfiguration.context.getter();
    char v447 = sub_1002AC7F4();
    (*v903)((char *)v446, (uint64_t)v910);
    if (v447)
    {
      v448 = (NSObject **)sub_10029EEA0();
      v449 = v448[1];
      BOOL v450 = v444 == *v448;
      v451 = v932;
      v846 = (uint8_t *)v441;
      v871 = (void (*)(uint64_t *, uint64_t))v445;
      if (v450 && v443 == v449 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v452 = (uint64_t *)sub_1002A0458();
        uint64_t v453 = *v452;
        uint64_t v454 = v452[1];
        uint64_t v455 = var60[0];
        swift_bridgeObjectRetain();
        uint64_t v456 = sub_1002605C4(v453, v454, v455);
        swift_bridgeObjectRelease();
        if (v456)
        {
          uint64_t v457 = sub_1002605C4(v902, v442, v455);
          swift_bridgeObjectRelease();
          if (v457)
          {
            uint64_t v458 = v457
                 + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
            swift_beginAccess();
            uint64_t v459 = v458;
            uint64_t v460 = v869;
            sub_1001E71E8(v459, v869, &qword_1004794C0);
            swift_release();
            int v461 = (*v817)(v460, 1, v918);
            uint64_t v128 = v947;
            v462 = v870;
            if (v461 != 1)
            {
              sub_1002635B8(v460, (uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              id v464 = *v462;
              v463 = v462[1];
              swift_bridgeObjectRetain();
              id v465 = sub_1002ACEF4();
              if (v463)
              {
                if (v464 == v465 && v463 == v466)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v467 = v865;
                  sub_100262B6C((uint64_t)v462, (uint64_t)v865, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_298:
                  sub_100262BD4((uint64_t)v467, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_312:
                  sub_10018FE08(0, &qword_10047AC18);
                  v733 = v462;
                  uint64_t v734 = (uint64_t)v462[4];
                  uint64_t v735 = *((unsigned int *)v733 + 10);
                  uint64_t v736 = *((unsigned __int8 *)v733 + 44);
                  sub_1001E70B8(v734, v735, *((unsigned char *)v733 + 44));
                  unint64_t v810 = v810 & 0xFFFFFF0000000000 | v735 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v736 << 32);
                  uint64_t v737 = sub_1002A5698(v734);
                  uint64_t v739 = v738;
                  sub_1001DDF44(v734, v735, v736);
                  LOBYTE(v737) = sub_10030B17C(v737, v739);
                  swift_bridgeObjectRelease();
                  if (v737)
                  {
                    uint64_t v740 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter();
                    char v742 = sub_10030B17C(v740, v741);
                    swift_bridgeObjectRelease();
                    if (v742) {
                      goto LABEL_316;
                    }
                  }
                  sub_1001E70B8(v734, v735, v736);
                  unint64_t v809 = v809 & 0xFFFFFF0000000000 | (v736 << 32) | v735;
                  uint64_t v743 = sub_1002A5698(v734);
                  uint64_t v745 = v744;
                  sub_1001DDF44(v734, v735, v736);
                  LOBYTE(v743) = sub_10030B194(v743, v745);
                  swift_bridgeObjectRelease();
                  if ((v743 & 1) == 0) {
                    goto LABEL_317;
                  }
                  uint64_t v746 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter();
                  char v748 = sub_10030B194(v746, v747);
                  swift_bridgeObjectRelease();
                  if (v748)
                  {
LABEL_316:
                    uint64_t v749 = v925;
                    sub_1002635B8((uint64_t)v870, v925, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                    (*v825)(v749, 0, 1, v918);
                    uint64_t v750 = v857;
                    sub_100262D34(v749, v857);
                    uint64_t v751 = v456
                         + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
                    swift_beginAccess();
                    sub_100262D9C(v750, v751);
                    swift_endAccess();
                  }
                  else
                  {
LABEL_317:
                    sub_100262BD4((uint64_t)v870, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  }
                  a1 = v919;
                  uint64_t v22 = v942;
                  goto LABEL_320;
                }
                char v697 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v467 = v865;
                sub_100262B6C((uint64_t)v462, (uint64_t)v865, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                if (v697) {
                  goto LABEL_298;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v467 = v865;
                sub_100262B6C((uint64_t)v462, (uint64_t)v865, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              }
              uint64_t v699 = *v467;
              uint64_t v698 = v467[1];
              swift_bridgeObjectRetain();
              uint64_t v700 = RoutingInteraction.Action.HandoffContext.mediaTitle.getter();
              if (v698)
              {
                if (v699 == v700 && v698 == v701)
                {
                  swift_bridgeObjectRelease();
                  sub_100262BD4((uint64_t)v865, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  swift_bridgeObjectRelease();
                  v462 = v870;
                  goto LABEL_312;
                }
                char v732 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                sub_100262BD4((uint64_t)v865, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                swift_bridgeObjectRelease();
                v462 = v870;
                if (v732) {
                  goto LABEL_312;
                }
              }
              else
              {
                sub_100262BD4((uint64_t)v467, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                swift_bridgeObjectRelease();
                v462 = v870;
              }
              sub_100262BD4((uint64_t)v462, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_320:
              uint64_t v128 = v947;
              goto LABEL_321;
            }
          }
          else
          {
            uint64_t v460 = v869;
            (*v825)(v869, 1, 1, v918);
            uint64_t v128 = v947;
          }
          sub_100009A08(v460, &qword_1004794C0);
LABEL_321:
          uint64_t v752 = v452[1];
          uint64_t v911 = *v452;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v912 = v752;
          uint64_t v129 = v922;
          goto LABEL_130;
        }
        swift_bridgeObjectRelease();
        uint64_t v556 = sub_1001A69C4();
        (*v884)(v872, v556, v907);
        uint64_t v557 = swift_allocObject();
        *(void *)(v557 + 16) = v901;
        uint64_t v558 = swift_allocObject();
        *(void *)(v558 + 16) = sub_1002637C4;
        *(void *)(v558 + 24) = v451;
        swift_retain();
        *(void *)&long long v902 = Logger.logObject.getter();
        LODWORD(v845) = static os_log_type_t.error.getter();
        uint64_t v559 = swift_allocObject();
        *(unsigned char *)(v559 + 16) = 32;
        uint64_t v560 = swift_allocObject();
        *(unsigned char *)(v560 + 16) = 8;
        uint64_t v561 = swift_allocObject();
        *(void *)(v561 + 16) = sub_1002637D8;
        *(void *)(v561 + 24) = v557;
        uint64_t v562 = swift_allocObject();
        *(void *)(v562 + 16) = sub_1002621AC;
        *(void *)(v562 + 24) = v561;
        uint64_t v563 = swift_allocObject();
        *(void *)(v563 + 16) = sub_1002637C8;
        *(void *)(v563 + 24) = v562;
        uint64_t v564 = swift_allocObject();
        *(unsigned char *)(v564 + 16) = 32;
        uint64_t v565 = swift_allocObject();
        *(unsigned char *)(v565 + 16) = 8;
        uint64_t v566 = swift_allocObject();
        *(void *)(v566 + 16) = sub_1002637CC;
        *(void *)(v566 + 24) = v558;
        uint64_t v567 = swift_allocObject();
        *(void *)(v567 + 16) = sub_1002637C8;
        *(void *)(v567 + 24) = v566;
        sub_100013A80(&qword_10047AC10);
        uint64_t v568 = swift_allocObject();
        *(_OWORD *)(v568 + 16) = v885;
        *(void *)(v568 + 32) = sub_1002639A0;
        *(void *)(v568 + 40) = v559;
        *(void *)(v568 + 48) = sub_1002639A0;
        *(void *)(v568 + 56) = v560;
        *(void *)(v568 + 64) = sub_1002637D4;
        *(void *)(v568 + 72) = v563;
        *(void *)(v568 + 80) = sub_1002639A0;
        *(void *)(v568 + 88) = v564;
        *(void *)(v568 + 96) = sub_1002639A0;
        *(void *)(v568 + 104) = v565;
        *(void *)(v568 + 112) = sub_1002637D4;
        *(void *)(v568 + 120) = v567;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t inited = v902;
        swift_bridgeObjectRelease();
        if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v845))
        {
          uint64_t v126 = swift_slowAlloc();
          uint64_t v569 = swift_slowAlloc();
          Swift::Int v958 = 0;
          v956[0] = v569;
          *(_WORD *)uint64_t v126 = 514;
          *(unsigned char *)(v126 + 2) = *(unsigned char *)(v559 + 16);
          if (v948) {
            goto LABEL_359;
          }
          swift_release();
          *(unsigned char *)(v126 + 3) = *(unsigned char *)(v560 + 16);
          v952 = (unsigned char *)(v126 + 4);
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v563 + 16));
          uint64_t v22 = v942;
          swift_release();
          v570 = v952;
          unsigned char *v952 = *(unsigned char *)(v564 + 16);
          swift_release();
          v570[1] = *(unsigned char *)(v565 + 16);
          v952 = v570 + 2;
          a1 = v919;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v567 + 16));
          v571 = v872;
          uint64_t v129 = v922;
          swift_release();
          os_log_type_t v572 = v845;
          v573 = (void *)v902;
          v574 = v902;
          v575 = "[%s] optimisticSessions - No item set found to apply event: %s. Skipping.";
LABEL_237:
          _os_log_impl((void *)&_mh_execute_header, v574, v572, v575, (uint8_t *)v126, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          swift_release();
          (*v893)(v571, v907);
          swift_release();
          uint64_t v128 = v947;
          goto LABEL_130;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*v893)(v872, v907);
        goto LABEL_305;
      }
      v576 = sub_1002A0458();
      if (((void)v902 != *(void *)v576 || v442 != *((void *)v576 + 1))
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v682 = sub_1001A69C4();
        (*v884)(v861, v682, v907);
        uint64_t v683 = swift_allocObject();
        *(void *)(v683 + 16) = v901;
        uint64_t v684 = swift_allocObject();
        *(void *)(v684 + 16) = sub_1002637C4;
        *(void *)(v684 + 24) = v451;
        swift_retain();
        *(void *)&long long v902 = Logger.logObject.getter();
        LODWORD(v845) = static os_log_type_t.fault.getter();
        uint64_t v685 = swift_allocObject();
        *(unsigned char *)(v685 + 16) = 32;
        uint64_t v686 = swift_allocObject();
        *(unsigned char *)(v686 + 16) = 8;
        uint64_t v687 = swift_allocObject();
        *(void *)(v687 + 16) = sub_1002637D8;
        *(void *)(v687 + 24) = v683;
        uint64_t v688 = swift_allocObject();
        *(void *)(v688 + 16) = sub_1002621AC;
        *(void *)(v688 + 24) = v687;
        uint64_t v689 = swift_allocObject();
        *(void *)(v689 + 16) = sub_1002637C8;
        *(void *)(v689 + 24) = v688;
        uint64_t v690 = swift_allocObject();
        *(unsigned char *)(v690 + 16) = 32;
        uint64_t v691 = swift_allocObject();
        *(unsigned char *)(v691 + 16) = 8;
        uint64_t v692 = swift_allocObject();
        *(void *)(v692 + 16) = sub_1002637CC;
        *(void *)(v692 + 24) = v684;
        uint64_t v693 = swift_allocObject();
        *(void *)(v693 + 16) = sub_1002637C8;
        *(void *)(v693 + 24) = v692;
        sub_100013A80(&qword_10047AC10);
        uint64_t v694 = swift_allocObject();
        *(_OWORD *)(v694 + 16) = v885;
        *(void *)(v694 + 32) = sub_1002639A0;
        *(void *)(v694 + 40) = v685;
        *(void *)(v694 + 48) = sub_1002639A0;
        *(void *)(v694 + 56) = v686;
        *(void *)(v694 + 64) = sub_1002637D4;
        *(void *)(v694 + 72) = v689;
        *(void *)(v694 + 80) = sub_1002639A0;
        *(void *)(v694 + 88) = v690;
        *(void *)(v694 + 96) = sub_1002639A0;
        *(void *)(v694 + 104) = v691;
        *(void *)(v694 + 112) = sub_1002637D4;
        *(void *)(v694 + 120) = v693;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t inited = v902;
        swift_bridgeObjectRelease();
        if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v845))
        {
          uint64_t v126 = swift_slowAlloc();
          uint64_t v695 = swift_slowAlloc();
          Swift::Int v958 = 0;
          v956[0] = v695;
          *(_WORD *)uint64_t v126 = 514;
          *(unsigned char *)(v126 + 2) = *(unsigned char *)(v685 + 16);
          if (v948) {
            goto LABEL_359;
          }
          swift_release();
          *(unsigned char *)(v126 + 3) = *(unsigned char *)(v686 + 16);
          v952 = (unsigned char *)(v126 + 4);
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v689 + 16));
          uint64_t v22 = v942;
          swift_release();
          v696 = v952;
          unsigned char *v952 = *(unsigned char *)(v690 + 16);
          swift_release();
          v696[1] = *(unsigned char *)(v691 + 16);
          v952 = v696 + 2;
          a1 = v919;
          swift_release();
          sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v693 + 16));
          v571 = v861;
          uint64_t v129 = v922;
          swift_release();
          os_log_type_t v572 = v845;
          v573 = (void *)v902;
          v574 = v902;
          v575 = "[%s] optimisticSessions - Inconsistency when applying event: %s. Handoff does not match push or pull ac"
                 "tion -> skipping";
          goto LABEL_237;
        }
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        (*v893)(v861, v907);
LABEL_305:
        swift_release();
        goto LABEL_202;
      }
      v577 = v879;
      (*(void (**)(void))(*(void *)v451 + 176))();
      Swift::Int v578 = (*(uint64_t (**)(char *))(*(void *)v881 + 264))(v577);
      v579 = v577;
      Swift::Int v581 = v580;
      (*v835)(v579, v880);
      if (v581)
      {
        swift_bridgeObjectRetain();
        uint64_t v911 = v578;
        sub_10000DDD8((Swift::Int *)&v952, v578, v581);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v582 = (void *)swift_bridgeObjectRetain();
        v583 = v948;
        v584 = sub_1002626A0(v582, (uint64_t)v444, v443);
        v948 = v583;
        swift_bridgeObjectRelease();
        v845 = v584;
        uint64_t v585 = sub_100260608((unint64_t)v584);
        uint64_t v844 = v581;
        if (v585 > 1)
        {
          uint64_t v586 = sub_1001A6B94();
          uint64_t v587 = v859;
          sub_1001E71E8(v586, v859, (uint64_t *)&unk_10047BC50);
          if ((*v853)(v587, 1, v907) == 1)
          {
            sub_100009A08(v587, (uint64_t *)&unk_10047BC50);
          }
          else
          {
            os_log_t v842 = v444;
            uint64_t v702 = swift_allocObject();
            *(void *)(v702 + 16) = v901;
            uint64_t v703 = swift_allocObject();
            v704 = v932;
            *(void *)(v703 + 16) = sub_1002637C4;
            *(void *)(v703 + 24) = v704;
            uint64_t v705 = swift_allocObject();
            *(void *)(v705 + 16) = v845;
            uint64_t v706 = swift_allocObject();
            *(void *)(v706 + 16) = sub_10026399C;
            *(void *)(v706 + 24) = v705;
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v824 = Logger.logObject.getter();
            LODWORD(v823) = static os_log_type_t.info.getter();
            os_log_t v839 = (os_log_t)swift_allocObject();
            LOBYTE(v839[2].isa) = 32;
            uint64_t v838 = swift_allocObject();
            *(unsigned char *)(v838 + 16) = 8;
            uint64_t v707 = swift_allocObject();
            *(void *)(v707 + 16) = sub_1002637D8;
            *(void *)(v707 + 24) = v702;
            uint64_t v708 = swift_allocObject();
            *(void *)(v708 + 16) = sub_1002621AC;
            *(void *)(v708 + 24) = v707;
            uint64_t v709 = swift_allocObject();
            *(void *)(v709 + 16) = sub_1002637C8;
            *(void *)(v709 + 24) = v708;
            uint64_t v710 = v709;
            uint64_t v808 = v709;
            uint64_t v840 = swift_allocObject();
            *(unsigned char *)(v840 + 16) = 32;
            uint64_t v821 = swift_allocObject();
            *(unsigned char *)(v821 + 16) = 8;
            uint64_t v711 = swift_allocObject();
            *(void *)(v711 + 16) = sub_1002637CC;
            *(void *)(v711 + 24) = v703;
            uint64_t v712 = swift_allocObject();
            *(void *)(v712 + 16) = sub_1002637C8;
            *(void *)(v712 + 24) = v711;
            uint64_t v713 = swift_allocObject();
            *(unsigned char *)(v713 + 16) = 32;
            uint64_t v714 = v713;
            uint64_t v841 = v713;
            uint64_t v822 = swift_allocObject();
            *(unsigned char *)(v822 + 16) = 8;
            uint64_t v715 = swift_allocObject();
            *(void *)(v715 + 16) = sub_100262C7C;
            *(void *)(v715 + 24) = v706;
            uint64_t v716 = swift_allocObject();
            *(void *)(v716 + 16) = sub_1002637C8;
            *(void *)(v716 + 24) = v715;
            sub_100013A80(&qword_10047AC10);
            uint64_t v717 = swift_allocObject();
            *(_OWORD *)(v717 + 16) = v850;
            *(void *)(v717 + 32) = sub_1002639A0;
            uint64_t v718 = v838;
            *(void *)(v717 + 40) = v839;
            *(void *)(v717 + 48) = sub_1002639A0;
            *(void *)(v717 + 56) = v718;
            *(void *)(v717 + 64) = sub_1002637D4;
            *(void *)(v717 + 72) = v710;
            *(void *)(v717 + 80) = sub_1002639A0;
            *(void *)(v717 + 88) = v840;
            *(void *)(v717 + 96) = sub_1002639A0;
            *(void *)(v717 + 104) = v821;
            *(void *)(v717 + 112) = sub_1002637D4;
            *(void *)(v717 + 120) = v712;
            *(void *)(v717 + 128) = sub_1002639A0;
            *(void *)(v717 + 136) = v714;
            *(void *)(v717 + 144) = sub_1002639A0;
            *(void *)(v717 + 152) = v822;
            *(void *)(v717 + 160) = sub_1002637D4;
            *(void *)(v717 + 168) = v716;
            swift_retain();
            swift_retain();
            uint64_t v719 = v808;
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v811 = v712;
            uint64_t v720 = v716;
            swift_retain();
            v721 = v824;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v721, (os_log_type_t)v823))
            {
              uint64_t v722 = v838;
              v723 = (uint8_t *)swift_slowAlloc();
              uint64_t v724 = swift_slowAlloc();
              Swift::Int v958 = 0;
              v805[1] = v724;
              v956[0] = v724;
              *(_WORD *)v723 = 770;
              v723[2] = (uint8_t)v839[2].isa;
              if (v948) {
                goto LABEL_364;
              }
              swift_release();
              v723[3] = *(unsigned char *)(v722 + 16);
              v952 = v723 + 4;
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v719 + 16));
              uint64_t v725 = v720;
              swift_release();
              v726 = v952;
              unsigned char *v952 = *(unsigned char *)(v840 + 16);
              uint64_t v727 = v811;
              swift_release();
              v726[1] = *(unsigned char *)(v821 + 16);
              v952 = v726 + 2;
              uint64_t v728 = v859;
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v727 + 16));
              v444 = v842;
              swift_release();
              v729 = v952;
              unsigned char *v952 = *(unsigned char *)(v841 + 16);
              swift_release();
              v729[1] = *(unsigned char *)(v822 + 16);
              v952 = v729 + 2;
              a1 = v919;
              swift_release();
              sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v725 + 16));
              v730 = v824;
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v730, (os_log_type_t)v823, "[%s] optimisticSessions - Inconsistency when applying event: %s. Item is contained in multiple sets: %s -> continuing", v723, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v731 = v907;
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              a1 = v919;
              uint64_t v731 = v907;
              uint64_t v728 = v859;
              v444 = v842;
            }
            (*v893)((char *)v728, v731);
          }
        }
        v753 = *v825;
        uint64_t v754 = v918;
        (*v825)(v866, 1, 1, v918);
        uint64_t v755 = sub_1002605C4(v902, v442, var60[0]);
        swift_bridgeObjectRelease();
        if (v755)
        {
          uint64_t v756 = v755
               + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
          swift_beginAccess();
          uint64_t v757 = v756;
          uint64_t v758 = v860;
          sub_1001E71E8(v757, v860, &qword_1004794C0);
          swift_release();
          int v759 = (*v817)(v758, 1, v754);
          uint64_t v128 = v947;
          if (v759 != 1)
          {
            v760 = (void **)v862;
            sub_1002635B8(v758, v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            id v762 = *v760;
            v761 = v760[1];
            swift_bridgeObjectRetain();
            id v763 = sub_1002ACEF4();
            if (v761)
            {
              if (v762 == v763 && v761 == v764)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v765 = v858;
                sub_100262B6C(v862, (uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_335:
                sub_100262BD4((uint64_t)v765, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                goto LABEL_342;
              }
              char v772 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v765 = v858;
              sub_100262B6C(v862, (uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              if (v772) {
                goto LABEL_335;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v765 = v858;
              sub_100262B6C(v862, (uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            }
            uint64_t v774 = *v765;
            uint64_t v773 = v765[1];
            swift_bridgeObjectRetain();
            uint64_t v775 = RoutingInteraction.Action.HandoffContext.mediaTitle.getter();
            if (v773)
            {
              if (v774 == v775 && v773 == v776)
              {
                swift_bridgeObjectRelease();
                sub_100262BD4((uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                swift_bridgeObjectRelease();
                goto LABEL_342;
              }
              char v777 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              sub_100262BD4((uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              swift_bridgeObjectRelease();
              if (v777)
              {
LABEL_342:
                os_log_t v842 = v444;
                sub_10018FE08(0, &qword_10047AC18);
                uint64_t v778 = *(void *)(v862 + 32);
                uint64_t v779 = *(unsigned int *)(v862 + 40);
                uint64_t v780 = *(unsigned __int8 *)(v862 + 44);
                sub_1001E70B8(v778, v779, *(unsigned char *)(v862 + 44));
                unint64_t v807 = v807 & 0xFFFFFF0000000000 | v779 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v780 << 32);
                uint64_t v781 = sub_1002A5698(v778);
                uint64_t v783 = v782;
                sub_1001DDF44(v778, v779, v780);
                LOBYTE(v781) = sub_10030B17C(v781, v783);
                swift_bridgeObjectRelease();
                if (v781)
                {
                  uint64_t v784 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter();
                  char v786 = sub_10030B17C(v784, v785);
                  swift_bridgeObjectRelease();
                  if (v786) {
                    goto LABEL_346;
                  }
                }
                sub_1001E70B8(v778, v779, v780);
                unint64_t v806 = v806 & 0xFFFFFF0000000000 | (v780 << 32) | v779;
                uint64_t v787 = sub_1002A5698(v778);
                uint64_t v789 = v788;
                sub_1001DDF44(v778, v779, v780);
                LOBYTE(v787) = sub_10030B194(v787, v789);
                swift_bridgeObjectRelease();
                if ((v787 & 1) == 0) {
                  goto LABEL_347;
                }
                uint64_t v790 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter();
                char v792 = sub_10030B194(v790, v791);
                swift_bridgeObjectRelease();
                if (v792)
                {
LABEL_346:
                  uint64_t v793 = v866;
                  sub_100009A08(v866, &qword_1004794C0);
                  sub_1002635B8(v862, v793, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  v753(v793, 0, 1, v918);
                  uint64_t v128 = v947;
                  v444 = v842;
                }
                else
                {
LABEL_347:
                  sub_100262BD4(v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
                  uint64_t v128 = v947;
                  v444 = v842;
                }
                goto LABEL_332;
              }
            }
            else
            {
              sub_100262BD4((uint64_t)v858, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
              swift_bridgeObjectRelease();
            }
            sub_100262BD4(v862, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_332:
            swift_bridgeObjectRetain();
            v766 = v948;
            sub_100262A28((unint64_t)v845, (uint64_t)v444, v443);
            v948 = v766;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v767 = v866;
            uint64_t v768 = v925;
            sub_1001E71E8(v866, v925, &qword_1004794C0);
            uint64_t v769 = v844;
            swift_bridgeObjectRetain_n();
            uint64_t v770 = v911;
            v771 = sub_1002623B0(v911, v769, (uint64_t)v444, v443, v768);
            sub_100256DD4((uint64_t)v771, v770, v769);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_100009A08(v767, &qword_1004794C0);
            swift_release();
            uint64_t v912 = v769;
            uint64_t v22 = v942;
            uint64_t v129 = v922;
            goto LABEL_130;
          }
        }
        else
        {
          uint64_t v758 = v860;
          v753(v860, 1, 1, v754);
          uint64_t v128 = v947;
        }
        sub_100009A08(v758, &qword_1004794C0);
        goto LABEL_332;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();
    goto LABEL_203;
  }
  if (v264 != v831) {
    goto LABEL_361;
  }
  v510 = v928;
  ((void (*)(char *, uint64_t))*v904)(v928, inited);
  uint64_t v511 = *(void *)v510;
  uint64_t v512 = swift_projectBox();
  (*v833)(v886, v512, v883);
  v513 = v909;
  RoutingSessionConfiguration.context.getter();
  char v514 = sub_1002AC7F4();
  (*v903)((char *)v513, (uint64_t)v910);
  v515 = v834;
  *(void *)&long long v902 = v511;
  if ((v514 & 1) == 0)
  {
    v516 = v849;
    RoutingControl.target.getter();
    v517 = *v830;
    uint64_t v518 = v882;
    int v519 = (*v830)(v516, v882);
    if (v519 == v829)
    {
      (*v826)(v516, v518);
      uint64_t v521 = *v516;
      uint64_t v520 = v516[1];
    }
    else
    {
      v871 = (void (*)(uint64_t *, uint64_t))*v515;
      v871(v516, v518);
      v522 = (uint64_t *)v847;
      RoutingControl.target.getter();
      uint64_t v523 = v882;
      int v524 = v517(v522, v882);
      if (v524 != v820)
      {
        v871(v522, v523);
        goto LABEL_249;
      }
      (*v826)(v522, v523);
      uint64_t v521 = sub_10029F394();
      uint64_t v520 = v525;
      swift_bridgeObjectRelease();
    }
    v526 = sub_1002A0458();
    if (v521 == *(void *)v526 && v520 == *((void *)v526 + 1))
    {
      swift_bridgeObjectRelease();
LABEL_249:
      uint64_t v129 = v922;
      goto LABEL_250;
    }
    char v527 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v129 = v922;
    if ((v527 & 1) == 0)
    {
      (*v832)(v886, v883);
      swift_release();
      goto LABEL_268;
    }
  }
LABEL_250:
  v588 = (unsigned int *)v877;
  RoutingControl.type.getter();
  uint64_t v589 = v878;
  int v590 = (*v828)(v588, v878);
  if (v590 != v827)
  {
    v596 = v876;
    if (v590 == v818)
    {
      uint64_t v597 = RoutingControl.sessionIdentifier.getter();
      uint64_t v599 = sub_1002605C4(v597, v598, var60[0]);
      swift_bridgeObjectRelease();
      if (v599)
      {
        v600 = sub_100256C20();
        if (!(*v817)(v601, 1, v918))
        {
          (*v814)(v863, v813, v864);
          goto LABEL_266;
        }
        goto LABEL_267;
      }
      uint64_t v630 = sub_1001A69C4();
      (*v884)(v867, v630, v907);
      uint64_t v631 = swift_allocObject();
      *(void *)(v631 + 16) = v901;
      uint64_t v632 = swift_allocObject();
      *(void *)(v632 + 16) = sub_1002637C4;
      *(void *)(v632 + 24) = v932;
      swift_retain();
      v871 = (void (*)(uint64_t *, uint64_t))Logger.logObject.getter();
      int v633 = static os_log_type_t.error.getter();
      uint64_t v634 = swift_allocObject();
      *(unsigned char *)(v634 + 16) = 32;
      uint64_t v635 = swift_allocObject();
      *(unsigned char *)(v635 + 16) = 8;
      uint64_t v636 = swift_allocObject();
      *(void *)(v636 + 16) = sub_1002637D8;
      *(void *)(v636 + 24) = v631;
      uint64_t v637 = swift_allocObject();
      *(void *)(v637 + 16) = sub_1002621AC;
      *(void *)(v637 + 24) = v636;
      uint64_t v638 = swift_allocObject();
      *(void *)(v638 + 16) = sub_1002637C8;
      *(void *)(v638 + 24) = v637;
      uint64_t v639 = swift_allocObject();
      *(unsigned char *)(v639 + 16) = 32;
      uint64_t v640 = swift_allocObject();
      *(unsigned char *)(v640 + 16) = 8;
      uint64_t v641 = swift_allocObject();
      *(void *)(v641 + 16) = sub_1002637CC;
      *(void *)(v641 + 24) = v632;
      uint64_t v642 = swift_allocObject();
      *(void *)(v642 + 16) = sub_1002637C8;
      *(void *)(v642 + 24) = v641;
      sub_100013A80(&qword_10047AC10);
      uint64_t v643 = swift_allocObject();
      *(_OWORD *)(v643 + 16) = v885;
      *(void *)(v643 + 32) = sub_1002639A0;
      *(void *)(v643 + 40) = v634;
      *(void *)(v643 + 48) = sub_1002639A0;
      *(void *)(v643 + 56) = v635;
      *(void *)(v643 + 64) = sub_1002637D4;
      *(void *)(v643 + 72) = v638;
      *(void *)(v643 + 80) = sub_1002639A0;
      *(void *)(v643 + 88) = v639;
      *(void *)(v643 + 96) = sub_1002639A0;
      *(void *)(v643 + 104) = v640;
      *(void *)(v643 + 112) = sub_1002637D4;
      *(void *)(v643 + 120) = v642;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t inited = (uint64_t)v871;
      swift_bridgeObjectRelease();
      LODWORD(v846) = v633;
      if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v633))
      {
        uint64_t v126 = swift_slowAlloc();
        uint64_t v644 = swift_slowAlloc();
        Swift::Int v958 = 0;
        v956[0] = v644;
        *(_WORD *)uint64_t v126 = 514;
        *(unsigned char *)(v126 + 2) = *(unsigned char *)(v634 + 16);
        if (v948) {
          goto LABEL_359;
        }
        swift_release();
        *(unsigned char *)(v126 + 3) = *(unsigned char *)(v635 + 16);
        v952 = (unsigned char *)(v126 + 4);
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v638 + 16));
        swift_release();
        v645 = v952;
        unsigned char *v952 = *(unsigned char *)(v639 + 16);
        swift_release();
        v645[1] = *(unsigned char *)(v640 + 16);
        v952 = v645 + 2;
        uint64_t v129 = v922;
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v642 + 16));
        v629 = v867;
        goto LABEL_288;
      }

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*v893)(v867, v907);
    }
    else
    {
      if (v590 != v816)
      {
        (*v832)(v886, v883);
        swift_release();
        (*v815)(v588, v589);
LABEL_268:
        swift_release();
LABEL_269:
        uint64_t v126 = v944;
        uint64_t inited = v945;
        uint64_t v128 = v260;
        goto LABEL_113;
      }
      uint64_t v609 = RoutingControl.sessionIdentifier.getter();
      uint64_t v611 = sub_1002605C4(v609, v610, var60[0]);
      swift_bridgeObjectRelease();
      if (v611)
      {
        v600 = sub_100256C20();
        if (!(*v817)(v612, 1, v918))
        {
          (*v814)(v863, v812, v864);
LABEL_266:
          uint64_t v129 = v922;
          RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.setter();
        }
LABEL_267:
        ((void (*)(unsigned char **, void))v600)(&v952, 0);
        uint64_t inited = v945;
        swift_release();
        swift_release();
        (*v832)(v886, v883);
        swift_release();
        uint64_t v126 = v944;
        uint64_t v128 = v260;
        goto LABEL_113;
      }
      uint64_t v664 = sub_1001A69C4();
      (*v884)(v596, v664, v907);
      uint64_t v665 = swift_allocObject();
      *(void *)(v665 + 16) = v901;
      uint64_t v666 = swift_allocObject();
      *(void *)(v666 + 16) = sub_1002637C4;
      *(void *)(v666 + 24) = v932;
      swift_retain();
      v871 = (void (*)(uint64_t *, uint64_t))Logger.logObject.getter();
      int v667 = static os_log_type_t.error.getter();
      uint64_t v668 = swift_allocObject();
      *(unsigned char *)(v668 + 16) = 32;
      uint64_t v669 = swift_allocObject();
      *(unsigned char *)(v669 + 16) = 8;
      uint64_t v670 = swift_allocObject();
      *(void *)(v670 + 16) = sub_1002637D8;
      *(void *)(v670 + 24) = v665;
      uint64_t v671 = v668;
      uint64_t v672 = swift_allocObject();
      *(void *)(v672 + 16) = sub_1002621AC;
      *(void *)(v672 + 24) = v670;
      uint64_t v673 = swift_allocObject();
      *(void *)(v673 + 16) = sub_1002637C8;
      *(void *)(v673 + 24) = v672;
      uint64_t v674 = swift_allocObject();
      *(unsigned char *)(v674 + 16) = 32;
      uint64_t v675 = swift_allocObject();
      *(unsigned char *)(v675 + 16) = 8;
      uint64_t v676 = swift_allocObject();
      *(void *)(v676 + 16) = sub_1002637CC;
      *(void *)(v676 + 24) = v666;
      uint64_t v677 = swift_allocObject();
      *(void *)(v677 + 16) = sub_1002637C8;
      *(void *)(v677 + 24) = v676;
      sub_100013A80(&qword_10047AC10);
      uint64_t v678 = swift_allocObject();
      *(_OWORD *)(v678 + 16) = v885;
      *(void *)(v678 + 32) = sub_1002639A0;
      *(void *)(v678 + 40) = v671;
      *(void *)(v678 + 48) = sub_1002639A0;
      *(void *)(v678 + 56) = v669;
      *(void *)(v678 + 64) = sub_1002637D4;
      *(void *)(v678 + 72) = v673;
      *(void *)(v678 + 80) = sub_1002639A0;
      *(void *)(v678 + 88) = v674;
      *(void *)(v678 + 96) = sub_1002639A0;
      *(void *)(v678 + 104) = v675;
      *(void *)(v678 + 112) = sub_1002637D4;
      *(void *)(v678 + 120) = v677;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t inited = (uint64_t)v871;
      swift_bridgeObjectRelease();
      LODWORD(v846) = v667;
      if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v667))
      {
        uint64_t v126 = swift_slowAlloc();
        uint64_t v679 = swift_slowAlloc();
        Swift::Int v958 = 0;
        v956[0] = v679;
        *(_WORD *)uint64_t v126 = 514;
        *(unsigned char *)(v126 + 2) = *(unsigned char *)(v671 + 16);
        if (v948) {
          goto LABEL_359;
        }
        swift_release();
        *(unsigned char *)(v126 + 3) = *(unsigned char *)(v669 + 16);
        v952 = (unsigned char *)(v126 + 4);
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v673 + 16));
        swift_release();
        v680 = v952;
        unsigned char *v952 = *(unsigned char *)(v674 + 16);
        swift_release();
        v680[1] = *(unsigned char *)(v675 + 16);
        v952 = v680 + 2;
        uint64_t v129 = v922;
        swift_release();
        sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v677 + 16));
        v629 = v876;
        goto LABEL_288;
      }

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*v893)(v876, v907);
    }
    goto LABEL_304;
  }
  (*v819)(v588, v589);
  uint64_t v591 = *v588;
  v592 = v874;
  RoutingControl.target.getter();
  uint64_t v593 = v882;
  int v594 = (*v830)(v592, v882);
  if (v594 == v829)
  {
    (*v826)(v592, v593);
    uint64_t v595 = sub_1002605C4(*v592, v592[1], var60[0]);
    swift_bridgeObjectRelease();
    if (v595)
    {
      (*v832)(v886, v883);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v129 = v922;
      goto LABEL_269;
    }
    uint64_t v613 = sub_1001A69C4();
    (*v884)(v868, v613, v907);
    uint64_t v614 = swift_allocObject();
    *(void *)(v614 + 16) = v901;
    uint64_t v615 = swift_allocObject();
    *(void *)(v615 + 16) = sub_1002637C4;
    *(void *)(v615 + 24) = v932;
    swift_retain();
    v871 = (void (*)(uint64_t *, uint64_t))Logger.logObject.getter();
    int v616 = static os_log_type_t.error.getter();
    uint64_t v617 = swift_allocObject();
    *(unsigned char *)(v617 + 16) = 32;
    uint64_t v618 = swift_allocObject();
    *(unsigned char *)(v618 + 16) = 8;
    uint64_t v619 = swift_allocObject();
    *(void *)(v619 + 16) = sub_1002637D8;
    *(void *)(v619 + 24) = v614;
    uint64_t v620 = swift_allocObject();
    *(void *)(v620 + 16) = sub_1002621AC;
    *(void *)(v620 + 24) = v619;
    uint64_t v621 = swift_allocObject();
    *(void *)(v621 + 16) = sub_1002637C8;
    *(void *)(v621 + 24) = v620;
    uint64_t v622 = swift_allocObject();
    *(unsigned char *)(v622 + 16) = 32;
    uint64_t v623 = swift_allocObject();
    *(unsigned char *)(v623 + 16) = 8;
    uint64_t v624 = swift_allocObject();
    *(void *)(v624 + 16) = sub_1002637CC;
    *(void *)(v624 + 24) = v615;
    uint64_t v625 = swift_allocObject();
    *(void *)(v625 + 16) = sub_1002637C8;
    *(void *)(v625 + 24) = v624;
    sub_100013A80(&qword_10047AC10);
    uint64_t v626 = swift_allocObject();
    *(_OWORD *)(v626 + 16) = v885;
    *(void *)(v626 + 32) = sub_1002639A0;
    *(void *)(v626 + 40) = v617;
    *(void *)(v626 + 48) = sub_1002639A0;
    *(void *)(v626 + 56) = v618;
    *(void *)(v626 + 64) = sub_1002637D4;
    *(void *)(v626 + 72) = v621;
    *(void *)(v626 + 80) = sub_1002639A0;
    *(void *)(v626 + 88) = v622;
    *(void *)(v626 + 96) = sub_1002639A0;
    *(void *)(v626 + 104) = v623;
    *(void *)(v626 + 112) = sub_1002637D4;
    *(void *)(v626 + 120) = v625;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t inited = (uint64_t)v871;
    swift_bridgeObjectRelease();
    LODWORD(v846) = v616;
    if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v616))
    {
      uint64_t v126 = swift_slowAlloc();
      uint64_t v627 = swift_slowAlloc();
      Swift::Int v958 = 0;
      v956[0] = v627;
      *(_WORD *)uint64_t v126 = 514;
      *(unsigned char *)(v126 + 2) = *(unsigned char *)(v617 + 16);
      if (v948) {
        goto LABEL_359;
      }
      swift_release();
      *(unsigned char *)(v126 + 3) = *(unsigned char *)(v618 + 16);
      v952 = (unsigned char *)(v126 + 4);
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v621 + 16));
      swift_release();
      v628 = v952;
      unsigned char *v952 = *(unsigned char *)(v622 + 16);
      swift_release();
      v628[1] = *(unsigned char *)(v623 + 16);
      v952 = v628 + 2;
      uint64_t v129 = v922;
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v625 + 16));
      v629 = v868;
LABEL_288:
      swift_release();
      os_log_t v681 = (os_log_t)v871;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v871, (os_log_type_t)v846, "[%s] optimisticSessions - No item set found to apply event: %s -> skipping", (uint8_t *)v126, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      (*v893)(v629, v907);
      (*v832)(v886, v883);
      swift_release();
      a1 = v919;
      uint64_t v22 = v942;
      uint64_t v126 = v944;
      uint64_t inited = v945;
      uint64_t v128 = v947;
      goto LABEL_113;
    }

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*v893)(v868, v907);
LABEL_304:
    (*v832)(v886, v883);
    goto LABEL_305;
  }
  v602 = v873;
  if (v594 == v820)
  {
    (*v826)(v592, v593);
    v603 = v592;
    uint64_t v604 = *v592;
    uint64_t v605 = v603[1];
    uint64_t v606 = sub_10029F394();
    uint64_t v608 = sub_1002605C4(v606, v607, var60[0]);
    swift_bridgeObjectRelease();
    if (v608)
    {
      swift_beginAccess();
      LOBYTE(v958) = 0;
      sub_100256C7C(v591, v604, v605);
      swift_endAccess();
      swift_release();
      swift_release();
      (*v832)(v886, v883);
      swift_release();
      goto LABEL_203;
    }
    swift_bridgeObjectRelease();
    uint64_t v646 = sub_1001A69C4();
    (*v884)(v602, v646, v907);
    uint64_t v647 = swift_allocObject();
    *(void *)(v647 + 16) = v901;
    uint64_t v648 = swift_allocObject();
    *(void *)(v648 + 16) = sub_1002637C4;
    *(void *)(v648 + 24) = v932;
    swift_retain();
    v871 = (void (*)(uint64_t *, uint64_t))Logger.logObject.getter();
    int v649 = static os_log_type_t.error.getter();
    uint64_t v650 = swift_allocObject();
    *(unsigned char *)(v650 + 16) = 32;
    uint64_t v651 = swift_allocObject();
    *(unsigned char *)(v651 + 16) = 8;
    uint64_t v652 = swift_allocObject();
    *(void *)(v652 + 16) = sub_1002637D8;
    *(void *)(v652 + 24) = v647;
    uint64_t v653 = swift_allocObject();
    *(void *)(v653 + 16) = sub_1002621AC;
    *(void *)(v653 + 24) = v652;
    uint64_t v654 = swift_allocObject();
    *(void *)(v654 + 16) = sub_1002637C8;
    *(void *)(v654 + 24) = v653;
    uint64_t v655 = swift_allocObject();
    *(unsigned char *)(v655 + 16) = 32;
    uint64_t v656 = swift_allocObject();
    *(unsigned char *)(v656 + 16) = 8;
    uint64_t v657 = swift_allocObject();
    *(void *)(v657 + 16) = sub_1002621F0;
    *(void *)(v657 + 24) = v648;
    uint64_t v658 = swift_allocObject();
    *(void *)(v658 + 16) = sub_1002637C8;
    *(void *)(v658 + 24) = v657;
    sub_100013A80(&qword_10047AC10);
    uint64_t v659 = swift_initStackObject();
    *(_OWORD *)(v659 + 16) = v885;
    *(void *)(v659 + 32) = sub_1002639A0;
    *(void *)(v659 + 40) = v650;
    *(void *)(v659 + 48) = sub_1002639A0;
    *(void *)(v659 + 56) = v651;
    *(void *)(v659 + 64) = sub_1002637D4;
    *(void *)(v659 + 72) = v654;
    *(void *)(v659 + 80) = sub_1002639A0;
    *(void *)(v659 + 88) = v655;
    *(void *)(v659 + 96) = sub_1002639A0;
    *(void *)(v659 + 104) = v656;
    *(void *)(v659 + 112) = sub_1002637D4;
    *(void *)(v659 + 120) = v658;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t inited = (uint64_t)v871;
    swift_bridgeObjectRelease();
    LODWORD(v846) = v649;
    if (os_log_type_enabled((os_log_t)inited, (os_log_type_t)v649))
    {
      uint64_t v126 = swift_slowAlloc();
      uint64_t v660 = swift_slowAlloc();
      Swift::Int v958 = 0;
      v956[0] = v660;
      *(_WORD *)uint64_t v126 = 514;
      *(unsigned char *)(v126 + 2) = *(unsigned char *)(v650 + 16);
      if (v948) {
        goto LABEL_359;
      }
      swift_release();
      *(unsigned char *)(v126 + 3) = *(unsigned char *)(v651 + 16);
      v952 = (unsigned char *)(v126 + 4);
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v654 + 16));
      swift_release();
      v661 = v952;
      unsigned char *v952 = *(unsigned char *)(v655 + 16);
      swift_release();
      v661[1] = *(unsigned char *)(v656 + 16);
      v952 = v661 + 2;
      uint64_t v129 = v922;
      swift_release();
      sub_100260EB4((uint64_t *)&v952, (uint64_t)&v958, v956, *(uint64_t (**)(void))(v658 + 16));
      v629 = v873;
      goto LABEL_288;
    }

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*v893)(v873, v907);
    goto LABEL_304;
  }
  v952 = 0;
  unint64_t v953 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v799._countAndFlagsBits = 91;
  v799._object = (void *)0xE100000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v799);
  sub_100257264();
  v800._countAndFlagsBits = 0xD00000000000002FLL;
  v800._object = (void *)0x80000001003B7480;
  DefaultStringInterpolation.appendLiteral(_:)(v800);
  uint64_t v801 = (uint64_t)v856;
  RoutingControl.target.getter();
  sub_1002572A4(v801, (void (*)(void))&type metadata accessor for RoutingControl.Target, &qword_100478D80, (void (*)(uint64_t))&type metadata accessor for RoutingControl.Target);
  (*v834)(v801, v593);
  v802._countAndFlagsBits = 0;
  v802._object = (void *)0xE000000000000000;
  DefaultStringInterpolation.appendLiteral(_:)(v802);
  LODWORD(vars8) = 0;
  uint64_t v798 = 234;
LABEL_363:
  var60[12] = v798;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_364:
  uint64_t result = swift_errorRelease();
  __break(1u);
  return result;
}

BOOL sub_100260560(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

uint64_t sub_1002605C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100013660(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100260608(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100260668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v20 = a4;
    uint64_t v21 = v4;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v15 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100262B6C(v14, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
      BOOL v16 = *v12 == a2 && v12[1] == a3;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_100262BD4((uint64_t)v12, type metadata accessor for HostedRoutingItem);
      v14 += v15;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 1;
        a4 = v20;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    a4 = v20;
    sub_1002635B8((uint64_t)v12, v20, type metadata accessor for HostedRoutingItem);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v17, 1, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10026084C(uint64_t a1)
{
  unint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_100260C34(0, *(void *)(v3 + 16) + 1, 1, v3, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  }
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  if (v5 >= v4 >> 1) {
    unint64_t v3 = sub_100260C34(v4 > 1, v5 + 1, 1, v3, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  }
  *(void *)(v3 + 16) = v5 + 1;
  uint64_t v6 = *(void *)(type metadata accessor for HostedRoutingItem(0) - 8);
  uint64_t result = sub_1002635B8(a1, v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5, type metadata accessor for HostedRoutingItem);
  unint64_t *v1 = v3;
  return result;
}

uint64_t sub_1002609BC(uint64_t a1)
{
  unint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = sub_100260C34(0, *(void *)(v3 + 16) + 1, 1, v3, &qword_100478F38, type metadata accessor for HostedRoutingSourceSession, type metadata accessor for HostedRoutingSourceSession);
  }
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  if (v5 >= v4 >> 1) {
    unint64_t v3 = sub_100260C34(v4 > 1, v5 + 1, 1, v3, &qword_100478F38, type metadata accessor for HostedRoutingSourceSession, type metadata accessor for HostedRoutingSourceSession);
  }
  *(void *)(v3 + 16) = v5 + 1;
  uint64_t v6 = *(void *)(type metadata accessor for HostedRoutingSourceSession(0) - 8);
  uint64_t result = sub_1002635B8(a1, v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5, type metadata accessor for HostedRoutingSourceSession);
  unint64_t *v1 = v3;
  return result;
}

uint64_t sub_100260B2C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for RoutingTimeline.Event();
  sub_10026377C(&qword_10047ADF0, (void (*)(uint64_t))type metadata accessor for RoutingTimeline.Event);
  uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_release();
  return v1;
}

uint64_t sub_100260BC8(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for RoutingOptimisticEngine.ItemSet();
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100260C34(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100013A80(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100263620(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_100260EB4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_10018A9E0(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100260F2C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047ADE8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    int v33 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    size_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *size_t v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100261234(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047ADF8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_10026154C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_DWORD *)(v14 + 4 * v3);
          unint64_t v16 = (_DWORD *)(v14 + 4 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100261724(uint64_t a1, uint64_t a2, char a3, float a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100013660(a1, a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002619FC();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_100260F2C(result, a3 & 1);
  uint64_t result = sub_100013660(a1, a2);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v20 = a1;
  v20[1] = a2;
  *(float *)(v18[7] + 4 * v12) = a4;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10026188C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100261BAC();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100261234(v15, a4 & 1);
  unint64_t v21 = sub_100013660(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_1002619FC()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047ADE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 4 * v15;
    int v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100261BAC()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047ADF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100261D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (uint64_t *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = (uint64_t)v4
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v4[2] = a1;
  v4[3] = a2;
  unint64_t v15 = sub_1001D2D70(a3);
  uint64_t v16 = sub_10000B4EC((uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v47 = v4;
  v4[4] = v16;
  swift_beginAccess();
  uint64_t v46 = a4;
  sub_100263550(a4, v13);
  swift_endAccess();
  uint64_t v17 = *(void *)(a3 + 16);
  if (!v17)
  {
    unint64_t v21 = &_swiftEmptyDictionarySingleton;
LABEL_22:
    sub_100009A08(v46, &qword_1004794C0);
    uint64_t result = (uint64_t)v47;
    v47[5] = v21;
    return result;
  }
  uint64_t v18 = (char *)v12 + *(int *)(v9 + 48);
  uint64_t v19 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v20 = *(void *)(v10 + 72);
  unint64_t v21 = &_swiftEmptyDictionarySingleton;
  uint64_t v48 = v12;
  while (1)
  {
    sub_100262B6C(v19, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
    uint64_t v23 = *v12;
    uint64_t v22 = v12[1];
    int v24 = *(_DWORD *)v18;
    char v25 = v18[4];
    swift_bridgeObjectRetain();
    sub_100262BD4((uint64_t)v12, type metadata accessor for HostedRoutingItem);
    if ((v25 & 1) == 0) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_100013660(v23, v22);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_5;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002619FC();
      unint64_t v21 = v49;
    }
    swift_bridgeObjectRelease();
    sub_10026154C(v26, (uint64_t)v21);
LABEL_4:
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v19 += v20;
    if (!--v17) {
      goto LABEL_22;
    }
  }
  uint64_t v30 = v18;
  uint64_t v31 = v20;
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v49 = v21;
  unint64_t v34 = sub_100013660(v23, v22);
  uint64_t v35 = v21[2];
  BOOL v36 = (v33 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (!__OFADD__(v35, v36))
  {
    char v38 = v33;
    if (v21[3] >= v37)
    {
      if ((v32 & 1) == 0) {
        sub_1002619FC();
      }
    }
    else
    {
      sub_100260F2C(v37, v32);
      unint64_t v39 = sub_100013660(v23, v22);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_25;
      }
      unint64_t v34 = v39;
    }
    uint64_t v20 = v31;
    unint64_t v21 = v49;
    uint64_t v18 = v30;
    if (v38)
    {
      *(_DWORD *)(v49[7] + 4 * v34) = v24;
      unint64_t v12 = v48;
    }
    else
    {
      v49[(v34 >> 6) + 8] |= 1 << v34;
      uint64_t v41 = (uint64_t *)(v21[6] + 16 * v34);
      uint64_t *v41 = v23;
      v41[1] = v22;
      *(_DWORD *)(v21[7] + 4 * v34) = v24;
      uint64_t v42 = v21[2];
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      unint64_t v12 = v48;
      if (v43) {
        goto LABEL_24;
      }
      void v21[2] = v44;
      swift_bridgeObjectRetain();
    }
    goto LABEL_4;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RoutingOptimisticEngine.ItemSet()
{
  uint64_t result = qword_100480E78;
  if (!qword_100480E78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100262168()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262178()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_100262188(unsigned char **result)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *(unsigned char *)(v1 + 16);
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_10026219C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002621B0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002621D8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100260EB4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1002621E0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002621F0()
{
  return sub_100260B2C(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1002621F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262208()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262218()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262228()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262238()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262248()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262258()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262268()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262278()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262288()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262298()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002622D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002622E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002622F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262300()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262310()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262320()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262330()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262340()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262350()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262360()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262370()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262380()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262390()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002623A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *sub_1002623B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for RoutingOptimisticEngine.ItemSet();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = (uint64_t)v10
      + OBJC_IVAR____TtCC12mediaremoted23RoutingOptimisticEngineP33_137343DE692D6DCED7CF5E29500708C37ItemSet_nowPlayingInfo;
  uint64_t v12 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v10[2] = a1;
  v10[3] = a2;
  sub_100013A80(&qword_100478690);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a4;
  uint64_t v14 = sub_10000B4EC(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v10[4] = v14;
  swift_beginAccess();
  sub_100263550(a5, v11);
  swift_endAccess();
  sub_100009A08(a5, &qword_1004794C0);
  v10[5] = &_swiftEmptyDictionarySingleton;
  return v10;
}

uint64_t sub_100262508(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a1 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        if (a2)
        {
          uint64_t v12 = *(void *)(v9 + 16);
          uint64_t v11 = *(void *)(v9 + 24);
          swift_bridgeObjectRetain();
          uint64_t v13 = sub_1002A0458();
          if (v12 == *(void *)v13 && v11 == *((void *)v13 + 1)) {
            goto LABEL_5;
          }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15)
          {
            swift_release();
            goto LABEL_6;
          }
        }
        swift_beginAccess();
        sub_10018C4D0(a3, a4);
        swift_endAccess();
LABEL_5:
        swift_release();
        swift_bridgeObjectRelease();
LABEL_6:
        ++v7;
      }
      while (v10 != v6);
    }
  }
  return swift_bridgeObjectRelease();
}

void *sub_1002626A0(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  int64_t v5 = 0;
  uint64_t v31 = result;
  char v32 = result + 8;
  uint64_t v6 = 1 << *((unsigned char *)result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & result[8];
  int64_t v33 = (unint64_t)(v6 + 63) >> 6;
LABEL_6:
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v5 << 6);
LABEL_19:
    uint64_t v14 = *(void *)(v4[7] + 8 * v10);
    uint64_t result = (void *)swift_beginAccess();
    uint64_t v15 = *(void *)(v14 + 32);
    if (*(void *)(v15 + 16))
    {
      Hasher.init(_seed:)();
      swift_retain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v16 = Hasher._finalize()();
      uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
      unint64_t v18 = v16 & ~v17;
      uint64_t v19 = v15 + 56;
      if ((*(void *)(v15 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
      {
        uint64_t v20 = *(void *)(v15 + 48);
        unint64_t v21 = (void *)(v20 + 16 * v18);
        if (*v21 == v3 && v21[1] == a3)
        {
LABEL_27:
          swift_bridgeObjectRelease();
          uint64_t v4 = v31;
LABEL_28:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t result = (void *)specialized ContiguousArray._endMutation()();
        }
        else
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)())
          {
            swift_bridgeObjectRelease();
            uint64_t v3 = a2;
            uint64_t v4 = v31;
            goto LABEL_28;
          }
          uint64_t v23 = ~v17;
          unint64_t v24 = (v18 + 1) & v23;
          if ((*(void *)(v19 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
          {
            uint64_t v25 = a3;
            uint64_t v3 = a2;
            while (1)
            {
              unint64_t v26 = (void *)(v20 + 16 * v24);
              if (*v26 == a2 && v26[1] == v25) {
                goto LABEL_27;
              }
              char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v25 = a3;
              if (v28) {
                goto LABEL_27;
              }
              unint64_t v24 = (v24 + 1) & v23;
              if (((*(void *)(v19 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
              {
                swift_release();
                uint64_t result = (void *)swift_bridgeObjectRelease();
                uint64_t v4 = v31;
                goto LABEL_6;
              }
            }
          }
          swift_release();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v3 = a2;
          uint64_t v4 = v31;
        }
      }
      else
      {
        swift_release();
        uint64_t result = (void *)swift_bridgeObjectRelease();
      }
    }
  }
  if (__OFADD__(v5++, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v5 >= v33) {
    goto LABEL_46;
  }
  unint64_t v12 = v32[v5];
  if (v12)
  {
LABEL_18:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
    goto LABEL_19;
  }
  int64_t v13 = v5 + 1;
  if (v5 + 1 >= v33) {
    goto LABEL_46;
  }
  unint64_t v12 = v32[v13];
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v5 + 2;
  if (v5 + 2 >= v33) {
    goto LABEL_46;
  }
  unint64_t v12 = v32[v13];
  if (v12) {
    goto LABEL_17;
  }
  int64_t v13 = v5 + 3;
  if (v5 + 3 >= v33) {
    goto LABEL_46;
  }
  unint64_t v12 = v32[v13];
  if (v12)
  {
LABEL_17:
    int64_t v5 = v13;
    goto LABEL_18;
  }
  int64_t v29 = v5 + 4;
  if (v5 + 4 >= v33)
  {
LABEL_46:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = v32[v29];
  v5 += 4;
  if (v12) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v5 >= v33) {
      goto LABEL_46;
    }
    unint64_t v12 = v32[v5];
    ++v29;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100262A28(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v9 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          swift_retain();
          uint64_t v9 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        swift_beginAccess();
        sub_10018C4D0(a2, a3);
        swift_endAccess();
        swift_release();
        swift_bridgeObjectRelease();
        ++v7;
      }
      while (v9 != v6);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100262B6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100262BD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100262C34()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262C44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262C7C()
{
  return sub_100260BC8(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100262C84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262C94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262CA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262CB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262CC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262CD4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262CE4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262CF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262D04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262D14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262D24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_1004794C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100262D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_1004794C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100262E04()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262E14()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E24()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E34()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E44()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E54()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E64()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E74()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262E84()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262E94()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262EA4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262EB4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262EC4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262ED4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262EE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262EF4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F04()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F14()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262F24@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100262F30()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F40()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F50()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F60()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F70()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262F90()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262FA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262FB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262FC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262FD0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100262FE0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100262FF0@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_100262FFC()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  uint64_t v1 = sub_100256F30();
  swift_release();
  return v1;
}

uint64_t sub_100263058()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100263090()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1002630C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002630D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002630E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002630F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263100()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263110()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263120()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263130()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263140()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100263150()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100263158()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263168()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263178()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263188()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263198()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002631A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002631B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002631C8()
{
  (*(void (**)(void))(v0 + 16))();

  return _typeName(_:qualified:)();
}

uint64_t sub_100263204()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263214()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263224()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100263234()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t type metadata accessor for RoutingOptimisticEngine()
{
  return self;
}

uint64_t sub_100263268()
{
  return type metadata accessor for RoutingOptimisticEngine.ItemSet();
}

void sub_100263270()
{
  sub_10026331C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10026331C()
{
  if (!qword_10047ACE0)
  {
    type metadata accessor for HostedRoutingSession.NowPlayingInfo(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047ACE0);
    }
  }
}

uint64_t destroy for RoutingOptimisticEngine.OptimisticState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s12mediaremoted23RoutingOptimisticEngineC15OptimisticStateVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RoutingOptimisticEngine.OptimisticState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for HostedRoutingSessionDataSource.SessionElements(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for RoutingOptimisticEngine.OptimisticState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingOptimisticEngine.OptimisticState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingOptimisticEngine.OptimisticState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RoutingOptimisticEngine.OptimisticState()
{
  return &type metadata for RoutingOptimisticEngine.OptimisticState;
}

uint64_t sub_100263550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_1004794C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002635B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100263620(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10026377C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1002639A4()
{
  id v1 = [v0 sortingHint];
  if (v1)
  {
    uint64_t v2 = v1;
    [v1 doubleValue];
  }
}

uint64_t sub_100263A24()
{
  return sub_10026403C();
}

void (*sub_100263A30(void *a1))(void **, char)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_100263AB4;
}

id sub_100263AB8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_100263B14(a1, a2, a3, a4);
}

id sub_100263B14(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_queue] = a2;
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommender] = a3;
  *(void *)&v4[OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore] = a4;
  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider();
  id v8 = a2;
  swift_unknownObjectRetain();
  id v9 = a4;
  id v10 = objc_msgSendSuper2(&v16, "init");
  uint64_t v11 = self;
  id v12 = v10;
  id v13 = [v11 defaultCenter];
  id v14 = v12;
  [v13 addObserver:v14 selector:"update" name:@"MRRouteRecommenderDidReceiveNewRecommendationsNotification" object:0];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v14;
}

id sub_100263D00()
{
  static os_log_type_t.default.getter();
  uint64_t v1 = (void *)*sub_1001A665C();
  sub_100013A80(&qword_10047AE40);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1003C5BA0;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommender);
  id v4 = v1;
  swift_unknownObjectRetain();
  sub_100013A80(&qword_10047AE48);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v8 = sub_100015768();
  *(void *)(v2 + 64) = v8;
  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = v7;
  id v9 = *(id *)(v0 + OBJC_IVAR___MRDIntelligentRoutingLockScreenRoutingProvider_routeRecommendationStore);
  id v10 = [v9 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v8;
  *(void *)(v2 + 72) = v11;
  *(void *)(v2 + 80) = v13;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  return [v3 requestCurrentContext];
}

id sub_100263EE0()
{
  return sub_1002649F4(type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider);
}

id sub_100263F70()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();

  return Strong;
}

uint64_t sub_100263FC8()
{
  return sub_100006624();
}

uint64_t sub_100263FE0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_100264030()
{
  return sub_10026403C();
}

uint64_t sub_10026403C()
{
  return swift_unknownObjectRelease();
}

void (*sub_100264094(void *a1))(void **, char)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_100263AB4;
}

uint64_t sub_100264194()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100264248(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10026429C())()
{
  return j__swift_endAccess;
}

id sub_1002642F8(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10026433C(a1, a2);
}

id sub_10026433C(uint64_t a1, void *a2)
{
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(void *)&v2[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_queue] = a2;
  uint64_t v4 = self;
  id v5 = v2;
  id v6 = a2;
  id result = [v4 currentSettings];
  if (result)
  {
    unint64_t v8 = result;
    id v9 = [result nearbyDeviceIdentifiers];

    if (v9)
    {
      id v10 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
    }
    *(void *)&v5[OBJC_IVAR___MRDUserDefaultsLockScreenRoutingProvider_nearbyDeviceIdentifiers] = v10;

    v18.receiver = v5;
    v18.super_class = (Class)type metadata accessor for UserDefaultsLockScreenRoutingProvider();
    id v11 = objc_msgSendSuper2(&v18, "init");
    uint64_t v12 = self;
    id v13 = v11;
    id v14 = [v12 defaultCenter];
    id v15 = v13;
    id result = [v4 currentSettings];
    if (result)
    {
      objc_super v16 = result;
      id v17 = [result nearbyDeviceIdentifiersDidChangeNotification];

      [v14 addObserver:v15 selector:"update" name:v17 object:0];
      swift_unknownObjectRelease();

      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100264580()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v21 - 8);
  uint64_t v6 = __chkstk_darwin(v21);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x80))(v6);
  id result = [self currentSettings];
  if (result)
  {
    id v11 = result;
    uint64_t v19 = v5;
    id v12 = [result nearbyDeviceIdentifiers];

    id v13 = _swiftEmptyArrayStorage;
    uint64_t v20 = v2;
    if (v12)
    {
      id v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v14 = *(void (**)(uint64_t))((swift_isaMask & *v0) + 0x88);
    uint64_t v15 = swift_bridgeObjectRetain();
    v14(v15);
    LOBYTE(v14) = sub_1001EE450(v9, v13);
    swift_bridgeObjectRelease();
    id result = (id)swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v16 = (*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x68))(result);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      aBlock[4] = sub_10026552C;
      aBlock[5] = v17;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_100006760;
      aBlock[3] = &unk_100426520;
      objc_super v18 = _Block_copy(aBlock);
      swift_unknownObjectRetain();
      static DispatchQoS.unspecified.getter();
      uint64_t v22 = _swiftEmptyArrayStorage;
      sub_100015C48();
      sub_100013A80((uint64_t *)&unk_100479AE0);
      sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v18);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v21);
      return (id)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1002649DC()
{
  return sub_1002649F4(type metadata accessor for UserDefaultsLockScreenRoutingProvider);
}

id sub_1002649F4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for MRDIntelligentRoutingLockScreenRoutingProvider()
{
  return self;
}

uint64_t sub_100264AAC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_100264AE4(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      objc_super v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100013A80(&qword_100478380);
      objc_super v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100265254((uint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t sub_100264BDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = v19;
    uint64_t v20 = v6;
    while (1)
    {
      id v9 = *(void **)v6;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ([v7 classification] == (id)1) {
        uint64_t v10 = -1;
      }
      else {
        uint64_t v10 = (uint64_t)[v7 classification];
      }
      if ([v9 classification] == (id)1)
      {
        if (v10 == -1) {
          goto LABEL_14;
        }
      }
      else if ((id)v10 == [v9 classification])
      {
LABEL_14:
        sub_1002639A4();
        double v13 = v12;
        sub_1002639A4();
        double v15 = v14;
        swift_unknownObjectRelease();
        id result = swift_unknownObjectRelease();
        if (v15 >= v13) {
          goto LABEL_4;
        }
        goto LABEL_21;
      }
      if ([v7 classification] == (id)1) {
        uint64_t v11 = -1;
      }
      else {
        uint64_t v11 = (uint64_t)[v7 classification];
      }
      if ([v9 classification] == (id)1) {
        uint64_t v16 = -1;
      }
      else {
        uint64_t v16 = (uint64_t)[v9 classification];
      }
      swift_unknownObjectRelease();
      id result = swift_unknownObjectRelease();
      if (v16 >= v11)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v20 + 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
LABEL_21:
      if (!v5)
      {
        __break(1u);
        return result;
      }
      uint64_t v17 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v17;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_100264DB4(void **__dst, void **__src, void **a3, void **a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = (char *)__src - (char *)__dst + 7;
  if ((char *)__src - (char *)__dst >= 0) {
    int64_t v9 = (char *)__src - (char *)__dst;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)__src;
  uint64_t v12 = (char *)a3 - (char *)__src + 7;
  if ((char *)a3 - (char *)__src >= 0) {
    uint64_t v12 = (char *)a3 - (char *)__src;
  }
  uint64_t v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[v13] <= a4) {
      memmove(a4, __src, 8 * v13);
    }
    double v14 = &v4[v13];
    if (v7 >= v6 || v11 < 8) {
      goto LABEL_70;
    }
    uint64_t v31 = &selRef_anyObject;
    while (1)
    {
      uint64_t v54 = v5;
      char v32 = v6;
      int64_t v33 = v14;
      unint64_t v34 = v14 - 1;
      uint64_t v35 = *(v14 - 1);
      uint64_t v52 = v32;
      char v38 = *(v32 - 1);
      BOOL v36 = v32 - 1;
      uint64_t v37 = v38;
      unint64_t v39 = v31[158];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ([v35 v39] == (id)1) {
        uint64_t v40 = -1;
      }
      else {
        uint64_t v40 = (uint64_t)[v35 v31[158]];
      }
      if ([v37 v31[158]] == (id)1)
      {
        if (v40 == -1) {
          goto LABEL_49;
        }
      }
      else if ((id)v40 == [v37 v31[158]])
      {
LABEL_49:
        sub_1002639A4();
        double v42 = v41;
        sub_1002639A4();
        double v44 = v43;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v45 = v54;
        uint64_t v5 = v54 - 1;
        double v14 = v33;
        uint64_t v6 = v52;
        if (v44 >= v42) {
          goto LABEL_50;
        }
        goto LABEL_60;
      }
      uint64_t v51 = v33;
      if ([v35 classification] == (id)1) {
        uint64_t v50 = -1;
      }
      else {
        uint64_t v50 = (uint64_t)[v35 classification];
      }
      uint64_t v47 = v4;
      uint64_t v6 = v52;
      if ([v37 classification] == (id)1) {
        uint64_t v48 = -1;
      }
      else {
        uint64_t v48 = (uint64_t)[v37 classification];
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v45 = v54;
      uint64_t v5 = v54 - 1;
      BOOL v30 = v48 < v50;
      uint64_t v4 = v47;
      double v14 = v51;
      if (!v30)
      {
LABEL_50:
        BOOL v36 = v34;
        if (v45 != v14)
        {
          double v14 = v34;
LABEL_66:
          uint64_t v31 = &selRef_anyObject;
LABEL_67:
          *uint64_t v5 = *v36;
          goto LABEL_68;
        }
        BOOL v46 = v5 >= v14;
        double v14 = v34;
        uint64_t v31 = &selRef_anyObject;
        if (v46) {
          goto LABEL_67;
        }
        goto LABEL_68;
      }
LABEL_60:
      if (v45 != v6)
      {
        uint64_t v6 = v36;
        goto LABEL_66;
      }
      BOOL v46 = v5 >= v6;
      uint64_t v6 = v36;
      uint64_t v31 = &selRef_anyObject;
      if (v46) {
        goto LABEL_67;
      }
LABEL_68:
      if (v6 <= v7 || v14 <= v4) {
        goto LABEL_70;
      }
    }
  }
  if (a4 != __dst || &__dst[v10] <= a4) {
    memmove(a4, __dst, 8 * v10);
  }
  double v14 = &v4[v10];
  if (v6 < v5 && v8 >= 8)
  {
    double v15 = &selRef_anyObject;
    uint64_t v53 = v5;
    do
    {
      uint64_t v16 = *v6;
      uint64_t v17 = *v4;
      objc_super v18 = v15[158];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if ([v16 v18] == (id)1) {
        uint64_t v19 = -1;
      }
      else {
        uint64_t v19 = (uint64_t)[v16 v15[158]];
      }
      if ([v17 v15[158]] == (id)1)
      {
        if (v19 == -1) {
          goto LABEL_20;
        }
      }
      else if ((id)v19 == [v17 v15[158]])
      {
LABEL_20:
        sub_1002639A4();
        double v22 = v21;
        sub_1002639A4();
        double v24 = v23;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v24 < v22) {
          goto LABEL_30;
        }
        goto LABEL_21;
      }
      if ([v16 v15[158]] == (id)1) {
        uint64_t v20 = -1;
      }
      else {
        uint64_t v20 = (uint64_t)[v16 v15[158]];
      }
      char v28 = v4;
      if ([v17 v15[158]] == (id)1) {
        uint64_t v29 = -1;
      }
      else {
        uint64_t v29 = (uint64_t)[v17 v15[158]];
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      BOOL v30 = v29 < v20;
      uint64_t v4 = v28;
      double v15 = &selRef_anyObject;
      if (v30)
      {
LABEL_30:
        uint64_t v25 = v6;
        BOOL v26 = v7 == v6++;
        unint64_t v27 = (unint64_t)v53;
        if (v26) {
          goto LABEL_32;
        }
LABEL_31:
        *uint64_t v7 = *v25;
        goto LABEL_32;
      }
LABEL_21:
      uint64_t v25 = v4;
      BOOL v26 = v7 == v4++;
      unint64_t v27 = (unint64_t)v53;
      if (!v26) {
        goto LABEL_31;
      }
LABEL_32:
      ++v7;
    }
    while (v4 < v14 && (unint64_t)v6 < v27);
  }
  uint64_t v6 = v7;
LABEL_70:
  if (v6 != v4
    || v6 >= (void **)((char *)v4
                     + (((char *)v14 - (char *)v4 + ((char *)v14 - (char *)v4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(v6, v4, 8 * (v14 - v4));
  }
  return 1;
}

uint64_t sub_100265254(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    id result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      id result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_1000155BC((unint64_t *)&unk_10047AED0, &qword_10047AEC8);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            sub_100013A80(&qword_10047AEC8);
            uint64_t v10 = sub_100265418(v13, i, a3);
            uint64_t v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_100013A80(&qword_10047BF30);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_100265418(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100265480(v6, a2, a3);
  return sub_100246E28;
}

uint64_t (*sub_100265480(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  objc_super v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_unknownObjectRetain();
LABEL_5:
    *objc_super v3 = v4;
    return sub_100265500;
  }
  __break(1u);
  return result;
}

uint64_t sub_100265500()
{
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for UserDefaultsLockScreenRoutingProvider()
{
  return self;
}

char *sub_100265540(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return (char *)_swiftEmptyArrayStorage;
    }
    id result = sub_100266120(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      unint64_t v6 = v5;
      unsigned int v7 = [v5 deviceType];

      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_100266120((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      *((_DWORD *)&_swiftEmptyArrayStorage[4] + v9) = v7;
      if (v2 == v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Int sub_100265708()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100265750()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10026577C()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_1002657C0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1002657D4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1002657E4(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1002657F0(_DWORD *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100265BBC(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v9 + 4 * v8) != a2);
  }
  uint64_t result = 0;
  LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100265910()
{
  Swift::UInt32 v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047AF90);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    Swift::Int v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *Swift::Int v6 = -1 << v26;
                }
                Swift::UInt32 v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt32 v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_100265BBC(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt32 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100265910();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100265D0C();
      goto LABEL_14;
    }
    sub_100265EA4();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for MRAVOutputDeviceType();
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_100265D0C()
{
  Swift::UInt32 v1 = v0;
  sub_100013A80(&qword_10047AF90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100265EA4()
{
  Swift::UInt32 v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047AF90);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt32 v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    Swift::UInt32 v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

char *sub_100266120(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100266140(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_100266140(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100013A80(&qword_10047AF98);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_10026623C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for MRAVOutputDeviceType();
  sub_100266668(&qword_10047AF88);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1002657F0(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

id sub_1002662D4(void *a1)
{
  Swift::UInt32 v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70))();
  if (v1 && (uint64_t v2 = v1, v3 = [v1 outputDevices], v2, v3))
  {
    sub_1001924DC();
    uint64_t v4 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  unsigned int v5 = sub_100265540((unint64_t)v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10026623C((uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  uint64_t v8 = v6 + 56;
  do
  {
    if (*(void *)(v6 + 16))
    {
      Swift::UInt32 v9 = *((_DWORD *)&off_100426548 + v7 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v9);
      Swift::Int v10 = Hasher._finalize()();
      uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v12 = v10 & ~v11;
      if ((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
      {
        uint64_t v13 = *(void *)(v6 + 48);
        if (*(_DWORD *)(v13 + 4 * v12) == v9)
        {
LABEL_13:
          swift_bridgeObjectRelease();
          type metadata accessor for RouteRecommendationSuppressionPolicy();
          switch(v9)
          {
            case 2u:
              int64_t v15 = (void *)0xE900000000000068;
              uint64_t v16 = 0x746F6F7465756C62;
              break;
            case 3u:
              int64_t v15 = (void *)0xE700000000000000;
              uint64_t v16 = 0x79616C50726143;
              break;
            case 5u:
              int64_t v15 = (void *)0xE500000000000000;
              uint64_t v16 = 0x6465726977;
              break;
            default:
              v19._countAndFlagsBits = 0x797420726F727265;
              v19._object = (void *)0xEA00000000006570;
              String.append(_:)(v19);
              type metadata accessor for MRAVOutputDeviceType();
              _print_unlocked<A, B>(_:_:)();
              uint64_t v16 = 0;
              int64_t v15 = (void *)0xE000000000000000;
              break;
          }
          unint64_t v20 = sub_10030BBBC(v16, v15);
          uint64_t v22 = v21;
          swift_bridgeObjectRelease();
          id v23 = sub_10030BA90(v20, v22);
          swift_bridgeObjectRelease();
          return v23;
        }
        uint64_t v14 = ~v11;
        while (1)
        {
          unint64_t v12 = (v12 + 1) & v14;
          if (((*(void *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
            break;
          }
          if (*(_DWORD *)(v13 + 4 * v12) == v9) {
            goto LABEL_13;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != 3);
  swift_bridgeObjectRelease();
  int64_t v17 = (void *)*sub_10030BA44();

  return v17;
}

uint64_t type metadata accessor for RouteRecommendationLocalOutputContextSuppressor()
{
  return self;
}

void type metadata accessor for MRAVOutputDeviceType()
{
  if (!qword_10047AFA0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10047AFA0);
    }
  }
}

uint64_t sub_100266634()
{
  return sub_100266668(&qword_10047AFA8);
}

uint64_t sub_100266668(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MRAVOutputDeviceType();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1002666AC(uint64_t a1)
{
  id v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___MRDRouteRecommendationSuppressionController_suppressors] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for RouteRecommendationSuppressionController()
{
  return self;
}

uint64_t sub_100266720(uint64_t a1, uint64_t a2)
{
  sub_100013A80(&qword_100478380);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003C7260;
  type metadata accessor for RouteRecommendationPlayingStateSuppressor();
  sub_100266824(a2, (uint64_t)v8);
  *(void *)(v5 + 32) = sub_10027652C(v8);
  type metadata accessor for RouteRecommendationLocalOutputContextSuppressor();
  *(void *)(v5 + 40) = sub_1001EE528();
  type metadata accessor for RouteRecommendationDisplayMonitorSuppressor();
  sub_100266824(a1, (uint64_t)v8);
  *(void *)(v5 + 48) = sub_10027652C(v8);
  *(void *)&v8[0] = v5;
  specialized Array._endMutation()();
  uint64_t v6 = (*(uint64_t (**)(void))(v2 + 88))(*(void *)&v8[0]);
  sub_10018FD5C(a2);
  sub_10018FD5C(a1);
  return v6;
}

uint64_t sub_100266824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unsigned char *sub_100266888(uint64_t a1)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR___MRDRouteRecommendationSuppressionController_suppressors);
  if (v3 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v7 = *(void **)(v3 + 8 * v5);
          swift_unknownObjectRetain();
          uint64_t v8 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        Swift::UInt32 v9 = [v7 suppressionPolicyWithContext:a1];
        swift_unknownObjectRelease();
        if (v9[OBJC_IVAR___MRDRouteRecommendationSuppressionPolicy_shouldSuppress] == 1)
        {
          swift_bridgeObjectRelease();
          return v9;
        }

        ++v5;
      }
      while (v8 != v4);
    }
  }
  swift_bridgeObjectRelease();
  Swift::Int v10 = (void *)*sub_10030BA44();

  return v10;
}

id sub_100266A84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RouteRecommendationSuppressionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100266AC8()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10023E6F4();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_100266D0C();
  sub_100013A80(&qword_10047A200);
  sub_100266D64();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100486298 = result;
  return result;
}

uint64_t *sub_100266CC0()
{
  if (qword_100481090 != -1) {
    swift_once();
  }
  return &qword_100486298;
}

unint64_t sub_100266D0C()
{
  unint64_t result = qword_10047A1F8;
  if (!qword_10047A1F8)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A1F8);
  }
  return result;
}

unint64_t sub_100266D64()
{
  unint64_t result = qword_10047A208;
  if (!qword_10047A208)
  {
    sub_10018F8A4(&qword_10047A200);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047A208);
  }
  return result;
}

uint64_t sub_100266DC0(uint64_t a1)
{
  uint64_t v108 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v2 = *(void *)(v108 - 8);
  uint64_t v3 = __chkstk_darwin(v108);
  uint64_t v106 = (uint64_t)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v102 = (char *)&v98 - v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v98 - v7);
  swift_bridgeObjectRelease();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  int64_t v10 = *(void *)(a1 + 16);
  id v101 = v9;
  uint64_t v107 = v2;
  if (v10)
  {
    *(void *)&v110[0] = _swiftEmptyArrayStorage;
    id v11 = v9;
    sub_100014688(0, v10, 0);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v13 = *(void *)(v2 + 72);
    do
    {
      sub_1001B9A9C(v12, (uint64_t)v8);
      if (sub_10029F6A0())
      {
        id v14 = (id)MRIRRouteBuiltInSpeakerIdentifier();
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = *v8;
        uint64_t v17 = v8[1];
        swift_bridgeObjectRetain();
      }
      sub_1001B9E00((uint64_t)v8);
      Swift::UInt32 v18 = *(void **)&v110[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v18[2] + 1, 1);
        Swift::UInt32 v18 = *(void **)&v110[0];
      }
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      if (v20 >= v19 >> 1)
      {
        sub_100014688(v19 > 1, v20 + 1, 1);
        Swift::UInt32 v18 = *(void **)&v110[0];
      }
      v18[2] = v20 + 1;
      uint64_t v21 = &v18[2 * v20];
      v21[4] = v15;
      v21[5] = v17;
      v12 += v13;
      --v10;
    }
    while (v10);
    uint64_t v2 = v107;
  }
  else
  {
    id v22 = v9;
    Swift::UInt32 v18 = _swiftEmptyArrayStorage;
  }
  *(void *)&v110[0] = v18;
  swift_bridgeObjectRetain();
  sub_10026A994((uint64_t *)v110);
  swift_bridgeObjectRelease();
  uint64_t v100 = *(void *)&v110[0];
  uint64_t v23 = swift_allocObject();
  uint64_t v103 = v23;
  *(unsigned char *)(v23 + 16) = 1;
  uint64_t v99 = (unsigned __int8 *)(v23 + 16);
  uint64_t v113 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    unint64_t v25 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v105 = *(void **)(v2 + 72);
    swift_bridgeObjectRetain();
    long long v104 = xmmword_1003C58B0;
    while (1)
    {
      *(void *)&v110[0] = _swiftEmptyArrayStorage;
      uint64_t v36 = sub_10029F5DC();
      uint64_t v39 = v36;
      uint64_t v40 = v37;
      unsigned __int16 v41 = v38;
      if ((v38 & 0xF800) == 0x4000) {
        break;
      }
      sub_1001B99B8(v36, v37, v38);
      uint64_t v42 = sub_10029F5DC();
      uint64_t v45 = v42;
      uint64_t v46 = v43;
      unsigned __int16 v47 = v44;
      if (v44 >> 11 == 9)
      {
        uint64_t v48 = *(void *)(v42 + 16);
        unsigned __int8 v49 = *(unsigned char *)(v42 + 24);
        swift_bridgeObjectRetain();
        sub_1001B99B8(v45, v46, v47);
        uint64_t v27 = v48;
        unsigned __int8 v28 = v49;
        goto LABEL_16;
      }
      sub_1001B99B8(v42, v43, v44);
      uint64_t v50 = sub_10029F5DC();
      uint64_t v53 = v50;
      uint64_t v54 = v51;
      unsigned __int16 v55 = v52;
      if ((v52 & 0xF800) != 0x5000)
      {
        sub_1001B99B8(v50, v51, v52);
        goto LABEL_18;
      }
      uint64_t v56 = *(void *)(v50 + 16);
      unsigned __int8 v57 = *(unsigned char *)(v50 + 24);
      swift_bridgeObjectRetain();
      sub_1001B99B8(v53, v54, v55);
      sub_100267710(v56, v57, v110, v103);
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      sub_100013A80(&qword_10047B020);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v104;
      uint64_t v30 = *(void *)(a1 + v25 + 8);
      *(void *)(v29 + 32) = *(void *)(a1 + v25);
      *(void *)(v29 + 40) = v30;
      unint64_t v31 = a1 + v25 + *(int *)(v108 + 56);
      uint64_t v32 = *(void *)v31;
      uint64_t v33 = *(void *)(v31 + 8);
      *(void *)(v29 + 48) = *(void *)v31;
      *(void *)(v29 + 56) = v33;
      unsigned int v34 = *(unsigned __int16 *)(v31 + 16);
      *(_WORD *)(v29 + 64) = v34;
      swift_beginAccess();
      uint64_t v35 = *(void *)&v110[0];
      uint64_t v112 = v29;
      swift_bridgeObjectRetain();
      sub_1001B9E5C(v32, v33, v34);
      sub_100269A54(v35);
      sub_100269A54(v112);
      v25 += (unint64_t)v105;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v113;
        goto LABEL_27;
      }
    }
    uint64_t v26 = *(void *)(v36 + 16);
    swift_bridgeObjectRetain();
    sub_1001B99B8(v39, v40, v41);
    uint64_t v27 = v26;
    unsigned __int8 v28 = 2;
LABEL_16:
    sub_100267710(v27, v28, v110, v103);
    goto LABEL_17;
  }
  uint64_t v58 = _swiftEmptyArrayStorage;
LABEL_27:
  uint64_t v59 = sub_100267858((uint64_t)v58);
  swift_bridgeObjectRelease();
  uint64_t v60 = v59[2];
  uint64_t v61 = (uint64_t)v102;
  if (v60)
  {
    uint64_t v62 = (unsigned __int16 *)(v59 + 8);
    while (1)
    {
      unsigned int v63 = *v62;
      v62 += 20;
      unsigned int v64 = (v63 >> 8) & 6 | (v63 >> 7) & 1;
      if (v64 < 5 && ((0x1Du >> v64) & 1) != 0) {
        break;
      }
      if (!--v60) {
        goto LABEL_33;
      }
    }
    int v65 = 1;
  }
  else
  {
LABEL_33:
    int v65 = 0;
  }
  *(void *)&v110[0] = _swiftEmptyArrayStorage;
  uint64_t v66 = *(void *)(a1 + 16);
  uint64_t v105 = v59;
  if (v66)
  {
    LODWORD(v104) = v65;
    unint64_t v67 = 0;
    uint64_t v68 = _swiftEmptyArrayStorage;
    while (v67 < *(void *)(a1 + 16))
    {
      unint64_t v69 = (*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
      uint64_t v70 = *(void *)(v107 + 72);
      sub_1001B9A9C(a1 + v69 + v70 * v67, v61);
      char v71 = *(unsigned char *)(v61 + *(int *)(v108 + 44));
      LOBYTE(v112) = *(unsigned char *)sub_10029E31C();
      LOBYTE(v113) = v71;
      sub_1001EEAFC();
      if (dispatch thunk of SetAlgebra.isSuperset(of:)())
      {
        sub_1001B9E00(v61);
      }
      else
      {
        sub_1001B9A38(v61, v106);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001E1F90(0, v68[2] + 1, 1);
        }
        uint64_t v68 = *(void **)&v110[0];
        unint64_t v73 = *(void *)(*(void *)&v110[0] + 16);
        unint64_t v72 = *(void *)(*(void *)&v110[0] + 24);
        if (v73 >= v72 >> 1)
        {
          sub_1001E1F90(v72 > 1, v73 + 1, 1);
          uint64_t v68 = *(void **)&v110[0];
        }
        v68[2] = v73 + 1;
        sub_1001B9A38(v106, (uint64_t)v68 + v69 + v73 * v70);
        uint64_t v61 = (uint64_t)v102;
      }
      if (v66 == ++v67)
      {
        uint64_t v74 = *(void **)&v110[0];
        uint64_t v59 = v105;
        LOBYTE(v65) = v104;
        goto LABEL_47;
      }
    }
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    uint64_t v74 = _swiftEmptyArrayStorage;
LABEL_47:
    swift_bridgeObjectRelease();
    unint64_t v75 = v74[2];
    swift_release();
    *(void *)&v110[0] = v100;
    sub_100013A80(&qword_10047A080);
    sub_10024D6A8();
    BidirectionalCollection<>.joined(separator:)();
    swift_release();
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v77 = v101;
    [v101 setRouteIdentifier:v76];

    if (v65)
    {
      uint64_t v78 = 0;
    }
    else
    {
      uint64_t v79 = v99;
      swift_beginAccess();
      if (v75 < 2) {
        uint64_t v78 = *v79;
      }
      else {
        uint64_t v78 = 0;
      }
    }
    [v77 setDonateAsCandidate:v78];
    int64_t v80 = v59[2];
    if (v80)
    {
      uint64_t v113 = _swiftEmptyArrayStorage;
      sub_10026A5F4(0, v80, 0);
      uint64_t v81 = v113;
      uint64_t v82 = (unsigned __int16 *)(v59 + 8);
      do
      {
        uint64_t v83 = *((void *)v82 - 2);
        uint64_t v84 = *((void *)v82 - 1);
        unsigned int v85 = *v82;
        swift_bridgeObjectRetain();
        sub_1001B9E5C(v83, v84, v85);
        BOOL v86 = sub_10029B21C(v83, v84, v85);
        id v87 = objc_allocWithZone((Class)MRIRNode);
        NSString v88 = String._bridgeToObjectiveC()();
        id v89 = [v87 initWithAVOutputDeviceID:v88 isLocal:v86];

        id v109 = v89;
        sub_10018FE08(0, &qword_10047AFE0);
        sub_10026AA10();
        AnyHashable.init<A>(_:)();
        swift_bridgeObjectRelease();
        sub_1001B9958(v83, v84, v85);
        uint64_t v113 = v81;
        unint64_t v91 = v81[2];
        unint64_t v90 = v81[3];
        if (v91 >= v90 >> 1)
        {
          sub_10026A5F4(v90 > 1, v91 + 1, 1);
          uint64_t v81 = v113;
        }
        v82 += 20;
        v81[2] = v91 + 1;
        uint64_t v92 = &v81[5 * v91];
        long long v93 = v110[0];
        long long v94 = v110[1];
        v92[8] = v111;
        *((_OWORD *)v92 + 2) = v93;
        *((_OWORD *)v92 + 3) = v94;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v81 = _swiftEmptyArrayStorage;
    }
    sub_10026B6B0((uint64_t)v81);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v96 = v101;
    [v101 setNodes:isa];
    swift_release();

    return (uint64_t)v96;
  }
  return result;
}

uint64_t sub_100267710(uint64_t a1, unsigned __int8 a2, void *a3, uint64_t a4)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4 == a2)
  {
    uint64_t v5 = a3;
    if (v4)
    {
      sub_10026A644(0, v4, 0);
      uint64_t v7 = (unsigned __int16 *)(a1 + 64);
      do
      {
        uint64_t v8 = *((void *)v7 - 4);
        uint64_t v9 = *((void *)v7 - 3);
        uint64_t v10 = *((void *)v7 - 2);
        uint64_t v11 = *((void *)v7 - 1);
        unsigned int v12 = *v7;
        swift_bridgeObjectRetain();
        sub_1001B9E5C(v10, v11, v12);
        unint64_t v14 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        if (v14 >= v13 >> 1) {
          sub_10026A644(v13 > 1, v14 + 1, 1);
        }
        v7 += 20;
        _swiftEmptyArrayStorage[2] = v14 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[5 * v14];
        v15[4] = v8;
        v15[5] = v9;
        v15[6] = v10;
        v15[7] = v11;
        *((_WORD *)v15 + 32) = v12;
        --v4;
      }
      while (v4);
      uint64_t v5 = a3;
    }
    swift_beginAccess();
    *uint64_t v5 = _swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(a4 + 16) = 0;
  }
  return result;
}

void *sub_100267858(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10026A614(0, v1, 0);
    uint64_t v3 = (unsigned __int16 *)(a1 + 64);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      uint64_t v5 = *((void *)v3 - 1);
      unsigned int v6 = *v3;
      swift_bridgeObjectRetain();
      sub_1001B9E5C(v4, v5, v6);
      swift_bridgeObjectRetain();
      sub_1001B9E5C(v4, v5, v6);
      sub_100013A80(&qword_10047B008);
      sub_100013A80(&qword_10047B010);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      sub_1001B9958(v4, v5, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10026A614(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_10026A614(v7 > 1, v8 + 1, 1);
      }
      v3 += 20;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[5 * v8];
      v9[4] = v11;
      v9[5] = v12;
      v9[6] = v13;
      v9[7] = v14;
      *((_WORD *)v9 + 32) = v15;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100267A04()
{
  uint64_t v1 = sub_100267AA4();
  unsigned int v3 = (v2 >> 11) - 6;
  sub_1001B99B8(v1, v4, v2);
  if (v3 > 4)
  {
    if ([v0 isRemoteControllable]
      && [v0 discoveredOnSameInfra])
    {
      goto LABEL_6;
    }
    if (![v0 isGroupable])
    {
      uint64_t v5 = (unsigned __int8 *)sub_10029E310();
      return *v5;
    }
LABEL_8:
    uint64_t v5 = (unsigned __int8 *)sub_10029E334();
    return *v5;
  }
  if (![v0 discoveredOnSameInfra]) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v5 = (unsigned __int8 *)sub_10029E340();
  return *v5;
}

uint64_t sub_100267AA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)v197 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v197 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v197 - v10;
  id v12 = [v1 modelID];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v14 = 0;
  }
  switch([v1 deviceSubtype])
  {
    case 0u:
      swift_bridgeObjectRelease();
      return 0;
    case 1u:
      swift_bridgeObjectRelease();
      id v15 = [v1 sourceInfo];
      if (v15)
      {
        uint64_t v16 = v15;
        [v15 multipleBuiltInDevices];
      }
      uint64_t v14 = 0;
      [v1 producesLowFidelityAudio];
      return v14;
    case 2u:
    case 3u:
    case 0xCu:
    case 0xDu:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
      return v14;
    case 4u:
    case 5u:
      swift_bridgeObjectRelease();
      return [v1 producesLowFidelityAudio] ^ 1;
    case 6u:
      swift_bridgeObjectRelease();
      return 1;
    case 7u:
      swift_bridgeObjectRelease();
      return 2;
    case 8u:
      swift_bridgeObjectRelease();
      return 3;
    case 9u:
      swift_bridgeObjectRelease();
      return 4;
    case 0xAu:
      swift_bridgeObjectRelease();
      return 5;
    case 0xBu:
      swift_bridgeObjectRelease();
      return 6;
    case 0xEu:
      swift_bridgeObjectRelease();
      return 7;
    case 0xFu:
      swift_bridgeObjectRelease();
      id v17 = [v1 clusterCompositionOutputDevices];
      if (v17)
      {
        Swift::UInt32 v18 = v17;
        sub_10018FE08(0, (unint64_t *)&qword_100478370);
        unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
      }
      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v196 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v201 = v196;
        unint64_t v202 = v19;
        if (v196) {
          break;
        }
      }
      else
      {
        uint64_t v201 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v202 = v19;
        if (v201) {
          break;
        }
      }
      uint64_t v21 = sub_1001A69C4();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v21, v2);
      id v22 = v1;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      int v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v26 = swift_slowAlloc();
        LODWORD(v200) = v25;
        uint64_t v27 = (uint8_t *)v26;
        uint64_t v198 = (void *)swift_slowAlloc();
        v199 = v27;
        *(_DWORD *)uint64_t v27 = 138412290;
        *(void *)&long long v206 = v22;
        v197[1] = (char *)&v206 + 8;
        v197[2] = v27 + 4;
        unsigned __int8 v28 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v198 = v22;

        _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v200, "OutputDevice %@ is subtype .cluster with no composition", v199, 0xCu);
        sub_100013A80((uint64_t *)&unk_10047B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v23 = v22;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      break;
    case 0x10u:
      swift_bridgeObjectRelease();
      return 8;
    case 0x11u:
      swift_bridgeObjectRelease();
      return 9;
    default:
      swift_bridgeObjectRelease();
      *(void *)&long long v206 = 0;
      *((void *)&v206 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      v20._countAndFlagsBits = 0xD000000000000013;
      v20._object = (void *)0x80000001003B79F0;
      String.append(_:)(v20);
      LODWORD(v204) = [v1 deviceSubtype];
      type metadata accessor for MRAVOutputDeviceSubtype(0);
      _print_unlocked<A, B>(_:_:)();
      return v206;
  }
  unsigned int v29 = [v1 clusterType];
  switch(v29)
  {
    case 0u:
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1001A69C4();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v30, v2);
      unint64_t v31 = v1;
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        unsigned int v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v201 = swift_slowAlloc();
        unint64_t v202 = (unint64_t)v34;
        *(_DWORD *)unsigned int v34 = 138412290;
        *(void *)&long long v206 = v31;
        uint64_t v35 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v201 = v31;

        _os_log_impl((void *)&_mh_execute_header, v32, v33, "OutputDevice %@ is subtype .cluster but clusterType .none", (uint8_t *)v202, 0xCu);
        sub_100013A80((uint64_t *)&unk_10047B850);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v32 = v31;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      return 0xD00000000000001ELL;
    case 1u:
      uint64_t v112 = (uint8_t *)v202;
      if (!v201)
      {
        uint64_t v115 = _swiftEmptyArrayStorage;
LABEL_134:
        swift_bridgeObjectRelease();
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v115;
        return v14;
      }
      if (v201 >= 1)
      {
        unint64_t v113 = v202 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        uint64_t v114 = 0;
        uint64_t v115 = _swiftEmptyArrayStorage;
        uint64_t v200 = (void *)0x80000001003B79D0;
        do
        {
          if (v113) {
            id v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v117 = *(id *)&v112[8 * v114 + 32];
          }
          int v118 = v117;
          id v119 = [v117 uid];
          if (v119)
          {
            int v120 = v119;
            uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v123 = v122;

            switch([v118 deviceType])
            {
              case 0u:
                uint64_t v124 = swift_allocObject();
                *(void *)(v124 + 16) = sub_1002693E8();
                *(void *)(v124 + 24) = v125;
                *(_WORD *)(v124 + 32) = v126;
                uint64_t v127 = sub_10029B160();
                uint64_t v128 = 0;
                __int16 v129 = 0;
                *(void *)(v124 + 40) = v127;
                *(void *)(v124 + 48) = v130;
                break;
              case 1u:
                uint64_t v124 = sub_1002693E8();
                uint64_t v128 = v137;
                __int16 v129 = v138 | 0x80;
                break;
              case 2u:
                uint64_t v124 = sub_1002693E8();
                uint64_t v128 = v133;
                __int16 v129 = v134 | 0x200;
                break;
              case 3u:
                uint64_t v124 = sub_1002693E8();
                uint64_t v128 = v135;
                __int16 v129 = v136 | 0x280;
                break;
              case 4u:
                uint64_t v124 = sub_1002693E8();
                uint64_t v128 = v131;
                __int16 v129 = v132 | 0x480;
                break;
              case 5u:
                uint64_t v124 = sub_1002693E8();
                uint64_t v128 = v139;
                __int16 v129 = v140 | 0x400;
                break;
              default:
                uint64_t v124 = swift_allocObject();
                *(void *)(v124 + 16) = sub_1002693E8();
                *(void *)(v124 + 24) = v141;
                *(_WORD *)(v124 + 32) = v142;
                uint64_t v204 = 0;
                unint64_t v205 = 0xE000000000000000;
                _StringGuts.grow(_:)(24);
                v143._countAndFlagsBits = 0xD000000000000016;
                v143._object = v200;
                String.append(_:)(v143);
                unsigned int v203 = [v118 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)();
                uint64_t v128 = 0;
                __int16 v129 = 0;
                unint64_t v144 = v205;
                *(void *)(v124 + 40) = v204;
                *(void *)(v124 + 48) = v144;
                break;
            }
            sub_10029C250(v121, v123, v124, v128, v129, (uint64_t)&v206);

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v115 = sub_100269928(0, v115[2] + 1, 1, v115, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            uint64_t v116 = v201;
            uint64_t v112 = (uint8_t *)v202;
            unint64_t v146 = v115[2];
            unint64_t v145 = v115[3];
            if (v146 >= v145 >> 1) {
              uint64_t v115 = sub_100269928((void *)(v145 > 1), v146 + 1, 1, v115, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            v115[2] = v146 + 1;
            uint64_t v147 = &v115[5 * v146];
            long long v148 = v206;
            long long v149 = v207;
            *((_WORD *)v147 + 32) = v208;
            *((_OWORD *)v147 + 2) = v148;
            *((_OWORD *)v147 + 3) = v149;
          }
          else
          {

            uint64_t v116 = v201;
            uint64_t v112 = (uint8_t *)v202;
          }
          ++v114;
        }
        while (v116 != v114);
        swift_bridgeObjectRelease();
        goto LABEL_134;
      }
      goto LABEL_140;
    case 2u:
      uint64_t v37 = v201;
      uint64_t v36 = (uint8_t *)v202;
      if (!v201)
      {
        uint64_t v40 = _swiftEmptyArrayStorage;
        goto LABEL_131;
      }
      if (v201 >= 1)
      {
        unint64_t v38 = v202 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        uint64_t v39 = 0;
        uint64_t v40 = _swiftEmptyArrayStorage;
        uint64_t v200 = (void *)0x80000001003B79D0;
        do
        {
          if (v38) {
            id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v41 = *(id *)&v36[8 * v39 + 32];
          }
          uint64_t v42 = v41;
          id v43 = [v41 uid];
          if (v43)
          {
            unsigned __int16 v44 = v43;
            uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v47 = v46;

            switch([v42 deviceType])
            {
              case 0u:
                uint64_t v48 = swift_allocObject();
                *(void *)(v48 + 16) = sub_1002693E8();
                *(void *)(v48 + 24) = v49;
                *(_WORD *)(v48 + 32) = v50;
                uint64_t v51 = sub_10029B160();
                uint64_t v52 = 0;
                __int16 v53 = 0;
                *(void *)(v48 + 40) = v51;
                *(void *)(v48 + 48) = v54;
                break;
              case 1u:
                uint64_t v48 = sub_1002693E8();
                uint64_t v52 = v61;
                __int16 v53 = v62 | 0x80;
                break;
              case 2u:
                uint64_t v48 = sub_1002693E8();
                uint64_t v52 = v57;
                __int16 v53 = v58 | 0x200;
                break;
              case 3u:
                uint64_t v48 = sub_1002693E8();
                uint64_t v52 = v59;
                __int16 v53 = v60 | 0x280;
                break;
              case 4u:
                uint64_t v48 = sub_1002693E8();
                uint64_t v52 = v55;
                __int16 v53 = v56 | 0x480;
                break;
              case 5u:
                uint64_t v48 = sub_1002693E8();
                uint64_t v52 = v63;
                __int16 v53 = v64 | 0x400;
                break;
              default:
                uint64_t v48 = swift_allocObject();
                *(void *)(v48 + 16) = sub_1002693E8();
                *(void *)(v48 + 24) = v65;
                *(_WORD *)(v48 + 32) = v66;
                uint64_t v204 = 0;
                unint64_t v205 = 0xE000000000000000;
                _StringGuts.grow(_:)(24);
                v67._countAndFlagsBits = 0xD000000000000016;
                v67._object = v200;
                String.append(_:)(v67);
                unsigned int v203 = [v42 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)();
                uint64_t v52 = 0;
                __int16 v53 = 0;
                unint64_t v68 = v205;
                *(void *)(v48 + 40) = v204;
                *(void *)(v48 + 48) = v68;
                break;
            }
            sub_10029C250(v45, v47, v48, v52, v53, (uint64_t)&v206);

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v40 = sub_100269928(0, v40[2] + 1, 1, v40, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            uint64_t v37 = v201;
            uint64_t v36 = (uint8_t *)v202;
            unint64_t v70 = v40[2];
            unint64_t v69 = v40[3];
            if (v70 >= v69 >> 1) {
              uint64_t v40 = sub_100269928((void *)(v69 > 1), v70 + 1, 1, v40, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            void v40[2] = v70 + 1;
            char v71 = &v40[5 * v70];
            long long v72 = v206;
            long long v73 = v207;
            *((_WORD *)v71 + 32) = v208;
            *((_OWORD *)v71 + 2) = v72;
            *((_OWORD *)v71 + 3) = v73;
          }
          else
          {
          }
          ++v39;
        }
        while (v37 != v39);
        swift_bridgeObjectRelease();
LABEL_131:
        swift_bridgeObjectRelease();
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v40;
        id v194 = [v1 configuredClusterSize];
        if ((unint64_t)v194 <= 0xFF)
        {
          *(unsigned char *)(v14 + 24) = (_BYTE)v194;
          return v14;
        }
LABEL_142:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100269140);
      }
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    case 3u:
      uint64_t v75 = v201;
      uint64_t v74 = (uint8_t *)v202;
      if (!v201) {
        goto LABEL_123;
      }
      if (v201 < 1) {
        goto LABEL_139;
      }
      unint64_t v76 = v202 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      uint64_t v77 = 0;
      uint64_t v78 = _swiftEmptyArrayStorage;
      uint64_t v200 = (void *)0x80000001003B79D0;
      do
      {
        if (v76) {
          id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v79 = *(id *)&v74[8 * v77 + 32];
        }
        int64_t v80 = v79;
        id v81 = [v79 uid];
        if (v81)
        {
          uint64_t v82 = v81;
          uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v85 = v84;

          switch([v80 deviceType])
          {
            case 0u:
              uint64_t v86 = swift_allocObject();
              *(void *)(v86 + 16) = sub_1002693E8();
              *(void *)(v86 + 24) = v87;
              *(_WORD *)(v86 + 32) = v88;
              uint64_t v89 = sub_10029B160();
              uint64_t v90 = 0;
              __int16 v91 = 0;
              *(void *)(v86 + 40) = v89;
              *(void *)(v86 + 48) = v92;
              break;
            case 1u:
              uint64_t v86 = sub_1002693E8();
              uint64_t v90 = v99;
              __int16 v91 = v100 | 0x80;
              break;
            case 2u:
              uint64_t v86 = sub_1002693E8();
              uint64_t v90 = v95;
              __int16 v91 = v96 | 0x200;
              break;
            case 3u:
              uint64_t v86 = sub_1002693E8();
              uint64_t v90 = v97;
              __int16 v91 = v98 | 0x280;
              break;
            case 4u:
              uint64_t v86 = sub_1002693E8();
              uint64_t v90 = v93;
              __int16 v91 = v94 | 0x480;
              break;
            case 5u:
              uint64_t v86 = sub_1002693E8();
              uint64_t v90 = v101;
              __int16 v91 = v102 | 0x400;
              break;
            default:
              uint64_t v86 = swift_allocObject();
              *(void *)(v86 + 16) = sub_1002693E8();
              *(void *)(v86 + 24) = v103;
              *(_WORD *)(v86 + 32) = v104;
              uint64_t v204 = 0;
              unint64_t v205 = 0xE000000000000000;
              _StringGuts.grow(_:)(24);
              v105._countAndFlagsBits = 0xD000000000000016;
              v105._object = v200;
              String.append(_:)(v105);
              unsigned int v203 = [v80 deviceType];
              type metadata accessor for MRAVOutputDeviceType();
              _print_unlocked<A, B>(_:_:)();
              uint64_t v90 = 0;
              __int16 v91 = 0;
              unint64_t v106 = v205;
              *(void *)(v86 + 40) = v204;
              *(void *)(v86 + 48) = v106;
              break;
          }
          sub_10029C250(v83, v85, v86, v90, v91, (uint64_t)&v206);

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v78 = sub_100269928(0, v78[2] + 1, 1, v78, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
          }
          uint64_t v75 = v201;
          uint64_t v74 = (uint8_t *)v202;
          unint64_t v108 = v78[2];
          unint64_t v107 = v78[3];
          if (v108 >= v107 >> 1) {
            uint64_t v78 = sub_100269928((void *)(v107 > 1), v108 + 1, 1, v78, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
          }
          v78[2] = v108 + 1;
          id v109 = &v78[5 * v108];
          long long v110 = v206;
          long long v111 = v207;
          *((_WORD *)v109 + 32) = v208;
          *((_OWORD *)v109 + 2) = v110;
          *((_OWORD *)v109 + 3) = v111;
        }
        else
        {
        }
        ++v77;
      }
      while (v75 != v77);
      goto LABEL_122;
    default:
      uint64_t v150 = sub_1001A69C4();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v150, v2);
      unint64_t v151 = Logger.logObject.getter();
      os_log_type_t v152 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v151, v152))
      {
        Swift::String v153 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v206 = swift_slowAlloc();
        *(_DWORD *)Swift::String v153 = 136315138;
        uint64_t v200 = v153 + 4;
        LODWORD(v204) = v29;
        type metadata accessor for MRAVOutputDeviceClusterType(0);
        uint64_t v154 = String.init<A>(describing:)();
        uint64_t v204 = sub_10018A9E0(v154, v155, (uint64_t *)&v206);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v151, v152, "Unmatched clusterType: %s. Treat as generic cluster.", v153, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      uint64_t v157 = v201;
      v156 = (uint8_t *)v202;
      if (v201)
      {
        if (v201 < 1)
        {
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        unint64_t v158 = v202 & 0xC000000000000001;
        swift_bridgeObjectRetain();
        uint64_t v159 = 0;
        uint64_t v78 = _swiftEmptyArrayStorage;
        uint64_t v200 = (void *)0x80000001003B79D0;
        do
        {
          if (v158) {
            id v160 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v160 = *(id *)&v156[8 * v159 + 32];
          }
          uint64_t v161 = v160;
          id v162 = [v160 uid];
          if (v162)
          {
            uint64_t v163 = v162;
            uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v166 = v165;

            switch([v161 deviceType])
            {
              case 0u:
                uint64_t v167 = swift_allocObject();
                *(void *)(v167 + 16) = sub_1002693E8();
                *(void *)(v167 + 24) = v168;
                *(_WORD *)(v167 + 32) = v169;
                uint64_t v170 = sub_10029B160();
                uint64_t v171 = 0;
                __int16 v172 = 0;
                *(void *)(v167 + 40) = v170;
                *(void *)(v167 + 48) = v173;
                break;
              case 1u:
                uint64_t v167 = sub_1002693E8();
                uint64_t v171 = v180;
                __int16 v172 = v181 | 0x80;
                break;
              case 2u:
                uint64_t v167 = sub_1002693E8();
                uint64_t v171 = v176;
                __int16 v172 = v177 | 0x200;
                break;
              case 3u:
                uint64_t v167 = sub_1002693E8();
                uint64_t v171 = v178;
                __int16 v172 = v179 | 0x280;
                break;
              case 4u:
                uint64_t v167 = sub_1002693E8();
                uint64_t v171 = v174;
                __int16 v172 = v175 | 0x480;
                break;
              case 5u:
                uint64_t v167 = sub_1002693E8();
                uint64_t v171 = v182;
                __int16 v172 = v183 | 0x400;
                break;
              default:
                uint64_t v167 = swift_allocObject();
                *(void *)(v167 + 16) = sub_1002693E8();
                *(void *)(v167 + 24) = v184;
                *(_WORD *)(v167 + 32) = v185;
                uint64_t v204 = 0;
                unint64_t v205 = 0xE000000000000000;
                _StringGuts.grow(_:)(24);
                v186._countAndFlagsBits = 0xD000000000000016;
                v186._object = v200;
                String.append(_:)(v186);
                unsigned int v203 = [v161 deviceType];
                type metadata accessor for MRAVOutputDeviceType();
                _print_unlocked<A, B>(_:_:)();
                uint64_t v171 = 0;
                __int16 v172 = 0;
                unint64_t v187 = v205;
                *(void *)(v167 + 40) = v204;
                *(void *)(v167 + 48) = v187;
                break;
            }
            sub_10029C250(v164, v166, v167, v171, v172, (uint64_t)&v206);

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v78 = sub_100269928(0, v78[2] + 1, 1, v78, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            uint64_t v157 = v201;
            v156 = (uint8_t *)v202;
            unint64_t v189 = v78[2];
            unint64_t v188 = v78[3];
            if (v189 >= v188 >> 1) {
              uint64_t v78 = sub_100269928((void *)(v188 > 1), v189 + 1, 1, v78, &qword_10047AFF0, (void (*)(void, int64_t, void *, void *))sub_10026B840);
            }
            v78[2] = v189 + 1;
            int v190 = &v78[5 * v189];
            long long v191 = v206;
            long long v192 = v207;
            *((_WORD *)v190 + 32) = v208;
            *((_OWORD *)v190 + 2) = v191;
            *((_OWORD *)v190 + 3) = v192;
          }
          else
          {
          }
          ++v159;
        }
        while (v157 != v159);
LABEL_122:
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_123:
        uint64_t v78 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v78;
      id v193 = [v1 configuredClusterSize];
      if ((unint64_t)v193 > 0xFF) {
        goto LABEL_142;
      }
      *(unsigned char *)(v14 + 24) = (_BYTE)v193;
      return v14;
  }
}

uint64_t sub_100269208()
{
  switch([v0 deviceType])
  {
    case 0u:
      uint64_t v1 = swift_allocObject();
      *(void *)(v1 + 16) = sub_1002693E8();
      *(void *)(v1 + 24) = v2;
      *(_WORD *)(v1 + 32) = v3;
      *(void *)(v1 + 40) = sub_10029B160();
      *(void *)(v1 + 48) = v4;
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t v1 = sub_1002693E8();
      break;
    default:
      uint64_t v1 = swift_allocObject();
      *(void *)(v1 + 16) = sub_1002693E8();
      *(void *)(v1 + 24) = v5;
      *(_WORD *)(v1 + 32) = v6;
      _StringGuts.grow(_:)(24);
      v7._object = (void *)0x80000001003B79D0;
      v7._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v7);
      uint64_t v9 = [v0 deviceType];
      type metadata accessor for MRAVOutputDeviceType();
      _print_unlocked<A, B>(_:_:)();
      *(void *)(v1 + 40) = HIDWORD(v9);
      *(void *)(v1 + 48) = 0xE000000000000000;
      break;
  }
  return v1;
}

uint64_t sub_1002693E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [v0 uid];
  if (v6)
  {
    Swift::String v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0;
  }
  id v11 = [v1 modelID];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0;
  }
  unsigned int v16 = [v1 isAirpodsDevice];
  unsigned int v17 = [v1 deviceType];
  unsigned int v18 = v17;
  if (!v16)
  {
    if (v17 == 2)
    {
      id v19 = [v1 name];
      if (v19)
      {
        Swift::String v20 = v19;
        uint64_t v45 = v3;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        v48[0] = v21;
        v48[1] = v23;
        uint64_t v46 = 0x646F70726961;
        unint64_t v47 = 0xE600000000000000;
        sub_1001A4624();
        LOBYTE(v20) = StringProtocol.localizedCaseInsensitiveContains<A>(_:)();
        swift_bridgeObjectRelease();
        if (v20)
        {
          uint64_t v24 = sub_1001A69C4();
          uint64_t v25 = v45;
          (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v5, v24, v2);
          swift_bridgeObjectRetain();
          id v26 = v1;
          swift_bridgeObjectRetain();
          uint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.info.getter();
          int v44 = v28;
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = swift_slowAlloc();
            id v41 = v26;
            uint64_t v30 = v29;
            uint64_t v43 = swift_slowAlloc();
            v48[0] = v43;
            *(_DWORD *)uint64_t v30 = 136315650;
            if (!v10) {
              uint64_t v8 = 7104878;
            }
            os_log_t v42 = v27;
            if (v10) {
              unint64_t v31 = v10;
            }
            else {
              unint64_t v31 = 0xE300000000000000;
            }
            swift_bridgeObjectRetain();
            uint64_t v46 = sub_10018A9E0(v8, v31, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 12) = 2080;
            if (v15) {
              uint64_t v32 = v13;
            }
            else {
              uint64_t v32 = 7104878;
            }
            if (v15) {
              unint64_t v33 = v15;
            }
            else {
              unint64_t v33 = 0xE300000000000000;
            }
            swift_bridgeObjectRetain();
            uint64_t v46 = sub_10018A9E0(v32, v33, v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 22) = 1024;
            id v34 = v41;
            unsigned int v35 = [v41 isAppleAccessory];

            LODWORD(v46) = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            os_log_t v36 = v42;
            _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v44, "AVOD: %s named as airpods but not identified as such. Model=%s, genuine=%{BOOL}d", (uint8_t *)v30, 0x1Cu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v2);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();

            (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v2);
          }
          goto LABEL_29;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    if ([v1 isHearingDevice]) {
      return 10;
    }
    if (![v1 isBeatsLegacyDevice]) {
      return sub_100267AA4();
    }
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_100267AA4();
    *(void *)(v13 + 24) = v37;
    *(_WORD *)(v13 + 32) = v38;
    return v13;
  }
  swift_bridgeObjectRelease();
  if (v18 != 2) {
    goto LABEL_28;
  }
  if (([v1 isAppleAccessory] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v13;
}

void *sub_100269928(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void, int64_t, void *, void *))
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  int64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v10 = a2;
    }
LABEL_8:
    int64_t v11 = a4[2];
    if (v10 <= v11) {
      int64_t v12 = a4[2];
    }
    else {
      int64_t v12 = v10;
    }
    if (v12)
    {
      sub_100013A80(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      unint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      unint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100269A54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100269928(isUniquelyReferenced_nonNull_native, v14, 1, v3, &qword_10047B020, (void (*)(void, int64_t, void *, void *))sub_10026B5A0);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_100013A80(&qword_10047B008);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100269BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_10018FF6C(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_10018FFC8((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_10018FFC8(a2);
    sub_10018FF6C(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10018FF6C(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10026A024((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_100269D58()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047AFF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        unint64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v18 = v6[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      long long v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      uint64_t v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)uint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_10026A024(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100269D58();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_10026A190();
      goto LABEL_12;
    }
    sub_10026A360();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_10018FF6C(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_10018FFC8((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10026A190()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047AFF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)sub_10018FF6C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v17 = *(void *)(v4 + 48) + v16;
    long long v18 = v23[0];
    long long v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10026A360()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047AFF8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_10018FF6C(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    long long v15 = v29[0];
    long long v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)uint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10026A5F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10026A674(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10026A614(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10026A7F8(a1, a2, a3, (void *)*v3, &qword_10047B018, &qword_10047B010);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10026A644(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10026A7F8(a1, a2, a3, (void *)*v3, &qword_10047B020, &qword_10047B008);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10026A674(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100013A80(&qword_10047B000);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10026A7F8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100013A80(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  long long v15 = v13 + 4;
  long long v16 = a4 + 4;
  size_t v17 = 5 * v11;
  if (a1)
  {
    if (v13 != a4 || v15 >= &v16[v17]) {
      memmove(v13 + 4, a4 + 4, v17 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    sub_100013A80(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_10026A994(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10026B58C(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10026AA78(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10026AA00()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10026AA10()
{
  unint64_t result = qword_10047AFE8;
  if (!qword_10047AFE8)
  {
    sub_10018FE08(255, &qword_10047AFE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047AFE8);
  }
  return result;
}

Swift::Int sub_10026AA78(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_10026B164(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  Swift::Int v105 = result;
  __int16 v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
      __int16 v94 = v11;
      __int16 v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_10026B234((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_1001E3E5C((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          __int16 v100 = &v97[16 * v96 + 32];
          *(void *)__int16 v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          __int16 v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    __int16 v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    __int16 v104 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v106 = v3;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    size_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    size_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::Int v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    int64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      unint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      Swift::Int v22 = v20 + 1;
      Swift::Int v9 = v20;
      Swift::Int v20 = v22;
    }
    while (v22 < v3);
    Swift::Int v20 = v22;
LABEL_36:
    Swift::Int v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        Swift::Int v27 = v20;
        Swift::Int v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      Swift::Int v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1001E3C20(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_1001E3C20((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    os_log_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      Swift::Int v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            id v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        __int16 v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        unint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        __int16 v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_10026B234((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        os_log_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        Swift::Int v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    Swift::Int v32 = v3;
  }
  else {
    Swift::Int v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      unint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        id v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        Swift::Int v37 = v13;
        __int16 v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)__int16 v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      Swift::Int v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10026B164(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
    Swift::Int result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      Swift::Int result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10026B234(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  Swift::Int v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      size_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      Swift::Int v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          Swift::Int v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
            }
            Swift::Int v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    size_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      Swift::Int v27 = v7;
    }
LABEL_50:
    sub_10026B4D0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10026B4D0(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_10026B58C(uint64_t a1)
{
  return sub_10000C800(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10026B5A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100013A80(&qword_10047B008);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10026B6B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_10018FF6C(v4, (uint64_t)v5);
      sub_100269BDC((uint64_t)v6, (uint64_t)v5);
      sub_10018FFC8((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10026B73C()
{
  sub_1001B99B8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(_WORD *)(v0 + 32));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10026B780()
{
  sub_1001B99B8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(_WORD *)(v0 + 32));

  return _swift_deallocObject(v0, 34, 7);
}

void type metadata accessor for MRAVOutputDeviceSubtype(uint64_t a1)
{
}

uint64_t sub_10026B7D0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10026B808()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10026B840(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10026B950()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice);
}

id sub_10026B95C@<X0>(void *a1@<X8>)
{
  id result = sub_10026B950();
  *a1 = result;
  return result;
}

void sub_10026B988(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice) = *a1;
  id v3 = v2;
}

id sub_10026B9D8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice);
}

id sub_10026B9E4@<X0>(void *a1@<X8>)
{
  id result = sub_10026B9D8();
  *a1 = result;
  return result;
}

void sub_10026BA10(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice) = *a1;
  id v3 = v2;
}

id sub_10026BA60()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10026BA6C@<X0>(void *a1@<X8>)
{
  id result = sub_10026BA60();
  *a1 = result;
  return result;
}

void sub_10026BA98(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026BAE8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
}

id sub_10026BAF4@<X0>(void *a1@<X8>)
{
  id result = sub_10026BAE8();
  *a1 = result;
  return result;
}

void sub_10026BB20(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID) = *a1;
  id v3 = v2;
}

id sub_10026BDA0(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD000000000000030;
  v6[1] = 0x80000001003B7A80;
  v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createTransientExternalDevice] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___connectToTransientExternalDevice] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0;
  uint64_t v7 = &v5[OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10026C00C()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10026C058(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_tracked);
}

uint64_t (*sub_10026C064())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026C0C4(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_eventName);
}

unint64_t sub_10026C0D4(uint64_t a1, uint64_t a2)
{
  return sub_10026CAE0(a1, a2, &OBJC_IVAR___MRDCreateRemoteHostedEndpointAnalytics_requestID);
}

uint64_t sub_10026C0E0()
{
  return sub_10026E66C((uint64_t (*)(void))sub_10026B950, (uint64_t (*)(void))sub_10026B9D8, (uint64_t (*)(void))sub_10026BA60, (uint64_t (*)(void))sub_10026BAE8);
}

id sub_10026C16C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy);
}

id sub_10026C178@<X0>(void *a1@<X8>)
{
  id result = sub_10026C16C();
  *a1 = result;
  return result;
}

void sub_10026C1A4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy) = *a1;
  id v3 = v2;
}

id sub_10026C1F4()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
}

id sub_10026C200@<X0>(void *a1@<X8>)
{
  id result = sub_10026C1F4();
  *a1 = result;
  return result;
}

void sub_10026C22C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026C27C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10026C288@<X0>(void *a1@<X8>)
{
  id result = sub_10026C27C();
  *a1 = result;
  return result;
}

void sub_10026C2B4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026C304()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext);
}

id sub_10026C310@<X0>(void *a1@<X8>)
{
  id result = sub_10026C304();
  *a1 = result;
  return result;
}

void sub_10026C33C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext) = *a1;
  id v3 = v2;
}

id sub_10026C38C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
}

id sub_10026C398@<X0>(void *a1@<X8>)
{
  id result = sub_10026C38C();
  *a1 = result;
  return result;
}

void sub_10026C3C4(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID) = *a1;
  id v3 = v2;
}

uint64_t sub_10026C414()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C6340;
  *(void *)(v0 + 32) = sub_10026C16C();
  *(void *)(v0 + 40) = sub_10026C1F4();
  *(void *)(v0 + 48) = sub_10026C27C();
  *(void *)(v0 + 56) = sub_10026C304();
  *(void *)(v0 + 64) = sub_10026C38C();
  specialized Array._endMutation()();
  return v0;
}

id sub_10026C754(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = objc_allocWithZone(v2);
  unint64_t v6 = &v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD00000000000002ALL;
  v6[1] = 0x80000001003B7B00;
  v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext] = 0;
  *(void *)&v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0;
  uint64_t v7 = &v5[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, "init");
}

id sub_10026C824(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v6 = &v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName];
  *unint64_t v6 = 0xD00000000000002ALL;
  v6[1] = 0x80000001003B7B00;
  v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForBuddy] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___modifyOutputContext] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics____lazy_storage___searchForGroupUID] = 0;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10026CA0C()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10026CA58(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_tracked);
}

uint64_t (*sub_10026CA64())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026CAC4(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_eventName);
}

unint64_t sub_10026CAD4(uint64_t a1, uint64_t a2)
{
  return sub_10026CAE0(a1, a2, &OBJC_IVAR___MRDCreateHostedEndpointAnalytics_requestID);
}

unint64_t sub_10026CAE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *v3;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = 0x4974736575716572;
  *(void *)(inited + 40) = 0xE900000000000044;
  uint64_t v7 = (uint64_t *)(v5 + *a3);
  swift_beginAccess();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v8;
  swift_bridgeObjectRetain();
  return sub_1001FA360(inited);
}

uint64_t sub_10026CB90()
{
  return sub_10026C414();
}

id sub_10026CC78()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint);
}

id sub_10026CC84@<X0>(void *a1@<X8>)
{
  id result = sub_10026CC78();
  *a1 = result;
  return result;
}

void sub_10026CCB0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026CD00()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
}

id sub_10026CD0C@<X0>(void *a1@<X8>)
{
  id result = sub_10026CD00();
  *a1 = result;
  return result;
}

void sub_10026CD38(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026CD88()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext);
}

id sub_10026CD94@<X0>(void *a1@<X8>)
{
  id result = sub_10026CD88();
  *a1 = result;
  return result;
}

void sub_10026CDC0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext) = *a1;
  id v3 = v2;
}

unint64_t sub_10026CE10()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5F10;
  *(void *)(inited + 32) = 0x4974736575716572;
  *(void *)(inited + 40) = 0xE900000000000044;
  id v3 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateEndpointAnalytics_requestID);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "operationType");
  *(_WORD *)(inited + 94) = -4864;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000015;
  *(void *)(inited + 136) = 0x80000001003B7B90;
  uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR___MRDCreateEndpointAnalytics_operationTypeString);
  swift_beginAccess();
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 152) = v8;
  swift_bridgeObjectRetain();
  return sub_1001FA360(inited);
}

id sub_10026D128(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10026D16C(a1, a2);
}

id sub_10026D16C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics_operationType] = 0;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_operationTypeString];
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_eventName];
  *uint64_t v7 = 0xD000000000000024;
  v7[1] = 0x80000001003B7B60;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createHostedEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___createRemoteHostedEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointAnalytics____lazy_storage___modifyOutputContext] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointAnalytics_tracked] = 0;
  uint64_t v8 = &v2[OBJC_IVAR___MRDCreateEndpointAnalytics_requestID];
  *uint64_t v8 = a1;
  v8[1] = a2;
  v10.receiver = v2;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, "init");
}

uint64_t sub_10026D350()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateEndpointAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10026D39C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDCreateEndpointAnalytics_tracked);
}

uint64_t (*sub_10026D3A8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026D408(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDCreateEndpointAnalytics_eventName);
}

unint64_t sub_10026D418()
{
  return sub_10026CE10();
}

uint64_t sub_10026D43C()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7260;
  *(void *)(v0 + 32) = sub_10026CC78();
  *(void *)(v0 + 40) = sub_10026CD00();
  *(void *)(v0 + 48) = sub_10026CD88();
  specialized Array._endMutation()();
  return v0;
}

id sub_10026D688()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices);
}

id sub_10026D694@<X0>(void *a1@<X8>)
{
  id result = sub_10026D688();
  *a1 = result;
  return result;
}

void sub_10026D6C0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices) = *a1;
  id v3 = v2;
}

id sub_10026D710()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice);
}

id sub_10026D71C@<X0>(void *a1@<X8>)
{
  id result = sub_10026D710();
  *a1 = result;
  return result;
}

void sub_10026D748(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice) = *a1;
  id v3 = v2;
}

id sub_10026D798()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint);
}

id sub_10026D7A4@<X0>(void *a1@<X8>)
{
  id result = sub_10026D798();
  *a1 = result;
  return result;
}

void sub_10026D7D0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026D820()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion);
}

id sub_10026D82C@<X0>(void *a1@<X8>)
{
  id result = sub_10026D820();
  *a1 = result;
  return result;
}

void sub_10026D858(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion) = *a1;
  id v3 = v2;
}

id sub_10026D8A8()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification);
}

id sub_10026D8B4@<X0>(void *a1@<X8>)
{
  id result = sub_10026D8A8();
  *a1 = result;
  return result;
}

void sub_10026D8E0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification);
  *(void *)(*a2
            + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification) = *a1;
  id v3 = v2;
}

id sub_10026D930()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification);
}

id sub_10026D93C@<X0>(void *a1@<X8>)
{
  id result = sub_10026D930();
  *a1 = result;
  return result;
}

void sub_10026D968(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification) = *a1;
  id v3 = v2;
}

uint64_t sub_10026D9B8()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7B00;
  *(void *)(v0 + 32) = sub_10026D688();
  *(void *)(v0 + 40) = sub_10026D710();
  *(void *)(v0 + 48) = sub_10026D798();
  *(void *)(v0 + 56) = sub_10026D8A8();
  *(void *)(v0 + 64) = sub_10026D820();
  *(void *)(v0 + 72) = sub_10026D930();
  specialized Array._endMutation()();
  return v0;
}

unint64_t sub_10026DA44()
{
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5F10;
  *(void *)(inited + 32) = 0x4974736575716572;
  *(void *)(inited + 40) = 0xE900000000000044;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestID);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x80000001003B7C10;
  id v5 = (unsigned char *)(v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestContainsLocal);
  swift_beginAccess();
  *(unsigned char *)(inited + 96) = *v5;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD000000000000018;
  *(void *)(inited + 136) = 0x80000001003B7C30;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = v7;
  return sub_1001FA360(inited);
}

id sub_10026DEFC(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10026DF40(a1, a2);
}

id sub_10026DF40(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestContainsLocal] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_numberOfUndesiredDevices] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_numberOfDevicesOnLocal] = 0;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_eventName];
  *uint64_t v6 = 0xD00000000000002DLL;
  v6[1] = 0x80000001003B7BE0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___discoverOutputDevices] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___searchEndpointsForLocalDevice] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___createEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___waitForCompletion] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___removeUndesiredDevicesOutputContextModification] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics____lazy_storage___followupOutputContextModification] = 0;
  v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked] = 0;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10026E168()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10026E1B4(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_tracked);
}

uint64_t (*sub_10026E1C0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026E220(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDCreateOptimizedEndpointAnalytics_eventName);
}

unint64_t sub_10026E230()
{
  return sub_10026DA44();
}

uint64_t sub_10026E254()
{
  return sub_10026D9B8();
}

id sub_10026E44C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader);
}

id sub_10026E458@<X0>(void *a1@<X8>)
{
  id result = sub_10026E44C();
  *a1 = result;
  return result;
}

void sub_10026E484(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader) = *a1;
  id v3 = v2;
}

id sub_10026E4D4()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint);
}

id sub_10026E4E0@<X0>(void *a1@<X8>)
{
  id result = sub_10026E4D4();
  *a1 = result;
  return result;
}

void sub_10026E50C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026E55C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint);
}

id sub_10026E568@<X0>(void *a1@<X8>)
{
  id result = sub_10026E55C();
  *a1 = result;
  return result;
}

void sub_10026E594(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026E5E4()
{
  return sub_10024EB14(&OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup);
}

id sub_10026E5F0@<X0>(void *a1@<X8>)
{
  id result = sub_10026E5E4();
  *a1 = result;
  return result;
}

void sub_10026E61C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup);
  *(void *)(*a2 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup) = *a1;
  id v3 = v2;
}

uint64_t sub_10026E66C(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  sub_100013A80(&qword_100478380);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1003C7B10;
  *(void *)(v8 + 32) = a1();
  *(void *)(v8 + 40) = a2();
  *(void *)(v8 + 48) = a3();
  *(void *)(v8 + 56) = a4();
  specialized Array._endMutation()();
  return v8;
}

unint64_t sub_10026E718()
{
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C7B20;
  *(void *)(inited + 32) = 0x4974736575716572;
  *(void *)(inited + 40) = 0xE900000000000044;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_requestID);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000011;
  *(void *)(inited + 88) = 0x80000001003B7CC0;
  id v5 = (unsigned char *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_containsLeaderInfo);
  swift_beginAccess();
  *(unsigned char *)(inited + 96) = *v5;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD000000000000019;
  *(void *)(inited + 136) = 0x80000001003B7CE0;
  uint64_t v6 = (unsigned char *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_undiscoverableGroupLeader);
  swift_beginAccess();
  *(unsigned char *)(inited + 144) = *v6;
  *(void *)(inited + 168) = &type metadata for Bool;
  strcpy((char *)(inited + 176), "airlayActive");
  *(unsigned char *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  uint64_t v7 = (char *)(v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_airplayActive);
  swift_beginAccess();
  char v8 = *v7;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(unsigned char *)(inited + 192) = v8;
  swift_bridgeObjectRetain();
  return sub_1001FA360(inited);
}

id sub_10026EAE8(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_10026EB2C(a1, a2);
}

id sub_10026EB2C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_undiscoverableGroupLeader] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_containsLeaderInfo] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_airplayActive] = 0;
  uint64_t v6 = &v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_eventName];
  *uint64_t v6 = 0xD000000000000037;
  v6[1] = 0x80000001003B7C80;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___findMyGroupLeader] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createOptimizedEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___createEndpoint] = 0;
  *(void *)&v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics____lazy_storage___discoverGroup] = 0;
  v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked] = 0;
  uint64_t v7 = &v2[OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_requestID];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_10026ED1C()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10026ED68(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_tracked);
}

uint64_t (*sub_10026ED74())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10026EDD4(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDCreateEndpointWithCurrentTopologyAnalytics_eventName);
}

unint64_t sub_10026EDE4()
{
  return sub_10026E718();
}

uint64_t sub_10026EE08()
{
  return sub_10026E66C((uint64_t (*)(void))sub_10026E44C, (uint64_t (*)(void))sub_10026E4D4, (uint64_t (*)(void))sub_10026E4D4, (uint64_t (*)(void))sub_10026E5E4);
}

id sub_10026F358()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint);
}

id sub_10026F364@<X0>(void *a1@<X8>)
{
  id result = sub_10026F358();
  *a1 = result;
  return result;
}

void sub_10026F390(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026F3E0()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology);
}

id sub_10026F3EC@<X0>(void *a1@<X8>)
{
  id result = sub_10026F3E0();
  *a1 = result;
  return result;
}

void sub_10026F418(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology) = *a1;
  id v3 = v2;
}

id sub_10026F468()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint);
}

id sub_10026F474@<X0>(void *a1@<X8>)
{
  id result = sub_10026F468();
  *a1 = result;
  return result;
}

void sub_10026F4A0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint) = *a1;
  id v3 = v2;
}

id sub_10026F4F0()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect);
}

id sub_10026F4FC@<X0>(void *a1@<X8>)
{
  id result = sub_10026F4F0();
  *a1 = result;
  return result;
}

void sub_10026F528(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect) = *a1;
  id v3 = v2;
}

id sub_10026F578()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand);
}

id sub_10026F584@<X0>(void *a1@<X8>)
{
  id result = sub_10026F578();
  *a1 = result;
  return result;
}

void sub_10026F5B0(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v4 = *(id *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand) = *a1;
  id v3 = v2;
}

uint64_t sub_10026F600()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C6340;
  *(void *)(v0 + 32) = sub_10026F358();
  *(void *)(v0 + 40) = sub_10026F3E0();
  *(void *)(v0 + 48) = sub_10026F468();
  *(void *)(v0 + 56) = sub_10026F4F0();
  *(void *)(v0 + 64) = sub_10026F578();
  specialized Array._endMutation()();
  return v0;
}

uint64_t sub_10026F684()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C6380;
  strcpy((char *)(inited + 32), "commandString");
  *(_WORD *)(inited + 46) = -4864;
  id v3 = (uint64_t *)(v0 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_commandString);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x646E616D6D6F63;
  *(void *)(inited + 88) = 0xE700000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD00000000000001DLL;
  *(void *)(inited + 136) = 0x80000001003B7D70;
  uint64_t v7 = (unsigned char *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID);
  swift_beginAccess();
  *(unsigned char *)(inited + 144) = *v7;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0xD00000000000001ELL;
  *(void *)(inited + 184) = 0x80000001003B7D90;
  char v8 = (unsigned char *)(v1
               + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration);
  swift_beginAccess();
  *(unsigned char *)(inited + 192) = *v8;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000015;
  *(void *)(inited + 232) = 0x80000001003B7DB0;
  objc_super v9 = (unsigned char *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForLocalOrigin);
  swift_beginAccess();
  *(unsigned char *)(inited + 240) = *v9;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD000000000000019;
  *(void *)(inited + 280) = 0x80000001003B7DD0;
  objc_super v10 = (unsigned char *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCompanionOrigin);
  swift_beginAccess();
  *(unsigned char *)(inited + 288) = *v10;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 320) = 0xD000000000000021;
  *(void *)(inited + 328) = 0x80000001003B7DF0;
  uint64_t v11 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs);
  swift_beginAccess();
  uint64_t v12 = *v11;
  *(void *)(inited + 360) = &type metadata for Int;
  *(void *)(inited + 336) = v12;
  unint64_t v13 = sub_1001FA360(inited);
  size_t v14 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_deviceInfo);
  swift_beginAccess();
  id v15 = *v14;
  uint64_t v16 = sub_10026F9A8();

  uint64_t v17 = sub_100271CC4((uint64_t)v16, v13);
  unint64_t v18 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_details);
  swift_beginAccess();
  id v19 = *v18;
  unint64_t v20 = sub_10026FC50();

  return sub_100271CC4(v20, v17);
}

__CFString *sub_10026F9A8()
{
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C7B30;
  *(void *)(inited + 32) = 0x7469736F706D6F63;
  *(void *)(inited + 40) = 0xEB000000006E6F69;
  int v2 = MRAnalyticsCompositionForDeviceInfo();
  type metadata accessor for MRAnalyticsDeviceComposition(0);
  *(_DWORD *)(inited + 48) = v2;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = 0xD000000000000011;
  *(void *)(inited + 88) = 0x80000001003B7E20;
  MRAnalyticsCompositionForDeviceInfo();
  id v4 = (id)MRAnalyticsDeviceCompositionDescription();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v7;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000017;
  *(void *)(inited + 136) = 0x80000001003B7E40;
  id v8 = [(__CFString *)v0 deviceUID];
  id v9 = v8;
  if (v8) {

  }
  *(unsigned char *)(inited + 144) = v9 != 0;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0x616C707269417369;
  *(void *)(inited + 184) = 0xEF65766974634179;
  *(unsigned char *)(inited + 192) = [(__CFString *)v0 isAirPlayActive];
  *(void *)(inited + 216) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000017;
  *(void *)(inited + 232) = 0x80000001003B6E60;
  *(unsigned char *)(inited + 240) = [(__CFString *)v0 groupContainsDiscoverableGroupLeader];
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD00000000000001DLL;
  *(void *)(inited + 280) = 0x80000001003B7E60;
  *(unsigned char *)(inited + 288) = [(__CFString *)v0 parentGroupContainsDiscoverableGroupLeader];
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 320) = 0x5472657473756C63;
  *(void *)(inited + 328) = 0xEB00000000657079;
  unsigned int v10 = [(__CFString *)v0 clusterType];
  type metadata accessor for MRAVOutputDeviceClusterType(0);
  *(_DWORD *)(inited + 336) = v10;
  *(void *)(inited + 360) = v11;
  *(void *)(inited + 368) = 0xD000000000000011;
  *(void *)(inited + 376) = 0x80000001003B7E80;
  unsigned int v12 = [(__CFString *)v0 clusterType];
  if (v12 <= 3)
  {
    uint64_t v13 = (int)v12;
    uint64_t v0 = off_1004269D8[v13];
    size_t v14 = off_1004269B8[v13];
  }
  id result = v0;
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(inited + 408) = &type metadata for String;
    *(void *)(inited + 384) = v17;
    *(void *)(inited + 392) = v19;
    return (__CFString *)sub_1001FA360(inited);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10026FC50()
{
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5F10;
  *(void *)(inited + 32) = 0x4974736575716572;
  *(void *)(inited + 40) = 0xE900000000000044;
  id v2 = [v0 requestID];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x6E6F73616572;
  *(void *)(inited + 88) = 0xE600000000000000;
  id v6 = [v0 reason];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = sub_100013A80(&qword_1004780A0);
  *(void *)(inited + 96) = v8;
  *(void *)(inited + 104) = v10;
  *(void *)(inited + 120) = v11;
  strcpy((char *)(inited + 128), "userInitiated");
  *(_WORD *)(inited + 142) = -4864;
  unsigned __int8 v12 = [v0 userInitiated];
  *(void *)(inited + 168) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = v12;
  return sub_1001FA360(inited);
}

id sub_10027006C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_1002700C8(a1, a2, a3, a4);
}

id sub_1002700C8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_command] = 0;
  uint64_t v10 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_commandString];
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForLocalOrigin] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_requestForCompanionOrigin] = 0;
  uint64_t v11 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs] = 0;
  unsigned __int8 v12 = (double *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_timeout];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_timeout] = 0;
  uint64_t v13 = &v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_eventName];
  void *v13 = 0xD00000000000002BLL;
  v13[1] = 0x80000001003B7D40;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createOptimizedEndpoint] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createEndpointWithCurrentTopology] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___createPartialEndpoint] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___connect] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics____lazy_storage___sendCommand] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_details] = a1;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_deviceInfo] = a2;
  swift_beginAccess();
  *uint64_t v11 = a3;
  swift_beginAccess();
  *unsigned __int8 v12 = a4;
  v15.receiver = v4;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t sub_1002703D0()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10027041C(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_tracked);
}

uint64_t (*sub_100270428())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100270488(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDSendCommandToEndpointWithOutputDevicesRequestAnalytics_eventName);
}

uint64_t sub_100270498()
{
  return sub_10026F684();
}

uint64_t sub_1002704BC()
{
  return sub_10026F600();
}

void sub_100270590(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  id v6 = *v5;
  *uint64_t v5 = a3;
  id v7 = a3;
}

id sub_10027068C()
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_100270710(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *id v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

id sub_100270F9C()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices);
}

id sub_100270FA8@<X0>(void *a1@<X8>)
{
  id result = sub_100270F9C();
  *a1 = result;
  return result;
}

void sub_100270FD4(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices);
  *(void *)(*a2
            + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices) = *a1;
  id v3 = v2;
}

id sub_100271024()
{
  return sub_10024EB14(&OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands);
}

id sub_100271030@<X0>(void *a1@<X8>)
{
  id result = sub_100271024();
  *a1 = result;
  return result;
}

void sub_10027105C(void **a1, void *a2)
{
  id v2 = *a1;
  id v4 = *(id *)(*a2
             + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands);
  *(void *)(*a2 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands) = *a1;
  id v3 = v2;
}

uint64_t sub_1002710AC()
{
  uint64_t v1 = v0;
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C7B40;
  strcpy((char *)(inited + 32), "commandString");
  *(_WORD *)(inited + 46) = -4864;
  id v3 = (uint64_t *)(v0 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_commandString);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x646E616D6D6F63;
  *(void *)(inited + 88) = 0xE700000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  *(void *)(inited + 96) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD00000000000001DLL;
  *(void *)(inited + 136) = 0x80000001003B7D70;
  uint64_t v7 = (unsigned char *)(v1
               + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID);
  swift_beginAccess();
  *(unsigned char *)(inited + 144) = *v7;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0xD00000000000001ELL;
  *(void *)(inited + 184) = 0x80000001003B7D90;
  uint64_t v8 = (unsigned char *)(v1
               + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration);
  swift_beginAccess();
  *(unsigned char *)(inited + 192) = *v8;
  *(void *)(inited + 216) = &type metadata for Bool;
  *(void *)(inited + 224) = 0xD000000000000015;
  *(void *)(inited + 232) = 0x80000001003B7DB0;
  id v9 = (unsigned char *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForLocalOrigin);
  swift_beginAccess();
  *(unsigned char *)(inited + 240) = *v9;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(void *)(inited + 272) = 0xD000000000000019;
  *(void *)(inited + 280) = 0x80000001003B7DD0;
  uint64_t v10 = (unsigned char *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCompanionOrigin);
  swift_beginAccess();
  *(unsigned char *)(inited + 288) = *v10;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(void *)(inited + 320) = 0xD000000000000021;
  *(void *)(inited + 328) = 0x80000001003B7DF0;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs);
  swift_beginAccess();
  *(void *)(inited + 336) = *v11;
  *(void *)(inited + 360) = &type metadata for Int;
  *(void *)(inited + 368) = 0xD000000000000022;
  *(void *)(inited + 376) = 0x80000001003B7F20;
  unsigned __int8 v12 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfDiscoveredOutputDeviceUIDs);
  swift_beginAccess();
  *(void *)(inited + 384) = *v12;
  *(void *)(inited + 408) = &type metadata for Int;
  *(void *)(inited + 416) = 0xD00000000000001FLL;
  *(void *)(inited + 424) = 0x80000001003B7F50;
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfMissingOutputDeviceUIDs);
  swift_beginAccess();
  *(void *)(inited + 432) = *v13;
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = 0xD000000000000011;
  *(void *)(inited + 472) = 0x80000001003B7F70;
  size_t v14 = (void *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfEndpoints);
  swift_beginAccess();
  *(void *)(inited + 480) = *v14;
  *(void *)(inited + 504) = &type metadata for Int;
  *(void *)(inited + 512) = 0xD000000000000018;
  *(void *)(inited + 520) = 0x80000001003B7F90;
  objc_super v15 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfPendingAtTimeout);
  swift_beginAccess();
  uint64_t v16 = *v15;
  *(void *)(inited + 552) = &type metadata for Int;
  *(void *)(inited + 528) = v16;
  *(void *)(inited + 560) = 0xD000000000000017;
  *(void *)(inited + 568) = 0x80000001003B7FB0;
  uint64_t v17 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtTimeout);
  swift_beginAccess();
  uint64_t v18 = *v17;
  *(void *)(inited + 600) = &type metadata for Int;
  *(void *)(inited + 576) = v18;
  *(void *)(inited + 608) = 0xD00000000000001ALL;
  *(void *)(inited + 616) = 0x80000001003B7FD0;
  uint64_t v19 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtCompletion);
  swift_beginAccess();
  uint64_t v20 = *v19;
  *(void *)(inited + 648) = &type metadata for Int;
  *(void *)(inited + 624) = v20;
  *(void *)(inited + 656) = 0xD000000000000018;
  *(void *)(inited + 664) = 0x80000001003B7FF0;
  uint64_t v21 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtTimeout);
  swift_beginAccess();
  uint64_t v22 = *v21;
  *(void *)(inited + 696) = &type metadata for Int;
  *(void *)(inited + 672) = v22;
  *(void *)(inited + 704) = 0xD00000000000001BLL;
  *(void *)(inited + 712) = 0x80000001003B8010;
  BOOL v23 = (uint64_t *)(v1
                  + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtCompletion);
  swift_beginAccess();
  uint64_t v24 = *v23;
  *(void *)(inited + 744) = &type metadata for Int;
  *(void *)(inited + 720) = v24;
  *(void *)(inited + 752) = 0x74756F656D6974;
  *(void *)(inited + 760) = 0xE700000000000000;
  uint64_t v25 = (uint64_t *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout);
  swift_beginAccess();
  uint64_t v26 = *v25;
  *(void *)(inited + 792) = &type metadata for Double;
  *(void *)(inited + 768) = v26;
  unint64_t v27 = sub_1001FA360(inited);
  Swift::Int v28 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_deviceInfo);
  swift_beginAccess();
  id v29 = *v28;
  uint64_t v30 = sub_10026F9A8();

  uint64_t v31 = sub_100271CC4((uint64_t)v30, v27);
  Swift::Int v32 = (id *)(v1 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_details);
  swift_beginAccess();
  id v33 = *v32;
  unint64_t v34 = sub_10026FC50();

  return sub_100271CC4(v34, v31);
}

id sub_1002717F8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return sub_100271854(a1, a2, a3, a4);
}

id sub_100271854(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_command] = 0;
  uint64_t v10 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_commandString];
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestContainsLocalDeviceUID] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCurrentConfiguration] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForLocalOrigin] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_requestForCompanionOrigin] = 0;
  uint64_t v11 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfRequestedOutputDeviceUIDs] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfDiscoveredOutputDeviceUIDs] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfMissingOutputDeviceUIDs] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfEndpoints] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfPendingAtTimeout] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtTimeout] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfErrorsAtCompletion] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtTimeout] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_numberOfSuccessAtCompletion] = 0;
  unsigned __int8 v12 = (double *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout];
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_timeout] = 0;
  uint64_t v13 = &v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_eventName];
  void *v13 = 0xD00000000000002CLL;
  v13[1] = 0x80000001003B7EF0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___discoverOutputDevices] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics____lazy_storage___sendCommands] = 0;
  v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked] = 0;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_details] = a1;
  *(void *)&v4[OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_deviceInfo] = a2;
  swift_beginAccess();
  *uint64_t v11 = a3;
  swift_beginAccess();
  *unsigned __int8 v12 = a4;
  v15.receiver = v4;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t sub_100271B68()
{
  uint64_t v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_100271BB4(char a1, uint64_t a2, uint64_t a3)
{
  return sub_10024F61C(a1, a2, a3, &OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_tracked);
}

uint64_t (*sub_100271BC0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100271C20(uint64_t a1, uint64_t a2)
{
  return sub_10024F6D4(a1, a2, &OBJC_IVAR___MRDSendCommandToEndpointsWithOutputDevicesRequestAnalytics_eventName);
}

uint64_t sub_100271C30()
{
  return sub_1002710AC();
}

uint64_t sub_100271C54()
{
  sub_100013A80(&qword_100478380);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1003C7270;
  *(void *)(v0 + 32) = sub_100270F9C();
  *(void *)(v0 + 40) = sub_100271024();
  specialized Array._endMutation()();
  return v0;
}

uint64_t sub_100271CC4(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100271DA4(a1, (uint64_t)sub_100271D50, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100271D50@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_10018FDAC((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100271DA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100272750(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_10018FF5C(v49, v47);
  size_t v14 = *(void **)a5;
  unint64_t v16 = sub_100013660(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_100249444();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *uint64_t v25 = v13;
    v25[1] = v12;
    sub_10018FF5C(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v24[2] = v28;
LABEL_16:
    sub_100272750(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_10018FF5C(v49, v47);
      Swift::Int v32 = *(void **)a5;
      unint64_t v34 = sub_100013660(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_100248BD0(v37, 1);
        unint64_t v39 = sub_100013660(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_10018FDAC((uint64_t)v47, (uint64_t)v46);
        sub_10018FD5C((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        sub_10018FD5C((uint64_t)v30);
        sub_10018FF5C(v46, v30);
      }
      else
      {
        unint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        os_log_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *os_log_t v42 = v31;
        v42[1] = i;
        sub_10018FF5C(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      sub_100272750(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10018F864();
    return swift_release();
  }
  sub_100248BD0(v19, a4 & 1);
  unint64_t v21 = sub_100013660(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_10018FDAC((uint64_t)v47, (uint64_t)v46);
    sub_10018FD5C((uint64_t)v47);
    swift_bridgeObjectRelease();
    BOOL v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    sub_10018FD5C((uint64_t)v23);
    sub_10018FF5C(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002720FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047B3F8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    char v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    sub_100013A80(&qword_10047B3F0);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    BOOL v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    *BOOL v18 = v31;
    v18[1] = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  char v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void *sub_10027241C()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047B3F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    char v22 = (void *)(*(void *)(v4 + 56) + v18);
    *char v22 = v20;
    v22[1] = v21;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1002725D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10022A144(a3, &qword_10047B3F0);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10027241C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002720FC(v15, a4 & 1);
  unint64_t v21 = sub_10022A144(a3, &qword_10047B3F0);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    sub_100013A80(&qword_10047B3F0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  *(void *)(v18[6] + 8 * v12) = a3;
  int64_t v23 = (void *)(v18[7] + 16 * v12);
  *int64_t v23 = a1;
  v23[1] = a2;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_retain();
}

uint64_t sub_100272750@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    char v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_10018FDAC(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  unint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_100273208((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return sub_100273270((uint64_t)v21);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

unint64_t sub_10027292C()
{
  sub_100013A80(&qword_10047B480);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C7B20;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD00000000000001DLL;
  *(void *)(inited + 48) = 0x80000001003C7C10;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD000000000000020;
  *(void *)(inited + 72) = 0x80000001003C7C30;
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = 0xD000000000000014;
  *(void *)(inited + 96) = 0x80000001003C7C60;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 0xD000000000000011;
  *(void *)(inited + 120) = 0x80000001003C7C80;
  return sub_1001FA498(inited, &qword_10047B488, &qword_10047B490);
}

unint64_t sub_100272A30()
{
  sub_100013A80(&qword_10047B468);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5780;
  *(void *)(inited + 32) = swift_getKeyPath();
  strcpy((char *)(inited + 40), "searchForBuddy");
  *(unsigned char *)(inited + 55) = -18;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x80000001003C7CE0;
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = 0xD000000000000014;
  *(void *)(inited + 96) = 0x80000001003C7C60;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 0xD000000000000013;
  *(void *)(inited + 120) = 0x80000001003C7D00;
  *(void *)(inited + 128) = swift_getKeyPath();
  *(void *)(inited + 136) = 0xD000000000000011;
  *(void *)(inited + 144) = 0x80000001003C7C80;
  return sub_1001FA498(inited, &qword_10047B470, &qword_10047B478);
}

unint64_t sub_100272B68()
{
  sub_100013A80(&qword_10047B450);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5F10;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD000000000000014;
  *(void *)(inited + 48) = 0x80000001003C7C60;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD00000000000001ALL;
  *(void *)(inited + 72) = 0x80000001003C7CE0;
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = 0xD000000000000013;
  *(void *)(inited + 96) = 0x80000001003C7D00;
  return sub_1001FA498(inited, &qword_10047B458, &qword_10047B460);
}

unint64_t sub_100272C44()
{
  sub_100013A80(&qword_10047B438);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C6370;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD000000000000015;
  *(void *)(inited + 48) = 0x80000001003C7D60;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD00000000000001DLL;
  *(void *)(inited + 72) = 0x80000001003C7D80;
  *(void *)(inited + 80) = swift_getKeyPath();
  strcpy((char *)(inited + 88), "createEndpoint");
  *(unsigned char *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 0xD000000000000011;
  *(void *)(inited + 120) = 0x80000001003C7DB0;
  *(void *)(inited + 128) = swift_getKeyPath();
  *(void *)(inited + 136) = 0xD00000000000002FLL;
  *(void *)(inited + 144) = 0x80000001003C7DD0;
  *(void *)(inited + 152) = swift_getKeyPath();
  *(void *)(inited + 160) = 0xD000000000000021;
  *(void *)(inited + 168) = 0x80000001003C7E00;
  return sub_1001FA498(inited, &qword_10047B440, &qword_10047B448);
}

unint64_t sub_100272DA4()
{
  sub_100013A80(&qword_10047B420);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C7B20;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD000000000000011;
  *(void *)(inited + 48) = 0x80000001003C7E60;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD000000000000017;
  *(void *)(inited + 72) = 0x80000001003C7E80;
  *(void *)(inited + 80) = swift_getKeyPath();
  strcpy((char *)(inited + 88), "createEndpoint");
  *(unsigned char *)(inited + 103) = -18;
  *(void *)(inited + 104) = swift_getKeyPath();
  strcpy((char *)(inited + 112), "discoverGroup");
  *(_WORD *)(inited + 126) = -4864;
  return sub_1001FA498(inited, &qword_10047B428, &qword_10047B430);
}

unint64_t sub_100272EC0()
{
  sub_100013A80(&qword_10047B408);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C5780;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = 0xD000000000000017;
  *(void *)(inited + 48) = 0x80000001003C7E80;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 0xD000000000000021;
  *(void *)(inited + 72) = 0x80000001003C7EE0;
  *(void *)(inited + 80) = swift_getKeyPath();
  *(void *)(inited + 88) = 0xD000000000000015;
  *(void *)(inited + 96) = 0x80000001003B8A40;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 0x7463656E6E6F63;
  *(void *)(inited + 120) = 0xE700000000000000;
  *(void *)(inited + 128) = swift_getKeyPath();
  *(void *)(inited + 136) = 0x6D6D6F43646E6573;
  *(void *)(inited + 144) = 0xEB00000000646E61;
  return sub_1001FA498(inited, &qword_10047B410, &qword_10047B418);
}

void type metadata accessor for MRAnalyticsDeviceComposition(uint64_t a1)
{
}

unint64_t sub_100273008()
{
  unint64_t v0 = sub_1001FA498((uint64_t)_swiftEmptyArrayStorage, &qword_10047B3F8, &qword_10047B3F0);
  uint64_t KeyPath = swift_getKeyPath();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002725D4(0xD000000000000015, 0x80000001003C7D60, KeyPath, isUniquelyReferenced_nonNull_native);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_getKeyPath();
  char v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002725D4(0x6D6D6F43646E6573, 0xEC00000073646E61, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for CreateRemoteHostedEndpointAnalytics()
{
  return self;
}

uint64_t type metadata accessor for CreateHostedEndpointAnalytics()
{
  return self;
}

uint64_t type metadata accessor for CreateEndpointAnalytics()
{
  return self;
}

uint64_t type metadata accessor for CreateOptimizedEndpointAnalytics()
{
  return self;
}

uint64_t type metadata accessor for CreateEndpointWithCurrentTopologyAnalytics()
{
  return self;
}

uint64_t type metadata accessor for SendCommandToNewEndpointWithOutputDevicesRequestAnalytics()
{
  return self;
}

uint64_t type metadata accessor for SendCommandToEndpointsWithOutputDevicesRequestAnalytics()
{
  return self;
}

uint64_t sub_100273208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047B400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100273270(uint64_t a1)
{
  uint64_t v2 = sub_100013A80(&qword_10047AAE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100273360()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction)) {
    return 1;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute)) {
    return 1;
  }
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion);
}

BOOL sub_1002733B8()
{
  return *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType) == 2;
}

id sub_1002733D0(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10000E72C(a1);
}

uint64_t sub_10027346C()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  if (*(unsigned char *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion)) {
    uint64_t v5 = 79;
  }
  else {
    uint64_t v5 = 95;
  }
  unint64_t v6 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v5);
  if (*(unsigned char *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute)) {
    uint64_t v7 = 65;
  }
  else {
    uint64_t v7 = 95;
  }
  unint64_t v8 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v7);
  if (*(unsigned char *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction)) {
    uint64_t v9 = 67;
  }
  else {
    uint64_t v9 = 95;
  }
  unint64_t v10 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v9);
  v11._countAndFlagsBits = 123;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 16509;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source);
  int64_t v15 = *(void **)(v0 + OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source + 8);
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return 60;
}

id sub_100273644()
{
  return sub_100274B00(type metadata accessor for MRDBundleMediaRecommendationEligibility);
}

id sub_10027365C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for MRDMediaBundleManager()) init];
  qword_1004862A0 = (uint64_t)result;
  return result;
}

unint64_t sub_10027368C(uint64_t a1)
{
  uint64_t v2 = sub_100013A80(&qword_10047B5D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100013A80(&qword_10047B5B8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1002764C4(v12, (uint64_t)v5);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100013660(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *unint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for IRMBBundle();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    void v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100273998(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___MRDMediaBundleManager_bundles;
  swift_beginAccess();
  *(void *)uint64_t v3 = a1;
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  uint64_t v4 = (void *)*sub_100015484();
  sub_100013A80(&qword_10047AE40);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1003C58B0;
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 64) = &protocol witness table for Int;
  *(void *)(v5 + 32) = v6;
  id v7 = v4;
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

void (*sub_100273A88(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDMediaBundleManager_bundles;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return sub_100273AF4;
}

void sub_100273AF4(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[3];
    uint64_t v4 = v3[4];
    static os_log_type_t.default.getter();
    uint64_t v6 = (void *)*sub_100015484();
    sub_100013A80(&qword_10047AE40);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1003C58B0;
    uint64_t v8 = *(void *)(*(void *)(v5 + v4) + 16);
    *(void *)(v7 + 56) = &type metadata for Int;
    *(void *)(v7 + 64) = &protocol witness table for Int;
    *(void *)(v7 + 32) = v8;
    id v9 = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }

  free(v3);
}

uint64_t (*sub_100273BE0())()
{
  return j__swift_endAccess;
}

uint64_t sub_100273C3C()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock) + 16);
  os_unfair_lock_lock(v1);
  sub_100013CA8();
  os_unfair_lock_unlock(v1);
  return swift_bridgeObjectRelease();
}

id sub_100273CBC()
{
  v0[OBJC_IVAR___MRDMediaBundleManager_isSupported] = 1;
  uint64_t v1 = OBJC_IVAR___MRDMediaBundleManager_bundles;
  uint64_t v2 = v0;
  *(void *)&v0[v1] = sub_100015650((uint64_t)_swiftEmptyArrayStorage, &qword_10047B5D8);
  uint64_t v3 = OBJC_IVAR___MRDMediaBundleManager_mediaBundlesLock;
  sub_100013A80(&qword_10047CEF0);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)&v2[v3] = v4;
  *(void *)&v2[OBJC_IVAR___MRDMediaBundleManager__mediaBundles] = sub_10027368C((uint64_t)_swiftEmptyArrayStorage);

  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for MRDMediaBundleManager();
  return objc_msgSendSuper2(&v6, "init");
}

id sub_100273DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100013A80(&qword_10047B4F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IRMBBundle();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v2) + 0xD8))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100009A08((uint64_t)v7, &qword_10047B4F0);
    uint64_t v15 = (objc_class *)type metadata accessor for MRDBundleMediaRecommendationEligibility();
    Swift::String v16 = objc_allocWithZone(v15);
    char v17 = &v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_bundleIdentifier];
    void *v17 = a1;
    v17[1] = a2;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForOneTapSuggestion] = 0;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForAutoRoute] = 0;
    v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_isEligibleForCallToAction] = 0;
    *(void *)&v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_mediaType] = 0;
    unint64_t v18 = &v16[OBJC_IVAR___MRDBundleMediaRecommendationEligibility_source];
    *unint64_t v18 = 0x696D206568636163;
    v18[1] = 0xEA00000000007373;
    v22.receiver = v16;
    v22.super_class = v15;
    swift_bridgeObjectRetain();
    return objc_msgSendSuper2(&v22, "init");
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
    id v20 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
    id v19 = sub_10000E72C((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return v19;
}

uint64_t sub_1002740C0()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027419C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100274278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100013A80(&qword_10047B4F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IRMBBundle();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    sub_100009A08(a1, &qword_10047B4F0);
    sub_100274E14(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_100009A08((uint64_t)v10, &qword_10047B4F0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100275A3C((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100274454()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100274740;
  }
  else {
    uint64_t v2 = sub_100274568;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100274568()
{
  uint64_t v15 = v0[14];
  Swift::String v16 = (void *)v0[16];
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v12 = v0[6];
  uint64_t v13 = v0[13];
  uint64_t v14 = *(void (**)(uint64_t))(v2 + 16);
  v14(v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v1);
  uint64_t v6 = *(uint64_t (**)(void *))((swift_isaMask & *v3) + 0xB0);
  swift_bridgeObjectRetain();
  uint64_t v7 = (void (*)(void *, void))v6(v0 + 2);
  sub_100274278(v4, v12, v5);
  v7(v0 + 2, 0);
  ((void (*)(uint64_t, uint64_t, uint64_t))v14)(v15, v13, v1);
  id v8 = objc_allocWithZone((Class)type metadata accessor for MRDBundleMediaRecommendationEligibility());
  id v9 = sub_10000E72C(v15);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(id))v0[1];
  return v10(v9);
}

uint64_t sub_100274740()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100274960(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_10019AAD4;
  return sub_10000C2A0(v5, v7);
}

void *sub_100274A34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = v5(v6);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_100013660(a1, a2), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    id v11 = v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

id sub_100274AE8()
{
  return sub_100274B00(type metadata accessor for MRDMediaBundleManager);
}

id sub_100274B00(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_100274B94(void *a1, void *a2)
{
  objc_super v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1000154D0();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_100274FBC(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_1002751A4();
      BOOL v23 = v28;
    }
    else
    {
      BOOL v23 = (void *)v22;
      id v24 = v8;
    }
    sub_1001F1428((uint64_t)v8, v23);
    *objc_super v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_1000154D0();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *objc_super v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100275E20((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *objc_super v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_100274E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100013660(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000137BC();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for IRMBBundle();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_10027582C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for IRMBBundle();
    unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

Swift::Int sub_100274FBC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100013A80(&qword_10047B5C8);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_1000154D0();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1002751A4();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1002751A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047B5C8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100275444(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for IRMBBundle();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  long long v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100013A80(&qword_10047B5B8);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  os_log_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  unint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    char v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *uint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  char v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

unint64_t sub_10027582C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for IRMBBundle() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100275A3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000137BC();
      goto LABEL_7;
    }
    sub_100275444(v15, a4 & 1);
    unint64_t v26 = sub_100013660(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for IRMBBundle();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_100275BBC(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100275BBC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for IRMBBundle();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

id sub_100275C6C()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047B5B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100275E20(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1002751A4();
  }
  else
  {
    if (v7 > v6)
    {
      sub_100275F98();
      goto LABEL_14;
    }
    sub_100276144();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_1000154D0();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id sub_100275F98()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047B5C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100276144()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100013A80(&qword_10047B5C8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MRDMediaBundleManager()
{
  return self;
}

void type metadata accessor for IRMediaBundleType(uint64_t a1)
{
}

uint64_t sub_1002763FC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000D170;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_10047B568 + dword_10047B568);
  return v6(v2, v3, v4);
}

uint64_t sub_1002764C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047B5D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10027652C(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100276570(a1, v2 + 16);
  return v2;
}

uint64_t sub_100276570(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

id sub_100276588(void *a1)
{
  long long v3 = *(uint64_t (**)(void))((swift_isaMask & *a1) + 0x88);
  uint64_t v4 = v3();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    uint64_t v6 = v1[5];
    uint64_t v7 = v1[6];
    sub_1001BDB5C(v1 + 2, v6);
    if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 8))(v5, v6, v7) & 1) != 0
      && ((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xB8))() & 1) != 0)
    {
      goto LABEL_8;
    }
  }
  uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70))();
  if (v8)
  {
    uint64_t v5 = (void *)v8;
    uint64_t v9 = v1[5];
    uint64_t v10 = v1[6];
    sub_1001BDB5C(v1 + 2, v9);
    if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 8))(v5, v9, v10))
    {
      if ((*(uint64_t (**)(void))((swift_isaMask & *a1) + 0xA0))())
      {
LABEL_8:
        id v11 = (id)*sub_10030BA44();

        return v11;
      }
      type metadata accessor for RouteRecommendationSuppressionPolicy();
      uint64_t v21 = (uint64_t *)sub_10030BBA4();
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      swift_bridgeObjectRetain();
      id v11 = sub_10030BA90(v22, v23);

LABEL_18:
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  uint64_t v12 = v3();
  if (v12)
  {
    unint64_t v13 = (void *)v12;
    uint64_t v15 = v1[5];
    uint64_t v14 = v1[6];
    sub_1001BDB5C(v1 + 2, v15);
    if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 8))(v13, v15, v14))
    {
      type metadata accessor for RouteRecommendationSuppressionPolicy();
      int64_t v16 = (uint64_t *)sub_10030BBB0();
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      swift_bridgeObjectRetain();
      id v11 = sub_10030BA90(v17, v18);

      goto LABEL_18;
    }
  }
  Swift::Int v19 = (void *)*sub_10030BA44();

  return v19;
}

uint64_t sub_10027689C()
{
  sub_10018FD5C(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RouteRecommendationPlayingStateSuppressor()
{
  return self;
}

uint64_t sub_1002768F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10019001C(v0, qword_100481218);
  sub_10018A9A8(v0, (uint64_t)qword_100481218);
  id v1 = (id)*sub_1001A6778();
  return Logger.init(_:)();
}

uint64_t type metadata accessor for NearbySessionsAdvertiserImplementation()
{
  return self;
}

id sub_100276A14(uint64_t a1)
{
  return sub_100284A20(a1, type metadata accessor for NearbySessionsAdvertiser);
}

id sub_100276A74(uint64_t a1)
{
  long long v2 = v1;
  v26[3] = a1;
  v26[1] = swift_getObjectType();
  uint64_t v27 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v27);
  v26[4] = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  _OWORD v26[2] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session] = 0;
  v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser] = 0;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask] = 0;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask] = 0;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask] = 0;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_publicAssertion] = 0;
  uint64_t v10 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer;
  id v11 = v2;
  id v12 = (id)*sub_1001A6778();
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [self bufferWithCapacity:10 category:v12 loggingPrefix:v13];

  *(void *)&v2[v10] = v14;
  swift_unknownObjectWeakAssign();
  sub_10018FE08(0, (unint64_t *)&qword_100479FC0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047A1F8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100013A80(&qword_10047A200);
  sub_1000155BC((unint64_t *)&qword_10047A208, &qword_10047A200);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v11[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  uint64_t v15 = (objc_class *)type metadata accessor for NearbySessionsAdvertiserImplementation();
  v29.receiver = v11;
  v29.super_class = v15;
  id v16 = objc_msgSendSuper2(&v29, "init");
  uint64_t v17 = qword_100481210;
  id v18 = v16;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10018A9A8(v19, (uint64_t)qword_100481218);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v23 = _typeName(_:qualified:)();
    uint64_t v28 = sub_10018A9E0(v23, v24, (uint64_t *)&v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%s] Initialize", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_unknownObjectRelease();
  return v18;
}

uint64_t type metadata accessor for NearbySessionsAdvertiser()
{
  return self;
}

id sub_100276FB4()
{
  id v1 = v0;
  swift_getObjectType();
  if (*(void *)&v0[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask])
  {
    swift_retain();
    sub_100013A80(&qword_100478740);
    Task.cancel()();
    swift_release();
  }
  if (*(void *)&v0[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask])
  {
    swift_retain();
    sub_100013A80(&qword_100478740);
    Task.cancel()();
    swift_release();
  }
  if (*(void *)&v0[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask])
  {
    swift_retain();
    sub_100013A80(&qword_100478740);
    Task.cancel()();
    swift_release();
  }
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10018A9A8(v2, (uint64_t)qword_100481218);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = _typeName(_:qualified:)();
    sub_10018A9E0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s] Deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = (objc_class *)type metadata accessor for NearbySessionsAdvertiserImplementation();
  v11.receiver = v1;
  v11.super_class = v8;
  return objc_msgSendSuper2(&v11, "dealloc");
}

void sub_100277310(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v6 - 8);
  uint64_t v55 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  objc_super v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10018A9A8(v8, (uint64_t)qword_100481218);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_unknownObjectRetain_n();
  NSString v13 = Logger.logObject.getter();
  int v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, (os_log_type_t)v14))
  {
    os_log_t v51 = v13;
    int v53 = v14;
    uint64_t v15 = a3;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v58 = v52;
    *(_DWORD *)uint64_t v16 = 136315650;
    uint64_t v54 = v15;
    uint64_t v17 = _typeName(_:qualified:)();
    uint64_t v56 = sub_10018A9E0(v17, v18, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v56 = sub_10018A9E0(0xD00000000000001DLL, 0x80000001003B9390, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2080;
    if (a1)
    {
      id v19 = [a1 description];
      id v20 = a1;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
    }
    else
    {
      id v20 = 0;
      uint64_t v21 = 7104878;
      unint64_t v23 = 0xE300000000000000;
    }
    uint64_t v56 = sub_10018A9E0(v21, v23, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v24 = v51;
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v53, "[%s] %s - %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    a1 = v20;
    a3 = v54;
  }
  else
  {

    swift_unknownObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v25 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session;
  if (*(void *)(a2
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session))
  {
    sub_10027D5E4();
    uint64_t v26 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask;
    if (*(void *)(a2
                   + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask))
    {
      swift_retain();
      sub_100013A80(&qword_100478740);
      Task.cancel()();
      swift_release();
    }
    *(void *)(a2 + v26) = 0;
    swift_release();
    uint64_t v27 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask;
    if (*(void *)(a2
                   + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask))
    {
      swift_retain();
      sub_100013A80(&qword_100478740);
      Task.cancel()();
      swift_release();
    }
    *(void *)(a2 + v27) = 0;
    swift_release();
    uint64_t v28 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask;
    if (*(void *)(a2
                   + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask))
    {
      swift_retain();
      sub_100013A80(&qword_100478740);
      Task.cancel()();
      swift_release();
    }
    *(void *)(a2 + v28) = 0;
    swift_release();
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = 0;
    swift_release();
  }
  *(void *)(a2 + v25) = a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  objc_super v29 = *(void **)(a2
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  uint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v58 = 91;
  unint64_t v59 = 0xE100000000000000;
  v30._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._object = (void *)0x80000001003B9330;
  v31._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v31);
  if (a1)
  {
    id v32 = [a1 identifier];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v29 logInterpolatedString:v37];

    BOOL v38 = (char *)[(id)swift_unknownObjectRetain() nearbyInvitation];
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = *(void *)&v38[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
      swift_retain();

      uint64_t v41 = type metadata accessor for TaskPriority();
      uint64_t v42 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v55, 1, 1, v41);
      uint64_t v43 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = 0;
      v44[3] = 0;
      v44[4] = v40;
      v44[5] = v43;
      v44[6] = a3;
      swift_retain();
      *(void *)(a2
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_joinRequestTask) = sub_100196EE0(v42, (uint64_t)&unk_10047B988, (uint64_t)v44);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      return;
    }
    uint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v47._countAndFlagsBits = 91;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    v48._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0xD000000000000032;
    v49._object = (void *)0x80000001003B9350;
    String.append(_:)(v49);
    uint64_t v56 = (uint64_t)a1;
    sub_100013A80(&qword_10047B978);
    _print_unlocked<A, B>(_:_:)();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v29 logErrorWithInterpolatedString:v46];
    swift_unknownObjectRelease();
  }
  else
  {
    v45._countAndFlagsBits = 7104878;
    v45._object = (void *)0xE300000000000000;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v29 logInterpolatedString:v46];
  }
}

uint64_t sub_100277B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v6[21] = v8;
  v6[22] = *(void *)(v8 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v9 = sub_100013A80(&qword_10047B680);
  v6[24] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[25] = v10;
  v6[26] = *(void *)(v10 + 64);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  uint64_t v11 = sub_100013A80(&qword_10047B990);
  v6[30] = v11;
  v6[31] = *(void *)(v11 - 8);
  v6[32] = swift_task_alloc();
  uint64_t v12 = sub_100013A80(&qword_10047B998);
  v6[33] = v12;
  v6[34] = *(void *)(v12 - 8);
  v6[35] = swift_task_alloc();
  uint64_t v13 = sub_100013A80(&qword_10047B9A0);
  v6[36] = v13;
  v6[37] = *(void *)(v13 - 8);
  v6[38] = swift_task_alloc();
  return _swift_task_switch(sub_100277DFC, 0, 0);
}

uint64_t sub_100277DFC()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v4 = v0[32];
  uint64_t v3 = v0[33];
  uint64_t v6 = v0[30];
  uint64_t v5 = v0[31];
  dispatch thunk of NearbyInvitation.$pendingMembers.getter();
  sub_1000155BC(&qword_10047B9A8, &qword_10047B998);
  Publisher<>.values.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_beginAccess();
  v0[39] = &_swiftEmptySetSingleton;
  uint64_t v9 = (char *)&dword_10047B9B0 + dword_10047B9B0;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[40] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100277F90;
  return ((uint64_t (*)(void, void, void *))v9)(0, 0, v0 + 11);
}

uint64_t sub_100277F90(uint64_t a1)
{
  *(void *)(*(void *)v1 + 328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100278090, 0, 0);
}

uint64_t sub_100278090()
{
  uint64_t v52 = v0;
  if (v0[41])
  {
    uint64_t v37 = v0[41];
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v1 = v0[39];
      if (*(void *)(v1 + 16) <= *(void *)(v37 + 16) >> 3)
      {
        v51[0] = v37;
        swift_bridgeObjectRetain();
        sub_100284E4C(v1, &qword_10047B9C0, &qword_10047B680, (void (*)(char *))sub_100285F98);
        swift_bridgeObjectRelease();
        uint64_t v2 = (void *)v37;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v2 = sub_100285160(v1, (char *)v37);
        swift_bridgeObjectRelease();
      }
      if (qword_100481210 != -1) {
LABEL_40:
      }
        swift_once();
      uint64_t v5 = type metadata accessor for Logger();
      sub_10018A9A8(v5, (uint64_t)qword_100481218);
      swift_bridgeObjectRetain_n();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.info.getter();
      uint64_t v41 = v2;
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315394;
        uint64_t v9 = _typeName(_:qualified:)();
        v0[13] = sub_10018A9E0(v9, v10, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2080;
        sub_1000155BC(&qword_10047B9B8, &qword_10047B680);
        swift_bridgeObjectRetain();
        uint64_t v11 = Set.description.getter();
        unint64_t v13 = v12;
        swift_bridgeObjectRelease();
        v0[14] = sub_10018A9E0(v11, v13, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] New pending members: %s", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      int64_t v14 = 0;
      uint64_t v16 = v2[7];
      v2 += 7;
      uint64_t v15 = v16;
      uint64_t v17 = -1;
      uint64_t v18 = -1 << *((unsigned char *)v2 - 24);
      if (-v18 < 64) {
        uint64_t v17 = ~(-1 << -(char)v18);
      }
      unint64_t v19 = v17 & v15;
      BOOL v38 = v2;
      int64_t v39 = (unint64_t)(63 - v18) >> 6;
      while (1)
      {
        if (v19)
        {
          uint64_t v48 = (v19 - 1) & v19;
          int64_t v49 = v14;
          unint64_t v20 = __clz(__rbit64(v19)) | (v14 << 6);
          uint64_t v21 = v41;
        }
        else
        {
          int64_t v32 = v14 + 1;
          uint64_t v21 = v41;
          if (__OFADD__(v14, 1))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          if (v32 >= v39) {
            goto LABEL_35;
          }
          unint64_t v33 = v38[v32];
          int64_t v34 = v14 + 1;
          if (!v33)
          {
            int64_t v34 = v14 + 2;
            if (v14 + 2 >= v39) {
              goto LABEL_35;
            }
            unint64_t v33 = v38[v34];
            if (!v33)
            {
              int64_t v34 = v14 + 3;
              if (v14 + 3 >= v39) {
                goto LABEL_35;
              }
              unint64_t v33 = v38[v34];
              if (!v33)
              {
                uint64_t v35 = v14 + 4;
                if (v14 + 4 >= v39)
                {
LABEL_35:
                  swift_release();

                  v0[39] = v37;
                  uint64_t v50 = (char *)&dword_10047B9B0 + dword_10047B9B0;
                  Swift::String v36 = (void *)swift_task_alloc();
                  v0[40] = v36;
                  *Swift::String v36 = v0;
                  v36[1] = sub_100277F90;
                  return ((uint64_t (*)(void, void, void *))v50)(0, 0, v0 + 11);
                }
                unint64_t v33 = v38[v35];
                if (!v33)
                {
                  while (1)
                  {
                    int64_t v34 = v35 + 1;
                    if (__OFADD__(v35, 1)) {
                      goto LABEL_39;
                    }
                    if (v34 >= v39) {
                      goto LABEL_35;
                    }
                    unint64_t v33 = v38[v34];
                    ++v35;
                    if (v33) {
                      goto LABEL_34;
                    }
                  }
                }
                int64_t v34 = v14 + 4;
              }
            }
          }
LABEL_34:
          uint64_t v48 = (v33 - 1) & v33;
          int64_t v49 = v34;
          unint64_t v20 = __clz(__rbit64(v33)) + (v34 << 6);
        }
        uint64_t v23 = v0[28];
        uint64_t v22 = v0[29];
        uint64_t v24 = v0[27];
        uint64_t v26 = v0[24];
        uint64_t v25 = v0[25];
        uint64_t v42 = v0[23];
        uint64_t v46 = v0[22];
        uint64_t v47 = v0[21];
        uint64_t v45 = v0[19];
        uint64_t v43 = v0[20];
        uint64_t v44 = v0[18];
        uint64_t v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
        v27(v22, v21[6] + *(void *)(v25 + 72) * v20, v26);
        uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
        v28(v23, v22, v26);
        v27(v24, v23, v26);
        unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
        uint64_t v30 = swift_allocObject();
        *(void *)(v30 + 16) = Strong;
        v28(v30 + v29, v24, v26);
        v0[6] = sub_1002897D8;
        v0[7] = v30;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_100006760;
        v0[5] = &unk_1004271E8;
        uint64_t v2 = _Block_copy(v0 + 2);
        id v31 = Strong;
        static DispatchQoS.unspecified.getter();
        v0[12] = _swiftEmptyArrayStorage;
        sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100013A80((uint64_t *)&unk_100479AE0);
        sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v2);
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v42, v47);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
        swift_release();
        unint64_t v19 = v48;
        int64_t v14 = v49;
      }
    }
    (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(void, void))(v0[37] + 8))(v0[38], v0[36]);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002788D4(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100013A80(&qword_10047B9A0);
  uint64_t v4 = sub_1000155BC(&qword_10047B9D8, &qword_10047B9A0);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100196B8C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t sub_1002789C0(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100013A80(&qword_10047B938);
  uint64_t v4 = sub_1000155BC(&qword_10047B970, &qword_10047B938);
  uint64_t v5 = (void *)swift_task_alloc();
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100278AAC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t sub_100278AAC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = sub_1002898B4;
  }
  else
  {
    if (v2)
    {
      swift_getObjectType();
      uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v5 = v7;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = sub_1002898B8;
  }
  return _swift_task_switch(v6, v3, v5);
}

uint64_t sub_100278C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100009A08(a1, &qword_100478720);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_100013A80(&qword_10047B8E8);
  return swift_task_create();
}

uint64_t sub_100278E44()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(void *)&v0[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  *(void *)(v10 + 24) = ObjectType;
  aBlock[4] = sub_1002890B8;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_1004270D0;
  uint64_t v11 = _Block_copy(aBlock);
  unint64_t v12 = v0;
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

void sub_100279110(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v7)
  {
    uint64_t v8 = (char *)[(id)swift_unknownObjectRetain() nearbyInvitation];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
      swift_retain();

      uint64_t v11 = *(void **)(a1
                     + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
      v58[0] = 91;
      v58[1] = 0xE100000000000000;
      unint64_t v57 = a2;
      v12._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8285;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._object = (void *)0x80000001003B9270;
      v14._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v14);
      v15._countAndFlagsBits = 2108704;
      v15._object = (void *)0xE300000000000000;
      String.append(_:)(v15);
      id v16 = [v7 description];
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v11 logInterpolatedString:v21];

      *(unsigned char *)(a1
               + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising) = 1;
      if (MSVDeviceIsAudioAccessory())
      {
        id v22 = objc_allocWithZone((Class)type metadata accessor for NearbyInvitationParameters());
        LOBYTE(v58[0]) = 0;
        uint64_t v23 = (void *)NearbyInvitationParameters.init(serviceName:browserType:route:)();
      }
      else
      {
        uint64_t v23 = 0;
      }
      swift_retain();
      [v7 routeType];
      uint64_t v35 = v7;
      sub_100013A80(&qword_10047B8F0);
      swift_allocObject();
      id v56 = v23;
      uint64_t v36 = NearbyInvitationAdvertiser.init(invitation:provider:activityType:route:params:)();
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = v36;
      swift_retain();
      swift_release();
      v58[0] = v36;
      uint64_t v37 = String.init<A>(describing:)();
      uint64_t v39 = v38;
      uint64_t v40 = type metadata accessor for TaskPriority();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
      uint64_t v55 = v41 + 56;
      v54(v6, 1, 1, v40);
      uint64_t v42 = (uint64_t)v6;
      uint64_t v43 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v44 = (void *)swift_allocObject();
      v44[2] = 0;
      v44[3] = 0;
      v44[4] = v43;
      v44[5] = v36;
      v44[6] = v37;
      v44[7] = v39;
      uint64_t v45 = v57;
      v44[8] = v10;
      v44[9] = v45;
      swift_retain();
      swift_retain();
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask) = sub_100196EE0(v42, (uint64_t)&unk_10047B910, (uint64_t)v44);
      swift_release();
      id v46 = [v35 identifier];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;

      v54((char *)v42, 1, 1, v40);
      uint64_t v50 = swift_allocObject();
      swift_unknownObjectWeakInit();
      os_log_t v51 = (void *)swift_allocObject();
      uint64_t v51[2] = 0;
      v51[3] = 0;
      v51[4] = v47;
      v51[5] = v49;
      v51[6] = v36;
      v51[7] = v50;
      v51[8] = v45;
      swift_retain();
      *(void *)(a1
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_invitationTask) = sub_100196EE0(v42, (uint64_t)&unk_10047B920, (uint64_t)v51);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_100481210 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_10018A9A8(v29, (uint64_t)qword_100481218);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        int64_t v32 = (uint8_t *)swift_slowAlloc();
        v58[0] = swift_slowAlloc();
        *(_DWORD *)int64_t v32 = 136315138;
        uint64_t v33 = _typeName(_:qualified:)();
        uint64_t v59 = sub_10018A9E0(v33, v34, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] No invitation to begin advertising.", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    if (qword_100481210 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10018A9A8(v24, (uint64_t)qword_100481218);
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      v58[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v59 = sub_10018A9E0(v27, v28, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v59 = sub_10018A9E0(0xD000000000000012, 0x80000001003B9270, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v57, v25, "[%s] %s - No session to begin advertising.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v52 = v57;
    }
  }
}

uint64_t sub_100279918(unsigned __int8 a1)
{
  if (a1 > 0xBu) {
    return 0;
  }
  else {
    return byte_1003C863A[(char)a1];
  }
}

uint64_t sub_100279940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v10;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  return _swift_task_switch(sub_100279970, 0, 0);
}

uint64_t sub_100279970()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[21] = Strong;
  if (Strong)
  {
    static Task<>.checkCancellation()();
    uint64_t v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.start()
                           + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.start());
    uint64_t v4 = (void *)swift_task_alloc();
    v0[22] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100279AA0;
    return v5();
  }
  else
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_100279AA0()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10027A18C;
  }
  else {
    uint64_t v2 = sub_100279BB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100279BB4()
{
  uint64_t v17 = v0;
  if (static Task<>.isCancelled.getter())
  {
    if (qword_100481210 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10018A9A8(v1, (uint64_t)qword_100481218);
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = (void *)v0[21];
    if (v4)
    {
      unint64_t v6 = v0[18];
      uint64_t v13 = v0[17];
      Swift::String v14 = (void *)v0[21];
      uint64_t v7 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      v0[13] = sub_10018A9E0(v8, v9, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[14] = sub_10018A9E0(v13, v6, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Start advertising task was cancelled before completing with %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    Swift::String v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
  else
  {
    Swift::String v15 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:)
                                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:));
    uint64_t v10 = (void *)swift_task_alloc();
    v0[24] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100279E90;
    return v15(2);
  }
}

uint64_t sub_100279E90(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10027A398;
  }
  else
  {
    *(void *)(v4 + 208) = a1;
    uint64_t v5 = sub_100279FB8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100279FB8()
{
  *(void *)(v0[21]
            + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_publicAssertion) = v0[26];
  swift_release();
  uint64_t v1 = (char *)v0[21];
  uint64_t v2 = (void *)v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  id v5 = *(id *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001003B92C0;
  v7._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v7);
  v0[9] = v3;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 544108320;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v2;
  String.append(_:)(v10);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logInterpolatedString:v11];

  Swift::String v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10027A18C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = (char *)v0[21];
  uint64_t v3 = (void *)v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[17];
  id v6 = *(id *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(57);
  v0[5] = 0;
  v0[6] = 0xE000000000000000;
  v7._countAndFlagsBits = 91;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001003B9290;
  v9._countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v9);
  v0[7] = v4;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 544108320;
  v11._object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v5;
  v12._object = v3;
  String.append(_:)(v12);
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v0[8] = v1;
  sub_100013A80(&qword_100478740);
  _print_unlocked<A, B>(_:_:)();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 logErrorWithInterpolatedString:v14];

  swift_errorRelease();
  Swift::String v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10027A398()
{
  uint64_t v27 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10018A9A8(v1, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = v0[18];
    uint64_t v24 = v0[17];
    uint64_t v5 = swift_slowAlloc();
    id v6 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    uint64_t v7 = _typeName(_:qualified:)();
    v0[10] = sub_10018A9E0(v7, v8, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = sub_10018A9E0(v24, v4, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 22) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v6 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Failed to make public advertiser assertion for %s: %@", (uint8_t *)v5, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  Swift::String v10 = (char *)v0[21];
  Swift::String v11 = (void *)v0[18];
  uint64_t v12 = v0[19];
  uint64_t v13 = v0[17];
  NSString v14 = *(void **)&v10[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  id v15 = v14;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  uint64_t v25 = 91;
  unint64_t v26 = 0xE100000000000000;
  v16._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000001003B92C0;
  v17._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v17);
  v0[9] = v12;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 544108320;
  v19._object = (void *)0xE400000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v13;
  v20._object = v11;
  String.append(_:)(v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 logInterpolatedString:v21];

  id v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10027A7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  uint64_t v9 = sub_100013A80(&qword_10047B6B0);
  v8[15] = v9;
  v8[16] = *(void *)(v9 - 8);
  v8[17] = swift_task_alloc();
  uint64_t v10 = sub_100013A80(&qword_10047B928);
  v8[18] = v10;
  v8[19] = *(void *)(v10 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v11 = sub_100013A80(&qword_10047B930);
  v8[21] = v11;
  v8[22] = *(void *)(v11 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v12 = sub_100013A80(&qword_10047B938);
  v8[24] = v12;
  v8[25] = *(void *)(v12 - 8);
  v8[26] = swift_task_alloc();
  return _swift_task_switch(sub_10027A9D0, 0, 0);
}

uint64_t sub_10027A9D0()
{
  Swift::String v19 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[27] = sub_10018A9A8(v1, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v17 = v0[10];
    unint64_t v4 = v0[11];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[8] = sub_10018A9E0(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10018A9E0(v17, v4, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Started observing invitations for: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = v0[22];
  uint64_t v9 = v0[23];
  uint64_t v11 = v0[20];
  uint64_t v10 = v0[21];
  uint64_t v13 = v0[18];
  uint64_t v12 = v0[19];
  dispatch thunk of NearbyInvitationAdvertiser.$pendingMembers.getter();
  sub_1000155BC(&qword_10047B940, &qword_10047B930);
  Publisher<>.values.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_beginAccess();
  v0[28] = &_swiftEmptySetSingleton;
  Swift::String v16 = (char *)&dword_10047B948 + dword_10047B948;
  uint64_t v14 = (void *)swift_task_alloc();
  v0[29] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10027AD24;
  return ((uint64_t (*)(void, void, void *))v16)(0, 0, v0 + 5);
}

uint64_t sub_10027AD24(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 240) = a1;
  *(void *)(v3 + 248) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10027AE24, 0, 0);
}

void sub_10027AE24()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[30];
  if (!v1)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (void (*)(void))v0[1];
    goto LABEL_6;
  }
  uint64_t v2 = v0[31];
  static Task<>.checkCancellation()();
  if (v2)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (void (*)(void))v0[1];
LABEL_6:
    v3();
    return;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v4 = v0[28];
  if (*(void *)(v4 + 16) <= *(void *)(v1 + 16) >> 3)
  {
    v32[0] = v1;
    swift_bridgeObjectRetain();
    sub_100284E4C(v4, &qword_10047B958, &qword_10047B6B0, (void (*)(char *))sub_100286294);
    swift_bridgeObjectRelease();
    uint64_t v5 = (char *)v1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_10028587C(v4, (char *)v1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  uint64_t v29 = v1;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v32[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = _typeName(_:qualified:)();
    v0[6] = sub_10018A9E0(v9, v10, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    sub_1000155BC(&qword_10047B950, &qword_10047B6B0);
    swift_bridgeObjectRetain();
    uint64_t v11 = Set.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[7] = sub_10018A9E0(v11, v13, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] New connection requests: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  int64_t v14 = 0;
  id v15 = v5 + 56;
  uint64_t v16 = -1;
  uint64_t v17 = -1 << v5[32];
  if (-v17 < 64) {
    uint64_t v16 = ~(-1 << -(char)v17);
  }
  unint64_t v18 = v16 & *((void *)v5 + 7);
  int64_t v19 = (unint64_t)(63 - v17) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    int64_t v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v25 >= v19) {
      goto LABEL_37;
    }
    unint64_t v26 = *(void *)&v15[8 * v25];
    ++v14;
    if (!v26)
    {
      int64_t v14 = v25 + 1;
      if (v25 + 1 >= v19) {
        goto LABEL_37;
      }
      unint64_t v26 = *(void *)&v15[8 * v14];
      if (!v26)
      {
        int64_t v14 = v25 + 2;
        if (v25 + 2 >= v19) {
          goto LABEL_37;
        }
        unint64_t v26 = *(void *)&v15[8 * v14];
        if (!v26) {
          break;
        }
      }
    }
LABEL_36:
    unint64_t v18 = (v26 - 1) & v26;
    unint64_t v21 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_21:
    uint64_t v22 = v0[16];
    uint64_t v23 = v0[17];
    uint64_t v24 = v0[15];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16))(v23, *((void *)v5 + 6) + *(void *)(v22 + 72) * v21, v24);
    sub_10027F894(v23);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
  }
  int64_t v27 = v25 + 3;
  if (v27 < v19)
  {
    unint64_t v26 = *(void *)&v15[8 * v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v14 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_41;
        }
        if (v14 >= v19) {
          goto LABEL_37;
        }
        unint64_t v26 = *(void *)&v15[8 * v14];
        ++v27;
        if (v26) {
          goto LABEL_36;
        }
      }
    }
    int64_t v14 = v27;
    goto LABEL_36;
  }
LABEL_37:
  swift_release();

  v0[28] = v29;
  os_log_type_t v31 = (void (*)(uint64_t, uint64_t))((char *)&dword_10047B948 + dword_10047B948);
  uint64_t v28 = (void *)swift_task_alloc();
  v0[29] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10027AD24;
  v31(0, 0);
}

uint64_t sub_10027B420(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  unint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v1;
  v12[4] = ObjectType;
  aBlock[4] = sub_100288F68;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100427058;
  unint64_t v13 = _Block_copy(aBlock);
  id v14 = a1;
  id v15 = v1;
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

void sub_10027B6F8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 invitationData];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    id v14 = *(void **)(a2
                   + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
    v34[0] = 91;
    v34[1] = 0xE100000000000000;
    v15._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 8285;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._object = (void *)0x80000001003B91E0;
    v17._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v17);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 logInterpolatedString:v18];

    *(unsigned char *)(a2
             + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising) = 1;
    sub_100013A80(&qword_10047B8F0);
    swift_allocObject();
    sub_10018FE44(v11, v13);
    uint64_t v24 = NearbyInvitationAdvertiser.init(remoteInvitationData:provider:activityType:route:params:)();
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser) = v24;
    swift_retain();
    swift_release();
    v34[0] = v24;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = v26;
    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 1, 1, v28);
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v29;
    v30[5] = v24;
    v30[6] = v25;
    v30[7] = v27;
    v30[8] = a3;
    swift_retain();
    *(void *)(a2
              + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask) = sub_100196EE0((uint64_t)v8, (uint64_t)&unk_10047B900, (uint64_t)v30);
    swift_release();
    sub_10018FE9C(v11, v13);
    swift_release();
  }
  else
  {
    if (qword_100481210 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10018A9A8(v19, (uint64_t)qword_100481218);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v22 = _typeName(_:qualified:)();
      uint64_t v35 = sub_10018A9E0(v22, v23, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v35 = sub_10018A9E0(0xD00000000000001CLL, 0x80000001003B91E0, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v20, "[%s] %s - No remote invitation to begin advertising.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      os_log_type_t v31 = v33;
    }
  }
}

uint64_t sub_10027BD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a7;
  v8[14] = a8;
  v8[11] = a5;
  v8[12] = a6;
  v8[10] = a4;
  return _swift_task_switch(sub_10027BDC0, 0, 0);
}

uint64_t sub_10027BDC0()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[15] = Strong;
  if (Strong)
  {
    static Task<>.checkCancellation()();
    uint64_t v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.start()
                           + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.start());
    uint64_t v4 = (void *)swift_task_alloc();
    v0[16] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10027BEF0;
    return v5();
  }
  else
  {
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
}

uint64_t sub_10027BEF0()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10027C320;
  }
  else {
    uint64_t v2 = sub_10027C004;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027C004()
{
  unint64_t v23 = v0;
  if (static Task<>.isCancelled.getter())
  {
    if (qword_100481210 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10018A9A8(v1, (uint64_t)qword_100481218);
    swift_bridgeObjectRetain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = (void *)v0[15];
    if (v4)
    {
      unint64_t v6 = v0[13];
      uint64_t v20 = v0[12];
      uint64_t v21 = (void *)v0[15];
      uint64_t v7 = swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      uint64_t v8 = _typeName(_:qualified:)();
      v0[8] = sub_10018A9E0(v8, v9, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[9] = sub_10018A9E0(v20, v6, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Start advertising task was cancelled before completing with %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v10 = (char *)v0[15];
    uint64_t v12 = v0[12];
    uint64_t v11 = (void *)v0[13];
    id v13 = *(id *)&v10[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v22[0] = 91;
    v22[1] = 0xE100000000000000;
    v14._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x80000001003B9240;
    v15._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = v12;
    v16._object = v11;
    String.append(_:)(v16);
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 logInterpolatedString:v17];
  }
  NSString v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10027C320()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = (char *)v0[15];
  uint64_t v4 = v0[12];
  os_log_type_t v3 = (void *)v0[13];
  id v5 = *(id *)&v2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  _StringGuts.grow(_:)(60);
  v0[5] = 0;
  v0[6] = 0xE000000000000000;
  v6._countAndFlagsBits = 91;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001003B9200;
  v8._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v4;
  v9._object = v3;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v0[7] = v1;
  sub_100013A80(&qword_100478740);
  _print_unlocked<A, B>(_:_:)();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 logErrorWithInterpolatedString:v11];

  swift_errorRelease();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_10027C514()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v5, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  v14[4] = v10;
  v14[5] = v12;
  v14[6] = v1;
  v14[7] = ObjectType;
  swift_bridgeObjectRetain();
  id v15 = v1;
  uint64_t v16 = sub_100278C3C((uint64_t)v5, (uint64_t)&unk_10047B8D0, (uint64_t)v14);
  NSString v17 = (void *)swift_allocObject();
  void v17[2] = v10;
  v17[3] = v12;
  id v17[4] = v16;
  v17[5] = ObjectType;
  id v18 = objc_allocWithZone((Class)MRGroupSessionAssertion);
  aBlock[4] = sub_100288E10;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100426FE0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v20 = [v18 initWithCancellationHandler:v19];
  _Block_release(v19);
  if (v20) {
    swift_release();
  }
  else {
    __break(1u);
  }
}

uint64_t sub_10027C7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[4] = a1;
  return _swift_task_switch(sub_10027C7E8, 0, 0);
}

uint64_t sub_10027C7E8()
{
  uint64_t v15 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10018A9A8(v1, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 40);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    *(void *)(v0 + 16) = sub_10018A9E0(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_10018A9E0(v12, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Asserting public advertisement with ID: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = *(void *)(*(void *)(v0 + 56)
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser);
  *(void *)(v0 + 72) = v8;
  if (v8)
  {
    uint64_t v13 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:)
                                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.assertPublic(rotations:));
    swift_retain();
    Swift::String v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v9;
    *Swift::String v9 = v0;
    v9[1] = sub_10027CACC;
    return v13(1);
  }
  else
  {
    **(void **)(v0 + 32) = 0;
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_10027CACC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10027CC20;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 96) = a1;
    uint64_t v5 = sub_10027CBFC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10027CBFC()
{
  **(void **)(v0 + 32) = *(void *)(v0 + 96);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027CC20()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027CC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100196EE0((uint64_t)v10, (uint64_t)&unk_10047B8E0, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10027CDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  return _swift_task_switch(sub_10027CDC8, 0, 0);
}

uint64_t sub_10027CDC8()
{
  uint64_t v15 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10018A9A8(v1, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v13 = v0[5];
    unint64_t v4 = v0[6];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[3] = sub_10018A9E0(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[4] = sub_10018A9E0(v13, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "[%s] Cancelling public advertisement assertion with ID: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  uint64_t v9 = sub_100013A80(&qword_10047B8E8);
  uint64_t v10 = sub_100013A80(&qword_100478740);
  *uint64_t v8 = v0;
  v8[1] = sub_10027D070;
  uint64_t v11 = v0[7];
  return Task.value.getter(v0 + 2, v11, v9, v10, &protocol self-conformance witness table for Error);
}

uint64_t sub_10027D070()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10027D1F8;
  }
  else {
    uint64_t v2 = sub_10027D184;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027D184()
{
  if (*(void *)(v0 + 16))
  {
    AnyCancellable.cancel()();
    swift_release();
  }
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10027D1F8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027D254()
{
  return sub_10027D2EC((uint64_t)&unk_100426F50, (uint64_t)sub_100288C9C, (uint64_t)&unk_100426F68);
}

uint64_t sub_10027D2C4()
{
  return sub_10027D2EC((uint64_t)&unk_100426F00, (uint64_t)sub_100288C78, (uint64_t)&unk_100426F18);
}

uint64_t sub_10027D2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_10027D5E4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session;
  uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  uint64_t v15 = &unk_100481000;
  if (!v14)
  {
LABEL_13:
    if (v15[66] == -1)
    {
LABEL_14:
      uint64_t v48 = type metadata accessor for Logger();
      sub_10018A9A8(v48, (uint64_t)qword_100481218);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        os_log_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        *(_DWORD *)os_log_t v51 = 136315138;
        uint64_t v52 = _typeName(_:qualified:)();
        uint64_t v60 = sub_10018A9E0(v52, v53, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "[%s] No invitation to end advertising.", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return;
    }
LABEL_19:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v16 = qword_100481210;
  swift_unknownObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10018A9A8(v17, (uint64_t)qword_100481218);
  swift_unknownObjectRetain_n();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v57 = v13;
    uint64_t v22 = v21;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v58 = v56;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v23 = _typeName(_:qualified:)();
    int v55 = v20;
    uint64_t v60 = sub_10018A9E0(v23, v24, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v60 = sub_10018A9E0(0xD000000000000017, 0x80000001003B9160, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 22) = 2080;
    v54[1] = v22 + 24;
    id v25 = [v14 description];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v1;
    uint64_t v28 = v5;
    uint64_t v29 = ObjectType;
    unint64_t v31 = v30;

    uint64_t v32 = v26;
    uint64_t v15 = (void *)&unk_100481000;
    uint64_t v60 = sub_10018A9E0(v32, v31, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    uint64_t ObjectType = v29;
    uint64_t v5 = v28;
    uint64_t v1 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v55, "[%s] %s - %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v33 = v57;
    swift_slowDealloc();
    swift_unknownObjectRelease();

    uint64_t v34 = *(void **)&v27[v33];
    if (!v34) {
      goto LABEL_13;
    }
  }
  else
  {

    swift_unknownObjectRelease_n();
    uint64_t v34 = *(void **)&v1[v13];
    if (!v34) {
      goto LABEL_13;
    }
  }
  uint64_t v35 = (char *)[v34 nearbyInvitation];
  if (!v35) {
    goto LABEL_13;
  }
  uint64_t v36 = v35;
  uint64_t v37 = *(void *)&v35[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
  swift_retain();

  uint64_t v38 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v58 = 91;
  unint64_t v59 = 0xE100000000000000;
  v39._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 0xD00000000000001BLL;
  v40._object = (void *)0x80000001003B9140;
  String.append(_:)(v40);
  uint64_t v60 = v37;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v38 logInterpolatedString:v42];

  v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
  uint64_t v43 = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask];
  if (v43
    && (uint64_t v44 = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser]) != 0)
  {
    uint64_t v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v5, 1, 1, v45);
    id v46 = (void *)swift_allocObject();
    _OWORD v46[2] = 0;
    v46[3] = 0;
    v46[4] = v44;
    v46[5] = v43;
    v46[6] = v1;
    v46[7] = v37;
    v46[8] = ObjectType;
    swift_retain();
    swift_retain();
    uint64_t v47 = v1;
    sub_10018A588((uint64_t)v5, (uint64_t)&unk_10047B8C0, (uint64_t)v46);
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_10027DD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  return _swift_task_switch(sub_10027DD48, 0, 0);
}

uint64_t sub_10027DD48()
{
  uint64_t v15 = v0;
  v0[4] = v0[12];
  uint64_t v1 = String.init<A>(describing:)();
  unint64_t v3 = v2;
  v0[17] = v1;
  v0[18] = v2;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  v0[19] = sub_10018A9A8(v4, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    v0[10] = sub_10018A9E0(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = sub_10018A9E0(v1, v3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Waiting for existing advertise task on %s to finish", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = (void *)swift_task_alloc();
  v0[20] = v10;
  uint64_t v11 = sub_100013A80(&qword_100478740);
  v0[21] = v11;
  *uint64_t v10 = v0;
  v10[1] = sub_10027E000;
  uint64_t v12 = v0[13];
  return Task.value.getter(v11, v12, (char *)&type metadata for () + 8, v11, &protocol self-conformance witness table for Error);
}

uint64_t sub_10027E000()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_10027E5F8;
  }
  else
  {
    uint64_t v1 = sub_10027E118;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10027E118()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[17];
    unint64_t v3 = v0[18];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[8] = sub_10018A9E0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10018A9E0(v4, v3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Stopping existing advertisement on %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop()
                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[22] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10027E338;
  return v10();
}

uint64_t sub_10027E338()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10027E820;
  }
  else {
    os_log_type_t v2 = sub_10027E44C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027E44C()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = (void *)v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = *(void **)(v0[14]
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001003B91B0;
  v6._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v6);
  v0[7] = v3;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 544108320;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v2;
  v9._object = v1;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, "logInterpolatedString:", v10, 91);

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10027E5F8()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[17];
    unint64_t v3 = v0[18];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[8] = sub_10018A9E0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10018A9E0(v4, v3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Stopping existing advertisement on %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  NSString v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop()
                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop());
  Swift::String v8 = (void *)swift_task_alloc();
  v0[22] = v8;
  *Swift::String v8 = v0;
  v8[1] = sub_10027E338;
  return v10();
}

uint64_t sub_10027E820()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[14];
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(v3
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(51);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v5._countAndFlagsBits = 91;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001003B9180;
  v7._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v7);
  v0[5] = v2;
  sub_100013A80(&qword_100478EC0);
  sub_1000155BC(&qword_10047B8B0, &qword_100478EC0);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 2108704;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  v0[6] = v1;
  _print_unlocked<A, B>(_:_:)();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 logErrorWithInterpolatedString:v10];

  swift_errorRelease();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

void sub_10027E9F0()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v3 - 8);
  Swift::String v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  NSString v10 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  *Swift::String v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v10)
  {
    uint64_t v12 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer];
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t v21 = 91;
    unint64_t v22 = 0xE100000000000000;
    v13._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x80000001003B90B0;
    v14._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v14);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v12 logInterpolatedString:v15];

    v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising] = 0;
    uint64_t v16 = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertisingTask];
    if (v16)
    {
      uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_advertiser];
      if (v17)
      {
        uint64_t v18 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 1, 1, v18);
        os_log_type_t v19 = (void *)swift_allocObject();
        void v19[2] = 0;
        void v19[3] = 0;
        v19[4] = v17;
        v19[5] = v16;
        v19[6] = v1;
        v19[7] = ObjectType;
        swift_retain();
        swift_retain();
        int v20 = v1;
        sub_10018A588((uint64_t)v5, (uint64_t)&unk_10047B8A8, (uint64_t)v19);
        swift_release();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10027ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[12] = a6;
  v7[13] = a7;
  v7[10] = a4;
  v7[11] = a5;
  return _swift_task_switch(sub_10027ECEC, 0, 0);
}

uint64_t sub_10027ECEC()
{
  NSString v15 = v0;
  v0[4] = v0[10];
  uint64_t v1 = String.init<A>(describing:)();
  unint64_t v3 = v2;
  v0[14] = v1;
  v0[15] = v2;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  v0[16] = sub_10018A9A8(v4, (uint64_t)qword_100481218);
  swift_bridgeObjectRetain_n();
  Swift::String v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)();
    v0[8] = sub_10018A9E0(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[9] = sub_10018A9E0(v1, v3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Waiting for existing advertise task on %s to finish", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  NSString v10 = (void *)swift_task_alloc();
  v0[17] = v10;
  uint64_t v11 = sub_100013A80(&qword_100478740);
  v0[18] = v11;
  *NSString v10 = v0;
  v10[1] = sub_10027EFA4;
  uint64_t v12 = v0[11];
  return Task.value.getter(v11, v12, (char *)&type metadata for () + 8, v11, &protocol self-conformance witness table for Error);
}

uint64_t sub_10027EFA4()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_10027F51C;
  }
  else
  {
    uint64_t v1 = sub_10027F0BC;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_10027F0BC()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[14];
    unint64_t v3 = v0[15];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[6] = sub_10018A9E0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10018A9E0(v4, v3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Stopping existing advertisement on %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  NSString v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop()
                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10027F2DC;
  return v10();
}

uint64_t sub_10027F2DC()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10027F744;
  }
  else {
    os_log_type_t v2 = sub_10027F3F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027F3F0()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = (void *)v0[15];
  unint64_t v3 = *(void **)(v0[12]
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001003B9110;
  v5._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v1;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logInterpolatedString:v7];

  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10027F51C()
{
  uint64_t v12 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[14];
    unint64_t v3 = v0[15];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    v0[6] = sub_10018A9E0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10018A9E0(v4, v3, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Stopping existing advertisement on %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop()
                          + async function pointer to dispatch thunk of NearbyInvitationAdvertiser.stop());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[19] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10027F2DC;
  return v10();
}

uint64_t sub_10027F744()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[12];
  swift_bridgeObjectRelease();
  unint64_t v3 = *(void **)(v2
                + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer);
  _StringGuts.grow(_:)(54);
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v4._countAndFlagsBits = 91;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001003B90D0;
  v6._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v6);
  v0[5] = v1;
  _print_unlocked<A, B>(_:_:)();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 logErrorWithInterpolatedString:v7];

  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10027F894(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  Swift::String v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v5 - 8);
  uint64_t v24 = v5;
  __chkstk_darwin(v5);
  NSString v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100013A80(&qword_10047B6B0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v12, v11, v8);
  *(void *)(v14 + v13) = v1;
  *(void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = sub_100288198;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100426CE8;
  NSString v15 = _Block_copy(aBlock);
  uint64_t v16 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  uint64_t v17 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
  return swift_release();
}

void sub_10027FC4C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_10047B6B0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v57 - v11;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_10018A9A8(v13, (uint64_t)qword_100481218);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v67 = v7 + 16;
  v66(v12, a1, v6);
  uint64_t v65 = v14;
  NSString v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v64 = a3;
  uint64_t v68 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v63 = a2;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    __int16 v62 = v10;
    uint64_t aBlock = v20;
    *(_DWORD *)uint64_t v19 = 136315650;
    uint64_t v21 = _typeName(_:qualified:)();
    uint64_t v75 = sub_10018A9E0(v21, v22, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v75 = sub_10018A9E0(0xD00000000000001BLL, 0x80000001003B9090, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 22) = 2080;
    sub_1000155BC(&qword_10047B860, &qword_10047B6B0);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v75 = sub_10018A9E0(v23, v24, &aBlock);
    a1 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] %s - %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    uint64_t v10 = v62;
    swift_slowDealloc();
    a2 = v63;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  uint64_t v25 = *(void *)&a2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  if (v25)
  {
    uint64_t v26 = (void *)kMREventGroupSessionPreLMIRequestReceived;
    uint64_t v73 = sub_1002804E8;
    uint64_t v74 = 0;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v70 = 1107296256;
    uint64_t v71 = sub_10019A7F4;
    BOOL v72 = &unk_100426D10;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    id v28 = v26;
    MRAnalyticsSendEvent();
    _Block_release(v27);

    v66(v10, a1, v6);
    id v29 = objc_allocWithZone((Class)type metadata accessor for NearbySessionsPendingParticipant());
    id v30 = sub_1002847D4((uint64_t)v10);
    id v31 = [objc_allocWithZone((Class)MRDGroupSessionInvitationRequest) initWithSession:v25 pendingParticipant:v30];
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    id v60 = v30;
    if (v34)
    {
      uint64_t v35 = swift_slowAlloc();
      __int16 v62 = v10;
      uint64_t v36 = v35;
      uint64_t v37 = swift_slowAlloc();
      uint64_t v63 = a2;
      uint64_t v58 = (void *)v37;
      uint64_t v59 = swift_slowAlloc();
      uint64_t aBlock = v59;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v65 = v7;
      uint64_t v38 = _typeName(_:qualified:)();
      uint64_t v75 = sub_10018A9E0(v38, v39, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v75 = (uint64_t)v31;
      id v40 = v31;
      uint64_t v7 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v58 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%s] Parsed invitation request: - %@", (uint8_t *)v36, 0x16u);
      sub_100013A80((uint64_t *)&unk_10047B850);
      swift_arrayDestroy();
      a2 = v63;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = v62;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v47 = (void *)Strong;
      v66(v10, v68, v6);
      uint64_t v48 = v6;
      unint64_t v49 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v50 = v7;
      unint64_t v51 = (v61 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v52 = swift_allocObject();
      unint64_t v53 = v10;
      uint64_t v54 = v52;
      *(void *)(v52 + 16) = a2;
      *(void *)(v52 + 24) = v25;
      (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v52 + v49, v53, v48);
      *(void *)(v54 + v51) = v64;
      uint64_t v73 = sub_100288318;
      uint64_t v74 = v54;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v70 = 1107296256;
      uint64_t v71 = sub_10023D730;
      BOOL v72 = &unk_100426D60;
      int v55 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      uint64_t v56 = a2;
      swift_release();
      [v47 advertiser:v56 didReceiveInvitationRequest:v31 accessHandler:v55];
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      _Block_release(v55);
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
  else
  {
    Swift::String v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      uint64_t v44 = _typeName(_:qualified:)();
      uint64_t v75 = sub_10018A9E0(v44, v45, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%s] Got connection request without active session. Ignoring", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

unint64_t sub_1002804E8()
{
  return sub_10019A6D8((uint64_t)_swiftEmptyArrayStorage);
}

id sub_1002804F4(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1002847D4(a1);
}

uint64_t sub_100280528(int a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  int v26 = a1;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v29 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100013A80(&qword_10047B6B0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  NSString v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = *(void *)&a2[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = v16 + v14;
  unint64_t v18 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v19 + v16, v15, v12);
  *(unsigned char *)(v19 + v17) = v26;
  *(void *)(v18 + v19 + 8) = v27;
  aBlock[4] = sub_10028849C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100426DB0;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = a2;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  BOOL v34 = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  uint64_t v23 = v29;
  uint64_t v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v23, v22);
  (*(void (**)(unsigned char *, uint64_t))(v31 + 8))(v11, v32);
  return swift_release();
}

void sub_1002808F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = sub_100013A80(&qword_10047B6B0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&aBlock[-1] - v15;
  uint64_t v17 = *(void *)(a1
                  + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v17) {
    BOOL v18 = v17 == a2;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v27 = v11 + 16;
    v28((char *)&aBlock[-1] - v15, a3, v10);
    unint64_t v29 = (*(unsigned __int8 *)(v27 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64);
    uint64_t v30 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 16))(v30 + v29, v16, v10);
    if (a4)
    {
      uint64_t v31 = &unk_10047B880;
      uint64_t v32 = v30;
      uint64_t v33 = 0x65766F72707061;
      uint64_t v34 = 0xE700000000000000;
    }
    else
    {
      uint64_t v31 = &unk_10047B870;
      uint64_t v32 = v30;
      uint64_t v33 = 0x7463656A6572;
      uint64_t v34 = 0xE600000000000000;
    }
    sub_100280DBC((uint64_t)v31, v32, v33, v34, a3, a5);
    swift_release();
    uint64_t v35 = (void *)kMREventGroupSessionPreLMIResponseSent;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = a4 & 1;
    aBlock[4] = (uint64_t)sub_100288620;
    aBlock[5] = v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_10019A7F4;
    aBlock[3] = (uint64_t)&unk_100426E28;
    uint64_t v37 = _Block_copy(aBlock);
    id v38 = v35;
    swift_release();
    MRAnalyticsSendEvent();
    _Block_release(v37);
  }
  else
  {
    if (qword_100481210 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10018A9A8(v19, (uint64_t)qword_100481218);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3, v10);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v23 = _typeName(_:qualified:)();
      uint64_t v41 = sub_10018A9E0(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      sub_1000155BC(&qword_10047B860, &qword_10047B6B0);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v41 = sub_10018A9E0(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%s] Attempted to approve connection request: %s but the requesting session is no longer active", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
}

uint64_t sub_100280DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a1;
  uint64_t v25 = a6;
  uint64_t v23 = a3;
  uint64_t v9 = sub_100013A80(&qword_10047B6B0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a5, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = v23;
  *((void *)v19 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v19[v17], v12, v9);
  uint64_t v20 = &v19[v18];
  *(void *)uint64_t v20 = v24;
  *((void *)v20 + 1) = a2;
  *(void *)&v19[(v18 + 23) & 0xFFFFFFFFFFFFFFF8] = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10018A588((uint64_t)v15, (uint64_t)&unk_10047B890, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100280FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = a8;
  v8[14] = v12;
  v8[11] = a6;
  v8[12] = a7;
  v8[9] = a4;
  v8[10] = a5;
  uint64_t v9 = sub_100013A80(&qword_10047B6B0);
  v8[15] = v9;
  v8[16] = *(void *)(v9 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1002810C4, 0, 0);
}

uint64_t sub_1002810C4()
{
  uint64_t v27 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[11];
  uint64_t v5 = type metadata accessor for Logger();
  v0[19] = sub_10018A9A8(v5, (uint64_t)qword_100481218);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[20] = v6;
  v0[21] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[18];
  uint64_t v12 = v0[15];
  uint64_t v11 = v0[16];
  if (v9)
  {
    uint64_t v22 = v0[9];
    unint64_t v13 = v0[10];
    uint64_t v23 = v0[15];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    os_log_type_t type = v8;
    uint64_t v15 = _typeName(_:qualified:)();
    v0[6] = sub_10018A9E0(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[7] = sub_10018A9E0(v22, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2080;
    sub_1000155BC(&qword_10047B860, &qword_10047B6B0);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_10018A9E0(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v10, v23);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "[%s] %s connection request: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v19(v10, v12);
  }

  v0[22] = v19;
  uint64_t v25 = (uint64_t (*)(void))(v0[12] + *(int *)v0[12]);
  uint64_t v20 = (void *)swift_task_alloc();
  v0[23] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10028145C;
  return v25();
}

uint64_t sub_10028145C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002815A0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1002815A0()
{
  uint64_t v21 = v0;
  (*(void (**)(void, void, void))(v0 + 160))(*(void *)(v0 + 136), *(void *)(v0 + 88), *(void *)(v0 + 120));
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 136);
    unint64_t v3 = *(void *)(v0 + 80);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v4 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315906;
    uint64_t v5 = _typeName(_:qualified:)();
    *(void *)(v0 + 16) = sub_10018A9E0(v5, v6, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = sub_10018A9E0(v15, v3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 22) = 2080;
    sub_1000155BC(&qword_10047B860, &qword_10047B6B0);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_10018A9E0(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18(v17, v16);
    *(_WORD *)(v4 + 32) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Failed to %s: %s - error: %@", (uint8_t *)v4, 0x2Au);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v12 = *(void *)(v0 + 120);
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    v10(v11, v12);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100281954()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100013A80(&qword_10047B6B0);
  void *v1 = v0;
  v1[1] = sub_100013F84;
  return NearbyInvitationAdvertiser.PendingMember.approve()(v2);
}

uint64_t sub_1002819F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100013A80(&qword_10047B6B0);
  void *v1 = v0;
  v1[1] = sub_100013F84;
  return NearbyInvitationAdvertiser.PendingMember.reject()(v2);
}

void sub_100281A9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v75 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_100013A80(&qword_10047B680);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  BOOL v72 = (char *)&v67 - v9;
  uint64_t v69 = v10;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)(v2
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v19)
  {
    uint64_t v74 = v2;
    if (qword_100481210 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_10018A9A8(v20, (uint64_t)qword_100481218);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v22(v12, v75, v4);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v71 = ObjectType;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v67 = v21;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v73 = v5;
    aBlock[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v29 = _typeName(_:qualified:)();
    uint64_t v77 = sub_10018A9E0(v29, v30, aBlock);
    uint64_t v68 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    sub_1000155BC(&qword_10047B800, &qword_10047B680);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_10018A9E0(v31, v32, aBlock);
    uint64_t v22 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(char *, uint64_t))(v73 + 8);
    v33(v12, v4);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%s] Got join request: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    uint64_t v5 = v73;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
    v33(v12, v4);
  }

  uint64_t v34 = *(void *)(v74
                  + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (v34)
  {
    id v35 = [(id)swift_unknownObjectRetain() identifier];
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    sub_10018FE08(0, (unint64_t *)&unk_10047B808);
    uint64_t v38 = (uint64_t)v72;
    v22(v72, v75, v4);
    id v39 = sub_1002823F0(v38);
    if (v39)
    {
      id v40 = v39;
      uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v70 = Strong;
        os_log_type_t v42 = v22;
        uint64_t v43 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v44 = v72;
        v42(v72, v75, v4);
        unint64_t v45 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        unint64_t v46 = (v69 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v75 = v37;
        unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v48 = swift_allocObject();
        uint64_t v49 = v4;
        uint64_t v50 = v48;
        *(void *)(v48 + 16) = v43;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v48 + v45, v44, v49);
        *(void *)(v50 + v46) = v34;
        unint64_t v51 = (uint64_t *)(v50 + v47);
        uint64_t v52 = v75;
        uint64_t *v51 = v73;
        v51[1] = v52;
        *(void *)(v50 + ((v47 + 23) & 0xFFFFFFFFFFFFFFF8)) = v71;
        aBlock[4] = (uint64_t)sub_100287AA8;
        aBlock[5] = v50;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = (uint64_t)sub_10023D730;
        aBlock[3] = (uint64_t)&unk_100426BD0;
        unint64_t v53 = _Block_copy(aBlock);
        swift_unknownObjectRetain();
        swift_release();
        [v70 advertiser:v74 didReceiveJoinRequest:v40 accessHandler:v53];
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        _Block_release(v53);
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      __int16 v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v64 = 136315138;
        uint64_t v65 = _typeName(_:qualified:)();
        uint64_t v77 = sub_10018A9E0(v65, v66, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "[%s] Failed to parse join request information", v64, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v54 = v70;
    v22(v70, v75, v4);
    int v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315394;
      uint64_t v58 = _typeName(_:qualified:)();
      uint64_t v77 = sub_10018A9E0(v58, v59, aBlock);
      uint64_t v73 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      sub_1000155BC(&qword_10047B800, &qword_10047B680);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = sub_10018A9E0(v60, v61, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v33(v54, v4);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%s] Got join request with no active session: %s. Ignoring", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v33(v54, v4);
    }
  }
}

id sub_1002823F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100013A80(&qword_10047B680);
  uint64_t v7 = NearbyInvitation.PendingMember.joinRequestUserInfo.getter();
  Class isa = 0;
  if (v8 >> 60 != 15)
  {
    uint64_t v10 = v7;
    unint64_t v11 = v8;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1001A3954(v10, v11);
  }
  id v12 = [objc_allocWithZone((Class)_MRGroupSessionJoinRequestProtobuf) initWithData:isa];

  if (!v12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    return 0;
  }
  id v13 = [v12 identity];
  id v14 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v13];

  if (!v14)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);

    return 0;
  }
  uint64_t v22 = v3;
  id v15 = [v12 oobKeys];
  if (!v15
    || (uint64_t v16 = v15, v23 = 0, static Array._conditionallyBridgeFromObjectiveC(_:result:)(), v16, !v23))
  {
    swift_bridgeObjectRelease();
  }
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NearbyInvitation.PendingMember.invitationID.getter();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v20 = [v17 initWithIdentifier:v18 identity:v14 oobKeys:v19];

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return v20;
}

char *sub_10028270C(int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v41 = a7;
  uint64_t v42 = a6;
  uint64_t v40 = a5;
  uint64_t v38 = a3;
  int v39 = a1;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100013A80(&qword_10047B680);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  id v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    Class v19 = result;
    uint64_t v37 = v11;
    uint64_t result = (char *)[objc_allocWithZone((Class)_MRGroupSessionJoinResponseProtobuf) init];
    if (result)
    {
      id v20 = result;
      uint64_t v34 = v13;
      uint64_t v35 = v9;
      uint64_t v36 = v8;
      id v21 = [a4 joinToken];
      NSString v22 = [v21 joinURLString];

      if (!v22)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v20 setJoinURL:v22];

      v33[1] = *(void *)&v19[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v14);
      unint64_t v23 = (*(unsigned __int8 *)(v15 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      unint64_t v24 = (v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v25 = swift_allocObject();
      uint64_t v26 = v40;
      *(void *)(v25 + 16) = v19;
      *(void *)(v25 + 24) = v26;
      *(void *)(v25 + 32) = v42;
      *(unsigned char *)(v25 + 40) = v39 & 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v25 + v23, v17, v14);
      *(void *)(v25 + v24) = v20;
      *(void *)(v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = v41;
      aBlock[4] = sub_100287C64;
      aBlock[5] = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_100006760;
      aBlock[3] = &unk_100426C20;
      uint64_t v27 = _Block_copy(aBlock);
      uint64_t v28 = v19;
      swift_bridgeObjectRetain();
      uint64_t v29 = v20;
      unint64_t v30 = v34;
      static DispatchQoS.unspecified.getter();
      unint64_t v45 = _swiftEmptyArrayStorage;
      sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100013A80((uint64_t *)&unk_100479AE0);
      sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
      uint64_t v31 = v44;
      uint64_t v32 = v36;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v27);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v32);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v37);

      return (char *)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100282BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a7;
  uint64_t v33 = a4;
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a3;
  uint64_t v9 = sub_100013A80(&qword_10047B680);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = sub_100013A80(&qword_100478720);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  NSString v18 = (uint64_t *)((char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class v19 = *(void **)(a5
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue);
  *NSString v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v19)
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v14, 1, 1, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v9);
    unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    unint64_t v24 = (v11 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = (char *)swift_allocObject();
    *((void *)v25 + 2) = 0;
    *((void *)v25 + 3) = 0;
    *((void *)v25 + 4) = v30;
    *((void *)v25 + 5) = a2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v23], (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    uint64_t v26 = &v25[v24];
    uint64_t v27 = v33;
    *(void *)uint64_t v26 = v31;
    *((void *)v26 + 1) = v27;
    *(void *)&v25[(v24 + 23) & 0xFFFFFFFFFFFFFFF8] = v32;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10018A588((uint64_t)v14, (uint64_t)&unk_10047B848, (uint64_t)v25);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100282EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[12] = a8;
  v8[13] = v12;
  v8[10] = a6;
  v8[11] = a7;
  v8[8] = a4;
  v8[9] = a5;
  uint64_t v9 = sub_100013A80(&qword_10047B680);
  v8[14] = v9;
  v8[15] = *(void *)(v9 - 8);
  v8[16] = swift_task_alloc();
  return _swift_task_switch(sub_100282FC4, 0, 0);
}

uint64_t sub_100282FC4()
{
  unint64_t v24 = v0;
  if (qword_100481210 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger();
  v0[17] = sub_10018A9A8(v5, (uint64_t)qword_100481218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[15];
  uint64_t v9 = v0[16];
  uint64_t v11 = v0[14];
  if (v8)
  {
    uint64_t v20 = v0[8];
    unint64_t v12 = v0[9];
    uint64_t v21 = v0[14];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = _typeName(_:qualified:)();
    v0[5] = sub_10018A9E0(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[6] = sub_10018A9E0(v20, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    sub_1000155BC(&qword_10047B800, &qword_10047B680);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = sub_10018A9E0(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v21);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] %s pending member: %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }

  uint64_t v22 = (uint64_t (*)(void))(v0[11] + *(int *)v0[11]);
  NSString v18 = (void *)swift_task_alloc();
  v0[18] = v18;
  *NSString v18 = v0;
  v18[1] = sub_10028334C;
  return v22();
}

uint64_t sub_10028334C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100283488, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100283488()
{
  uint64_t v13 = v0;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = v0[9];
    uint64_t v10 = v0[8];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315650;
    uint64_t v5 = _typeName(_:qualified:)();
    v0[2] = sub_10018A9E0(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_10018A9E0(v10, v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v4 + 22) = 2112;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Failed to %s pending member: %@", (uint8_t *)v4, 0x20u);
    sub_100013A80((uint64_t *)&unk_10047B850);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  BOOL v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void *sub_10028374C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v34 = a6;
  uint64_t v36 = a5;
  uint64_t v12 = sub_100013A80(&qword_10047B680);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v35 = a1;
  uint64_t result = *(void **)(a1
                    + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session);
  if (result)
  {
    int v33 = a4;
    id v16 = [result identifier];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    if (v17 == a2 && v19 == a3)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = a7;
      char v23 = v33;
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v22 = a7;
      char v23 = v33;
      if ((v21 & 1) == 0) {
        return result;
      }
    }
    uint64_t v24 = v36;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(&v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v12);
    unint64_t v25 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    if (v23)
    {
      uint64_t v26 = swift_allocObject();
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v26 + v25, &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
      uint64_t v27 = v34;
      *(void *)(v26 + ((v14 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v34;
      id v28 = v27;
      uint64_t v29 = &unk_10047B830;
      uint64_t v30 = 0x65766F72707061;
      uint64_t v31 = 0xE700000000000000;
    }
    else
    {
      uint64_t v26 = swift_allocObject();
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v13 + 32))(v26 + v25, &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
      uint64_t v29 = &unk_10047B820;
      uint64_t v30 = 0x7463656A6572;
      uint64_t v31 = 0xE600000000000000;
    }
    sub_100282BE8(v30, v31, (uint64_t)v29, v26, v35, v24, v22);
    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_1002839D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1002839F8, 0, 0);
}

uint64_t sub_1002839F8()
{
  id v1 = [*(id *)(v0 + 24) data];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
  }
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v5;
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v6;
  uint64_t v7 = sub_100013A80(&qword_10047B680);
  *unint64_t v6 = v0;
  v6[1] = sub_100283AF0;
  return NearbyInvitation.PendingMember.approve(userInfo:)(v3, v5, v7);
}

uint64_t sub_100283AF0()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100283C2C, 0, 0);
  }
  else
  {
    sub_1001A3954(v2[4], v2[5]);
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

uint64_t sub_100283C2C()
{
  sub_1001A3954(v0[4], v0[5]);
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100283C90()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = sub_100013A80(&qword_10047B680);
  void *v1 = v0;
  v1[1] = sub_10000D170;
  return NearbyInvitation.PendingMember.reject()(v2);
}

uint64_t sub_100283D34(void *a1)
{
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_session];
  if (v3 && (uint64_t v4 = (char *)[v3 nearbyInvitation]) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)&v4[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation];
    swift_retain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(NSObject **)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  BOOL v8 = (void *)swift_allocObject();
  long long v8[2] = v6;
  v8[3] = v1;
  v8[4] = a1;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100284C58;
  *(void *)(v9 + 24) = v8;
  v15[4] = sub_1001BA8E4;
  v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_1001F4BF0;
  v15[3] = &unk_100426B58;
  uint64_t v10 = _Block_copy(v15);
  id v11 = a1;
  swift_retain();
  swift_retain();
  uint64_t v12 = v1;
  swift_release();
  dispatch_async_and_wait(v7, v10);
  swift_release();
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100284014()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1002840D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100284138())()
{
  return j__swift_endAccess;
}

id sub_1002841E0()
{
  id v1 = (void **)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_100284298(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*sub_1002842EC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100284390()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_100284424(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_100284470())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100284514()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1002845A8(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1002845F4())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100284698()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10028472C(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_100284778())()
{
  return j_j__swift_endAccess;
}

id sub_1002847D4(uint64_t a1)
{
  uint64_t v2 = v1;
  v2[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connected] = 0;
  uint64_t v4 = &v2[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_connectionRequest];
  uint64_t v5 = sub_100013A80(&qword_10047B6B0);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  uint64_t v7 = v2;
  uint64_t v8 = NearbyInvitationAdvertiser.PendingMember.identifier.getter();
  uint64_t v9 = (uint64_t *)&v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identifier];
  *uint64_t v9 = v8;
  v9[1] = v10;
  id v11 = self;
  NearbyInvitationAdvertiser.PendingMember.contactID.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NearbyInvitationAdvertiser.PendingMember.displayName.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 basicIdentityWithIdentifier:v12 displayName:v13];

  *(void *)&v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_identity] = v14;
  v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_guest] = 1;
  v7[OBJC_IVAR____TtC12mediaremoted32NearbySessionsPendingParticipant_hidden] = 0;

  v17.receiver = v7;
  v17.super_class = (Class)type metadata accessor for NearbySessionsPendingParticipant();
  id v15 = objc_msgSendSuper2(&v17, "init");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v15;
}

uint64_t type metadata accessor for NearbySessionsPendingParticipant()
{
  uint64_t result = qword_100481238;
  if (!qword_100481238) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_100284A04()
{
  return sub_100284A20(0, type metadata accessor for NearbySessionsPendingParticipant);
}

id sub_100284A20(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100284AF0()
{
  return type metadata accessor for NearbySessionsPendingParticipant();
}

void sub_100284AF8()
{
  sub_100284BB0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100284BB0()
{
  if (!qword_10047B7E0)
  {
    type metadata accessor for NearbyGroup();
    unint64_t v0 = type metadata accessor for NearbyInvitationAdvertiser.PendingMember();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10047B7E0);
    }
  }
}

uint64_t sub_100284C10()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100284C58()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 32);
  sub_100013A80((uint64_t *)&unk_100479EF0);
  uint64_t inited = swift_initStackObject();
  uint64_t v6 = inited;
  *(_OWORD *)(inited + 16) = xmmword_1003C5BA0;
  *(void *)(inited + 32) = 0x6974617469766E69;
  *(void *)(inited + 40) = 0xEA00000000006E6FLL;
  if (v2)
  {
    uint64_t v7 = dispatch thunk of NearbyInvitation.description.getter();
    uint64_t v9 = (uint64_t *)(v6 + 48);
    *(void *)(v6 + 72) = &type metadata for String;
    if (v8)
    {
      *uint64_t v9 = v7;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)(inited + 48);
    *(void *)(inited + 72) = &type metadata for String;
  }
  *uint64_t v9 = 7104878;
  unint64_t v8 = 0xE300000000000000;
LABEL_6:
  *(void *)(v6 + 56) = v8;
  strcpy((char *)(v6 + 80), "isAdvertising");
  *(_WORD *)(v6 + 94) = -4864;
  char v10 = *(unsigned char *)(v4
                 + OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_isAdvertising);
  *(void *)(v6 + 120) = &type metadata for Bool;
  *(unsigned char *)(v6 + 96) = v10;
  sub_1001FA360(v6);
  if (v3)
  {
    Dictionary.description.getter();
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v3 setGroupSessionAdvertiserState:v11];

    Class isa = (Class)[*(id *)(v4+ OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_logBuffer) history];
    if (!isa)
    {
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    [v3 setGroupSessionAdvertiserEvents:isa];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100284E3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100284E4C(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  int v33 = a2;
  uint64_t v34 = a4;
  uint64_t v7 = sub_100013A80(a2);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100013A80(a3);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v12);
  objc_super v17 = (char *)&v29 - v16;
  if (!*(void *)(*(void *)v4 + 16)) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v29 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v32 = v11 + 16;
  int64_t v30 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v31 = v11 + 32;
  uint64_t v22 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v30) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v29 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v30) {
        return swift_release();
      }
      unint64_t v27 = *(void *)(v29 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v30) {
          return swift_release();
        }
        unint64_t v27 = *(void *)(v29 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v30) {
            return swift_release();
          }
          unint64_t v27 = *(void *)(v29 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v17, *(void *)(v22 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v17, v10);
    v34(v14);
    sub_100009A08((uint64_t)v9, v33);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v30) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v29 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v30) {
      return swift_release();
    }
    unint64_t v27 = *(void *)(v29 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_100285160(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047B9C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100013A80(&qword_10047B680);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v41 - v12;
  if (!*((void *)a2 + 2))
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1 << -(char)v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  v59[0] = a1;
  v59[1] = a1 + 56;
  uint64_t v45 = a1 + 56;
  uint64_t v44 = ~v13;
  v59[2] = ~v13;
  unint64_t v16 = (unint64_t)(63 - v13) >> 6;
  uint64_t v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  unint64_t v51 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v56 = v8 + 16;
  uint64_t v57 = a2 + 56;
  objc_super v17 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v41 = v16 - 1;
  swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  int64_t v48 = v16;
  unint64_t v43 = v16 - 6;
  uint64_t v42 = a1 + 104;
  uint64_t v50 = v8;
  unint64_t v46 = v6;
  uint64_t v47 = a1;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v54 = (v15 - 1) & v15;
  unint64_t v55 = v18;
  unint64_t v19 = __clz(__rbit64(v15)) | (v18 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(void *)(a1 + 48) + *(void *)(v8 + 72) * v19, v7);
  uint64_t v20 = 0;
  while (1)
  {
    (*v53)(v6, v20, 1, v7);
    if ((*v52)(v6, 1, v7) == 1)
    {
      sub_10018F864();
      sub_100009A08((uint64_t)v6, &qword_10047B9C0);
      return a2;
    }
    (*v51)(v58, v6, v7);
    sub_1000155BC(&qword_10047B9B8, &qword_10047B680);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v22 = -1 << a2[32];
    unint64_t v23 = v21 & ~v22;
    if ((*(void *)&v57[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
      break;
    }
    uint64_t v29 = *v17;
LABEL_15:
    v29(v58, v7);
    unint64_t v15 = v54;
    unint64_t v18 = v55;
    uint64_t v8 = v50;
    if (v54) {
      goto LABEL_6;
    }
LABEL_16:
    int64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      __break(1u);
    }
    if (v30 >= v48)
    {
      uint64_t v54 = 0;
      unint64_t v55 = v18;
      uint64_t v20 = 1;
    }
    else
    {
      unint64_t v31 = *(void *)(v45 + 8 * v30);
      if (v31) {
        goto LABEL_19;
      }
      unint64_t v32 = v18 + 2;
      if ((uint64_t)(v18 + 2) >= v48)
      {
        uint64_t v54 = 0;
        unint64_t v55 = v18 + 1;
        uint64_t v20 = 1;
      }
      else
      {
        unint64_t v31 = *(void *)(v45 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        if ((uint64_t)(v18 + 3) >= v48) {
          goto LABEL_36;
        }
        unint64_t v31 = *(void *)(v45 + 8 * (v18 + 3));
        if (v31)
        {
          int64_t v30 = v18 + 3;
          goto LABEL_19;
        }
        unint64_t v32 = v18 + 4;
        if ((uint64_t)(v18 + 4) >= v48)
        {
          uint64_t v54 = 0;
          unint64_t v55 = v18 + 3;
          uint64_t v20 = 1;
        }
        else
        {
          unint64_t v31 = *(void *)(v45 + 8 * v32);
          if (v31)
          {
LABEL_23:
            int64_t v30 = v32;
LABEL_19:
            uint64_t v54 = (v31 - 1) & v31;
            unint64_t v55 = v30;
            unint64_t v19 = __clz(__rbit64(v31)) + (v30 << 6);
            goto LABEL_7;
          }
          int64_t v30 = v18 + 5;
          if ((uint64_t)(v18 + 5) >= v48)
          {
LABEL_36:
            uint64_t v54 = 0;
            unint64_t v55 = v32;
            uint64_t v20 = 1;
          }
          else
          {
            unint64_t v31 = *(void *)(v45 + 8 * v30);
            if (v31) {
              goto LABEL_19;
            }
            unint64_t v33 = v18;
            while (v43 != v33)
            {
              unint64_t v31 = *(void *)(v42 + 8 * v33++);
              if (v31)
              {
                int64_t v30 = v33 + 5;
                goto LABEL_19;
              }
            }
            uint64_t v54 = 0;
            uint64_t v20 = 1;
            unint64_t v55 = v41;
          }
        }
      }
    }
  }
  uint64_t v49 = (unint64_t)v17 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v24 = (uint64_t)a2;
  uint64_t v25 = ~v22;
  uint64_t v26 = *(void *)(v8 + 72);
  unint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v27(v11, *(void *)(v24 + 48) + v26 * v23, v7);
    sub_1000155BC(&qword_10047B9C8, &qword_10047B680);
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v29 = *v17;
    (*v17)(v11, v7);
    if (v28) {
      break;
    }
    unint64_t v23 = (v23 + 1) & v25;
    if (((*(void *)&v57[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0)
    {
      a2 = (char *)v24;
      uint64_t v6 = v46;
      a1 = v47;
      goto LABEL_15;
    }
  }
  v59[3] = v55;
  v59[4] = v54;
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v29)(v58, v7);
  char v35 = *(unsigned char *)(v24 + 32);
  unint64_t v36 = (unint64_t)((1 << v35) + 63) >> 6;
  size_t v37 = 8 * v36;
  if ((v35 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v41 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0), v57, v37);
    uint64_t v38 = sub_100286590((unint64_t *)((char *)&v41 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0)), v36, v24, v23, v59);
    swift_release();
    sub_10018F864();
    return (char *)v38;
  }
  else
  {
    int v39 = (void *)swift_slowAlloc();
    memcpy(v39, v57, v37);
    a2 = (char *)sub_100286590((unint64_t *)v39, v36, v24, v23, v59);
    swift_release();
    sub_10018F864();
    swift_slowDealloc();
  }
  return a2;
}

char *sub_10028587C(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047B958);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100013A80(&qword_10047B6B0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v58 = (char *)&v41 - v12;
  if (!*((void *)a2 + 2))
  {
    swift_release();
    return (char *)&_swiftEmptySetSingleton;
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v14 = ~(-1 << -(char)v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(a1 + 56);
  v59[0] = a1;
  v59[1] = a1 + 56;
  uint64_t v45 = a1 + 56;
  uint64_t v44 = ~v13;
  v59[2] = ~v13;
  unint64_t v16 = (unint64_t)(63 - v13) >> 6;
  uint64_t v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  unint64_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  unint64_t v51 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v56 = v8 + 16;
  uint64_t v57 = a2 + 56;
  objc_super v17 = (void (**)(char *, uint64_t))(v8 + 8);
  unint64_t v41 = v16 - 1;
  swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  int64_t v48 = v16;
  unint64_t v43 = v16 - 6;
  uint64_t v42 = a1 + 104;
  uint64_t v50 = v8;
  unint64_t v46 = v6;
  uint64_t v47 = a1;
  if (!v15) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v54 = (v15 - 1) & v15;
  unint64_t v55 = v18;
  unint64_t v19 = __clz(__rbit64(v15)) | (v18 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(void *)(a1 + 48) + *(void *)(v8 + 72) * v19, v7);
  uint64_t v20 = 0;
  while (1)
  {
    (*v53)(v6, v20, 1, v7);
    if ((*v52)(v6, 1, v7) == 1)
    {
      sub_10018F864();
      sub_100009A08((uint64_t)v6, &qword_10047B958);
      return a2;
    }
    (*v51)(v58, v6, v7);
    sub_1000155BC(&qword_10047B950, &qword_10047B6B0);
    uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v22 = -1 << a2[32];
    unint64_t v23 = v21 & ~v22;
    if ((*(void *)&v57[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23)) {
      break;
    }
    uint64_t v29 = *v17;
LABEL_15:
    v29(v58, v7);
    unint64_t v15 = v54;
    unint64_t v18 = v55;
    uint64_t v8 = v50;
    if (v54) {
      goto LABEL_6;
    }
LABEL_16:
    int64_t v30 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      __break(1u);
    }
    if (v30 >= v48)
    {
      uint64_t v54 = 0;
      unint64_t v55 = v18;
      uint64_t v20 = 1;
    }
    else
    {
      unint64_t v31 = *(void *)(v45 + 8 * v30);
      if (v31) {
        goto LABEL_19;
      }
      unint64_t v32 = v18 + 2;
      if ((uint64_t)(v18 + 2) >= v48)
      {
        uint64_t v54 = 0;
        unint64_t v55 = v18 + 1;
        uint64_t v20 = 1;
      }
      else
      {
        unint64_t v31 = *(void *)(v45 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        if ((uint64_t)(v18 + 3) >= v48) {
          goto LABEL_36;
        }
        unint64_t v31 = *(void *)(v45 + 8 * (v18 + 3));
        if (v31)
        {
          int64_t v30 = v18 + 3;
          goto LABEL_19;
        }
        unint64_t v32 = v18 + 4;
        if ((uint64_t)(v18 + 4) >= v48)
        {
          uint64_t v54 = 0;
          unint64_t v55 = v18 + 3;
          uint64_t v20 = 1;
        }
        else
        {
          unint64_t v31 = *(void *)(v45 + 8 * v32);
          if (v31)
          {
LABEL_23:
            int64_t v30 = v32;
LABEL_19:
            uint64_t v54 = (v31 - 1) & v31;
            unint64_t v55 = v30;
            unint64_t v19 = __clz(__rbit64(v31)) + (v30 << 6);
            goto LABEL_7;
          }
          int64_t v30 = v18 + 5;
          if ((uint64_t)(v18 + 5) >= v48)
          {
LABEL_36:
            uint64_t v54 = 0;
            unint64_t v55 = v32;
            uint64_t v20 = 1;
          }
          else
          {
            unint64_t v31 = *(void *)(v45 + 8 * v30);
            if (v31) {
              goto LABEL_19;
            }
            unint64_t v33 = v18;
            while (v43 != v33)
            {
              unint64_t v31 = *(void *)(v42 + 8 * v33++);
              if (v31)
              {
                int64_t v30 = v33 + 5;
                goto LABEL_19;
              }
            }
            uint64_t v54 = 0;
            uint64_t v20 = 1;
            unint64_t v55 = v41;
          }
        }
      }
    }
  }
  uint64_t v49 = (unint64_t)v17 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v24 = (uint64_t)a2;
  uint64_t v25 = ~v22;
  uint64_t v26 = *(void *)(v8 + 72);
  unint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v27(v11, *(void *)(v24 + 48) + v26 * v23, v7);
    sub_1000155BC(&qword_10047B960, &qword_10047B6B0);
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v29 = *v17;
    (*v17)(v11, v7);
    if (v28) {
      break;
    }
    unint64_t v23 = (v23 + 1) & v25;
    if (((*(void *)&v57[(v23 >> 3) & 0xFFFFFFFFFFFFFF8] >> v23) & 1) == 0)
    {
      a2 = (char *)v24;
      uint64_t v6 = v46;
      a1 = v47;
      goto LABEL_15;
    }
  }
  v59[3] = v55;
  v59[4] = v54;
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v29)(v58, v7);
  char v35 = *(unsigned char *)(v24 + 32);
  unint64_t v36 = (unint64_t)((1 << v35) + 63) >> 6;
  size_t v37 = 8 * v36;
  if ((v35 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v41 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0), v57, v37);
    uint64_t v38 = sub_100286AFC((unint64_t *)((char *)&v41 - ((v37 + 15) & 0x3FFFFFFFFFFFFFF0)), v36, v24, v23, v59);
    swift_release();
    sub_10018F864();
    return (char *)v38;
  }
  else
  {
    int v39 = (void *)swift_slowAlloc();
    memcpy(v39, v57, v37);
    a2 = (char *)sub_100286AFC((unint64_t *)v39, v36, v24, v23, v59);
    swift_release();
    sub_10018F864();
    swift_slowDealloc();
  }
  return a2;
}

uint64_t sub_100285F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100013A80(&qword_10047B680);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000155BC(&qword_10047B9B8, &qword_10047B680);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v24 = v2;
    uint64_t v25 = v6;
    uint64_t v26 = a2;
    uint64_t v27 = ~v11;
    unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    uint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      sub_1000155BC(&qword_10047B9C8, &qword_10047B680);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v19;
    uint64_t v30 = *v19;
    *unint64_t v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002873D4(&qword_10047B680, &qword_10047B9D0);
      uint64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    sub_10028767C(v12, &qword_10047B680, &qword_10047B9B8, (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
    *unint64_t v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

uint64_t sub_100286294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100013A80(&qword_10047B6B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000155BC(&qword_10047B950, &qword_10047B6B0);
  swift_bridgeObjectRetain();
  uint64_t v29 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v28 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v24 = v2;
    uint64_t v25 = v6;
    uint64_t v26 = a2;
    uint64_t v27 = ~v11;
    unint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v14 = v6 + 16;
    uint64_t v13 = v15;
    uint64_t v16 = *(void *)(v14 + 56);
    while (1)
    {
      v13(v8, *(void *)(v9 + 48) + v16 * v12, v5);
      sub_1000155BC(&qword_10047B960, &qword_10047B6B0);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v14 - 8))(v8, v5);
      if (v17) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v27;
      if (((*(void *)(v28 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = 1;
        uint64_t v6 = v25;
        a2 = v26;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v19 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v19;
    uint64_t v30 = *v19;
    *unint64_t v19 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1002873D4(&qword_10047B6B0, &qword_10047B968);
      uint64_t v21 = v30;
    }
    uint64_t v6 = v25;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 32))(v26, *(void *)(v21 + 48) + v16 * v12, v5);
    sub_10028767C(v12, &qword_10047B6B0, &qword_10047B950, (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
    *unint64_t v19 = v30;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v5);
}

void *sub_100286590(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v47 = a2;
  uint64_t v9 = sub_100013A80(&qword_10047B9C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100013A80(&qword_10047B680);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v60 = (char *)&v47 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v49 = a1;
  uint64_t v50 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v21 = v18 - 1;
  uint64_t v58 = v22 + 16;
  uint64_t v59 = a3;
  unint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  unint64_t v51 = a5;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v57 = a3 + 56;
  uint64_t v55 = v22;
  uint64_t v23 = (void (**)(char *, uint64_t))(v22 + 8);
  while (2)
  {
    uint64_t v48 = v21;
    do
    {
      while (1)
      {
        uint64_t v25 = *a5;
        uint64_t v26 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v27 = a5[3];
        unint64_t v29 = a5[4];
        if (v29)
        {
          uint64_t v56 = (v29 - 1) & v29;
          unint64_t v30 = __clz(__rbit64(v29)) | (v27 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v11, *(void *)(v25 + 48) + *(void *)(v55 + 72) * v30, v12);
          uint64_t v31 = 0;
          goto LABEL_8;
        }
        int64_t v40 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v41 = (unint64_t)(v28 + 64) >> 6;
        if (v40 >= v41)
        {
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          goto LABEL_8;
        }
        unint64_t v42 = *(void *)(v26 + 8 * v40);
        if (v42) {
          goto LABEL_17;
        }
        if (v27 + 2 >= v41) {
          goto LABEL_34;
        }
        unint64_t v42 = *(void *)(v26 + 8 * (v27 + 2));
        if (v42)
        {
          int64_t v40 = v27 + 2;
LABEL_17:
          uint64_t v56 = (v42 - 1) & v42;
          unint64_t v30 = __clz(__rbit64(v42)) + (v40 << 6);
          int64_t v27 = v40;
          goto LABEL_7;
        }
        if (v27 + 3 >= v41)
        {
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          v27 += 2;
          goto LABEL_8;
        }
        unint64_t v42 = *(void *)(v26 + 8 * (v27 + 3));
        if (v42)
        {
          int64_t v40 = v27 + 3;
          goto LABEL_17;
        }
        int64_t v40 = v27 + 4;
        if (v27 + 4 < v41)
        {
          unint64_t v42 = *(void *)(v26 + 8 * v40);
          if (v42) {
            goto LABEL_17;
          }
          int64_t v40 = v41 - 1;
          int64_t v45 = v27 + 5;
          while (v41 != v45)
          {
            unint64_t v42 = *(void *)(v26 + 8 * v45++);
            if (v42)
            {
              int64_t v40 = v45 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          int64_t v27 = v40;
          goto LABEL_8;
        }
        uint64_t v56 = 0;
        uint64_t v31 = 1;
        v27 += 3;
LABEL_8:
        (*v54)(v11, v31, 1, v12);
        *a5 = v25;
        a5[1] = v26;
        a5[2] = v28;
        a5[3] = v27;
        a5[4] = v56;
        if ((*v53)(v11, 1, v12) == 1)
        {
          sub_100009A08((uint64_t)v11, &qword_10047B9C0);
          uint64_t v46 = v59;
          swift_retain();
          return (void *)sub_100287068(v49, v47, v48, v46, &qword_10047B680, &qword_10047B9D0, &qword_10047B9B8, (uint64_t)&protocol conformance descriptor for NearbyInvitation<A>.PendingMember);
        }
        (*v52)(v60, v11, v12);
        uint64_t v32 = v59;
        sub_1000155BC(&qword_10047B9B8, &qword_10047B680);
        uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v34 = -1 << *(unsigned char *)(v32 + 32);
        unint64_t v35 = v33 & ~v34;
        if ((*(void *)(v57 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35)) {
          break;
        }
        uint64_t v24 = *v23;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v24)(v60, v12);
      }
      uint64_t v56 = (unint64_t)v23 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v36 = ~v34;
      uint64_t v37 = *(void *)(v55 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
      while (1)
      {
        v38(v15, *(void *)(v59 + 48) + v37 * v35, v12);
        sub_1000155BC(&qword_10047B9C8, &qword_10047B680);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v23;
        (*v23)(v15, v12);
        if (v39) {
          break;
        }
        unint64_t v35 = (v35 + 1) & v36;
        if (((*(void *)(v57 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        {
          uint64_t v11 = v50;
          a5 = v51;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v24)(v60, v12);
      uint64_t v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v50;
      uint64_t v44 = *(unint64_t *)((char *)v49 + v43);
      *(unint64_t *)((char *)v49 + v43) = v44 & ~(1 << v35);
      a5 = v51;
    }
    while ((v44 & (1 << v35)) == 0);
    uint64_t v21 = v48 - 1;
    if (__OFSUB__(v48, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v48 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100286AFC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v47 = a2;
  uint64_t v9 = sub_100013A80(&qword_10047B958);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100013A80(&qword_10047B6B0);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v60 = (char *)&v47 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v49 = a1;
  uint64_t v50 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v21 = v18 - 1;
  uint64_t v58 = v22 + 16;
  uint64_t v59 = a3;
  unint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v54 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  unint64_t v51 = a5;
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v57 = a3 + 56;
  uint64_t v55 = v22;
  uint64_t v23 = (void (**)(char *, uint64_t))(v22 + 8);
  while (2)
  {
    uint64_t v48 = v21;
    do
    {
      while (1)
      {
        uint64_t v25 = *a5;
        uint64_t v26 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v27 = a5[3];
        unint64_t v29 = a5[4];
        if (v29)
        {
          uint64_t v56 = (v29 - 1) & v29;
          unint64_t v30 = __clz(__rbit64(v29)) | (v27 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v11, *(void *)(v25 + 48) + *(void *)(v55 + 72) * v30, v12);
          uint64_t v31 = 0;
          goto LABEL_8;
        }
        int64_t v40 = v27 + 1;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v41 = (unint64_t)(v28 + 64) >> 6;
        if (v40 >= v41)
        {
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          goto LABEL_8;
        }
        unint64_t v42 = *(void *)(v26 + 8 * v40);
        if (v42) {
          goto LABEL_17;
        }
        if (v27 + 2 >= v41) {
          goto LABEL_34;
        }
        unint64_t v42 = *(void *)(v26 + 8 * (v27 + 2));
        if (v42)
        {
          int64_t v40 = v27 + 2;
LABEL_17:
          uint64_t v56 = (v42 - 1) & v42;
          unint64_t v30 = __clz(__rbit64(v42)) + (v40 << 6);
          int64_t v27 = v40;
          goto LABEL_7;
        }
        if (v27 + 3 >= v41)
        {
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          v27 += 2;
          goto LABEL_8;
        }
        unint64_t v42 = *(void *)(v26 + 8 * (v27 + 3));
        if (v42)
        {
          int64_t v40 = v27 + 3;
          goto LABEL_17;
        }
        int64_t v40 = v27 + 4;
        if (v27 + 4 < v41)
        {
          unint64_t v42 = *(void *)(v26 + 8 * v40);
          if (v42) {
            goto LABEL_17;
          }
          int64_t v40 = v41 - 1;
          int64_t v45 = v27 + 5;
          while (v41 != v45)
          {
            unint64_t v42 = *(void *)(v26 + 8 * v45++);
            if (v42)
            {
              int64_t v40 = v45 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v56 = 0;
          uint64_t v31 = 1;
          int64_t v27 = v40;
          goto LABEL_8;
        }
        uint64_t v56 = 0;
        uint64_t v31 = 1;
        v27 += 3;
LABEL_8:
        (*v54)(v11, v31, 1, v12);
        *a5 = v25;
        a5[1] = v26;
        a5[2] = v28;
        a5[3] = v27;
        a5[4] = v56;
        if ((*v53)(v11, 1, v12) == 1)
        {
          sub_100009A08((uint64_t)v11, &qword_10047B958);
          uint64_t v46 = v59;
          swift_retain();
          return (void *)sub_100287068(v49, v47, v48, v46, &qword_10047B6B0, &qword_10047B968, &qword_10047B950, (uint64_t)&protocol conformance descriptor for NearbyInvitationAdvertiser<A>.PendingMember);
        }
        (*v52)(v60, v11, v12);
        uint64_t v32 = v59;
        sub_1000155BC(&qword_10047B950, &qword_10047B6B0);
        uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v34 = -1 << *(unsigned char *)(v32 + 32);
        unint64_t v35 = v33 & ~v34;
        if ((*(void *)(v57 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35)) {
          break;
        }
        uint64_t v24 = *v23;
LABEL_4:
        uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v24)(v60, v12);
      }
      uint64_t v56 = (unint64_t)v23 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v36 = ~v34;
      uint64_t v37 = *(void *)(v55 + 72);
      uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
      while (1)
      {
        v38(v15, *(void *)(v59 + 48) + v37 * v35, v12);
        sub_1000155BC(&qword_10047B960, &qword_10047B6B0);
        char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v23;
        (*v23)(v15, v12);
        if (v39) {
          break;
        }
        unint64_t v35 = (v35 + 1) & v36;
        if (((*(void *)(v57 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        {
          uint64_t v11 = v50;
          a5 = v51;
          goto LABEL_4;
        }
      }
      uint64_t result = (void *)((uint64_t (*)(char *, uint64_t))v24)(v60, v12);
      uint64_t v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v50;
      uint64_t v44 = *(unint64_t *)((char *)v49 + v43);
      *(unint64_t *)((char *)v49 + v43) = v44 & ~(1 << v35);
      a5 = v51;
    }
    while ((v44 & (1 << v35)) == 0);
    uint64_t v21 = v48 - 1;
    if (__OFSUB__(v48, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v48 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_100287068(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  unint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v38 = a1;
  int64_t v41 = a5;
  uint64_t v12 = sub_100013A80(a5);
  uint64_t v44 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_100013A80(a6);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v15 = result;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = *v38;
  }
  uint64_t v18 = 0;
  uint64_t v19 = result + 56;
  char v39 = (uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32);
  uint64_t v40 = v44 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v18 << 6);
    }
    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_40;
      }
      if (v22 >= v37)
      {
LABEL_37:
        swift_release();
        return v15;
      }
      unint64_t v23 = v38[v22];
      ++v18;
      if (!v23)
      {
        uint64_t v18 = v22 + 1;
        if (v22 + 1 >= v37) {
          goto LABEL_37;
        }
        unint64_t v23 = v38[v18];
        if (!v23)
        {
          uint64_t v18 = v22 + 2;
          if (v22 + 2 >= v37) {
            goto LABEL_37;
          }
          unint64_t v23 = v38[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 3;
            if (v24 >= v37) {
              goto LABEL_37;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v37) {
                  goto LABEL_37;
                }
                unint64_t v23 = v38[v18];
                ++v24;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v18 = v24;
          }
        }
      }
LABEL_24:
      unint64_t v17 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
    }
    uint64_t v25 = a4;
    uint64_t v26 = *(void *)(a4 + 48);
    uint64_t v27 = *(void *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v14, v26 + v27 * v21, v12);
    sub_1000155BC(v42, v41);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v19 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v19 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v19 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = (*v39)(*(void *)(v15 + 48) + v31 * v27, v14, v12);
    ++*(void *)(v15 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v25;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1002873D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = sub_100013A80(a1);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013A80(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_10028767C(int64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v42 = a3;
  uint64_t v43 = a4;
  int64_t v41 = a2;
  uint64_t v6 = sub_100013A80(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v4;
  uint64_t v12 = *v4 + 56;
  uint64_t v13 = -1 << *(unsigned char *)(*v4 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(void *)(v12 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v37 = v4;
    uint64_t v15 = ~v13;
    swift_retain();
    uint64_t v16 = _HashTable.previousHole(before:)();
    uint64_t v17 = v11;
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      unint64_t v39 = (v16 + 1) & v15;
      unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
      uint64_t v18 = v7 + 16;
      uint64_t v38 = v19;
      uint64_t v44 = *(void *)(v18 + 56);
      uint64_t v40 = v18;
      unint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v21 = v12;
        int64_t v22 = v44 * v14;
        v38(v10, *(void *)(v17 + 48) + v44 * v14, v6);
        uint64_t v23 = v17;
        sub_1000155BC(v42, v41);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v20)(v10, v6);
        unint64_t v25 = v24 & v15;
        if (a1 >= (uint64_t)v39)
        {
          if (v25 >= v39 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v17 = v23;
            uint64_t v28 = *(void *)(v23 + 48);
            int64_t v29 = v44 * a1;
            unint64_t v30 = v28 + v44 * a1;
            unint64_t v31 = v28 + v22 + v44;
            if (v44 * a1 < v22 || v30 >= v31)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v14;
            }
            else
            {
              a1 = v14;
              if (v29 != v22)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v39 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        uint64_t v17 = v23;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v15;
        uint64_t v12 = v21;
      }
      while (((*(void *)(v21 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v4 = v37;
  }
  else
  {
    *(void *)(v12 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v33 = *v4;
  uint64_t v34 = *(void *)(*v4 + 16);
  BOOL v35 = __OFSUB__(v34, 1);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
  return result;
}

uint64_t sub_100287968()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002879A0()
{
  uint64_t v1 = sub_100013A80(&qword_10047B680);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

char *sub_100287AA8(int a1)
{
  uint64_t v3 = *(void *)(sub_100013A80(&qword_10047B680) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void **)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v6 + 8);
  uint64_t v11 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_10028270C(a1, v7, v1 + v4, v8, v9, v10, v11);
}

uint64_t sub_100287B68()
{
  uint64_t v1 = sub_100013A80(&qword_10047B680);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void *sub_100287C64()
{
  uint64_t v1 = *(void *)(sub_100013A80(&qword_10047B680) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  int v7 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v8 = *(void **)(v0 + v3);
  uint64_t v9 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10028374C(v4, v5, v6, v7, v0 + v2, v8, v9);
}

uint64_t sub_100287D0C()
{
  return sub_1002886A0(&qword_10047B680);
}

uint64_t sub_100287D18()
{
  sub_100013A80(&qword_10047B680);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013F84;
  return sub_100283C90();
}

uint64_t sub_100287DE8()
{
  uint64_t v1 = sub_100013A80(&qword_10047B680);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100287E90()
{
  uint64_t v2 = *(void *)(sub_100013A80(&qword_10047B680) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *unint64_t v6 = v1;
  v6[2] = v4;
  v6[3] = v5;
  v6[1] = sub_100013F84;
  return _swift_task_switch(sub_1002839F8, 0, 0);
}

uint64_t sub_100287FA4()
{
  return sub_100288808(&qword_10047B680);
}

uint64_t sub_100287FB0()
{
  uint64_t v2 = *(void *)(sub_100013A80(&qword_10047B680) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_10000D170;
  return sub_100282EF0((uint64_t)v10, v11, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_1002880E8()
{
  uint64_t v1 = sub_100013A80(&qword_10047B6B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100288198()
{
  uint64_t v1 = *(void *)(sub_100013A80(&qword_10047B6B0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(char **)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10027FC4C(v0 + v2, v4, v5);
}

uint64_t sub_100288234()
{
  uint64_t v1 = sub_100013A80(&qword_10047B6B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100288318(int a1)
{
  uint64_t v3 = *(void *)(sub_100013A80(&qword_10047B6B0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(char **)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100280528(a1, v5, v6, v1 + v4, v7);
}

uint64_t sub_1002883BC()
{
  uint64_t v1 = sub_100013A80(&qword_10047B6B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16;

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10028849C()
{
  uint64_t v1 = *(void *)(sub_100013A80(&qword_10047B6B0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  char v6 = *(unsigned char *)(v0 + v3);
  uint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);

  sub_1002808F0(v4, v5, v0 + v2, v6, v7);
}

uint64_t sub_100288534()
{
  return sub_1002886A0(&qword_10047B6B0);
}

uint64_t sub_100288540()
{
  sub_100013A80(&qword_10047B6B0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013F84;
  return sub_1002819F8();
}

uint64_t sub_100288610()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100288620()
{
  sub_100013A80(&qword_100478708);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003C58B0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  return sub_10019A6D8(inited);
}

uint64_t sub_100288694()
{
  return sub_1002886A0(&qword_10047B6B0);
}

uint64_t sub_1002886A0(uint64_t *a1)
{
  uint64_t v2 = sub_100013A80(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10028872C()
{
  sub_100013A80(&qword_10047B6B0);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100013F84;
  return sub_100281954();
}

uint64_t sub_1002887FC()
{
  return sub_100288808(&qword_10047B6B0);
}

uint64_t sub_100288808(uint64_t *a1)
{
  uint64_t v2 = sub_100013A80(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 48) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = ((((*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_release();

  return _swift_deallocObject(v1, v7, v6);
}

uint64_t sub_100288900()
{
  uint64_t v2 = *(void *)(sub_100013A80(&qword_10047B6B0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100013F84;
  return sub_100280FE0((uint64_t)v10, v11, v12, v5, v6, v7, v8, v9);
}

uint64_t sub_100288A38()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100288A88()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100013F84;
  *(_OWORD *)(v2 + 80) = v3;
  *(_OWORD *)(v2 + 96) = v4;
  return _swift_task_switch(sub_10027ECEC, 0, 0);
}

uint64_t sub_100288B34()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100288B8C()
{
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100013F84;
  *(void *)(v3 + 128) = v2;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 112) = v5;
  return _swift_task_switch(sub_10027DD48, 0, 0);
}

uint64_t sub_100288C40()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100288C78()
{
}

void sub_100288C9C()
{
}

uint64_t sub_100288CC0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100288D08(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_100013F84;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 48) = v7;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = v4;
  return _swift_task_switch(sub_10027C7E8, 0, 0);
}

uint64_t sub_100288DD0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100288E10()
{
  return sub_10027CC84(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100288E1C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100288E64()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100013F84;
  *(void *)(v4 + 64) = v3;
  *(_OWORD *)(v4 + 48) = v5;
  *(void *)(v4 + 40) = v2;
  return _swift_task_switch(sub_10027CDC8, 0, 0);
}

uint64_t sub_100288F28()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100288F68()
{
  sub_10027B6F8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100288F74()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100288FC4()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  long long v5 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100013F84;
  *(_OWORD *)(v3 + 104) = v5;
  *(void *)(v3 + 96) = v2;
  *(_OWORD *)(v3 + 80) = v4;
  return _swift_task_switch(sub_10027BDC0, 0, 0);
}

uint64_t sub_100289080()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002890B8()
{
  sub_100279110(*(void *)(v0 + 16), *(NSObject **)(v0 + 24));
}

uint64_t sub_1002890C0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100289118()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100013F84;
  *(void *)(v4 + 160) = v3;
  *(_OWORD *)(v4 + 144) = v6;
  *(void *)(v4 + 136) = v2;
  *(_OWORD *)(v4 + 120) = v5;
  return _swift_task_switch(sub_100279970, 0, 0);
}

uint64_t sub_1002891E4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100289234()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10000D170;
  return sub_10027A7E4((uint64_t)v7, v8, v9, v2, v3, v4, v5, v6);
}

uint64_t sub_1002892F0(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)&v1[OBJC_IVAR____TtC12mediaremotedP33_7EE25EE0744654392BDDF6F1DB17E3B438NearbySessionsAdvertiserImplementation_queue];
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v1;
  v12[4] = ObjectType;
  aBlock[4] = sub_10028960C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100006760;
  aBlock[3] = &unk_100427170;
  uint64_t v13 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  uint64_t v14 = v1;
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100015B70((unint64_t *)&qword_10047AE20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100013A80((uint64_t *)&unk_100479AE0);
  sub_1000155BC((unint64_t *)&qword_10047AE30, (uint64_t *)&unk_100479AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1002895CC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10028960C()
{
  sub_100277310(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100289618()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100289660()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100013F84;
  return sub_100277B38((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_100289708()
{
  uint64_t v1 = sub_100013A80(&qword_10047B680);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1002897D8()
{
  uint64_t v1 = *(void *)(sub_100013A80(&qword_10047B680) - 8);
  sub_100281A9C(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_1002898BC()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  _DWORD *v1 = 0;
  return v0;
}

uint64_t sub_100289904()
{
  swift_slowDealloc();

  return swift_deallocClassInstance();
}

void sub_100289944(void (*a1)(void))
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

void sub_1002899AC()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

const char *sub_1002899D8()
{
  return "none";
}

const char *sub_1002899E4()
{
  return "lzfse";
}

const char *sub_1002899F0()
{
  return "sender";
}

const char *sub_1002899FC()
{
  return "type";
}

const char *sub_100289A08()
{
  return "destination";
}

const char *sub_100289A14()
{
  return "payload";
}

const char *sub_100289A20()
{
  return "timestamp";
}

void *sub_100289A2C()
{
  return &unk_100427210;
}

void *sub_100289A38()
{
  return &unk_1003C86E0;
}

const char *sub_100289A44()
{
  return "remoteControl";
}

void *sub_100289A50()
{
  return &unk_100427220;
}

void *sub_100289A5C()
{
  return &unk_100427230;
}

const char *sub_100289A68()
{
  return "sessionEnd";
}

BOOL sub_100289A74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100289A88@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10028BF54(*a1);
  *a2 = result;
  return result;
}

void sub_100289AB4(void *a1@<X8>)
{
  *a1 = *v1;
}

unint64_t sub_100289AC0(char a1)
{
  unint64_t result = 0x694472656461656CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x797469746E656469;
      break;
    case 2:
    case 6:
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x79537265626D656DLL;
      break;
    case 4:
      unint64_t result = 0x456E6F6973736573;
      break;
    case 5:
      unint64_t result = 0x6F4365746F6D6572;
      break;
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100289C40()
{
  return sub_100289AC0(*v0);
}

uint64_t sub_100289C48(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)_MRGroupSessionFastSyncMessageProtobuf);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];

  if (!v6)
  {
    sub_10018FE9C(a1, a2);
    return 11;
  }
  unsigned int v7 = [v6 messageType];
  if (v7 >= 0xB)
  {
    sub_10018FE9C(a1, a2);

    return 11;
  }
  LODWORD(v8) = v7;
  uint64_t result = (uint64_t)[v6 payload];
  if (result)
  {
    uint64_t v10 = (void *)result;
    uint64_t v8 = v8;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10018FE9C(a1, a2);

    return v8;
  }
  __break(1u);
  return result;
}

id sub_100289D64(unsigned __int8 a1)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionFastSyncMessageProtobuf) init];
  if (result)
  {
    uint64_t v3 = result;
    [result setMessageType:a1];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v3 setPayload:isa];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100289DF4(unsigned __int8 a1)
{
  id v1 = sub_100289D64(a1);
  id v2 = [v1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

id sub_100289E60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10018FE08(0, (unint64_t *)&unk_10047BC40);
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 initWithData:isa];

  if (!v8)
  {
    uint64_t v11 = 0;
    unint64_t v13 = 0xF000000000000000;
    goto LABEL_5;
  }
  id result = [v8 signature];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

LABEL_5:
    id result = (id)sub_10018FE9C(a1, a2);
    *a3 = v11;
    a3[1] = v13;
    return result;
  }
  __break(1u);
  return result;
}

void sub_100289F48(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10018FE08(0, &qword_10047BC20);
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 initWithData:isa];

  if (!v8)
  {
    sub_10018FE9C(a1, a2);
    *(_OWORD *)(a3 + 43) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  id v9 = [v8 localParticipant];
  if (!v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = v9;
  uint64_t v36 = a1;
  id v11 = [v9 identifier];
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v14;
  uint64_t v35 = v13;

  id v15 = [v10 identity];
  id v16 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v15];

  if (!v16)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v33 = a2;
  unsigned __int8 v17 = [v10 connected];
  unsigned __int8 v32 = [v10 guest];
  unsigned __int8 v31 = [v10 hidden];

  id v18 = [v8 leaderParticipant];
  if (!v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v19 = v18;
  unsigned __int8 v30 = v17;
  id v20 = [v18 identifier];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    id v25 = [v19 identity];
    id v26 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v25];

    if (v26)
    {
      unsigned __int8 v27 = [v19 connected];
      unsigned __int8 v28 = [v19 guest];
      unsigned __int8 v29 = [v19 hidden];

      sub_10018FE9C(v36, v33);
      *(void *)a3 = v35;
      *(void *)(a3 + 8) = v34;
      *(void *)(a3 + 16) = v16;
      *(unsigned char *)(a3 + 24) = v30;
      *(unsigned char *)(a3 + 25) = v32;
      *(unsigned char *)(a3 + 26) = v31;
      *(void *)(a3 + 32) = v22;
      *(void *)(a3 + 40) = v24;
      *(void *)(a3 + 48) = v26;
      *(unsigned char *)(a3 + 56) = v27;
      *(unsigned char *)(a3 + 57) = v28;
      *(unsigned char *)(a3 + 58) = v29;
      return;
    }
    goto LABEL_15;
  }
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
}

uint64_t sub_10028A208@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  id v10 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v12 = [v10 initWithData:isa];

  if (v12)
  {
    (*(void (**)(id, uint64_t, uint64_t))(a4 + 24))(v12, a3, a4);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }
  sub_10018FE9C(a1, a2);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);

  return v14(a5, v13, 1, a3);
}

void sub_10028A324(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = [objc_allocWithZone((Class)_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (v4)
  {
    uint64_t v5 = v4;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setParticipantIdentifier:v6];

    [v5 setApproved:a3 & 1];
    id v7 = [v5 data];

    if (v7)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10028A3F8()
{
  id v1 = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (v1)
  {
    id v2 = v1;
    if (*(unsigned char *)(v0 + 25)) {
      int v3 = 256;
    }
    else {
      int v3 = 0;
    }
    int v4 = v3 | *(unsigned __int8 *)(v0 + 24);
    if (*(unsigned char *)(v0 + 26)) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0;
    }
    id v6 = sub_10028AB14(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v4 | v5);
    [v2 setLocalParticipant:v6];

    if (*(unsigned char *)(v0 + 57)) {
      int v7 = 256;
    }
    else {
      int v7 = 0;
    }
    int v8 = v7 | *(unsigned __int8 *)(v0 + 56);
    if (*(unsigned char *)(v0 + 58)) {
      int v9 = 0x10000;
    }
    else {
      int v9 = 0;
    }
    id v10 = sub_10028AB14(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), v8 | v9);
    [v2 setLeaderParticipant:v10];

    id v11 = [v2 data];
    if (v11)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10028A52C(uint64_t a1, NSString a2)
{
  id v3 = [objc_allocWithZone((Class)_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (v3)
  {
    int v4 = v3;
    if (a2) {
      a2 = String._bridgeToObjectiveC()();
    }
    [v4 setErrorMessage:a2];

    id v5 = [v4 data];
    if (v5)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10028A5F0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 signature];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *a2 = v6;
    a2[1] = v8;
  }
  else
  {
    __break(1u);
  }
}

id sub_10028A65C(uint64_t a1, uint64_t a2)
{
  return sub_10028AF88(a1, a2, (Class *)_MRGroupSessionLeaderDiscoveryMessageProtobuf_ptr, (uint64_t (*)(uint64_t, uint64_t))&Data._bridgeToObjectiveC(), (SEL *)&selRef_setSignature_);
}

id sub_10028A684(uint64_t a1, uint64_t a2)
{
  return sub_10028B034(a1, a2, (Class *)_MRGroupSessionLeaderDiscoveryMessageProtobuf_ptr, (uint64_t (*)(uint64_t, uint64_t))&Data._bridgeToObjectiveC(), (SEL *)&selRef_setSignature_);
}

void sub_10028A6AC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10028A6D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_10028BF64();
  uint64_t v7 = v6;
  uint64_t result = sub_10018FE9C(a1, a2);
  *a3 = v7;
  return result;
}

void sub_10028A71C(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = [a1 identity];
  id v5 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v4];

  if (v5)
  {

    *a2 = v5;
  }
  else
  {
    __break(1u);
  }
}

id sub_10028A794()
{
  id v1 = *v0;
  id result = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (result)
  {
    id v3 = result;
    id v4 = [v1 protobuf];
    [v3 setIdentity:v4];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028A810(void *a1)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (result)
  {
    id v3 = result;
    id v4 = [a1 protobuf];
    [v3 setIdentity:v4];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028A88C()
{
  id v1 = *v0;
  id v2 = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareMessageProtobuf) init];
  if (v2)
  {
    id v3 = v2;
    id v4 = [v1 protobuf];
    [v3 setIdentity:v4];

    id v5 = [v3 data];
    if (v5)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10028A974@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10018FE08(0, &qword_10047BA80);
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 initWithData:isa];

  if (v8)
  {
    sub_10028C1F0(v8);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    int v16 = v15;

    uint64_t result = sub_10018FE9C(a1, a2);
    int v18 = v16 & 0x10101;
  }
  else
  {
    uint64_t result = sub_10018FE9C(a1, a2);
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    uint64_t v14 = 0;
    int v18 = 0;
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v14;
  *(_WORD *)(a3 + 24) = v18;
  *(unsigned char *)(a3 + 26) = BYTE2(v18);
  return result;
}

void sub_10028AA70(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10028C1F0(a1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;

  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v11 & 1;
  *(unsigned char *)(a2 + 25) = BYTE1(v11) & 1;
  *(unsigned char *)(a2 + 26) = BYTE2(v11) & 1;
}

id sub_10028AADC()
{
  if (*(unsigned char *)(v0 + 25)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *(unsigned __int8 *)(v0 + 24);
  if (*(unsigned char *)(v0 + 26)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  return sub_10028AB14(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v2 | v3);
}

id sub_10028AB14(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionParticipantProtobuf) init];
  if (result)
  {
    uint64_t v7 = result;
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 setIdentifier:v8];

    id v9 = [a3 protobuf];
    [v7 setIdentity:v9];

    [v7 setConnected:a4 & 1];
    [v7 setGuest:(a4 >> 8) & 1];
    [v7 setHidden:HIWORD(a4) & 1];
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028AC24()
{
  if (*(unsigned char *)(v0 + 25)) {
    int v1 = 256;
  }
  else {
    int v1 = 0;
  }
  int v2 = v1 | *(unsigned __int8 *)(v0 + 24);
  if (*(unsigned char *)(v0 + 26)) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  id v4 = sub_10028AB14(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v2 | v3);
  id v5 = [v4 data];

  if (v5)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10028ACCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = sub_10028C03C();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t result = sub_10018FE9C(a1, a2);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v10;
  return result;
}

void sub_10028AD28(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 participantIdentifier];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    LOBYTE(v5) = [a1 approved];
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(unsigned char *)(a2 + 16) = (_BYTE)v5;
  }
  else
  {
    __break(1u);
  }
}

id sub_10028ADAC()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  id result = [objc_allocWithZone((Class)_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (result)
  {
    int v3 = result;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setParticipantIdentifier:v4];

    [v3 setApproved:v1];
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028AE3C(uint64_t a1, uint64_t a2, char a3)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionJoinResponseMessageProtobuf) init];
  if (result)
  {
    id v5 = result;
    NSString v6 = String._bridgeToObjectiveC()();
    [v5 setParticipantIdentifier:v6];

    [v5 setApproved:a3 & 1];
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028AED0()
{
  sub_10028A324(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_10028AEDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10028BD78(a1, a2, (uint64_t (*)(void))sub_10028C124, a3);
}

void sub_10028AEF4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 participantIdentifier];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *a2 = v6;
    a2[1] = v8;
  }
  else
  {
    __break(1u);
  }
}

id sub_10028AF60(uint64_t a1, uint64_t a2)
{
  return sub_10028AF88(a1, a2, (Class *)_MRGroupSessionRemoveRequestProtobuf_ptr, (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC(), (SEL *)&selRef_setParticipantIdentifier_);
}

id sub_10028AF88(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v8 = *v5;
  uint64_t v9 = v5[1];
  id result = [objc_allocWithZone(*a3) init];
  if (result)
  {
    int v11 = result;
    uint64_t v12 = (void *)a4(v8, v9);
    objc_msgSend(v11, *a5, v12);

    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028B00C(uint64_t a1, uint64_t a2)
{
  return sub_10028B034(a1, a2, (Class *)_MRGroupSessionRemoveRequestProtobuf_ptr, (uint64_t (*)(uint64_t, uint64_t))&String._bridgeToObjectiveC(), (SEL *)&selRef_setParticipantIdentifier_);
}

id sub_10028B034(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  id result = [objc_allocWithZone(*a3) init];
  if (result)
  {
    char v10 = result;
    int v11 = (void *)a4(a1, a2);
    objc_msgSend(v10, *a5, v11);

    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028B0BC(uint64_t a1, uint64_t a2)
{
}

void sub_10028B0E4(uint64_t a1, uint64_t a2, Class *a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v9 = *v5;
  uint64_t v8 = v5[1];
  id v10 = [objc_allocWithZone(*a3) init];
  if (v10)
  {
    int v11 = v10;
    uint64_t v12 = (void *)a4(v9, v8);
    objc_msgSend(v11, *a5, v12);

    id v13 = [v11 data];
    if (v13)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10028B1A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(unsigned char *)(a9 + 25) = BYTE1(a4) & 1;
  *(unsigned char *)(a9 + 26) = BYTE2(a4) & 1;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  *(unsigned char *)(a9 + 57) = BYTE1(a8) & 1;
  *(unsigned char *)(a9 + 58) = BYTE2(a8) & 1;
  return result;
}

void sub_10028B1F0(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [a1 localParticipant];
  if (v4)
  {
    id v5 = v4;
    sub_10028C1F0(v4);
    uint64_t v23 = v6;
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    int v12 = v11;

    id v13 = [a1 leaderParticipant];
    if (v13)
    {
      uint64_t v14 = v13;
      sub_10028C1F0(v13);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      int v22 = v21;

      *(void *)a2 = v23;
      *(void *)(a2 + 8) = v8;
      *(void *)(a2 + 16) = v10;
      *(unsigned char *)(a2 + 24) = v12 & 1;
      *(unsigned char *)(a2 + 25) = BYTE1(v12) & 1;
      *(unsigned char *)(a2 + 26) = BYTE2(v12) & 1;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 40) = v18;
      *(void *)(a2 + 48) = v20;
      *(unsigned char *)(a2 + 56) = v22 & 1;
      *(unsigned char *)(a2 + 57) = BYTE1(v22) & 1;
      *(unsigned char *)(a2 + 58) = BYTE2(v22) & 1;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10028B2F8()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(void **)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  int v5 = *(unsigned __int8 *)(v0 + 25);
  int v6 = *(unsigned __int8 *)(v0 + 26);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 32);
  uint64_t v20 = *(void **)(v0 + 48);
  int v19 = *(unsigned __int8 *)(v0 + 56);
  int v7 = *(unsigned __int8 *)(v0 + 57);
  int v8 = *(unsigned __int8 *)(v0 + 58);
  id result = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v10 = result;
    if (v5) {
      int v11 = 256;
    }
    else {
      int v11 = 0;
    }
    int v12 = v11 | v4;
    if (v6) {
      int v13 = 0x10000;
    }
    else {
      int v13 = 0;
    }
    id v14 = sub_10028AB14(v1, v2, v3, v12 | v13);
    [v10 setLocalParticipant:v14];

    if (v7) {
      int v15 = 256;
    }
    else {
      int v15 = 0;
    }
    int v16 = v15 | v19;
    if (v8) {
      int v17 = 0x10000;
    }
    else {
      int v17 = 0;
    }
    id v18 = sub_10028AB14(v22, v21, v20, v16 | v17);
    [v10 setLeaderParticipant:v18];

    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028B42C()
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionIdentityShareReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(v0 + 25)) {
      int v3 = 256;
    }
    else {
      int v3 = 0;
    }
    int v4 = v3 | *(unsigned __int8 *)(v0 + 24);
    if (*(unsigned char *)(v0 + 26)) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0;
    }
    id v6 = sub_10028AB14(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16), v4 | v5);
    [v2 setLocalParticipant:v6];

    if (*(unsigned char *)(v0 + 57)) {
      int v7 = 256;
    }
    else {
      int v7 = 0;
    }
    int v8 = v7 | *(unsigned __int8 *)(v0 + 56);
    if (*(unsigned char *)(v0 + 58)) {
      int v9 = 0x10000;
    }
    else {
      int v9 = 0;
    }
    id v10 = sub_10028AB14(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), v8 | v9);
    [v2 setLeaderParticipant:v10];

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028B520()
{
}

uint64_t sub_10028B564@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  sub_10018FE08(0, &qword_10047BC18);
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v6 initWithData:isa];

  if (v8)
  {
    sub_10028C3D4(v8);
    id v8 = v9;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t result = sub_10018FE9C(a1, a2);
  }
  else
  {
    uint64_t result = sub_10018FE9C(a1, a2);
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  *a3 = v8;
  a3[1] = v11;
  a3[2] = v13;
  return result;
}

void sub_10028B630(void *a1@<X0>, void *a2@<X8>)
{
  sub_10028C3D4(a1);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
}

id sub_10028B65C()
{
  return sub_10028B668(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

id sub_10028B668(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionMemberSyncMessageProtobuf) init];
  if (!result)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  int v7 = result;
  int64_t v8 = *(void *)(a1 + 16);
  unint64_t v56 = a3;
  id v57 = result;
  uint64_t v55 = a2;
  if (v8)
  {
    uint64_t v60 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001A13FC(0, v8, 0);
    int v9 = _swiftEmptyArrayStorage;
    uint64_t v10 = (unsigned __int8 *)(a1 + 58);
    while (1)
    {
      uint64_t v11 = *(void **)(v10 - 10);
      uint64_t v12 = *(v10 - 2);
      uint64_t v13 = *(v10 - 1);
      uint64_t v14 = *v10;
      id v15 = objc_allocWithZone((Class)_MRGroupSessionParticipantProtobuf);
      swift_bridgeObjectRetain();
      id v16 = v11;
      id result = [v15 init];
      if (!result) {
        goto LABEL_34;
      }
      int v17 = result;
      NSString v18 = String._bridgeToObjectiveC()();
      [v17 setIdentifier:v18];

      id v19 = [v16 protobuf];
      [v17 setIdentity:v19];

      [v17 setConnected:v12];
      [v17 setGuest:v13];
      [v17 setHidden:v14];
      uint64_t v59 = sub_10018FE08(0, &qword_10047BA80);

      swift_bridgeObjectRelease();
      *(void *)&long long v58 = v17;
      uint64_t v60 = v9;
      unint64_t v21 = v9[2];
      unint64_t v20 = v9[3];
      if (v21 >= v20 >> 1)
      {
        sub_1001A13FC(v20 > 1, v21 + 1, 1);
        int v9 = v60;
      }
      v10 += 32;
      v9[2] = v21 + 1;
      sub_10018FF5C(&v58, &v9[4 * v21 + 4]);
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        a3 = v56;
        int v7 = v57;
        a2 = v55;
        break;
      }
    }
  }
  uint64_t v22 = (uint64_t)MRTransactionPacket_ptr;
  id v23 = objc_allocWithZone((Class)NSMutableArray);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v25 = &selRef_dismissBannerWithIdentifier_;
  id v26 = [v23 initWithArray:isa];

  [v7 setParticipants:v26];
  int64_t v27 = *(void *)(a2 + 16);
  unsigned __int8 v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    uint64_t v60 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1001A13FC(0, v27, 0);
    unsigned __int8 v29 = v60;
    unsigned __int8 v30 = (unsigned __int8 *)(a2 + 58);
    while (1)
    {
      unsigned __int8 v31 = *(void **)(v30 - 10);
      uint64_t v32 = *(v30 - 2);
      uint64_t v33 = *(v30 - 1);
      uint64_t v34 = *v30;
      id v35 = objc_allocWithZone((Class)_MRGroupSessionParticipantProtobuf);
      swift_bridgeObjectRetain();
      id v36 = v31;
      id result = [v35 init];
      if (!result) {
        goto LABEL_35;
      }
      uint64_t v37 = result;
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 setIdentifier:v38];

      id v39 = [v36 protobuf];
      [v37 setIdentity:v39];

      [v37 setConnected:v32];
      [v37 setGuest:v33];
      [v37 setHidden:v34];
      uint64_t v59 = sub_10018FE08(0, &qword_10047BA80);

      swift_bridgeObjectRelease();
      *(void *)&long long v58 = v37;
      uint64_t v60 = v29;
      unint64_t v41 = v29[2];
      unint64_t v40 = v29[3];
      if (v41 >= v40 >> 1)
      {
        sub_1001A13FC(v40 > 1, v41 + 1, 1);
        unsigned __int8 v29 = v60;
      }
      v30 += 32;
      _OWORD v29[2] = v41 + 1;
      sub_10018FF5C(&v58, &v29[4 * v41 + 4]);
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        a3 = v56;
        int v7 = v57;
        uint64_t v22 = 0x100414000;
        id v25 = &selRef_dismissBannerWithIdentifier_;
        unsigned __int8 v28 = _swiftEmptyArrayStorage;
        break;
      }
    }
  }
  id v42 = objc_allocWithZone(*(Class *)(v22 + 336));
  Class v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(v42, v25[367], v43);

  [v7 setPendingParticipants:v44];
  if (a3 >> 62) {
    goto LABEL_30;
  }
  uint64_t v45 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v45)
  {
    while (1)
    {
      uint64_t v60 = v28;
      id result = (id)sub_1001A13FC(0, v45 & ~(v45 >> 63), 0);
      if (v45 < 0) {
        break;
      }
      uint64_t v22 = 0;
      uint64_t v46 = v60;
      unsigned __int8 v28 = (void *)(a3 & 0xC000000000000001);
      id v25 = (char **)_MRUserIdentityProtobuf_ptr;
      while (v45 != v22)
      {
        if (v28) {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v47 = *(id *)(a3 + 8 * v22 + 32);
        }
        uint64_t v48 = v47;
        id result = [v47 protobuf];
        if (!result) {
          goto LABEL_36;
        }
        id v49 = result;
        uint64_t v59 = sub_10018FE08(0, &qword_10047BA88);

        *(void *)&long long v58 = v49;
        uint64_t v60 = v46;
        unint64_t v51 = v46[2];
        unint64_t v50 = v46[3];
        if (v51 >= v50 >> 1)
        {
          sub_1001A13FC(v50 > 1, v51 + 1, 1);
          uint64_t v46 = v60;
        }
        ++v22;
        _OWORD v46[2] = v51 + 1;
        sub_10018FF5C(&v58, &v46[4 * v51 + 4]);
        if (v45 == v22)
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = 0x100414000;
          id v25 = &selRef_dismissBannerWithIdentifier_;
          goto LABEL_32;
        }
      }
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      if (!v45) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_31:
  swift_bridgeObjectRelease();
LABEL_32:
  id v52 = objc_allocWithZone(*(Class *)(v22 + 336));
  Class v53 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v54 = objc_msgSend(v52, v25[367], v53);

  [v7 setMembers:v54];
  return v7;
}

void sub_10028BCEC()
{
  id v1 = sub_10028B668(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
  id v2 = [v1 data];

  if (v2)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10028BD60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10028BD78(a1, a2, sub_10028C2FC, a3);
}

uint64_t sub_10028BD78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v7 = a3();
  uint64_t v9 = v8;
  uint64_t result = sub_10018FE9C(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

void sub_10028BDD0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 errorMessage];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {

    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

id sub_10028BE48()
{
  uint64_t v1 = *(void *)(v0 + 8);
  id result = [objc_allocWithZone((Class)_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (result)
  {
    uint64_t v3 = result;
    if (v1) {
      NSString v4 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v4 = 0;
    }
    [v3 setErrorMessage:v4];

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10028BECC(uint64_t a1, NSString a2)
{
  id result = [objc_allocWithZone((Class)_MRGroupSessionErrorReplyMessageProtobuf) init];
  if (result)
  {
    NSString v4 = result;
    if (a2) {
      a2 = String._bridgeToObjectiveC()();
    }
    [v4 setErrorMessage:a2];

    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10028BF4C()
{
  sub_10028A52C(*(void *)v0, *(NSString *)(v0 + 8));
}

unint64_t sub_10028BF54(unint64_t result)
{
  if (result >= 0xB) {
    return 11;
  }
  return result;
}

void sub_10028BF64()
{
  sub_10018FE08(0, &qword_10047BC38);
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 initWithData:isa];

  if (v2)
  {
    id v3 = [v2 identity];
    id v4 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v3];

    if (v4) {
    else
    }
      __break(1u);
  }
}

id sub_10028C03C()
{
  sub_10018FE08(0, &qword_10047BC30);
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 initWithData:isa];

  if (!v2) {
    return 0;
  }
  id result = [v2 participantIdentifier];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    [v2 approved];
    return (id)v5;
  }
  __break(1u);
  return result;
}

id sub_10028C124()
{
  sub_10018FE08(0, &qword_10047BC28);
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 initWithData:isa];

  if (!v2) {
    return 0;
  }
  id result = [v2 participantIdentifier];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v5;
  }
  __break(1u);
  return result;
}

void sub_10028C1F0(void *a1)
{
  id v2 = [a1 identifier];
  if (v2)
  {
    id v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v4 = [a1 identity];
    id v5 = [objc_allocWithZone((Class)MRUserIdentity) initWithProtobuf:v4];

    if (v5)
    {
      [a1 connected];
      [a1 guest];
      [a1 hidden];
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10028C2FC()
{
  sub_10018FE08(0, &qword_10047BC10);
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 initWithData:isa];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 errorMessage];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {

    return 0;
  }
  return v5;
}

void sub_10028C3D4(void *a1)
{
  if ([a1 participants])
  {
    uint64_t v1 = 0;
    sub_10018FE08(0, &qword_10047BA80);
    static Array._forceBridgeFromObjectiveC(_:result:)();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
}

ValueMetadata *type metadata accessor for GroupSessionPushMessageCompressionType()
{
  return &type metadata for GroupSessionPushMessageCompressionType;
}

ValueMetadata *type metadata accessor for GroupSessionPushMessageKey()
{
  return &type metadata for GroupSessionPushMessageKey;
}

ValueMetadata *type metadata accessor for GroupSessionPushMessageType()
{
  return &type metadata for GroupSessionPushMessageType;
}

uint64_t getEnumTagSinglePayload for FastSyncMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FastSyncMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *id result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10028CC0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FastSyncMessageType()
{
  return &type metadata for FastSyncMessageType;
}

uint64_t destroy for FastSyncMessage(uint64_t a1)
{
  return sub_10018FE9C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s12mediaremoted15FastSyncMessageVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_10018FE44(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for FastSyncMessage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_10018FE44(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_10018FE9C(v5, v6);
  return a1;
}

uint64_t assignWithTake for FastSyncMessage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10018FE9C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncMessage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && a1[24]) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xB;
  int v5 = v3 - 11;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FastSyncMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)id result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)id result = a2 + 10;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FastSyncMessage()
{
  return &type metadata for FastSyncMessage;
}

uint64_t *initializeBufferWithCopyOfBuffer for LeaderDiscoveryMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10018FE44(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for LeaderDiscoveryMessage(uint64_t a1)
{
  return sub_10018FE9C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for LeaderDiscoveryMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10018FE44(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10018FE9C(v5, v6);
  return a1;
}

__n128 initializeWithTake for HostedRoutingSourceSession.Source(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for LeaderDiscoveryMessage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10018FE9C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LeaderDiscoveryMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LeaderDiscoveryMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LeaderDiscoveryMessage()
{
  return &type metadata for LeaderDiscoveryMessage;
}

ValueMetadata *type metadata accessor for IdentityShareMessage()
{
  return &type metadata for IdentityShareMessage;
}

void destroy for GroupSessionParticipant(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

__n128 initializeWithTake for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GroupSessionParticipant(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSessionParticipant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 27)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupSessionParticipant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 27) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionParticipant()
{
  return &type metadata for GroupSessionParticipant;
}

uint64_t sub_10028D180(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JoinResponseMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for JoinResponseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for JoinResponseMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JoinResponseMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JoinResponseMessage()
{
  return &type metadata for JoinResponseMessage;
}

uint64_t getEnumTagSinglePayload for RemoveRequestMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoveRequestMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoveRequestMessage()
{
  return &type metadata for RemoveRequestMessage;
}

void destroy for IdentityShareReplyMessage(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  id v6 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  swift_bridgeObjectRetain();
  id v7 = v4;
  swift_bridgeObjectRetain();
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v7 = *(void **)(a2 + 48);
  id v8 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

__n128 initializeWithTake for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IdentityShareReplyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentityShareReplyMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 59)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentityShareReplyMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 59) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentityShareReplyMessage()
{
  return &type metadata for IdentityShareReplyMessage;
}

uint64_t destroy for MemberSyncMessage()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s12mediaremoted17MemberSyncMessageVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MemberSyncMessage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MemberSyncMessage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MemberSyncMessage()
{
  return &type metadata for MemberSyncMessage;
}

void *initializeBufferWithCopyOfBuffer for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HostedRoutingSourceSession.Source()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for HostedRoutingSourceSession.Source(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ErrorReplyMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorReplyMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorReplyMessage()
{
  return &type metadata for ErrorReplyMessage;
}

uint64_t sub_10028D964(uint64_t a1)
{
  unint64_t v3 = *(uint64_t (**)(void))(*v1 + 128);
  uint64_t v4 = v3();
  v1[2] = a1;
  uint64_t v5 = swift_bridgeObjectRelease();
  uint64_t v6 = ((uint64_t (*)(uint64_t))v3)(v5);
  char v7 = sub_100290E1C(v4, v6);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0 || !swift_unknownObjectWeakLoadStrong())
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v1[4];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = v3();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v8 + 8))(v1, v10, ObjectType, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_10028DAA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  uint64_t v7 = sub_100291744(a2, a3, a4);
  swift_release();

  swift_unknownObjectRelease();
  return v7;
}

void *sub_10028DB1C()
{
  __n128 result = *(void **)(v0 + 40);
  if (result)
  {
    objc_msgSend(objc_msgSend(result, "recommender"), "requestCurrentContext");
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10028DB84(uint64_t a1, uint64_t a2)
{
  uint64_t v230 = a2;
  uint64_t v220 = *v2;
  uint64_t v4 = sub_100013A80((uint64_t *)&unk_10047BC50);
  __chkstk_darwin(v4 - 8);
  uint64_t v222 = (char *)&v201 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v213 = *(void *)(v239 - 8);
  uint64_t v6 = __chkstk_darwin(v239);
  uint64_t v232 = (uint64_t)&v201 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v231 = (uint64_t *)((char *)&v201 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v236 = (uint64_t)&v201 - v11;
  __chkstk_darwin(v10);
  unint64_t v237 = (uint64_t *)((char *)&v201 - v12);
  uint64_t v13 = sub_100013A80(&qword_100479588);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v210 = (uint64_t)&v201 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v214 = (uint64_t)&v201 - v17;
  __chkstk_darwin(v16);
  uint64_t v217 = (uint64_t)&v201 - v18;
  uint64_t v223 = type metadata accessor for HostedRoutingSourceSession(0);
  uint64_t v229 = *(void *)(v223 - 8);
  uint64_t v19 = __chkstk_darwin(v223);
  uint64_t v209 = (uint64_t)&v201 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v207 = (uint64_t)&v201 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v208 = (uint64_t)&v201 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v215 = (uint64_t)&v201 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v212 = (uint64_t)&v201 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v225 = (char *)&v201 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v211 = (uint64_t)&v201 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v240 = (uint64_t *)((char *)&v201 - v34);
  __chkstk_darwin(v33);
  uint64_t v216 = (uint64_t)&v201 - v35;
  uint64_t v233 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v226 = *(void *)(v233 - 8);
  __chkstk_darwin(v233);
  uint64_t v224 = (char *)&v201 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for RoutingEvent();
  uint64_t v38 = __chkstk_darwin(v37);
  uint64_t v221 = (char *)&v201 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v227 = (uint64_t)&v201 - v40;
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v234 = v41;
  uint64_t v235 = v42;
  __chkstk_darwin(v41);
  v228 = (char *)&v201 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for RoutingSessionConfiguration.Attribution();
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  id v47 = (char *)&v201 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = __chkstk_darwin(v48);
  id v52 = (uint64_t *)((char *)&v201 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = __chkstk_darwin(v50);
  uint64_t v55 = (char *)&v201 - v54;
  uint64_t v218 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v53);
  unint64_t v57 = v56;
  uint64_t v219 = v37;
  uint64_t v58 = *(int *)(v37 + 20);
  uint64_t v238 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v47, a1 + v58, v44);
  if ((*(unsigned int (**)(char *, uint64_t))(v45 + 88))(v47, v44) != enum case for RoutingSessionConfiguration.Attribution.attributed(_:))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  }
  (*(void (**)(char *, uint64_t))(v45 + 96))(v47, v44);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v55, v47, v48);
  (*(void (**)(uint64_t *, char *, uint64_t))(v49 + 16))(v52, v55, v48);
  uint64_t v59 = v49;
  uint64_t v60 = v48;
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v49 + 88))(v52, v48) == enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 96))(v52, v48);
    uint64_t v61 = *v52;
    __int16 v62 = (char *)v52[1];
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v49 + 8))(v52, v48);
    uint64_t v61 = 0;
    __int16 v62 = 0;
  }
  uint64_t v64 = v238;
  uint64_t v65 = v241;
  unint64_t v66 = (void *)v241[5];
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v55, v60);
  }
  unint64_t v204 = v57;
  long long v206 = v55;
  id v67 = v66;
  uint64_t v68 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v67);
  uint64_t v70 = v65[8];
  id v205 = v67;
  if (v70)
  {
    if (v68 == v65[7] && v70 == v69)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      v240 = (void *)v60;
      swift_bridgeObjectRelease();
      uint64_t v73 = sub_1001A69C4();
      uint64_t v74 = v234;
      uint64_t v75 = v235;
      uint64_t v76 = v228;
      (*(void (**)(char *, uint64_t, uint64_t))(v235 + 16))(v228, v73, v234);
      uint64_t v77 = v227;
      sub_100291BB8(v64, v227, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
      unint64_t v78 = v204;
      swift_bridgeObjectRetain();
      id v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v243 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136315650;
        uint64_t v82 = _typeName(_:qualified:)();
        uint64_t v242 = sub_10018A9E0(v82, v83, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v242 = sub_10018A9E0(v218, v78, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v81 + 22) = 2080;
        sub_100291F34(&qword_10047BC68, 255, (void (*)(uint64_t))type metadata accessor for RoutingEvent);
        uint64_t v84 = v227;
        uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v242 = sub_10018A9E0(v85, v86, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100291C20(v84, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%s] donateEvent<%s> - drop duplicate donation for event: %s", (uint8_t *)v81, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v75 + 8))(v228, v234);
      }
      else
      {

        sub_100291C20(v77, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
      }
      return (*(uint64_t (**)(char *, void *))(v59 + 8))(v206, v240);
    }
    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v71 = swift_bridgeObjectRelease();
    if (v72) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v71 = swift_bridgeObjectRelease();
  }
  uint64_t v227 = v61;
  uint64_t v87 = (*(uint64_t (**)(uint64_t))(*v65 + 128))(v71);
  sub_10028F91C(v87);
  uint64_t v89 = v88;
  uint64_t v91 = v90;
  uint64_t v92 = swift_bridgeObjectRelease();
  if (v89)
  {
    swift_bridgeObjectRelease();
    unint64_t v93 = *(char **)(v91 + 48);
    uint64_t v203 = *(void *)(v91 + 40);
    swift_bridgeObjectRetain();
    uint64_t v92 = swift_release();
  }
  else
  {
    uint64_t v203 = 0;
    unint64_t v93 = 0;
  }
  uint64_t v95 = (uint64_t *)v224;
  __int16 v94 = v225;
  j___s12MediaControl18RoutingInteractionV6actionAC6ActionOvg(v92);
  uint64_t v96 = v226;
  int v97 = (*(uint64_t (**)(uint64_t *, uint64_t))(v226 + 88))(v95, v233);
  if (v97 == enum case for RoutingInteraction.Action.add(_:)
    || v97 == enum case for RoutingInteraction.Action.remove(_:)
    || v97 == enum case for RoutingInteraction.Action.set(_:))
  {
    v228 = v93;
    (*(void (**)(uint64_t *, uint64_t))(v96 + 96))(v95, v233);
    uint64_t v107 = v95[2];
    uint64_t v108 = v95[3];
    swift_bridgeObjectRelease();
    uint64_t v109 = *(void *)(v230 + 16);
    if (v109)
    {
      uint64_t v110 = v230 + ((*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80));
      uint64_t v111 = *(void *)(v229 + 72);
      swift_bridgeObjectRetain();
      uint64_t v112 = v240;
      while (1)
      {
        sub_100291BB8(v110, (uint64_t)v112, type metadata accessor for HostedRoutingSourceSession);
        BOOL v113 = *v112 == v107 && v112[1] == v108;
        if (v113 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v112 = v240;
        sub_100291C20((uint64_t)v240, type metadata accessor for HostedRoutingSourceSession);
        v110 += v111;
        if (!--v109)
        {
          uint64_t v114 = v62;
          swift_bridgeObjectRelease();
          uint64_t v115 = 1;
          uint64_t v65 = v241;
          goto LABEL_48;
        }
      }
      uint64_t v114 = v62;
      swift_bridgeObjectRelease();
      uint64_t v121 = v217;
      sub_100291B54((uint64_t)v240, v217);
      uint64_t v115 = 0;
      uint64_t v65 = v241;
    }
    else
    {
      uint64_t v114 = v62;
      uint64_t v115 = 1;
LABEL_48:
      uint64_t v121 = v217;
    }
    uint64_t v122 = v229;
    uint64_t v123 = v223;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 56))(v121, v115, 1, v223);
    swift_bridgeObjectRelease();
    int v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v121, 1, v123);
    uint64_t v125 = v235;
    if (v124 == 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v206, v60);
      return sub_100009A08(v121, &qword_100479588);
    }
    sub_100291B54(v121, v216);
    sub_10018FE08(0, &qword_10047BC60);
    uint64_t v126 = swift_bridgeObjectRetain();
    uint64_t v127 = (void *)sub_100266DC0(v126);
    if (v114)
    {
      NSString v128 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v128 = 0;
    }
    uint64_t v101 = v125;
    if (v228)
    {
      NSString v159 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v159 = 0;
    }
    id v141 = v205;
    [v205 donatePickerChoiceFor:v127 bundleIdentifier:v128 contextIdentifier:v159];

    id v160 = &v245;
    goto LABEL_83;
  }
  uint64_t v225 = v62;
  uint64_t v98 = v206;
  if (v97 == enum case for RoutingInteraction.Action.setActiveSession(_:))
  {
    v228 = v93;
    (*(void (**)(uint64_t *, uint64_t))(v96 + 96))(v95, v233);
    uint64_t v99 = v95[1];
    uint64_t v100 = *(void *)(v230 + 16);
    uint64_t v101 = v235;
    if (v100)
    {
      uint64_t v102 = *v95;
      uint64_t v103 = v230 + ((*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80));
      uint64_t v104 = *(void *)(v229 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100291BB8(v103, (uint64_t)v94, type metadata accessor for HostedRoutingSourceSession);
        BOOL v105 = *v94 == v102 && v94[1] == v99;
        if (v105 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_100291C20((uint64_t)v94, type metadata accessor for HostedRoutingSourceSession);
        v103 += v104;
        if (!--v100)
        {
          swift_bridgeObjectRelease();
          uint64_t v106 = 1;
          uint64_t v98 = v206;
          uint64_t v65 = v241;
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v136 = (uint64_t)v94;
      uint64_t v137 = v214;
      sub_100291B54(v136, v214);
      uint64_t v106 = 0;
      uint64_t v98 = v206;
      uint64_t v65 = v241;
    }
    else
    {
      uint64_t v106 = 1;
LABEL_58:
      uint64_t v137 = v214;
    }
    uint64_t v138 = v229;
    uint64_t v139 = v223;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 56))(v137, v106, 1, v223);
    swift_bridgeObjectRelease();
    int v140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v137, 1, v139);
    id v141 = v205;
    if (v140 == 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v98, v60);
      return sub_100009A08(v137, &qword_100479588);
    }
    uint64_t v142 = v211;
    sub_100291B54(v137, v211);
    sub_10018FE08(0, &qword_10047BC60);
    uint64_t v143 = swift_bridgeObjectRetain();
    unint64_t v144 = (void *)sub_100266DC0(v143);
    if (v225)
    {
      NSString v145 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v145 = 0;
    }
    NSString v182 = v228;
    if (v228)
    {
      NSString v182 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v141 donatePickerChoiceFor:v144 bundleIdentifier:v145 contextIdentifier:v182];

    uint64_t v161 = v142;
    goto LABEL_111;
  }
  v240 = (void *)v60;
  uint64_t v101 = v235;
  if (v97 == enum case for RoutingInteraction.Action.setActiveItem(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v96 + 96))(v95, v233);
    uint64_t v116 = v95[1];
    uint64_t v232 = *(void *)(v230 + 16);
    if (v232)
    {
      v228 = v93;
      uint64_t v202 = v59;
      uint64_t v117 = *v95;
      uint64_t v118 = v230 + ((*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80));
      uint64_t v233 = *(void *)(v229 + 72);
      swift_bridgeObjectRetain();
      uint64_t v119 = 0;
      uint64_t v120 = v215;
      uint64_t v231 = (void *)v118;
      while (1)
      {
        sub_100291BB8(v118 + v233 * v119, v120, type metadata accessor for HostedRoutingSourceSession);
        uint64_t v146 = *(void *)(v120 + 32);
        uint64_t v147 = *(void *)(v146 + 16);
        if (v147) {
          break;
        }
LABEL_64:
        ++v119;
        uint64_t v120 = v215;
        sub_100291C20(v215, type metadata accessor for HostedRoutingSourceSession);
        if (v119 == v232)
        {
          swift_bridgeObjectRelease();
          uint64_t v158 = 1;
          uint64_t v59 = v202;
          uint64_t v64 = v238;
          unint64_t v93 = v228;
          goto LABEL_86;
        }
      }
      uint64_t v148 = v213;
      uint64_t v149 = v146 + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
      swift_bridgeObjectRetain_n();
      uint64_t v150 = *(void *)(v148 + 72);
      while (1)
      {
        unint64_t v151 = v237;
        sub_100291BB8(v149, (uint64_t)v237, type metadata accessor for HostedRoutingItem);
        if (*v151 == v117 && v151[1] == v116)
        {
          uint64_t v154 = v236;
          sub_100291BB8((uint64_t)v151, v236, type metadata accessor for HostedRoutingItem);
        }
        else
        {
          char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v154 = v236;
          sub_100291BB8((uint64_t)v151, v236, type metadata accessor for HostedRoutingItem);
          if ((v153 & 1) == 0)
          {
            sub_100291C20(v154, type metadata accessor for HostedRoutingItem);
            sub_100291C20((uint64_t)v151, type metadata accessor for HostedRoutingItem);
            goto LABEL_68;
          }
        }
        uint64_t v155 = v154;
        char v156 = *(unsigned char *)(v154 + *(int *)(v239 + 36));
        sub_100291C20(v155, type metadata accessor for HostedRoutingItem);
        sub_100291C20((uint64_t)v151, type metadata accessor for HostedRoutingItem);
        if (v156)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v157 = v210;
          sub_100291B54(v215, v210);
          uint64_t v158 = 0;
          uint64_t v59 = v202;
          uint64_t v60 = (uint64_t)v240;
          uint64_t v65 = v241;
          uint64_t v64 = v238;
          uint64_t v101 = v235;
          unint64_t v93 = v228;
          goto LABEL_87;
        }
LABEL_68:
        v149 += v150;
        if (!--v147)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v60 = (uint64_t)v240;
          uint64_t v65 = v241;
          uint64_t v101 = v235;
          uint64_t v118 = (uint64_t)v231;
          goto LABEL_64;
        }
      }
    }
    uint64_t v158 = 1;
LABEL_86:
    uint64_t v157 = v210;
LABEL_87:
    uint64_t v162 = v229;
    uint64_t v163 = v223;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 56))(v157, v158, 1, v223);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v157, 1, v163) == 1)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v206, v60);
      return sub_100009A08(v157, &qword_100479588);
    }
    sub_100291B54(v157, v212);
    sub_10018FE08(0, &qword_10047BC60);
    uint64_t v164 = swift_bridgeObjectRetain();
    uint64_t v165 = (void *)sub_100266DC0(v164);
    if (v225)
    {
      NSString v166 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v166 = 0;
    }
    NSString v199 = v93;
    if (v93)
    {
      NSString v199 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v141 = v205;
    [v205 donatePickerChoiceFor:v165 bundleIdentifier:v166 contextIdentifier:v199];

    id v160 = (uint64_t *)&v244;
LABEL_83:
    uint64_t v161 = *(v160 - 32);
LABEL_111:
    sub_100291C20(v161, type metadata accessor for HostedRoutingSourceSession);
LABEL_112:
    uint64_t v183 = (uint64_t)v222;
    uint64_t v184 = (uint64_t)v221;
    uint64_t v185 = sub_1001A6B94();
    sub_1001A6BB8(v185, v183);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v183, 1, v234) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v186 = sub_100009A08(v183, (uint64_t *)&unk_10047BC50);
    }
    else
    {
      v240 = (void *)v60;
      sub_100291BB8(v64, v184, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
      unint64_t v187 = v204;
      swift_bridgeObjectRetain();
      unint64_t v188 = Logger.logObject.getter();
      os_log_type_t v189 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v188, v189))
      {
        uint64_t v190 = swift_slowAlloc();
        uint64_t v243 = swift_slowAlloc();
        *(_DWORD *)uint64_t v190 = 136315650;
        uint64_t v191 = _typeName(_:qualified:)();
        uint64_t v242 = sub_10018A9E0(v191, v192, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v190 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v242 = sub_10018A9E0(v218, v187, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v190 + 22) = 2080;
        sub_100291F34(&qword_10047BC68, 255, (void (*)(uint64_t))type metadata accessor for RoutingEvent);
        uint64_t v193 = (uint64_t)v221;
        uint64_t v194 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v242 = sub_10018A9E0(v194, v195, &v243);
        id v141 = v205;
        uint64_t v101 = v235;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100291C20(v193, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
        _os_log_impl((void *)&_mh_execute_header, v188, v189, "[%s] donateEvent<%s> - donated event: %s", (uint8_t *)v190, 0x20u);
        swift_arrayDestroy();
        uint64_t v65 = v241;
        swift_slowDealloc();
        uint64_t v183 = (uint64_t)v222;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_100291C20(v184, (uint64_t (*)(void))type metadata accessor for RoutingEvent);
      }
      uint64_t v186 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v183, v234);
      uint64_t v60 = (uint64_t)v240;
    }
    uint64_t v196 = j___s12MediaControl18RoutingInteractionV10identifierSSvg(v186);
    uint64_t v198 = v197;

    (*(void (**)(char *, uint64_t))(v59 + 8))(v206, v60);
    v65[7] = v196;
    v65[8] = v198;
    return swift_bridgeObjectRelease();
  }
  if (v97 != enum case for RoutingInteraction.Action.handoff(_:))
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v98, v60);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v96 + 8))(v95, v233);
  }
  (*(void (**)(uint64_t *, uint64_t))(v96 + 96))(v95, v233);
  uint64_t v129 = *v95;
  uint64_t v130 = *(void *)(v230 + 16);
  if (!v130)
  {
    swift_bridgeObjectRelease();

    goto LABEL_120;
  }
  v228 = v93;
  uint64_t v131 = *(void *)(v129 + 32);
  uint64_t v132 = *(void *)(v129 + 40);
  uint64_t v226 = v129;
  unint64_t v237 = (void *)(v230
                  + ((*(unsigned __int8 *)(v229 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v229 + 80)));
  uint64_t v236 = *(void *)(v229 + 72);
  swift_bridgeObjectRetain();
  uint64_t v133 = 0;
  id v134 = v205;
  uint64_t v135 = v209;
  uint64_t v202 = v59;
  uint64_t v233 = v130;
  do
  {
    sub_100291BB8((uint64_t)v237 + v236 * v133, v135, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v167 = *(void *)(v135 + 32);
    uint64_t v168 = *(void *)(v167 + 16);
    if (v168)
    {
      uint64_t v169 = v213;
      uint64_t v170 = v167 + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
      swift_bridgeObjectRetain_n();
      uint64_t v171 = *(void *)(v169 + 72);
      while (1)
      {
        __int16 v172 = v231;
        sub_100291BB8(v170, (uint64_t)v231, type metadata accessor for HostedRoutingItem);
        if (*v172 == v131 && v172[1] == v132)
        {
          uint64_t v175 = v232;
          sub_100291BB8((uint64_t)v172, v232, type metadata accessor for HostedRoutingItem);
        }
        else
        {
          char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v175 = v232;
          sub_100291BB8((uint64_t)v172, v232, type metadata accessor for HostedRoutingItem);
          if ((v174 & 1) == 0)
          {
            sub_100291C20(v175, type metadata accessor for HostedRoutingItem);
            sub_100291C20((uint64_t)v172, type metadata accessor for HostedRoutingItem);
            goto LABEL_96;
          }
        }
        uint64_t v176 = v175;
        char v177 = *(unsigned char *)(v175 + *(int *)(v239 + 36));
        sub_100291C20(v176, type metadata accessor for HostedRoutingItem);
        sub_100291C20((uint64_t)v172, type metadata accessor for HostedRoutingItem);
        if (v177)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v178 = v207;
          sub_100291B54(v209, v207);
          sub_100291B54(v178, v208);
          sub_10018FE08(0, &qword_10047BC60);
          uint64_t v179 = swift_bridgeObjectRetain();
          uint64_t v180 = (void *)sub_100266DC0(v179);
          if (v225)
          {
            NSString v181 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v181 = 0;
          }
          uint64_t v59 = v202;
          uint64_t v64 = v238;
          uint64_t v60 = (uint64_t)v240;
          uint64_t v65 = v241;
          uint64_t v101 = v235;
          id v141 = v205;
          if (v228)
          {
            NSString v200 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v200 = 0;
          }
          [v141 donatePickerChoiceFor:v180 bundleIdentifier:v181 contextIdentifier:v200];

          sub_100291C20(v208, type metadata accessor for HostedRoutingSourceSession);
          swift_release();
          goto LABEL_112;
        }
LABEL_96:
        v170 += v171;
        --v168;
        uint64_t v60 = (uint64_t)v240;
        if (!v168)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v59 = v202;
          id v134 = v205;
          uint64_t v135 = v209;
          uint64_t v130 = v233;
          break;
        }
      }
    }
    ++v133;
    sub_100291C20(v135, type metadata accessor for HostedRoutingSourceSession);
  }
  while (v133 != v130);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v98 = v206;
LABEL_120:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v98, v60);
  return swift_release();
}

void *sub_10028F91C(uint64_t a1)
{
  __n128 result = (void *)sub_10022EAC4(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_1002916B0(&v5, (uint64_t)result, v3, 0, a1);
  }
}

void sub_10028F9A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100013A80((uint64_t *)&unk_10047BC50);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1001A6B94();
  sub_1001A6BB8(v5, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    sub_100009A08((uint64_t)v4, (uint64_t *)&unk_10047BC50);
    uint64_t v8 = *(void **)(v1 + 40);
    if (!v8) {
      return;
    }
LABEL_7:
    id v15 = v8;
    id v16 = [v15 recommendedRoutes];
    sub_100013A80(&qword_10047BF30);
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      id v29 = v15;
      uint64_t v30 = v1;
      if (v18) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v29 = v15;
      uint64_t v30 = v1;
      if (v18)
      {
LABEL_9:
        if (v18 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v19 = 0;
        uint64_t v20 = &_swiftEmptyDictionarySingleton;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
          {
            uint64_t v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v21 = *(void **)(v17 + 8 * v19 + 32);
            swift_unknownObjectRetain();
          }
          ++v19;
          id v22 = objc_msgSend(objc_msgSend(v21, "route", v29, v30), "routeIdentifier");
          swift_unknownObjectRelease();
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          type metadata accessor for RouteRelevance();
          uint64_t v26 = swift_allocObject();
          uint64_t v27 = (void *)swift_unknownObjectRetain();
          sub_1002908D4(v27);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v32 = v20;
          sub_100291388(v26, v23, v25, isUniquelyReferenced_nonNull_native);
          uint64_t v20 = v32;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v18 != v19);
        goto LABEL_17;
      }
    }
    uint64_t v20 = &_swiftEmptyDictionarySingleton;
LABEL_17:
    swift_bridgeObjectRelease();
    sub_10028D964((uint64_t)v20);

    return;
  }
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v30 = v1;
    uint64_t v32 = (void *)v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = _typeName(_:qualified:)();
    uint64_t v31 = sub_10018A9E0(v13, v14, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] updateRecommendations", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v30;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  uint64_t v8 = *(void **)(v1 + 40);
  if (v8) {
    goto LABEL_7;
  }
}

uint64_t sub_10028FDBC(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1002908D4(a1);
  return v2;
}

uint64_t sub_10028FDFC()
{
  swift_bridgeObjectRelease();
  sub_1001B9788(v0 + 24);

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10028FE5C()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = result + 64;
  unint64_t v7 = v5 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v15 = v14 | (v3 << 6);
      goto LABEL_22;
    }
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v8) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v3;
    if (!v17)
    {
      int64_t v3 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_26;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v3);
      if (!v17)
      {
        int64_t v3 = v16 + 2;
        if (v16 + 2 >= v8) {
          goto LABEL_26;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v3);
        if (!v17) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_22:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v21 = *v19;
    unint64_t v20 = v19[1];
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v23 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0) {
      uint64_t v23 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (v23)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v20 = 0xEC000000474E4952;
      uint64_t v21 = 0x5453205954504D45;
    }
    swift_retain();
    v9._countAndFlagsBits = v21;
    v9._object = (void *)v20;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540945696;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v22 + 136))();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 10;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v8)
  {
LABEL_26:
    swift_release();
    return 0xD00000000000002CLL;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v3 = v18;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v3);
    ++v18;
    if (v17) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1002900D0()
{
  return sub_10028FE5C();
}

void sub_1002900F4(uint64_t a1)
{
  sub_100290530(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_100290100(__int16 a1)
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  if (a1) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A53437369202CLL;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  if ((a1 & 0x100) != 0) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return 0x203A4154437369;
}

Swift::Int sub_1002901F0()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100290250()
{
  Swift::UInt8 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100290290()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1002902EC()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_100290100(v1 | *v0);
}

BOOL sub_100290308(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

double sub_100290330()
{
  return -INFINITY;
}

unint64_t sub_10029033C(unint64_t result, unint64_t a2, char a3)
{
  if (result - 2 >= 3)
  {
    unint64_t v3 = 0xFFF0000000000000;
    if (a3) {
      unint64_t v4 = 0xFFF0000000000000;
    }
    else {
      unint64_t v4 = a2;
    }
    if (a3) {
      unint64_t v5 = 0xFFF0000000000000;
    }
    else {
      unint64_t v5 = a2;
    }
    if ((a3 & 1) == 0) {
      unint64_t v3 = a2;
    }
    if (result) {
      unint64_t v3 = v5;
    }
    if (result == 1) {
      return v4;
    }
    else {
      return v3;
    }
  }
  return result;
}

uint64_t sub_1002903A0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      _StringGuts.grow(_:)(19);
      unint64_t v3 = 0x80000001003B9540;
      unint64_t v4 = 0xD000000000000010;
    }
    else
    {
      _StringGuts.grow(_:)(35);
      v5._countAndFlagsBits = 0xD000000000000016;
      v5._object = (void *)0x80000001003B9520;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      unint64_t v4 = 0x203A6B6E6172202CLL;
      unint64_t v3 = 0xE800000000000000;
    }
  }
  else
  {
    _StringGuts.grow(_:)(23);
    unint64_t v4 = 0xD000000000000014;
    unint64_t v3 = 0x80000001003B9560;
  }
  String.append(_:)(*(Swift::String *)&v4);
  Double.write<A>(to:)();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

void sub_100290530(uint64_t a1, Swift::UInt a2, Swift::UInt a3, unsigned __int8 a4)
{
  if (a4)
  {
    if (a4 == 1)
    {
      Swift::UInt v5 = 1;
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v5 = a2;
      a2 = a3;
    }
  }
  else
  {
    Swift::UInt v5 = a4;
  }
  Hasher._combine(_:)(v5);
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = a2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
}

uint64_t sub_1002905A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002908A0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100291D74);
}

uint64_t sub_1002905B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002908A0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1002905D0);
}

BOOL sub_1002905D0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a6)
  {
    if (a3)
    {
      unint64_t v6 = 0;
      return v6 >= a3;
    }
    goto LABEL_13;
  }
  if (a6 == 1)
  {
    if (a3 != 1)
    {
      unint64_t v6 = 1;
      return v6 >= a3;
    }
LABEL_13:
    BOOL v9 = *(double *)&a4 < *(double *)&a1;
    if (*(double *)&a4 == *(double *)&a1) {
      BOOL v9 = 0;
    }
    return !v9;
  }
  if (a3 != 2)
  {
    unint64_t v6 = 2;
    return v6 >= a3;
  }
  BOOL v7 = *(double *)&a5 < *(double *)&a2;
  if (*(double *)&a5 == *(double *)&a2) {
    BOOL v7 = 0;
  }
  if (a4 != a1) {
    BOOL v7 = a4 < a1;
  }
  return !v7;
}

uint64_t sub_100290668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002908A0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100290680);
}

BOOL sub_100290680(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a3)
  {
    if (a6)
    {
      unint64_t v6 = 0;
      return v6 >= a6;
    }
    goto LABEL_13;
  }
  if (a3 == 1)
  {
    if (a6 != 1)
    {
      unint64_t v6 = 1;
      return v6 >= a6;
    }
LABEL_13:
    BOOL v9 = *(double *)&a1 < *(double *)&a4;
    if (*(double *)&a1 == *(double *)&a4) {
      BOOL v9 = 0;
    }
    return !v9;
  }
  if (a6 != 2)
  {
    unint64_t v6 = 2;
    return v6 >= a6;
  }
  BOOL v7 = *(double *)&a2 < *(double *)&a5;
  if (*(double *)&a2 == *(double *)&a5) {
    BOOL v7 = 0;
  }
  if (a1 != a4) {
    BOOL v7 = a1 < a4;
  }
  return !v7;
}

uint64_t sub_100290718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002908A0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100290730);
}

BOOL sub_100290730(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a6)
  {
    if (a3)
    {
      unint64_t v6 = 0;
      return v6 < a3;
    }
    return *(double *)&a4 != *(double *)&a1 && *(double *)&a4 < *(double *)&a1;
  }
  if (a6 == 1)
  {
    if (a3 != 1)
    {
      unint64_t v6 = 1;
      return v6 < a3;
    }
    return *(double *)&a4 != *(double *)&a1 && *(double *)&a4 < *(double *)&a1;
  }
  if (a3 != 2)
  {
    unint64_t v6 = 2;
    return v6 < a3;
  }
  BOOL v7 = *(double *)&a5 < *(double *)&a2;
  if (*(double *)&a5 == *(double *)&a2) {
    BOOL v7 = 0;
  }
  if (a4 == a1) {
    return v7;
  }
  else {
    return a4 < a1;
  }
}

Swift::Int sub_1002907BC()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_100290530((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100290818(uint64_t a1)
{
  sub_100290530(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_100290824()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 8);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_100290530((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10029087C()
{
  return sub_1002903A0(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100290888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002908A0(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_100291C80);
}

uint64_t sub_1002908A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

BOOL sub_1002908C4()
{
  return *(unsigned char *)(v0 + 32) == 1;
}

uint64_t sub_1002908D4(void *a1)
{
  id v3 = [a1 classification];
  id v4 = [a1 sortingHint];
  Swift::UInt v5 = v4;
  if (v4)
  {
    [v4 doubleValue];
    unint64_t v7 = v6;

    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 0;
  }
  *(void *)(v1 + 16) = sub_10029033C((unint64_t)v3, v8, v5 == 0);
  *(void *)(v1 + 24) = v9;
  *(unsigned char *)(v1 + 32) = v10;
  unsigned __int8 v11 = [a1 isCallToAction];
  unsigned __int8 v12 = [a1 isLockScreenControl];
  *(unsigned char *)(v1 + 33) = v11;
  *(unsigned char *)(v1 + 34) = v12;
  id v13 = [a1 contextIdentifier];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  *(void *)(v1 + 40) = v14;
  *(void *)(v1 + 48) = v16;
  if (([a1 respondsToSelector:"reason"] & 1) != 0
    && (id v17 = [a1 reason]) != 0)
  {
    int64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  *(void *)(v1 + 56) = v19;
  *(void *)(v1 + 64) = v21;
  return v1;
}

uint64_t sub_100290A40()
{
  _StringGuts.grow(_:)(105);
  v1._countAndFlagsBits = 60;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0x80000001003B9580;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  v4._countAndFlagsBits = sub_1002903A0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000018;
  v5._object = (void *)0x80000001003B95A0;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + 34)) {
    __int16 v6 = 256;
  }
  else {
    __int16 v6 = 0;
  }
  v7._countAndFlagsBits = sub_100290100(v6 | *(unsigned __int8 *)(v0 + 33));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  v8._object = (void *)0x80000001003B95C0;
  String.append(_:)(v8);
  if (*(void *)(v0 + 64))
  {
    uint64_t v9 = *(void *)(v0 + 56);
    char v10 = *(void **)(v0 + 64);
  }
  else
  {
    char v10 = (void *)0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x80000001003B95E0;
  String.append(_:)(v12);
  uint64_t v14 = *(void *)(v0 + 40);
  id v13 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t sub_100290C2C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int sub_100290C6C()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 112))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100290CCC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_100290D10()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int sub_100290D54()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 112))(v2);
  return Hasher._finalize()();
}

BOOL sub_100290DB4(uint64_t *a1, uint64_t *a2)
{
  return sub_100291E04(*a1, *a2);
}

uint64_t sub_100290DCC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

BOOL sub_100290E10(uint64_t *a1, uint64_t *a2)
{
  return sub_100291CF4(*a1, *a2);
}

uint64_t sub_100290E1C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v31 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_29;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v12 >= v31) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v31) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v31) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13)
        {
          int64_t v4 = v12 + 3;
          if (v12 + 3 >= v31) {
            return 1;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v4);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_29:
    Swift::String v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v19 = sub_100013660(v16, v17);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      swift_release();
      return 0;
    }
    uint64_t v22 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
    double v23 = *(double *)(v22 + 16);
    double v24 = *(double *)(v22 + 24);
    int v25 = *(unsigned __int8 *)(v22 + 32);
    double v26 = *(double *)(v18 + 16);
    double v27 = *(double *)(v18 + 24);
    int v28 = *(unsigned __int8 *)(v18 + 32);
    uint64_t result = swift_release();
    if (v25)
    {
      if (v25 == 1)
      {
        if (v28 != 1 || v23 != v26) {
          return 0;
        }
      }
      else
      {
        if (v28 != 2) {
          return 0;
        }
        if (*(void *)&v23 != *(void *)&v26 || v24 != v27) {
          return 0;
        }
      }
    }
    else
    {
      if (v28) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v23 == v26;
      }
      if (!v9) {
        return 0;
      }
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v31) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v31) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_28;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100291070(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047BF38);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100291388(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100013660(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002914F8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100291070(v15, a4 & 1);
  unint64_t v21 = sub_100013660(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_1002914F8()
{
  Swift::String v1 = v0;
  sub_100013A80(&qword_10047BF38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002916B0(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *uint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_retain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100291744(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v6 = sub_100013A80(&qword_100478278);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100013A80((uint64_t *)&unk_10047BF40);
  uint64_t v27 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 32) = 0;
  uint64_t v28 = v4 + 24;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 72) = a1;
  uint64_t v16 = self;
  id v17 = a1;
  id v18 = [v16 server];
  id v19 = [v18 routingServer];

  id v20 = [v19 recommendationController];
  if (v20)
  {
    unint64_t v21 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v20;
    id v26 = v20;

    id v22 = [self defaultCenter];
    NSNotificationCenter.publisher(for:object:)();

    id v31 = v17;
    uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 1, 1, v23);
    sub_10018FE08(0, (unint64_t *)&qword_100479FC0);
    sub_100291F34((unint64_t *)&unk_10047BF50, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
    sub_1001BB4CC();
    Publisher.receive<A>(on:options:)();
    sub_100009A08((uint64_t)v8, &qword_100478278);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_allocObject();
    swift_weakInit();
    sub_1002922B4();
    uint64_t v24 = Publisher<>.sink(receiveValue:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v13);
    *(void *)(v4 + 48) = v24;
    swift_release();
  }
  sub_10028F9A8();
  *(void *)(v4 + 32) = v29;
  swift_unknownObjectWeakAssign();
  return v4;
}

uint64_t sub_100291B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSourceSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100291BB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100291C20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_100291C80(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    BOOL v6 = *(double *)&a1 == *(double *)&a4;
    if (a6 != 1) {
      BOOL v6 = 0;
    }
    BOOL v7 = *(double *)&a2 == *(double *)&a5;
    if (a1 != a4) {
      BOOL v7 = 0;
    }
    BOOL v8 = a6 == 2 && v7;
    if (a3 == 1) {
      return v6;
    }
    else {
      return v8;
    }
  }
  else
  {
    return !a6 && *(double *)&a1 == *(double *)&a4;
  }
}

BOOL sub_100291CF4(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  double v3 = *(double *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(unsigned char *)(a1 + 32)) {
    return !*(unsigned char *)(a2 + 32) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 32) == 1) {
    return v4 == 1 && v2 == v3;
  }
  if (v4 != 2 || *(void *)&v2 != *(void *)&v3) {
    return 0;
  }
  return *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

BOOL sub_100291D74(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a3)
  {
    if (a6)
    {
      unint64_t v6 = 0;
      return v6 < a6;
    }
    return *(double *)&a1 != *(double *)&a4 && *(double *)&a1 < *(double *)&a4;
  }
  if (a3 == 1)
  {
    if (a6 != 1)
    {
      unint64_t v6 = 1;
      return v6 < a6;
    }
    return *(double *)&a1 != *(double *)&a4 && *(double *)&a1 < *(double *)&a4;
  }
  if (a6 != 2)
  {
    unint64_t v6 = 2;
    return v6 < a6;
  }
  BOOL v7 = *(double *)&a2 < *(double *)&a5;
  if (*(double *)&a2 == *(double *)&a5) {
    BOOL v7 = 0;
  }
  if (a1 == a4) {
    return v7;
  }
  else {
    return a1 < a4;
  }
}

BOOL sub_100291E04(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  double v3 = *(double *)(a2 + 16);
  unint64_t v4 = *(unsigned __int8 *)(a2 + 32);
  if (!*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a2 + 32))
    {
      unint64_t v5 = 0;
      return v5 < v4;
    }
    return v2 != v3 && v2 < v3;
  }
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    if (v4 != 1)
    {
      unint64_t v5 = 1;
      return v5 < v4;
    }
    return v2 != v3 && v2 < v3;
  }
  if (v4 != 2)
  {
    unint64_t v5 = 2;
    return v5 < v4;
  }
  double v6 = *(double *)(a2 + 24);
  double v7 = *(double *)(a1 + 24);
  BOOL v8 = v7 < v6;
  if (v7 == v6) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(void *)&v2 == *(void *)&v3;
  BOOL v10 = *(void *)&v2 < *(void *)&v3;
  if (v9) {
    return v8;
  }
  else {
    return v10;
  }
}

unint64_t sub_100291E94()
{
  unint64_t result = qword_10047BC70;
  if (!qword_10047BC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BC70);
  }
  return result;
}

uint64_t sub_100291EEC(uint64_t a1, uint64_t a2)
{
  return sub_100291F34(&qword_10047BC80, a2, (void (*)(uint64_t))type metadata accessor for RouteRelevance);
}

uint64_t sub_100291F34(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for RouteRelevance()
{
  return self;
}

uint64_t type metadata accessor for RoutingRecommendationDataSource()
{
  return self;
}

_WORD *initializeBufferWithCopyOfBuffer for RouteRelevance.InteractiveRelevance(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RouteRelevance.InteractiveRelevance(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RouteRelevance.InteractiveRelevance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100292140);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RouteRelevance.InteractiveRelevance()
{
  return &type metadata for RouteRelevance.InteractiveRelevance;
}

uint64_t getEnumTagSinglePayload for RouteRelevance.Classification(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RouteRelevance.Classification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100292204(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10029220C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RouteRelevance.Classification()
{
  return &type metadata for RouteRelevance.Classification;
}

uint64_t sub_100292224()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029225C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10028F9A8();
    return swift_release();
  }
  return result;
}

unint64_t sub_1002922B4()
{
  unint64_t result = qword_10047BF60;
  if (!qword_10047BF60)
  {
    sub_10018F8A4((uint64_t *)&unk_10047BF40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF60);
  }
  return result;
}

uint64_t sub_100292310()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10019001C(v0, qword_1004819D8);
  sub_10018A9A8(v0, (uint64_t)qword_1004819D8);
  id v1 = (id)*sub_1001A6778();
  return Logger.init(_:)();
}

uint64_t sub_10029236C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10029B0C4();

  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

void *sub_1002923B8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1002923E8(uint64_t a1)
{
  unint64_t v2 = sub_10029B0C4();

  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_100292424(uint64_t a1)
{
  unint64_t v2 = sub_10029B0C4();

  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_100292460()
{
  return 0xD000000000000028;
}

uint64_t sub_10029247C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10029B0C4();

  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

BOOL sub_1002924D0(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1002924E0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  uint64_t result = a2 == 2 && a1 == 2;
  if (v2 != 2)
  {
    BOOL v4 = ((a2 ^ v2) & 1) == 0;
    if (a2 == 2) {
      return result;
    }
    else {
      return v4;
    }
  }
  return result;
}

BOOL sub_100292518(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2) {
    return ((v3 ^ v2) & 1) == 0;
  }
  return result;
}

void sub_10029254C()
{
  uint64_t v1 = v0;
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10018A9A8(v2, (uint64_t)qword_1004819D8);
  swift_retain_n();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    uint64_t v6 = _typeName(_:qualified:)();
    sub_10018A9E0(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v8 = *(void *)(v1 + 16);
    unint64_t v9 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    sub_10018A9E0(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_beginAccess();
    uint64_t v10 = String.init<A>(describing:)();
    sub_10018A9E0(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s]<%{public}s> Updated transportType: %s", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1002927E0()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

void sub_100292814(char a1)
{
  char v2 = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 48) = v2;
  sub_10029254C();
}

uint64_t (*sub_100292858(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1002928B0;
}

uint64_t sub_1002928B0(uint64_t a1, char a2)
{
  return sub_100292C44(a1, a2, (uint64_t (*)(uint64_t))sub_10029254C);
}

void sub_1002928C8()
{
  uint64_t v1 = v0;
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10018A9A8(v2, (uint64_t)qword_1004819D8);
  swift_retain_n();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    uint64_t v6 = _typeName(_:qualified:)();
    sub_10018A9E0(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v8 = *(void *)(v1 + 16);
    unint64_t v9 = *(void *)(v1 + 24);
    swift_bridgeObjectRetain();
    sub_10018A9E0(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    swift_beginAccess();
    uint64_t v10 = String.init<A>(describing:)();
    sub_10018A9E0(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s]<%{public}s> Updated state: %s", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100292B5C()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 49);
}

void sub_100292B90(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 49) = a1;
  sub_1002928C8();
}

uint64_t (*sub_100292BD4(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_100292C2C;
}

uint64_t sub_100292C2C(uint64_t a1, char a2)
{
  return sub_100292C44(a1, a2, (uint64_t (*)(uint64_t))sub_1002928C8);
}

uint64_t sub_100292C44(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return a3(result);
  }
  return result;
}

uint64_t (*sub_100292C90())()
{
  return j__swift_endAccess;
}

uint64_t sub_100292CE4()
{
  swift_beginAccess();
  return *(void *)(v0 + 64);
}

uint64_t sub_100292D18(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_100292D58())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100292DAC()
{
  swift_beginAccess();
  return *(void *)(v0 + 72);
}

uint64_t sub_100292DE0(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*sub_100292E20())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100292E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  *(_WORD *)(v11 + 48) = 512;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  *(void *)(v11 + 56) = &_swiftEmptyDictionarySingleton;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(void *)(v11 + 16) = a3;
  *(void *)(v11 + 24) = a4;
  *(void *)(v11 + 88) = a6;
  swift_unknownObjectUnownedInit();
  swift_unknownObjectRelease();
  return v11;
}

void sub_100292F10(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10018FDAC(a1, (uint64_t)v16);
  if (swift_dynamicCast())
  {
    long long v4 = v17[0];
    swift_unknownObjectUnownedLoadStrong();
    uint64_t v5 = *(void *)(v1 + 88);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v5 + 8))(v1, v4, *((void *)&v4 + 1), ObjectType, v5);
    swift_unknownObjectRelease();
    sub_10018FE9C(v4, *((unint64_t *)&v4 + 1));
    return;
  }
  sub_10018FDAC(a1, (uint64_t)v16);
  uint64_t v7 = sub_100013A80(&qword_10047A0E8);
  if (swift_dynamicCast())
  {
    uint64_t v8 = *(void *)&v17[0];
    unint64_t v9 = sub_100289A20();
    uint64_t v10 = *((void *)v9 + 1);
    *(void *)&v17[0] = *(void *)v9;
    *((void *)&v17[0] + 1) = v10;
    swift_bridgeObjectRetain_n();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v8 + 16))
    {
      unint64_t v11 = sub_10018C3C4((uint64_t)v16);
      if (v12)
      {
        sub_10018FDAC(*(void *)(v8 + 56) + 32 * v11, (uint64_t)v15);
        sub_10018FFC8((uint64_t)v16);
        swift_bridgeObjectRelease();
        sub_10018FF5C(v15, v17);
        swift_dynamicCast();
        v16[3] = v7;
        v16[0] = v8;
        uint64_t v13 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(*(void *)v2 + 208))(v17);
        sub_100293118((uint64_t)v16, v14);
        v13(v17, 0);
        sub_10029321C();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_100293118(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_10018FF5C((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100299C98(v14, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100194AE4(a1);
    unint64_t v7 = sub_100298E44(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *int v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_10029A120();
        uint64_t v11 = v13;
      }
      sub_10018FF5C((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_1002998F4(v9, v11);
      *int v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_100194AE4((uint64_t)v14);
  }
}

void sub_10029321C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*v0 + 240);
  uint64_t v3 = v2();
  long long v4 = *(uint64_t (**)(void))(*v0 + 192);
  uint64_t v5 = v4();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_100298E44(v3), (v7 & 1) != 0))
  {
    sub_10018FDAC(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v42);
    swift_bridgeObjectRelease();
    if (*((void *)&v43 + 1))
    {
      char v8 = sub_10018FF5C(&v42, v45);
      uint64_t v9 = ((uint64_t (*)(_OWORD *))v2)(v8);
      long long v42 = 0u;
      long long v43 = 0u;
      char v10 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(*v1 + 208))(v44);
      sub_100293118((uint64_t)&v42, v9);
      v10(v44, 0);
      sub_10018FDAC((uint64_t)v45, (uint64_t)&v42);
      sub_100013A80(&qword_10047A0E8);
      swift_dynamicCast();
      uint64_t v11 = *(void *)&v44[0];
      uint64_t v12 = sub_100289A14();
      uint64_t v13 = *((void *)v12 + 1);
      *(void *)&v44[0] = *(void *)v12;
      *((void *)&v44[0] + 1) = v13;
      swift_bridgeObjectRetain_n();
      AnyHashable.init<A>(_:)();
      if (*(void *)(v11 + 16) && (unint64_t v14 = sub_10018C3C4((uint64_t)&v42), (v15 & 1) != 0))
      {
        sub_10018FDAC(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v40);
      }
      else
      {
        long long v40 = 0u;
        long long v41 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v41 + 1))
      {
        sub_10018FFC8((uint64_t)&v42);
        swift_bridgeObjectRelease();
        sub_10018FF5C(&v40, v44);
        swift_dynamicCast();
        swift_unknownObjectUnownedLoadStrong();
        uint64_t v30 = v1[11];
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v30 + 8))(v1, v38, v39, ObjectType, v30);
        swift_unknownObjectRelease();
        uint64_t v32 = (uint64_t (*)(long long *, void))(*(uint64_t (**)(long long *))(*v1 + 256))(&v42);
        if (!__OFADD__(*v33, 1))
        {
          ++*v33;
          uint64_t v34 = v32(&v42, 0);
          uint64_t v35 = *(void *)(((uint64_t (*)(uint64_t))v4)(v34) + 16);
          uint64_t v36 = swift_bridgeObjectRelease();
          if (v35)
          {
            sub_10029321C(v36);
            sub_10018FE9C(v38, v39);
            sub_10018FD5C((uint64_t)v45);
          }
          else
          {
            sub_10018FD5C((uint64_t)v45);
            sub_10018FE9C(v38, v39);
          }
          return;
        }
        __break(1u);
      }
      __break(1u);
      return;
    }
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_100194AE4((uint64_t)&v42);
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10018A9A8(v16, (uint64_t)qword_1004819D8);
  swift_retain_n();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    *(void *)&long long v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315906;
    uint64_t v20 = _typeName(_:qualified:)();
    uint64_t v37 = v4;
    *(void *)&v45[0] = sub_10018A9E0(v20, v21, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v22 = v1[2];
    unint64_t v23 = v1[3];
    swift_bridgeObjectRetain();
    *(void *)&v45[0] = sub_10018A9E0(v22, v23, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v24 = swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2050;
    uint64_t v25 = ((uint64_t (*)(uint64_t))v2)(v24);
    swift_release();
    *(void *)&v45[0] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v26 = swift_release();
    *(_WORD *)(v19 + 32) = 2082;
    ((void (*)(uint64_t))v37)(v26);
    uint64_t v27 = Dictionary.Keys.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    *(void *)&v45[0] = sub_10018A9E0(v27, v29, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s]<%{public}s> still waiting for message: %{public}ld with reordered messages %{public}s", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100293830()
{
  uint64_t v1 = v0;
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10018A9A8(v2, (uint64_t)qword_1004819D8);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = _typeName(_:qualified:)();
    sub_10018A9E0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v8 = v1[2];
    unint64_t v9 = v1[3];
    swift_bridgeObjectRetain();
    sub_10018A9E0(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%s]<%s> resetting state.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(void))(*v1 + 224))(0);
  return (*(uint64_t (**)(void))(*v1 + 248))(0);
}

uint64_t sub_100293AA4()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100293AFC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100298E1C(v0 + 80);

  return swift_deallocClassInstance();
}

Swift::Int sub_100293B4C()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 320))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100293BB4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100293BE0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328))();
}

uint64_t sub_100293C2C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320))();
}

Swift::Int sub_100293C78()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 320))(v2);
  return Hasher._finalize()();
}

void *sub_100293CE0(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ObjectType = swift_getObjectType();

  return sub_10029A754(a1, a2, a4, v4, ObjectType, a3);
}

uint64_t sub_100293D4C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 40);
    if (*(void *)(v2 + 16))
    {
      *(void *)(v1 + 40) = &_swiftEmptyDictionarySingleton;
      swift_unknownObjectUnownedLoadStrong();
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, v2, ObjectType, v3);
      swift_release();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100293E28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = (uint64_t *)(v3 + 40);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 40);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_9;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_100298E88(a3);
  if ((v10 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_beginAccess();
    swift_retain();
    sub_10018FE44(a1, a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26[0] = *v7;
    *unint64_t v7 = 0x8000000000000000;
    sub_100299DD4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *unint64_t v7 = v26[0];
    swift_release();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  uint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_10018FE44(*v11, v13);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10018FE9C(v12, v13);
  swift_beginAccess();
  swift_retain();
  char v14 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v7;
  uint64_t v15 = v27;
  *unint64_t v7 = 0x8000000000000000;
  uint64_t v16 = swift_retain();
  unint64_t v18 = sub_100298E88(v16);
  uint64_t v19 = *(void *)(v15 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_15;
  }
  LOBYTE(v13) = v17;
  if (*(void *)(v15 + 24) >= v21)
  {
    if (v14)
    {
      if ((v17 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
LABEL_15:
    sub_10029A2E4();
    if ((v13 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  sub_1002992B8(v21, v14);
  unint64_t v22 = sub_100298E88(a3);
  if ((v13 & 1) != (v23 & 1))
  {
LABEL_17:
    type metadata accessor for ConnectedParticipant();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v22;
  if ((v13 & 1) == 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_12:
  *(_OWORD *)uint64_t v26 = *(_OWORD *)(*(void *)(v27 + 56) + 16 * v18);
  Data.append(_:)();
  sub_10029A660(v26, 1, &v27, v18, a3);
  sub_1001A3954(v26[0], v26[1]);
  swift_release();
  *unint64_t v7 = v27;
  swift_endAccess();
  return swift_release();
}

uint64_t sub_10029409C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 40);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100298E88(a1);
  if ((v5 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 56) + 16 * v4;
  uint64_t v7 = *(void *)v6;
  sub_10018FE44(*(void *)v6, *(void *)(v6 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v8 = swift_retain();
  sub_100298F1C(v8, &v10);
  swift_release();
  sub_1001A3954(v10, *((unint64_t *)&v10 + 1));
  swift_endAccess();
  return v7;
}

uint64_t sub_1002941A0()
{
  sub_100298E1C(v0 + 24);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002941F0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100294228(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

void sub_100294270()
{
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10018A9A8(v0, (uint64_t)qword_1004819D8);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v4 = _typeName(_:qualified:)();
    sub_10018A9E0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    swift_beginAccess();
    uint64_t v6 = String.init<A>(describing:)();
    sub_10018A9E0(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Updated transportType: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1002944A4()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

void sub_1002944D8(char a1)
{
  char v2 = a1 & 1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 64) = v2;
  sub_100294270();
}

void sub_10029451C()
{
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10018A9A8(v0, (uint64_t)qword_1004819D8);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    uint64_t v4 = _typeName(_:qualified:)();
    sub_10018A9E0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v3 + 12) = 2080;
    swift_beginAccess();
    uint64_t v6 = String.init<A>(describing:)();
    sub_10018A9E0(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "[%s] Updated state: %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100294750()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 65);
}

void sub_100294784(char a1)
{
  swift_beginAccess();
  *(unsigned char *)(v1 + 65) = a1;
  sub_10029451C();
}

uint64_t sub_1002947C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = swift_allocObject();
  sub_100294848(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t sub_100294848(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 56) = &_swiftEmptyDictionarySingleton;
  *(_WORD *)(v6 + 64) = 512;
  *(_OWORD *)(v6 + 72) = xmmword_1003C8D50;
  *(_OWORD *)(v6 + 88) = xmmword_1003C8D50;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 24) = a5;
  swift_unknownObjectUnownedInit();
  *(void *)(v6 + 32) = a6;
  type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler();
  unint64_t v9 = (void *)swift_allocObject();
  id v10 = a6;
  swift_retain();
  uint64_t v11 = sub_10029A7CC(a3, v6, v10, v9);
  swift_unknownObjectRelease();
  *(void *)(v6 + 104) = v11;
  swift_release();
  return v6;
}

void (*sub_100294914(uint64_t a1, uint64_t a2))(uint64_t *, void)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  uint64_t v34 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v35 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = (void (*)(uint64_t *, void))swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v32 = v2;
  uint64_t v33 = v4;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = *(void **)(*(void *)(v4 + 48) + 8 * i);
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 56) + 16 * i);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_retain();
    sub_10018FE44(v17, v18);
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10018A9A8(v19, (uint64_t)qword_1004819D8);
    swift_retain_n();
    BOOL v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    int64_t v36 = v9;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v23 = _typeName(_:qualified:)();
      *(void *)(v22 + 4) = sub_10018A9E0(v23, v24, v37);
      uint64_t v25 = swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2050;
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*v15 + 216))(v25);
      swift_release();
      *(void *)(v22 + 14) = v26;
      swift_release();
      *(_WORD *)(v22 + 22) = 2082;
      uint64_t v27 = v15[2];
      unint64_t v28 = v15[3];
      swift_bridgeObjectRetain();
      *(void *)(v22 + 24) = sub_10018A9E0(v27, v28, v37);
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%s] Send scheduled message: %{public}ld to: %{public}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      uint64_t v4 = v33;
      swift_slowDealloc();
      uint64_t v3 = v32;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_unknownObjectUnownedLoadStrong();
    uint64_t v29 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t))(v29 + 16))(v3, v17, v18, v15, 1, ObjectType, v29);
    swift_unknownObjectRelease();
    uint64_t result = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*v15 + 232))(v37);
    if (__OFADD__(*v31, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    ++*v31;
    result(v37, 0);
    sub_10018FE9C(v17, v18);
    uint64_t result = (void (*)(uint64_t *, void))swift_release();
    int64_t v9 = v36;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_29;
    }
    if (v12 >= v35) {
      return (void (*)(uint64_t *, void))swift_release();
    }
    unint64_t v13 = *(void *)(v34 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v35) {
        return (void (*)(uint64_t *, void))swift_release();
      }
      unint64_t v13 = *(void *)(v34 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v35) {
          return (void (*)(uint64_t *, void))swift_release();
        }
        unint64_t v13 = *(void *)(v34 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v35) {
    return (void (*)(uint64_t *, void))swift_release();
  }
  unint64_t v13 = *(void *)(v34 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v35) {
      return (void (*)(uint64_t *, void))swift_release();
    }
    unint64_t v13 = *(void *)(v34 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100294D84(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v101 = *(uint64_t (**)(void))(*v1 + 200);
  uint64_t v4 = v101();
  uint64_t v5 = sub_10018871C(v4);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_10018871C(v6);
  char v8 = sub_1001DC3B0(v5, v7);
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_bridgeObjectRelease();
    return;
  }
  int64_t v9 = 0;
  uint64_t v10 = *(void *)(v5 + 56);
  uint64_t v94 = v5 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v14 = v1 + 7;
  int64_t v97 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v99 = v1;
  uint64_t v100 = a1;
  uint64_t v95 = v5;
  if ((v12 & v10) != 0) {
    goto LABEL_11;
  }
LABEL_12:
  int64_t v17 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v17 >= v97)
  {
LABEL_43:
    swift_release();
    uint64_t v96 = a1 + 64;
    uint64_t v46 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v47 = -1;
    if (v46 < 64) {
      uint64_t v47 = ~(-1 << v46);
    }
    unint64_t v48 = v47 & *(void *)(a1 + 64);
    int64_t v98 = (unint64_t)(v46 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v49 = 0;
    if (v48) {
      goto LABEL_49;
    }
LABEL_50:
    while (2)
    {
      int64_t v53 = v49 + 1;
      if (!__OFADD__(v49, 1))
      {
        if (v53 >= v98) {
          goto LABEL_79;
        }
        unint64_t v54 = *(void *)(v96 + 8 * v53);
        ++v49;
        if (!v54)
        {
          int64_t v49 = v53 + 1;
          if (v53 + 1 >= v98) {
            goto LABEL_79;
          }
          unint64_t v54 = *(void *)(v96 + 8 * v49);
          if (!v54)
          {
            int64_t v49 = v53 + 2;
            if (v53 + 2 >= v98) {
              goto LABEL_79;
            }
            unint64_t v54 = *(void *)(v96 + 8 * v49);
            if (!v54)
            {
              int64_t v55 = v53 + 3;
              if (v55 < v98)
              {
                unint64_t v54 = *(void *)(v96 + 8 * v55);
                if (!v54)
                {
                  while (1)
                  {
                    int64_t v49 = v55 + 1;
                    if (__OFADD__(v55, 1)) {
                      goto LABEL_88;
                    }
                    if (v49 >= v98) {
                      goto LABEL_79;
                    }
                    unint64_t v54 = *(void *)(v96 + 8 * v49);
                    ++v55;
                    if (v54) {
                      goto LABEL_63;
                    }
                  }
                }
                int64_t v49 = v55;
                goto LABEL_63;
              }
LABEL_79:
              swift_release();
              if (qword_1004819D0 == -1) {
                goto LABEL_80;
              }
              goto LABEL_89;
            }
          }
        }
LABEL_63:
        unint64_t v48 = (v54 - 1) & v54;
        for (unint64_t i = __clz(__rbit64(v54)) + (v49 << 6); ; unint64_t i = v51 | (v49 << 6))
        {
          uint64_t v56 = 16 * i;
          uint64_t v57 = *(void *)(a1 + 56);
          uint64_t v58 = (uint64_t *)(*(void *)(a1 + 48) + v56);
          uint64_t v60 = *v58;
          uint64_t v59 = v58[1];
          uint64_t v61 = (uint64_t *)(v57 + v56);
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          swift_bridgeObjectRetain_n();
          uint64_t v64 = swift_bridgeObjectRetain();
          if (!*(void *)(((uint64_t (*)(uint64_t))v101)(v64) + 16)) {
            break;
          }
          sub_100013660(v60, v59);
          if ((v65 & 1) == 0) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          a1 = v100;
          if (!v48) {
            goto LABEL_50;
          }
LABEL_49:
          unint64_t v51 = __clz(__rbit64(v48));
          v48 &= v48 - 1;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for ConnectedParticipant();
        uint64_t v66 = swift_allocObject();
        *(_WORD *)(v66 + 48) = 512;
        *(void *)(v66 + 72) = 0;
        *(void *)(v66 + 56) = &_swiftEmptyDictionarySingleton;
        *(void *)(v66 + 64) = 0;
        *(void *)(v66 + 32) = v63;
        *(void *)(v66 + 40) = v62;
        *(void *)(v66 + 16) = v60;
        *(void *)(v66 + 24) = v59;
        *(void *)(v66 + 88) = &off_1004278C8;
        swift_unknownObjectUnownedInit();
        swift_beginAccess();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v68 = v2;
        char v69 = isUniquelyReferenced_nonNull_native;
        uint64_t v70 = (void *)v68[7];
        v68[7] = 0x8000000000000000;
        unint64_t v72 = sub_100013660(v60, v59);
        uint64_t v73 = v70[2];
        BOOL v74 = (v71 & 1) == 0;
        uint64_t v75 = v73 + v74;
        if (__OFADD__(v73, v74))
        {
          __break(1u);
          goto LABEL_84;
        }
        char v76 = v71;
        if (v70[3] < v75)
        {
          sub_1002995DC(v75, v69);
          unint64_t v77 = sub_100013660(v60, v59);
          if ((v76 & 1) != (v78 & 1)) {
            goto LABEL_92;
          }
          unint64_t v72 = v77;
          id v79 = v70;
          if ((v76 & 1) == 0) {
            goto LABEL_75;
          }
LABEL_47:
          uint64_t v50 = v79[7];
          swift_release();
          *(void *)(v50 + 8 * v72) = v66;
LABEL_48:
          *int64_t v14 = (uint64_t)v79;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          uint64_t v2 = v99;
          a1 = v100;
          if (!v48) {
            continue;
          }
          goto LABEL_49;
        }
        if (v69)
        {
          id v79 = v70;
          if (v71) {
            goto LABEL_47;
          }
        }
        else
        {
          sub_10029A4A8();
          id v79 = v70;
          if (v76) {
            goto LABEL_47;
          }
        }
LABEL_75:
        v79[(v72 >> 6) + 8] |= 1 << v72;
        os_log_type_t v80 = (uint64_t *)(v79[6] + 16 * v72);
        *os_log_type_t v80 = v60;
        v80[1] = v59;
        *(void *)(v79[7] + 8 * v72) = v66;
        uint64_t v81 = v79[2];
        BOOL v82 = __OFADD__(v81, 1);
        uint64_t v83 = v81 + 1;
        if (v82) {
          goto LABEL_86;
        }
        v79[2] = v83;
        swift_bridgeObjectRetain();
        goto LABEL_48;
      }
      break;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    swift_once();
LABEL_80:
    uint64_t v84 = type metadata accessor for Logger();
    sub_10018A9A8(v84, (uint64_t)qword_1004819D8);
    swift_retain_n();
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v87 = swift_slowAlloc();
      v103[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 136315394;
      uint64_t v88 = _typeName(_:qualified:)();
      sub_10018A9E0(v88, v89, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v90 = swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2082;
      ((void (*)(uint64_t))v101)(v90);
      type metadata accessor for ConnectedParticipant();
      uint64_t v91 = Dictionary.description.getter();
      unint64_t v93 = v92;
      swift_bridgeObjectRelease();
      sub_10018A9E0(v91, v93, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "[%s] Updated participants: %{public}s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  unint64_t v18 = *(void *)(v94 + 8 * v17);
  ++v9;
  if (!v18)
  {
    int64_t v9 = v17 + 1;
    if (v17 + 1 >= v97) {
      goto LABEL_43;
    }
    unint64_t v18 = *(void *)(v94 + 8 * v9);
    if (!v18)
    {
      int64_t v9 = v17 + 2;
      if (v17 + 2 >= v97) {
        goto LABEL_43;
      }
      unint64_t v18 = *(void *)(v94 + 8 * v9);
      if (!v18)
      {
        int64_t v19 = v17 + 3;
        if (v19 < v97)
        {
          unint64_t v18 = *(void *)(v94 + 8 * v19);
          if (v18)
          {
            int64_t v9 = v19;
            goto LABEL_25;
          }
          while (1)
          {
            int64_t v9 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_87;
            }
            if (v9 >= v97) {
              goto LABEL_43;
            }
            unint64_t v18 = *(void *)(v94 + 8 * v9);
            ++v19;
            if (v18) {
              goto LABEL_25;
            }
          }
        }
        goto LABEL_43;
      }
    }
  }
LABEL_25:
  unint64_t v13 = (v18 - 1) & v18;
  for (unint64_t j = __clz(__rbit64(v18)) + (v9 << 6); ; unint64_t j = v15 | (v9 << 6))
  {
    BOOL v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * j);
    uint64_t v22 = *v20;
    unint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v23)
    {
      swift_bridgeObjectRetain();
      sub_100013660(v22, v21);
      char v25 = v24;
      swift_bridgeObjectRelease();
      if (v25)
      {
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
    uint64_t v26 = v2[13];
    if (!v26) {
      goto LABEL_91;
    }
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_retain();
    uint64_t v28 = ((uint64_t (*)(uint64_t))v101)(v27);
    if (!*(void *)(v28 + 16)) {
      break;
    }
    unint64_t v29 = sub_100013660(v22, v21);
    if ((v30 & 1) == 0) {
      break;
    }
    uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 224))(v31);
    unint64_t v34 = v33;
    swift_release();
    swift_release();
    if (v34 >> 60 != 15)
    {
      sub_1001A3954(v32, v34);
      if (qword_1004819D0 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_10018A9A8(v35, (uint64_t)qword_1004819D8);
      swift_bridgeObjectRetain_n();
      int64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc();
        v103[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315394;
        uint64_t v39 = _typeName(_:qualified:)();
        *(void *)(v38 + 4) = sub_10018A9E0(v39, v40, v103);
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v38 + 14) = sub_10018A9E0(v22, v21, v103);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%s] remove enqueued messages for removed participant: %{public}s", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_100013660(v22, v21);
    char v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v2 = v99;
    if (v43)
    {
      char v44 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = *v14;
      uint64_t v102 = *v14;
      *int64_t v14 = 0x8000000000000000;
      a1 = v100;
      if ((v44 & 1) == 0)
      {
        sub_10029A4A8();
        uint64_t v45 = v102;
      }
      swift_bridgeObjectRelease();
      sub_1001F1A4C(v41, v45);
      *int64_t v14 = v45;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      a1 = v100;
    }
    swift_endAccess();
    uint64_t v5 = v95;
    if (!v13) {
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1002958A4(char a1, uint64_t a2, unint64_t a3)
{
  char v5 = a1 & 1;
  BOOL v6 = v3[5] == a2 && v3[6] == a3;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_100295C1C(v5);
  }
  else
  {
    char v8 = *(uint64_t (**)(uint64_t))(*v3 + 200);
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = v8(v9);
    if (*(void *)(v10 + 16) && (unint64_t v11 = sub_100013660(a2, a3), (v12 & 1) != 0))
    {
      unint64_t v13 = *(void **)(*(void *)(v10 + 56) + 8 * v11);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100296334(v5, v13);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1004819D0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10018A9A8(v14, (uint64_t)qword_1004819D8);
      swift_bridgeObjectRetain_n();
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315650;
        uint64_t v18 = _typeName(_:qualified:)();
        sub_10018A9E0(v18, v19, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        sub_10018A9E0(0xD00000000000001ELL, 0x80000001003B97A0, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v17 + 22) = 2082;
        swift_bridgeObjectRetain();
        sub_10018A9E0(a2, a3, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] %s Could not find participant: %{public}s.", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10029AB34();
      swift_allocError();
      *BOOL v20 = 1;
      swift_willThrow();
    }
  }
}

void sub_100295C1C(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  if (v3 == ((*(uint64_t (**)(void))(*(void *)v1 + 224))() & 1))
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10018A9A8(v4, (uint64_t)qword_1004819D8);
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315650;
      uint64_t v8 = _typeName(_:qualified:)();
      sub_10018A9E0(v8, v9, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      sub_10018A9E0(0xD000000000000014, 0x80000001003B9A60, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2080;
      uint64_t v10 = String.init<A>(describing:)();
      v38[0] = sub_10018A9E0(v10, v11, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] %s Cannot transition to same transport type: %s.", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v12 = 0;
LABEL_22:
    sub_10029AB34();
    swift_allocError();
    *os_log_type_t v37 = v12;
    swift_willThrow();
    return;
  }
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v1 + 200))();
  sub_10028F91C(v13);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  if (!v15)
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10018A9A8(v31, (uint64_t)qword_1004819D8);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v35 = _typeName(_:qualified:)();
      sub_10018A9E0(v35, v36, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      v38[0] = sub_10018A9E0(0xD000000000000014, 0x80000001003B9A60, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%s] %s Could not find host participant.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v12 = 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(unsigned char *)(v2 + 65) = v3;
  sub_10029451C();
  if (v3)
  {
    (*(void (**)(void))(*(void *)v17 + 312))();
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(v2 + 104);
  if (!v18)
  {
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v18 + 224);
  swift_retain();
  uint64_t v20 = v19(v17);
  unint64_t v22 = v21;
  swift_release();
  if (v22 >> 60 == 15)
  {
LABEL_24:
    swift_release();
    return;
  }
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10018A9A8(v23, (uint64_t)qword_1004819D8);
  char v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v40 = v22;
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v27 = _typeName(_:qualified:)();
    sub_10018A9E0(v27, v28, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%s] Moving enqueued messages to transition buffer.", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v22 = v40;
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (*(void *)(v2 + 80) >> 60 == 15)
  {
    swift_release();
    uint64_t v29 = *(void *)(v2 + 72);
    unint64_t v30 = *(void *)(v2 + 80);
    *(void *)(v2 + 72) = v20;
    *(void *)(v2 + 80) = v22;
    sub_1001A3954(v29, v30);
    return;
  }
  swift_beginAccess();
  if (*(void *)(v2 + 80) >> 60 != 15)
  {
    Data.append(_:)();
    swift_endAccess();
    sub_1001A3954(v20, v22);
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100296334(char a1, void *a2)
{
  uint64_t v3 = v2;
  if ((*(unsigned __int8 (**)(void))(*a2 + 168))() != 2)
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10018A9A8(v14, (uint64_t)qword_1004819D8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_12;
    }
    uint64_t v10 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v15 = _typeName(_:qualified:)();
    sub_10018A9E0(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    sub_10018A9E0(0xD000000000000018, 0x80000001003B9A80, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v13 = "[%s] %s Cannot begin transition while already transitioning.";
    goto LABEL_11;
  }
  uint64_t v6 = a1 & 1;
  if (v6 == ((*(uint64_t (**)(void))(*a2 + 144))() & 1))
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10018A9A8(v7, (uint64_t)qword_1004819D8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v9)) {
      goto LABEL_12;
    }
    uint64_t v10 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)();
    sub_10018A9E0(v11, v12, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    sub_10018A9E0(0xD000000000000018, 0x80000001003B9A80, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v13 = "[%s] %s Cannot transition to current transport type.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_12:

    sub_10029AB34();
    swift_allocError();
    void *v17 = 0;
    return swift_willThrow();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*a2 + 176))(v6);
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*a2 + 312))(result);
  }
  uint64_t v19 = *(void *)(v2 + 104);
  if (v19)
  {
    uint64_t v20 = *(uint64_t (**)(void *))(*(void *)v19 + 224);
    swift_retain();
    uint64_t v21 = v20(a2);
    unint64_t v23 = v22;
    uint64_t result = swift_release();
    if (v23 >> 60 != 15)
    {
      if (qword_1004819D0 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_10018A9A8(v24, (uint64_t)qword_1004819D8);
      swift_retain_n();
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        os_log_type_t type = v26;
        uint64_t v27 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v35 = v21;
        uint64_t v28 = _typeName(_:qualified:)();
        sub_10018A9E0(v28, v29, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        uint64_t v30 = a2[2];
        unint64_t v31 = a2[3];
        swift_bridgeObjectRetain();
        sub_10018A9E0(v30, v31, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v21 = v35;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, type, "[%s] Immediately sending scheduled messages for %{public}s.", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_unknownObjectUnownedLoadStrong();
      uint64_t v32 = *(void *)(v3 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, unint64_t, void *, void, uint64_t, uint64_t))(v32 + 16))(v3, v21, v23, a2, 0, ObjectType, v32);
      swift_unknownObjectRelease();
      return sub_1001A3954(v21, v23);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002969D8(char a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1 & 1;
  BOOL v6 = v3[5] == a2 && v3[6] == a3;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return sub_100296CE0(v5);
  }
  os_log_type_t v9 = *(uint64_t (**)(uint64_t))(*v3 + 200);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = v9(v10);
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_100013660(a2, a3), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100297254(v5, v14);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10018A9A8(v15, (uint64_t)qword_1004819D8);
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v19 = _typeName(_:qualified:)();
      sub_10018A9E0(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      sub_10018A9E0(0xD00000000000001CLL, 0x80000001003B97C0, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] %s Could not find host participant.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10029AB34();
    swift_allocError();
    *uint64_t v21 = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100296CE0(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v1 + 248);
  char v5 = v4();
  if (v5 != 2 && (v5 & 1) == v3)
  {
    uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v1 + 200))();
    sub_10028F91C(v18);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    if (v20)
    {
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *(unsigned char *)(v2 + 65) = 2;
      sub_10029451C();
      swift_beginAccess();
      *(unsigned char *)(v2 + 64) = v3;
      sub_100294270();
      sub_100297CF0(v22);
      return swift_release();
    }
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10018A9A8(v25, (uint64_t)qword_1004819D8);
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = _typeName(_:qualified:)();
      sub_10018A9E0(v29, v30, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      sub_10018A9E0(0xD000000000000012, 0x80000001003B9A20, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%s] %s Could not find host participant.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v24 = 1;
  }
  else
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10018A9A8(v7, (uint64_t)qword_1004819D8);
    swift_retain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v32[0] = v33;
      *(_DWORD *)uint64_t v10 = 136315906;
      uint64_t v11 = _typeName(_:qualified:)();
      sub_10018A9E0(v11, v12, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      sub_10018A9E0(0xD000000000000012, 0x80000001003B9A20, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 22) = 2080;
      uint64_t v13 = String.init<A>(describing:)();
      sub_10018A9E0(v13, v14, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v15 = swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 32) = 2080;
      ((void (*)(uint64_t))v4)(v15);
      uint64_t v16 = String.init<A>(describing:)();
      sub_10018A9E0(v16, v17, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] %s Cannot end transition to: %s in state: %s.", (uint8_t *)v10, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v24 = 0;
  }
  sub_10029AB34();
  swift_allocError();
  *unint64_t v31 = v24;
  return swift_willThrow();
}

uint64_t sub_100297254(char a1, uint64_t a2)
{
  uint64_t v3 = a1 & 1;
  char v4 = (*(uint64_t (**)(void))(*(void *)a2 + 168))();
  if (v4 != 2 && (v4 & 1) == v3)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 176))(2);
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(v3);
  }
  else
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10018A9A8(v6, (uint64_t)qword_1004819D8);
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315906;
      uint64_t v10 = _typeName(_:qualified:)();
      sub_10018A9E0(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      sub_10018A9E0(0xD000000000000016, 0x80000001003B9A40, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 22) = 2080;
      uint64_t v12 = String.init<A>(describing:)();
      sub_10018A9E0(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 32) = 2080;
      type metadata accessor for ConnectedParticipant();
      swift_retain();
      uint64_t v14 = String.init<A>(describing:)();
      sub_10018A9E0(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] %s Cannot end transition to: %s for participant: %s.", (uint8_t *)v9, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    sub_10029AB34();
    swift_allocError();
    void *v17 = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1002975E4(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v6 = *v4;
  if (v4[5] != a2 || v4[6] != a3)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (qword_1004819D0 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_10018A9A8(v29, (uint64_t)qword_1004819D8);
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        v43[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315394;
        uint64_t v33 = _typeName(_:qualified:)();
        uint64_t v44 = sub_10018A9E0(v33, v34, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v44 = sub_10018A9E0(0xD00000000000001FLL, 0x80000001003B97E0, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%s] %s Should not cancel transition for another participant.", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      goto LABEL_23;
    }
    uint64_t v6 = *v4;
  }
  int v8 = a1 & 1;
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 248);
  char v10 = v9();
  if (v10 == 2 || (v10 & 1) != v8)
  {
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10018A9A8(v12, (uint64_t)qword_1004819D8);
    swift_retain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315906;
      uint64_t v16 = _typeName(_:qualified:)();
      uint64_t v44 = sub_10018A9E0(v16, v17, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      uint64_t v44 = sub_10018A9E0(0xD00000000000001FLL, 0x80000001003B97E0, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 22) = 2080;
      LOBYTE(v44) = v8;
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v44 = sub_10018A9E0(v18, v19, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v20 = swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 32) = 2080;
      LOBYTE(v44) = ((uint64_t (*)(uint64_t))v9)(v20);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v44 = sub_10018A9E0(v21, v22, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%s] %s Cannot cancel transition to: %s in state: %s.", (uint8_t *)v15, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
LABEL_23:
    uint64_t v35 = 0;
    goto LABEL_24;
  }
  uint64_t v23 = (*(uint64_t (**)(void))(*v4 + 200))();
  sub_10028F91C(v23);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (v25)
  {
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *((unsigned char *)v4 + 65) = 2;
    sub_10029451C();
    sub_100297CF0(v27);
    return swift_release();
  }
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_10018A9A8(v37, (uint64_t)qword_1004819D8);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315394;
    uint64_t v41 = _typeName(_:qualified:)();
    uint64_t v44 = sub_10018A9E0(v41, v42, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v44 = sub_10018A9E0(0xD00000000000001FLL, 0x80000001003B97E0, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%s] %s Could not find host participant.", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v35 = 1;
LABEL_24:
  sub_10029AB34();
  swift_allocError();
  *uint64_t v36 = v35;
  return swift_willThrow();
}

uint64_t sub_100297CF0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  uint64_t v4 = v1[11];
  unint64_t v5 = v1[12];
  if (v5 >> 60 != 15)
  {
    sub_10018FE44(v1[11], v1[12]);
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10018A9A8(v6, (uint64_t)qword_1004819D8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v10 = _typeName(_:qualified:)();
      uint64_t v23 = sub_10018A9E0(v10, v11, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] Flushing incoming message buffer.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_unknownObjectUnownedLoadStrong();
    uint64_t v12 = v2[3];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(v2, v4, v5, a1, ObjectType, v12);
    swift_unknownObjectRelease();
    sub_1001A3954(v4, v5);
    uint64_t v4 = v2[11];
    unint64_t v5 = v2[12];
  }
  *(_OWORD *)(v2 + 11) = xmmword_1003C8D50;
  sub_1001A3954(v4, v5);
  swift_beginAccess();
  uint64_t v14 = v2[9];
  unint64_t v15 = v2[10];
  if (v15 >> 60 != 15)
  {
    sub_10018FE44(v2[9], v2[10]);
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10018A9A8(v16, (uint64_t)qword_1004819D8);
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136315138;
      uint64_t v20 = _typeName(_:qualified:)();
      sub_10018A9E0(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s] Flushing outgoing message buffer.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, unint64_t, void, void))(*v2 + 440))(v14, v15, *(void *)(a1 + 16), *(void *)(a1 + 24));
    sub_1001A3954(v14, v15);
    uint64_t v14 = v2[9];
    unint64_t v15 = v2[10];
  }
  *(_OWORD *)(v2 + 9) = xmmword_1003C8D50;
  return sub_1001A3954(v14, v15);
}

void sub_100298158(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *(uint64_t (**)(uint64_t))(*v4 + 200);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = v10(v11);
  if (*(void *)(v12 + 16) && (unint64_t v13 = sub_100013660(a2, a3), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v16 = swift_bridgeObjectRelease();
    char v17 = (*(uint64_t (**)(uint64_t))(*v5 + 248))(v16);
    if (v17 != 2 && (a4 & 1) == (v17 & 1))
    {
      if (a4)
      {
        sub_10018FDAC(a1, (uint64_t)v39);
        sub_100013A80(&qword_10047A0E8);
        swift_dynamicCast();
        uint64_t v26 = v40;
        uint64_t v27 = sub_100289A14();
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)&long long v40 = *(void *)v27;
        *((void *)&v40 + 1) = v28;
        swift_bridgeObjectRetain_n();
        AnyHashable.init<A>(_:)();
        if (*(void *)(v26 + 16) && (unint64_t v29 = sub_10018C3C4((uint64_t)v39), (v30 & 1) != 0))
        {
          sub_10018FDAC(*(void *)(v26 + 56) + 32 * v29, (uint64_t)&v37);
        }
        else
        {
          long long v37 = 0u;
          long long v38 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v38 + 1))
        {
          sub_10018FFC8((uint64_t)v39);
          swift_bridgeObjectRelease();
          sub_10018FF5C(&v37, &v40);
          swift_dynamicCast();
          uint64_t v31 = v41;
          unint64_t v32 = v42;
          swift_beginAccess();
          unint64_t v33 = v5[12];
          if (v33 >> 60 == 15)
          {
            uint64_t v34 = v5[11];
            v5[11] = v31;
            v5[12] = v32;
            sub_10018FE44(v31, v32);
            sub_1001A3954(v34, v33);
          }
          else
          {
            swift_beginAccess();
            if (v5[12] >> 60 == 15)
            {
LABEL_33:
              __break(1u);
              return;
            }
            Data.append(_:)();
            swift_endAccess();
          }
          uint64_t v35 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v15 + 256))(v39);
          if (!__OFADD__(*v36, 1))
          {
            ++*v36;
            v35(v39, 0);
            goto LABEL_29;
          }
          __break(1u);
        }
        __break(1u);
      }
      else
      {
        swift_beginAccess();
        if (v5[12] >> 60 == 15)
        {
          swift_release();
          sub_10018FDAC(a1, (uint64_t)v39);
          swift_dynamicCast();
          uint64_t v18 = v5[11];
          unint64_t v19 = v5[12];
          *(_OWORD *)(v5 + 11) = v37;
          sub_1001A3954(v18, v19);
          return;
        }
        sub_10018FDAC(a1, (uint64_t)v39);
        swift_dynamicCast();
        uint64_t v31 = v41;
        unint64_t v32 = v42;
        swift_beginAccess();
        if (v5[12] >> 60 != 15)
        {
          Data.append(_:)();
          swift_endAccess();
LABEL_29:
          swift_release();
          sub_10018FE9C(v31, v32);
          return;
        }
      }
      __break(1u);
      goto LABEL_33;
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 296))(a1);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1004819D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10018A9A8(v20, (uint64_t)qword_1004819D8);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v24 = _typeName(_:qualified:)();
      *(void *)&long long v40 = sub_10018A9E0(v24, v25, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)&long long v40 = sub_10018A9E0(0xD000000000000019, 0x80000001003B9800, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v40 = sub_10018A9E0(a2, a3, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s] %s Could not find participant: %s.", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1002987C4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*v4 + 200);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = v12(v13);
  if (!*(void *)(v14 + 16)) {
    goto LABEL_9;
  }
  unint64_t v15 = sub_100013660(a3, a4);
  if ((v16 & 1) == 0) {
    goto LABEL_9;
  }
  a3 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_bridgeObjectRelease();
  if ((*(unsigned __int8 (**)(uint64_t))(*v7 + 248))(v17) != 2)
  {
    swift_beginAccess();
    if (v7[10] >> 60 == 15)
    {
      swift_release();
      uint64_t v26 = v7[9];
      unint64_t v27 = v7[10];
      v7[9] = a1;
      v7[10] = a2;
      sub_10018FE44(a1, a2);
      sub_1001A3954(v26, v27);
      return;
    }
LABEL_18:
    swift_beginAccess();
    if (v7[10] >> 60 != 15)
    {
      Data.append(_:)();
      swift_endAccess();
LABEL_24:
      swift_release();
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
  if ((*(uint64_t (**)(void))(*v7 + 224))())
  {
    uint64_t v19 = v7[13];
    if (v19) {
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_18;
  }
  char v18 = (*(uint64_t (**)(void))(*(void *)a3 + 168))();
  if (v18 != 2)
  {
    if ((v18 & 1) == 0) {
      goto LABEL_21;
    }
    uint64_t v19 = v7[13];
    if (v19) {
      goto LABEL_23;
    }
LABEL_26:
    __break(1u);
    return;
  }
  if (((*(uint64_t (**)(void))(*(void *)a3 + 144))() & 1) == 0)
  {
LABEL_21:
    swift_unknownObjectUnownedLoadStrong();
    uint64_t v28 = v7[3];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t))(v28 + 16))(v7, a1, a2, a3, 0, ObjectType, v28);
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  uint64_t v19 = v7[13];
  if (v19)
  {
LABEL_23:
    char v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v19 + 216);
    swift_retain();
    v30(a1, a2, a3);
    swift_release();
    goto LABEL_24;
  }
  __break(1u);
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1004819D0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10018A9A8(v20, (uint64_t)qword_1004819D8);
  swift_bridgeObjectRetain_n();
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315650;
    v31[4] = v6;
    uint64_t v24 = _typeName(_:qualified:)();
    sub_10018A9E0(v24, v25, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    sub_10018A9E0(0xD000000000000014, 0x80000001003B9820, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_10018A9E0(a3, a4, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s] %s Could not find participant: %s.", (uint8_t *)v23, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100298CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectUnownedLoadStrong();
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v3, a2, a3, a1, ObjectType, v7);

  return swift_unknownObjectRelease();
}

uint64_t sub_100298D5C()
{
  sub_100298E1C(v0 + 16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001A3954(*(void *)(v0 + 72), *(void *)(v0 + 80));
  sub_1001A3954(*(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100298DC4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t sub_100298DF0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t sub_100298E1C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100298E44(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100299FA0(a1, v2);
}

unint64_t sub_100298E88(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 320))(v4);
  Swift::Int v2 = Hasher._finalize()();

  return sub_10029A03C(a1, v2);
}

double sub_100298F1C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100298E88(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10029A2E4();
      uint64_t v9 = v11;
    }
    swift_release();
    *a2 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v6);
    sub_100299A8C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = xmmword_1003C8D50;
  }
  return result;
}

uint64_t sub_100298FF4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047C488);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      os_log_type_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        sub_10018FF5C(v22, v32);
      }
      else {
        sub_10018FDAC((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)sub_10018FF5C(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002992B8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047C480);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v31 = v2;
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    os_log_type_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v32 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v32 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
    long long v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      sub_10018FE44(v33, *((unint64_t *)&v33 + 1));
    }
    Hasher.init(_seed:)();
    (*(void (**)(char *))(*(void *)v29 + 320))(v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v31;
  os_log_type_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *os_log_type_t v22 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002995DC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100013A80(&qword_10047C478);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    os_log_type_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  os_log_type_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *os_log_type_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1002998F4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            unint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *unint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            unint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              _OWORD *v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100299A8C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        uint64_t v10 = *(void (**)(unsigned char *))(*(void *)v9 + 320);
        swift_retain();
        v10(v25);
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_release();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          unint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          unint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            _OWORD *v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *unint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_100299C98(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100298E44(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10029A120();
      goto LABEL_7;
    }
    sub_100298FF4(v13, a3 & 1);
    unint64_t v19 = sub_100298E44(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_10018FD5C((uint64_t)v17);
    return sub_10018FF5C(a1, v17);
  }
LABEL_13:

  return sub_100299F38(v10, a2, a1, v16);
}

uint64_t sub_100299DD4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100298E88(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10029A2E4();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = sub_10018FE9C(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002992B8(v15, a4 & 1);
  unint64_t v21 = sub_100298E88(a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    type metadata accessor for ConnectedParticipant();
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  *(void *)(v18[6] + 8 * v12) = a3;
  BOOL v23 = (void *)(v18[7] + 16 * v12);
  *BOOL v23 = a1;
  v23[1] = a2;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_retain();
}

_OWORD *sub_100299F38(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10018FF5C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_100299FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10029A03C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = *(void *)(v6 + 8 * v5);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    BOOL v10 = *(void *)(v7 + 16) == v8 && *(void *)(v7 + 24) == v9;
    if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v11 = ~v4;
      do
      {
        unint64_t v5 = (v5 + 1) & v11;
        if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
          break;
        }
        uint64_t v12 = *(void *)(v6 + 8 * v5);
        BOOL v13 = *(void *)(v12 + 16) == v8 && *(void *)(v12 + 24) == v9;
      }
      while (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v5;
}

void *sub_10029A120()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047C488);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10018FDAC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = sub_10018FF5C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10029A2E4()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047C480);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v22 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v22;
    swift_retain();
    unint64_t result = (void *)sub_10018FE44(v22, *((unint64_t *)&v22 + 1));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10029A4A8()
{
  uint64_t v1 = v0;
  sub_100013A80(&qword_10047C478);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    unint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *sub_10029A660(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = *result;
  unint64_t v7 = result[1];
  if (v7 >> 60 == 15)
  {
    if (a2)
    {
      type metadata accessor for ConnectedParticipant();
      swift_arrayDestroy();
      sub_100299A8C(a4, *a3);
    }
  }
  else
  {
    int64_t v9 = (void *)*a3;
    if (a2)
    {
      uint64_t v10 = (uint64_t *)(v9[7] + 16 * a4);
      *uint64_t v10 = v8;
      v10[1] = v7;
    }
    else
    {
      v9[(a4 >> 6) + 8] |= 1 << a4;
      *(void *)(v9[6] + 8 * a4) = a5;
      uint64_t v11 = (uint64_t *)(v9[7] + 16 * a4);
      *uint64_t v11 = v8;
      v11[1] = v7;
      uint64_t v12 = v9[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13)
      {
        __break(1u);
        return result;
      }
      v9[2] = v14;
      swift_retain();
    }
  }

  return (uint64_t *)sub_1001F23E0(v8, v7);
}

void *sub_10029A754(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler();
  uint64_t v11 = (void *)swift_allocObject();

  return sub_10029A960(a1, a2, a3, v11, a5, a6);
}

void *sub_10029A7CC(char a1, uint64_t a2, void *a3, void *a4)
{
  a4[5] = &_swiftEmptyDictionarySingleton;
  a4[6] = 0;
  a4[4] = &off_1004278B8;
  swift_unknownObjectUnownedInit();
  a4[2] = a3;
  if (a1) {
    double v7 = 1.0;
  }
  else {
    double v7 = 0.5;
  }
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  id v9 = objc_allocWithZone((Class)MSVTimer);
  v15[4] = sub_10029B150;
  v15[5] = v8;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  _OWORD v15[2] = sub_100006760;
  v15[3] = &unk_100427A40;
  uint64_t v10 = _Block_copy(v15);
  id v11 = a3;
  swift_retain();
  swift_release();
  id v12 = [v9 initWithInterval:1 repeats:v11 queue:v10 block:v7];

  _Block_release(v10);
  swift_release();
  swift_release();

  BOOL v13 = (void *)a4[6];
  a4[6] = v12;

  return a4;
}

void *sub_10029A960(char a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[6] = 0;
  a4[4] = a6;
  a4[5] = &_swiftEmptyDictionarySingleton;
  swift_unknownObjectUnownedInit();
  a4[2] = a3;
  if (a1) {
    double v9 = 1.0;
  }
  else {
    double v9 = 0.5;
  }
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  id v11 = objc_allocWithZone((Class)MSVTimer);
  id v17[4] = sub_10029B150;
  v17[5] = v10;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  _OWORD v17[2] = sub_100006760;
  v17[3] = &unk_100427A68;
  id v12 = _Block_copy(v17);
  id v13 = a3;
  swift_retain();
  swift_release();
  id v14 = [v11 initWithInterval:1 repeats:v13 queue:v12 block:v9];

  _Block_release(v12);
  swift_release();
  swift_unknownObjectRelease();

  unint64_t v15 = (void *)a4[6];
  a4[6] = v14;

  return a4;
}

uint64_t type metadata accessor for ConnectedParticipant()
{
  return self;
}

uint64_t type metadata accessor for GroupSessionRemoteControlConnectionPushScheduler()
{
  return self;
}

unint64_t sub_10029AB34()
{
  unint64_t result = qword_10047BF70;
  if (!qword_10047BF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF70);
  }
  return result;
}

unint64_t sub_10029AB8C()
{
  unint64_t result = qword_10047BF78;
  if (!qword_10047BF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF78);
  }
  return result;
}

unint64_t sub_10029ABE4()
{
  unint64_t result = qword_10047BF80;
  if (!qword_10047BF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF80);
  }
  return result;
}

unint64_t sub_10029AC3C()
{
  unint64_t result = qword_10047BF88;
  if (!qword_10047BF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF88);
  }
  return result;
}

unint64_t sub_10029AC94()
{
  unint64_t result = qword_10047BF90;
  if (!qword_10047BF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF90);
  }
  return result;
}

unint64_t sub_10029ACF0()
{
  unint64_t result = qword_10047BF98;
  if (!qword_10047BF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BF98);
  }
  return result;
}

unint64_t sub_10029AD48()
{
  unint64_t result = qword_10047BFA0;
  if (!qword_10047BFA0)
  {
    type metadata accessor for ConnectedParticipant();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047BFA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionConnectionError()
{
  return &type metadata for GroupSessionConnectionError;
}

unsigned char *storeEnumTagSinglePayload for GroupSessionRemoteControlConnectionTransportType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029AE78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionRemoteControlConnectionTransportType()
{
  return &type metadata for GroupSessionRemoteControlConnectionTransportType;
}

uint64_t getEnumTagSinglePayload for GroupSessionRemoteControlConnectionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10029AF5CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = v7 - 2;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for GroupSessionRemoteControlConnectionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x10029B044);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10029B06C(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 2) {
    return v1 - 1;
  }
  else {
    return 0;
  }
}

unsigned char *sub_10029B080(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupSessionRemoteControlConnectionState()
{
  return &type metadata for GroupSessionRemoteControlConnectionState;
}

uint64_t type metadata accessor for GroupSessionRemoteControlConnectionManager()
{
  return self;
}

unint64_t sub_10029B0C4()
{
  unint64_t result = qword_10047C470;
  if (!qword_10047C470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C470);
  }
  return result;
}

uint64_t sub_10029B118()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029B150()
{
  return sub_100293D4C();
}

uint64_t sub_10029B160()
{
  return 0;
}

uint64_t sub_10029B16C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 0;
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      unsigned __int16 v6 = a3 & 0xF97F;
      goto LABEL_3;
    case 6u:
      return result;
    default:
      unsigned __int16 v6 = *(_WORD *)(a1 + 32);
      uint64_t v7 = a1 + 16;
      a1 = *(void *)(a1 + 16);
      a2 = *(void *)(v7 + 8);
LABEL_3:
      sub_1001B9EBC(a1, a2, v6);
      uint64_t result = a1;
      break;
  }
  return result;
}

BOOL sub_10029B21C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return ((a3 >> 8) & 6 | (a3 >> 7) & 1) == 5;
}

unint64_t sub_10029B234(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t result = 0xD000000000000019;
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 1u:
      unsigned __int16 v16 = a3 & 0xF97F;
      unsigned int v17 = 1919508782;
      goto LABEL_6;
    case 2u:
      unsigned __int16 v16 = a3 & 0xF97F;
      uint64_t v18 = 0x6F6F7465756C622ELL;
      goto LABEL_9;
    case 3u:
      unsigned __int16 v16 = a3 & 0xF97F;
      unsigned int v17 = 1918985006;
LABEL_6:
      uint64_t v18 = v17 | 0x79616C5000000000;
      goto LABEL_9;
    case 4u:
      unsigned __int16 v16 = a3 & 0xF97F;
      uint64_t v18 = 0x2864657269772ELL;
      goto LABEL_9;
    case 5u:
      unsigned __int16 v16 = a3 & 0xF97F;
      uint64_t v18 = 0x6E49746C6975622ELL;
LABEL_9:
      uint64_t v21 = v18;
      sub_1001B9E5C(a1, a2, a3);
      v19._countAndFlagsBits = sub_10029C724(a1, a2, v16);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      sub_1001B9958(a1, a2, a3);
      return v21;
    case 6u:
      return result;
    default:
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void **)(a1 + 48);
      unsigned __int16 v11 = *(_WORD *)(a1 + 32);
      sub_1001B9EBC(v7, v8, v11);
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      uint64_t v21 = 0x6E776F6E6B6E752ELL;
      v12._countAndFlagsBits = sub_10029C724(v7, v8, v11);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 0x203A6F666E6920;
      v13._object = (void *)0xE700000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = v9;
      v14._object = v10;
      String.append(_:)(v14);
      v15._countAndFlagsBits = 41;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      sub_1001B99B8(v7, v8, v11);
      return v21;
  }
}

void sub_10029B498(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  switch((a4 >> 8) & 6 | (a4 >> 7) & 1)
  {
    case 1u:
      unsigned int v11 = a4 & 0xFFFFF97F;
      Swift::UInt v12 = 1;
      goto LABEL_10;
    case 2u:
      unsigned int v11 = a4 & 0xFFFFF97F;
      Swift::UInt v12 = 2;
      goto LABEL_10;
    case 3u:
      unsigned int v11 = a4 & 0xFFFFF97F;
      Swift::UInt v12 = 3;
      goto LABEL_10;
    case 4u:
      unsigned int v11 = a4 & 0xFFFFF97F;
      Swift::UInt v12 = 4;
      goto LABEL_10;
    case 5u:
      unsigned int v11 = a4 & 0xFFFFF97F;
      Swift::UInt v12 = 5;
LABEL_10:
      Hasher._combine(_:)(v12);
      sub_1001B9EBC(a2, a3, v11);
      sub_10029D13C(a1, a2, a3, v11);
      sub_1001B9958(a2, a3, a4);
      break;
    case 6u:
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(0);
      break;
    default:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      unsigned int v10 = *(unsigned __int16 *)(a2 + 32);
      Hasher._combine(_:)(0);
      sub_1001B9EBC(v8, v9, v10);
      sub_10029D13C(a1, v8, v9, v10);
      String.hash(into:)();
      sub_1001B99B8(v8, v9, v10);
      break;
  }
}

uint64_t sub_10029B648(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  int v6 = a6;
  switch((unsigned __int16)a3 >> 11)
  {
    case 1:
      if ((a6 & 0xF800) != 0x800) {
        goto LABEL_124;
      }
      if (a2)
      {
        if (!a5) {
          goto LABEL_124;
        }
        if (a1 != a4 || a2 != a5)
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          LOBYTE(v10) = 0;
          if (v9 & 1) == 0 || ((a3 ^ v6)) {
            return v10 & 1;
          }
LABEL_76:
          int v10 = ((a3 & 0x100) == 0) ^ ((unsigned __int16)(v6 & 0x100) >> 8);
          return v10 & 1;
        }
      }
      else if (a5)
      {
        goto LABEL_54;
      }
      if ((a3 ^ a6)) {
        goto LABEL_124;
      }
      goto LABEL_76;
    case 2:
      if ((a6 & 0xF800) == 0x1000) {
        goto LABEL_47;
      }
      goto LABEL_124;
    case 3:
      if ((a6 & 0xF800) != 0x1800) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 4:
      if ((a6 & 0xF800) == 0x2000) {
        goto LABEL_23;
      }
      goto LABEL_124;
    case 5:
      if ((a6 & 0xF800) != 0x2800) {
        goto LABEL_124;
      }
LABEL_23:
      LOBYTE(v10) = ((a1 & 1) == 0) ^ a4;
      return v10 & 1;
    case 6:
      if ((a6 & 0xF800) != 0x3000) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 7:
      if ((a6 & 0xF800) != 0x3800) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 8:
      if ((a6 & 0xF800) != 0x4000) {
        goto LABEL_124;
      }
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a4 + 16);
      return sub_10029DC88(v11, v12);
    case 9:
      if ((a6 & 0xF800) == 0x4800) {
        goto LABEL_35;
      }
      goto LABEL_124;
    case 10:
      if ((a6 & 0xF800) != 0x5000) {
        goto LABEL_124;
      }
LABEL_35:
      int v13 = *(unsigned __int8 *)(a1 + 24);
      int v14 = *(unsigned __int8 *)(a4 + 24);
      char v15 = sub_10029DC88(*(void *)(a1 + 16), *(void *)(a4 + 16));
      LOBYTE(v10) = v13 == v14;
      if ((v15 & 1) == 0) {
        LOBYTE(v10) = 0;
      }
      return v10 & 1;
    case 11:
      if ((a6 & 0xF800) != 0x5800) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 12:
      if ((a6 & 0xF800) != 0x6000) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 13:
      if ((a6 & 0xF800) != 0x6800) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 14:
      if ((a6 & 0xF800) != 0x7000) {
        goto LABEL_124;
      }
      goto LABEL_47;
    case 15:
      if ((a6 & 0xF800) != 0x7800) {
        goto LABEL_124;
      }
LABEL_47:
      if (!a2)
      {
        if (!a5) {
          goto LABEL_120;
        }
LABEL_54:
        sub_1001B99B8(a1, 0, a3);
        goto LABEL_124;
      }
      if (!a5 || (a1 != a4 || a2 != a5) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_124;
      }
      goto LABEL_120;
    case 16:
      if ((a6 & 0xF800) != 0x8000) {
        goto LABEL_124;
      }
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v19 = *(void *)(a4 + 24);
      uint64_t v20 = *(unsigned __int16 *)(a1 + 32);
      uint64_t v21 = *(unsigned __int16 *)(a4 + 32);
      sub_1001B9EBC(v17, v16, v20);
      sub_1001B9EBC(v18, v19, v21);
      char v22 = sub_10029B648(v17, v16, v20, v18, v19, v21);
      sub_1001B99B8(v18, v19, v21);
      sub_1001B99B8(v17, v16, v20);
      return v22 & 1;
    case 17:
      if (!(a2 | a1) && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a5 | a4) {
          goto LABEL_124;
        }
        goto LABEL_119;
      }
      if (a1 == 1 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 1) {
          goto LABEL_124;
        }
LABEL_118:
        if (a5) {
          goto LABEL_124;
        }
        goto LABEL_119;
      }
      if (a1 == 2 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 2) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 3 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 3) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 4 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 4) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 5 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 5) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 6 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 6) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 7 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 7) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 8 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 8) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if (a1 == 9 && !a2 && (unsigned __int16)a3 == 34816)
      {
        if ((a6 & 0xF800) != 0x8800 || a4 != 9) {
          goto LABEL_124;
        }
        goto LABEL_118;
      }
      if ((a6 & 0xF800) != 0x8800 || a4 != 10 || a5) {
        goto LABEL_124;
      }
LABEL_119:
      if (a6 == 34816)
      {
LABEL_120:
        LOBYTE(v10) = 1;
        return v10 & 1;
      }
LABEL_124:
      LOBYTE(v10) = 0;
      return v10 & 1;
    default:
      if (a6 >= 0x800u) {
        goto LABEL_124;
      }
      if (a1 == a4 && a2 == a5) {
        goto LABEL_120;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int sub_10029BBD4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  Hasher.init(_seed:)();
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 1u:
      unsigned int v9 = a3 & 0xFFFFF97F;
      Swift::UInt v10 = 1;
      goto LABEL_8;
    case 2u:
      unsigned int v9 = a3 & 0xFFFFF97F;
      Swift::UInt v10 = 2;
      goto LABEL_8;
    case 3u:
      unsigned int v9 = a3 & 0xFFFFF97F;
      Swift::UInt v10 = 3;
      goto LABEL_8;
    case 4u:
      unsigned int v9 = a3 & 0xFFFFF97F;
      Swift::UInt v10 = 4;
      goto LABEL_8;
    case 5u:
      unsigned int v9 = a3 & 0xFFFFF97F;
      Swift::UInt v10 = 5;
LABEL_8:
      Hasher._combine(_:)(v10);
      sub_1001B9EBC(a1, a2, v9);
      sub_10029D13C((uint64_t)v12, a1, a2, v9);
      sub_1001B9958(a1, a2, a3);
      break;
    case 6u:
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(0);
      break;
    default:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
      Hasher._combine(_:)(0);
      sub_1001B9EBC(v6, v7, v8);
      sub_10029D13C((uint64_t)v12, v6, v7, v8);
      String.hash(into:)();
      sub_1001B99B8(v6, v7, v8);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_10029BD84()
{
  return sub_10029BBD4(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int16 *)(v0 + 16));
}

void sub_10029BD90(uint64_t a1)
{
  sub_10029B498(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int16 *)(v1 + 16));
}

Swift::Int sub_10029BD9C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(unsigned __int16 *)(v0 + 16);
  Hasher.init(_seed:)();
  switch((v3 >> 8) & 6 | (v3 >> 7) & 1)
  {
    case 1u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 2u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 2;
      goto LABEL_8;
    case 3u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 4u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 4;
      goto LABEL_8;
    case 5u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 5;
LABEL_8:
      Hasher._combine(_:)(v8);
      sub_1001B9EBC(v1, v2, v7);
      sub_10029D13C((uint64_t)v10, v1, v2, v7);
      sub_1001B9958(v1, v2, v3);
      break;
    case 6u:
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(0);
      break;
    default:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      unsigned int v6 = *(unsigned __int16 *)(v1 + 32);
      Hasher._combine(_:)(0);
      sub_1001B9EBC(v4, v5, v6);
      sub_10029D13C((uint64_t)v10, v4, v5, v6);
      String.hash(into:)();
      sub_1001B99B8(v4, v5, v6);
      break;
  }
  return Hasher._finalize()();
}

unint64_t sub_10029BF44()
{
  return sub_10029B234(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int16 *)(v0 + 16));
}

uint64_t sub_10029BF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10029E2EC(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_1002AE288);
}

uint64_t sub_10029BF68()
{
  return 0x6E61486C6C75702ELL;
}

uint64_t sub_10029BF88()
{
  sub_1002AE544((long long *)(v0 + 16), (uint64_t)&v6);
  sub_1002AE544(&v6, (uint64_t)v7);
  uint64_t v1 = 0;
  switch(HIBYTE(v8) & 6 | (v8 >> 7) & 1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      unsigned __int16 v2 = v8 & 0xF97F;
      v8 &= 0xF97Fu;
      unsigned int v3 = v7;
      uint64_t v4 = v7[1];
      goto LABEL_3;
    case 6:
      return v1;
    default:
      v8 &= 0xF97Fu;
      unsigned int v3 = (uint64_t *)(v7[0] + 16);
      uint64_t v4 = *(void *)(v7[0] + 24);
      unsigned __int16 v2 = *(_WORD *)(v7[0] + 32);
LABEL_3:
      uint64_t v1 = *v3;
      sub_1001B9EBC(*v3, v4, v2);
      break;
  }
  return v1;
}

Swift::Int sub_10029C078()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int16 *)(v0 + 32);
  switch((v3 >> 8) & 6 | (v3 >> 7) & 1)
  {
    case 1u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 2u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 2;
      goto LABEL_8;
    case 3u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 4u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 4;
      goto LABEL_8;
    case 5u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 5;
LABEL_8:
      Hasher._combine(_:)(v8);
      sub_1001B9EBC(v2, v1, v7);
      sub_10029D13C((uint64_t)v10, v2, v1, v7);
      goto LABEL_9;
    case 6u:
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    default:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      unsigned int v6 = *(unsigned __int16 *)(v2 + 32);
      Hasher._combine(_:)(0);
      sub_1001B9E5C(v2, v1, v3);
      sub_1001B9EBC(v4, v5, v6);
      sub_10029D13C((uint64_t)v10, v4, v5, v6);
      String.hash(into:)();
      sub_1001B99B8(v4, v5, v6);
LABEL_9:
      sub_1001B9958(v2, v1, v3);
      return Hasher._finalize()();
  }
}

uint64_t sub_10029C250@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_WORD *)(a6 + 32) = a5;
  return result;
}

uint64_t sub_10029C264(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  unsigned int v5 = *(unsigned __int16 *)(v1 + 32);
  String.hash(into:)();
  sub_1001B9E5C(v3, v4, v5);
  sub_10029B498(a1, v3, v4, v5);

  return sub_1001B9958(v3, v4, v5);
}

Swift::Int sub_10029C2DC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  unsigned int v3 = *(unsigned __int16 *)(v0 + 32);
  Hasher.init(_seed:)();
  String.hash(into:)();
  switch((v3 >> 8) & 6 | (v3 >> 7) & 1)
  {
    case 1u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 2u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 2;
      goto LABEL_8;
    case 3u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 4u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 4;
      goto LABEL_8;
    case 5u:
      int v7 = v3 & 0xF97F;
      Swift::UInt v8 = 5;
LABEL_8:
      Hasher._combine(_:)(v8);
      sub_1001B9EBC(v2, v1, v7);
      sub_10029D13C((uint64_t)v10, v2, v1, v7);
      goto LABEL_9;
    case 6u:
      Hasher._combine(_:)(6uLL);
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    default:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      unsigned int v6 = *(unsigned __int16 *)(v2 + 32);
      Hasher._combine(_:)(0);
      sub_1001B9E5C(v2, v1, v3);
      sub_1001B9EBC(v4, v5, v6);
      sub_10029D13C((uint64_t)v10, v4, v5, v6);
      String.hash(into:)();
      sub_1001B99B8(v4, v5, v6);
LABEL_9:
      sub_1001B9958(v2, v1, v3);
      return Hasher._finalize()();
  }
}

uint64_t sub_10029C4B8()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  unsigned int v5 = *(unsigned __int16 *)(v0 + 32);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  sub_1001B9E5C(v3, v4, v5);
  v8._countAndFlagsBits = sub_10029B234(v3, v4, v5);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  sub_1001B9958(v3, v4, v5);
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 40;
}

uint64_t sub_10029C58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_1002AE288(v2, v3, v4, v5, v6, v7);
}

BOOL sub_10029C634(uint64_t a1, uint64_t a2, __int16 a3)
{
  BOOL v3 = (a3 & 0xF800) != 0x3000 || a2 == 0;
  return !v3 && String.hasPrefix(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10029C688(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = a3 >> 11;
  if (v4 > 0xB || ((1 << v4) & 0x806) == 0) {
    return v3;
  }
  if (!a2) {
    return 0;
  }
  if (a1 == 926036842 && a2 == 0xE400000000000000) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10029C6F4(char a1, uint64_t a2, unsigned __int16 a3)
{
  int v3 = a3 >> 11;
  unsigned int v4 = HIBYTE(a3) & 1;
  if (v3 != 1) {
    unsigned int v4 = 0;
  }
  if (v3 == 4) {
    unsigned int v4 = a1 & 1;
  }
  if (v3 == 5) {
    return a1 & 1;
  }
  else {
    return v4;
  }
}

uint64_t sub_10029C724(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t v5 = a1;
  switch(a3 >> 11)
  {
    case 1:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)v52, ".speaker(");
      WORD1(v52[1]) = 0;
      HIDWORD(v52[1]) = -385875968;
      if (a2) {
        uint64_t v25 = 0x7C6C65646F6DLL;
      }
      else {
        uint64_t v25 = 0;
      }
      if (a2) {
        unint64_t v26 = 0xE600000000000000;
      }
      else {
        unint64_t v26 = 0xE000000000000000;
      }
      unint64_t v27 = v26;
      String.append(_:)(*(Swift::String *)&v25);
      swift_bridgeObjectRelease();
      if (a3) {
        uint64_t v28 = 0x69746C756DLL;
      }
      else {
        uint64_t v28 = 1869377395;
      }
      if (a3) {
        unint64_t v29 = 0xE500000000000000;
      }
      else {
        unint64_t v29 = 0xE400000000000000;
      }
      unint64_t v30 = v29;
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease();
      if ((a3 & 0x100) != 0) {
        uint64_t v31 = 0x696669687CLL;
      }
      else {
        uint64_t v31 = 0;
      }
      if ((a3 & 0x100) != 0) {
        unint64_t v32 = 0xE500000000000000;
      }
      else {
        unint64_t v32 = 0xE000000000000000;
      }
      goto LABEL_35;
    case 2:
      unint64_t v7 = 0x6F6870646165682ELL;
      unint64_t v8 = 0xEC0000002873656ELL;
      goto LABEL_39;
    case 3:
      unint64_t v7 = 0x746573646165682ELL;
      goto LABEL_38;
    case 4:
      uint64_t v9 = a1 << 63 >> 63;
      uint64_t v10 = 0x657669656365722ELL;
      unint64_t v11 = 0xEA00000000002872;
      goto LABEL_32;
    case 5:
      uint64_t v9 = a1 << 63 >> 63;
      uint64_t v10 = 0x74754F656E696C2ELL;
      unint64_t v11 = 0xE900000000000028;
LABEL_32:
      v52[0] = v10;
      v52[1] = v11;
      uint64_t v31 = v9 & 0x69666968;
      if (v5) {
        unint64_t v32 = 0xE400000000000000;
      }
      else {
        unint64_t v32 = 0xE000000000000000;
      }
LABEL_35:
      unint64_t v33 = v32;
      goto LABEL_45;
    case 6:
      unint64_t v7 = 0x646F50656D6F682ELL;
      goto LABEL_38;
    case 7:
      unint64_t v7 = 0x5654656C7070612ELL;
      goto LABEL_38;
    case 8:
      uint64_t v36 = *(void *)(a1 + 16);
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v52, ".stereoPair([");
      HIWORD(v52[1]) = -4864;
      sub_10029CFA4(v36);
      sub_100013A80(&qword_10047A080);
      sub_10024D6A8();
      uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
      os_log_type_t v39 = v38;
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = v37;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      uint64_t v41 = 10589;
      unint64_t v42 = 0xE200000000000000;
      goto LABEL_48;
    case 9:
      uint64_t v12 = *(void *)(a1 + 16);
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      strcpy((char *)v52, ".homeTheater([");
      HIBYTE(v52[1]) = -18;
      sub_10029CFA4(v12);
      sub_100013A80(&qword_10047A080);
      sub_10024D6A8();
      uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
      char v15 = v14;
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0x6365707865202C5DLL;
      v17._object = (void *)0xEC000000203A7374;
      String.append(_:)(v17);
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      return v52[0];
    case 10:
      uint64_t v43 = *(void *)(a1 + 16);
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      strcpy((char *)v52, ".cluster([");
      BYTE3(v52[1]) = 0;
      HIDWORD(v52[1]) = -369098752;
      sub_10029CFA4(v43);
      sub_100013A80(&qword_10047A080);
      sub_10024D6A8();
      uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = v44;
      v47._object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 0x746365707865205DLL;
      v48._object = (void *)0xEB00000000203A73;
      String.append(_:)(v48);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_45:
      String.append(_:)(*(Swift::String *)&v31);
      goto LABEL_46;
    case 11:
      uint64_t v19 = 1667329326;
      goto LABEL_8;
    case 12:
      uint64_t v19 = 1397713198;
LABEL_8:
      unint64_t v7 = v19 & 0xFFFF0000FFFFFFFFLL | 0x2800000000;
      unint64_t v8 = 0xE500000000000000;
      goto LABEL_39;
    case 13:
      unint64_t v7 = 0x2868637461772ELL;
      unint64_t v8 = 0xE700000000000000;
      goto LABEL_39;
    case 14:
      unint64_t v7 = 0x286E6F697369762ELL;
      unint64_t v8 = 0xE800000000000000;
      goto LABEL_39;
    case 15:
      unint64_t v7 = 0x73646F707269612ELL;
LABEL_38:
      unint64_t v8 = 0xE900000000000028;
LABEL_39:
      v52[0] = v7;
      v52[1] = v8;
      if (a2)
      {
        int64_t v34 = (void *)a2;
      }
      else
      {
        uint64_t v5 = 0;
        int64_t v34 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      v35._countAndFlagsBits = v5;
      v35._object = v34;
      String.append(_:)(v35);
LABEL_46:
      swift_bridgeObjectRelease();
      goto LABEL_47;
    case 16:
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      uint64_t v22 = *(unsigned __int16 *)(a1 + 32);
      strcpy((char *)v52, "beatsLegacy(");
      BYTE5(v52[1]) = 0;
      HIWORD(v52[1]) = -5120;
      sub_1001B9EBC(v20, v21, v22);
      v23._countAndFlagsBits = sub_10029C724(v20, v21, v22);
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 41;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      sub_1001B99B8(v20, v21, v22);
      return v52[0];
    case 17:
      if (!(a2 | a1) && a3 == 34816) {
        return 0x7261646E6174732ELL;
      }
      if (a1 == 1 && !a2 && a3 == 34816) {
        return 1651733806;
      }
      if (a1 == 2 && !a2 && a3 == 34816) {
        return 0x79616C707369642ELL;
      }
      if (a1 == 3 && !a2 && a3 == 34816) {
        return 0x696D64682ELL;
      }
      if (a1 == 4 && !a2 && a3 == 34816) {
        return 0x72656E45776F6C2ELL;
      }
      if (a1 == 5 && !a2 && a3 == 34816) {
        return 0x66696470732ELL;
      }
      if (a1 == 6 && !a2 && a3 == 34816) {
        return 7762990;
      }
      if (a1 == 7 && !a2 && a3 == 34816) {
        return 0x656C63696865762ELL;
      }
      if (a1 == 8 && !a2 && a3 == 34816) {
        return 0x42706F547465732ELL;
      }
      BOOL v51 = a1 == 9 && a2 == 0;
      if (v51 && a3 == 34816) {
        return 0x6B6369745376742ELL;
      }
      else {
        return 0x41676E6972616568;
      }
    default:
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v52[0] = 0x6E776F6E6B6E752ELL;
      v52[1] = 0xEF203A6F666E6928;
      v6._countAndFlagsBits = v5;
      v6._object = (void *)a2;
      String.append(_:)(v6);
LABEL_47:
      uint64_t v41 = 41;
      unint64_t v42 = 0xE100000000000000;
LABEL_48:
      String.append(_:)(*(Swift::String *)&v41);
      return v52[0];
  }
}

void *sub_10029CFA4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100014688(0, v1, 0);
    int v3 = (unsigned __int16 *)(a1 + 64);
    do
    {
      uint64_t v5 = *((void *)v3 - 4);
      unsigned int v4 = (void *)*((void *)v3 - 3);
      uint64_t v6 = *((void *)v3 - 2);
      uint64_t v7 = *((void *)v3 - 1);
      uint64_t v8 = *v3;
      swift_bridgeObjectRetain();
      sub_1001B9E5C(v6, v7, v8);
      v9._countAndFlagsBits = v5;
      v9._object = v4;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 32;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      sub_1001B9E5C(v6, v7, v8);
      v11._countAndFlagsBits = sub_10029B234(v6, v7, v8);
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      sub_1001B9958(v6, v7, v8);
      v12._countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_1001B9958(v6, v7, v8);
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_100014688(v13 > 1, v14 + 1, 1);
      }
      v3 += 20;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      char v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = 40;
      v15[5] = 0xE100000000000000;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_10029D13C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  switch((unsigned __int16)a4 >> 11)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      if (a3)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        sub_1001B99B8(a2, a3, a4);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      Hasher._combine(_:)(a4 & 1);
      int v8 = (a4 >> 8) & 1;
      goto LABEL_80;
    case 2:
      Hasher._combine(_:)(3uLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3:
      Hasher._combine(_:)(4uLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 4:
      Swift::UInt v9 = 5;
      goto LABEL_36;
    case 5:
      Swift::UInt v9 = 6;
LABEL_36:
      Hasher._combine(_:)(v9);
      LOBYTE(v8) = a2 & 1;
      goto LABEL_80;
    case 6:
      Hasher._combine(_:)(0xDuLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 7:
      Hasher._combine(_:)(0xEuLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 8:
      uint64_t v28 = *(void *)(a2 + 16);
      Hasher._combine(_:)(0x10uLL);
      Hasher._combine(_:)(*(void *)(v28 + 16));
      uint64_t v29 = *(void *)(v28 + 16);
      if (v29)
      {
        unint64_t v30 = (unsigned __int16 *)(v28 + 64);
        while (2)
        {
          uint64_t v34 = *((void *)v30 - 2);
          uint64_t v33 = *((void *)v30 - 1);
          unsigned int v36 = *v30;
          v30 += 20;
          unsigned int v35 = v36;
          swift_bridgeObjectRetain();
          sub_1001B9E5C(v34, v33, v36);
          String.hash(into:)();
          switch((v36 >> 8) & 6 | (v36 >> 7) & 1)
          {
            case 1u:
              uint64_t v31 = (unsigned __int16)v35 & 0xF97F;
              Swift::UInt v32 = 1;
              goto LABEL_44;
            case 2u:
              uint64_t v31 = (unsigned __int16)v35 & 0xF97F;
              Swift::UInt v32 = 2;
              goto LABEL_44;
            case 3u:
              uint64_t v31 = (unsigned __int16)v35 & 0xF97F;
              Swift::UInt v32 = 3;
              goto LABEL_44;
            case 4u:
              uint64_t v31 = (unsigned __int16)v35 & 0xF97F;
              Swift::UInt v32 = 4;
              goto LABEL_44;
            case 5u:
              uint64_t v31 = (unsigned __int16)v35 & 0xF97F;
              Swift::UInt v32 = 5;
LABEL_44:
              Hasher._combine(_:)(v32);
              sub_1001B9EBC(v34, v33, v31);
              sub_10029D13C(a1, v34, v33, v31);
              goto LABEL_45;
            case 6u:
              Hasher._combine(_:)(6uLL);
              Hasher._combine(_:)(0);
              swift_bridgeObjectRelease();
              if (--v29) {
                continue;
              }
              return;
            default:
              uint64_t v37 = *(void *)(v34 + 16);
              uint64_t v38 = *(void *)(v34 + 24);
              uint64_t v39 = *(unsigned __int16 *)(v34 + 32);
              Hasher._combine(_:)(0);
              sub_1001B9E5C(v34, v33, v35);
              sub_1001B9EBC(v37, v38, v39);
              sub_10029D13C(a1, v37, v38, v39);
              String.hash(into:)();
              sub_1001B99B8(v37, v38, v39);
LABEL_45:
              sub_1001B9958(v34, v33, v35);
              swift_bridgeObjectRelease();
              sub_1001B9958(v34, v33, v35);
              if (--v29) {
                continue;
              }
              return;
          }
        }
      }
      return;
    case 9:
      uint64_t v10 = *(void *)(a2 + 16);
      char v52 = *(unsigned char *)(a2 + 24);
      Hasher._combine(_:)(0x11uLL);
      Hasher._combine(_:)(*(void *)(v10 + 16));
      uint64_t v11 = *(void *)(v10 + 16);
      if (v11)
      {
        Swift::String v12 = (unsigned __int16 *)(v10 + 64);
        while (2)
        {
          uint64_t v16 = *((void *)v12 - 2);
          uint64_t v15 = *((void *)v12 - 1);
          unsigned int v18 = *v12;
          v12 += 20;
          unsigned int v17 = v18;
          swift_bridgeObjectRetain();
          sub_1001B9E5C(v16, v15, v18);
          String.hash(into:)();
          switch((v18 >> 8) & 6 | (v18 >> 7) & 1)
          {
            case 1u:
              uint64_t v13 = (unsigned __int16)v17 & 0xF97F;
              Swift::UInt v14 = 1;
              goto LABEL_11;
            case 2u:
              uint64_t v13 = (unsigned __int16)v17 & 0xF97F;
              Swift::UInt v14 = 2;
              goto LABEL_11;
            case 3u:
              uint64_t v13 = (unsigned __int16)v17 & 0xF97F;
              Swift::UInt v14 = 3;
              goto LABEL_11;
            case 4u:
              uint64_t v13 = (unsigned __int16)v17 & 0xF97F;
              Swift::UInt v14 = 4;
              goto LABEL_11;
            case 5u:
              uint64_t v13 = (unsigned __int16)v17 & 0xF97F;
              Swift::UInt v14 = 5;
LABEL_11:
              Hasher._combine(_:)(v14);
              sub_1001B9EBC(v16, v15, v13);
              sub_10029D13C(a1, v16, v15, v13);
              goto LABEL_12;
            case 6u:
              Hasher._combine(_:)(6uLL);
              Hasher._combine(_:)(0);
              swift_bridgeObjectRelease();
              if (--v11) {
                continue;
              }
              goto LABEL_66;
            default:
              uint64_t v19 = *(void *)(v16 + 16);
              uint64_t v20 = *(void *)(v16 + 24);
              uint64_t v21 = *(unsigned __int16 *)(v16 + 32);
              Hasher._combine(_:)(0);
              sub_1001B9E5C(v16, v15, v17);
              sub_1001B9EBC(v19, v20, v21);
              sub_10029D13C(a1, v19, v20, v21);
              String.hash(into:)();
              sub_1001B99B8(v19, v20, v21);
LABEL_12:
              sub_1001B9958(v16, v15, v17);
              swift_bridgeObjectRelease();
              sub_1001B9958(v16, v15, v17);
              if (--v11) {
                continue;
              }
              goto LABEL_66;
          }
        }
      }
      goto LABEL_66;
    case 10:
      uint64_t v40 = *(void *)(a2 + 16);
      char v52 = *(unsigned char *)(a2 + 24);
      Hasher._combine(_:)(0x12uLL);
      Hasher._combine(_:)(*(void *)(v40 + 16));
      uint64_t v41 = *(void *)(v40 + 16);
      if (v41)
      {
        unint64_t v42 = (unsigned __int16 *)(v40 + 64);
        while (2)
        {
          uint64_t v46 = *((void *)v42 - 2);
          uint64_t v45 = *((void *)v42 - 1);
          unsigned int v48 = *v42;
          v42 += 20;
          unsigned int v47 = v48;
          swift_bridgeObjectRetain();
          sub_1001B9E5C(v46, v45, v48);
          String.hash(into:)();
          switch((v48 >> 8) & 6 | (v48 >> 7) & 1)
          {
            case 1u:
              uint64_t v43 = (unsigned __int16)v47 & 0xF97F;
              Swift::UInt v44 = 1;
              goto LABEL_57;
            case 2u:
              uint64_t v43 = (unsigned __int16)v47 & 0xF97F;
              Swift::UInt v44 = 2;
              goto LABEL_57;
            case 3u:
              uint64_t v43 = (unsigned __int16)v47 & 0xF97F;
              Swift::UInt v44 = 3;
              goto LABEL_57;
            case 4u:
              uint64_t v43 = (unsigned __int16)v47 & 0xF97F;
              Swift::UInt v44 = 4;
              goto LABEL_57;
            case 5u:
              uint64_t v43 = (unsigned __int16)v47 & 0xF97F;
              Swift::UInt v44 = 5;
LABEL_57:
              Hasher._combine(_:)(v44);
              sub_1001B9EBC(v46, v45, v43);
              sub_10029D13C(a1, v46, v45, v43);
              goto LABEL_58;
            case 6u:
              Hasher._combine(_:)(6uLL);
              Hasher._combine(_:)(0);
              swift_bridgeObjectRelease();
              if (--v41) {
                continue;
              }
              goto LABEL_66;
            default:
              uint64_t v49 = *(void *)(v46 + 16);
              uint64_t v50 = *(void *)(v46 + 24);
              uint64_t v51 = *(unsigned __int16 *)(v46 + 32);
              Hasher._combine(_:)(0);
              sub_1001B9E5C(v46, v45, v47);
              sub_1001B9EBC(v49, v50, v51);
              sub_10029D13C(a1, v49, v50, v51);
              String.hash(into:)();
              sub_1001B99B8(v49, v50, v51);
LABEL_58:
              sub_1001B9958(v46, v45, v47);
              swift_bridgeObjectRelease();
              sub_1001B9958(v46, v45, v47);
              if (--v41) {
                continue;
              }
              goto LABEL_66;
          }
        }
      }
LABEL_66:
      LOBYTE(v8) = v52;
      goto LABEL_80;
    case 11:
      Hasher._combine(_:)(0x15uLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 12:
      Hasher._combine(_:)(0x16uLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 13:
      Hasher._combine(_:)(0x17uLL);
      if (!a3) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 14:
      Hasher._combine(_:)(0x18uLL);
      if (a3) {
        goto LABEL_26;
      }
      goto LABEL_6;
    case 15:
      Hasher._combine(_:)(0x19uLL);
      if (a3)
      {
LABEL_26:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t v22 = a2;
        uint64_t v23 = a3;
        unsigned __int16 v24 = a4;
LABEL_27:
        sub_1001B99B8(v22, v23, v24);
      }
      else
      {
LABEL_6:
        LOBYTE(v8) = 0;
LABEL_80:
        Hasher._combine(_:)(v8);
      }
      return;
    case 16:
      uint64_t v25 = *(void *)(a2 + 16);
      uint64_t v26 = *(void *)(a2 + 24);
      uint64_t v27 = *(unsigned __int16 *)(a2 + 32);
      Hasher._combine(_:)(0x1BuLL);
      sub_1001B9EBC(v25, v26, v27);
      sub_10029D13C(a1, v25, v26, v27);
      uint64_t v22 = v25;
      uint64_t v23 = v26;
      unsigned __int16 v24 = v27;
      goto LABEL_27;
    case 17:
      if (a3 | a2 || (unsigned __int16)a4 != 34816)
      {
        if (a2 == 1 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(7uLL);
        }
        else if (a2 == 2 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(8uLL);
        }
        else if (a2 == 3 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(9uLL);
        }
        else if (a2 == 4 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0xAuLL);
        }
        else if (a2 == 5 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0xBuLL);
        }
        else if (a2 == 6 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0xCuLL);
        }
        else if (a2 == 7 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0xFuLL);
        }
        else if (a2 == 8 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0x13uLL);
        }
        else if (a2 == 9 && !a3 && (unsigned __int16)a4 == 34816)
        {
          Hasher._combine(_:)(0x14uLL);
        }
        else
        {
          Hasher._combine(_:)(0x1AuLL);
        }
      }
      else
      {
        Hasher._combine(_:)(1uLL);
      }
      return;
    default:
      Hasher._combine(_:)(0);
      String.hash(into:)();
      return;
  }
}

uint64_t sub_10029DAEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, char *), uint64_t (*a6)(void))
{
  uint64_t v11 = a3(0) - 8;
  uint64_t v12 = __chkstk_darwin(v11);
  Swift::UInt v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unsigned int v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 == *(void *)(a2 + 16))
  {
    if (!v18 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v28 = a2;
      uint64_t v19 = a5;
      unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v21 = *(void *)(v15 + 72);
      uint64_t v22 = v18 - 1;
      do
      {
        sub_1002B06CC(a1 + v20, (uint64_t)v17, a4);
        sub_1002B06CC(v28 + v20, (uint64_t)v14, a4);
        char v23 = v19(v17, v14);
        sub_1002B0524((uint64_t)v14, a6);
        sub_1002B0524((uint64_t)v17, a6);
        BOOL v25 = v22-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v20 += v21;
      }
      while (v25);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t sub_10029DC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 64);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  unsigned int v41 = *(unsigned __int16 *)(a2 + 64);
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
    || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    sub_1001B9E5C(v6, v5, v7);
    swift_bridgeObjectRetain();
    sub_1001B9E5C(v8, v9, v41);
    char v36 = sub_1002AE288(v6, v5, v7, v8, v9, v41);
    swift_bridgeObjectRelease();
    sub_1001B9958(v8, v9, v41);
    swift_bridgeObjectRelease();
    sub_1001B9958(v6, v5, v7);
    if ((v36 & 1) == 0) {
      return 0;
    }
    uint64_t v12 = v2 - 1;
    if (v2 != 1)
    {
      uint64_t v13 = (unsigned __int16 *)(a2 + 104);
      Swift::UInt v14 = (unsigned __int16 *)(a1 + 104);
      while (1)
      {
        if (!v12)
        {
          __break(1u);
          JUMPOUT(0x10029E1ECLL);
        }
        uint64_t v17 = *((void *)v14 - 2);
        uint64_t v18 = *((void *)v14 - 1);
        unsigned int v19 = *v14;
        uint64_t v20 = *((void *)v13 - 2);
        uint64_t v40 = *((void *)v13 - 1);
        unsigned int v21 = *v13;
        BOOL v22 = *((void *)v14 - 4) == *((void *)v13 - 4) && *((void *)v14 - 3) == *((void *)v13 - 3);
        if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        switch((v19 >> 8) & 6 | (v19 >> 7) & 1)
        {
          case 1u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) != 1) {
              return 0;
            }
            goto LABEL_30;
          case 2u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) != 2) {
              return 0;
            }
LABEL_30:
            uint64_t v42 = v17;
            unsigned int v34 = v19 & 0xF97F;
            unsigned int v37 = v21 & 0xF97F;
            swift_bridgeObjectRetain();
            uint64_t v23 = v17;
            uint64_t v16 = v18;
            sub_1001B9E5C(v23, v18, v19);
            goto LABEL_13;
          case 3u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) == 3) {
              goto LABEL_12;
            }
            return 0;
          case 4u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) != 4) {
              return 0;
            }
            goto LABEL_12;
          case 5u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) != 5) {
              return 0;
            }
LABEL_12:
            uint64_t v42 = v17;
            unsigned int v34 = v19 & 0xF97F;
            unsigned int v37 = v21 & 0xF97F;
            uint64_t v15 = v17;
            uint64_t v16 = v18;
            sub_1001B9E5C(v15, v18, v19);
            swift_bridgeObjectRetain();
LABEL_13:
            swift_bridgeObjectRetain();
            sub_1001B9E5C(v20, v40, v21);
            char v38 = sub_10029B648(v42, v16, v34, v20, v40, v37);
            swift_bridgeObjectRelease();
            sub_1001B9958(v20, v40, v21);
            swift_bridgeObjectRelease();
            sub_1001B9958(v42, v16, v19);
            if (v38) {
              goto LABEL_14;
            }
            return 0;
          case 6u:
            if (((v21 >> 8) & 6 | (v21 >> 7) & 1) != 6) {
              return 0;
            }
            uint64_t result = 0;
            if (v40 | v20 || v21 != 1536) {
              return result;
            }
            goto LABEL_14;
          default:
            if ((v21 >> 8) & 6 | (v21 >> 7) & 1) {
              return 0;
            }
            uint64_t v33 = *(void *)(v17 + 16);
            uint64_t v35 = *(void *)(v17 + 24);
            unsigned int v39 = *(unsigned __int16 *)(v17 + 32);
            uint64_t v30 = *(void *)(v20 + 24);
            uint64_t v31 = *(void *)(v20 + 16);
            unsigned int v32 = *(unsigned __int16 *)(v20 + 32);
            uint64_t v25 = *(void *)(v20 + 40);
            uint64_t v26 = *(void *)(v17 + 40);
            uint64_t v27 = *(void *)(v20 + 48);
            uint64_t v28 = *(void *)(v17 + 48);
            swift_bridgeObjectRetain();
            unsigned int v29 = v19;
            sub_1001B9E5C(v17, v18, v19);
            swift_bridgeObjectRetain();
            sub_1001B9E5C(v20, v40, v21);
            sub_1001B9EBC(v33, v35, v39);
            sub_1001B9EBC(v31, v30, v32);
            if ((sub_10029B648(v33, v35, v39, v31, v30, v32) & 1) == 0)
            {
              sub_1001B99B8(v31, v30, v32);
              sub_1001B99B8(v33, v35, v39);
              swift_bridgeObjectRelease();
              sub_1001B9958(v20, v40, v21);
              swift_bridgeObjectRelease();
              sub_1001B9958(v17, v18, v19);
              return 0;
            }
            if (v26 == v25 && v28 == v27)
            {
              sub_1001B99B8(v31, v30, v32);
              sub_1001B99B8(v33, v35, v39);
              swift_bridgeObjectRelease();
              sub_1001B9958(v20, v40, v21);
              swift_bridgeObjectRelease();
              sub_1001B9958(v17, v18, v19);
            }
            else
            {
              char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
              sub_1001B99B8(v31, v30, v32);
              sub_1001B99B8(v33, v35, v39);
              swift_bridgeObjectRelease();
              sub_1001B9958(v20, v40, v21);
              swift_bridgeObjectRelease();
              sub_1001B9958(v17, v18, v29);
              if ((v24 & 1) == 0) {
                return 0;
              }
            }
LABEL_14:
            v13 += 20;
            v14 += 20;
            uint64_t result = 1;
            if (!--v12) {
              return result;
            }
            break;
        }
      }
    }
    return 1;
  }
  return result;
}

Swift::Int sub_10029E208()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(unsigned __int16 *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_10029D13C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10029E264(uint64_t a1)
{
  sub_10029D13C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int16 *)(v1 + 16));
}

Swift::Int sub_10029E270()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(unsigned __int16 *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_10029D13C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10029E2C8()
{
  return sub_10029C724(*(void *)v0, *(void *)(v0 + 8), *(_WORD *)(v0 + 16));
}

uint64_t sub_10029E2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10029E2EC(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))sub_10029B648);
}

uint64_t sub_10029E2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int16 *)(a2 + 16));
}

void *sub_10029E310()
{
  return &unk_1003C9230;
}

void *sub_10029E31C()
{
  return &unk_1003C9231;
}

void *sub_10029E328()
{
  return &unk_1003C9232;
}

void *sub_10029E334()
{
  return &unk_1003C9233;
}

void *sub_10029E340()
{
  return &unk_1003C9234;
}

uint64_t sub_10029E34C(char a1)
{
  uint64_t v2 = 0x655369746C756D2ELL;
  switch(a1)
  {
    case 2:
      return v2;
    case 7:
      return 0xD000000000000013;
    case 3:
      return 0x626170756F72672ELL;
  }
  if (a1)
  {
    unsigned int v3 = sub_100229FF0(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v3[2];
    unint64_t v5 = v3[3];
    unint64_t v6 = v4 + 1;
    if (v4 >= v5 >> 1)
    {
      unint64_t v27 = v4 + 1;
      unsigned int v21 = v3;
      unint64_t v22 = v3[2];
      uint64_t v23 = sub_100229FF0((void *)(v5 > 1), v4 + 1, 1, v21);
      unint64_t v4 = v22;
      unint64_t v6 = v27;
      unsigned int v3 = v23;
    }
    v3[2] = v6;
    uint64_t v7 = (char *)&v3[2 * v4];
    strcpy(v7 + 32, ".singleSelect");
    *((_WORD *)v7 + 23) = -4864;
    if ((a1 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  unsigned int v3 = _swiftEmptyArrayStorage;
  if ((a1 & 2) != 0)
  {
LABEL_12:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v3 = sub_100229FF0(0, v3[2] + 1, 1, v3);
    }
    unint64_t v8 = v3[2];
    unint64_t v9 = v3[3];
    unint64_t v10 = v8 + 1;
    if (v8 >= v9 >> 1)
    {
      unint64_t v28 = v8 + 1;
      char v24 = v3;
      unint64_t v25 = v3[2];
      uint64_t v26 = sub_100229FF0((void *)(v9 > 1), v8 + 1, 1, v24);
      unint64_t v8 = v25;
      unint64_t v10 = v28;
      unsigned int v3 = v26;
    }
    v3[2] = v10;
    uint64_t v11 = (char *)&v3[2 * v8];
    strcpy(v11 + 32, ".multiSelect");
    v11[45] = 0;
    *((_WORD *)v11 + 23) = -5120;
  }
LABEL_17:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v3 = sub_100229FF0(0, v3[2] + 1, 1, v3);
    }
    unint64_t v13 = v3[2];
    unint64_t v12 = v3[3];
    if (v13 >= v12 >> 1) {
      unsigned int v3 = sub_100229FF0((void *)(v12 > 1), v13 + 1, 1, v3);
    }
    v3[2] = v13 + 1;
    Swift::UInt v14 = (char *)&v3[2 * v13];
    strcpy(v14 + 32, ".remoteControl");
    v14[47] = -18;
  }
  sub_100013A80(&qword_10047A080);
  sub_10024D6A8();
  uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 93;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t sub_10029E62C()
{
  return sub_10029E34C(*v0);
}

void sub_10029E634(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10029E63C(char *a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v4 = sub_100013A80(&qword_10047C990);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v28 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = type metadata accessor for RoutingSession.Properties();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v2;
  unint64_t v25 = v16;
  v16(v13, v2, v9);
  v24[1] = sub_1002B0684(&qword_10047C998, (void (*)(uint64_t))&type metadata accessor for RoutingSession.Properties);
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_1002B0684(&qword_10047C9A0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.Properties);
  uint64_t v26 = a2;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v29 = v4;
  Swift::String v18 = &v8[*(int *)(v4 + 48)];
  *unint64_t v8 = v17 & 1;
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    unsigned int v21 = v25;
    uint64_t v20 = v26;
    v25(v18, v26, v9);
    v21(v13, v20, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    Swift::String v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    Swift::String v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v18, v15, v9);
  }
  unint64_t v22 = &v28[*(int *)(v29 + 48)];
  v19(v22, v18, v9);
  v19(v30, v22, v9);
  return v17 & 1;
}

uint64_t sub_10029E934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10029E950(char a1)
{
  switch(a1)
  {
    case 1:
      return 0x655369746C756D2ELL;
    case 4:
      return 0x6574756D2ELL;
    case 2:
      return 0x626170756F72672ELL;
  }
  if (a1)
  {
    unsigned int v3 = sub_100229FF0(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v5 = v3[2];
    unint64_t v4 = v3[3];
    unint64_t v6 = v5 + 1;
    if (v5 >= v4 >> 1)
    {
      unsigned int v21 = sub_100229FF0((void *)(v4 > 1), v5 + 1, 1, v3);
      unint64_t v6 = v5 + 1;
      unsigned int v3 = v21;
    }
    v3[2] = v6;
    uint64_t v7 = &v3[2 * v5];
    v7[4] = 0x74756C6F7362612ELL;
    v7[5] = 0xE900000000000065;
    if ((a1 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  unsigned int v3 = _swiftEmptyArrayStorage;
  if ((a1 & 2) != 0)
  {
LABEL_13:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v3 = sub_100229FF0(0, v3[2] + 1, 1, v3);
    }
    unint64_t v9 = v3[2];
    unint64_t v8 = v3[3];
    unint64_t v10 = v9 + 1;
    if (v9 >= v8 >> 1)
    {
      unint64_t v22 = sub_100229FF0((void *)(v8 > 1), v9 + 1, 1, v3);
      unint64_t v10 = v9 + 1;
      unsigned int v3 = v22;
    }
    v3[2] = v10;
    uint64_t v11 = &v3[2 * v9];
    v11[4] = 0x766974616C65722ELL;
    v11[5] = 0xE900000000000065;
  }
LABEL_18:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v3 = sub_100229FF0(0, v3[2] + 1, 1, v3);
    }
    unint64_t v13 = v3[2];
    unint64_t v12 = v3[3];
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t v23 = sub_100229FF0((void *)(v12 > 1), v13 + 1, 1, v3);
      unint64_t v14 = v13 + 1;
      unsigned int v3 = v23;
    }
    v3[2] = v14;
    uint64_t v15 = &v3[2 * v13];
    v15[4] = 0x6574756D2ELL;
    v15[5] = 0xE500000000000000;
  }
  sub_100013A80(&qword_10047A080);
  sub_10024D6A8();
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v18 = v17;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = 93;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return 91;
}

unsigned char *sub_10029EC0C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int sub_10029EC18()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10029EC60()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10029EC8C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10029ECD0()
{
  return sub_10029E950(*v0);
}

unsigned char *sub_10029ECD8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *sub_10029ECEC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *sub_10029ED00@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10029ED14(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_10029ED44@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_10029ED70@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *sub_10029ED94(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_10029EDA8(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_10029EDBC(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_10029EDD0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10029EDE4(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10029EDF8(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10029EE0C(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10029EE20()
{
  return *v0 == 0;
}

unsigned char *sub_10029EE30(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_10029EE44@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10029EE54(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10029EE60@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = sub_1002B0448(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_10029EEA0()
{
  return &unk_100427A90;
}

uint64_t sub_10029EEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v4 = sub_100013A80(&qword_100478990);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = 0x206F742065766F4DLL;
  unint64_t v28 = 0xE800000000000000;
  uint64_t result = MSVCopyLocalizedModelName();
  if (result)
  {
    unint64_t v8 = (void *)result;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = v27;
    unint64_t v13 = v28;
    uint64_t v15 = enum case for RoutingItem.SelectionIndicator.none(_:);
    uint64_t v16 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v6, v15, v16);
    Swift::String v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v18(v6, 0, 1, v16);
    Swift::String v19 = (int *)type metadata accessor for HostedRoutingItem(0);
    uint64_t v20 = (uint64_t)a3 + v19[8];
    v18((char *)v20, 1, 1, v16);
    unsigned int v21 = (char *)a3 + v19[12];
    *(_DWORD *)unsigned int v21 = 0;
    v21[4] = 1;
    *a3 = 0xD000000000000010;
    a3[1] = 0x80000001003B9AA0;
    uint64_t v22 = v25;
    a3[2] = v26;
    a3[3] = v22;
    a3[4] = v14;
    a3[5] = v13;
    uint64_t v23 = (char *)a3 + v19[14];
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((_WORD *)v23 + 8) = 1536;
    type metadata accessor for Symbols();
    swift_bridgeObjectRetain();
    a3[6] = sub_10030077C(0, 0, 0x600u);
    a3[7] = v24;
    *((unsigned char *)a3 + v19[9]) = 0;
    *((unsigned char *)a3 + v19[10]) = 0;
    uint64_t result = sub_1001E7184((uint64_t)v6, v20, &qword_100478990);
    *((unsigned char *)a3 + v19[11]) = 0;
    *((unsigned char *)a3 + v19[16]) = 0;
    *((unsigned char *)a3 + v19[15]) = 1;
    *(_DWORD *)unsigned int v21 = 0;
    v21[4] = 1;
    *((unsigned char *)a3 + v19[13]) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10029F110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int16 a10, char a11, char a12, uint64_t a13, char a14, char a15, char a16, int a17, int a18, char a19, __int16 a20,char a21)
{
  uint64_t v27 = (int *)type metadata accessor for HostedRoutingItem(0);
  uint64_t v28 = (uint64_t)a9 + v27[8];
  uint64_t v29 = type metadata accessor for RoutingItem.SelectionIndicator();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
  uint64_t v30 = (char *)a9 + v27[12];
  *(_DWORD *)uint64_t v30 = 0;
  v30[4] = 1;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  uint64_t v31 = (char *)a9 + v27[14];
  *(void *)uint64_t v31 = a7;
  *((void *)v31 + 1) = a8;
  *((_WORD *)v31 + 8) = a10;
  type metadata accessor for Symbols();
  sub_1001B9E5C(a7, a8, a10);
  unint64_t v32 = sub_10030077C(a7, a8, a10);
  uint64_t v34 = v33;
  sub_1001B9958(a7, a8, a10);
  a9[6] = v32;
  a9[7] = v34;
  *((unsigned char *)a9 + v27[9]) = a11;
  *((unsigned char *)a9 + v27[10]) = a12;
  uint64_t result = sub_1001E7184(a13, v28, &qword_100478990);
  *((unsigned char *)a9 + v27[11]) = a14;
  *((unsigned char *)a9 + v27[16]) = a15;
  *((unsigned char *)a9 + v27[15]) = a16;
  *(_DWORD *)uint64_t v30 = a18;
  v30[4] = a19 & 1;
  *((unsigned char *)a9 + v27[13]) = a21;
  return result;
}

uint64_t sub_10029F2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 60));
  uint64_t result = sub_1002B06CC(a1, a2, type metadata accessor for HostedRoutingItem);
  if (v4 == 1)
  {
    sub_10018FE08(0, &qword_100478998);
    uint64_t v6 = sub_10031CAE4();
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a2 + 32) = v6;
    *(void *)(a2 + 40) = v8;
  }
  return result;
}

uint64_t sub_10029F394()
{
  sub_1001EEAA8();
  if (*(void *)(Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)() + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return v0;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_10029F468()
{
  sub_1001EEAA8();
  if (*(void *)(Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)() + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return v0;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  return result;
}

uint64_t sub_10029F540()
{
  if (v0[3])
  {
    uint64_t v7 = v0[2];
    swift_bridgeObjectRetain();
    v1._countAndFlagsBits = 14906;
    v1._object = (void *)0xE200000000000000;
    String.append(_:)(v1);
    uint64_t v3 = *v0;
    uint64_t v2 = (void *)v0[1];
    swift_bridgeObjectRetain();
    v4._countAndFlagsBits = v3;
    v4._object = v2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    uint64_t v5 = *v0;
    swift_bridgeObjectRetain();
  }
  return v5;
}

uint64_t sub_10029F5DC()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 56);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unsigned int v4 = *(unsigned __int16 *)(v1 + 16);
  uint64_t result = 0;
  switch((v4 >> 8) & 6 | (v4 >> 7) & 1)
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      unsigned __int16 v6 = v4 & 0xF97F;
      goto LABEL_3;
    case 6u:
      return result;
    default:
      unsigned __int16 v6 = *(_WORD *)(v2 + 32);
      uint64_t v7 = v2 + 16;
      uint64_t v2 = *(void *)(v2 + 16);
      uint64_t v3 = *(void *)(v7 + 8);
LABEL_3:
      sub_1001B9EBC(v2, v3, v6);
      uint64_t result = v2;
      break;
  }
  return result;
}

BOOL sub_10029F6A0()
{
  unsigned int v1 = *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 56) + 16);
  return ((v1 >> 8) & 6 | (v1 >> 7) & 1) == 5;
}

BOOL sub_10029F6DC()
{
  unsigned int v1 = *(unsigned __int16 *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 56) + 16);
  return ((v1 >> 8) & 6 | (v1 >> 7) & 1) == 1;
}

BOOL sub_10029F718()
{
  unsigned int v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 56));
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unsigned int v4 = *((unsigned __int16 *)v1 + 8);
  int v5 = (v4 >> 8) & 6 | (v4 >> 7) & 1;
  unsigned int v6 = v4 >> 11;
  if ((v5 - 1) >= 5)
  {
    if (v5) {
      return 0;
    }
    if (*(unsigned __int16 *)(v2 + 32) >> 11 == 15) {
      return 1;
    }
  }
  else if (v4 >> 11 == 15)
  {
    return 1;
  }
  if (v5)
  {
    if (v6 == 2) {
      return 1;
    }
  }
  else if (*(unsigned __int16 *)(v2 + 32) >> 11 == 2)
  {
    return 1;
  }
  if (v5)
  {
    if (v6 == 3) {
      return 1;
    }
  }
  else if (*(unsigned __int16 *)(v2 + 32) >> 11 == 3)
  {
    return 1;
  }
  switch((v4 >> 8) & 6 | (v4 >> 7) & 1)
  {
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      unsigned int v7 = v4 & 0xF97F;
      break;
    default:
      unsigned int v7 = *(unsigned __int16 *)(v2 + 32);
      uint64_t v12 = v2 + 16;
      uint64_t v2 = *(void *)(v2 + 16);
      uint64_t v3 = *(void *)(v12 + 8);
      break;
  }
  return v7 >> 11 == 17 && v2 == 10 && v3 == 0 && v7 == 34816;
}

uint64_t sub_10029F840()
{
  if (*v0 == 0xD000000000000010 && v0[1] == 0x80000001003B9AA0) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10029F88C(uint64_t a1, uint64_t a2)
{
  int v5 = (char *)v2 + *(int *)(type metadata accessor for HostedRoutingItem(0) + 56);
  uint64_t v6 = *(void *)v5;
  unsigned int v7 = *((unsigned __int16 *)v5 + 8);
  int v8 = (v7 >> 8) & 6 | (v7 >> 7) & 1;
  if ((v8 - 1) >= 5)
  {
    if (v8) {
      goto LABEL_16;
    }
    unsigned int v7 = *(unsigned __int16 *)(v6 + 32);
    uint64_t v6 = *(void *)(v6 + 16);
  }
  unsigned int v9 = v7 >> 11;
  if (v9 == 10 || v9 == 9 || v9 == 8)
  {
    uint64_t v10 = *(void *)(v6 + 16);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v12 = (void *)(v10 + 40);
      do
      {
        BOOL v13 = *(v12 - 1) == a1 && *v12 == a2;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          return 1;
        }
        v12 += 5;
      }
      while (--v11);
    }
  }
LABEL_16:
  if (*v2 == a1 && v2[1] == a2) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10029F9A8()
{
  unsigned int v1 = (int *)type metadata accessor for HostedRoutingItem(0);
  if (*((unsigned char *)v0 + v1[16]) == 1)
  {
    uint64_t v2 = sub_100229FF0(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_100229FF0((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    int v5 = &v2[2 * v4];
    v5[4] = 0x64656C6261736964;
    v5[5] = 0xE800000000000000;
  }
  else
  {
    uint64_t v2 = _swiftEmptyArrayStorage;
  }
  if (*((unsigned char *)v0 + v1[9]) == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100229FF0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100229FF0((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    int v8 = &v2[2 * v7];
    v8[4] = 0x64656B636970;
    v8[5] = 0xE600000000000000;
  }
  if (*((unsigned char *)v0 + v1[15]) == 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100229FF0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100229FF0((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    uint64_t v11 = &v2[2 * v10];
    v11[4] = 0x6C61636F6CLL;
    v11[5] = 0xE500000000000000;
  }
  _StringGuts.grow(_:)(68);
  v12._countAndFlagsBits = 60;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._object = (void *)0x80000001003C9230;
  v13._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x203A6469202D20;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  if (v0[3])
  {
    uint64_t v44 = v0[2];
    uint64_t v45 = (void *)v0[3];
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = 14906;
    v15._object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    uint64_t v16 = *v0;
    uint64_t v17 = (void *)v0[1];
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v44;
    uint64_t v20 = v45;
  }
  else
  {
    uint64_t v19 = *v0;
    uint64_t v20 = (void *)v0[1];
    swift_bridgeObjectRetain();
  }
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x3A656C746974202CLL;
  v22._object = (void *)0xE900000000000020;
  String.append(_:)(v22);
  uint64_t v23 = v0[4];
  uint64_t v24 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x7265706F7270202CLL;
  v26._object = (void *)0xEF5B203A73656974;
  String.append(_:)(v26);
  sub_100013A80(&qword_10047A080);
  sub_10024D6A8();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0x203A63202C5DLL;
  v31._object = (void *)0xE600000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = sub_10029E34C(*((unsigned char *)v0 + v1[11]));
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x203A65707974202CLL;
  v33._object = (void *)0xE800000000000000;
  String.append(_:)(v33);
  uint64_t v34 = (char *)v0 + v1[14];
  uint64_t v35 = *(void *)v34;
  unint64_t v36 = *((void *)v34 + 1);
  LODWORD(v29) = *((unsigned __int16 *)v34 + 8);
  sub_1001B9E5C(*(void *)v34, v36, v29);
  v37._countAndFlagsBits = sub_10029B234(v35, v36, v29);
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  sub_1001B9958(v35, v36, v29);
  v38._countAndFlagsBits = 0x203A6C6F76202C5DLL;
  v38._object = (void *)0xE800000000000000;
  String.append(_:)(v38);
  if (*((unsigned char *)v0 + v1[12] + 4))
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v40 = 7104878;
  }
  else
  {
    uint64_t v40 = Float.description.getter();
    unint64_t v39 = v41;
  }
  unint64_t v42 = v39;
  String.append(_:)(*(Swift::String *)&v40);
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10029FE3C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100013A80(&qword_100478990);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = (int *)type metadata accessor for HostedRoutingItem(0);
  sub_1001E71E8(v1 + v11[8], (uint64_t)v10, &qword_100478990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    sub_1002B0684(&qword_10047C490, (void (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + v11[9]));
  Hasher._combine(_:)(*(unsigned char *)(v1 + v11[10]));
  Hasher._combine(_:)(*(unsigned char *)(v1 + v11[11]));
  uint64_t v12 = v1 + v11[12];
  if (*(unsigned char *)(v12 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v13 = *(_DWORD *)v12;
    Hasher._combine(_:)(1u);
    if ((v13 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v14 = v13;
    }
    else {
      Swift::UInt32 v14 = 0;
    }
    Hasher._combine(_:)(v14);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + v11[13]));
  uint64_t v15 = v1 + v11[14];
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = *(void *)(v15 + 8);
  unsigned int v18 = *(unsigned __int16 *)(v15 + 16);
  sub_1001B9E5C(*(void *)v15, v17, v18);
  sub_10029B498(a1, v16, v17, v18);
  sub_1001B9958(v16, v17, v18);
  Hasher._combine(_:)(*(unsigned char *)(v2 + v11[15]));
  Hasher._combine(_:)(*(unsigned char *)(v2 + v11[16]));
}

Swift::Int sub_1002A01C0(uint64_t a1, uint64_t a2)
{
  return sub_1002AC438(a1, a2, (void (*)(unsigned char *))sub_10029FE3C);
}

Swift::Int sub_1002A01DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC49C(a1, a2, a3, (void (*)(unsigned char *))sub_10029FE3C);
}

uint64_t sub_1002A01FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int sub_1002A0238()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1002A02A8()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002A0320()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1002A038C()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 0x6C61636F6C2ELL;
  }
  uint64_t v2 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x6E696F70646E652ELL;
}

uint64_t sub_1002A0408(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

const char *sub_1002A0458()
{
  return "LOCAL";
}

uint64_t sub_1002A0464()
{
  return sub_1002A6530(type metadata accessor for HostedRoutingSourceSession);
}

uint64_t sub_1002A047C()
{
  uint64_t v0 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v10 - v5;
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:), v0);
  char v7 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v8(v6, v0);
  return v7 & 1;
}

uint64_t sub_1002A05C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v85 = a6;
  uint64_t v86 = a5;
  unint64_t v80 = a4;
  uint64_t v87 = a1;
  uint64_t v84 = a7;
  uint64_t v9 = sub_100013A80(&qword_1004794B8);
  __chkstk_darwin(v9 - 8);
  uint64_t v83 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for RoutingControls();
  uint64_t v82 = *(void *)(v90 - 8);
  uint64_t v11 = __chkstk_darwin(v90);
  uint64_t v81 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v89 = (uint64_t)&v68 - v13;
  uint64_t v14 = sub_100013A80(&qword_100479F98);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  id v79 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v92 = (char *)&v68 - v21;
  uint64_t v22 = sub_100013A80(&qword_1004794C0);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v78 = (uint64_t)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  Swift::String v26 = (char *)&v68 - v25;
  sub_10018FE08(0, &qword_100478998);
  id v88 = sub_10031CA84();
  id v27 = [a3 origin];
  id v28 = [self server];
  id v29 = [v28 nowPlayingServer];

  id v77 = v27;
  id v30 = [v29 originClientForOrigin:v27];

  id v31 = [v30 activeNowPlayingClient];
  id v32 = [v31 activePlayerClient];

  id v33 = v30;
  id v91 = v32;
  uint64_t v34 = (uint64_t)v26;
  uint64_t v35 = v26;
  unint64_t v36 = v33;
  sub_1002A0D30(v30, v32, v35);
  unsigned int v76 = [a3 canModifyGroupMembership];
  if (v33)
  {
    id v37 = v33;
    sub_1002FFC6C();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      uint64_t v38 = v18;
      unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      uint64_t v40 = v17;
      v39(v92, v16, v17);
      if (!v91) {
        goto LABEL_9;
      }
LABEL_7:
      id v41 = [v91 supportedRemoteControlCommands];
      if (v41)
      {
        unint64_t v42 = v41;
        uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v44 = sub_1001D2430(v43);
        swift_bridgeObjectRelease();
        if (v44) {
          goto LABEL_10;
        }
      }
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  uint64_t v38 = v18;
  uint64_t v40 = v17;
  static Date.distantPast.getter();
  sub_100009A08((uint64_t)v16, &qword_100479F98);
  if (v91) {
    goto LABEL_7;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v44 = _swiftEmptyArrayStorage;
LABEL_10:
  id v45 = a3;
  swift_bridgeObjectRetain();
  uint64_t v46 = v87;
  sub_1002A2EBC(v87, (unint64_t)v44, v45, v89);
  id v73 = v36;
  if (v36)
  {
    id v48 = v36;
    uint64_t v75 = sub_1002FF9B4();

    id v49 = v48;
    BOOL v74 = sub_1002FF9C0();
  }
  else
  {
    BOOL v74 = _swiftEmptyArrayStorage;
    uint64_t v75 = _swiftEmptyArrayStorage;
  }
  v76 ^= 1u;
  __chkstk_darwin(v47);
  uint64_t v63 = v46;
  uint64_t v64 = a2;
  uint64_t v70 = a2;
  uint64_t v50 = v34;
  uint64_t v72 = v34;
  uint64_t v65 = v34;
  id v66 = v88;
  id v67 = v45;
  uint64_t v51 = v45;
  char v69 = sub_1002A3658((void (*)(id *))sub_1002B0584, (uint64_t)(&v68 - 8), v80);
  swift_bridgeObjectRelease();
  uint64_t v52 = v78;
  sub_1001E71E8(v50, v78, &qword_1004794C0);
  int64_t v53 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  uint64_t v54 = (uint64_t)v79;
  uint64_t v71 = v40;
  v53(v79, v92, v40);
  [v45 volume];
  uint64_t v56 = v55;
  uint64_t v57 = (uint64_t)v81;
  uint64_t v58 = v82;
  uint64_t v59 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v89, v90);
  id v60 = [v51 deviceInfo];
  uint64_t v61 = v83;
  sub_10031C828(v83);

  char v93 = 0;
  sub_1002A3E0C(v87, v70, (uint64_t)v69, v52, (uint64_t)v75, (uint64_t)v74, v54, v76, v84, v56, SBYTE4(v56), v57, v86, v85, v61);

  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v90);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v92, v71);
  return sub_100009A08(v72, &qword_1004794C0);
}

void sub_1002A0D30(id a1@<X0>, id a2@<X1>, char *a3@<X8>)
{
  uint64_t v293 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  v291 = *(void (***)(char *, void, uint64_t))(v293 - 8);
  __chkstk_darwin(v293);
  uint64_t v292 = (char *)&v264 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v295 = (char *)&v264 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v304 = (char *)&v264 - v11;
  uint64_t v12 = type metadata accessor for Date();
  __chkstk_darwin(v12 - 8);
  uint64_t v285 = (char *)&v264 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.ProgressSnapshot();
  __chkstk_darwin(v14 - 8);
  v287 = (char *)&v264 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType();
  uint64_t v302 = *(void *)(v16 - 8);
  uint64_t v303 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v290 = (char *)&v264 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v286 = (char *)&v264 - v20;
  __chkstk_darwin(v19);
  char v300 = (char *)&v264 - v21;
  uint64_t v294 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  uint64_t v297 = *(void *)(v294 - 8);
  uint64_t v22 = __chkstk_darwin(v294);
  v301 = (char *)&v264 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v284 = (char *)&v264 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  char v288 = (char *)&v264 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v296 = (char *)&v264 - v29;
  __chkstk_darwin(v28);
  v306 = (char *)&v264 - v30;
  uint64_t v31 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo();
  uint64_t v298 = *(void *)(v31 - 8);
  uint64_t v299 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  v289 = (char *)&v264 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  NSString v305 = (char *)&v264 - v34;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v264 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100013A80(&qword_10047C4A8);
  uint64_t v40 = __chkstk_darwin(v39 - 8);
  unint64_t v42 = (char *)&v264 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v264 - v43;
  if (!a1)
  {
LABEL_19:
    a1 = a2;
    goto LABEL_20;
  }
  if (a2)
  {
    uint64_t v282 = v8;
    uint64_t v283 = v7;
    a1 = a1;
    a2 = a2;
    id v45 = [a2 playerPath];
    if (v45)
    {
      uint64_t v46 = v45;
      id v47 = [v45 client];

      if (v47)
      {
        id v48 = v47;
        id v49 = [v47 bundleIdentifier];
        if (v49)
        {
          id v276 = v49;
          uint64_t v277 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v278 = v50;
          uint64_t v51 = &selRef_notifyEndpointsChanged_;
          id v52 = [a2 nowPlayingContentItem];
          NSString v275 = a3;
          id v281 = a2;
          id v279 = v52;
          id v280 = v48;
          if (!v52)
          {
            uint64_t v75 = 0;
            uint64_t v63 = v278;
            uint64_t v64 = v277;
            uint64_t v65 = &selRef_anyObject;
            goto LABEL_39;
          }
          id v53 = [a1 deviceInfo];
          id v54 = [a2 playerPath];
          if (!v54)
          {
LABEL_144:

            __break(1u);
            goto LABEL_145;
          }
          unsigned int v55 = v54;
          id v56 = [v54 origin];

          if (!v56)
          {
LABEL_145:

            __break(1u);
            goto LABEL_146;
          }
          unsigned __int8 v57 = [v56 isLocallyHosted];

          if (v57 & 1) != 0 || ([v53 isCompanion])
          {
LABEL_11:
            id v58 = v279;
            id v59 = [v279 metadata];
            if (!v59)
            {

              uint64_t v75 = 0;
LABEL_36:
              id v48 = v280;
LABEL_37:
              uint64_t v63 = v278;
LABEL_38:
              uint64_t v64 = v277;
              uint64_t v65 = &selRef_anyObject;
              goto LABEL_39;
            }
            id v60 = v59;
            uint64_t v61 = v53;
            unsigned __int8 v62 = [v59 artworkAvailable];
            uint64_t v63 = v278;
            uint64_t v64 = v277;
            uint64_t v65 = &selRef_anyObject;
            if (v62)
            {
              id v66 = [v281 playerPath];
              if (!v66)
              {
LABEL_146:

                __break(1u);
                goto LABEL_147;
              }
              id v67 = v66;
              id v68 = [v66 data];

              static Data._unconditionallyBridgeFromObjectiveC(_:)();
              id v69 = [v58 identifier];
              if (!v69)
              {
LABEL_147:

                __break(1u);
                goto LABEL_148;
              }
              uint64_t v70 = v69;
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              id v71 = [v60 artworkIdentifier];
              if (v71)
              {
                uint64_t v72 = v71;
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v51 = &selRef_notifyEndpointsChanged_;
              }
              type metadata accessor for ArtworkToken();
              uint64_t v104 = ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)();

              uint64_t v75 = (void *)v104;
              goto LABEL_36;
            }

            uint64_t v75 = 0;
            id v48 = v280;
LABEL_39:
            id v105 = [v48 bundleIdentifierHierarchy];
            if (v105)
            {
              uint64_t v106 = v48;
              uint64_t v107 = v105;
              uint64_t v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              LODWORD(v277) = [v106 processIdentifier];
              id v109 = [a1 v65[440]];
              id v110 = [v109 systemMediaApplication];

              if (v110)
              {
                uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v113 = v112;

                if (v64 == v111 && v63 == v113)
                {

                  swift_bridgeObjectRelease_n();
LABEL_46:
                  LODWORD(v276) = 0;
LABEL_59:
                  id v127 = v281;
LABEL_60:
                  NSString v128 = sub_1002FFCB4();
                  id v129 = [v127 v51[30]];
                  id v130 = [v129 metadata];

                  id v279 = v75;
                  uint64_t v278 = v108;
                  id v274 = v128;
                  id v273 = v130;
                  id v272 = a1;
                  if (v130)
                  {
                    [v130 iTunesStoreIdentifier];
                    id v131 = [v130 internationalStandardRecordingCode];
                    if (v131)
                    {
                      uint64_t v132 = v131;
                      static String._unconditionallyBridgeFromObjectiveC(_:)();
                    }
                    RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)();
                    id v134 = v130;
                    sub_100194DC8();

                    id v135 = [v134 albumName];
                    if (v135)
                    {
                      uint64_t v136 = v135;
                      static String._unconditionallyBridgeFromObjectiveC(_:)();
                    }
                    id v137 = [v134 trackArtistName];
                    if (v137)
                    {
                      uint64_t v138 = v137;
                      uint64_t v267 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v266 = v139;
                    }
                    else
                    {
                      uint64_t v267 = 0;
                      uint64_t v266 = 0;
                    }
                    id v140 = [v134 composer];
                    if (v140)
                    {
                      id v141 = v140;
                      uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v271 = v143;
                    }
                    else
                    {
                      uint64_t v142 = 0;
                      uint64_t v271 = 0;
                    }
                    id v144 = [v134 radioStationName];
                    if (v144)
                    {
                      NSString v145 = v144;
                      uint64_t v265 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    }
                    else
                    {
                      uint64_t v265 = 0;
                    }
                    uint64_t v268 = v142;
                    id v146 = v134;
                    uint64_t v270 = sub_100194C78();
                    uint64_t v269 = v147;

                    uint64_t v133 = v305;
                  }
                  else
                  {
                    uint64_t v133 = v305;
                    RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo.init(storeIdentifier:isrc:)();
                    uint64_t v270 = 0;
                    uint64_t v269 = 0;
                    uint64_t v268 = 0;
                    uint64_t v271 = 0;
                  }
                  (*(void (**)(char *, char *, uint64_t))(v298 + 16))(v289, v133, v299);
                  RoutingSession.NowPlayingInfo.TrackInfo.init(title:album:artist:composer:station:attribution:extendedInfo:)();
                  uint64_t v148 = &selRef_initWithName_fromMessage_withDelegate_;
                  id v149 = v273;
                  if (v273)
                  {
                    id v150 = v273;
                    unsigned __int8 v151 = [v150 isAlwaysLive];
                    uint64_t v152 = v294;
                    uint64_t v153 = v297;
                    uint64_t v155 = (void (**)(void, void, void))v302;
                    uint64_t v154 = v303;
                    char v156 = v300;
                    uint64_t v157 = v296;
                    uint64_t v158 = v272;
                    if (v151)
                    {

                      ((void (**)(char *, void, uint64_t))v155)[13](v156, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.live(_:), v154);
                    }
                    else
                    {
                      unsigned int v159 = [v150 hasElapsedTimeTimestamp];
                      id v160 = &selRef_elapsedTimeTimestamp;
                      if (!v159) {
                        id v160 = &selRef_inferredTimestamp;
                      }
                      [v150 *v160];
                      [v150 startTime];
                      sub_100194B44();
                      [v150 duration];
                      [v150 elapsedTime];
                      Date.init(timeIntervalSinceReferenceDate:)();
                      RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.ProgressSnapshot.init(time:date:)();
                      if ([v150 hasPlaybackRate]) {
                        [v150 playbackRate];
                      }
                      else {
                        [v281 isPlaying];
                      }
                      uint64_t v161 = v286;
                      RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.init(start:end:duration:progressSnapshot:rate:)();

                      ((void (**)(char *, void, uint64_t))v155)[13](v161, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.finite(_:), v154);
                      ((void (**)(char *, char *, uint64_t))v155)[4](v156, v161, v154);
                      uint64_t v148 = &selRef_initWithName_fromMessage_withDelegate_;
                    }
                  }
                  else
                  {
                    char v156 = v300;
                    static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.DurationInfo.empty.getter();
                    uint64_t v155 = (void (**)(void, void, void))v302;
                    uint64_t v154 = v303;
                    (*(void (**)(char *, void, uint64_t))(v302 + 104))(v156, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackType.finite(_:), v303);
                    uint64_t v152 = v294;
                    uint64_t v153 = v297;
                    uint64_t v157 = v296;
                    uint64_t v158 = v272;
                  }
                  unsigned int v162 = [v281 v148[236]];
                  uint64_t v163 = (unsigned int *)&enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:);
                  if (!v162) {
                    uint64_t v163 = (unsigned int *)&enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.paused(_:);
                  }
                  v291[13](v292, *v163, v293);
                  ((void (**)(char *, char *, uint64_t))v155)[2](v290, v156, v154);
                  RoutingSession.NowPlayingInfo.PlaybackInfo.init(playbackState:playbackType:)();
                  uint64_t v308 = (void (**)(char *, void, uint64_t))RoutingSession.NowPlayingInfo.TrackInfo.title.getter();
                  uint64_t v309 = v164;
                  if (v149)
                  {
                    uint64_t v165 = v164;
                    id v166 = v149;
                    if ([v166 isExplicitItem]
                      && ([v166 hasLoadingPlaceholderTitle] & 1) == 0
                      && v165)
                    {
                      v307._countAndFlagsBits = 32;
                      v307._object = (void *)0xE100000000000000;
                      uint64_t v167 = sub_100194AD8();
                      if (v168)
                      {
                        unint64_t v169 = v168;
                      }
                      else
                      {
                        uint64_t v167 = 3028656112;
                        unint64_t v169 = 0xA400000000000000;
                      }
                      unint64_t v170 = v169;
                      String.append(_:)(*(Swift::String *)&v167);
                      swift_bridgeObjectRelease();
                      String.append(contentsOf:)(v307);
                      swift_bridgeObjectRelease();
                    }
                  }
                  uint64_t v171 = v306;
                  uint64_t v172 = RoutingSession.NowPlayingInfo.TrackInfo.artist.getter();
                  uint64_t v174 = v173;
                  uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
                  v175(v157, v171, v152);
                  if (v174)
                  {
                    uint64_t v294 = v174;
                    uint64_t v293 = v172;

                    id v176 = v281;
                    char v177 = *(char **)(v153 + 8);
                    uint64_t v292 = (char *)((v153 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
                    uint64_t v296 = v177;
                    ((void (*)(char *, uint64_t))v177)(v157, v152);
                  }
                  else
                  {
                    uint64_t v178 = RoutingSession.NowPlayingInfo.TrackInfo.station.getter();
                    uint64_t v179 = v157;
                    uint64_t v181 = v180;
                    NSString v182 = v288;
                    v175(v288, v179, v152);
                    id v183 = v280;
                    uint64_t v294 = v181;
                    if (v181)
                    {
                      uint64_t v293 = v178;

                      id v184 = v281;
                      uint64_t v185 = v297;
                      uint64_t v186 = *(void (**)(char *, uint64_t))(v297 + 8);
                      uint64_t v292 = (char *)((v297 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
                      v186(v182, v152);
                      uint64_t v296 = (char *)v186;
                      v186(v179, v152);
                      uint64_t v153 = v185;
                    }
                    else
                    {
                      uint64_t v187 = RoutingSession.NowPlayingInfo.TrackInfo.composer.getter();
                      unint64_t v188 = v288;
                      uint64_t v189 = v187;
                      uint64_t v191 = v190;
                      unint64_t v192 = v284;
                      v175(v284, v288, v152);
                      uint64_t v294 = v191;
                      if (!v191)
                      {
                        uint64_t v193 = RoutingSession.NowPlayingInfo.TrackInfo.attribution.getter();
                        unint64_t v188 = v288;
                        uint64_t v189 = v193;
                        uint64_t v294 = v194;
                      }

                      id v195 = v281;
                      uint64_t v153 = v297;
                      uint64_t v293 = v189;
                      uint64_t v196 = *(void (**)(char *, uint64_t))(v297 + 8);
                      uint64_t v292 = (char *)((v297 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
                      v196(v192, v152);
                      v196(v188, v152);
                      uint64_t v197 = v296;
                      uint64_t v296 = (char *)v196;
                      v196(v197, v152);
                    }
                  }
                  uint64_t v198 = v309;
                  v291 = v308;
                  uint64_t v199 = v282;
                  NSString v200 = v295;
                  uint64_t v201 = v304;
                  uint64_t v202 = v283;
                  (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v295, v304, v283);
                  uint64_t v203 = v306;
                  v175(v301, v306, v152);
                  unint64_t v204 = *(void (**)(char *, uint64_t))(v199 + 8);
                  swift_bridgeObjectRetain();
                  v204(v201, v202);
                  (*(void (**)(char *, uint64_t))(v302 + 8))(v300, v303);
                  ((void (*)(char *, uint64_t))v296)(v203, v152);
                  (*(void (**)(char *, uint64_t))(v298 + 8))(v305, v299);
                  id v205 = v275;
                  *(void *)NSString v275 = v291;
                  *((void *)v205 + 1) = v198;
                  uint64_t v206 = v294;
                  *((void *)v205 + 2) = v293;
                  *((void *)v205 + 3) = v206;
                  uint64_t v207 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
                  (*(void (**)(char *, char *, uint64_t))(v199 + 32))(&v205[*(int *)(v207 + 36)], v200, v202);
                  (*(void (**)(char *, char *, uint64_t))(v153 + 32))(&v205[*(int *)(v207 + 40)], v301, v152);
                  *((void *)v205 + 4) = v278;
                  *((_DWORD *)v205 + 10) = v277;
                  v205[44] = (char)v276;
                  id v208 = v274;
                  *((void *)v205 + 6) = v279;
                  *((void *)v205 + 7) = v208;
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v207 - 8) + 56))(v205, 0, 1, v207);
                  return;
                }
                char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v114)
                {
                  swift_bridgeObjectRelease();

                  goto LABEL_46;
                }
              }
              id v115 = [a1 v65[440]];
              id v116 = [v115 systemPodcastApplication];

              if (v116)
              {
                uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v119 = v118;

                if (v64 == v117 && v63 == v119)
                {

                  swift_bridgeObjectRelease_n();
LABEL_53:
                  int v121 = 1;
LABEL_58:
                  LODWORD(v276) = v121;
                  goto LABEL_59;
                }
                char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v120)
                {
                  swift_bridgeObjectRelease();

                  goto LABEL_53;
                }
              }
              id v122 = [a1 v65[440]];
              id v123 = [v122 systemBooksApplication];

              if (v123)
              {
                uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v126 = v125;

                if (v64 == v124 && v63 == v126)
                {

                  swift_bridgeObjectRelease_n();
                  int v121 = 3;
                  goto LABEL_58;
                }
                char v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v127 = v281;
                if (v209)
                {

                  int v210 = 3;
LABEL_111:
                  LODWORD(v276) = v210;
                  goto LABEL_60;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                id v127 = v281;
              }
              id v211 = v276;
              int IsSystemAppleTVApplication = MRMediaRemoteApplicationIsSystemAppleTVApplication();

              if (IsSystemAppleTVApplication) {
                int v210 = 2;
              }
              else {
                int v210 = 4;
              }
              goto LABEL_111;
            }

            swift_release();
            __break(1u);
            goto LABEL_144;
          }
          id v76 = [v279 metadata];
          id v274 = v53;
          if (v76)
          {
            id v77 = v76;
            id v78 = [v76 artworkURLTemplates];

            if (v78)
            {
              sub_100013A80(&qword_10047A0E8);
              uint64_t v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(void *)(v79 + 16))
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                unint64_t v80 = self;
                Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                uint64_t v308 = 0;
                id v82 = [v80 dataWithJSONObject:isa options:0 error:&v308];

                uint64_t v83 = v308;
                if (v82)
                {
                  uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v86 = v85;

                  id v87 = objc_allocWithZone((Class)MRRemoteArtwork);
                  sub_10018FE44(v84, (unint64_t)v86);
                  Class v88 = Data._bridgeToObjectiveC()().super.isa;
                  sub_10018FE9C(v84, (unint64_t)v86);
                  id v89 = [v87 initWithArtworkURLString:0 templateData:v88];

                  id v90 = [v281 playerPath];
                  if (!v90)
                  {
LABEL_150:

                    __break(1u);
                    goto LABEL_151;
                  }
                  id v91 = v90;
                  id v92 = [v90 data];

                  static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v94 = v93;

                  id v95 = v279;
                  id v96 = [v279 identifier];
                  if (!v96)
                  {
LABEL_151:

                    __break(1u);
                    goto LABEL_152;
                  }
                  int64_t v97 = v96;
                  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v269 = v99;

                  id v100 = [v95 metadata];
                  uint64_t v101 = v100;
                  id v273 = v86;
                  uint64_t v271 = v94;
                  uint64_t v270 = v98;
                  if (v100)
                  {
                    id v102 = [v100 artworkIdentifier];

                    uint64_t v103 = v84;
                    if (v102)
                    {
                      static String._unconditionallyBridgeFromObjectiveC(_:)();
                    }
                  }
                  else
                  {
                    uint64_t v103 = v84;
                  }
                  type metadata accessor for ArtworkToken();
                  id v262 = [v89 protobufData];
                  static Data._unconditionallyBridgeFromObjectiveC(_:)();

                  uint64_t v75 = (void *)ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)();
                  sub_10018FE9C(v103, (unint64_t)v273);

                  goto LABEL_142;
                }
                uint64_t v213 = v83;
                _convertNSErrorToError(_:)();

                swift_willThrow();
                swift_errorRelease();
                id v53 = v274;
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
          }
          id v214 = [v279 availableRemoteArtworkFormats];
          if (v214)
          {
            uint64_t v215 = v214;
            uint64_t v216 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v273 = (id)MRContentItemArtworkFormatStandard;
            uint64_t v217 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            char v219 = sub_1001F2E94(v217, v218, v216);
            id v53 = v274;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v219)
            {
              id v220 = [v281 playerPath];
              if (!v220)
              {
LABEL_148:

                __break(1u);
                goto LABEL_149;
              }
              uint64_t v221 = v220;
              id v222 = [v220 data];

              static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v224 = v223;

              id v225 = v279;
              id v226 = [v279 identifier];
              uint64_t v63 = v278;
              if (!v226)
              {
LABEL_149:

                __break(1u);
                goto LABEL_150;
              }
              uint64_t v227 = v226;
              uint64_t v228 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v230 = v229;

              id v231 = [v225 metadata];
              uint64_t v271 = v228;
              uint64_t v270 = v230;
              if (v231)
              {
                uint64_t v232 = v231;
                id v233 = [v231 artworkIdentifier];

                if (v233)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                }
              }
              id v238 = [v279 remoteArtworks];
              if (v238)
              {
                sub_10018FE08(0, &qword_10047C4B0);
                uint64_t v239 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v240 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                if (*(void *)(v239 + 16) && (unint64_t v242 = sub_100013660(v240, v241), (v243 & 1) != 0))
                {
                  id v244 = *(id *)(*(void *)(v239 + 56) + 8 * v242);
                  id v273 = v224;
                  id v245 = v244;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v246 = [v245 protobufData];

                  static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  id v53 = v274;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
              }
              type metadata accessor for ArtworkToken();
              uint64_t v75 = (void *)ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)();

              id v48 = v280;
              goto LABEL_38;
            }
          }
          id v234 = [v279 metadata];
          if (!v234) {
            goto LABEL_11;
          }
          uint64_t v235 = v234;
          id v236 = [v234 artworkURL];

          if (v236)
          {
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v237 = 0;
          }
          else
          {
            uint64_t v237 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v42, v237, 1, v35);
          sub_1002B05B8((uint64_t)v42, (uint64_t)v44);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v44, 1, v35))
          {
            sub_100009A08((uint64_t)v44, &qword_10047C4A8);
            goto LABEL_11;
          }
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v38, v44, v35);
          sub_100009A08((uint64_t)v44, &qword_10047C4A8);
          URL.absoluteString.getter();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
          id v247 = objc_allocWithZone((Class)MRRemoteArtwork);
          NSString v248 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v249 = [v247 initWithArtworkURLString:v248 templateData:0];

          id v250 = [v281 playerPath];
          if (!v250)
          {
LABEL_152:

            __break(1u);
            goto LABEL_153;
          }
          unsigned __int8 v251 = v250;
          id v252 = [v250 data];

          static Data._unconditionallyBridgeFromObjectiveC(_:)();
          id v253 = v279;
          id v254 = [v279 identifier];
          if (!v254)
          {
LABEL_153:

            __break(1u);
            return;
          }
          uint64_t v255 = v254;
          unsigned __int8 v256 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v258 = v257;

          id v259 = [v253 metadata];
          v260 = v259;
          id v273 = v256;
          uint64_t v271 = v258;
          if (v259)
          {
            id v261 = [v259 artworkIdentifier];

            if (v261)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();
            }
          }
          type metadata accessor for ArtworkToken();
          id v263 = [v249 protobufData];
          static Data._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v75 = (void *)ArtworkToken.__allocating_init(playerPathData:contentItemIdentifier:artworkIdentifier:supportsRemoteArtwork:maxPixelSize:remoteArtworkData:)();
LABEL_142:
          id v48 = v280;
          uint64_t v51 = &selRef_notifyEndpointsChanged_;
          goto LABEL_37;
        }

        goto LABEL_19;
      }
    }
  }
LABEL_20:

  uint64_t v73 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  BOOL v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56);

  v74(a3, 1, 1, v73);
}

void sub_1002A2EBC(uint64_t a1@<X0>, unint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100013A80(&qword_10047C498);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100013A80(&qword_10047C4A0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_1002A7FCC(a1, a2, a4);
  unsigned __int8 v14 = [a3 volumeCapabilities];
  if ((v14 & 2) != 0)
  {
    swift_bridgeObjectRetain();
    RoutingControls.AbsoluteVolumeControl.init(sessionIdentifier:)();
    uint64_t v15 = type metadata accessor for RoutingControls.AbsoluteVolumeControl();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 0, 1, v15);
    RoutingControls.absoluteVolume.setter();
  }
  if (v14)
  {
    RoutingControls.RelativeVolumeControl.init(sessionIdentifier:)();
    uint64_t v16 = type metadata accessor for RoutingControls.RelativeVolumeControl();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 0, 1, v16);
    RoutingControls.relativeVolume.setter();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002A3098@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  id v74 = a5;
  id v75 = a6;
  uint64_t v76 = a2;
  uint64_t v77 = a3;
  uint64_t v10 = sub_100013A80(&qword_100478990);
  __chkstk_darwin(v10 - 8);
  id v78 = &v64[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = &v64[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  uint64_t v18 = &v64[-v17];
  uint64_t v19 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v22 = *a1;
  id v23 = [*a1 uid];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v72 = v13;
    uint64_t v25 = a4;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
    id v28 = [v22 name];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v71 = v27;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v31;
      uint64_t v67 = v30;

      uint64_t v32 = sub_100269208();
      uint64_t v69 = v33;
      uint64_t v70 = v32;
      unsigned int v68 = v34;
      sub_1001E71E8(v25, (uint64_t)v21, &qword_1004794C0);
      uint64_t v35 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v21, 1, v35) == 1)
      {
        sub_100009A08((uint64_t)v21, &qword_1004794C0);
        int v65 = 0;
      }
      else
      {
        RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
        uint64_t v39 = v72;
        (*(void (**)(unsigned char *, void, uint64_t))(v72 + 104))(v16, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:), v12);
        int v65 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)();
        uint64_t v40 = *(void (**)(unsigned char *, uint64_t))(v39 + 8);
        v40(v16, v12);
        v40(v18, v12);
        sub_1002B0524((uint64_t)v21, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      }
      uint64_t v41 = type metadata accessor for RoutingItem.SelectionIndicator();
      unint64_t v42 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56);
      v42(v78, 1, 1, v41);
      LODWORD(v72) = sub_100267A04();
      BOOL v43 = 1;
      if (([v74 matchesUID:v24] & 1) == 0)
      {
        uint64_t v44 = sub_100269208();
        BOOL v43 = ((v45 >> 8) & 6 | (v45 >> 7) & 1) == 5;
        sub_1001B9958(v44, v46, v45);
      }
      LODWORD(v74) = v43;
      id v47 = v75;
      [v75 volumeForOutputDeviceUID:v24];
      int v49 = v48;
      LOBYTE(v47) = [v47 volumeControlCapabilitiesForOutputDeviceUID:v24];

      char v50 = sub_1002B0480((char)v47);
      uint64_t v51 = (int *)type metadata accessor for HostedRoutingItem(0);
      uint64_t v52 = (uint64_t)a7 + v51[8];
      v42((unsigned char *)v52, 1, 1, v41);
      id v53 = (char *)a7 + v51[12];
      *(_DWORD *)id v53 = 0;
      v53[4] = 1;
      uint64_t v55 = v70;
      uint64_t v54 = v71;
      *a7 = v73;
      a7[1] = v54;
      uint64_t v56 = v77;
      a7[2] = v76;
      a7[3] = v56;
      uint64_t v57 = v66;
      a7[4] = v67;
      a7[5] = v57;
      id v58 = (char *)a7 + v51[14];
      uint64_t v59 = v69;
      *(void *)id v58 = v55;
      *((void *)v58 + 1) = v59;
      unsigned int v60 = v68;
      *((_WORD *)v58 + 8) = v68;
      type metadata accessor for Symbols();
      swift_bridgeObjectRetain();
      sub_1001B9E5C(v55, v59, v60);
      unint64_t v61 = sub_10030077C(v55, v59, v60);
      uint64_t v63 = v62;
      sub_1001B9958(v55, v59, v60);
      a7[6] = v61;
      a7[7] = v63;
      *((unsigned char *)a7 + v51[9]) = 1;
      *((unsigned char *)a7 + v51[10]) = v65 & 1;
      sub_1001E7184((uint64_t)v78, v52, &qword_100478990);
      *((unsigned char *)a7 + v51[11]) = v72;
      *((unsigned char *)a7 + v51[16]) = 0;
      *((unsigned char *)a7 + v51[15]) = (_BYTE)v74;
      *(_DWORD *)id v53 = v49;
      v53[4] = 0;
      *((unsigned char *)a7 + v51[13]) = v50;
      return (*(uint64_t (**)(uint64_t *, void, uint64_t, int *))(*((void *)v51 - 1) + 56))(a7, 0, 1, v51);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v36 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v37 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56);

  return v37(a7, 1, 1, v36);
}

void *sub_1002A3658(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  id v28 = a1;
  uint64_t v5 = sub_100013A80(&qword_100478988);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v23 = *(void *)(v27 - 8);
  uint64_t v8 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v22 = (uint64_t)&v21 - v10;
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v11 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v25 = a3 & 0xC000000000000001;
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    uint64_t v13 = 4;
    unint64_t v21 = a3;
    while (1)
    {
      id v14 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a3 + 8 * v13);
      uint64_t v15 = v14;
      uint64_t v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1)) {
        break;
      }
      id v29 = v14;
      v28(&v29);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v12;
      }

      if ((*v24)(v7, 1, v27) == 1)
      {
        sub_100009A08((uint64_t)v7, &qword_100478988);
      }
      else
      {
        uint64_t v17 = v22;
        sub_1002B0734((uint64_t)v7, v22, type metadata accessor for HostedRoutingItem);
        sub_1002B0734(v17, v26, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = (void *)sub_1002ADF5C(0, v12[2] + 1, 1, v12, &qword_1004794D0, type metadata accessor for HostedRoutingItem);
        }
        unint64_t v19 = v12[2];
        unint64_t v18 = v12[3];
        if (v19 >= v18 >> 1) {
          uint64_t v12 = (void *)sub_1002ADF5C(v18 > 1, v19 + 1, 1, v12, &qword_1004794D0, type metadata accessor for HostedRoutingItem);
        }
        v12[2] = v19 + 1;
        sub_1002B0734(v26, (uint64_t)v12+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(void *)(v23 + 72) * v19, type metadata accessor for HostedRoutingItem);
        a3 = v21;
      }
      ++v13;
      if (v16 == v11)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

char *sub_1002A39E8(uint64_t a1)
{
  uint64_t v3 = sub_100013A80(&qword_100479530);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v27 - v7;
  uint64_t v9 = sub_100013A80(&qword_10047C558);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RoutingSession();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v36 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v30 = (char *)v27 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17) {
    return (char *)_swiftEmptyArrayStorage;
  }
  v27[1] = v1;
  uint64_t v18 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  unsigned int v34 = (void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
  uint64_t v35 = v18;
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v31 = *(void *)(v19 + 72);
  v27[0] = a1;
  swift_bridgeObjectRetain();
  unint64_t v21 = (char *)_swiftEmptyArrayStorage;
  uint64_t v28 = v13;
  id v29 = v6;
  do
  {
    sub_1002B06CC(v20, (uint64_t)v8, type metadata accessor for HostedRoutingSession);
    (*v34)(v8, 0, 1, v35);
    sub_1001E71E8((uint64_t)v8, (uint64_t)v6, &qword_100479530);
    sub_1002A8838((uint64_t)v6, (uint64_t)v11);
    sub_100009A08((uint64_t)v8, &qword_100479530);
    if ((*v33)(v11, 1, v12) == 1)
    {
      sub_100009A08((uint64_t)v11, &qword_10047C558);
    }
    else
    {
      uint64_t v22 = *v32;
      uint64_t v23 = v30;
      (*v32)(v30, v11, v12);
      v22(v36, v23, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = (char *)sub_1002ADF5C(0, *((void *)v21 + 2) + 1, 1, v21, &qword_10047C988, (uint64_t (*)(void))&type metadata accessor for RoutingSession);
      }
      unint64_t v25 = *((void *)v21 + 2);
      unint64_t v24 = *((void *)v21 + 3);
      if (v25 >= v24 >> 1) {
        unint64_t v21 = (char *)sub_1002ADF5C(v24 > 1, v25 + 1, 1, v21, &qword_10047C988, (uint64_t (*)(void))&type metadata accessor for RoutingSession);
      }
      *((void *)v21 + 2) = v25 + 1;
      v22(&v21[((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v25], v36, v12);
      uint64_t v6 = v29;
    }
    v20 += v31;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_1002A3E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, void *a9@<X8>, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (int *)type metadata accessor for HostedRoutingSourceSession(0);
  uint64_t v21 = (uint64_t)a9 + v20[7];
  uint64_t v22 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = (void *)((char *)a9 + v20[11]);
  *uint64_t v23 = 0;
  v23[1] = 0;
  unint64_t v24 = (char *)a9 + v20[12];
  *(_DWORD *)unint64_t v24 = 0;
  v24[4] = 1;
  uint64_t v25 = (uint64_t)a9 + v20[14];
  uint64_t v26 = type metadata accessor for RoutingSession.HostInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *a9 = a1;
  a9[1] = a2;
  a9[4] = a3;
  swift_bridgeObjectRetain();
  uint64_t v40 = a4;
  sub_1002B0620(a4, v21, &qword_1004794C0);
  *(void *)((char *)a9 + v20[9]) = a5;
  *(void *)((char *)a9 + v20[10]) = a6;
  uint64_t v27 = (char *)a9 + v20[15];
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, a7, v28);
  *((unsigned char *)a9 + v20[13]) = a8;
  *(_DWORD *)unint64_t v24 = a10;
  v24[4] = a11 & 1;
  uint64_t v30 = (char *)a9 + v20[8];
  uint64_t v31 = type metadata accessor for RoutingControls();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, a12, v31);
  a9[2] = a13;
  a9[3] = a14;
  sub_1002B0620(a15, v25, &qword_1004794B8);
  if (*(void *)(a3 + 16))
  {
    type metadata accessor for Symbols();
    uint64_t v33 = sub_1002FFF10(a3);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    sub_100009A08(a15, &qword_1004794B8);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a12, v31);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a7, v28);
    sub_100009A08(v40, &qword_1004794C0);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v23 = v33;
    v23[1] = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100009A08(a15, &qword_1004794B8);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a12, v31);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a7, v28);
    return sub_100009A08(v40, &qword_1004794C0);
  }
  return result;
}

unint64_t sub_1002A417C()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A736D657469202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  type metadata accessor for HostedRoutingItem(0);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD00000000000002ALL;
}

uint64_t sub_1002A4278()
{
  uint64_t v1 = v0;
  uint64_t v2 = 7104878;
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  Swift::String v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(164);
  v10._countAndFlagsBits = 0xD00000000000001ALL;
  v10._object = (void *)0x80000001003C9250;
  String.append(_:)(v10);
  v11._object = (void *)0x80000001003B9B30;
  v11._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  uint64_t v12 = *v0;
  uint64_t v13 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000015;
  v15._object = (void *)0x80000001003B9B50;
  String.append(_:)(v15);
  uint64_t v16 = (int *)type metadata accessor for HostedRoutingSourceSession(0);
  if (*((unsigned char *)v0 + v16[13])) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*((unsigned char *)v0 + v16[13])) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6C6F76202020200ALL;
  v20._object = (void *)0xED0000203A656D75;
  String.append(_:)(v20);
  if (*((unsigned char *)v0 + v16[12] + 4))
  {
    unint64_t v21 = 0xE300000000000000;
    uint64_t v22 = 7104878;
  }
  else
  {
    uint64_t v22 = Float.description.getter();
    unint64_t v21 = v23;
  }
  unint64_t v24 = v21;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x657469202020200ALL;
  v25._object = (void *)0xEC0000000A3A736DLL;
  String.append(_:)(v25);
  uint64_t v26 = v0[4];
  int64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    uint64_t v54 = v9;
    uint64_t v55 = v16;
    uint64_t v56 = v0;
    uint64_t v59 = _swiftEmptyArrayStorage;
    uint64_t v29 = v26;
    swift_bridgeObjectRetain();
    sub_100014688(0, v27, 0);
    uint64_t v30 = *(unsigned __int8 *)(v4 + 80);
    v53[1] = v29;
    uint64_t v31 = v29 + ((v30 + 32) & ~v30);
    uint64_t v32 = *(void *)(v4 + 72);
    do
    {
      sub_1002B06CC(v31, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
      uint64_t v57 = 0x2020202020202020;
      unint64_t v58 = 0xE800000000000000;
      v33._countAndFlagsBits = sub_10029F9A8();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      uint64_t v35 = v57;
      unint64_t v34 = v58;
      sub_1002B0524((uint64_t)v6, type metadata accessor for HostedRoutingItem);
      uint64_t v28 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v28[2] + 1, 1);
        uint64_t v28 = v59;
      }
      unint64_t v37 = v28[2];
      unint64_t v36 = v28[3];
      if (v37 >= v36 >> 1)
      {
        sub_100014688(v36 > 1, v37 + 1, 1);
        uint64_t v28 = v59;
      }
      v28[2] = v37 + 1;
      uint64_t v38 = &v28[2 * v37];
      v38[4] = v35;
      v38[5] = v34;
      v31 += v32;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    uint64_t v16 = v55;
    uint64_t v1 = v56;
    uint64_t v2 = 7104878;
    uint64_t v9 = v54;
  }
  uint64_t v57 = (uint64_t)v28;
  sub_100013A80(&qword_10047A080);
  sub_10024D6A8();
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x80000001003B9B70;
  v43._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v43);
  sub_1001E71E8((uint64_t)v1 + v16[7], (uint64_t)v9, &qword_1004794C0);
  uint64_t v44 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v9, 1, v44) == 1)
  {
    sub_100009A08((uint64_t)v9, &qword_1004794C0);
    unsigned int v45 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v2 = sub_1002A47FC();
    unsigned int v45 = v46;
    sub_1002B0524((uint64_t)v9, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  v47._countAndFlagsBits = v2;
  v47._object = v45;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 0xD000000000000021;
  v48._object = (void *)0x80000001003B9B90;
  String.append(_:)(v48);
  swift_bridgeObjectRetain();
  v49._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0xD000000000000023;
  v50._object = (void *)0x80000001003B9BC0;
  String.append(_:)(v50);
  swift_bridgeObjectRetain();
  v51._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v60;
}

uint64_t sub_1002A47FC()
{
  uint64_t v1 = 7104878;
  _StringGuts.grow(_:)(166);
  v2._countAndFlagsBits = 0x6979616C50776F4ELL;
  v2._object = (void *)0xEE006F666E49676ELL;
  String.append(_:)(v2);
  v3._object = (void *)0x80000001003B9BF0;
  v3._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(unsigned int *)(v0 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 44);
  sub_1001E70B8(v4, v5, *(unsigned char *)(v0 + 44));
  v7._countAndFlagsBits = sub_1002A5714(v4, v5 | (v6 << 32));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_1001DDF44(v4, v5, v6);
  v8._countAndFlagsBits = 0xD000000000000010;
  v8._object = (void *)0x80000001003B9C10;
  String.append(_:)(v8);
  if (*(void *)(v0 + 8))
  {
    uint64_t v9 = *(void *)v0;
    Swift::String v10 = *(void **)(v0 + 8);
  }
  else
  {
    Swift::String v10 = (void *)0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0xD000000000000013;
  v12._object = (void *)0x80000001003B9C30;
  String.append(_:)(v12);
  if (*(void *)(v0 + 24))
  {
    uint64_t v13 = *(void *)(v0 + 16);
    Swift::String v14 = *(void **)(v0 + 24);
  }
  else
  {
    Swift::String v14 = (void *)0xE300000000000000;
    uint64_t v13 = 7104878;
  }
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0xD000000000000017;
  v16._object = (void *)0x80000001003B9C50;
  String.append(_:)(v16);
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  sub_1002B0684(&qword_10047C4B8, (void (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x80000001003B9C70;
  v18._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v18);
  type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  sub_1002B0684(&qword_10047C4C0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000012;
  v20._object = (void *)0x80000001003B9C90;
  String.append(_:)(v20);
  if (*(void *)(v0 + 48))
  {
    uint64_t v1 = dispatch thunk of ArtworkToken.description.getter();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = (void *)0xE300000000000000;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000022;
  v24._object = (void *)0x80000001003B9CB0;
  String.append(_:)(v24);
  swift_bridgeObjectRetain();
  v25._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002A4B68(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  __chkstk_darwin(v3);
  unint64_t v37 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100013A80(&qword_1004794B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v38 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v7 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v36 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v9 - 8);
  Swift::String v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12 - 8);
  Swift::String v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 24))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v16 = *(void *)(v1 + 32);
  Hasher._combine(_:)(*(void *)(v16 + 16));
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v19 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002B06CC(v18, (uint64_t)v15, type metadata accessor for HostedRoutingItem);
      sub_10029FE3C(a1);
      sub_1002B0524((uint64_t)v15, type metadata accessor for HostedRoutingItem);
      v18 += v19;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  Swift::String v20 = (int *)type metadata accessor for HostedRoutingSourceSession(0);
  sub_1001E71E8(v1 + v20[7], (uint64_t)v11, &qword_1004794C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v41) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v21 = v36;
    sub_1002B0734((uint64_t)v11, v36, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    Hasher._combine(_:)(1u);
    sub_1002A5F04(a1);
    sub_1002B0524(v21, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  uint64_t v23 = (uint64_t)v38;
  uint64_t v22 = v39;
  type metadata accessor for RoutingControls();
  sub_1002B0684(&qword_10047C4C8, (void (*)(uint64_t))&type metadata accessor for RoutingControls);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v24 = *(void *)(v1 + v20[9]);
  Hasher._combine(_:)(*(void *)(v24 + 16));
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = v24 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v26 += 16;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = *(void *)(v1 + v20[10]);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = v27 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v29 += 16;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v1 + v20[11] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v30 = v1 + v20[12];
  if (*(unsigned char *)(v30 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v31 = *(_DWORD *)v30;
    Hasher._combine(_:)(1u);
    if ((v31 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v32 = v31;
    }
    else {
      Swift::UInt32 v32 = 0;
    }
    Hasher._combine(_:)(v32);
  }
  uint64_t v33 = v40;
  Hasher._combine(_:)(*(unsigned char *)(v1 + v20[13]));
  sub_1001E71E8(v1 + v20[14], v23, &qword_1004794B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v33) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v34 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v37, v23, v33);
    Hasher._combine(_:)(1u);
    sub_1002B0684(&qword_10047C4D0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v34, v33);
  }
  type metadata accessor for Date();
  sub_1002B0684(&qword_10047C4D8, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1002A5254(uint64_t a1, uint64_t a2)
{
  return sub_1002AC438(a1, a2, (void (*)(unsigned char *))sub_1002A4B68);
}

Swift::Int sub_1002A5270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC49C(a1, a2, a3, (void (*)(unsigned char *))sub_1002A4B68);
}

uint64_t sub_1002A5294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for HostedRoutingSourceSession(0);
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  Swift::String v15 = (uint64_t *)((char *)&v40 - v14);
  uint64_t v16 = *(void *)(a3 + 16);
  if (!v16)
  {
    uint64_t v37 = v12;
    uint64_t v38 = v13;
    swift_bridgeObjectRetain();
    uint64_t v36 = v38;
    uint64_t v35 = v37;
    uint64_t v34 = 1;
    goto LABEL_35;
  }
  uint64_t v41 = v12;
  uint64_t v42 = a4;
  uint64_t v49 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v40 = v13;
  uint64_t v48 = *(void *)(v13 + 72);
  uint64_t v43 = a3;
  swift_bridgeObjectRetain();
  uint64_t v17 = 0;
  while (1)
  {
    sub_1002B06CC(v49 + v48 * v17, (uint64_t)v15, type metadata accessor for HostedRoutingSourceSession);
    if (*v15 != 0x4C41434F4CLL || v15[1] != 0xE500000000000000) {
      break;
    }
    sub_1002B06CC((uint64_t)v15, (uint64_t)v11, type metadata accessor for HostedRoutingSourceSession);
LABEL_4:
    ++v17;
    sub_1002B0524((uint64_t)v11, type metadata accessor for HostedRoutingSourceSession);
    sub_1002B0524((uint64_t)v15, type metadata accessor for HostedRoutingSourceSession);
    if (v17 == v16)
    {
      uint64_t v34 = 1;
      a4 = v42;
      goto LABEL_33;
    }
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1002B06CC((uint64_t)v15, (uint64_t)v11, type metadata accessor for HostedRoutingSourceSession);
  if (v19) {
    goto LABEL_4;
  }
  uint64_t v20 = *((void *)v11 + 4);
  uint64_t v44 = *(void *)(v20 + 16);
  if (!v44) {
    goto LABEL_4;
  }
  uint64_t v21 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v22 = 0;
  uint64_t v23 = *(void *)(v21 - 8);
  uint64_t v46 = v20 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v47 = v21;
  uint64_t v45 = *(void *)(v23 + 72);
  while (1)
  {
    uint64_t v24 = (void *)(v46 + v45 * v22);
    uint64_t v25 = (char *)v24 + *(int *)(v47 + 56);
    uint64_t v26 = *(void *)v25;
    unsigned int v27 = *((unsigned __int16 *)v25 + 8);
    int v28 = (v27 >> 8) & 6 | (v27 >> 7) & 1;
    if ((v28 - 1) >= 5)
    {
      if (v28) {
        goto LABEL_27;
      }
      unsigned int v27 = *(unsigned __int16 *)(v26 + 32);
      uint64_t v26 = *(void *)(v26 + 16);
    }
    unsigned int v29 = v27 >> 11;
    if (v29 == 10 || v29 == 9 || v29 == 8)
    {
      uint64_t v30 = *(void *)(v26 + 16);
      uint64_t v31 = *(void *)(v30 + 16);
      if (v31) {
        break;
      }
    }
LABEL_27:
    if (*v24 == a1 && v24[1] == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_32;
    }
    if (++v22 == v44) {
      goto LABEL_4;
    }
  }
  Swift::UInt32 v32 = (void *)(v30 + 40);
  while (1)
  {
    BOOL v33 = *(v32 - 1) == a1 && *v32 == a2;
    if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    v32 += 5;
    if (!--v31) {
      goto LABEL_27;
    }
  }
LABEL_32:
  sub_1002B0524((uint64_t)v11, type metadata accessor for HostedRoutingSourceSession);
  a4 = v42;
  sub_1002B0734((uint64_t)v15, v42, type metadata accessor for HostedRoutingSourceSession);
  uint64_t v34 = 0;
LABEL_33:
  uint64_t v36 = v40;
  uint64_t v35 = v41;
LABEL_35:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(a4, v34, 1, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A5698(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 16 * v1 + 16);
    swift_bridgeObjectRetain();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A56D8(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    uint64_t v1 = *(void *)(result + 32);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002A5714(uint64_t a1, uint64_t a2)
{
  switch(BYTE4(a2))
  {
    case 1:
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      uint64_t v3 = 0x74736163646F702ELL;
      goto LABEL_8;
    case 2:
      uint64_t v3 = 678851630;
      goto LABEL_8;
    case 3:
      uint64_t v2 = 0x736B6F6F622ELL;
      goto LABEL_7;
    case 4:
      uint64_t v2 = 0x726568746F2ELL;
      goto LABEL_7;
    default:
      uint64_t v2 = 0x636973756D2ELL;
LABEL_7:
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFLL | 0x28000000000000;
LABEL_8:
      uint64_t v9 = v3;
      v4._countAndFlagsBits = Array.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 44;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      return v9;
  }
}

void sub_1002A5878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt32 v3 = a3;
  switch(BYTE4(a3))
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Swift::UInt v7 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v7);
      if (v7)
      {
        uint64_t v8 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v8 += 16;
          --v7;
        }
        while (v7);
      }
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      Swift::UInt v9 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v9);
      if (v9)
      {
        uint64_t v10 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v10 += 16;
          --v9;
        }
        while (v9);
      }
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      Swift::UInt v11 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v11);
      if (v11)
      {
        uint64_t v12 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v12 += 16;
          --v11;
        }
        while (v11);
      }
      break;
    case 4:
      Hasher._combine(_:)(4uLL);
      Swift::UInt v13 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v13);
      if (v13)
      {
        uint64_t v14 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16;
          --v13;
        }
        while (v13);
      }
      break;
    default:
      Hasher._combine(_:)(0);
      Swift::UInt v5 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        uint64_t v6 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v6 += 16;
          --v5;
        }
        while (v5);
      }
      break;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1002A5A7C()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 12);
  Hasher.init(_seed:)();
  sub_1002A5878((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

void sub_1002A5AD8(uint64_t a1)
{
  sub_1002A5878(a1, *(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32));
}

Swift::Int sub_1002A5AEC()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 12);
  Hasher.init(_seed:)();
  sub_1002A5878((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

uint64_t sub_1002A5B44()
{
  return sub_1002A5714(*(void *)v0, *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32));
}

uint64_t sub_1002A5B58(uint64_t a1, uint64_t a2)
{
  return sub_1002AE55C(*(void **)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(void **)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32));
}

uint64_t sub_1002A5B80()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v37 - v7;
  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v9._countAndFlagsBits = 60;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x6979616C50776F4ELL;
  v10._object = (void *)0xEE006F666E49676ELL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x656C746974202D20;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  if (*(void *)(v0 + 8))
  {
    uint64_t v12 = *(void *)v0;
    Swift::UInt v13 = *(void **)(v0 + 8);
  }
  else
  {
    Swift::UInt v13 = (void *)0xE300000000000000;
    uint64_t v12 = 7104878;
  }
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x746974627573202CLL;
  v15._object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v15);
  if (*(void *)(v0 + 24))
  {
    uint64_t v16 = *(void *)(v0 + 16);
    uint64_t v17 = *(void **)(v0 + 24);
  }
  else
  {
    uint64_t v17 = (void *)0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x73696C627570202CLL;
  v19._object = (void *)0xED0000203A726568;
  String.append(_:)(v19);
  uint64_t v20 = *(void *)(v0 + 32);
  uint64_t v21 = *(unsigned int *)(v0 + 40);
  uint64_t v22 = *(unsigned __int8 *)(v0 + 44);
  sub_1001E70B8(v20, v21, *(unsigned char *)(v0 + 44));
  v23._countAndFlagsBits = sub_1002A5714(v20, v21 | (v22 << 32));
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  sub_1001DDF44(v20, v21, v22);
  v24._countAndFlagsBits = 0x6E6979616C70202CLL;
  v24._object = (void *)0xEB00000000203A67;
  String.append(_:)(v24);
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:), v2);
  char v25 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v6, v2);
  v26(v8, v2);
  if (v25) {
    uint64_t v27 = 1702195828;
  }
  else {
    uint64_t v27 = 0x65736C6166;
  }
  if (v25) {
    unint64_t v28 = 0xE400000000000000;
  }
  else {
    unint64_t v28 = 0xE500000000000000;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._object = (void *)0xEB00000000203A6BLL;
  v30._countAndFlagsBits = 0x726F77747261202CLL;
  String.append(_:)(v30);
  if (*(void *)(v1 + 48))
  {
    uint64_t v31 = dispatch thunk of ArtworkToken.description.getter();
    unint64_t v33 = v32;
  }
  else
  {
    unint64_t v33 = 0xE300000000000000;
    uint64_t v31 = 7104878;
  }
  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 62;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  return v37[0];
}

uint64_t sub_1002A5F04(uint64_t a1)
{
  uint64_t v2 = v1;
  if (v1[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1[3]) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  uint64_t v4 = v1[4];
  uint64_t v5 = *((unsigned int *)v2 + 10);
  uint64_t v6 = *((unsigned __int8 *)v2 + 44);
  sub_1001E70B8(v2[4], v5, *((unsigned char *)v2 + 44));
  sub_1002A5878(a1, v4, v5 | (v6 << 32));
  sub_1001DDF44(v4, v5, v6);
  if (v2[6])
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for ArtworkToken();
    sub_1002B0684(&qword_10047C4E0, (void (*)(uint64_t))&type metadata accessor for ArtworkToken);
    dispatch thunk of Hashable.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v7 = v2[7];
  Hasher._combine(_:)(*(void *)(v7 + 16));
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v9 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  sub_1002B0684(&qword_10047C4E8, (void (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  sub_1002B0684(&qword_10047C4F0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1002A61AC(uint64_t a1, uint64_t a2)
{
  return sub_1002AC438(a1, a2, (void (*)(unsigned char *))sub_1002A5F04);
}

Swift::Int sub_1002A61C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC49C(a1, a2, a3, (void (*)(unsigned char *))sub_1002A5F04);
}

uint64_t sub_1002A61EC()
{
  uint64_t v3 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1002AE138(v1, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  return v3;
}

uint64_t sub_1002A6260()
{
  uint64_t v1 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v22 = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t result = sub_1002AE138(v8, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  Swift::String v10 = v22;
  Swift::String v11 = _swiftEmptyArrayStorage;
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v12 = v10[2];
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v20 = v10[2];
    uint64_t v21 = v2;
    while (v13 < v10[2])
    {
      unint64_t v14 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v15 = *(void *)(v2 + 72);
      sub_1002B06CC((uint64_t)v10 + v14 + v15 * v13, (uint64_t)v7, type metadata accessor for HostedRoutingItem);
      if (v7[*(int *)(v1 + 36)] == 1)
      {
        uint64_t v16 = v1;
        sub_1002B0734((uint64_t)v7, (uint64_t)v5, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001E1F90(0, v11[2] + 1, 1);
        }
        Swift::String v11 = v22;
        unint64_t v18 = v22[2];
        unint64_t v17 = v22[3];
        if (v18 >= v17 >> 1)
        {
          sub_1001E1F90(v17 > 1, v18 + 1, 1);
          Swift::String v11 = v22;
        }
        v11[2] = v18 + 1;
        uint64_t result = sub_1002B0734((uint64_t)v5, (uint64_t)v11 + v14 + v18 * v15, type metadata accessor for HostedRoutingItem);
        uint64_t v1 = v16;
        uint64_t v12 = v20;
        uint64_t v2 = v21;
      }
      else
      {
        uint64_t result = sub_1002B0524((uint64_t)v7, type metadata accessor for HostedRoutingItem);
      }
      if (v12 == ++v13)
      {
        Swift::String v11 = v22;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  return result;
}

uint64_t sub_1002A64F0()
{
  if (*v0 == 0x4C41434F4CLL && v0[1] == 0xE500000000000000) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1002A6530(uint64_t (*a1)(void))
{
  uint64_t v3 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1(0);
  sub_1001E71E8(v1 + *(int *)(v13 + 28), (uint64_t)v12, &qword_1004794C0);
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v12, 1, v14) == 1)
  {
    sub_100009A08((uint64_t)v12, &qword_1004794C0);
    char v15 = 0;
  }
  else
  {
    RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:), v3);
    char v15 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
    sub_1002B0524((uint64_t)v12, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  return v15 & 1;
}

uint64_t sub_1002A6764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for HostedRoutingSession(0);
  sub_1001E71E8(v1 + *(int *)(v14 + 28), (uint64_t)v13, &qword_1004794C0);
  uint64_t v15 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v13, 1, v15) == 1)
  {
    sub_100009A08((uint64_t)v13, &qword_1004794C0);
  }
  else
  {
    RoutingSession.NowPlayingInfo.PlaybackInfo.playbackState.getter();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.playing(_:), v4);
    char v16 = static RoutingSession.NowPlayingInfo.PlaybackInfo.PlaybackState.== infix(_:_:)();
    unint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    sub_1002B0524((uint64_t)v13, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    if (v16) {
      return static Date.now.getter();
    }
  }
  uint64_t v19 = v2 + *(int *)(v14 + 52);
  uint64_t v20 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, v19, v20);
}

uint64_t sub_1002A69F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, unsigned __int8 a10, int a11, int a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v72 = a7;
  uint64_t v73 = a8;
  uint64_t v70 = a2;
  uint64_t v74 = a14;
  LODWORD(v71) = a10;
  uint64_t v21 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v75 = *(void *)(v21 - 8);
  uint64_t v76 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v63 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v77 = (uint64_t)&v63 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v63 - v26;
  unint64_t v28 = (int *)type metadata accessor for HostedRoutingSession(0);
  unint64_t v29 = (void *)((char *)a9 + v28[11]);
  *unint64_t v29 = 0;
  v29[1] = 0;
  uint64_t v64 = v29;
  uint64_t v30 = v70;
  *a9 = a1;
  a9[1] = v30;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v31 = (uint64_t)a9 + v28[7];
  uint64_t v70 = a5;
  sub_1001E71E8(a5, v31, &qword_1004794C0);
  unint64_t v32 = (char *)a9 + v28[13];
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v33 - 8);
  uint64_t v68 = v33;
  unint64_t v34 = *(void (**)(char *, uint64_t))(v67 + 16);
  uint64_t v69 = a6;
  v34(v32, a6);
  *(void *)((char *)a9 + v28[9]) = v72;
  *(void *)((char *)a9 + v28[10]) = v73;
  *((unsigned char *)a9 + v28[14]) = (_BYTE)v71;
  Swift::String v35 = (char *)a9 + v28[12];
  *(_DWORD *)Swift::String v35 = a12;
  v35[4] = a13 & 1;
  uint64_t v36 = (char *)a9 + v28[8];
  uint64_t v37 = type metadata accessor for RoutingControls();
  uint64_t v38 = *(void *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v36, v74, v37);
  uint64_t v71 = v28;
  uint64_t v72 = a9;
  uint64_t v39 = (uint64_t)a9 + v28[15];
  uint64_t v73 = a15;
  sub_1001E71E8(a15, v39, &qword_1004794B8);
  id v78 = a3;
  swift_bridgeObjectRetain();
  uint64_t v40 = swift_bridgeObjectRetain();
  uint64_t result = sub_1002AE138(v40, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  uint64_t v42 = v78;
  uint64_t v43 = _swiftEmptyArrayStorage;
  id v78 = _swiftEmptyArrayStorage;
  uint64_t v44 = v42[2];
  uint64_t v65 = v38;
  uint64_t v66 = v37;
  if (v44)
  {
    unint64_t v45 = 0;
    uint64_t v46 = v75;
    uint64_t v47 = v76;
    while (v45 < v42[2])
    {
      unint64_t v48 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v49 = *(void *)(v46 + 72);
      sub_1002B06CC((uint64_t)v42 + v48 + v49 * v45, (uint64_t)v27, type metadata accessor for HostedRoutingItem);
      if (v27[*(int *)(v47 + 36)] == 1)
      {
        sub_1002B0734((uint64_t)v27, v77, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001E1F90(0, v43[2] + 1, 1);
          uint64_t v46 = v75;
        }
        uint64_t v43 = v78;
        unint64_t v51 = v78[2];
        unint64_t v50 = v78[3];
        if (v51 >= v50 >> 1)
        {
          sub_1001E1F90(v50 > 1, v51 + 1, 1);
          uint64_t v46 = v75;
          uint64_t v43 = v78;
        }
        v43[2] = v51 + 1;
        uint64_t result = sub_1002B0734(v77, (uint64_t)v43 + v48 + v51 * v49, type metadata accessor for HostedRoutingItem);
        uint64_t v47 = v76;
      }
      else
      {
        uint64_t result = sub_1002B0524((uint64_t)v27, type metadata accessor for HostedRoutingItem);
      }
      if (v44 == ++v45)
      {
        uint64_t v43 = v78;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v46 = v75;
    uint64_t v47 = v76;
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v52 = v43[2];
    if (v52)
    {
      uint64_t v53 = v46;
      uint64_t v54 = (uint64_t)v43 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
      uint64_t v55 = *(void *)(v53 + 72);
      swift_retain();
      uint64_t v56 = v52 - 1;
      uint64_t v57 = (uint64_t)v63;
      do
      {
        uint64_t v58 = v56;
        sub_1002B06CC(v54, v57, type metadata accessor for HostedRoutingItem);
        LOBYTE(v52) = *(unsigned char *)(v57 + *(int *)(v47 + 60));
        sub_1002B0524(v57, type metadata accessor for HostedRoutingItem);
        if (v52) {
          break;
        }
        uint64_t v56 = v58 - 1;
        v54 += v55;
      }
      while (v58);
      swift_release();
    }
    *((unsigned char *)v72 + v71[16]) = v52;
    if (v43[2])
    {
      type metadata accessor for Symbols();
      uint64_t v59 = sub_1002FFF10((uint64_t)v43);
      uint64_t v61 = v60;
      swift_release();
      sub_100009A08(v73, &qword_1004794B8);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v74, v66);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
      sub_100009A08(v70, &qword_1004794C0);
      uint64_t v62 = v64;
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v62 = v59;
      v62[1] = v61;
    }
    else
    {
      swift_release();
      sub_100009A08(v73, &qword_1004794B8);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v74, v66);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
      return sub_100009A08(v70, &qword_1004794C0);
    }
  }
  return result;
}

unint64_t sub_1002A6FB8()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A736D657469202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_1002AE138(v5, &qword_1004794D0, type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem);
  type metadata accessor for HostedRoutingItem(0);
  v6._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD000000000000024;
}

uint64_t sub_1002A70F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v2 - 8);
  Swift::String v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = 0;
  unint64_t v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(196);
  v9._countAndFlagsBits = 0xD000000000000014;
  v9._object = (void *)0x80000001003C9270;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD000000000000011;
  v10._object = (void *)0x80000001003B9B30;
  uint64_t v75 = 0xD000000000000011;
  String.append(_:)(v10);
  uint64_t v11 = *v0;
  uint64_t v12 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x80000001003B9B50;
  v14._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v14);
  uint64_t v15 = type metadata accessor for HostedRoutingSession(0);
  if (*((unsigned char *)v0 + *(int *)(v15 + 56))) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (*((unsigned char *)v0 + *(int *)(v15 + 56))) {
    unint64_t v17 = 0xE400000000000000;
  }
  else {
    unint64_t v17 = 0xE500000000000000;
  }
  unint64_t v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x6C6F76202020200ALL;
  v19._object = (void *)0xED0000203A656D75;
  String.append(_:)(v19);
  uint64_t v76 = v15;
  if (*((unsigned char *)v0 + *(int *)(v15 + 48) + 4))
  {
    unint64_t v20 = 0xE300000000000000;
    uint64_t v21 = 7104878;
  }
  else
  {
    uint64_t v21 = Float.description.getter();
    unint64_t v20 = v22;
  }
  uint64_t v77 = v4;
  unint64_t v23 = v20;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x80000001003B9D10;
  v24._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v24);
  uint64_t v25 = v0[2];
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = _swiftEmptyArrayStorage;
  id v78 = v0;
  if (v26)
  {
    uint64_t v81 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100014688(0, v26, 0);
    uint64_t v28 = *(unsigned __int8 *)(v6 + 80);
    unint64_t v73 = v25;
    uint64_t v74 = v6;
    uint64_t v29 = v25 + ((v28 + 32) & ~v28);
    uint64_t v30 = *(void *)(v6 + 72);
    do
    {
      sub_1002B06CC(v29, (uint64_t)v8, type metadata accessor for HostedRoutingItem);
      uint64_t v79 = 0x2020202020202020;
      unint64_t v80 = 0xE800000000000000;
      v31._countAndFlagsBits = sub_10029F9A8();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      uint64_t v32 = v79;
      unint64_t v33 = v80;
      sub_1002B0524((uint64_t)v8, type metadata accessor for HostedRoutingItem);
      uint64_t v27 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v27[2] + 1, 1);
        uint64_t v27 = v81;
      }
      unint64_t v35 = v27[2];
      unint64_t v34 = v27[3];
      if (v35 >= v34 >> 1)
      {
        sub_100014688(v34 > 1, v35 + 1, 1);
        uint64_t v27 = v81;
      }
      void v27[2] = v35 + 1;
      uint64_t v36 = &v27[2 * v35];
      v36[4] = v32;
      v36[5] = v33;
      v29 += v30;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v1 = v78;
    uint64_t v6 = v74;
  }
  uint64_t v79 = (uint64_t)v27;
  uint64_t v37 = sub_100013A80(&qword_10047A080);
  unint64_t v38 = sub_10024D6A8();
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x80000001003B9D30;
  v43._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v43);
  uint64_t v44 = v1[3];
  int64_t v45 = *(void *)(v44 + 16);
  uint64_t v46 = _swiftEmptyArrayStorage;
  if (v45)
  {
    unint64_t v73 = v38;
    uint64_t v74 = v37;
    uint64_t v81 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100014688(0, v45, 0);
    uint64_t v47 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v72 = v44;
    uint64_t v48 = v44 + ((v47 + 32) & ~v47);
    uint64_t v49 = *(void *)(v6 + 72);
    do
    {
      sub_1002B06CC(v48, (uint64_t)v8, type metadata accessor for HostedRoutingItem);
      uint64_t v79 = 0x2020202020202020;
      unint64_t v80 = 0xE800000000000000;
      v50._countAndFlagsBits = sub_10029F9A8();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      uint64_t v51 = v79;
      unint64_t v52 = v80;
      sub_1002B0524((uint64_t)v8, type metadata accessor for HostedRoutingItem);
      uint64_t v46 = v81;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v46[2] + 1, 1);
        uint64_t v46 = v81;
      }
      unint64_t v54 = v46[2];
      unint64_t v53 = v46[3];
      if (v54 >= v53 >> 1)
      {
        sub_100014688(v53 > 1, v54 + 1, 1);
        uint64_t v46 = v81;
      }
      _OWORD v46[2] = v54 + 1;
      uint64_t v55 = &v46[2 * v54];
      v55[4] = v51;
      v55[5] = v52;
      v48 += v49;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    uint64_t v1 = v78;
  }
  uint64_t v79 = (uint64_t)v46;
  uint64_t v56 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v58 = v57;
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = v56;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._object = (void *)0x80000001003B9B70;
  v60._countAndFlagsBits = v75;
  String.append(_:)(v60);
  uint64_t v61 = (uint64_t)v77;
  sub_1001E71E8((uint64_t)v1 + *(int *)(v76 + 28), (uint64_t)v77, &qword_1004794C0);
  uint64_t v62 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v61, 1, v62) == 1)
  {
    sub_100009A08(v61, &qword_1004794C0);
    uint64_t v63 = (void *)0xE300000000000000;
    uint64_t v64 = 7104878;
  }
  else
  {
    uint64_t v64 = sub_1002A47FC();
    uint64_t v63 = v65;
    sub_1002B0524(v61, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  v66._countAndFlagsBits = v64;
  v66._object = v63;
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 0xD000000000000021;
  v67._object = (void *)0x80000001003B9B90;
  String.append(_:)(v67);
  swift_bridgeObjectRetain();
  v68._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v69._countAndFlagsBits = 0xD000000000000023;
  v69._object = (void *)0x80000001003B9BC0;
  String.append(_:)(v69);
  swift_bridgeObjectRetain();
  v70._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v82;
}

void sub_1002A7818(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100013A80(&qword_1004794B8);
  __chkstk_darwin(v7 - 8);
  uint64_t v49 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  __chkstk_darwin(v9);
  uint64_t v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v46 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13 - 8);
  unint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v42 - v18;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v1 + 16);
  Hasher._combine(_:)(*(void *)(v20 + 16));
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v42 = v5;
    uint64_t v43 = v4;
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v23 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002B06CC(v22, (uint64_t)v19, type metadata accessor for HostedRoutingItem);
      sub_10029FE3C(a1);
      sub_1002B0524((uint64_t)v19, type metadata accessor for HostedRoutingItem);
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    uint64_t v5 = v42;
    uint64_t v4 = v43;
  }
  uint64_t v24 = *(void *)(v1 + 24);
  Hasher._combine(_:)(*(void *)(v24 + 16));
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v26 = v24 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v27 = *(void *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002B06CC(v26, (uint64_t)v17, type metadata accessor for HostedRoutingItem);
      sub_10029FE3C(a1);
      sub_1002B0524((uint64_t)v17, type metadata accessor for HostedRoutingItem);
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  uint64_t v28 = (int *)type metadata accessor for HostedRoutingSession(0);
  uint64_t v29 = v46;
  sub_1001E71E8(v2 + v28[7], v46, &qword_1004794C0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v29, 1, v48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v30 = v44;
    sub_1002B0734(v29, v44, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    Hasher._combine(_:)(1u);
    sub_1002A5F04(a1);
    sub_1002B0524(v30, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }
  type metadata accessor for RoutingControls();
  sub_1002B0684(&qword_10047C4C8, (void (*)(uint64_t))&type metadata accessor for RoutingControls);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v31 = *(void *)(v2 + v28[9]);
  Hasher._combine(_:)(*(void *)(v31 + 16));
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = v31 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v33 += 16;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  uint64_t v34 = *(void *)(v2 + v28[10]);
  Hasher._combine(_:)(*(void *)(v34 + 16));
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v34 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v36 += 16;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + v28[11] + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v37 = v2 + v28[12];
  if (*(unsigned char *)(v37 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt32 v38 = *(_DWORD *)v37;
    Hasher._combine(_:)(1u);
    if ((v38 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v39 = v38;
    }
    else {
      Swift::UInt32 v39 = 0;
    }
    Hasher._combine(_:)(v39);
  }
  type metadata accessor for Date();
  sub_1002B0684(&qword_10047C4D8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + v28[14]));
  uint64_t v40 = v49;
  sub_1001E71E8(v2 + v28[15], v49, &qword_1004794B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v40, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v40, v4);
    Hasher._combine(_:)(1u);
    sub_1002B0684(&qword_10047C4D0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v41, v4);
  }
  Hasher._combine(_:)(*(unsigned char *)(v2 + v28[16]));
}

Swift::Int sub_1002A7F8C(uint64_t a1, uint64_t a2)
{
  return sub_1002AC438(a1, a2, (void (*)(unsigned char *))sub_1002A7818);
}

Swift::Int sub_1002A7FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC49C(a1, a2, a3, (void (*)(unsigned char *))sub_1002A7818);
}

uint64_t sub_1002A7FCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100013A80(&qword_10047C4F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100013A80(&qword_10047C500);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100013A80(&qword_10047C508);
  __chkstk_darwin(v12 - 8);
  uint64_t v51 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100013A80(&qword_10047C510);
  __chkstk_darwin(v14 - 8);
  uint64_t v55 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100013A80(&qword_10047C518);
  __chkstk_darwin(v16 - 8);
  unint64_t v54 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100013A80(&qword_10047C520);
  __chkstk_darwin(v18 - 8);
  unint64_t v53 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a3;
  RoutingControls.init()();
  if (a2 >> 62) {
    goto LABEL_39;
  }
  uint64_t v20 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v20)
  {
    uint64_t v49 = v11;
    Swift::String v50 = v8;
    uint64_t v56 = kMRMediaRemoteCommandInfoPreferredIntervalsKey;
    uint64_t v21 = 4;
    unint64_t v52 = (char *)&type metadata for Any + 8;
    uint64_t v57 = a1;
    uint64_t v11 = v51;
    while (1)
    {
      id v24 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a2 + 8 * v21);
      uint64_t v25 = v24;
      uint64_t v8 = (char *)(v21 - 3);
      if (__OFADD__(v21 - 4, 1)) {
        break;
      }
      switch([v24 command])
      {
        case 0u:
          swift_bridgeObjectRetain();
          uint64_t v22 = v53;
          RoutingControls.PlayControl.init(sessionIdentifier:)();
          uint64_t v23 = type metadata accessor for RoutingControls.PlayControl();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
          RoutingControls.play.setter();
          goto LABEL_5;
        case 1u:
          swift_bridgeObjectRetain();
          uint64_t v26 = v54;
          RoutingControls.PauseControl.init(sessionIdentifier:)();
          uint64_t v27 = type metadata accessor for RoutingControls.PauseControl();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
          RoutingControls.pause.setter();
          goto LABEL_5;
        case 4u:
          swift_bridgeObjectRetain();
          RoutingControls.NextTrackControl.init(sessionIdentifier:)();
          uint64_t TrackControl = type metadata accessor for RoutingControls.NextTrackControl();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TrackControl - 8) + 56))(v11, 0, 1, TrackControl);
          RoutingControls.nextTrack.setter();
          goto LABEL_5;
        case 5u:
          swift_bridgeObjectRetain();
          uint64_t v29 = v55;
          RoutingControls.PreviousTrackControl.init(sessionIdentifier:)();
          uint64_t v30 = type metadata accessor for RoutingControls.PreviousTrackControl();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 0, 1, v30);
          RoutingControls.previousTrack.setter();
          goto LABEL_5;
        case 0x11u:
          id v31 = [v25 options];
          if (!v31) {
            goto LABEL_25;
          }
          uint64_t v32 = v31;
          uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (!v56)
          {
            __break(1u);
LABEL_42:
            __break(1u);
            JUMPOUT(0x1002A87ECLL);
          }
          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v34;
          AnyHashable.init<A>(_:)();
          a1 = v57;
          if (*(void *)(v33 + 16) && (unint64_t v35 = sub_10018C3C4((uint64_t)v61), (v36 & 1) != 0))
          {
            sub_10018FDAC(*(void *)(v33 + 56) + 32 * v35, (uint64_t)&v62);
          }
          else
          {
            long long v62 = 0u;
            long long v63 = 0u;
          }
          sub_10018FFC8((uint64_t)v61);
          swift_bridgeObjectRelease();
          if (!*((void *)&v63 + 1)) {
            goto LABEL_36;
          }
          sub_100013A80(&qword_10047C528);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_5;
          }
          if (!*(void *)(v61[0] + 16)) {
            goto LABEL_37;
          }
          swift_bridgeObjectRetain();
          uint64_t v43 = v50;
          RoutingControls.SkipForwardControl.init(intervals:preferredInterval:sessionIdentifier:)();
          uint64_t v44 = type metadata accessor for RoutingControls.SkipForwardControl();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
          uint64_t v11 = v51;
          RoutingControls.skipForward.setter();
          goto LABEL_5;
        case 0x12u:
          id v37 = [v25 options];
          if (!v37)
          {
LABEL_25:
            long long v62 = 0u;
            long long v63 = 0u;
            a1 = v57;
LABEL_36:

            sub_100009A08((uint64_t)&v62, &qword_100479F50);
            goto LABEL_6;
          }
          Swift::UInt32 v38 = v37;
          uint64_t v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (!v56) {
            goto LABEL_42;
          }
          uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v40;
          AnyHashable.init<A>(_:)();
          a1 = v57;
          if (*(void *)(v39 + 16) && (unint64_t v41 = sub_10018C3C4((uint64_t)v61), (v42 & 1) != 0))
          {
            sub_10018FDAC(*(void *)(v39 + 56) + 32 * v41, (uint64_t)&v62);
          }
          else
          {
            long long v62 = 0u;
            long long v63 = 0u;
          }
          sub_10018FFC8((uint64_t)v61);
          swift_bridgeObjectRelease();
          if (!*((void *)&v63 + 1)) {
            goto LABEL_36;
          }
          sub_100013A80(&qword_10047C528);
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_5;
          }
          if (*(void *)(v61[0] + 16))
          {
            swift_bridgeObjectRetain();
            int64_t v45 = v49;
            RoutingControls.SkipBackwardControl.init(intervals:preferredInterval:sessionIdentifier:)();
            uint64_t v46 = type metadata accessor for RoutingControls.SkipBackwardControl();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
            uint64_t v11 = v51;
            RoutingControls.skipBackward.setter();
LABEL_5:

            goto LABEL_6;
          }
LABEL_37:

          swift_bridgeObjectRelease();
LABEL_6:
          ++v21;
          if (v8 == (char *)v20) {
            goto LABEL_40;
          }
          break;
        default:
          goto LABEL_5;
      }
    }
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_40:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A8838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v337 = a2;
  uint64_t v3 = sub_100013A80(&qword_1004794B8);
  __chkstk_darwin(v3 - 8);
  uint64_t v330 = (uint64_t)v320 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v329 = type metadata accessor for Date();
  uint64_t v328 = *(void *)(v329 - 8);
  __chkstk_darwin(v329);
  uint64_t v336 = (char *)v320 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v327 = (uint64_t)v320 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100013A80(&qword_10047C530);
  __chkstk_darwin(v8 - 8);
  uint64_t v335 = (uint64_t)v320 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v400 = sub_100013A80(&qword_10047C538);
  uint64_t v10 = __chkstk_darwin(v400);
  v346 = (BOOL *)v320 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  v345 = (BOOL *)v320 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v344 = (BOOL *)v320 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v354 = (BOOL *)v320 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v353 = (BOOL *)v320 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v396 = (BOOL *)v320 - v21;
  __chkstk_darwin(v20);
  uint64_t v352 = (BOOL *)v320 - v22;
  uint64_t v402 = type metadata accessor for RoutingItem.Properties();
  uint64_t v331 = *(void *)(v402 - 8);
  uint64_t v23 = __chkstk_darwin(v402);
  uint64_t v343 = (BOOL *)v320 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v361 = (char *)v320 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v342 = (BOOL *)v320 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v341 = (char *)v320 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v340 = (BOOL *)v320 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v360 = (char *)v320 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v394 = (char *)v320 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v359 = (char *)v320 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v351 = (char *)v320 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v365 = (char *)v320 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v350 = (BOOL *)v320 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v349 = (char *)v320 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v398 = (char *)v320 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v348 = (BOOL *)v320 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v347 = (char *)v320 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v355 = (char *)v320 - v54;
  __chkstk_darwin(v53);
  uint64_t v364 = (char *)v320 - v55;
  uint64_t v56 = sub_100013A80(&qword_10047C498);
  __chkstk_darwin(v56 - 8);
  uint64_t v363 = (char *)v320 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_100013A80(&qword_10047C4A0);
  __chkstk_darwin(v58 - 8);
  uint64_t v362 = (char *)v320 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v326 = type metadata accessor for RoutingControls();
  uint64_t v325 = *(void *)(v326 - 8);
  uint64_t v60 = __chkstk_darwin(v326);
  uint64_t v395 = (char *)v320 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v334 = (char *)v320 - v63;
  __chkstk_darwin(v62);
  uint64_t v397 = (char *)v320 - v64;
  uint64_t v65 = sub_100013A80(&qword_100478990);
  uint64_t v66 = __chkstk_darwin(v65 - 8);
  uint64_t v383 = (uint64_t)v320 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  uint64_t v388 = (void *)((char *)v320 - v68);
  uint64_t v384 = type metadata accessor for RoutingItem();
  uint64_t v389 = *(void *)(v384 - 8);
  uint64_t v69 = __chkstk_darwin(v384);
  Swift::Int v381 = (char *)v320 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69);
  v386 = (char *)v320 - v71;
  uint64_t v401 = type metadata accessor for HostedRoutingItem(0);
  uint64_t v339 = *(void *)(v401 - 8);
  uint64_t v72 = __chkstk_darwin(v401);
  uint64_t v392 = (uint64_t)v320 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __chkstk_darwin(v72);
  v380 = (void *)((char *)v320 - v75);
  uint64_t v76 = __chkstk_darwin(v74);
  uint64_t v393 = (void *)((char *)v320 - v77);
  uint64_t v78 = __chkstk_darwin(v76);
  uint64_t v382 = (uint64_t)v320 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  uint64_t v391 = (uint64_t)v320 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  v385 = (void *)((char *)v320 - v83);
  uint64_t v84 = __chkstk_darwin(v82);
  os_log_t v366 = (char *)v320 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  uint64_t v387 = (uint64_t)v320 - v87;
  __chkstk_darwin(v86);
  id v89 = (char *)v320 - v88;
  uint64_t v90 = sub_100013A80(&qword_100478988);
  __chkstk_darwin(v90 - 8);
  uint64_t v399 = (uint64_t)v320 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for RoutingSession.Properties();
  uint64_t v333 = *(void *)(v92 - 8);
  uint64_t v93 = __chkstk_darwin(v92);
  id v95 = (char *)v320 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = __chkstk_darwin(v93);
  uint64_t v332 = (char *)v320 - v97;
  __chkstk_darwin(v96);
  uint64_t v99 = (char *)v320 - v98;
  uint64_t v100 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v100 - 8);
  id v102 = (char *)v320 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v104 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v106 = (void *)((char *)v320 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001E71E8(a1, (uint64_t)v102, &qword_100479530);
  uint64_t v107 = *(unsigned int (**)(void, void, void))(v104 + 48);
  v324 = (int *)v103;
  if (v107(v102, 1, v103) == 1)
  {
    sub_100009A08(a1, &qword_100479530);
    sub_100009A08((uint64_t)v102, &qword_100479530);
    uint64_t v108 = type metadata accessor for RoutingSession();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v337, 1, 1, v108);
  }
  sub_1002B0734((uint64_t)v102, (uint64_t)v106, type metadata accessor for HostedRoutingSession);
  LOBYTE(v403) = 0;
  sub_1002B0684(&qword_10047C540, (void (*)(uint64_t))&type metadata accessor for RoutingSession.Properties);
  uint64_t v322 = v92;
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v110 = *v106;
  uint64_t v111 = v106[1];
  uint64_t v338 = v106;
  uint64_t v323 = v99;
  uint64_t v321 = a1;
  if ((v110 != 0x4C41434F4CLL || v111 != 0xE500000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_34;
  }
  uint64_t v112 = sub_1002A6260();
  uint64_t v113 = *(void *)(v112 + 16);
  if (!v113)
  {
    uint64_t v127 = 1;
LABEL_31:
    uint64_t v126 = v399;
    goto LABEL_32;
  }
  uint64_t v114 = v112 + ((*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80));
  uint64_t v115 = *(void *)(v339 + 72);
  while (2)
  {
    sub_1002B06CC(v114, (uint64_t)v89, type metadata accessor for HostedRoutingItem);
    id v116 = &v89[*(int *)(v401 + 56)];
    uint64_t v117 = *(void *)v116;
    uint64_t v118 = *((void *)v116 + 1);
    unsigned int v119 = *((unsigned __int16 *)v116 + 8);
    int v120 = (v119 >> 8) & 6 | (v119 >> 7) & 1;
    switch(v120)
    {
      case 1:
        goto LABEL_28;
      case 2:
      case 4:
      case 5:
        unsigned int v121 = v119 & 0xF97F;
        goto LABEL_13;
      case 3:
        if (v119 >> 11 != 17) {
          goto LABEL_28;
        }
        unsigned int v121 = v119 & 0xF97F;
        goto LABEL_17;
      case 6:
        goto LABEL_9;
      default:
        unsigned int v121 = *(unsigned __int16 *)(v117 + 32);
        uint64_t v122 = v117 + 16;
        uint64_t v117 = *(void *)(v117 + 16);
        uint64_t v118 = *(void *)(v122 + 8);
LABEL_13:
        if (v121 >> 11 != 17)
        {
          if (v120 == 3) {
            goto LABEL_28;
          }
          goto LABEL_9;
        }
LABEL_17:
        if (v118) {
          BOOL v123 = 0;
        }
        else {
          BOOL v123 = v117 == 7;
        }
        char v125 = v123 && v121 == 34816;
        if (v120 != 3 && (v125 & 1) == 0)
        {
LABEL_9:
          sub_1002B0524((uint64_t)v89, type metadata accessor for HostedRoutingItem);
          v114 += v115;
          if (!--v113)
          {
            uint64_t v127 = 1;
            goto LABEL_31;
          }
          continue;
        }
LABEL_28:
        uint64_t v126 = v399;
        sub_1002B0734((uint64_t)v89, v399, type metadata accessor for HostedRoutingItem);
        uint64_t v127 = 0;
LABEL_32:
        uint64_t v128 = v339;
        uint64_t v129 = v401;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v339 + 56))(v126, v127, 1, v401);
        swift_bridgeObjectRelease();
        int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v126, 1, v129);
        sub_100009A08(v126, &qword_100478988);
        if (v130 == 1)
        {
          static RoutingSession.Properties.supportsAudioSampling.getter();
          id v131 = v332;
          sub_10029E63C(v332, (uint64_t)v95);
          uint64_t v132 = *(void (**)(void, void))(v333 + 8);
          uint64_t v133 = v322;
          v132(v95, v322);
          v132(v131, v133);
        }
LABEL_34:
        id v134 = v338;
        uint64_t v135 = v338[1];
        v320[3] = *v338;
        uint64_t v136 = v338[2];
        int64_t v137 = *(void *)(v136 + 16);
        v320[2] = v135;
        if (v137)
        {
          v405 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1002ADD44(0, v137, 0);
          unint64_t v138 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
          v320[1] = v136;
          uint64_t v139 = v136 + v138;
          uint64_t v358 = v391 + 16;
          uint64_t v357 = *(void *)(v339 + 72);
          uint64_t v379 = (void (**)(char *, char *, uint64_t))(v331 + 16);
          uint64_t v367 = (void (**)(BOOL *, uint64_t))(v331 + 8);
          char v378 = (void (**)(void, void, void))(v331 + 32);
          uint64_t v356 = v389 + 32;
          id v140 = v355;
          id v141 = (uint64_t *)v366;
          do
          {
            uint64_t v142 = v140;
            uint64_t v143 = v387;
            sub_1002B06CC(v139, v387, type metadata accessor for HostedRoutingItem);
            sub_1002B06CC(v143, (uint64_t)v141, type metadata accessor for HostedRoutingItem);
            uint64_t v144 = v141[1];
            uint64_t v377 = *v141;
            uint64_t v145 = v141[3];
            uint64_t v376 = v141[2];
            id v146 = (void (**)(char *, char *, uint64_t))v141[5];
            uint64_t v375 = v141[4];
            uint64_t v147 = v141[7];
            uint64_t v374 = v141[6];
            uint64_t v148 = v401;
            id v149 = v388;
            sub_1001E71E8((uint64_t)v141 + *(int *)(v401 + 32), (uint64_t)v388, &qword_100478990);
            uint64_t v150 = type metadata accessor for RoutingItem.SelectionIndicator();
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v150 - 8) + 48))(v149, 1, v150) == 1)
            {
              __break(1u);
LABEL_103:
              __break(1u);
              JUMPOUT(0x1002AB31CLL);
            }
            uint64_t v372 = v139;
            os_log_t v373 = (void (**)(BOOL *, uint64_t))v137;
            unsigned __int8 v151 = (unsigned int *)((char *)v141 + *(int *)(v148 + 48));
            uint64_t v369 = (void *)*v151;
            LODWORD(v368) = *((unsigned __int8 *)v151 + 4);
            uint64_t v152 = v385;
            sub_1002B06CC((uint64_t)v141, (uint64_t)v385, type metadata accessor for HostedRoutingItem);
            uint64_t v370 = v145;
            swift_bridgeObjectRetain();
            uint64_t v371 = v144;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v399 = v147;
            swift_bridgeObjectRetain();
            RoutingControls.init()();
            char v153 = *((unsigned char *)v152 + *(int *)(v148 + 52));
            uint64_t v154 = v152[3];
            if (v154)
            {
              uint64_t v403 = v152[2];
              uint64_t v404 = v154;
              swift_bridgeObjectRetain();
              v155._countAndFlagsBits = 14906;
              v155._object = (void *)0xE200000000000000;
              String.append(_:)(v155);
              uint64_t v157 = *v152;
              char v156 = (void *)v152[1];
              swift_bridgeObjectRetain();
              v158._countAndFlagsBits = v157;
              v158._object = v156;
              String.append(_:)(v158);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            id v140 = v142;
            if (v153)
            {
              swift_bridgeObjectRetain();
              unsigned int v159 = v362;
              RoutingControls.AbsoluteVolumeControl.init(itemIdentifier:)();
              uint64_t v160 = type metadata accessor for RoutingControls.AbsoluteVolumeControl();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v160 - 8) + 56))(v159, 0, 1, v160);
              RoutingControls.absoluteVolume.setter();
            }
            uint64_t v161 = (uint64_t)v385;
            if ((v153 & 2) != 0)
            {
              unsigned int v162 = v363;
              RoutingControls.RelativeVolumeControl.init(itemIdentifier:)();
              uint64_t v163 = type metadata accessor for RoutingControls.RelativeVolumeControl();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56))(v162, 0, 1, v163);
              RoutingControls.relativeVolume.setter();
              sub_1002B0524(v161, type metadata accessor for HostedRoutingItem);
            }
            else
            {
              sub_1002B0524((uint64_t)v385, type metadata accessor for HostedRoutingItem);
              swift_bridgeObjectRelease();
            }
            uint64_t v164 = (int *)v401;
            uint64_t v165 = v391;
            sub_1002B06CC((uint64_t)v141, v391, type metadata accessor for HostedRoutingItem);
            RoutingItem.Properties.init(rawValue:)();
            unsigned int v166 = *(unsigned __int16 *)(v358 + v164[14]);
            uint64_t v167 = v379;
            uint64_t v390 = v146;
            if (((v166 >> 8) & 6 | (v166 >> 7) & 1) == 5)
            {
              unint64_t v168 = v398;
              unint64_t v169 = v347;
              static RoutingItem.Properties.isBuiltIn.getter();
              unint64_t v170 = *v167;
              (*v167)(v168, v140, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              uint64_t v171 = v348;
              dispatch thunk of SetAlgebra.intersection(_:)();
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v172 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v173 = &v352[*(int *)(v400 + 48)];
              BOOL v174 = (v172 & 1) == 0;
              *uint64_t v352 = v174;
              if (v172)
              {
                uint64_t v175 = *v378;
                (*v378)(v173, v171, v402);
                id v176 = v367;
              }
              else
              {
                char v177 = v171;
                id v176 = v367;
                uint64_t v178 = v402;
                (*v367)(v177, v402);
                v170((char *)v173, v169, v178);
                v170(v168, v169, v178);
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v175 = *v378;
              }
              uint64_t v179 = *(int *)(v400 + 48);
              uint64_t v180 = v396;
              uint64_t v181 = &v396[v179];
              *uint64_t v396 = v174;
              NSString v182 = v173;
              uint64_t v183 = v402;
              v175(&v180[v179], v182, v402);
              id v184 = *v176;
              (*v176)(v181, v183);
              v184((BOOL *)v169, v183);
              uint64_t v164 = (int *)v401;
              id v140 = v355;
              uint64_t v165 = v391;
              uint64_t v167 = v379;
            }
            if (*(unsigned char *)(v165 + v164[10]) == 1)
            {
              uint64_t v185 = v349;
              static RoutingItem.Properties.isPlaying.getter();
              uint64_t v186 = *v167;
              (*v167)(v398, v140, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              uint64_t v187 = v350;
              dispatch thunk of SetAlgebra.intersection(_:)();
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v188 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v189 = &v353[*(int *)(v400 + 48)];
              BOOL v190 = (v188 & 1) == 0;
              *uint64_t v353 = v190;
              uint64_t v191 = v140;
              if (v188)
              {
                unint64_t v192 = v140;
                uint64_t v193 = *v378;
                (*v378)(v189, v187, v402);
                uint64_t v194 = v367;
              }
              else
              {
                id v195 = v187;
                uint64_t v194 = v367;
                uint64_t v196 = v402;
                (*v367)(v195, v402);
                v186((char *)v189, v185, v196);
                v186(v398, v185, v196);
                unint64_t v192 = v191;
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v193 = *v378;
              }
              uint64_t v197 = *(int *)(v400 + 48);
              uint64_t v198 = v396;
              uint64_t v199 = &v396[v197];
              *uint64_t v396 = v190;
              uint64_t v200 = v402;
              v193(&v198[v197], v189, v402);
              uint64_t v201 = *v194;
              (*v194)(v199, v200);
              v201((BOOL *)v185, v200);
              uint64_t v164 = (int *)v401;
              uint64_t v167 = v379;
              id v140 = v192;
              uint64_t v165 = v391;
            }
            uint64_t v202 = v365;
            if (*(unsigned char *)(v165 + v164[16]) == 1)
            {
              static RoutingItem.Properties.isDisabled.getter();
              uint64_t v203 = *v167;
              unint64_t v204 = v398;
              id v205 = v140;
              (*v167)(v398, v140, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              uint64_t v206 = v351;
              dispatch thunk of SetAlgebra.intersection(_:)();
              uint64_t v207 = v206;
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v208 = dispatch thunk of static Equatable.== infix(_:_:)();
              char v209 = &v354[*(int *)(v400 + 48)];
              int v210 = v204;
              BOOL v211 = (v208 & 1) == 0;
              *uint64_t v354 = v211;
              uint64_t v212 = v205;
              if (v208)
              {
                id v140 = v205;
                uint64_t v213 = v207;
                uint64_t v215 = *v378;
                (*v378)(v209, v213, v402);
                id v214 = v367;
              }
              else
              {
                id v214 = v367;
                uint64_t v216 = (BOOL *)v207;
                uint64_t v217 = v402;
                (*v367)(v216, v402);
                v203((char *)v209, v202, v217);
                v203(v210, v202, v217);
                id v140 = v212;
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v215 = *v378;
              }
              id v141 = (uint64_t *)v366;
              uint64_t v218 = *(int *)(v400 + 48);
              char v219 = v396;
              id v220 = &v396[v218];
              *uint64_t v396 = v211;
              uint64_t v221 = v402;
              v215(&v219[v218], v209, v402);
              id v222 = *v214;
              (*v214)(v220, v221);
              sub_1002B0524(v391, type metadata accessor for HostedRoutingItem);
              v222((BOOL *)v202, v221);
            }
            else
            {
              sub_1002B0524(v165, type metadata accessor for HostedRoutingItem);
              uint64_t v215 = *v378;
              id v141 = (uint64_t *)v366;
            }
            v215(v364, v140, v402);
            LOBYTE(v403) = v368;
            RoutingItem.init(identifier:scopeIdentifier:title:symbolName:selectionIndicator:volume:controls:properties:)();
            sub_1002B0524((uint64_t)v141, type metadata accessor for HostedRoutingItem);
            sub_1002B0524(v387, type metadata accessor for HostedRoutingItem);
            uint64_t v223 = v405;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1002ADD44(0, v223[2] + 1, 1);
              uint64_t v223 = v405;
            }
            uint64_t v224 = v372;
            unint64_t v226 = v223[2];
            unint64_t v225 = v223[3];
            if (v226 >= v225 >> 1)
            {
              sub_1002ADD44(v225 > 1, v226 + 1, 1);
              uint64_t v223 = v405;
            }
            v223[2] = v226 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v389 + 32))((unint64_t)v223+ ((*(unsigned __int8 *)(v389 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v389 + 80))+ *(void *)(v389 + 72) * v226, v386, v384);
            v405 = v223;
            uint64_t v139 = v224 + v357;
            int64_t v137 = (int64_t)v373 - 1;
          }
          while (v373 != (void (**)(BOOL *, uint64_t))1);
          swift_bridgeObjectRelease();
          id v134 = v338;
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v223 = _swiftEmptyArrayStorage;
        }
        uint64_t v369 = v223;
        uint64_t v227 = v134[3];
        int64_t v228 = *(void *)(v227 + 16);
        uint64_t v229 = v393;
        uint64_t v230 = v394;
        uint64_t v231 = v392;
        if (v228)
        {
          v405 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          uint64_t v391 = v228;
          sub_1002ADD44(0, v228, 0);
          unint64_t v232 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
          uint64_t v368 = v227;
          uint64_t v233 = v227 + v232;
          uint64_t v372 = v231 + 16;
          uint64_t v371 = *(void *)(v339 + 72);
          uint64_t v390 = (void (**)(char *, char *, uint64_t))(v331 + 16);
          os_log_t v373 = (void (**)(BOOL *, uint64_t))(v331 + 8);
          uint64_t v388 = (void *)(v331 + 32);
          uint64_t v370 = v389 + 32;
          id v234 = (int *)v401;
          do
          {
            uint64_t v235 = v382;
            sub_1002B06CC(v233, v382, type metadata accessor for HostedRoutingItem);
            sub_1002B06CC(v235, (uint64_t)v229, type metadata accessor for HostedRoutingItem);
            uint64_t v236 = *v229;
            uint64_t v237 = v229[1];
            uint64_t v238 = v229[3];
            v386 = (char *)v229[2];
            uint64_t v387 = v236;
            uint64_t v239 = v229[5];
            v385 = (uint64_t *)v229[4];
            uint64_t v240 = (char *)v229[7];
            uint64_t v379 = (void (**)(char *, char *, uint64_t))v229[6];
            uint64_t v241 = v383;
            sub_1001E71E8((uint64_t)v229 + v234[8], v383, &qword_100478990);
            uint64_t v242 = type metadata accessor for RoutingItem.SelectionIndicator();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v242 - 8) + 48))(v241, 1, v242) == 1)goto LABEL_103; {
            char v378 = (void (**)(void, void, void))v233;
            }
            char v243 = (unsigned int *)((char *)v229 + v234[12]);
            uint64_t v375 = *v243;
            LODWORD(v374) = *((unsigned __int8 *)v243 + 4);
            id v244 = v380;
            sub_1002B06CC((uint64_t)v229, (uint64_t)v380, type metadata accessor for HostedRoutingItem);
            swift_bridgeObjectRetain();
            uint64_t v377 = v237;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            RoutingControls.init()();
            char v245 = *((unsigned char *)v244 + v234[13]);
            uint64_t v246 = v244[3];
            if (v246)
            {
              uint64_t v403 = v244[2];
              uint64_t v404 = v246;
              swift_bridgeObjectRetain();
              v247._countAndFlagsBits = 14906;
              v247._object = (void *)0xE200000000000000;
              String.append(_:)(v247);
              uint64_t v249 = *v244;
              NSString v248 = (void *)v244[1];
              swift_bridgeObjectRetain();
              v250._countAndFlagsBits = v249;
              v250._object = v248;
              String.append(_:)(v250);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            unsigned __int8 v251 = v360;
            if (v245)
            {
              swift_bridgeObjectRetain();
              id v252 = v362;
              RoutingControls.AbsoluteVolumeControl.init(itemIdentifier:)();
              uint64_t v253 = type metadata accessor for RoutingControls.AbsoluteVolumeControl();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v253 - 8) + 56))(v252, 0, 1, v253);
              RoutingControls.absoluteVolume.setter();
            }
            if ((v245 & 2) != 0)
            {
              id v254 = v363;
              RoutingControls.RelativeVolumeControl.init(itemIdentifier:)();
              uint64_t v255 = type metadata accessor for RoutingControls.RelativeVolumeControl();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v255 - 8) + 56))(v254, 0, 1, v255);
              RoutingControls.relativeVolume.setter();
              sub_1002B0524((uint64_t)v380, type metadata accessor for HostedRoutingItem);
            }
            else
            {
              sub_1002B0524((uint64_t)v380, type metadata accessor for HostedRoutingItem);
              swift_bridgeObjectRelease();
            }
            unsigned __int8 v256 = (int *)v401;
            uint64_t v257 = v392;
            uint64_t v229 = v393;
            sub_1002B06CC((uint64_t)v393, v392, type metadata accessor for HostedRoutingItem);
            uint64_t v258 = v230;
            RoutingItem.Properties.init(rawValue:)();
            unsigned int v259 = *(unsigned __int16 *)(v372 + v256[14]);
            uint64_t v376 = v238;
            uint64_t v399 = v239;
            uint64_t v397 = v240;
            if (((v259 >> 8) & 6 | (v259 >> 7) & 1) == 5)
            {
              static RoutingItem.Properties.isBuiltIn.getter();
              v260 = *v390;
              id v261 = v398;
              (*v390)(v398, v230, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              id v262 = v340;
              dispatch thunk of SetAlgebra.intersection(_:)();
              id v263 = v262;
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v264 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v265 = &v344[*(int *)(v400 + 48)];
              uint64_t v266 = v261;
              BOOL v267 = (v264 & 1) == 0;
              *uint64_t v344 = v267;
              if (v264)
              {
                uint64_t v268 = (void (*)(void, void, void))*v388;
                uint64_t v269 = v402;
                ((void (*)(BOOL *, BOOL *, uint64_t))*v388)(v265, v263, v402);
                uint64_t v270 = v373;
              }
              else
              {
                uint64_t v269 = v402;
                uint64_t v270 = v373;
                (*v373)(v263, v402);
                v260((char *)v265, v251, v269);
                v260(v266, v251, v269);
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v268 = (void (*)(void, void, void))*v388;
              }
              uint64_t v271 = *(int *)(v400 + 48);
              id v272 = v396;
              id v273 = &v396[v271];
              *uint64_t v396 = v267;
              v268(&v272[v271], v265, v269);
              id v274 = *v270;
              (*v270)(v273, v269);
              v274((BOOL *)v251, v269);
              uint64_t v229 = v393;
              uint64_t v258 = v394;
              unsigned __int8 v256 = (int *)v401;
              uint64_t v257 = v392;
            }
            if (*(unsigned char *)(v257 + v256[10]) == 1)
            {
              NSString v275 = v341;
              static RoutingItem.Properties.isPlaying.getter();
              id v276 = *v390;
              uint64_t v277 = v398;
              (*v390)(v398, v258, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              uint64_t v278 = v342;
              dispatch thunk of SetAlgebra.intersection(_:)();
              id v279 = v278;
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v280 = dispatch thunk of static Equatable.== infix(_:_:)();
              id v281 = &v345[*(int *)(v400 + 48)];
              uint64_t v282 = v277;
              BOOL v283 = (v280 & 1) == 0;
              BOOL *v345 = v283;
              if (v280)
              {
                uint64_t v284 = (void (*)(void, void, void))*v388;
                uint64_t v285 = v402;
                ((void (*)(BOOL *, BOOL *, uint64_t))*v388)(v281, v279, v402);
                uint64_t v286 = v373;
              }
              else
              {
                uint64_t v285 = v402;
                uint64_t v286 = v373;
                (*v373)(v279, v402);
                v276((char *)v281, v275, v285);
                v276(v282, v275, v285);
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v284 = (void (*)(void, void, void))*v388;
              }
              uint64_t v287 = *(int *)(v400 + 48);
              char v288 = v396;
              v289 = &v396[v287];
              *uint64_t v396 = v283;
              v284(&v288[v287], v281, v285);
              uint64_t v290 = *v286;
              (*v286)(v289, v285);
              v290((BOOL *)v275, v285);
              unsigned __int8 v256 = (int *)v401;
              uint64_t v257 = v392;
              uint64_t v229 = v393;
            }
            v291 = v361;
            uint64_t v292 = v390;
            if (*(unsigned char *)(v257 + v256[16]) == 1)
            {
              static RoutingItem.Properties.isDisabled.getter();
              uint64_t v293 = *v292;
              uint64_t v294 = v398;
              (*v292)(v398, v394, v402);
              sub_1002B0684(&qword_10047C548, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              uint64_t v295 = v343;
              dispatch thunk of SetAlgebra.intersection(_:)();
              uint64_t v296 = v295;
              sub_1002B0684(&qword_10047C550, (void (*)(uint64_t))&type metadata accessor for RoutingItem.Properties);
              char v297 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v298 = &v346[*(int *)(v400 + 48)];
              uint64_t v299 = v294;
              BOOL v300 = (v297 & 1) == 0;
              BOOL *v346 = v300;
              if (v297)
              {
                uint64_t v303 = (void (*)(void, void, void))*v388;
                uint64_t v301 = v402;
                ((void (*)(BOOL *, BOOL *, uint64_t))*v388)(v298, v296, v402);
                uint64_t v229 = v393;
                uint64_t v302 = v373;
              }
              else
              {
                uint64_t v301 = v402;
                uint64_t v302 = v373;
                (*v373)(v296, v402);
                v293((char *)v298, v291, v301);
                v293(v299, v291, v301);
                dispatch thunk of SetAlgebra.formUnion(_:)();
                uint64_t v303 = (void (*)(void, void, void))*v388;
                uint64_t v229 = v393;
              }
              uint64_t v304 = *(int *)(v400 + 48);
              NSString v305 = v396;
              v306 = &v396[v304];
              *uint64_t v396 = v300;
              v303(&v305[v304], v298, v301);
              Swift::String v307 = *v302;
              (*v302)(v306, v301);
              sub_1002B0524(v392, type metadata accessor for HostedRoutingItem);
              v307((BOOL *)v291, v301);
            }
            else
            {
              sub_1002B0524(v257, type metadata accessor for HostedRoutingItem);
              uint64_t v303 = (void (*)(void, void, void))*v388;
            }
            uint64_t v230 = v394;
            v303(v359, v394, v402);
            LOBYTE(v403) = v374;
            RoutingItem.init(identifier:scopeIdentifier:title:symbolName:selectionIndicator:volume:controls:properties:)();
            sub_1002B0524((uint64_t)v229, type metadata accessor for HostedRoutingItem);
            sub_1002B0524(v382, type metadata accessor for HostedRoutingItem);
            uint64_t v308 = v405;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1002ADD44(0, v308[2] + 1, 1);
              uint64_t v308 = v405;
            }
            id v234 = (int *)v401;
            unint64_t v310 = v308[2];
            unint64_t v309 = v308[3];
            if (v310 >= v309 >> 1)
            {
              sub_1002ADD44(v309 > 1, v310 + 1, 1);
              id v234 = (int *)v401;
              uint64_t v308 = v405;
            }
            v308[2] = v310 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v389 + 32))((unint64_t)v308+ ((*(unsigned __int8 *)(v389 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v389 + 80))+ *(void *)(v389 + 72) * v310, v381, v384);
            v405 = v308;
            uint64_t v233 = (uint64_t)v378 + v371;
            --v391;
          }
          while (v391);
          swift_bridgeObjectRelease();
        }
        uint64_t v311 = v324;
        uint64_t v312 = (uint64_t)v338;
        uint64_t v313 = v327;
        sub_1001E71E8((uint64_t)v338 + v324[7], v327, &qword_1004794C0);
        sub_1002AB338(v313, v335);
        (*(void (**)(char *, uint64_t, uint64_t))(v328 + 16))(v336, v312 + v311[13], v329);
        LODWORD(v402) = *(unsigned __int8 *)(v312 + v311[14]);
        uint64_t v314 = (unsigned int *)(v312 + v311[12]);
        uint64_t v401 = *v314;
        LODWORD(v400) = *((unsigned __int8 *)v314 + 4);
        (*(void (**)(char *, uint64_t, uint64_t))(v325 + 16))(v334, v312 + v311[8], v326);
        uint64_t v315 = v322;
        sub_1001E71E8(v312 + v311[15], v330, &qword_1004794B8);
        uint64_t v316 = v333;
        uint64_t v317 = v323;
        (*(void (**)(char *, char *, uint64_t))(v333 + 16))(v332, v323, v315);
        swift_bridgeObjectRetain();
        LOBYTE(v403) = v400;
        uint64_t v318 = v337;
        RoutingSession.init(identifier:preferredItems:remainingItems:nowPlayingInfo:lastPlayingSnapshot:limitedRouting:volume:controls:symbolName:hostInfo:properties:)();
        sub_100009A08(v321, &qword_100479530);
        (*(void (**)(char *, uint64_t))(v316 + 8))(v317, v315);
        sub_1002B0524(v312, type metadata accessor for HostedRoutingSession);
        uint64_t v319 = type metadata accessor for RoutingSession();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v319 - 8) + 56))(v318, 0, 1, v319);
    }
  }
}

uint64_t sub_1002AB338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v24 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  uint64_t v3 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001E71E8(a1, (uint64_t)v11, &qword_1004794C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100009A08(a1, &qword_1004794C0);
    sub_100009A08((uint64_t)v11, &qword_1004794C0);
    uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v26, 1, 1, v16);
  }
  else
  {
    uint64_t v23 = a1;
    sub_1002B0734((uint64_t)v11, (uint64_t)v15, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v15[*(int *)(v12 + 36)], v5);
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v25, &v15[*(int *)(v12 + 40)], v24);
    uint64_t v18 = *((void *)v15 + 4);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v24 = *(void *)(v18 + 16 * v19 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v27 = 0;
      uint64_t v20 = v26;
      RoutingSession.NowPlayingInfo.init(title:subtitle:playbackInfo:trackInfo:artworkToken:applicationBundleIdentifier:playbackProcessIdentifier:)();
      sub_100009A08(v23, &qword_1004794C0);
      sub_1002B0524((uint64_t)v15, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1002AB724()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100013A80(&qword_100479530);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v18 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1002AE138(v8, &qword_100479558, type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession);
  uint64_t v9 = v18;
  sub_1001E71E8(v0, (uint64_t)v7, &qword_100479530);
  uint64_t v10 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v10);
  sub_100009A08((uint64_t)v7, &qword_100479530);
  if (v13 == 1)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_5:
    uint64_t v18 = v9;
    sub_1002AE138((uint64_t)v14, &qword_100479558, type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession);
    return v18;
  }
  sub_100013A80(&qword_100479558);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  *((_OWORD *)v14 + 1) = xmmword_1003C58B0;
  sub_1001E71E8(v1, (uint64_t)v5, &qword_100479530);
  uint64_t result = v12(v5, 1, v10);
  if (result != 1)
  {
    sub_1002B0734((uint64_t)v5, (uint64_t)v14 + v15, type metadata accessor for HostedRoutingSession);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002AB998()
{
  uint64_t v3 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1002AE138(v1, &qword_100479558, type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession);
  return v3;
}

uint64_t sub_1002ABA1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for HostedRoutingSession(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 1, 1, v8);
  sub_1001E7184(a3, a4, &qword_100479530);
  uint64_t result = type metadata accessor for HostedRoutingSessionSnapshot(0);
  *(void *)(a4 + *(int *)(result + 20)) = a1;
  *(void *)(a4 + *(int *)(result + 24)) = a2;
  return result;
}

unint64_t sub_1002ABABC()
{
  uint64_t v1 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v15 = 0xD00000000000002FLL;
  unint64_t v16 = 0x80000001003B9D70;
  sub_1001E71E8(v0, (uint64_t)v3, &qword_100479530);
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_100009A08((uint64_t)v3, &qword_100479530);
    uint64_t v5 = (void *)0xE300000000000000;
    unint64_t v6 = 7104878;
  }
  else
  {
    unint64_t v6 = sub_1002A6FB8();
    uint64_t v5 = v7;
    sub_1002B0524((uint64_t)v3, type metadata accessor for HostedRoutingSession);
  }
  v8._countAndFlagsBits = v6;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6F6973736573202CLL;
  v9._object = (void *)0xEC000000203A736ELL;
  String.append(_:)(v9);
  v14[1] = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_1002AE138(v10, &qword_100479558, type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession);
  v11._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v15;
}

unint64_t sub_1002ABCEC()
{
  uint64_t v1 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xD00000000000002ELL;
  unint64_t v37 = 0x80000001003B9DA0;
  sub_1001E71E8(v0, (uint64_t)v7, &qword_100479530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    sub_100009A08((uint64_t)v7, &qword_100479530);
    Swift::String v8 = (void *)0xE300000000000000;
    uint64_t v9 = 7104878;
  }
  else
  {
    uint64_t v9 = sub_1002A70F8();
    Swift::String v8 = v10;
    sub_1002B0524((uint64_t)v7, type metadata accessor for HostedRoutingSession);
  }
  v11._countAndFlagsBits = v9;
  v11._object = v8;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x6F6973736573202CLL;
  v12._object = (void *)0xED00000A203A736ELL;
  String.append(_:)(v12);
  uint64_t v33 = *(void *)(v0 + *(int *)(type metadata accessor for HostedRoutingSessionSnapshot(0) + 20));
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  sub_1002AE138(v13, &qword_100479558, type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession);
  uint64_t v14 = v33;
  int64_t v15 = *(void *)(v33 + 16);
  if (v15)
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
    sub_100014688(0, v15, 0);
    uint64_t v16 = *(unsigned __int8 *)(v2 + 80);
    uint64_t v32 = v14;
    uint64_t v17 = v14 + ((v16 + 32) & ~v16);
    uint64_t v18 = *(void *)(v2 + 72);
    do
    {
      sub_1002B06CC(v17, (uint64_t)v4, type metadata accessor for HostedRoutingSession);
      uint64_t v33 = 8224;
      unint64_t v34 = 0xE200000000000000;
      v19._countAndFlagsBits = sub_1002A70F8();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v20 = v33;
      unint64_t v21 = v34;
      sub_1002B0524((uint64_t)v4, type metadata accessor for HostedRoutingSession);
      uint64_t v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100014688(0, v22[2] + 1, 1);
        uint64_t v22 = v35;
      }
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_100014688(v23 > 1, v24 + 1, 1);
        uint64_t v22 = v35;
      }
      _OWORD v22[2] = v24 + 1;
      uint64_t v25 = &v22[2 * v24];
      v25[4] = v20;
      v25[5] = v21;
      v17 += v18;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = _swiftEmptyArrayStorage;
  }
  uint64_t v33 = (uint64_t)v22;
  sub_100013A80(&qword_10047A080);
  sub_10024D6A8();
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 10;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  return v36;
}

void sub_1002AC0F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v26 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001E71E8(v2, (uint64_t)v16, &qword_100479530);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1002B0734((uint64_t)v16, (uint64_t)v13, type metadata accessor for HostedRoutingSession);
    Hasher._combine(_:)(1u);
    sub_1002A7818(a1);
    sub_1002B0524((uint64_t)v13, type metadata accessor for HostedRoutingSession);
  }
  uint64_t v17 = type metadata accessor for HostedRoutingSessionSnapshot(0);
  uint64_t v18 = *(void *)(v2 + *(int *)(v17 + 20));
  Hasher._combine(_:)(*(void *)(v18 + 16));
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v27 = v2;
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v21 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002B06CC(v20, (uint64_t)v11, type metadata accessor for HostedRoutingSession);
      sub_1002A7818(a1);
      sub_1002B0524((uint64_t)v11, type metadata accessor for HostedRoutingSession);
      v20 += v21;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v2 = v27;
  }
  uint64_t v22 = *(void *)(v2 + *(int *)(v17 + 24));
  Hasher._combine(_:)(*(void *)(v22 + 16));
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v24 = v22 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v25 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1002B06CC(v24, (uint64_t)v8, type metadata accessor for HostedRoutingSession);
      sub_1002A7818(a1);
      sub_1002B0524((uint64_t)v8, type metadata accessor for HostedRoutingSession);
      v24 += v25;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
}

Swift::Int sub_1002AC420(uint64_t a1, uint64_t a2)
{
  return sub_1002AC438(a1, a2, (void (*)(unsigned char *))sub_1002AC0F8);
}

Swift::Int sub_1002AC438(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1002AC484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AC49C(a1, a2, a3, (void (*)(unsigned char *))sub_1002AC0F8);
}

Swift::Int sub_1002AC49C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_1002AC4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_100013A80(&qword_10047C558);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_100013A80(&qword_10047D120);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for HostedRoutingSessionSnapshot(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1001E71E8(a1, (uint64_t)v12, &qword_10047D120);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100009A08(a1, &qword_10047D120);
    sub_100009A08((uint64_t)v12, &qword_10047D120);
    uint64_t v17 = type metadata accessor for RoutingSessionSnapshot();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  else
  {
    sub_1002B0734((uint64_t)v12, (uint64_t)v16, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v19 = swift_bridgeObjectRetain();
    sub_1002A39E8(v19);
    swift_bridgeObjectRelease();
    sub_1001E71E8((uint64_t)v16, (uint64_t)v6, &qword_100479530);
    sub_1002A8838((uint64_t)v6, (uint64_t)v9);
    RoutingSessionSnapshot.init(sessions:activeSession:)();
    sub_100009A08(a1, &qword_10047D120);
    sub_1002B0524((uint64_t)v16, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v20 = type metadata accessor for RoutingSessionSnapshot();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a2, 0, 1, v20);
  }
}

uint64_t sub_1002AC7F4()
{
  uint64_t v1 = (void *)type metadata accessor for RoutingSessionConfiguration.Context();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)&v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, void *))(v2 + 16))(v4, v0, v1);
  LODWORD(result) = (*(uint64_t (**)(uint64_t *, void *))(v2 + 88))(v4, v1);
  if (result == enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    uint64_t v6 = *(void (**)(uint64_t *, void *))(v2 + 96);
    v2 += 96;
    v6(v4, v1);
    uint64_t v7 = *v4;
    uint64_t v1 = (void *)v4[1];
    uint64_t v4 = sub_10030B054();
    swift_beginAccess();
    BOOL v8 = *v4 == v7 && v4[1] == (void)v1;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_10030B130();
    swift_beginAccess();
    BOOL v9 = *v4 == v7 && v4[1] == (void)v1;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = (uint64_t *)sub_10030B2F0();
    swift_beginAccess();
    BOOL v10 = *v4 == v7 && v4[1] == (void)v1;
    if (v10
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || ((uint64_t v4 = (uint64_t *)sub_10030B2FC(), swift_beginAccess(), *v4 == v7) ? (v11 = v4[1] == (void)v1) : (v11 = 0),
          v11
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
       || (uint64_t v4 = (uint64_t *)sub_10030B308(), swift_beginAccess(), *v4 == v7) && (void *)v4[1] == v1
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
       || (uint64_t v4 = (uint64_t *)sub_10030B314(), swift_beginAccess(), *v4 == v7) && (void *)v4[1] == v1))
    {
LABEL_27:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v1 = 0;
      if ((v15 & 1) == 0) {
        return (uint64_t)v1;
      }
    }
    uint64_t result = (uint64_t)[self currentSettings];
    if (result) {
      goto LABEL_42;
    }
    __break(1u);
  }
  if (result == enum case for RoutingSessionConfiguration.Context.deviceTarget(_:)
    || result == enum case for RoutingSessionConfiguration.Context.platterTarget(_:))
  {
    (*(void (**)(uint64_t *, void *))(v2 + 8))(v4, v1);
    return 1;
  }
  if (result != enum case for RoutingSessionConfiguration.Context.nonUI(_:)
    && result != enum case for RoutingSessionConfiguration.Context.ui(_:))
  {
    (*(void (**)(uint64_t *, void *))(v2 + 8))(v4, v1);
    return 0;
  }
  uint64_t result = (uint64_t)[self currentSettings];
  if (result)
  {
LABEL_42:
    uint64_t v14 = (void *)result;
    uint64_t v1 = [(id)result supportSystemEndpoints];

    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

void *sub_1002ACB84()
{
  uint64_t v1 = (void *)type metadata accessor for RoutingSessionConfiguration.Context();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)&v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, void *))(v2 + 16))(v4, v0, v1);
  LODWORD(result) = (*(uint64_t (**)(uint64_t *, void *))(v2 + 88))(v4, v1);
  if (result == enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    uint64_t v6 = *(void (**)(uint64_t *, void *))(v2 + 96);
    v2 += 96;
    v6(v4, v1);
    uint64_t v7 = *v4;
    uint64_t v1 = (void *)v4[1];
    uint64_t v4 = sub_10030B054();
    swift_beginAccess();
    BOOL v8 = *v4 == v7 && v4[1] == (void)v1;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = sub_10030B130();
    swift_beginAccess();
    BOOL v9 = *v4 == v7 && v4[1] == (void)v1;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_27;
    }
    uint64_t v4 = (uint64_t *)sub_10030B2F0();
    swift_beginAccess();
    BOOL v10 = *v4 == v7 && v4[1] == (void)v1;
    if (v10
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || ((uint64_t v4 = (uint64_t *)sub_10030B2FC(), swift_beginAccess(), *v4 == v7) ? (v11 = v4[1] == (void)v1) : (v11 = 0),
          v11
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
       || (uint64_t v4 = (uint64_t *)sub_10030B308(), swift_beginAccess(), *v4 == v7) && (void *)v4[1] == v1
       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
       || (uint64_t v4 = (uint64_t *)sub_10030B314(), swift_beginAccess(), *v4 == v7) && (void *)v4[1] == v1))
    {
LABEL_27:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v1 = 0;
      if ((v15 & 1) == 0) {
        return v1;
      }
    }
    uint64_t result = [self currentSettings];
    if (result) {
      goto LABEL_40;
    }
    __break(1u);
  }
  BOOL v12 = result == enum case for RoutingSessionConfiguration.Context.deviceTarget(_:)
     || result == enum case for RoutingSessionConfiguration.Context.platterTarget(_:);
  if (v12
    || (result != enum case for RoutingSessionConfiguration.Context.nonUI(_:)
      ? (BOOL v13 = result == enum case for RoutingSessionConfiguration.Context.ui(_:))
      : (BOOL v13 = 1),
        !v13))
  {
    (*(void (**)(uint64_t *, void *))(v2 + 8))(v4, v1);
    return 0;
  }
  uint64_t result = [self currentSettings];
  if (result)
  {
LABEL_40:
    uint64_t v14 = result;
    uint64_t v1 = [result supportSystemEndpoints];

    return v1;
  }
  __break(1u);
  return result;
}

id sub_1002ACEF4()
{
  if (dispatch thunk of RoutingInteraction.Action.HandoffContext.sourcePlayerPath.getter())
  {
    self;
    uint64_t v0 = swift_dynamicCastObjCClass();
    if (v0)
    {
      uint64_t v1 = v0;
      sub_10018FE08(0, &qword_100478950);
      id v2 = sub_1002FF8A8();
      id v3 = [v2 queryExistingPlayerPath:v1];

      if (v3)
      {
        id v4 = [v3 playerClient];
        if (!v4)
        {
          swift_unknownObjectRelease();

          goto LABEL_12;
        }
        uint64_t v5 = v4;
        id result = [v4 playbackQueue];
        if (!result)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = result;
        id v8 = [result contentItemWithOffset:0];

        if (v8)
        {
          id v9 = [v8 metadata];

          if (v9)
          {
            id v10 = [v9 title];

            if (v10)
            {
              uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

              swift_unknownObjectRelease();
              return (id)v11;
            }
          }
        }
      }
    }
    swift_unknownObjectRelease();
  }
LABEL_12:

  return (id)RoutingInteraction.Action.HandoffContext.mediaTitle.getter();
}

uint64_t sub_1002AD0B4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v87 = a1;
  uint64_t v96 = a2;
  uint64_t v2 = type metadata accessor for RoutingInteraction();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  __chkstk_darwin(v2);
  id v4 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v95 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v6 = (char **)((char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100013A80(&qword_100479530);
  __chkstk_darwin(v7 - 8);
  uint64_t v88 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100013A80(&qword_1004794C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v90 = (uint64_t)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RoutingInteraction.Action();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v91 = v11;
  uint64_t v92 = v12;
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v83 - v19;
  uint64_t v21 = type metadata accessor for RoutingSessionConfiguration.Attribution();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  RoutingSessionConfiguration.attribution.getter();
  int v25 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v24, v21);
  if (v25 != enum case for RoutingSessionConfiguration.Attribution.attributed(_:))
  {
    if (v25 == enum case for RoutingSessionConfiguration.Attribution.none(_:)) {
      return RoutingSessionConfiguration.attribution.getter();
    }
    goto LABEL_42;
  }
  LODWORD(v86) = v25;
  (*(void (**)(char *, uint64_t))(v22 + 96))(v24, v21);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v24, v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 88))(v18, v14);
  uint64_t v27 = v26;
  uint64_t v28 = v15;
  if (v26 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v15 + 96))(v18, v14);
    uint64_t v29 = *v18;
    sub_10018FE08(0, &qword_10047AC18);
    uint64_t v30 = sub_10030B1E8(v29);
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v14);
    uint64_t v33 = v96;
    *uint64_t v96 = v30;
    v33[1] = v32;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 104))(v33, v27, v14);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t))(v22 + 104))(v33, v86, v21);
  }
  uint64_t v35 = enum case for RoutingSessionConfiguration.Attribution.AttributionType.anonymous(_:);
  if (v26 == enum case for RoutingSessionConfiguration.Attribution.AttributionType.anonymous(_:))
  {
    RoutingSessionConfiguration.attribution.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }
  if (v26 != enum case for RoutingSessionConfiguration.Attribution.AttributionType.nowPlayingApp(_:))
  {
    if (v26 != enum case for RoutingSessionConfiguration.Attribution.AttributionType.foregroundMediaApp(_:)) {
      goto LABEL_44;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    uint64_t v50 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 104);
    uint64_t v51 = v96;
    v50(v96, v35, v14);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t))(v22 + 104))(v51, v86, v21);
  }
  LODWORD(v85) = enum case for RoutingSessionConfiguration.Attribution.AttributionType.app(_:);
  unint64_t v36 = (uint64_t *)v94;
  RoutingInteraction.action.getter();
  uint64_t v37 = v91;
  uint64_t v38 = v92;
  int v39 = (*(uint64_t (**)(uint64_t *, uint64_t))(v92 + 88))(v36, v91);
  uint64_t v83 = v20;
  uint64_t v84 = v28;
  if (v39 == enum case for RoutingInteraction.Action.add(_:)
    || v39 == enum case for RoutingInteraction.Action.remove(_:)
    || v39 == enum case for RoutingInteraction.Action.set(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v38 + 96))(v36, v37);
    uint64_t v40 = v36[2];
    uint64_t v41 = v36[3];
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v42 = sub_1002AB724();
    uint64_t v43 = *(void *)(v42 + 16);
    if (v43)
    {
      LODWORD(v94) = v35;
      uint64_t v44 = v21;
      uint64_t v45 = v14;
      uint64_t v46 = v42 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
      uint64_t v47 = *(void *)(v95 + 72);
      while (1)
      {
        sub_1002B06CC(v46, (uint64_t)v6, type metadata accessor for HostedRoutingSession);
        BOOL v48 = *v6 == v40 && v6[1] == v41;
        if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1002B0524((uint64_t)v6, type metadata accessor for HostedRoutingSession);
        v46 += v47;
        if (!--v43)
        {
          uint64_t v49 = 1;
          uint64_t v14 = v45;
          uint64_t v21 = v44;
          id v4 = v88;
          uint64_t v35 = v94;
          goto LABEL_27;
        }
      }
      id v4 = v88;
      sub_1002B0734((uint64_t)v6, (uint64_t)v88, type metadata accessor for HostedRoutingSession);
      uint64_t v49 = 0;
      uint64_t v14 = v45;
      uint64_t v21 = v44;
      uint64_t v35 = v94;
    }
    else
    {
      uint64_t v49 = 1;
      id v4 = v88;
    }
LABEL_27:
    uint64_t v52 = v95;
    uint64_t v53 = v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v4, v49, 1, v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v4, 1, v53);
    uint64_t v55 = v83;
    uint64_t v56 = v84;
    uint64_t v57 = v90;
    if (v54 == 1)
    {
      uint64_t v58 = &qword_100479530;
      uint64_t v59 = (uint64_t)v4;
LABEL_31:
      sub_100009A08(v59, v58);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v14);
      uint64_t v51 = v96;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v56 + 104))(v96, v35, v14);
      return (*(uint64_t (**)(uint64_t *, void, uint64_t))(v22 + 104))(v51, v86, v21);
    }
    sub_1001E71E8((uint64_t)&v4[*(int *)(v53 + 28)], v90, &qword_1004794C0);
    sub_1002B0524((uint64_t)v4, type metadata accessor for HostedRoutingSession);
    uint64_t v60 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v57, 1, v60) == 1)
    {
      uint64_t v58 = &qword_1004794C0;
      uint64_t v59 = v57;
      goto LABEL_31;
    }
    uint64_t v61 = v55;
    uint64_t v62 = v56;
    uint64_t v63 = *(void *)(v57 + 32);
    uint64_t v64 = *(unsigned int *)(v57 + 40);
    unsigned __int8 v65 = *(unsigned char *)(v57 + 44);
    sub_1001E70B8(v63, v64, v65);
    sub_1002B0524(v57, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    uint64_t v66 = *(void *)(v63 + 16);
    if (v66)
    {
      uint64_t v67 = *(void *)(v63 + 16 * v66 + 16);
      swift_bridgeObjectRetain();
      sub_1001DDF44(v63, v64, v65);
      sub_10018FE08(0, &qword_10047AC18);
      uint64_t v68 = sub_10030B1E8(v67);
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v14);
      uint64_t v33 = v96;
      *uint64_t v96 = v68;
      v33[1] = v70;
      (*(void (**)(uint64_t *, void, uint64_t))(v62 + 104))(v33, v85, v14);
      return (*(uint64_t (**)(uint64_t *, void, uint64_t))(v22 + 104))(v33, v86, v21);
    }
    __break(1u);
LABEL_42:
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v4, v93, v86);
    uint64_t v97 = 0;
    unint64_t v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(107);
    v79._countAndFlagsBits = 0xD000000000000069;
    v79._object = (void *)0x80000001003B9E00;
    String.append(_:)(v79);
    sub_1002B0684(&qword_100478968, (void (*)(uint64_t))&type metadata accessor for RoutingInteraction);
    v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v80);
    swift_bridgeObjectRelease();
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_44:
      uint64_t v97 = 0;
      unint64_t v98 = 0xE000000000000000;
      _StringGuts.grow(_:)(104);
      v81._object = (void *)0x80000001003B9E70;
      v81._countAndFlagsBits = 0xD000000000000066;
      String.append(_:)(v81);
      sub_1002B0684(&qword_10047C560, (void (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.Attribution.AttributionType);
      v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
    }
  }
  if (v39 == enum case for RoutingInteraction.Action.setActiveSession(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v38 + 96))(v36, v37);
    uint64_t v40 = *v36;
    uint64_t v41 = v36[1];
    goto LABEL_14;
  }
  if (v39 == enum case for RoutingInteraction.Action.handoff(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v38 + 96))(v36, v37);
    uint64_t v71 = v28;
    sub_10018FE08(0, &qword_10047AC18);
    swift_retain();
    uint64_t v72 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter();
    uint64_t v73 = sub_10030B1E8(v72);
    uint64_t v75 = v74;
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v14);
    uint64_t v76 = v96;
    *uint64_t v96 = v73;
    v76[1] = v75;
    (*(void (**)(uint64_t *, void, uint64_t))(v71 + 104))(v76, v85, v14);
    (*(void (**)(uint64_t *, void, uint64_t))(v22 + 104))(v76, v86, v21);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v14);
    uint64_t v77 = v37;
    uint64_t v78 = v96;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 104))(v96, v35, v14);
    (*(void (**)(uint64_t *, void, uint64_t))(v22 + 104))(v78, v86, v21);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 8))(v36, v77);
  }
}

size_t sub_1002ADD44(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1002ADD80(a1, a2, a3, (void *)*v3, &qword_10047C9A8, (uint64_t (*)(void))&type metadata accessor for RoutingItem);
  *uint64_t v3 = result;
  return result;
}

size_t sub_1002ADD80(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100013A80(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

size_t sub_1002ADF5C(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100013A80(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

uint64_t sub_1002AE138(uint64_t result, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = *(void **)v4;
  int64_t v7 = *(void *)(*(void *)v4 + 16);
  int64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = result;
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v8 <= v6[3] >> 1)
  {
    if (*(void *)(v12 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v7 <= v8) {
    int64_t v17 = v7 + v5;
  }
  else {
    int64_t v17 = v7;
  }
  size_t result = sub_1002ADF5C(result, v17, 1, v6, a2, a3);
  uint64_t v6 = (void *)result;
  if (!*(void *)(v12 + 16))
  {
LABEL_13:
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v13 = (v6[3] >> 1) - v6[2];
  size_t result = a4(0);
  if (v13 < v5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  size_t result = swift_arrayInitWithCopy();
  if (!v5)
  {
LABEL_14:
    size_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v6;
    return result;
  }
  uint64_t v14 = v6[2];
  BOOL v15 = __OFADD__(v14, v5);
  uint64_t v16 = v14 + v5;
  if (!v15)
  {
    v6[2] = v16;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1002AE288(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 1u:
      if (((a6 >> 8) & 6 | (a6 >> 7) & 1) == 1) {
        goto LABEL_16;
      }
      goto LABEL_25;
    case 2u:
      if (((a6 >> 8) & 6 | (a6 >> 7) & 1) != 2) {
        goto LABEL_25;
      }
      goto LABEL_16;
    case 3u:
      if (((a6 >> 8) & 6 | (a6 >> 7) & 1) != 3) {
        goto LABEL_25;
      }
      goto LABEL_16;
    case 4u:
      if (((a6 >> 8) & 6 | (a6 >> 7) & 1) != 4) {
        goto LABEL_25;
      }
      goto LABEL_16;
    case 5u:
      if (((a6 >> 8) & 6 | (a6 >> 7) & 1) != 5) {
        goto LABEL_25;
      }
LABEL_16:
      sub_1001B9E5C(a1, a2, a3);
      sub_1001B9E5C(a4, a5, a6);
      char v23 = sub_10029B648(a1, a2, a3 & 0xFFFFF97F, a4, a5, a6 & 0xF97F);
      sub_1001B9958(a4, a5, a6);
      sub_1001B9958(a1, a2, a3);
      uint64_t result = v23 & 1;
      break;
    case 6u:
      BOOL v24 = ((a6 >> 8) & 6 | (a6 >> 7) & 1) == 6 && (a5 | a4) == 0;
      if (!v24 || (unsigned __int16)a6 != 1536) {
        goto LABEL_25;
      }
      uint64_t result = 1;
      break;
    default:
      if ((a6 >> 8) & 6 | (a6 >> 7) & 1) {
        goto LABEL_25;
      }
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      int v14 = *(unsigned __int16 *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v17 = *(void *)(a4 + 24);
      unsigned __int16 v19 = *(_WORD *)(a4 + 32);
      uint64_t v21 = *(void *)(a4 + 40);
      uint64_t v20 = *(void *)(a4 + 48);
      sub_1001B9EBC(v13, v12, v14);
      sub_1001B9EBC(v18, v17, v19);
      if (sub_10029B648(v13, v12, v14, v18, v17, v19))
      {
        if (v15 == v21 && v16 == v20)
        {
          sub_1001B99B8(v18, v17, v19);
          sub_1001B99B8(v13, v12, v14);
          uint64_t result = 1;
        }
        else
        {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1001B99B8(v18, v17, v19);
          sub_1001B99B8(v13, v12, v14);
          uint64_t result = v25 & 1;
        }
      }
      else
      {
        sub_1001B99B8(v18, v17, v19);
        sub_1001B99B8(v13, v12, v14);
LABEL_25:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1002AE544(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(_WORD *)(a2 + 16) = *((_WORD *)a1 + 8);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_1002AE55C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  switch(BYTE4(a2))
  {
    case 1:
      if (BYTE4(a4) != 1) {
        return 0;
      }
      return sub_1001EE450(a1, a3) & (a2 == a4);
    case 2:
      if (BYTE4(a4) == 2) {
        return sub_1001EE450(a1, a3) & (a2 == a4);
      }
      return 0;
    case 3:
      if (BYTE4(a4) == 3) {
        return sub_1001EE450(a1, a3) & (a2 == a4);
      }
      return 0;
    case 4:
      if (BYTE4(a4) == 4) {
        return sub_1001EE450(a1, a3) & (a2 == a4);
      }
      return 0;
    default:
      if (BYTE4(a4)) {
        return 0;
      }
      else {
        return sub_1001EE450(a1, a3) & (a2 == a4);
      }
  }
}

uint64_t sub_1002AE608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v30 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100013A80(&qword_100479528);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  int64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100013A80(&qword_100479530);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  int v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v29 - v16;
  __chkstk_darwin(v15);
  unsigned __int16 v19 = (char *)&v29 - v18;
  uint64_t v31 = a1;
  sub_1001E71E8(a1, (uint64_t)&v29 - v18, &qword_100479530);
  uint64_t v32 = a2;
  sub_1001E71E8(a2, (uint64_t)v17, &qword_100479530);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1001E71E8((uint64_t)v19, (uint64_t)v10, &qword_100479530);
  sub_1001E71E8((uint64_t)v17, v20, &qword_100479530);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_100009A08((uint64_t)v17, &qword_100479530);
    sub_100009A08((uint64_t)v19, &qword_100479530);
    if (v21(v20, 1, v4) == 1)
    {
      sub_100009A08((uint64_t)v10, &qword_100479530);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_1001E71E8((uint64_t)v10, (uint64_t)v14, &qword_100479530);
  if (v21(v20, 1, v4) == 1)
  {
    sub_100009A08((uint64_t)v17, &qword_100479530);
    sub_100009A08((uint64_t)v19, &qword_100479530);
    sub_1002B0524((uint64_t)v14, type metadata accessor for HostedRoutingSession);
LABEL_6:
    sub_100009A08((uint64_t)v10, &qword_100479528);
LABEL_10:
    char v27 = 0;
    return v27 & 1;
  }
  uint64_t v22 = v30;
  sub_1002B0734(v20, (uint64_t)v30, type metadata accessor for HostedRoutingSession);
  char v23 = sub_1002AFAFC(v14, v22);
  sub_1002B0524((uint64_t)v22, type metadata accessor for HostedRoutingSession);
  sub_100009A08((uint64_t)v17, &qword_100479530);
  sub_100009A08((uint64_t)v19, &qword_100479530);
  sub_1002B0524((uint64_t)v14, type metadata accessor for HostedRoutingSession);
  sub_100009A08((uint64_t)v10, &qword_100479530);
  if ((v23 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v24 = type metadata accessor for HostedRoutingSessionSnapshot(0);
  uint64_t v26 = v31;
  uint64_t v25 = v32;
  if ((sub_10029DAEC(*(void *)(v31 + *(int *)(v24 + 20)), *(void *)(v32 + *(int *)(v24 + 20)), type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession, (uint64_t (*)(char *, char *))sub_1002AFAFC, type metadata accessor for HostedRoutingSession) & 1) == 0)goto LABEL_10; {
  char v27 = sub_10029DAEC(*(void *)(v26 + *(int *)(v24 + 24)), *(void *)(v25 + *(int *)(v24 + 24)), type metadata accessor for HostedRoutingSession, type metadata accessor for HostedRoutingSession, (uint64_t (*)(char *, char *))sub_1002AFAFC, type metadata accessor for HostedRoutingSession);
  }
  return v27 & 1;
}

uint64_t sub_1002AEA64(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v81 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v79 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_100013A80(&qword_10047C9B0);
  __chkstk_darwin(v80);
  uint64_t v82 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100013A80(&qword_1004794B8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v85 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v84 = (char *)&v73 - v12;
  uint64_t v13 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v86 = (uint64_t)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100013A80(&qword_10047C9B8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100013A80(&qword_1004794C0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v73 - v24;
  __chkstk_darwin(v23);
  char v27 = (char *)&v73 - v26;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(), v29 = 0, (v28 & 1) != 0))
  {
    uint64_t v30 = a1[3];
    uint64_t v31 = a2[3];
    if (v30)
    {
      if (!v31) {
        goto LABEL_37;
      }
      if (a1[2] != a2[2] || v30 != v31)
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v29 = 0;
        if ((v32 & 1) == 0) {
          return v29 & 1;
        }
      }
    }
    else if (v31)
    {
      goto LABEL_37;
    }
    uint64_t v78 = v14;
    uint64_t v33 = a2;
    if (sub_10029DAEC(a1[4], a2[4], type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem, (uint64_t (*)(char *, char *))sub_1002AF574, type metadata accessor for HostedRoutingItem))
    {
      uint64_t v74 = v4;
      uint64_t v34 = type metadata accessor for HostedRoutingSourceSession(0);
      uint64_t v35 = *(int *)(v34 + 28);
      uint64_t v75 = a1;
      sub_1001E71E8((uint64_t)a1 + v35, (uint64_t)v27, &qword_1004794C0);
      uint64_t v76 = (int *)v34;
      uint64_t v77 = v33;
      sub_1001E71E8((uint64_t)v33 + *(int *)(v34 + 28), (uint64_t)v25, &qword_1004794C0);
      uint64_t v36 = (uint64_t)&v18[*(int *)(v16 + 48)];
      sub_1001E71E8((uint64_t)v27, (uint64_t)v18, &qword_1004794C0);
      sub_1001E71E8((uint64_t)v25, v36, &qword_1004794C0);
      uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
      if (v37((uint64_t)v18, 1, v13) == 1)
      {
        sub_100009A08((uint64_t)v25, &qword_1004794C0);
        sub_100009A08((uint64_t)v27, &qword_1004794C0);
        if (v37(v36, 1, v13) == 1)
        {
          sub_100009A08((uint64_t)v18, &qword_1004794C0);
LABEL_20:
          uint64_t v43 = v75;
          uint64_t v42 = v76;
          uint64_t v44 = v77;
          if ((static RoutingControls.== infix(_:_:)() & 1) == 0
            || (sub_1001EE450(*(void **)((char *)v43 + v42[9]), *(void **)((char *)v44 + v42[9])) & 1) == 0
            || (sub_1001EE450(*(void **)((char *)v43 + v42[10]), *(void **)((char *)v44 + v42[10])) & 1) == 0)
          {
            goto LABEL_37;
          }
          uint64_t v45 = v42[11];
          uint64_t v46 = (void *)((char *)v43 + v45);
          uint64_t v47 = *(void *)((char *)v43 + v45 + 8);
          BOOL v48 = (void *)((char *)v44 + v45);
          uint64_t v49 = v48[1];
          uint64_t v50 = v44;
          if (v47)
          {
            uint64_t v51 = v74;
            if (!v49) {
              goto LABEL_37;
            }
            if (*v46 != *v48 || v47 != v49)
            {
              char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v50 = v77;
              char v53 = v52;
              char v29 = 0;
              if ((v53 & 1) == 0) {
                return v29 & 1;
              }
            }
          }
          else
          {
            uint64_t v51 = v74;
            if (v49) {
              goto LABEL_37;
            }
          }
          uint64_t v54 = v42[12];
          uint64_t v55 = (float *)((char *)v43 + v54);
          char v56 = *((unsigned char *)v43 + v54 + 4);
          uint64_t v57 = (float *)((char *)v50 + v54);
          int v58 = *((unsigned __int8 *)v50 + v54 + 4);
          if (v56)
          {
            uint64_t v60 = (uint64_t)v84;
            uint64_t v59 = (uint64_t)v85;
            uint64_t v61 = (uint64_t)v83;
            if (!v58) {
              goto LABEL_37;
            }
          }
          else
          {
            if (*v55 != *v57) {
              LOBYTE(v58) = 1;
            }
            uint64_t v60 = (uint64_t)v84;
            uint64_t v59 = (uint64_t)v85;
            uint64_t v61 = (uint64_t)v83;
            if (v58) {
              goto LABEL_37;
            }
          }
          if (*((unsigned __int8 *)v43 + v42[13]) != *((unsigned __int8 *)v50 + v42[13])) {
            goto LABEL_37;
          }
          uint64_t v63 = v50;
          sub_1001E71E8((uint64_t)v43 + v42[14], v60, &qword_1004794B8);
          sub_1001E71E8((uint64_t)v63 + v42[14], v61, &qword_1004794B8);
          uint64_t v64 = v82;
          uint64_t v65 = v82 + *(int *)(v80 + 48);
          sub_1001E71E8(v60, v82, &qword_1004794B8);
          uint64_t v66 = v64;
          sub_1001E71E8(v61, v65, &qword_1004794B8);
          uint64_t v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
          if (v67(v64, 1, v51) == 1)
          {
            sub_100009A08(v61, &qword_1004794B8);
            uint64_t v66 = v82;
            sub_100009A08(v60, &qword_1004794B8);
            if (v67(v65, 1, v51) == 1)
            {
              sub_100009A08(v66, &qword_1004794B8);
              goto LABEL_46;
            }
          }
          else
          {
            sub_1001E71E8(v64, v59, &qword_1004794B8);
            if (v67(v65, 1, v51) != 1)
            {
              uint64_t v68 = v61;
              uint64_t v69 = v81;
              uint64_t v70 = v79;
              (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v79, v65, v51);
              sub_1002B0684(&qword_10047C9C0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
              char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v72 = *(void (**)(char *, uint64_t))(v69 + 8);
              v72(v70, v51);
              sub_100009A08(v68, &qword_1004794B8);
              sub_100009A08(v60, &qword_1004794B8);
              v72((char *)v59, v51);
              sub_100009A08(v64, &qword_1004794B8);
              if ((v71 & 1) == 0) {
                goto LABEL_37;
              }
LABEL_46:
              char v29 = static Date.== infix(_:_:)();
              return v29 & 1;
            }
            sub_100009A08(v61, &qword_1004794B8);
            sub_100009A08(v60, &qword_1004794B8);
            (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v59, v51);
          }
          uint64_t v38 = &qword_10047C9B0;
          uint64_t v39 = v66;
          goto LABEL_18;
        }
      }
      else
      {
        sub_1001E71E8((uint64_t)v18, (uint64_t)v22, &qword_1004794C0);
        if (v37(v36, 1, v13) != 1)
        {
          uint64_t v40 = v86;
          sub_1002B0734(v36, v86, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          char v41 = sub_1002AF3A0((uint64_t)v22, v40);
          sub_1002B0524(v40, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          sub_100009A08((uint64_t)v25, &qword_1004794C0);
          sub_100009A08((uint64_t)v27, &qword_1004794C0);
          sub_1002B0524((uint64_t)v22, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          sub_100009A08((uint64_t)v18, &qword_1004794C0);
          if ((v41 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_20;
        }
        sub_100009A08((uint64_t)v25, &qword_1004794C0);
        sub_100009A08((uint64_t)v27, &qword_1004794C0);
        sub_1002B0524((uint64_t)v22, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      }
      uint64_t v38 = &qword_10047C9B8;
      uint64_t v39 = (uint64_t)v18;
LABEL_18:
      sub_100009A08(v39, v38);
    }
LABEL_37:
    char v29 = 0;
  }
  return v29 & 1;
}

uint64_t sub_1002AF3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  if (!v5) {
    goto LABEL_26;
  }
  BOOL v6 = *(void *)a1 == *(void *)a2 && v4 == v5;
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), v8 = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a2 + 24);
    if (v9)
    {
      if (!v10) {
        goto LABEL_26;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v8 = 0;
        if ((v11 & 1) == 0) {
          return v8 & 1;
        }
      }
    }
    else if (v10)
    {
      goto LABEL_26;
    }
    if (sub_1002AE55C(*(void **)(a1 + 32), *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32), *(void **)(a2 + 32), *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32)))
    {
      uint64_t v12 = *(void *)(a2 + 48);
      if (*(void *)(a1 + 48))
      {
        if (!v12) {
          goto LABEL_26;
        }
        type metadata accessor for ArtworkToken();
        sub_1002B0684(&qword_10047C9C8, (void (*)(uint64_t))&type metadata accessor for ArtworkToken);
        swift_retain_n();
        char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if ((v13 & 1) == 0) {
          goto LABEL_26;
        }
      }
      else if (v12)
      {
        goto LABEL_26;
      }
      if (sub_1001EE450(*(void **)(a1 + 56), *(void **)(a2 + 56)))
      {
        type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
        if (static RoutingSession.NowPlayingInfo.PlaybackInfo.== infix(_:_:)())
        {
          char v8 = static RoutingSession.NowPlayingInfo.TrackInfo.== infix(_:_:)();
          return v8 & 1;
        }
      }
    }
LABEL_26:
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1002AF574(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100013A80(&qword_100479598);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100013A80(&qword_100478990);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v21) = 0, (v20 & 1) != 0))
  {
    uint64_t v22 = a1[3];
    uint64_t v23 = a2[3];
    if (v22)
    {
      if (!v23) {
        goto LABEL_36;
      }
      if (a1[2] != a2[2] || v22 != v23)
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        LOBYTE(v21) = 0;
        if ((v24 & 1) == 0) {
          return v21 & 1;
        }
      }
    }
    else if (v23)
    {
      goto LABEL_36;
    }
    if (a1[4] == a2[4] && a1[5] == a2[5]
      || (char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v21) = 0, (v25 & 1) != 0))
    {
      if (a1[6] == a2[6] && a1[7] == a2[7]
        || (char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v21) = 0, (v26 & 1) != 0))
      {
        uint64_t v46 = v14;
        uint64_t v44 = v7;
        uint64_t v27 = v4;
        uint64_t v28 = type metadata accessor for HostedRoutingItem(0);
        sub_1001E71E8((uint64_t)a1 + *(int *)(v28 + 32), (uint64_t)v19, &qword_100478990);
        uint64_t v45 = (int *)v28;
        uint64_t v29 = *(int *)(v28 + 32);
        uint64_t v30 = v27;
        sub_1001E71E8((uint64_t)a2 + v29, (uint64_t)v17, &qword_100478990);
        uint64_t v31 = (uint64_t)&v10[*(int *)(v8 + 48)];
        sub_1001E71E8((uint64_t)v19, (uint64_t)v10, &qword_100478990);
        sub_1001E71E8((uint64_t)v17, v31, &qword_100478990);
        char v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v32((uint64_t)v10, 1, v30) == 1)
        {
          sub_100009A08((uint64_t)v17, &qword_100478990);
          sub_100009A08((uint64_t)v19, &qword_100478990);
          if (v32(v31, 1, v30) == 1)
          {
            sub_100009A08((uint64_t)v10, &qword_100478990);
LABEL_24:
            uint64_t v36 = v45;
            if (*((unsigned __int8 *)a1 + v45[9]) == *((unsigned __int8 *)a2 + v45[9])
              && *((unsigned __int8 *)a1 + v45[10]) == *((unsigned __int8 *)a2 + v45[10])
              && *((unsigned __int8 *)a1 + v45[11]) == *((unsigned __int8 *)a2 + v45[11]))
            {
              uint64_t v37 = v45[12];
              uint64_t v38 = (float *)((char *)a1 + v37);
              char v39 = *((unsigned char *)a1 + v37 + 4);
              uint64_t v40 = (float *)((char *)a2 + v37);
              int v21 = *((unsigned __int8 *)a2 + v37 + 4);
              if (v39)
              {
                if (!v21) {
                  return v21 & 1;
                }
LABEL_33:
                if (*((unsigned __int8 *)a1 + v45[13]) == *((unsigned __int8 *)a2 + v45[13]))
                {
                  uint64_t v41 = v45[14];
                  if ((sub_1002AE288(*(void *)((char *)a1 + v41), *(void *)((char *)a1 + v41 + 8), *(unsigned __int16 *)((char *)a1 + v41 + 16), *(void *)((char *)a2 + v41), *(void *)((char *)a2 + v41 + 8), *(unsigned __int16 *)((char *)a2 + v41 + 16)) & 1) != 0&& *((unsigned __int8 *)a1 + v36[15]) == *((unsigned __int8 *)a2 + v36[15]))
                  {
                    LOBYTE(v21) = *((unsigned char *)a1 + v36[16]) ^ *((unsigned char *)a2 + v36[16]) ^ 1;
                    return v21 & 1;
                  }
                }
                goto LABEL_36;
              }
              if (*v38 != *v40) {
                LOBYTE(v21) = 1;
              }
              if ((v21 & 1) == 0) {
                goto LABEL_33;
              }
            }
LABEL_36:
            LOBYTE(v21) = 0;
            return v21 & 1;
          }
        }
        else
        {
          sub_1001E71E8((uint64_t)v10, (uint64_t)v46, &qword_100478990);
          uint64_t v43 = v31;
          if (v32(v31, 1, v30) != 1)
          {
            uint64_t v33 = v44;
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v44, v43, v30);
            sub_1002B0684(&qword_1004795B0, (void (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator);
            uint64_t v34 = (uint64_t)v46;
            LODWORD(v43) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
            v35(v33, v30);
            sub_100009A08((uint64_t)v17, &qword_100478990);
            sub_100009A08((uint64_t)v19, &qword_100478990);
            v35((char *)v34, v30);
            sub_100009A08((uint64_t)v10, &qword_100478990);
            if ((v43 & 1) == 0) {
              goto LABEL_36;
            }
            goto LABEL_24;
          }
          sub_100009A08((uint64_t)v17, &qword_100478990);
          sub_100009A08((uint64_t)v19, &qword_100478990);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v46, v30);
        }
        sub_100009A08((uint64_t)v10, &qword_100479598);
        goto LABEL_36;
      }
    }
  }
  return v21 & 1;
}

uint64_t sub_1002AFAFC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v72 = v4;
  uint64_t v73 = v5;
  __chkstk_darwin(v4);
  uint64_t v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100013A80(&qword_10047C9B0);
  __chkstk_darwin(v71);
  uint64_t v76 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100013A80(&qword_1004794B8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v75 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v77 = (uint64_t)&v66 - v12;
  __chkstk_darwin(v11);
  uint64_t v74 = (char *)&v66 - v13;
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100013A80(&qword_10047C9B8);
  __chkstk_darwin(v18);
  char v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100013A80(&qword_1004794C0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  char v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v66 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v66 - v28;
  if (*a1 == *a2 && a1[1] == a2[1]
    || (char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(), LOBYTE(v31) = 0, (v30 & 1) != 0))
  {
    if ((sub_10029DAEC(a1[2], a2[2], type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem, (uint64_t (*)(char *, char *))sub_1002AF574, type metadata accessor for HostedRoutingItem) & 1) == 0|| (sub_10029DAEC(a1[3], a2[3], type metadata accessor for HostedRoutingItem, type metadata accessor for HostedRoutingItem, (uint64_t (*)(char *, char *))sub_1002AF574, type metadata accessor for HostedRoutingItem) & 1) == 0)
    {
      goto LABEL_32;
    }
    uint64_t v66 = v17;
    uint64_t v32 = v15;
    uint64_t v33 = type metadata accessor for HostedRoutingSession(0);
    uint64_t v34 = *(int *)(v33 + 28);
    uint64_t v67 = a1;
    sub_1001E71E8((uint64_t)a1 + v34, (uint64_t)v29, &qword_1004794C0);
    uint64_t v68 = a2;
    uint64_t v69 = (int *)v33;
    sub_1001E71E8((uint64_t)a2 + *(int *)(v33 + 28), (uint64_t)v27, &qword_1004794C0);
    uint64_t v35 = (uint64_t)&v20[*(int *)(v18 + 48)];
    sub_1001E71E8((uint64_t)v29, (uint64_t)v20, &qword_1004794C0);
    sub_1001E71E8((uint64_t)v27, v35, &qword_1004794C0);
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    if (v36((uint64_t)v20, 1, v14) == 1)
    {
      sub_100009A08((uint64_t)v27, &qword_1004794C0);
      sub_100009A08((uint64_t)v29, &qword_1004794C0);
      if (v36(v35, 1, v14) == 1)
      {
        sub_100009A08((uint64_t)v20, &qword_1004794C0);
LABEL_14:
        uint64_t v42 = v68;
        uint64_t v41 = v69;
        uint64_t v43 = v67;
        if ((static RoutingControls.== infix(_:_:)() & 1) == 0
          || (sub_1001EE450(*(void **)((char *)v43 + v41[9]), *(void **)((char *)v42 + v41[9])) & 1) == 0
          || (sub_1001EE450(*(void **)((char *)v43 + v41[10]), *(void **)((char *)v42 + v41[10])) & 1) == 0)
        {
          goto LABEL_32;
        }
        uint64_t v44 = v41[11];
        uint64_t v45 = (void *)((char *)v43 + v44);
        uint64_t v46 = *(void *)((char *)v43 + v44 + 8);
        uint64_t v47 = (void *)((char *)v42 + v44);
        uint64_t v48 = v47[1];
        if (v46)
        {
          if (!v48) {
            goto LABEL_32;
          }
          if (*v45 != *v47 || v46 != v48)
          {
            char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
            LOBYTE(v31) = 0;
            if ((v49 & 1) == 0) {
              return v31 & 1;
            }
          }
        }
        else if (v48)
        {
          goto LABEL_32;
        }
        uint64_t v50 = v41[12];
        uint64_t v51 = (float *)((char *)v43 + v50);
        char v52 = *((unsigned char *)v43 + v50 + 4);
        char v53 = (float *)((char *)v42 + v50);
        int v31 = *((unsigned __int8 *)v42 + v50 + 4);
        if (v52)
        {
          uint64_t v55 = (uint64_t)v75;
          uint64_t v54 = (uint64_t)v76;
          uint64_t v56 = (uint64_t)v74;
          uint64_t v57 = v77;
          if (!v31) {
            return v31 & 1;
          }
        }
        else
        {
          if (*v51 != *v53) {
            LOBYTE(v31) = 1;
          }
          uint64_t v55 = (uint64_t)v75;
          uint64_t v54 = (uint64_t)v76;
          uint64_t v56 = (uint64_t)v74;
          uint64_t v57 = v77;
          if (v31) {
            goto LABEL_32;
          }
        }
        if ((static Date.== infix(_:_:)() & 1) == 0
          || *((unsigned __int8 *)v43 + v41[14]) != *((unsigned __int8 *)v42 + v41[14]))
        {
LABEL_32:
          LOBYTE(v31) = 0;
          return v31 & 1;
        }
        sub_1001E71E8((uint64_t)v43 + v41[15], v56, &qword_1004794B8);
        sub_1001E71E8((uint64_t)v42 + v41[15], v57, &qword_1004794B8);
        uint64_t v59 = v54 + *(int *)(v71 + 48);
        sub_1001E71E8(v56, v54, &qword_1004794B8);
        sub_1001E71E8(v57, v59, &qword_1004794B8);
        uint64_t v60 = v72;
        uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
        if (v61(v54, 1, v72) == 1)
        {
          sub_100009A08(v57, &qword_1004794B8);
          sub_100009A08(v56, &qword_1004794B8);
          if (v61(v59, 1, v60) == 1)
          {
            sub_100009A08(v54, &qword_1004794B8);
            goto LABEL_41;
          }
        }
        else
        {
          sub_1001E71E8(v54, v55, &qword_1004794B8);
          if (v61(v59, 1, v60) != 1)
          {
            uint64_t v62 = v73;
            uint64_t v63 = v70;
            (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v70, v59, v60);
            sub_1002B0684(&qword_10047C9C0, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
            char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v65 = *(void (**)(char *, uint64_t))(v62 + 8);
            v65(v63, v60);
            sub_100009A08(v77, &qword_1004794B8);
            sub_100009A08(v56, &qword_1004794B8);
            v65((char *)v55, v60);
            sub_100009A08(v54, &qword_1004794B8);
            if ((v64 & 1) == 0) {
              goto LABEL_32;
            }
LABEL_41:
            LOBYTE(v31) = *((unsigned char *)v43 + v69[16]) ^ *((unsigned char *)v42 + v69[16]) ^ 1;
            return v31 & 1;
          }
          sub_100009A08(v57, &qword_1004794B8);
          sub_100009A08(v56, &qword_1004794B8);
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v55, v60);
        }
        uint64_t v37 = &qword_10047C9B0;
        uint64_t v38 = v54;
LABEL_12:
        sub_100009A08(v38, v37);
        goto LABEL_32;
      }
    }
    else
    {
      sub_1001E71E8((uint64_t)v20, (uint64_t)v24, &qword_1004794C0);
      if (v36(v35, 1, v14) != 1)
      {
        uint64_t v39 = (uint64_t)v66;
        sub_1002B0734(v35, (uint64_t)v66, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        char v40 = sub_1002AF3A0((uint64_t)v24, v39);
        sub_1002B0524(v39, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        sub_100009A08((uint64_t)v27, &qword_1004794C0);
        sub_100009A08((uint64_t)v29, &qword_1004794C0);
        sub_1002B0524((uint64_t)v24, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        sub_100009A08((uint64_t)v20, &qword_1004794C0);
        if ((v40 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_14;
      }
      sub_100009A08((uint64_t)v27, &qword_1004794C0);
      sub_100009A08((uint64_t)v29, &qword_1004794C0);
      sub_1002B0524((uint64_t)v24, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    }
    uint64_t v37 = &qword_10047C9B8;
    uint64_t v38 = (uint64_t)v20;
    goto LABEL_12;
  }
  return v31 & 1;
}

uint64_t sub_1002B0448(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1002B0480(char a1)
{
  if ((a1 & 2) == 0)
  {
    if (a1)
    {
      uint64_t v1 = 2;
      if ((a1 & 8) == 0) {
        return v1;
      }
    }
    else
    {
      uint64_t v1 = 0;
      if ((a1 & 8) == 0) {
        return v1;
      }
    }
    return v1 | 4;
  }
  if ((a1 & 1) == 0)
  {
    uint64_t v1 = 1;
    if ((a1 & 8) == 0) {
      return v1;
    }
    return v1 | 4;
  }
  uint64_t v1 = 3;
  if ((a1 & 8) != 0) {
    return v1 | 4;
  }
  return v1;
}

uint64_t type metadata accessor for HostedRoutingItem(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_100483980);
}

uint64_t type metadata accessor for HostedRoutingSession.NowPlayingInfo(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_1004839B0);
}

uint64_t type metadata accessor for HostedRoutingSourceSession(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_100483990);
}

uint64_t sub_1002B0524(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002B0584@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002A3098(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), *(void **)(v2 + 48), a2);
}

uint64_t sub_1002B05B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_10047C4A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B0620(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100013A80(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002B0684(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B06CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002B0734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for HostedRoutingSession(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_1004839A0);
}

uint64_t type metadata accessor for HostedRoutingSessionSnapshot(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_1004839C0);
}

unint64_t sub_1002B07E0()
{
  unint64_t result = qword_10047C568;
  if (!qword_10047C568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C568);
  }
  return result;
}

unint64_t sub_1002B0838()
{
  unint64_t result = qword_10047C570;
  if (!qword_10047C570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C570);
  }
  return result;
}

unint64_t sub_1002B0890()
{
  unint64_t result = qword_10047C578;
  if (!qword_10047C578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C578);
  }
  return result;
}

unint64_t sub_1002B08E8()
{
  unint64_t result = qword_10047C580;
  if (!qword_10047C580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C580);
  }
  return result;
}

unint64_t sub_1002B0940()
{
  unint64_t result = qword_10047C588;
  if (!qword_10047C588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C588);
  }
  return result;
}

unint64_t sub_1002B099C()
{
  unint64_t result = qword_10047C590;
  if (!qword_10047C590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C590);
  }
  return result;
}

unint64_t sub_1002B09F4()
{
  unint64_t result = qword_10047C598;
  if (!qword_10047C598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C598);
  }
  return result;
}

unint64_t sub_1002B0A4C()
{
  unint64_t result = qword_10047C5A0;
  if (!qword_10047C5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C5A0);
  }
  return result;
}

unint64_t sub_1002B0AA8()
{
  unint64_t result = qword_10047C5A8;
  if (!qword_10047C5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C5A8);
  }
  return result;
}

unint64_t sub_1002B0B00()
{
  unint64_t result = qword_10047C5B0;
  if (!qword_10047C5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C5B0);
  }
  return result;
}

uint64_t sub_1002B0B54()
{
  return sub_1002B0684(&qword_100478DA0, (void (*)(uint64_t))type metadata accessor for HostedRoutingItem);
}

unint64_t sub_1002B0BA0()
{
  unint64_t result = qword_10047C5B8;
  if (!qword_10047C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C5B8);
  }
  return result;
}

uint64_t sub_1002B0BF4()
{
  return sub_1002B0684(&qword_10047C5C0, (void (*)(uint64_t))type metadata accessor for HostedRoutingSourceSession);
}

unint64_t sub_1002B0C40()
{
  unint64_t result = qword_10047C5C8;
  if (!qword_10047C5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10047C5C8);
  }
  return result;
}

uint64_t sub_1002B0C94()
{
  return sub_1002B0684(&qword_10047C5D0, (void (*)(uint64_t))type metadata accessor for HostedRoutingSession.NowPlayingInfo);
}

uint64_t sub_1002B0CDC()
{
  return sub_1002B0684(&qword_100479540, (void (*)(uint64_t))type metadata accessor for HostedRoutingSession);
}

uint64_t sub_1002B0D24()
{
  return sub_1002B0684(&qword_100479508, (void (*)(uint64_t))type metadata accessor for HostedRoutingSessionSnapshot);
}

uint64_t *sub_1002B0D6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100013A80(&qword_100478F00);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v32 = v8;
      uint64_t v33 = v7;
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      uint64_t v12 = a2[5];
      a1[4] = a2[4];
      a1[5] = v12;
      uint64_t v13 = a2[7];
      a1[6] = a2[6];
      a1[7] = v13;
      uint64_t v14 = (int *)type metadata accessor for HostedRoutingItem(0);
      uint64_t v15 = v14[8];
      __dst = (char *)a1 + v15;
      uint64_t v16 = (char *)a2 + v15;
      uint64_t v17 = type metadata accessor for RoutingItem.SelectionIndicator();
      uint64_t v18 = *(void *)(v17 - 8);
      int v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v31(v16, 1, v17))
      {
        uint64_t v19 = sub_100013A80(&qword_100478990);
        memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      *((unsigned char *)a1 + v14[9]) = *((unsigned char *)a2 + v14[9]);
      *((unsigned char *)a1 + v14[10]) = *((unsigned char *)a2 + v14[10]);
      *((unsigned char *)a1 + v14[11]) = *((unsigned char *)a2 + v14[11]);
      uint64_t v20 = v14[12];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
      v21[4] = v22[4];
      *((unsigned char *)a1 + v14[13]) = *((unsigned char *)a2 + v14[13]);
      uint64_t v23 = v14[14];
      char v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *((void *)v25 + 1);
      unsigned __int16 v28 = *((_WORD *)v25 + 8);
      sub_1001B9E5C(*(void *)v25, v27, v28);
      *(void *)char v24 = v26;
      *((void *)v24 + 1) = v27;
      *((_WORD *)v24 + 8) = v28;
      *((unsigned char *)a1 + v14[15]) = *((unsigned char *)a2 + v14[15]);
      *((unsigned char *)a1 + v14[16]) = *((unsigned char *)a2 + v14[16]);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v32 + 56))(a1, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t sub_1002B1080(uint64_t a1)
{
  uint64_t v2 = sub_100013A80(&qword_100478F00);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for HostedRoutingItem(0);
    uint64_t v5 = a1 + *(int *)(v4 + 32);
    uint64_t v6 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    }
    uint64_t v8 = a1 + *(int *)(v4 + 56);
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    unsigned int v11 = *(unsigned __int16 *)(v8 + 16);
    return sub_1001B9958(v9, v10, v11);
  }
  return result;
}

void *sub_1002B11D0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478F00);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v7;
    uint64_t v31 = v6;
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    uint64_t v11 = a2[7];
    a1[6] = a2[6];
    a1[7] = v11;
    uint64_t v12 = (int *)type metadata accessor for HostedRoutingItem(0);
    uint64_t v13 = v12[8];
    __dst = (char *)a1 + v13;
    uint64_t v14 = (char *)a2 + v13;
    uint64_t v15 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v16 = *(void *)(v15 - 8);
    unsigned __int16 v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v14, 1, v15))
    {
      uint64_t v17 = sub_100013A80(&qword_100478990);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *((unsigned char *)a1 + v12[9]) = *((unsigned char *)a2 + v12[9]);
    *((unsigned char *)a1 + v12[10]) = *((unsigned char *)a2 + v12[10]);
    *((unsigned char *)a1 + v12[11]) = *((unsigned char *)a2 + v12[11]);
    uint64_t v18 = v12[12];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    *((unsigned char *)a1 + v12[13]) = *((unsigned char *)a2 + v12[13]);
    uint64_t v21 = v12[14];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *((void *)v23 + 1);
    unsigned __int16 v26 = *((_WORD *)v23 + 8);
    sub_1001B9E5C(*(void *)v23, v25, v26);
    *(void *)uint64_t v22 = v24;
    *((void *)v22 + 1) = v25;
    *((_WORD *)v22 + 8) = v26;
    *((unsigned char *)a1 + v12[15]) = *((unsigned char *)a2 + v12[15]);
    *((unsigned char *)a1 + v12[16]) = *((unsigned char *)a2 + v12[16]);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v31);
  }
  return a1;
}

void *sub_1002B14A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478F00);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_100009A08((uint64_t)a1, &qword_100478F00);
      goto LABEL_7;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[6] = a2[6];
    a1[7] = a2[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v16 = (int *)type metadata accessor for HostedRoutingItem(0);
    uint64_t v17 = v16[8];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    int v23 = v22(v18, 1, v20);
    int v24 = v22(v19, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_16:
        *((unsigned char *)a1 + v16[9]) = *((unsigned char *)a2 + v16[9]);
        *((unsigned char *)a1 + v16[10]) = *((unsigned char *)a2 + v16[10]);
        *((unsigned char *)a1 + v16[11]) = *((unsigned char *)a2 + v16[11]);
        uint64_t v36 = v16[12];
        uint64_t v37 = (char *)a1 + v36;
        uint64_t v38 = (char *)a2 + v36;
        int v39 = *(_DWORD *)v38;
        uint64_t v37[4] = v38[4];
        *(_DWORD *)uint64_t v37 = v39;
        *((unsigned char *)a1 + v16[13]) = *((unsigned char *)a2 + v16[13]);
        uint64_t v40 = v16[14];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        uint64_t v43 = *(void *)v42;
        uint64_t v44 = *((void *)v42 + 1);
        unsigned __int16 v45 = *((_WORD *)v42 + 8);
        sub_1001B9E5C(*(void *)v42, v44, v45);
        uint64_t v46 = *(void *)v41;
        uint64_t v47 = *((void *)v41 + 1);
        *(void *)uint64_t v41 = v43;
        *((void *)v41 + 1) = v44;
        unsigned int v48 = *((unsigned __int16 *)v41 + 8);
        *((_WORD *)v41 + 8) = v45;
        sub_1001B9958(v46, v47, v48);
        *((unsigned char *)a1 + v16[15]) = *((unsigned char *)a2 + v16[15]);
        *((unsigned char *)a1 + v16[16]) = *((unsigned char *)a2 + v16[16]);
        return a1;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    }
    uint64_t v35 = sub_100013A80(&qword_100478990);
    memcpy(v18, v19, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v53 = v7;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  uint64_t v11 = (int *)type metadata accessor for HostedRoutingItem(0);
  uint64_t v12 = v11[8];
  __dst = (char *)a1 + v12;
  uint64_t v13 = (char *)a2 + v12;
  uint64_t v14 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v50 = *(void *)(v14 - 8);
  uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v51(v13, 1, v14))
  {
    uint64_t v15 = sub_100013A80(&qword_100478990);
    memcpy(__dst, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(__dst, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v14);
  }
  *((unsigned char *)a1 + v11[9]) = *((unsigned char *)a2 + v11[9]);
  *((unsigned char *)a1 + v11[10]) = *((unsigned char *)a2 + v11[10]);
  *((unsigned char *)a1 + v11[11]) = *((unsigned char *)a2 + v11[11]);
  uint64_t v25 = v11[12];
  unsigned __int16 v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  int v28 = *(_DWORD *)v27;
  v26[4] = v27[4];
  *(_DWORD *)unsigned __int16 v26 = v28;
  *((unsigned char *)a1 + v11[13]) = *((unsigned char *)a2 + v11[13]);
  uint64_t v29 = v11[14];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = *(void *)v31;
  uint64_t v33 = *((void *)v31 + 1);
  unsigned __int16 v34 = *((_WORD *)v31 + 8);
  sub_1001B9E5C(*(void *)v31, v33, v34);
  *(void *)uint64_t v30 = v32;
  *((void *)v30 + 1) = v33;
  *((_WORD *)v30 + 8) = v34;
  *((unsigned char *)a1 + v11[15]) = *((unsigned char *)a2 + v11[15]);
  *((unsigned char *)a1 + v11[16]) = *((unsigned char *)a2 + v11[16]);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(a1, 0, 1, v6);
  return a1;
}

_OWORD *sub_1002B1A38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478F00);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    long long v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    int v10 = (int *)type metadata accessor for HostedRoutingItem(0);
    uint64_t v11 = v10[8];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100013A80(&qword_100478990);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    *((unsigned char *)a1 + v10[9]) = *((unsigned char *)a2 + v10[9]);
    *((unsigned char *)a1 + v10[10]) = *((unsigned char *)a2 + v10[10]);
    *((unsigned char *)a1 + v10[11]) = *((unsigned char *)a2 + v10[11]);
    uint64_t v17 = v10[12];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    *((unsigned char *)a1 + v10[13]) = *((unsigned char *)a2 + v10[13]);
    uint64_t v20 = v10[14];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    *((_WORD *)v21 + 8) = *((_WORD *)v22 + 8);
    *((unsigned char *)a1 + v10[15]) = *((unsigned char *)a2 + v10[15]);
    *((unsigned char *)a1 + v10[16]) = *((unsigned char *)a2 + v10[16]);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1002B1CB0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100013A80(&qword_100478F00);
  uint64_t v7 = *(void *)(v6 - 8);
  long long v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_100009A08((uint64_t)a1, &qword_100478F00);
      goto LABEL_7;
    }
    uint64_t v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = a2[3];
    a1[2] = a2[2];
    a1[3] = v21;
    swift_bridgeObjectRelease();
    uint64_t v22 = a2[5];
    a1[4] = a2[4];
    a1[5] = v22;
    swift_bridgeObjectRelease();
    uint64_t v23 = a2[7];
    a1[6] = a2[6];
    a1[7] = v23;
    swift_bridgeObjectRelease();
    int v24 = (int *)type metadata accessor for HostedRoutingItem(0);
    uint64_t v25 = v24[8];
    unsigned __int16 v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
    int v31 = v30(v26, 1, v28);
    int v32 = v30(v27, 1, v28);
    if (v31)
    {
      if (!v32)
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_16:
        *((unsigned char *)a1 + v24[9]) = *((unsigned char *)a2 + v24[9]);
        *((unsigned char *)a1 + v24[10]) = *((unsigned char *)a2 + v24[10]);
        *((unsigned char *)a1 + v24[11]) = *((unsigned char *)a2 + v24[11]);
        uint64_t v40 = v24[12];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        *(_DWORD *)uint64_t v41 = *(_DWORD *)v42;
        v41[4] = v42[4];
        *((unsigned char *)a1 + v24[13]) = *((unsigned char *)a2 + v24[13]);
        uint64_t v43 = v24[14];
        uint64_t v44 = (char *)a1 + v43;
        unsigned __int16 v45 = (char *)a2 + v43;
        __int16 v46 = *((_WORD *)v45 + 8);
        uint64_t v47 = *(void *)v44;
        uint64_t v48 = *((void *)v44 + 1);
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
        unsigned int v49 = *((unsigned __int16 *)v44 + 8);
        *((_WORD *)v44 + 8) = v46;
        sub_1001B9958(v47, v48, v49);
        *((unsigned char *)a1 + v24[15]) = *((unsigned char *)a2 + v24[15]);
        *((unsigned char *)a1 + v24[16]) = *((unsigned char *)a2 + v24[16]);
        return a1;
      }
    }
    else
    {
      if (!v32)
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
    }
    uint64_t v39 = sub_100013A80(&qword_100478990);
    memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  long long v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  long long v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v12;
  uint64_t v13 = (int *)type metadata accessor for HostedRoutingItem(0);
  uint64_t v14 = v13[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100013A80(&qword_100478990);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *((unsigned char *)a1 + v13[9]) = *((unsigned char *)a2 + v13[9]);
  *((unsigned char *)a1 + v13[10]) = *((unsigned char *)a2 + v13[10]);
  *((unsigned char *)a1 + v13[11]) = *((unsigned char *)a2 + v13[11]);
  uint64_t v33 = v13[12];
  unsigned __int16 v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  *(_DWORD *)unsigned __int16 v34 = *(_DWORD *)v35;
  v34[4] = v35[4];
  *((unsigned char *)a1 + v13[13]) = *((unsigned char *)a2 + v13[13]);
  uint64_t v36 = v13[14];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *((_WORD *)v37 + 8) = *((_WORD *)v38 + 8);
  *((unsigned char *)a1 + v13[15]) = *((unsigned char *)a2 + v13[15]);
  *((unsigned char *)a1 + v13[16]) = *((unsigned char *)a2 + v13[16]);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1002B216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B2180);
}

uint64_t sub_1002B2180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_100478F00);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002B21F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B2204);
}

uint64_t sub_1002B2204(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100013A80(&qword_100478F00);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1002B2288(uint64_t a1)
{
  uint64_t v2 = sub_100013A80(&qword_100478F00);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_1002B22F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100013A80(&qword_100478F00);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata accessor for HostedRoutingError(uint64_t a1)
{
  return sub_1001BA264(a1, (uint64_t *)&unk_100483970);
}

uint64_t sub_1002B2388()
{
  uint64_t result = type metadata accessor for HostedRoutingItem(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RouteType(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1002B26D0(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1001B9E5C);
}

uint64_t destroy for RouteType(uint64_t a1)
{
  return sub_1001B9958(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
}

uint64_t *assignWithCopy for RouteType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1002B274C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1001B9E5C, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001B9958);
}

__n128 initializeWithTake for DeviceType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for RouteType(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B27D0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001B9958);
}

uint64_t getEnumTagSinglePayload for RouteType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1FA && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 506);
  }
  unsigned int v3 = ((((*(unsigned __int16 *)(a1 + 16) >> 2) & 0x180 | (*(_WORD *)(a1 + 16) >> 1)) >> 6) & 0xFFFFFE07 | (8 * ((*(unsigned __int16 *)(a1 + 16) >> 1) & 0x3F))) ^ 0x1FF;
  if (v3 >= 0x1F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RouteType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1F9)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 506;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FA) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(_WORD *)(result + 16) = (((-a2 & 0x1F8) >> 2) - ((_BYTE)a2 << 7)) & 0xFE | (((-a2 >> 1) & 3) << 9);
    }
  }
  return result;
}

uint64_t sub_1002B2540(uint64_t a1)
{
  unsigned int v1 = HIBYTE(*(unsigned __int16 *)(a1 + 16)) & 6 | (*(unsigned __int16 *)(a1 + 16) >> 7) & 1;
  if (v1 <= 5) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_1002B2564(uint64_t result)
{
  *(_WORD *)(result + 16) &= 0xF97Fu;
  return result;
}

uint64_t sub_1002B2578(uint64_t result, unsigned int a2)
{
  if (a2 < 6)
  {
    *(_WORD *)(result + 16) = ((_WORD)a2 << 8) & 0x600 | ((a2 & 1) << 7) | *(_WORD *)(result + 16) & 0xF901;
  }
  else
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1536;
  }
  return result;
}

ValueMetadata *type metadata accessor for RouteType()
{
  return &type metadata for RouteType;
}

unsigned char *storeEnumTagSinglePayload for ConceptualRouteType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002B2660);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConceptualRouteType()
{
  return &type metadata for ConceptualRouteType;
}

ValueMetadata *type metadata accessor for DeviceModels()
{
  return &type metadata for DeviceModels;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceType(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1002B26D0(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1001B9EBC);
}

uint64_t destroy for DeviceType(uint64_t a1)
{
  return sub_1001B99B8(*(void *)a1, *(void *)(a1 + 8), *(_WORD *)(a1 + 16));
}

uint64_t sub_1002B26D0(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int16 *)a2 + 8);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for DeviceType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_1002B274C(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))sub_1001B9EBC, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001B99B8);
}

uint64_t *sub_1002B274C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int16 *)a2 + 8);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int16 *)a1 + 8);
  *((_WORD *)a1 + 8) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for DeviceType(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002B27D0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001B99B8);
}

uint64_t *sub_1002B27D0(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  __int16 v5 = *(_WORD *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int16 *)a1 + 8);
  *((_WORD *)a1 + 8) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FEF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 16367);
  }
  unsigned int v3 = ((*(unsigned __int16 *)(a1 + 16) >> 11) | (32
                                                * ((*(unsigned __int16 *)(a1 + 16) >> 2) & 0x180 | (*(_WORD *)(a1 + 16) >> 1)))) ^ 0x3FFF;
  if (v3 >= 0x3FEE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DeviceType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FEE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 16367;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FEF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FEF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 5) & 0x1FF) - (a2 << 9);
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(_WORD *)(result + 16) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_1002B28F0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 16) >> 11;
  if (v1 <= 0x10) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 17);
  }
}

uint64_t sub_1002B290C(uint64_t result)
{
  *(_WORD *)(result + 16) &= 0x7FFu;
  return result;
}

uint64_t sub_1002B291C(uint64_t result, unsigned int a2)
{
  if (a2 < 0x11)
  {
    *(_WORD *)(result + 16) = *(_WORD *)(result + 16) & 0x101 | ((_WORD)a2 << 11);
  }
  else
  {
    *(void *)__n128 result = a2 - 17;
    *(void *)(result + 8) = 0;
    *(_WORD *)(result + 16) = -30720;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

uint64_t destroy for DeviceType.ClusterMember(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 32);

  return sub_1001B9958(v2, v3, v4);
}

uint64_t initializeWithCopy for DeviceType.ClusterMember(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unsigned int v6 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_1001B9E5C(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for DeviceType.ClusterMember(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  LODWORD(v2) = *((unsigned __int16 *)v2 + 16);
  sub_1001B9E5C(v4, v5, v2);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = (_WORD)v2;
  sub_1001B9958(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for DeviceType.ClusterMember(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DeviceType.ClusterMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  __int16 v5 = *(_WORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v5;
  sub_1001B9958(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceType.ClusterMember(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceType.ClusterMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType.ClusterMember()
{
  return &type metadata for DeviceType.ClusterMember;
}

ValueMetadata *type metadata accessor for RoutingCapabilities()
{
  return &type metadata for RoutingCapabilities;
}

ValueMetadata *type metadata accessor for VolumeCapabilities()
{
  return &type metadata for VolumeCapabilities;
}

void *sub_1002B2B90(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    uint64_t v11 = a3[8];
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v13 = type metadata accessor for RoutingItem.SelectionIndicator();
    uint64_t v27 = *(void *)(v13 - 8);
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v12, 1, v13))
    {
      uint64_t v14 = sub_100013A80(&qword_100478990);
      memcpy(__dst, v12, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v16 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v17 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = *(void *)((char *)a2 + v20);
    uint64_t v23 = *(void *)((char *)a2 + v20 + 8);
    unsigned __int16 v24 = *(_WORD *)((char *)a2 + v20 + 16);
    sub_1001B9E5C(v22, v23, v24);
    *(void *)uint64_t v21 = v22;
    *((void *)v21 + 1) = v23;
    *((_WORD *)v21 + 8) = v24;
    uint64_t v25 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *((unsigned char *)v4 + v25) = *((unsigned char *)a2 + v25);
  }
  return v4;
}

uint64_t sub_1002B2DE0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 56);
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  unsigned int v10 = *(unsigned __int16 *)(v7 + 16);

  return sub_1001B9958(v8, v9, v10);
}

void *sub_1002B2ED0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  uint64_t v10 = a3[8];
  __dst = (char *)a1 + v10;
  uint64_t v11 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v12 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v25 = *(void *)(v12 - 8);
  unsigned __int16 v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v11, 1, v12))
  {
    uint64_t v13 = sub_100013A80(&qword_100478990);
    memcpy(__dst, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v14 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = *(void *)((char *)a2 + v18);
  uint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  unsigned __int16 v22 = *(_WORD *)((char *)a2 + v18 + 16);
  sub_1001B9E5C(v20, v21, v22);
  *(void *)uint64_t v19 = v20;
  *((void *)v19 + 1) = v21;
  *((_WORD *)v19 + 8) = v22;
  uint64_t v23 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + v23) = *((unsigned char *)a2 + v23);
  return a1;
}

void *sub_1002B30D0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100013A80(&qword_100478990);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v15 = a3[12];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  int v18 = *(_DWORD *)v17;
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = v18;
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *((void *)v21 + 1);
  unsigned __int16 v24 = *((_WORD *)v21 + 8);
  sub_1001B9E5C(*(void *)v21, v23, v24);
  uint64_t v25 = *(void *)v20;
  uint64_t v26 = *((void *)v20 + 1);
  *(void *)uint64_t v20 = v22;
  *((void *)v20 + 1) = v23;
  unsigned int v27 = *((unsigned __int16 *)v20 + 8);
  *((_WORD *)v20 + 8) = v24;
  sub_1001B9958(v25, v26, v27);
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  return a1;
}

_OWORD *sub_1002B336C(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100013A80(&qword_100478990);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v15 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *((_WORD *)v19 + 8) = *((_WORD *)v20 + 8);
  uint64_t v21 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
  return a1;
}

void *sub_1002B3508(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for RoutingItem.SelectionIndicator();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100013A80(&qword_100478990);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  uint64_t v20 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  uint64_t v23 = a3[13];
  uint64_t v24 = a3[14];
  char v25 = *((unsigned char *)a2 + v23);
  v21[4] = v22[4];
  *((unsigned char *)a1 + v23) = v25;
  uint64_t v26 = (char *)a1 + v24;
  LOWORD(v23) = *(_WORD *)((char *)a2 + v24 + 16);
  uint64_t v27 = *(void *)((char *)a1 + v24);
  uint64_t v28 = *(void *)((char *)a1 + v24 + 8);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)((char *)a2 + v24);
  unsigned int v29 = *(unsigned __int16 *)((char *)a1 + v24 + 16);
  *((_WORD *)v26 + 8) = v23;
  sub_1001B9958(v27, v28, v29);
  uint64_t v30 = a3[16];
  *((unsigned char *)a1 + a3[15]) = *((unsigned char *)a2 + a3[15]);
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  return a1;
}

uint64_t sub_1002B3744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B3758);
}

uint64_t sub_1002B3758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100013A80(&qword_100478990);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1002B380C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B3820);
}

uint64_t sub_1002B3820(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100013A80(&qword_100478990);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1002B38CC()
{
  sub_1002B5938(319, (unint64_t *)&unk_10047C6A0, (void (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_1002B39C0(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[7];
    __dst = (void *)((char *)a1 + v9);
    uint64_t v10 = (unsigned __int8 *)a2 + v9;
    a1[4] = a2[4];
    uint64_t v11 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    uint64_t v53 = *(void *)(v11 - 8);
    uint64_t v12 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v10, 1, v11))
    {
      uint64_t v13 = sub_100013A80(&qword_1004794C0);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = *((void *)v10 + 1);
      void *__dst = *(void *)v10;
      __dst[1] = v15;
      uint64_t v16 = *((void *)v10 + 3);
      __dst[2] = *((void *)v10 + 2);
      __dst[3] = v16;
      uint64_t v17 = *((void *)v10 + 4);
      uint64_t v18 = *((unsigned int *)v10 + 10);
      unsigned __int8 v19 = v10[44];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001E70B8(v17, v18, v19);
      __dst[4] = v17;
      *((_DWORD *)__dst + 10) = v18;
      *((unsigned char *)__dst + 44) = v19;
      uint64_t v20 = *((void *)v10 + 7);
      __dst[6] = *((void *)v10 + 6);
      __dst[7] = v20;
      uint64_t v21 = *(int *)(v11 + 36);
      uint64_t v51 = &v10[v21];
      char v52 = (char *)__dst + v21;
      uint64_t v22 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      uint64_t v23 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v23(v52, v51, v22);
      uint64_t v24 = *(int *)(v11 + 40);
      char v25 = (char *)__dst + v24;
      uint64_t v26 = &v10[v24];
      uint64_t v27 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v28 = a3[8];
    unsigned int v29 = (char *)v4 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = type metadata accessor for RoutingControls();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    uint64_t v32 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v32) = *(void *)((char *)a2 + v32);
    uint64_t v33 = a3[11];
    uint64_t v34 = a3[12];
    uint64_t v35 = (void *)((char *)v4 + v33);
    uint64_t v36 = (void *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (char *)v4 + v34;
    uint64_t v39 = (char *)a2 + v34;
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    uint64_t v40 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    __dsta = (char *)v4 + v40;
    uint64_t v41 = (char *)a2 + v40;
    uint64_t v42 = type metadata accessor for RoutingSession.HostInfo();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44(v41, 1, v42))
    {
      uint64_t v45 = sub_100013A80(&qword_1004794B8);
      memcpy(__dsta, v41, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(__dsta, v41, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dsta, 0, 1, v42);
    }
    uint64_t v46 = a3[15];
    uint64_t v47 = (char *)v4 + v46;
    uint64_t v48 = (char *)a2 + v46;
    uint64_t v49 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
  }
  return v4;
}

uint64_t sub_1002B3E2C(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001DDF44(*(void *)(v4 + 32), *(unsigned int *)(v4 + 40), *(unsigned char *)(v4 + 44));
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 36);
    uint64_t v7 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = v4 + *(int *)(v5 + 40);
    uint64_t v9 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for RoutingControls();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[14];
  uint64_t v13 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v15 = a1 + a2[15];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);

  return v17(v15, v16);
}

void *sub_1002B40A4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = a3[7];
  __dst = (void *)((char *)a1 + v8);
  uint64_t v9 = (unsigned __int8 *)a2 + v8;
  uint64_t v10 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v51 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v9, 1, v10))
  {
    uint64_t v12 = sub_100013A80(&qword_1004794C0);
    memcpy(__dst, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = *((void *)v9 + 1);
    void *__dst = *(void *)v9;
    __dst[1] = v13;
    uint64_t v14 = *((void *)v9 + 3);
    __dst[2] = *((void *)v9 + 2);
    __dst[3] = v14;
    uint64_t v15 = *((void *)v9 + 4);
    uint64_t v16 = *((unsigned int *)v9 + 10);
    unsigned __int8 v17 = v9[44];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001E70B8(v15, v16, v17);
    __dst[4] = v15;
    *((_DWORD *)__dst + 10) = v16;
    *((unsigned char *)__dst + 44) = v17;
    uint64_t v18 = *((void *)v9 + 7);
    __dst[6] = *((void *)v9 + 6);
    __dst[7] = v18;
    uint64_t v19 = *(int *)(v10 + 36);
    uint64_t v49 = &v9[v19];
    uint64_t v50 = (char *)__dst + v19;
    uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v21 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v20 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v21(v50, v49, v20);
    uint64_t v22 = *(int *)(v10 + 40);
    uint64_t v23 = (char *)__dst + v22;
    uint64_t v24 = &v9[v22];
    uint64_t v25 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v30) = *(void *)((char *)a2 + v30);
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)((char *)a1 + v31);
  uint64_t v34 = (void *)((char *)a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (char *)a1 + v32;
  uint64_t v37 = (char *)a2 + v32;
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  v36[4] = v37[4];
  uint64_t v38 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  char v52 = (char *)a1 + v38;
  __dsta = a3;
  uint64_t v39 = (char *)a2 + v38;
  uint64_t v40 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42(v39, 1, v40))
  {
    uint64_t v43 = sub_100013A80(&qword_1004794B8);
    memcpy(v52, v39, *(void *)(*(void *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v52, v39, v40);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v52, 0, 1, v40);
  }
  uint64_t v44 = __dsta[15];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  return a1;
}

void *sub_1002B44BC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *(void *)(v7 + 8) = *((void *)v8 + 1);
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(void *)(v7 + 24) = *((void *)v8 + 3);
      uint64_t v64 = *((void *)v8 + 4);
      uint64_t v14 = *((unsigned int *)v8 + 10);
      unsigned __int8 v15 = v8[44];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001E70B8(v64, v14, v15);
      *(void *)(v7 + 32) = v64;
      *(_DWORD *)(v7 + 40) = v14;
      *(unsigned char *)(v7 + 44) = v15;
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      uint64_t v16 = *(int *)(v9 + 36);
      uint64_t v63 = &v8[v16];
      uint64_t v65 = v7 + v16;
      uint64_t v17 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v62(v65, v63, v17);
      uint64_t v18 = *(int *)(v9 + 40);
      uint64_t v19 = v7 + v18;
      uint64_t v20 = &v8[v18];
      uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1002B0524(v7, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_6:
    uint64_t v22 = sub_100013A80(&qword_1004794C0);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *((void *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(void *)(v7 + 24) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = *((void *)v8 + 4);
  unsigned int v49 = *((_DWORD *)v8 + 10);
  unsigned __int8 v50 = v8[44];
  sub_1001E70B8(v48, v49, v50);
  uint64_t v51 = *(void *)(v7 + 32);
  uint64_t v52 = *(unsigned int *)(v7 + 40);
  *(void *)(v7 + 32) = v48;
  *(_DWORD *)(v7 + 40) = v49;
  unsigned __int8 v53 = *(unsigned char *)(v7 + 44);
  *(unsigned char *)(v7 + 44) = v50;
  sub_1001DDF44(v51, v52, v53);
  *(void *)(v7 + 48) = *((void *)v8 + 6);
  swift_retain();
  swift_release();
  *(void *)(v7 + 56) = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(v9 + 36);
  uint64_t v55 = v7 + v54;
  uint64_t v56 = &v8[v54];
  uint64_t v57 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  uint64_t v58 = *(int *)(v9 + 40);
  uint64_t v59 = v7 + v58;
  uint64_t v60 = &v8[v58];
  uint64_t v61 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v61 - 8) + 24))(v59, v60, v61);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  int v33 = *(_DWORD *)v32;
  v31[4] = v32[4];
  *(_DWORD *)uint64_t v31 = v33;
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v34 = a3[14];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    uint64_t v42 = sub_100013A80(&qword_1004794B8);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
  uint64_t v43 = a3[15];
  uint64_t v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t sub_1002B4B00(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[7];
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100013A80(&qword_1004794C0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    long long v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    *((void *)v8 + 4) = *((void *)v9 + 4);
    *(void *)((char *)v8 + 37) = *(void *)((char *)v9 + 37);
    uint64_t v14 = *((void *)v9 + 7);
    *((void *)v8 + 6) = *((void *)v9 + 6);
    *((void *)v8 + 7) = v14;
    uint64_t v15 = *(int *)(v10 + 36);
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = (char *)v9 + v15;
    uint64_t v18 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    uint64_t v19 = *(int *)(v10 + 40);
    uint64_t v20 = (char *)v8 + v19;
    uint64_t v21 = (char *)v9 + v19;
    uint64_t v22 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for RoutingControls();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  uint64_t v27 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  uint64_t v28 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  *(unsigned char *)(v29 + 4) = *(unsigned char *)(v30 + 4);
  uint64_t v31 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v32 = (void *)(a1 + v31);
  int v33 = (const void *)(a2 + v31);
  uint64_t v34 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = sub_100013A80(&qword_1004794B8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = a3[15];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  uint64_t v40 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
  return a1;
}

void *sub_1002B4E6C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[7];
  uint64_t v9 = (uint64_t)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v12 = *(void *)(v11 - 8);
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13((uint64_t)v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      long long v16 = *((_OWORD *)v10 + 1);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)(v9 + 16) = v16;
      *(void *)(v9 + 32) = *((void *)v10 + 4);
      *(void *)(v9 + 37) = *(void *)(v10 + 37);
      uint64_t v17 = *((void *)v10 + 7);
      *(void *)(v9 + 48) = *((void *)v10 + 6);
      *(void *)(v9 + 56) = v17;
      uint64_t v18 = *(int *)(v11 + 36);
      uint64_t v19 = v9 + v18;
      uint64_t v20 = &v10[v18];
      uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
      uint64_t v22 = *(int *)(v11 + 40);
      uint64_t v23 = v9 + v22;
      uint64_t v24 = &v10[v22];
      uint64_t v25 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_1002B0524(v9, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_6:
    uint64_t v26 = sub_100013A80(&qword_1004794C0);
    memcpy((void *)v9, v10, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v55 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = v55;
  swift_bridgeObjectRelease();
  uint64_t v56 = *((void *)v10 + 3);
  *(void *)(v9 + 16) = *((void *)v10 + 2);
  *(void *)(v9 + 24) = v56;
  swift_bridgeObjectRelease();
  int v57 = *((_DWORD *)v10 + 10);
  char v58 = v10[44];
  uint64_t v59 = *(void *)(v9 + 32);
  uint64_t v60 = *(unsigned int *)(v9 + 40);
  *(void *)(v9 + 32) = *((void *)v10 + 4);
  *(_DWORD *)(v9 + 40) = v57;
  unsigned __int8 v61 = *(unsigned char *)(v9 + 44);
  *(unsigned char *)(v9 + 44) = v58;
  sub_1001DDF44(v59, v60, v61);
  *(void *)(v9 + 48) = *((void *)v10 + 6);
  swift_release();
  *(void *)(v9 + 56) = *((void *)v10 + 7);
  swift_bridgeObjectRelease();
  uint64_t v62 = *(int *)(v11 + 36);
  uint64_t v63 = v9 + v62;
  uint64_t v64 = &v10[v62];
  uint64_t v65 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v65 - 8) + 40))(v63, v64, v65);
  uint64_t v66 = *(int *)(v11 + 40);
  uint64_t v67 = v9 + v66;
  uint64_t v68 = &v10[v66];
  uint64_t v69 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v69 - 8) + 40))(v67, v68, v69);
LABEL_7:
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[11];
  uint64_t v32 = (void *)((char *)a1 + v31);
  int v33 = (void *)((char *)a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  *uint64_t v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[12];
  uint64_t v37 = a3[13];
  uint64_t v38 = (char *)a1 + v36;
  uint64_t v39 = (char *)a2 + v36;
  *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
  char v40 = *((unsigned char *)a2 + v37);
  v38[4] = v39[4];
  *((unsigned char *)a1 + v37) = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v42, 1, v44);
  int v48 = v46(v43, 1, v44);
  if (!v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v42, v43, v44);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
    goto LABEL_12;
  }
  if (v48)
  {
LABEL_12:
    uint64_t v49 = sub_100013A80(&qword_1004794B8);
    memcpy(v42, v43, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
LABEL_13:
  uint64_t v50 = a3[15];
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 40))(v51, v52, v53);
  return a1;
}

uint64_t sub_1002B53B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B53CC);
}

uint64_t sub_1002B53CC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100013A80(&qword_1004794C0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_11:
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for RoutingControls();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v13 = sub_100013A80(&qword_1004794B8);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[14];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for Date();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[15];

  return v16(v18, a2, v17);
}

uint64_t sub_1002B5598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B55AC);
}

uint64_t sub_1002B55AC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100013A80(&qword_1004794C0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_9:
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for RoutingControls();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v13 = sub_100013A80(&qword_1004794B8);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[14];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for Date();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[15];

  return v16(v18, a2, a2, v17);
}

void sub_1002B5778()
{
  sub_1002B5938(319, (unint64_t *)&qword_10047ACE0, (void (*)(uint64_t))type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RoutingControls();
    if (v1 <= 0x3F)
    {
      sub_1002B5938(319, (unint64_t *)&unk_10047C758, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_1002B5938(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for HostedRoutingSourceSession.Source(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HostedRoutingSourceSession.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1002B5A30(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1002B5A48(void *result, int a2)
{
  if (a2 < 0)
  {
    *__n128 result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HostedRoutingSourceSession.Source()
{
  return &type metadata for HostedRoutingSourceSession.Source;
}

ValueMetadata *type metadata accessor for RoutingSessionsState()
{
  return &type metadata for RoutingSessionsState;
}

void *sub_1002B5A88(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[7];
    __dst = (void *)((char *)a1 + v9);
    uint64_t v10 = (unsigned __int8 *)a2 + v9;
    uint64_t v11 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    uint64_t v53 = *(void *)(v11 - 8);
    uint64_t v12 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v10, 1, v11))
    {
      uint64_t v13 = sub_100013A80(&qword_1004794C0);
      memcpy(__dst, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = *((void *)v10 + 1);
      void *__dst = *(void *)v10;
      __dst[1] = v15;
      uint64_t v16 = *((void *)v10 + 3);
      __dst[2] = *((void *)v10 + 2);
      __dst[3] = v16;
      uint64_t v17 = *((void *)v10 + 4);
      uint64_t v18 = *((unsigned int *)v10 + 10);
      unsigned __int8 v19 = v10[44];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001E70B8(v17, v18, v19);
      __dst[4] = v17;
      *((_DWORD *)__dst + 10) = v18;
      *((unsigned char *)__dst + 44) = v19;
      uint64_t v20 = *((void *)v10 + 7);
      __dst[6] = *((void *)v10 + 6);
      __dst[7] = v20;
      uint64_t v21 = *(int *)(v11 + 36);
      uint64_t v51 = &v10[v21];
      uint64_t v52 = (char *)__dst + v21;
      uint64_t v22 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      uint64_t v23 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v23(v52, v51, v22);
      uint64_t v24 = *(int *)(v11 + 40);
      uint64_t v25 = (char *)__dst + v24;
      uint64_t v26 = &v10[v24];
      uint64_t v27 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v28 = a3[8];
    uint64_t v29 = (char *)v4 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = type metadata accessor for RoutingControls();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
    uint64_t v32 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    *(void *)((char *)v4 + v32) = *(void *)((char *)a2 + v32);
    uint64_t v33 = a3[11];
    uint64_t v34 = a3[12];
    uint64_t v35 = (void *)((char *)v4 + v33);
    uint64_t v36 = (void *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (char *)v4 + v34;
    uint64_t v39 = (char *)a2 + v34;
    v38[4] = v39[4];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    uint64_t v40 = a3[13];
    __dsta = (char *)v4 + v40;
    uint64_t v41 = (char *)a2 + v40;
    uint64_t v42 = type metadata accessor for Date();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(__dsta, v41, v42);
    uint64_t v44 = a3[15];
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    uint64_t v45 = (char *)v4 + v44;
    uint64_t v46 = (char *)a2 + v44;
    uint64_t v47 = type metadata accessor for RoutingSession.HostInfo();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = sub_100013A80(&qword_1004794B8);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  }
  return v4;
}

uint64_t sub_1002B5EF0(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001DDF44(*(void *)(v4 + 32), *(unsigned int *)(v4 + 40), *(unsigned char *)(v4 + 44));
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(v5 + 36);
    uint64_t v7 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = v4 + *(int *)(v5 + 40);
    uint64_t v9 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for RoutingControls();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[13];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  uint64_t v14 = a1 + a2[15];
  uint64_t v15 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v18 = *(void *)(v15 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
    return v17(v14, v15);
  }
  return result;
}

void *sub_1002B618C(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (unsigned __int8 *)a2 + v7;
  uint64_t v10 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v51 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v9, 1, v10))
  {
    uint64_t v12 = sub_100013A80(&qword_1004794C0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = *((void *)v9 + 1);
    *uint64_t v8 = *(void *)v9;
    v8[1] = v13;
    uint64_t v14 = *((void *)v9 + 3);
    long long v8[2] = *((void *)v9 + 2);
    v8[3] = v14;
    uint64_t v15 = *((void *)v9 + 4);
    uint64_t v16 = *((unsigned int *)v9 + 10);
    unsigned __int8 v17 = v9[44];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001E70B8(v15, v16, v17);
    v8[4] = v15;
    *((_DWORD *)v8 + 10) = v16;
    *((unsigned char *)v8 + 44) = v17;
    uint64_t v18 = *((void *)v9 + 7);
    v8[6] = *((void *)v9 + 6);
    v8[7] = v18;
    uint64_t v19 = *(int *)(v10 + 36);
    uint64_t v49 = &v9[v19];
    uint64_t v50 = (char *)v8 + v19;
    uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v21 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v20 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v21(v50, v49, v20);
    uint64_t v22 = *(int *)(v10 + 40);
    uint64_t v23 = (char *)v8 + v22;
    uint64_t v24 = &v9[v22];
    uint64_t v25 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v8, 0, 1, v10);
  }
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v30) = *(void *)((char *)a2 + v30);
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)((char *)a1 + v31);
  uint64_t v34 = (void *)((char *)a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  uint64_t v36 = (char *)a1 + v32;
  uint64_t v37 = (char *)a2 + v32;
  v36[4] = v37[4];
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  uint64_t v38 = a3[13];
  uint64_t v52 = (char *)a1 + v38;
  uint64_t v39 = (char *)a2 + v38;
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v41(v52, v39, v40);
  uint64_t v42 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    uint64_t v47 = sub_100013A80(&qword_1004794B8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  return a1;
}

void *sub_1002B65A0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[7];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *(void *)(v7 + 8) = *((void *)v8 + 1);
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(void *)(v7 + 24) = *((void *)v8 + 3);
      uint64_t v64 = *((void *)v8 + 4);
      uint64_t v14 = *((unsigned int *)v8 + 10);
      unsigned __int8 v15 = v8[44];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001E70B8(v64, v14, v15);
      *(void *)(v7 + 32) = v64;
      *(_DWORD *)(v7 + 40) = v14;
      *(unsigned char *)(v7 + 44) = v15;
      *(void *)(v7 + 48) = *((void *)v8 + 6);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      uint64_t v16 = *(int *)(v9 + 36);
      uint64_t v63 = &v8[v16];
      uint64_t v65 = v7 + v16;
      uint64_t v17 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v62(v65, v63, v17);
      uint64_t v18 = *(int *)(v9 + 40);
      uint64_t v19 = v7 + v18;
      uint64_t v20 = &v8[v18];
      uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_1002B0524(v7, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_6:
    uint64_t v22 = sub_100013A80(&qword_1004794C0);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *((void *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(void *)(v7 + 24) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = *((void *)v8 + 4);
  unsigned int v49 = *((_DWORD *)v8 + 10);
  unsigned __int8 v50 = v8[44];
  sub_1001E70B8(v48, v49, v50);
  uint64_t v51 = *(void *)(v7 + 32);
  uint64_t v52 = *(unsigned int *)(v7 + 40);
  *(void *)(v7 + 32) = v48;
  *(_DWORD *)(v7 + 40) = v49;
  unsigned __int8 v53 = *(unsigned char *)(v7 + 44);
  *(unsigned char *)(v7 + 44) = v50;
  sub_1001DDF44(v51, v52, v53);
  *(void *)(v7 + 48) = *((void *)v8 + 6);
  swift_retain();
  swift_release();
  *(void *)(v7 + 56) = *((void *)v8 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = *(int *)(v9 + 36);
  uint64_t v55 = v7 + v54;
  uint64_t v56 = &v8[v54];
  uint64_t v57 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v57 - 8) + 24))(v55, v56, v57);
  uint64_t v58 = *(int *)(v9 + 40);
  uint64_t v59 = v7 + v58;
  uint64_t v60 = &v8[v58];
  uint64_t v61 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v61 - 8) + 24))(v59, v60, v61);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  int v33 = *(_DWORD *)v32;
  v31[4] = v32[4];
  *(_DWORD *)uint64_t v31 = v33;
  uint64_t v34 = a3[13];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v38 = a3[15];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1, v41);
  int v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    uint64_t v46 = sub_100013A80(&qword_1004794B8);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_13:
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  return a1;
}

_OWORD *sub_1002B6BE8(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[7];
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  uint64_t v9 = (_OWORD *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100013A80(&qword_1004794C0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    long long v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    *((void *)v8 + 4) = *((void *)v9 + 4);
    *(void *)((char *)v8 + 37) = *(void *)((char *)v9 + 37);
    uint64_t v14 = *((void *)v9 + 7);
    *((void *)v8 + 6) = *((void *)v9 + 6);
    *((void *)v8 + 7) = v14;
    uint64_t v15 = *(int *)(v10 + 36);
    uint64_t v16 = (char *)v8 + v15;
    uint64_t v17 = (char *)v9 + v15;
    uint64_t v18 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    uint64_t v19 = *(int *)(v10 + 40);
    uint64_t v20 = (char *)v8 + v19;
    uint64_t v21 = (char *)v9 + v19;
    uint64_t v22 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  uint64_t v27 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
  uint64_t v28 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
  v29[4] = v30[4];
  uint64_t v31 = a3[13];
  uint64_t v32 = (char *)a1 + v31;
  int v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
  uint64_t v35 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = sub_100013A80(&qword_1004794B8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  return a1;
}

void *sub_1002B6F58(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      long long v15 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v15;
      *(void *)(v8 + 32) = *((void *)v9 + 4);
      *(void *)(v8 + 37) = *(void *)(v9 + 37);
      uint64_t v16 = *((void *)v9 + 7);
      *(void *)(v8 + 48) = *((void *)v9 + 6);
      *(void *)(v8 + 56) = v16;
      uint64_t v17 = *(int *)(v10 + 36);
      uint64_t v18 = v8 + v17;
      uint64_t v19 = &v9[v17];
      uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      uint64_t v21 = *(int *)(v10 + 40);
      uint64_t v22 = v8 + v21;
      uint64_t v23 = &v9[v21];
      uint64_t v24 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_1002B0524(v8, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
LABEL_6:
    uint64_t v25 = sub_100013A80(&qword_1004794C0);
    memcpy((void *)v8, v9, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v52 = *((void *)v9 + 1);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v52;
  swift_bridgeObjectRelease();
  uint64_t v53 = *((void *)v9 + 3);
  *(void *)(v8 + 16) = *((void *)v9 + 2);
  *(void *)(v8 + 24) = v53;
  swift_bridgeObjectRelease();
  int v54 = *((_DWORD *)v9 + 10);
  char v55 = v9[44];
  uint64_t v56 = *(void *)(v8 + 32);
  uint64_t v57 = *(unsigned int *)(v8 + 40);
  *(void *)(v8 + 32) = *((void *)v9 + 4);
  *(_DWORD *)(v8 + 40) = v54;
  unsigned __int8 v58 = *(unsigned char *)(v8 + 44);
  *(unsigned char *)(v8 + 44) = v55;
  sub_1001DDF44(v56, v57, v58);
  *(void *)(v8 + 48) = *((void *)v9 + 6);
  swift_release();
  *(void *)(v8 + 56) = *((void *)v9 + 7);
  swift_bridgeObjectRelease();
  uint64_t v59 = *(int *)(v10 + 36);
  uint64_t v60 = v8 + v59;
  uint64_t v61 = &v9[v59];
  uint64_t v62 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v62 - 8) + 40))(v60, v61, v62);
  uint64_t v63 = *(int *)(v10 + 40);
  uint64_t v64 = v8 + v63;
  uint64_t v65 = &v9[v63];
  uint64_t v66 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v66 - 8) + 40))(v64, v65, v66);
LABEL_7:
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[11];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[12];
  uint64_t v36 = a3[13];
  uint64_t v37 = (char *)a1 + v35;
  uint64_t v38 = (char *)a2 + v35;
  *(_DWORD *)uint64_t v37 = *(_DWORD *)v38;
  uint64_t v37[4] = v38[4];
  uint64_t v39 = (char *)a1 + v36;
  uint64_t v40 = (char *)a2 + v36;
  uint64_t v41 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 40))(v39, v40, v41);
  uint64_t v42 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  uint64_t v43 = (char *)a1 + v42;
  int v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v43, v44, v45);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
    goto LABEL_12;
  }
  if (v49)
  {
LABEL_12:
    uint64_t v50 = sub_100013A80(&qword_1004794B8);
    memcpy(v43, v44, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v44, v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_13:
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  return a1;
}

uint64_t sub_1002B74AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B74C0);
}

uint64_t sub_1002B74C0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100013A80(&qword_1004794C0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_11:
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for RoutingControls();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v13 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[13];
    goto LABEL_11;
  }
  uint64_t v15 = sub_100013A80(&qword_1004794B8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[15];

  return v16(v18, a2, v17);
}

uint64_t sub_1002B768C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B76A0);
}

uint64_t sub_1002B76A0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100013A80(&qword_1004794C0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_9:
    int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for RoutingControls();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v13 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[13];
    goto LABEL_9;
  }
  uint64_t v15 = sub_100013A80(&qword_1004794B8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[15];

  return v16(v18, a2, a2, v17);
}

void sub_1002B786C()
{
  sub_1002B5938(319, (unint64_t *)&qword_10047ACE0, (void (*)(uint64_t))type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for RoutingControls();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F)
      {
        sub_1002B5938(319, (unint64_t *)&unk_10047C758, (void (*)(uint64_t))&type metadata accessor for RoutingSession.HostInfo);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t sub_1002B7A24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)a1 = *a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = *((unsigned int *)a2 + 10);
    unsigned __int8 v11 = *((unsigned char *)a2 + 44);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001E70B8(v9, v10, v11);
    *(void *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 44) = v11;
    uint64_t v12 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v12;
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    uint64_t v18 = *(int *)(a3 + 40);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    uint64_t v21 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_1002B7BB0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001DDF44(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned char *)(a1 + 44));
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_1002B7C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(unsigned int *)(a2 + 40);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001E70B8(v8, v9, v10);
  *(void *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 44) = v10;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t sub_1002B7DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  unsigned int v7 = *(_DWORD *)(a2 + 40);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 44);
  sub_1001E70B8(v6, v7, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(unsigned int *)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = v7;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a1 + 44) = v8;
  sub_1001DDF44(v9, v10, v11);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t sub_1002B7F48(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = *a2;
  long long v7 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(void *)(a1 + 37) = *(void *)((char *)a2 + 37);
  uint64_t v8 = *((void *)a2 + 7);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v12 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

uint64_t sub_1002B8034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  int v8 = *(_DWORD *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 44);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(unsigned int *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = v8;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 44);
  *(unsigned char *)(a1 + 44) = v9;
  sub_1001DDF44(v10, v11, v12);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_1002B8168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002B817C);
}

uint64_t sub_1002B817C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      unsigned __int8 v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1002B82A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B82BC);
}

uint64_t sub_1002B82BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      unsigned __int8 v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1002B83E8()
{
  uint64_t result = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for HostedRoutingSession.NowPlayingInfo.Publisher(uint64_t a1)
{
  return sub_1001DDF44(*(void *)a1, *(unsigned int *)(a1 + 8), *(unsigned char *)(a1 + 12));
}

uint64_t _s12mediaremoted20HostedRoutingSessionV14NowPlayingInfoV9PublisherOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 12);
  sub_1001E70B8(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return a1;
}

uint64_t assignWithCopy for HostedRoutingSession.NowPlayingInfo.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 12);
  sub_1001E70B8(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = v5;
  sub_1001DDF44(v6, v7, v8);
  return a1;
}

void *initializeWithTake for HostedRoutingSession.NowPlayingInfo.Publisher(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for HostedRoutingSession.NowPlayingInfo.Publisher(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  char v5 = *((unsigned char *)a2 + 12);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 12);
  *(unsigned char *)(a1 + 12) = v5;
  sub_1001DDF44(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HostedRoutingSession.NowPlayingInfo.Publisher(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HostedRoutingSession.NowPlayingInfo.Publisher(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1002B86A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_1002B86A8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HostedRoutingSession.NowPlayingInfo.Publisher()
{
  return &type metadata for HostedRoutingSession.NowPlayingInfo.Publisher;
}

uint64_t *sub_1002B86C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = (int *)type metadata accessor for HostedRoutingSession(0);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100013A80(&qword_100479530);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v61 = v8;
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      uint64_t v13 = v7[7];
      __dst = (uint64_t *)((char *)a1 + v13);
      uint64_t v14 = (unsigned __int8 *)a2 + v13;
      uint64_t v15 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
      uint64_t v54 = *(void *)(v15 - 8);
      unsigned __int8 v58 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v55 = v15;
      uint64_t v57 = v6;
      if (v58(v14, 1, v15))
      {
        uint64_t v16 = sub_100013A80(&qword_1004794C0);
        memcpy(__dst, v14, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v17 = *((void *)v14 + 1);
        void *__dst = *(void *)v14;
        __dst[1] = v17;
        uint64_t v18 = *((void *)v14 + 3);
        __dst[2] = *((void *)v14 + 2);
        __dst[3] = v18;
        uint64_t v19 = *((void *)v14 + 4);
        uint64_t v20 = *((unsigned int *)v14 + 10);
        unsigned __int8 v21 = v14[44];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1001E70B8(v19, v20, v21);
        __dst[4] = v19;
        *((_DWORD *)__dst + 10) = v20;
        *((unsigned char *)__dst + 44) = v21;
        uint64_t v22 = *((void *)v14 + 7);
        __dst[6] = *((void *)v14 + 6);
        __dst[7] = v22;
        uint64_t v23 = *(int *)(v55 + 36);
        uint64_t v59 = (char *)__dst + v23;
        uint64_t v53 = &v14[v23];
        uint64_t v24 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
        uint64_t v25 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v24 - 8) + 16);
        swift_retain();
        swift_bridgeObjectRetain();
        v25(v59, v53, v24);
        uint64_t v26 = *(int *)(v55 + 40);
        uint64_t v27 = (char *)__dst + v26;
        uint64_t v28 = &v14[v26];
        uint64_t v29 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v55);
      }
      uint64_t v30 = v7[8];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for RoutingControls();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
      *(uint64_t *)((char *)a1 + v7[9]) = *(uint64_t *)((char *)a2 + v7[9]);
      *(uint64_t *)((char *)a1 + v7[10]) = *(uint64_t *)((char *)a2 + v7[10]);
      uint64_t v34 = v7[11];
      uint64_t v35 = (uint64_t *)((char *)a1 + v34);
      uint64_t v36 = (uint64_t *)((char *)a2 + v34);
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v7[12];
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
      v39[4] = v40[4];
      uint64_t v41 = v7[13];
      uint64_t v60 = (char *)a1 + v41;
      uint64_t v42 = (char *)a2 + v41;
      uint64_t v43 = type metadata accessor for Date();
      int v44 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44(v60, v42, v43);
      *((unsigned char *)a1 + v7[14]) = *((unsigned char *)a2 + v7[14]);
      uint64_t v45 = v7[15];
      uint64_t v46 = (char *)a1 + v45;
      uint64_t v47 = (char *)a2 + v45;
      uint64_t v48 = type metadata accessor for RoutingSession.HostInfo();
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = sub_100013A80(&qword_1004794B8);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v47, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
      }
      uint64_t v6 = v57;
      *((unsigned char *)a1 + v7[16]) = *((unsigned char *)a2 + v7[16]);
      (*(void (**)(uint64_t *, void, uint64_t, int *))(v61 + 56))(a1, 0, 1, v7);
    }
    uint64_t v51 = *(int *)(v6 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    *(uint64_t *)((char *)a1 + v51) = *(uint64_t *)((char *)a2 + v51);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002B8C34(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for HostedRoutingSession(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v2 - 1) + 48))(a1, 1, v2))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + v2[7];
    uint64_t v4 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001DDF44(*(void *)(v3 + 32), *(unsigned int *)(v3 + 40), *(unsigned char *)(v3 + 44));
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v5 = v3 + *(int *)(v4 + 36);
      uint64_t v6 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      uint64_t v7 = v3 + *(int *)(v4 + 40);
      uint64_t v8 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
    uint64_t v9 = a1 + v2[8];
    uint64_t v10 = type metadata accessor for RoutingControls();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = a1 + v2[13];
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    uint64_t v13 = a1 + v2[15];
    uint64_t v14 = type metadata accessor for RoutingSession.HostInfo();
    uint64_t v15 = *(void *)(v14 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1002B8F08(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for HostedRoutingSession(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100013A80(&qword_100479530);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v57 = v7;
    uint64_t v58 = a3;
    uint64_t v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    uint64_t v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    uint64_t v11 = v6[7];
    __dst = (void *)((char *)a1 + v11);
    uint64_t v12 = (unsigned __int8 *)a2 + v11;
    uint64_t v13 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    uint64_t v54 = *(void *)(v13 - 8);
    uint64_t v14 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v12, 1, v13))
    {
      uint64_t v15 = sub_100013A80(&qword_1004794C0);
      memcpy(__dst, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = *((void *)v12 + 1);
      void *__dst = *(void *)v12;
      __dst[1] = v16;
      uint64_t v17 = *((void *)v12 + 3);
      __dst[2] = *((void *)v12 + 2);
      __dst[3] = v17;
      uint64_t v18 = *((void *)v12 + 4);
      uint64_t v19 = *((unsigned int *)v12 + 10);
      unsigned __int8 v20 = v12[44];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001E70B8(v18, v19, v20);
      __dst[4] = v18;
      *((_DWORD *)__dst + 10) = v19;
      *((unsigned char *)__dst + 44) = v20;
      uint64_t v21 = *((void *)v12 + 7);
      __dst[6] = *((void *)v12 + 6);
      __dst[7] = v21;
      uint64_t v22 = *(int *)(v13 + 36);
      uint64_t v52 = &v12[v22];
      uint64_t v53 = (char *)__dst + v22;
      uint64_t v23 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
      uint64_t v24 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v24(v53, v52, v23);
      uint64_t v25 = *(int *)(v13 + 40);
      uint64_t v26 = (char *)__dst + v25;
      uint64_t v27 = &v12[v25];
      uint64_t v28 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v29 = v6[8];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for RoutingControls();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
    *(void *)((char *)a1 + v6[10]) = *(void *)((char *)a2 + v6[10]);
    uint64_t v33 = v6[11];
    uint64_t v34 = (void *)((char *)a1 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = v6[12];
    uint64_t v38 = (char *)a1 + v37;
    uint64_t v39 = (char *)a2 + v37;
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    uint64_t v40 = v6[13];
    __dsta = (char *)a1 + v40;
    uint64_t v41 = (char *)a2 + v40;
    uint64_t v42 = type metadata accessor for Date();
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(__dsta, v41, v42);
    *((unsigned char *)a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
    uint64_t v44 = v6[15];
    uint64_t v45 = (char *)a1 + v44;
    uint64_t v46 = (char *)a2 + v44;
    uint64_t v47 = type metadata accessor for RoutingSession.HostInfo();
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = sub_100013A80(&qword_1004794B8);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *((unsigned char *)a1 + v6[16]) = *((unsigned char *)a2 + v6[16]);
    a3 = v58;
    (*(void (**)(void *, void, uint64_t, int *))(v57 + 56))(a1, 0, 1, v6);
  }
  uint64_t v50 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v50) = *(void *)((char *)a2 + v50);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1002B9414(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HostedRoutingSession(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1002B0524((uint64_t)a1, type metadata accessor for HostedRoutingSession);
      goto LABEL_7;
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v116 = (int *)v6;
    uint64_t v18 = *(int *)(v6 + 28);
    uint64_t v19 = (char *)a1 + v18;
    unsigned __int8 v20 = (unsigned int *)((char *)a2 + v18);
    uint64_t v21 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
    int v24 = v23(v19, 1, v21);
    int v25 = v23((char *)v20, 1, v21);
    if (v24)
    {
      if (!v25)
      {
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = *((void *)v20 + 1);
        *((void *)v19 + 2) = *((void *)v20 + 2);
        *((void *)v19 + 3) = *((void *)v20 + 3);
        uint64_t v26 = *((void *)v20 + 4);
        uint64_t v27 = v20[10];
        unsigned __int8 v113 = *((unsigned char *)v20 + 44);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1001E70B8(v26, v27, v113);
        *((void *)v19 + 4) = v26;
        *((_DWORD *)v19 + 10) = v27;
        v19[44] = v113;
        *((void *)v19 + 6) = *((void *)v20 + 6);
        *((void *)v19 + 7) = *((void *)v20 + 7);
        uint64_t v28 = *(int *)(v21 + 36);
        uint64_t v111 = (char *)v20 + v28;
        uint64_t v114 = &v19[v28];
        uint64_t v29 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
        uint64_t v108 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_retain();
        swift_bridgeObjectRetain();
        v108(v114, v111, v29);
        uint64_t v30 = *(int *)(v21 + 40);
        uint64_t v31 = &v19[v30];
        uint64_t v32 = (char *)v20 + v30;
        uint64_t v33 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v25)
      {
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = *((void *)v20 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)v19 + 2) = *((void *)v20 + 2);
        *((void *)v19 + 3) = *((void *)v20 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v91 = *((void *)v20 + 4);
        unsigned int v92 = v20[10];
        unsigned __int8 v93 = *((unsigned char *)v20 + 44);
        sub_1001E70B8(v91, v92, v93);
        uint64_t v94 = *((void *)v19 + 4);
        uint64_t v95 = *((unsigned int *)v19 + 10);
        *((void *)v19 + 4) = v91;
        *((_DWORD *)v19 + 10) = v92;
        unsigned __int8 v96 = v19[44];
        v19[44] = v93;
        sub_1001DDF44(v94, v95, v96);
        *((void *)v19 + 6) = *((void *)v20 + 6);
        swift_retain();
        swift_release();
        *((void *)v19 + 7) = *((void *)v20 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v97 = *(int *)(v21 + 36);
        unint64_t v98 = &v19[v97];
        uint64_t v99 = (char *)v20 + v97;
        uint64_t v100 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 24))(v98, v99, v100);
        uint64_t v101 = *(int *)(v21 + 40);
        id v102 = &v19[v101];
        uint64_t v103 = (char *)v20 + v101;
        uint64_t v104 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v104 - 8) + 24))(v102, v103, v104);
LABEL_19:
        uint64_t v66 = v116[8];
        uint64_t v67 = (char *)a1 + v66;
        uint64_t v68 = (char *)a2 + v66;
        uint64_t v69 = type metadata accessor for RoutingControls();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
        *(void *)((char *)a1 + v116[9]) = *(void *)((char *)a2 + v116[9]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)((char *)a1 + v116[10]) = *(void *)((char *)a2 + v116[10]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v70 = v116[11];
        uint64_t v71 = (void *)((char *)a1 + v70);
        uint64_t v72 = (void *)((char *)a2 + v70);
        *uint64_t v71 = *v72;
        v71[1] = v72[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v73 = v116[12];
        uint64_t v74 = (char *)a1 + v73;
        uint64_t v75 = (char *)a2 + v73;
        int v76 = *(_DWORD *)v75;
        v74[4] = v75[4];
        *(_DWORD *)uint64_t v74 = v76;
        uint64_t v77 = v116[13];
        uint64_t v78 = (char *)a1 + v77;
        Swift::String v79 = (char *)a2 + v77;
        uint64_t v80 = type metadata accessor for Date();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v80 - 8) + 24))(v78, v79, v80);
        *((unsigned char *)a1 + v116[14]) = *((unsigned char *)a2 + v116[14]);
        uint64_t v81 = v116[15];
        uint64_t v82 = (char *)a1 + v81;
        uint64_t v83 = (char *)a2 + v81;
        uint64_t v84 = type metadata accessor for RoutingSession.HostInfo();
        uint64_t v85 = *(void *)(v84 - 8);
        uint64_t v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
        int v87 = v86(v82, 1, v84);
        int v88 = v86(v83, 1, v84);
        if (v87)
        {
          if (!v88)
          {
            (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v83, v84);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
LABEL_25:
            *((unsigned char *)a1 + v116[16]) = *((unsigned char *)a2 + v116[16]);
            goto LABEL_26;
          }
        }
        else
        {
          if (!v88)
          {
            (*(void (**)(char *, char *, uint64_t))(v85 + 24))(v82, v83, v84);
            goto LABEL_25;
          }
          (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v84);
        }
        uint64_t v89 = sub_100013A80(&qword_1004794B8);
        memcpy(v82, v83, *(void *)(*(void *)(v89 - 8) + 64));
        goto LABEL_25;
      }
      sub_1002B0524((uint64_t)v19, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    }
    uint64_t v65 = sub_100013A80(&qword_1004794C0);
    memcpy(v19, v20, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    uint64_t v17 = sub_100013A80(&qword_100479530);
    memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_26;
  }
  uint64_t v110 = v7;
  uint64_t v112 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v115 = (int *)v6;
  uint64_t v11 = *(int *)(v6 + 28);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (unsigned __int8 *)a2 + v11;
  uint64_t v14 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v15 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v107 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v13, 1, v14))
  {
    uint64_t v16 = sub_100013A80(&qword_1004794C0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *(void *)v13;
    v12[1] = *((void *)v13 + 1);
    v12[2] = *((void *)v13 + 2);
    v12[3] = *((void *)v13 + 3);
    uint64_t v34 = *((void *)v13 + 4);
    uint64_t v35 = *((unsigned int *)v13 + 10);
    unsigned __int8 v36 = v13[44];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001E70B8(v34, v35, v36);
    v12[4] = v34;
    *((_DWORD *)v12 + 10) = v35;
    *((unsigned char *)v12 + 44) = v36;
    v12[6] = *((void *)v13 + 6);
    v12[7] = *((void *)v13 + 7);
    uint64_t v37 = *(int *)(v14 + 36);
    uint64_t v105 = &v13[v37];
    uint64_t v106 = (char *)v12 + v37;
    uint64_t v38 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo();
    uint64_t v39 = *(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v38 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v39(v106, v105, v38);
    uint64_t v40 = *(int *)(v14 + 40);
    uint64_t v41 = (char *)v12 + v40;
    uint64_t v42 = &v13[v40];
    uint64_t v43 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo();
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v12, 0, 1, v14);
  }
  uint64_t v44 = v115[8];
  uint64_t v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = type metadata accessor for RoutingControls();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  *(void *)((char *)a1 + v115[9]) = *(void *)((char *)a2 + v115[9]);
  *(void *)((char *)a1 + v115[10]) = *(void *)((char *)a2 + v115[10]);
  uint64_t v48 = v115[11];
  uint64_t v49 = (void *)((char *)a1 + v48);
  uint64_t v50 = (void *)((char *)a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  uint64_t v51 = v115[12];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  char v54 = v53[4];
  *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
  v52[4] = v54;
  uint64_t v55 = v115[13];
  id v109 = (char *)a1 + v55;
  uint64_t v56 = (char *)a2 + v55;
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v58(v109, v56, v57);
  *((unsigned char *)a1 + v115[14]) = *((unsigned char *)a2 + v115[14]);
  uint64_t v59 = v115[15];
  uint64_t v60 = (char *)a1 + v59;
  uint64_t v61 = (char *)a2 + v59;
  uint64_t v62 = type metadata accessor for RoutingSession.HostInfo();
  uint64_t v63 = *(void *)(v62 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
  {
    uint64_t v64 = sub_100013A80(&qword_1004794B8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
  }
  a3 = v112;
  *((unsigned char *)a1 + v115[16]) = *((unsigned char *)a2 + v115[16]);
  (*(void (**)(void *, void, uint64_t))(v110 + 56))(a1, 0, 1);
LABEL_26:
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}