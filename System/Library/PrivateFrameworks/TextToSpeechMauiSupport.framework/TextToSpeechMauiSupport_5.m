uint64_t utoin_LookUpSubWordsInNativeRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int16 a7, char *a8, int a9, uint64_t a10, unsigned __int16 a11, unsigned __int16 a12, _WORD *a13, _DWORD *a14, _WORD *a15)
{
  _WORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned __int16 v46;
  char v47;
  int v48;
  unsigned int v50;
  int v51;
  size_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  char v86[4];
  long long __b;
  size_t __n[2];
  int v89;
  char *v90;
  unsigned __int16 v91;
  uint64_t v92;

  v92 = a6;
  v91 = a7;
  v90 = a8;
  v89 = 0;
  if (!a6) {
    return 2370838535;
  }
  v20 = a15;
  v21 = a10;
  v22 = a9;
  __b = 0u;
  *(_OWORD *)__n = 0u;
  cstdlib_memset(&__b, 0, 0x20uLL);
  *a14 = 0;
  *a13 = 0;
  *a15 = 0;
  if (a9 == 3)
  {
    v23 = v92;
    v24 = *(unsigned int *)(a10 + 32);
    if (utoin_multiwordInLatinRegion(v92, v91, (_WORD *)&v89 + 1, (unsigned __int16 *)&v89, v24, *(_DWORD *)(a10 + 36) + (int)v24))
    {
      v28 = *(_DWORD *)(a5 + 32);
      v29 = *(_DWORD *)(v23 + ((unint64_t)HIWORD(v89) << 6) + 32) - v28;
      v30 = *(_DWORD *)(v23 + ((unint64_t)(unsigned __int16)v89 << 6) + 32) - v28;
      if (*(_DWORD *)(a1 + 72) == 1) {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v25, v26, v27, *(unsigned int *)(v23 + ((unint64_t)HIWORD(v89) << 6) + 32));
      }
      v85 = 1;
    }
    else
    {
      if (*(_DWORD *)(a1 + 72) == 1) {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no multiword found for latin region %d and %d)", v25, v26, v27, v24);
      }
      v29 = 0;
      v30 = 0;
      v85 = 0;
    }
    v21 = a10;
    v22 = 3;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v85 = 0;
  }
  *(void *)&__b = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
  v36 = *(void *)(a1 + 16);
  if (!(void)__b) {
    goto LABEL_18;
  }
  v83 = v30;
  __n[0] = heap_Calloc(*(void **)(v36 + 8), 1, *(unsigned __int16 *)(a1 + 132)+ *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 128)+ 1);
  if (__n[0])
  {
    if (*(_DWORD *)(a1 + 72) == 1)
    {
      v37 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 130) + 1, 1);
      if (!v37) {
        goto LABEL_17;
      }
    }
    else
    {
      v37 = 0;
    }
    v81 = a2;
    v38 = a12;
    if (a11 >= a12) {
      goto LABEL_19;
    }
    v80 = v29;
    v77 = a5;
    v39 = a11;
    v84 = a3;
    v78 = v21;
    v79 = a4;
    while (1)
    {
      if (v22 == 3)
      {
        v40 = cstdlib_strlen(v90);
        v41 = (unsigned __int16)v39;
        v42 = v21;
        if ((unsigned __int16)v39 >= (unsigned __int16)v38)
        {
          v44 = 1;
        }
        else
        {
          do
          {
            v43 = utf8_BelongsToSet(2u, v90, v41, v40);
            v44 = v43 == 1;
            if (v43 != 1) {
              break;
            }
            v39 += utf8_determineUTF8CharLength(v90[(unsigned __int16)v39]);
            v41 = (unsigned __int16)v39;
          }
          while ((unsigned __int16)v39 < (unsigned __int16)v38);
        }
        if ((a11 == (unsigned __int16)v39
           || (a11 >= (unsigned __int16)v39 ? (v47 = 1) : (v47 = v44),
               (v47 & 1) == 0 && utf8_BelongsToSet(2u, v90, v41 - 1, v40) == 1))
          && (v46 = v39 + utf8_determineUTF8CharLength(v90[(unsigned __int16)v39]),
              v46 < (unsigned __int16)v38))
        {
          v21 = v42;
          a4 = v79;
          while (1)
          {
            v45 = v46;
            if (utf8_BelongsToSet(2u, v90, v46, v40)) {
              break;
            }
            v46 = v45 + utf8_determineUTF8CharLength(v90[v45]);
            if (v46 >= (unsigned __int16)v38) {
              goto LABEL_51;
            }
          }
          if (!v45)
          {
LABEL_51:
            v45 = v38;
            goto LABEL_52;
          }
          if (utf8_BelongsToSet(2u, v90, v45, v40) != 1) {
            v45 = v38;
          }
LABEL_52:
          v20 = a15;
        }
        else
        {
          v45 = v38;
          v20 = a15;
          v21 = v42;
          a4 = v79;
        }
      }
      else
      {
        v45 = v38;
      }
      if (v85 == 1
        && ((unsigned __int16)v45 > (unsigned __int16)v80
         || (unsigned __int16)v39 >= (unsigned __int16)v80))
      {
        if ((unsigned __int16)v39 < (unsigned __int16)v80
          && (unsigned __int16)v45 > (unsigned __int16)v80)
        {
          v50 = v80;
        }
        else
        {
          v50 = v45;
        }
        if ((unsigned __int16)v39 >= (unsigned __int16)v80) {
          v45 = v83;
        }
        else {
          v45 = v50;
        }
        if ((unsigned __int16)v39 < (unsigned __int16)v80)
        {
          v48 = 0;
        }
        else
        {
          v39 = v80;
          v48 = 1;
        }
      }
      else
      {
        v48 = 0;
      }
      v51 = (unsigned __int16)v45 - (unsigned __int16)v39;
      if (v51 < 1) {
        goto LABEL_19;
      }
      if (v51 > (unsigned __int16)*v20) {
        *v20 = v45 - v39;
      }
      if (!v90) {
        goto LABEL_19;
      }
      v82 = v48;
      if (*(unsigned __int16 *)(a1 + 130) >= (unsigned __int16)(v45 - v39)) {
        v52 = (unsigned __int16)(v45 - v39);
      }
      else {
        v52 = *(unsigned __int16 *)(a1 + 130);
      }
      WORD4(__b) = v52;
      cstdlib_memmove((void *)__b, &v90[(unsigned __int16)v39], v52);
      v53 = WORD4(__b);
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        cstdlib_strncpy(v37, (const char *)__b, WORD4(__b));
        v37[WORD4(__b)] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (lookup User Dict for \"%s\")", v54, v55, v56, (uint64_t)v37);
      }
      if ((utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&__b, v22 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v86) & 0x80000000) != 0)goto LABEL_19; {
      if (v22 == 3)
      }
      {
        v60 = HIDWORD(__b);
      }
      else
      {
        while (1)
        {
          v60 = HIDWORD(__b);
          v61 = WORD4(__b) < 2u || WORD4(__b) > v53;
          if (v61 || HIDWORD(__b) != 0) {
            break;
          }
          WORD4(__b) = utf8_GetPreviousUtf8Offset(__b, WORD4(__b));
          if ((utoin_LookUpUdctWord(*(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), (uint64_t)&__b, v22 == 3, *(unsigned __int16 *)(a1 + 130), *(_WORD *)(a1 + 128), (uint64_t)v86) & 0x80000000) != 0)goto LABEL_19; {
        }
          }
      }
      if (v60 > 15)
      {
        if (v60 == 16)
        {
          if (!LH_stricmp(*(char **)(a1 + 24), "jpj") && HIDWORD(__b) != 2)
          {
LABEL_102:
            if (v22 == 3 && *(_DWORD *)(a1 + 72) == 1) {
              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no (valid) User Dict entry found)", v57, v58, v59, v76);
            }
            if (v22 == 3) {
              v39 = v45;
            }
            v39 += utf8_determineUTF8CharLength(v90[(unsigned __int16)v39]);
            v20 = a15;
            goto LABEL_118;
          }
        }
        else if (v60 != 43)
        {
          goto LABEL_102;
        }
      }
      else if (v60 == 2)
      {
        if (*(unsigned __int8 *)__n[0] <= 0x7Eu) {
          HIDWORD(__b) = 3;
        }
      }
      else if (v60 != 3)
      {
        goto LABEL_102;
      }
      *a15 = 0;
      *a14 = 1;
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        cstdlib_strncpy(v37, (const char *)__n[0], LOWORD(__n[1]));
        v37[LOWORD(__n[1])] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (found User Dict entry \"%s\")", v63, v64, v65, (uint64_t)v37);
      }
      if (LH_stricmp(*(char **)(a1 + 24), v86)) {
        v66 = v86;
      }
      else {
        v66 = 0;
      }
      if ((utoin_ReplaceWord(v81, v84, (unsigned __int16)v39, (uint64_t)&__b, 1, a4, v66) & 0x80000000) != 0) {
        goto LABEL_19;
      }
      if ((bed_GetpElem(v81, 0, &v90) & 0x80000000) != 0) {
        goto LABEL_19;
      }
      v67 = a4;
      v68 = LOWORD(__n[1]);
      v69 = WORD4(__b);
      *a13 = LOWORD(__n[1]) + *a13 - WORD4(__b);
      if ((bed_GetpElem(v84, 0, &v92) & 0x80000000) != 0 || (bed_GetcElem(v84, &v91) & 0x80000000) != 0) {
        goto LABEL_19;
      }
      v39 += v68;
      v38 = v68 + v38 - v69;
      a4 = v67;
      v20 = a15;
      v21 = v78;
LABEL_118:
      if (v82)
      {
        v70 = v92;
        v71 = *(_DWORD *)(v77 + 32);
        if (utoin_multiwordInLatinRegion(v92, v91, (_WORD *)&v89 + 1, (unsigned __int16 *)&v89, v71 + (unsigned __int16)v39, *(_DWORD *)(v21 + 32) + (unsigned __int16)v38))
        {
          v75 = *(unsigned int *)(v70 + ((unint64_t)HIWORD(v89) << 6) + 32);
          v80 = v75 - v71;
          v83 = *(_DWORD *)(v70 + ((unint64_t)(unsigned __int16)v89 << 6) + 32) - v71;
          if (*(_DWORD *)(a1 + 72) == 1) {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (multiword found for latin region %d and %d)", v72, v73, v74, v75);
          }
          v85 = 1;
        }
        else
        {
          if (*(_DWORD *)(a1 + 72) == 1) {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOIN] (no further multiwords found in latin region %d and %d)", v72, v73, v74, v71 + (unsigned __int16)v39);
          }
          v80 = 0;
          v83 = 0;
          v85 = 0;
        }
        v21 = v78;
        a4 = v79;
        v20 = a15;
      }
      if ((unsigned __int16)v39 >= (unsigned __int16)v38) {
        goto LABEL_19;
      }
    }
  }
LABEL_17:
  v36 = *(void *)(a1 + 16);
LABEL_18:
  log_OutPublic(*(void *)(v36 + 32), (uint64_t)&modPP_3, 1923, 0, v32, v33, v34, v35, v76);
  v37 = 0;
LABEL_19:
  if ((void)__b)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), __b);
    *(void *)&__b = 0;
  }
  if (__n[0])
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), __n[0]);
    __n[0] = 0;
  }
  if (v37) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v37);
  }
  return 0;
}

uint64_t utoin_multiwordInLatinRegion(uint64_t a1, unsigned int a2, _WORD *a3, unsigned __int16 *a4, unsigned int a5, unsigned int a6)
{
  if (!a2) {
    return 0;
  }
  uint64_t v6 = 0;
  v7 = (_DWORD *)(a1 + 104);
  for (__int16 i = 1; ; ++i)
  {
    uint64_t v9 = a1 + (v6 << 6);
    if (*(_DWORD *)(v9 + 20) == 32 && *(_DWORD *)(v9 + 40) == 1)
    {
      unsigned int v10 = *(_DWORD *)(a1 + (v6 << 6) + 32);
      BOOL v11 = v10 < a5 || v10 > a6;
      if (!v11 && v6 + 1 < (unint64_t)a2) {
        break;
      }
    }
LABEL_21:
    ++v6;
    v7 += 16;
    if (v6 == a2) {
      return 0;
    }
  }
  v13 = v7;
  unsigned __int16 v14 = i;
  while (1)
  {
    if (*(v13 - 5) == 32 && !*v13)
    {
      unsigned int v15 = *(v13 - 2);
      if (v15 >= v10 && v15 <= a6) {
        break;
      }
    }
    ++v14;
    v13 += 16;
    if (a2 == v14) {
      goto LABEL_21;
    }
  }
  *a3 = v6;
  *a4 = v14;
  return 1;
}

uint64_t utoin_ReplaceCurrentRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v33 = 0;
  uint64_t v31 = 0;
  __src = 0;
  unsigned __int16 v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long __b = 0u;
  long long v27 = 0u;
  *(void *)v25 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerSetLang;
  long long v27 = unk_2206E3E30;
  long long v28 = xmmword_2206E3E40;
  long long v29 = unk_2206E3E50;
  if (!a3) {
    return 2370838535;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v35);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v34);
    if ((result & 0x80000000) == 0)
    {
      int v11 = *(_DWORD *)(v34 + 32);
      int v12 = *(_DWORD *)(v35 + 32);
      unsigned int v13 = *(unsigned __int16 *)(v34 + 36);
      if (a4 && a5)
      {
        uint64_t result = datac_RequestBlock(a4, 1012, 1u, v25);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        DWORD1(v27) = 36;
        uint64_t result = addOrGetTNArgStr(*(uint64_t *)v25, a5, (unsigned int *)&v28 + 2, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        *((void *)&v27 + 1) = *(unsigned int *)(v34 + 24);
        *(void *)&long long v28 = *(unsigned int *)(v34 + 32);
        uint64_t result = bed_Goto(a2, 1u);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_marker_InjectFixedRefMarker(a2, &__b);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        v34 += 64;
      }
      uint64_t result = bed_GetcElem(a3, (_WORD *)&v33 + 1);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v14 = v11 - v12;
      if (HIWORD(v33))
      {
        if (v13 >= HIWORD(v33)) {
          unsigned int v15 = HIWORD(v33);
        }
        else {
          unsigned int v15 = v13;
        }
        uint64_t result = bed_GetpElem(a3, 0, &__src);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_GetpElem(a1, 0, &v31);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned __int16 v16 = 0;
        if (v15)
        {
          v17 = (unsigned __int8 *)__src + 1;
          v18 = (unsigned __int8 *)(v31 + v14 + 1);
          while (*(v18 - 1) == *((unsigned __int8 *)__src + v16) && *v18 == *v17)
          {
            ++v18;
            ++v16;
            ++v17;
            if (v15 <= v16)
            {
              unsigned __int16 v16 = v15;
              break;
            }
          }
        }
        uint64_t result = bed_Remove(a1, v14, v13);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Goto(a1, v14);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Insert(a1, __src, HIWORD(v33));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_Remove(a3, 0, HIWORD(v33));
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = bed_Remove(a1, (unsigned __int16)(v11 - v12), v13);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned __int16 v16 = 0;
      }
      int v19 = HIWORD(v33);
      *(_DWORD *)(v34 + 36) = HIWORD(v33);
      uint64_t result = bed_GetiElem(a2, &v30);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = bed_GetcElem(a2, &v33);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v20 = (unsigned __int16)v33;
          int v21 = v30 + 1;
          if ((unsigned __int16)v33 <= (unsigned __int16)(v30 + 1))
          {
            return 0;
          }
          else
          {
            uint64_t v22 = v35;
            int v23 = HIWORD(v33);
            v24 = (_DWORD *)(v34 + 96);
            do
            {
              if (v19 != v13 && *v24 > v14 + v16 + *(_DWORD *)(v22 + 32)) {
                _DWORD *v24 = *v24 - v13 + v23;
              }
              uint64_t result = 0;
              ++v21;
              v24 += 16;
            }
            while (v20 > (unsigned __int16)v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 1, a5);
}

uint64_t utoin_RemoveRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t result = 2370838535;
  uint64_t v21 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          int v20 = 0;
          uint64_t result = bed_GetpElem(a3, 0, &v23);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = bed_GetpElem(a2, 0, &v22);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = bed_GetpElem(a3, 0xFFFFu, &v21);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v8 = *(_DWORD *)(v21 + 32) - *(_DWORD *)(v23 + 32);
                int v9 = *(unsigned __int16 *)(v21 + 36);
                uint64_t result = bed_Remove(a2, v8, v9);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(v21 + 36) = 0;
                  uint64_t result = bed_GetiElem(a3, (_WORD *)&v20 + 1);
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t result = bed_GetcElem(a3, &v20);
                    if ((result & 0x80000000) == 0)
                    {
                      unsigned int v10 = (unsigned __int16)v20;
                      int v11 = HIWORD(v20) + 1;
                      if ((unsigned __int16)v20 <= (unsigned __int16)(HIWORD(v20) + 1))
                      {
                        return 0;
                      }
                      else
                      {
                        uint64_t v12 = v23;
                        unsigned int v13 = (unsigned int *)(v21 + 100);
                        do
                        {
                          unsigned int v14 = *(v13 - 1);
                          int v15 = *(_DWORD *)(v12 + 32) + v8;
                          if (v14 >= v15 + v9)
                          {
                            *(v13 - 1) = v14 - v9;
                          }
                          else
                          {
                            *(v13 - 1) = v15;
                            unsigned int v16 = *v13 + v15;
                            unsigned int v17 = v9 + v8 + *(_DWORD *)(v12 + 32);
                            BOOL v18 = v16 >= v17;
                            unsigned int v19 = v16 - v17;
                            if (v18) {
                              unsigned int *v13 = v19;
                            }
                            else {
                              unsigned int *v13 = 0;
                            }
                          }
                          uint64_t result = 0;
                          ++v11;
                          v13 += 16;
                        }
                        while (v10 > (unsigned __int16)v11);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_NormalizeOrthNativeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return utoin_NormalizeOrthNative(a1, a2, a3, a4, 0, a5);
}

uint64_t utoin_TranscodeText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 0);
}

uint64_t utoin_TranscodeWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return utoin_Transcode(a1, a2, a3, a4, 1);
}

uint64_t utoin_MarkWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 2370838535;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          unsigned __int16 v9 = cstdlib_strlen(szWORD_END_0);
          uint64_t result = bed_Insert(a4, szWORD_END_0, v9);
          if ((result & 0x80000000) == 0)
          {
            unsigned __int16 v10 = cstdlib_strlen(szWORD_BEG_0);
            uint64_t result = bed_Insert(a4, szWORD_BEG_0, v10);
            if ((result & 0x80000000) == 0)
            {
              return utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t utoin_SpellRegion(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v5 = 2370838535;
  uint64_t v23 = 0;
  __int16 v21 = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v22 = 0;
    uint64_t v11 = a1[2];
    uint64_t v12 = datac_RequestBlock(a5, 1012, 1u, &v22);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    uint64_t v12 = bed_GetpElem(a3, 0, &v25);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    int v13 = *(_DWORD *)(v25 + 32);
    uint64_t v12 = bed_GetpElem(a2, 0, &v24);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
    uint64_t v12 = bed_GetpElem(a3, 0xFFFFu, &v23);
    if ((v12 & 0x80000000) != 0)
    {
      return v12;
    }
    else
    {
      size_t v14 = *(unsigned __int16 *)(v23 + 36);
      if (*(_WORD *)(v23 + 36))
      {
        int v20 = *(_DWORD *)(v23 + 32);
        int v15 = (void *)heap_Alloc(*(void *)(v11 + 8), (unsigned __int16)(v14 + 1));
        if (v15)
        {
          unsigned __int16 v16 = v20 - v13;
          unsigned int v17 = v15;
          cstdlib_memset(v15, 0, (unsigned __int16)(v14 + 1));
          cstdlib_memmove(v17, (const void *)(v24 + v16), v14);
          uint64_t v18 = (*(uint64_t (**)(void, void, void *, size_t, size_t, uint64_t, uint64_t, uint64_t, __int16, __int16 *, BOOL))(a1[13] + 72))(a1[14], a1[15], v17, v14, v14, a4, a5, v22, 1012, &v21, *(_DWORD *)(v23 + 40) == 44);
          if ((v18 & 0x80000000) == 0) {
            uint64_t v18 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
          }
          uint64_t v5 = v18;
          heap_Free(*(void **)(v11 + 8), (uint64_t)v17);
        }
        else
        {
          return 2370838538;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t utoin_NormalizeOrthNative(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v100 = 0;
  v101[0] = 0;
  uint64_t v99 = 0;
  __int16 v98 = 0;
  uint64_t v97 = 0;
  long long v95 = 0u;
  long long v96 = 0u;
  long long __b = 0u;
  long long v94 = 0u;
  uint64_t v92 = 0;
  unsigned __int16 v91 = 0;
  uint64_t v89 = 0;
  v90 = 0;
  __int16 v88 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerUndef;
  long long v94 = unk_2206E3FA8;
  long long v95 = xmmword_2206E3FB8;
  long long v96 = unk_2206E3FC8;
  uint64_t v12 = 2370838535;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 164))
    {
      uint64_t v14 = datac_RequestBlock(a6, 1012, 1u, &v92);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
    }
    uint64_t v14 = bed_GetpElem(a3, 0, v101);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    unsigned int v15 = *(_DWORD *)(v101[0] + 32);
    int v86 = *(_DWORD *)(v101[0] + 24);
    uint64_t v14 = bed_GetpElem(a2, 0, &v100);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    uint64_t v14 = bed_GetpElem(a3, 0xFFFFu, &v97);
    if ((v14 & 0x80000000) != 0) {
      return v14;
    }
    unsigned int v85 = v15;
    uint64_t v83 = a3;
    uint64_t v84 = v13;
    int v17 = *(_DWORD *)(v97 + 32);
    int v16 = *(_DWORD *)(v97 + 36);
    uint64_t v18 = (void *)heap_Alloc(*(void *)(v13 + 8), (unsigned __int16)(v16 + 1));
    if (!v18) {
      return 2370838538;
    }
    unsigned int v19 = v18;
    cstdlib_memset(v18, 0, (unsigned __int16)(v16 + 1));
    cstdlib_memmove(v19, (const void *)(v100 + (unsigned __int16)(v17 - v85)), (unsigned __int16)v16);
    int v20 = 0;
    uint64_t v21 = v92;
    if (!*(_DWORD *)(a1 + 164)) {
      int v20 = *(unsigned __int16 *)(v92 + 16);
    }
    int v82 = v20;
    *(void *)(a1 + 148) = 0x100000001;
    uint64_t v22 = (*(uint64_t (**)(void, void, void *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, unsigned __int16 *, int, unsigned __int16 **, uint64_t))(*(void *)(a1 + 104) + 64))(*(void *)(a1 + 112), *(void *)(a1 + 120), v19, (unsigned __int16)v16, (unsigned __int16)v16, a2, v83, a4, a6, v21, 1012, &v91, a5, &v90, a1 + 136);
    if ((v22 & 0x80000000) != 0) {
      goto LABEL_101;
    }
    uint64_t v12 = bed_GetcElem(a2, &v98);
    if ((v12 & 0x80000000) != 0 || !v98) {
      goto LABEL_102;
    }
    uint64_t v22 = bed_GetpElem(a2, 0, &v99);
    if ((v22 & 0x80000000) != 0)
    {
LABEL_101:
      uint64_t v12 = v22;
      goto LABEL_102;
    }
    int v23 = *(_DWORD *)(v97 + 32);
    int v79 = *(_DWORD *)(v97 + 24);
    uint64_t v14 = bed_GetpElem(v83, 0, &v89);
    if ((v14 & 0x80000000) != 0)
    {
      return v14;
    }
    else
    {
      uint64_t v24 = bed_GetcElem(v83, &v88);
      uint64_t v25 = v24;
      if ((v24 & 0x80000000) != 0)
      {
        return v24;
      }
      else
      {
        v72 = v19;
        uint64_t v26 = *(void *)(v97 + 8);
        uint64_t v27 = *(unsigned __int16 *)(v97 + 16);
        if (*(_WORD *)(v97 + 16))
        {
          uint64_t v28 = *(unsigned __int16 *)(v97 + 16);
          long long v29 = *(_DWORD **)(v97 + 8);
          do
          {
            *v29 += v86 - v79;
            v29 += 2;
            --v28;
          }
          while (v28);
        }
        uint64_t v74 = v27;
        unsigned __int16 v30 = (uint64_t *)(a1 + 136);
        if (v91)
        {
          __int16 v31 = 0;
          unsigned __int16 v32 = v23 - v85;
          int v33 = (unsigned __int16)(v23 - v85);
          unsigned int v34 = v91 + v33;
          unsigned __int16 v35 = v23 - v85;
          do
          {
            if (*(unsigned char *)(v99 + v35) == 16) {
              ++v31;
            }
            ++v35;
          }
          while (v34 > v35);
          unsigned __int16 v81 = 0;
          int v36 = 0;
          uint64_t v37 = 0;
          unsigned __int16 v87 = 0;
          v73 = (int *)(v26 + 4);
          uint64_t v80 = 1;
          int v38 = (unsigned __int16)(v23 - v85);
          __int16 v39 = v16;
          int v76 = v33;
          do
          {
            if (*(unsigned char *)(v99 + v32) != 16)
            {
LABEL_36:
              uint64_t v42 = v37;
              goto LABEL_94;
            }
            if (v34 <= v32)
            {
LABEL_35:
              if (*(_DWORD *)(a1 + 164)) {
                goto LABEL_36;
              }
              uint64_t v43 = v25;
              unsigned __int16 v41 = cstdlib_strlen((const char *)(*(void *)(v92 + 8)
                                                + (v82 + v87) * *(unsigned __int16 *)(v92 + 2)));
              uint64_t v25 = v43;
              unsigned __int16 v30 = (uint64_t *)(a1 + 136);
            }
            else
            {
              unsigned __int16 v40 = v32;
              while (*(unsigned char *)(v99 + v40) != 17)
              {
                if (v34 <= ++v40)
                {
                  if (*(unsigned char *)(v99 + v40) != 17) {
                    goto LABEL_35;
                  }
                  break;
                }
              }
              unsigned __int16 v41 = v40 + ~v32;
            }
            if (!v41)
            {
              uint64_t v42 = v37;
              int v33 = v76;
              goto LABEL_94;
            }
            unsigned int v44 = *(unsigned __int16 *)(a1 + 144);
            BOOL v45 = (unsigned __int16)v37 < v44;
            if ((_WORD)v37 && v44 > (unsigned __int16)v37)
            {
              uint64_t v46 = *v30;
              while (*(_DWORD *)(v46 + 12 * ((unsigned __int16)v37 - 1) + 4) == 1
                   && *(_DWORD *)(v46 + 12 * (unsigned __int16)v37 + 4) == 1)
              {
                uint64_t v37 = (v37 + 1);
                if (v44 <= (unsigned __int16)v37)
                {
                  BOOL v45 = 0;
                  goto LABEL_48;
                }
              }
              BOOL v45 = 1;
            }
LABEL_48:
            uint64_t v42 = (v37 + 1);
            if (v44 <= (unsigned __int16)(v37 + 1)) {
              unsigned __int16 v47 = v37 + 1;
            }
            else {
              unsigned __int16 v47 = *(_WORD *)(a1 + 144);
            }
            unsigned __int16 v48 = v37;
            while (v44 > ++v48)
            {
              if (*(_DWORD *)(*v30 + 12 * v48 - 8) != 1 || *(_DWORD *)(*v30 + 12 * v48 + 4) != 1) {
                goto LABEL_57;
              }
            }
            unsigned __int16 v48 = v47;
LABEL_57:
            if (v45)
            {
              uint64_t v49 = *v30;
              __int16 v50 = v39;
              if (v44 != v48) {
                __int16 v50 = *(_WORD *)(v49 + 12 * v48);
              }
              int v51 = *(unsigned __int16 *)(v49 + 12 * (unsigned __int16)v37);
              LOWORD(v49) = v50 - v51;
              uint64_t v52 = v74;
              goto LABEL_67;
            }
            uint64_t v52 = v74;
            if (*(_DWORD *)(a1 + 148) == 1)
            {
              if (v31 != 1)
              {
                int v51 = 0;
                uint64_t v42 = v37;
                LOWORD(v49) = v41 / *(_WORD *)(a1 + 160);
                goto LABEL_67;
              }
              int v51 = 0;
              LODWORD(v49) = *(_DWORD *)(v97 + 28);
            }
            else
            {
              int v51 = 0;
              LOWORD(v49) = 0;
            }
            uint64_t v42 = v37;
LABEL_67:
            int v53 = (unsigned __int16)v49;
            int v54 = 0;
            if (v52)
            {
              uint64_t v55 = v52;
              v56 = v73;
              do
              {
                unsigned int v57 = *(v56 - 1);
                if (v57 > (unsigned __int16)v49 + v51 + v36) {
                  break;
                }
                unsigned int v58 = v36 + v51;
                if (v57 == v36 + v51)
                {
                  v36 += *v56;
                  unsigned int v58 = v36 + v51;
                }
                if (v57 > v58 && v57 <= v58 + (unsigned __int16)v49) {
                  int v54 = *v56;
                }
                v56 += 2;
                --v55;
              }
              while (v55);
            }
            int v78 = v54;
            int v60 = v79 + v81 + v51 + v36;
            DWORD2(v94) = v60;
            HIDWORD(v94) = (unsigned __int16)v49;
            unsigned int v75 = v38 + v85;
            LODWORD(v95) = v38 + v85;
            DWORD1(v95) = v41;
            if (*(_DWORD *)(a1 + 164))
            {
              __int16 v77 = 0;
            }
            else
            {
              DWORD1(v94) = 39;
              DWORD2(v95) = v82 + v87;
              __int16 v77 = cstdlib_strlen((const char *)(*(void *)(v92 + 8)
                                                + DWORD2(v95) * *(unsigned __int16 *)(v92 + 2)));
              uint64_t v61 = bed_marker_InjectFixedRefMarker(v83, &__b);
              if ((v61 & 0x80000000) != 0)
              {
                uint64_t v12 = v61;
LABEL_106:
                unsigned int v19 = v72;
                goto LABEL_102;
              }
            }
            DWORD1(v94) = 41;
            *((void *)&v95 + 1) = 0;
            uint64_t v25 = bed_marker_InjectFixedRefMarker(v83, &__b);
            uint64_t v65 = v80;
            if ((v25 & 0x80000000) != 0) {
              goto LABEL_105;
            }
            if (v90)
            {
              if (*v90 >= (unsigned __int16)v80)
              {
                int v66 = v90[(unsigned __int16)v80];
              }
              else
              {
                log_OutText(*(void *)(v84 + 32), (uint64_t)&modPP_3, 5, 0, (uint64_t)"[UTOI] (missing POS for normalized word %d", v62, v63, v64, (unsigned __int16)v80);
                int v66 = 0;
              }
              DWORD1(v94) = 14;
              DWORD2(v94) = v60;
              if (*(_DWORD *)(a1 + 148) == 1) {
                __int16 v67 = v53;
              }
              else {
                __int16 v67 = 0;
              }
              unsigned int v68 = v75;
              if (v95 == v85) {
                unsigned int v68 = v85;
              }
              HIDWORD(v94) = v53;
              *(void *)&long long v95 = v68;
              DWORD2(v95) = v66;
              uint64_t v25 = bed_marker_InjectFixedRefMarker(v83, &__b);
              if ((v25 & 0x80000000) != 0) {
                goto LABEL_105;
              }
              v81 += v67;
              uint64_t v65 = (v80 + 1);
            }
            unsigned __int16 v30 = (uint64_t *)(a1 + 136);
            __int16 v39 = v16;
            int v33 = v76;
            uint64_t v80 = v65;
            v36 += v78;
            v87 += v77 + 1;
LABEL_94:
            int v38 = ++v32;
            unsigned int v34 = v33 + v91;
            uint64_t v37 = v42;
          }
          while (v34 > v32);
        }
        if (*(unsigned __int16 *)(a1 + 146) < 0x15u)
        {
LABEL_105:
          uint64_t v12 = v25;
          goto LABEL_106;
        }
        uint64_t v69 = v25;
        uint64_t v70 = heap_Realloc(*(uint64_t **)(v84 + 8), *v30, 120);
        uint64_t v12 = 2370838538;
        unsigned int v19 = v72;
        if (v70)
        {
          *(void *)(a1 + 136) = v70;
          *(_WORD *)(a1 + 146) = 10;
          uint64_t v12 = v69;
        }
LABEL_102:
        heap_Free(*(void **)(v84 + 8), (uint64_t)v19);
        if (v90) {
          heap_Free(*(void **)(v84 + 8), (uint64_t)v90);
        }
      }
    }
  }
  return v12;
}

uint64_t utoin_Transcode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v92 = 0;
  uint64_t v10 = 2370838538;
  long long v89 = 0u;
  long long v90 = 0u;
  long long __b = 0u;
  long long v88 = 0u;
  uint64_t v86 = 0;
  unsigned __int16 v85 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerUndef;
  long long v88 = unk_2206E3FA8;
  long long v89 = xmmword_2206E3FB8;
  long long v90 = unk_2206E3FC8;
  uint64_t v11 = 2370838535;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = bed_GetpElem(a3, 0, &v94);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a2, 0, &v93);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a3, 0, &v86);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetcElem(a3, &v85);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
    uint64_t v13 = bed_GetpElem(a3, 0xFFFFu, &v92);
    if ((v13 & 0x80000000) != 0)
    {
      return v13;
    }
    else
    {
      int v14 = *(_DWORD *)(v94 + 32);
      unsigned int v16 = *(_DWORD *)(v92 + 32);
      int v15 = *(_DWORD *)(v92 + 36);
      int v17 = *(_DWORD *)(v92 + 24);
      unsigned int v83 = *(_DWORD *)(v92 + 40);
      uint64_t v18 = *(void *)(v92 + 8);
      uint64_t v19 = *(unsigned __int16 *)(v92 + 16);
      if (*(_WORD *)(v92 + 16))
      {
        int v20 = *(_DWORD *)(v94 + 24) - v17;
        uint64_t v21 = *(unsigned __int16 *)(v92 + 16);
        uint64_t v22 = *(_DWORD **)(v92 + 8);
        do
        {
          *v22 += v20;
          v22 += 2;
          --v21;
        }
        while (v21);
      }
      if ((_WORD)v15)
      {
        uint64_t v79 = v18;
        uint64_t v81 = v19;
        int v82 = v17;
        unsigned __int16 v91 = v15 + 1;
        int v23 = (char *)heap_Alloc(*(void *)(v12 + 8), (unsigned __int16)(v15 + 1));
        if (v23)
        {
          unsigned int v77 = v16;
          unsigned __int16 v24 = v16 - v14;
          uint64_t v25 = v23;
          cstdlib_memset(v23, 0, v91--);
          *(_WORD *)(a1 + 144) = 0;
          *(void *)(a1 + 148) = 0x100000001;
          int v76 = (uint64_t *)(a1 + 136);
          uint64_t v26 = utoin_TranscodeLatinText((void *)a1, v12, v93 + v24, (unsigned __int16)v15, v25, &v91, a1 + 136, v83);
          if ((v26 & 0x80000000) != 0)
          {
            uint64_t v42 = (uint64_t)v25;
          }
          else
          {
            __s = v25;
            if (!a5
              || (unsigned __int16 v27 = cstdlib_strlen(szWORD_BEG_0), v26 = bed_Insert(a4, szWORD_BEG_0, v27), (v26 & 0x80000000) == 0))
            {
              uint64_t v28 = *(void *)(v12 + 8);
              int v29 = cstdlib_strlen(__s);
              uint64_t v30 = heap_Alloc(v28, (v29 + 1));
              if (v30)
              {
                __int16 v31 = (void *)v30;
                size_t v32 = cstdlib_strlen(__s);
                cstdlib_memset(v31, 0, v32 + 1);
                cstdlib_strcpy((char *)v31, __s);
                unsigned __int16 v33 = cstdlib_strlen((const char *)v31);
                uint64_t v34 = bed_Insert(a4, v31, v33);
                uint64_t v75 = (uint64_t)v31;
                if ((v34 & 0x80000000) == 0)
                {
                  if (!a5
                    || (unsigned __int16 v35 = cstdlib_strlen(szWORD_END_0),
                        uint64_t v34 = bed_Insert(a4, szWORD_END_0, v35),
                        (v34 & 0x80000000) == 0))
                  {
                    uint64_t v34 = utoin_ReplaceCurrentRegion(a2, a3, a4, 0, 0);
                    if ((v34 & 0x80000000) == 0)
                    {
                      if (v83 == 16 && v85 >= 2uLL)
                      {
                        unsigned __int16 v36 = 0;
                        unsigned int v37 = v15 + v77;
                        int v38 = (_DWORD *)(v86 + 100);
                        uint64_t v39 = v85 - 1;
                        do
                        {
                          unsigned int v40 = *(v38 - 1);
                          if (v40 > v37) {
                            break;
                          }
                          BOOL v41 = *(v38 - 4) == 998 && v40 >= v77;
                          if (v41 && *v38 + v40 <= v37) {
                            ++v36;
                          }
                          v38 += 16;
                          --v39;
                        }
                        while (v39);
                      }
                      else
                      {
                        unsigned __int16 v36 = 0;
                      }
                      if (*(_DWORD *)(v92 + 40) == 43 || (unint64_t v43 = *(unsigned __int16 *)(a1 + 144), !*(_WORD *)(a1 + 144)))
                      {
                        uint64_t v11 = 0;
LABEL_97:
                        if (*(unsigned __int16 *)(a1 + 146) >= 0x15u)
                        {
                          uint64_t v74 = heap_Realloc(*(uint64_t **)(v12 + 8), *v76, 120);
                          uint64_t v73 = (uint64_t)__s;
                          if (v74)
                          {
                            *(void *)(a1 + 136) = v74;
                            *(_WORD *)(a1 + 146) = 10;
                            uint64_t v10 = v11;
                          }
                          goto LABEL_94;
                        }
                        uint64_t v10 = v11;
LABEL_93:
                        uint64_t v73 = (uint64_t)__s;
LABEL_94:
                        heap_Free(*(void **)(v12 + 8), v73);
                        uint64_t v42 = v75;
                        goto LABEL_95;
                      }
                      int v44 = 0;
                      unint64_t v45 = 0;
                      int v46 = 0;
                      uint64_t v80 = (int *)(v79 + 4);
                      unsigned int v84 = v36;
                      while (1)
                      {
                        if ((unsigned __int16)v45 >= (unsigned __int16)v43)
                        {
                          int v52 = 0;
                          unint64_t v48 = v45;
                          unsigned int v50 = v77;
                          unsigned __int16 v47 = (uint64_t *)(a1 + 136);
                        }
                        else
                        {
                          unsigned __int16 v47 = (uint64_t *)(a1 + 136);
                          unint64_t v48 = (unsigned __int16)v45;
                          if (*(_DWORD *)(*v76 + 12 * (unsigned __int16)v45 + 4) == 1)
                          {
                            uint64_t v49 = (int *)(*v76 + 12 * (unsigned __int16)v45 + 16);
                            unsigned int v50 = v77;
                            while ((unsigned __int16)v43 - 1 != v48)
                            {
                              int v51 = *v49;
                              v49 += 3;
                              ++v48;
                              if (v51 != 1)
                              {
                                int v52 = v48 < (unsigned __int16)v43;
                                goto LABEL_55;
                              }
                            }
                            int v52 = 0;
                            unint64_t v48 = v43;
                          }
                          else
                          {
                            int v52 = 1;
                            unsigned int v50 = v77;
                          }
                        }
LABEL_55:
                        unint64_t v45 = (v48 + 1);
                        unsigned __int16 v53 = v48 + 1;
                        if ((unsigned __int16)v43 > (unsigned __int16)(v48 + 1)) {
                          unsigned __int16 v53 = v43;
                        }
                        unsigned __int16 v54 = v48;
                        while (1)
                        {
                          unsigned int v55 = ++v54;
                          if (v54 >= (unsigned __int16)v43) {
                            break;
                          }
                          if (*(_DWORD *)(*v47 + 12 * v54 + 4) != 1) {
                            goto LABEL_62;
                          }
                        }
                        unsigned __int16 v54 = v53;
LABEL_62:
                        if (v52)
                        {
                          uint64_t v56 = *v47;
                          unsigned int v57 = (unsigned __int16 *)(*v47 + 12 * (unsigned __int16)v48);
                          int v52 = v57[4];
                          if (v54 == (unsigned __int16)v43)
                          {
                            unsigned __int16 v58 = *(_WORD *)(v56 + 12 * (v55 - 1) + 8);
                            v59 = &v91;
                          }
                          else
                          {
                            v59 = (unsigned __int16 *)(v56 + 12 * v55 + 8);
                            unsigned __int16 v58 = v57[4];
                          }
                          int v60 = *v57;
                          unsigned __int16 v62 = *v59 - v58;
                          int v61 = *(unsigned __int16 *)(v56 + 12 * (unsigned __int16)v48 + 2);
                        }
                        else
                        {
                          int v60 = 0;
                          int v61 = 0;
                          unsigned __int16 v62 = 0;
                          unint64_t v45 = v48;
                        }
                        int v63 = v62;
                        uint64_t v64 = v81;
                        if (v81)
                        {
                          int v65 = 0;
                          int v66 = v80;
                          int v67 = v60 + v62;
                          do
                          {
                            unsigned int v68 = *(v66 - 1);
                            if (v68) {
                              BOOL v69 = v68 > v67 + v44;
                            }
                            else {
                              BOOL v69 = 0;
                            }
                            if (v69) {
                              break;
                            }
                            unsigned int v70 = v44 + v60;
                            if (v68 == v44 + v60)
                            {
                              int v44 = *v66;
                              unsigned int v70 = *v66 + v60;
                            }
                            if (v68 > v70 && v68 <= v70 + v63) {
                              int v65 = *v66;
                            }
                            v66 += 2;
                            --v64;
                          }
                          while (v64);
                        }
                        else
                        {
                          int v65 = 0;
                        }
                        DWORD1(v88) = 41;
                        DWORD2(v88) = v82 + v60 + v44;
                        HIDWORD(v88) = v65 + v61;
                        LODWORD(v89) = v50 + v52;
                        DWORD1(v89) = v63;
                        if (v84 <= 1)
                        {
                          uint64_t v34 = bed_marker_InjectFixedRefMarker(a3, &__b);
                          if ((v34 & 0x80000000) != 0) {
                            break;
                          }
                        }
                        uint64_t v13 = bed_GetpElem(a3, 0, &v86);
                        if ((v13 & 0x80000000) != 0) {
                          return v13;
                        }
                        uint64_t v11 = bed_GetcElem(a3, &v85);
                        if ((v11 & 0x80000000) != 0) {
                          return v11;
                        }
                        v44 += v65;
                        ++v46;
                        unint64_t v43 = *(unsigned __int16 *)(a1 + 144);
                        if (v43 <= (unsigned __int16)v46) {
                          goto LABEL_97;
                        }
                      }
                    }
                  }
                }
                uint64_t v10 = v34;
                goto LABEL_93;
              }
              uint64_t v42 = (uint64_t)__s;
LABEL_95:
              heap_Free(*(void **)(v12 + 8), v42);
              return v10;
            }
            uint64_t v42 = (uint64_t)v25;
          }
          uint64_t v10 = v26;
          goto LABEL_95;
        }
        return 2370838538;
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

uint64_t utoin_TranscodeLatinText(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned char *a5, unsigned __int16 *a6, uint64_t a7, unsigned int a8)
{
  int v61 = 0;
  uint64_t result = 2370838535;
  if (a3 && a6 && *a6)
  {
    if (a4)
    {
      unsigned int v14 = 0;
      unsigned int v15 = 0;
      int v16 = 0;
      int v17 = 0;
      uint64_t v56 = a1;
      uint64_t v57 = a3 + 1;
      int v60 = a6;
      while (1)
      {
        uint64_t v18 = (unsigned char *)(a3 + (unsigned __int16)v17);
        unsigned int v19 = *v18;
        if (v19 - 9 <= 4)
        {
          uint64_t v20 = v14 + 1;
          if (v20 >= a4 || v19 != 13 || *(unsigned char *)(a3 + v20) != 10)
          {
            int v22 = 0;
            a5[(unsigned __int16)v16] = 32;
            goto LABEL_33;
          }
          int v21 = 0;
          int v22 = 0;
          goto LABEL_34;
        }
        if (((v19 & 0xDF) - 65) < 0x1Au
          || (v19 != 32 ? (BOOL v23 = (v19 - 48) >= 0xAu) : (BOOL v23 = 0), !v23))
        {
          int v22 = 0;
          a5[(unsigned __int16)v16] = v19;
          goto LABEL_33;
        }
        unsigned int v24 = a8;
        if (a8 <= 0x3C)
        {
          if (((1 << a8) & 0x1000080000000140) != 0) {
            goto LABEL_26;
          }
          unsigned int v24 = a8;
          if (a8 == 16)
          {
            if (v19 == 195 && (*(unsigned __int8 *)(a3 + v14 + 1) | 0x20) == 0xBC)
            {
              int v22 = 0;
              a5[(unsigned __int16)v16] = 118;
              ++v17;
              goto LABEL_33;
            }
            goto LABEL_26;
          }
        }
        if (v24 - 70 >= 3)
        {
          int v61 = 0;
          unsigned __int16 v45 = utf8_determineUTF8CharLength(v19);
          if (*v18 == 227
            && (uint64_t v46 = a3 + v14, *(unsigned __int8 *)(v46 + 1) == 128)
            && *(unsigned __int8 *)(v46 + 2) == 128)
          {
            uint64_t v47 = *(void *)(a2 + 8);
            int v48 = cstdlib_strlen(" ");
            int v61 = (char *)heap_Alloc(v47, (v48 + 1));
            cstdlib_strcpy(v61, " ");
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(void, void, uint64_t, void, char **))(v56[13] + 80))(v56[14], v56[15], a3 + (unsigned __int16)v17, v45, &v61);
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
          if (v61)
          {
            a5[(unsigned __int16)v16] = *v61;
            int v21 = 1;
          }
          else
          {
            int v21 = 0;
          }
          int v26 = 1;
          goto LABEL_94;
        }
LABEL_26:
        if ((unsigned __int16)utf8_determineUTF8CharLength(v19) == 1)
        {
          int v25 = *v18;
          if (v25 != 255)
          {
            int v22 = 0;
LABEL_32:
            a5[(unsigned __int16)v16] = v25;
LABEL_33:
            int v21 = 1;
LABEL_34:
            int v26 = 1;
            goto LABEL_35;
          }
        }
        if (!cstdlib_strcmp((const char *)(a3 + (unsigned __int16)v17), "§"))
        {
          int v22 = 0;
          LOBYTE(v25) = *v18;
          goto LABEL_32;
        }
        int v26 = 0;
        int v61 = 0;
        int v21 = 1;
LABEL_94:
        int v22 = 1;
LABEL_35:
        unsigned __int16 v27 = utf8_determineUTF8CharLength(*a5);
        if ((_WORD)v16)
        {
          BOOL v28 = a5[(unsigned __int16)v16] != 32 && !utf8_BelongsToSet(5u, a5, v15, v27);
          int v29 = a5[v15 - 1];
          if (v29 == 32)
          {
LABEL_40:
            int v30 = 1;
            goto LABEL_48;
          }
          if ((unsigned __int16)v16 >= 3u && a5[v15 - 3] == 227)
          {
            int v30 = 0;
            if (a5[v15 - 2] == 128 && v29 == 128) {
              goto LABEL_40;
            }
          }
          else
          {
            int v30 = 0;
          }
        }
        else
        {
          int v30 = 0;
          BOOL v28 = 1;
        }
LABEL_48:
        int v31 = v21 & v26;
        if (!(_WORD)v16) {
          int v30 = 1;
        }
        if (v31 == 1 && v28 && v30 && a5[(unsigned __int16)v16] != 17 && *(_DWORD *)(a7 + 16) == 1)
        {
          unsigned int v32 = *(unsigned __int16 *)(a7 + 8);
          uint64_t v33 = *(void *)a7;
          if (v32 >= *(unsigned __int16 *)(a7 + 10))
          {
            uint64_t v34 = heap_Realloc(*(uint64_t **)(a2 + 8), v33, 12 * *(unsigned __int16 *)(a7 + 10) + 121);
            if (!v34) {
              return 2370838538;
            }
            uint64_t v33 = v34;
            *(void *)a7 = v34;
            *(_WORD *)(a7 + 10) += 10;
            unsigned int v32 = *(unsigned __int16 *)(a7 + 8);
          }
          uint64_t v35 = v33 + 12 * v32;
          *(_WORD *)uint64_t v35 = v17;
          *(_WORD *)(v35 + 2) = 0;
          *(_DWORD *)(v35 + 4) = 0;
          *(_WORD *)(v35 + 8) = v16;
          *(_WORD *)(a7 + 8) = v32 + 1;
        }
        unsigned __int16 v36 = v61;
        if (v61) {
          char v37 = 0;
        }
        else {
          char v37 = v22;
        }
        if (v37)
        {
          int v38 = 0;
        }
        else
        {
          if ((v22 & (v61 != 0)) == 0) {
            unsigned __int16 v36 = (char *)(a3 + (unsigned __int16)v17);
          }
          int v38 = utf8_determineUTF8CharLength(*v36);
          if ((unsigned __int16)v38 >= 2u)
          {
            ++v16;
            if (v61) {
              int v39 = v22;
            }
            else {
              int v39 = 0;
            }
            unsigned int v40 = v61 + 1;
            BOOL v41 = (char *)(v57 + (unsigned __int16)v17);
            uint64_t v42 = (unsigned __int16)v38 - 1;
            do
            {
              if (v39) {
                unint64_t v43 = v40;
              }
              else {
                unint64_t v43 = v41;
              }
              a5[(unsigned __int16)v16] = *v43;
              if (--v42) {
                ++v16;
              }
              ++v40;
              ++v41;
            }
            while (v42);
          }
        }
        if (v22) {
          int v38 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a3 + (unsigned __int16)v17));
        }
        if (v61)
        {
          heap_Free(*(void **)(a2 + 8), (uint64_t)v61);
          int v61 = 0;
        }
        v17 += v38;
        v16 += v31;
        unsigned int v15 = (unsigned __int16)v16;
        a6 = v60;
        unsigned int v14 = (unsigned __int16)v17;
        BOOL v44 = (unsigned __int16)v17 < a4;
        if ((unsigned __int16)v16 >= *v60 || a4 <= (unsigned __int16)v17) {
          goto LABEL_96;
        }
      }
    }
    LOWORD(v16) = 0;
    BOOL v44 = 0;
LABEL_96:
    a5[(unsigned __int16)v16] = 0;
    uint64_t v49 = *(unsigned __int16 *)(a7 + 8);
    if (*(_WORD *)(a7 + 8))
    {
      uint64_t v50 = 0;
      uint64_t v51 = *(void *)a7;
      do
      {
        unsigned int v52 = a4;
        if ((int)v50 + 1 < v49) {
          unsigned int v52 = *(unsigned __int16 *)(v51 + 12 * (v50 + 1));
        }
        if (v52)
        {
          do
          {
            unsigned int v53 = *(unsigned __int8 *)(a3 + (unsigned __int16)v52 - 1);
            if (v53 > 0x20 || ((1 << v53) & 0x100002600) == 0)
            {
              if ((unsigned __int16)v52 < 3u
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v52 - 3) != 227
                || *(unsigned __int8 *)(a3 + (unsigned __int16)v52 - 2) != 128
                || v53 != 128)
              {
                goto LABEL_113;
              }
              __int16 v55 = -3;
            }
            else
            {
              __int16 v55 = -1;
            }
            LOWORD(v52) = v52 + v55;
          }
          while ((_WORD)v52);
          LOWORD(v52) = 0;
        }
LABEL_113:
        *(_WORD *)(v51 + 12 * v50 + 2) = v52 - *(_WORD *)(v51 + 12 * v50);
        ++v50;
      }
      while (v50 != v49);
    }
    if (v44)
    {
      return 2370838537;
    }
    else
    {
      uint64_t result = 0;
      *a6 = v16;
    }
  }
  return result;
}

uint64_t utoin_PutClosingAndOpeningTag(int a1, int a2, unsigned char *a3)
{
  if (!a3) {
    return 2370838535;
  }
  *a3 = 0;
  if ((a2 - 5) < 4) {
    goto LABEL_5;
  }
  if (a2 == 2)
  {
    int v3 = 16;
    goto LABEL_11;
  }
  if (a2 == 1)
  {
LABEL_5:
    int v3 = 16;
    if (a1 && a1 != 43) {
      return 0;
    }
  }
  else
  {
    int v3 = a2;
  }
LABEL_11:
  if (v3 == a1) {
    return 0;
  }
  if ((a1 - 3) >= 2)
  {
    if (!a1)
    {
      unsigned int v6 = 0;
      goto LABEL_19;
    }
    unsigned int v6 = 1;
    uint64_t v5 = a3;
  }
  else
  {
    *a3 = 17;
    uint64_t v5 = a3 + 1;
    unsigned int v6 = 2;
  }
  *uint64_t v5 = 31;
LABEL_19:
  int v7 = 2;
  char v8 = 80;
  int v9 = 1;
  char v10 = 30;
  if (a2 <= 4)
  {
    if ((a2 - 3) >= 2)
    {
      if (a2 != 1)
      {
        unsigned int v11 = v6;
        if (a2 != 2) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
LABEL_21:
      if (a1 != 16)
      {
        unsigned int v11 = v6;
LABEL_32:
        a3[v11] = v10;
        a3[v6 + v9] = v8;
        v6 += v7;
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    char v8 = 16;
    char v10 = 76;
LABEL_31:
    a3[v6] = 30;
    unsigned int v11 = v6 + 1;
    int v7 = 3;
    int v9 = 2;
    goto LABEL_32;
  }
  if ((a2 - 5) < 4) {
    goto LABEL_21;
  }
  unsigned int v11 = v6;
  if (a2 == 16) {
    goto LABEL_32;
  }
  if (a2 == 43)
  {
    char v8 = 43;
    char v10 = 47;
    goto LABEL_31;
  }
LABEL_33:
  uint64_t result = 0;
  a3[v6] = 0;
  return result;
}

const char *getUTOIMarkerString(int a1)
{
  if (a1 == 43) {
    return "UTOI_PHONEMEMARKER";
  }
  uint64_t v3 = 0;
  uint64_t result = "UTOI_UNDEF";
  while (UTOIMARKER2STRING_0[v3] != a1)
  {
    v3 += 4;
    if (v3 == 76) {
      return result;
    }
  }
  return *(const char **)&UTOIMARKER2STRING_0[v3 + 2];
}

uint64_t UTOITrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned __int16 v36 = 0;
  __n[0] = 0;
  if (!a1) {
    return 0;
  }
  __src = 0;
  *(void *)&__n[1] = 0;
  uint64_t v9 = bed_GetcElem(a3, __n);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (__n[0])
  {
    uint64_t v9 = bed_GetpElem(a3, 0, &__src);
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v13 = (char *)heap_Calloc(*(void **)(a2 + 8), 1, __n[0] + 1);
      if (!v13) {
        return 2370838538;
      }
      uint64_t v14 = (uint64_t)v13;
      cstdlib_strncpy(v13, __src, __n[0]);
      *(unsigned char *)(v14 + __n[0]) = 0;
      int v16 = (uint64_t *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 32);
      goto LABEL_10;
    }
    return v9;
  }
  uint64_t v14 = 0;
  int v16 = (uint64_t *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 32);
LABEL_10:
  log_OutText(v15, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] (%s) len=%d (LH_U8 *) \"%s\"", v10, v11, v12, a5);
  uint64_t v18 = bed_GetpElem(a4, 0, &__n[1]);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v17 = v18;
  }
  else
  {
    uint64_t v17 = bed_GetcElem(a4, &v36);
    if ((v17 & 0x80000000) == 0 && v36)
    {
      unint64_t v22 = 0;
      uint64_t v23 = *(void *)&__n[1];
      do
      {
        uint64_t v24 = v23 + (v22 << 6);
        int v25 = *(_DWORD *)(v24 + 20);
        if (v25 == 7)
        {
          int v26 = *(_DWORD *)(v24 + 40);
          if (v26 != 43)
          {
            for (uint64_t i = 0; i != 76; i += 4)
            {
              if (UTOIMARKER2STRING_0[i] == v26) {
                break;
              }
            }
          }
        }
        else
        {
          marker_getString(v25);
          uint64_t v23 = *(void *)&__n[1];
        }
        BOOL v28 = *(const char **)(v23 + (v22 << 6) + 48);
        if (v28)
        {
          unsigned __int16 v29 = cstdlib_strlen(v28);
          if (v29 <= 0x20uLL) {
            size_t v30 = v29;
          }
          else {
            size_t v30 = 31;
          }
          cstdlib_strncpy(__dst, *(const char **)(*(void *)&__n[1] + (v22 << 6) + 48), v30);
          __dst[v30] = 0;
          uint64_t v23 = *(void *)&__n[1];
        }
        else
        {
          __dst[0] = 0;
        }
        if (*(_DWORD *)(v23 + (v22 << 6) + 20) == 32)
        {
          __dst[0] = 48;
          if (*(_DWORD *)(v23 + (v22 << 6) + 40) == 1) {
            char v31 = 49;
          }
          else {
            char v31 = 48;
          }
          __dst[0] = v31;
          __dst[1] = 0;
        }
        log_OutText(*v16, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Marker[%d] %s[type=%5d %s]  Ref (%u,%u) Cur(%u,%u) %s", v19, v20, v21, v22);
        uint64_t v23 = *(void *)&__n[1];
        if (*(_WORD *)(*(void *)&__n[1] + (v22 << 6) + 16))
        {
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          do
          {
            log_OutText(*v16, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] Offsets[%d] %u,%u", v19, v20, v21, v33++);
            uint64_t v23 = *(void *)&__n[1];
            v32 += 8;
          }
          while (v33 < *(unsigned __int16 *)(*(void *)&__n[1] + (v22 << 6) + 16));
        }
        ++v22;
      }
      while (v22 < v36);
    }
  }
  if (v14) {
    heap_Free(*(void **)(a2 + 8), v14);
  }
  return v17;
}

uint64_t UTOISubTrace(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  if (!a1) {
    return 0;
  }
  __int16 v13 = 0;
  uint64_t v10 = bed_GetcElem(a3, &v13);
  if ((v10 & 0x80000000) == 0)
  {
    if (!v13)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      goto LABEL_8;
    }
    uint64_t v10 = bed_GetpElem(a3, 0, &v14);
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v11 = *(void *)(a2 + 32);
LABEL_8:
      log_OutText(v11, (uint64_t)"PP", 5, 0, (uint64_t)"[UTOI] SUB (%s) len=%d (LH_U8 *) \"%s\"", v7, v8, v9, a4);
    }
  }
  return v10;
}

uint64_t wparser_ObjOpen1(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2370838535;
  uint64_t v10 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v10) & 0x80000000) == 0)
  {
    *a3 = 0;
    uint64_t v7 = (void *)heap_Alloc(*(void *)(v10 + 8), 16);
    if (v7)
    {
      uint64_t v8 = v7;
      cstdlib_memset(v7, 0, 0x10uLL);
      uint64_t v3 = 0;
      *uint64_t v8 = a1;
      v8[1] = a2;
      *a3 = v8;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t wparser_ObjClose1(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t wparser_ScanWords(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unsigned __int16 v62 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  LODWORD(v56) = 1;
  DWORD1(v57) = 1;
  uint64_t v55 = 0;
  uint64_t v4 = 2370838535;
  unsigned __int16 v54 = 0;
  if (!a1 || !a2) {
    return v4;
  }
  unsigned int v9 = datac_RequestBlock(a2, 1020, 1u, &v64);
  if ((v9 & 0x80000000) != 0)
  {
    if ((v9 & 0x1FFF) == 0x14) {
      return 0;
    }
    else {
      return v9;
    }
  }
  if (!*(_WORD *)(v64 + 16)) {
    return 0;
  }
  uint64_t v10 = bed_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), a2, 1021, &v63, 213);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(unsigned char **)(v64 + 8);
    unsigned int v12 = *(unsigned __int16 *)(v64 + 16);
    uint64_t v10 = bed_GetpElem(v63, 0, &v62);
    if ((v10 & 0x80000000) == 0)
    {
      long long v60 = *v62;
      uint64_t v61 = *((void *)v62 + 2);
      int v13 = *((_DWORD *)v62 + 6);
      int v14 = *((_DWORD *)v62 + 7);
      int v15 = *((_DWORD *)v62 + 8);
      v65[0] = *(long long *)((char *)v62 + 36);
      *(_OWORD *)((char *)v65 + 12) = v62[3];
      uint64_t v10 = bed_GetcElem(v63, &v54);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v10 = bed_GetpElem(v63, 0, &v55);
        if ((v10 & 0x80000000) == 0)
        {
          unsigned int v16 = v54;
          int v52 = v14;
          if (v54 < 2u)
          {
            unsigned int v16 = 1;
          }
          else
          {
            uint64_t v17 = (int *)(v55 + 96);
            uint64_t v18 = 1;
            while (1)
            {
              int v19 = *v17;
              v17 += 16;
              if (v19 != *(_DWORD *)(v55 + 32)) {
                break;
              }
              if (v54 == ++v18) {
                goto LABEL_20;
              }
            }
            unsigned int v16 = (unsigned __int16)v18;
          }
LABEL_20:
          uint64_t v21 = v62;
          uint64_t v20 = v63;
          *((_DWORD *)v62 + 7) = 0;
          *((_DWORD *)v21 + 9) = 0;
          uint64_t v10 = bed_Goto(v20, 1u);
          if ((v10 & 0x80000000) == 0)
          {
            int v53 = v13;
            if (!v12)
            {
LABEL_75:
              uint64_t v4 = bed_GetpElem(v63, 0, &v62);
              if ((v4 & 0x80000000) == 0)
              {
                uint64_t v50 = v61;
                uint64_t v49 = v62;
                *unsigned __int16 v62 = v60;
                *((void *)v49 + 2) = v50;
                *(long long *)((char *)v49 + 36) = v65[0];
                v49[3] = *(_OWORD *)((char *)v65 + 12);
                *((_DWORD *)v49 + 7) = v52 + a4;
                *((_DWORD *)v49 + 8) = v15;
                *((_DWORD *)v49 + 6) = v53 - a4;
              }
              goto LABEL_78;
            }
            int v22 = 0;
            uint64_t v23 = 0;
            int v24 = v53 + a3;
            while (1)
            {
              unsigned int v25 = (unsigned __int16)v23;
              uint64_t v26 = v23;
              do
              {
                if (!utf8_BelongsToSet(4u, v11, v25, v12)) {
                  break;
                }
                uint64_t v26 = v26
                    + utf8_determineUTF8CharLength(v11[(unsigned __int16)v26]);
                unsigned int v25 = (unsigned __int16)v26;
              }
              while ((unsigned __int16)v26 < v12);
              uint64_t v23 = v26;
              if (v12 > (unsigned __int16)v26)
              {
                uint64_t v23 = v26;
                do
                {
                  if (utf8_BelongsToSet(4u, v11, (unsigned __int16)v23, v12)) {
                    break;
                  }
                  uint64_t v23 = v23
                      + utf8_determineUTF8CharLength(v11[(unsigned __int16)v23]);
                }
                while (v12 > (unsigned __int16)v23);
              }
              if ((unsigned __int16)v26 < (unsigned __int16)v23)
              {
                if (v54 >= 2u)
                {
                  int v27 = 0;
                  unsigned int v28 = 0;
                  unsigned int v29 = 1;
                  do
                  {
                    uint64_t v30 = v55 + ((unint64_t)v29 << 6);
                    unsigned int v31 = *(_DWORD *)(v30 + 32) - *(_DWORD *)(v55 + 32);
                    BOOL v32 = v31 < v25 || v31 > (unsigned __int16)v23;
                    if (!v32 && *(_DWORD *)(v30 + 20) == 7)
                    {
                      int v33 = *(_DWORD *)(v55 + ((unint64_t)v29 << 6) + 40);
                      if (v33 == 43)
                      {
                        int v27 = 1;
                      }
                      else if (v33 == 15)
                      {
                        unsigned int v28 = v29;
                      }
                    }
                    ++v29;
                  }
                  while (v29 < v54 && v31 <= (unsigned __int16)v23);
                  if (v27 == 1 && v28)
                  {
                    unsigned int v34 = *(_DWORD *)(v55 + ((unint64_t)v28 << 6) + 32) - *(_DWORD *)(v55 + 32);
                    if ((unsigned __int16)v34 <= v25 || v34 > (unsigned __int16)v23) {
                      uint64_t v23 = v23;
                    }
                    else {
                      uint64_t v23 = v34;
                    }
                  }
                }
                if ((_WORD)v26 && v16 < v54)
                {
                  unint64_t v36 = v16;
                  unint64_t v37 = v55 + 32 + ((unint64_t)v16 << 6);
                  int v38 = (int *)v37;
                  do
                  {
                    int v39 = *v38;
                    v38 += 16;
                    if (v39 - *(_DWORD *)(v55 + 32) > v25) {
                      break;
                    }
                    if (*(_DWORD *)(v37 - 12) != 1) {
                      v22 += *(_DWORD *)(v37 - 4);
                    }
                    ++v36;
                    unint64_t v37 = (unint64_t)v38;
                  }
                  while (v36 < v54);
                  unsigned int v16 = (unsigned __int16)v36;
                }
                if (v16 >= v54)
                {
                  int v40 = 0;
                  int v42 = (unsigned __int16)v23;
                }
                else
                {
                  int v40 = 0;
                  int v41 = *(_DWORD *)(v55 + 32);
                  int v42 = (unsigned __int16)v23;
                  unint64_t v43 = v55 + 32 + ((unint64_t)v16 << 6);
                  unint64_t v44 = v54 - (unint64_t)v16;
                  unsigned __int16 v45 = (int *)v43;
                  do
                  {
                    int v46 = *v45;
                    v45 += 16;
                    unsigned int v47 = v46 - v41;
                    if (v46 - v41 <= v25 || v47 >= (unsigned __int16)v23) {
                      break;
                    }
                    if (*(_DWORD *)(v43 - 12) != 1) {
                      v40 += *(_DWORD *)(v43 - 4);
                    }
                    unint64_t v43 = (unint64_t)v45;
                    --v44;
                  }
                  while (v44);
                }
                LODWORD(v58) = v25 + v15;
                DWORD1(v58) = v42 - v25;
                DWORD2(v57) = v24 + v25 + v22;
                HIDWORD(v57) = v40 + v42 - v25;
                uint64_t v10 = bed_marker_InjectFixedRefMarker(v63, &v56);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v10 = bed_GetcElem(v63, &v54);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v10 = bed_GetpElem(v63, 0, &v55);
                if ((v10 & 0x80000000) != 0) {
                  break;
                }
              }
              if (v12 <= (unsigned __int16)v23) {
                goto LABEL_75;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v4 = v10;
LABEL_78:
  if (v63) {
    bed_ObjClose(v63);
  }
  return v4;
}

uint64_t utois_ScanRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, unsigned __int16 *a8, void *a9, int a10, char *a11, unsigned __int16 a12, unsigned __int16 a13, unsigned __int16 a14)
{
  uint64_t v244 = *MEMORY[0x263EF8340];
  uint64_t v220 = 0;
  uint64_t v221 = 0;
  uint64_t v14 = 2370838535;
  uint64_t v219 = 0;
  if (!a7) {
    return v14;
  }
  uint64_t v16 = a7;
  if ((InitRsrcFunction(a5, a6, &v219) & 0x80000000) != 0) {
    return v14;
  }
  if ((bed_ObjOpen(a5, a6, v16, 1020, &v221, 213) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  if ((bed_ObjOpen(a5, a6, v16, 1021, &v220, 213) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_ScanTaggedText");
  uint64_t v23 = v219;
  *(void *)&long long __b = 0;
  if (!v221 || !v220 || (datac_RequestBlock(v16, 1021, 1u, &__b) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  uint64_t v211 = a2;
  uint64_t v212 = a1;
  uint64_t v214 = a3;
  uint64_t v209 = a6;
  v210 = a5;
  v208 = a8;
  uint64_t v24 = __b;
  unsigned int v25 = *(unsigned __int16 *)(__b + 16);
  if (v25 >= 2)
  {
    uint64_t v218 = v23;
    unsigned int v216 = a4;
    uint64_t v26 = *(_DWORD **)(__b + 8);
    int v27 = 1;
    int v28 = 1;
    do
    {
      unsigned int v29 = &v26[16 * (unint64_t)(unsigned __int16)v28];
      if (v29[5] == 7 && v29[10] == 43 && (unsigned __int16)v25 > (unsigned __int16)(v27 + 1))
      {
        uint64_t v30 = (unsigned __int16)(v27 + 1);
        unsigned int v31 = &v26[16 * v30];
        while (v31[5] != 7)
        {
          LOWORD(v30) = v30 + 1;
          v31 += 16;
          if ((unsigned __int16)v25 == (unsigned __int16)v30) {
            goto LABEL_26;
          }
        }
        if (v31[10] == 43 && v26[16 * (unint64_t)(unsigned __int16)v28 + 8] == v31[8])
        {
          if ((unsigned __int16)v30 >= (unsigned __int16)(v27 + 1))
          {
            uint64_t v205 = v16;
            unsigned __int16 v32 = v27 + 1;
            do
            {
              int v33 = &v26[16 * (unint64_t)v32];
              uint64_t v36 = *((void *)v33 + 6);
              uint64_t v35 = v33 + 12;
              uint64_t v34 = v36;
              if (v36)
              {
                heap_Free(*(void **)(v218 + 8), v34);
                *uint64_t v35 = 0;
              }
              ++v32;
            }
            while (v32 <= (unsigned __int16)v30);
            uint64_t v24 = __b;
            uint64_t v16 = v205;
          }
          cstdlib_memmove(v31, &v26[16 * (unint64_t)((unsigned __int16)v30 + 1)], (uint64_t)(*(unsigned __int16 *)(v24 + 16) - (unsigned __int16)v30) << 6);
          unsigned __int16 v37 = *(_WORD *)(__b + 16) - 1;
          *(_WORD *)(__b + 16) = v37;
          cstdlib_memmove(&v26[16 * (unint64_t)(unsigned __int16)v28], &v26[16 * (unint64_t)(v27 + 1)], (uint64_t)(v37 - v27) << 6);
          uint64_t v24 = __b;
          LOWORD(v25) = *(_WORD *)(__b + 16) - 1;
          *(_WORD *)(__b + 16) = v25;
          --v28;
        }
      }
LABEL_26:
      int v27 = (unsigned __int16)++v28;
    }
    while ((unsigned __int16)v28 < (unsigned __int16)v25);
    a4 = v216;
    if ((unsigned __int16)v25 >= 2u)
    {
      int v38 = v26 + 6;
      int v39 = 1;
      unsigned __int16 v40 = 1;
      while (1)
      {
        while (1)
        {
          int v41 = &v26[16 * (unint64_t)v40];
          int v42 = v41 + 5;
          if (v41[5] != 7) {
            goto LABEL_79;
          }
          uint64_t v43 = (v39 + 1);
          if ((unsigned __int16)v25 > (unsigned __int16)(v39 + 1)) {
            break;
          }
LABEL_34:
          unsigned int v47 = &v26[16 * (unint64_t)v40];
          int v48 = v47[10];
          if (v48 != 15)
          {
            v47[9] = v26[9] + v26[8] - v47[8];
            if (v48 == 43)
            {
              uint64_t v49 = &v26[16 * (unint64_t)v40];
              unsigned int v50 = v49[6];
              unsigned int v51 = v26[7] + v26[6];
              BOOL v52 = v51 >= v50;
              unsigned int v53 = v51 - v50;
              if (v52) {
                v49[7] = v53;
              }
            }
            goto LABEL_79;
          }
          v47[9] = 0;
          if (!*v41) {
LABEL_36:
          }
            *int v42 = 999;
LABEL_79:
          int v39 = ++v40;
          if (v40 >= (unsigned __int16)v25)
          {
            a4 = v216;
            goto LABEL_88;
          }
        }
        unint64_t v44 = (unsigned __int16)(v39 + 1);
        unsigned __int16 v45 = &v26[16 * v44];
        int v46 = &v38[16 * v44];
        while (v45[5] != 7)
        {
          ++v44;
          v45 += 16;
          v46 += 16;
          if ((unsigned __int16)v25 == v44) {
            goto LABEL_34;
          }
        }
        unsigned __int16 v54 = &v26[16 * (unint64_t)v40];
        int v57 = v54[10];
        uint64_t v55 = v54 + 10;
        int v56 = v57;
        int v58 = v45[10];
        if (v57 == 43)
        {
          if (v58 == 43)
          {
            uint64_t v59 = *((void *)v45 + 6);
            if (v59)
            {
              v215 = v38;
              heap_Free(*(void **)(v218 + 8), v59);
              int v38 = v215;
              *((void *)v45 + 6) = 0;
            }
            int v60 = 0;
            v45[5] = 999;
          }
          else
          {
            if ((unsigned __int16)v25 > (unsigned __int16)v44)
            {
              unint64_t v62 = v44;
              do
              {
                unsigned int v63 = *(v46 - 1);
                BOOL v64 = v63 > 0x24 || ((1 << v63) & 0x1080200080) == 0;
                if (!v64 || v63 == 999)
                {
                  unsigned int v65 = *v46 - v26[16 * (unint64_t)v40 + 7];
                  *int v46 = v65;
                  if (v62 > (unsigned __int16)v44 && v65 > v45[6]) {
                    *int v46 = v65 - v45[7];
                  }
                }
                ++v62;
                v46 += 16;
              }
              while (v62 < (unsigned __int16)v25);
            }
            int v60 = 0;
          }
          int v66 = v45[6];
          int v67 = &v26[16 * (unint64_t)v40];
          int v68 = v67[6];
          goto LABEL_68;
        }
        if (v56 == v58) {
          break;
        }
        if (v26[16 * (unint64_t)v40 + 8] != v45[8])
        {
          if (v56 == 15 && !*v41) {
            goto LABEL_36;
          }
          int v60 = 0;
          int v66 = v45[6];
          int v67 = &v26[16 * (unint64_t)v40];
          int v68 = v67[6] + v67[7];
LABEL_68:
          v67[7] = v66 - v68;
LABEL_75:
          if (*v42 == 999)
          {
            if (v60) {
              goto LABEL_84;
            }
          }
          else
          {
            v26[16 * (unint64_t)v40 + 9] = v45[8] - v26[16 * (unint64_t)v40 + 8];
            if (v60)
            {
LABEL_84:
              uint64_t v71 = (unsigned __int16)v44 + 1;
              if (v71 < (unsigned __int16)v25)
              {
                BOOL v69 = &v26[16 * v71];
                size_t v70 = (uint64_t)((unsigned __int16)v25 - (unsigned __int16)v44) << 6;
                int v41 = v45;
                goto LABEL_86;
              }
              goto LABEL_87;
            }
          }
          goto LABEL_79;
        }
        *uint64_t v55 = v58;
        if (*v45) {
          goto LABEL_71;
        }
        v45[10] = v58;
        if (!*v41) {
          goto LABEL_36;
        }
        if (v43 < (unsigned __int16)v25)
        {
          BOOL v69 = &v26[16 * v43];
          size_t v70 = (uint64_t)((unsigned __int16)v25 - v39) << 6;
LABEL_86:
          v72 = v38;
          cstdlib_memmove(v41, v69, v70);
          int v38 = v72;
        }
LABEL_87:
        LOWORD(v25) = v25 - 1;
        int v39 = v40;
        a4 = v216;
        if (v40 >= (unsigned __int16)v25) {
          goto LABEL_88;
        }
      }
      if (v56 == 60 || v56 == 16)
      {
        int v60 = *v45;
        if (*v45) {
LABEL_71:
        }
          int v60 = 1;
        else {
          v45[5] = 999;
        }
      }
      else
      {
        int v60 = 0;
      }
      goto LABEL_75;
    }
  }
LABEL_88:
  *(_WORD *)(__b + 16) = v25;
  UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_ScanTextForSpell");
  uint64_t v74 = v220;
  uint64_t v73 = v221;
  *(void *)&long long v236 = 21;
  LOWORD(v230) = 0;
  __src = 0;
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  long long v242 = 0u;
  long long v243 = 0u;
  long long __b = 0u;
  long long v241 = 0u;
  uint64_t v231 = 0;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerSetTypeOfInput_0;
  long long v241 = unk_2206E4048;
  long long v242 = xmmword_2206E4058;
  long long v243 = unk_2206E4068;
  if (!v73) {
    goto LABEL_220;
  }
  if (!v74) {
    goto LABEL_220;
  }
  if ((bed_GetcElem(v73, &v230) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  if ((datac_RequestBlock(v16, 1012, 1u, &v231) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  uint64_t v75 = *(void *)(v231 + 8);
  if ((bed_Goto(v74, 0) & 0x80000000) != 0 || (bed_GetpElem(v74, 0, &__src) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  int v76 = *((_DWORD *)__src + 8);
  int v77 = bed_GoForward(v74, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v236);
  if ((v77 & 0x1FFF) != 0x14)
  {
    if (v77 < 0 || (bed_GetpElem(v74, 0xFFFFu, &v234) & 0x80000000) != 0) {
      goto LABEL_220;
    }
    uint64_t v126 = v234;
    if (v234)
    {
      while (1)
      {
        LOWORD(v229) = 1;
        v127 = (const char *)(v75 + *(unsigned int *)(v126 + 40));
        MarkerArgStr = marker_getMarkerArgStr(3u);
        if (!cstdlib_strcmp(v127, MarkerArgStr)) {
          goto LABEL_176;
        }
        v129 = (const char *)(v75 + *(unsigned int *)(v234 + 40));
        v130 = marker_getMarkerArgStr(4u);
        if (!cstdlib_strncmp(v129, v130, 6uLL)) {
          goto LABEL_176;
        }
        v131 = (const char *)(v75 + *(unsigned int *)(v234 + 40));
        v132 = marker_getMarkerArgStr(6u);
        if (cstdlib_strcmp(v131, v132)
          && (v133 = (const char *)(v75 + *(unsigned int *)(v234 + 40)),
              v134 = marker_getMarkerArgStr(7u),
              cstdlib_strcmp(v133, v134))
          && (v135 = (const char *)(v75 + *(unsigned int *)(v234 + 40)),
              v136 = marker_getMarkerArgStr(8u),
              cstdlib_strcmp(v135, v136)))
        {
          uint64_t v137 = a4;
          int v138 = 0;
          int v139 = 14;
        }
        else
        {
LABEL_176:
          uint64_t v137 = a4;
          v140 = (const char *)(v75 + *(unsigned int *)(v234 + 40));
          v141 = marker_getMarkerArgStr(5u);
          if (cstdlib_strcmp(v140, v141)
            && (v142 = (const char *)(v75 + *(unsigned int *)(v234 + 40)),
                v143 = marker_getMarkerArgStr(6u),
                cstdlib_strcmp(v142, v143))
            && (v144 = (const char *)(v75 + *(unsigned int *)(v234 + 40)),
                v145 = marker_getMarkerArgStr(7u),
                cstdlib_strcmp(v144, v145))
            && (v146 = (const char *)(v75 + *(unsigned int *)(v234 + 40)),
                v147 = marker_getMarkerArgStr(8u),
                cstdlib_strcmp(v146, v147)))
          {
            int v139 = 14;
          }
          else
          {
            int v139 = 44;
          }
          int v138 = 1;
        }
        LOWORD(v229) = 1;
        bed_GoForward(v74, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v229);
        int v148 = bed_GoForward(v74, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v236);
        if ((v148 & 0x1FFF) == 0x14)
        {
          uint64_t v233 = 0;
        }
        else if (v148 < 0 || (bed_GetpElem(v74, 0xFFFFu, &v233) & 0x80000000) != 0)
        {
          goto LABEL_220;
        }
        if (v138)
        {
          int v149 = *(_DWORD *)(v234 + 32);
          DWORD2(v241) = *(_DWORD *)(v234 + 24);
          LODWORD(v242) = v149;
          int v150 = v233 ? *(_DWORD *)(v233 + 32) : v76 + (unsigned __int16)v230;
          DWORD1(v242) = v150 - *(_DWORD *)(v234 + 32);
          DWORD2(v242) = v139;
          HIDWORD(v241) = DWORD1(v242);
          if (DWORD1(v242))
          {
            if ((bed_marker_InjectFixedRefMarker(v74, &__b) & 0x80000000) != 0) {
              goto LABEL_220;
            }
          }
        }
        int v151 = bed_GoForward(v74, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v236);
        if ((v151 & 0x1FFF) == 0x14) {
          break;
        }
        if (v151 < 0 || (bed_GetpElem(v74, 0xFFFFu, &v234) & 0x80000000) != 0) {
          goto LABEL_220;
        }
        uint64_t v126 = v234;
        a4 = v137;
        if (!v234) {
          goto LABEL_95;
        }
      }
      a4 = v137;
    }
  }
LABEL_95:
  UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_ScanTextForMWRegions");
  uint64_t v79 = v219;
  uint64_t v78 = v220;
  uint64_t v80 = v221;
  uint64_t v233 = 0;
  uint64_t v234 = 0;
  LOWORD(v227) = 0;
  uint64_t v230 = 0;
  uint64_t v231 = 0;
  size_t __len = 0;
  v224 = 0;
  size_t __n = 0;
  LODWORD(v229) = 0;
  long long v242 = 0u;
  long long v243 = 0u;
  long long __b = 0u;
  long long v241 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  long long v238 = 0u;
  long long v239 = 0u;
  LODWORD(v236) = 1;
  DWORD1(v237) = 998;
  cstdlib_memset(&__b, 0, 0x40uLL);
  long long __b = MarkerSetTypeOfInput_0;
  long long v241 = unk_2206E4048;
  long long v242 = xmmword_2206E4058;
  long long v243 = unk_2206E4068;
  cstdlib_memset(&v236, 0, 0x40uLL);
  long long v236 = MarkerUDCTREF_0;
  long long v237 = unk_2206E4088;
  long long v238 = xmmword_2206E4098;
  long long v239 = unk_2206E40A8;
  if (!v212) {
    goto LABEL_209;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v212 + 120))(v211, v214, &v229) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  if (!v229) {
    goto LABEL_209;
  }
  uint64_t v81 = a12 <= a13 ? a13 : a12;
  __src = 0;
  v224 = 0;
  if ((datac_RequestBlock(v16, 1021, 1u, &v233) & 0x80000000) != 0) {
    goto LABEL_220;
  }
  int v82 = bed_GetpElem(v80, 0, &v230);
  if (v82 < 0) {
    goto LABEL_220;
  }
  unsigned int v83 = *(unsigned __int16 *)(v233 + 16);
  if (!*(_WORD *)(v233 + 16) || *(_DWORD *)(*(void *)(v233 + 8) + 20) != 0x4000) {
    goto LABEL_220;
  }
  int v204 = v82;
  uint64_t v203 = v78;
  uint64_t v201 = v80;
  unsigned int v217 = a4;
  uint64_t v206 = v16;
  uint64_t v234 = *(void *)(v233 + 8);
  LOWORD(v227) = v83;
  if (v83 < 2)
  {
    uint64_t v86 = 0;
    goto LABEL_200;
  }
  int v84 = 0;
  int v85 = 0;
  uint64_t v86 = 0;
  uint64_t v200 = v81 + 1;
  unint64_t v87 = 1;
  uint64_t v88 = 2;
  uint64_t v89 = 168;
  while (1)
  {
    uint64_t v90 = v234 + (v87 << 6);
    if (*(_DWORD *)(v90 + 20) != 32 || *(_DWORD *)(v90 + 40) != 1) {
      goto LABEL_165;
    }
    int v91 = *(_DWORD *)(v234 + (v87 << 6) + 32);
    if (!v84 || v85 != v91) {
      break;
    }
    int v84 = 1;
LABEL_165:
    ++v87;
    unsigned int v83 = (unsigned __int16)v227;
    ++v88;
    v89 += 64;
    if (v87 >= (unsigned __int16)v227) {
      goto LABEL_200;
    }
  }
  unint64_t v92 = v83;
  uint64_t v93 = (int *)(v234 + v89);
  unint64_t v94 = v88;
  do
  {
    if (v94 >= v92) {
      goto LABEL_122;
    }
    unsigned __int16 v95 = v94;
    if (*(v93 - 5) == 32) {
      break;
    }
    int v96 = *v93;
    v93 += 16;
    ++v94;
  }
  while (!v96);
  uint64_t v97 = v95;
  uint64_t v98 = v234 + ((unint64_t)v95 << 6);
  if (*(_DWORD *)(v98 + 20) != 32)
  {
LABEL_122:
    int v84 = 1;
    int v85 = *(_DWORD *)(v234 + (v87 << 6) + 32);
    goto LABEL_165;
  }
  uint64_t v202 = v89;
  if (*(_DWORD *)(v98 + 40) || v91 == *(_DWORD *)(v234 + ((unint64_t)v95 << 6) + 32)) {
    goto LABEL_164;
  }
  int v204 = bed_Goto(v203, v87);
  if (v204 < 0) {
    goto LABEL_200;
  }
  int v102 = *(_DWORD *)(v234 + 32);
  int v199 = *(_DWORD *)(v234 + (v87 << 6) + 32) - v102;
  unsigned int v103 = (unsigned __int16)(*(_WORD *)(v234 + (v87 << 6) + 32) - v102);
  int v104 = (unsigned __int16)(*(_WORD *)(v234 + (v97 << 6) + 32) - v102);
  if (v217 == 1) {
    log_OutText(*(void *)(v79 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (scan for multiword in dict between text positions %u and %u)", v99, v100, v101, (unsigned __int16)(*(_WORD *)(v234 + (v87 << 6) + 32) - v102));
  }
  LOWORD(__len) = a13;
  if ((int)(v104 - v103) > a13) {
    goto LABEL_200;
  }
  LOWORD(__len) = v104 - v103;
  v105 = __src;
  if (__src)
  {
    size_t v106 = (unsigned __int16)(v104 - v103);
  }
  else
  {
    v105 = (char *)heap_Calloc(*(void **)(v79 + 8), a13 + 1, 1);
    __src = v105;
    if (!v105) {
      goto LABEL_318;
    }
    size_t v106 = (unsigned __int16)__len;
  }
  cstdlib_memmove(v105, (const void *)(v230 + v103), v106);
  if (v224 || (v224 = (char *)heap_Calloc(*(void **)(v79 + 8), 1, a14 + a12 * (unint64_t)a14 + 1)) != 0)
  {
    if (!v231)
    {
      int v204 = bed_ObjOpen(v210, v209, v206, 1029, &v231, 213);
      if (v204 < 0) {
        goto LABEL_200;
      }
    }
    if (v217 == 1)
    {
      if (!v86)
      {
        uint64_t v86 = (char *)heap_Calloc(*(void **)(v79 + 8), v200, 1);
        if (!v86) {
          goto LABEL_318;
        }
      }
      cstdlib_strncpy(v86, __src, (unsigned __int16)__len);
      v86[(unsigned __int16)__len] = 0;
      log_OutText(*(void *)(v79 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (lookup User Dict for \"%s\")", v111, v112, v113, (uint64_t)v86);
    }
    int v204 = utoin_LookUpUdctWord(v212, v211, v214, (uint64_t)&__src, 1, a13, a12, (uint64_t)&v235);
    if (v204 < 0) {
      goto LABEL_200;
    }
    if ((HIDWORD(__len) - 2) >= 2
      && HIDWORD(__len) != 43
      && (HIDWORD(__len) != 16 || !LH_stricmp(a11, "jpj") && HIDWORD(__len) != 2))
    {
      if (v217 == 1) {
        log_OutText(*(void *)(v79 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (no (valid) User Dict entry found)", v114, v115, v116, v197);
      }
      goto LABEL_164;
    }
    if (v217 == 1)
    {
      cstdlib_strncpy(v86, v224, (unsigned __int16)__n);
      v86[(unsigned __int16)__n] = 0;
      log_OutText(*(void *)(v79 + 32), (uint64_t)&modPP_5, 5, 0, (uint64_t)"[UTOIS] (found User Dict entry \"%s\")", v117, v118, v119, (uint64_t)v86);
    }
    if (LH_stricmp(a11, (char *)&v235)) {
      v120 = (char *)&v235;
    }
    else {
      v120 = 0;
    }
    int v204 = utoin_ReplaceWord(v201, v203, (unsigned __int16)v199, (uint64_t)&__src, 0, v206, v120);
    if (v204 < 0) {
      goto LABEL_200;
    }
    int v204 = bed_GetpElem(v201, 0, &v230);
    if (v204 < 0) {
      goto LABEL_200;
    }
    if (HIDWORD(__len) == 16)
    {
      int v204 = bed_Goto(v203, v87);
      if (v204 < 0) {
        goto LABEL_200;
      }
      uint64_t v124 = v234 + (v87 << 6);
      DWORD2(v241) = *(_DWORD *)(v124 + 24);
      HIDWORD(v241) = (unsigned __int16)__len;
      LODWORD(v242) = *(_DWORD *)(v124 + 32);
      DWORD1(v242) = *(_DWORD *)(v234 + (v97 << 6) + 32) - *(_DWORD *)(v124 + 32);
      DWORD2(v242) = 16;
      int v204 = bed_marker_InjectFixedRefMarker(v203, &__b);
      if (v204 < 0) {
        goto LABEL_200;
      }
      int v204 = bed_GetpElem(v203, 0, &v234);
      if (v204 < 0) {
        goto LABEL_200;
      }
      int v204 = bed_GetcElem(v203, &v227);
      if (v204 < 0) {
        goto LABEL_200;
      }
      uint64_t v125 = v234 + (v87 << 6);
      DWORD2(v237) = *(_DWORD *)(v125 + 24);
      HIDWORD(v237) = (unsigned __int16)__len;
      LODWORD(v238) = *(_DWORD *)(v125 + 32);
      DWORD1(v238) = *(_DWORD *)(v234 + (v97 << 6) + 32) - *(_DWORD *)(v125 + 32);
      int v123 = 16;
LABEL_161:
      DWORD2(v238) = v123;
      if ((bed_marker_InjectFixedRefMarker(v203, &v236) & 0x80000000) != 0) {
        goto LABEL_220;
      }
      int v204 = bed_GetpElem(v203, 0, &v234);
      if (v204 < 0) {
        goto LABEL_200;
      }
      int v204 = bed_GetcElem(v203, &v227);
      if (v204 < 0) {
        goto LABEL_200;
      }
      goto LABEL_164;
    }
    if (HIDWORD(__len) == 43)
    {
      int v204 = bed_Goto(v203, v87);
      if (v204 < 0) {
        goto LABEL_200;
      }
      uint64_t v121 = v234 + (v87 << 6);
      DWORD2(v241) = *(_DWORD *)(v121 + 24);
      HIDWORD(v241) = (unsigned __int16)__len;
      LODWORD(v242) = *(_DWORD *)(v121 + 32);
      DWORD1(v242) = (unsigned __int16)__n;
      DWORD2(v242) = 43;
      int v204 = bed_marker_InjectFixedRefMarker(v203, &__b);
      if (v204 < 0) {
        goto LABEL_200;
      }
      uint64_t v122 = v234 + (v87 << 6);
      DWORD2(v237) = *(_DWORD *)(v122 + 24);
      HIDWORD(v237) = (unsigned __int16)__len;
      LODWORD(v238) = *(_DWORD *)(v122 + 32);
      DWORD1(v238) = (unsigned __int16)__n;
      int v123 = 43;
      goto LABEL_161;
    }
LABEL_164:
    int v84 = 1;
    int v85 = v91;
    uint64_t v89 = v202;
    goto LABEL_165;
  }
LABEL_318:
  log_OutPublic(*(void *)(v79 + 32), (uint64_t)&modPP_5, 1923, 0, v107, v108, v109, v110, v197);
  int v204 = -1924128758;
LABEL_200:
  if (__src) {
    heap_Free(*(void **)(v79 + 8), (uint64_t)__src);
  }
  if (v224) {
    heap_Free(*(void **)(v79 + 8), (uint64_t)v224);
  }
  if (v86) {
    heap_Free(*(void **)(v79 + 8), (uint64_t)v86);
  }
  if (v231) {
    bed_ObjClose(v231);
  }
  uint64_t v16 = v206;
  a4 = v217;
  if (v204 < 0)
  {
LABEL_220:
    LODWORD(v14) = 0;
    goto LABEL_221;
  }
LABEL_209:
  UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_ScanUntaggedText");
  uint64_t v153 = v220;
  uint64_t v152 = v221;
  uint64_t v235 = 7;
  if (!v221 || !v220)
  {
LABEL_311:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_313;
    }
    goto LABEL_312;
  }
  int IsCursorAtEnd = bed_Goto(v221, 0);
  if (IsCursorAtEnd < 0
    || (int IsCursorAtEnd = bed_Goto(v153, 0), IsCursorAtEnd < 0)
    || (v227 = 0, int IsCursorAtEnd = bed_IsCursorAtEnd(v152, &v227), IsCursorAtEnd < 0))
  {
LABEL_310:
    LODWORD(v14) = IsCursorAtEnd;
    goto LABEL_311;
  }
  if (v227)
  {
    LODWORD(v14) = 0;
LABEL_216:
    if ((v14 & 0x1FFF) != 0xA) {
      LODWORD(v14) = 0;
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_313;
    }
    goto LABEL_312;
  }
  v156 = (char *)v209;
  uint64_t v207 = v16;
  while (2)
  {
    __int16 v226 = 0;
    int v157 = bed_GoForward(v153, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)&v235);
    if ((v157 & 0x80000000) == 0 || (LODWORD(v14) = v157, (v157 & 0x1FFF) == 0x14))
    {
      uint64_t v233 = 0;
      int v232 = 0;
      uint64_t v230 = 0;
      uint64_t v231 = 0;
      __src = 0;
      size_t __len = 0;
      v224 = 0;
      uint64_t v229 = 0;
      long long v238 = 0u;
      long long v239 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      __int16 v228 = 0;
      cstdlib_memset(&v236, 0, 0x40uLL);
      long long v236 = MarkerSetTypeOfInput_0;
      long long v237 = unk_2206E4048;
      long long v238 = xmmword_2206E4058;
      long long v239 = unk_2206E4068;
      cstdlib_memset(&__src, 0, 0x18uLL);
      size_t __len = (size_t)v210;
      v224 = v156;
      int v158 = bed_GetpElem(v153, 0, &v231);
      if (v158 < 0)
      {
        LODWORD(v14) = v158;
        uint64_t v159 = a4;
        goto LABEL_305;
      }
      uint64_t v159 = a4;
      int v160 = *(_DWORD *)(v231 + 24);
      int v161 = *(_DWORD *)(v231 + 32);
      int v162 = datac_RequestBlock(v16, 1021, 1u, &v229);
      if (v162 < 0)
      {
        LODWORD(v14) = v162;
        goto LABEL_305;
      }
      uint64_t v163 = *(void *)(v229 + 8);
      uint64_t v164 = *(unsigned __int16 *)(v229 + 16);
      int v165 = bed_GetpElem(v153, 0xFFFFu, &v230);
      if ((v165 & 0x1FFF) == 0xF)
      {
        int v166 = bed_GetcElem(v152, &v232);
        if (v166 < 0) {
          goto LABEL_303;
        }
        if (v164)
        {
          uint64_t v167 = 0;
          unsigned __int16 v168 = 0;
          v169 = (int *)(v163 + 20);
          do
          {
            int v170 = *v169;
            v169 += 16;
            if (v170 == 7) {
              unsigned __int16 v168 = v167;
            }
            ++v167;
          }
          while (v164 != v167);
          if (v168)
          {
            v171 = (_DWORD *)(v163 + ((unint64_t)v168 << 6));
            int v172 = v171[10];
            if (v172 == 44 || v172 == 14)
            {
              int v174 = v171[7] + v171[6];
            }
            else
            {
              int v181 = v171[6];
              if (v181 == v160)
              {
                uint64_t v195 = v163 + ((unint64_t)v168 << 6);
                if (*(_DWORD *)(v195 + 32) == v161)
                {
                  int v174 = *(_DWORD *)(v195 + 28) + v160;
                  goto LABEL_261;
                }
              }
              uint64_t v180 = v163 + ((unint64_t)v168 << 6);
LABEL_259:
              int v174 = *(_DWORD *)(v180 + 28) + v181;
            }
LABEL_261:
            int v213 = v174;
            int v166 = bed_GetiElem(v152, (_WORD *)&v232 + 1);
            if ((v166 & 0x80000000) == 0)
            {
              LOWORD(v232) = v232 - HIWORD(v232);
              int v166 = bed_Goto(v152, HIWORD(v232) + (unsigned __int16)v232);
              if ((v166 & 0x80000000) == 0)
              {
                int v166 = bed_Insert(v152, &v228, 1);
                if ((v166 & 0x80000000) == 0)
                {
                  int v166 = bed_GetpElem(v152, HIWORD(v232), &v233);
                  if ((v166 & 0x80000000) == 0)
                  {
                    __int16 v182 = v232;
                    if ((_WORD)v232)
                    {
                      int v183 = 0;
                      while (!*v208)
                      {
LABEL_284:
                        v183 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(v233 + (unsigned __int16)v183));
LABEL_285:
                        __int16 v182 = v232;
                        if ((unsigned __int16)v232 <= (unsigned __int16)v183) {
                          goto LABEL_286;
                        }
                      }
                      uint64_t v184 = 0;
                      unint64_t v185 = 0;
                      while (1)
                      {
                        v186 = (char *)v233;
                        int v187 = (unsigned __int16)v232;
                        uint64_t v234 = 0;
                        if (!v233
                          || (unsigned __int16)v232 <= (unsigned __int16)v183
                          || (InitRsrcFunction((_WORD *)__len, (int)v224, &v234) & 0x80000000) != 0)
                        {
                          LODWORD(v14) = -1924128761;
                          goto LABEL_304;
                        }
                        unsigned int v188 = nuance_pcre_exec(a9, a10, *((void *)v208 + 2) + *(unsigned int *)(*((void *)v208 + 1) + v184), 0, v186, v187, (unsigned __int16)v183, 0x10u, &__b, 30);
                        if ((v188 & 0x80000000) == 0)
                        {
                          if (v188)
                          {
                            LODWORD(__src) = *(_DWORD *)(*((void *)v208 + 1) + v184 + 4);
                            WORD2(__src) = __b;
                            HIWORD(__src) = WORD2(__b) - __b;
                          }
LABEL_279:
                          LODWORD(v194) = *v208;
LABEL_280:
                          if (v194 <= (unsigned __int16)v185) {
                            goto LABEL_284;
                          }
                          DWORD2(v237) = v213 + (unsigned __int16)v183;
                          HIDWORD(v237) = HIWORD(__src);
                          LODWORD(v238) = v161 + WORD2(__src) + HIWORD(v232);
                          DWORD1(v238) = HIWORD(__src);
                          DWORD2(v238) = __src;
                          int v166 = bed_marker_InjectFixedRefMarker(v153, &v236);
                          if ((v166 & 0x80000000) == 0)
                          {
                            int v166 = datac_RequestBlock(v207, 1021, 1u, &v229);
                            if ((v166 & 0x80000000) == 0)
                            {
                              int v183 = HIWORD(__src) + WORD2(__src);
                              goto LABEL_285;
                            }
                          }
                          goto LABEL_303;
                        }
                        unsigned int v189 = nuance_pcre_ErrorToLhError(v188);
                        if (v189 >> 20 != 2213) {
                          goto LABEL_279;
                        }
                        LODWORD(v14) = v189;
                        if ((v189 & 0x1FFF) != 0x14) {
                          break;
                        }
                        ++v185;
                        unint64_t v194 = *v208;
                        v184 += 8;
                        if (v185 >= v194) {
                          goto LABEL_280;
                        }
                      }
                      if ((v189 & 0x1FFF) == 0xA)
                      {
                        log_OutPublic(*(void *)(v234 + 32), (uint64_t)&modPP_5, 11002, 0, v190, v191, v192, v193, v198);
                        __int16 v182 = v232;
                        goto LABEL_294;
                      }
                      log_OutPublic(*(void *)(v234 + 32), (uint64_t)&modPP_5, 11027, (uint64_t)"%s%x", v190, v191, v192, v193, "lhError");
LABEL_304:
                      uint64_t v16 = v207;
                      v156 = (char *)v209;
LABEL_305:
                      if ((v14 & 0x80000000) != 0 && (v14 & 0x1FFF) != 0xA) {
                        goto LABEL_316;
                      }
                      __int16 v226 = 1;
                      bed_GoForward(v153, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v226);
                      int IsCursorAtEnd = bed_IsCursorAtEnd(v152, &v227);
                      a4 = v159;
                      if (IsCursorAtEnd < 0) {
                        goto LABEL_310;
                      }
                      if (v227) {
                        goto LABEL_216;
                      }
                      continue;
                    }
LABEL_286:
                    LODWORD(v14) = 0;
LABEL_294:
                    int v166 = bed_Remove(v152, (unsigned __int16)(HIWORD(v232) + v182), 1);
                    if ((v166 & 0x80000000) == 0)
                    {
                      if (!v230)
                      {
                        unsigned int v196 = (unsigned __int16)v232 + HIWORD(v232);
                        goto LABEL_300;
                      }
                      int v166 = bed_GetpElem(v153, 0xFFFFu, &v230);
                      if ((v166 & 0x80000000) == 0)
                      {
                        unsigned int v196 = (unsigned __int16)(v232 + HIWORD(v232) + *(_WORD *)(v230 + 36));
LABEL_300:
                        int v166 = bed_Goto(v152, v196);
                        if ((v166 & 0x80000000) == 0)
                        {
                          if ((v14 & 0x1FFF) != 0xA) {
                            LODWORD(v14) = 0;
                          }
                          goto LABEL_304;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_303:
            LODWORD(v14) = v166;
            goto LABEL_304;
          }
        }
      }
      else
      {
        LODWORD(v14) = v165;
        if (v165 < 0) {
          goto LABEL_305;
        }
        unsigned int v175 = *(_DWORD *)(v230 + 32);
        LOWORD(v232) = v175 - v161;
        if (v164)
        {
          uint64_t v176 = 0;
          unsigned __int16 v177 = 0;
          v178 = (int *)(v163 + 20);
          do
          {
            if (v178[3] >= v175) {
              break;
            }
            int v179 = *v178;
            v178 += 16;
            if (v179 == 7) {
              unsigned __int16 v177 = v176;
            }
            ++v176;
          }
          while (v164 != v176);
          if (v177)
          {
            uint64_t v180 = v163 + ((unint64_t)v177 << 6);
            int v181 = *(_DWORD *)(v180 + 24);
            goto LABEL_259;
          }
        }
      }
      int v174 = *(_DWORD *)(v163 + 24);
      goto LABEL_261;
    }
    break;
  }
  LODWORD(v159) = a4;
LABEL_316:
  LODWORD(a4) = v159;
  if ((v14 & 0x80000000) == 0)
  {
LABEL_313:
    UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_MarkUnknownRegions");
    if ((utois_MarkUnknownRegions(v221, v220) & 0x80000000) == 0)
    {
      UTOITrace(a4, v219, v221, v220, (uint64_t)"BEFORE utois_AlignMarkers");
      utois_AlignMarkers(v16);
    }
    goto LABEL_221;
  }
LABEL_312:
  if ((v14 & 0x1FFF) == 0xA) {
    goto LABEL_313;
  }
LABEL_221:
  if (v220) {
    bed_ObjClose(v220);
  }
  if (v221) {
    bed_ObjClose(v221);
  }
  if ((v14 & 0x1FFF) == 0xA) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t utois_MarkUnknownRegions(uint64_t a1, uint64_t a2)
{
  v21[1] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  v21[0] = 7;
  uint64_t v18 = 0;
  int v19 = 0;
  long long v17 = 0u;
  memset(__b, 0, sizeof(__b));
  cstdlib_memset(__b, 0, 0x40uLL);
  __b[0] = MarkerSetTypeOfInput_0;
  __b[1] = unk_2206E4048;
  __b[2] = xmmword_2206E4058;
  long long v17 = unk_2206E4068;
  uint64_t result = 2370838535;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = bed_Goto(a2, 0);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GetpElem(a2, 0, &v20);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v21);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v19);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!v19) {
      goto LABEL_7;
    }
    unsigned int v7 = v20[8];
    if (v19[8] > v7)
    {
      DWORD2(__b[1]) = v20[6];
      HIDWORD(__b[1]) = v19[6] - v20[6];
      LODWORD(__b[2]) = v7;
      *(void *)((char *)&__b[2] + 4) = (v19[8] - v20[8]);
    }
    unsigned int v8 = v20[8];
    int v5 = v20[9] + v8;
    int v6 = v20[7] + v20[6];
    if (v19[8] > v8) {
      goto LABEL_8;
    }
    while (1)
    {
LABEL_19:
      __int16 v15 = 1;
      bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsAt, (uint64_t)&v15);
      uint64_t result = bed_GoForward(a2, (uint64_t (*)(uint64_t, unint64_t))bed_marker_IsOfType, (uint64_t)v21);
      if ((result & 0x1FFF) == 0x14)
      {
        unsigned int v9 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v18);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v9 = v18;
        if (v18)
        {
          unsigned int v10 = v18[8];
          int v11 = v18[6];
          goto LABEL_26;
        }
      }
      unsigned int v10 = v5;
      int v11 = v6;
LABEL_26:
      int v12 = v19[9];
      unsigned int v13 = v12 + v19[8];
      if (v10 > v13)
      {
        int v14 = v19[7];
        DWORD2(__b[1]) = v14 + v19[6];
        HIDWORD(__b[1]) = v11 - (v14 + v19[6]);
        LODWORD(__b[2]) = v13;
        *(void *)((char *)&__b[2] + 4) = v10 - (v12 + v19[8]);
        uint64_t result = bed_marker_InjectFixedRefMarker(a2, __b);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (!v18) {
          return 0;
        }
        uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v18);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v9 = v18;
      }
      uint64_t result = 0;
      int v19 = v9;
      if (!v9) {
        return result;
      }
    }
  }
  int v19 = 0;
LABEL_7:
  *(_OWORD *)((char *)&__b[1] + 8) = *(_OWORD *)(v20 + 6);
  DWORD2(__b[2]) = 0;
  int v5 = v20[9] + v20[8];
  int v6 = v20[7] + v20[6];
LABEL_8:
  uint64_t result = bed_marker_InjectFixedRefMarker(a2, __b);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (v19)
  {
    uint64_t result = bed_GetpElem(a2, 0xFFFFu, &v19);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v19) {
      goto LABEL_19;
    }
  }
  return 0;
}

uint64_t utois_AlignMarkers(uint64_t a1)
{
  memset(__dst, 0, sizeof(__dst));
  uint64_t v21 = 0;
  uint64_t result = datac_RequestBlock(a1, 1021, 1u, &v21);
  if ((result & 0x80000000) == 0)
  {
    unint64_t v2 = *(unsigned __int16 *)(v21 + 16);
    if (*(_WORD *)(v21 + 16))
    {
      uint64_t v3 = *(void *)(v21 + 8);
      if (*(_DWORD *)(v3 + 20) == 0x4000 && v2 != 1)
      {
        uint64_t v5 = 1;
        do
        {
          int v6 = (_DWORD *)(v3 + (v5 << 6));
          if (v6[5] == 7 && v6[10] == 43 && v5 + 1 < v2)
          {
            unsigned int v8 = v6 + 9;
            unsigned int v9 = (unsigned __int16)(v5 + 1);
            do
            {
              uint64_t v10 = v3 + ((unint64_t)v9 << 6);
              unsigned int v13 = *(_DWORD *)(v10 + 32);
              int v11 = (unsigned int *)(v10 + 32);
              unsigned int v12 = v13;
              unsigned int v14 = *(_DWORD *)(v3 + (v5 << 6) + 32);
              if (v13 <= v14) {
                break;
              }
              if (v12 >= *v8 + v14) {
                break;
              }
              *int v11 = v14;
              ++v9;
            }
            while (v9 < v2);
          }
          ++v5;
        }
        while (v5 != v2);
        unsigned int v15 = 1;
        do
        {
          uint64_t v16 = v15 + 1;
          if (v16 >= v2
            || (long long v17 = (_OWORD *)(v3 + (v16 << 6)),
                uint64_t v18 = (_OWORD *)(v3 + ((unint64_t)v15 << 6)),
                *((_DWORD *)v17 + 8) >= *((_DWORD *)v18 + 8)))
          {
            ++v15;
          }
          else
          {
            cstdlib_memcpy(__dst, (const void *)(v3 + (v16 << 6)), 0x40uLL);
            long long v19 = v18[1];
            _OWORD *v17 = *v18;
            v17[1] = v19;
            long long v20 = v18[3];
            v17[2] = v18[2];
            v17[3] = v20;
            uint64_t result = (uint64_t)cstdlib_memcpy(v18, __dst, 0x40uLL);
            unsigned int v15 = 0;
          }
        }
        while (v15 < v2);
      }
    }
  }
  return result;
}

uint64_t sysdct_char_LookUp(void *a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5, int a6, const char *a7)
{
  LOBYTE(__c) = 0;
  uint64_t v37 = 0;
  unsigned __int16 v36 = 0;
  unsigned int v34 = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, unsigned __int16 *, int *))(*a1 + 96))(a1[1], a1[2], "char", a2, &v37, &v36, &__c);
  if ((v34 & 0x80000000) != 0 || !v36) {
    return v34;
  }
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = cstdlib_strchr(*(char **)(v37 + 8 * v9), __c);
    int v11 = *(const char **)(v37 + 8 * v9);
    unsigned __int16 v12 = cstdlib_strlen(v11);
    if (v10) {
      *uint64_t v10 = 0;
    }
    int v13 = cstdlib_strlen(v11) ? cstdlib_strlen(v11) + 1 : 1;
    if (v12 <= (unsigned __int16)v13)
    {
      unsigned int v14 = 0;
    }
    else
    {
      unsigned int v14 = (char *)(*(void *)(v37 + 8 * v9) + (unsigned __int16)v13);
      unsigned int v15 = cstdlib_strchr(v14, __c);
      if (v15) {
        *unsigned int v15 = 0;
      }
      if (cstdlib_strlen(v14)) {
        v13 += cstdlib_strlen(v14) + 1;
      }
      else {
        LOWORD(v13) = v13 + 1;
      }
    }
    if (v12 <= (unsigned __int16)v13)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = (char *)(*(void *)(v37 + 8 * v9) + (unsigned __int16)v13);
      long long v17 = cstdlib_strchr(v16, __c);
      if (v17) {
        char *v17 = 0;
      }
      LOWORD(v13) = cstdlib_strlen(v16) ? v13 + cstdlib_strlen(v16) + 1 : (unsigned __int16)v13 + 1;
    }
    if (v12 <= (unsigned __int16)v13) {
      goto LABEL_38;
    }
    uint64_t v18 = *(void *)(v37 + 8 * v9);
    long long v19 = (char *)(v18 + (unsigned __int16)v13);
    long long v20 = cstdlib_strchr(v19, __c);
    if (v20) {
      *long long v20 = 0;
    }
    if (v18)
    {
      uint64_t v21 = (char *)(v18 + (unsigned __int16)v13);
      do
      {
        int v22 = cstdlib_strchr(v21, 44);
        uint64_t v23 = v22;
        if (v22) {
          *int v22 = 0;
        }
        int v24 = cstdlib_strcmp(v21, a7);
        if (v23) {
          uint64_t v21 = v23 + 1;
        }
        else {
          uint64_t v21 = 0;
        }
      }
      while (v23 && v24);
      BOOL v25 = v24 == 0;
      if (!v24)
      {
        BOOL v25 = 1;
        goto LABEL_42;
      }
      if (cstdlib_strlen(v19)) {
        goto LABEL_49;
      }
    }
    else
    {
LABEL_38:
      BOOL v25 = 0;
    }
    if (cstdlib_strcmp("normal", a7)) {
      goto LABEL_49;
    }
LABEL_42:
    if (!a5) {
      goto LABEL_55;
    }
    if (a6 == 1) {
      break;
    }
    if (!a6) {
      goto LABEL_52;
    }
LABEL_49:
    if (!v25 && ++v9 < (unint64_t)v36) {
      continue;
    }
    return v34;
  }
  if (v16 && cstdlib_strlen(v16) && *v16 != 49) {
    goto LABEL_49;
  }
LABEL_52:
  if (v14 && cstdlib_strlen(v14))
  {
    unsigned __int16 v26 = cstdlib_strlen(v14);
    *a4 = v26;
    size_t v27 = v26 + 1;
    int v28 = a3;
    unsigned int v29 = v14;
    goto LABEL_56;
  }
LABEL_55:
  unsigned __int16 v30 = cstdlib_strlen(v11);
  *a4 = v30;
  size_t v27 = v30 + 1;
  int v28 = a3;
  unsigned int v29 = v11;
LABEL_56:
  cstdlib_memmove(v28, v29, v27);
  return v34;
}

uint64_t sysdct_wpcrf_LookUp_Chinese(void *a1, const void *a2, int a3, char *a4, char *a5, BOOL *a6)
{
  unsigned __int8 __c = 0;
  uint64_t v40 = 0;
  cstdlib_memcpy(__c_1, a2, (a3 + 1));
  __c_1[a3] = 0;
  unsigned __int16 v41 = 0;
  uint64_t v11 = (*(uint64_t (**)(void, void, const char *, unsigned char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", __c_1, &v40, &v41, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    if (v41)
    {
      uint64_t v12 = 0;
      while (1)
      {
        int v13 = cstdlib_strchr(*(char **)(v40 + 8 * v12), __c);
        if (v13) {
          break;
        }
        if (++v12 >= (unint64_t)v41) {
          return v11;
        }
      }
      uint64_t v18 = v13;
      long long v19 = *(const char **)(v40 + 8 * v12);
      uint64_t v20 = v13 - v19;
      if (v13 == v19)
      {
        int v22 = __c_1;
        uint64_t v21 = a4;
      }
      else
      {
        if (v20 < 0) {
          LODWORD(v20) = v19 - v13;
        }
        cstdlib_strncat(a5, v19, v20);
        uint64_t v21 = a4;
        int v22 = a5;
      }
      cstdlib_strcat(v21, v22);
      uint64_t v23 = v18 + 1;
      int v24 = cstdlib_strchr(v18 + 1, __c);
      if (v24)
      {
        BOOL v25 = v24;
        int v26 = 0;
        do
        {
          cstdlib_strcat(a4, " ");
          unsigned int v27 = v25 - v23;
          if (v25 - v23 < 0) {
            unsigned int v27 = v23 - v25;
          }
          uint64_t v28 = v27;
          cstdlib_strncat(a4, v23, v27);
          if (!v26)
          {
            BOOL v29 = v28 == 1 && *v23 == 49;
            *a6 = v29;
          }
          uint64_t v23 = v25 + 1;
          BOOL v25 = cstdlib_strchr(v25 + 1, __c);
          --v26;
        }
        while (v25);
      }
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "wpcrf", "NULL", &v40, &v41, &__c);
      uint64_t v11 = 2370838548;
      if ((v14 & 0x80000000) == 0 && v41)
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        while (1)
        {
          long long v17 = cstdlib_strchr(*(char **)(v40 + 8 * v16), __c);
          if (v17) {
            break;
          }
          if (++v16 >= (unint64_t)v41) {
            return v15;
          }
        }
        unsigned __int16 v30 = v17;
        unsigned int v31 = *(const char **)(v40 + 8 * v16);
        uint64_t v32 = v17 - v31;
        if (v17 == v31)
        {
          unsigned int v34 = __c_1;
          int v33 = a4;
        }
        else
        {
          if (v32 < 0) {
            LODWORD(v32) = v31 - v17;
          }
          cstdlib_strncat(a5, v31, v32);
          int v33 = a4;
          unsigned int v34 = a5;
        }
        cstdlib_strcat(v33, v34);
        uint64_t v35 = v30 + 1;
        unsigned __int16 v36 = cstdlib_strchr(v35, __c);
        if (v36)
        {
          uint64_t v37 = v36;
          do
          {
            cstdlib_strcat(a4, " ");
            unsigned int v38 = v37 - v35;
            if (v37 - v35 < 0) {
              unsigned int v38 = v35 - v37;
            }
            cstdlib_strncat(a4, v35, v38);
            uint64_t v35 = v37 + 1;
            uint64_t v37 = cstdlib_strchr(v37 + 1, __c);
          }
          while (v37);
        }
        return v15;
      }
    }
  }
  return v11;
}

uint64_t sysdct_wpdummy_LookUp_Chinese(void *a1, const void *a2, int a3, char *a4, char *a5, BOOL *a6)
{
  unsigned __int8 __c = 0;
  uint64_t v40 = 0;
  cstdlib_memcpy(__c_1, a2, (a3 + 1));
  __c_1[a3] = 0;
  unsigned __int16 v41 = 0;
  uint64_t v11 = (*(uint64_t (**)(void, void, const char *, unsigned char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", __c_1, &v40, &v41, &__c);
  if ((v11 & 0x80000000) == 0)
  {
    if (v41)
    {
      uint64_t v12 = 0;
      while (1)
      {
        int v13 = cstdlib_strchr(*(char **)(v40 + 8 * v12), __c);
        if (v13) {
          break;
        }
        if (++v12 >= (unint64_t)v41) {
          return v11;
        }
      }
      uint64_t v18 = v13;
      long long v19 = *(const char **)(v40 + 8 * v12);
      uint64_t v20 = v13 - v19;
      if (v13 == v19)
      {
        int v22 = __c_1;
        uint64_t v21 = a4;
      }
      else
      {
        if (v20 < 0) {
          LODWORD(v20) = v19 - v13;
        }
        cstdlib_strncat(a5, v19, v20);
        uint64_t v21 = a4;
        int v22 = a5;
      }
      cstdlib_strcat(v21, v22);
      uint64_t v23 = v18 + 1;
      int v24 = cstdlib_strchr(v18 + 1, __c);
      if (v24)
      {
        BOOL v25 = v24;
        int v26 = 0;
        do
        {
          cstdlib_strcat(a4, " ");
          unsigned int v27 = v25 - v23;
          if (v25 - v23 < 0) {
            unsigned int v27 = v23 - v25;
          }
          uint64_t v28 = v27;
          cstdlib_strncat(a4, v23, v27);
          if (!v26)
          {
            BOOL v29 = v28 == 1 && *v23 == 49;
            *a6 = v29;
          }
          uint64_t v23 = v25 + 1;
          BOOL v25 = cstdlib_strchr(v25 + 1, __c);
          --v26;
        }
        while (v25);
      }
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "dummymap", "NULL", &v40, &v41, &__c);
      uint64_t v11 = 2370838548;
      if ((v14 & 0x80000000) == 0 && v41)
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        while (1)
        {
          long long v17 = cstdlib_strchr(*(char **)(v40 + 8 * v16), __c);
          if (v17) {
            break;
          }
          if (++v16 >= (unint64_t)v41) {
            return v15;
          }
        }
        unsigned __int16 v30 = v17;
        unsigned int v31 = *(const char **)(v40 + 8 * v16);
        uint64_t v32 = v17 - v31;
        if (v17 == v31)
        {
          unsigned int v34 = __c_1;
          int v33 = a4;
        }
        else
        {
          if (v32 < 0) {
            LODWORD(v32) = v31 - v17;
          }
          cstdlib_strncat(a5, v31, v32);
          int v33 = a4;
          unsigned int v34 = a5;
        }
        cstdlib_strcat(v33, v34);
        uint64_t v35 = v30 + 1;
        unsigned __int16 v36 = cstdlib_strchr(v35, __c);
        if (v36)
        {
          uint64_t v37 = v36;
          do
          {
            cstdlib_strcat(a4, " ");
            unsigned int v38 = v37 - v35;
            if (v37 - v35 < 0) {
              unsigned int v38 = v35 - v37;
            }
            cstdlib_strncat(a4, v35, v38);
            uint64_t v35 = v37 + 1;
            uint64_t v37 = cstdlib_strchr(v37 + 1, __c);
          }
          while (v37);
        }
        return v15;
      }
    }
  }
  return v11;
}

uint64_t sysdct_char_LookUp_Chinese(void *a1, unsigned __int8 *a2, void *a3, unsigned __int16 *a4, int a5, int a6, const char *a7)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v14 = (unsigned __int16)utf8_determineUTF8CharLength(*a2);
  cstdlib_memcpy(__dst, a2, (v14 + 1));
  __dst[v14] = 0;
  *a4 = 0;
  return sysdct_char_LookUp(a1, (uint64_t)__dst, a3, a4, a5, a6, a7);
}

uint64_t sysdct_char_LookUp_Thai(void *a1, const char *a2, int a3, void *a4, unsigned __int16 *a5, int a6, int a7, const char *a8)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  cstdlib_strcpy(__dst, a2);
  __dst[a3] = 0;
  *a5 = 0;
  if (!a7 && a6 == 1 && __dst[0] == 32) {
    __dst[0] = -80;
  }
  return sysdct_char_LookUp(a1, (uint64_t)__dst, a4, a5, a6, a7, a8);
}

uint64_t getDictSolution(unsigned int a1, uint64_t a2, int __c, void *a4, unsigned __int16 *a5, const char *a6)
{
  int v6 = a5;
  if (!a1)
  {
LABEL_25:
    *int v6 = 0;
    return 0;
  }
  int v11 = 0;
  LOBYTE(v12) = 0;
  unsigned __int8 v13 = 0;
  unsigned __int8 v14 = 0;
  do
  {
    uint64_t v15 = cstdlib_strchr(*(char **)(a2 + 8 * v14), __c);
    if (!v15)
    {
      unsigned __int8 v13 = 0;
LABEL_27:
      int v6 = a5;
      int v22 = a4;
LABEL_28:
      uint64_t v12 = v13;
      goto LABEL_29;
    }
    *uint64_t v15 = 0;
    uint64_t v16 = v15 + 1;
    if (cstdlib_strlen(v15 + 1))
    {
      BOOL v17 = 0;
    }
    else
    {
      int v18 = cstdlib_strcmp("normal", a6);
      BOOL v17 = v18 == 0;
      if (!v18) {
        unsigned __int8 v13 = v14;
      }
    }
    if (cstdlib_strlen(v16) == 0 && v11 == 0)
    {
      LOBYTE(v12) = v14;
      int v11 = 1;
    }
    if (v17) {
      goto LABEL_27;
    }
    do
    {
      long long v19 = cstdlib_strchr(v16, 44);
      uint64_t v20 = v19;
      if (v19) {
        *long long v19 = 0;
      }
      int v21 = cstdlib_strcmp(v16, a6);
      if (!v21) {
        unsigned __int8 v13 = v14;
      }
      if (v20) {
        uint64_t v16 = v20 + 1;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    while (v20 && v21);
    ++v14;
  }
  while (a1 > v14 && v21);
  int v6 = a5;
  int v22 = a4;
  if (!v21) {
    goto LABEL_28;
  }
  if (v11 != 1) {
    goto LABEL_25;
  }
  uint64_t v12 = v12;
LABEL_29:
  unsigned __int16 v23 = cstdlib_strlen(*(const char **)(a2 + 8 * v12));
  *int v6 = v23;
  cstdlib_memmove(v22, *(const void **)(a2 + 8 * v12), v23 + 1);
  return 0;
}

uint64_t getDictBackTransSolution(void *a1, char *a2, unsigned int a3, uint64_t a4, int a5, char *a6, unsigned __int16 *a7, const char *a8)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  unsigned __int16 v54 = 0;
  cstdlib_strcpy(__dst, "");
  cstdlib_strcpy(__s1, "");
  if (a3)
  {
    uint64_t v49 = a2;
    unsigned int v50 = 0;
    int v46 = a7;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    __s = 0;
    BOOL v17 = 0;
    uint64_t v18 = 0;
    uint64_t v51 = a3;
    long long v19 = a8;
    while (1)
    {
      uint64_t v20 = *(char **)(a4 + 8 * v14);
      if (v20)
      {
        unsigned int v21 = 0;
        do
        {
          int v22 = cstdlib_strchr(v20, a5);
          if (!v22) {
            break;
          }
          *int v22 = 0;
          uint64_t v20 = v22 + 1;
          switch(v21)
          {
            case 1u:
              BOOL v17 = v20;
              break;
            case 3u:
              __s = v20;
              break;
            case 7u:
              unsigned int v50 = (unsigned __int8 *)v20;
              if (v17) {
                goto LABEL_15;
              }
              goto LABEL_46;
          }
        }
        while (v21++ < 7);
      }
      if (v17)
      {
LABEL_15:
        if (cstdlib_strcmp(v17, "") && !cstdlib_strstr(v17, v19))
        {
          __s = 0;
          BOOL v17 = 0;
        }
        else
        {
          if (__s)
          {
            int v24 = cstdlib_strchr(__s, 33);
            if (v24)
            {
              BOOL v25 = v24;
              char *v24 = 0;
              while (1)
              {
                int v26 = v25 + 1;
                unsigned int v27 = cstdlib_strchr(v25 + 1, 92);
                BOOL v25 = v27;
                if (v27) {
                  *unsigned int v27 = 0;
                }
                uint64_t v28 = cstdlib_strchr(v26, 40);
                if (v28) {
                  *uint64_t v28 = 0;
                }
                cstdlib_strcpy(a6, "");
                cstdlib_strcat(a6, "backtrans_");
                cstdlib_strcat(a6, v26);
                __int16 __c_1 = -1;
                unsigned __int8 __c = 0;
                unsigned __int16 v54 = 0;
                uint64_t v18 = (*(uint64_t (**)(void, void, const char *, char *, char ***, __int16 *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], "fecfg", a6, &v54, &__c_1, &__c);
                if ((v18 & 0x80000000) != 0) {
                  break;
                }
                if (__c_1)
                {
                  BOOL v29 = cstdlib_strchr(*v54, __c);
                  if (v29) {
                    *BOOL v29 = 0;
                  }
                  cstdlib_strcat(__dst, *v54);
                }
                if (!v25) {
                  goto LABEL_30;
                }
              }
              *int v46 = 0;
              return v18;
            }
LABEL_30:
            cstdlib_strcat(__s1, __s);
          }
          if ((!cstdlib_strcmp(v17, "") || cstdlib_strstr(v17, v19)) && v50)
          {
            unsigned int v30 = cstdlib_atoi(v50);
            unsigned int v31 = (unsigned __int16)cstdlib_strlen(v49);
            if (v31)
            {
              int v47 = v15;
              unsigned int v32 = 0;
              int v33 = 0;
              do
              {
                int v34 = v33;
                __int16 v35 = utf8_determineUTF8CharLength(v49[v32]);
                int v33 = v34 + 1;
                unsigned int v32 = (unsigned __int16)(v35 + v32);
              }
              while (v32 < v31);
              int v36 = (unsigned __int16)v30 >> 1;
              if (((v30 >> 1) & 0x7FFE) == 0) {
                int v36 = 1;
              }
              if (!(_WORD)v34) {
                unsigned int v30 = v36;
              }
              long long v19 = a8;
              int v15 = v47;
            }
            v15 += v30;
          }
          int v16 = 1;
        }
      }
      else
      {
LABEL_46:
        __s = 0;
      }
      if (++v14 == v51)
      {
        if (v16 && (_WORD)v15)
        {
          unsigned __int16 v37 = v15;
          unsigned int v38 = v49;
          size_t v39 = cstdlib_strlen(v49);
          a7 = v46;
          if (v39 + cstdlib_strlen(__dst) + 5 < *v46)
          {
            __c_3[0] = 0;
            __sprintf_chk(__c_3, 0, 0x80uLL, "%d", v37);
            unsigned __int16 v40 = cstdlib_strlen(v49);
            *int v46 = v40;
            cstdlib_memmove(a6, v49, v40 + 1);
            cstdlib_strcat(a6, "\\"");
            ++*v46;
            cstdlib_strcat(a6, __dst);
            *v46 += cstdlib_strlen(__dst);
            cstdlib_strcat(a6, "\\"");
            ++*v46;
            cstdlib_strcat(a6, __c_3);
            unsigned __int16 v41 = __c_3;
LABEL_59:
            *a7 += cstdlib_strlen(v41);
            return v18;
          }
        }
        else
        {
          a7 = v46;
          unsigned int v38 = v49;
          if (!v16) {
            goto LABEL_54;
          }
        }
        size_t v43 = cstdlib_strlen(v38);
        size_t v44 = cstdlib_strlen(__dst);
        if (v43 + v44 + cstdlib_strlen(__s1) + 3 >= *a7) {
          goto LABEL_54;
        }
        unsigned __int16 v45 = cstdlib_strlen(v38);
        *a7 = v45;
        cstdlib_memmove(a6, v38, v45 + 1);
        cstdlib_strcat(a6, "\\"");
        ++*a7;
        cstdlib_strcat(a6, __dst);
        *a7 += cstdlib_strlen(__dst);
        cstdlib_strcat(a6, "\\"");
        ++*a7;
        cstdlib_strcat(a6, __s1);
        unsigned __int16 v41 = __s1;
        goto LABEL_59;
      }
    }
  }
  uint64_t v18 = 0;
LABEL_54:
  *a7 = 0;
  return v18;
}

uint64_t sysdct_word_LookUp(void *a1, char *a2, unsigned char *a3, unsigned __int16 *a4, const char *a5)
{
  unsigned __int8 __c = 0;
  memset(v15, 0, sizeof(v15));
  *a3 = 0;
  if (!*((_DWORD *)a1 + 8))
  {
    uint64_t result = *((unsigned __int16 *)a1 + 12);
    if (!*((_WORD *)a1 + 12)) {
      return result;
    }
    if (result == 1)
    {
      cstdlib_strcpy(__c_1, "word");
      v15[0] = 0;
      uint64_t result = (*(uint64_t (**)(void, void, char *, char *, _WORD *, _WORD *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], __c_1, a2, &v15[1], v15, &__c);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v11 = v15[0];
      if (!v15[0]) {
        return result;
      }
    }
    else
    {
      unsigned int v12 = 0;
      while (1)
      {
        cstdlib_strcpy(__c_1, "word");
        unsigned __int8 v13 = LH_itoa(v12, v14, 0xAu);
        cstdlib_strcat(__c_1, v13);
        v15[0] = 0;
        uint64_t result = (*(uint64_t (**)(void, void, char *, char *, _WORD *, _WORD *, unsigned __int8 *))(*a1 + 96))(a1[1], a1[2], __c_1, a2, &v15[1], v15, &__c);
        if ((result & 0x80000000) == 0)
        {
          unsigned int v11 = v15[0];
          if (v15[0]) {
            break;
          }
        }
        if (++v12 >= *((unsigned __int16 *)a1 + 12)) {
          return result;
        }
      }
    }
    getDictSolution(v11, *(uint64_t *)&v15[1], __c, a3, a4, a5);
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, const char *, char *, _WORD *, _WORD *, unsigned __int8 *, void, void))(*a1 + 240))(a1[1], a1[2], "g2p", a2, &v15[1], v15, &__c, *((unsigned __int8 *)a1 + 24), 0);
  if ((result & 0x80000000) == 0)
  {
    if (v15[0]) {
      return getDictBackTransSolution(a1, a2, v15[0], *(uint64_t *)&v15[1], __c, a3, a4, a5);
    }
  }
  return result;
}

uint64_t sysdct_word_LookUp_Chinese(void *a1, const void *a2, unsigned int a3, unsigned char *a4, unsigned __int16 *a5, const char *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  cstdlib_memcpy(__dst, a2, a3 + 1);
  __dst[a3] = 0;
  return sysdct_word_LookUp(a1, __dst, a4, a5, a6);
}

uint64_t sysdct_word_LookUp_Thai(void *a1, const char *a2, int a3, unsigned char *a4, unsigned __int16 *a5, const char *a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  cstdlib_strcpy(__dst, a2);
  __dst[a3] = 0;
  return sysdct_word_LookUp(a1, __dst, a4, a5, a6);
}

uint64_t wordm_sysdct_CharLookup_Chinese(void *a1, unsigned __int8 *a2, int a3, uint64_t a4, unsigned int a5, int a6, const char *a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    LODWORD(v14) = a3;
    *(_DWORD *)a4 = 0;
    cstdlib_memset((void *)(a4 + 4), 0, 0x41uLL);
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    cstdlib_memset((void *)(a4 + 76), 0, 0x101uLL);
    *(_WORD *)(a4 + 334) = 0;
    if (v14 >= 0x40) {
      size_t v14 = 64;
    }
    else {
      size_t v14 = v14;
    }
    cstdlib_memmove(__dst, a2, v14);
    __dst[v14] = 0;
    if (v14)
    {
      if (v14 > a5) {
        __dst[a5] = 0;
      }
      unsigned int v15 = cstdlib_strlen(__dst);
      if (utf8_ToLower(__dst, 0, (uint64_t)&v25)
        || utf8_BelongsToSet(0, __dst, 0, v15) == 1
        || utf8_BelongsToSet(6u, __dst, 0, v15) == 1
        || utf8_BelongsToSet(7u, __dst, 0, v15) == 1
        || utf8_BelongsToSet(0xAu, __dst, 0, v15) == 1)
      {
        int v16 = 3;
      }
      else if (utf8_BelongsToSet(0xCu, __dst, 0, v15) == 1)
      {
        int v16 = 3;
      }
      else
      {
        int v16 = 2;
      }
      *(_DWORD *)a4 = v16;
      unsigned __int16 v17 = utf8_determineUTF8CharLength(__dst[0]);
      cstdlib_memmove((void *)(a4 + 4), __dst, v17);
      __dst[v17] = 0;
      *(unsigned char *)(a4 + v17 + 4) = 0;
      *(_WORD *)(a4 + 70) = v17;
      unsigned __int16 v25 = 256;
      if (sysdct_char_LookUp_Chinese(a1, (unsigned __int8 *)__dst, (void *)(a4 + 76), &v25, 1, a6, a7)
        || (unsigned __int16 v18 = v25) == 0)
      {
        uint64_t result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        uint64_t result = 0;
        int v19 = *(unsigned __int8 *)(a4 + 76);
        *(unsigned char *)(a4 + 76 + v25) = 0;
        *(_WORD *)(a4 + 334) = v18;
        if (v19 == 35)
        {
          char v20 = cstdlib_atoi((unsigned __int8 *)(a4 + 77));
          uint64_t result = 0;
          *(unsigned char *)(a4 + 76) = v20;
          *(unsigned char *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
        }
      }
    }
    else
    {
      int v21 = 0;
      do
      {
        size_t v22 = (unsigned __int16)v21;
        int v23 = a2[(unsigned __int16)v21++];
      }
      while (v23 == 32);
      cstdlib_memmove((void *)(a4 + 4), a2, v22);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_sysdct_CharLookup_Thai(void *a1, unsigned __int8 *a2, int a3, uint64_t a4, unsigned int a5, int a6, const char *a7)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    LODWORD(v14) = a3;
    *(_DWORD *)a4 = 0;
    cstdlib_memset((void *)(a4 + 4), 0, 0x41uLL);
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    cstdlib_memset((void *)(a4 + 76), 0, 0x101uLL);
    *(_WORD *)(a4 + 334) = 0;
    if (v14 >= 0x40) {
      size_t v14 = 64;
    }
    else {
      size_t v14 = v14;
    }
    cstdlib_memmove(__dst, a2, v14);
    __dst[v14] = 0;
    if (v14)
    {
      if (v14 > a5) {
        __dst[a5] = 0;
      }
      if (__dst[0] < 0) {
        int v15 = 2;
      }
      else {
        int v15 = 3;
      }
      *(_DWORD *)a4 = v15;
      cstdlib_memmove((void *)(a4 + 4), __dst, 1uLL);
      *(unsigned char *)(a4 + 5) = 0;
      *(_WORD *)(a4 + 70) = 1;
      unsigned __int16 v20 = 256;
      if (sysdct_char_LookUp_Thai(a1, __dst, 1, (void *)(a4 + 76), &v20, 1, a6, a7) || (unsigned __int16 v16 = v20) == 0)
      {
        uint64_t result = 0;
        *(_DWORD *)a4 = 0;
      }
      else
      {
        uint64_t result = 0;
        *(unsigned char *)(a4 + v20 + 76) = 0;
        *(_WORD *)(a4 + 334) = v16;
      }
    }
    else
    {
      int v17 = 0;
      do
      {
        size_t v18 = (unsigned __int16)v17;
        int v19 = a2[(unsigned __int16)v17++];
      }
      while (v19 == 32);
      cstdlib_memmove((void *)(a4 + 4), a2, v18);
      return 0;
    }
  }
  return result;
}

uint64_t wordm_mapt2s(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v6 = 0;
  do
  {
    unsigned int v7 = (unsigned __int8 *)(a2 + v6);
    int v15 = 7549556;
    char v14 = 0;
    uint64_t v13 = 0;
    __int16 v12 = 0;
    unsigned __int16 v8 = utf8_determineUTF8CharLength(*v7);
    cstdlib_memmove(__dst, v7, v8);
    __dst[v8] = 0;
    uint64_t v9 = (*(uint64_t (**)(void, void, int *, unsigned char *, const void ***, __int16 *, char *))(*a1 + 96))(a1[1], a1[2], &v15, __dst, &v13, &v12, &v14);
    if ((v9 & 0x80000000) == 0)
    {
      if (v12)
      {
        unsigned __int16 v10 = utf8_determineUTF8CharLength(*(unsigned __int8 *)*v13);
        if (v10 == v8) {
          cstdlib_memmove((void *)(a2 + v6), *v13, v10);
        }
      }
    }
    v6 += (unsigned __int16)utf8_determineUTF8CharLength(*v7);
  }
  while (v6 < a3 && (v9 & 0x80000000) == 0);
  return v9;
}

uint64_t GetInDomainSegmentation(uint64_t a1, void *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6, char *__s, uint64_t *a8, __int16 *a9, __int16 a10, int a11, unsigned __int8 a12)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v18 = 2350915594;
  uint64_t v19 = *a8;
  unsigned __int16 v20 = *(void **)(a1 + 8);
  int v21 = cstdlib_strlen(__s);
  uint64_t v22 = (char *)heap_Calloc(v20, 1, (v21 + 1));
  if (!v22) {
    return v18;
  }
  int v23 = v22;
  unsigned int v31 = a8;
  cstdlib_strcpy(v22, __s);
  unsigned __int16 v24 = a5 - a4;
  unsigned __int16 v25 = a6 - a4;
  if ((unsigned __int16)(a5 - a4) >= (unsigned __int16)(a6 - a4))
  {
    uint64_t v26 = 0;
    goto LABEL_24;
  }
  uint64_t v26 = 0;
  while (1)
  {
    long long v35 = 0u;
    memset(__b, 0, sizeof(__b));
    cstdlib_memset(__b, 0, 0x150uLL);
    if (a11 == 1)
    {
      uint64_t v26 = wordm_sysdct_Lookup_Thai(a2, (const char *)(a3 + v24), (uint64_t)__b, 22, v23);
      if ((v26 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      if (LODWORD(__b[0]) != 5 && LODWORD(__b[0]) != 2) {
        goto LABEL_18;
      }
    }
    else
    {
      if (a11) {
        goto LABEL_18;
      }
      uint64_t v26 = wordm_sysdct_Lookup_Chinese(a2, (unsigned __int8 *)(a3 + v24), (unsigned __int16)(a10 - v24), (uint64_t)__b, a12, v23);
      if ((v26 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      if (LODWORD(__b[0]) > 5 || ((1 << SLOBYTE(__b[0])) & 0x34) == 0) {
        goto LABEL_18;
      }
    }
    if (*a9)
    {
      uint64_t v27 = heap_Realloc(*(uint64_t **)(a1 + 8), v19, 340 * (unsigned __int16)*a9 + 341);
      if (!v27) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, 341);
    if (!v27) {
      break;
    }
LABEL_17:
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9) = v24;
    cstdlib_strcpy((char *)(v27 + 340 * (unsigned __int16)*a9 + 8), (const char *)__b + 4);
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 74) = WORD3(__b[4]);
    cstdlib_strcpy((char *)(v27 + 340 * (unsigned __int16)*a9 + 80), (const char *)&__b[4] + 12);
    *(_WORD *)(v27 + 340 * (unsigned __int16)*a9 + 338) = HIWORD(v35);
    __int16 v28 = *a9;
    uint64_t v29 = v27 + 340 * (unsigned __int16)*a9;
    *(_DWORD *)(v29 + 4) = __b[0];
    *(_DWORD *)(v29 + 76) = DWORD2(__b[4]);
    *a9 = v28 + 1;
    uint64_t v19 = v27;
LABEL_18:
    if (WORD3(__b[4])) {
      v24 += WORD3(__b[4]);
    }
    else {
      unsigned __int16 v24 = v25;
    }
    if (v24 >= v25) {
      goto LABEL_24;
    }
  }
  uint64_t v19 = 0;
LABEL_27:
  uint64_t v26 = 2350915594;
LABEL_24:
  heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
  *unsigned int v31 = v19;
  return v26;
}

uint64_t getDomainSegmentations(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t *a7, __int16 *a8, int a9, unsigned __int8 a10)
{
  uint64_t v40 = 0;
  unsigned __int16 v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  MarkerArgStr = (char *)marker_getMarkerArgStr(1u);
  uint64_t v19 = bed_GetpElem(a5, 0, &v37);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v19 = bed_GetpElem(a5, 0xFFFFu, &v38);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v35 = a3;
  uint64_t v36 = a8;
  int v20 = *(_DWORD *)(v38 + 32);
  int v21 = *(_DWORD *)(v37 + 32);
  uint64_t v19 = bed_GetpElem(a5, 0, &v40);
  if ((v19 & 0x80000000) != 0) {
    return v19;
  }
  uint64_t v22 = bed_GetcElem(a5, &v39);
  if ((v22 & 0x80000000) == 0)
  {
    LOWORD(v20) = v20 - v21;
    int v34 = a2;
    __int16 v33 = v20;
    if (v39)
    {
      uint64_t v23 = 0;
      unsigned __int16 v24 = (unsigned int *)(v40 + 40);
      while (*(v24 - 2) <= *(_DWORD *)(v38 + 32))
      {
        if (*(v24 - 5) == 21) {
          MarkerArgStr = (char *)(*(void *)(a6 + 8) + *v24);
        }
        v24 += 16;
        if (v39 == ++v23) {
          goto LABEL_24;
        }
      }
      LODWORD(v23) = (unsigned __int16)v23;
    }
    else
    {
      LODWORD(v23) = 0;
    }
    if (v23 >= v39)
    {
LABEL_24:
      unsigned int v25 = a4 + (unsigned __int16)v20;
    }
    else
    {
      unsigned int v32 = a7;
      unsigned int v25 = a4 + (unsigned __int16)v20;
      unint64_t v26 = (unint64_t)v23 << 6;
      unint64_t v27 = v23;
      do
      {
        if (v25 < (unsigned __int16)(*(_WORD *)(v40 + v26 + 32) - *(_DWORD *)(v37 + 32))) {
          break;
        }
        if (*(_DWORD *)(v40 + v26 + 20) == 21
          && cstdlib_strcmp(MarkerArgStr, (const char *)(*(void *)(a6 + 8) + *(unsigned int *)(v40 + v26 + 40))))
        {
          uint64_t v28 = *(unsigned int *)(v40 + v26 + 40);
          uint64_t v29 = marker_getMarkerArgStr(1u);
          if (cstdlib_strcmp(MarkerArgStr, v29))
          {
            uint64_t v22 = GetInDomainSegmentation(a1, v34, v35, v33, v20, (unsigned __int16)*(_DWORD *)(v40 + v26 + 32) - (unsigned __int16)*(_DWORD *)(v37 + 32), MarkerArgStr, v32, v36, a4, a9, a10);
            if ((v22 & 0x80000000) != 0) {
              return v22;
            }
          }
          MarkerArgStr = (char *)(*(void *)(a6 + 8) + v28);
          int v20 = *(_DWORD *)(v40 + v26 + 32) - *(_DWORD *)(v37 + 32);
        }
        ++v27;
        v26 += 64;
      }
      while (v27 < v39);
      a7 = v32;
    }
    if (v25 >= (unsigned __int16)v20)
    {
      unsigned int v30 = marker_getMarkerArgStr(1u);
      if (cstdlib_strcmp(MarkerArgStr, v30)) {
        return GetInDomainSegmentation(a1, v34, v35, v33, v20, v25, MarkerArgStr, a7, v36, a4, a9, a10);
      }
    }
  }
  return v22;
}

uint64_t DoTHTLatin(uint64_t a1, void *a2, unsigned __int8 *a3, int a4, char **a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  uint64_t v7 = wordm_sysdct_CharLookup_Thai(a2, a3, a4, (uint64_t)v12, 0x16u, 0, "normal");
  if (!v7)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = cstdlib_strlen((const char *)&v12[4] + 12);
    unsigned __int16 v10 = (char *)heap_Alloc(v8, (v9 + 3));
    *a5 = v10;
    if (v10) {
      cstdlib_strcpy(v10, (const char *)&v12[4] + 12);
    }
  }
  return v7;
}

uint64_t DoMaxWords(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  uint64_t v20 = a1;
  uint64_t v21 = a14;
  uint64_t v115 = *MEMORY[0x263EF8340];
  unsigned __int16 v112 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  unsigned __int16 v108 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(void *)(v21 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v23 = LogLevel > 4;
  uint64_t DomainSegmentations = bed_GetpElem(a7, 0xFFFFu, &v111);
  if ((DomainSegmentations & 0x80000000) != 0) {
    return DomainSegmentations;
  }
  int v100 = a15;
  if (a5 && a5 != (unsigned __int16)*(_DWORD *)(v111 + 36)) {
    *(_DWORD *)(v21 + 16) = 0;
  }
  unsigned int v28 = a16;
  log_OutText(*(void *)(v20 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a5);
  UTOITrace(v23, v20, a6, a7, (uint64_t)"START of normalization");
  if (v100 == 1)
  {
    uint64_t DomainSegmentations = getDomainSegmentations(v20, (void *)a3, (uint64_t)a4, a5, a7, a10, &v109, (__int16 *)&v108, 0, v28);
    if ((DomainSegmentations & 0x80000000) != 0) {
      return DomainSegmentations;
    }
  }
  uint64_t v29 = a5;
  if (a5)
  {
    uint64_t v92 = a7;
    uint64_t v93 = a2;
    unint64_t v91 = a6;
    uint64_t v30 = 0;
    LOWORD(a6) = 0;
    __int16 v98 = 0;
    unsigned __int16 v31 = 0;
    uint64_t v101 = a12;
    int v94 = a11;
    int v99 = a13;
    uint64_t v95 = v21;
    uint64_t v96 = v20;
    uint64_t v104 = a5;
    unsigned int v97 = v28;
    do
    {
      long long v114 = 0u;
      memset(__dst, 0, sizeof(__dst));
      if (v100 == 1 && v108 > (unsigned __int16)a6)
      {
        unsigned __int16 v32 = 0;
        a6 = (unsigned __int16)a6;
        __int16 v33 = (unsigned __int16 *)(v109 + 340 * (unsigned __int16)a6);
        while (1)
        {
          unsigned int v34 = *v33;
          if (v34 > v31) {
            break;
          }
          v33 += 170;
          if (v34 == v31) {
            unsigned __int16 v32 = a6;
          }
          ++a6;
          if (v34 == v31 || a6 >= v108)
          {
            if (v34 != v31) {
              break;
            }
            cstdlib_memcpy(__dst, (const void *)(v109 + 340 * v32 + 4), 0x150uLL);
            goto LABEL_23;
          }
        }
      }
      uint64_t v39 = wordm_sysdct_Lookup_Chinese((void *)a3, (unsigned __int8 *)&a4[v31], (unsigned __int16)(v29 - v31), (uint64_t)__dst, v28, "normal");
      if ((v39 & 0x80000000) != 0)
      {
LABEL_79:
        size_t v43 = 0;
LABEL_80:
        uint64_t v83 = v39;
        goto LABEL_95;
      }
LABEL_23:
      if (LODWORD(__dst[0]) <= 5 && ((1 << SLOBYTE(__dst[0])) & 0x34) != 0)
      {
        if (v99)
        {
          unsigned __int16 v40 = cstdlib_strlen(szWORD_BEG_1);
          uint64_t v39 = bed_Insert(a8, szWORD_BEG_1, v40);
          if ((v39 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          *v101 += cstdlib_strlen(szWORD_BEG_1);
        }
        size_t v41 = (unsigned __int16)(cstdlib_strlen((const char *)&__dst[4] + 12) + 1);
        int v42 = (char *)heap_Alloc(*(void *)(v20 + 8), v41);
        if (!v42) {
          return 2350915594;
        }
        size_t v43 = v42;
        cstdlib_memset(v42, 0, v41);
        cstdlib_strcpy(v43, (const char *)&__dst[4] + 12);
        unsigned __int16 v44 = cstdlib_strlen((const char *)&__dst[4] + 12);
        uint64_t v39 = bed_Insert(a8, v43, v44);
        if ((v39 & 0x80000000) != 0) {
          goto LABEL_80;
        }
        *v101 += cstdlib_strlen((const char *)&__dst[4] + 12);
        heap_Free(*(void **)(v20 + 8), (uint64_t)v43);
        if (v99)
        {
          unsigned __int16 v45 = cstdlib_strlen(szWORD_END_1);
          uint64_t v39 = bed_Insert(a8, szWORD_END_1, v45);
          if ((v39 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          *v101 += cstdlib_strlen(szWORD_END_1);
        }
        uint64_t v39 = bed_GetcElem(a8, &v112);
        if ((v39 & 0x80000000) != 0) {
          goto LABEL_79;
        }
        int v46 = *(_DWORD *)(a3 + 32);
        uint64_t v47 = a10;
        int v48 = (char *)&__dst[4] + 6;
        if (v46) {
          int v48 = (char *)&v114 + 14;
        }
        if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                              + 4 * *(_WORD *)v48
                                                                              + 5))
        {
          uint64_t v39 = datac_RequestBlock(a9, v94, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *(_WORD *)v48 + 5), &a10);
          if ((v39 & 0x80000000) != 0) {
            goto LABEL_79;
          }
          uint64_t v47 = a10;
          int v46 = *(_DWORD *)(a3 + 32);
        }
        uint64_t v49 = *(void *)(v47 + 8);
        unsigned int v50 = *(unsigned __int16 *)(v47 + 16);
        unsigned int v51 = *(unsigned __int16 *)(v47 + 2);
        __int16 v52 = v49 + v51 * v50;
        char v107 = 0;
        int __src = 0;
        if (v46)
        {
          unsigned int v53 = HIWORD(v114);
          unsigned __int16 v54 = (unsigned char *)(v49 + v51 * (unint64_t)v50);
          if (HIWORD(v114))
          {
            unsigned int NextUtf8Offset = 0;
            unsigned __int16 v54 = (unsigned char *)(v49 + v51 * (unint64_t)v50);
            do
            {
              if (*((unsigned char *)&__dst[4] + NextUtf8Offset + 12) == 92) {
                break;
              }
              unsigned int WCharFromUtf8 = utf8_GetWCharFromUtf8((unsigned char *)&__dst[4] + 12, NextUtf8Offset, v53);
              LH_itoa(WCharFromUtf8, (char *)&__src, 0x10u);
              cstdlib_memcpy(v54, (char *)&__src + 2, 2uLL);
              cstdlib_memcpy(v54 + 2, &__src, 2uLL);
              v54 += 4;
              unsigned int NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset((char *)&__dst[4] + 12, NextUtf8Offset);
              unsigned int v53 = HIWORD(v114);
            }
            while (HIWORD(v114) > NextUtf8Offset);
          }
        }
        else
        {
          unsigned __int16 v54 = (unsigned char *)(v49 + v51 * (unint64_t)v50);
          if (WORD3(__dst[4]))
          {
            unsigned int v58 = 0;
            unsigned __int16 v54 = (unsigned char *)(v49 + v51 * (unint64_t)v50);
            do
            {
              int v59 = v58 + v30;
              if (v58 + v30 >= a5) {
                break;
              }
              unsigned int v60 = utf8_GetWCharFromUtf8(a4, v58 + v30, a5);
              LH_itoa(v60, (char *)&__src, 0x10u);
              cstdlib_memcpy(v54, (char *)&__src + 2, 2uLL);
              cstdlib_memcpy(v54 + 2, &__src, 2uLL);
              v54 += 4;
              unsigned int v58 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v59) - v30);
            }
            while (v58 < WORD3(__dst[4]));
          }
        }
        int v57 = 0;
        *unsigned __int16 v54 = 0;
        *(_WORD *)(a10 + 16) += (_WORD)v54 - v52 + 1;
        uint64_t v21 = v95;
        uint64_t v20 = v96;
      }
      else
      {
        log_OutText(*(void *)(v20 + 32), v93, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v36, v37, v38, v30);
        int v57 = 1;
      }
      if (*(_DWORD *)(v21 + 16) == 1)
      {
        unsigned int v61 = *(unsigned __int16 *)(v21 + 8);
        uint64_t v62 = *(void *)v21;
        if (v61 >= *(unsigned __int16 *)(v21 + 10))
        {
          uint64_t v63 = heap_Realloc(*(uint64_t **)(v20 + 8), v62, 12 * *(unsigned __int16 *)(v21 + 10) + 121);
          if (!v63)
          {
            size_t v43 = 0;
            uint64_t v83 = 2350915594;
            goto LABEL_95;
          }
          uint64_t v62 = v63;
          *(void *)uint64_t v21 = v63;
          *(_WORD *)(v21 + 10) += 10;
          unsigned int v61 = *(unsigned __int16 *)(v21 + 8);
        }
        LODWORD(v29) = a5;
        unsigned int v64 = v61;
        uint64_t v65 = v62 + 12 * v61;
        *(_WORD *)uint64_t v65 = v98;
        *(void *)(v65 + 2) = 0;
        int v66 = WORD3(__dst[4]);
        if (v57) {
          *(_DWORD *)(v62 + 12 * v64 + 4) = 1;
        }
        v98 += v66;
        *(_WORD *)(v21 + 8) = v64 + 1;
      }
      else
      {
        int v66 = WORD3(__dst[4]);
        LODWORD(v29) = a5;
      }
      if (v66) {
        v31 += v66;
      }
      else {
        unsigned __int16 v31 = v29;
      }
      uint64_t v30 = v31;
      unsigned int v28 = v97;
    }
    while (v31 < v29);
    uint64_t v67 = bed_GetcElem(a8, &v112);
    if ((v67 & 0x80000000) != 0) {
      goto LABEL_82;
    }
    if (v112)
    {
      UTOISubTrace(v23, v20, a8, (uint64_t)"replacement string");
      a6 = v91;
      a7 = v92;
      uint64_t v29 = a5;
      if (*(_DWORD *)(v21 + 16) != 1) {
        goto LABEL_92;
      }
      uint64_t v67 = bed_GetpElem(a8, 0, &v110);
      if ((v67 & 0x80000000) == 0)
      {
        if (v112)
        {
          unint64_t v74 = 0;
          unsigned int v75 = 0;
          unsigned __int16 v76 = 1;
          uint64_t v77 = v110;
          do
          {
            if (*(unsigned char *)(v77 + v74) == 16)
            {
              uint64_t v78 = *(unsigned __int16 *)(v21 + 8);
              if (v75 >= v78)
              {
LABEL_85:
                log_OutText(*(void *)(v20 + 32), v93, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v71, v72, v73, v76);
                int v82 = 0;
                goto LABEL_86;
              }
              uint64_t v79 = v75;
              uint64_t v80 = (int *)(*(void *)v21 + 12 * v75 + 4);
              while (1)
              {
                int v81 = *v80;
                v80 += 3;
                if (v81 != 1) {
                  break;
                }
                if (v78 == ++v79) {
                  goto LABEL_85;
                }
              }
              *(_WORD *)(*(void *)v21 + 12 * (unsigned __int16)v79 + 8) = v74;
              ++v76;
              unsigned int v75 = (unsigned __int16)v79 + 1;
            }
            ++v74;
          }
          while (v74 < v112);
        }
        int v82 = 1;
LABEL_86:
        if (LogLevel >= 5 && *(_WORD *)(v21 + 8))
        {
          uint64_t v84 = 0;
          unint64_t v85 = 0;
          do
          {
            log_OutText(*(void *)(v20 + 32), v93, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v71, v72, v73, v85++);
            v84 += 12;
          }
          while (v85 < *(unsigned __int16 *)(v21 + 8));
        }
        uint64_t v29 = v104;
        if (v82) {
          *(_DWORD *)(v21 + 12) = 0;
        }
        goto LABEL_92;
      }
LABEL_82:
      uint64_t v83 = v67;
      goto LABEL_94;
    }
    log_OutText(*(void *)(v20 + 32), v93, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v68, v69, v70, v90);
    a6 = v91;
    a7 = v92;
    uint64_t v29 = a5;
  }
LABEL_92:
  uint64_t v83 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, v29, (uint64_t *)v21);
  if ((v83 & 0x80000000) == 0)
  {
    uint64_t v86 = v83;
    UTOITrace(v23, v20, a6, a7, (uint64_t)"END of normalization");
    uint64_t v83 = v86;
  }
LABEL_94:
  size_t v43 = 0;
LABEL_95:
  if (v108)
  {
    uint64_t v87 = v83;
    heap_Free(*(void **)(v20 + 8), v109);
    uint64_t v83 = v87;
    uint64_t v109 = 0;
  }
  if (v43)
  {
    uint64_t v88 = v83;
    heap_Free(*(void **)(v20 + 8), (uint64_t)v43);
    return v88;
  }
  return v83;
}

uint64_t DoSpell(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v16 = 0;
  for (unsigned __int16 i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v21 = wordm_sysdct_CharLookup_Chinese(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, a12, a11, "normal");
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      size_t v22 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      BOOL v23 = (char *)heap_Alloc(*(void *)(a1 + 8), v22);
      if (!v23) {
        return 2350915594;
      }
      unsigned __int16 v24 = v23;
      cstdlib_memset(v23, 0, v22);
      if (i)
      {
        cstdlib_strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v24, " ");
        cstdlib_strcat(v24, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v24, " ");
      unsigned __int16 v25 = cstdlib_strlen(v24);
      uint64_t v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
    }
    if (WORD3(v29[4])) {
      i += WORD3(v29[4]);
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v21;
}

uint64_t DoLatin(uint64_t a1, void *a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned __int16 v15 = 256;
  cstdlib_memset(__b, 0, 0x101uLL);
  cstdlib_strncpy(__dst, a3, a4);
  __dst[a4] = 0;
  uint64_t v10 = sysdct_char_LookUp_Chinese(a2, (unsigned __int8 *)__dst, __b, &v15, 0, 0, "normal");
  if ((v10 & 0x80000000) == 0)
  {
    if (v15)
    {
      unsigned int v11 = *(void **)(a1 + 8);
      int v12 = cstdlib_strlen(__b);
      uint64_t v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
      *a5 = v13;
      if (v13) {
        cstdlib_strcpy(v13, __b);
      }
      else {
        return 2350915594;
      }
    }
    else
    {
      *a5 = 0;
    }
  }
  return v10;
}

uint64_t wordm_sysdct_Lookup_Chinese(void *a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unsigned int a5, const char *a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t result = 2370838535;
  if (a1 && a2 && a4)
  {
    unsigned int v26 = 0;
    cstdlib_memset(__b, 0, 0x101uLL);
    *(_DWORD *)a4 = 0;
    cstdlib_memset((void *)(a4 + 4), 0, 0x41uLL);
    *(_WORD *)(a4 + 70) = 0;
    *(_DWORD *)(a4 + 72) = 0;
    cstdlib_memset((void *)(a4 + 76), 0, 0x101uLL);
    *(_WORD *)(a4 + 334) = 0;
    if (a3 >= 0x40) {
      unsigned int v13 = 64;
    }
    else {
      unsigned int v13 = a3;
    }
    if (v13 && a5)
    {
      unsigned int v14 = 0;
      int v15 = 0;
      do
      {
        v15 += utf8_determineUTF8CharLength(a2[(unsigned __int16)v15]);
        ++v14;
      }
      while (v13 > (unsigned __int16)v15 && v14 < a5);
      cstdlib_memmove(__dst, a2, (unsigned __int16)v15);
      __dst[(unsigned __int16)v15] = 0;
      if ((_WORD)v15)
      {
        *(_DWORD *)a4 = 2;
        unsigned __int16 v25 = 256;
        unsigned __int16 v17 = v15;
        while (1)
        {
          uint64_t result = sysdct_word_LookUp_Chinese(a1, __dst, v17, __b, &v25, a6);
          int v18 = v25;
          if (result || v25 != 256) {
            break;
          }
          unsigned int v26 = (unsigned __int16)(v17 - 1);
          utf8_GetPreviousValidUtf8Offset((uint64_t)__dst, &v26);
          unsigned __int16 v17 = v26;
          int v18 = 256;
          unsigned __int16 v25 = 256;
          if ((unsigned __int16)(v26 - 1) >= (unsigned __int16)v15) {
            goto LABEL_28;
          }
        }
        if ((result & 0x80000000) != 0) {
          return result;
        }
LABEL_28:
        if ((unsigned __int16)(v17 - 1) < (unsigned __int16)v15)
        {
          __b[v18] = 0;
          cstdlib_strcpy((char *)(a4 + 76), __b);
          *(_DWORD *)(a4 + 72) = 16;
          *(_WORD *)(a4 + 334) = v25;
          __dst[v17] = 0;
          cstdlib_strcpy((char *)(a4 + 4), __dst);
          uint64_t result = 0;
          *(_WORD *)(a4 + 70) = v17;
          return result;
        }
        unsigned __int16 v22 = utf8_determineUTF8CharLength(*a2);
        cstdlib_memmove((void *)(a4 + 4), __dst, v22);
        *(unsigned char *)(a4 + v22 + 4) = 0;
        *(_WORD *)(a4 + 70) = v22;
        unsigned __int16 v25 = 256;
        if (sysdct_char_LookUp_Chinese(a1, (unsigned __int8 *)__dst, (void *)(a4 + 76), &v25, 0, 0, a6)
          || (uint64_t v23 = v25, *(unsigned char *)(a4 + v25 + 76) = 0, *(_WORD *)(a4 + 334) = v23, !v23))
        {
          uint64_t result = 0;
          *(_DWORD *)a4 = 0;
          return result;
        }
        if (*(unsigned char *)(a4 + 76) == 35 && *(unsigned char *)(a4 + 77))
        {
          char v24 = cstdlib_atoi((unsigned __int8 *)(a4 + 77));
          uint64_t result = 0;
          *(unsigned char *)(a4 + 76) = v24;
          *(unsigned char *)(a4 + 77) = 0;
          *(_WORD *)(a4 + 334) = 1;
          return result;
        }
        return 0;
      }
    }
    else
    {
      cstdlib_memmove(__dst, a2, 0);
      __dst[0] = 0;
    }
    int v19 = 0;
    do
    {
      size_t v20 = (unsigned __int16)v19;
      int v21 = a2[(unsigned __int16)v19++];
    }
    while (v21 == 32);
    cstdlib_memmove((void *)(a4 + 4), a2, v20);
    return 0;
  }
  return result;
}

uint64_t wparserDctMaxWords_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplMaxWords;
  return result;
}

uint64_t wparser_impl_maxwords_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen = 2350915591;
  uint64_t v19 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v19);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v10, v11, v12, v18);
      unsigned int v13 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 56);
      if (v13)
      {
        void *v13 = a3;
        v13[1] = a4;
        v13[2] = v19;
        v13[3] = "WPARSER_IMPL";
        *(void *)a5 = v13;
        *(_DWORD *)(a5 + 8) = 87652;
        uint64_t MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v14, v15, v16, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_maxwords_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v4, v5, v6, v12);
  uint64_t MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_maxwords_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = 7549556;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1
      || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 32), (uint64_t)a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = *(void *)(a1 + 32);
      unsigned __int8 v28 = *(unsigned char *)(a1 + 48);
      int v27 = *(_DWORD *)(a1 + 40);
      return DoMaxWords(v21, v22, v23, a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, v27, v28);
    }
  }
  return result;
}

uint64_t wparser_impl_maxwords_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_maxwords_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 32);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_maxwords_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_maxwords_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  uint64_t v3 = Str;
  int v4 = cstdlib_atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(unsigned char *)(a1 + 48) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoDag(void *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, int a15, unsigned __int8 a16)
{
  uint64_t v21 = a1;
  uint64_t v22 = a14;
  uint64_t v236 = *MEMORY[0x263EF8340];
  unsigned __int16 v216 = 0;
  uint64_t v214 = 0;
  uint64_t v215 = 0;
  uint64_t v213 = 0;
  __int16 v212 = 0;
  *(_WORD *)(a14 + 8) = 0;
  *(void *)(v22 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(a1[4]);
  BOOL v24 = LogLevel > 4;
  uint64_t result = bed_GetpElem(a7, 0xFFFFu, &v215);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v199 = a8;
  int v29 = a16;
  int v30 = a15;
  if (a5 && a5 != (unsigned __int16)*(_DWORD *)(v215 + 36)) {
    *(_DWORD *)(v22 + 16) = 0;
  }
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v26, v27, v28, a5);
  UTOITrace(v24, (uint64_t)v21, a6, a7, (uint64_t)"START of normalization");
  if (v30 == 1)
  {
    uint64_t result = getDomainSegmentations((uint64_t)v21, (void *)a3, (uint64_t)a4, a5, a7, a10, &v213, &v212, 0, v29);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  unsigned int v190 = LogLevel;
  unsigned int v194 = -1711267830;
  log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Entering", v31, v32, v33, v174);
  uint64_t v34 = heap_Calloc((void *)v21[1], 1, 16);
  if (!v34) {
    return 2583699466;
  }
  uint64_t v35 = v34;
  int __s1 = v29;
  int v188 = v24;
  if (a5)
  {
    unsigned int v36 = 0;
    unsigned __int16 v37 = 0;
    do
    {
      ++v37;
      unsigned int v36 = (unsigned __int16)(utf8_determineUTF8CharLength(a4[v36]) + v36);
    }
    while (v36 < a5);
  }
  else
  {
    unsigned __int16 v37 = 0;
  }
  *(_DWORD *)(v35 + 8) = v37;
  *(_DWORD *)(v35 + 12) = 13285840;
  uint64_t v38 = (void *)heap_Calloc((void *)v21[1], v37 + 1, 24);
  *(void *)uint64_t v35 = v38;
  if (!v38) {
    return 2583699466;
  }
  if (((v37 + 1) & 0xFFFE) != 0) {
    unsigned int v39 = (unsigned __int16)(v37 + 1);
  }
  else {
    unsigned int v39 = 1;
  }
  bzero(v38, 24 * v39);
  uint64_t v189 = v22;
  uint64_t v211 = a2;
  if (!a5)
  {
LABEL_50:
    log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: searching the heaviest edge from all possible paths", v40, v41, v42, v175);
    uint64_t v65 = *(void *)v35;
    if (!*(void *)v35)
    {
      dag_free(v21, v35);
      log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: Failed search the path, some error", v168, v169, v170, v176);
      return 2583699462;
    }
    uint64_t v198 = a5;
    uint64_t v184 = a6;
    uint64_t v186 = a7;
    uint64_t v66 = *(unsigned int *)(v35 + 8);
    if ((v66 & 0x80000000) == 0)
    {
      uint64_t v67 = v66 + 1;
      uint64_t v68 = (void *)(v65 + 16);
      do
      {
        *uint64_t v68 = -2147483647;
        v68 += 3;
        --v67;
      }
      while (v67);
    }
    *(void *)(v65 + 16) = 0xFFFFFFFF00000000;
    log_OutText(v21[4], a2, 5, 0, (uint64_t)"[DAG]: All possible path, <vertex_from: vertex_to>: weight, accumulated weight", v62, v63, v64, v176);
    if ((int)v66 >= 1)
    {
      uint64_t v72 = 0;
      uint64_t v73 = *(void *)v35;
      do
      {
        for (unsigned __int16 i = *(uint64_t **)(v73 + 24 * v72); i; unsigned __int16 i = (uint64_t *)*i)
        {
          unsigned int v75 = *((_DWORD *)i + 3);
          int v76 = *((_DWORD *)i + 4) + *(_DWORD *)(v73 + 24 * v72 + 16);
          log_OutText(v21[4], v211, 5, 0, (uint64_t)"<%d: %d>: %d, %d", v69, v70, v71, v72);
          uint64_t v73 = *(void *)v35;
          uint64_t v77 = *(void *)v35 + 24 * v75;
          int v79 = *(_DWORD *)(v77 + 16);
          uint64_t v78 = (int *)(v77 + 16);
          if (v76 > v79)
          {
            *uint64_t v78 = v76;
            uint64_t v80 = v73 + 24 * v75;
            *(_DWORD *)(v80 + 20) = v72;
            *(void *)(v80 + 8) = i[3];
          }
        }
        ++v72;
      }
      while (v72 != v66);
    }
    uint64_t v81 = heap_Calloc((void *)v21[1], 1, 24);
    if (v81)
    {
      uint64_t v82 = v81;
      uint64_t v83 = heap_Calloc((void *)v21[1], (v66 + 2), 4);
      *(void *)uint64_t v82 = v83;
      if (v83)
      {
        uint64_t v84 = heap_Calloc((void *)v21[1], (v66 + 2), 8);
        *(void *)(v82 + 8) = v84;
        uint64_t v88 = *(_DWORD **)v82;
        uint64_t v89 = v211;
        if (v84)
        {
          *(_WORD *)(v82 + 16) = 0;
          *uint64_t v88 = v66;
          uint64_t v90 = v189;
          if ((v66 & 0x80000000) == 0)
          {
            unsigned __int16 v91 = 0;
            do
            {
              ++v91;
              uint64_t v92 = *(void *)v35 + 24 * v66;
              uint64_t v93 = *(void *)(v92 + 8);
              LODWORD(v66) = *(_DWORD *)(v92 + 20);
              v88[v91] = v66;
              *(void *)(*(void *)(v82 + 8) + 8 * v91) = v93;
            }
            while ((v66 & 0x80000000) == 0);
            *(_WORD *)(v82 + 16) = v91;
          }
          log_OutText(v21[4], v211, 5, 0, (uint64_t)"[DAG]: Leaving", v85, v86, v87, v177);
          uint64_t v94 = (unsigned __int16)(*(_WORD *)(v82 + 16) - 1);
          uint64_t v204 = heap_Calloc((void *)v21[1], v94, 336);
          uint64_t v187 = v94;
          if (v204)
          {
            if (v94)
            {
              uint64_t v95 = 0;
              int v96 = 0;
              uint64_t v206 = v21;
              uint64_t v181 = v82;
              do
              {
                uint64_t v97 = v204 + 336 * v95;
                *(_DWORD *)uint64_t v97 = 2;
                __int16 v98 = (void *)(v97 + 4);
                cstdlib_memset((void *)(v97 + 4), 0, 0x41uLL);
                *(_WORD *)(v97 + 70) = 0;
                int v99 = (unsigned __int16 *)(v97 + 70);
                *(_DWORD *)(v99 + 1) = 16;
                __s1a = (char *)(v99 + 3);
                cstdlib_memset(v99 + 3, 0, 0x101uLL);
                uint64_t v195 = v99 + 132;
                v99[132] = 0;
                int v100 = *(_DWORD *)(*(void *)v82 + 4 * (v94 - v95 - 1))
                     - *(_DWORD *)(*(void *)v82 + 4 * (v94 - v95));
                int v201 = v96;
                uint64_t v101 = &a4[(unsigned __int16)v96];
                int v102 = cstdlib_strlen(v101);
                unsigned __int16 v103 = 0;
                int v104 = 0;
                while (1)
                {
                  int v105 = v103;
                  if (v103 >= (unsigned __int16)v102) {
                    break;
                  }
                  unsigned __int16 v106 = utf8_determineUTF8CharLength(v101[v103]);
                  unsigned __int16 v103 = v105 + v106;
                  if (v100 == (unsigned __int16)++v104)
                  {
                    int v107 = v105 + v106;
                    if ((_WORD)v105 + v106) {
                      goto LABEL_76;
                    }
                    break;
                  }
                }
                int v107 = v102;
LABEL_76:
                *int v99 = v107;
                cstdlib_memcpy(v98, v101, (unsigned __int16)v107);
                *(unsigned char *)(*v99 + v204 + 336 * v95 + 5) = 0;
                uint64_t v82 = v181;
                uint64_t v94 = v187;
                uint64_t v108 = (v187 - v95);
                uint64_t v109 = *(const char **)(*(void *)(v181 + 8) + 8 * v108);
                if (v109)
                {
                  cstdlib_strcat(__s1a, v109);
                  *uint64_t v195 = cstdlib_strlen(__s1a) + 1;
                  uint64_t v21 = v206;
                  heap_Free((void *)v206[1], *(void *)(*(void *)(v181 + 8) + 8 * v108));
                }
                else
                {
                  cstdlib_strcpy(__s1a, (const char *)v98);
                  *uint64_t v195 = *v99 + 1;
                  uint64_t v21 = v206;
                }
                uint64_t v90 = v189;
                uint64_t v89 = v211;
                int v96 = v107 + v201;
                ++v95;
              }
              while (v95 != v187);
            }
            unsigned int v194 = 0;
          }
          heap_Free((void *)v21[1], *(void *)v82);
          heap_Free((void *)v21[1], *(void *)(v82 + 8));
          heap_Free((void *)v21[1], v82);
          dag_free(v21, v35);
          uint64_t result = v194;
          if (!v204) {
            return result;
          }
          if (v94)
          {
            uint64_t v113 = 0;
            uint64_t v114 = 0;
            int v180 = 0;
            int v115 = 0;
            __int16 v182 = a12;
            int v179 = a11;
            int v202 = a13;
            uint64_t v207 = v21;
            do
            {
              unsigned int v196 = -1944051702;
              unsigned int v116 = *(_DWORD *)(v204 + 336 * v113);
              BOOL v117 = v116 > 5;
              int v118 = (1 << v116) & 0x34;
              if (v117 || v118 == 0)
              {
                log_OutText(v21[4], v89, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v110, v111, v112, v114);
                int v180 = 1;
              }
              else
              {
                if (v202)
                {
                  unsigned __int16 v120 = cstdlib_strlen(szWORD_BEG_2);
                  unsigned int v121 = bed_Insert(v199, szWORD_BEG_2, v120);
                  if ((v121 & 0x80000000) != 0) {
                    goto LABEL_150;
                  }
                  *v182 += cstdlib_strlen(szWORD_BEG_2);
                }
                uint64_t v122 = (char *)(v204 + 336 * v113 + 76);
                size_t v123 = (unsigned __int16)(cstdlib_strlen(v122) + 1);
                uint64_t v124 = (char *)heap_Alloc(v21[1], v123);
                if (!v124) {
                  return 2350915594;
                }
                uint64_t v125 = v124;
                cstdlib_memset(v124, 0, v123);
                cstdlib_strcpy(v125, v122);
                unsigned __int16 v126 = cstdlib_strlen(v122);
                unsigned int v121 = bed_Insert(v199, v125, v126);
                if ((v121 & 0x80000000) != 0) {
                  goto LABEL_151;
                }
                *v182 += cstdlib_strlen(v122);
                heap_Free((void *)v21[1], (uint64_t)v125);
                if (v202)
                {
                  unsigned __int16 v127 = cstdlib_strlen(szWORD_END_2);
                  unsigned int v121 = bed_Insert(v199, szWORD_END_2, v127);
                  if ((v121 & 0x80000000) != 0) {
                    goto LABEL_150;
                  }
                  *v182 += cstdlib_strlen(szWORD_END_2);
                }
                unsigned int v121 = bed_GetcElem(v199, &v216);
                if ((v121 & 0x80000000) != 0)
                {
LABEL_150:
                  uint64_t v125 = 0;
LABEL_151:
                  unsigned int v196 = v121;
                  goto LABEL_166;
                }
                int v128 = *(_DWORD *)(a3 + 32);
                uint64_t v129 = a10;
                uint64_t v130 = v204 + 336 * v113;
                v131 = (_WORD *)(v130 + 70);
                v132 = (_WORD *)(v130 + 334);
                if (v128) {
                  v133 = (_WORD *)(v130 + 334);
                }
                else {
                  v133 = (_WORD *)(v130 + 70);
                }
                int __s1b = v115;
                if (*(unsigned __int16 *)(a10 + 18) < (unsigned __int16)(*(_WORD *)(a10 + 16)
                                                                                      + 4 * *v133
                                                                                      + 5))
                {
                  unsigned int v134 = datac_RequestBlock(a9, v179, (unsigned __int16)(*(_WORD *)(a10 + 16) + 4 * *v133 + 5), &a10);
                  if ((v134 & 0x80000000) != 0)
                  {
                    uint64_t v125 = 0;
                    unsigned int v196 = v134;
                    uint64_t v21 = v207;
                    goto LABEL_166;
                  }
                  uint64_t v129 = a10;
                  int v128 = *(_DWORD *)(a3 + 32);
                }
                uint64_t v135 = *(void *)(v129 + 8);
                unsigned int v136 = *(unsigned __int16 *)(v129 + 16);
                unsigned int v137 = *(unsigned __int16 *)(v129 + 2);
                __int16 v138 = v135 + v137 * v136;
                __s[4] = 0;
                *(_DWORD *)__s = 0;
                if (v128)
                {
                  unsigned int v139 = (unsigned __int16)*v132;
                  v140 = (unsigned char *)(v135 + v137 * (unint64_t)v136);
                  if (*v132)
                  {
                    unsigned int NextUtf8Offset = 0;
                    v140 = (unsigned char *)(v135 + v137 * (unint64_t)v136);
                    do
                    {
                      if (!*(unsigned char *)(v204 + 336 * v113 + NextUtf8Offset + 76)) {
                        break;
                      }
                      unsigned int WCharFromUtf8 = utf8_GetWCharFromUtf8(v122, NextUtf8Offset, v139);
                      LH_itoa(WCharFromUtf8, __s, 0x10u);
                      cstdlib_memcpy(v140, &__s[2], 2uLL);
                      cstdlib_memcpy(v140 + 2, __s, 2uLL);
                      v140 += 4;
                      unsigned int NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v122, NextUtf8Offset);
                      unsigned int v139 = (unsigned __int16)*v132;
                    }
                    while (v139 > NextUtf8Offset);
                  }
                }
                else
                {
                  v140 = (unsigned char *)(v135 + v137 * (unint64_t)v136);
                  if (*v131)
                  {
                    unsigned int v143 = 0;
                    v140 = (unsigned char *)(v135 + v137 * (unint64_t)v136);
                    do
                    {
                      int v144 = v143 + v114;
                      if (v143 + v114 >= v198) {
                        break;
                      }
                      unsigned int v145 = utf8_GetWCharFromUtf8(a4, v143 + v114, v198);
                      LH_itoa(v145, __s, 0x10u);
                      cstdlib_memcpy(v140, &__s[2], 2uLL);
                      cstdlib_memcpy(v140 + 2, __s, 2uLL);
                      v140 += 4;
                      unsigned int v143 = (unsigned __int16)(utf8_GetNextUtf8Offset(a4, v144) - v114);
                    }
                    while (v143 < (unsigned __int16)*v131);
                  }
                }
                unsigned char *v140 = 0;
                *(_WORD *)(a10 + 16) += (_WORD)v140 - v138 + 1;
                uint64_t v21 = v207;
                uint64_t v90 = v189;
                uint64_t v89 = v211;
                uint64_t v94 = v187;
                int v115 = __s1b;
              }
              if (*(_DWORD *)(v90 + 16) == 1)
              {
                unsigned int v146 = *(unsigned __int16 *)(v90 + 8);
                uint64_t v147 = *(void *)v90;
                if (v146 >= *(unsigned __int16 *)(v90 + 10))
                {
                  uint64_t v148 = heap_Realloc((uint64_t *)v21[1], v147, 12 * *(unsigned __int16 *)(v90 + 10) + 121);
                  if (!v148) {
                    goto LABEL_165;
                  }
                  uint64_t v147 = v148;
                  *(void *)uint64_t v90 = v148;
                  *(_WORD *)(v90 + 10) += 10;
                  unsigned int v146 = *(unsigned __int16 *)(v90 + 8);
                }
                unsigned int v149 = v146;
                uint64_t v150 = v147 + 12 * v146;
                *(_WORD *)uint64_t v150 = v115;
                *(void *)(v150 + 2) = 0;
                int v151 = *(unsigned __int16 *)(v204 + 336 * v113 + 70);
                if (v180 == 1) {
                  *(_DWORD *)(v147 + 12 * v149 + 4) = 1;
                }
                v115 += v151;
                *(_WORD *)(v90 + 8) = v149 + 1;
              }
              uint64_t v114 = ++v113;
            }
            while (v113 != v94);
          }
          int v152 = v188;
          if (!v198) {
            goto LABEL_163;
          }
          unsigned int v153 = bed_GetcElem(v199, &v216);
          if ((v153 & 0x80000000) != 0) {
            goto LABEL_152;
          }
          if (v216)
          {
            UTOISubTrace(v188, (uint64_t)v21, v199, (uint64_t)"replacement string");
            if (*(_DWORD *)(v189 + 16) == 1)
            {
              unsigned int v153 = bed_GetpElem(v199, 0, &v214);
              if ((v153 & 0x80000000) == 0)
              {
                if (v216)
                {
                  unint64_t v160 = 0;
                  unsigned int v161 = 0;
                  unsigned __int16 v162 = 1;
                  uint64_t v163 = v214;
                  do
                  {
                    if (*(unsigned char *)(v163 + v160) == 16)
                    {
                      uint64_t v164 = *(unsigned __int16 *)(v189 + 8);
                      if (v161 >= v164)
                      {
LABEL_156:
                        log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v157, v158, v159, v162);
                        int v210 = 0;
                        goto LABEL_157;
                      }
                      uint64_t v165 = v161;
                      int v166 = (int *)(*(void *)v189 + 12 * v161 + 4);
                      while (1)
                      {
                        int v167 = *v166;
                        v166 += 3;
                        if (v167 != 1) {
                          break;
                        }
                        if (v164 == ++v165) {
                          goto LABEL_156;
                        }
                      }
                      *(_WORD *)(*(void *)v189 + 12 * (unsigned __int16)v165 + 8) = v160;
                      ++v162;
                      unsigned int v161 = (unsigned __int16)v165 + 1;
                    }
                    ++v160;
                  }
                  while (v160 < v216);
                }
                int v210 = 1;
LABEL_157:
                if (v190 >= 5 && *(_WORD *)(v189 + 8))
                {
                  uint64_t v172 = 0;
                  unint64_t v173 = 0;
                  do
                  {
                    log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v157, v158, v159, v173++);
                    v172 += 12;
                  }
                  while (v173 < *(unsigned __int16 *)(v189 + 8));
                }
                int v152 = v188;
                if (v210) {
                  *(_DWORD *)(v189 + 12) = 0;
                }
                goto LABEL_163;
              }
LABEL_152:
              unsigned int v196 = v153;
              goto LABEL_165;
            }
          }
          else
          {
            log_OutText(v21[4], v211, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v154, v155, v156, v178);
          }
LABEL_163:
          unsigned int v196 = utoin_IncrReplaceCurrentRegion(v184, v186, v199, v198, (uint64_t *)v189);
          if ((v196 & 0x80000000) == 0) {
            UTOITrace(v152, (uint64_t)v21, v184, v186, (uint64_t)"END of normalization");
          }
LABEL_165:
          uint64_t v125 = 0;
LABEL_166:
          if (v212)
          {
            heap_Free((void *)v21[1], v213);
            uint64_t v213 = 0;
          }
          if (v125) {
            heap_Free((void *)v21[1], (uint64_t)v125);
          }
          heap_Free((void *)v21[1], v204);
          return v196;
        }
        if (v88)
        {
          heap_Free((void *)v21[1], (uint64_t)v88);
          *(void *)uint64_t v82 = 0;
        }
      }
      uint64_t v171 = *(void *)(v82 + 8);
      if (v171)
      {
        heap_Free((void *)v21[1], v171);
        *(void *)(v82 + 8) = 0;
      }
      heap_Free((void *)v21[1], v82);
    }
    return 2583699466;
  }
  uint64_t v183 = a6;
  uint64_t v185 = a7;
  unsigned __int16 v203 = 0;
  int v43 = 0;
  unsigned __int16 v44 = a4;
  uint64_t v205 = (uint64_t)v21;
  uint64_t v197 = a5;
  while (1)
  {
    unsigned __int16 v45 = 0;
    int v46 = a5;
    unsigned __int16 v47 = 0;
    int v48 = (unsigned __int8 *)&v44[(unsigned __int16)v43];
    int v200 = v43;
    int v49 = v46 - (unsigned __int16)v43;
    unsigned int v50 = (unsigned __int16)(v46 - v43);
    while (v45 < v50)
    {
      v45 += utf8_determineUTF8CharLength(v48[v45]);
      if (v29 == ++v47)
      {
        unsigned __int16 v47 = v29;
        if (v45) {
          goto LABEL_24;
        }
        break;
      }
    }
    unsigned __int16 v45 = v49;
LABEL_24:
    unsigned int v218 = 0;
    char v235 = 0;
    long long v233 = 0u;
    long long v234 = 0u;
    long long v231 = 0u;
    long long v232 = 0u;
    long long v229 = 0u;
    long long v230 = 0u;
    long long v227 = 0u;
    long long v228 = 0u;
    long long v225 = 0u;
    long long v226 = 0u;
    long long v223 = 0u;
    long long v224 = 0u;
    long long v221 = 0u;
    long long v222 = 0u;
    *(_OWORD *)__s = 0u;
    long long v220 = 0u;
    unsigned __int16 v217 = 256;
    if (v45)
    {
      if (v49 >= v45) {
        break;
      }
    }
LABEL_39:
    uint64_t v54 = sysdct_char_LookUp_Chinese((void *)a3, v48, __s, &v217, 0, 0, "normal");
    if (!v54)
    {
      int v56 = (void *)heap_Calloc((void *)v21[1], 1, v217 + 1);
      if (!v56)
      {
        uint64_t v54 = 2583699466;
LABEL_147:
        heap_Free((void *)v21[1], v35);
        return v54;
      }
      uint64_t v57 = (uint64_t)v56;
      unsigned __int16 v58 = v217;
      if (v217)
      {
        unsigned __int16 v59 = v217 - 1;
        uint64_t v60 = v211;
        if (v217 == 1)
        {
LABEL_45:
          unsigned __int16 v58 = 1;
        }
        else
        {
          while (__s[v59] == 92)
          {
            unsigned __int16 v217 = --v58;
            if (!--v59) {
              goto LABEL_45;
            }
          }
        }
      }
      else
      {
        uint64_t v60 = v211;
      }
      cstdlib_memcpy(v56, __s, v58);
      *(unsigned char *)(v57 + v217) = 0;
      dag_insert_edge_0((uint64_t)v21, v60, (uint64_t *)v35, v203, v203 + 1, 1, v57);
      uint64_t v54 = 0;
    }
LABEL_48:
    int v61 = utf8_determineUTF8CharLength(*v48);
    int v43 = v200 + v61;
    ++v203;
    a5 = v197;
    if (v197 <= (unsigned __int16)(v200 + v61))
    {
      a6 = v183;
      a7 = v185;
      a2 = v211;
      if ((v54 & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_147;
    }
  }
  __int16 v51 = 0;
  uint64_t v52 = 1;
  unsigned __int16 v53 = v45;
  while (1)
  {
    uint64_t v54 = sysdct_word_LookUp_Chinese((void *)a3, v48, v53, __s, &v217, "");
    if ((v54 & 0x80000000) != 0) {
      return v54;
    }
    if (v217 != 256)
    {
      uint64_t v55 = cstdlib_strrchr(__s, 92);
      if (v55) {
        uint64_t v52 = cstdlib_atoi((unsigned __int8 *)v55 + 1) + 1;
      }
      if (v47)
      {
        dag_insert_edge_0(v205, v211, (uint64_t *)v35, v203, v203 + v47, v52, 0);
        ++v51;
      }
    }
    unsigned int v218 = (unsigned __int16)(v53 - 1);
    utf8_GetPreviousValidUtf8Offset((uint64_t)v48, &v218);
    unsigned __int16 v217 = 256;
    if (v47) {
      --v47;
    }
    else {
      unsigned __int16 v47 = 0;
    }
    if (v49 >= (unsigned __int16)v218)
    {
      unsigned __int16 v53 = v218;
      if ((unsigned __int16)(v218 - 1) < v45) {
        continue;
      }
    }
    uint64_t v21 = (void *)v205;
    unsigned __int16 v44 = a4;
    int v29 = __s1;
    if (v51) {
      goto LABEL_48;
    }
    goto LABEL_39;
  }
}

void *dag_free(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)a2;
    if (v4)
    {
      int v5 = *(_DWORD *)(a2 + 8);
      uint64_t v6 = (v5 + 1);
      if (v5 != -1)
      {
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = *(void **)(v4 + 24 * v7);
          if (v8)
          {
            do
            {
              uint64_t v9 = (void *)*v8;
              heap_Free((void *)v3[1], (uint64_t)v8);
              uint64_t v8 = v9;
            }
            while (v9);
            uint64_t v4 = *(void *)a2;
          }
          *(void *)(v4 + 24 * v7++) = 0;
        }
        while (v7 != v6);
      }
    }
    heap_Free((void *)v3[1], v4);
    uint64_t v10 = (void *)v3[1];
    return heap_Free(v10, a2);
  }
  return result;
}

uint64_t dag_insert_edge_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = heap_Calloc(*(void **)(a1 + 8), 1, 32);
  if (result)
  {
    uint64_t v15 = result;
    *(_DWORD *)(result + 8) = a4;
    *(_DWORD *)(result + 12) = a5;
    *(void *)(result + 24) = a7;
    int v16 = uint32_log2(a6);
    *(_DWORD *)(v15 + 16) = v16 - uint32_log2(*((unsigned int *)a3 + 3));
    uint64_t v17 = *a3;
    uint64_t v18 = 24 * a4;
    *(void *)uint64_t v15 = *(void *)(*a3 + v18);
    *(void *)(v17 + v18) = v15;
    return log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[DAG]: insert edge (vertex, Chinese Character Positions and weight): %d %d %d %d", v19, v20, v21, a4);
  }
  return result;
}

uint64_t wparserDag_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDag;
  return result;
}

uint64_t wparser_impl_dag_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t MaxWordLen = 2350915591;
  uint64_t v20 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v20);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: Begin", v10, v11, v12, v19);
      unsigned int v13 = (void *)heap_Calloc(*(void **)(v20 + 8), 1, 56);
      if (v13)
      {
        uint64_t v14 = v13;
        void *v13 = a3;
        v13[1] = a4;
        v13[2] = v20;
        v13[3] = "WPARSER_IMPL";
        uint64_t MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen((uint64_t)v13);
        *(void *)a5 = v14;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v20 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjOpen: End (%x)", v15, v16, v17, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dag_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dag_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : Begin", v4, v5, v6, v12);
  uint64_t MaxWordLen = wparser_impl_maxwords_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL DAG ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dag_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = 7549556;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v10, a1 + 44);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 40) = a6;
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Normalize(uint64_t a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    a3[a5] = 0;
    if (*(_DWORD *)(a1 + 44) != 1
      || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 32), (uint64_t)a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v21 = *(void **)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      uint64_t v23 = *(void *)(a1 + 32);
      unsigned __int8 v28 = *(unsigned char *)(a1 + 48);
      int v27 = *(_DWORD *)(a1 + 40);
      return DoDag(v21, v22, v23, a3, a5, a6, a7, a8, a9, a10, a11, a12, a13, a15, v27, v28);
    }
  }
  return result;
}

uint64_t wparser_impl_dag_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)(a1 + 32), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 48));
  }
  return result;
}

uint64_t wparser_impl_dag_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 56);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 32);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_dag_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparser_impl_dag_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 56);
}

uint64_t wparserDctPlusRules_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDctPlusRules;
  return result;
}

uint64_t wparser_impl_plusrules_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = 0;
  if (!a5) {
    return 2350915591;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    uint64_t v12 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 88);
    if (v12)
    {
      *uint64_t v12 = a3;
      v12[1] = a4;
      uint64_t v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[4] = "WPARSER_IMPL";
      *(void *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(void *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_plusrules_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v3, v4, v5, v11);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_plusrules_Init(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, int a6, unsigned char *a7)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  *(void *)(a1 + 40) = a3;
  if (cstdlib_strcmp(a5, "win874"))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 1802, (uint64_t)"%s%s", v13, v14, v15, v16, a5);
    return 2350915591;
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = xcode_Utf16leToWin874;
    *(void *)(a1 + 56) = 0;
    if (*a7
      && (uint64_t v18 = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(**(void **)(a1 + 40) + 64))(*(void *)(*(void *)(a1 + 40) + 8), *(void *)(*(void *)(a1 + 40) + 16), a7, a1 + 64), (v18 & 0x80000000) != 0))
    {
      uint64_t v17 = v18;
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 1819, 0, v19, v20, v21, v22, v28);
    }
    else
    {
      *(void *)(a1 + 48) = 0;
      uint64_t v17 = o2t_ObjOpen(*(_WORD **)a1, *(void *)(a1 + 8), (void *)(a1 + 48));
      if ((v17 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 32), 52002, (uint64_t)"%s%s", v23, v24, v25, v26, a5);
      }
      else {
        *(_DWORD *)(a1 + 80) = a6;
      }
    }
  }
  return v17;
}

uint64_t wparser_impl_plusrules_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, int a13, uint64_t a14, uint64_t a15)
{
  v40[0] = a5;
  int v39 = 0;
  uint64_t v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v25 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  int v26 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v27 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v39, 0);
    if ((v29 & 0x80000000) != 0)
    {
      uint64_t v34 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v39 + 1));
      if (!v33) {
        return v25;
      }
      uint64_t v34 = v33;
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, _WORD *, void))(a1 + 72))(*(void *)(a1 + 56), v28, (unsigned __int16)v39, v33, v40, *(void *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        *(unsigned char *)(v34 + v40[0]) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v35, v36, v37, v34);
        uint64_t v29 = DoDctPlusRules(*(void *)(a1 + 16), *(void *)(a1 + 32), *(void **)(a1 + 40), *(unsigned char **)(a1 + 48), v34, v40[0], a6, a7, a8, a9, a10, a11, a12, a13, a15, *(_DWORD *)(a1 + 80), (uint64_t)a3, v28);
      }
    }
    uint64_t v25 = v29;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v28);
    if (v34) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v34);
    }
  }
  return v25;
}

uint64_t wparser_impl_plusrules_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  unsigned __int16 v37 = a5;
  int v36 = 0;
  uint64_t v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v21 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  int v22 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      uint64_t v30 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      uint64_t v29 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29) {
        return v21;
      }
      uint64_t v30 = v29;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(void *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(unsigned char *)(v30 + v37) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        uint64_t v25 = DoDctPlusRulesSpell(*(void *)(a1 + 16), *(void *)(a1 + 32), *(void **)(a1 + 40), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    uint64_t v21 = v25;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v24);
    if (v30) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v30);
    }
  }
  return v21;
}

uint64_t wparser_impl_plusrules_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  unsigned __int16 v28 = a4;
  int v27 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v13 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v27, 0);
    if ((v16 & 0x80000000) != 0)
    {
      uint64_t v21 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v27 + 1));
      if (!v20) {
        return v13;
      }
      uint64_t v21 = (unsigned __int8 *)v20;
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v15, (unsigned __int16)v27, v20, &v28, *(void *)(a1 + 64));
      if ((v16 & 0x80000000) == 0)
      {
        v21[v28] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN874: %s", v22, v23, v24, (uint64_t)v21);
        uint64_t v13 = DoTHTLatin(*(void *)(a1 + 16), *(void **)(a1 + 40), v21, v28, a5);
        if (a5)
        {
          int v25 = *a3;
          if ((v25 & 0x80000000) == 0) {
            *(_WORD *)*a5 = v25;
          }
        }
        goto LABEL_12;
      }
    }
    uint64_t v13 = v16;
LABEL_12:
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
    if (v21) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v21);
    }
  }
  return v13;
}

uint64_t wparser_impl_plusrules_End(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (!v5 || (uint64_t result = o2t_ObjClose(v5), (result & 0x80000000) == 0))
    {
      return safeh_HandleCheck(a1, a2, 87652, 88);
    }
  }
  return result;
}

uint64_t wparser_impl_plusrules_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_plusrules_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wordm_sysdct_Lookup_Thai(void *a1, const char *a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned __int16 v23 = 0;
  uint64_t result = 2370838535;
  if (a1 && a2 && a3)
  {
    LODWORD(v10) = a4;
    *(_DWORD *)a3 = 0;
    cstdlib_memset((void *)(a3 + 4), 0, 0x41uLL);
    *(_WORD *)(a3 + 70) = 0;
    *(_DWORD *)(a3 + 72) = 0;
    cstdlib_memset((void *)(a3 + 76), 0, 0x101uLL);
    *(_WORD *)(a3 + 334) = 0;
    unsigned __int16 v11 = cstdlib_strlen(a2);
    if ((v11 & 0xFFC0) != 0) {
      size_t v12 = 64;
    }
    else {
      size_t v12 = v11;
    }
    cstdlib_memmove(__dst, a2, v12);
    __dst[v12] = 0;
    if (v12)
    {
      *(_DWORD *)a3 = 2;
      unsigned __int16 v13 = 0;
      if (v12 <= v10) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = v10;
      }
      if (v10)
      {
        uint64_t v14 = v10;
        unsigned __int16 v15 = v10;
        do
        {
          if ((__dst[v14] + 49) >= 0xCu)
          {
            BOOL v16 = 0;
            int v17 = __dst[v14];
            if ((v17 - 231) >= 7 && v17 != 229)
            {
              BOOL v16 = 0;
              int v19 = __dst[(v14 - 1)];
              if ((v19 - 224) >= 5 && v19 != 230)
              {
                unsigned __int16 v23 = 256;
                uint64_t result = sysdct_word_LookUp_Thai(a1, __dst, v15, __src, &v23, a5);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                unsigned __int16 v13 = v23;
                BOOL v16 = v23 != 256;
              }
            }
          }
          else
          {
            BOOL v16 = 0;
          }
          __int16 v18 = v15 + v16;
          unsigned __int16 v15 = v15 + v16 - 1;
          uint64_t v14 = v15;
        }
        while (v10 > (unsigned __int16)(v18 - 2) && !v16);
      }
      else
      {
        unsigned __int16 v15 = 0;
        uint64_t v14 = 0;
      }
      if (v10 <= (unsigned __int16)(v15 - 1))
      {
        cstdlib_memmove((void *)(a3 + 4), __dst, 1uLL);
        uint64_t result = 0;
        *(unsigned char *)(a3 + 5) = 0;
        *(_WORD *)(a3 + 70) = 1;
        *(_DWORD *)a3 = 0;
      }
      else
      {
        __src[v13] = 0;
        cstdlib_strcpy((char *)(a3 + 76), __src);
        *(_DWORD *)(a3 + 72) = 16;
        *(_WORD *)(a3 + 334) = v23;
        if (__dst[v14] == 230)
        {
          cstdlib_strcat((char *)(a3 + 76), __src);
          *(_WORD *)(a3 + 334) += v23;
          ++v15;
        }
        __dst[v15] = 0;
        cstdlib_strcpy((char *)(a3 + 4), __dst);
        uint64_t result = 0;
        *(_WORD *)(a3 + 70) = v15;
      }
    }
    else
    {
      int v20 = 0;
      do
      {
        size_t v21 = (unsigned __int16)v20;
        int v22 = a2[(unsigned __int16)v20++];
      }
      while (v22 == 32);
      cstdlib_memmove((void *)(a3 + 4), a2, v21);
      return 0;
    }
  }
  return result;
}

uint64_t DoDctPlusRules(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 a12, _WORD *a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  __int16 v89 = -1;
  long long v138 = 0u;
  long long v137 = 0u;
  long long v136 = 0u;
  long long v135 = 0u;
  long long v134 = 0u;
  long long v133 = 0u;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v130 = 0u;
  long long v129 = 0u;
  long long v128 = 0u;
  long long v127 = 0u;
  long long v126 = 0u;
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long v122 = 0u;
  memset(__dst, 0, sizeof(__dst));
  memset(__b, 0, 512);
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  memset(v90, 0, sizeof(v90));
  uint64_t v88 = 0;
  unsigned __int16 v87 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  int v84 = 0;
  __int16 v83 = 0;
  cstdlib_memset(__b, 0, 0x40uLL);
  __b[32] = 0;
  cstdlib_memset(&__b[33], 0, 0x200uLL);
  __b[289] = 0;
  LOWORD(v91) = 0;
  BYTE2(v91) = 0;
  __int16 v119 = 0;
  *(_WORD *)(a15 + 8) = 0;
  *(void *)(a15 + 12) = 0x100000001;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v76 = LogLevel > 4;
  uint64_t DomainSegmentations = bed_GetpElem(a8, 0xFFFFu, &v88);
  if ((DomainSegmentations & 0x80000000) != 0) {
    return DomainSegmentations;
  }
  unsigned int v73 = LogLevel;
  if (!a6 && (unsigned __int16)*(_DWORD *)(v88 + 36)) {
    *(_DWORD *)(a15 + 16) = 0;
  }
  log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v25, v26, v27, a6);
  UTOITrace(v76, a1, a7, a8, (uint64_t)"START of normalization");
  if (a16 == 1)
  {
    uint64_t DomainSegmentations = getDomainSegmentations(a1, a3, a5, a6, a8, a11, &v85, (__int16 *)&v84 + 1, 1, 0);
    if ((DomainSegmentations & 0x80000000) != 0) {
      return DomainSegmentations;
    }
  }
  uint64_t v79 = a2;
  uint64_t v81 = a1;
  uint64_t v74 = a8;
  __int16 v89 = -1;
  uint64_t v78 = a6;
  uint64_t v75 = a7;
  if (a6)
  {
    uint64_t v28 = 0;
    LOWORD(v29) = 0;
    __int16 v30 = 0;
    unsigned __int16 v31 = 0;
    while (1)
    {
      if (a16 == 1 && HIWORD(v84) > (unsigned __int16)v29)
      {
        unsigned __int16 v32 = 0;
        unint64_t v29 = (unsigned __int16)v29;
        uint64_t v33 = (unsigned __int16 *)(v85 + 340 * (unsigned __int16)v29);
        while (1)
        {
          unsigned int v34 = *v33;
          if (v34 > v31) {
            break;
          }
          v33 += 170;
          if (v34 == v31) {
            unsigned __int16 v32 = v29;
          }
          ++v29;
          if (v34 == v31 || v29 >= HIWORD(v84))
          {
            if (v34 != v31) {
              break;
            }
            cstdlib_memcpy(__dst, (const void *)(v85 + 340 * v32 + 4), 0x150uLL);
            goto LABEL_23;
          }
        }
      }
      uint64_t v39 = wordm_sysdct_Lookup_Thai(a3, (const char *)(a5 + v31), (uint64_t)__dst, 22, "normal");
      if ((v39 & 0x80000000) != 0)
      {
        uint64_t v50 = v39;
        uint64_t v41 = a1;
        goto LABEL_77;
      }
LABEL_23:
      if (__dst[0] == 5 || __dst[0] == 2)
      {
        uint64_t v41 = a1;
        uint64_t v42 = handleWordMatch(a1, v79, a4, a5, v31, (unsigned __int16 *)__dst, &v89, (uint64_t)__b, (char *)v90, a9, a14, a13, a10, a11, a12, a17, a18, &v84, &v83);
        if ((v42 & 0x80000000) != 0) {
          goto LABEL_63;
        }
        uint64_t v42 = bed_GetcElem(a9, &v87);
        if ((v42 & 0x80000000) != 0) {
          goto LABEL_63;
        }
        int v43 = 0;
      }
      else
      {
        log_OutText(*(void *)(a1 + 32), v79, 5, 0, (uint64_t)"[UTOI] position %d (word.cbOrth=%d) not in dict", v36, v37, v38, v28);
        if (v89 == -1) {
          __int16 v89 = v31;
        }
        int v43 = 1;
        uint64_t v41 = a1;
      }
      if (*(_DWORD *)(a15 + 16) == 1)
      {
        unsigned int v44 = *(unsigned __int16 *)(a15 + 8);
        uint64_t v45 = *(void *)a15;
        if (v44 >= *(unsigned __int16 *)(a15 + 10))
        {
          uint64_t v46 = heap_Realloc(*(uint64_t **)(v41 + 8), v45, 12 * *(unsigned __int16 *)(a15 + 10) + 121);
          if (!v46)
          {
            uint64_t v50 = 2350915594;
            goto LABEL_77;
          }
          uint64_t v45 = v46;
          *(void *)a15 = v46;
          *(_WORD *)(a15 + 10) += 10;
          unsigned int v44 = *(unsigned __int16 *)(a15 + 8);
        }
        unsigned int v47 = v44;
        uint64_t v48 = v45 + 12 * v44;
        *(_WORD *)uint64_t v48 = v30;
        *(void *)(v48 + 2) = 0;
        __int16 v49 = WORD3(v122);
        if (v43) {
          *(_DWORD *)(v45 + 12 * v47 + 4) = 1;
        }
        v30 += 3 * v49;
        *(_WORD *)(a15 + 8) = v47 + 1;
      }
      else
      {
        __int16 v49 = WORD3(v122);
      }
      v31 += v49;
      uint64_t v28 = v31;
      if (v31 >= v78) {
        goto LABEL_46;
      }
    }
  }
  unsigned __int16 v31 = 0;
LABEL_46:
  LOBYTE(__dst[1]) = 0;
  WORD3(v122) = 0;
  BYTE12(v122) = 0;
  HIWORD(v138) = 0;
  uint64_t v51 = a9;
  uint64_t v41 = a1;
  uint64_t v42 = handleWordMatch(a1, v79, a4, a5, v31, (unsigned __int16 *)__dst, &v89, (uint64_t)__b, (char *)v90, a9, a14, a13, a10, a11, a12, a17, a18, &v84, &v83);
  if ((v42 & 0x80000000) == 0)
  {
    uint64_t v52 = v74;
    if (!v78) {
      goto LABEL_75;
    }
    uint64_t v42 = bed_GetcElem(a9, &v87);
    if ((v42 & 0x80000000) == 0)
    {
      if (!v87)
      {
        log_OutText(*(void *)(a1 + 32), v79, 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v53, v54, v55, (uint64_t)v72);
        goto LABEL_75;
      }
      UTOISubTrace(v76, a1, a9, (uint64_t)"replacement string");
      if (*(_DWORD *)(a15 + 16) != 1)
      {
LABEL_75:
        uint64_t v50 = utoin_IncrReplaceCurrentRegion(v75, v52, v51, v78, (uint64_t *)a15);
        if ((v50 & 0x80000000) == 0) {
          UTOITrace(v76, v81, v75, v52, (uint64_t)"END of normalization");
        }
        goto LABEL_77;
      }
      uint64_t v42 = bed_GetpElem(a9, 0, &v86);
      if ((v42 & 0x80000000) == 0)
      {
        if (!v87)
        {
          int v68 = 1;
          unsigned int v63 = v73;
          goto LABEL_69;
        }
        uint64_t v59 = 0;
        unsigned int v60 = 0;
        unsigned __int16 v61 = 1;
        uint64_t v62 = v86;
        unsigned int v63 = v73;
        while (1)
        {
          if (*(unsigned char *)(v62 + v59) == 16)
          {
            uint64_t v64 = *(unsigned __int16 *)(a15 + 8);
            if (v60 >= v64)
            {
LABEL_67:
              log_OutText(*(void *)(v81 + 32), v79, 5, 0, (uint64_t)"[UTOI] cant find non-deleted word to align new word number %d with", v56, v57, v58, v61);
              int v68 = 0;
LABEL_69:
              if (v63 >= 5 && *(_WORD *)(a15 + 8))
              {
                uint64_t v69 = 0;
                unint64_t v70 = 0;
                do
                {
                  log_OutText(*(void *)(v81 + 32), v79, 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v56, v57, v58, v70++);
                  v69 += 12;
                }
                while (v70 < *(unsigned __int16 *)(a15 + 8));
              }
              uint64_t v52 = v74;
              uint64_t v51 = a9;
              if (v68) {
                *(_DWORD *)(a15 + 12) = 0;
              }
              goto LABEL_75;
            }
            uint64_t v65 = v60;
            uint64_t v66 = (int *)(*(void *)a15 + 12 * v60 + 4);
            while (1)
            {
              int v67 = *v66;
              v66 += 3;
              if (v67 != 1) {
                break;
              }
              if (v64 == ++v65) {
                goto LABEL_67;
              }
            }
            *(_WORD *)(*(void *)a15 + 12 * (unsigned __int16)v65 + 8) = v59;
            ++v61;
            unsigned int v60 = (unsigned __int16)v65 + 1;
          }
          if (++v59 >= (unint64_t)v87)
          {
            int v68 = 1;
            goto LABEL_69;
          }
        }
      }
    }
  }
LABEL_63:
  uint64_t v50 = v42;
LABEL_77:
  if (HIWORD(v84)) {
    heap_Free(*(void **)(v41 + 8), v85);
  }
  return v50;
}

uint64_t handleWordMatch(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, __int16 a5, unsigned __int16 *a6, _WORD *a7, uint64_t a8, char *__dst, uint64_t a10, int a11, _WORD *a12, uint64_t a13, uint64_t a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _WORD *a18, _WORD *a19)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t HexArg = 2350915591;
  if (!a4 || !a6 || !a7 || !a8 || !__dst || !a10) {
    return HexArg;
  }
  char v62 = 0;
  unsigned __int16 __n = 0;
  if ((__int16)*a7 == -1)
  {
    char v27 = 0;
    uint64_t HexArg = 0;
  }
  else
  {
    cstdlib_memmove(__dst, a6 + 2, a6[35]);
    *((_WORD *)__dst + 32) = a6[35];
    cstdlib_memmove(__dst + 66, a6 + 38, a6[167]);
    *((_WORD *)__dst + 289) = a6[167];
    unsigned __int16 __n = 512;
    cstdlib_memset(__n_2, 0, 0x200uLL);
    uint64_t HexArg = o2t_Transcribe(a3, (unsigned char *)(a4 + (unsigned __int16)*a7), (unsigned __int16)(a5 - *a7), (_WORD *)a8, __dst, __n_2, &__n, &v62);
    if ((HexArg & 0x80000000) != 0) {
      return HexArg;
    }
    char v27 = v62;
  }
  unint64_t v29 = a18;
  uint64_t v28 = a19;
  uint64_t v30 = a16;
  uint64_t v31 = a17;
  int v32 = a15;
  uint64_t v34 = a13;
  uint64_t v33 = a14;
  int v35 = a11;
  __int16 v36 = *(_WORD *)(a8 + 578);
  if (v36 && (v27 & 1) == 0)
  {
    if (a11)
    {
      unsigned __int16 v37 = cstdlib_strlen(szWORD_BEG_3);
      uint64_t v38 = bed_Insert(a10, szWORD_BEG_3, v37);
      if ((v38 & 0x80000000) != 0) {
        return v38;
      }
      *a12 += cstdlib_strlen(szWORD_BEG_3);
      __int16 v36 = *(_WORD *)(a8 + 578);
    }
    size_t v39 = (unsigned __int16)(v36 + 1);
    uint64_t v40 = (char *)heap_Alloc(*(void *)(a1 + 8), v39);
    if (!v40) {
      return 2350915594;
    }
    uint64_t v41 = v40;
    cstdlib_memset(v40, 0, v39);
    cstdlib_strncpy(v41, (const char *)(a8 + 66), *(unsigned __int16 *)(a8 + 578));
    v41[*(unsigned __int16 *)(a8 + 578)] = 0;
    uint64_t v42 = bed_Insert(a10, v41, *(unsigned __int16 *)(a8 + 578));
    if ((v42 & 0x80000000) != 0)
    {
LABEL_42:
      uint64_t HexArg = v42;
      heap_Free(*(void **)(a1 + 8), (uint64_t)v41);
      return HexArg;
    }
    *a12 += *(_WORD *)(a8 + 578);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v41);
    if (a11)
    {
      unsigned __int16 v43 = cstdlib_strlen(szWORD_END_3);
      uint64_t v38 = bed_Insert(a10, szWORD_END_3, v43);
      if ((v38 & 0x80000000) != 0) {
        return v38;
      }
      *a12 += cstdlib_strlen(szWORD_END_3);
    }
    uint64_t v31 = a17;
    uint64_t HexArg = getHexArg(a1, a2, *(unsigned __int16 *)(a8 + 64), a13, a15, a14, a16, a17, a18, a19);
    if ((HexArg & 0x80000000) != 0) {
      return HexArg;
    }
    char v27 = v62;
    uint64_t v30 = a16;
    int v32 = a15;
    uint64_t v28 = a19;
    uint64_t v33 = a14;
    uint64_t v34 = a13;
    unint64_t v29 = a18;
    int v35 = a11;
  }
  unsigned __int16 v44 = __n;
  if (__n && ((v27 & 2) == 0 || !*((_WORD *)__dst + 32)))
  {
    uint64_t v54 = v34;
    uint64_t v55 = v29;
    uint64_t v56 = v28;
    uint64_t v57 = v33;
    int v58 = v32;
    uint64_t v59 = v30;
    uint64_t v53 = v31;
    int v60 = v35;
    if (v35)
    {
      unsigned __int16 v45 = cstdlib_strlen(szWORD_BEG_3);
      uint64_t v38 = bed_Insert(a10, szWORD_BEG_3, v45);
      if ((v38 & 0x80000000) != 0) {
        return v38;
      }
      *a12 += cstdlib_strlen(szWORD_BEG_3);
      unsigned __int16 v44 = __n;
    }
    size_t v46 = (unsigned __int16)(v44 + 1);
    unsigned int v47 = (char *)heap_Alloc(*(void *)(a1 + 8), v46);
    uint64_t HexArg = 2350915594;
    if (!v47) {
      return HexArg;
    }
    uint64_t v41 = v47;
    cstdlib_memset(v47, 0, v46);
    cstdlib_strncpy(v41, __n_2, __n);
    v41[__n] = 0;
    uint64_t v42 = bed_Insert(a10, v41, __n);
    if ((v42 & 0x80000000) == 0)
    {
      *a12 += __n;
      heap_Free(*(void **)(a1 + 8), (uint64_t)v41);
      if (!v60)
      {
LABEL_34:
        uint64_t HexArg = getHexArg(a1, a2, (unsigned __int16)(a5 - *a7), v54, v58, v57, v59, v53, v55, v56);
        if ((HexArg & 0x80000000) != 0) {
          return HexArg;
        }
        char v27 = v62;
        goto LABEL_36;
      }
      unsigned __int16 v48 = cstdlib_strlen(szWORD_END_3);
      uint64_t v38 = bed_Insert(a10, szWORD_END_3, v48);
      if ((v38 & 0x80000000) == 0)
      {
        *a12 += cstdlib_strlen(szWORD_END_3);
        goto LABEL_34;
      }
      return v38;
    }
    goto LABEL_42;
  }
LABEL_36:
  if ((v27 & 2) != 0)
  {
    uint64_t v50 = (unsigned __int16)*a7;
    unsigned __int16 v51 = a5 - v50;
    cstdlib_memmove((void *)a8, (const void *)(a4 + v50), v51);
    cstdlib_memmove((void *)(a8 + v51), a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35] + v51;
    cstdlib_memmove((void *)(a8 + 66), __n_2, __n);
    p_n = &__n;
  }
  else
  {
    cstdlib_memmove((void *)a8, a6 + 2, a6[35]);
    *(_WORD *)(a8 + 64) = a6[35];
    p_n = a6 + 167;
    cstdlib_memmove((void *)(a8 + 66), a6 + 38, a6[167]);
  }
  *(_WORD *)(a8 + 578) = *p_n;
  *a7 = -1;
  return HexArg;
}

uint64_t DoDctPlusRulesSpell(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v15 = 0;
  for (unsigned __int16 i = 0; i < a5; v15 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v20 = wordm_sysdct_CharLookup_Thai(a3, (unsigned __int8 *)(a4 + i), (unsigned __int16)(a5 - i), (uint64_t)v29, 0x16u, a11, "normal");
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v17, v18, v19, v15);
    }
    else
    {
      size_t v21 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      int v22 = (char *)heap_Alloc(*(void *)(a1 + 8), v21);
      if (!v22) {
        return 2350915594;
      }
      unsigned __int16 v23 = v22;
      cstdlib_memset(v22, 0, v21);
      if (i)
      {
        cstdlib_strcpy(v23, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v23, " ");
        cstdlib_strcat(v23, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v23, " ");
      unsigned __int16 v24 = cstdlib_strlen(v23);
      uint64_t v20 = bed_Insert(a6, v23, v24);
      if ((v20 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
        return v20;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
    }
    __int16 v25 = cstdlib_strlen((const char *)v29 + 4);
    if (v25) {
      i += v25;
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v20;
}

uint64_t getHexArg(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10)
{
  uint64_t v47 = a6;
  if (a3)
  {
    uint64_t v14 = a6;
    uint64_t v18 = 2350915584;
    uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * a3 + 2);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v44 = a4;
      int v45 = a5;
      unint64_t v21 = (unsigned __int16)*a9 + a3;
      if (LH_wcslen(a8) >= v21)
      {
        unsigned __int16 v23 = (unsigned __int16 *)(a8 + 2 * (unsigned __int16)*a9);
        uint64_t v22 = a3;
        LH_wcsncpy(v20, v23, a3);
      }
      else
      {
        uint64_t v22 = 0;
      }
      *(_WORD *)(v20 + 2 * v22) = 0;
      __int16 v24 = utf8_16BitNbrOfUtf8Chars(v20);
      unsigned __int16 v28 = v24 - 1;
      if (v24 == 1)
      {
        log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cant get hex args", v25, v26, v27, v43);
        unsigned __int16 v37 = *(void **)(a1 + 8);
        uint64_t v38 = v20;
LABEL_20:
        heap_Free(v37, v38);
        return v18;
      }
      uint64_t v29 = (unsigned __int16)(v24 - 1);
      uint64_t v30 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v29 + 1);
      if (v30)
      {
        uint64_t v31 = v30;
        cstdlib_strncpy(v30, (const char *)(a7 + (unsigned __int16)*a10), v28);
        v31[v29] = 0;
        log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v32, v33, v34, v20);
        unsigned int v35 = *(unsigned __int16 *)(v14 + 16);
        unsigned __int16 v36 = v35 + 2 * v28 + 1;
        if (*(unsigned __int16 *)(v14 + 18) >= v36)
        {
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v18 = datac_RequestBlock(v44, v45, (unsigned __int16)(v35 + 2 * v28 + 1), &v47);
          if ((v18 & 0x80000000) != 0)
          {
LABEL_19:
            heap_Free(*(void **)(a1 + 8), v20);
            unsigned __int16 v37 = *(void **)(a1 + 8);
            uint64_t v38 = (uint64_t)v31;
            goto LABEL_20;
          }
          uint64_t v14 = v47;
          unsigned int v35 = *(unsigned __int16 *)(v47 + 16);
        }
        uint64_t v39 = 0;
        uint64_t v40 = (unsigned char *)(*(void *)(v14 + 8) + *(unsigned __int16 *)(v14 + 2) * (unint64_t)v35);
        *(_WORD *)(v14 + 16) = v36;
        do
        {
          uint64_t v41 = v40;
          LH_itoa(v31[v39], v46, 0x10u);
          v46[2] = 0;
          *uint64_t v41 = v46[0];
          uint64_t v40 = v41 + 2;
          v41[1] = v46[1];
          ++v39;
        }
        while (v29 != v39);
        *uint64_t v40 = 0;
        *a9 += a3;
        *a10 += v28;
        goto LABEL_19;
      }
      heap_Free(*(void **)(a1 + 8), v20);
      return 2350915594;
    }
    else
    {
      return 2350915594;
    }
  }
  else
  {
    uint64_t v18 = 2350915584;
    log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] that parser : word length is 0, cant get hex args", a6, a7, a8, v43);
  }
  return v18;
}

uint64_t xcode_Utf16leToWin874(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t v5 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      uint64_t v8 = a2;
      int v9 = 0;
      uint64_t v10 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v9)
      {
        unsigned int v11 = *v8++;
        v9 += local_xcode_char_Utf16leToWin874(v11, (char *)(a4 + (unsigned __int16)v9));
        if (!--v10) {
          goto LABEL_10;
        }
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v9) = 0;
LABEL_10:
      uint64_t v5 = 0;
      *a5 = v9;
    }
  }
  return v5;
}

uint64_t local_xcode_char_Utf16leToWin874(unsigned int a1, char *a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 > 0xFF)
  {
    switch(a1)
    {
      case 0x2013u:
        char v2 = -106;
        break;
      case 0x2014u:
        char v2 = -105;
        break;
      case 0x2015u:
      case 0x2016u:
      case 0x2017u:
      case 0x201Au:
      case 0x201Bu:
      case 0x201Eu:
      case 0x201Fu:
      case 0x2020u:
      case 0x2021u:
      case 0x2023u:
      case 0x2024u:
      case 0x2025u:
        goto LABEL_11;
      case 0x2018u:
        char v2 = -111;
        break;
      case 0x2019u:
        char v2 = -110;
        break;
      case 0x201Cu:
        char v2 = -109;
        break;
      case 0x201Du:
        char v2 = -108;
        break;
      case 0x2022u:
        char v2 = -107;
        break;
      case 0x2026u:
        char v2 = -123;
        break;
      default:
        if (a1 == 8364)
        {
          char v2 = 0x80;
          break;
        }
LABEL_11:
        uint64_t v3 = 0;
        if ((~a1 & 0xE00) != 0 || a1 - 3585 > 0x5A) {
          return v3;
        }
        char v2 = a1 - 96;
        break;
    }
  }
  else
  {
    char v2 = a1;
  }
  *a2 = v2;
  return 1;
}

uint64_t mDictFind(char *__s2)
{
  char v2 = (const char *)&pMorp_Dct;
  uint64_t v3 = 3677;
  while (cstdlib_strcmp(v2, __s2))
  {
    v2 += 11;
    if (!--v3) {
      return 82;
    }
  }
  return v2[10];
}

void *swapMRT(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int __dst = 0;
  uint64_t v4 = a1 + 89;
  uint64_t v5 = (void *)(a1 + 89 + 4 * a2);
  cstdlib_memcpy(&__dst, v5, 4uLL);
  uint64_t v6 = (void *)(v4 + 4 * a3);
  cstdlib_memcpy(v5, v6, 4uLL);
  return cstdlib_memcpy(v6, &__dst, 4uLL);
}

void *swapMST(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  uint64_t v4 = a1 + 346;
  uint64_t v5 = (void *)(a1 + 346 + 71 * a2);
  cstdlib_memcpy(v8, v5, 0x47uLL);
  uint64_t v6 = (void *)(v4 + 71 * a3);
  cstdlib_memcpy(v5, v6, 0x47uLL);
  return cstdlib_memcpy(v6, v8, 0x47uLL);
}

uint64_t o2t_ObjOpen(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2370838535;
  uint64_t v10 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v10) & 0x80000000) == 0)
  {
    *a3 = 0;
    uint64_t v7 = (void *)heap_Alloc(*(void *)(v10 + 8), 9440);
    if (v7)
    {
      uint64_t v8 = v7;
      cstdlib_memset(v7, 0, 0x24E0uLL);
      uint64_t v3 = 0;
      *uint64_t v8 = a1;
      v8[1] = a2;
      v8[2] = v10;
      *a3 = v8;
    }
    else
    {
      return 2370838538;
    }
  }
  return v3;
}

uint64_t o2t_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2370838535;
  uint64_t v4 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4) & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t o2t_Transcribe(unsigned char *a1, unsigned char *a2, unsigned int a3, _WORD *a4, _WORD *a5, char *__dst, unsigned __int16 *a7, char *a8)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2370838535;
  char v35 = 0;
  if (!a1 || !a2 || (unsigned __int16)(a3 - 64) < 0xFFC1u) {
    return v8;
  }
  unsigned __int16 v16 = *a7;
  int v34 = 0;
  __dsta[0] = 0;
  if (a3 < 2)
  {
    ReadThaiChar((char *)*a2, __dst);
    if (a4[32] || a5[32])
    {
      unsigned __int16 v31 = cstdlib_strlen(__dst);
      cstdlib_memcpy(__dsta, __dst, v31);
      __dsta[v31] = 0;
      goto LABEL_15;
    }
LABEL_46:
    unsigned __int16 v29 = cstdlib_strlen(__dst);
    char v28 = 0;
    *a7 = v29;
    goto LABEL_48;
  }
  if (SParser(a1, a2, a3) != 255)
  {
    uint64_t v17 = WParser((uint64_t)a1, __dst, a7, &v35, &v34);
    if ((v17 & 0x80000000) != 0) {
      return v17;
    }
    if (v34 != 255)
    {
      if (v35 && (a4[32] || a5[32]))
      {
        cstdlib_strcpy(__dsta, __dst);
        unsigned __int16 v31 = *a7;
LABEL_15:
        unsigned __int16 v18 = 0;
        int v19 = a4[32] != 0;
        if (a5[32]) {
          v19 |= 2u;
        }
        if (v19 == 3) {
          char v20 = 7;
        }
        else {
          char v20 = v19;
        }
        unsigned __int16 v32 = v16;
        while (1)
        {
          if (v20)
          {
            size_t v21 = (unsigned __int16)a4[32];
            if (v21 + a3 <= 0x3F) {
              break;
            }
          }
          if ((v20 & 2) != 0)
          {
            size_t v24 = (unsigned __int16)a5[32];
            if (v24 + a3 <= 0x3F)
            {
              if (*a2 == 224 && *(unsigned __int8 *)a5 == 224)
              {
                cstdlib_memcpy(v37, a5, v24);
                v37[0] = -31;
                unsigned __int16 v18 = a5[32];
              }
              else
              {
                cstdlib_memcpy(v37, a2, a3);
                cstdlib_memcpy(&v37[a3], a5, (unsigned __int16)a5[32]);
                unsigned __int16 v18 = a5[32] + a3;
              }
              char v22 = -3;
              char v23 = 2;
              goto LABEL_34;
            }
          }
          if ((v20 & 4) != 0)
          {
            size_t v25 = (unsigned __int16)a4[32];
            if (v25 + a3 + (unsigned __int16)a5[32] <= 0x3F)
            {
              cstdlib_memcpy(v37, a4, v25);
              cstdlib_memcpy(&v37[(unsigned __int16)a4[32]], a2, a3);
              unsigned __int16 v26 = a4[32] + a3;
              cstdlib_memcpy(&v37[v26], a5, (unsigned __int16)a5[32]);
              unsigned __int16 v18 = a5[32] + v26;
              char v22 = -5;
              char v23 = 3;
              goto LABEL_34;
            }
          }
LABEL_35:
          if (SParser(a1, v37, v18) == 255) {
            return 2370838535;
          }
          *a7 = v16;
          uint64_t v17 = WParser((uint64_t)a1, __dst, a7, &v35, &v34);
          if ((v17 & 0x80000000) != 0) {
            return v17;
          }
          if (v34 == 255) {
            return 2370838535;
          }
          if (!v20 || !v35)
          {
            if (!v35) {
              return 0;
            }
            if (a3 == 1 && (*a2 + 32) <= 4u)
            {
              cstdlib_strcpy(__dst, __dsta);
              cstdlib_memcpy(&__dst[v31], a5 + 33, (unsigned __int16)a5[289]);
              unsigned __int16 v27 = a5[289] + v31;
              *a7 = v27;
              __dst[v27] = 0;
              char v28 = 2;
            }
            else
            {
              cstdlib_strcpy(__dst, __dsta);
              char v28 = 0;
              *a7 = v31;
            }
LABEL_48:
            uint64_t v8 = 0;
            *a8 = v28;
            return v8;
          }
        }
        cstdlib_memcpy(v37, a4, v21);
        cstdlib_memcpy(&v37[(unsigned __int16)a4[32]], a2, a3);
        unsigned __int16 v18 = a4[32] + a3;
        char v22 = -2;
        char v23 = 1;
LABEL_34:
        v37[v18] = 0;
        *a8 = v23;
        v20 &= v22;
        unsigned __int16 v16 = v32;
        goto LABEL_35;
      }
      goto LABEL_46;
    }
  }
  return v8;
}

uint64_t SParser(unsigned char *a1, const void *a2, unsigned int a3)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  v250 = a1 + 89;
  cstdlib_memset(a1 + 89, 0, 0x100uLL);
  cstdlib_memset(a1 + 346, 0, 0x2380uLL);
  uint64_t v6 = a1 + 24;
  cstdlib_memcpy(a1 + 24, a2, a3);
  unint64_t v7 = 0;
  unsigned __int8 v8 = 0;
  a1[a3 + 24] = 0;
  v273 = a1 + 9434;
  a1[9434] = 0;
  a1[345] = 0;
  uint64_t v9 = 0xFFFFFFFFLL;
  a1[88] = 0;
  unsigned int v248 = a3;
  do
  {
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v9 = 0;
      unsigned int v11 = a1[88];
    }
    else
    {
      uint64_t v10 = &a1[71 * v9++];
      unsigned int v11 = v10[347];
      a1[88] = v11;
    }
    if (v11 >= a3) {
      continue;
    }
    if (v8)
    {
      uint64_t v12 = v8;
      int v13 = 78;
      uint64_t v14 = v250;
      uint64_t v15 = v250;
      do
      {
        int v16 = *v15;
        v15 += 4;
        if (v16 == v11)
        {
          if (v14[1] == 1 && a1[71 * v14[3] + 349] == 69) {
            a1[71 * (v9 - 1) + 349] = 78;
          }
          int v13 = 89;
        }
        uint64_t v14 = v15;
        --v12;
      }
      while (v12);
      if (v13 != 78) {
        continue;
      }
    }
    uint64_t v260 = v9;
    uint64_t v17 = v11;
    int __src = &v6[v11];
    if ((*__src + 95) >= 0x2Eu) {
      uint64_t v18 = csrulesc;
    }
    else {
      uint64_t v18 = 0;
    }
    if ((*__src + 95) >= 0x2Eu) {
      uint64_t v19 = csrulesv;
    }
    else {
      uint64_t v19 = csrulesc;
    }
    uint64_t v269 = v19;
    if (v18 >= v19) {
      goto LABEL_230;
    }
    char v257 = 0;
    LODWORD(v20) = 0;
    HIDWORD(v20) = v11;
    uint64_t v263 = v20;
    do
    {
      size_t v21 = &psrules[61 * v18];
      char v23 = v21 + 30;
      int v22 = *v21;
      size_t v24 = cstdlib_strchr(v21 + 30, 43);
      uint64_t v26 = v11;
      unsigned int v27 = v11;
      if (v22)
      {
        unsigned __int8 v28 = v22;
        *(void *)&long long v25 = v263;
        do
        {
          switch(v28)
          {
            case 'A':
              int v29 = v6[BYTE4(v25)];
              if (v29 == 195) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'B':
              int v29 = v6[BYTE4(v25)];
              if (v29 == 199) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'C':
              BOOL v36 = v6[BYTE4(v25)] - 161 > 0x29;
              uint64_t v37 = 1 << (v6[BYTE4(v25)] + 95);
              uint64_t v38 = 0x2802C50040BLL;
              goto LABEL_86;
            case 'D':
              int v34 = v6[BYTE4(v25)];
              BOOL v39 = (v34 - 164) > 0x13;
              int v40 = 1 << (v34 + 92);
              int v41 = 655425;
              goto LABEL_101;
            case 'E':
              int v29 = v6[BYTE4(v25)];
              if (v29 == 205) {
                goto LABEL_136;
              }
              goto LABEL_83;
            case 'F':
              int v34 = v6[BYTE4(v25)];
              BOOL v39 = (v34 - 164) > 0x12;
              int v40 = 1 << (v34 + 92);
              int v41 = 425985;
              goto LABEL_101;
            case 'G':
              BOOL v36 = v6[BYTE4(v25)] - 170 > 0x23;
              uint64_t v37 = 1 << (v6[BYTE4(v25)] + 86);
              uint64_t v38 = 0x94840A001;
              goto LABEL_86;
            case 'H':
              int v29 = v6[BYTE4(v25)];
              if (v29 == 203) {
                goto LABEL_136;
              }
LABEL_83:
              if ((v29 + 49) < 0xD2u) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'J':
              if ((v6[BYTE4(v25)] + 49) < 0xD2u) {
                goto LABEL_136;
              }
              int v32 = v6[BYTE4(v25)];
              if (v32 == 199 || v32 == 205) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'K':
              BOOL v36 = v6[BYTE4(v25)] - 164 > 0x26;
              uint64_t v37 = 1 << (v6[BYTE4(v25)] + 92);
              uint64_t v38 = 0x4020000001;
              goto LABEL_86;
            case 'L':
              int v33 = v6[BYTE4(v25)];
              if (v33 != 197 && v33 != 195) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'M':
              BOOL v36 = v6[BYTE4(v25)] - 161 > 0x2A;
              uint64_t v37 = 1 << (v6[BYTE4(v25)] + 95);
              uint64_t v38 = 0x40681041401;
              goto LABEL_86;
            case 'N':
              BOOL v36 = v6[BYTE4(v25)] - 162 > 0x28;
              uint64_t v37 = 1 << (v6[BYTE4(v25)] + 94);
              uint64_t v38 = 0x1A8006F81C5;
LABEL_86:
              uint64_t v45 = v37 & v38;
              if (!v36 && v45 != 0) {
                goto LABEL_117;
              }
              goto LABEL_136;
            case 'O':
              LOBYTE(v34) = v6[BYTE4(v25)];
              if ((v34 + 49) < 0xD2u) {
                goto LABEL_136;
              }
              BOOL v35 = v6[BYTE4(v25)] - 194 > 5 || ((1 << (v34 + 62)) & 0x23) == 0;
              if (!v35) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'P':
              BOOL v42 = v6[BYTE4(v25)] - 184 > 0x13;
              int v43 = 1 << (v6[BYTE4(v25)] + 72);
              int v44 = 796673;
              goto LABEL_94;
            case 'Q':
              BOOL v42 = v6[BYTE4(v25)] - 166 > 7;
              int v43 = 1 << (v6[BYTE4(v25)] + 90);
              int v44 = 145;
              goto LABEL_94;
            case 'R':
              BOOL v42 = v6[BYTE4(v25)] - 195 > 4;
              int v43 = 1 << (v6[BYTE4(v25)] + 61);
              int v44 = 21;
LABEL_94:
              int v47 = v43 & v44;
              if (!v42 && v47 != 0) {
                goto LABEL_117;
              }
              goto LABEL_136;
            case 'S':
              int v34 = v6[BYTE4(v25)];
              BOOL v39 = (v34 - 174) > 0x1B;
              int v40 = 1 << (v34 + 82);
              int v41 = 134217731;
LABEL_101:
              int v49 = v40 & v41;
              if (!v39 && v49 != 0) {
                goto LABEL_111;
              }
              goto LABEL_136;
            case 'T':
              if ((v6[BYTE4(v25)] & 0xFC) == 0xE8) {
                goto LABEL_117;
              }
              if (psrules[61 * v18 + 60] == 78) {
                int v30 = -2;
              }
              else {
                int v30 = -1;
              }
              int v31 = v25;
              if (psrules[61 * v18 + 60] == 78) {
                int v31 = v25 + 1;
              }
              LODWORD(v25) = v31;
              break;
            case 'U':
              LOBYTE(v34) = v6[BYTE4(v25)];
              if ((v34 + 49) < 0xD2u || (v34 | 4) == 0xC7) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'W':
              int v34 = v6[BYTE4(v25)];
              if (v34 == 194) {
                goto LABEL_136;
              }
              goto LABEL_110;
            case 'X':
              if ((v6[BYTE4(v25)] + 95) > 0x2Du) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'Y':
              LOBYTE(v34) = v6[BYTE4(v25)];
              if ((v34 + 95) > 0x2Du) {
                goto LABEL_136;
              }
              goto LABEL_111;
            case 'Z':
              int v34 = v6[BYTE4(v25)];
              if (v34 == 199) {
                goto LABEL_136;
              }
LABEL_110:
              if ((v34 + 49) < 0xD2u) {
                goto LABEL_136;
              }
LABEL_111:
              *(int32x2_t *)&long long v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              long long v276 = v25;
              contable((char)v34, 1, v278);
              long long v25 = v276;
              if (v278[0] == 45) {
                int v30 = -1;
              }
              else {
                int v30 = -2;
              }
              break;
            case 'a':
              if (v6[BYTE4(v25)] != 209) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'b':
              if (v6[BYTE4(v25)] != 212) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'c':
              if (v6[BYTE4(v25)] != 213) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'd':
              if (v6[BYTE4(v25)] != 214) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'e':
              if (v6[BYTE4(v25)] != 215) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'f':
              if (v6[BYTE4(v25)] != 216) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'g':
              if (v6[BYTE4(v25)] != 217) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'h':
              if (v6[BYTE4(v25)] != 211) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'i':
              if (v6[BYTE4(v25)] != 231) {
                goto LABEL_136;
              }
              goto LABEL_117;
            case 'j':
              if (v6[BYTE4(v25)] != 236) {
                goto LABEL_136;
              }
              goto LABEL_117;
            default:
              if (v6[BYTE4(v25)] != v28) {
                goto LABEL_136;
              }
LABEL_117:
              *(int32x2_t *)&long long v25 = vadd_s32(*(int32x2_t *)&v25, (int32x2_t)0x100000001);
              int v30 = -2;
              break;
          }
          if (v30 != -2) {
            break;
          }
          unsigned __int8 v28 = v21[v25];
        }
        while (v28);
        if (v30 != -2) {
          goto LABEL_136;
        }
        unsigned int v27 = BYTE4(v25);
        uint64_t v26 = BYTE4(v25);
      }
      unsigned __int8 v51 = v6[v26];
      if ((v51 & 0xFC) == 0xE8) {
        goto LABEL_136;
      }
      if (v51 - 208 <= 9 && v51 != 211) {
        goto LABEL_136;
      }
      unsigned int v53 = v27 - v11;
      if (v51 == 236 || v53 == -1) {
        goto LABEL_136;
      }
      cstdlib_strncpy(__dst, __src, (int)v53);
      __dst[v53] = 0;
      if (!v24) {
        goto LABEL_195;
      }
      uint64_t v55 = cstdlib_strchr(v24, 39);
      uint64_t v56 = (unsigned __int8 *)&v279;
      if (v55)
      {
        while (1)
        {
          int v58 = *++v56;
          int v57 = v58;
          if (v58 == 88) {
            break;
          }
          if (!v57)
          {
            if (patt_check(v56, "X\xE4\x58X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        uint64_t v59 = (unsigned __int8 *)&v279;
        while (1)
        {
          int v61 = *++v59;
          int v60 = v61;
          if (v61 == 88) {
            break;
          }
          if (!v60)
          {
            if (patt_check(v59, "X\xE2\x58X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        char v62 = (unsigned __int8 *)&v279;
        while (1)
        {
          int v64 = *++v62;
          int v63 = v64;
          if (v64 == 88) {
            break;
          }
          if (!v63)
          {
            if (patt_check(v62, "X\xE0\x58X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        uint64_t v65 = (unsigned __int8 *)&v279;
        while (1)
        {
          int v67 = *++v65;
          int v66 = v67;
          if (v67 == 88) {
            break;
          }
          if (!v66)
          {
            if (patt_check(v65, "X\xE1\x58\xE0\x58\x52") != 255) {
              goto LABEL_192;
            }
            break;
          }
        }
        int v68 = __dst;
        do
        {
          int v70 = *v68++;
          int v69 = v70;
        }
        while ((v70 + 49) < 0xD2u);
        int v71 = *v68;
        switch(v71)
        {
          case 199:
            if (v69 == 164) {
              goto LABEL_136;
            }
            break;
          case 197:
            unsigned int v87 = v69 - 161;
            BOOL v36 = v87 > 0x1D;
            int v88 = (1 << v87) & 0x2C000001;
            if (!v36 && v88 != 0) {
              goto LABEL_136;
            }
            break;
          case 195:
            unsigned int v72 = v69 - 161;
            if (v72 <= 0x29 && ((1 << v72) & 0x2802C500403) != 0) {
              goto LABEL_136;
            }
            break;
        }
LABEL_192:
        if (patt_check((unsigned __int8 *)__dst, "\xE0\x58\x52") == 1
          || patt_check((unsigned __int8 *)__dst, "\xE1\x58\x52") == 1
          || patt_check((unsigned __int8 *)__dst, "\xE2\x58\x52") == 1)
        {
          goto LABEL_136;
        }
LABEL_195:
        if (v22 == 33)
        {
          char v90 = a1[88];
          if (!v90) {
            goto LABEL_136;
          }
          if (patt_check((unsigned __int8 *)__dst, "X\xEC\x58XX\xEC\xECPQS") != 1)
          {
            if (patt_check((unsigned __int8 *)__dst, "XX\xEC\xECPQS") == 1
              && v90 != 1
              && (v6[(v90 - 1)] + 49) < 0xD2u)
            {
              goto LABEL_136;
            }
            goto LABEL_212;
          }
          if (v90 == 1)
          {
            unsigned __int8 v92 = -1;
          }
          else
          {
            if (v6[(v90 - 1)] - 205 <= 7
              && ((1 << (v6[(v90 - 1)] + 51)) & 0xA1) != 0)
            {
              goto LABEL_212;
            }
            unsigned __int8 v92 = v90 - 2;
            if (v90 == 2) {
              goto LABEL_136;
            }
          }
          if (v6[v92] != 226) {
            goto LABEL_136;
          }
        }
LABEL_212:
        unint64_t v93 = a1[345];
        if (v93 > 0x40) {
          return 255;
        }
        unsigned int v94 = *v273;
        if (v94 > 0x80) {
          return 255;
        }
        if (v257)
        {
          long long v95 = &a1[4 * v93];
          char v96 = v95[90] + 1;
          char v97 = v95[91] + 1;
          long long v98 = a1 + 9434;
        }
        else
        {
          cstdlib_memset(&a1[4 * v93 + 89], 0, 4uLL);
          unint64_t v93 = a1[345];
          uint64_t v99 = (uint64_t)&a1[4 * v93 + 89];
          *(unsigned char *)uint64_t v99 = a1[88];
          *(_WORD *)(v99 + 1) = 0;
          long long v98 = a1 + 9434;
          unsigned int v94 = *v273;
          *(unsigned char *)(v99 + 3) = v94;
          char v97 = 1;
          char v96 = 1;
        }
        long long v100 = &a1[4 * v93];
        v100[90] = v96;
        v100[91] = v97;
        cstdlib_memset(&a1[71 * v94 + 346], 0, 0x47uLL);
        long long v101 = &a1[71 * *v98 + 346];
        *long long v101 = a1[88];
        v101[1] = v11 + v53;
        v101[2] = 32;
        v101[5] = v18;
        cstdlib_strcpy(v101 + 6, __dst);
        a1[71 * *v98 + 384] = 0;
        int v102 = mDictFind(__dst);
        long long v103 = &a1[71 * *v98 + 346];
        v103[4] = v102;
        if (v103[1] == v248) {
          char v104 = 76;
        }
        else {
          char v104 = 70;
        }
        v103[3] = v104;
        if (v102 == 82 && cstdlib_strchr(v23, 33))
        {
          char v105 = *v273;
          long long v106 = &a1[71 * *v273];
          v106[350] = 86;
          v106[416] = 0;
        }
        else
        {
          long long v107 = cstdlib_strchr(v23, 39);
          char v105 = *v273;
          long long v108 = &a1[71 * *v273 + 416];
          if (v107) {
            *long long v108 = 2;
          }
          else {
            *long long v108 = 1;
          }
        }
        ++v257;
        char *v273 = v105 + 1;
        goto LABEL_136;
      }
      unsigned int v73 = __dst;
      do
      {
        int v75 = *v73++;
        int v74 = v75;
      }
      while ((v75 + 49) < 0xD2u);
      if (v74 != 187 || *v73 != 197)
      {
        BOOL v76 = (unsigned __int8 *)&v279;
        do
        {
          int v78 = *++v76;
          int v77 = v78;
          if (v78 == 224) {
            goto LABEL_171;
          }
        }
        while (v77);
        if (patt_check(v76, "\xE0\x43\x52") != 1)
        {
LABEL_171:
          uint64_t v79 = (unsigned __int8 *)&v279;
          while (1)
          {
            int v81 = *++v79;
            int v80 = v81;
            if (v81 == 225) {
              break;
            }
            if (!v80)
            {
              if (patt_check(v79, "\xE1\x43\x52") == 1) {
                goto LABEL_179;
              }
              break;
            }
          }
          uint64_t v82 = (unsigned __int8 *)&v279;
          while (1)
          {
            int v84 = *++v82;
            int v83 = v84;
            if (v84 == 226) {
              goto LABEL_195;
            }
            if (!v83)
            {
              if (patt_check(v82, "\xE2\x43\x52") != 1) {
                goto LABEL_195;
              }
              break;
            }
          }
        }
LABEL_179:
        char v85 = cstdlib_strlen(__dst);
        if (__dst[(v85 - 1)] - 195 > 4
          || ((1 << (__dst[(v85 - 1)] + 61)) & 0x15) == 0)
        {
          goto LABEL_195;
        }
      }
LABEL_136:
      ++v18;
    }
    while (v18 != v269);
    unsigned __int8 v8 = a1[345];
    if (v257)
    {
      a1[345] = ++v8;
      unint64_t v7 = *v273;
      a3 = v248;
      uint64_t v9 = v260;
      continue;
    }
    LOBYTE(v7) = *v273;
    a3 = v248;
    uint64_t v17 = v11;
LABEL_230:
    long long v109 = &a1[4 * v8];
    v109[89] = v11;
    *((_WORD *)v109 + 45) = 257;
    v109[92] = v7;
    LODWORD(v109) = v7;
    uint64_t v110 = (uint64_t)&a1[71 * v7 + 346];
    *(unsigned char *)uint64_t v110 = v11;
    *(unsigned char *)(v110 + 1) = v11 + 1;
    *(_WORD *)(v110 + 2) = 20000;
    *(unsigned char *)(v110 + 4) = 85;
    *(unsigned char *)(v110 + 6) = a1[v17 + 24];
    *(unsigned char *)(v110 + 7) = 0;
    *(unsigned char *)(v110 + 38) = 0;
    *(unsigned char *)(v110 + 70) = 1;
    a1[345] = ++v8;
    unint64_t v7 = (v109 + 1);
    char *v273 = (_BYTE)v109 + 1;
    uint64_t v111 = ((_BYTE)v109 + 1);
    *(_WORD *)&a1[71 * v111 + 278] = 21573;
    if ((v7 & 0x100) != 0)
    {
      unint64_t v7 = 0;
      uint64_t v9 = v260;
    }
    else
    {
      int v112 = a1[88];
      long long v113 = a1 + 349;
      uint64_t v9 = v260;
      do
      {
        if (*(v113 - 2) == v112 && *v113 != 69) {
          *long long v113 = 78;
        }
        v113 += 71;
        --v111;
      }
      while (v111);
    }
  }
  while ((int)v9 < v7);
  if ((_BYTE)v7)
  {
    unint64_t v114 = 0;
    unint64_t v115 = v7;
    unint64_t v116 = v7;
    do
    {
      long long v117 = &a1[71 * v114];
      if (v117[350] == 86)
      {
        long long v118 = v117 + 346;
        if (v114 >= v116)
        {
          unint64_t v122 = v115;
        }
        else
        {
          __int16 v119 = &a1[71 * v114];
          unsigned __int16 v120 = v119 + 352;
          v267 = v119 + 349;
          v270 = v119 + 347;
          char v121 = 1;
          unint64_t v122 = v115;
          unint64_t v123 = v114;
LABEL_243:
          long long v124 = &a1[71 * v123 + 352];
          do
          {
            if (*(v124 - 5) == *v118)
            {
              cstdlib_strcpy(__dst, v124);
              cstdlib_strcat(__dst, v120);
              int v125 = mDictFind(__dst);
              if (v125 != 82)
              {
                char v126 = v125;
                cstdlib_strcat(v124, v120);
                char v121 = 0;
                *(v124 - 5) = *v270;
                *(v124 - 3) = *v267;
                *(v124 - 2) = v126;
                ++v123;
                unint64_t v115 = *v273;
                unint64_t v122 = v115;
                unint64_t v127 = v115;
                if (v123 < v115) {
                  goto LABEL_243;
                }
                goto LABEL_264;
              }
              unint64_t v122 = *v273;
            }
            ++v123;
            v124 += 71;
          }
          while (v123 < v122);
          unint64_t v116 = v122;
          unint64_t v115 = v122;
          unint64_t v127 = v122;
          if ((v121 & 1) == 0) {
            goto LABEL_264;
          }
        }
        long long v128 = &a1[71 * v114];
        v128[349] = 69;
        int v129 = patt_check(v128 + 352, "X\xECPQS");
        unint64_t v115 = v122;
        unint64_t v127 = v116;
        if (v129 == 1)
        {
          cstdlib_strcpy(&a1[71 * v114 + 384], "!");
          unint64_t v115 = *v273;
          unint64_t v127 = v115;
        }
        v117[350] = 84;
        if ((_BYTE)v127)
        {
          int v130 = *v118;
          uint64_t v131 = v127;
          long long v132 = a1 + 349;
          do
          {
            if (*(v132 - 2) == v130 && *v132 != 69) {
              unsigned char *v132 = 78;
            }
            v132 += 71;
            --v131;
          }
          while (v131);
        }
        else
        {
          unint64_t v127 = 0;
        }
      }
      else
      {
        unint64_t v127 = v116;
      }
LABEL_264:
      ++v114;
      unint64_t v116 = v127;
    }
    while (v114 < v127);
    unsigned __int8 v8 = a1[345];
  }
  else
  {
    LOBYTE(v115) = 0;
  }
  if (v8 >= 2u)
  {
    uint64_t v133 = 0;
    uint64_t v134 = 1;
    uint64_t v135 = 93;
    do
    {
      int v136 = v133 + 1;
      if (v133 + 1 < (unint64_t)v8)
      {
        uint64_t v137 = v135;
        unint64_t v138 = v134;
        do
        {
          if (a1[4 * v133 + 89] > a1[v137])
          {
            swapMRT((uint64_t)a1, v133, v138);
            unsigned __int8 v8 = a1[345];
          }
          ++v138;
          v137 += 4;
        }
        while (v138 < v8);
      }
      ++v134;
      v135 += 4;
      ++v133;
    }
    while (v8 - 1 > v136);
    LOBYTE(v115) = *v273;
  }
  if (v115 >= 2u)
  {
    uint64_t v139 = 0;
    v140 = a1 + 418;
    uint64_t v141 = 1;
    unsigned __int8 v142 = v115;
    do
    {
      int v143 = v139 + 1;
      if (v139 + 1 < (unint64_t)v142)
      {
        int v144 = &a1[71 * v139];
        unsigned int v145 = v144 + 346;
        unsigned int v146 = v144 + 347;
        uint64_t v147 = v140;
        unint64_t v148 = v141;
        do
        {
          unsigned int v149 = *v145;
          unsigned int v150 = *(v147 - 1);
          if (v149 > v150 || v149 == v150 && *v146 < *v147)
          {
            swapMST((uint64_t)a1, v139, v148);
            LOBYTE(v115) = *v273;
          }
          ++v148;
          v147 += 71;
          unsigned __int8 v142 = v115;
        }
        while (v148 < v115);
      }
      ++v141;
      v140 += 71;
      ++v139;
    }
    while (v142 - 1 > v143);
    unsigned __int8 v8 = a1[345];
  }
  if (v8 >= 2u)
  {
    int v151 = a1[92];
    uint64_t v152 = v8 - 1;
    unsigned int v153 = a1 + 96;
    do
    {
      v151 += *(v153 - 6);
      *unsigned int v153 = v151;
      v153 += 4;
      --v152;
    }
    while (v152);
  }
  if (!v8) {
    return 1;
  }
  uint64_t v154 = v8;
  uint64_t v155 = a1 + 350;
  v268 = a1 + 348;
  while (2)
  {
    uint64_t v156 = &a1[4 * --v154];
    unsigned int v157 = v156[91];
    v277 = v156 + 91;
    if (v157 < 2) {
      goto LABEL_484;
    }
    uint64_t v158 = &a1[4 * v154];
    char v160 = v158[90];
    uint64_t v159 = v158 + 90;
    uint64_t v161 = v159[2];
    v274 = v159 + 2;
    unsigned __int8 v162 = v160 + v161;
    if (v161 >= (v160 + v161))
    {
      int v167 = -1;
      __int16 v164 = -1;
      LOWORD(v166) = -1;
      int v169 = -1;
    }
    else
    {
      int v163 = -1;
      __int16 v164 = -1;
      uint64_t v165 = v159[2];
      int v166 = 0xFFFF;
      int v167 = -1;
      uint64_t v168 = &v155[71 * v165];
      int v169 = -1;
      do
      {
        if (*(v168 - 2) != 89)
        {
          int v170 = *(v168 - 1);
          if (v170 == 76) {
            int v171 = v165;
          }
          else {
            int v171 = v167;
          }
          if (v170 == 78)
          {
            int v171 = v167;
            int v172 = v165;
          }
          else
          {
            int v172 = v163;
          }
          if (v170 == 70)
          {
            int v169 = v165;
          }
          else
          {
            int v167 = v171;
            int v163 = v172;
          }
          int v173 = *v168;
          if (v173 == 88) {
            int v174 = v165;
          }
          else {
            int v174 = v166;
          }
          if (v173 == 89) {
            __int16 v164 = v165;
          }
          else {
            int v166 = v174;
          }
        }
        v168 += 71;
        ++v165;
      }
      while (v162 != v165);
      if ((v163 & 0x80000000) == 0 && ((v167 & 0x80000000) == 0 || (v169 & 0x80000000) == 0))
      {
        uint64_t v175 = &v268[71 * v159[2]];
        uint64_t v176 = v162 - v161;
        do
        {
          if (v175[1] == 78 && *v175 != 89)
          {
            unsigned char *v277 = --v157;
            *uint64_t v175 = 89;
          }
          v175 += 71;
          --v176;
        }
        while (v176);
      }
    }
    if (v167 < 0 && v169 < 0 && (v161 + 1) < v162)
    {
      unsigned __int8 v177 = a1[71 * v161 + 347];
      unsigned __int8 v178 = v161 + 1;
      int v179 = &v268[71 * (v161 + 1)];
      unsigned __int8 v180 = v161;
      while (*(v179 - 1) > v177)
      {
        uint64_t v181 = &a1[71 * v180];
        if (v181[348] != 89)
        {
          __int16 v182 = v181 + 348;
          unsigned __int8 v180 = v178;
          unsigned __int8 v177 = *(v179 - 1);
LABEL_332:
          unsigned char *v277 = --v157;
          *__int16 v182 = 89;
          goto LABEL_333;
        }
        unsigned __int8 v180 = v178;
        unsigned __int8 v177 = *(v179 - 1);
LABEL_333:
        ++v178;
        v179 += 71;
        if (v162 == v178) {
          goto LABEL_334;
        }
      }
      __int16 v182 = v179;
      if (*v179 == 89) {
        goto LABEL_333;
      }
      goto LABEL_332;
    }
LABEL_334:
    if (v157 < 2u) {
      goto LABEL_484;
    }
    if (v161 >= v162)
    {
      BOOL v190 = 0;
      __int16 v184 = -1;
      __int16 v186 = -1;
      __int16 v187 = -1;
      __int16 v189 = -1;
    }
    else
    {
      int v183 = -1;
      __int16 v184 = -1;
      uint64_t v185 = v161;
      __int16 v186 = -1;
      __int16 v187 = -1;
      int v188 = &v155[71 * v161];
      __int16 v189 = -1;
      do
      {
        if (*(v188 - 2) != 89)
        {
          if (*(v188 - 1) == 76) {
            int v183 = v185;
          }
          switch(*v188)
          {
            case 'P':
              __int16 v187 = v185;
              break;
            case 'Q':
              __int16 v186 = v185;
              break;
            case 'R':
              __int16 v189 = v185;
              break;
            case 'S':
              __int16 v184 = v185;
              break;
            case 'X':
              LOWORD(v166) = v185;
              break;
            case 'Y':
              __int16 v164 = v185;
              break;
            default:
              break;
          }
        }
        v188 += 71;
        ++v185;
      }
      while (v162 != v185);
      BOOL v190 = v183 >= 0;
      if ((v183 & 0x80000000) == 0 && (v166 & 0x8000) != 0 && v164 < 0)
      {
        uint64_t v191 = v162 - v161;
        uint64_t v192 = &v268[71 * v161];
        do
        {
          if (v192[1] != 76 && *v192 != 89)
          {
            unsigned char *v277 = --v157;
            *uint64_t v192 = 89;
          }
          v192 += 71;
          --v191;
        }
        while (v191);
        BOOL v190 = 1;
      }
    }
    BOOL v271 = v190;
    if ((v166 & 0x8000) != 0 && v164 < 0)
    {
LABEL_381:
      if ((v166 & 0x8000) == 0 || (v164 & 0x8000) == 0) {
        goto LABEL_383;
      }
      goto LABEL_431;
    }
    if ((v166 & 0x8000) != 0)
    {
      if (v161 < v162 && (v164 & 0x8000) == 0)
      {
        __int16 __srca = v187;
        __int16 v258 = v186;
        __int16 v261 = v184;
        __int16 v264 = v189;
        uint64_t v193 = v159;
        uint64_t v194 = v154;
        uint64_t v197 = &v155[71 * v161];
        int v198 = v161;
        do
        {
          if (v198 != v164
            && (*v197 & 0xFE) == 0x58
            && *(v197 - 2) != 89
            && compareXX((uint64_t)a1, v194, v198, v164))
          {
            __int16 v164 = v198;
          }
          ++v198;
          v197 += 71;
        }
        while (v162 != v198);
LABEL_380:
        uint64_t v154 = v194;
        uint64_t v155 = a1 + 350;
        uint64_t v159 = v193;
        __int16 v189 = v264;
        __int16 v186 = v258;
        __int16 v184 = v261;
        __int16 v187 = __srca;
      }
      goto LABEL_381;
    }
    if (v161 < v162)
    {
      __int16 __srca = v187;
      __int16 v258 = v186;
      __int16 v261 = v184;
      __int16 v264 = v189;
      uint64_t v193 = v159;
      uint64_t v194 = v154;
      uint64_t v195 = &v155[71 * v161];
      int v196 = v161;
      do
      {
        if (v196 != (__int16)v166
          && (*v195 & 0xFE) == 0x58
          && *(v195 - 2) != 89
          && compareXX((uint64_t)a1, v194, v196, v166))
        {
          LOWORD(v166) = v196;
        }
        ++v196;
        v195 += 71;
      }
      while (v162 != v196);
      goto LABEL_380;
    }
LABEL_383:
    if ((v187 & 0x8000) == 0 || (v186 & 0x8000) == 0 || (v189 & 0x8000) == 0 || (v184 & 0x8000) == 0)
    {
      if (v161 >= v162)
      {
        if (!v271) {
          goto LABEL_430;
        }
      }
      else
      {
        __int16 v265 = v189;
        uint64_t v252 = v154;
        int v199 = 0;
        int v200 = &v268[71 * v161];
        uint64_t v201 = v162 - v161;
        uint64_t v202 = v161;
        do
        {
          if ((a1[71 * v202 + 350] & 0xFE) == 0x58 && a1[71 * v202 + 348] != 89)
          {
            if (a1[71 * v202 + 349] != 76
              && findCfollow((uint64_t)a1, v202, 0x58u) == 255)
            {
              if ((v265 & 0x8000) == 0
                && (findCfollow((uint64_t)a1, v202, 0x51u) != 255
                 || findCfollow((uint64_t)a1, v202, 0x53u) != 255
                 || findCfollow((uint64_t)a1, v202, 0x50u) != 255))
              {
                uint64_t v205 = v162 - v161;
                uint64_t v206 = &v268[71 * v161];
                do
                {
                  if (v206[2] == 82)
                  {
                    if (*v206 != 89)
                    {
                      --*v277;
                      *uint64_t v206 = 89;
                    }
                    int v199 = 9;
                  }
                  v206 += 71;
                  --v205;
                }
                while (v205);
              }
            }
            else
            {
              unsigned __int16 v203 = &v268[71 * v161];
              uint64_t v204 = v162 - v161;
              do
              {
                if ((v203[2] & 0xFE) != 0x58)
                {
                  if (*v203 != 89)
                  {
                    --*v277;
                    *unsigned __int16 v203 = 89;
                  }
                  int v199 = 9;
                }
                v203 += 71;
                --v204;
              }
              while (v204);
            }
          }
          ++v202;
        }
        while (v202 != v162);
        if (v199 != 9 && (v265 & 0x8000) == 0)
        {
          uint64_t v207 = &v268[71 * v161];
          do
          {
            if (v207[2] == 82
              && (allCfollow((uint64_t)a1, v161, 0x52u)
               || allCfollow((uint64_t)a1, v161, 0x54u))
              && *v207 != 89)
            {
              --*v277;
              *uint64_t v207 = 89;
            }
            LOBYTE(v161) = v161 + 1;
            v207 += 71;
          }
          while (v162 != v161);
        }
        BOOL v35 = v199 == 9;
        uint64_t v155 = a1 + 350;
        uint64_t v154 = v252;
        if (v35) {
          goto LABEL_431;
        }
        if (v271)
        {
          do
          {
            if (v200[1] != 76 && *v200 != 89)
            {
              --*v277;
              *int v200 = 89;
            }
            v200 += 71;
            --v201;
          }
          while (v201);
          goto LABEL_431;
        }
LABEL_430:
        keepLongest((uint64_t)a1, v154);
      }
    }
LABEL_431:
    if (*v277 >= 2u)
    {
      uint64_t v208 = *v274;
      unsigned __int8 v209 = *v159 + v208;
      if (v208 >= v209)
      {
        __int16 v211 = -1;
        __int16 v215 = -1;
        __int16 v214 = -1;
        __int16 v259 = -1;
        __int16 v262 = -1;
        __int16 __srcb = -1;
        __int16 v213 = -1;
      }
      else
      {
        int v210 = &v155[71 * *v274];
        __int16 v211 = -1;
        __int16 v259 = -1;
        __int16 v262 = -1;
        uint64_t v212 = *v274;
        __int16 v213 = -1;
        __int16 __srcb = -1;
        __int16 v214 = -1;
        __int16 v215 = -1;
        do
        {
          if (*(v210 - 2) != 89)
          {
            switch(*v210)
            {
              case 'P':
                __int16 v259 = v212;
                break;
              case 'Q':
                __int16 __srcb = v212;
                break;
              case 'R':
                __int16 v214 = v212;
                break;
              case 'S':
                __int16 v213 = v212;
                break;
              case 'T':
                __int16 v262 = v212;
                break;
              case 'X':
                __int16 v211 = v212;
                break;
              case 'Y':
                __int16 v215 = v212;
                break;
              default:
                break;
            }
          }
          ++v212;
          v210 += 71;
        }
        while ((*v159 + v208) != v212);
      }
      BOOL v251 = (v211 & v215 & 0x8000u) != 0;
      if (((unsigned __int16)v211 & (unsigned __int16)v215 & 0x8000) != 0)
      {
        __int16 v247 = v213;
        __int16 v249 = v214;
        int v216 = *v277;
        uint64_t v253 = v154;
        unint64_t v217 = 0;
        uint64_t v272 = 71 * *v274 + 350;
        uint64_t v275 = *v274;
        v266 = &v268[71 * v208];
        do
        {
          if (v208 >= v209)
          {
            LOBYTE(v220) = v208;
          }
          else
          {
            unsigned __int8 v218 = v208;
            uint64_t v219 = v272;
            uint64_t v220 = v208;
            while (1)
            {
              if (a1[v219] != 82)
              {
                unsigned __int8 v221 = aX_5[v217 + 11];
                if (findCfollow((uint64_t)a1, v220, v221) != 255) {
                  break;
                }
              }
              ++v220;
              v219 += 71;
              ++v218;
              if (v209 == v220)
              {
                LOBYTE(v220) = v209;
                goto LABEL_462;
              }
            }
            uint64_t v222 = v218;
            long long v223 = v266;
            uint64_t v224 = v275;
            do
            {
              if (v222 != v224
                && (findCfollow((uint64_t)a1, v224, v221) == 255 || v223[2] == 82)
                && *v223 != 89)
              {
                unsigned char *v277 = --v216;
                *long long v223 = 89;
              }
              ++v224;
              v223 += 71;
            }
            while (v209 != v224);
LABEL_462:
            uint64_t v208 = v275;
          }
          char v225 = v217 + 1;
          int v226 = v220;
          if (v220 != v209) {
            break;
          }
        }
        while (v217++ < 3);
        uint64_t v155 = a1 + 350;
        uint64_t v154 = v253;
        __int16 v214 = v249;
        __int16 v213 = v247;
        if (v226 == v209 && v225 == 4) {
          keepLongest((uint64_t)a1, v253);
        }
      }
      if ((v262 & 0x8000) == 0)
      {
        unsigned int v228 = *v277;
        if (v228 >= 2)
        {
          BOOL v229 = v251;
          if (v259 >= 0) {
            BOOL v229 = 0;
          }
          if (v229 && __srcb < 0 && v214 < 0 && v213 < 0)
          {
            keepLongest((uint64_t)a1, v154);
          }
          else if (v208 < v209)
          {
            long long v230 = &v268[71 * v208];
            uint64_t v231 = v209 - v208;
            do
            {
              if (v230[2] == 84 && *v230 != 89)
              {
                unsigned char *v277 = --v228;
                *long long v230 = 89;
              }
              v230 += 71;
              --v231;
            }
            while (v231);
          }
        }
      }
    }
LABEL_484:
    if ((_BYTE)v154) {
      continue;
    }
    break;
  }
  uint64_t v232 = a1[345];
  uint64_t result = 1;
  if (!a1[345]) {
    return result;
  }
  uint64_t v234 = 0;
  int v235 = 0;
  uint64_t v236 = 0;
  while (2)
  {
    long long v237 = &a1[4 * v234];
    long long v238 = v237 + 91;
    if (v237[91] != 2) {
      goto LABEL_503;
    }
    unsigned int v239 = v237[92];
    char v240 = v237[90];
    unsigned __int8 v241 = v240 + v239;
    if (v239 >= (v240 + v239)) {
      goto LABEL_503;
    }
    int v242 = 0;
    long long v243 = &a1[71 * v239 + 347];
    while (2)
    {
      if (v243[1] == 89)
      {
LABEL_493:
        LOBYTE(v239) = v239 + 1;
        v243 += 71;
        if (v241 == v239) {
          goto LABEL_503;
        }
        continue;
      }
      break;
    }
    if (!v242)
    {
      int v235 = v243[69];
      uint64_t v236 = v239;
      int v242 = *v243;
      goto LABEL_493;
    }
    if (v242 == *v243)
    {
      int v244 = v243[69];
      if (v235 <= v244 || (v245 = &a1[71 * v236], v245[348] == 89))
      {
        char v246 = 1;
      }
      else
      {
        char v246 = 0;
        *long long v238 = 1;
        v245[348] = 89;
      }
      if (v235 < v244 && v243[1] != 89)
      {
        *long long v238 = v246;
        v243[1] = 89;
      }
    }
LABEL_503:
    if (++v234 != v232) {
      continue;
    }
    return 1;
  }
}

uint64_t WParser(uint64_t a1, char *a2, _WORD *a3, unsigned char *a4, int *a5)
{
  *a4 = 0;
  *a2 = 0;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 345);
  if (*(unsigned char *)(a1 + 345))
  {
    uint64_t v10 = (unsigned char *)(a1 + 90);
    do
    {
      *uint64_t v10 = 0;
      v10 += 4;
      --v9;
    }
    while (v9);
  }
  unsigned int v11 = *(unsigned __int8 *)(a1 + 90);
  if (v11 < *(unsigned __int8 *)(a1 + 91))
  {
    LOBYTE(v11) = v11 + 1;
    *(unsigned char *)(a1 + 90) = v11;
  }
  unsigned int v12 = *(unsigned __int8 *)(a1 + 92);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 9434);
  if (v12 < v13)
  {
    uint64_t v14 = (unsigned __int8 *)(a1 + 71 * *(unsigned __int8 *)(a1 + 92) + 348);
    unsigned __int8 v15 = 1;
    do
    {
      int v16 = *v14;
      v14 += 71;
      if (v16 != 89)
      {
        if (v15 == v11) {
          goto LABEL_13;
        }
        ++v15;
      }
      LOBYTE(v12) = v12 + 1;
    }
    while (v13 != v12);
  }
  LOBYTE(v12) = -1;
LABEL_13:
  int v17 = rule2phone(a1, v12);
  if (v17 < 0)
  {
    int v41 = a5;
    int v19 = 0;
  }
  else
  {
    char v18 = v17;
    int v19 = cstdlib_strlen((const char *)(a1 + 71 * v12 + 384));
    if ((unsigned __int16)*a3 < (unsigned __int16)v19)
    {
      uint64_t result = 0;
      int v21 = 255;
      goto LABEL_48;
    }
    int v41 = a5;
    cstdlib_strcpy(a2, (const char *)(a1 + 71 * v12 + 384));
    *a4 = v18;
  }
  if (*(unsigned __int8 *)(a1 + 345) >= 2u)
  {
    for (unint64_t i = 1; i < *(unsigned __int8 *)(a1 + 345); ++i)
    {
      unint64_t v23 = a1 + 4 * i;
      if (*(unsigned __int8 *)(v23 + 89) == *(unsigned __int8 *)(a1 + 71 * v12 + 347))
      {
        unsigned int v26 = *(unsigned __int8 *)(v23 + 90);
        long long v25 = (unsigned char *)(v23 + 90);
        char v24 = v26;
        if (v26 < v25[1]) {
          *long long v25 = ++v24;
        }
        unsigned int v12 = *(unsigned __int8 *)(a1 + 4 * i + 92);
        unsigned int v27 = *(unsigned __int8 *)(a1 + 9434);
        if (v12 < v27)
        {
          unsigned __int8 v28 = (unsigned __int8 *)(a1 + 348 + 71 * *(unsigned __int8 *)(a1 + 4 * i + 92));
          char v29 = 1;
          do
          {
            int v30 = *v28;
            v28 += 71;
            if (v30 != 89)
            {
              if (v29 == v24) {
                goto LABEL_30;
              }
              ++v29;
            }
            LOBYTE(v12) = v12 + 1;
          }
          while (v27 != v12);
        }
        LOBYTE(v12) = -1;
LABEL_30:
        int v31 = rule2phone(a1, v12);
        if ((v31 & 0x80000000) == 0)
        {
          char v32 = v31;
          v19 += cstdlib_strlen((const char *)(a1 + 71 * v12 + 384));
          if ((unsigned __int16)*a3 < (unsigned __int16)v19)
          {
            uint64_t result = 0;
LABEL_46:
            int v21 = 255;
            goto LABEL_47;
          }
          cstdlib_strcat(a2, (const char *)(a1 + 71 * v12 + 384));
          *a4 |= v32;
        }
      }
    }
  }
  int v33 = *(void **)(*(void *)(a1 + 16) + 8);
  int v34 = cstdlib_strlen(a2);
  BOOL v35 = (char *)heap_Calloc(v33, 1, (v34 + 1));
  if (!v35)
  {
    uint64_t result = 2370838538;
    goto LABEL_46;
  }
  BOOL v36 = v35;
  cstdlib_strcpy(v35, a2);
  uint64_t v37 = (char *)v36;
  if (cstdlib_strlen(a2))
  {
    size_t v38 = 0;
    uint64_t v37 = (char *)v36;
    do
    {
      int v39 = a2[v38];
      if (v39 != 39) {
        *v37++ = v39;
      }
      ++v38;
    }
    while (v38 < cstdlib_strlen(a2));
  }
  *uint64_t v37 = 0;
  cstdlib_strcpy(a2, v36);
  heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v36);
  __int16 v40 = cstdlib_strlen(a2);
  uint64_t result = 0;
  *a3 = v40;
  int v21 = 1;
LABEL_47:
  a5 = v41;
LABEL_48:
  *a5 = v21;
  return result;
}

char *ReadThaiChar(char *result, char *__dst)
{
  uint64_t v2 = cchar_dct;
  if (cchar_dct)
  {
    for (unint64_t i = (const char *)&unk_2206E41D5; *((unsigned __int8 *)i - 1) != result; i += 51)
    {
      if (!--v2) {
        return result;
      }
    }
    return cstdlib_strcpy(__dst, i);
  }
  return result;
}

char *contable(int a1, int a2, char *__dst)
{
  if ((a1 + 95) > 0x2D)
  {
    uint64_t v4 = "";
  }
  else
  {
    uint64_t v3 = off_2645622C8;
    if (!a2) {
      uint64_t v3 = off_264562158;
    }
    uint64_t v4 = v3[(char)(a1 + 95)];
  }
  return cstdlib_strcpy(__dst, v4);
}

uint64_t patt_check(unsigned __int8 *a1, unsigned char *a2)
{
  unsigned __int8 v2 = *a1;
  if (*a1)
  {
    while (1)
    {
      int v3 = (char)*a2;
      if (!*a2) {
        return -1;
      }
      if (v3 <= 83) {
        break;
      }
      if (v3 != 84)
      {
        if (v3 == 88)
        {
          if ((v2 + 95) >= 0x2Eu) {
            return -1;
          }
          goto LABEL_18;
        }
LABEL_17:
        if (*a2 != v2) {
          return -1;
        }
        goto LABEL_18;
      }
      uint64_t v9 = (v2 & 0xFC) == 232;
LABEL_19:
      a1 += v9;
      ++a2;
      unsigned __int8 v2 = *a1;
      if (!*a1) {
        goto LABEL_20;
      }
    }
    if (v3 == 67)
    {
      int v7 = v2;
      unsigned __int8 v5 = -1;
      unsigned int v8 = v7 - 161;
      if (v8 > 0x29 || ((1 << v8) & 0x2802C50040BLL) == 0) {
        return v5;
      }
    }
    else
    {
      if (v3 != 82) {
        goto LABEL_17;
      }
      int v4 = v2;
      unsigned __int8 v5 = -1;
      unsigned int v6 = v4 - 195;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0) {
        return v5;
      }
    }
LABEL_18:
    uint64_t v9 = 1;
    goto LABEL_19;
  }
LABEL_20:
  if (*a2) {
    return -1;
  }
  else {
    return 1;
  }
}

uint64_t compareXX(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v8 = allCfollow(a1, a3, 0x52u);
  uint64_t result = allCfollow(a1, a4, 0x52u);
  if (!v8 && result) {
    goto LABEL_3;
  }
  if (!v8)
  {
    int v12 = allNfollow(a1, a3);
    uint64_t result = allNfollow(a1, a4);
    if (!v12 && result)
    {
LABEL_3:
      uint64_t v10 = a1 + 71 * a4;
LABEL_4:
      int v11 = *(unsigned __int8 *)(v10 + 348);
      uint64_t result = 1;
      goto LABEL_10;
    }
    if (!v12) {
      return 0;
    }
  }
  if (result)
  {
    if (*(unsigned __int8 *)(a1 + 346 + 71 * a3 + 1) >= *(unsigned __int8 *)(a1 + 346 + 71 * a4 + 1))
    {
      uint64_t v10 = a1 + 71 * a4;
      goto LABEL_4;
    }
    uint64_t result = 0;
  }
  uint64_t v10 = a1 + 71 * a3;
  int v11 = *(unsigned __int8 *)(v10 + 348);
LABEL_10:
  if (v11 != 89)
  {
    --*(unsigned char *)(a1 + 4 * a2 + 91);
    *(unsigned char *)(v10 + 348) = 89;
  }
  return result;
}

uint64_t findCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  if (*(unsigned char *)(a1 + 71 * a2 + 348) != 89 && *(unsigned char *)(a1 + 345))
  {
    uint64_t v3 = 0;
    do
    {
      int v4 = (unsigned __int8 *)(a1 + 4 * v3);
      if (v4[89] == *(unsigned __int8 *)(a1 + 71 * a2 + 347))
      {
        unsigned int v5 = v4[92];
        unsigned __int8 v6 = v4[90] + v5;
        if (v5 < v6)
        {
          int v7 = (unsigned __int8 *)(a1 + 350 + 71 * v5);
          do
          {
            int v8 = *v7;
            if (a3 == 88)
            {
              if ((v8 & 0xFE) == 0x58 && *(v7 - 1) != 78 && *(v7 - 2) != 89) {
                return v5;
              }
            }
            else if (v8 == a3 && *(v7 - 2) != 89 && *(v7 - 1) != 78)
            {
              return v5;
            }
            LOBYTE(v5) = v5 + 1;
            v7 += 71;
          }
          while (v6 != v5);
        }
      }
      ++v3;
    }
    while (v3 != *(unsigned __int8 *)(a1 + 345));
  }
  LOBYTE(v5) = -1;
  return v5;
}

uint64_t allCfollow(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 345);
  if (!*(unsigned char *)(a1 + 345)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v3) {
      return 0;
    }
  }
  uint64_t v6 = *i;
  char v7 = *(i - 2);
  if (v6 < (v7 + v6))
  {
    uint64_t v8 = a1 + 71 * *i + 350;
    uint64_t v9 = v6 + 1;
    int v10 = (v7 + v6);
    int v11 = (char *)v8;
    while (1)
    {
      int v12 = *v11;
      v11 += 71;
      if (v12 != a3 && *(unsigned char *)(v8 - 2) != 89) {
        break;
      }
      BOOL v13 = v10 == v9++;
      uint64_t v8 = (uint64_t)v11;
      if (v13) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t keepLongest(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result + 4 * a2;
  unsigned int v3 = *(unsigned __int8 *)(v2 + 92);
  unsigned __int8 v4 = *(unsigned char *)(v2 + 90) + v3;
  unsigned __int8 v5 = v3;
  if (v3 < v4)
  {
    uint64_t v6 = (unsigned __int8 *)(result + 71 * v3 + 348);
    while (1)
    {
      int v7 = *v6;
      v6 += 71;
      if (v7 != 89) {
        break;
      }
      LOBYTE(v3) = v3 + 1;
      if (v4 == v3)
      {
        unsigned __int8 v5 = v4;
        goto LABEL_7;
      }
    }
    unsigned __int8 v5 = v3;
  }
LABEL_7:
  if ((v5 + 1) < v4)
  {
    unsigned int v8 = *(unsigned __int8 *)(result + 71 * v5 + 347);
    unsigned __int8 v9 = v5 + 1;
    int v10 = (unsigned __int8 *)(result + 71 * (v5 + 1) + 347);
    do
    {
      int v11 = v10 + 1;
      if (v10[1] != 89)
      {
        unsigned int v12 = *v10;
        if (v12 >= v8)
        {
          if (v12 == v8)
          {
            if (v10[69] < *(unsigned __int8 *)(result + 71 * v5 + 416))
            {
              uint64_t v13 = result + 71 * v5;
              if (*(unsigned char *)(v13 + 348) == 89)
              {
                unsigned __int8 v5 = v9;
                goto LABEL_12;
              }
              int v11 = (unsigned char *)(v13 + 348);
              unsigned __int8 v5 = v9;
            }
          }
          else
          {
            uint64_t v14 = result + 71 * v5;
            if (*(unsigned char *)(v14 + 348) == 89)
            {
              unsigned __int8 v5 = v9;
              unsigned int v8 = *v10;
              goto LABEL_12;
            }
            int v11 = (unsigned char *)(v14 + 348);
            unsigned __int8 v5 = v9;
            unsigned int v8 = *v10;
          }
        }
        --*(unsigned char *)(result + 4 * a2 + 91);
        *int v11 = 89;
      }
LABEL_12:
      ++v9;
      v10 += 71;
    }
    while (v4 != v9);
  }
  return result;
}

uint64_t allNfollow(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 345);
  if (!*(unsigned char *)(a1 + 345)) {
    return 0;
  }
  for (unint64_t i = (unsigned __int8 *)(a1 + 92); *(i - 3) != *(unsigned __int8 *)(a1 + 71 * a2 + 347); i += 4)
  {
    if (!--v2) {
      return 0;
    }
  }
  uint64_t v5 = *i;
  unsigned __int8 v6 = *(i - 2) + v5;
  if (v5 < v6)
  {
    uint64_t v7 = a1 + 71 * v5 + 349;
    uint64_t v8 = v5 + 1;
    unsigned __int8 v9 = (unsigned __int8 *)v7;
    while (1)
    {
      int v10 = *v9;
      v9 += 71;
      if (v10 != 78 && *(unsigned char *)(v7 - 1) != 89) {
        break;
      }
      BOOL v11 = v6 == v8++;
      uint64_t v7 = (uint64_t)v9;
      if (v11) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t rule2phone(uint64_t a1, unsigned int a2)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 71 * a2 + 348) == 89) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a1 + 71 * a2;
  if (*(unsigned char *)(v5 + 384))
  {
    if (*(unsigned char *)(v5 + 384) == 33) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  uint64_t v6 = a1 + 71 * a2;
  if (!*(unsigned char *)(v6 + 352)) {
    return 4294967294;
  }
  uint64_t v7 = (char *)(v5 + 384);
  uint64_t v8 = (char *)(v6 + 352);
  int v9 = *(unsigned __int8 *)(a1 + 71 * a2 + 350);
  if (v9 != 84)
  {
    uint64_t result = 0;
    if (v9 == 85 || *(unsigned char *)(a1 + 71 * a2 + 349) == 69) {
      return result;
    }
    uint64_t v10 = a1 + 71 * a2;
    cstdlib_strcpy(__dst, &psrules[61 * *(unsigned __int8 *)(v10 + 351) + 30]);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 351);
    unsigned __int8 v14 = psrules[61 * v13];
    if (v14)
    {
      unsigned __int8 v15 = (unsigned __int8 *)(v10 + 351);
      long long v16 = 0uLL;
      do
      {
        switch(v14)
        {
          case 'A':
            int v17 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v17 != 195 && (v17 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v17, 0, v131);
              uint64_t v18 = 65;
              goto LABEL_112;
            }
            break;
          case 'B':
            int v19 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v19 != 199 && (v19 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v19, 0, v131);
              uint64_t v18 = 66;
              goto LABEL_112;
            }
            break;
          case 'C':
            int v20 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            BOOL v21 = (v20 - 161) > 0x29 || ((1 << (v20 + 95)) & 0x2802C50040BLL) == 0;
            if (!v21)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v20, 0, v131);
              uint64_t v18 = 67;
              goto LABEL_112;
            }
            break;
          case 'D':
            int v22 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v22 - 164) <= 0x13 && ((1 << (v22 + 92)) & 0xA0041) != 0)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v22, 1, v131);
              uint64_t v18 = 68;
              goto LABEL_112;
            }
            break;
          case 'E':
            int v24 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v24 != 205 && (v24 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v24, 0, v131);
              uint64_t v18 = 69;
              goto LABEL_112;
            }
            break;
          case 'F':
            int v25 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v25 - 164) <= 0x12 && ((1 << (v25 + 92)) & 0x68001) != 0)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v25, 1, v131);
              uint64_t v18 = 70;
              goto LABEL_112;
            }
            break;
          case 'G':
            int v27 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v27 - 170) <= 0x23 && ((1 << (v27 + 86)) & 0x94840A001) != 0)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v27, 0, v131);
              uint64_t v18 = 71;
              goto LABEL_112;
            }
            break;
          case 'H':
            int v29 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v29 != 203 && (v29 + 49) >= 0xD2u)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v29, 0, v131);
              uint64_t v18 = 72;
              goto LABEL_112;
            }
            break;
          case 'J':
            char v30 = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            if ((v30 + 49) >= 0xD2u
              && *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != 199
              && *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != 205)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable(v30, 0, v131);
              uint64_t v18 = 74;
              goto LABEL_112;
            }
            break;
          case 'K':
            int v31 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v31 - 164) <= 0x26 && ((1 << (v31 + 92)) & 0x4020000001) != 0)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v31, 0, v131);
              uint64_t v18 = 75;
              goto LABEL_112;
            }
            break;
          case 'L':
            int v33 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v33 == 197 || v33 == 195)
            {
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
              long long v124 = v16;
              contable((char)v33, 0, v131);
              uint64_t v18 = 76;
              goto LABEL_112;
            }
            break;
          case 'M':
            BOOL v34 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 161 > 0x2A;
            uint64_t v35 = 1 << (*(unsigned char *)(a1 + 71 * a2 + v16 + 352) + 95);
            uint64_t v36 = 0x40681041401;
            goto LABEL_66;
          case 'N':
            BOOL v34 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 162 > 0x28;
            uint64_t v35 = 1 << (*(unsigned char *)(a1 + 71 * a2 + v16 + 352) + 94);
            uint64_t v36 = 0x1A8006F81C5;
LABEL_66:
            uint64_t v37 = v35 & v36;
            BOOL v38 = v34 || v37 == 0;
            goto LABEL_79;
          case 'O':
            char v39 = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            if ((v39 + 49) < 0xD2u) {
              break;
            }
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 194 <= 5
              && ((1 << (v39 + 62)) & 0x23) != 0)
            {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable(v39, 1, v131);
            uint64_t v18 = 79;
            goto LABEL_112;
          case 'P':
            BOOL v38 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) - 184 > 0x13
               || ((1 << (*(unsigned char *)(a1 + 71 * a2 + v16 + 352) + 72)) & 0xC2801) == 0;
LABEL_79:
            int8x8_t v11 = (int8x8_t)vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            if (!v38) {
              *(double *)&long long v16 = *(double *)&v11;
            }
            break;
          case 'Q':
            int v41 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v41 - 166) > 7 || ((1 << (v41 + 90)) & 0x91) == 0) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v41, 0, v131);
            uint64_t v18 = 81;
            goto LABEL_112;
          case 'R':
            int v43 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v43 - 195) > 4 || ((1 << (v43 + 61)) & 0x15) == 0) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v43, 0, v131);
            uint64_t v18 = 82;
            goto LABEL_112;
          case 'S':
            int v45 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if ((v45 - 174) > 0x1B || ((1 << (v45 + 82)) & 0x8000003) == 0) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v45, 1, v131);
            uint64_t v18 = 83;
            goto LABEL_112;
          case 'T':
            if ((*(unsigned char *)(a1 + 71 * a2 + v16 + 352) & 0xFC) == 0xE8)
            {
              int8x8_t v11 = (int8x8_t)0x100000001;
              *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            }
            else
            {
              BOOL v21 = psrules[61 * v13 + 60] == 78;
              int v54 = DWORD1(v16);
              if (v21) {
                int v54 = DWORD1(v16) + 1;
              }
              DWORD1(v16) = v54;
            }
            break;
          case 'U':
            unsigned __int8 v47 = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            if ((v47 + 49) < 0xD2u || (v47 | 4) == 0xC7) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v47, 1, v131);
            uint64_t v18 = 85;
            goto LABEL_112;
          case 'W':
            int v48 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v48 == 194 || (v48 + 49) < 0xD2u) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v48, 1, v131);
            uint64_t v18 = 87;
            goto LABEL_112;
          case 'X':
            char v49 = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            if ((v49 + 95) > 0x2Du) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable(v49, 0, v131);
            uint64_t v18 = 88;
            goto LABEL_112;
          case 'Y':
            char v50 = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            if ((v50 + 95) > 0x2Du) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable(v50, 1, v131);
            uint64_t v18 = 89;
            goto LABEL_112;
          case 'Z':
            int v51 = *(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352);
            if (v51 == 199 || (v51 + 49) < 0xD2u) {
              break;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            long long v124 = v16;
            contable((char)v51, 1, v131);
            uint64_t v18 = 90;
LABEL_112:
            replace((char *)v18, v131, __dst);
            long long v16 = v124;
            break;
          case 'a':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 209;
            goto LABEL_123;
          case 'b':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 212;
            goto LABEL_123;
          case 'c':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 213;
            goto LABEL_123;
          case 'd':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 214;
            goto LABEL_123;
          case 'e':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 215;
            goto LABEL_123;
          case 'f':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 216;
            goto LABEL_123;
          case 'g':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 217;
            goto LABEL_123;
          case 'h':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 211;
            goto LABEL_123;
          case 'i':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 231;
            goto LABEL_123;
          case 'j':
            v11.i8[0] = *(unsigned char *)(a1 + 71 * a2 + v16 + 352);
            int32x2_t v52 = (int32x2_t)vand_s8(v11, (int8x8_t)0xFF000000FFLL);
            int v53 = 236;
LABEL_123:
            v12.i32[0] = v53;
            int8x8_t v11 = (int8x8_t)vdup_lane_s32(vceq_s32(v52, (int32x2_t)vand_s8(v12, (int8x8_t)0xFF000000FFLL)), 0);
            *(int8x8_t *)&long long v16 = vbsl_s8(v11, (int8x8_t)vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001), *(int8x8_t *)&v16);
            break;
          default:
            if (*(unsigned __int8 *)(a1 + 71 * a2 + v16 + 352) != v14) {
              return 0xFFFFFFFFLL;
            }
            *(int32x2_t *)&long long v16 = vadd_s32(*(int32x2_t *)&v16, (int32x2_t)0x100000001);
            break;
        }
        uint64_t v13 = *v15;
        unsigned __int8 v14 = psrules[61 * v13 + BYTE4(v16)];
      }
      while (v14);
    }
    unsigned __int8 v130 = 0;
    if (__dst[0] == 33) {
      goto LABEL_141;
    }
    int v61 = __dst;
    if (cstdlib_strchr(__dst, 39))
    {
      if (cstdlib_strchr(v8, 234) || cstdlib_strchr(v8, 235)) {
        goto LABEL_223;
      }
      char v62 = (unsigned __int8 *)v8;
      do
      {
        char v64 = *v62++;
        char v63 = v64;
      }
      while ((v64 + 49) < 0xD2u);
      unsigned __int8 v65 = v63 + 95;
      if (v65 > 0x2Cu)
      {
        int v67 = 76;
        int v66 = "3";
      }
      else
      {
        int v66 = off_264562438[(char)v65];
        int v67 = byte_2206EF129[(char)v65];
      }
      int v61 = __dst;
      replace((char *)0x2B, v66, __dst);
      do
        int v119 = *v61++;
      while (v119 != 39);
    }
    else
    {
      int v67 = 76;
      char v62 = (unsigned __int8 *)v8;
    }
    int v68 = 0;
    int v69 = &v125;
    int v70 = __s2;
    int v71 = __s1;
    for (unint64_t i = v61; ; ++i)
    {
      int v73 = *i;
      if ((v73 - 64) <= 0x38 && ((1 << (v73 - 64)) & 0x162822200000001) != 0)
      {
        int v75 = v69++;
        int v68 = 1;
        goto LABEL_156;
      }
      if (!*i || v73 == 43) {
        break;
      }
      if (v68) {
        int v75 = v70;
      }
      else {
        int v75 = v71;
      }
      if (v68) {
        ++v70;
      }
      else {
        ++v71;
      }
      if (!v68) {
        int v68 = 0;
      }
LABEL_156:
      *int v75 = v73;
    }
    *int v71 = 0;
    *int v70 = 0;
    *int v69 = 0;
    unsigned int v76 = __s2[0] - 106;
    BOOL v34 = v76 > 0xD;
    int v77 = (1 << v76) & 0x2019;
    if (v34 || v77 == 0)
    {
      char v85 = 1;
      if (__s2[0] || v125 != v126)
      {
LABEL_185:
        unsigned __int8 v130 = 32;
        unsigned __int8 v86 = *v62;
        if (*v62)
        {
          int v87 = 0;
          int v88 = v62 + 1;
          __int16 v89 = v128;
          char v90 = v127;
          while ((v86 + 95) > 0x2Du)
          {
            if ((v86 & 0xFC) == 0xE8)
            {
              long long v91 = &v130;
LABEL_198:
              *long long v91 = v86;
            }
            int v92 = *v88++;
            unsigned __int8 v86 = v92;
            if (!v92) {
              goto LABEL_202;
            }
          }
          if (v87) {
            long long v91 = v90;
          }
          else {
            long long v91 = v89;
          }
          if (v87) {
            ++v90;
          }
          else {
            ++v89;
          }
          if (!v87) {
            int v87 = 1;
          }
          goto LABEL_198;
        }
        char v90 = v127;
        __int16 v89 = v128;
LABEL_202:
        unsigned __int8 *v90 = 0;
        *__int16 v89 = 0;
        if (__s1[1] != 104)
        {
          if ((unsigned int v93 = __s1[0] - 98, v93 <= 0x12) && ((1 << v93) & 0x44207) != 0 || __s1[0] == 35)
          {
            if (v85)
            {
              char v60 = 50;
              switch(v130)
              {
                case 0xE8u:
                case 0xEAu:
                case 0xEBu:
                  goto LABEL_223;
                case 0xE9u:
                  goto LABEL_224;
                default:
                  if (v130 == 32) {
                    goto LABEL_286;
                  }
                  goto LABEL_141;
              }
            }
            else
            {
              char v60 = 49;
              switch(v130)
              {
                case 0xE8u:
                  goto LABEL_224;
                case 0xE9u:
                  goto LABEL_220;
                case 0xEAu:
                  goto LABEL_223;
                case 0xEBu:
                  goto LABEL_284;
                default:
                  goto LABEL_141;
              }
            }
            goto LABEL_224;
          }
        }
        if (v128[0] - 162 <= 0x29 && ((1 << (v128[0] + 94)) & 0x3C00C104081) != 0)
        {
          if (v85)
          {
            if (v130 <= 0xE9u)
            {
              if (v130 != 32)
              {
                if (v130 == 232) {
                  goto LABEL_223;
                }
                goto LABEL_217;
              }
              goto LABEL_286;
            }
          }
          else if (v130 <= 0xE9u)
          {
            if (v130 == 32)
            {
LABEL_284:
              char v60 = 52;
              goto LABEL_224;
            }
            if (v130 != 232)
            {
LABEL_217:
              if (v130 == 233)
              {
LABEL_220:
                char v60 = 50;
                goto LABEL_224;
              }
              goto LABEL_141;
            }
LABEL_286:
            char v60 = 49;
            goto LABEL_224;
          }
          unsigned int v94 = v130 - 234;
          goto LABEL_222;
        }
        if (v85)
        {
          int v120 = v130;
          if (v125 == v126)
          {
            if (v130 <= 0xE9u)
            {
              if (v130 != 32)
              {
                if (v130 == 232 || v130 == 233) {
                  goto LABEL_223;
                }
LABEL_141:
                char v60 = 48;
                goto LABEL_224;
              }
LABEL_304:
              BOOL v121 = v67 == 77 || v67 == 72;
LABEL_307:
              char v60 = 49;
LABEL_308:
              if (!v121) {
                ++v60;
              }
              goto LABEL_224;
            }
LABEL_299:
            unsigned int v94 = v120 - 234;
LABEL_222:
            if (v94 >= 2) {
              goto LABEL_141;
            }
LABEL_223:
            char v60 = 51;
            goto LABEL_224;
          }
          if (v130 - 233 < 3) {
            goto LABEL_223;
          }
          if (v130 != 32)
          {
            if (v130 != 232) {
              goto LABEL_141;
            }
            BOOL v121 = v67 == 77;
            goto LABEL_307;
          }
          BOOL v122 = v67 == 77 || v67 == 72;
          char v60 = 51;
          char v123 = 49;
        }
        else
        {
          int v120 = v130;
          if (v130 > 0xE9u) {
            goto LABEL_299;
          }
          if (v130 != 32)
          {
            if (v130 != 232)
            {
              if (v130 != 233) {
                goto LABEL_141;
              }
              BOOL v121 = v67 == 72;
              char v60 = 50;
              goto LABEL_308;
            }
            goto LABEL_304;
          }
          BOOL v122 = v67 == 72;
          char v60 = 48;
          char v123 = 52;
        }
        if (v122) {
          char v60 = v123;
        }
LABEL_224:
        __s2[0] = v60;
        __s2[1] = 0;
        cstdlib_strcat(__dst, __s2);
        if (!cstdlib_strcmp(__dst, "!0")) {
          __dst[0] = 0;
        }
        cstdlib_strcpy(v7, __dst);
        if (*v8 == 205 && v8[1] == 194 && (long long v95 = cstdlib_strchr(v7, 39)) != 0
          || (char v96 = cstdlib_strchr(v7, 104)) != 0
          && ((char v97 = v96, v98 = *(v96 - 1) - 99, v98 > 0x11) || ((1 << v98) & 0x22101) == 0)
          && (long long v95 = cstdlib_strchr(v7, 39), v95 > v97))
        {
          char v104 = v95 + 1;
        }
        else
        {
          uint64_t v99 = cstdlib_strchr(v8, 195);
          if (v99)
          {
            int v100 = *(v99 - 1);
            if ((v100 == 202 || v100 == 171) && !cstdlib_strchr(v7, 39))
            {
              uint64_t v111 = cstdlib_strchr(v7, 114);
              if (v111)
              {
                int v112 = v111;
                long long v113 = v111 + 1;
                size_t v105 = cstdlib_strlen(v111 + 1) + 1;
                long long v106 = v112;
                unint64_t v114 = v113;
LABEL_255:
                cstdlib_memmove(v106, v114, v105);
                return 0;
              }
            }
          }
          long long v101 = cstdlib_strchr(v8, 195);
          if (!v101
            || *(v101 - 1) != 183
            || cstdlib_strchr(v7, 39)
            || patt_check((unsigned __int8 *)v8, "\xB7\xC3\xC7\xB4") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xC7\xA7") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7ç") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xBA") != 1
            && patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xC1\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD2\xC2\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xE2\xB7\xC3\xC1\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD8\xB4") != 1&& patt_check((unsigned __int8 *)v8, "\xB7\xC3\xD5") != 1|| (unint64_t v115 = cstdlib_strchr(v7, 114)) == 0)
          {
            int v102 = cstdlib_strchr(v7, 43);
            if (!v102 || (long long v103 = v102 + 1, v102[1] != 39))
            {
              int v107 = *v7;
              if (v107 == 116)
              {
                long long v108 = v7 + 1;
                if (v7[1] == 119)
                {
                  uint64_t v110 = "ta1";
                }
                else
                {
                  long long v108 = v7 + 2;
                  if (v7[2] != 119) {
                    return 0;
                  }
                  uint64_t v110 = "tha1";
                }
              }
              else
              {
                if (v107 != 115) {
                  return 0;
                }
                long long v108 = v7 + 1;
                unsigned int v109 = v7[1] - 108;
                if (v109 > 0xB || ((1 << v109) & 0x841) == 0) {
                  return 0;
                }
                uint64_t v110 = "sa1";
              }
              cstdlib_strcpy(__s1, v110);
              cstdlib_strcat(__s1, v108);
              cstdlib_strcpy(v7, __s1);
              return 0;
            }
            *int v102 = 49;
            char v104 = v102 + 2;
            size_t v105 = cstdlib_strlen(v102 + 2) + 1;
            long long v106 = v103;
            goto LABEL_254;
          }
          char v104 = v115;
          *unint64_t v115 = 115;
          uint64_t v7 = v115 - 2;
        }
        size_t v105 = cstdlib_strlen(v104) + 1;
        long long v106 = v7;
LABEL_254:
        unint64_t v114 = v104;
        goto LABEL_255;
      }
    }
    if ((patt_check(v62, "\xE0\x58\x54X") == 1 || patt_check(v62, "\xE0\x58\x58TX") == 1)
      && (cstdlib_strchr((char *)v62, 232) || cstdlib_strchr((char *)v62, 233))
      && (uint64_t v79 = cstdlib_strchr(v61, 101)) != 0
      || (patt_check(v62, "\xE0\x58\xD4\xE8\x58\xE0\x58\x58\xD4\xE8X") == 1
       || patt_check(v62, "\xE0\x58\x58\xD4\xE8X") == 1)
      && (uint64_t v79 = cstdlib_strchr(v61, 113)) != 0
      || (patt_check(v62, "\xE1\x58\xE8X") == 1
       || patt_check(v62, "\xE1\x58\x58\xE8\x58X\xE8\xCD\x58") == 1)
      && (uint64_t v79 = cstdlib_strchr(v61, 120)) != 0)
    {
      int v80 = v79;
      int v81 = v79 + 1;
      size_t v82 = cstdlib_strlen(v79 + 1) + 1;
      int v83 = v80;
      int v84 = v81;
    }
    else
    {
      if (patt_check(v62, "X\xE8\xCD\x58") != 1 && patt_check(v62, "XX\xE8\xCD\x58") != 1) {
        goto LABEL_184;
      }
      unint64_t v116 = cstdlib_strchr(v61, 64);
      if (!v116) {
        goto LABEL_184;
      }
      long long v117 = v116;
      long long v118 = v116 + 1;
      size_t v82 = cstdlib_strlen(v116 + 1) + 1;
      int v83 = v117;
      int v84 = v118;
    }
    cstdlib_memmove(v83, v84, v82);
LABEL_184:
    char v85 = 0;
    goto LABEL_185;
  }
  if (cstdlib_strlen((const char *)(v6 + 352)) == 1)
  {
    ReadThaiChar((char *)*v8, v7);
    return 1;
  }
  size_t v55 = cstdlib_strlen(v8);
  char *v7 = 0;
  if (!v55) {
    return 1;
  }
  size_t v56 = v55;
  for (uint64_t j = 0; j != v56; ++j)
  {
    if (cchar_dct)
    {
      int v58 = (const char *)&unk_2206E41D5;
      uint64_t v59 = cchar_dct;
      while (*((unsigned __int8 *)v58 - 1) != v8[j])
      {
        v58 += 51;
        if (!--v59) {
          goto LABEL_137;
        }
      }
      cstdlib_strcat(v7, v58);
    }
LABEL_137:
    uint64_t result = 1;
  }
  return result;
}

char *replace(char *result, const char *a2, char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*a3)
  {
    if (*a3 == result)
    {
      uint64_t v5 = 0;
LABEL_7:
      uint64_t v7 = &a3[v5];
      cstdlib_strcpy(__dst, &a3[v5 + 1]);
      cstdlib_strcpy(v7, a2);
      return cstdlib_strcat(a3, __dst);
    }
    else
    {
      unsigned __int8 v6 = 0;
      while (1)
      {
        uint64_t v5 = ++v6;
        if (!a3[v6]) {
          break;
        }
        if (a3[v6] == result) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t wparserCrf_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplCrf;
  return result;
}

uint64_t wparser_impl_crf_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2350915591;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_crf_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_crf_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  uint64_t MaxWordLen = 2350915591;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: Begin", v12, v13, v14, v21);
      unsigned __int8 v15 = (void *)heap_Calloc(*(void **)(v22 + 8), 1, 88);
      if (v15)
      {
        long long v16 = v15;
        *unsigned __int8 v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        _WORD v15[5] = a1;
        v15[6] = "WPARSER_IMPL_CRF";
        uint64_t MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(void *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_crf_ObjClose(uint64_t *a1, int a2)
{
  uint64_t Only_DereferenceCnt = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((Only_DereferenceCnt & 0x80000000) == 0)
  {
    uint64_t v7 = a1[2];
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : Begin", v3, v4, v5, v13);
    uint64_t v8 = a1[10];
    if (!v8)
    {
LABEL_5:
      heap_Free(*(void **)(v7 + 8), (uint64_t)a1);
      log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjClose : End (%x)", v9, v10, v11, Only_DereferenceCnt);
      return Only_DereferenceCnt;
    }
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1[2], a1[5], v8);
    if ((Only_DereferenceCnt & 0x80000000) == 0)
    {
      a1[10] = 0;
      goto LABEL_5;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t wparser_impl_crf_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : Begin", v4, v5, v6, v12);
  uint64_t MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_CRF", 4, 0, (uint64_t)"WPARSER_IMPL CRF ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_crf_Init(_WORD **a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v24 = 7549556;
  memset(v27, 0, sizeof(v27));
  uint64_t v23 = 0;
  uint64_t inited = safeh_HandleCheck((uint64_t)a1, a2, 87652, 88);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v24, (uint64_t)a1 + 68);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  a1[7] = a3;
  *((_DWORD *)a1 + 16) = a6;
  uint64_t inited = InitRsrcFunction(*a1, (int)a1[1], &v23);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v10 = v23;
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  int Str = paramc_ParamGetStr(*(void *)(v23 + 40), (uint64_t)"langcode", &v26);
  if (Str < 0
    || (int Str = paramc_ParamGetStr(*(void *)(v10 + 40), (uint64_t)"fecfg", &v25), Str < 0)
    || (int Str = brokeraux_ComposeBrokerString(v10, "wpcrf", 1, 1, v26, 0, 0, v27, 0x80uLL), Str < 0))
  {
    int v21 = Str;
    log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 0, 0, (uint64_t)"Could not assemble broker string for WPCRF model", v12, v13, v14, v22);
    return v21 | 0x8C202000;
  }
  else
  {
    log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"looking for WPCRF model at %s", v12, v13, v14, (uint64_t)v27);
    unsigned __int8 v15 = (uint64_t *)(a1 + 10);
    uint64_t Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(*a1, (uint64_t)a1[1], a1[3], (uint64_t)a1[4], a1 + 10, 2, (uint64_t)v27, "CRPH", 12341, 48, 0);
    if ((Only_ReferenceCnt & 0x80000000) != 0)
    {
      log_OutText(*(void *)(v23 + 32), (uint64_t)"WPARSER_IMPL_CRF", 5, 0, (uint64_t)"no CRF PW model found", v16, v17, v18, (uint64_t)v27);
      if (*v15)
      {
        uint64_t Only_ReferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt((uint64_t)a1[2], (uint64_t)a1[5], *v15);
        if ((Only_ReferenceCnt & 0x80000000) == 0) {
          *unsigned __int8 v15 = 0;
        }
      }
    }
  }
  return Only_ReferenceCnt;
}

uint64_t wparser_impl_crf_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    *(unsigned char *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1 || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 56), a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 48);
      int v24 = *(void **)(a1 + 56);
      uint64_t v25 = *(void *)(a1 + 80);
      return DoWPCRF(v22, v23, v24, v25, a3, a5, a6, a7, a8, a12, a15);
    }
  }
  return result;
}

uint64_t wparser_impl_crf_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_crf_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 56);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_crf_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_crf_loc_GetMaxWordLen(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"maxdctwordlen", &v6);
  if ((Str & 0x80000000) != 0)
  {
    uint64_t v3 = 0;
    LOBYTE(v4) = 7;
    goto LABEL_5;
  }
  uint64_t v3 = Str;
  int v4 = cstdlib_atoi(v6);
  if ((v4 - 1) <= 0xFE)
  {
LABEL_5:
    *(unsigned char *)(a1 + 72) = v4;
    return v3;
  }
  return 15;
}

uint64_t DoWPCRF(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, uint64_t a11)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  __int16 v89 = 0;
  unsigned int v88 = 0;
  uint64_t v87 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  *(void *)int __src = 0;
  *(_WORD *)(a11 + 8) = 0;
  *(_DWORD *)(a11 + 16) = 1;
  if ((bed_GetpElem(a8, 0xFFFFu, __src) & 0x80000000) == 0)
  {
    if (!a6 || a6 == (unsigned __int16)*(_DWORD *)(*(void *)__src + 36))
    {
      uint64_t v21 = *(void *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a11 + 16) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPCRF] (length for CRF %d - region length in Marker %d %s)", v18, v19, v20, a6);
  }
  uint64_t v84 = a2;
  uint64_t v22 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    BOOL v80 = LogLevel > 4;
    uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
    if (v24)
    {
      uint64_t v86 = heap_Calloc(*(void **)(a1 + 8), a6, 8);
      if (v86)
      {
        uint64_t v83 = v24;
        uint64_t v79 = a7;
        if (a6)
        {
          unsigned int v25 = 0;
          LODWORD(v26) = 0;
          while (1)
          {
            uint64_t v27 = a6;
            char v99 = 0;
            long long v97 = 0u;
            long long v98 = 0u;
            *(_OWORD *)int __src = 0u;
            long long v96 = 0u;
            char v94 = 0;
            long long v92 = 0u;
            long long v93 = 0u;
            *(_OWORD *)__s = 0u;
            long long v91 = 0u;
            unsigned int v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a5 + v25));
            sysdct_wpcrf_LookUp_Chinese(a3, (const void *)(a5 + v25), v28, __src, __s, (BOOL *)(v83 + 8 * v26));
            if (LogLevel >= 5) {
              log_OutText(*(void *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__src);
            }
            uint64_t v32 = heap_Calloc(*(void **)(a1 + 8), 1, 65);
            *(void *)(v86 + 8 * v26) = v32;
            if (!v32) {
              goto LABEL_66;
            }
            if (!cstdlib_strlen(__s)) {
              break;
            }
            if (cstdlib_strcmp(__s, "NULL"))
            {
              cstdlib_strcpy(*(char **)(v86 + 8 * v26), __s);
LABEL_19:
              int v33 = *(void **)(a1 + 8);
              size_t v34 = cstdlib_strlen(__src);
              uint64_t v35 = (char *)heap_Calloc(v33, 1, v34 + 1);
              v23[v26] = v35;
              if (!v35) {
                goto LABEL_66;
              }
              cstdlib_strcpy(v35, __src);
              LODWORD(v26) = v26 + 1;
              goto LABEL_22;
            }
            heap_Free(*(void **)(a1 + 8), *(void *)(v86 + 8 * v26));
            *(void *)(v86 + 8 * v26) = 0;
LABEL_22:
            v25 += v28;
            a6 = v27;
            if (v25 >= v27) {
              goto LABEL_30;
            }
          }
          cstdlib_strncpy(*(char **)(v86 + 8 * v26), (const char *)(a5 + v25), v28);
          goto LABEL_19;
        }
        LODWORD(v26) = 0;
LABEL_30:
        uint64_t v41 = a9;
        crf_Process(a4, v23, v26, &v87, &v88);
        BOOL v42 = (uint64_t *)a11;
        uint64_t v43 = v79;
        if (v88)
        {
          uint64_t v44 = heap_Calloc(*(void **)(a1 + 8), 64, v88);
          if (!v44)
          {
LABEL_66:
            uint64_t v36 = 2350915594;
LABEL_78:
            uint64_t v37 = v87;
            unsigned int v38 = v88;
            if (v26)
            {
              uint64_t v71 = 0;
              uint64_t v26 = v26;
              do
              {
                uint64_t v72 = v23[v71];
                if (v72) {
                  heap_Free(*(void **)(a1 + 8), v72);
                }
                ++v71;
              }
              while (v26 != v71);
              heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(void **)(a1 + 8), v83);
              int v73 = (uint64_t *)v86;
              do
              {
                if (*v73) {
                  heap_Free(*(void **)(a1 + 8), *v73);
                }
                ++v73;
                --v26;
              }
              while (v26);
            }
            else
            {
              heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
              heap_Free(*(void **)(a1 + 8), v83);
            }
            char v39 = *(void **)(a1 + 8);
            uint64_t v40 = v86;
LABEL_90:
            heap_Free(v39, v40);
            if (!v37) {
              return v36;
            }
            goto LABEL_91;
          }
          int v48 = (char *)v44;
          uint64_t v78 = a6;
          if (v88)
          {
            unint64_t v49 = 0;
            char v50 = (_DWORD *)v83;
            do
            {
              uint64_t v51 = v87;
              if (LogLevel >= 5)
              {
                log_OutText(*(void *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] Predicted Tag: %s", v45, v46, v47, *(void *)(v87 + 8 * v49));
                uint64_t v51 = v87;
              }
              int v52 = **(unsigned __int8 **)(v51 + 8 * v49);
              if ((v52 == 83 || v52 == 66)
                && cstdlib_strlen(v48)
                && (**(unsigned char **)(v87 + 8 * v49) != 83 || *v50 != 1)
                && (v49 && !*(v50 - 2) || cstdlib_strlen(v48) >= 2))
              {
                hlp_updateWord(a9, v48, a10, a1, a11, &v89);
                cstdlib_memset(v48, 0, v88 << 6);
              }
              int v53 = *(const char **)(v86 + 8 * v49);
              if (v53) {
                cstdlib_strcat(v48, v53);
              }
              ++v49;
              v50 += 2;
            }
            while (v49 < v88);
          }
          if (cstdlib_strlen(v48)) {
            hlp_updateWord(a9, v48, a10, a1, a11, &v89);
          }
          heap_Free(*(void **)(a1 + 8), (uint64_t)v48);
          uint64_t v43 = v79;
          a6 = v78;
          if (v78)
          {
            *(void *)int __src = 0;
            *(_WORD *)__s = 0;
            if ((bed_GetcElem(a9, __s) & 0x80000000) == 0)
            {
              if (*(_WORD *)__s)
              {
                UTOISubTrace(v80, a1, a9, (uint64_t)"replacement string");
                if (*(_DWORD *)(a11 + 16) == 1 && (bed_GetpElem(a9, 0, __src) & 0x80000000) == 0)
                {
                  unsigned int v60 = *(unsigned __int16 *)__s;
                  if (*(_WORD *)__s)
                  {
                    unint64_t v61 = 0;
                    unsigned int v62 = 0;
                    unsigned __int16 v63 = 1;
                    uint64_t v64 = *(void *)__src;
                    do
                    {
                      if (*(unsigned char *)(v64 + v61) == 16)
                      {
                        uint64_t v65 = *(unsigned __int16 *)(a11 + 8);
                        if (v62 >= v65)
                        {
LABEL_68:
                          log_OutText(*(void *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] cant find non-deleted word to align new word number %d with", v57, v58, v59, v63);
                          int v82 = 0;
                          goto LABEL_69;
                        }
                        uint64_t v66 = v62;
                        int v67 = (int *)(*(void *)a11 + 12 * v62 + 4);
                        while (1)
                        {
                          int v68 = *v67;
                          v67 += 3;
                          if (v68 != 1) {
                            break;
                          }
                          if (v65 == ++v66) {
                            goto LABEL_68;
                          }
                        }
                        *(_WORD *)(*(void *)a11 + 12 * (unsigned __int16)v66 + 8) = v61;
                        ++v63;
                        unsigned int v62 = (unsigned __int16)v66 + 1;
                        unsigned int v60 = *(unsigned __int16 *)__s;
                      }
                      ++v61;
                    }
                    while (v61 < v60);
                  }
                  int v82 = 1;
LABEL_69:
                  if (LogLevel >= 5 && *(_WORD *)(a11 + 8))
                  {
                    uint64_t v69 = 0;
                    unint64_t v70 = 0;
                    do
                    {
                      log_OutText(*(void *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v57, v58, v59, v70++);
                      v69 += 12;
                    }
                    while (v70 < *(unsigned __int16 *)(a11 + 8));
                  }
                  uint64_t v43 = v79;
                  a6 = v78;
                  uint64_t v41 = a9;
                  if (v82) {
                    *(_DWORD *)(a11 + 12) = 0;
                  }
                }
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), v84, 5, 0, (uint64_t)"[WPCRF] deleting region, no replacement text found", v54, v55, v56, v77);
              }
            }
            BOOL v42 = (uint64_t *)a11;
          }
        }
        uint64_t v36 = utoin_IncrReplaceCurrentRegion(v43, a8, v41, a6, v42);
        if ((v36 & 0x80000000) == 0) {
          UTOITrace(v80, a1, v43, a8, (uint64_t)"END of DOWPCRF");
        }
        goto LABEL_78;
      }
    }
    uint64_t v36 = 2586845194;
    uint64_t v37 = v87;
    unsigned int v38 = v88;
    heap_Free(*(void **)(a1 + 8), (uint64_t)v23);
    if (v24)
    {
      char v39 = *(void **)(a1 + 8);
      uint64_t v40 = v24;
      goto LABEL_90;
    }
  }
  else
  {
    uint64_t v36 = 2586845194;
    uint64_t v37 = v87;
    unsigned int v38 = v88;
  }
  if (!v37) {
    return v36;
  }
LABEL_91:
  if (v38)
  {
    uint64_t v74 = v38;
    int v75 = (uint64_t *)v37;
    do
    {
      if (*v75) {
        heap_Free(*(void **)(a1 + 8), *v75);
      }
      ++v75;
      --v74;
    }
    while (v74);
  }
  heap_Free(*(void **)(a1 + 8), v37);
  return v36;
}

size_t hlp_updateWord(uint64_t a1, char *a2, _WORD *a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  unsigned __int16 v12 = cstdlib_strlen(szWORD_BEG_4);
  if ((bed_Insert(a1, szWORD_BEG_4, v12) & 0x80000000) == 0)
  {
    *a3 += cstdlib_strlen(szWORD_BEG_4);
    unsigned __int16 v13 = cstdlib_strlen(a2);
    if ((bed_Insert(a1, a2, v13) & 0x80000000) == 0)
    {
      *a3 += cstdlib_strlen(a2);
      unsigned __int16 v14 = cstdlib_strlen(szWORD_END_4);
      if ((bed_Insert(a1, szWORD_END_4, v14) & 0x80000000) == 0) {
        *a3 += cstdlib_strlen(szWORD_END_4);
      }
    }
  }
  if (*(_DWORD *)(a5 + 16) == 1)
  {
    __int16 v15 = *a6;
    unsigned int v16 = *(unsigned __int16 *)(a5 + 8);
    uint64_t v17 = *(void *)a5;
    if (v16 < *(unsigned __int16 *)(a5 + 10))
    {
LABEL_9:
      uint64_t v19 = v17 + 12 * v16;
      *(_WORD *)uint64_t v19 = v15;
      *(void *)(v19 + 2) = 0;
      *(_WORD *)(a5 + 8) = v16 + 1;
      goto LABEL_10;
    }
    uint64_t v18 = heap_Realloc(*(uint64_t **)(a4 + 8), v17, 12 * *(unsigned __int16 *)(a5 + 10) + 121);
    if (v18)
    {
      uint64_t v17 = v18;
      *(void *)a5 = v18;
      *(_WORD *)(a5 + 10) += 10;
      unsigned int v16 = *(unsigned __int16 *)(a5 + 8);
      goto LABEL_9;
    }
  }
LABEL_10:
  size_t result = cstdlib_strlen(a2);
  *a6 += result;
  return result;
}

uint64_t wparserDummy_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplDummy;
  return result;
}

uint64_t wparser_impl_dummy_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2350915591;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t wparser_impl_dummy_ClassClose()
{
  return 0;
}

uint64_t wparser_impl_dummy_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  uint64_t MaxWordLen = 2350915591;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v22);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: Begin", v12, v13, v14, v21);
      __int16 v15 = (void *)heap_Calloc(*(void **)(v22 + 8), 1, 80);
      if (v15)
      {
        unsigned int v16 = v15;
        *__int16 v15 = a3;
        v15[1] = a4;
        v15[2] = v22;
        v15[3] = a1;
        v15[4] = a2;
        _WORD v15[5] = a1;
        v15[6] = "WPARSER_IMPL_DUMMY";
        uint64_t MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen((uint64_t)v15);
        *(void *)a5 = v16;
        *(_DWORD *)(a5 + 8) = 87652;
        log_OutText(*(void *)(v22 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjOpen: End (%x)", v17, v18, v19, MaxWordLen);
      }
      else
      {
        return 2350915594;
      }
    }
  }
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_ObjClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : Begin", v3, v4, v5, v12);
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjClose : End (%x)", v8, v9, v10, v6);
  }
  return v6;
}

uint64_t wparser_impl_dummy_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : Begin", v4, v5, v6, v12);
  uint64_t MaxWordLen = wparser_impl_crf_loc_GetMaxWordLen(a1);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL_DUMMY", 4, 0, (uint64_t)"WPARSER_IMPL DUMMY ObjReopen : End (%x)", v8, v9, v10, MaxWordLen);
  return MaxWordLen;
}

uint64_t wparser_impl_dummy_Init(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11 = 7549556;
  uint64_t v10 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void, void, int *, uint64_t))(*a3 + 72))(a3[1], a3[2], &v11, a1 + 68);
    if ((result & 0x80000000) == 0)
    {
      *(void *)(a1 + 56) = a3;
      *(_DWORD *)(a1 + 64) = a6;
      return InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v10);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Normalize(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _WORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    *(unsigned char *)(a3 + a5) = 0;
    if (*(_DWORD *)(a1 + 68) != 1 || (uint64_t result = wordm_mapt2s(*(void **)(a1 + 56), a3, a5), (result & 0x80000000) == 0))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void **)(a1 + 56);
      return DoWPDUMMY(v22, v23, v24, a3, a5, a6, a7, a8, a12, a15);
    }
  }
  return result;
}

uint64_t wparser_impl_dummy_Spell(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    LOWORD(v18) = a9;
    return DoSpell(*(void *)(a1 + 16), *(void *)(a1 + 48), *(void **)(a1 + 56), a3, a5, a6, a7, a8, v18, a10, a11, *(unsigned char *)(a1 + 72));
  }
  return result;
}

uint64_t wparser_impl_dummy_Latin(uint64_t a1, int a2, const char *a3, unsigned int a4, char **a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 87652, 80);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(void **)(a1 + 56);
    return DoLatin(v10, v11, a3, a4, a5);
  }
  return result;
}

uint64_t wparser_impl_dummy_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t wparser_impl_dummy_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 80);
}

uint64_t DoWPDUMMY(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, uint64_t a10)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  unsigned int LogLevel = log_GetLogLevel(*(void *)(a1 + 32));
  BOOL v77 = LogLevel > 4;
  *(void *)int __src = 0;
  *(_WORD *)(a10 + 8) = 0;
  *(_DWORD *)(a10 + 16) = 1;
  if ((bed_GetpElem(a7, 0xFFFFu, __src) & 0x80000000) == 0)
  {
    if (!a5 || a5 == (unsigned __int16)*(_DWORD *)(*(void *)__src + 36))
    {
      uint64_t v21 = *(void *)(a1 + 32);
    }
    else
    {
      *(_DWORD *)(a10 + 16) = 0;
      uint64_t v21 = *(void *)(a1 + 32);
    }
    log_OutText(v21, a2, 5, 0, (uint64_t)"[WPDUMMY] (length for DUMMY %d - region length in Marker %d %s)", v18, v19, v20, a5);
  }
  uint64_t v78 = a2;
  uint64_t v22 = 2591039498;
  uint64_t v81 = heap_Calloc(*(void **)(a1 + 8), a5, 8);
  if (!v81) {
    return v22;
  }
  uint64_t v23 = heap_Calloc(*(void **)(a1 + 8), a5, 8);
  uint64_t v24 = *(void **)(a1 + 8);
  uint64_t v80 = v23;
  if (!v23)
  {
    uint64_t v47 = v81;
    goto LABEL_53;
  }
  uint64_t v25 = heap_Calloc(v24, a5, 8);
  if (!v25)
  {
    unsigned int v27 = 0;
    goto LABEL_46;
  }
  uint64_t v76 = a8;
  if (!a5)
  {
    unsigned int v27 = 0;
    goto LABEL_39;
  }
  uint64_t v74 = a6;
  uint64_t v75 = a7;
  unsigned int v26 = 0;
  unsigned int v27 = 0;
  do
  {
    char v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    *(_OWORD *)int __src = 0u;
    long long v88 = 0u;
    char v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    *(_OWORD *)__s = 0u;
    long long v83 = 0u;
    unsigned int v28 = utf8_determineUTF8CharLength(*(unsigned __int8 *)(a4 + v26));
    sysdct_wpdummy_LookUp_Chinese(a3, (const void *)(a4 + v26), v28, __src, __s, (BOOL *)(v80 + 8 * v27));
    if (LogLevel >= 5) {
      log_OutText(*(void *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPCRF] Feat: %s", v29, v30, v31, (uint64_t)__src);
    }
    uint64_t v32 = heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *(void *)(v25 + 8 * v27) = v32;
    if (!v32)
    {
LABEL_37:
      uint64_t v22 = 2350915594;
      goto LABEL_41;
    }
    if (cstdlib_strlen(__s))
    {
      if (!cstdlib_strcmp(__s, "NULL"))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v25 + 8 * v27));
        *(void *)(v25 + 8 * v27) = 0;
        goto LABEL_22;
      }
      cstdlib_strcpy(*(char **)(v25 + 8 * v27), __s);
    }
    else
    {
      cstdlib_strncpy(*(char **)(v25 + 8 * v27), (const char *)(a4 + v26), v28);
    }
    int v33 = *(void **)(a1 + 8);
    size_t v34 = cstdlib_strlen(__src);
    uint64_t v35 = (char *)heap_Calloc(v33, 1, v34 + 1);
    *(void *)(v81 + 8 * v27) = v35;
    if (!v35) {
      goto LABEL_37;
    }
    cstdlib_strcpy(v35, __src);
    ++v27;
LABEL_22:
    v26 += v28;
  }
  while (v26 < a5);
  if (!v27)
  {
    a6 = v74;
    a7 = v75;
    goto LABEL_39;
  }
  uint64_t v36 = v27;
  uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), 64, v27);
  a6 = v74;
  a7 = v75;
  if (!v37)
  {
    uint64_t v22 = 2350915594;
    goto LABEL_42;
  }
  unsigned int v38 = (char *)v37;
  char v39 = (const char **)v25;
  do
  {
    uint64_t v40 = *v39++;
    cstdlib_strcat(v38, v40);
    --v36;
  }
  while (v36);
  if (cstdlib_strlen(v38))
  {
    unsigned __int16 v41 = cstdlib_strlen(szWORD_BEG_5);
    if ((bed_Insert(v76, szWORD_BEG_5, v41) & 0x80000000) == 0)
    {
      *a9 += cstdlib_strlen(szWORD_BEG_5);
      unsigned __int16 v42 = cstdlib_strlen(v38);
      if ((bed_Insert(v76, v38, v42) & 0x80000000) == 0)
      {
        *a9 += cstdlib_strlen(v38);
        unsigned __int16 v43 = cstdlib_strlen(szWORD_END_5);
        if ((bed_Insert(v76, szWORD_END_5, v43) & 0x80000000) == 0) {
          *a9 += cstdlib_strlen(szWORD_END_5);
        }
      }
    }
    if (*(_DWORD *)(a10 + 16) == 1)
    {
      unsigned int v44 = *(unsigned __int16 *)(a10 + 8);
      uint64_t v45 = *(void *)a10;
      if (v44 < *(unsigned __int16 *)(a10 + 10))
      {
        uint64_t v46 = a10;
        goto LABEL_59;
      }
      uint64_t v53 = heap_Realloc(*(uint64_t **)(a1 + 8), v45, 12 * *(unsigned __int16 *)(a10 + 10) + 121);
      if (v53)
      {
        uint64_t v45 = v53;
        uint64_t v46 = a10;
        *(void *)a10 = v53;
        *(_WORD *)(a10 + 10) += 10;
        unsigned int v44 = *(unsigned __int16 *)(a10 + 8);
LABEL_59:
        uint64_t v54 = v45 + 12 * v44;
        *(_WORD *)uint64_t v54 = 0;
        *(void *)(v54 + 2) = 0;
        *(_WORD *)(v46 + 8) = v44 + 1;
      }
    }
    cstdlib_strlen(v38);
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v38);
  *(void *)int __src = 0;
  *(_WORD *)__s = 0;
  if ((bed_GetcElem(v76, __s) & 0x80000000) == 0)
  {
    if (*(_WORD *)__s)
    {
      UTOISubTrace(v77, a1, v76, (uint64_t)"replacement string");
      if (*(_DWORD *)(a10 + 16) == 1 && (bed_GetpElem(v76, 0, __src) & 0x80000000) == 0)
      {
        unsigned int v61 = *(unsigned __int16 *)__s;
        if (*(_WORD *)__s)
        {
          unint64_t v62 = 0;
          unsigned int v63 = 0;
          unsigned __int16 v64 = 1;
          uint64_t v65 = *(void *)__src;
          do
          {
            if (*(unsigned char *)(v65 + v62) == 16)
            {
              uint64_t v66 = *(unsigned __int16 *)(a10 + 8);
              if (v63 >= v66)
              {
LABEL_77:
                log_OutText(*(void *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] cant find non-deleted word to align new word number %d with", v58, v59, v60, v64);
                int v73 = 0;
                goto LABEL_78;
              }
              uint64_t v67 = v63;
              int v68 = (int *)(*(void *)a10 + 12 * v63 + 4);
              while (1)
              {
                int v69 = *v68;
                v68 += 3;
                if (v69 != 1) {
                  break;
                }
                if (v66 == ++v67) {
                  goto LABEL_77;
                }
              }
              *(_WORD *)(*(void *)a10 + 12 * (unsigned __int16)v67 + 8) = v62;
              ++v64;
              unsigned int v63 = (unsigned __int16)v67 + 1;
              unsigned int v61 = *(unsigned __int16 *)__s;
            }
            ++v62;
          }
          while (v62 < v61);
        }
        int v73 = 1;
LABEL_78:
        if (LogLevel >= 5 && *(_WORD *)(a10 + 8))
        {
          uint64_t v70 = 0;
          unint64_t v71 = 0;
          do
          {
            log_OutText(*(void *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v58, v59, v60, v71++);
            v70 += 12;
          }
          while (v71 < *(unsigned __int16 *)(a10 + 8));
        }
        if (v73) {
          *(_DWORD *)(a10 + 12) = 0;
        }
      }
    }
    else
    {
      log_OutText(*(void *)(a1 + 32), v78, 5, 0, (uint64_t)"[WPDUMMY] deleting region, no replacement text found", v55, v56, v57, v72);
    }
  }
LABEL_39:
  uint64_t v22 = utoin_IncrReplaceCurrentRegion(a6, a7, v76, a5, (uint64_t *)a10);
  if ((v22 & 0x80000000) == 0) {
    UTOITrace(v77, a1, a6, a7, (uint64_t)"END of DOWPDUMMY");
  }
LABEL_41:
  if (v27)
  {
LABEL_42:
    uint64_t v48 = v27;
    unint64_t v49 = (uint64_t *)v81;
    do
    {
      if (*v49) {
        heap_Free(*(void **)(a1 + 8), *v49);
      }
      ++v49;
      --v48;
    }
    while (v48);
  }
LABEL_46:
  heap_Free(*(void **)(a1 + 8), v81);
  heap_Free(*(void **)(a1 + 8), v80);
  if (v25)
  {
    if (v27)
    {
      uint64_t v50 = v27;
      uint64_t v51 = (uint64_t *)v25;
      do
      {
        if (*v51) {
          heap_Free(*(void **)(a1 + 8), *v51);
        }
        ++v51;
        --v50;
      }
      while (v50);
    }
    uint64_t v24 = *(void **)(a1 + 8);
    uint64_t v47 = v25;
LABEL_53:
    heap_Free(v24, v47);
  }
  return v22;
}

uint64_t char_hash(uint64_t result, int a2)
{
  unsigned int v2 = a2 + result;
  if (a2 == 131) {
    unsigned int v2 = 3;
  }
  if (result == 130) {
    unsigned int v2 = a2 | 0x100;
  }
  if (a2) {
    return v2;
  }
  else {
    return result;
  }
}

uint64_t get_char_kind_hash(unsigned int a1, int a2)
{
  unsigned int v2 = a2 + a1;
  if (a2 == 131) {
    unsigned int v2 = 3;
  }
  if (a1 == 130) {
    unsigned int v2 = a2 | 0x100;
  }
  if (!a2) {
    unsigned int v2 = a1;
  }
  int v3 = Char_kind_hash_table[v2];
  if (v3 == 0xFFFF) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v4 = (__int16)v3;
    uint64_t v5 = (&Char_kind)[2 * (__int16)v3];
    if (*v5 == a1 && v5[1] == a2) {
      break;
    }
    int v3 = *((unsigned __int16 *)&Char_kind + 8 * v4 + 5);
    if (v3 == 0xFFFF) {
      return 0xFFFFFFFFLL;
    }
  }
  return SLOWORD((&Char_kind)[2 * v4 + 1]);
}

unsigned __int8 *get_pron_from_grapheme_hash(unsigned __int8 *result, char *a2, int *a3, _DWORD *a4, int a5)
{
  if (result[1]) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *a3 = v5;
  while (2)
  {
    *a4 = 0;
    int v6 = *result;
    int v7 = *a3;
    if (*a3 == 2 && (int v8 = result[1]) != 0)
    {
      unsigned int v9 = v8 + v6;
      if (v8 == 131) {
        unsigned int v9 = 3;
      }
      if (v6 == 130) {
        unsigned int v9 = v8 | 0x100;
      }
    }
    else
    {
      int v8 = 0;
      unsigned int v9 = *result;
    }
    for (int i = Char_pron_hash_table[v9]; i != 0xFFFF; int i = *((unsigned __int16 *)&Char_pron + 12 * (__int16)i + 9))
    {
      int v11 = (&Char_pron)[3 * (__int16)i];
      if (*v11 == v6
        && v11[1] == v8
        && SLOWORD((&Char_pron)[3 * (__int16)i + 2]) == a5)
      {
        uint64_t v14 = (&Char_pron)[3 * (__int16)i + 1];
        char v15 = *v14;
        if (*v14)
        {
          unsigned int v16 = (unsigned __int8 *)(v14 + 1);
          do
          {
            *a2++ = v15;
            ++*a4;
            int v17 = *v16++;
            char v15 = v17;
          }
          while (v17);
        }
        *a2 = 0;
        return result;
      }
    }
    BOOL v12 = __OFSUB__(v7, 1);
    int v13 = v7 - 1;
    *a3 = v13;
    if (!((v13 < 0) ^ v12 | (v13 == 0))) {
      continue;
    }
    break;
  }
  *a3 = 0;
  *a4 = 0;
  return result;
}

uint64_t get_name_of_symbol(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 0 || a1[2] <= a3) {
    return 0;
  }
  virtual_fseek(*a1, a2, a1[1] + 32 * a3, 0);
  uint64_t v7 = 0;
  while (1)
  {
    char v8 = virtual_getc((void *)*a1, a2);
    *(unsigned char *)(a4 + v7) = v8;
    if (!v8) {
      break;
    }
    if (++v7 == 32) {
      return 0;
    }
  }
  return a4;
}

uint64_t get_pointer_of_symbol(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || *(void *)(a1 + 16) <= a2) {
    return 0;
  }
  else {
    return **(void **)a1 + *(void *)(a1 + 8) + 32 * a2;
  }
}

uint64_t get_number_of_symbol(uint64_t a1, char *__s1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = v4 - 1;
  if (v4 < 1) {
    int v6 = 0;
  }
  else {
    int v6 = (const char *)(**(void **)a1 + *(void *)(a1 + 8));
  }
  int v7 = cstdlib_strcmp(__s1, v6);
  if (!v7) {
    return 0;
  }
  if (v7 < 0) {
    return -1;
  }
  if (v4 >= 1 && *(void *)(a1 + 16) >= v4) {
    char v8 = (const char *)(**(void **)a1 + *(void *)(a1 + 8) + 32 * v5);
  }
  else {
    char v8 = 0;
  }
  int v10 = cstdlib_strcmp(__s1, v8);
  if (!v10) {
    return v4 - 1;
  }
  uint64_t v9 = -1;
  if (v10 <= 0 && v5 != 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = v5 >= 0 ? v5 : v5 + 1;
      uint64_t v9 = v11 + (v13 >> 1);
      if (v9 < 0 || *(void *)(a1 + 16) <= v9) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = (const char *)(**(void **)a1 + *(void *)(a1 + 8) + 32 * v9);
      }
      int v15 = cstdlib_strcmp(__s1, v14);
      if (!v15) {
        break;
      }
      if (v15 < 0) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v11 = v9;
      }
      uint64_t v5 = v12 - v11;
      if (v12 - v11 == 1) {
        return -1;
      }
    }
  }
  return v9;
}

uint64_t find_taglist(uint64_t a1, char *__s2)
{
  if (!__s2) {
    return 0;
  }
  uint64_t result = 0;
  if (a1 && *__s2)
  {
    while (cstdlib_strcmp(*(const char **)a1, __s2))
    {
      a1 = *(void *)(a1 + 8);
      if (!a1) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t log_output_cost(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t result = ssftstring_AppendCStr(a1, "[");
  if ((result & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "f^=\"");
    LH_itoa(*(_DWORD *)(a2 + 56), __s2, 0xAu);
    cstdlib_strcat(__dst, __s2);
    cstdlib_strcat(__dst, "\",g=\"");
    LH_itoa(*(_DWORD *)(a2 + 64), __s2, 0xAu);
    cstdlib_strcat(__dst, __s2);
    cstdlib_strcat(__dst, "\"");
    uint64_t result = ssftstring_AppendCStr(a1, __dst);
    if ((result & 0x80000000) == 0) {
      return ssftstring_AppendCStr(a1, "]");
    }
  }
  return result;
}

uint64_t log_output_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t *a12)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v19 = ssftstring_Clear(a3);
  if ((v19 & 0x80000000) == 0 && get_name_of_symbol(SF_symbol_file, a12, *(void *)a4, (uint64_t)__s2))
  {
    int v20 = *(_DWORD *)(a4 + 32);
    if (v20)
    {
      if (v20 == 1)
      {
        if (!a5 || __s2[0] != 95)
        {
          cstdlib_strcpy(__dst, "<");
          cstdlib_strcat(__dst, __s2);
          if (a5 != 1)
          {
            cstdlib_strcat(__dst, ".");
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
          }
          cstdlib_strcat(__dst, ">");
          uint64_t appended = ssftstring_AppendCStr(a3, __dst);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          if (a11 == 1)
          {
            cstdlib_strcpy(__dst, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
            cstdlib_strcat(__dst, ")");
            uint64_t appended = ssftstring_AppendCStr(a3, __dst);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a6 == 1)
          {
            uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a7 == 1)
          {
            uint64_t appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
        }
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = ssftstring_CStr(a3);
        log_OutText(v37, a2, 5, 0, (uint64_t)"[A*] %s", v39, v40, v41, v38);
        uint64_t appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t v27 = *(void *)(a4 + 48);
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = a5;
      }
      else
      {
        if (v20 != 2)
        {
LABEL_58:
          uint64_t v42 = *(void *)(a1 + 32);
          uint64_t v43 = ssftstring_CStr(a3);
          log_OutText(v42, a2, 5, 0, (uint64_t)"[A*] %s", v44, v45, v46, v43);
          return ssftstring_Clear(a3);
        }
        if (!a5 || __s2[0] != 95)
        {
          cstdlib_strcpy(__dst, "<");
          cstdlib_strcat(__dst, __s2);
          if (a5 != 1)
          {
            cstdlib_strcat(__dst, ".");
            LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
          }
          cstdlib_strcat(__dst, ">");
          uint64_t appended = ssftstring_AppendCStr(a3, __dst);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          if (a11 == 1)
          {
            cstdlib_strcpy(__dst, "(");
            LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
            cstdlib_strcat(__dst, v48);
            cstdlib_strcat(__dst, ")");
            uint64_t appended = ssftstring_AppendCStr(a3, __dst);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a6 == 1)
          {
            uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
          if (a7 == 1)
          {
            uint64_t appended = log_output_cost(a3, a4);
            if ((appended & 0x80000000) != 0) {
              return appended;
            }
          }
        }
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = ssftstring_CStr(a3);
        log_OutText(v21, a2, 5, 0, (uint64_t)"[A*] %s", v23, v24, v25, v22);
        uint64_t appended = ssftstring_Clear(a3);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t appended = log_output_tree(a1, a2, a3, *(void *)(a4 + 40), a5);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
        uint64_t v27 = *(void *)(a4 + 48);
        uint64_t v28 = a1;
        uint64_t v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = a5;
      }
      uint64_t appended = log_output_tree(v28, v29, v30, v27, v31);
      if ((appended & 0x80000000) == 0) {
        goto LABEL_58;
      }
    }
    else
    {
      cstdlib_strcpy(__dst, "<");
      cstdlib_strcat(__dst, __s2);
      if (a5 != 1)
      {
        cstdlib_strcat(__dst, ".");
        LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
        cstdlib_strcat(__dst, v48);
      }
      cstdlib_strcat(__dst, ">");
      uint64_t appended = ssftstring_AppendCStr(a3, __dst);
      if ((appended & 0x80000000) == 0)
      {
        if (a11 != 1
          || (cstdlib_strcpy(__dst, "("),
              LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu),
              cstdlib_strcat(__dst, v48),
              cstdlib_strcat(__dst, ")"),
              uint64_t appended = ssftstring_AppendCStr(a3, __dst),
              (appended & 0x80000000) == 0))
        {
          if (a6 != 1 || (uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24)), (appended & 0x80000000) == 0))
          {
            if (a7 != 1 || (uint64_t appended = log_output_cost(a3, a4), (appended & 0x80000000) == 0))
            {
              uint64_t appended = ssftstring_AppendCStr(a3, "(");
              if ((appended & 0x80000000) == 0)
              {
                uint64_t v32 = *(void *)(a4 + 48);
                if (v32)
                {
                  char v33 = 0;
                  do
                  {
                    if (v33)
                    {
                      uint64_t appended = ssftstring_AppendCStr(a3, ",");
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, *(char **)v32);
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, ":\"");
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(v32 + 8));
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t appended = ssftstring_AppendCStr(a3, "\"");
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    uint64_t v32 = *(void *)(v32 + 16);
                    char v33 = 1;
                  }
                  while (v32);
                }
                uint64_t appended = ssftstring_AppendCStr(a3, ")");
                if ((appended & 0x80000000) == 0)
                {
                  uint64_t v34 = *(void *)(a4 + 48);
                  while (1)
                  {
                    uint64_t v34 = *(void *)(v34 + 24);
                    if (!v34) {
                      goto LABEL_58;
                    }
                    cstdlib_strcpy(__dst, "<");
                    cstdlib_strcat(__dst, __s2);
                    if (a5 != 1)
                    {
                      cstdlib_strcat(__dst, ".");
                      LH_itoa(*(_DWORD *)(a4 + 8), v48, 0xAu);
                      cstdlib_strcat(__dst, v48);
                    }
                    cstdlib_strcat(__dst, ">");
                    uint64_t appended = ssftstring_AppendCStr(a3, __dst);
                    if ((appended & 0x80000000) != 0) {
                      return appended;
                    }
                    if (a11 == 1)
                    {
                      cstdlib_strcpy(__dst, "(");
                      LH_itoa(*(_DWORD *)(a4 + 80), v48, 0xAu);
                      cstdlib_strcat(__dst, v48);
                      cstdlib_strcat(__dst, ")");
                      uint64_t appended = ssftstring_AppendCStr(a3, __dst);
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    if (a6 == 1)
                    {
                      uint64_t appended = log_output_attribute(a3, *(void *)(a4 + 24));
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    if (a7 == 1)
                    {
                      uint64_t appended = log_output_cost(a3, a4);
                      if ((appended & 0x80000000) != 0) {
                        return appended;
                      }
                    }
                    uint64_t v35 = *(void *)(a4 + 48);
                    if (v35)
                    {
                      char v36 = 0;
                      do
                      {
                        if (v36)
                        {
                          uint64_t appended = ssftstring_AppendCStr(a3, ",");
                          if ((appended & 0x80000000) != 0) {
                            return appended;
                          }
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, *(char **)v35);
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, ":\"");
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(v35 + 8));
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t appended = ssftstring_AppendCStr(a3, "\"");
                        if ((appended & 0x80000000) != 0) {
                          return appended;
                        }
                        uint64_t v35 = *(void *)(v35 + 16);
                        char v36 = 1;
                      }
                      while (v35);
                    }
                    uint64_t v19 = ssftstring_AppendCStr(a3, ")");
                    if ((v19 & 0x80000000) != 0) {
                      return v19;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return appended;
  }
  return v19;
}

uint64_t add_unit_product(void *a1, int a2, _DWORD *a3, int a4, int a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a4, a5);
  uint64_t v18 = 1;
  if (leading_tree)
  {
    uint64_t v19 = (void *)leading_tree;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v41 = 0;
    if (a4) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = a2 - 1 == a5;
    }
    int v21 = v20;
    int v39 = v21;
    while (1)
    {
      *((void *)&v42 + 1) = -1;
      *(void *)&long long v43 = *v19;
      uint64_t v41 = &v42;
      uint64_t grammar_right = find_grammar_right((uint64_t *)&v41);
      if (grammar_right != -1) {
        break;
      }
LABEL_31:
      uint64_t v19 = (void *)v19[11];
      if (!v19) {
        return 1;
      }
    }
    uint64_t next_grammar_right = grammar_right - 1;
    char v36 = v19;
    while (1)
    {
      uint64_t v23 = heap_Alloc((uint64_t)a11, 96);
      if (!v23) {
        return 0;
      }
      uint64_t v24 = (uint64_t *)v23;
      uint64_t v25 = (uint64_t)v41;
      *(void *)uint64_t v23 = *(void *)v41;
      *(void *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 32) = 1;
      *(void *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = v19;
      *(void *)(v23 + 88) = 0;
      *(void *)(v23 + 8) = -1;
      *(_DWORD *)(v23 + 16) = *(void *)(v25 + 32);
      uint64_t v26 = *(void *)(v25 + 72);
      if ((v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(void *)*(&AC_pac + v26), v23) == 1)
        && (*(_DWORD *)(a6 + 32) != 1 || is_internal(*v24) == 1 || *v24 == a8))
      {
        uint64_t v27 = cyk_hash_get_leading_tree(a1, a4, a5);
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            uint64_t v27 = *(void *)(v27 + 88);
          }
          while (v27);
          *(void *)(v28 + 88) = v24;
        }
        else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v24, a4, a5, (uint64_t)a11) & 0x1FFF) == 0xA)
        {
          return 0;
        }
        uint64_t v29 = (uint64_t)v41;
        if (v39 && *(void *)v41 == a8)
        {
          uint64_t v30 = a8;
          uint64_t v31 = *a7;
          uint64_t v32 = tree_duplicate((uint64_t)v24, a6, a10, a11);
          uint64_t v33 = v31;
          a8 = v30;
          *a7 = tree_append(v33, (uint64_t)v32);
          uint64_t v19 = v36;
          ++*a3;
          uint64_t v29 = (uint64_t)v41;
        }
        uint64_t v34 = *(void *)(v29 + 72);
        if (v34 != -1
          && !*(_DWORD *)(a6 + 44)
          && !exec_actions(*((void *)*(&AC_pac + v34) + 1), (uint64_t)v24, (uint64_t)a11))
        {
          return 0;
        }
      }
      else
      {
        heap_Free(a11, (uint64_t)v24);
      }
      uint64_t next_grammar_right = find_next_grammar_right(&v41, grammar_right, next_grammar_right);
      if (next_grammar_right == -1) {
        goto LABEL_31;
      }
    }
  }
  return v18;
}

uint64_t check_left_upper(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, void *a11)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  int v13 = a4;
  uint64_t v14 = a3;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v53 = 0;
  int v16 = ~a4;
  int v45 = a2 - 1;
  int v42 = ~a4;
  do
  {
    int v17 = v13 + v16;
    if (v13 + v16 >= 0)
    {
      int v44 = v14 + 1;
      if (v14) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v13 == v45;
      }
      int v19 = v18;
      int v50 = v19;
      int v47 = v13;
      do
      {
        int v46 = v17;
        uint64_t leading_tree = (void *)cyk_hash_get_leading_tree(a1, v14, v17);
        if (leading_tree)
        {
          int v20 = v44 + v46;
          int v21 = v13 + ~v46;
          int v41 = v21;
          while (2)
          {
            uint64_t v22 = cyk_hash_get_leading_tree(a1, v20, v21);
            if (v22)
            {
              uint64_t v23 = (void *)v22;
              do
              {
                *((void *)&v54 + 1) = *leading_tree;
                *(void *)&long long v55 = *v23;
                uint64_t v53 = &v54;
                uint64_t grammar_right = find_grammar_right((uint64_t *)&v53);
                if (grammar_right != -1)
                {
                  uint64_t next_grammar_right = grammar_right - 1;
                  do
                  {
                    uint64_t result = heap_Alloc((uint64_t)a11, 96);
                    if (!result) {
                      return result;
                    }
                    uint64_t v26 = (uint64_t *)result;
                    uint64_t v27 = (uint64_t)v53;
                    *(void *)uint64_t result = *(void *)v53;
                    *(_DWORD *)(result + 8) = -1;
                    *(void *)(result + 24) = 0;
                    *(_DWORD *)(result + 32) = 2;
                    *(void *)(result + 40) = leading_tree;
                    *(void *)(result + 48) = v23;
                    *(void *)(result + 88) = 0;
                    *(int32x2_t *)(result + 12) = vmovn_s64(*(int64x2_t *)(v27 + 24));
                    uint64_t v28 = *(void *)(v27 + 72);
                    if ((v28 == -1 || eval_cond(*(void *)*(&AC_pac + v28), result) == 1)
                      && (*(_DWORD *)(a5 + 32) != 1 || is_internal(*v26) == 1 || *v26 == a8))
                    {
                      uint64_t v29 = cyk_hash_get_leading_tree(a1, v14, v13);
                      if (v29)
                      {
                        do
                        {
                          uint64_t v30 = v29;
                          uint64_t v29 = *(void *)(v29 + 88);
                        }
                        while (v29);
                        *(void *)(v30 + 88) = v26;
                      }
                      else if ((cyk_hash_add_leading_tree(a1, (uint64_t)v26, v14, v13, (uint64_t)a11) & 0x1FFF) == 0xA)
                      {
                        return 0;
                      }
                      uint64_t v31 = (uint64_t)v53;
                      if (v50 && *(void *)v53 == a8)
                      {
                        uint64_t v32 = a1;
                        uint64_t v33 = v14;
                        uint64_t v34 = a8;
                        uint64_t v35 = *a7;
                        char v36 = tree_duplicate((uint64_t)v26, a5, a10, a11);
                        uint64_t v37 = v35;
                        a8 = v34;
                        uint64_t v14 = v33;
                        a1 = v32;
                        *a7 = tree_append(v37, (uint64_t)v36);
                        int v13 = v47;
                        ++*a6;
                        uint64_t v31 = (uint64_t)v53;
                      }
                      uint64_t v38 = *(void *)(v31 + 72);
                      if (v38 != -1)
                      {
                        uint64_t result = exec_actions(*((void *)*(&AC_pac + v38) + 1), (uint64_t)v26, (uint64_t)a11);
                        if (!result) {
                          return result;
                        }
                      }
                    }
                    else
                    {
                      heap_Free(a11, (uint64_t)v26);
                    }
                    uint64_t next_grammar_right = find_next_grammar_right(&v53, grammar_right, next_grammar_right);
                  }
                  while (next_grammar_right != -1);
                }
                uint64_t v23 = (void *)v23[11];
              }
              while (v23);
              uint64_t leading_tree = (void *)leading_tree[11];
              int v21 = v41;
              int v20 = v44 + v46;
              if (leading_tree) {
                continue;
              }
            }
            break;
          }
        }
        int v17 = v46 - 1;
      }
      while (v46 > 0);
    }
    uint64_t result = add_unit_product(a1, a2, a6, v14, v13, a5, a7, a8, v40, a10, a11);
    if (!result) {
      break;
    }
    ++v13;
    uint64_t result = 1;
    BOOL v39 = (int)v14 <= 0;
    uint64_t v14 = (v14 - 1);
    int v16 = v42;
  }
  while (!v39);
  return result;
}

uint64_t fill_up_table(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t *a8, void *a9)
{
  uint64_t result = 0;
  unsigned int v18 = 0;
  if ((int)a2 < a3)
  {
    uint64_t v16 = a2;
    while (1)
    {
      uint64_t result = check_left_upper(a1, a3, v16, 0, a4, &v18, a5, a6, v17, a8, a9);
      if (!result) {
        break;
      }
      uint64_t v16 = (v16 + 1);
      if (a3 == v16) {
        return v18;
      }
    }
  }
  return result;
}

uint64_t parse_cyk(uint64_t a1, void *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  uint64_t v10 = 0;
  int v8 = fill_up_table(a2, 0, a3, a1, &v10, a4, (uint64_t)a7, a6, a7);
  uint64_t result = parser_result_create(1, v10, (uint64_t)a7);
  *(void *)(result + 16) = v8;
  return result;
}

double partial_tree_create_as_step(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13 = heap_Alloc(a7, 96);
  if (v13)
  {
    *(void *)uint64_t v13 = a5;
    *(void *)(v13 + 24) = 0;
    if (a3) {
      int v15 = 2;
    }
    else {
      int v15 = 1;
    }
    *(_DWORD *)(v13 + 32) = v15;
    double result = NAN;
    *(void *)(v13 + 8) = -1;
    *(void *)(v13 + 40) = a3;
    *(void *)(v13 + 48) = a4;
    *(void *)(v13 + 88) = 0;
    *(_DWORD *)(v13 + 16) = -1;
    *(_DWORD *)(v13 + 72) = a1;
    *(_DWORD *)(v13 + 76) = a2;
    *(_DWORD *)(v13 + 80) = a6;
    *(void *)(v13 + 56) = 0;
    *(void *)(v13 + 64) = 0;
  }
  return result;
}

uint64_t connect_terminals(int *a1, int a2, int a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a2 >= a5) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v43 = a3;
  uint64_t v16 = a3 - 1;
  int v17 = a2;
  int v41 = a5;
  do
  {
    int v18 = ~v17 + a5;
    if (v18 < 0) {
      goto LABEL_28;
    }
    while (1)
    {
      uint64_t leading_tree = cyk_hash_get_leading_tree(a4, v17, v18);
      if (leading_tree) {
        break;
      }
LABEL_15:
      if (v18-- <= 0)
      {
        int v18 = -1;
        goto LABEL_24;
      }
    }
    uint64_t v20 = leading_tree;
    uint64_t v21 = *(void *)(a8 + 8 * v43);
    while (1)
    {
      uint64_t v22 = *(void *)v20;
      if (*(void *)v20 == a7 || v22 == v21)
      {
        int v33 = v17 + ~a2;
        goto LABEL_32;
      }
      if (!a3) {
        break;
      }
      if (*(void *)(a8 + 8 * v16) == v22) {
        goto LABEL_18;
      }
LABEL_14:
      uint64_t v20 = *(void *)(v20 + 88);
      if (!v20) {
        goto LABEL_15;
      }
    }
    if (*(_DWORD *)(v20 + 32)) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v25 = *(void *)(a9 + 8 * v43);
    if (v15)
    {
      int v26 = v17 - a2 + 1 + v18;
      partial_tree_create_as_step(a2, v26, v15, v20, v25, a3, (uint64_t)a10);
      if (!v27) {
        return 0;
      }
      uint64_t v15 = v27;
      int v28 = add_partial_tree_checking_FI(a4, v27, a2, v26, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      __int16 v38 = v28;
      heap_Free(a10, v15);
      uint64_t v15 = 0;
      uint64_t v31 = 0;
      BOOL v32 = (v38 & 0x1FFF) == 10;
LABEL_27:
      a5 = v41;
      if (v32) {
        return v31;
      }
    }
    else
    {
      partial_tree_create_as_step(a2, v18, 0, v20, v25, a3, (uint64_t)a10);
      if (!v29) {
        return 0;
      }
      uint64_t v15 = v29;
      int v30 = add_partial_tree_checking_FI(a4, v29, a2, v18, *(_DWORD *)(a6 + 52), (uint64_t)a10);
      if (v30 < 0)
      {
        __int16 v40 = v30;
        heap_Free(a10, v15);
        uint64_t v15 = 0;
        uint64_t v31 = 0;
        BOOL v32 = (v40 & 0x1FFF) == 10;
        goto LABEL_27;
      }
LABEL_24:
      a5 = v41;
    }
LABEL_28:
    v17 += v18 + 1;
  }
  while (v17 < a5);
  int v33 = v17 + ~a2;
  uint64_t v21 = *(void *)(a8 + 8 * v43);
LABEL_32:
  partial_tree_create_as_step(a2, v33, 0, v15, v21, a3 + 1, (uint64_t)a10);
  uint64_t v31 = v34;
  if (v34)
  {
    int v35 = add_partial_tree_checking_FI(a4, v34, a2, v33, *(_DWORD *)(a6 + 52), (uint64_t)a10);
    if ((v35 & 0x80000000) == 0 || (v36 = v35, heap_Free(a10, v31), uint64_t v31 = 0, (v36 & 0x1FFF) != 0xA)) {
      *a1 = v17;
    }
  }
  return v31;
}

uint64_t max_len_parse(int a1, int a2, void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, void *a12, void *a13)
{
  uint64_t v21 = 0;
  int v41 = a1;
  int v42 = 0;
  *a13 = 0;
  if (a1 == 1)
  {
    uint64_t v21 = jp_tree_create(*(void *)(a10 + 8 * a2), (const char *)(a5 + ((uint64_t)a2 << 6) + 976), 0, 0, 0, 0, a12);
    if (!v21) {
      return 2350915840;
    }
  }
  int v37 = a2;
  __int16 v38 = v21;
  uint64_t v39 = a5;
  if (a4 >= 1)
  {
    int v22 = 0;
    int v40 = v37 + 1;
    do
    {
      int v23 = ~v22 + a4;
      if (v23 < 0)
      {
LABEL_15:
        uint64_t v28 = connect_terminals(&v42, v22, v37, a3, a4, v39, a7, a8, a9, a12);
        if (!v28) {
          goto LABEL_33;
        }
        uint64_t v29 = v28;
        *(_DWORD *)(v28 + 80) = v40;
        *(void *)(a6 + 8) = as_list_insert(v28, *(void **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          int v30 = tree_duplicate(v29, v39, a11, a12);
          if (!v30) {
            goto LABEL_33;
          }
          uint64_t v31 = (uint64_t)v30;
          uint64_t v32 = v38[4];
          if (v32)
          {
            if (!tree_append(v32, v31)) {
              goto LABEL_33;
            }
          }
          else
          {
            v38[4] = v31;
          }
        }
        int v22 = v42;
      }
      else
      {
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(a3, v22, v23);
          if (leading_tree) {
            break;
          }
LABEL_13:
          if (v23-- <= 0) {
            goto LABEL_15;
          }
        }
        uint64_t v25 = leading_tree;
        while (*(void *)v25 != a7 && *(void *)v25 != *(void *)(a8 + 8 * v37))
        {
          uint64_t v25 = *(void *)(v25 + 88);
          if (!v25) {
            goto LABEL_13;
          }
        }
        *(_DWORD *)(v25 + 80) = v40;
        *(void *)(a6 + 8) = as_list_insert(v25, *(void **)(a6 + 8), (uint64_t)a12);
        if (v41 == 1)
        {
          int v33 = tree_duplicate(v25, v39, a11, a12);
          if (!v33 && *(void *)v25 != a7)
          {
LABEL_33:
            uint64_t v35 = 2350915840;
            jpe_FreeTree(v38, a12);
            return v35;
          }
          uint64_t v34 = v38[4];
          if (v34)
          {
            if (!tree_append(v34, (uint64_t)v33)) {
              goto LABEL_33;
            }
          }
          else
          {
            v38[4] = v33;
          }
        }
        v22 += v23 + 1;
      }
    }
    while (v22 < a4);
  }
  uint64_t v35 = 0;
  *a13 = v38;
  return v35;
}

uint64_t as_list_delete_min(void *a1, void *a2, void *a3)
{
  while (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    a2 = (void *)a2[1];
    a1 = v4;
    if (!a2)
    {
      uint64_t v6 = *v4;
      v5[1] = v4[2];
      heap_Free(a3, (uint64_t)v4);
      return v6;
    }
  }
  return 0;
}

void *as_list_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result = (void *)heap_Alloc(a4, 24);
  if (result)
  {
    *double result = a1;
    result[1] = a2;
    result[2] = a3;
  }
  return result;
}

void *as_list_insert(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    if (*(void *)(a1 + 56) <= *(void *)(*a2 + 56)) {
      a2[1] = as_list_insert(a1, a2[1]);
    }
    else {
      a2[2] = as_list_insert(a1, a2[2]);
    }
  }
  else
  {
    uint64_t v5 = (void *)heap_Alloc(a3, 24);
    uint64_t v4 = v5;
    if (v5)
    {
      v5[1] = 0;
      v5[2] = 0;
      *uint64_t v5 = a1;
    }
  }
  return v4;
}

uint64_t as_list_get_min(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t result = a2;
    if (!a2) {
      break;
    }
    uint64_t v4 = a1;
    a2 = *(void *)(a2 + 8);
    a1 = result;
    if (!a2)
    {
      *(void *)(v4 + 8) = *(void *)(result + 16);
      return result;
    }
  }
  return result;
}

void *as_list_delete_one(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  if (*a1 == a2)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    if (v5)
    {
      if (v4)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v7 = a1[2];
          do
          {
            uint64_t v4 = v6;
            uint64_t v8 = v7;
            uint64_t v6 = *(void *)(v6 + 8);
            uint64_t v7 = v4;
          }
          while (v6);
          *(void *)(v8 + 8) = *(void *)(v4 + 16);
          *(void *)(v4 + 8) = a1[1];
          *(void *)(v4 + 16) = v5;
          goto LABEL_12;
        }
        *(void *)(v5 + 8) = v4;
      }
      heap_Free(a3, (uint64_t)a1);
      return (void *)v5;
    }
LABEL_12:
    heap_Free(a3, (uint64_t)a1);
    return (void *)v4;
  }
  if (*(void *)(a2 + 56) <= *(void *)(*a1 + 56)) {
    a1[1] = as_list_delete_one(a1[1]);
  }
  else {
    a1[2] = as_list_delete_one(a1[2]);
  }
  return a1;
}

uint64_t get_word_cost(uint64_t a1, void *a2)
{
  if (!a1) {
    return -1;
  }
  uint64_t v3 = a1;
  while (cstdlib_strcmp(*(const char **)v3, "PROB"))
  {
    uint64_t v3 = *(void *)(v3 + 16);
    if (!v3) {
      return -1;
    }
  }
  uint64_t v5 = mbs_len_bytes(*(void *)(v3 + 8)) + 1;
  uint64_t v6 = heap_Alloc((uint64_t)a2, v5);
  if (v6)
  {
    uint64_t v7 = (unsigned __int8 *)v6;
    if (mbs2sjis(*(void *)(v3 + 8), 0, *(_DWORD *)(*(void *)(v3 + 8) + 8), v6, v5) != -1) {
      return (int)cstdlib_atoi(v7);
    }
    heap_Free(a2, (uint64_t)v7);
  }
  return -1;
}

void *cyk2as_list(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v28 = (void *)heap_Alloc((uint64_t)a4, 24);
  if (!v28) {
    return v28;
  }
  *uint64_t v28 = 0;
  v28[1] = 0;
  v28[2] = 0;
  if (a2 < 1) {
    return v28;
  }
  int v8 = 0;
  int v9 = a2;
  do
  {
    if (v8 < a2)
    {
      int v10 = 0;
      do
      {
        uint64_t leading_tree = cyk_hash_get_leading_tree(a1, v8, v10);
        if (leading_tree)
        {
          uint64_t v12 = (uint64_t *)leading_tree;
          do
          {
            if (*(_DWORD *)(a3 + 64) == 1) {
              uint64_t word_cost = 0;
            }
            else {
              uint64_t word_cost = get_word_cost(v12[6], a4);
            }
            v12[8] = word_cost;
            v12[7] = v12[8] + get_me_terminal(*v12);
            v28[1] = as_list_insert((uint64_t)v12, (void *)v28[1], (uint64_t)a4);
            uint64_t v12 = (uint64_t *)v12[11];
          }
          while (v12);
        }
        ++v10;
      }
      while (v10 != v9);
    }
    ++v8;
    --v9;
  }
  while (v8 != a2);
  uint64_t v31 = a2 - 2;
  uint64_t v34 = a2;
  int v29 = a2;
  int v30 = 1;
  while (2)
  {
    int v14 = 0;
    uint64_t v33 = v34--;
    int v32 = 1;
    int v35 = v33;
    do
    {
      uint64_t v15 = cyk_hash_get_leading_tree(a1, v14, v34);
      if (v15)
      {
        uint64_t v16 = (uint64_t *)v15;
        int v36 = v14;
        while (v33 < 2)
        {
LABEL_39:
          uint64_t v16 = (uint64_t *)v16[11];
          if (!v16) {
            goto LABEL_40;
          }
        }
        uint64_t v17 = v31;
        int v18 = v32;
        while (1)
        {
          int v19 = v14 <= v18 ? v18 : v14;
          if (v34 - v17 >= 0) {
            break;
          }
LABEL_38:
          --v17;
          ++v18;
          int v14 = v36;
          if (v18 == v35) {
            goto LABEL_39;
          }
        }
        uint64_t v20 = 100 * (v34 - v17);
        int v21 = v36;
        while (1)
        {
          uint64_t v22 = cyk_hash_get_leading_tree(a1, v21, v17);
          if (v22) {
            break;
          }
LABEL_36:
          BOOL v26 = v21++ == v19;
          if (v26) {
            goto LABEL_38;
          }
        }
        int v23 = (uint64_t *)v22;
        while (is_expensive_pos(*v23, *(void *)(a3 + 56)))
        {
          uint64_t v24 = v23 + 8;
          if (v23[8] < v20)
          {
            v23[8] = v20;
            uint64_t v25 = *v23;
LABEL_30:
            *v24 += get_me_terminal(v25);
          }
LABEL_35:
          int v23 = (uint64_t *)v23[11];
          if (!v23) {
            goto LABEL_36;
          }
        }
        if (is_expensive_pos(*v16, *(void *)(a3 + 56))) {
          goto LABEL_35;
        }
        uint64_t v25 = *v16;
        if (*v16 != *v23) {
          goto LABEL_35;
        }
        uint64_t v24 = v23 + 8;
        if (v23[8] >= v20) {
          goto LABEL_35;
        }
        uint64_t *v24 = v20;
        goto LABEL_30;
      }
LABEL_40:
      ++v14;
      ++v32;
      ++v35;
    }
    while (v14 != v30);
    --v31;
    BOOL v26 = v30++ == v29;
    if (!v26) {
      continue;
    }
    return v28;
  }
}

uint64_t is_expensive_pos(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (1)
  {
    pointer_of_symbol = (const char *)get_pointer_of_symbol((uint64_t)SF_symbol_file, a1);
    if (pointer_of_symbol)
    {
      if (!cstdlib_strcmp(pointer_of_symbol, *(const char **)v2)) {
        break;
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

void *as_list_free_all(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    as_list_free_all(result[1]);
    as_list_free_all(*(void *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_partial_tree_checking_FI(void *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a3, a4);
  if (leading_tree)
  {
    uint64_t v13 = leading_tree;
    uint64_t result = 2350907394;
    uint64_t v15 = *(void *)(v13 + 88);
    if (v15)
    {
      int v16 = 0;
      while (1)
      {
        uint64_t v17 = v13;
        uint64_t v13 = v15;
        if (*(void *)v17 == *(void *)a2)
        {
          int v18 = *(_DWORD *)(v17 + 32);
          if (v18 == *(_DWORD *)(a2 + 32)
            && (v18 == 1 || v18 == 2 && *(void *)(v17 + 40) == *(void *)(a2 + 40))
            && *(void *)(v17 + 48) == *(void *)(a2 + 48))
          {
            break;
          }
        }
        ++v16;
        uint64_t v15 = *(void *)(v13 + 88);
        if (!v15) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      int v16 = 0;
LABEL_16:
      if (a5 < 1 || v16 < a5 - 1)
      {
        uint64_t result = 0;
        *(void *)(v13 + 88) = a2;
      }
    }
  }
  else
  {
    return cyk_hash_add_leading_tree(a1, a2, a3, a4, a6);
  }
  return result;
}

uint64_t estimate_f(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t cyk_as_make_trees(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8)
{
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *a7 = -1;
  if (a3)
  {
    int v13 = *(_DWORD *)(a3 + 72);
    int v14 = *(_DWORD *)(a3 + 76) + 1;
    if (v14 + v13 != *((_DWORD *)a4 + 18)) {
      return 1;
    }
    int v15 = v14 + *((_DWORD *)a4 + 19);
    uint64_t v16 = *(void *)a3;
  }
  else
  {
    int v13 = *((_DWORD *)a4 + 18);
    int v15 = *((_DWORD *)a4 + 19);
    uint64_t v16 = -1;
  }
  uint64_t v17 = *a4;
  *((void *)&v40 + 1) = v16;
  *(void *)&long long v41 = v17;
  uint64_t v39 = &v40;
  uint64_t grammar_right = find_grammar_right((uint64_t *)&v39);
  if (grammar_right == -1) {
    return 1;
  }
  uint64_t v19 = grammar_right;
  uint64_t v35 = a5;
  uint64_t next_grammar_right = grammar_right - 1;
  while (1)
  {
    uint64_t result = heap_Alloc((uint64_t)a8, 96);
    if (!result) {
      break;
    }
    uint64_t v22 = result;
    uint64_t v23 = (uint64_t)v39;
    *(void *)uint64_t result = *(void *)v39;
    int v24 = -1;
    *(_DWORD *)(result + 8) = -1;
    *(void *)(result + 24) = 0;
    if (a3)
    {
      int v24 = *(_DWORD *)(v23 + 24);
      int v25 = 2;
    }
    else
    {
      int v25 = 1;
    }
    *(_DWORD *)(result + 32) = v25;
    *(_DWORD *)(result + 12) = v24;
    *(void *)(result + 40) = a3;
    *(void *)(result + 48) = a4;
    *(void *)(result + 88) = 0;
    *(_DWORD *)(result + 16) = *(void *)(v23 + 32);
    *(_DWORD *)(result + 72) = v13;
    *(_DWORD *)(result + 76) = v15;
    uint64_t v26 = *(void *)(v23 + 72);
    if (v26 == -1 || *(_DWORD *)(a6 + 44) == 1 || eval_cond(*(void *)*(&AC_pac + v26), result) == 1)
    {
      if (a3)
      {
        uint64_t v27 = a4[8] + *(void *)(a3 + 64);
        uint64_t v28 = (uint64_t)v39;
        int v29 = (void *)v39 + 11;
      }
      else
      {
        uint64_t v28 = (uint64_t)v39;
        uint64_t v27 = *((void *)v39 + 11);
        int v29 = a4 + 8;
      }
      uint64_t v30 = v27 + *v29;
      *(void *)(v22 + 64) = v30;
      *(void *)(v22 + 56) = v30 + *(void *)(v28 + 120);
      int v31 = add_partial_tree_checking_FI(a1, v22, v13, v15, *(_DWORD *)(a6 + 52), (uint64_t)a8);
      if (v31 < 0)
      {
        __int16 v34 = v31;
        heap_Free(a8, v22);
        if ((v34 & 0x1FFF) == 0xA) {
          return 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = as_list_insert(v22, *(void **)(a2 + 8), (uint64_t)a8);
        uint64_t v32 = *((void *)v39 + 9);
        if (v32 != -1 && !*(_DWORD *)(a6 + 44))
        {
          uint64_t result = exec_actions(*((void *)*(&AC_pac + v32) + 1), v22, (uint64_t)a8);
          if (!result) {
            return result;
          }
        }
        if (!*(_DWORD *)(v22 + 72))
        {
          int v33 = *(_DWORD *)(v22 + 76);
          if (v33 > *a7 && *(void *)v22 == v35) {
            *a7 = v33;
          }
        }
      }
    }
    else
    {
      heap_Free(a8, v22);
    }
    uint64_t next_grammar_right = find_next_grammar_right(&v39, v19, next_grammar_right);
    if (next_grammar_right == -1) {
      return 1;
    }
  }
  return result;
}

uint64_t parse_cyk_as(_DWORD *a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  int v39 = 0;
  int v13 = cyk2as_list(a2, a3, (uint64_t)a1, a7);
  if (v13)
  {
    int v14 = v13;
    int v15 = 0;
    uint64_t v16 = 0;
    int v38 = 0;
    while (1)
    {
      do
      {
        uint64_t v17 = (uint64_t *)v14[1];
        int v18 = v14;
        do
        {
          if (!v17) {
            goto LABEL_38;
          }
          uint64_t v19 = v17;
          uint64_t v20 = v18;
          uint64_t v17 = (uint64_t *)v17[1];
          int v18 = v19;
        }
        while (v17);
        uint64_t v21 = *v19;
        v20[1] = v19[2];
        heap_Free(a7, (uint64_t)v19);
        if (!v21)
        {
LABEL_38:
          as_list_free_all(v14, a7);
          int v33 = 1;
          uint64_t v34 = v16;
          goto LABEL_40;
        }
        int v22 = *(_DWORD *)(v21 + 72);
        if (!v22)
        {
          if (*(_DWORD *)(v21 + 76) == a3 - 1 && *(void *)v21 == a4)
          {
            uint64_t v23 = tree_duplicate(v21, (uint64_t)a1, a6, a7);
            uint64_t v16 = tree_append(v16, (uint64_t)v23);
            if (v38 + 1 >= a1[1]) {
              goto LABEL_38;
            }
            ++v38;
            int v22 = *(_DWORD *)(v21 + 72);
          }
          else
          {
            int v22 = 0;
          }
        }
        int v24 = a1[67];
        if (v24 < 0) {
          break;
        }
        int v25 = *(_DWORD *)(v21 + 76) + v22;
        if (v25 >= v15 - v24) {
          break;
        }
      }
      while (v25 >= a1[66]);
      int v36 = a6;
      uint64_t v37 = v16;
      if (v22 >= 1) {
        break;
      }
LABEL_25:
      int v29 = v22 + *(_DWORD *)(v21 + 76) + 1;
      if (v29 < a3)
      {
        int v30 = 0;
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(a2, v29, v30);
          if (leading_tree) {
            break;
          }
LABEL_33:
          ++v30;
          int v29 = *(_DWORD *)(v21 + 72) + *(_DWORD *)(v21 + 76) + 1;
          if (v30 >= a3 - v29) {
            goto LABEL_34;
          }
        }
        uint64_t v32 = (uint64_t *)leading_tree;
        while (cyk_as_make_trees(a2, (uint64_t)v14, v21, v32, a4, (uint64_t)a1, &v39, a7))
        {
          if (v39 > v15) {
            int v15 = v39;
          }
          uint64_t v32 = (uint64_t *)v32[11];
          if (!v32) {
            goto LABEL_33;
          }
        }
        goto LABEL_43;
      }
LABEL_34:
      if (!cyk_as_make_trees(a2, (uint64_t)v14, 0, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7)) {
        goto LABEL_43;
      }
      if (v39 > v15) {
        int v15 = v39;
      }
      a6 = v36;
      uint64_t v16 = v37;
    }
    int v26 = 0;
    while (1)
    {
      uint64_t v27 = cyk_hash_get_leading_tree(a2, v22 + ~v26, v26);
      if (v27) {
        break;
      }
LABEL_24:
      ++v26;
      int v22 = *(_DWORD *)(v21 + 72);
      if (v26 >= v22) {
        goto LABEL_25;
      }
    }
    uint64_t v28 = v27;
    while (cyk_as_make_trees(a2, (uint64_t)v14, v28, (uint64_t *)v21, a4, (uint64_t)a1, &v39, a7))
    {
      if (v39 > v15) {
        int v15 = v39;
      }
      uint64_t v28 = *(void *)(v28 + 88);
      if (!v28) {
        goto LABEL_24;
      }
    }
LABEL_43:
    int v33 = 2;
    uint64_t v34 = v37;
  }
  else
  {
    int v33 = 2;
    uint64_t v34 = 0;
  }
LABEL_40:

  return parser_result_create(v33, v34, (uint64_t)a7);
}

void *set_step_partial_tree(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = result;
  while (1)
  {
    if (*(void *)a2 == a3 && *(_DWORD *)(a2 + 80) != a4)
    {
      *(_DWORD *)(a2 + 80) = a4;
      uint64_t result = as_list_insert(a2, (void *)v9[1], a5);
      v9[1] = result;
    }
    int v10 = *(_DWORD *)(a2 + 32);
    if (v10 != 1) {
      break;
    }
LABEL_8:
    a2 = *(void *)(a2 + 48);
  }
  if (v10 == 2)
  {
    uint64_t result = (void *)set_step_partial_tree(v9, *(void *)(a2 + 40), a3, a4, a5);
    goto LABEL_8;
  }
  return result;
}

uint64_t cyk_as_make_trees_step(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, void *a9)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  *a8 = -1;
  if (a3)
  {
    int v15 = *(_DWORD *)(a3 + 72);
    int v16 = *(_DWORD *)(a3 + 76) + 1;
    if (v16 + v15 != *((_DWORD *)a4 + 18)) {
      return 1;
    }
    int v17 = v16 + *((_DWORD *)a4 + 19);
    uint64_t v18 = *(void *)a3;
  }
  else
  {
    int v15 = *((_DWORD *)a4 + 18);
    int v17 = *((_DWORD *)a4 + 19);
    uint64_t v18 = -1;
  }
  uint64_t v19 = *a4;
  *((void *)&v44 + 1) = v18;
  *(void *)&long long v45 = v19;
  long long v43 = (uint64_t *)&v44;
  uint64_t grammar_right = find_grammar_right((uint64_t *)&v43);
  if (grammar_right == -1) {
    return 1;
  }
  uint64_t v21 = grammar_right;
  uint64_t v39 = a5;
  uint64_t next_grammar_right = grammar_right - 1;
  int v42 = v17;
  while (1)
  {
    uint64_t result = heap_Alloc((uint64_t)a9, 96);
    if (!result) {
      break;
    }
    uint64_t v24 = result;
    uint64_t v25 = (uint64_t)v43;
    uint64_t v26 = *v43;
    *(void *)uint64_t v24 = *v43;
    int v27 = -1;
    *(_DWORD *)(v24 + 8) = -1;
    *(void *)(v24 + 24) = 0;
    if (a3)
    {
      int v27 = *(_DWORD *)(v25 + 24);
      int v28 = 2;
    }
    else
    {
      int v28 = 1;
    }
    *(_DWORD *)(v24 + 32) = v28;
    *(_DWORD *)(v24 + 12) = v27;
    *(void *)(v24 + 40) = a3;
    *(void *)(v24 + 48) = a4;
    *(void *)(v24 + 88) = 0;
    *(_DWORD *)(v24 + 16) = *(void *)(v25 + 32);
    *(_DWORD *)(v24 + 72) = v15;
    *(_DWORD *)(v24 + 76) = v17;
    *(_DWORD *)(v24 + 80) = a7;
    uint64_t v29 = *(void *)(v25 + 72);
    if ((!a7 && v29 == -1 || v29 != -1 && *((_DWORD *)*(&AC_pac + v29) + 4) == a7)
      && *((_DWORD *)a4 + 20) == a7
      && (!a3 || *(_DWORD *)(a3 + 80) == a7)
      && (v29 == -1
       || *(_DWORD *)(a6 + 44) == 1
       || is_internal(v26) == 1
       || eval_cond(*(void *)*(&AC_pac + v43[9]), v24) == 1))
    {
      if (a3)
      {
        uint64_t v30 = a4[8] + *(void *)(a3 + 64);
        uint64_t v31 = (uint64_t)v43;
        uint64_t v32 = v43 + 11;
      }
      else
      {
        uint64_t v31 = (uint64_t)v43;
        uint64_t v30 = v43[11];
        uint64_t v32 = a4 + 8;
      }
      uint64_t v33 = v30 + *v32;
      *(void *)(v24 + 64) = v33;
      *(void *)(v24 + 56) = v33 + *(void *)(v31 + 120);
      uint64_t v34 = a6;
      int v35 = add_partial_tree_checking_FI(a1, v24, v15, v42, *(_DWORD *)(a6 + 52), (uint64_t)a9);
      if (v35 < 0)
      {
        __int16 v37 = v35;
        heap_Free(a9, v24);
        int v38 = v37 & 0x1FFF;
        a6 = v34;
        int v17 = v42;
        if (v38 == 10) {
          return 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = as_list_insert(v24, *(void **)(a2 + 8), (uint64_t)a9);
        if (v43[9] != -1 && !*(_DWORD *)(a6 + 44) && is_internal(*(void *)v24) != 1)
        {
          uint64_t result = exec_actions(*((void *)*(&AC_pac + v43[9]) + 1), v24, (uint64_t)a9);
          if (!result) {
            return result;
          }
        }
        int v17 = v42;
        if (!*(_DWORD *)(v24 + 72))
        {
          int v36 = *(_DWORD *)(v24 + 76);
          if (v36 > *a8 && *(void *)v24 == *(void *)(v39 + 8 * a7)) {
            *a8 = v36;
          }
        }
      }
    }
    else
    {
      heap_Free(a9, v24);
    }
    uint64_t next_grammar_right = find_next_grammar_right(&v43, v21, next_grammar_right);
    if (next_grammar_right == -1) {
      return 1;
    }
  }
  return result;
}

uint64_t parse_cyk_as_step(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10)
{
  uint64_t v65 = 0;
  int v64 = 0;
  uint64_t v63 = 0;
  uint64_t v15 = 956;
  LODWORD(v16) = *(_DWORD *)(a1 + 956);
  do
  {
    int v17 = *(_DWORD *)(a1 + v15);
    if ((int)v16 <= v17) {
      uint64_t v16 = v17;
    }
    else {
      uint64_t v16 = v16;
    }
    v15 += 4;
  }
  while (v15 != 976);
  uint64_t v18 = heap_Calloc(a10, 8, v16);
  if (!v18)
  {
    return parser_result_create(2, 0, (uint64_t)a10);
  }
  uint64_t v19 = v18;
  uint64_t v20 = cyk2as_list(a2, a3, a1, a10);
  if (!v20)
  {
    uint64_t v49 = parser_result_create(2, 0, (uint64_t)a10);
    long long v50 = a10;
    uint64_t v51 = v19;
LABEL_73:
    heap_Free(v50, v51);
    return v49;
  }
  uint64_t v21 = v20;
  uint64_t v57 = a6;
  long long v58 = 0;
  uint64_t v59 = a5;
  LODWORD(a5) = 0;
  uint64_t v22 = 0;
  LODWORD(v23) = 0;
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = (uint64_t *)v21[1];
    uint64_t v26 = v21;
    do
    {
      if (!v25) {
        goto LABEL_76;
      }
      int v27 = v25;
      int v28 = v26;
      uint64_t v25 = (uint64_t *)v25[1];
      uint64_t v26 = v27;
    }
    while (v25);
    uint64_t v60 = v19;
    uint64_t v29 = a4;
    uint64_t v30 = v22;
    uint64_t v31 = *v27;
    v28[1] = v27[2];
    heap_Free(a10, (uint64_t)v27);
    if (!v31) {
      break;
    }
    ++v24;
    uint64_t v55 = (int)v23;
    if ((*(_DWORD *)(a1 + 4 * (int)v23 + 1300) & 0x80000000) != 0 || times_limit_over() != 1)
    {
      if (*(_DWORD *)(v31 + 80) != v23)
      {
        uint64_t v22 = v30;
LABEL_29:
        a4 = v29;
        goto LABEL_30;
      }
      uint64_t v22 = v30;
      if (*(_DWORD *)(v31 + 72)) {
        goto LABEL_29;
      }
      a4 = v29;
      if (*(_DWORD *)(v31 + 76) != a3 - 1) {
        goto LABEL_30;
      }
      uint64_t v19 = v60;
      if (*(void *)v31 == *(void *)(a7 + 8 * (int)v23))
      {
        uint64_t v34 = (v22 + 1);
        if (v23 == *(_DWORD *)(a1 + 952) - 1)
        {
          int v35 = tree_duplicate(v31, a1, a9, a10);
          long long v58 = (void *)tree_append((uint64_t)v58, (uint64_t)v35);
          uint64_t v65 = v58;
          if ((int)v34 >= *(_DWORD *)(a1 + 4 * (int)v23 + 956))
          {
            LODWORD(v22) = v34;
            goto LABEL_75;
          }
LABEL_62:
          uint64_t v22 = v34;
        }
        else
        {
          *(void *)(v60 + 8 * (int)v22) = v31;
          if ((int)v34 < *(_DWORD *)(a1 + 4 * (int)v23 + 956)) {
            goto LABEL_62;
          }
          if ((v22 & 0x80000000) != 0)
          {
            LODWORD(a5) = 0;
            uint64_t v22 = 0;
            uint64_t v24 = 0;
            LODWORD(v23) = v23 + 1;
          }
          else
          {
            uint64_t v23 = (v23 + 1);
            long long v46 = (uint64_t *)v60;
            do
            {
              set_step_partial_tree(v21, *v46, *(void *)(v59 + 8 * v55), v23, (uint64_t)a10);
              uint64_t v47 = *v46++;
              set_step_partial_tree(v21, v47, a4, v23, (uint64_t)a10);
              --v34;
            }
            while (v34);
            LODWORD(a5) = 0;
            uint64_t v22 = 0;
            uint64_t v24 = 0;
          }
        }
LABEL_30:
        uint64_t v19 = v60;
      }
      if (*(_DWORD *)(v31 + 80) == v23
        || (int)v23 >= 1 && *(void *)v31 == *(void *)(v59 + 8 * (v23 - 1)))
      {
        int v36 = *(_DWORD *)(a1 + 4 * (int)v23 + 292);
        int v37 = *(_DWORD *)(v31 + 72);
        if (v36 < 0
          || (int v38 = *(_DWORD *)(v31 + 76) + v37, v38 >= (int)a5 - v36)
          || v38 < *(_DWORD *)(a1 + 4 * (int)v23 + 272))
        {
          uint64_t v54 = v24;
          unsigned int v56 = v22;
          if (v37 >= 1)
          {
            int v39 = 0;
            while (1)
            {
              uint64_t leading_tree = cyk_hash_get_leading_tree(a2, v37 + ~v39, v39);
              if (leading_tree) {
                break;
              }
LABEL_45:
              ++v39;
              int v37 = *(_DWORD *)(v31 + 72);
              if (v39 >= v37) {
                goto LABEL_46;
              }
            }
            uint64_t v41 = leading_tree;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v41, (uint64_t *)v31, a7, a1, v23, &v64, a10))
            {
              if (v64 > (int)a5) {
                LODWORD(a5) = v64;
              }
              uint64_t v41 = *(void *)(v41 + 88);
              if (!v41) {
                goto LABEL_45;
              }
            }
            goto LABEL_72;
          }
LABEL_46:
          int v42 = v37 + *(_DWORD *)(v31 + 76) + 1;
          if (v42 < a3)
          {
            int v43 = 0;
            while (1)
            {
              uint64_t v44 = cyk_hash_get_leading_tree(a2, v42, v43);
              if (v44) {
                break;
              }
LABEL_54:
              ++v43;
              int v42 = *(_DWORD *)(v31 + 72) + *(_DWORD *)(v31 + 76) + 1;
              if (v43 >= a3 - v42) {
                goto LABEL_55;
              }
            }
            long long v45 = (uint64_t *)v44;
            while (cyk_as_make_trees_step(a2, (uint64_t)v21, v31, v45, a7, a1, v23, &v64, a10))
            {
              if (v64 > (int)a5) {
                LODWORD(a5) = v64;
              }
              long long v45 = (uint64_t *)v45[11];
              if (!v45) {
                goto LABEL_54;
              }
            }
LABEL_72:
            uint64_t v49 = parser_result_create(2, (uint64_t)v58, (uint64_t)a10);
            long long v50 = a10;
            uint64_t v51 = v60;
            goto LABEL_73;
          }
LABEL_55:
          if (!cyk_as_make_trees_step(a2, (uint64_t)v21, 0, (uint64_t *)v31, a7, a1, v23, &v64, a10)) {
            goto LABEL_72;
          }
          if (v64 > (int)a5) {
            LODWORD(a5) = v64;
          }
          uint64_t v19 = v60;
          uint64_t v22 = v56;
          uint64_t v24 = v54;
        }
      }
    }
    else
    {
      if (v23 == *(_DWORD *)(a1 + 952) - 1) {
        break;
      }
      if (!v30)
      {
        if ((max_len_parse(0, v23, a2, a3, a1, (uint64_t)v21, v29, v59, v57, a7, a9, a10, &v63) & 0x80000000) == 0)
        {
LABEL_60:
          LODWORD(a5) = 0;
          uint64_t v22 = 0;
          uint64_t v24 = 0;
          LODWORD(v23) = v23 + 1;
          a4 = v29;
          uint64_t v19 = v60;
          continue;
        }
        as_list_free_all(v21, a10);
        heap_Free(a10, v60);
        return 0;
      }
      if ((int)v30 <= 0) {
        goto LABEL_60;
      }
      uint64_t v23 = (v23 + 1);
      a5 = v30;
      uint64_t v32 = (uint64_t *)v60;
      do
      {
        set_step_partial_tree(v21, *v32, *(void *)(v59 + 8 * v55), v23, (uint64_t)a10);
        uint64_t v33 = *v32++;
        set_step_partial_tree(v21, v33, v29, v23, (uint64_t)a10);
        --a5;
      }
      while (a5);
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      a4 = v29;
      uint64_t v19 = v60;
    }
  }
  LODWORD(v22) = v30;
  a4 = v29;
LABEL_75:
  uint64_t v19 = v60;
LABEL_76:
  if (v22)
  {
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    return parser_result_create(1, (uint64_t)v58, (uint64_t)a10);
  }
  else
  {
    int v52 = max_len_parse(1, v23, a2, a3, a1, (uint64_t)v21, a4, v59, v57, a7, a9, a10, &v65);
    as_list_free_all(v21, a10);
    heap_Free(a10, v19);
    if (v52 < 0) {
      return 0;
    }
    if (v65) {
      int v53 = 1;
    }
    else {
      int v53 = 2;
    }
    uint64_t v49 = parser_result_create(v53, (uint64_t)v65, (uint64_t)a10);
    if (!v49) {
      jpe_FreeTree(v65, a10);
    }
  }
  return v49;
}

uint64_t cyk_one_create(__int16 a1, __int16 a2, uint64_t a3)
{
  uint64_t result = heap_Alloc(a3, 24);
  if (result)
  {
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 8) = a1;
    *(_WORD *)(result + 10) = a2;
    *(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t cyk_one_free_all(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 88);
      heap_Free(a2, v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  heap_Free(a2, (uint64_t)a1);
  return 0;
}

uint64_t cyk_hash_get_address(int a1, int a2)
{
  int v2 = 20 * (a1 % 200);
  if ((a2 / 20)) {
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  }
  else {
    return (v2 + a2 % 20);
  }
}

uint64_t cyk_hash_get_leading_tree(void *a1, int a2, int a3)
{
  int v3 = 20 * (a2 % 200);
  int v4 = v3 + a3 % 20;
  if ((a3 / 20)) {
    int v4 = v3 + 20 * (a3 / 20) - a3 + 19;
  }
  uint64_t v5 = *(void *)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  while (*(__int16 *)(v5 + 10) != a3 || *(__int16 *)(v5 + 8) != a2)
  {
    uint64_t v5 = *(void *)(v5 + 16);
    if (!v5) {
      return 0;
    }
  }
  return *(void *)v5;
}

uint64_t cyk_hash_add_leading_tree(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v5 = a4;
  __int16 v6 = a3;
  int v9 = 20 * (a3 % 200);
  if ((a4 / 20)) {
    int v10 = v9 + 20 * (a4 / 20) - a4 + 19;
  }
  else {
    int v10 = v9 + a4 % 20;
  }
  uint64_t v11 = *(void *)(*a1 + 8 * v10);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11) {
        goto LABEL_10;
      }
    }
    unsigned __int16 v15 = 1;
    return v15 | 0x8C200000;
  }
  uint64_t v12 = 0;
LABEL_10:
  uint64_t v13 = heap_Alloc(a5, 24);
  if (!v13)
  {
    unsigned __int16 v15 = 8202;
    return v15 | 0x8C200000;
  }
  *(_WORD *)(v13 + 8) = v6;
  *(_WORD *)(v13 + 10) = v5;
  *(void *)(v13 + 16) = 0;
  *(void *)uint64_t v13 = a2;
  if (v12) {
    int v14 = (uint64_t *)(v12 + 16);
  }
  else {
    int v14 = (uint64_t *)(*a1 + 8 * v10);
  }
  uint64_t v16 = 0;
  *int v14 = v13;
  return v16;
}

uint64_t *cyk_hash_free(void *a1, void *a2)
{
  for (uint64_t i = 0; i != 4000; ++i)
  {
    uint64_t result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        __int16 v6 = (uint64_t *)result[2];
        cyk_one_free_all(result, a2);
        uint64_t result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t SearchTERMINALTable(char *__s2)
{
  int v2 = 0;
  int v3 = 372;
  while (1)
  {
    int v4 = v3 - v2;
    if (v3 < v2) {
      ++v4;
    }
    uint64_t v5 = v2 + (v4 >> 1);
    int v6 = cstdlib_strcmp((&TERMINALTable)[2 * v5], __s2);
    if (!v6) {
      break;
    }
    if (v6 >= 0) {
      int v3 = v5 - 1;
    }
    else {
      int v2 = v5 + 1;
    }
    if (v2 > v3) {
      return 0;
    }
  }
  return LOBYTE((&TERMINALTable)[2 * v5 + 1]);
}

uint64_t log_intermediate_tree(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, void *a5, int a6, uint64_t *a7)
{
  uint64_t v14 = ssftstring_Clear(a3);
  if ((v14 & 0x80000000) == 0)
  {
    if (a5)
    {
      if (a6 >= 1)
      {
        int v28 = a5;
        uint64_t v15 = 0;
        int v16 = a6;
        int v26 = a6;
        while ((int)v15 >= a6)
        {
LABEL_12:
          uint64_t v15 = (v15 + 1);
          --v16;
          a6 = v26;
          if (v15 == v26) {
            return v14;
          }
        }
        int v17 = 0;
        int v27 = v16;
        while (1)
        {
          uint64_t leading_tree = cyk_hash_get_leading_tree(v28, v15, v17);
          if (leading_tree) {
            break;
          }
LABEL_11:
          ++v17;
          int v16 = v27;
          if (v17 == v27) {
            goto LABEL_12;
          }
        }
        uint64_t v22 = leading_tree;
        while (1)
        {
          uint64_t v23 = v22;
          uint64_t v22 = *(void *)(v22 + 88);
          log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[A*] (%d,%d) == (%d,%d)", v19, v20, v21, v15);
          LODWORD(v25) = 0;
          uint64_t v14 = log_output_tree(a1, a2, a3, v23, 0, a4[3], a4[9], 1, v25, 0, a4[324], a7);
          if ((v14 & 0x80000000) != 0) {
            break;
          }
          if (!v22) {
            goto LABEL_11;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t parser_result_create(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = heap_Alloc(a3, 56);
  if (result)
  {
    *(_DWORD *)uint64_t result = a1;
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t connection_table(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 100000;
  uint64_t v5 = *(unsigned int *)(a3[6] + 4 * a1 + 4);
  if ((v5 & 0x80000000) != 0) {
    return result;
  }
  uint64_t v6 = *(unsigned int *)(a3[7] + 4 * a2 + 4);
  if ((v6 & 0x80000000) != 0) {
    return result;
  }
  LOWORD(v7) = 0;
  int v8 = *(__int16 *)(a3[3] + 2 * v5);
  int v9 = (v8 + ((unsigned __int16)(v8 & 0x8000) >> 15)) << 16 >> 17;
  int v10 = (__int16 *)(*(void *)(a3[2] + 8 * v5) + 8 * v9);
  while ((int)v6 < *v10)
  {
    if (!(_WORD)v9)
    {
      uint64_t v20 = (__int16 *)(*(void *)(a3[4] + 8 * v5) + 2 * v6);
      return *v20;
    }
    if ((int)v6 > *(v10 - 3))
    {
      uint64_t v18 = *(void *)(a3[4] + 8 * v5);
      int v19 = *(v10 - 2);
      goto LABEL_35;
    }
    uint64_t v11 = v10 - 4;
    if ((int)v6 >= *(v10 - 4))
    {
      uint64_t v20 = v10 - 1;
      return *v20;
    }
    if ((_WORD)v7) {
      __int16 v12 = v7;
    }
    else {
      __int16 v12 = v9;
    }
    int v7 = (__int16)(v12 + ((unsigned __int16)(v12 & 0x8000) >> 15)) >> 1;
    unsigned int v13 = (unsigned __int16)(v12 + 1);
    v10 -= 4 * v7;
    BOOL v14 = v13 >= 3;
    if (v13 >= 3) {
      unsigned int v15 = -v7;
    }
    else {
      LOWORD(v15) = -1;
    }
    if (!v14) {
      int v10 = v11;
    }
LABEL_31:
    LOWORD(v9) = v15 + v9;
  }
  if ((int)v6 <= v10[1])
  {
    uint64_t v20 = v10 + 3;
    return *v20;
  }
  if (v8 - 1 == (__int16)v9 || (int v16 = v10 + 4, (int)v6 < v10[4]))
  {
    uint64_t v18 = *(void *)(a3[4] + 8 * v5);
    int v19 = v10[2];
LABEL_35:
    uint64_t v20 = (__int16 *)(v18 + 2 * ((int)v6 - v19));
    return *v20;
  }
  if ((int)v6 > v10[5])
  {
    if ((_WORD)v7) {
      int v7 = (__int16)v7;
    }
    else {
      int v7 = v8 - (__int16)v9;
    }
    if (v7 >= 0) {
      int v17 = v7;
    }
    else {
      int v17 = v7 + 1;
    }
    int v7 = v17 >> 1;
    v10 += 4 * (v17 >> 1);
    unsigned int v15 = (unsigned __int16)(v17 >> 1);
    if (!v15) {
      int v10 = v16;
    }
    if (v15 <= 1) {
      LOWORD(v15) = 1;
    }
    goto LABEL_31;
  }
  uint64_t v20 = v10 + 7;
  return *v20;
}

uint64_t JpCreate(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, int a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v25 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v25);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v18 = (void *)heap_Calloc(*(void **)(v25 + 8), 1, 72);
  if (!v18) {
    return 2350915594;
  }
  uint64_t v19 = (uint64_t)v18;
  cstdlib_memset(v18, 0, 0x48uLL);
  uint64_t v20 = jparser_ClassOpen(a1, a2, v19 + 8);
  if ((v20 & 0x80000000) != 0)
  {
    uint64_t v22 = v20;
LABEL_13:
    heap_Free(*(void **)(v25 + 8), v19);
    return v22;
  }
  uint64_t v21 = jparser_ObjOpen(a1, a2, *(void *)(v19 + 8), *(void *)(v19 + 16), (uint64_t *)(v19 + 24), a3, a4, a5, a6, a7, a9);
  if ((v21 & 0x80000000) != 0)
  {
    uint64_t v22 = v21;
LABEL_12:
    jparser_ClassClose(*(void ***)(v19 + 8), *(void *)(v19 + 16));
    goto LABEL_13;
  }
  *(void *)(v19 + 48) = 0;
  uint64_t v22 = ssftstring_ObjOpen(*(void **)(v25 + 8), (void *)(v19 + 48));
  if ((v22 & 0x80000000) != 0)
  {
    jparser_ObjClose((uint64_t *)(v19 + 24));
    goto LABEL_12;
  }
  *(_DWORD *)uint64_t v19 = 1;
  uint64_t v23 = v25;
  *(void *)(v19 + 56) = a1;
  *(void *)(v19 + 64) = a2;
  *(void *)(v19 + 32) = v23;
  *(void *)(v19 + 40) = a9;
  *a8 = v19;
  return v22;
}

uint64_t JpRemove(void *a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    jparser_ObjClose((uint64_t *)(*a2 + 24));
    jparser_ClassClose(*(void ***)(*a2 + 8), *(void *)(*a2 + 16));
    uint64_t v4 = *a2;
    uint64_t v5 = *(void ***)(*a2 + 48);
    if (v5)
    {
      ssftstring_ObjClose(v5);
      *(void *)(*a2 + 48) = 0;
      uint64_t v4 = *a2;
    }
    heap_Free(a1, v4);
    *a2 = 0;
  }
  return 0;
}

uint64_t JpParse(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, _WORD *a10, uint64_t *a11, uint64_t a12, int a13, const char *a14, uint64_t a15)
{
  uint64_t v21 = 2350915594;
  v87[0] = 0;
  char v86 = 0;
  int v84 = 0;
  int v85 = 0;
  __int16 v83 = 0;
  uint64_t v82 = 0;
  __int16 v81 = 0;
  uint64_t v80 = 0;
  unsigned __int16 v79 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(*(void *)(a1 + 32) + 32));
  BOOL v23 = LogLevel > 4;
  uint64_t v78 = 0;
  unsigned __int16 v77 = 0;
  *(_WORD *)(a12 + 8) = 0;
  *(void *)(a12 + 12) = 0x100000001;
  if (!*(_DWORD *)a1)
  {
    uint64_t v21 = 2350915601;
    goto LABEL_55;
  }
  unsigned int v24 = LogLevel;
  uint64_t v25 = bed_GetpElem(a5, 0, &v78);
  if ((v25 & 0x80000000) != 0
    || (uint64_t v25 = bed_GetcElem(a5, &v77), (v25 & 0x80000000) != 0)
    || (uint64_t v25 = bed_GetpElem(a5, 0xFFFFu, &v82), (v25 & 0x80000000) != 0))
  {
LABEL_54:
    uint64_t v21 = v25;
LABEL_55:
    if (v86)
    {
      int v63 = jparser_FreeTree(*(void *)(a1 + 24), &v86);
      if (v63 >= 0 || (int)v21 <= -1) {
        return v21;
      }
      else {
        return v63;
      }
    }
    return v21;
  }
  uint64_t v74 = a8;
  if (a13 != 1) {
    goto LABEL_12;
  }
  if (v77)
  {
    int v26 = (int *)(v78 + 20);
    unsigned __int16 v27 = 1;
    uint64_t v28 = v77;
    do
    {
      int v29 = *v26;
      v26 += 16;
      if (v29 == 21) {
        ++v27;
      }
      --v28;
    }
    while (v28);
    if (!v27)
    {
LABEL_12:
      uint64_t v21 = jparser_Parse(*(void *)(a1 + 24), a2, a3, &v86, v23, *(void *)(a1 + 48), v78, v77, v82, a8, a13);
      v87[0] = v21;
      if ((v21 & 0x80000000) != 0) {
        return v21;
      }
      goto LABEL_34;
    }
  }
  else
  {
    unsigned __int16 v27 = 1;
  }
  uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, (unint64_t)v27 << 6);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v71 = a4;
    unsigned int v35 = v77;
    if (v77)
    {
      unsigned int v72 = v24;
      uint64_t v70 = a6;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      unsigned __int16 v38 = 0;
      do
      {
        if (!v36 || *(_DWORD *)(v78 + v36 + 20) == 21)
        {
          cstdlib_memcpy((void *)(v34 + ((unint64_t)v38++ << 6)), (const void *)(v78 + v36), 0x40uLL);
          unsigned int v35 = v77;
        }
        ++v37;
        v36 += 64;
      }
      while (v37 < v35);
      if (v38)
      {
        uint64_t v69 = a5;
        uint64_t v39 = 0;
        while (1)
        {
          if (v39)
          {
            int v40 = *(_DWORD *)(v78 + 32);
            size_t v41 = (unsigned __int16)(*(_WORD *)(v34 + v39 + 32) - v40);
            if (*(_WORD *)(v34 + v39 + 32) != (_WORD)v40)
            {
              uint64_t v42 = a3;
              int v43 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), (v41 + 1), 1);
              if (!v43)
              {
                heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v34);
                return v21;
              }
              unint64_t v44 = (unint64_t)v43;
              cstdlib_strncpy(v43, a14, v41);
              *(unsigned char *)(v44 + v41) = 0;
              *(_DWORD *)(v34 + v39 + 32) = 2 * Utf8_LengthInUtf8chars(v44, v41);
              heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v44);
              a3 = v42;
            }
          }
          v39 += 64;
          if ((unint64_t)v38 << 6 == v39)
          {
            a5 = v69;
            a6 = v70;
            unsigned int v24 = v72;
            goto LABEL_33;
          }
        }
      }
      unsigned __int16 v38 = 0;
      a6 = v70;
      unsigned int v24 = v72;
    }
    else
    {
      unsigned __int16 v38 = 0;
    }
LABEL_33:
    uint64_t v21 = jparser_Parse(*(void *)(a1 + 24), a2, a3, &v86, v23, *(void *)(a1 + 48), v34, v38, v82, v74, 1);
    v87[0] = v21;
    heap_Free(*(void **)(*(void *)(a1 + 32) + 8), v34);
    a4 = v71;
    if ((v21 & 0x80000000) == 0)
    {
LABEL_34:
      BOOL v73 = v23;
      if (a3 && 3 * a3 != 2 * (unsigned __int16)*(_DWORD *)(v82 + 36)) {
        *(_DWORD *)(a12 + 16) = 0;
      }
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] (normalizing %d bytes - region length %d %s)", v30, v31, v32, a3);
      UTOITrace(v23, *(void *)(a1 + 32), a4, a5, (uint64_t)"START of normalization");
      __int16 v81 = 0;
      jparser_extractResult(*(void *)(a1 + 32), *(void *)(a1 + 40), v86, (int *)v87, a6, a7, v74, a9, a10, &v83, (_WORD *)&v85 + 1, &v85, (_WORD *)&v84 + 1, *(void *)(a1 + 48), a11, (unsigned __int16 *)&v84, a12, &v81, (uint64_t)a14,
        a15);
      uint64_t v21 = v87[0];
      if ((v87[0] & 0x80000000) != 0) {
        goto LABEL_55;
      }
      uint64_t v45 = a6;
      if (!a3) {
        goto LABEL_73;
      }
      uint64_t v25 = bed_GetcElem(a6, &v79);
      if ((v25 & 0x80000000) == 0)
      {
        uint64_t v49 = *(void *)(a1 + 32);
        if (!v79)
        {
          log_OutText(*(void *)(v49 + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] deleting region, no replacement text found", v46, v47, v48, v68);
          goto LABEL_73;
        }
        UTOISubTrace(v23, v49, a6, (uint64_t)"replacement string");
        if (*(_DWORD *)(a12 + 16) != 1)
        {
LABEL_73:
          uint64_t v21 = utoin_IncrReplaceCurrentRegion(a4, a5, v45, a3 >> 1, (uint64_t *)a12);
          if ((v21 & 0x80000000) == 0) {
            UTOITrace(v23, *(void *)(a1 + 32), a4, a5, (uint64_t)"END of normalization");
          }
          goto LABEL_55;
        }
        uint64_t v25 = bed_GetpElem(a6, 0, &v80);
        if ((v25 & 0x80000000) == 0)
        {
          if (!v79)
          {
            int v62 = 1;
            unsigned int v57 = v24;
            goto LABEL_67;
          }
          uint64_t v53 = 0;
          unsigned int v54 = 0;
          unsigned __int16 v55 = 1;
          uint64_t v56 = v80;
          unsigned int v57 = v24;
          while (1)
          {
            if (*(unsigned char *)(v56 + v53) == 16)
            {
              uint64_t v58 = *(unsigned __int16 *)(a12 + 8);
              if (v54 >= v58)
              {
LABEL_65:
                log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] cannot find non-deleted word to align new word number %d with", v50, v51, v52, v55);
                int v62 = 0;
LABEL_67:
                if (v57 >= 5 && *(_WORD *)(a12 + 8))
                {
                  uint64_t v66 = 0;
                  unint64_t v67 = 0;
                  do
                  {
                    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 40), 5, 0, (uint64_t)"[UTOI] [%d] origWordPos=%d, newPos=%d, bDeleted=%d", v50, v51, v52, v67++);
                    v66 += 12;
                  }
                  while (v67 < *(unsigned __int16 *)(a12 + 8));
                }
                BOOL v23 = v73;
                if (v62) {
                  *(_DWORD *)(a12 + 12) = 0;
                }
                goto LABEL_73;
              }
              uint64_t v59 = v54;
              uint64_t v60 = (int *)(*(void *)a12 + 12 * v54 + 4);
              while (1)
              {
                int v61 = *v60;
                v60 += 3;
                if (v61 != 1) {
                  break;
                }
                if (v58 == ++v59) {
                  goto LABEL_65;
                }
              }
              *(_WORD *)(*(void *)a12 + 12 * (unsigned __int16)v59 + 8) = v53;
              ++v55;
              unsigned int v54 = (unsigned __int16)v59 + 1;
            }
            if (++v53 >= (unint64_t)v79)
            {
              int v62 = 1;
              goto LABEL_67;
            }
          }
        }
      }
      goto LABEL_54;
    }
  }
  return v21;
}

uint64_t jparser_extractResult(uint64_t a1, uint64_t a2, void *a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, uint64_t a14, uint64_t *a15, unsigned __int16 *a16, uint64_t a17, _WORD *a18, uint64_t a19, uint64_t a20)
{
  uint64_t v113 = a7;
  if (*a4 < 0) {
    return 0;
  }
  int v27 = ssftstring_Clear(a14);
  *a4 = v27;
  if (v27 < 0) {
    return 0;
  }
  if (!a3) {
    return 1;
  }
  uint64_t v29 = a17;
  while (1)
  {
    uint64_t v30 = a3[4];
    if (v30)
    {
      int v31 = jparser_extractResult(a1, a2, v30, a4, a5, a6, v113, a8, a9, a10, a11, a12, a13, a14, a15, a16, v29, a18, a19,
              a20);
      uint64_t v29 = a17;
      if (v31 != 1) {
        return 0;
      }
      goto LABEL_7;
    }
    uint64_t v32 = a3[5];
    if (v32) {
      break;
    }
LABEL_7:
    a3 = (void *)a3[2];
    if (!a3) {
      return 1;
    }
  }
  uint64_t v110 = a5;
  uint64_t v111 = a1;
  uint64_t v108 = a20;
  uint64_t v109 = a2;
  uint64_t v106 = a6;
  unsigned int v107 = a8;
  unsigned __int16 v33 = 0;
  LOWORD(a8) = 0;
  __int16 v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  do
  {
    if (!cstdlib_strcmp(*(const char **)v32, "WORD"))
    {
      __int16 v34 = cstdlib_strlen(*(const char **)(v32 + 8));
      unsigned __int16 v38 = *(unsigned char **)(v32 + 8);
      unsigned int v39 = *v38;
      if (*v38)
      {
        a8 = 0;
        do
        {
          int v40 = v38 + 2;
          if (v39 > 0xFC) {
            size_t v41 = v38 + 1;
          }
          else {
            size_t v41 = v38 + 2;
          }
          if (v39 > 0xFC) {
            uint64_t v42 = a8;
          }
          else {
            uint64_t v42 = a8 + 1;
          }
          if (v39 <= 0xA0) {
            uint64_t v43 = a8;
          }
          else {
            uint64_t v43 = a8 + 1;
          }
          if (v39 <= 0xDF)
          {
            size_t v41 = v38 + 1;
            uint64_t v42 = v43;
          }
          if (v39 >= 0x81)
          {
            uint64_t v44 = a8 + 1;
          }
          else
          {
            int v40 = v38 + 1;
            uint64_t v44 = a8;
          }
          if (v39 <= 0x9F)
          {
            uint64_t v45 = v44;
          }
          else
          {
            int v40 = v41;
            uint64_t v45 = v42;
          }
          if ((v39 & 0x80) != 0) {
            unsigned __int16 v38 = v40;
          }
          else {
            ++v38;
          }
          if ((v39 & 0x80) != 0) {
            a8 = v45;
          }
          else {
            ++a8;
          }
          unsigned int v39 = *v38;
        }
        while (*v38);
      }
      else
      {
        LOWORD(a8) = 0;
      }
      int appended = ssftstring_AppendCStr(a14, "Word \"");
      *a4 = appended;
      if (appended < 0) {
        return 0;
      }
      int v47 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v47;
      if (v47 < 0) {
        return 0;
      }
      int v48 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v48;
      if (v48 < 0) {
        return 0;
      }
      uint64_t v37 = v32;
    }
    if (!cstdlib_strcmp(*(const char **)v32, "POS"))
    {
      cstdlib_strlen(*(const char **)(v32 + 8));
      int v49 = ssftstring_AppendCStr(a14, "POS \"");
      *a4 = v49;
      if (v49 < 0) {
        return 0;
      }
      int v50 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v50;
      if (v50 < 0) {
        return 0;
      }
      int v51 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v51;
      uint64_t v35 = v32;
      if (v51 < 0) {
        return 0;
      }
    }
    if (!cstdlib_strcmp(*(const char **)v32, "PRON"))
    {
      unsigned __int16 v33 = cstdlib_strlen(*(const char **)(v32 + 8));
      int v52 = ssftstring_AppendCStr(a14, "Pron \"");
      *a4 = v52;
      if (v52 < 0) {
        return 0;
      }
      int v53 = ssftstring_AppendCStr(a14, *(char **)(v32 + 8));
      *a4 = v53;
      if (v53 < 0) {
        return 0;
      }
      int v54 = ssftstring_AppendCStr(a14, "\"");
      *a4 = v54;
      uint64_t v36 = v32;
      if (v54 < 0) {
        return 0;
      }
    }
    uint64_t v32 = *(void *)(v32 + 16);
  }
  while (v32);
  if (!v37 || !v36 || !v35)
  {
    int v101 = -1944051456;
    goto LABEL_88;
  }
  uint64_t v55 = *(void *)(v111 + 32);
  uint64_t v56 = ssftstring_CStr(a14);
  log_OutText(v55, v109, 5, 0, (uint64_t)"[UTOI RES] %s", v57, v58, v59, v56);
  int v60 = ssftstring_Clear(a14);
  *a4 = v60;
  if (v60 < 0) {
    return 0;
  }
  unsigned __int16 v61 = cstdlib_strlen(szWORD_BEG_6);
  int v62 = bed_Insert(v110, szWORD_BEG_6, v61);
  *a4 = v62;
  if (v62 < 0) {
    return 0;
  }
  *a9 += cstdlib_strlen(szWORD_BEG_6);
  uint64_t v63 = *a15;
  unsigned __int16 v64 = *a16 + 1;
  *a16 = v64;
  uint64_t v65 = *(uint64_t **)(v111 + 8);
  uint64_t v66 = 2 * v64 + 2;
  if (v63)
  {
    unint64_t v67 = (_WORD *)heap_Realloc(v65, v63, v66);
    if (!v67) {
      goto LABEL_85;
    }
    *a15 = (uint64_t)v67;
  }
  else
  {
    unint64_t v67 = (_WORD *)heap_Calloc(v65, 1, v66);
    *a15 = (uint64_t)v67;
    if (!v67) {
      goto LABEL_85;
    }
  }
  *unint64_t v67 = *a16;
  int v68 = SearchTERMINALTable(*(char **)(v35 + 8));
  if (v68) {
    __int16 v69 = v68;
  }
  else {
    __int16 v69 = 42;
  }
  *(_WORD *)(*a15 + 2 * *a16) = v69;
  *a4 = bed_Insert(v110, *(void **)(v36 + 8), v33);
  *a9 += v33;
  unsigned __int16 v70 = cstdlib_strlen(szWORD_END_6);
  int v71 = bed_Insert(v110, szWORD_END_6, v70);
  *a4 = v71;
  if (v71 < 0) {
    return 0;
  }
  *a9 += cstdlib_strlen(szWORD_END_6);
  if (!v34)
  {
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] jparser word length is 0, cannot get hex args", v72, v73, v74, v104);
    int v101 = -1944051712;
    goto LABEL_88;
  }
  uint64_t v75 = heap_Calloc(*(void **)(v111 + 8), (unsigned __int16)a8 + 1, 2);
  if (!v75) {
    goto LABEL_85;
  }
  uint64_t v76 = v75;
  LH_wcsncpy(v75, (unsigned __int16 *)(v108 + 2 * (unsigned __int16)*a13), (unsigned __int16)a8);
  *(_WORD *)(v76 + 2 * (unsigned __int16)a8) = 0;
  __int16 v77 = utf8_16BitNbrOfUtf8Chars(v76);
  if (!v77)
  {
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] converted utf8 word length is 0, cannot get hex args", v78, v79, v80, v104);
    *a4 = -1944051712;
    int v102 = *(void **)(v111 + 8);
    goto LABEL_91;
  }
  size_t v81 = (unsigned __int16)(v77 - 1);
  uint64_t v82 = (char *)heap_Calloc(*(void **)(v111 + 8), v81 + 1, 1);
  if (v82)
  {
    uint64_t v83 = (uint64_t)v82;
    cstdlib_strncpy(v82, (const char *)(a19 + (unsigned __int16)*a12), v81);
    *(unsigned char *)(v83 + v81) = 0;
    log_OutText(*(void *)(v111 + 32), v109, 5, 0, (uint64_t)"[UTOI] get hex args from UTF16Word(%s,pos=%d) UTF8Word(%s,pos=%d)", v84, v85, v86, v76);
    uint64_t v87 = v113;
    unsigned int v88 = *(unsigned __int16 *)(v113 + 16);
    unsigned __int16 v89 = v88 + 2 * v81 + 1;
    if (*(unsigned __int16 *)(v113 + 18) < v89)
    {
      int v90 = datac_RequestBlock(v106, v107, (unsigned __int16)(v88 + 2 * v81 + 1), &v113);
      *a4 = v90;
      if (v90 < 0)
      {
        heap_Free(*(void **)(v111 + 8), v76);
        int v102 = *(void **)(v111 + 8);
        uint64_t v103 = v83;
        goto LABEL_92;
      }
      uint64_t v87 = v113;
      unsigned int v88 = *(unsigned __int16 *)(v113 + 16);
    }
    uint64_t v105 = v76;
    char v91 = (unsigned char *)(*(void *)(v87 + 8) + *(unsigned __int16 *)(v87 + 2) * (unint64_t)v88);
    *(_WORD *)(v87 + 16) = v89;
    if (v81)
    {
      size_t v92 = v81;
      long long v93 = (unsigned __int8 *)v83;
      do
      {
        unsigned int v94 = *v93++;
        LH_itoa(v94, v112, 0x10u);
        v112[2] = 0;
        *char v91 = v112[0];
        long long v95 = v91 + 2;
        v91[1] = v112[1];
        v91 += 2;
        --v92;
      }
      while (v92);
    }
    else
    {
      long long v95 = v91;
    }
    *long long v95 = 0;
    *a11 += v34;
    *a12 += v81;
    *a13 += a8;
    a1 = v111;
    heap_Free(*(void **)(v111 + 8), v105);
    heap_Free(*(void **)(v111 + 8), v83);
    uint64_t v29 = a17;
    a2 = v109;
    a5 = v110;
    a8 = v107;
    a6 = v106;
    a20 = v108;
    if (*(_DWORD *)(a17 + 16) != 1) {
      goto LABEL_83;
    }
    unsigned int v96 = *(unsigned __int16 *)(a17 + 8);
    uint64_t v97 = *(void *)a17;
    if (v96 < *(unsigned __int16 *)(a17 + 10))
    {
LABEL_82:
      uint64_t v99 = v97 + 12 * v96;
      *(_WORD *)uint64_t v99 = *a18;
      *(void *)(v99 + 2) = 0;
      *a18 += v81;
      ++*(_WORD *)(v29 + 8);
LABEL_83:
      *a10 = *a9;
      goto LABEL_7;
    }
    uint64_t v98 = heap_Realloc(*(uint64_t **)(v111 + 8), v97, 12 * *(unsigned __int16 *)(a17 + 10) + 121);
    if (v98)
    {
      uint64_t v97 = v98;
      uint64_t v29 = a17;
      *(void *)a17 = v98;
      *(_WORD *)(a17 + 10) += 10;
      unsigned int v96 = *(unsigned __int16 *)(a17 + 8);
      goto LABEL_82;
    }
LABEL_85:
    int v101 = -1944051702;
LABEL_88:
    *a4 = v101;
    return 0;
  }
  *a4 = -1944051702;
  int v102 = *(void **)(v111 + 8);
LABEL_91:
  uint64_t v103 = v76;
LABEL_92:
  heap_Free(v102, v103);
  return 0;
}

uint64_t wparserJparser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2350915585;
  }
  uint64_t result = 0;
  *a2 = &IWparserImplJparser;
  return result;
}

uint64_t wparser_impl_jparser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = 0;
  if (!a5) {
    return 2350915591;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v19);
  if ((inited & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v19 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: Begin", v8, v9, v10, v18);
    __int16 v12 = (void *)heap_Calloc(*(void **)(v19 + 8), 1, 88);
    if (v12)
    {
      *__int16 v12 = a3;
      v12[1] = a4;
      uint64_t v16 = v19;
      v12[2] = v19;
      v12[3] = 0;
      v12[5] = "WPARSER_IMPL";
      *(void *)a5 = v12;
      *(_DWORD *)(a5 + 8) = 87652;
      log_OutText(*(void *)(v16 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjOpen: End (%x)", v13, v14, v15, inited);
    }
    else
    {
      return 2350915594;
    }
  }
  return inited;
}

uint64_t wparser_impl_jparser_ObjClose(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : Begin", v4, v5, v6, v13);
  uint64_t v8 = JpRemove(*(void **)(v7 + 8), (uint64_t *)(a1 + 32));
  if ((v8 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjClose : End (%x)", v9, v10, v11, v8);
  }
  return v8;
}

uint64_t wparser_impl_jparser_ObjReopen(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v6 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : Begin", v3, v4, v5, v11);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL ObjReopen : End (%x)", v7, v8, v9, v6);
  }
  return v6;
}

uint64_t wparser_impl_jparser_Init(uint64_t a1, int a2, uint64_t a3, const char *a4, const char *a5, int a6, unsigned char *a7)
{
  uint64_t v13 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  *(void *)(a1 + 48) = a3;
  if (cstdlib_strcmp(a5, "win932"))
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), *(void *)(a1 + 40), 1802, (uint64_t)"%s%s", v14, v15, v16, v17, a5);
    return 2350915591;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = xcode_Utf16leToWin932;
  if (*a7)
  {
    uint64_t v19 = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(**(void **)(a1 + 48) + 64))(*(void *)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 16), a7, a1 + 64);
    if ((v19 & 0x80000000) != 0)
    {
      uint64_t v18 = v19;
      uint64_t v26 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = 1819;
      uint64_t v29 = 0;
LABEL_13:
      log_OutPublic(v26, v27, v28, (uint64_t)v29, v20, v21, v22, v23, v31);
      return v18;
    }
  }
  *(void *)(a1 + 56) = 0;
  if (cstdlib_strcmp(a4, "null"))
  {
    uint64_t v24 = (*(uint64_t (**)(void, void, const char *, uint64_t))(**(void **)(a1 + 48) + 64))(*(void *)(*(void *)(a1 + 48) + 8), *(void *)(*(void *)(a1 + 48) + 16), a4, a1 + 56);
    if ((v24 & 0x80000000) != 0)
    {
      uint64_t v18 = v24;
      uint64_t v26 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      int v31 = "xlit data : ";
      uint64_t v29 = "%s%s";
      uint64_t v28 = 1804;
      goto LABEL_13;
    }
  }
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v18 = JpCreate(*(_WORD **)a1, *(void *)(a1 + 8), *(void *)v25, *(void *)(v25 + 8), *(void *)(v25 + 16), *(_WORD *)(v25 + 24), *(_DWORD *)(v25 + 28), (uint64_t *)(a1 + 32), *(void *)(a1 + 40));
  if ((v18 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 80) = a6;
  }
  return v18;
}

uint64_t wparser_impl_jparser_Normalize(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int16 a11, _WORD *a12, uint64_t a13, uint64_t *a14, uint64_t a15)
{
  unsigned __int16 v42 = a5;
  int v41 = 0;
  uint64_t v21 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v21 & 0x80000000) != 0) {
    return v21;
  }
  uint64_t v25 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v22, v23, v24, (uint64_t)a3);
  int v26 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v27 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v26 + 1));
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v27, 2 * v26, &v41, 0);
    if ((v29 & 0x80000000) != 0)
    {
      __int16 v34 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v30, v31, v32, v28);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v41 + 1));
      if (!v33) {
        return v25;
      }
      __int16 v34 = (char *)v33;
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v28, (unsigned __int16)v41, v33, &v42, *(void *)(a1 + 64));
      if ((v29 & 0x80000000) == 0)
      {
        v34[v42] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v35, v36, v37, (uint64_t)v34);
        if (v42)
        {
          uint64_t v29 = JpParse(*(void *)(a1 + 32), v34, v42, a6, a7, a8, a9, a10, a11, a12, a14, a15, *(_DWORD *)(a1 + 80), a3, v28);
        }
        else
        {
          unsigned __int16 v40 = 0;
          uint64_t v29 = bed_GetcElem(a8, &v40);
          if ((v29 & 0x80000000) == 0)
          {
            if (!v40 || (uint64_t v29 = bed_Remove(a8, 0, v40), (v29 & 0x80000000) == 0))
            {
              int v39 = utoin_IncrReplaceCurrentRegion(a6, a7, a8, 0, 0);
              uint64_t v25 = v39 & (v39 >> 31);
LABEL_11:
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v28);
              if (v34) {
                heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v34);
              }
              return v25;
            }
          }
        }
      }
    }
    uint64_t v25 = v29;
    goto LABEL_11;
  }
  return v25;
}

uint64_t wparser_impl_jparser_Spell(uint64_t a1, int a2, const char *a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, uint64_t a10, int a11)
{
  unsigned __int16 v37 = a5;
  int v36 = 0;
  uint64_t v17 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v21 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v18, v19, v20, (uint64_t)a3);
  int v22 = Utf8_Utf8NbrOfSymbols(a3);
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v22 + 1));
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v23, 2 * v22, &v36, 0);
    if ((v25 & 0x80000000) != 0)
    {
      uint64_t v30 = 0;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v26, v27, v28, v24);
      uint64_t v29 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v36 + 1));
      if (!v29) {
        return v21;
      }
      uint64_t v30 = v29;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v24, (unsigned __int16)v36, v29, &v37, *(void *)(a1 + 64));
      if ((v25 & 0x80000000) == 0)
      {
        *(unsigned char *)(v30 + v37) = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v31, v32, v33, v30);
        LOWORD(v35) = a9;
        uint64_t v25 = DoJPJSpell(*(void *)(a1 + 16), *(void *)(a1 + 40), *(void *)(a1 + 48), v30, v37, a6, a7, a8, v35, a10, a11);
      }
    }
    uint64_t v21 = v25;
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v24);
    if (v30) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v30);
    }
  }
  return v21;
}

uint64_t wparser_impl_jparser_Latin(uint64_t a1, int a2, char *a3, unsigned int a4, char **a5)
{
  unsigned __int16 v29 = a4;
  int v28 = 0;
  uint64_t v9 = safeh_HandleCheck(a1, a2, 87652, 88);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  uint64_t v13 = 2350915594;
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF8: %s", v10, v11, v12, (uint64_t)a3);
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * a4 + 2);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = utf8_Utf8ToUtf16((uint64_t)a3, a4, 0, v14, 2 * a4, &v28, 0);
    if ((v16 & 0x80000000) != 0)
    {
      uint64_t v21 = 0;
      uint64_t v13 = v16;
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL UTF16: %s", v17, v18, v19, v15);
      uint64_t v20 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 2 * (v28 + 1));
      if (!v20) {
        return v13;
      }
      uint64_t v21 = (const char *)v20;
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, unsigned __int16 *, void))(a1 + 72))(*(void *)(a1 + 56), v15, (unsigned __int16)v28, v20, &v29, *(void *)(a1 + 64));
      if ((v13 & 0x80000000) == 0)
      {
        v21[v29] = 0;
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"WPARSER_IMPL", 4, 0, (uint64_t)"WPARSER_IMPL WIN932: %s", v22, v23, v24, (uint64_t)v21);
        uint64_t v25 = *(void *)(a1 + 48);
        if (*(_DWORD *)(v25 + 28) == 1)
        {
          uint64_t v13 = DoJPJLatin(*(void *)(a1 + 16), *(void *)(a1 + 40), v25, v21, a5);
          if (a5)
          {
            if (*a5)
            {
              int v26 = *a3;
              if ((v26 & 0x80000000) == 0) {
                *(_WORD *)*a5 = v26;
              }
            }
          }
        }
      }
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v15);
    if (v21) {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v21);
    }
  }
  return v13;
}

uint64_t wparser_impl_jparser_End(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessStart(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t wparser_impl_jparser_ProcessEnd(uint64_t a1, int a2)
{
  return safeh_HandleCheck(a1, a2, 87652, 88);
}

uint64_t get_a_rule(uint64_t a1)
{
  uint64_t result = 0;
  if ((a1 & 0x8000000000000000) == 0 && a1 < 1) {
    return (uint64_t)*(&pBG_grammar + a1);
  }
  return result;
}

uint64_t find_grammar_right(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = Sparse_index[2 * v2];
  if (v3 != -1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = Sparse_index[2 * v2 + 1];
    if ((v3 & 0x8000000000000000) == 0 && v3 < 1) {
      uint64_t v4 = *(&pBG_grammar + v3);
    }
    unsigned int v6 = 3;
    while (1)
    {
      uint64_t v7 = *(void *)(v1 + 8 * --v6);
      uint64_t v8 = v4[v6];
      if (v7 < v8) {
        return -1;
      }
      if (v7 > v8) {
        break;
      }
      if (v6 < 2)
      {
        uint64_t v9 = Sparse_index[2 * v2];
LABEL_21:
        *a1 = (uint64_t)v4;
        return v9;
      }
    }
    uint64_t v4 = 0;
    if ((v5 & 0x8000000000000000) == 0 && v5 < 1) {
      uint64_t v4 = *(&pBG_grammar + v5);
    }
    unsigned int v10 = 3;
    while (1)
    {
      uint64_t v11 = *(void *)(v1 + 8 * --v10);
      uint64_t v12 = v4[v10];
      if (v11 < v12) {
        break;
      }
      if (v11 > v12) {
        return -1;
      }
      if (v10 < 2)
      {
        uint64_t v9 = Sparse_index[2 * v2 + 1];
        goto LABEL_21;
      }
    }
    uint64_t v13 = v5 - v3;
    if (v5 - v3 == 1)
    {
      uint64_t v4 = 0;
      uint64_t v9 = -1;
    }
    else
    {
      do
      {
        uint64_t v4 = 0;
        if (v13 >= 0) {
          uint64_t v15 = v13;
        }
        else {
          uint64_t v15 = v13 + 1;
        }
        uint64_t v9 = v3 + (v15 >> 1);
        if (!v9) {
          uint64_t v4 = &BG_grammar;
        }
        unsigned int v16 = 3;
        while (1)
        {
          uint64_t v17 = *(void *)(v1 + 8 * --v16);
          uint64_t v18 = v4[v16];
          if (v17 < v18) {
            break;
          }
          if (v17 > v18)
          {
            uint64_t v3 = v9;
            goto LABEL_35;
          }
          if (v16 < 2) {
            goto LABEL_21;
          }
        }
        uint64_t v5 = v9;
LABEL_35:
        uint64_t v4 = 0;
        uint64_t v13 = v5 - v3;
        uint64_t v9 = -1;
      }
      while (v5 - v3 != 1);
    }
    goto LABEL_21;
  }
  return -1;
}

uint64_t find_next_grammar_right(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 >= a3)
  {
    if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
    {
      uint64_t v3 = (uint64_t)*(&pBG_grammar + a3);
      if (v3)
      {
        unsigned int v4 = 3;
        while (1)
        {
          --v4;
          if (*(void *)(*a1 + 8 * v4) != *(void *)(v3 + 8 * v4)) {
            break;
          }
          if (v4 < 2)
          {
            *a1 = v3;
            return a3 - 1;
          }
        }
      }
    }
    a3 = a2 + 1;
  }
  uint64_t v5 = -1;
  if ((a3 & 0x8000000000000000) == 0 && a3 < 1)
  {
    uint64_t v6 = (uint64_t)*(&pBG_grammar + a3);
    if (v6)
    {
      unsigned int v7 = 3;
      while (1)
      {
        --v7;
        if (*(void *)(*a1 + 8 * v7) != *(void *)(v6 + 8 * v7)) {
          break;
        }
        if (v7 < 2)
        {
          *a1 = v6;
          return a3 + 1;
        }
      }
    }
    return -1;
  }
  return v5;
}

uint64_t get_me_terminal(uint64_t a1)
{
  uint64_t v1 = 1;
  for (uint64_t i = &pBG_terminal_line; *(void *)*i != a1; ++i)
  {
    if (!--v1) {
      return -1;
    }
  }
  return *((void *)*i + 8);
}

uint64_t mbs_copy(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  uint64_t v7 = 2350915594;
  if (a4 < 1)
  {
    if (!a4 || *(void *)a1)
    {
      uint64_t v13 = (int *)(a1 + 8);
LABEL_11:
      uint64_t v7 = 0;
      int *v13 = a4;
    }
  }
  else
  {
    int v10 = 4 * a4;
    uint64_t v11 = heap_Calloc(a5, 1, (4 * a4));
    *(void *)a1 = v11;
    if (v11)
    {
      uint64_t v12 = 0;
      *(_DWORD *)(a1 + 8) = a4;
      uint64_t v13 = (int *)(a1 + 8);
      if (v10 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = v10;
      }
      do
      {
        *(unsigned char *)(*(void *)a1 + v12) = *(unsigned char *)(*a2 + 4 * a3 + v12);
        ++v12;
      }
      while (v14 != v12);
      goto LABEL_11;
    }
  }
  return v7;
}

uint64_t mbs_create(uint64_t a1, int a2, const char *a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v8 = 2350915591;
  if (a3)
  {
    a2 = sjis_len(a3);
    if (a2 == -1) {
      return v8;
    }
  }
  if (a2 > 0)
  {
    uint64_t v9 = heap_Calloc(a4, 1, (4 * a2));
    *(void *)a1 = v9;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)a1;
  if (a2)
  {
LABEL_6:
    if (!v9) {
      return 2350915594;
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  if (v5)
  {
    int v10 = cstdlib_strlen(v5);
    if (v10 >= 1)
    {
      int v11 = 0;
      int v12 = 1;
      do
      {
        char v13 = *v5;
        if (v12 == 1)
        {
          uint64_t v14 = 4 * v11;
          *(unsigned char *)(*(void *)a1 + v14) = 1;
          BOOL v15 = (v13 + 32) >= 0x1Du && (v13 + 127) >= 0x1Fu;
          *(unsigned char *)(*(void *)a1 + (int)v14 + 1) = v13;
          ++v11;
          if (v15) {
            int v12 = 1;
          }
          else {
            int v12 = 2;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)a1 + 4 * v11 - 4) = 2;
          *(unsigned char *)(*(void *)a1 + 4 * v11 - 2) = v13;
          int v12 = 1;
        }
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t mbs_compare(uint64_t *a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v4 = *((unsigned int *)a1 + 2);
    int v5 = *(_DWORD *)(a2 + 8);
    if ((int)v4 > v5) {
      return 1;
    }
    if ((int)v4 >= v5)
    {
      if ((int)v4 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = *a1;
        uint64_t v8 = *(void *)a2 + 1;
        for (uint64_t i = (char *)(v7 + 1); ; i += 4)
        {
          int v10 = *(char *)(v7 + 4 * v6);
          int v11 = *(char *)(*(void *)a2 + 4 * v6);
          if (v10 > v11) {
            break;
          }
          if (v10 < v11) {
            return 0xFFFFFFFFLL;
          }
          int v12 = i;
          char v13 = (char *)v8;
          if (v10 >= 1)
          {
            do
            {
              int v15 = *v12++;
              int v14 = v15;
              int v16 = *v13++;
              BOOL v17 = v14 < v16;
              if (v14 > v16) {
                return 1;
              }
              if (v17) {
                return 0xFFFFFFFFLL;
              }
            }
            while (--v10);
          }
          uint64_t result = 0;
          ++v6;
          v8 += 4;
          if (v6 == v4) {
            return result;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t *mbs_free(uint64_t *result, void *a2)
{
  if (*result) {
    return heap_Free(a2, *result);
  }
  return result;
}

uint64_t log_mbs_fput_sjis(uint64_t a1, int *a2)
{
  if (a2[2] < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 1;
  do
  {
    uint64_t v6 = *(void *)a2;
    if (*(char *)(*(void *)a2 + 4 * v4) < 1)
    {
      LODWORD(v7) = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        __s[v7] = *(unsigned char *)(v6 + v5 + v7);
        ++v7;
      }
      while (v7 < *(char *)(v6 + 4 * v4));
    }
    __s[v7] = 0;
    uint64_t result = ssftstring_AppendCStr(a1, __s);
    if ((result & 0x80000000) != 0) {
      break;
    }
    ++v4;
    v5 += 4;
  }
  while (v4 < a2[2]);
  return result;
}

uint64_t sjis_len(const char *a1)
{
  uint64_t v1 = a1;
  int v2 = cstdlib_strlen(a1);
  if (v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  int v4 = 1;
  do
  {
    if (v4 == 1)
    {
      BOOL v5 = (*v1 + 32) >= 0x1Du && (*v1 + 127) >= 0x1Fu;
      uint64_t v3 = (v3 + 1);
      if (v5) {
        int v4 = 1;
      }
      else {
        int v4 = 2;
      }
    }
    else
    {
      int v4 = 1;
    }
    ++v1;
    --v2;
  }
  while (v2);
  return v3;
}

unint64_t mbs_len_bytes(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  int v2 = (char **)result;
  LODWORD(result) = 0;
  uint64_t v3 = *v2;
  do
  {
    int v4 = *v3;
    v3 += 4;
    uint64_t result = (result + v4);
    --v1;
  }
  while (v1);
  return result;
}

uint64_t mbs_kanji_count(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if ((int)v1 >= 1)
  {
    uint64_t result = 0;
    for (uint64_t i = (unsigned __int8 *)(*(void *)a1 + 2); ; i += 4)
    {
      if (*(i - 2) != 2) {
        goto LABEL_10;
      }
      int v5 = *(i - 1);
      if ((v5 + 120) >= 0x18u && (v5 & 0xF0) != 0xE0) {
        goto LABEL_10;
      }
      int v6 = *i;
      if (v5 == 136 && v6 == 234) {
        goto LABEL_10;
      }
      if (v5 == 147 && v6 == 241) {
        goto LABEL_10;
      }
      if (v5 != 142) {
        break;
      }
      if (v6 != 79 && v6 != 108 && v6 != 181) {
        goto LABEL_16;
      }
LABEL_10:
      if (!--v1) {
        return result;
      }
    }
    if (v5 == 140 && v6 == 220 || v5 == 152 && v6 == 90 || v5 == 148 && v6 == 170) {
      goto LABEL_10;
    }
LABEL_16:
    if (v5 == 139 && v6 == 227) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    goto LABEL_10;
  }
  return 0;
}

uint64_t mbs_add_str(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t v6 = 2350915591;
  if (a3 < 0 || *(_DWORD *)(a2 + 8) < a4 + a3) {
    return v6;
  }
  uint64_t v12 = *(int *)(a1 + 8);
  if (!v12)
  {
    size_t v14 = (4 * a4);
    uint64_t v13 = heap_Alloc((uint64_t)a6, v14);
    *(void *)a1 = v13;
    if (v13) {
      goto LABEL_7;
    }
    return 2350915594;
  }
  uint64_t v13 = heap_Realloc(a6, *(void *)a1, (4 * (v12 + a4)));
  if (!v13) {
    return 2350915594;
  }
  *(void *)a1 = v13;
  size_t v14 = (4 * a4);
LABEL_7:
  cstdlib_memcpy((void *)(v13 + 4 * v12), (const void *)(*(void *)a2 + 4 * a3), v14);
  if (a4 >= 1)
  {
    uint64_t v15 = a4;
    uint64_t v16 = 4 * v12 + 3;
    do
    {
      *(unsigned char *)(*(void *)a1 + v16) = a5;
      v16 += 4;
      --v15;
    }
    while (v15);
  }
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 8) += a4;
  return v6;
}

uint64_t mbs_add_sjis_str(uint64_t a1, char *__s, char a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v8 = cstdlib_strlen(__s);
  uint64_t result = mbs_create((uint64_t)&v10, v8, __s, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = mbs_add_str(a1, (uint64_t)&v10, 0, v11, a3, a4);
    if ((result & 0x80000000) == 0)
    {
      if (v10) {
        heap_Free(a4, v10);
      }
      return 0;
    }
  }
  return result;
}

uint64_t mbs_check_flag(void *a1, int a2, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t v3 = a3;
  for (int i = 4 * a2; *(unsigned char *)(*a1 + 3 + i) != 1; i += 4)
  {
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t mbs_len_as_sjis(uint64_t a1, int a2, int a3)
{
  if (a2 > a3) {
    return 0;
  }
  uint64_t result = 0;
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= a2) {
    int v5 = a2;
  }
  uint64_t v6 = v5 - (uint64_t)a2;
  int v7 = 4 * a2;
  int v8 = a3 - a2 + 1;
  do
  {
    if (!v6) {
      break;
    }
    uint64_t result = (result + *(char *)(*(void *)a1 + v7));
    --v6;
    v7 += 4;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t mbs2sjis(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5 = a3 + a2;
  if (*(_DWORD *)(a1 + 8) < a3 + (int)a2) {
    return -1;
  }
  if (a3 >= 1)
  {
    __int16 v6 = 0;
    uint64_t v7 = 4 * (int)a2;
    uint64_t v8 = (a2 << 34) | 0x100000000;
    while (*(char *)(*(void *)a1 + v7) < 1)
    {
LABEL_9:
      LODWORD(a2) = a2 + 1;
      v7 += 4;
      v8 += 0x400000000;
      if ((int)a2 >= v5) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + v7);
    uint64_t v10 = v8;
    while (1)
    {
      *(unsigned char *)(a4 + v6++) = *(unsigned char *)(*(void *)a1 + (v10 >> 32));
      if (a5 < v6) {
        return -1;
      }
      v10 += 0x100000000;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }
  __int16 v6 = 0;
LABEL_12:
  *(unsigned char *)(a4 + v6) = 0;
  return v6;
}

uint64_t compare_tag(uint64_t a1, int a2, char *__s)
{
  uint64_t v3 = __s;
  int v6 = cstdlib_strlen(__s);
  if (v6 + a2 > *(_DWORD *)(a1 + 8)) {
    return 0;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    for (int i = (unsigned __int8 *)(*(void *)a1 + 4 * a2 + 1); *(i - 1) == 1 && *i == *v3; i += 4)
    {
      ++v3;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t mbs_one_char(void *a1, int a2)
{
  return *(char *)(*a1 + 4 * a2 + 1);
}

uint64_t *attribute_copy_one(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = (uint64_t *)heap_Alloc((uint64_t)a2, 24);
  if (v4)
  {
    int v5 = cstdlib_strlen(*(const char **)a1);
    int v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *int v4 = (uint64_t)v6;
    if (v6)
    {
      cstdlib_strcpy(v6, *(const char **)a1);
      int v7 = cstdlib_strlen(*(const char **)(a1 + 8));
      uint64_t v8 = (char *)heap_Alloc((uint64_t)a2, (v7 + 1));
      v4[1] = (uint64_t)v8;
      if (v8)
      {
        cstdlib_strcpy(v8, *(const char **)(a1 + 8));
        v4[2] = *(void *)(a1 + 16);
        return v4;
      }
      heap_Free(a2, *v4);
    }
    heap_Free(a2, (uint64_t)v4);
    return 0;
  }
  return v4;
}

uint64_t *attribute_copy_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    int v4 = 0;
    int v5 = 0;
    char v6 = 1;
    while (1)
    {
      uint64_t result = attribute_copy_one(v3, a2);
      if (!result) {
        break;
      }
      int v7 = result;
      result[2] = 0;
      if ((v6 & 1) == 0)
      {
        v4[2] = (uint64_t)result;
        uint64_t result = v5;
      }
      char v6 = 0;
      uint64_t v3 = *(void *)(v3 + 16);
      int v4 = v7;
      int v5 = result;
      if (!v3) {
        return result;
      }
    }
    attribute_free_all(v5, a2);
    return 0;
  }
  return result;
}

uint64_t *attribute_free_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (*result) {
      heap_Free(a2, *result);
    }
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      heap_Free(a2, v4);
    }
    attribute_free_all(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

void *attribute_name_free(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

void *attribute_value_free(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

unsigned char *is_internal(uint64_t a1)
{
  uint64_t result = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, a1);
  if (result) {
    return (unsigned char *)(*result == 95 && result[1] == 73);
  }
  return result;
}

uint64_t exist_symbol(uint64_t a1, uint64_t a2)
{
  v10[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  v10[1] = *(void *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a2 + 40);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 1;
  }
  v10[0] = v5;
  while (1)
  {
    uint64_t v6 = v4;
    int v7 = (uint64_t *)v10[v4];
    pointer_of_symbol = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v7);
    if (!pointer_of_symbol || *pointer_of_symbol != 95 || pointer_of_symbol[1] != 73) {
      break;
    }
    if (exist_symbol(a1, v7)) {
      return 1;
    }
LABEL_13:
    uint64_t v4 = 1;
    if (v6) {
      return 0;
    }
  }
  if (*(void *)a1 != *v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 4 * v6 + 12)) {
    goto LABEL_13;
  }
  return 1;
}

uint64_t find_attribute(uint64_t a1, uint64_t a2, void *a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  v13[1] = *(void *)(a2 + 48);
  if (*(_DWORD *)(a2 + 32) == 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 1;
  }
  v13[0] = v7;
  while (1)
  {
    uint64_t v8 = v6;
    uint64_t v9 = (uint64_t *)v13[v6];
    pointer_of_symbol = (unsigned char *)get_pointer_of_symbol((uint64_t)&SF_symbol_file, *v9);
    if (pointer_of_symbol && *pointer_of_symbol == 95 && pointer_of_symbol[1] == 73)
    {
      uint64_t result = find_attribute(a1, v9, a3);
      if (result == 1) {
        return result;
      }
      goto LABEL_16;
    }
    if (*(void *)a1 == *v9 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 4 * v8 + 12))
    {
      uint64_t v12 = v9[3];
      if (v12) {
        break;
      }
    }
LABEL_16:
    uint64_t v6 = 1;
    if (v8) {
      return 0;
    }
  }
  while (cstdlib_strcmp(*(const char **)v12, *(const char **)(a1 + 16)))
  {
    uint64_t v12 = *(void *)(v12 + 16);
    if (!v12) {
      goto LABEL_16;
    }
  }
  *a3 = *(void *)(v12 + 8);
  return 1;
}

uint64_t get_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (find_attribute(a1, a2, &v5) == 1) {
    return v5;
  }
  if (cstdlib_strcmp(*(const char **)(a1 + 16), "POS")) {
    return 0;
  }
  uint64_t v4 = *(void *)a1;

  return get_pointer_of_symbol((uint64_t)&SF_symbol_file, v4);
}

BOOL compare_operand(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  attribute = *(const char **)(a2 + 8);
  if (!*(_DWORD *)a2) {
    attribute = (const char *)get_attribute(*(void *)(a2 + 8), a4);
  }
  uint64_t v8 = *(const char **)(a3 + 8);
  if (!*(_DWORD *)a3) {
    uint64_t v8 = (const char *)get_attribute(*(void *)(a3 + 8), a4);
  }
  if (attribute) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0;
  }
  int v10 = cstdlib_strcmp(attribute, v8);
  BOOL result = v10 == 0;
  if (a1 != 2)
  {
    BOOL v12 = v10 != 0;
    return a1 == 3 && v12;
  }
  return result;
}

uint64_t eval_cond(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 1;
  }
  uint64_t v3 = a1;
  while (1)
  {
    int v4 = *(_DWORD *)v3;
    if (*(_DWORD *)v3 != 1) {
      break;
    }
    if (!eval_cond(*(void *)(v3 + 8), a2))
    {
      uint64_t v3 = *(void *)(v3 + 16);
      if (v3) {
        continue;
      }
    }
    return 1;
  }
  if ((v4 - 2) >= 2)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        uint64_t v5 = *(void *)(v3 + 8);
        return exist_symbol(v5, a2);
      }
      return 0;
    }
    return eval_cond(*(void *)(v3 + 8), a2) && eval_cond(*(void *)(v3 + 16), a2);
  }
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);

  return compare_operand(v4, v7, v8, a2);
}

uint64_t assign_attribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t attribute = *(void *)(a2 + 8);
  if (*(_DWORD *)a2 || (uint64_t attribute = get_attribute(*(void *)(a2 + 8), a3)) != 0)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    if (v8)
    {
      while (1)
      {
        BOOL v9 = (uint64_t *)(v8 + 16);
        if (!*(void *)(v8 + 16)) {
          break;
        }
        if (!cstdlib_strcmp(*(const char **)v8, *(const char **)(*(void *)(a1 + 8) + 16))) {
          goto LABEL_12;
        }
        uint64_t v8 = *v9;
      }
      if (!cstdlib_strcmp(*(const char **)v8, *(const char **)(*(void *)(a1 + 8) + 16)))
      {
LABEL_12:
        *(void *)uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 16);
        *(void *)(v8 + 8) = attribute;
        return 1;
      }
      uint64_t result = heap_Alloc(a4, 24);
      if (!result) {
        return result;
      }
      *(void *)uint64_t result = *(void *)(*(void *)(a1 + 8) + 16);
      *(void *)(result + 8) = attribute;
      *(void *)(result + 16) = 0;
      *BOOL v9 = result;
    }
    else
    {
      uint64_t result = heap_Alloc(a4, 24);
      if (!result) {
        return result;
      }
      *(void *)uint64_t result = *(void *)(*(void *)(a1 + 8) + 16);
      *(void *)(result + 8) = attribute;
      *(void *)(result + 16) = 0;
      *(void *)(a3 + 24) = result;
    }
  }
  return 1;
}

uint64_t exec_actions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  uint64_t v5 = a1;
  while (1)
  {
    if (*(_DWORD *)v5 == 1)
    {
      uint64_t v7 = *(uint64_t **)(v5 + 8);
      if (*v7 && !eval_cond(*v7, a2)) {
        uint64_t v8 = v7[2];
      }
      else {
        uint64_t v8 = v7[1];
      }
      uint64_t result = exec_actions(v8, a2, a3);
      if (!result) {
        return result;
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)v5) {
      return 0;
    }
    uint64_t result = assign_attribute(**(void **)(v5 + 8), *(void *)(*(void *)(v5 + 8) + 8), a2, a3);
    if (!result) {
      return result;
    }
LABEL_12:
    uint64_t v5 = *(void *)(v5 + 16);
    if (!v5) {
      return 1;
    }
  }
}

BOOL compare_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (!a1 || !a2) {
    return (v3 | v2) == 0;
  }
  while (!cstdlib_strcmp(*(const char **)v3, *(const char **)v2)
       && !cstdlib_strcmp(*(const char **)(v3 + 8), *(const char **)(v2 + 8)))
  {
    uint64_t v3 = *(void *)(v3 + 16);
    uint64_t v2 = *(void *)(v2 + 16);
    if (!v3 || !v2) {
      return (v3 | v2) == 0;
    }
  }
  return 0;
}

char *mystrdup2(const char *a1, uint64_t a2)
{
  int v4 = cstdlib_strlen(a1);
  uint64_t v5 = (char *)heap_Alloc(a2, (v4 + 1));
  uint64_t v6 = v5;
  if (v5) {
    cstdlib_strcpy(v5, a1);
  }
  return v6;
}

const char *set_attribute(const char *result, uint64_t a2)
{
  if (result)
  {
    int i = result;
    int v3 = *(unsigned __int8 *)result;
    if (*result)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      char v7 = 1;
      while (1)
      {
        uint64_t v8 = i;
        BOOL v9 = v6;
        int v10 = i + 1;
        if (!v3) {
          break;
        }
        while (v3 != 58)
        {
          int v11 = *(unsigned __int8 *)v10++;
          int v3 = v11;
          if (!v11) {
            return 0;
          }
        }
        *((unsigned char *)v10 - 1) = 0;
        for (int i = v10; *i; ++i)
        {
          if (*i == 59)
          {
            *i++ = 0;
            break;
          }
        }
        uint64_t result = (const char *)heap_Alloc(a2, 24);
        if (result)
        {
          uint64_t v6 = result;
          uint64_t result = mystrdup2(v8, a2);
          *uint64_t v6 = result;
          if (result)
          {
            uint64_t result = mystrdup2(v10, a2);
            v6[1] = result;
            if (result)
            {
              v6[2] = 0;
              uint64_t result = (const char *)v6;
              if ((v7 & 1) == 0)
              {
                v9[2] = v6;
                uint64_t result = v5;
              }
              char v7 = 0;
              int v3 = *(unsigned __int8 *)i;
              uint64_t v5 = result;
              if (*i) {
                continue;
              }
            }
          }
        }
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t log_output_attribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = ssftstring_AppendCStr(a1, "{");
  if ((result & 0x80000000) == 0)
  {
    if (a2)
    {
      char v5 = 0;
      while (1)
      {
        if (v5)
        {
          uint64_t result = ssftstring_AppendCStr(a1, ",");
          if ((result & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t result = ssftstring_AppendCStr(a1, *(char **)a2);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, "=\"");
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, *(char **)(a2 + 8));
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = ssftstring_AppendCStr(a1, "\" ");
        if ((result & 0x80000000) != 0) {
          break;
        }
        a2 = *(void *)(a2 + 16);
        char v5 = 1;
        if (!a2) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      return ssftstring_AppendCStr(a1, "}");
    }
  }
  return result;
}

uint64_t times_limit_over()
{
  return 1;
}

uint64_t box_hash_get_address(int a1, int a2)
{
  int v2 = 20 * (a1 % 200);
  if ((a2 / 20)) {
    return (v2 + 20 * (a2 / 20) - a2 + 19);
  }
  else {
    return (v2 + a2 % 20);
  }
}

uint64_t box_hash_get_leading_word(void *a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(*a1 + 8 * a4);
  if (!v4) {
    return 0;
  }
  while (*(__int16 *)(v4 + 10) != a3 || *(__int16 *)(v4 + 8) != a2)
  {
    uint64_t v4 = *(void *)(v4 + 16);
    if (!v4) {
      return 0;
    }
  }
  return *(void *)v4;
}

uint64_t *box_one_free_all(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = *result;
    if (v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 24);
        word_data_free_all((uint64_t **)v4, a2);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t *box_hash_free(void *a1, void *a2)
{
  for (uint64_t i = 0; i != 4000; ++i)
  {
    uint64_t result = *(uint64_t **)(*a1 + 8 * i);
    if (result)
    {
      do
      {
        uint64_t v6 = (uint64_t *)result[2];
        box_one_free_all(result, a2);
        uint64_t result = v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t box_hash_set_unknown(uint64_t *a1, int a2, char *__b)
{
  if (a2 >= 1) {
    memset_pattern16(__b, &unk_2206E3270, 4 * a2);
  }
  int v5 = *((_DWORD *)a1 + 2);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    do
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6);
      if (v8)
      {
        do
        {
          if (*(void *)v8 && (*(__int16 *)(v8 + 10) & 0x80000000) == 0) {
            bzero(&__b[4 * *(__int16 *)(v8 + 8)], 4 * *(unsigned __int16 *)(v8 + 10) + 4);
          }
          uint64_t v8 = *(void *)(v8 + 16);
        }
        while (v8);
        int v5 = *((_DWORD *)a1 + 2);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return 1;
}

uint64_t box_one_create(__int16 a1, __int16 a2, uint64_t a3)
{
  uint64_t result = heap_Alloc(a3, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = a1;
    *(_WORD *)(result + 10) = a2;
    *(_WORD *)(result + 12) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t box_one_add_word(void *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = v2;
    uint64_t v2 = *v3;
    uint64_t v3 = (void *)(*v3 + 24);
  }
  while (v2);
  int v5 = (void *)(v4 + 24);
  if (!v4) {
    int v5 = a1;
  }
  *int v5 = a2;
  return 1;
}

uint64_t box_hash_add_word(void *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  __int16 v7 = a4;
  __int16 v8 = a3;
  uint64_t v11 = *(void *)(*a1 + 8 * a5);
  if (v11)
  {
    while (1)
    {
      uint64_t v12 = v11;
      if (*(__int16 *)(v11 + 10) == a4 && *(__int16 *)(v11 + 8) == a3) {
        break;
      }
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11) {
        goto LABEL_7;
      }
    }
    uint64_t result = v11;
    goto LABEL_13;
  }
  uint64_t v12 = 0;
LABEL_7:
  uint64_t result = heap_Alloc(a6, 24);
  if (result)
  {
    *(_WORD *)(result + 8) = v8;
    *(_WORD *)(result + 10) = v7;
    *(_WORD *)(result + 12) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 16) = 0;
    if (v12) {
      size_t v14 = (uint64_t *)(v12 + 16);
    }
    else {
      size_t v14 = (uint64_t *)(*a1 + 8 * a5);
    }
    *size_t v14 = result;
LABEL_13:
    uint64_t v15 = 0;
    uint64_t v16 = (void *)result;
    do
    {
      uint64_t v17 = v15;
      uint64_t v15 = *v16;
      uint64_t v16 = (void *)(*v16 + 24);
    }
    while (v15);
    uint64_t v18 = (void *)(v17 + 24);
    if (!v17) {
      uint64_t v18 = (void *)result;
    }
    void *v18 = a2;
    return 1;
  }
  return result;
}

uint64_t UD_lookup()
{
  return 0;
}

uint64_t add_info_to_table(uint64_t a1, int a2, int a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t a7, void *a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (mbs2sjis(*(void *)(*(void *)(a1 + 16) + 8), 0, *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 8), (uint64_t)__s1, 64) == -1)return 0; {
  uint64_t number_of_symbol = get_number_of_symbol(a4, __s1);
  }
  if (number_of_symbol == -1)
  {
    free_information((uint64_t *)a1, a8);
    attribute_free_all(a6, a8);
    return 1;
  }
  uint64_t v17 = number_of_symbol;
  int address = box_hash_get_address(a2, a3);
  if (*(_DWORD *)(a7 + 40) == 1)
  {
    uint64_t leading_word = box_hash_get_leading_word(a5, a2, a3, address);
    if (leading_word)
    {
      uint64_t v20 = (uint64_t *)leading_word;
      while (mbs_compare(*(uint64_t **)(a1 + 8), *(void *)(*v20 + 8))
           || mbs_compare(*(uint64_t **)(*(void *)(a1 + 16) + 8), *(void *)(*(void *)(*v20 + 16) + 8))|| !compare_attribute((uint64_t)a6, v20[2]))
      {
        uint64_t v20 = (uint64_t *)v20[3];
        if (!v20) {
          goto LABEL_10;
        }
      }
      *(void *)(a1 + 24) = 0;
      uint64_t v23 = *v20;
      for (uint64_t i = *(void *)(*v20 + 24); i; uint64_t i = *(void *)(i + 24))
        uint64_t v23 = i;
      *(void *)(v23 + 24) = a1;
      return 1;
    }
  }
LABEL_10:
  uint64_t result = heap_Alloc((uint64_t)a8, 32);
  if (result)
  {
    uint64_t v22 = result;
    *(void *)uint64_t result = a1;
    *(void *)(result + 8) = v17;
    *(void *)(result + 16) = a6;
    *(void *)(result + 24) = 0;
    uint64_t result = box_hash_add_word(a5, result, a2, a3, address, (uint64_t)a8);
    if (result != 1)
    {
      heap_Free(a8, v22);
      return 0;
    }
  }
  return result;
}

uint64_t get_char_kind(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t result = mbs2sjis(a1, a2, 1, (uint64_t)v3, 256);
  if (result != -1) {
    return get_char_kind_hash(v3[0], v3[1]);
  }
  return result;
}

uint64_t *unknown_info_create(const char *a1, const char *a2, const char *a3, const char *a4, void *a5)
{
  info = (uint64_t *)create_info(0, a1, a5);
  if (info)
  {
    uint64_t v10 = create_info(1, a2, a5);
    info[2] = v10;
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v11 = v10;
    *(void *)(v10 + 16) = 0;
    uint64_t v12 = create_info(2, a3, a5);
    *(void *)(v11 + 16) = v12;
    if (!v12) {
      goto LABEL_6;
    }
    uint64_t v13 = v12;
    *(void *)(v12 + 16) = 0;
    uint64_t v14 = create_info(3, a4, a5);
    *(void *)(v13 + 16) = v14;
    if (v14)
    {
      *(void *)(v14 + 16) = 0;
    }
    else
    {
LABEL_6:
      free_information(info, a5);
      return 0;
    }
  }
  return info;
}

unsigned char *get_pron_from_grapheme(uint64_t a1, uint64_t a2, int a3, int a4, void *a5)
{
  int v5 = a3 - a2;
  if (a3 < (int)a2) {
    return 0;
  }
  int v10 = v5 + 1;
  uint64_t v11 = heap_Alloc((uint64_t)a5, (2 * (v5 + 1)) | 1u);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (unsigned __int8 *)v11;
  int v13 = 8 * v10;
  if (a4 == 3) {
    uint64_t v14 = v13 | 2u;
  }
  else {
    uint64_t v14 = v13 | 1u;
  }
  uint64_t v15 = (unsigned char *)heap_Alloc((uint64_t)a5, v14);
  if (v15)
  {
    if (mbs2sjis(a1, a2, v10, (uint64_t)v12, (2 * v10) | 1u) != -1)
    {
      uint64_t v25 = 0;
      *uint64_t v15 = 0;
      if (*v12)
      {
        int v16 = 0;
        int v17 = 0;
        int v18 = 0;
        int v19 = 0;
        int v20 = 0;
        uint64_t v21 = v12;
        do
        {
          get_pron_from_grapheme_hash(v21, &v15[v19], (int *)&v25 + 1, &v25, a4);
          if (HIDWORD(v25))
          {
            v20 += HIDWORD(v25);
            v19 += v25;
            int v16 = v17;
            int v17 = v18;
            int v18 = v19;
          }
          uint64_t v21 = &v12[v20];
        }
        while (*v21);
        if (a4 == 3 && v16 >= 1)
        {
          if (v19 >= v16)
          {
            uint64_t v22 = v19;
            do
              v15[v22 + 1] = v15[v22];
            while (v22-- > v16);
          }
          v15[v16] = 39;
        }
      }
      goto LABEL_20;
    }
    heap_Free(a5, (uint64_t)v15);
    heap_Free(a5, (uint64_t)v12);
    return 0;
  }
LABEL_20:
  heap_Free(a5, (uint64_t)v12);
  return v15;
}

uint64_t non_lookup_tag(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  int v9 = a3 - a2;
  if (a3 < (int)a2) {
    return 0;
  }
  uint64_t result = heap_Alloc((uint64_t)a9, (2 * (v9 + 1)) | 1u);
  if (result)
  {
    int v16 = (const char *)result;
    if (mbs2sjis(a1, a2, v9 + 1, result, (2 * (v9 + 1)) | 1u) == -1)
    {
      heap_Free(a9, (uint64_t)v16);
    }
    else
    {
      int v17 = unknown_info_create(v16, a4, a5, "922", a9);
      heap_Free(a9, (uint64_t)v16);
      if (v17)
      {
        if (*(unsigned char *)(a8 + 68)) {
          int v18 = a2 + 1;
        }
        else {
          int v18 = a2;
        }
        if (add_info_to_table((uint64_t)v17, v18, v9, a6, a7, 0, a8, a9)) {
          return 1;
        }
        free_information(v17, a9);
      }
    }
    return 0;
  }
  return result;
}

uint64_t look_up_unknown_word(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a2 + 68)) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = (char *)heap_Calloc(a5, v10, 4);
  if (v11 && box_hash_set_unknown(a4, v10, v11))
  {
    if ((int)v10 >= 1)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = (v10 - 1);
      do
      {
        if (v12 == v14)
        {
          int v15 = *(_DWORD *)&v11[4 * v14];
        }
        else
        {
          uint64_t v16 = v12 + 1;
          int v15 = *(_DWORD *)&v11[4 * v12];
          if (*(_DWORD *)&v11[4 * v12 + 4] == v15) {
            goto LABEL_14;
          }
        }
        if (v15 == 1
          && !non_lookup_tag(a1, v13 - (*(unsigned char *)(a2 + 68) != 0), v12 - (*(unsigned char *)(a2 + 68) != 0), (const char *)(a2 + 136), (const char *)(a2 + 200), a3, a4, a2, a5))
        {
          goto LABEL_16;
        }
        uint64_t v16 = v12 + 1;
        int v13 = v12 + 1;
LABEL_14:
        uint64_t v12 = v16;
      }
      while (v16 != v10);
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_16:
    uint64_t v17 = 0;
  }
  heap_Free(a5, (uint64_t)v11);
  return v17;
}

uint64_t mbs_normalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int v2 = *(_DWORD *)(result + 8);
    uint64_t result = 1;
    if (v2 >= 1)
    {
      while (1)
      {
        int v3 = v2 - 1;
        uint64_t v4 = (unsigned char *)(*v1 + 4 * (v2 - 1));
        int v5 = v4[1];
        if (*v4 == 1)
        {
          if ((v5 & 0xFE) == 0xDE)
          {
            if (v5 == 222) {
              uint64_t v6 = Norm_in1;
            }
            else {
              uint64_t v6 = (char **)&Norm_in2;
            }
            if (v5 == 222) {
              __int16 v7 = (char **)&Norm_out1;
            }
            else {
              __int16 v7 = Norm_out2;
            }
            if (v2 == 1) {
              return 1;
            }
            if (*(v4 - 4) == 1)
            {
              int v8 = **v6;
              if (**v6)
              {
                unsigned int v9 = v6 + 1;
                while (v8 != *(v4 - 3))
                {
                  uint64_t v10 = *v9++;
                  int v8 = *v10;
                  ++v7;
                  if (!*v10) {
                    goto LABEL_51;
                  }
                }
LABEL_48:
                *uint64_t v4 = 0;
                *(v4 - 4) = 2;
                uint64_t v21 = *v7;
                *(v4 - 3) = **v7;
                *(v4 - 2) = v21[1];
                int v3 = v2 - 2;
              }
            }
          }
          else if ((v5 + 90) <= 0x37u)
          {
            uint64_t v17 = 0;
            unsigned __int8 v18 = -79;
            while (v5 != v18)
            {
              unsigned __int8 v18 = *Norm_in3[++v17];
              if (v17 == 56) {
                goto LABEL_51;
              }
            }
            *uint64_t v4 = 2;
            uint64_t v22 = Norm_out3[v17];
            v4[1] = *v22;
            v4[2] = v22[1];
          }
        }
        else
        {
          unsigned int v11 = v4[2];
          if (v5 == 129 && (v11 & 0xFE) == 0x4A)
          {
            if (v11 == 74) {
              uint64_t v12 = Norm_in4;
            }
            else {
              uint64_t v12 = Norm_in5;
            }
            if (v11 == 74) {
              __int16 v7 = (char **)&Norm_out4;
            }
            else {
              __int16 v7 = Norm_out5;
            }
            if (v2 == 1) {
              return 1;
            }
            if (*(v4 - 4) == 2)
            {
              int v13 = *v12;
              int v14 = **v12;
              if (**v12)
              {
                int v15 = v12 + 1;
                while (v14 != *(v4 - 3) || v13[1] != *(v4 - 2))
                {
                  uint64_t v16 = *v15++;
                  int v13 = v16;
                  int v14 = *v16;
                  ++v7;
                  if (!*v16) {
                    goto LABEL_51;
                  }
                }
                goto LABEL_48;
              }
            }
          }
          else if (v5 == 130 && v11 >= 0x60 && v11 <= 0x9A)
          {
            int v19 = (unsigned __int8 **)&Norm_in6;
            for (uint64_t i = Norm_out6; ; ++i)
            {
              if (**v19 == 130)
              {
                if ((*v19)[1] == v11)
                {
                  *uint64_t v4 = 1;
                  v4[1] = **i;
                  break;
                }
              }
              else if (!**v19)
              {
                break;
              }
              ++v19;
            }
          }
        }
LABEL_51:
        int v2 = v3;
        if (v3 <= 0) {
          return 1;
        }
      }
    }
  }
  return result;
}

void *modify_comma(void *a1, int a2, void *a3)
{
  size_t v6 = a2;
  uint64_t result = (void *)heap_Alloc((uint64_t)a3, a2);
  if (result)
  {
    int v8 = result;
    cstdlib_memcpy(result, a1, v6);
    if (a2 >= 1)
    {
      uint64_t v9 = 0;
      unsigned int v10 = -1;
      do
      {
        int v11 = v10;
        if (v10 >= 4uLL) {
          int v11 = 4;
        }
        if (v10 >= 4) {
          int v12 = 4;
        }
        else {
          int v12 = v10;
        }
        if (!*((unsigned char *)a1 + v9))
        {
          if (v9)
          {
            unsigned int v13 = 0;
            int v14 = v11 + 1;
            unsigned int v15 = v12 + 1;
            unsigned int v16 = v10;
            while (*((unsigned char *)a1 + v16) == 1)
            {
              ++v13;
              --v16;
              if (v14 == v13)
              {
                int v17 = v13 + 1;
                goto LABEL_17;
              }
            }
            int v17 = v13 + 1;
            unsigned int v15 = v13;
          }
          else
          {
            unsigned int v15 = 0;
            unsigned int v16 = -1;
            int v17 = 1;
          }
LABEL_17:
          int v18 = 0;
          uint64_t v19 = 1;
          while (v9 + v19 < v6)
          {
            if (*((unsigned char *)a1 + v9 + v19) != 1)
            {
              int v18 = v19 - 1;
              break;
            }
            ++v18;
            if (++v19 == 6)
            {
              int v18 = 5;
              break;
            }
          }
          if (v15 <= 4
            && (v15 > 2
             || v15 && ((v16 & 0x80000000) != 0 || v9 == v17 || *((unsigned char *)a1 + v16) || *((unsigned char *)a1 + v16 - 1) != 1))
            && (v18 - 3) < 2)
          {
            char v20 = 1;
          }
          else
          {
            char v20 = -1;
          }
          v8[v9] = v20;
        }
        ++v9;
        ++v10;
      }
      while (v9 != v6);
    }
    cstdlib_memcpy(a1, v8, v6);
    return heap_Free(a3, (uint64_t)v8);
  }
  return result;
}

BOOL mycstdlib_isalpha(char a1)
{
  return (a1 & 0xDFu) - 65 < 0x1A;
}

uint64_t mark_tag_state(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(int *)(a1 + 8) < 1) {
    return 1;
  }
  int v4 = 0;
  int v14 = 0;
  LODWORD(v5) = 0;
  int v6 = 36;
  do
  {
    int v7 = v5;
    if (v6 == 36 || v6 == 33)
    {
      if ((signed int)(v5 + cstdlib_strlen(START_TAG_SAPI_PRN)) <= *(_DWORD *)(a1 + 8)
        && compare_tag(a1, v5, START_TAG_SAPI_PRN) == 1)
      {
        LODWORD(v5) = v5 + cstdlib_strlen(START_TAG_SAPI_PRN);
        int v6 = 34;
        *(unsigned char *)(a2 + v7) = 34;
        if ((int)cstdlib_strlen(START_TAG_SAPI_PRN) >= 2)
        {
          uint64_t v8 = v7 + 1;
          do
            *(unsigned char *)(a2 + v8++) = 35;
          while (v8 < (int)(v7 + cstdlib_strlen(START_TAG_SAPI_PRN)));
          int v4 = 1;
          goto LABEL_16;
        }
        int v4 = 1;
        goto LABEL_29;
      }
      if (mbs_one_char((void *)a1, v5) == 30)
      {
        LODWORD(v5) = v5 + cstdlib_strlen(START_TAG);
        int v6 = 34;
        *(unsigned char *)(a2 + v7) = 34;
        if ((int)cstdlib_strlen(START_TAG) >= 2)
        {
          uint64_t v9 = v7 + 1;
          do
            *(unsigned char *)(a2 + v9++) = 35;
          while (v9 < (int)(v7 + cstdlib_strlen(START_TAG)));
LABEL_16:
          int v6 = 34;
        }
LABEL_29:
        int v14 = v7;
        continue;
      }
      int v6 = 33;
      goto LABEL_31;
    }
    if (v4 == 1
      && (signed int)(v5 + cstdlib_strlen(END_TAG_SAPI_PRN)) <= *(_DWORD *)(a1 + 8)
      && compare_tag(a1, v5, END_TAG_SAPI_PRN) == 1)
    {
      int v10 = cstdlib_strlen(END_TAG_SAPI_PRN);
      uint64_t v5 = (int)v5 + (uint64_t)v10;
      uint64_t v11 = v5 - 1;
      if (v7 < (int)v5 - 1)
      {
        memset((void *)(a2 + v7), 35, (v10 - 2) + 1);
        uint64_t v11 = v5 - 1;
      }
      int v4 = 0;
      int v6 = 36;
      *(unsigned char *)(a2 + v11) = 36;
    }
    else
    {
      if (mbs_one_char((void *)a1, v5) != 31)
      {
        int v6 = 35;
LABEL_31:
        *(unsigned char *)(a2 + (int)v5) = v6;
        LODWORD(v5) = v5 + 1;
        continue;
      }
      int v12 = cstdlib_strlen(END_TAG);
      uint64_t v5 = (int)v5 + (uint64_t)v12;
      if (v7 < (int)v5 - 1) {
        memset((void *)(a2 + v7), 35, (v12 - 2) + 1);
      }
      int v6 = 36;
      *(unsigned char *)(a2 + v5 - 1) = 36;
    }
  }
  while ((int)v5 < *(_DWORD *)(a1 + 8));
  uint64_t result = 1;
  if ((v6 & 0xFFFFFFFE) == 0x22 && v14 < (int)v5)
  {
    memset((void *)(a2 + v14), 33, (v5 + ~v14) + 1);
    return 1;
  }
  return result;
}

uint64_t make_add_word_to_table(const char *a1, const char *a2, const char *a3, uint64_t *a4, int a5, int a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11)
{
  uint64_t result = (uint64_t)unknown_info_create(a1, a2, a3, "0", a11);
  if (result)
  {
    unsigned int v16 = (uint64_t *)result;
    if (*(unsigned char *)(a10 + 68)) {
      int v17 = a5 + 1;
    }
    else {
      int v17 = a5;
    }
    if (add_info_to_table(result, v17, a6 - a5, a8, a9, a4, a10, a11))
    {
      return 1;
    }
    else
    {
      free_information(v16, a11);
      return 0;
    }
  }
  return result;
}

uint64_t add_user_word_table(uint64_t a1, const char *a2, const char *a3, const char *a4, const char *a5, void *a6, int a7, uint64_t a8, uint64_t a9, void *a10)
{
  int v17 = sjis_len(a2);
  uint64_t result = (uint64_t)unknown_info_create(a2, a3, a4, a5, a10);
  if (result)
  {
    uint64_t v19 = (uint64_t *)result;
    if (add_info_to_table(result, a7, v17 - 1, a1, a6, 0, a9, a10))
    {
      return 1;
    }
    else
    {
      free_information(v19, a10);
      return 0;
    }
  }
  return result;
}

unsigned char *tagged2pron(uint64_t a1, int a2, int a3, void *a4)
{
  int v8 = cstdlib_strlen(START_TAG);
  int v9 = a3 - a2 - (cstdlib_strlen(END_TAG) + v8) + 1;
  if (v9 < 4) {
    return 0;
  }
  uint64_t v10 = heap_Alloc((uint64_t)a4, (2 * v9) | 1u);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (const char *)v10;
  int v12 = cstdlib_strlen(START_TAG);
  if (mbs2sjis(a1, (v12 + a2), v9, (uint64_t)v11, (2 * v9) | 1u))
  {
    int v13 = cstdlib_strlen(v11);
    uint64_t v14 = heap_Alloc((uint64_t)a4, (v13 + 3));
    unsigned int v15 = (unsigned char *)v14;
    if (v14)
    {
      cstdlib_strcpy((char *)(v14 + 1), v11);
      *unsigned int v15 = 30;
      size_t v16 = cstdlib_strlen(v11);
      v15[(uint64_t)((v16 << 32) + 0x100000000) >> 32] = v15[(int)v16];
      uint64_t v17 = (uint64_t)((v16 << 32) - 0x100000000) >> 32;
      v15[(int)v16] = v15[v17];
      v15[v17] = 31;
      v15[(uint64_t)((v16 << 32) + 0x200000000) >> 32] = 0;
    }
  }
  else
  {
    unsigned int v15 = 0;
  }
  heap_Free(a4, (uint64_t)v11);
  return v15;
}

uint64_t make_word_tagged_part(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v13 = cstdlib_strlen(START_TAG_SAPI_PRN);
  int v14 = a3 - a2 + 1;
  unsigned int v15 = (char *)heap_Alloc(*(void *)(a7 + 24), (2 * v14) | 1u);
  if (!v15 || mbs2sjis(a1, a2, a3 - (int)a2 + 1, (uint64_t)v15, (2 * v14) | 1u) == -1)
  {
    int v18 = 0;
    goto LABEL_8;
  }
  size_t v16 = cstdlib_strlen(v15);
  if (v16 > cstdlib_strlen(START_TAG_SAPI_PRN) && !cstdlib_strncmp(v15, START_TAG_SAPI_PRN, v13))
  {
    uint64_t v21 = *(void *)(a7 + 24);
    int v22 = cstdlib_strlen("Xn");
    uint64_t v23 = (char *)heap_Alloc(v21, (v22 + 1));
    int v18 = v23;
    if (v23)
    {
      cstdlib_strcpy(v23, "Xn");
      uint64_t v24 = *(void *)(a7 + 24);
      int v25 = cstdlib_strlen(v15);
      uint64_t v26 = heap_Alloc(v24, (v25 + 1));
      if (v26)
      {
        uint64_t v27 = (char *)v26;
        size_t v28 = cstdlib_strlen(START_TAG_SAPI_PRN);
        cstdlib_strcpy(v27, &v15[v28]);
        int v29 = cstdlib_strlen(v27);
        v27[(int)(v29 - cstdlib_strlen(END_TAG_SAPI_PRN))] = 0;
        *unsigned int v15 = 29;
        goto LABEL_6;
      }
    }
LABEL_8:
    uint64_t add_word_to_table = 0;
    goto LABEL_9;
  }
  int v18 = tagged2pron(a1, a2, a3, *(void **)(a7 + 24));
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t add_word_to_table = make_add_word_to_table(v15, "ROMAN", v18, 0, a2, a3, v17, a4, a5, a6, *(void **)(a7 + 24));
LABEL_9:
  heap_Free(*(void **)(a7 + 24), (uint64_t)v15);
  heap_Free(*(void **)(a7 + 24), (uint64_t)v18);
  return add_word_to_table;
}

uint64_t UD_regist_sapi_prn(uint64_t a1, uint64_t a2, int a3, _WORD *a4, uint64_t a5)
{
  int v10 = cstdlib_strlen(START_TAG_SAPI_PRN);
  uint64_t v11 = heap_Alloc(*(void *)(a5 + 24), (2 * a3) | 1u);
  if (!v11) {
    return 0;
  }
  int v12 = (const char *)v11;
  if (mbs2sjis(a1, a2, a3, v11, (2 * a3) | 1u) == -1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    if ((int)cstdlib_strlen(v12) > v10 && !cstdlib_strncmp(v12, START_TAG_SAPI_PRN, v10))
    {
      unsigned int v13 = &v12[v10];
      int v14 = cstdlib_strlen(v13);
      v13[(int)(v14 - cstdlib_strlen(END_TAG_SAPI_PRN) + 1)] = 0;
      *a4 = 32;
    }
    uint64_t v15 = 1;
  }
  heap_Free(*(void **)(a5 + 24), (uint64_t)v12);
  return v15;
}

uint64_t look_up_dictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  v212[0] = 0;
  v212[1] = 0;
  __int16 v211 = 0;
  unsigned __int8 v210 = 0;
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  int __s1 = (char *)marker_getMarkerArgStr(1u);
  uint64_t v206 = *(void *)(a8 + 184);
  long long v207 = *(_OWORD *)(a8 + 192);
  LOWORD(v208) = *(_WORD *)(a8 + 208);
  HIDWORD(v208) = *(_DWORD *)(a8 + 212);
  bzero(v213, 0x3C0uLL);
  uint64_t v18 = heap_Alloc(*(void *)(a8 + 24), 1024);
  uint64_t v19 = heap_Alloc(*(void *)(a8 + 24), 1025);
  uint64_t v20 = heap_Alloc(*(void *)(a8 + 24), 1025);
  uint64_t v21 = v20;
  uint64_t v22 = 0;
  LODWORD(info) = 0;
  if (!v18 || !v19)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    goto LABEL_36;
  }
  uint64_t v194 = a1;
  uint64_t v195 = a6;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if (!v20) {
    goto LABEL_237;
  }
  uint64_t v27 = 0;
  int v28 = a13;
  do
  {
    uint64_t v29 = heap_Alloc(*(void *)(a8 + 24), 80);
    v213[v27] = v29;
    if (!v29)
    {
      LODWORD(info) = 0;
      uint64_t v22 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      goto LABEL_237;
    }
    ++v27;
  }
  while (v27 != 120);
  info = (uint64_t *)heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v24 = heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v30 = heap_Alloc(*(void *)(a8 + 24), *(unsigned int *)(a2 + 8));
  uint64_t v25 = (uint64_t)info;
  uint64_t v22 = v30;
  LODWORD(info) = 0;
  if (!v25 || !v24 || !v30)
  {
LABEL_36:
    uint64_t v26 = 0;
    goto LABEL_237;
  }
  uint64_t v188 = v25;
  if (!mark_tag_state(a2, v25))
  {
LABEL_73:
    LODWORD(info) = 0;
    goto LABEL_74;
  }
  uint64_t v31 = a3;
  __int16 v184 = (const char *)(a3 + 68);
  if (*(unsigned char *)(a3 + 68))
  {
    info = (uint64_t *)create_info(0, "", *(void **)(a8 + 24));
    if (!info)
    {
LABEL_74:
      uint64_t v26 = 0;
      goto LABEL_236;
    }
    uint64_t v182 = v24;
    uint64_t v32 = create_info(1, v184, *(void **)(a8 + 24));
    info[2] = v32;
    if (!v32)
    {
      free_information(info, *(void **)(a8 + 24));
      LODWORD(info) = 0;
      uint64_t v26 = 0;
      goto LABEL_101;
    }
    uint64_t v33 = v32;
    *(void *)(v32 + 16) = 0;
    uint64_t v34 = create_info(2, " ", *(void **)(a8 + 24));
    uint64_t v26 = v34;
    *(void *)(v33 + 16) = v34;
    if (!v34)
    {
      free_information(info, *(void **)(a8 + 24));
      LODWORD(info) = 0;
      goto LABEL_101;
    }
    *(void *)(v34 + 16) = 0;
    uint64_t v35 = create_info(3, "0", *(void **)(a8 + 24));
    *(void *)(v26 + 16) = v35;
    uint64_t v24 = v182;
    if (!v35
      || (*(void *)(v35 + 16) = 0,
          int v36 = add_info_to_table((uint64_t)info, 0, 0, a5, v195, 0, a3, *(void **)(a8 + 24)),
          uint64_t v31 = a3,
          int v28 = a13,
          !v36))
    {
      free_information(info, *(void **)(a8 + 24));
      goto LABEL_73;
    }
  }
  LODWORD(v37) = *(_DWORD *)(a2 + 8);
  if ((int)v37 >= 1)
  {
    uint64_t v38 = 0;
    do
    {
      *(unsigned char *)(v24 + v38) = 0;
      *(unsigned char *)(v22 + v38++) = 0;
      uint64_t v37 = *(int *)(a2 + 8);
    }
    while (v38 < v37);
  }
  int v181 = v28;
  if (*(_DWORD *)(v31 + 132) != 1)
  {
    uint64_t v47 = 0;
    goto LABEL_38;
  }
  uint64_t v39 = heap_Alloc(*(void *)(a8 + 24), v37);
  if (!v39) {
    goto LABEL_73;
  }
  unsigned __int16 v40 = (unsigned char *)v39;
  uint64_t v41 = a2;
  LODWORD(v42) = *(_DWORD *)(a2 + 8);
  uint64_t v43 = v188;
  __s = (char *)v39;
  if ((int)v42 >= 1)
  {
    uint64_t v44 = 0;
    do
    {
      if (*(unsigned char *)(v43 + v44) != 33 || *(unsigned char *)(v24 + v44) == 1 || *(unsigned char *)(v22 + v44) == 1)
      {
        char v45 = -2;
      }
      else
      {
        int char_kind = get_char_kind(a2, v44);
        unsigned __int16 v40 = __s;
        uint64_t v43 = v188;
        if (char_kind == 4) {
          char v45 = -1;
        }
        else {
          char v45 = char_kind;
        }
        uint64_t v41 = a2;
      }
      v40[v44++] = v45;
      uint64_t v42 = *(int *)(v41 + 8);
    }
    while (v44 < v42);
  }
  modify_comma(v40, v42, *(void **)(a8 + 24));
  int v52 = *(_DWORD *)(a2 + 8);
  if (v52 >= 1)
  {
    uint64_t v182 = v24;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v47 = (uint64_t)__s;
    uint64_t v180 = v21;
    while (1)
    {
      if (v53 == v52 - 1)
      {
        unsigned int v55 = *(unsigned __int8 *)(v47 + v53);
      }
      else
      {
        uint64_t v56 = v53 + 1;
        int v57 = *(unsigned __int8 *)(v47 + v53 + 1);
        unsigned int v55 = *(unsigned __int8 *)(v47 + v53);
        if (v57 == v55)
        {
          int v58 = v53 - v54;
          if ((v57 != 1 || v58 <= 30) && ((v57 & 0xFE) != 2 || v58 <= 14)) {
            goto LABEL_62;
          }
LABEL_58:
          uint64_t v61 = v19;
          uint64_t v62 = v18;
          uint64_t v63 = a14;
          pron_from_grapheme = get_pron_from_grapheme(a2, v54, v53, (char)v57, *(void **)(a8 + 24));
          if (!pron_from_grapheme)
          {
            long long v93 = *(void **)(a8 + 24);
            uint64_t v94 = (uint64_t)__s;
            goto LABEL_100;
          }
          uint64_t v65 = (uint64_t)pron_from_grapheme;
          int v66 = non_lookup_tag(a2, v54, v53, Dtype[__s[v53]], pron_from_grapheme, a5, v195, a3, *(void **)(a8 + 24));
          unint64_t v67 = *(void **)(a8 + 24);
          if (!v66)
          {
            heap_Free(v67, (uint64_t)__s);
            long long v93 = *(void **)(a8 + 24);
            uint64_t v94 = v65;
LABEL_100:
            heap_Free(v93, v94);
            LODWORD(info) = 0;
            uint64_t v26 = 0;
            a14 = v63;
            uint64_t v18 = v62;
            uint64_t v19 = v61;
            uint64_t v21 = v180;
LABEL_101:
            uint64_t v24 = v182;
            goto LABEL_236;
          }
          heap_Free(v67, v65);
          int v52 = *(_DWORD *)(a2 + 8);
          a14 = v63;
          uint64_t v18 = v62;
          uint64_t v19 = v61;
          uint64_t v21 = v180;
          uint64_t v47 = (uint64_t)__s;
          goto LABEL_61;
        }
      }
      LOBYTE(v57) = v55;
      if (v55 <= 0xFD) {
        goto LABEL_58;
      }
LABEL_61:
      uint64_t v56 = v53 + 1;
      uint64_t v54 = v53 + 1;
LABEL_62:
      uint64_t v53 = v56;
      if (v56 >= v52)
      {
        uint64_t v24 = v182;
        goto LABEL_38;
      }
    }
  }
  uint64_t v47 = (uint64_t)__s;
LABEL_38:
  heap_Free(*(void **)(a8 + 24), v47);
  if ((mbs_copy((uint64_t)v212, (void *)a2, 0, *(_DWORD *)(a2 + 8), *(void **)(a8 + 24)) & 0x80000000) != 0)
  {
    LODWORD(info) = 0;
    uint64_t v26 = 0;
    goto LABEL_235;
  }
  int v48 = v181;
  int v179 = a14;
  uint64_t v183 = v24;
  if (v181 == 1)
  {
    if (a10)
    {
      uint64_t v68 = 0;
      __int16 v69 = (unsigned int *)(a9 + 40);
      unsigned __int16 v70 = __s1;
      while (*(v69 - 2) <= *(_DWORD *)(a11 + 32))
      {
        if (*(v69 - 5) == 21) {
          unsigned __int16 v70 = (char *)(*(void *)(a12 + 8) + *v69);
        }
        v69 += 16;
        if (a10 == ++v68)
        {
          int __s1 = v70;
          unsigned int v71 = a10;
          goto LABEL_79;
        }
      }
      int __s1 = v70;
      unsigned int v71 = (unsigned __int16)v68;
    }
    else
    {
      unsigned int v71 = 0;
    }
LABEL_79:
    uint64_t v72 = *(void **)(a8 + 24);
    MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
    int v74 = cstdlib_strlen(MarkerArgStr);
    info = (uint64_t *)heap_Calloc(v72, 1, (v74 + 1));
    if (!info)
    {
      uint64_t v26 = 2350915594;
      a14 = v179;
      goto LABEL_235;
    }
    uint64_t v75 = marker_getMarkerArgStr(1u);
    __sa = (char *)info;
    cstdlib_strcpy((char *)info, v75);
    mbs_normalize((uint64_t)v212);
    int v76 = *(_DWORD *)(a11 + 32);
    int v77 = *(_DWORD *)(a9 + 32);
    uint64_t v78 = heap_Calloc(*(void **)(a8 + 24), 1, 264);
    if (!v78)
    {
      LODWORD(info) = 0;
      uint64_t v26 = 2350915594;
      a14 = v179;
      uint64_t v24 = v183;
      goto LABEL_232;
    }
    uint64_t v49 = v78;
    unsigned __int16 v79 = v76 - v77;
    if (v71 >= a10)
    {
      LODWORD(v50) = 0;
      uint64_t v51 = a2;
      int v90 = *(_DWORD *)(a2 + 8);
      uint64_t v83 = __s1;
      if (v90 <= 0)
      {
        a14 = v179;
        uint64_t v24 = v183;
        goto LABEL_118;
      }
      LOWORD(v90) = 2 * v90;
      __int16 v92 = v76 - v77;
      a14 = v179;
    }
    else
    {
      unint64_t v50 = 0;
      int v80 = (unsigned __int16)(v76 - v77);
      size_t v81 = (unsigned int *)(a9 + ((unint64_t)v71 << 6) + 40);
      unint64_t v82 = a10 - (unint64_t)v71;
      unsigned __int16 v177 = 10;
      unsigned __int16 v170 = v79;
      LOWORD(v189) = v79;
      uint64_t v51 = a2;
      uint64_t v83 = __s1;
      int v174 = v79;
      do
      {
        if (v80 + 2 * *(_DWORD *)(v51 + 8) < (unsigned __int16)(*((_WORD *)v81 - 4) - *(_WORD *)(a9 + 32))) {
          break;
        }
        if (*(v81 - 5) == 21)
        {
          __s1a = (char *)v50;
          uint64_t v84 = v49;
          uint64_t v85 = v83;
          if (cstdlib_strcmp(v83, (const char *)(*(void *)(a12 + 8) + *v81)))
          {
            uint64_t v86 = *v81;
            int v87 = (int)__s1a;
            uint64_t v49 = v84;
            if ((unsigned __int16)__s1a >= v177)
            {
              uint64_t v172 = *v81;
              uint64_t v190 = v84;
              uint64_t v88 = heap_Realloc(*(uint64_t **)(a8 + 24), v84, 24 * v177 + 264);
              if (!v88)
              {
                LODWORD(info) = 0;
                uint64_t v26 = 2350915594;
                goto LABEL_225;
              }
              v177 += 10;
              uint64_t v49 = v88;
              int v87 = (int)__s1a;
              int v80 = v174;
              uint64_t v86 = v172;
            }
            else
            {
              int v80 = v174;
            }
            uint64_t v89 = v49 + 24 * (unsigned __int16)v87;
            *(void *)uint64_t v89 = v85;
            uint64_t v83 = (const char *)(*(void *)(a12 + 8) + v86);
            *(void *)(v89 + 8) = v83;
            *(_WORD *)(v89 + 16) = v189;
            int v189 = *(v81 - 2) - *(_DWORD *)(a9 + 32);
            *(_WORD *)(v89 + 18) = v189;
            unint64_t v50 = (v87 + 1);
            uint64_t v51 = a2;
          }
          else
          {
            uint64_t v51 = a2;
            uint64_t v49 = v84;
            uint64_t v83 = v85;
            unint64_t v50 = (unint64_t)__s1a;
            int v80 = v174;
          }
        }
        v81 += 16;
        --v82;
      }
      while (v82);
      int v90 = *(_DWORD *)(v51 + 8);
      int v91 = v80 + 2 * v90;
      __int16 v92 = v189;
      a14 = v179;
      if (v91 <= (unsigned __int16)v189) {
        goto LABEL_105;
      }
      if ((unsigned __int16)v50 >= v177)
      {
        int v162 = v50;
        int v163 = v83;
        uint64_t v190 = v49;
        uint64_t v164 = heap_Realloc(*(uint64_t **)(a8 + 24), v49, 24 * v177 + 264);
        if (!v164)
        {
          LODWORD(info) = 0;
          uint64_t v26 = 2350915594;
          goto LABEL_226;
        }
        int v90 = 2 * *(_DWORD *)(a2 + 8);
        uint64_t v49 = v164;
        uint64_t v51 = a2;
        uint64_t v83 = v163;
        LODWORD(v50) = v162;
        unsigned __int16 v79 = v170;
        __int16 v92 = v189;
      }
      else
      {
        LOWORD(v90) = 2 * v90;
        unsigned __int16 v79 = v170;
      }
    }
    uint64_t v95 = v49 + 24 * (unsigned __int16)v50;
    *(void *)uint64_t v95 = v83;
    *(void *)(v95 + 8) = 0;
    *(_WORD *)(v95 + 16) = v92;
    *(_WORD *)(v95 + 18) = v90 + v79;
    unint64_t v50 = (v50 + 1);
LABEL_105:
    if ((_WORD)v50)
    {
      int v96 = 0;
      int v97 = (unsigned __int16)v50;
      uint64_t v191 = v49;
      do
      {
        uint64_t v98 = v96 + 1;
        if ((int)v98 < v97 && (uint64_t v99 = (void *)(v49 + 24 * v98), (v100 = (const char *)v99[1]) != 0))
        {
          int __s1b = (char *)v50;
          int __dst = (const char **)(v49 + 24 * v96);
          if (cstdlib_strcmp(*__dst, v100))
          {
            ++v96;
            uint64_t v51 = a2;
            uint64_t v49 = v191;
            unint64_t v50 = (unint64_t)__s1b;
          }
          else
          {
            cstdlib_memmove(__dst, v99, (int)(24 * (v97 + (~(_WORD)v96 | 0xFFFF0000))));
            unint64_t v50 = (__s1b - 1);
            uint64_t v51 = a2;
            uint64_t v49 = v191;
          }
        }
        else
        {
          ++v96;
        }
        int v97 = (unsigned __int16)v50;
      }
      while (v96 < (unsigned __int16)v50);
      a14 = v179;
    }
    else
    {
      LOWORD(v50) = 0;
    }
    uint64_t v24 = v183;
    int v48 = 1;
    goto LABEL_117;
  }
  mbs_normalize((uint64_t)v212);
  __sa = 0;
  uint64_t v49 = 0;
  LOWORD(v50) = 0;
  uint64_t v51 = a2;
LABEL_117:
  int v90 = *(_DWORD *)(v51 + 8);
LABEL_118:
  uint64_t v190 = v49;
  if (v90 < 1)
  {
    uint64_t v106 = v195;
    goto LABEL_218;
  }
  uint64_t v101 = 0;
  int v102 = a4;
  if ((_WORD)v50) {
    BOOL v103 = v48 == 1;
  }
  else {
    BOOL v103 = 0;
  }
  char v104 = !v103;
  char v173 = v104;
  uint64_t v169 = 24 * (unsigned __int16)v50;
  int __dsta = 1;
  uint64_t v105 = v188;
  uint64_t v106 = v195;
  do
  {
    char v217 = 0;
    if (v102 < 1) {
      goto LABEL_215;
    }
    int v107 = 0;
    uint64_t v178 = (4 * v101);
    unint64_t v171 = 2 * v101;
    int v108 = 1;
    uint64_t v187 = v101;
    do
    {
      int v109 = v108 + v101;
      if (v108 + (int)v101 > *(_DWORD *)(v51 + 8)) {
        break;
      }
      uint64_t v110 = v109 - 1;
      if (*(unsigned char *)(v105 + v110) != 33 || *(unsigned char *)(v24 + v110) == 1 || *(unsigned char *)(v22 + v110) == 1) {
        break;
      }
      int __s1c = v107;
      uint64_t v111 = v101;
      if (mbs2sjis(v51, v101, v108, (uint64_t)v219, 80) == -1
        || mbs2sjis((uint64_t)v212, v111, v108, (uint64_t)v216, 80) == -1)
      {
LABEL_227:
        uint64_t v26 = 0;
LABEL_228:
        LODWORD(info) = 0;
        a14 = v179;
        goto LABEL_230;
      }
      uint64_t v105 = v188;
      if (!*(unsigned char *)(v212[0] + v178))
      {
        uint64_t v51 = a2;
        uint64_t v101 = v187;
        break;
      }
      int v175 = v108;
      int v112 = __sa;
      if (v181 != 1) {
        int v112 = "normal";
      }
      if (v173)
      {
        uint64_t v113 = v112;
      }
      else
      {
        uint64_t v114 = 0;
        uint64_t v115 = v190;
        while (v171 < *(unsigned __int16 *)(v190 + v114 + 16) || 2 * v109 > *(unsigned __int16 *)(v190 + v114 + 18))
        {
          v114 += 24;
          if (v169 == v114)
          {
            uint64_t v24 = v183;
            uint64_t v113 = __sa;
            goto LABEL_151;
          }
        }
        if (__sa)
        {
          size_t v116 = cstdlib_strlen(__sa);
          if (v116 >= cstdlib_strlen(*(const char **)(v190 + v114)))
          {
            info = (uint64_t *)__sa;
            uint64_t v115 = v190;
          }
          else
          {
            long long v117 = *(uint64_t **)(a8 + 24);
            int v118 = cstdlib_strlen(*(const char **)(v190 + v114));
            info = (uint64_t *)heap_Realloc(v117, (uint64_t)__sa, (v118 + 1));
            uint64_t v115 = v190;
            if (!info)
            {
              uint64_t v26 = 2350915594;
              a14 = v179;
              uint64_t v24 = v183;
              goto LABEL_231;
            }
          }
        }
        else
        {
          info = 0;
        }
        cstdlib_strcpy((char *)info, *(const char **)(v115 + v114));
        uint64_t v113 = (const char *)info;
        uint64_t v24 = v183;
      }
LABEL_151:
      __sa = (char *)v113;
      uint64_t v119 = lookup_JPARSER((uint64_t)&v206, (uint64_t)v216, &v211, &v210, v113);
      if (v119 == -1)
      {
        uint64_t v105 = v188;
        uint64_t v51 = a2;
        if (__s1c)
        {
          int v120 = v218[__dsta++];
          uint64_t v101 = v187;
          if (!v120) {
            break;
          }
          int v108 = v120 - 48;
          int v107 = 1;
          if (v120 - 48 < 0) {
            break;
          }
        }
        else
        {
          int v107 = 0;
          int v108 = v175 + 1;
          uint64_t v101 = v187;
          if (v175 + 1 < 0) {
            break;
          }
        }
        continue;
      }
      CopyOutput_JPARSER(v213, 120, v211, v119, v210);
      if (__s1c)
      {
        if (v218[__dsta]) {
          int v108 = v218[__dsta] - 48;
        }
        else {
          int v108 = a4 + 1;
        }
        ++__dsta;
        uint64_t v51 = a2;
        uint64_t v101 = v187;
      }
      else
      {
        uint64_t v121 = 0;
        uint64_t v122 = v213[0];
        uint64_t v51 = a2;
        uint64_t v101 = v187;
        while (*(unsigned char *)(v213[0] + v121) && *(unsigned char *)(v213[0] + v121) != 44)
          ++v121;
        char v217 = *(unsigned char *)(v213[0] + v121);
        if (!v217) {
          goto LABEL_170;
        }
        uint64_t v123 = 0;
        do
        {
          int v124 = *(unsigned __int8 *)(v122 + v121 + 1 + v123);
          v218[v123++] = v124;
        }
        while (v124);
        if (v123)
        {
          int v108 = v218[0] - 48;
          *(unsigned char *)(v122 + v121) = 0;
          int __dsta = 1;
        }
        else
        {
LABEL_170:
          int __dsta = 1;
          int v108 = a4 + 1;
        }
      }
      if (!*(unsigned char *)v213[0])
      {
        int v107 = 1;
        uint64_t v105 = v188;
        if (v108 < 0) {
          break;
        }
        continue;
      }
      if (*v184) {
        int v125 = v101 + 1;
      }
      else {
        int v125 = v101;
      }
      int v168 = v125;
      if (!cstdlib_strlen(v219))
      {
        uint64_t v26 = 2350915584;
        log_OutPublic(*(void *)(*(void *)(v194 + 32) + 32), *(void *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v126, v127, v128, v129, "empty field");
        goto LABEL_228;
      }
      uint64_t v130 = create_info(0, v219, *(void **)(a8 + 24));
      if (!v130) {
        goto LABEL_227;
      }
      int v167 = v108;
      uint64_t v135 = 0;
      int v176 = v175 - 1;
      *(void *)(v130 + 16) = 0;
      __s1d = (char *)v130;
      uint64_t v136 = v130;
      do
      {
        uint64_t v137 = (const char *)v213[v135];
        if (!v137 || !cstdlib_strlen(v137))
        {
          uint64_t v26 = 2350915584;
          log_OutPublic(*(void *)(*(void *)(v194 + 32) + 32), *(void *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v131, v132, v133, v134, "empty field");
LABEL_222:
          uint64_t v158 = *(void **)(a8 + 24);
          uint64_t v159 = (uint64_t *)__s1d;
          goto LABEL_223;
        }
        uint64_t v138 = create_info((int)v135 + 1, (const char *)v213[v135], *(void **)(a8 + 24));
        uint64_t v26 = v138;
        *(void *)(v136 + 16) = v138;
        if (!v138) {
          goto LABEL_222;
        }
        *(void *)(v138 + 16) = 0;
        ++v135;
        uint64_t v136 = v138;
      }
      while (v135 != 2);
      if (*v214)
      {
        int v143 = (uint64_t *)__s1d;
        if (cstdlib_strlen(v214))
        {
          uint64_t v144 = create_info(3, v214, *(void **)(a8 + 24));
          *(void *)(v26 + 16) = v144;
          if (v144)
          {
            *(void *)(v144 + 16) = 0;
            uint64_t v26 = v144;
            goto LABEL_192;
          }
LABEL_241:
          free_information(v143, *(void **)(a8 + 24));
LABEL_242:
          uint64_t v26 = 0;
LABEL_224:
          LODWORD(info) = 0;
LABEL_225:
          a14 = v179;
LABEL_226:
          uint64_t v24 = v183;
          goto LABEL_230;
        }
LABEL_251:
        uint64_t v26 = 2350915584;
        uint64_t v165 = *(void *)(*(void *)(v194 + 32) + 32);
        uint64_t v166 = *(void *)(v194 + 216);
LABEL_246:
        log_OutPublic(v165, v166, 52003, (uint64_t)"%s%s%s%s", v139, v140, v141, v142, "empty field");
        uint64_t v158 = *(void **)(a8 + 24);
        uint64_t v159 = v143;
LABEL_223:
        free_information(v159, v158);
        goto LABEL_224;
      }
      int v143 = (uint64_t *)__s1d;
LABEL_192:
      uint64_t v145 = 0;
      int __s1e = 4;
      unint64_t v146 = 3;
      do
      {
        uint64_t v147 = *(const char **)&v215[v145];
        if (!*v147 && !**(unsigned char **)&v215[v145 + 8]) {
          break;
        }
        unint64_t v148 = 24 * (v146 / 3);
        if (v148 - 24 == v145)
        {
          if (!add_info_to_table((uint64_t)v143, v168, v176, a5, v195, 0, a3, *(void **)(a8 + 24))) {
            goto LABEL_241;
          }
          if (!cstdlib_strlen(v219))
          {
            uint64_t v26 = 2350915584;
            log_OutPublic(*(void *)(*(void *)(v194 + 32) + 32), *(void *)(v194 + 216), 52003, (uint64_t)"%s%s%s%s", v149, v150, v151, v152, "empty field");
            goto LABEL_224;
          }
          uint64_t v153 = create_info(0, v219, *(void **)(a8 + 24));
          if (!v153) {
            goto LABEL_242;
          }
          int v143 = (uint64_t *)v153;
          *(void *)(v153 + 16) = 0;
          uint64_t v147 = *(const char **)&v215[v145];
          uint64_t v26 = (uint64_t)v143;
          if (!v147)
          {
LABEL_245:
            uint64_t v26 = 2350915584;
            uint64_t v165 = *(void *)(*(void *)(v194 + 32) + 32);
            uint64_t v166 = *(void *)(v194 + 216);
            goto LABEL_246;
          }
LABEL_205:
          if (!cstdlib_strlen(v147)) {
            goto LABEL_245;
          }
          int v156 = __s1e - 3 * (v146 / 3);
          uint64_t v154 = *(const char **)&v215[v145];
          uint64_t v155 = *(void **)(a8 + 24);
LABEL_207:
          uint64_t v157 = create_info(v156, v154, v155);
          *(void *)(v26 + 16) = v157;
          if (!v157) {
            goto LABEL_241;
          }
          *(void *)(v157 + 16) = 0;
          uint64_t v26 = v157;
          goto LABEL_209;
        }
        if (v148 - 8 != v145) {
          goto LABEL_205;
        }
        if (*v147)
        {
          if (!cstdlib_strlen(v147)) {
            goto LABEL_251;
          }
          uint64_t v154 = *(const char **)&v215[v145];
          uint64_t v155 = *(void **)(a8 + 24);
          int v156 = 3;
          goto LABEL_207;
        }
LABEL_209:
        ++v146;
        v145 += 8;
        ++__s1e;
      }
      while (v145 != 928);
      if (!add_info_to_table((uint64_t)v143, v168, v176, a5, v195, 0, a3, *(void **)(a8 + 24))) {
        goto LABEL_241;
      }
      int v107 = 1;
      int v108 = v167;
      uint64_t v24 = v183;
      uint64_t v101 = v187;
      uint64_t v105 = v188;
      uint64_t v51 = a2;
      if (v167 < 0) {
        break;
      }
    }
    while (v108 <= a4);
    int v90 = *(_DWORD *)(v51 + 8);
    a14 = v179;
    uint64_t v106 = v195;
    int v102 = a4;
LABEL_215:
    ++v101;
  }
  while (v101 < v90);
LABEL_218:
  if (*(unsigned char *)(a3 + 136) && !look_up_unknown_word(v51, a3, a5, v106, *(void **)(a8 + 24)))
  {
    uint64_t v26 = 0;
    LODWORD(info) = 0;
  }
  else
  {
    uint64_t v26 = 0;
    LODWORD(info) = 1;
  }
LABEL_230:
  uint64_t v115 = v190;
  if (v190) {
LABEL_231:
  }
    heap_Free(*(void **)(a8 + 24), v115);
LABEL_232:
  if (v181 == 1 && __sa) {
    heap_Free(*(void **)(a8 + 24), (uint64_t)__sa);
  }
LABEL_235:
  mbs_free(v212, *(void **)(a8 + 24));
LABEL_236:
  uint64_t v25 = v188;
LABEL_237:
  heap_Free(*(void **)(a8 + 24), v25);
  heap_Free(*(void **)(a8 + 24), v24);
  heap_Free(*(void **)(a8 + 24), v22);
  heap_Free(*(void **)(a8 + 24), v18);
  heap_Free(*(void **)(a8 + 24), v19);
  heap_Free(*(void **)(a8 + 24), v21);
  for (uint64_t i = 0; i != 120; ++i)
    heap_Free(*(void **)(a8 + 24), v213[i]);
  *a14 = info;
  return v26;
}

uint64_t sapi_prn_tag_conv_replace(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v6 = cstdlib_strlen(__s);
  uint64_t v7 = mbs_create((uint64_t)&v24, v6, __s, *(void **)(a3 + 24));
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v8 = heap_Alloc(*(void *)(a3 + 24), v25);
    if (!v8)
    {
      uint64_t v7 = 2350915594;
      goto LABEL_49;
    }
    if (!mark_tag_state((uint64_t)&v24, v8))
    {
      uint64_t v7 = 2350915601;
      goto LABEL_49;
    }
    if ((int)v25 < 1) {
      goto LABEL_49;
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      unsigned int v11 = mbs_one_char(&v24, v10);
      if (v11 <= 0x20 && ((1 << v11) & 0x100002400) != 0)
      {
        uint64_t v7 = mbs_add_str(a1, (uint64_t)&v24, v10, 1, 0, *(uint64_t **)(a3 + 24));
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_49;
      }
      if ((int)v10 + 15 >= (int)v25) {
        int v13 = v25 - v10;
      }
      else {
        int v13 = 16;
      }
      if (v13 < 1) {
        goto LABEL_42;
      }
      int v14 = 0;
      int v15 = v13 + 1;
      while (mbs_one_char(&v24, (int)v10 + v14) != 30)
      {
        if (v13 == ++v14) {
          goto LABEL_22;
        }
      }
      int v15 = v14 + 1;
LABEL_22:
      int v16 = v15 - 1;
      if (v15 <= 1)
      {
LABEL_30:
        int v17 = v16;
      }
      else
      {
        int v17 = 0;
        while (1)
        {
          unsigned int v18 = mbs_one_char(&v24, (int)v10 + v17);
          if (v18 <= 0x20 && ((1 << v18) & 0x100002400) != 0) {
            break;
          }
          if (v16 == ++v17) {
            goto LABEL_30;
          }
        }
      }
      if (v17 < 1)
      {
LABEL_42:
        uint64_t v21 = v9;
LABEL_43:
        uint64_t v7 = mbs_add_str(a1, (uint64_t)&v24, v10, 1, 0, *(uint64_t **)(a3 + 24));
        uint64_t v9 = v21;
        if ((v7 & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_49;
      }
      while (1)
      {
        if (mbs2sjis((uint64_t)&v24, v10, v17, (uint64_t)__sa, 1000) == -1)
        {
          uint64_t v7 = 2350915840;
          goto LABEL_49;
        }
        if ((int)cstdlib_strlen(__sa) >= 1)
        {
          uint64_t v20 = 0;
          while ((__sa[v20] & 0xDFu) - 91 >= 0xFFFFFFE6)
          {
            if (++v20 >= (int)cstdlib_strlen(__sa)) {
              goto LABEL_45;
            }
          }
          goto LABEL_39;
        }
        if (v9 == 1) {
          break;
        }
LABEL_39:
        LODWORD(v9) = 0;
        uint64_t v21 = 0;
        if (v17-- < 2) {
          goto LABEL_43;
        }
      }
LABEL_45:
      uint64_t v7 = mbs_add_str(a1, (uint64_t)&v24, v10, v17, 0, *(uint64_t **)(a3 + 24));
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_49;
      }
      LODWORD(v10) = v10 - 1 + v17;
      uint64_t v9 = 1;
LABEL_11:
      uint64_t v10 = (v10 + 1);
      if ((int)v10 >= (int)v25)
      {
LABEL_49:
        heap_Free(*(void **)(a3 + 24), v8);
        mbs_free(&v24, *(void **)(a3 + 24));
        return v7;
      }
    }
  }
  return v7;
}

uint64_t jparser_codeer(uint64_t result, int a2, unsigned __int8 *a3, uint64_t a4)
{
  __int16 v4 = 0;
  int v5 = 0;
  LOBYTE(v6) = result;
  do
  {
    int v7 = *a3++;
    int v8 = v5 + v7;
    int v6 = (char)(v6 + result);
    if (v6 < 16)
    {
      int v12 = v8 << result;
    }
    else
    {
      char v9 = result + 16 - v6;
      int v10 = v8 << v9;
      *(unsigned char *)(a4 + v4++) = BYTE1(v10);
      char v11 = result - v9;
      int v12 = (unsigned __int16)v10 << v11;
      LOBYTE(v6) = v11 + 8;
    }
    int v5 = (unsigned __int16)v12;
    --a2;
  }
  while ((_BYTE)a2);
  *(_WORD *)(a4 + v4) = bswap32(v12 << (16 - v6)) >> 16;
  return result;
}

uint64_t jparser_ClassOpen(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v7 = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = heap_Calloc(*(void **)(v7 + 8), 1, 8);
    if (v5)
    {
      int v6 = (void *)v5;
      uint64_t result = 0;
      *int v6 = *(void *)(v7 + 8);
      *(void *)a3 = v6;
      *(_DWORD *)(a3 + 8) = 19024;
    }
    else
    {
      return 2350915594;
    }
  }
  return result;
}

uint64_t jparser_ClassClose(void **a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 19024, 8) & 0x80000000) != 0) {
    return 2350915592;
  }
  if (a1) {
    heap_Free(*a1, (uint64_t)a1);
  }
  return 0;
}

uint64_t jparser_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9, int a10, uint64_t a11)
{
  uint64_t v34 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v34);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v20 = 2350915840;
  if ((safeh_HandleCheck(a3, a4, 19024, 8) & 0x80000000) != 0) {
    return 2350915592;
  }
  int v21 = 0;
  for (uint64_t i = 0; i != 1; ++i)
  {
    uint64_t v23 = *(void *)(get_a_rule(i) + 72);
    if (v23 > v21) {
      int v21 = v23;
    }
  }
  if (v21) {
    return 2350907394;
  }
  uint64_t v24 = (void *)heap_Alloc(*(void *)(v34 + 8), 232);
  if (!v24) {
    return 2350915594;
  }
  uint64_t v25 = (uint64_t)v24;
  cstdlib_memset(v24, 0, 0xE8uLL);
  *(void *)(v25 + 8) = a1;
  *(void *)(v25 + 16) = a2;
  uint64_t v26 = v34;
  *(void *)(v25 + 24) = *(void *)(v34 + 8);
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 216) = a11;
  *(void *)(v25 + 224) = 0;
  *(void *)(v25 + 184) = a6;
  *(void *)(v25 + 192) = a7;
  *(void *)(v25 + 200) = a8;
  *(_WORD *)(v25 + 208) = a9;
  *(_DWORD *)(v25 + 212) = a10;
  *(void *)(v25 + 48) = get_number_of_symbol((uint64_t)&SF_symbol_file, "SENTENCE");
  uint64_t number_of_symbol = get_number_of_symbol((uint64_t)&SF_symbol_file, &byte_264565644);
  *(void *)(v25 + 56) = number_of_symbol;
  if ((number_of_symbol & 0x8000000000000000) == 0)
  {
    uint64_t v28 = 0;
    for (uint64_t j = (char *)&unk_2645659D0; ; j += 64)
    {
      uint64_t v30 = get_number_of_symbol((uint64_t)&SF_symbol_file, j - 664);
      *(void *)(v25 + v28 + 64) = v30;
      if (v30 == -1) {
        break;
      }
      uint64_t v31 = get_number_of_symbol((uint64_t)&SF_symbol_file, j);
      *(void *)(v25 + v28 + 144) = v31;
      if (v31 == -1) {
        break;
      }
      uint64_t v32 = get_number_of_symbol((uint64_t)&SF_symbol_file, j - 344);
      *(void *)(v25 + v28 + 104) = v32;
      if (v32 == -1) {
        break;
      }
      v28 += 8;
      if (v28 == 24)
      {
        uint64_t v20 = 0;
        *a5 = v25;
        return v20;
      }
    }
  }
  heap_Free(*(void **)(v34 + 8), v25);
  return v20;
}

uint64_t jparser_ObjClose(uint64_t *a1)
{
  uint64_t result = 2350915592;
  if (a1)
  {
    if (*a1)
    {
      heap_Free(*(void **)(*a1 + 24), *a1);
      uint64_t result = 0;
      *a1 = 0;
    }
  }
  return result;
}

uint64_t jparser_Parse(uint64_t a1, char *a2, uint64_t a3, void *a4, int a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v33 = 0;
  uint64_t v11 = 2350915592;
  if (a1)
  {
    *(void *)(a1 + 224) = a6;
    v34[0] = 0;
    v34[1] = 0;
    long long v17 = *(_OWORD *)(a1 + 208);
    v31[12] = *(_OWORD *)(a1 + 192);
    v31[13] = v17;
    uint64_t v32 = a6;
    long long v18 = *(_OWORD *)(a1 + 144);
    v31[8] = *(_OWORD *)(a1 + 128);
    v31[9] = v18;
    long long v19 = *(_OWORD *)(a1 + 176);
    v31[10] = *(_OWORD *)(a1 + 160);
    v31[11] = v19;
    long long v20 = *(_OWORD *)(a1 + 80);
    v31[4] = *(_OWORD *)(a1 + 64);
    v31[5] = v20;
    long long v21 = *(_OWORD *)(a1 + 112);
    v31[6] = *(_OWORD *)(a1 + 96);
    v31[7] = v21;
    long long v22 = *(_OWORD *)(a1 + 16);
    v31[0] = *(_OWORD *)a1;
    v31[1] = v22;
    long long v23 = *(_OWORD *)(a1 + 48);
    v31[2] = *(_OWORD *)(a1 + 32);
    v31[3] = v23;
    uint64_t v24 = sapi_prn_tag_conv_replace((uint64_t)v34, a2, (uint64_t)v31);
    if ((v24 & 0x80000000) != 0)
    {
      uint64_t v28 = v24;
      mbs_free(v34, *(void **)(a1 + 24));
      return v28;
    }
    else
    {
      uint64_t v25 = iso_parse_fdp_bas(a1, (uint64_t)&Inifile_global, (uint64_t)v34, CT_connection_table, a5, &v33, a7, a8, a9, a10, a11);
      if ((v25 & 0x80000000) != 0)
      {
        uint64_t v29 = v25;
        mbs_free(v34, *(void **)(a1 + 24));
        return v29;
      }
      else
      {
        uint64_t v26 = v33;
        mbs_free(v34, *(void **)(a1 + 24));
        if (v26)
        {
          uint64_t v27 = v33;
          if (*(_DWORD *)v33 == 1)
          {
            *a4 = *(void *)(v33 + 8);
            heap_Free(*(void **)(a1 + 24), v27);
            return 0;
          }
          else
          {
            heap_Free(*(void **)(a1 + 24), v33);
            return 2350915840;
          }
        }
        else
        {
          return 2350915594;
        }
      }
    }
  }
  return v11;
}

uint64_t jparser_FreeTree(uint64_t a1, void **a2)
{
  if (a1) {
    return jpe_FreeTree(*a2, *(void **)(a1 + 24));
  }
  else {
    return 2350915592;
  }
}

uint64_t jpj_sysdct_CharLookup(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  __c[0] = 0;
  uint64_t v59 = 0;
  unsigned __int16 v58 = 0;
  *(_DWORD *)a5 = 0;
  int v13 = (void *)(a5 + 4);
  cstdlib_memset((void *)(a5 + 4), 0, 0x41uLL);
  *(_WORD *)(a5 + 70) = 0;
  *(_DWORD *)(a5 + 72) = 0;
  cstdlib_memset((void *)(a5 + 76), 0, 0x101uLL);
  *(_WORD *)(a5 + 334) = 0;
  unsigned __int16 v14 = cstdlib_strlen(a4);
  if ((v14 & 0xFFC0) != 0) {
    size_t v15 = 64;
  }
  else {
    size_t v15 = v14;
  }
  cstdlib_memmove(__dst, a4, v15);
  __dst[v15] = 0;
  if (!v15)
  {
    int v17 = 0;
    do
    {
      size_t v18 = (unsigned __int16)v17;
      int v19 = a4[(unsigned __int16)v17++];
    }
    while (v19 == 32);
    cstdlib_memmove(v13, a4, v18);
    return 0;
  }
  if (v15 > a6) {
    __dst[a6] = 0;
  }
  if (__dst[0] > 0x7Eu)
  {
    __int16 v16 = 2;
    *(_DWORD *)a5 = 2;
    cstdlib_memmove(v13, __dst, 2uLL);
    *(unsigned char *)(a5 + 6) = 0;
  }
  else
  {
    *(_DWORD *)a5 = 3;
    __int16 v16 = 1;
    cstdlib_memmove(v13, __dst, 1uLL);
    *(unsigned char *)(a5 + 5) = 0;
  }
  *(_WORD *)(a5 + 70) = v16;
  if (!*(_DWORD *)(a3 + 28))
  {
    *(void *)&__c[1] = 0;
    uint64_t v28 = lookup_JPARSER(a3, (uint64_t)v13, (const char **)&__c[1], __c, "normal");
    if (v28 != -1)
    {
      uint64_t v29 = v28;
      cstdlib_memmove((void *)(a5 + 76), *(const void **)&__c[1], v28);
      *(unsigned char *)(a5 + v29 + 76) = 0;
      *(_WORD *)(a5 + 334) = v29;
      uint64_t v30 = cstdlib_strchr((char *)(a5 + 76), __c[0]);
      if (v30)
      {
        *uint64_t v30 = 0;
        uint64_t v35 = v30 + 1;
        int v36 = cstdlib_strchr(v30 + 1, __c[0]);
        if (v36)
        {
          *int v36 = 0;
          unsigned __int16 v37 = cstdlib_strlen(v35);
          *(_WORD *)(a5 + 334) = v37;
          cstdlib_memmove((void *)(a5 + 76), v35, v37);
          *(unsigned char *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
LABEL_27:
          uint64_t v20 = 0;
          goto LABEL_28;
        }
        uint64_t v39 = 1812;
      }
      else
      {
        uint64_t v39 = 1813;
      }
      uint64_t v20 = 2350915584;
      uint64_t v40 = *(void *)(a1 + 32);
      uint64_t v41 = a2;
      goto LABEL_41;
    }
    *(_DWORD *)a5 = 0;
    goto LABEL_27;
  }
  unsigned __int16 v58 = 0;
  uint64_t v20 = (*(uint64_t (**)(void, void, const char *, void *, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(void *)a3 + 96))(*(void *)(a3 + 8), *(void *)(a3 + 16), "char", v13, &v59, &v58, __c);
  if ((v20 & 0x80000000) != 0 || !v58) {
    goto LABEL_37;
  }
  __s = 0;
  int v56 = 0;
  *(_OWORD *)&__c[1] = 0u;
  int64x2_t v61 = 0u;
  getDictSolutionJPJ(v58, v59, __c[0], (const char **)&__s, (_WORD *)&v56 + 1, "normal", 4, &v56, &__c[1]);
  uint64_t v25 = *(const char **)&__c[9];
  uint64_t v54 = (const char *)v61.i64[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&__c[1]), (int32x4_t)vceqzq_s64(v61)))) & 1) != 0
    || !HIWORD(v56))
  {
    log_OutPublic(*(void *)(a1 + 32), a2, 1817, 0, v21, v22, v23, v24, v52);
    *(_DWORD *)a5 = 0;
  }
  else
  {
    BOOL v27 = 1;
    if (**(unsigned char **)&__c[1])
    {
      uint64_t v53 = *(const char **)&__c[9];
      int v26 = cstdlib_strcmp(*(const char **)&__c[1], "1");
      uint64_t v25 = v53;
      if (v26) {
        BOOL v27 = 0;
      }
    }
    if (*v25)
    {
      int v38 = cstdlib_strcmp(v25, "1");
      if (a7 == 1)
      {
        if (v38) {
          goto LABEL_37;
        }
      }
    }
    if (v27)
    {
      if (*__s == __c[0])
      {
LABEL_37:
        *(_DWORD *)a5 = 0;
        return v20;
      }
      size_t v47 = cstdlib_strlen(__s);
      cstdlib_memmove((void *)(a5 + 76), __s, v47);
      *(unsigned char *)(a5 + v47 + 76) = 0;
      *(_WORD *)(a5 + 334) = v47;
      int v48 = cstdlib_strchr((char *)(a5 + 76), __c[0]);
      if (v48)
      {
        *int v48 = 0;
        uint64_t v49 = v48 + 1;
        unint64_t v50 = cstdlib_strchr(v48 + 1, __c[0]);
        if (v50)
        {
          *unint64_t v50 = 0;
          unsigned __int16 v51 = cstdlib_strlen(v49);
          *(_WORD *)(a5 + 334) = v51;
          size_t v44 = v51;
          char v45 = (void *)(a5 + 76);
          uint64_t v46 = v49;
          goto LABEL_48;
        }
        uint64_t v20 = 2350915584;
        uint64_t v40 = *(void *)(a1 + 32);
        uint64_t v41 = a2;
        uint64_t v39 = 1812;
      }
      else
      {
        uint64_t v20 = 2350915584;
        uint64_t v40 = *(void *)(a1 + 32);
        uint64_t v41 = a2;
        uint64_t v39 = 1813;
      }
LABEL_41:
      log_OutPublic(v40, v41, v39, 0, v31, v32, v33, v34, v52);
      return v20;
    }
    if (*v54)
    {
      unsigned __int16 v43 = cstdlib_strlen(v54);
      *(_WORD *)(a5 + 334) = v43;
      size_t v44 = v43;
      char v45 = (void *)(a5 + 76);
      uint64_t v46 = v54;
LABEL_48:
      cstdlib_memmove(v45, v46, v44);
      *(unsigned char *)(a5 + *(unsigned __int16 *)(a5 + 334) + 76) = 0;
    }
  }
LABEL_28:
  if (*(_DWORD *)a5 && *(unsigned char *)(a5 + 76) == 35)
  {
    *(unsigned char *)(a5 + 76) = cstdlib_atoi((unsigned __int8 *)(a5 + 77));
    *(unsigned char *)(a5 + 77) = 0;
    *(_WORD *)(a5 + 334) = 1;
  }
  return v20;
}

uint64_t DoJPJSpell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!a5) {
    return 0;
  }
  uint64_t v16 = 0;
  for (unsigned __int16 i = 0; i < a5; v16 = i)
  {
    memset(v29, 0, sizeof(v29));
    uint64_t v21 = jpj_sysdct_CharLookup(a1, a2, a3, (const char *)(a4 + i), (uint64_t)v29, 0x16u, a11);
    if ((v21 & 0x80000000) != 0) {
      break;
    }
    if ((LODWORD(v29[0]) - 2) > 3)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[UTOI] (utoi position %d len %d not in dict", v18, v19, v20, v16);
    }
    else
    {
      size_t v22 = (unsigned __int16)(cstdlib_strlen((const char *)&v29[4] + 12) + 3);
      uint64_t v23 = (char *)heap_Alloc(*(void *)(a1 + 8), v22);
      if (!v23) {
        return 2350915594;
      }
      uint64_t v24 = v23;
      cstdlib_memset(v23, 0, v22);
      if (i)
      {
        cstdlib_strcpy(v24, (const char *)&v29[4] + 12);
      }
      else
      {
        cstdlib_strcpy(v24, " ");
        cstdlib_strcat(v24, (const char *)&v29[4] + 12);
      }
      cstdlib_strcat(v24, " ");
      unsigned __int16 v25 = cstdlib_strlen(v24);
      uint64_t v21 = bed_Insert(a6, v24, v25);
      if ((v21 & 0x80000000) != 0)
      {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
        return v21;
      }
      heap_Free(*(void **)(a1 + 8), (uint64_t)v24);
    }
    __int16 v26 = cstdlib_strlen((const char *)v29 + 4);
    if (v26) {
      i += v26;
    }
    else {
      unsigned __int16 i = a5;
    }
  }
  return v21;
}

uint64_t DoJPJLatin(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, char **a5)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v12, 0, sizeof(v12));
  uint64_t v7 = jpj_sysdct_CharLookup(a1, a2, a3, a4, (uint64_t)v12, 0x16u, 0);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = cstdlib_strlen((const char *)&v12[4] + 12);
    int v10 = (char *)heap_Alloc(v8, (v9 + 3));
    *a5 = v10;
    if (v10) {
      cstdlib_strcpy(v10, (const char *)&v12[4] + 12);
    }
  }
  return v7;
}

size_t getDictSolutionJPJ(unsigned int a1, uint64_t a2, int a3, const char **a4, _WORD *a5, const char *a6, int a7, _WORD *a8, void *a9)
{
  int v10 = a4;
  int v12 = a9;
  uint64_t v38 = *MEMORY[0x263EF8340];
  memset(__dst, 0, sizeof(__dst));
  memset(v36, 0, sizeof(v36));
  if (!a1)
  {
    LOWORD(v16) = 0;
    unsigned __int16 v27 = 0;
    __int16 v26 = __dst;
    goto LABEL_40;
  }
  uint64_t v29 = a8;
  __int16 v31 = 0;
  unint64_t v16 = 0;
  unsigned __int16 v32 = 0;
  BOOL v33 = a7 != 0;
  unint64_t v34 = a1;
  do
  {
    memset(__src, 0, sizeof(__src));
    __int16 v17 = cstdlib_strlen(*(const char **)(a2 + 8 * v16));
    *a5 = v17;
    uint64_t v18 = *(char **)(a2 + 8 * v16);
    if (v17) {
      BOOL v19 = a7 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19)
    {
      int v22 = 0;
      unsigned __int16 v23 = 0;
      unsigned __int16 v24 = 0;
      while (1)
      {
        unsigned __int16 v25 = *(char **)(a2 + 8 * v16);
        if (!*((void *)__src + v23)) {
          *((void *)__src + v23) = &v25[v24];
        }
        if (a7 == 1 && !v24 && *v25 != a3) {
          break;
        }
        if (v25[v24] == a3)
        {
          ++v23;
          v25[v24] = 0;
        }
        ++v24;
        if (v22) {
          goto LABEL_30;
        }
        if (v23 + 1 == a7)
        {
          uint64_t v18 = (char *)(*(void *)(a2 + 8 * v16) + v24);
LABEL_30:
          int v22 = 1;
          goto LABEL_31;
        }
        int v22 = 0;
LABEL_31:
        BOOL v20 = a7 != v23;
        if ((unsigned __int16)*a5 <= v24 || a7 == v23) {
          goto LABEL_9;
        }
      }
      unsigned __int16 v24 = 1;
      goto LABEL_30;
    }
    unsigned __int16 v24 = 0;
    BOOL v20 = v33;
LABEL_9:
    if (v20) {
      *a5 = 0;
    }
    if (cstdlib_strlen(v18))
    {
      if (v18)
      {
        do
        {
          uint64_t v21 = cstdlib_strchr(v18, 44);
          if (!cstdlib_strlen(v18)) {
            break;
          }
          if (v21) {
            *uint64_t v21 = 0;
          }
          if (!cstdlib_strcmp(v18, a6))
          {
            __int16 v26 = v36;
            cstdlib_memcpy(v36, __src, 0x20uLL);
            unsigned __int16 v27 = v24;
            int v12 = a9;
            int v10 = a4;
            a8 = v29;
            goto LABEL_40;
          }
          uint64_t v18 = v21 + 1;
        }
        while (v21);
      }
    }
    else
    {
      cstdlib_memcpy(__dst, __src, 0x20uLL);
      __int16 v31 = v16;
      unsigned __int16 v32 = v24;
    }
    ++v16;
  }
  while (v16 < v34);
  __int16 v26 = __dst;
  int v12 = a9;
  int v10 = a4;
  a8 = v29;
  LOWORD(v16) = v31;
  unsigned __int16 v27 = v32;
LABEL_40:
  *a8 = v16;
  *int v10 = (const char *)(*(void *)(a2 + 8 * (unsigned __int16)v16) + v27);
  cstdlib_memcpy(v12, v26, 0x20uLL);
  size_t result = cstdlib_strlen(*v10);
  *a5 = result;
  return result;
}

uint64_t lookup_JPARSER(uint64_t a1, uint64_t a2, const char **a3, unsigned __int8 *a4, const char *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  size_t v15 = 0;
  unsigned __int16 v14 = 0;
  if (*(_DWORD *)(a1 + 28))
  {
    unsigned __int16 v16 = 0;
    if (((*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, void))(*(void *)a1 + 152))(*(void *)(a1 + 8), *(void *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24)) & 0x80000000) == 0&& v16)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 1, &v13, &v17);
      return v14;
    }
    if (*(_DWORD *)(a1 + 28) == 1)
    {
      unsigned __int16 v16 = 0;
      int v12 = (*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *))(*(void *)a1 + 96))(*(void *)(a1 + 8), *(void *)(a1 + 16), "char", a2, &v15, &v16, a4);
      uint64_t result = -1;
      if ((v12 & 0x80000000) == 0 && v16)
      {
        long long v17 = 0u;
        long long v18 = 0u;
        getDictSolutionJPJ(v16, (uint64_t)v15, *a4, a3, &v14, a5, 4, &v13, &v17);
        return v14;
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    unsigned __int16 v16 = -1;
    int v10 = (*(uint64_t (**)(void, void, const char *, uint64_t, const char ***, unsigned __int16 *, unsigned __int8 *, void))(*(void *)a1 + 152))(*(void *)(a1 + 8), *(void *)(a1 + 16), "word", a2, &v15, &v16, a4, *(unsigned __int8 *)(a1 + 24));
    uint64_t result = -1;
    if ((v10 & 0x80000000) == 0 && v16 == 1)
    {
      LOWORD(result) = cstdlib_strlen(*v15);
      *a3 = *v15;
      return (unsigned __int16)result;
    }
  }
  return result;
}

uint64_t FillFields(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5)
{
  if (a2)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    for (unsigned __int16 i = (unsigned char **)(result + 8); ; ++i)
    {
      uint64_t v8 = (a4 - v6);
      if (a4 <= v6) {
        break;
      }
      uint64_t v9 = 0;
      while (1)
      {
        int v10 = *(unsigned __int8 *)(a3 + v6 + v9);
        if (v10 == a5) {
          break;
        }
        *(unsigned char *)(*(void *)(result + 8 * v5) + v9++) = v10;
        if (v8 == v9) {
          goto LABEL_11;
        }
      }
      *(unsigned char *)(*(void *)(result + 8 * v5) + v9) = 0;
      v6 += v9 + 1;
      if (++v5 == a2) {
        return result;
      }
    }
    uint64_t v8 = 0;
LABEL_11:
    *(unsigned char *)(*(void *)(result + 8 * (unsigned __int16)v5) + v8) = 0;
    for (uint64_t j = 1; j != 5; ++j)
    {
      if (v5 + j >= (unint64_t)a2) {
        break;
      }
      int v12 = *i++;
      *int v12 = 0;
    }
  }
  return result;
}

uint64_t virtual_fseek(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 0:
      goto LABEL_6;
    case 1:
      a3 += *a2;
      goto LABEL_6;
    case 2:
      a3 = *(void *)(a1 + 8) + ~a3;
LABEL_6:
      uint64_t result = 0;
      *a2 = a3;
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t virtual_getc(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 < 0 || v2 >= a1[1]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned __int8 *)(*a1 + v2);
  *a2 = v2 + 1;
  return result;
}

uint64_t xcode_Utf16leToWin932(uint64_t a1, unsigned __int16 *a2, unsigned int a3, uint64_t a4, _WORD *a5, uint64_t a6)
{
  uint64_t v6 = 2370838535;
  if (a2 && a4 && a5)
  {
    if (a3)
    {
      int v10 = a2;
      int v12 = 0;
      uint64_t v13 = a3;
      while ((unsigned __int16)*a5 > (unsigned __int16)v12)
      {
        unsigned int v14 = *v10++;
        v12 += XLIT_chUnicodeWideToSJIS(v14, (char *)(a4 + (unsigned __int16)v12), a1, a6);
        if (!--v13) {
          goto LABEL_10;
        }
      }
      return 2370838537;
    }
    else
    {
      LOWORD(v12) = 0;
LABEL_10:
      uint64_t v6 = 0;
      *a5 = v12;
    }
  }
  return v6;
}

uint64_t mas_list_extract_min(uint64_t a1, uint64_t a2)
{
  while (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1;
    a2 = *(void *)(a2 + 8);
    a1 = v2;
    if (!a2)
    {
      uint64_t result = *(void *)(v3 + 8);
      *(void *)(v3 + 8) = *(void *)(v2 + 16);
      return result;
    }
  }
  return 0;
}

void *mas_list_insert(void *result, void *a2)
{
  if (result)
  {
    if (a2)
    {
      if (result[5] <= a2[5]) {
        a2[1] = mas_list_insert();
      }
      else {
        a2[2] = mas_list_insert();
      }
      return a2;
    }
    else
    {
      result[1] = 0;
      result[2] = 0;
    }
  }
  return result;
}

void *mas_list_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (void *)heap_Alloc(a7, 48);
  if (result)
  {
    *uint64_t result = a1;
    result[1] = a2;
    result[2] = a3;
    result[3] = a4;
    result[4] = a6;
    result[5] = a5;
  }
  return result;
}

uint64_t lattice_word_create(uint64_t a1)
{
  uint64_t result = heap_Alloc(a1, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(void *)(result + 536) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 552) = 0;
    *(void *)(result + 568) = 0;
    *(void *)(result + 560) = 0;
  }
  return result;
}

uint64_t lattice_word_print_all(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t appended = ssftstring_Reserve(a3, 64);
  if ((appended & 0x80000000) != 0) {
    return appended;
  }
  uint64_t v16 = ssftstring_Clear(a3);
  if ((v16 & 0x80000000) == 0 && a5 >= -1)
  {
    uint64_t v17 = 0;
    uint64_t v31 = (a5 + 2);
    uint64_t v32 = a4;
    uint64_t v33 = a2;
    while (1)
    {
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[FDP] x=%d", v13, v14, v15, v17);
      uint64_t v18 = *(void *)(a4 + 8 * v17);
      if (v18) {
        break;
      }
LABEL_25:
      ++v17;
      a4 = v32;
      a2 = v33;
      if (v17 == v31) {
        return v16;
      }
    }
    int v19 = 0;
    while (1)
    {
      uint64_t v20 = 560;
      if (a6 == 1) {
        uint64_t v20 = 552;
      }
      uint64_t v21 = *(void *)(v18 + v20);
      __sprintf_chk(__dst, 0, 0x40uLL, "[FDP] (%3d,%3d,%3d)", v17, *(_DWORD *)(v18 + 580), v19);
      uint64_t appended = ssftstring_AssignCStr(a3, __dst);
      if ((appended & 0x80000000) != 0) {
        return appended;
      }
      int v22 = *(uint64_t **)v18;
      if (*(void *)v18)
      {
        for (uint64_t i = *v22; i; uint64_t i = *(void *)(i + 16))
        {
          uint64_t appended = ssftstring_AppendCStr(a3, *(char **)i);
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = ssftstring_AppendCStr(a3, ":");
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = log_mbs_fput_sjis(a3, *(int **)(i + 8));
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
          uint64_t appended = ssftstring_AppendCStr(a3, " ");
          if ((appended & 0x80000000) != 0) {
            return appended;
          }
        }
      }
      else
      {
        if (*(_DWORD *)(v18 + 568) == 1) {
          unsigned __int16 v24 = "<_START>";
        }
        else {
          unsigned __int16 v24 = "<_END>";
        }
        uint64_t appended = ssftstring_AppendCStr(a3, v24);
        if ((appended & 0x80000000) != 0) {
          return appended;
        }
      }
      cstdlib_strcpy(__dst, "cost_h = ");
      LH_itoa(*(_DWORD *)(v18 + 8), __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      cstdlib_strcat(__dst, ", uint64_t word_cost = ");
      LH_itoa(*(_DWORD *)(v18 + 16), __s2, 0xAu);
      cstdlib_strcat(__dst, __s2);
      uint64_t appended = ssftstring_AppendCStr(a3, __dst);
      if ((appended & 0x80000000) != 0) {
        return appended;
      }
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = ssftstring_CStr(a3);
      log_OutText(v25, v33, 5, 0, (uint64_t)"%s", v27, v28, v29, v26);
      uint64_t v16 = ssftstring_Clear(a3);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
      ++v19;
      uint64_t v18 = v21;
      if (!v21) {
        goto LABEL_25;
      }
    }
  }
  return v16;
}

void *lattice_word_free_all(void *result, int a2, void *a3)
{
  if (a2 >= -1)
  {
    __int16 v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = (a2 + 2);
    do
    {
      uint64_t v7 = v4[v5];
      if (v7)
      {
        do
        {
          uint64_t v8 = *(void *)(v7 + 552);
          uint64_t result = heap_Free(a3, v7);
          uint64_t v7 = v8;
        }
        while (v8);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t add_to_lattice(_DWORD *a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10 = a2;
  if (!a2)
  {
    uint64_t v18 = heap_Alloc((uint64_t)a10, 584);
    uint64_t v10 = v18;
    if (!v18) {
      return v10;
    }
    *(_DWORD *)(v18 + 544) = 0;
    *(void *)(v18 + 536) = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 552) = 0;
    *(void *)(v18 + 568) = 0;
    *(void *)(v18 + 560) = 0;
    *(void *)uint64_t v18 = a3;
    if (a3)
    {
      uint64_t v19 = *a3;
      if (!*a3) {
        return 0;
      }
      while (cstdlib_strcmp(*(const char **)v19, "WCOST"))
      {
        uint64_t v19 = *(void *)(v19 + 16);
        if (!v19) {
          return 0;
        }
      }
      size_t v31 = mbs_len_bytes(*(void *)(v19 + 8)) + 1;
      uint64_t v32 = (unsigned __int8 *)heap_Alloc((uint64_t)a10, v31);
      if (!v32)
      {
        heap_Free(a10, v10);
        return 0;
      }
      uint64_t v33 = v32;
      cstdlib_memset(v32, 0, v31);
      if (mbs2sjis(*(void *)(v19 + 8), 0, *(_DWORD *)(*(void *)(v19 + 8) + 8), (uint64_t)v33, v31) == -1) {
        return 0;
      }
      *(void *)(v10 + 16) = (int)cstdlib_atoi(v33);
      heap_Free(a10, (uint64_t)v33);
    }
    else
    {
      *(_DWORD *)(v18 + 572) = 1;
    }
    *(_DWORD *)(v10 + 576) = a4;
    *(_DWORD *)(v10 + 580) = a5;
    uint64_t v25 = (uint64_t *)(a6 + 8 * (a4 + 1));
    uint64_t v26 = *v25;
    if (*v25)
    {
      do
      {
        uint64_t v27 = v26;
        uint64_t v26 = *(void *)(v26 + 552);
      }
      while (v26);
      uint64_t v25 = (uint64_t *)(v27 + 552);
    }
    *uint64_t v25 = v10;
    uint64_t v28 = (uint64_t *)(a7 + 8 * (a4 + 1 + a5));
    uint64_t v29 = *v28;
    if (*v28)
    {
      do
      {
        uint64_t v30 = v29;
        uint64_t v29 = *(void *)(v29 + 560);
      }
      while (v29);
      uint64_t v28 = (uint64_t *)(v30 + 560);
    }
    *uint64_t v28 = v10;
  }
  uint64_t v12 = *(int *)(v10 + 544);
  if ((int)v12 > 31) {
    return 0;
  }
  if (a1)
  {
    *(void *)(v10 + 8 * v12 + 280) = a1;
    if (a1[142] == 1) {
      uint64_t v20 = -1;
    }
    else {
      uint64_t v20 = *(void *)(*(void *)a1 + 8);
    }
    if (*(_DWORD *)(v10 + 572) == 1) {
      uint64_t v21 = -1;
    }
    else {
      uint64_t v21 = *(void *)(*(void *)v10 + 8);
    }
    uint64_t v22 = connection_table(v20, v21, a9);
    uint64_t v23 = *(int *)(v10 + 544);
    *(void *)(v10 + 8 * v23 + 24) = v22;
    *(_DWORD *)(v10 + 544) = v23 + 1;
  }
  return v10;
}

uint64_t forward_dp(int a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7)
{
  if (a1 >= -1)
  {
    uint64_t v13 = (a1 + 2);
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    do
    {
      *v14++ = 0;
      *v15++ = 0;
      --v13;
    }
    while (v13);
  }
  uint64_t result = heap_Alloc((uint64_t)a7, 584);
  if (result)
  {
    *(_DWORD *)(result + 544) = 0;
    *(void *)(result + 536) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = 0;
    *(void *)(result + 568) = 0;
    *(void *)(result + 552) = 0;
    *(void *)(result + 560) = 0;
    *(_DWORD *)(result + 568) = 1;
    *(void *)(result + 576) = 0;
    *a4 = result;
    *a5 = result;
    if (a1 <= 0)
    {
      unint64_t v19 = a1;
LABEL_22:
      uint64_t v27 = a5[v19];
      if (v27)
      {
        uint64_t v28 = 0;
        while (1)
        {
          uint64_t result = add_to_lattice((_DWORD *)v27, v28, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
          if (!result) {
            break;
          }
          uint64_t v28 = result;
          uint64_t v27 = *(void *)(v27 + 560);
          if (!v27) {
            goto LABEL_28;
          }
        }
      }
      else
      {
        uint64_t result = add_to_lattice(0, 0, 0, a1, 0, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (result)
        {
LABEL_28:
          uint64_t v29 = (a1 + 1);
          if ((a1 & 0x80000000) == 0)
          {
            uint64_t v30 = 0;
            do
            {
              for (uint64_t i = a4[++v30]; i; uint64_t i = *(void *)(i + 552))
              {
                uint64_t v32 = *(unsigned int *)(i + 544);
                if (v32)
                {
                  uint64_t v33 = *(void *)(i + 280);
                  uint64_t v34 = *(void *)(i + 24) + *(void *)(v33 + 8) + *(void *)(v33 + 16);
                  *(void *)(i + 8) = v34;
                  *(void *)(i + 536) = v33;
                  if ((int)v32 >= 1)
                  {
                    uint64_t v35 = (uint64_t *)(i + 280);
                    do
                    {
                      uint64_t v36 = *v35;
                      uint64_t v37 = *(v35 - 32) + *(void *)(*v35 + 8) + *(void *)(*v35 + 16);
                      if (v37 < v34)
                      {
                        *(void *)(i + 8) = v37;
                        *(void *)(i + 536) = v36;
                        uint64_t v34 = v37;
                      }
                      ++v35;
                      --v32;
                    }
                    while (v32);
                  }
                }
                else
                {
                  *(void *)(i + 8) = 1000000;
                  *(void *)(i + 536) = 0;
                }
              }
            }
            while (v30 != v29);
          }
          return a5[(int)v29];
        }
      }
    }
    else
    {
      unint64_t v18 = 0;
      unint64_t v19 = a1;
      int v20 = a1;
      while (v18 >= v19)
      {
LABEL_19:
        ++v18;
        --v20;
        if (v18 == v19) {
          goto LABEL_22;
        }
      }
      int v21 = 0;
      unint64_t v38 = v19;
      uint64_t v39 = a3;
      while (1)
      {
        int address = box_hash_get_address(v18, v21);
        uint64_t leading_word = box_hash_get_leading_word(a3, v18, v21, address);
        if (leading_word) {
          break;
        }
LABEL_18:
        ++v21;
        unint64_t v19 = v38;
        a3 = v39;
        if (v21 == v20) {
          goto LABEL_19;
        }
      }
      unsigned __int16 v24 = (uint64_t *)leading_word;
      while (1)
      {
        uint64_t v25 = a5[v18];
        if (v25) {
          break;
        }
        uint64_t result = add_to_lattice(0, 0, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result) {
          return result;
        }
LABEL_17:
        unsigned __int16 v24 = (uint64_t *)v24[3];
        if (!v24) {
          goto LABEL_18;
        }
      }
      uint64_t v26 = 0;
      while (1)
      {
        uint64_t result = add_to_lattice((_DWORD *)v25, v26, v24, v18, v21, (uint64_t)a4, (uint64_t)a5, v17, a6, a7);
        if (!result) {
          break;
        }
        uint64_t v26 = result;
        uint64_t v25 = *(void *)(v25 + 560);
        if (!v25) {
          goto LABEL_17;
        }
      }
    }
  }
  return result;
}

void *mas_list_free_recursive(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    mas_list_free_recursive(result[1]);
    mas_list_free_recursive(*(void *)(v3 + 16));
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t add_lattice_word_to_cyk_table(void *a1, uint64_t a2, int *a3, void *a4)
{
  uint64_t leading_tree = cyk_hash_get_leading_tree(a1, a3[144], a3[145]);
  if (leading_tree)
  {
    while (*(_DWORD *)(leading_tree + 32) || *(void *)(leading_tree + 48) != **(void **)a3)
    {
      uint64_t leading_tree = *(void *)(leading_tree + 88);
      if (!leading_tree) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = heap_Alloc((uint64_t)a4, 96);
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = **(void **)a3;
    *(void *)uint64_t result = *(void *)(*(void *)a3 + 8);
    *(_DWORD *)(result + 32) = 0;
    *(void *)(result + 88) = 0;
    *(void *)(result + 48) = v10;
    *(void *)(result + 24) = *(void *)(*(void *)a3 + 16);
    *(void *)(result + 40) = 0;
    int v11 = a3[144];
    unsigned int v12 = a3[145];
    *(_DWORD *)(result + 72) = v11;
    *(void *)(result + 76) = v12;
    *(_DWORD *)(result + 8) = -1;
    uint64_t v13 = cyk_hash_get_leading_tree(a1, v11, v12);
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = *(void *)(v13 + 88);
      }
      while (v13);
      *(void *)(v14 + 88) = v9;
    }
    else if ((cyk_hash_add_leading_tree(a1, v9, a3[144], a3[145], (uint64_t)a4) & 0x1FFF) == 0xA)
    {
      heap_Free(a4, v9);
      return 0;
    }
  }
  return 1;
}

uint64_t add_word_to_cyk_table(void *a1, uint64_t a2, int **a3, void *a4)
{
  if ((*a3)[142] != 1) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v5 = (int **)v5[3];
    if (!v5 || (*v5)[143] == 1) {
      break;
    }
    uint64_t result = add_lattice_word_to_cyk_table(a1, a2, *v5, a4);
    if (!result) {
      return result;
    }
  }
  return 1;
}

uint64_t add_unknown_to_cyk_table(uint64_t a1, uint64_t a2, int a3, char *__s1, const char *a5, uint64_t a6, void *a7, int a8, uint64_t a9, void *a10)
{
  uint64_t number_of_symbol = get_number_of_symbol(a6, __s1);
  uint64_t result = 0;
  int v18 = a3 - a2;
  if (a3 >= (int)a2 && number_of_symbol != -1)
  {
    uint64_t result = heap_Alloc((uint64_t)a10, (2 * (v18 + 1)) | 1u);
    if (result)
    {
      unint64_t v19 = (const char *)result;
      if (mbs2sjis(a1, a2, v18 + 1, result, (2 * (v18 + 1)) | 1u) == -1)
      {
        heap_Free(a10, (uint64_t)v19);
        return 0;
      }
      int v20 = unknown_info_create(v19, __s1, a5, "0", a10);
      heap_Free(a10, (uint64_t)v19);
      if (!v20) {
        return 0;
      }
      if (*(unsigned char *)(a9 + 68)) {
        int v21 = a2 + 1;
      }
      else {
        int v21 = a2;
      }
      uint64_t result = heap_Alloc((uint64_t)a10, 96);
      if (result)
      {
        uint64_t v22 = result;
        *(void *)uint64_t result = number_of_symbol;
        *(_DWORD *)(result + 32) = 0;
        *(void *)(result + 88) = 0;
        *(void *)(result + 24) = 0;
        *(void *)(result + 40) = 0;
        *(void *)(result + 48) = v20;
        *(_DWORD *)(result + 72) = v21;
        *(_DWORD *)(result + 76) = v18;
        *(_DWORD *)(result + 80) = 0;
        *(_DWORD *)(result + 8) = -1;
        uint64_t leading_tree = cyk_hash_get_leading_tree(a7, v21, v18);
        if (leading_tree)
        {
          do
          {
            uint64_t v24 = leading_tree;
            uint64_t leading_tree = *(void *)(leading_tree + 88);
          }
          while (leading_tree);
          *(void *)(v24 + 88) = v22;
          return 1;
        }
        return (cyk_hash_add_leading_tree(a7, v22, v21, v18, (uint64_t)a10) & 0x1FFF) != 0xA;
      }
    }
  }
  return result;
}

void *backward_as(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v17 = (_OWORD *)heap_Alloc((uint64_t)a10, 48);
  if (!v17) {
    return 0;
  }
  int v18 = v17;
  uint64_t v56 = a5;
  v17[1] = 0u;
  v17[2] = 0u;
  _OWORD *v17 = 0u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)heap_Alloc((uint64_t)a10, 48);
  if (!v20)
  {
    v18[1] = 0;
    goto LABEL_26;
  }
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v22 = 0;
  uint64_t v23 = a1;
  int v24 = 0;
  uint64_t v25 = 0;
  uint64_t v49 = v23;
  unint64_t v50 = 0;
  *int v20 = v23;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = 0;
  v20[5] = v19;
  v18[1] = v20;
  uint64_t v54 = a4;
  unsigned int v55 = a8;
  int v53 = a2;
  while (1)
  {
    ++v22;
    if ((*(_DWORD *)(a4 + 1320) & 0x80000000) == 0) {
      break;
    }
LABEL_7:
    uint64_t v27 = v18;
    while (v20)
    {
      uint64_t v28 = v20;
      uint64_t v29 = v27;
      int v20 = (void *)v20[1];
      uint64_t v27 = v28;
      if (!v20)
      {
        uint64_t v30 = v29[1];
        v29[1] = v28[2];
        goto LABEL_12;
      }
    }
    uint64_t v30 = 0;
LABEL_12:
    size_t v31 = *(int **)v30;
    if (*(_DWORD *)(*(void *)v30 + 568) == 1)
    {
      add_word_to_cyk_table(a8, v21, (int **)v30, a10);
      if (++v24 >= a2) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v57 = v22;
      *(void *)unsigned __int16 v58 = v25;
      if (v31[136] >= 1)
      {
        uint64_t v32 = 0;
        do
        {
          uint64_t v33 = *(void *)(v30 + 32);
          uint64_t v34 = &v31[2 * v32];
          uint64_t v35 = *((void *)v34 + 35);
          uint64_t v36 = *((void *)v34 + 3);
          uint64_t v38 = *(void *)(v35 + 8);
          uint64_t v37 = *(void *)(v35 + 16);
          uint64_t v39 = (void *)heap_Alloc((uint64_t)a10, 48);
          if (!v39) {
            return 0;
          }
          uint64_t v40 = v37 + v33 + v36;
          *uint64_t v39 = v35;
          v39[1] = 0;
          v39[2] = 0;
          v39[3] = v30;
          v39[4] = v40;
          v39[5] = v40 + v38;
          v18[1] = mas_list_insert(v39, (void *)v18[1]);
          ++v32;
          size_t v31 = *(int **)v30;
        }
        while (v32 < *(int *)(*(void *)v30 + 544));
      }
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      if (*(void *)v58) {
        *(void *)(*(void *)v58 + 8) = v30;
      }
      else {
        unint64_t v50 = (void *)v30;
      }
      uint64_t v25 = v30;
      a4 = v54;
      a8 = v55;
      a2 = v53;
      uint64_t v22 = v57;
    }
    int v20 = (void *)v18[1];
    if (!v20) {
      goto LABEL_30;
    }
  }
  if (times_limit_over() != 1)
  {
    int v20 = (void *)v18[1];
    goto LABEL_7;
  }
  if (v24)
  {
LABEL_30:
    mas_list_free_recursive(v18, a10);
    mas_list_free_recursive(v50, a10);
    return a8;
  }
  uint64_t v42 = 0;
  uint64_t v43 = *(void *)(v49 + 536);
  for (uint64_t i = v43; ; v43 = *(void *)(i + 536))
  {
    int v45 = *(_DWORD *)(i + 576);
    uint64_t v46 = v42;
    while (!v43)
    {
      int v47 = v45 - 1;
      uint64_t v42 = v46;
      if (v45 >= 1)
      {
        int v47 = v45;
        while (1)
        {
          uint64_t v42 = *(void *)(v56 + 8 * --v47);
          if (v42) {
            break;
          }
          if (v47 <= 0)
          {
            uint64_t v42 = 0;
            int v47 = -1;
            break;
          }
        }
      }
      if (*(unsigned char *)(a4 + 68)) {
        int v48 = v45 - 2;
      }
      else {
        int v48 = v45 - 1;
      }
      if (!add_unknown_to_cyk_table(v51, v47 - (*(unsigned char *)(a4 + 68) != 0), v48, (char *)(a4 + 136), (const char *)(a4 + 200), v52, a8, v26, a4, a10))goto LABEL_49; {
      uint64_t v43 = 0;
      }
      uint64_t v46 = 0;
      uint64_t i = v42;
      if (v42) {
        goto LABEL_46;
      }
    }
    uint64_t v42 = v46;
    uint64_t i = v43;
LABEL_46:
    if (*(_DWORD *)(i + 568) == 1) {
      goto LABEL_30;
    }
    if (!add_lattice_word_to_cyk_table(a8, v21, (int *)i, a10)) {
      break;
    }
  }
LABEL_49:
  cyk_hash_free(a8, a10);
LABEL_26:
  mas_list_free_recursive(v18, a10);
  return 0;
}

uint64_t iso_parse_fdp_bas(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t *a6, uint64_t a7, unsigned __int16 a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v19 = heap_Alloc(*(void *)(a1 + 24), 96800);
  if (!v19)
  {
    uint64_t v26 = 0;
    goto LABEL_7;
  }
  int v24 = (uint64_t *)v19;
  int v25 = *(_DWORD *)(a3 + 8);
  if (*(unsigned char *)(a2 + 68)) {
    ++v25;
  }
  if (v25 < 2049)
  {
    unsigned int v57 = v25;
    int v60 = 0;
    v63[1] = 4000;
    uint64_t v62 = 0;
    v63[0] = v19 + 32800;
    cstdlib_memset((void *)(v19 + 32800), 0, 0x7D00uLL);
    long long v29 = *(_OWORD *)(a1 + 176);
    long long v30 = *(_OWORD *)(a1 + 208);
    v58[12] = *(_OWORD *)(a1 + 192);
    v58[13] = v30;
    long long v31 = *(_OWORD *)(a1 + 112);
    long long v32 = *(_OWORD *)(a1 + 144);
    long long v33 = *(_OWORD *)(a1 + 160);
    v58[8] = *(_OWORD *)(a1 + 128);
    v58[9] = v32;
    v58[10] = v33;
    v58[11] = v29;
    long long v34 = *(_OWORD *)(a1 + 48);
    long long v35 = *(_OWORD *)(a1 + 80);
    long long v36 = *(_OWORD *)(a1 + 96);
    v58[4] = *(_OWORD *)(a1 + 64);
    v58[5] = v35;
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v59 = *(void *)(a1 + 224);
    v58[6] = v36;
    v58[7] = v31;
    long long v38 = *(_OWORD *)(a1 + 16);
    v58[0] = *(_OWORD *)a1;
    v58[1] = v38;
    int v58[2] = *(_OWORD *)(a1 + 32);
    v58[3] = v34;
    uint64_t v27 = look_up_dictionary(a1, a3, a2, 20, (uint64_t)SF_symbol_file, v63, v37, (uint64_t)v58, a7, a8, a9, a10, a11, &v60);
    if ((v27 & 0x80000000) != 0) {
      return v27;
    }
    if (v60 == 1)
    {
      uint64_t v47 = forward_dp(v57, v39, v63, v24 + 2050, v24, a4, *(void **)(a1 + 24));
      if (a5 == 1)
      {
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 5, 0, (uint64_t)"[FDP] Dumping LATTICE (RESULT OF FORWARD DP)", v44, v45, v46, v55);
        uint64_t v27 = lattice_word_print_all(*(void *)(a1 + 32), *(void *)(a1 + 216), *(void *)(a1 + 224), (uint64_t)(v24 + 2050), v57, 1);
        if ((v27 & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      if (v47)
      {
        int64x2_t v61 = v24 + 8100;
        LODWORD(v62) = 4000;
        cstdlib_memset(v24 + 8100, 0, 0x7D00uLL);
        if (backward_as(v47, *(_DWORD *)(a2 + 8), v57, a2, (uint64_t)v24, a3, (uint64_t)SF_symbol_file, &v61, v55, *(void **)(a1 + 24)))
        {
          if (a5 != 1
            || (log_OutText(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 5, 0, (uint64_t)"[A*] RESULT OF BACKWARD A Star", v48, v49, v50, v56), uint64_t v27 = log_intermediate_tree(*(void *)(a1 + 32), *(void *)(a1 + 216), *(void *)(a1 + 224), (int *)a2, &v61, v57, (uint64_t *)a1), (v27 & 0x80000000) == 0))
          {
            lattice_word_free_all(v24 + 2050, v57, *(void **)(a1 + 24));
            if (*(_DWORD *)(a2 + 48) == 1)
            {
              uint64_t v51 = *(void *)(a1 + 24);
              int v52 = 1;
LABEL_30:
              uint64_t v54 = parser_result_create(v52, 0, v51);
              goto LABEL_31;
            }
            int v53 = *(_DWORD *)(a2 + 24);
            switch(v53)
            {
              case 3:
                uint64_t v54 = parse_cyk_as_step(a2, &v61, v57, *(void *)(a1 + 56), a1 + 64, a1 + 104, a1 + 144, *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              case 2:
                uint64_t v54 = parse_cyk_as((_DWORD *)a2, &v61, v57, *(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              case 1:
                uint64_t v54 = parse_cyk(a2, &v61, v57, *(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t *)a1, *(void **)(a1 + 24));
                break;
              default:
                uint64_t v51 = *(void *)(a1 + 24);
                int v52 = 2;
                goto LABEL_30;
            }
LABEL_31:
            uint64_t v26 = v54;
            cyk_hash_free(&v61, *(void **)(a1 + 24));
            box_hash_free(v63, *(void **)(a1 + 24));
            goto LABEL_32;
          }
LABEL_22:
          uint64_t v26 = 0;
          goto LABEL_8;
        }
      }
      box_hash_free(v63, *(void **)(a1 + 24));
      uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
      lattice_word_free_all(v24 + 2050, v57, *(void **)(a1 + 24));
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52001, 0, v40, v41, v42, v43, v55);
      box_hash_free(v63, *(void **)(a1 + 24));
      uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
    }
LABEL_32:
    heap_Free(*(void **)(a1 + 24), (uint64_t)v24);
    goto LABEL_8;
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), *(void *)(a1 + 216), 52000, (uint64_t)"%s%d", v20, v21, v22, v23, "maxlength");
  uint64_t v26 = parser_result_create(2, 0, *(void *)(a1 + 24));
  heap_Free(*(void **)(a1 + 24), (uint64_t)v24);
LABEL_7:
  uint64_t v27 = 0;
LABEL_8:
  *a6 = v26;
  return v27;
}

uint64_t tree_append(uint64_t result, uint64_t a2)
{
  if (!result) {
    return a2;
  }
  uint64_t v2 = result;
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 16);
  }
  while (v2);
  *(void *)(v3 + 16) = a2;
  return result;
}

uint64_t *info_copy_sjis(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    __int16 v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
    BOOL v5 = v4 == 0;
    if (v4)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      char v8 = 0;
      char v9 = 1;
      while (1)
      {
        uint64_t v10 = v4;
        if (v9) {
          uint64_t v7 = v4;
        }
        int v11 = cstdlib_strlen(*(const char **)v3);
        unsigned int v12 = (char *)heap_Alloc((uint64_t)a2, (v11 + 1));
        *__int16 v4 = (uint64_t)v12;
        if (!v12) {
          break;
        }
        cstdlib_strcpy(v12, *(const char **)v3);
        uint64_t v13 = mbs_len_bytes(*(void *)(v3 + 8)) + 1;
        uint64_t v14 = heap_Alloc((uint64_t)a2, v13);
        if (!v14
          || mbs2sjis(*(void *)(v3 + 8), 0, *(_DWORD *)(*(void *)(v3 + 8) + 8), v14, v13) == -1)
        {
          goto LABEL_23;
        }
        v10[1] = v14;
        if ((v9 & 1) == 0) {
          v6[2] = (uint64_t)v10;
        }
        uint64_t v3 = *(void *)(v3 + 16);
        if (!v3)
        {
          v10[2] = 0;
          return v7;
        }
        char v8 = 1;
        __int16 v4 = (uint64_t *)heap_Calloc(a2, 1, 24);
        char v9 = 0;
        BOOL v5 = v4 == 0;
        uint64_t v6 = v10;
        if (!v4) {
          goto LABEL_15;
        }
      }
      uint64_t v14 = 0;
LABEL_23:
      __int16 v4 = v10;
      if (v8) {
        goto LABEL_16;
      }
    }
    else
    {
      char v8 = 0;
      uint64_t v7 = 0;
LABEL_15:
      uint64_t v14 = 0;
      if (v8) {
LABEL_16:
      }
        WordInfo_free(v7, a2);
    }
    if (!v5)
    {
      heap_Free(a2, *v4);
      heap_Free(a2, (uint64_t)v4);
    }
    heap_Free(a2, v14);
  }
  return 0;
}

uint64_t *WordInfo_free(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    heap_Free(a2, *result);
    heap_Free(a2, *(void *)(v3 + 8));
    WordInfo_free(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

void *tree_duplicate(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = heap_Alloc((uint64_t)a4, 64);
  if (v8)
  {
    char v9 = (const char *)v8;
    if (get_name_of_symbol(SF_symbol_file, a3, *(void *)a1, v8))
    {
      int v10 = *(_DWORD *)(a1 + 32);
      switch(v10)
      {
        case 0:
          if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1) {
            break;
          }
          uint64_t v15 = info_copy_sjis(*(void *)(a1 + 48), a4);
          if (!v15) {
            break;
          }
          uint64_t v16 = v15;
          uint64_t v17 = *(uint64_t **)(a1 + 24);
          if (v17 && *(_DWORD *)(a2 + 12) == 1)
          {
            int v18 = attribute_copy_all(v17, a4);
            if (!v18)
            {
              WordInfo_free(v16, a4);
              break;
            }
          }
          else
          {
            int v18 = 0;
          }
          unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v18, 0, (uint64_t)v16, a4);
          if (!v12) {
            WordInfo_free(v16, a4);
          }
          goto LABEL_33;
        case 1:
          uint64_t v19 = tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
          if (v19)
          {
            uint64_t v20 = (void *)v19;
            if (*v9 != 95 || *(_DWORD *)(a2 + 28) != 1)
            {
              uint64_t v21 = *(uint64_t **)(a1 + 24);
              if (v21 && *(_DWORD *)(a2 + 12) == 1)
              {
                uint64_t v22 = attribute_copy_all(v21, a4);
                if (!v22) {
                  break;
                }
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v22, (uint64_t)v20, 0, a4);
              if (!v12) {
                jpe_FreeTree(v20, a4);
              }
              goto LABEL_33;
            }
            unsigned int v12 = (void *)v19;
            goto LABEL_33;
          }
          break;
        case 2:
          uint64_t v11 = tree_duplicate(*(void *)(a1 + 40), a2, a3, a4);
          if (v11)
          {
            unsigned int v12 = (void *)v11;
            uint64_t v13 = v11;
            do
            {
              uint64_t v14 = v13;
              uint64_t v13 = *(void *)(v13 + 16);
            }
            while (v13);
            *(void *)(v14 + 16) = tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
LABEL_27:
            if (*v9 == 95 && *(_DWORD *)(a2 + 28) == 1) {
              goto LABEL_33;
            }
            uint64_t v23 = *(uint64_t **)(a1 + 24);
            if (v23 && *(_DWORD *)(a2 + 12) == 1)
            {
              int v24 = attribute_copy_all(v23, a4);
              if (!v24) {
                break;
              }
            }
            else
            {
              int v24 = 0;
            }
            unsigned int v12 = jp_tree_create(*(void *)a1, v9, 0, (uint64_t)v24, (uint64_t)v12, 0, a4);
            goto LABEL_33;
          }
          unsigned int v12 = (void *)tree_duplicate(*(void *)(a1 + 48), a2, a3, a4);
          if (v12) {
            goto LABEL_27;
          }
LABEL_33:
          heap_Free(a4, (uint64_t)v9);
          return v12;
      }
    }
    unsigned int v12 = 0;
    goto LABEL_33;
  }
  return 0;
}

void *jp_tree_create(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = (void *)heap_Calloc(a7, 1, 48);
  uint64_t v15 = v14;
  if (v14)
  {
    *uint64_t v14 = a1;
    int v16 = cstdlib_strlen(a2);
    uint64_t v17 = (char *)heap_Alloc((uint64_t)a7, (v16 + 1));
    v15[1] = v17;
    if (v17)
    {
      cstdlib_strcpy(v17, a2);
      v15[2] = a3;
      v15[3] = a4;
      v15[4] = a5;
      _WORD v15[5] = a6;
    }
    else
    {
      heap_Free(a7, (uint64_t)v15);
      return 0;
    }
  }
  return v15;
}

uint64_t jpe_FreeTree(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t v4 = v3[4];
      if (v4)
      {
        jpe_FreeTree(v4, a2);
      }
      else
      {
        BOOL v5 = (uint64_t *)v3[5];
        if (v5) {
          WordInfo_free(v5, a2);
        }
      }
      uint64_t v6 = (void *)v3[2];
      jpe_FreeTreeOne((uint64_t)v3, a2);
      uint64_t v3 = v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t jpe_FreeTreeOne(uint64_t a1, void *a2)
{
  if (a1)
  {
    heap_Free(a2, *(void *)(a1 + 8));
    attribute_free_all(*(uint64_t **)(a1 + 24), a2);
    heap_Free(a2, a1);
  }
  return 1;
}

void *WordInfo_duplicate(uint64_t a1, size_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v6 = (void *)heap_Calloc(a3, 1, 24);
  if (!v6) {
    return v6;
  }
  int v7 = cstdlib_strlen(*(const char **)a1);
  uint64_t v8 = (char *)heap_Alloc((uint64_t)a3, (v7 + 1));
  *uint64_t v6 = v8;
  if (!v8) {
    return 0;
  }
  cstdlib_strcpy(v8, *(const char **)a1);
  if (a2 == -1)
  {
    if (cstdlib_strcmp(*(const char **)a1, "WORD")) {
      a2 = 0xFFFFFFFFLL;
    }
    else {
      a2 = cstdlib_strlen(*(const char **)(a1 + 8));
    }
  }
  if (cstdlib_strcmp(*(const char **)a1, "MARKER"))
  {
    int v9 = cstdlib_strlen(*(const char **)(a1 + 8));
    int v10 = (char *)heap_Alloc((uint64_t)a3, (v9 + 1));
    v6[1] = v10;
    if (v10)
    {
      cstdlib_strcpy(v10, *(const char **)(a1 + 8));
      goto LABEL_15;
    }
    return 0;
  }
  uint64_t v11 = heap_Alloc((uint64_t)a3, a2);
  v6[1] = v11;
  if (!v11) {
    return 0;
  }
  if ((int)a2 >= 1)
  {
    uint64_t v12 = 0;
    do
    {
      *(unsigned char *)(v6[1] + v12) = *(unsigned char *)(*(void *)(a1 + 8) + v12);
      ++v12;
    }
    while (a2 != v12);
  }
LABEL_15:
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
    v6[2] = 0;
    return v6;
  }
  uint64_t v14 = WordInfo_duplicate(v13, a2, a3);
  v6[2] = v14;
  if (!v14) {
    return 0;
  }
  return v6;
}

uint64_t jp_tree_duplicate_one(uint64_t a1, void *a2)
{
  uint64_t v4 = heap_Calloc(a2, 1, 48);
  if (v4)
  {
    int v5 = cstdlib_strlen(*(const char **)(a1 + 8));
    uint64_t v6 = (char *)heap_Alloc((uint64_t)a2, (v5 + 1));
    *(void *)(v4 + 8) = v6;
    if (v6)
    {
      int v7 = *(const char **)(a1 + 8);
      *(void *)uint64_t v4 = *(void *)a1;
      cstdlib_strcpy(v6, v7);
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
    }
    else
    {
      heap_Free(a2, v4);
      return 0;
    }
  }
  return v4;
}

uint64_t *free_information(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    heap_Free(a2, *result);
    mbs_free(*(uint64_t **)(v3 + 8), a2);
    heap_Free(a2, *(void *)(v3 + 8));
    free_information(*(void *)(v3 + 16), a2);
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t info_copy(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    int v5 = 0;
    char v6 = 1;
    while (1)
    {
      uint64_t v7 = heap_Calloc(a2, 1, 32);
      if (!v7) {
        break;
      }
      uint64_t v8 = (void *)v7;
      if (v6) {
        uint64_t v4 = v7;
      }
      int v9 = cstdlib_strlen(*(const char **)v3);
      int v10 = (char *)heap_Alloc((uint64_t)a2, (v9 + 1));
      *uint64_t v8 = v10;
      if (!v10) {
        break;
      }
      cstdlib_strcpy(v10, *(const char **)v3);
      uint64_t v11 = heap_Alloc((uint64_t)a2, 16);
      v8[1] = v11;
      if (!v11
        || (mbs_copy(v11, *(void **)(v3 + 8), 0, *(_DWORD *)(*(void *)(v3 + 8) + 8), a2) & 0x80000000) != 0)
      {
        break;
      }
      if ((v6 & 1) == 0) {
        v5[2] = v8;
      }
      char v6 = 0;
      uint64_t v3 = *(void *)(v3 + 16);
      int v5 = v8;
      if (!v3)
      {
        v8[2] = 0;
        return v4;
      }
    }
  }
  return 0;
}

uint64_t create_info(int a1, const char *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = heap_Calloc(a3, 1, 32);
  if (v6)
  {
    uint64_t v7 = heap_Calloc(a3, 1, 16);
    *(void *)(v6 + 8) = v7;
    if (v7)
    {
      uint64_t v8 = v7;
      int v9 = cstdlib_strlen(a2);
      if ((mbs_create(v8, v9, a2, a3) & 0x80000000) == 0)
      {
        cstdlib_strcpy(__dst, off_264569E30[a1]);
        int v10 = cstdlib_strlen(__dst);
        uint64_t v11 = (char *)heap_Alloc((uint64_t)a3, (v10 + 1));
        *(void *)uint64_t v6 = v11;
        if (v11)
        {
          cstdlib_strcpy(v11, __dst);
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          return v6;
        }
        mbs_free(*(uint64_t **)(v6 + 8), a3);
      }
      heap_Free(a3, *(void *)(v6 + 8));
    }
    heap_Free(a3, v6);
    return 0;
  }
  return v6;
}

void *word_data_free_all(uint64_t **a1, void *a2)
{
  uint64_t v4 = *a1;
  int v5 = (uint64_t *)(*a1)[3];
  if (v5)
  {
    do
    {
      uint64_t v6 = (uint64_t *)v5[3];
      free_information(v5, a2);
      int v5 = v6;
    }
    while (v6);
  }
  free_information(v4, a2);
  attribute_free_all(a1[2], a2);

  return heap_Free(a2, (uint64_t)a1);
}

uint64_t BSCompareUniToTts(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t XLIT_chUnicodeWideToSJIS(unsigned int a1, char *a2, uint64_t a3, uint64_t a4)
{
  __int16 v28 = a1;
  if (a1 - 65534 >= 2 && a1 != 65279)
  {
    if (a1 <= 0x7E)
    {
      *a2 = a1;
      return 1;
    }
    if (a1 - 1025 <= 0x50)
    {
      *a2 = -124;
      if (a1 == 1025)
      {
        char v8 = 70;
      }
      else
      {
        if (a1 <= 0x415) {
          char v14 = 48;
        }
        else {
          char v14 = 49;
        }
        char v15 = v14 + a1;
        if (a1 > 0x42F) {
          v15 += 15;
        }
        char v16 = a1 > 0x435;
        if (a1 > 0x43D) {
          ++v16;
        }
        char v8 = v16 + v15;
      }
      a2[1] = v8;
      return 2;
    }
    if (a1 - 913 <= 0x38)
    {
      if (a1 > 0x3A1) {
        int v9 = -32755;
      }
      else {
        int v9 = -32754;
      }
      unsigned int v10 = v9 + a1;
      if (a1 > 0x3A9) {
        ++v10;
      }
      unsigned int v11 = v10 - (a1 > 0x3C1);
LABEL_21:
      unsigned int v12 = bswap32(v11);
LABEL_22:
      unsigned int v13 = HIWORD(v12);
LABEL_23:
      *(_WORD *)a2 = v13;
      return 2;
    }
    if ((unsigned __int16)(a1 + 159) <= 0x3Eu)
    {
      *a2 = a1 + 64;
      return 1;
    }
    if ((unsigned __int16)(a1 + 255) <= 0x5Du)
    {
      uint64_t v5 = 0;
      unsigned int v17 = 33097;
      switch(a1)
      {
        case 0xFF01u:
          goto LABEL_88;
        case 0xFF02u:
        case 0xFF07u:
          return v5;
        case 0xFF03u:
          unsigned int v17 = 33172;
          goto LABEL_88;
        case 0xFF04u:
          unsigned int v17 = 33168;
          goto LABEL_88;
        case 0xFF05u:
          unsigned int v17 = 33171;
          goto LABEL_88;
        case 0xFF06u:
          unsigned int v17 = 33173;
          goto LABEL_88;
        case 0xFF08u:
          unsigned int v17 = 33129;
          goto LABEL_88;
        case 0xFF09u:
          unsigned int v17 = 33130;
          goto LABEL_88;
        case 0xFF0Au:
          unsigned int v17 = 33174;
          goto LABEL_88;
        case 0xFF0Bu:
          unsigned int v17 = 33147;
          goto LABEL_88;
        case 0xFF0Cu:
          unsigned int v17 = 33091;
          goto LABEL_88;
        case 0xFF0Du:
          unsigned int v17 = 33148;
          goto LABEL_88;
        case 0xFF0Eu:
          unsigned int v17 = 33092;
          goto LABEL_88;
        case 0xFF0Fu:
          unsigned int v17 = 33118;
          goto LABEL_88;
        case 0xFF10u:
        case 0xFF11u:
        case 0xFF12u:
        case 0xFF13u:
        case 0xFF14u:
        case 0xFF15u:
        case 0xFF16u:
        case 0xFF17u:
        case 0xFF18u:
        case 0xFF19u:
        case 0xFF21u:
        case 0xFF22u:
        case 0xFF23u:
        case 0xFF24u:
        case 0xFF25u:
        case 0xFF26u:
        case 0xFF27u:
        case 0xFF28u:
        case 0xFF29u:
        case 0xFF2Au:
        case 0xFF2Bu:
        case 0xFF2Cu:
        case 0xFF2Du:
        case 0xFF2Eu:
        case 0xFF2Fu:
        case 0xFF30u:
        case 0xFF31u:
        case 0xFF32u:
        case 0xFF33u:
        case 0xFF34u:
        case 0xFF35u:
        case 0xFF36u:
        case 0xFF37u:
        case 0xFF38u:
        case 0xFF39u:
        case 0xFF3Au:
LABEL_57:
          if (a1 <= 0xFF3A) {
            int v23 = -31937;
          }
          else {
            int v23 = -31936;
          }
          unsigned int v17 = v23 + a1;
          goto LABEL_88;
        case 0xFF1Au:
          unsigned int v17 = 33094;
          goto LABEL_88;
        case 0xFF1Bu:
          unsigned int v17 = 33095;
          goto LABEL_88;
        case 0xFF1Cu:
          unsigned int v17 = 33155;
          goto LABEL_88;
        case 0xFF1Du:
          unsigned int v17 = 33153;
          goto LABEL_88;
        case 0xFF1Eu:
          unsigned int v17 = 33156;
          goto LABEL_88;
        case 0xFF1Fu:
          unsigned int v17 = 33096;
          goto LABEL_88;
        case 0xFF20u:
          unsigned int v17 = 33175;
          goto LABEL_88;
        case 0xFF3Bu:
          unsigned int v17 = 33133;
          goto LABEL_88;
        case 0xFF3Cu:
          unsigned int v17 = 33119;
          goto LABEL_88;
        case 0xFF3Du:
          unsigned int v17 = 33134;
          goto LABEL_88;
        case 0xFF3Eu:
          unsigned int v17 = 33103;
          goto LABEL_88;
        case 0xFF3Fu:
          unsigned int v17 = 33105;
          goto LABEL_88;
        case 0xFF40u:
          unsigned int v17 = 33101;
          goto LABEL_88;
        default:
          switch(a1)
          {
            case 0xFF5Bu:
              unsigned int v17 = 33135;
              break;
            case 0xFF5Cu:
              unsigned int v17 = 33122;
              break;
            case 0xFF5Du:
              unsigned int v17 = 33136;
              break;
            case 0xFF5Eu:
              unsigned int v17 = 33120;
              break;
            default:
              goto LABEL_57;
          }
LABEL_88:
          unsigned int v12 = bswap32(v17);
          break;
      }
      goto LABEL_22;
    }
    if (a1 - 12353 <= 0x52)
    {
      a2[1] = a1 + 94;
      char v18 = -126;
LABEL_46:
      *a2 = v18;
      return 2;
    }
    if (a1 - 12449 <= 0x55)
    {
      if (a1 >> 5 <= 0x186) {
        char v19 = -97;
      }
      else {
        char v19 = -96;
      }
      a2[1] = v19 + a1;
      char v18 = -125;
      goto LABEL_46;
    }
    if ((unsigned __int16)(a1 - 19968) > 0x51A5u)
    {
      switch(a1)
      {
        case 0x2500u:
          unsigned int v13 = 33951;
          goto LABEL_129;
        case 0x2501u:
          unsigned int v13 = 33962;
          goto LABEL_129;
        case 0x2502u:
          unsigned int v13 = 33952;
          goto LABEL_129;
        case 0x2503u:
          unsigned int v13 = 33963;
          goto LABEL_129;
        case 0x2504u:
        case 0x2505u:
        case 0x2506u:
        case 0x2507u:
        case 0x2508u:
        case 0x2509u:
        case 0x250Au:
        case 0x250Bu:
        case 0x250Du:
        case 0x250Eu:
        case 0x2511u:
        case 0x2512u:
        case 0x2515u:
        case 0x2516u:
        case 0x2519u:
        case 0x251Au:
        case 0x251Eu:
        case 0x251Fu:
        case 0x2521u:
        case 0x2522u:
        case 0x2526u:
        case 0x2527u:
        case 0x2529u:
        case 0x252Au:
        case 0x252Du:
        case 0x252Eu:
        case 0x2531u:
        case 0x2532u:
        case 0x2535u:
        case 0x2536u:
        case 0x2539u:
        case 0x253Au:
        case 0x253Du:
        case 0x253Eu:
        case 0x2540u:
        case 0x2541u:
        case 0x2543u:
        case 0x2544u:
        case 0x2545u:
        case 0x2546u:
        case 0x2547u:
        case 0x2548u:
        case 0x2549u:
        case 0x254Au:
LABEL_93:
          unint64_t v25 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
          if (v25)
          {
            uint64_t v22 = (char *)&BSUniToTts + (((_WORD)v25 - (unsigned __int16)&BSUniToTts) & 0x1FE);
            goto LABEL_51;
          }
          if (!a4 || !*(_WORD *)(a4 + 2)) {
            return 0;
          }
          if (v28 == *(_WORD *)(a4 + 2))
          {
            uint64_t v26 = 0;
          }
          else
          {
            unsigned __int16 v27 = 1;
            do
            {
              v27 += 2;
              if (!*(_WORD *)(a4 + 2 * v27)) {
                return 0;
              }
            }
            while (v28 != *(_WORD *)(a4 + 2 * v27));
            uint64_t v26 = v27 - 1;
          }
          unsigned int v11 = *(unsigned __int16 *)(a4 + 2 * v26);
          break;
        case 0x250Cu:
          unsigned int v13 = 33953;
          goto LABEL_129;
        case 0x250Fu:
          unsigned int v13 = 33964;
          goto LABEL_129;
        case 0x2510u:
          unsigned int v13 = 33954;
          goto LABEL_129;
        case 0x2513u:
          unsigned int v13 = 33965;
          goto LABEL_129;
        case 0x2514u:
          unsigned int v13 = 33956;
          goto LABEL_129;
        case 0x2517u:
          unsigned int v13 = 33967;
          goto LABEL_129;
        case 0x2518u:
          unsigned int v13 = 33955;
          goto LABEL_129;
        case 0x251Bu:
          unsigned int v13 = 33966;
          goto LABEL_129;
        case 0x251Cu:
          unsigned int v13 = 33957;
          goto LABEL_129;
        case 0x251Du:
          unsigned int v13 = 33978;
          goto LABEL_129;
        case 0x2520u:
          unsigned int v13 = 33973;
          goto LABEL_129;
        case 0x2523u:
          unsigned int v13 = 33968;
          goto LABEL_129;
        case 0x2524u:
          unsigned int v13 = 33959;
          goto LABEL_129;
        case 0x2525u:
          unsigned int v13 = 33980;
          goto LABEL_129;
        case 0x2528u:
          unsigned int v13 = 33975;
          goto LABEL_129;
        case 0x252Bu:
          unsigned int v13 = 33970;
          goto LABEL_129;
        case 0x252Cu:
          unsigned int v13 = 33958;
          goto LABEL_129;
        case 0x252Fu:
          unsigned int v13 = 33974;
          goto LABEL_129;
        case 0x2530u:
          unsigned int v13 = 33979;
          goto LABEL_129;
        case 0x2533u:
          unsigned int v13 = 33969;
          goto LABEL_129;
        case 0x2534u:
          unsigned int v13 = 33960;
          goto LABEL_129;
        case 0x2537u:
          unsigned int v13 = 33976;
          goto LABEL_129;
        case 0x2538u:
          unsigned int v13 = 33981;
          goto LABEL_129;
        case 0x253Bu:
          unsigned int v13 = 33971;
          goto LABEL_129;
        case 0x253Cu:
          unsigned int v13 = 33961;
          goto LABEL_129;
        case 0x253Fu:
          unsigned int v13 = 33977;
          goto LABEL_129;
        case 0x2542u:
          unsigned int v13 = 33982;
          goto LABEL_129;
        case 0x254Bu:
          unsigned int v13 = 33972;
          goto LABEL_129;
        default:
          switch(a1)
          {
            case 0xFFE0u:
              unsigned int v13 = 33169;
              break;
            case 0xFFE1u:
              unsigned int v13 = 33170;
              break;
            case 0xFFE2u:
              unsigned int v13 = 33226;
              break;
            case 0xFFE3u:
            case 0xFFE4u:
              goto LABEL_93;
            case 0xFFE5u:
              unsigned int v13 = 33167;
              break;
            default:
              if (a1 != 8741) {
                goto LABEL_93;
              }
              unsigned int v13 = 33121;
              break;
          }
LABEL_129:
          LOWORD(v13) = __rev16(v13);
          goto LABEL_23;
      }
      goto LABEL_21;
    }
    unsigned int v20 = jpj_UniToCTts(a1);
    if (v20 != 0x1FFF)
    {
      LOWORD(v13) = __rev16(jpj_CTtsToTts(v20));
      goto LABEL_23;
    }
    unint64_t v21 = ssft_bsearch((uint64_t)&v28, (unint64_t)&BSUniToTts, 0x93uLL, 2, (uint64_t (*)(uint64_t, unint64_t))BSCompareUniToTts);
    if (v21)
    {
      uint64_t v22 = (char *)&BSUniToTts + (((_WORD)v21 - (unsigned __int16)&BSUniToTts) & 0x1FE);
LABEL_51:
      unsigned int v11 = *((unsigned __int16 *)v22 + 147);
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t jpj_UniToCTts(__int16 a1)
{
  if ((unsigned __int16)(a1 - 19968) > 0x51A5u) {
    return 0x1FFFLL;
  }
  uint64_t v1 = (unsigned __int16 *)((char *)&CUni2CTts + 2 * CUni2CTtsindex[(unsigned __int16)(a1 - 19968) >> 6]);
  LOWORD(v2) = a1 & 0x3F;
  if ((a1 & 0x3F) == 0) {
    return *v1 >> 3;
  }
  do
  {
    unsigned __int16 v3 = *v1 & 7;
    if ((*v1 & 7) != 0)
    {
      ++v1;
    }
    else
    {
      unsigned __int16 v3 = v1[1];
      v1 += 2;
    }
    int v2 = (__int16)(v2 - v3);
  }
  while (v2 > 0);
  if (v2) {
    return 0x1FFFLL;
  }
  else {
    return *v1 >> 3;
  }
}

uint64_t jpj_CTtsToTts(unsigned int a1)
{
  if (a1)
  {
    __int16 v1 = a1 + 43;
    if (a1 <= 0xB95) {
      __int16 v1 = a1;
    }
    unsigned __int16 v2 = v1 + 1409;
    __int16 v3 = v2 / 0xBCu;
    LOBYTE(v2) = v2 % 0xBCu;
    unsigned __int8 v4 = v2 + 64;
    unsigned int v5 = (v2 + 64);
    unsigned __int8 v6 = v2 + 65;
    if (v5 <= 0x7E) {
      unsigned __int8 v6 = v4;
    }
    __int16 v7 = v3 - 127;
    unsigned int v8 = (v3 - 127);
    __int16 v9 = v3 - 63;
    if (v8 <= 0x9F) {
      __int16 v9 = v7;
    }
    return (unsigned __int16)(v6 | (unsigned __int16)(v9 << 8));
  }
  else
  {
    return (unsigned __int16)-32425;
  }
}

uint64_t XLIT_chSJISToUnicodeWide(char *a1, _WORD *a2)
{
  unsigned int v3 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    uint64_t v4 = 1;
LABEL_3:
    *a2 = v3;
    return v4;
  }
  if ((v3 + 6) < 3u || v3 < 0xA0 || (v3 & 0xF0) == 0xE0)
  {
    unsigned int v7 = a1[1] | (v3 << 8);
    uint64_t v4 = 2;
  }
  else
  {
    unsigned int v7 = v3 << 8;
    uint64_t v4 = 1;
  }
  uint64_t v5 = 0;
  if (v7 != 33663 && (unsigned __int16)(v7 + 32448) <= 0x6964u)
  {
    if ((unsigned __int16)(v7 + 32448) < 0xBDu)
    {
      if (v7 <= 0x817E)
      {
        __int16 v8 = 32448;
LABEL_50:
        unsigned __int16 v12 = v7 + v8;
LABEL_51:
        LOWORD(v3) = jpj_BSTtsToUni[v12];
        goto LABEL_3;
      }
      if (v7 != 33151 && v7 <= 0x81AC)
      {
        __int16 v8 = 32447;
        goto LABEL_50;
      }
      if ((v7 & 0xFFF8) == 0x81B8)
      {
        __int16 v8 = 32436;
        goto LABEL_50;
      }
      if ((unsigned __int16)(v7 + 32312) <= 6u)
      {
        __int16 v8 = 32428;
        goto LABEL_50;
      }
      if ((unsigned __int16)(v7 + 32294) <= 0xEu || (v7 & 0xFFF8) == 0x81F0)
      {
        __int16 v8 = 32417;
        goto LABEL_50;
      }
      if (v7 == 33276)
      {
        unsigned __int16 v12 = 146;
        goto LABEL_51;
      }
      return 0;
    }
    if ((unsigned __int16)(v7 + 32177) <= 0x4Bu)
    {
      if (v7 - 89 <= 0x27 && ((1 << (v7 - 89)) & 0xFE0000007FLL) != 0) {
        return 0;
      }
      *a2 = v7 + 31937;
      if (v7 < 0x827A) {
        return v4;
      }
      __int16 v9 = 31936;
      goto LABEL_62;
    }
    if ((unsigned __int16)(v7 + 31841) <= 0x37u)
    {
      if (v7 - 183 >= 8)
      {
        if (v7 >> 4 <= 0x83A) {
          __int16 v10 = 32754;
        }
        else {
          __int16 v10 = 32755;
        }
        __int16 v11 = v10 + v7;
        *a2 = v11;
        if (v7 < 0x83BF) {
          return v4;
        }
        *a2 = v11 - 1;
        if (v7 >> 4 <= 0x83C) {
          LOWORD(v3) = v11 - 1;
        }
        else {
          LOWORD(v3) = v11;
        }
        goto LABEL_3;
      }
      return 0;
    }
    if ((unsigned __int16)(v7 + 31680) > 0x51u)
    {
      if ((unsigned __int16)(v7 + 32424) <= 0x746u)
      {
        if ((unsigned __int16)(v7 + 32097) >= 0x53u)
        {
          if ((unsigned __int16)(v7 + 31936) >= 0x57u) {
            return 0;
          }
          *a2 = v7 - 21151;
          if (v7 < 0x837F) {
            return v4;
          }
          __int16 v9 = -21152;
        }
        else
        {
          __int16 v9 = -21086;
        }
LABEL_62:
        LOWORD(v3) = v7 + v9;
        goto LABEL_3;
      }
      uint64_t v5 = 0;
      if ((unsigned __int16)(v7 + 26509) >= 0x2Cu && (unsigned __int16)(v7 + 24576) >= 0x4000u)
      {
        if (v7 < 0x40u) {
          return 0;
        }
        uint64_t v5 = 0;
        if (v7 != 127 && v7 <= 0xFCu)
        {
          unsigned int v13 = jpj_TtsToCTts(v7);
          if (v13 >> 2 <= 0x634)
          {
            LOWORD(v3) = jpj_CTts2Uni[v13];
            goto LABEL_3;
          }
          return 0;
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v7 != 127 && v7 - 97 >= 0xF)
      {
        if (v7 == 33862)
        {
          LOWORD(v3) = 1025;
        }
        else if (v7 == 33910)
        {
          LOWORD(v3) = 1105;
        }
        else
        {
          if (v7 > 0x8445) {
            __int16 v14 = 32719;
          }
          else {
            __int16 v14 = 32720;
          }
          __int16 v15 = v14 + v7;
          *a2 = v15;
          if (v7 >> 5 < 0x423) {
            return v4;
          }
          *a2 = v15 - 15;
          if (v7 < 0x8476) {
            return v4;
          }
          *a2 = v15 - 16;
          if (v7 < 0x847E) {
            return v4;
          }
          LOWORD(v3) = v15 - 17;
        }
        goto LABEL_3;
      }
    }
  }
  return v5;
}

uint64_t jpj_TtsToCTts(unsigned int a1)
{
  if (a1 == 33111)
  {
    return 0;
  }
  else
  {
    unsigned int v2 = a1 >> 8;
    if (a1 >> 13 > 4) {
      LOBYTE(v2) = BYTE1(a1) - 64;
    }
    if (a1 <= 0x7Eu) {
      char v3 = a1;
    }
    else {
      char v3 = a1 - 1;
    }
    __int16 v4 = 188 * (v2 + 127) + (v3 - 64);
    unsigned __int16 v5 = v4 - 1409;
    unsigned int v6 = (unsigned __int16)(v4 - 1409);
    unsigned __int16 v1 = v4 - 1452;
    if (v6 <= 0xB95) {
      return v5;
    }
  }
  return v1;
}

const char *marker_getMarkerArgStr(unsigned int a1)
{
  if (a1 > 0xB) {
    return "__not_defined__";
  }
  else {
    return off_264569E58[a1];
  }
}

uint64_t marker_string2tag(char *__s1, _DWORD *a2, _DWORD *a3)
{
  int v6 = 0;
  unsigned int v7 = "MARKER_PHONEME";
  while (cstdlib_strcmp(__s1, v7))
  {
    int v8 = cstdlib_strcmp(__s1, v7 + 7);
    if (v8) {
      ++v6;
    }
    unsigned int v7 = &markerTable[56 * v6];
    if (*v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = v8;
      if (v8) {
        uint64_t result = 20;
      }
      else {
        uint64_t result = 0;
      }
      if (v10)
      {
        int v12 = 0;
        *a2 = 0;
        goto LABEL_16;
      }
      break;
    }
  }
  uint64_t result = 0;
  unsigned int v13 = &markerTable[56 * v6];
  *a2 = *((_DWORD *)v13 + 12);
  int v12 = *((_DWORD *)v13 + 13);
LABEL_16:
  *a3 = v12;
  return result;
}

uint64_t marker_tag2string(int a1, const char **a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  do
  {
    int v5 = *(_DWORD *)&markerTable[56 * v3 + 48];
    if (v5 == a1) {
      uint64_t v3 = v4;
    }
    else {
      uint64_t v3 = v4 + 1;
    }
    int v6 = &markerTable[56 * v3];
    if (*v6) {
      BOOL v7 = v5 == a1;
    }
    else {
      BOOL v7 = 1;
    }
    unsigned int v4 = v3;
  }
  while (!v7);
  if (v5 == a1)
  {
    uint64_t result = 0;
    BOOL v9 = v6 + 7;
    int v8 = *(_DWORD *)&markerTable[56 * v3 + 52];
  }
  else
  {
    int v8 = 0;
    BOOL v9 = "";
    uint64_t result = 20;
  }
  *a2 = v9;
  *a3 = v8;
  return result;
}

unint64_t marker_hasNonConstCharPtrArg(int a1)
{
  int v1 = 0;
  unsigned int v2 = "!";
  while (1)
  {
    int v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 57) {
      return 0;
    }
  }
  return (0x1E7DC3FF9804102uLL >> v1) & 1;
}

uint64_t marker_hasConstCharPtrArg()
{
  return 0;
}

unint64_t marker_hasCharPtrArg(int a1)
{
  int v1 = 0;
  unsigned int v2 = "!";
  while (1)
  {
    int v3 = *(_DWORD *)v2;
    v2 += 56;
    if (v3 == a1) {
      break;
    }
    if (++v1 == 57) {
      return 0;
    }
  }
  return (0x1E7DC3FF9804102uLL >> v1) & 1;
}

uint64_t marker_getArgType(int a1)
{
  uint64_t v1 = 0;
  while (*(_DWORD *)&markerTable[v1 + 48] != a1)
  {
    v1 += 56;
    if (v1 == 3192) {
      return 0;
    }
  }
  return *(unsigned int *)&markerTable[v1 + 52];
}

char *marker_getString(int a1)
{
  uint64_t result = "MARKER_PHONEME";
  if (a1 != 33)
  {
    for (uint64_t i = 0; ; i += 56)
    {
      uint64_t v4 = i + 56;
      if (i == 3136) {
        break;
      }
      int v5 = *(_DWORD *)&markerTable[i + 104];
      if (v5 == a1) {
        return &markerTable[v4];
      }
    }
    return "MARKER_UNDEF";
  }
  return result;
}

uint64_t marker_serialize_tostring(void (*a1)(uint64_t, char *), uint64_t a2, uint64_t a3, int a4)
{
  int v5 = (_OWORD *)a3;
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v16 = "UNKNOWN";
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  if (a4)
  {
    int v8 = *(_DWORD *)(a3 + 20);
  }
  else
  {
    cstdlib_memset(v14, 0, 0x40uLL);
    *(_OWORD *)((char *)&v14[1] + 4) = *v5;
    DWORD1(v14[2]) = *((_DWORD *)v5 + 4);
    *((void *)&v14[2] + 1) = *((void *)v5 + 3);
    int v8 = DWORD1(v14[1]);
    int v5 = v14;
  }
  marker_tag2string(v8, (const char **)&v16, &v15);
  LH_utoa(*((_DWORD *)v5 + 6), v17, 0xAu);
  a1(a2, v17);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 7), v17, 0xAu);
  a1(a2, v17);
  if (a4)
  {
    a1(a2, " ");
    BOOL v9 = *(_DWORD *)v5 ? "INT" : "EXT";
    a1(a2, v9);
    a1(a2, " ");
    LH_utoa(*((_DWORD *)v5 + 14), v17, 0xAu);
    a1(a2, v17);
    if (*((_DWORD *)v5 + 14))
    {
      int v10 = (const char *)*((void *)v5 + 6);
      a1(a2, " [");
      if (v10)
      {
        unsigned int v11 = cstdlib_strlen(v10);
        LH_utoa(v11, v17, 0xAu);
        a1(a2, v17);
        a1(a2, " ");
        a1(a2, (char *)v10);
      }
      a1(a2, "]");
    }
  }
  a1(a2, " ");
  a1(a2, v16);
  if ((v15 - 3) <= 1)
  {
    int v12 = (const char *)*((void *)v5 + 5);
    a1(a2, " (");
    if (!v12) {
      int v12 = "";
    }
    goto LABEL_18;
  }
  if ((v15 - 1) <= 1)
  {
    int v12 = v17;
    LH_utoa(*((_DWORD *)v5 + 10), v17, 0xAu);
    a1(a2, " (");
LABEL_18:
    a1(a2, (char *)v12);
    a1(a2, ")");
  }
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 8), v17, 0xAu);
  a1(a2, v17);
  a1(a2, " ");
  LH_utoa(*((_DWORD *)v5 + 9), v17, 0xAu);
  return ((uint64_t (*)(uint64_t, char *))a1)(a2, v17);
}

uint64_t marker_deserialize_fromstring(uint64_t a1, char *a2, char *__b, int a4)
{
  int v5 = __b;
  int __src = 0;
  if (a4)
  {
    cstdlib_memset(__b, 0, 0x40uLL);
    int v8 = (char *)v26;
  }
  else
  {
    int v8 = __b;
    int v5 = 0;
  }
  __s2 = 0;
  uint64_t v29 = 0;
  memset(v26, 0, sizeof(v26));
  cstdlib_memset(v8, 0, 0x20uLL);
  local_strtok_r(a2, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 1) = cstdlib_atoi((unsigned __int8 *)__s2);
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 2) = cstdlib_atoi((unsigned __int8 *)__s2);
  if (a4)
  {
    local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
    *(_DWORD *)int v5 = cstdlib_strcmp("INT", __s2) == 0;
    local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
    int v9 = cstdlib_atol((unsigned __int8 *)__s2);
    *((_DWORD *)v5 + 14) = v9;
    if (v9)
    {
      local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
      unsigned int v10 = cstdlib_atol((unsigned __int8 *)__s2 + 1);
      unsigned int v11 = (char *)heap_Calloc(*(void **)(a1 + 8), v10 + 1, 1);
      *((void *)v5 + 6) = v11;
      if (!v11) {
        return 10;
      }
      int v12 = __src;
      cstdlib_strncpy(v11, __src, v10);
      local_strtok_r(&v12[v10], " \t\r\n", (const char **)&__src, &__s2);
    }
  }
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  uint64_t v13 = marker_string2tag(__s2, (_DWORD *)&v29 + 1, &v29);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  *(_DWORD *)int v8 = HIDWORD(v29);
  if ((v29 - 1) <= 1)
  {
    local_strtok_r(0, ")", (const char **)&__src, &__s2);
    __int16 v14 = __s2;
    if (__s2)
    {
      char v15 = *__s2;
      if (*__s2)
      {
        do
        {
          if (!cstdlib_strchr("(", v15))
            break;
          int v16 = *++v14;
          char v15 = v16;
        }
        while (v16);
        __s2 = v14;
      }
    }
    *((_DWORD *)v8 + 6) = cstdlib_atol((unsigned __int8 *)v14);
    goto LABEL_23;
  }
  if ((v29 - 3) <= 1)
  {
    uint64_t v18 = cstdlib_strstr(__src, "(");
    if (!v18) {
      return 20;
    }
    char v19 = v18;
    unsigned int v20 = v18 + 1;
    unint64_t v21 = cstdlib_strstr(v18 + 1, ")");
    if (!v21) {
      return 20;
    }
    do
    {
      uint64_t v22 = v21;
      unint64_t v21 = cstdlib_strstr(v21 + 1, ")");
    }
    while (v21);
    int v23 = (char *)heap_Calloc(*(void **)(a1 + 8), (v22 - v19), 1);
    *((void *)v8 + 3) = v23;
    if (v23)
    {
      cstdlib_strncpy(v23, v20, v22 - v19 - 1);
      local_strtok_r(v22, " \t\r\n", (const char **)&__src, &__s2);
      goto LABEL_23;
    }
    return 10;
  }
LABEL_23:
  local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  *((_DWORD *)v8 + 3) = cstdlib_atoi((unsigned __int8 *)__s2);
  uint64_t v17 = local_strtok_r(0, " \t\r\n", (const char **)&__src, &__s2);
  int v24 = cstdlib_atoi((unsigned __int8 *)__s2);
  *((_DWORD *)v8 + 4) = v24;
  if (a4)
  {
    *(_OWORD *)(v5 + 20) = *(_OWORD *)v8;
    *((_DWORD *)v5 + 9) = v24;
    *((void *)v5 + 5) = *((void *)v8 + 3);
  }
  return v17;
}

uint64_t local_strtok_r(char *__s, char *__charset, const char **a3, char **a4)
{
  BOOL v7 = __s;
  *a4 = 0;
  if (!__s) {
    BOOL v7 = *a3;
  }
  int v8 = (char *)&v7[cstdlib_strspn(v7, __charset)];
  if (!*v8) {
    return 20;
  }
  *a4 = v8;
  int v9 = cstdlib_strpbrk(v8, __charset);
  if (v9)
  {
    *int v9 = 0;
    unsigned int v10 = v9 + 1;
  }
  else
  {
    unsigned int v10 = cstdlib_strchr(*a4, 0);
  }
  uint64_t v11 = 0;
  *a3 = v10;
  return v11;
}

char *appendString(uint64_t a1, char *__s, unsigned int *a3, const char *a4)
{
  uint64_t v4 = __s;
  if (__s)
  {
    size_t v8 = cstdlib_strlen(__s);
    size_t v9 = cstdlib_strlen(a4);
    size_t v10 = *a3;
    if (v9 + v8 >= v10)
    {
      size_t v11 = (v10 + 128);
      *a3 = v11;
      size_t v12 = cstdlib_strlen(v4);
      if (cstdlib_strlen(a4) + v12 >= v11)
      {
        int v14 = cstdlib_strlen(v4);
        unsigned int v13 = v14 + 2 * cstdlib_strlen(a4);
        *a3 = v13;
      }
      else
      {
        unsigned int v13 = *a3;
      }
      char v15 = (char *)heap_Calloc(*(void **)(a1 + 8), v13, 1);
      if (v15)
      {
        int v16 = v15;
        cstdlib_strcat(v15, v4);
        cstdlib_strcat(v16, a4);
        heap_Free(*(void **)(a1 + 8), (uint64_t)v4);
        return v16;
      }
    }
    else
    {
      cstdlib_strcat(v4, a4);
    }
  }
  return v4;
}

uint64_t marker_copy(_OWORD *a1, uint64_t a2, _OWORD *a3)
{
  if (!a1 || !a3) {
    return 0;
  }
  long long v3 = a1[1];
  *a3 = *a1;
  a3[1] = v3;
  return marker_copyParts((uint64_t)a1, a2, (uint64_t)a3);
}

uint64_t marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (a1 && a3)
  {
    if (!marker_hasNonConstCharPtrArg(*(_DWORD *)a1)) {
      return 1;
    }
    BOOL v7 = *(const char **)(a1 + 24);
    if (v7) {
      int v8 = cstdlib_strlen(v7);
    }
    else {
      int v8 = 0;
    }
    uint64_t result = heap_Alloc(a2, (v8 + 1));
    if (result)
    {
      uint64_t v9 = result;
      if (v8) {
        cstdlib_strcpy((char *)result, *(const char **)(a1 + 24));
      }
      else {
        *(unsigned char *)uint64_t result = 0;
      }
      *(void *)(a3 + 24) = v9;
      return 1;
    }
  }
  return result;
}

int *marker_freeParts(int *result, void *a2)
{
  if (result)
  {
    long long v3 = result;
    uint64_t result = (int *)marker_hasNonConstCharPtrArg(*result);
    if (result)
    {
      uint64_t v4 = *((void *)v3 + 3);
      if (v4)
      {
        uint64_t result = (int *)heap_Free(a2, v4);
        *((void *)v3 + 3) = 0;
      }
    }
  }
  return result;
}

uint64_t marker_sort(uint64_t a1, unint64_t a2)
{
  return ssft_qsort(a1, a2, 32, (uint64_t (*)(unint64_t, unint64_t))compare_3);
}

uint64_t compare_3(int *a1, int *a2)
{
  if (a1 == a2) {
    return 0;
  }
  unsigned int v2 = a1[3];
  unsigned int v3 = a2[3];
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v2 > v3) {
    return 1;
  }
  int v5 = *a1;
  int v6 = *a2;
  if (*a1 == 0x4000)
  {
    if (v6 != 0x4000) {
      return 0xFFFFFFFFLL;
    }
    int v7 = a1[4];
    int v8 = a2[4];
    if (v7 | v8) {
      return (v8 - v7);
    }
    int v6 = 0x4000;
  }
  else
  {
    if (v6 == 0x4000) {
      return 1;
    }
    if (v5 == 7 && v6 == 7 && v2 == v3 && a1[1] == a2[1])
    {
      unsigned int v10 = a1[2];
      unsigned int v11 = a2[2];
      if (v10 > v11) {
        return 1;
      }
      if (v11 > v10) {
        return 0xFFFFFFFFLL;
      }
      int v6 = 7;
    }
  }
  uint64_t v12 = 0;
  int v13 = 255;
  int v14 = 255;
  do
  {
    int v15 = prescribedOrder1[v12];
    if (v15 == v5) {
      int v14 = LOWORD(prescribedOrder1[v12 + 1]);
    }
    if (v15 == v6) {
      int v13 = LOWORD(prescribedOrder1[v12 + 1]);
    }
    v12 += 2;
  }
  while (v12 != 10);
  if (v13 == 255 || v14 == 255 || (uint64_t v4 = (v14 - v13), v14 == v13))
  {
    unsigned int v16 = a1[1];
    unsigned int v17 = a2[1];
    if (v16 >= v17)
    {
      if (v16 <= v17)
      {
        unsigned int v18 = a1[2];
        unsigned int v19 = a2[2];
        if (v18 <= v19) {
          return v19 > v18;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t marker_logOutText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v16 = 0;
  int v15 = 0;
  if ((marker_tag2string(*(_DWORD *)a5, &v16, &v15) & 0x80000000) != 0 || !v16)
  {
    int v13 = "%s MARKER_%d : posCur %d, lenCur %d";
  }
  else if ((v15 - 3) <= 1 && *(void *)(a5 + 24))
  {
    int v13 = "%s MARKER_%s [%s] : posCur %u, lenCur %u";
  }
  else if (v15 == 1)
  {
    int v13 = "%s MARKER_%s [%u] : posCur %u, lenCur %u";
  }
  else if (v15 == 2)
  {
    int v13 = "%s MARKER_%s [%c] : posCur %u, lenCur %u";
  }
  else
  {
    int v13 = "%s MARKER_%s [] : posCur %u, lenCur %u";
  }
  return log_OutText(a1, a2, a3, 0, (uint64_t)v13, v10, v11, v12, a4);
}

char *marker_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v24 = 256;
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 256, 1);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (char *)v8;
  unsigned int v10 = a4 >> 5;
  __sprintf_chk(__dst, 0, 0x80uLL, "%s, %lu markers:\n", a2, a4 >> 5);
  uint64_t appended = appendString(a1, v9, &v24, __dst);
  if (a4 >= 0x20)
  {
    uint64_t v12 = 0;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    int v14 = (char **)(a3 + 24);
    do
    {
      int __src = "UNKNOWN";
      int v22 = 0;
      if (v12)
      {
        uint64_t v15 = *((unsigned int *)v14 - 3);
        if (*(_DWORD *)(a3 + 32 * (v12 - 1) + 12) > v15)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "ERROR: TSODataDump - Markers are out of order: posCur %lu -> %lu [OUT OF ORDER!]\n", *(unsigned int *)(a3 + 32 * (v12 - 1) + 12), v15);
          uint64_t appended = appendString(a1, appended, &v24, __dst);
        }
      }
      __sprintf_chk(__dst, 0, 0x80uLL, "{%lu %lu:", *((unsigned int *)v14 - 5), *((unsigned int *)v14 - 4));
      unsigned int v16 = appendString(a1, appended, &v24, __dst);
      marker_tag2string(*((_DWORD *)v14 - 6), (const char **)&__src, &v22);
      if ((v22 - 3) > 1)
      {
        if (v22 == 1)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%lu");
        }
        else if (v22 == 2)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%c %lu");
        }
        else
        {
          cstdlib_strcpy(__dst, __src);
        }
        unsigned int v18 = __dst;
        uint64_t v19 = a1;
        unsigned int v17 = v16;
      }
      else
      {
        __sprintf_chk(__dst, 0, 0x80uLL, "%s=", __src);
        unsigned int v17 = appendString(a1, v16, &v24, __dst);
        unsigned int v18 = *v14;
        uint64_t v19 = a1;
        if (!*v14) {
          unsigned int v18 = "<NULL>";
        }
      }
      unsigned int v20 = appendString(v19, v17, &v24, v18);
      __sprintf_chk(__dst, 0, 0x80uLL, " dst %lu %lu}\n", *((unsigned int *)v14 - 3), *((unsigned int *)v14 - 2));
      uint64_t appended = appendString(a1, v20, &v24, __dst);
      ++v12;
      v14 += 4;
    }
    while (v13 != v12);
  }
  return appended;
}

uint64_t ppint_marker_copyParts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 1;
  if (!a1 || !a3) {
    return result;
  }
  if (marker_hasNonConstCharPtrArg(*(_DWORD *)(a1 + 20)))
  {
    int v7 = *(const char **)(a1 + 40);
    if (v7) {
      int v8 = cstdlib_strlen(v7);
    }
    else {
      int v8 = 0;
    }
    uint64_t result = heap_Alloc(a2, (v8 + 1));
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    if (v8) {
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 40));
    }
    else {
      *(unsigned char *)uint64_t result = 0;
    }
    *(void *)(a3 + 40) = v9;
  }
  unsigned int v10 = *(const char **)(a1 + 48);
  if (v10)
  {
    int v11 = cstdlib_strlen(v10);
    uint64_t result = heap_Alloc(a2, (v11 + 1));
    if (!result) {
      return result;
    }
    uint64_t v12 = result;
    if (v11) {
      cstdlib_strcpy((char *)result, *(const char **)(a1 + 48));
    }
    else {
      *(unsigned char *)uint64_t result = 0;
    }
    *(void *)(a3 + 48) = v12;
  }
  return 1;
}

unint64_t ppint_marker_freeParts(unint64_t result, void *a2)
{
  if (result)
  {
    unint64_t v3 = result;
    uint64_t result = marker_hasNonConstCharPtrArg(*(_DWORD *)(result + 20));
    if (result)
    {
      uint64_t v4 = *(void *)(v3 + 40);
      if (v4)
      {
        uint64_t result = (unint64_t)heap_Free(a2, v4);
        *(void *)(v3 + 40) = 0;
      }
    }
    uint64_t v5 = *(void *)(v3 + 48);
    if (v5)
    {
      uint64_t result = (unint64_t)heap_Free(a2, v5);
      *(void *)(v3 + 48) = 0;
    }
  }
  return result;
}

char *ppint_marker_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  unsigned int v25 = 256;
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 256, 1);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (char *)v8;
  unsigned int v10 = a4 >> 6;
  __sprintf_chk(__dst, 0, 0x80uLL, "%s, %lu markers:\n", a2, a4 >> 6);
  uint64_t appended = appendString(a1, v9, &v25, __dst);
  if (a4 >= 0x40)
  {
    uint64_t v12 = 0;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    int v14 = (unsigned int *)(a3 + 28);
    do
    {
      int __src = "UNKNOWN";
      int v23 = 0;
      if (v12)
      {
        uint64_t v15 = v14[1];
        if (*(_DWORD *)(a3 + ((unint64_t)(v12 - 1) << 6) + 32) > v15)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "ERROR: TSODataDump - Markers are out of order: posCur %lu -> %lu  [OUT OF ORDER!]\n", *(unsigned int *)(a3 + ((unint64_t)(v12 - 1) << 6) + 32), v15);
          uint64_t appended = appendString(a1, appended, &v25, __dst);
        }
      }
      __sprintf_chk(__dst, 0, 0x80uLL, "{%lu %lu:", *(v14 - 1), *v14);
      unsigned int v16 = appendString(a1, appended, &v25, __dst);
      marker_tag2string(*(v14 - 2), (const char **)&__src, &v23);
      if ((v23 - 3) > 1)
      {
        if (v23 == 1)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%lu");
        }
        else if (v23 == 2)
        {
          __sprintf_chk(__dst, 0, 0x80uLL, "%s=%c %lu");
        }
        else
        {
          cstdlib_strcpy(__dst, __src);
        }
        unsigned int v18 = __dst;
        uint64_t v19 = a1;
        unsigned int v17 = v16;
      }
      else
      {
        __sprintf_chk(__dst, 0, 0x80uLL, "%s=", __src);
        unsigned int v17 = appendString(a1, v16, &v25, __dst);
        unsigned int v18 = *(char **)(v14 + 3);
        uint64_t v19 = a1;
      }
      unsigned int v20 = appendString(v19, v17, &v25, v18);
      if (v14[7] && *(void *)(v14 + 5))
      {
        cstdlib_strcpy(__dst, " EXT=");
        unint64_t v21 = appendString(a1, v20, &v25, __dst);
        unsigned int v20 = appendString(a1, v21, &v25, *(const char **)(v14 + 5));
      }
      __sprintf_chk(__dst, 0, 0x80uLL, " dst %lu %lu}\n", v14[1], v14[2]);
      uint64_t appended = appendString(a1, v20, &v25, __dst);
      ++v12;
      v14 += 16;
    }
    while (v13 != v12);
  }
  return appended;
}

uint64_t ttteg_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2288001025;
  }
  uint64_t result = 0;
  *a2 = &ITtteg;
  return result;
}

uint64_t ttteg_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2288001031;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    int __s1 = 0;
    uint64_t v25 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    if ((InitRsrcFunction(a3, a4, &v25) & 0x80000000) == 0)
    {
      unsigned int v10 = (void *)heap_Calloc(*(void **)(v25 + 8), 1, 136);
      if (v10)
      {
        uint64_t v11 = (uint64_t)v10;
        *unsigned int v10 = a3;
        v10[1] = a4;
        v10[15] = safeh_GetNullHandle();
        *(void *)(v11 + 128) = v12;
        uint64_t Object = objc_GetObject(*(void *)(v25 + 48), (uint64_t)"SYNTHSTREAM", &v23);
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
        *(void *)(v11 + 40) = *(void *)(v23 + 8);
        uint64_t Object = sub_ObjOpen(a3, a4, (uint64_t *)(v11 + 16));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
        int v14 = *(void **)(v25 + 8);
        *(_OWORD *)unint64_t v21 = xmmword_220721FF0;
        *(void *)&v21[16] = 0;
        if (!vector_ObjOpen(v14, (long long *)v21, 1, (uint64_t *)(v11 + 24)))
        {
          uint64_t v11 = 0;
LABEL_35:
          uint64_t v5 = 0;
          *a5 = v11;
          *((_DWORD *)a5 + 2) = 269;
          return v5;
        }
        if ((paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", &__s1) & 0x80000000) != 0)
        {
          *(_DWORD *)(v11 + 32) = 0;
          uint64_t Object = paramc_ParamSetStr(*(void *)(v25 + 40), (uint64_t)"rulesetsfrommarkup", "0");
          if ((Object & 0x80000000) != 0) {
            goto LABEL_36;
          }
        }
        else
        {
          if (__s1)
          {
            int v15 = *__s1;
            if (*__s1)
            {
              if (LH_stricmp(__s1, "true")) {
                int v15 = cstdlib_strcmp(__s1, "1") == 0;
              }
              else {
                int v15 = 1;
              }
            }
          }
          else
          {
            int v15 = 0;
          }
          *(_DWORD *)(v11 + 32) = v15;
        }
        uint64_t v16 = *(void *)(v25 + 40);
        *(void *)unint64_t v21 = v11;
        *(_OWORD *)&v21[8] = xmmword_26D213440;
        uint64_t Object = paramc_ListenerAdd(v16, "rulesetsfrommarkup", v21);
        if ((Object & 0x80000000) != 0)
        {
LABEL_36:
          uint64_t v5 = Object;
          ttteg_pObjClose(v11);
          return v5;
        }
        *(_DWORD *)(v11 + 112) = 0;
        if ((paramc_ParamGetStr(*(void *)(v25 + 40), (uint64_t)"clcpppipelinemode", &v22) & 0x80000000) == 0
          && v22
          && *v22)
        {
          *(_DWORD *)(v11 + 112) = 1;
        }
        else if (!*(_DWORD *)(v11 + 112))
        {
          *(_DWORD *)unint64_t v21 = 0;
          uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v11 + 120);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_36;
          }
          if ((int)paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)v21) < 0) {
            unsigned __int16 v17 = 10;
          }
          else {
            unsigned __int16 v17 = *(_WORD *)v21;
          }
          int UInt = paramc_ParamGetUInt(*(void *)(v25 + 40), (uint64_t)"retttnumframesinblock", (unsigned int *)v21);
          __int16 v19 = *(_WORD *)v21;
          if (UInt < 0) {
            __int16 v19 = 10;
          }
          nuance_pcre_Init(*(void **)(v11 + 120), *(void *)(v11 + 128), v17, v19);
          goto LABEL_34;
        }
        uint64_t Object = esc_seq_init(a3, a4, (uint64_t *)(v11 + 120));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_36;
        }
LABEL_34:
        uint64_t Object = paramc_ParamSetInt(*(void *)(v25 + 40), (uint64_t)"enablerett", 1u);
        if ((Object & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      return 2288001034;
    }
  }
  return v5;
}

uint64_t ttteg_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    if (a1)
    {
      if ((InitRsrcFunction((_WORD *)*a1, a1[1], &v8) & 0x80000000) == 0)
      {
        int Size = vector_GetSize(a1[3]);
        if (Size)
        {
          unsigned int v6 = Size - 1;
          do
          {
            if (!vector_GetElemAt(a1[3], v6, &v7)) {
              break;
            }
            ruleset_UnloadRules((uint64_t)v7);
            ruleset_ObjClose(v7);
            vector_Remove(a1[3], v6--);
          }
          while (v6 != -1);
        }
      }
    }
    ttteg_ProcessEnd(a1, a2);
    return ttteg_pObjClose((uint64_t)a1);
  }
  return result;
}

uint64_t ttteg_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 269, 136);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *a3 = ttteg_ResourceTypes_SZ_RETTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t ttteg_ResourceLoad(_WORD **a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  v36[128] = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v7 = 2288001031;
  uint64_t v33 = 0;
  unsigned int v32 = 0;
  if (!a3 || !a7) {
    return v7;
  }
  if (a4)
  {
    BOOL v14 = a6 != 0;
    if (!a5 && a6) {
      return v7;
    }
  }
  else
  {
    if (!a5 || !a6) {
      return v7;
    }
    BOOL v14 = 1;
  }
  uint64_t Str = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if ((InitRsrcFunction(*a1, (int)a1[1], &v35) & 0x80000000) != 0) {
    return v7;
  }
  if (a4)
  {
    if (*a4)
    {
      v36[0] = 0;
      if (vector_GetElemAt((uint64_t)a1[3], 0, v36))
      {
        int v16 = 0;
        while (!*(_DWORD *)(v36[0] + 44))
        {
          if (*(void *)(v36[0] + 24))
          {
            Name = (const char *)ruleset_GetName(v36[0]);
            if (!cstdlib_strcmp(Name, a4)) {
              return 2288001048;
            }
            if (*(void *)(v36[0] + 32))
            {
              AbsName = (const char *)ruleset_GetAbsName(v36[0]);
LABEL_18:
              if (!cstdlib_strcmp(AbsName, a4)) {
                return 2288001048;
              }
            }
          }
          if (!vector_GetElemAt((uint64_t)a1[3], (unsigned __int16)++v16, v36)) {
            goto LABEL_25;
          }
        }
        AbsName = (const char *)ruleset_GetName(v36[0]);
        goto LABEL_18;
      }
    }
  }
LABEL_25:
  char v19 = !v14;
  if (!a5) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0)
  {
    uint64_t v33 = a5;
    unsigned int v32 = a6;
LABEL_36:
    uint64_t v22 = ruleset_ObjOpen(*a1, (uint64_t)a1[1], (uint64_t)a1[15], (uint64_t)a1[16], (uint64_t)a1[2], v25);
    if ((v22 & 0x80000000) == 0)
    {
      uint64_t Rules = ruleset_LoadRules((uint64_t)v25, a4, 0, a3, v33, v32);
      if ((Rules & 0x80000000) == 0)
      {
        if (vector_Add((uint64_t)a1[3], v25) == 1)
        {
          *(void *)a7 = v26;
          *(_DWORD *)(a7 + 8) = 300;
          goto LABEL_45;
        }
        uint64_t Rules = 2288001034;
      }
      ruleset_ObjClose((_WORD **)v25);
      goto LABEL_45;
    }
LABEL_41:
    uint64_t Rules = v22;
    goto LABEL_45;
  }
  unsigned int v24 = 0;
  bzero(v36, 0x400uLL);
  uint64_t Rules = brk_DataOpenEx(*(void *)(v35 + 24), (uint64_t)a4, 1, (uint64_t)&v34);
  if (cstdlib_strstr(a3, ";loader=broker") && (Rules & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(v35 + 40), (uint64_t)"langcode", &v24);
    if ((Str & 0x80000000) == 0)
    {
      int v21 = brokeraux_ComposeBrokerString(v35, a4, 0, 1, v24, 0, 0, v36, 0x400uLL);
      if (v21 < 0)
      {
        uint64_t Rules = v21 | 0x88602000;
        goto LABEL_45;
      }
      uint64_t Rules = brk_DataOpenEx(*(void *)(v35 + 24), (uint64_t)v36, 0, (uint64_t)&v34);
      goto LABEL_34;
    }
    return Str;
  }
LABEL_34:
  if ((Rules & 0x80000000) == 0)
  {
    uint64_t v22 = brk_DataMapEx(*(void *)(v35 + 24), v34, 0, (uint64_t)&v32, (uint64_t)&v33);
    if ((v22 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
LABEL_45:
  if (v33)
  {
    brk_DataUnmap(*(void *)(v35 + 24), v34, v33);
    uint64_t v33 = 0;
  }
  if (v34) {
    brk_DataClose(*(void *)(v35 + 24), v34);
  }
  return Rules;
}

uint64_t ttteg_ResourceUnload(uint64_t a1, int a2, _WORD *a3, int a4)
{
  uint64_t v11 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v7 = safeh_HandleCheck((uint64_t)a3, a4, 300, 8);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2288002061;
  if (!vector_GetElemAt(*(void *)(a1 + 24), 0, &v11)) {
    return v8;
  }
  unsigned int v9 = 0;
  while (v11[10] != a3)
  {
    if (!vector_GetElemAt(*(void *)(a1 + 24), ++v9, &v11)) {
      return v8;
    }
  }
  uint64_t v7 = ruleset_UnloadRules((uint64_t)v11);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = ruleset_ObjClose(v11);
  if ((v8 & 0x80000000) == 0) {
    vector_Remove(*(void *)(a1 + 24), v9);
  }
  return v8;
}

uint64_t ttteg_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t Int = 2288001031;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 269, 136) & 0x80000000) != 0) {
    return 2288001032;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v15) & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    a1[10] = a3;
    a1[11] = a4;
    do
    {
      int v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, void, void, _WORD **))a1[5] + 8))(a3, a4, 134, ttteg_ProcessStart_szInput[v9], 0, 0, a1 + 12);
      if ((v10 & 0x80000000) == 0) {
        break;
      }
    }
    while (v9++ != 6);
    if (v10 < 0) {
      a1[12] = 0;
    }
    uint64_t Int = paramc_ParamGetInt(*(void *)(v15 + 40), (uint64_t)"enablerett", &v14);
    if ((Int & 0x80000000) != 0) {
      goto LABEL_17;
    }
    if (v14 == 1)
    {
      uint64_t v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, void, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              0,
              a1 + 6);
      if ((v12 & 0x80000000) != 0)
      {
        uint64_t Int = v12;
LABEL_17:
        ttteg_ProcessEnd(a1, a2);
        return Int;
      }
      uint64_t Int = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, uint64_t, _WORD **))a1[5] + 8))(a3, a4, 134, "text/plain;charset=utf-8",
              0,
              1,
              a1 + 8);
      if ((Int & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    else
    {
      a1[6] = 0;
      a1[8] = 0;
    }
  }
  return Int;
}

uint64_t ttteg_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v51 = 0;
  int __src = 0;
  uint64_t v50 = 0;
  __s = 0;
  uint64_t v48 = 0;
  uint64_t v45 = 0;
  size_t __n = 0;
  int v44 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 269, 136);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v51) & 0x80000000) == 0)
  {
    uint64_t Int = paramc_ParamGetInt(*(void *)(v51 + 40), (uint64_t)"enablerett", &v44);
    if ((Int & 0x80000000) != 0) {
      goto LABEL_45;
    }
    if (!*(void *)(a1 + 48))
    {
      uint64_t Str = 0;
LABEL_56:
      int v15 = 1;
      goto LABEL_57;
    }
    uint64_t Str = 0;
    int v15 = 1;
    if (!*(void *)(a1 + 64) || !v44) {
      goto LABEL_57;
    }
    *a5 = 0;
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, size_t *))(*(void *)(a1 + 40) + 144))(*(void *)(a1 + 48), *(void *)(a1 + 56), (char *)&__n + 4, &__n);
    if ((v7 & 0x80000000) == 0)
    {
      int v15 = *(_DWORD *)(a1 + 112) | __n;
      if (!v15)
      {
        uint64_t Str = 0;
LABEL_57:
        *a5 = v15;
        return Str;
      }
      uint64_t v7 = (*(uint64_t (**)(void, void, void **, char *))(*(void *)(a1 + 40) + 88))(*(void *)(a1 + 48), *(void *)(a1 + 56), &__src, (char *)&__n + 4);
      if ((v7 & 0x80000000) == 0)
      {
        if (log_HasTraceTuningDataSubscriber(*(void *)(v51 + 32)))
        {
          log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 4, (uint64_t)"%s%s", v16, v17, v18, v19, v20, "BEG");
          log_OutTraceTuningDataBinary(*(void *)(v51 + 32), 5, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
            (uint64_t)__src,
            HIDWORD(__n));
        }
        int v21 = (char *)heap_Alloc(*(void *)(v51 + 8), (HIDWORD(__n) + 1));
        __s = v21;
        if (!v21) {
          return 2288001034;
        }
        if (__src)
        {
          cstdlib_memcpy(v21, __src, HIDWORD(__n));
          int v21 = __s;
        }
        v21[HIDWORD(__n)] = 0;
        uint64_t Int = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), HIDWORD(__n));
        if ((Int & 0x80000000) == 0)
        {
          int __src = 0;
          uint64_t Str = paramc_ParamGetStr(*(void *)(v51 + 40), (uint64_t)"langcode", &v50);
          if ((Str & 0x80000000) == 0)
          {
            log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v9, v10, v11, v12, v13, "BEG");
            int Size = vector_GetSize(*(void *)(a1 + 24));
            uint64_t v23 = 0;
            if (Size)
            {
              unsigned int v24 = Size - 1;
              while (1)
              {
                uint64_t v45 = 0;
                if (vector_GetElemAt(*(void *)(a1 + 24), v24, &v45))
                {
                  if (*((_DWORD *)v45 + 11))
                  {
                    if (ruleset_GetEnabledForLng((uint64_t)v45, v50) == 1)
                    {
                      uint64_t v25 = __s;
                      __s = v23;
                      uint64_t Str = ruleset_Rewrite(v45, v25, (const char **)&__s);
                      uint64_t v23 = v25;
                      if ((Str & 0x80000000) != 0) {
                        break;
                      }
                    }
                  }
                }
                if (--v24 == -1) {
                  goto LABEL_27;
                }
              }
            }
            else
            {
LABEL_27:
              if (*(void *)(a1 + 96))
              {
                size_t v9 = cstdlib_strlen(__s);
                if (v9) {
                  (*(void (**)(void, void, char *))(*(void *)(a1 + 40) + 176))(*(void *)(a1 + 96), *(void *)(a1 + 104), __s);
                }
              }
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v9, v10, v11, v12, v13, "END");
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%s %s%s", v26, v27, v28, v29, v30, "BEG");
              uint64_t v45 = 0;
              int v31 = vector_GetSize(*(void *)(a1 + 24));
              if (v31)
              {
                unsigned int v37 = v31 - 1;
                do
                {
                  uint64_t v45 = 0;
                  if (vector_GetElemAt(*(void *)(a1 + 24), v37, &v45))
                  {
                    if (!*((_DWORD *)v45 + 11) && ruleset_GetEnabledForLng((uint64_t)v45, v50) == 1)
                    {
                      long long v38 = __s;
                      __s = v23;
                      uint64_t Str = ruleset_Rewrite(v45, v38, (const char **)&__s);
                      uint64_t v23 = v38;
                      if ((Str & 0x80000000) != 0) {
                        break;
                      }
                    }
                  }
                  --v37;
                }
                while (v37 != -1);
              }
              log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 7, (uint64_t)"%s%s %s%u %s%s", v32, v33, v34, v35, v36, "END");
              if ((Str & 0x80000000) == 0)
              {
                if (__s)
                {
                  size_t v39 = cstdlib_strlen(__s);
                  if (v39)
                  {
                    uint64_t v40 = (*(uint64_t (**)(void, void, void **, size_t))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 64), *(void *)(a1 + 72), &v48, v39);
                    if ((v40 & 0x80000000) == 0)
                    {
                      cstdlib_memcpy(v48, __s, v39);
                      log_OutTraceTuningDataBinary(*(void *)(v51 + 32), 6, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                        (uint64_t)v48,
                        v39);
                      uint64_t v40 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 40) + 120))(*(void *)(a1 + 64), *(void *)(a1 + 72), v39);
                    }
                    uint64_t Str = v40;
                  }
                }
              }
              uint64_t v25 = v23;
            }
            goto LABEL_47;
          }
LABEL_46:
          uint64_t v25 = 0;
LABEL_47:
          log_OutTraceTuningData(*(uint64_t ***)(v51 + 32), 4, (uint64_t)"%s%s %s%u", v9, v10, v11, v12, v13, "END");
          if (v25) {
            heap_Free(*(void **)(v51 + 8), (uint64_t)v25);
          }
          if (__s) {
            heap_Free(*(void **)(v51 + 8), (uint64_t)__s);
          }
          if (!*(_DWORD *)(a1 + 112))
          {
            int v41 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 72))(*(void *)(a1 + 64), *(void *)(a1 + 72));
            if (v41 >= 0) {
              uint64_t Str = Str;
            }
            else {
              uint64_t Str = v41;
            }
            *(void *)(a1 + 64) = safeh_GetNullHandle();
            *(void *)(a1 + 72) = v42;
          }
          goto LABEL_56;
        }
LABEL_45:
        uint64_t Str = Int;
        goto LABEL_46;
      }
    }
    return v7;
  }
  return 2288001031;
}

uint64_t ttteg_ProcessEnd(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 269, 136);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], NullHandle, v5))
    {
      int v6 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[12], a1[13]);
      if (v6 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v7;
    uint64_t v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[6], a1[7], v8, v9))
    {
      int v10 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[6], a1[7]);
      if (v10 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    a1[6] = safeh_GetNullHandle();
    a1[7] = v11;
    uint64_t v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[8], a1[9], v12, v13))
    {
      int v14 = (*(uint64_t (**)(void, void))(a1[5] + 72))(a1[8], a1[9]);
      if (v14 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v14;
      }
    }
    a1[8] = safeh_GetNullHandle();
    a1[9] = v15;
  }
  return v3;
}

uint64_t ttteg_ParamLearnChange(uint64_t a1, char *__s1, char *a3)
{
  if (!cstdlib_strcmp(__s1, "rulesetsfrommarkup"))
  {
    if (a3)
    {
      int v5 = *a3;
      if (*a3)
      {
        if (LH_stricmp(a3, "true")) {
          int v5 = cstdlib_strcmp(a3, "1") == 0;
        }
        else {
          int v5 = 1;
        }
      }
    }
    else
    {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 32) = v5;
  }
  return 0;
}

uint64_t ttteg_pObjClose(uint64_t a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v9 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v9) & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(v9 + 40);
    uint64_t v7 = a1;
    long long v8 = xmmword_26D213440;
    paramc_ListenerRemove(v3, "rulesetsfrommarkup", (long long *)&v7);
    if (*(void *)(a1 + 40)) {
      objc_ReleaseObject(*(void *)(v9 + 48), (uint64_t)"SYNTHSTREAM");
    }
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4) {
      sub_ObjClose(v4);
    }
    if (*(_DWORD *)(a1 + 112))
    {
      esc_seq_deinit(*(_WORD **)a1, *(void *)(a1 + 8), *(void **)(a1 + 120), *(void *)(a1 + 128));
    }
    else
    {
      nuance_pcre_DeInit(*(void **)(a1 + 120), *(void *)(a1 + 128));
      nuance_pcre_ObjClose(*(void *)(a1 + 120), *(void *)(a1 + 128));
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      vector_ObjClose(v5);
    }
    heap_Free(*(void **)(v9 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t ruleset_ObjOpen(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v27 = 0;
  unsigned int v26 = 0;
  uint64_t v6 = 2288001031;
  if (a5 && a6 && (InitRsrcFunction(a1, a2, &v27) & 0x80000000) == 0)
  {
    cstdlib_memset(a6, 0, 0xA8uLL);
    *a6 = a1;
    a6[1] = a2;
    a6[2] = a5;
    *((_DWORD *)a6 + 10) = 1;
    int v13 = (void *)v27[1];
    long long v24 = xmmword_26D213450;
    uint64_t v25 = off_26D213460;
    if (vector_ObjOpen(v13, &v24, 8, a6 + 10))
    {
      LODWORD(v24) = PCRE_Adapter_Create(1, (uint64_t)(a6 + 13), a1, a2);
      if ((v24 & 0x80000000) == 0)
      {
        uint64_t NullHandle = safeh_GetNullHandle();
        if (safeh_HandlesEqual(a3, a4, NullHandle, v19))
        {
          *(_OWORD *)(a6 + 11) = *(_OWORD *)(a6 + 13);
        }
        else
        {
          a6[11] = a3;
          a6[12] = a4;
        }
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttmaxpcreframeblocks", &v26);
        paramc_ParamGetUInt(v27[5], (uint64_t)"retttnumframesinblock", &v26);
        LODWORD(v24) = PCRE_ObjOpen((uint64_t *)a6[13], a6[14], 0);
        if ((v24 & 0x80000000) == 0)
        {
          uint64_t v20 = 0;
          for (uint64_t i = a6 + 16; ; i += 2)
          {
            *(i - 1) = PCRE_CompilePattern(a6[13], a6[14], (uint64_t)&HARDCODED_RULESET_PATTERN[v20], 0, 0, 0, (int *)&v24);
            *uint64_t i = v22;
            uint64_t v6 = v24;
            if ((v24 & 0x80000000) != 0) {
              break;
            }
            v20 += 128;
            if (v20 == 384) {
              return v6;
            }
          }
        }
      }
      vector_ObjClose(a6[10]);
      a6[10] = 0;
      PCRE_ObjClose(a6[13], a6[14]);
      return v24;
    }
    else
    {
      log_OutPublic(v27[4], (uint64_t)"RETTT", 11002, 0, v14, v15, v16, v17, v24);
      return 2288001034;
    }
  }
  return v6;
}

uint64_t *rule_CopyParts(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  int v9 = 0;
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *result;
    if (!*result) {
      return 0;
    }
    uint64_t result = 0;
    if (a3 && v3[2])
    {
      if ((PCRE_CopyPattern(v4, v3[1], (uint64_t)a3, &v9) & 0x80000000) == 0)
      {
        int v7 = cstdlib_strlen((const char *)v3[2]);
        long long v8 = (char *)heap_Alloc(a2, (v7 + 1));
        a3[2] = (uint64_t)v8;
        if (v8)
        {
          cstdlib_strcpy(v8, (const char *)v3[2]);
          return (uint64_t *)1;
        }
        PCRE_FreePattern(*a3, a3[1]);
      }
      return 0;
    }
  }
  return result;
}

void *rule_FreeParts(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (void *)*result;
    if (result)
    {
      uint64_t result = (void *)PCRE_FreePattern((uint64_t)result, v3[1]);
      *uint64_t v3 = 0;
    }
    uint64_t v4 = v3[2];
    if (v4)
    {
      uint64_t result = heap_Free(a2, v4);
      v3[2] = 0;
    }
  }
  return result;
}

uint64_t ruleset_ObjClose(_WORD **a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v6 = 0;
  if (a1 && (InitRsrcFunction(*a1, (int)a1[1], &v6) & 0x80000000) == 0)
  {
    if (a1[3]) {
      ruleset_UnloadRules((uint64_t)a1);
    }
    uint64_t v3 = (uint64_t)a1[10];
    if (v3)
    {
      vector_ObjClose(v3);
      a1[10] = 0;
    }
    for (uint64_t i = 0; i != 6; i += 2)
      PCRE_FreePattern((uint64_t)a1[i + 15], (int)a1[i + 16]);
    PCRE_ObjClose((uint64_t)a1[13], (int)a1[14]);
    cstdlib_memset(a1, 0, 0xA8uLL);
    return 0;
  }
  return v1;
}

uint64_t ruleset_UnloadRules(uint64_t a1)
{
  uint64_t v1 = 2288001031;
  uint64_t v28 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v28) & 0x80000000) == 0)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%s", v3, v4, v5, v6, v7, "BEG");
    uint64_t v29 = 0;
    if (!*(void *)(a1 + 24) || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v29) & 0x80000000) != 0)
    {
LABEL_21:
      log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%u", v8, v9, v10, v11, v12, "END");
      return 0;
    }
    int Size = (unsigned __int16)vector_GetSize(*(void *)(a1 + 80));
    if (Size)
    {
      unsigned int v19 = Size - 1;
      while (vector_Remove(*(void *)(a1 + 80), v19))
      {
        if (!(unsigned __int16)v19--) {
          goto LABEL_9;
        }
      }
      log_OutPublic(*(void *)(v29 + 32), (uint64_t)"RETTT", 11024, 0, v14, v15, v16, v17, v27);
      goto LABEL_21;
    }
LABEL_9:
    uint64_t v21 = *(void *)(a1 + 32);
    if (v21)
    {
      heap_Free(*(void **)(v28 + 8), v21);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v22 = *(void *)(a1 + 56);
    if (v22)
    {
      heap_Free(*(void **)(v28 + 8), v22);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v23 = *(void *)(a1 + 64);
    if (v23)
    {
      heap_Free(*(void **)(v28 + 8), v23);
      *(void *)(a1 + 64) = 0;
    }
    uint64_t v24 = *(void *)(a1 + 72);
    if (v24)
    {
      heap_Free(*(void **)(v28 + 8), v24);
      *(void *)(a1 + 72) = 0;
    }
    log_OutTraceTuningData(*(uint64_t ***)(v28 + 32), 3, (uint64_t)"%s%s %s%u", v13, v14, v15, v16, v17, "END");
    uint64_t v25 = *(void *)(a1 + 24);
    if (!v25) {
      return 0;
    }
    heap_Free(*(void **)(v28 + 8), v25);
    uint64_t v1 = 0;
    *(void *)(a1 + 24) = 0;
  }
  return v1;
}

uint64_t ruleset_GetName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t ruleset_GetAbsName(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

uint64_t ruleset_SetEnabled(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 40) = a2;
  }
  return result;
}

uint64_t ruleset_GetEnabled(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

uint64_t ruleset_GetEnabledForLng(uint64_t result, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v2 = result;
    if (!*(_DWORD *)(result + 40)) {
      return 0;
    }
    uint64_t result = 0;
    if (a2 && *(void *)(v2 + 56))
    {
      cstdlib_strcpy(v9, a2);
      if (!LH_stricmp("*", *(char **)(v2 + 56))) {
        return 1;
      }
      if (cstdlib_strlen(*(const char **)(v2 + 56)))
      {
        uint64_t v3 = 0;
        unsigned int v4 = 1;
        do
        {
          *(unsigned char *)(*(void *)(v2 + 56) + v3) = cstdlib_tolower(*(char *)(*(void *)(v2 + 56) + v3));
          uint64_t v3 = v4;
          BOOL v5 = cstdlib_strlen(*(const char **)(v2 + 56)) > v4++;
        }
        while (v5);
      }
      if (cstdlib_strlen(v9))
      {
        uint64_t v6 = 0;
        unsigned int v7 = 1;
        do
        {
          v9[v6] = cstdlib_tolower(v9[v6]);
          uint64_t v6 = v7;
          BOOL v5 = cstdlib_strlen(v9) > v7++;
        }
        while (v5);
      }
      if (cstdlib_strstr(*(char **)(v2 + 56), v9)) {
        return 1;
      }
      uint64_t v8 = *(unsigned __int8 **)(v2 + 56);
      if (v9[0] == *v8 && v9[1] == v8[1]) {
        return v8[2] == 42;
      }
      return 0;
    }
  }
  return result;
}

uint64_t ruleset_LoadRules(uint64_t a1, const char *a2, const char *a3, const char *a4, uint64_t a5, unsigned int a6)
{
  *(void *)&v94[1023] = *MEMORY[0x263EF8340];
  uint64_t v90 = a5;
  unsigned int v89 = a6;
  uint64_t v6 = 2288001031;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  if (a1 && a5 && a6)
  {
    if (*(void *)(a1 + 24)) {
      return 2288001041;
    }
    uint64_t v11 = a2;
    *(void *)(a1 + 32) = 0;
    if (!a2 || !*a2) {
      uint64_t v11 = "in-memory RETT";
    }
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v88) & 0x80000000) == 0)
    {
      uint64_t v12 = *(void *)(v88 + 8);
      int v13 = cstdlib_strlen(v11);
      uint64_t v14 = (char *)heap_Alloc(v12, (v13 + 1));
      *(void *)(a1 + 24) = v14;
      if (v14)
      {
        cstdlib_strcpy(v14, v11);
        if ((paramc_ParamGetStr(*(void *)(v88 + 40), (uint64_t)"__NUAN_alternative_esc_seq__", &v87) & 0x80000000) == 0
          && v87
          && !cstdlib_strcmp("__NUAN_alternative_esc_seq__", *(const char **)(a1 + 24)))
        {
          *(_DWORD *)(a1 + 44) = 1;
        }
        if (!a3) {
          goto LABEL_19;
        }
        uint64_t v24 = *(void *)(v88 + 8);
        int v25 = cstdlib_strlen(a3);
        unsigned int v26 = (char *)heap_Alloc(v24, (v25 + 1));
        *(void *)(a1 + 32) = v26;
        if (v26)
        {
          cstdlib_strcpy(v26, a3);
LABEL_19:
          log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%s %s%s", v19, v20, v21, v22, v23, "BEG");
          if (!cstdlib_strcmp(a4, "application/x-vocalizer-rettt+bin")
            || !cstdlib_strcmp(a4, "application/x-vocalizer-rettt+bin;loader=broker"))
          {
            uint64_t v6 = 2288001025;
            goto LABEL_29;
          }
          int v86 = 0;
          *(void *)int v91 = 0;
          if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), v91) & 0x80000000) != 0) {
            goto LABEL_29;
          }
          if ((ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v34, v35) & 0x80000000) != 0)
          {
LABEL_25:
            uint64_t v41 = 11020;
            goto LABEL_26;
          }
          while (1)
          {
            unsigned int v36 = ruleset_IsSectionHeader((unsigned __int8 *)&__s, "header");
            uint64_t v39 = ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v37, v38);
            uint64_t v40 = v39;
            if (v36) {
              break;
            }
            if ((v39 & 0x80000000) != 0) {
              goto LABEL_25;
            }
          }
          if ((v39 & 0x80000000) != 0) {
            goto LABEL_40;
          }
          if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0))
          {
LABEL_34:
            unsigned int v45 = cstdlib_strlen(&__s);
            if (*(unsigned char *)(v90 - 2) == 13) {
              int v46 = 2;
            }
            else {
              int v46 = 1;
            }
            uint64_t v47 = -2;
            if (*(unsigned char *)(v90 - 2) != 13) {
              uint64_t v47 = -1;
            }
            uint64_t v90 = v90 + v47 - v45;
            v89 += v45 + v46;
            --v86;
            goto LABEL_40;
          }
          while (1)
          {
            uint64_t v48 = *(void *)v91;
            p_s = &__s;
            log_OutText(*(void *)(*(void *)v91 + 32), (uint64_t)"RETTT", 4, 0, (uint64_t)"ruleset_ScanHeaderLine: '%s'", v42, v43, v44, (uint64_t)&__s);
            for (uint64_t i = v94; ; ++i)
            {
              int v55 = *p_s;
              if (v55 != 9 && v55 != 32) {
                break;
              }
              ++p_s;
            }
            uint64_t v56 = p_s;
            if (!*p_s) {
              break;
            }
            while (1)
            {
              if (!(_BYTE)v55) {
                goto LABEL_61;
              }
              if (v55 == 32) {
                break;
              }
              if (v55 == 61)
              {
                char *v56 = 0;
                int v60 = v56 + 1;
                goto LABEL_66;
              }
              char v58 = *++v56;
              LOBYTE(v55) = v58;
              ++i;
            }
            char *v56 = 0;
            while (1)
            {
              int v59 = *(unsigned __int8 *)i;
              if (v59 != 9 && v59 != 32) {
                break;
              }
              ++i;
            }
            if (!*i)
            {
LABEL_61:
              uint64_t v57 = *(void *)(v48 + 32);
              goto LABEL_70;
            }
            size_t v61 = cstdlib_strlen("=");
            if (cstdlib_strncmp(i, "=", v61))
            {
              log_OutPublic(*(void *)(v48 + 32), (uint64_t)"RETTT", 11011, (uint64_t)"%s%s", v50, v51, v52, v53, "separator");
              goto LABEL_71;
            }
            int v60 = i + 1;
LABEL_66:
            while (1)
            {
              int v62 = *(unsigned __int8 *)v60;
              if (v62 != 9 && v62 != 32) {
                break;
              }
              ++v60;
            }
            if (!*v60)
            {
              uint64_t v57 = *(void *)(v48 + 32);
              goto LABEL_70;
            }
            for (uint64_t j = cstdlib_strlen(v60); ; v60[j] = 0)
            {
              int v67 = v60[--j];
              if (v67 != 32 && v67 != 9) {
                break;
              }
            }
            log_OutText(*(void *)(v48 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanHeaderLine:  key = '%s'; val = '%s'",
              v63,
              v64,
              v65,
              (uint64_t)p_s);
            if (!LH_stricmp(p_s, "language"))
            {
              int v92 = 0;
              size_t v70 = cstdlib_strlen(v60);
              if ((PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 152), *(void *)(a1 + 160), (uint64_t)v60, v70, 0, 0, 0, &v92) & 0x80000000) == 0)
              {
                if (*(void *)(a1 + 56))
                {
                  log_OutPublic(*(void *)(*(void *)v91 + 32), (uint64_t)"RETTT", 11021, 0, v71, v72, v73, v74, v85);
LABEL_98:
                  uint64_t v40 = 2288001031;
LABEL_40:
                  if (*(void *)(a1 + 56))
                  {
                    uint64_t v6 = v40;
                    if ((v40 & 0x80000000) == 0)
                    {
                      uint64_t v6 = ruleset_ReadRules(a1, &v90, &v89, &v86);
                      if ((v6 & 0x80000000) == 0)
                      {
                        log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%s %s%s %s%s %s%u", v31, v32, v33, v34, v35, "END");
                        return 0;
                      }
                    }
LABEL_29:
                    log_OutTraceTuningData(*(uint64_t ***)(v88 + 32), 1, (uint64_t)"%s%s %s%u", v31, v32, v33, v34, v35, "END");
                    ruleset_UnloadRules(a1);
                    return v6;
                  }
                  uint64_t v41 = 11022;
LABEL_26:
                  log_OutPublic(*(void *)(*(void *)v91 + 32), (uint64_t)"RETTT", v41, 0, v32, v33, v34, v35, v85);
                  goto LABEL_29;
                }
                uint64_t v75 = *(void *)(*(void *)v91 + 8);
                int v76 = cstdlib_strlen(v60);
                int v77 = (char *)heap_Alloc(v75, (v76 + 1));
                *(void *)(a1 + 56) = v77;
                if (!v77) {
                  goto LABEL_96;
                }
                cstdlib_strcpy(v77, v60);
              }
            }
            if (!LH_stricmp(p_s, "type"))
            {
              if (*(void *)(a1 + 64)) {
                goto LABEL_98;
              }
              unsigned int v78 = cstdlib_strlen(v60);
              uint64_t v79 = heap_Calloc(*(void **)(*(void *)v91 + 8), v78 + 1, 1);
              *(void *)(a1 + 64) = v79;
              if (!v79) {
                goto LABEL_96;
              }
              uint64_t v80 = v78;
              if (v78)
              {
                uint64_t v81 = 0;
                do
                {
                  *(unsigned char *)(*(void *)(a1 + 64) + v81) = ssft_tolower(v60[v81]);
                  ++v81;
                }
                while (v80 != v81);
              }
            }
            if (!LH_stricmp(p_s, "type_out"))
            {
              if (*(void *)(a1 + 72)) {
                goto LABEL_98;
              }
              int v82 = cstdlib_strlen(v60);
              uint64_t v83 = (char *)heap_Calloc(*(void **)(*(void *)v91 + 8), (v82 + 1), 1);
              *(void *)(a1 + 72) = v83;
              if (!v83)
              {
LABEL_96:
                uint64_t v40 = 2288001034;
                goto LABEL_40;
              }
              cstdlib_strcpy(v83, v60);
            }
LABEL_71:
            uint64_t v40 = ruleset_ReadDataLine(a1, *(uint64_t *)v91, &v90, &v89, &v86, &__s, v34, v35);
            if ((v40 & 0x80000000) != 0) {
              goto LABEL_40;
            }
            if (ruleset_IsSectionHeader((unsigned __int8 *)&__s, 0)) {
              goto LABEL_34;
            }
          }
          uint64_t v57 = *(void *)(v48 + 32);
LABEL_70:
          log_OutPublic(v57, (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v50, v51, v52, v53, "message");
          goto LABEL_71;
        }
        log_OutPublic(*(void *)(v88 + 32), (uint64_t)"RETTT", 11002, 0, v27, v28, v29, v30, v84);
        ruleset_UnloadRules(a1);
      }
      else
      {
        log_OutPublic(*(void *)(v88 + 32), (uint64_t)"RETTT", 11002, 0, v15, v16, v17, v18, v84);
      }
      return 2288001034;
    }
  }
  return v6;
}

uint64_t ruleset_ReadRules(uint64_t a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v8 = 2288001031;
  int v102 = 0;
  long long __b = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  *(void *)uint64_t v95 = 0;
  cstdlib_memset(&__b, 0, 0x18uLL);
  if (!a2 || !a3 || (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), v95) & 0x80000000) != 0) {
    return v8;
  }
  if ((ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v9, v10) & 0x80000000) == 0)
  {
    while (!ruleset_IsSectionHeader((unsigned __int8 *)&__s, "data")
         && (ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v11, v12) & 0x80000000) == 0)
      ;
  }
  unsigned int v13 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v11, v12);
  if ((v13 & 0x80000000) != 0)
  {
    if ((v13 & 0x1FFF) == 0x17) {
      return 0;
    }
    else {
      return v13;
    }
  }
  LODWORD(v19) = 0;
  do
  {
    unsigned int v94 = v19;
LABEL_10:
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)v95 + 32), 2, (uint64_t)"%s%s %s%s %s%d", v14, v15, v16, v17, v18, "BEG");
    uint64_t v20 = *(void *)v95;
    uint64_t v98 = 0;
    cstdlib_memset(&v100, 0, 0x14uLL);
    log_OutText(*(void *)(v20 + 32), (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine: '%s'", v21, v22, v23, (uint64_t)&__s);
    for (uint64_t i = v104; ; ++i)
    {
      int v29 = *(i - 1);
      if (v29 != 9 && v29 != 32) {
        break;
      }
    }
    if (!*(i - 1))
    {
      log_OutPublic(*(void *)(v20 + 32), (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v24, v25, v26, v27, "message");
LABEL_21:
      uint64_t i = 0;
      goto LABEL_59;
    }
    if (v29 == 92 || (v29 - 48) <= 9)
    {
      log_OutPublic(*(void *)(v20 + 32), (uint64_t)"RETTT", 11015, 0, v24, v25, v26, v27, v92);
      goto LABEL_21;
    }
    int v31 = *i;
    BOOL v32 = *i == 0;
    uint64_t v33 = i;
    if (*i && v31 != v29)
    {
      uint64_t v33 = i;
      do
      {
        if (v31 == 92 && v33[1]) {
          ++v33;
        }
        int v34 = *++v33;
        int v31 = v34;
        BOOL v32 = v34 == 0;
        if (v34) {
          BOOL v35 = v31 == v29;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    if (v32) {
      goto LABEL_34;
    }
    uint64_t v37 = v33 + 1;
    *uint64_t v33 = 0;
    for (uint64_t j = v33 + 4; ; ++j)
    {
      int v39 = (char)*v37;
      int v40 = *v37;
      if (v39 == 45 || v40 == 0) {
        break;
      }
      if (v39 > 108)
      {
        switch(v39)
        {
          case 'm':
            HIDWORD(v100) = 1;
            goto LABEL_52;
          case 's':
            LODWORD(v101) = 1;
            goto LABEL_52;
          case 'x':
            HIDWORD(v101) = 1;
            goto LABEL_52;
        }
        goto LABEL_51;
      }
      if (v39 != 9 && v39 != 32)
      {
        if (v39 == 105)
        {
          LODWORD(v100) = 1;
          goto LABEL_52;
        }
LABEL_51:
        log_OutPublic(*(void *)(v20 + 32), (uint64_t)"RETTT", 11016, (uint64_t)"%s%c", v24, v25, v26, v27, "option");
      }
LABEL_52:
      ++v37;
    }
    while (v40 == 9 || v40 == 32)
    {
      LOBYTE(v40) = *(j - 2);
      ++j;
    }
    if (!(_BYTE)v40)
    {
      uint64_t v36 = *(void *)(v20 + 32);
      goto LABEL_58;
    }
    size_t v71 = cstdlib_strlen("-->");
    if (cstdlib_strncmp(j - 3, "-->", v71))
    {
      log_OutPublic(*(void *)(v20 + 32), (uint64_t)"RETTT", 11011, (uint64_t)"%s%s", v24, v25, v26, v27, "separator");
      goto LABEL_59;
    }
    while (1)
    {
      int v72 = *j;
      if (v72 != 9 && v72 != 32) {
        break;
      }
      ++j;
    }
    if (!*j)
    {
      uint64_t v36 = *(void *)(v20 + 32);
LABEL_58:
      log_OutPublic(v36, (uint64_t)"RETTT", 11026, (uint64_t)"%s%s", v24, v25, v26, v27, "message");
LABEL_59:
      int v42 = 1;
      unsigned int v43 = -2006966265;
      goto LABEL_60;
    }
    if (v72 == 34) {
      uint64_t v73 = j + 1;
    }
    else {
      uint64_t v73 = j;
    }
    if (v72 == 34) {
      int v74 = 34;
    }
    else {
      int v74 = 32;
    }
    uint64_t v98 = v73;
    BOOL v75 = *v73 == 0;
    if (*v73) {
      BOOL v76 = v74 == (char)*v73;
    }
    else {
      BOOL v76 = 1;
    }
    if (v76)
    {
      unsigned int v78 = v73;
    }
    else
    {
      char v77 = *v73;
      unsigned int v78 = v73;
      do
      {
        if (v77 == 92 && v78[1]) {
          ++v78;
        }
        int v80 = (char)*++v78;
        int v79 = v80;
        char v77 = v80;
        BOOL v75 = v80 == 0;
        if (v80) {
          BOOL v81 = v74 == v79;
        }
        else {
          BOOL v81 = 1;
        }
      }
      while (!v81);
    }
    if (v72 != 34 && v75)
    {
      uint64_t v82 = *(void *)(v20 + 32);
      goto LABEL_109;
    }
    if (v75)
    {
LABEL_34:
      uint64_t v36 = *(void *)(v20 + 32);
      goto LABEL_58;
    }
    *unsigned int v78 = 0;
    uint64_t v83 = v78 + 1;
    while (2)
    {
      unsigned int v84 = *v83;
      if (v84 <= 0x1F)
      {
        if (v84 != 9)
        {
          if (!*v83) {
            goto LABEL_108;
          }
LABEL_106:
          log_OutPublic(*(void *)(v20 + 32), (uint64_t)"RETTT", 11018, (uint64_t)"%s%s", v24, v25, v26, v27, "trailingString");
          goto LABEL_108;
        }
        goto LABEL_104;
      }
      if (v84 == 32)
      {
LABEL_104:
        ++v83;
        continue;
      }
      break;
    }
    if (v84 != 35) {
      goto LABEL_106;
    }
LABEL_108:
    uint64_t v82 = *(void *)(v20 + 32);
LABEL_109:
    log_OutText(v82, (uint64_t)"RETTT", 5, 0, (uint64_t)"ruleset_ScanRuleLine:  re = '%s'; tgt = '%s'",
      v25,
      v26,
      v27,
      (uint64_t)i);
    int v42 = 0;
    unsigned int v43 = 0;
LABEL_60:
    PCRE_Adapter2PCREOptions(*(void *)(a1 + 104), *(void *)(a1 + 112), (uint64_t)&v100);
    uint64_t v49 = *(void *)v95;
    if (v42)
    {
      log_OutTraceTuningData(*(uint64_t ***)(*(void *)v95 + 32), 2, (uint64_t)"%s%s %s%s %s%u", v44, v45, v46, v47, v48, "END");
      goto LABEL_112;
    }
    uint64_t v50 = *(void *)(a1 + 104);
    uint64_t v51 = *(void *)(a1 + 112);
    uint64_t v99 = 0;
    int v102 = 1;
    long long __b = PCRE_CompilePatternWithOptions(v50, v51, (uint64_t)i, (uint64_t)&v100, (uint64_t)v105, 256, (uint64_t)&v99 + 4, (int *)&v99);
    uint64_t v97 = v52;
    PCRE_Adapter2PCREOptions(v50, v51, (uint64_t)&v100);
    if (__b)
    {
      unsigned int v43 = v99;
      if ((v99 & 0x80000000) != 0) {
        goto LABEL_112;
      }
      int v57 = vector_Add(*(void *)(a1 + 80), &__b);
      int v62 = *(uint64_t ***)(*(void *)v95 + 32);
      if (!v57)
      {
        log_OutPublic(*(void *)(*(void *)v95 + 32), (uint64_t)"RETTT", 11023, 0, v58, v59, v60, v61, v93);
        PCRE_FreePattern((uint64_t)__b, v97);
        unsigned int v70 = -2006966266;
        goto LABEL_121;
      }
      vector_GetSize(*(void *)(a1 + 80));
      log_OutTraceTuningData(v62, 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%u", v63, v64, v65, v66, v67, "END");
      if (__b) {
        PCRE_FreePattern((uint64_t)__b, v97);
      }
      unsigned int v70 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v68, v69);
      if ((v70 & 0x80000000) != 0)
      {
LABEL_121:
        uint64_t v19 = v94;
        break;
      }
      goto LABEL_10;
    }
    log_OutPublic(*(void *)(v49 + 32), (uint64_t)"RETTT", 11006, (uint64_t)"%s%s%s%s%s%d", v53, v54, v55, v56, "regularExpression");
    unsigned int v43 = -2006966272;
    log_OutTraceTuningData(*(uint64_t ***)(v49 + 32), 2, (uint64_t)"%s%s %s%s %s%d %s%s %s%d %s%s %s%u", v85, v86, v87, v88, v89, "END");
LABEL_112:
    if (v94) {
      uint64_t v19 = v94;
    }
    else {
      uint64_t v19 = v43;
    }
    unsigned int v70 = ruleset_ReadDataLine(a1, *(uint64_t *)v95, a2, a3, a4, &__s, v55, v56);
  }
  while ((v70 & 0x80000000) == 0);
  if ((v70 & 0x1FFF) == 0x17) {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v90 = v70;
  }
  uint64_t v8 = v19;
  if (!v19) {
    return v90;
  }
  return v8;
}

uint64_t ruleset_Rewrite(_WORD **a1, const char *a2, const char **a3)
{
  uint64_t v59 = 0;
  uint64_t v57 = 0;
  uint64_t v3 = 2288001031;
  if (!a1) {
    return v3;
  }
  if (!a2) {
    return v3;
  }
  if (!a3) {
    return v3;
  }
  uint64_t inited = InitRsrcFunction(*a1, (int)a1[1], &v59);
  if ((inited & 0x80000000) != 0) {
    return v3;
  }
  if (!a1[3]) {
    return 2288001041;
  }
  uint64_t v8 = inited;
  uint64_t v9 = *(void *)(v59 + 8);
  int v10 = cstdlib_strlen(a2);
  uint64_t v11 = (char *)heap_Alloc(v9, (v10 + 1));
  char __s = v11;
  if (!v11)
  {
    log_OutPublic(*(void *)(v59 + 32), (uint64_t)"RETTT", 11002, 0, v12, v13, v14, v15, v56);
    return 2288001034;
  }
  cstdlib_strcpy(v11, a2);
  uint64_t v16 = (const char *)a1[8];
  if (v16
    && ((uint64_t v17 = __s,
         __int16 v60 = 0,
         unsigned __int16 v18 = cstdlib_strlen(__s),
         !esc_seq_tn_strncmp(*a1, (int)a1[1], a1[11], (int)a1[12], __s, v18, &v60))
     || cstdlib_strcmp(v16, "normal")))
  {
    while (1)
    {
      unsigned __int16 v19 = cstdlib_strlen(v17);
      uint64_t v61 = esc_seq_tn_seq(*a1, (int)a1[1], a1[11], (int)a1[12], v17, v19);
      if (!v61) {
        break;
      }
      int IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)a1, v16, &v61);
      uint64_t v17 = ++v61;
      if (IsMatchingEscTn) {
        goto LABEL_12;
      }
    }
    int v21 = 0;
  }
  else
  {
LABEL_12:
    int v21 = 1;
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(v59 + 32)))
  {
    uint64_t v27 = *(uint64_t ***)(v59 + 32);
    if (a1[8]) {
      log_OutTraceTuningData(v27, 8, (uint64_t)"%s%s %s%s %s%s %s%s", v22, v23, v24, v25, v26, "BEG");
    }
    else {
      log_OutTraceTuningData(v27, 8, (uint64_t)"%s%s %s%s %s%s", v22, v23, v24, v25, v26, "BEG");
    }
  }
  if (!v21) {
    goto LABEL_37;
  }
  int Size = vector_GetSize((uint64_t)a1[10]);
  if (!a1[8])
  {
    int v34 = vector_GetSize((uint64_t)a1[10]);
    if (v34)
    {
      int v35 = v34;
      unsigned int v36 = 0;
      uint64_t v33 = 0;
      while (1)
      {
        uint64_t v37 = v33;
        uint64_t v33 = __s;
        char __s = v37;
        int ElemAt = vector_GetElemAt((uint64_t)a1[10], v36, &v57);
        uint64_t v44 = *(uint64_t ***)(v59 + 32);
        if (!ElemAt) {
          break;
        }
        log_OutTraceTuningData(v44, 9, (uint64_t)"%s%s %s%d %s%s", v38, v39, v40, v41, v42, "BEG");
        uint64_t v8 = sub_GsubCompiledRe((uint64_t)a1[2], *(void *)v57, *(void *)(v57 + 8), *(char **)(v57 + 16), v33, (const char **)&__s);
        log_OutTraceTuningData(*(uint64_t ***)(v59 + 32), 9, (uint64_t)"%s%s %s%u %s%s", v45, v46, v47, v48, v49, "END");
        if ((v8 & 0x80000000) != 0) {
          goto LABEL_43;
        }
        if (v35 == ++v36) {
          goto LABEL_38;
        }
      }
      log_OutPublic((uint64_t)v44, (uint64_t)"RETTT", 11025, 0, v39, v40, v41, v42, v56);
      uint64_t v3 = 2288001030;
      if (!v33) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  int v29 = Size;
  if (Size)
  {
    unsigned int v30 = 0;
    int v31 = 0;
    do
    {
      BOOL v32 = __s;
      char __s = v31;
      if (v31)
      {
        heap_Free(*(void **)(v59 + 8), (uint64_t)v31);
        char __s = 0;
      }
      ruleset_RewriteTnRegions((uint64_t)a1, v30++, 0, v32, (const char **)&__s);
      int v31 = v32;
    }
    while (v29 != v30);
    if (v32) {
      heap_Free(*(void **)(v59 + 8), (uint64_t)v32);
    }
  }
  uint64_t v33 = __s;
  char __s = 0;
  ruleset_RewriteTnRegions((uint64_t)a1, 0, 1, v33, (const char **)&__s);
  if (v33)
  {
    heap_Free(*(void **)(v59 + 8), (uint64_t)v33);
LABEL_37:
    uint64_t v33 = 0;
  }
LABEL_38:
  if (__s)
  {
    uint64_t v51 = *a3;
    uint64_t v52 = *(uint64_t **)(v59 + 8);
    uint64_t v53 = cstdlib_strlen(__s) + 1;
    if (v51)
    {
      uint64_t v54 = (char *)heap_Realloc(v52, (uint64_t)v51, v53);
      if (v54) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v54 = (char *)heap_Alloc((uint64_t)v52, v53);
      if (v54)
      {
LABEL_41:
        *a3 = v54;
        cstdlib_strcpy(v54, __s);
        if (cstdlib_strcmp(a2, *a3)) {
          log_OutEvent(*(uint64_t ***)(v59 + 32), 29, (uint64_t)"%s%s", v50, v23, v24, v25, v26, "RULSET_NAME");
        }
LABEL_43:
        uint64_t v3 = v8;
        if (!v33) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
    }
  }
  log_OutPublic(*(void *)(v59 + 32), (uint64_t)"RETTT", 11002, 0, v23, v24, v25, v26, v56);
  uint64_t v3 = 2288001034;
  if (v33) {
LABEL_47:
  }
    heap_Free(*(void **)(v59 + 8), (uint64_t)v33);
LABEL_48:
  if (__s) {
    heap_Free(*(void **)(v59 + 8), (uint64_t)__s);
  }
  log_OutTraceTuningData(*(uint64_t ***)(v59 + 32), 8, (uint64_t)"%s%s %s%u %s%s", v50, v23, v24, v25, v26, "END");
  return v3;
}

uint64_t ruleset_RewriteTnRegions(uint64_t result, unsigned int a2, int a3, const char *a4, const char **a5)
{
  uint64_t v96 = 0;
  uint64_t v94 = 0;
  char __s = 0;
  if (a4)
  {
    if (a5)
    {
      if (!*a5)
      {
        uint64_t v9 = (_WORD **)result;
        uint64_t result = InitRsrcFunction(*(_WORD **)result, *(void *)(result + 8), &v96);
        if ((result & 0x80000000) == 0)
        {
          if (v9[3])
          {
            if (a3 || vector_GetElemAt((uint64_t)v9[10], a2, &v94))
            {
              if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32)))
              {
                unsigned __int16 v19 = *(uint64_t ***)(v96 + 32);
                if (a3) {
                  log_OutTraceTuningData(v19, 16, (uint64_t)"%s%s %s%s", v14, v15, v16, v17, v18, "BEG");
                }
                else {
                  log_OutTraceTuningData(v19, 9, (uint64_t)"%s%s %s%d %s%s", v14, v15, v16, v17, v18, "BEG");
                }
              }
              uint64_t v20 = *(void *)(v96 + 8);
              int v21 = cstdlib_strlen(a4);
              uint64_t v22 = (const char *)heap_Alloc(v20, (v21 + 1));
              *a5 = v22;
              if (v22)
              {
                *uint64_t v22 = 0;
                int64_t v23 = cstdlib_strlen(a4);
                if (v23 >= 1)
                {
                  unsigned int v24 = 0;
                  uint64_t v25 = &a4[v23];
                  if (a3) {
                    int v26 = 18;
                  }
                  else {
                    int v26 = 11;
                  }
                  unsigned int v91 = v26;
                  uint64_t v27 = a4;
                  unsigned int v92 = &a4[v23];
                  do
                  {
                    unsigned __int16 v28 = cstdlib_strlen(v27 + 1);
                    int v29 = esc_seq_tn_seq(*v9, (int)v9[1], v9[11], (int)v9[12], (char *)v27 + 1, v28);
                    if (v29) {
                      unsigned int v30 = v29;
                    }
                    else {
                      unsigned int v30 = (char *)v25;
                    }
                    int v31 = (char *)heap_Alloc(*(void *)(v96 + 8), (v30 - v27 + 1));
                    if (!v31) {
                      break;
                    }
                    BOOL v32 = v31;
                    cstdlib_memcpy(v31, v27, (v30 - v27));
                    v32[v30 - v27] = 0;
                    uint64_t v33 = (const char *)v9[8];
                    uint64_t v98 = v32;
                    __int16 v97 = 0;
                    unsigned __int16 v34 = cstdlib_strlen(v32);
                    unsigned int v93 = v24;
                    if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v32, v34, &v97))
                    {
                      int IsMatchingEscTn = cstdlib_strcmp(v33, "normal") == 0;
                    }
                    else
                    {
                      int IsMatchingEscTn = ruleset_IsMatchingEscTn((uint64_t)v9, v33, &v98);
                      if (a3 && IsMatchingEscTn)
                      {
                        unsigned int v36 = v98;
                        int IsMatchingEscTn = 1;
                        goto LABEL_36;
                      }
                    }
                    unsigned int v36 = v32;
                    if (!a3 && IsMatchingEscTn)
                    {
                      uint64_t v37 = ruleset_stristr(v32, (char *)v9[8]);
                      if (v37)
                      {
                        uint64_t v38 = cstdlib_strstr(v37, "\\"");
                        int v39 = v38 + 1 - v32;
                        if (!v38) {
                          int v39 = 0;
                        }
                        unsigned int v93 = v39;
                        char v40 = 0;
                        if (v38) {
                          unsigned int v36 = v38 + 1;
                        }
                        else {
                          unsigned int v36 = v32;
                        }
                      }
                      else
                      {
                        char v40 = 0;
                        unsigned int v36 = v32;
                      }
                      goto LABEL_49;
                    }
LABEL_36:
                    char v40 = 1;
                    if (a3)
                    {
                      if (IsMatchingEscTn)
                      {
                        uint64_t v41 = (const char *)v9[9];
                        if (v41)
                        {
                          if (cstdlib_strlen(v41))
                          {
                            LOWORD(v98) = 0;
                            unsigned __int16 v42 = cstdlib_strlen(v32);
                            if (esc_seq_tn_strncmp(*v9, (int)v9[1], v9[11], (int)v9[12], v32, v42, &v98))
                            {
                              unsigned int v43 = *(uint64_t **)(v96 + 8);
                              int v44 = cstdlib_strlen(v36);
                              uint64_t v45 = (const char *)heap_Realloc(v43, (uint64_t)v36, (v44 + 13));
                              if (!v45) {
                                goto LABEL_76;
                              }
                              unsigned int v36 = (char *)v45;
                              uint64_t v46 = (void *)(v45 + 12);
                              size_t v47 = cstdlib_strlen(v45);
                              cstdlib_memmove(v46, v36, v47 + 1);
                              cstdlib_memcpy(v36, "\x1B\\tn", 4uLL);
                              uint64_t v48 = v36 + 4;
                              uint64_t v49 = "=normal\\"";
                              size_t v50 = 8;
LABEL_47:
                              cstdlib_memcpy(v48, v49, v50);
                            }
                            else
                            {
                              size_t v51 = cstdlib_strlen((const char *)v9[9]);
                              uint64_t v52 = *(uint64_t **)(v96 + 8);
                              int v53 = cstdlib_strlen(v32);
                              uint64_t v54 = (char *)heap_Realloc(v52, (uint64_t)v32, (v51 + v53 + 1));
                              if (!v54) {
                                goto LABEL_76;
                              }
                              unsigned int v36 = v54;
                              uint64_t v90 = ruleset_stristr(v54, (char *)v9[8]);
                              uint64_t v55 = cstdlib_strstr(v90, "\\"");
                              if (v55)
                              {
                                unsigned int v56 = v55;
                                size_t v57 = cstdlib_strlen(v55);
                                cstdlib_memmove(&v90[v51], v56, v57 + 1);
                                uint64_t v49 = (const char *)v9[9];
                                uint64_t v48 = v90;
                                size_t v50 = v51;
                                goto LABEL_47;
                              }
                            }
                            char v40 = 1;
                            BOOL v32 = v36;
                          }
                        }
                      }
                    }
LABEL_49:
                    if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32)))
                    {
                      uint64_t v63 = *(uint64_t ***)(v96 + 32);
                      if (a3) {
                        log_OutTraceTuningData(v63, 18, (uint64_t)"%s%s %s%d %s%d", v58, v59, v60, v61, v62, "FOCUS");
                      }
                      else {
                        log_OutTraceTuningData(v63, 10, (uint64_t)"%s%s %s%s %s%d %s%d", v58, v59, v60, v61, v62, "BEG");
                      }
                    }
                    if (v40)
                    {
                      uint64_t v64 = *(void *)(v96 + 8);
                      int v65 = cstdlib_strlen(v36);
                      uint64_t v66 = (char *)heap_Alloc(v64, (v65 + 1));
                      char __s = v66;
                      if (!v66) {
                        goto LABEL_76;
                      }
                      cstdlib_strcpy(v66, v36);
                      uint64_t v67 = 0;
                    }
                    else
                    {
                      if ((sub_GsubCompiledRe((uint64_t)v9[2], *(void *)v94, *(void *)(v94 + 8), *(char **)(v94 + 16), v36, (const char **)&__s) & 0x80000000) != 0|| (uint64_t v68 = *(void *)(v96 + 8), v69 = cstdlib_strlen(__s), (v70 = (char *)heap_Alloc(v68, v93 + v69 + 1)) == 0))
                      {
LABEL_76:
                        heap_Free(*(void **)(v96 + 8), (uint64_t)v32);
                        break;
                      }
                      uint64_t v67 = v70;
                      cstdlib_strncpy(v70, v27, v93);
                      v67[v93] = 0;
                      cstdlib_strcat(v67, __s);
                    }
                    heap_Free(*(void **)(v96 + 8), (uint64_t)v32);
                    size_t v71 = *(uint64_t **)(v96 + 8);
                    uint64_t v72 = (uint64_t)*a5;
                    int v73 = cstdlib_strlen(*a5);
                    if (v67)
                    {
                      int v74 = cstdlib_strlen(v67);
                      BOOL v75 = (char *)heap_Realloc(v71, v72, (v73 + v74 + 1));
                      *a5 = v75;
                      if (!v75) {
                        break;
                      }
                      BOOL v76 = v67;
                    }
                    else
                    {
                      int v77 = cstdlib_strlen(__s);
                      BOOL v75 = (char *)heap_Realloc(v71, v72, (v73 + v77 + 1));
                      *a5 = v75;
                      if (!v75) {
                        break;
                      }
                      BOOL v76 = __s;
                    }
                    cstdlib_strcat(v75, v76);
                    if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32))) {
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), v91, (uint64_t)"%s%s", v78, v79, v80, v81, v82, "APPEND");
                    }
                    if (__s)
                    {
                      heap_Free(*(void **)(v96 + 8), (uint64_t)__s);
                      char __s = 0;
                    }
                    if (v67) {
                      heap_Free(*(void **)(v96 + 8), (uint64_t)v67);
                    }
                    if (!a3) {
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 10, (uint64_t)"%s%s %s%s", v78, v79, v80, v81, v82, "END");
                    }
                    uint64_t v27 = v30;
                    uint64_t v25 = v92;
                    unsigned int v24 = v93;
                  }
                  while (v30 < v92);
                }
              }
              uint64_t result = log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32));
              if (result)
              {
                if (a3) {
                  uint64_t v88 = 16;
                }
                else {
                  uint64_t v88 = 9;
                }
                return log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), v88, (uint64_t)"%s%s %s%u %s%s", v83, v84, v85, v86, v87, "END");
              }
            }
            else
            {
              return log_OutPublic(*(void *)(v96 + 32), (uint64_t)"RETTT", 11025, 0, v10, v11, v12, v13, v89);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ruleset_ReadDataLine(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, char *__s, uint64_t a7, uint64_t a8)
{
  ++*a5;
  for (uint64_t result = ruleset_ReadLine(a2, a3, a4, __s, (uint64_t)a5, (uint64_t)__s, a7, a8);
        (result & 0x80000000) == 0;
        uint64_t result = ruleset_ReadLine(a2, a3, a4, __s, v16, v17, v18, v19))
  {
    unsigned int v23 = 0;
    size_t v15 = cstdlib_strlen(__s);
    int v20 = PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), (uint64_t)__s, v15, 0, 0, 0, &v23);
    uint64_t result = v23;
    if ((v23 & 0x80000000) != 0) {
      break;
    }
    if (v20 < 0)
    {
      size_t v21 = cstdlib_strlen(__s);
      int v22 = PCRE_Exec(*(void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 136), *(void *)(a1 + 144), (uint64_t)__s, v21, 0, 0, 0, &v23);
      uint64_t result = v23;
      if ((v23 & 0x80000000) != 0) {
        return result;
      }
      if (v22 < 0) {
        return 0;
      }
    }
    ++*a5;
  }
  return result;
}

char *ruleset_IsSectionHeader(unsigned __int8 *a1, const char *a2)
{
  int v3 = *a1;
  if (v3 == 239)
  {
    if (a1[1] != 187)
    {
      LOBYTE(v3) = -17;
      goto LABEL_9;
    }
    uint64_t v4 = 3;
    if (a1[2] != 191) {
      uint64_t v4 = 0;
    }
    a1 += v4;
    int v3 = *a1;
  }
  if (!v3) {
    return 0;
  }
LABEL_9:
  BOOL v5 = (const char *)(a1 + 1);
  while (cstdlib_strchr("\t ", (char)v3))
  {
    int v6 = *(unsigned __int8 *)v5++;
    LOBYTE(v3) = v6;
    if (!v6) {
      return 0;
    }
  }
  if (*(v5 - 1) != 91) {
    return 0;
  }
  do
  {
    unsigned int v7 = v5;
    int v8 = *v5;
    if (!*v5) {
      break;
    }
    ++v5;
  }
  while (cstdlib_strchr("\t ", v8));
  if (a2)
  {
    size_t v9 = cstdlib_strlen(a2);
    if (cstdlib_strncmp(a2, v7, v9)) {
      return 0;
    }
    v7 += cstdlib_strlen(a2);
  }
  else
  {
    char v14 = *v7;
    if (!*v7) {
      return 0;
    }
    while (1)
    {
      uint64_t result = cstdlib_strchr("\t ]", v14);
      if (result) {
        break;
      }
      int v15 = *(unsigned __int8 *)++v7;
      char v14 = v15;
      if (!v15) {
        return result;
      }
    }
  }
  char v10 = *v7;
  if (!*v7) {
    return 0;
  }
  uint64_t v11 = (unsigned __int8 *)(v7 + 1);
  while (cstdlib_strchr("\t ", v10))
  {
    uint64_t result = 0;
    int v13 = *v11++;
    char v10 = v13;
    if (!v13) {
      return result;
    }
  }
  return (char *)(*(v11 - 1) == 93);
}

uint64_t ruleset_ReadLine(uint64_t a1, uint64_t *a2, unsigned int *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = 0;
  unsigned int v12 = *a3;
  uint64_t v13 = *a2;
  if (*a3 >= 0x3FF) {
    uint64_t v14 = 1023;
  }
  else {
    uint64_t v14 = v12;
  }
  unsigned int v15 = v12 - v14;
  while (v14 != v11)
  {
    int v16 = *(unsigned __int8 *)(v13 + v11);
    uint64_t v17 = v11 + 1;
    __s[v11++] = v16;
    if (v16 == 10)
    {
      LODWORD(v14) = (unsigned __int16)v17;
      unsigned int v15 = v12 - v17;
      uint64_t v18 = v13 + v17;
      goto LABEL_9;
    }
  }
  LODWORD(v14) = (unsigned __int16)v14;
  uint64_t v18 = v13 + v11;
LABEL_9:
  __s[v14] = 0;
  *a3 = v15;
  *a2 = v18;
  if (__s && v14)
  {
    unsigned int v19 = cstdlib_strlen(__s);
    if (!v19) {
      return 0;
    }
    uint64_t v24 = v19 - 1;
    if (*a3 && __s[v24] != 10)
    {
      uint64_t v26 = 2288001024;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11008, (uint64_t)"%s%u%s%s", v20, v21, v22, v23, "maximumCharacters");
      return v26;
    }
    if (__s[v24] == 10) {
      __s[v24] = 0;
    }
    if (v19 >= 2 && (uint64_t v25 = v19 - 2, __s[v25] == 13))
    {
      uint64_t v26 = 0;
      __s[v25] = 0;
    }
    else
    {
      return 0;
    }
  }
  else if (v15)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"RETTT", 11010, 0, a5, a6, a7, a8, v28);
    return 2288001028;
  }
  else
  {
    return 2288001047;
  }
  return v26;
}

uint64_t ruleset_IsMatchingEscTn(uint64_t a1, const char *a2, char **a3)
{
  int v6 = *a3;
  unsigned __int16 v14 = 0;
  unsigned __int16 v7 = cstdlib_strlen(v6);
  int v8 = esc_seq_tn_strncmp(*(_WORD **)a1, *(void *)(a1 + 8), *(void **)(a1 + 88), *(void *)(a1 + 96), v6, v7, &v14);
  uint64_t result = 0;
  if (!v8)
  {
    char v10 = &v6[v14];
    if (*v10 == 61
      && (uint64_t v11 = (uint64_t)(v10 + 1), v12 = cstdlib_strlen(a2), !LH_strnicmp(v11, (uint64_t)a2, v12))
      && (size_t v13 = cstdlib_strlen(a2), *(unsigned char *)(v11 + v13) == 92))
    {
      *a3 = (char *)(v11 + v13 + 1);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *ruleset_stristr(char *a1, char *__s)
{
  uint64_t result = 0;
  if (a1 && __s)
  {
    if (*a1 && *__s && (v5 = cstdlib_strlen(__s), char v6 = cstdlib_tolower(*__s), (v7 = *a1) != 0))
    {
      int v8 = v6;
      while (cstdlib_tolower(v7) != v8
           || LH_strnicmp((uint64_t)a1, (uint64_t)__s, v5))
      {
        int v9 = *++a1;
        char v7 = v9;
        if (!v9) {
          return 0;
        }
      }
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_ObjOpen(_WORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 2147491847;
  unsigned int v19 = 0;
  unsigned int v18 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v19) & 0x80000000) == 0)
  {
    *a3 = 0;
    char v7 = (void *)heap_Alloc(v19[1], 32);
    if (!v7)
    {
      log_OutPublic(v19[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v17);
      return 2147491850;
    }
    uint64_t v12 = (uint64_t)v7;
    cstdlib_memset(v7, 0, 0x20uLL);
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + 8) = a2;
    uint64_t v13 = PCRE_Adapter_Create(1, v12 + 16, a1, a2);
    unsigned __int16 v14 = v19;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v3 = v13;
    }
    else
    {
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttmaxpcreframeblocks", &v18);
      paramc_ParamGetUInt(v19[5], (uint64_t)"retttnumframesinblock", &v18);
      uint64_t v15 = PCRE_ObjOpen(*(uint64_t **)(v12 + 16), *(void *)(v12 + 24), 0);
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v3 = 0;
        *a3 = v12;
        return v3;
      }
      uint64_t v3 = v15;
      unsigned __int16 v14 = v19;
    }
    heap_Free((void *)v14[1], v12);
  }
  return v3;
}

uint64_t sub_ObjClose(uint64_t a1)
{
  uint64_t v1 = 2147491847;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = PCRE_ObjClose(*(void *)(a1 + 16), *(void *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(void **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_ObjOpenPCRE1(_WORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2147491847;
  uint64_t v22 = 0;
  int v21 = 0;
  if (a3 && (InitRsrcFunction(a1, a2, &v22) & 0x80000000) == 0)
  {
    *a3 = 0;
    char v7 = (void *)heap_Alloc(v22[1], 32);
    if (!v7)
    {
      log_OutPublic(v22[4], (uint64_t)"RETTT", 11002, 0, v8, v9, v10, v11, v20);
      return 2147491850;
    }
    uint64_t v12 = v7;
    cstdlib_memset(v7, 0, 0x20uLL);
    *uint64_t v12 = a1;
    v12[1] = a2;
    uint64_t v13 = nuance_pcre_ObjOpen(a1, a2, (uint64_t)(v12 + 2));
    unsigned __int16 v14 = v22;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v3 = v13;
    }
    else
    {
      if ((int)paramc_ParamGetUInt(v22[5], (uint64_t)"retttmaxpcreframeblocks", (unsigned int *)&v21) < 0) {
        unsigned __int16 v15 = 10;
      }
      else {
        unsigned __int16 v15 = v21;
      }
      int UInt = paramc_ParamGetUInt(v22[5], (uint64_t)"retttnumframesinblock", (unsigned int *)&v21);
      __int16 v17 = v21;
      if (UInt < 0) {
        __int16 v17 = 10;
      }
      uint64_t v18 = nuance_pcre_Init((void *)v12[2], v12[3], v15, v17);
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v3 = 0;
        *a3 = v12;
        return v3;
      }
      uint64_t v3 = v18;
      nuance_pcre_ObjClose(v12[2], v12[3]);
      unsigned __int16 v14 = v22;
    }
    heap_Free((void *)v14[1], (uint64_t)v12);
  }
  return v3;
}

uint64_t sub_ObjClosePCRE1(uint64_t a1)
{
  uint64_t v1 = 2147491847;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    uint64_t v3 = nuance_pcre_DeInit(*(void **)(a1 + 16), *(void *)(a1 + 24));
    if ((v3 & 0x80000000) != 0) {
      return v3;
    }
    uint64_t v3 = nuance_pcre_ObjClose(*(void *)(a1 + 16), *(void *)(a1 + 24));
    if ((v3 & 0x80000000) != 0)
    {
      return v3;
    }
    else
    {
      heap_Free(*(void **)(v5 + 8), a1);
      return 0;
    }
  }
  return v1;
}

uint64_t sub_SubStringRe(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2147491847;
  uint64_t v21 = 0;
  if (a1)
  {
    if (a2)
    {
      int v20 = 0;
      unsigned int inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v21);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v11 = PCRE_CompilePattern(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, (uint64_t)v23, 256, (uint64_t)&v20, (int *)&inited);
        if ((inited & 0x80000000) != 0)
        {
          return inited;
        }
        else
        {
          uint64_t v17 = (uint64_t)v11;
          if (v11)
          {
            int v18 = v12;
            unsigned int inited = sub_Substitute(a1, (uint64_t)v11, v12, a3, a4, 0, a5);
            PCRE_FreePattern(v17, v18);
            return inited;
          }
          else
          {
            log_OutPublic(*(void *)(v21 + 32), (uint64_t)"RETTT", 11005, (uint64_t)"%s%s%s%s%s%d", v13, v14, v15, v16, "regularExpression");
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_Substitute(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, int a6, const char **a7)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v7 = 2147491847;
  uint64_t v96 = 0;
  if (a1)
  {
    if (a2)
    {
      if (a5)
      {
        if (a7)
        {
          unsigned int v93 = 0;
          uint64_t v94 = 0;
          size_t __len = 0;
          unsigned int inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v96);
          if ((inited & 0x80000000) == 0)
          {
            size_t v17 = cstdlib_strlen(a5);
            if ((v17 & 0x80000000) != 0)
            {
              log_OutPublic(*(void *)(v96 + 32), (uint64_t)"RETTT", 11004, (uint64_t)"%s%u", v13, v14, v15, v16, "bufferBytes");
              return 2147491849;
            }
            else
            {
              uint64_t v18 = *(void *)(v96 + 8);
              uint64_t v19 = *(void *)(v96 + 32);
              v92[0] = v18;
              v92[1] = v19;
              uint64_t v89 = v17;
              uint64_t v94 = v17;
              if (*a7)
              {
                uint64_t v87 = a4;
                uint64_t v88 = a2;
                int v86 = a6;
                LODWORD(__len) = cstdlib_strlen(*a7);
                unsigned int v93 = *a7;
                uint64_t v85 = a7;
                *a7 = 0;
                goto LABEL_12;
              }
              LODWORD(__len) = 128;
              uint64_t v25 = (char *)heap_Alloc(v18, 128);
              unsigned int v93 = v25;
              if (v25)
              {
                uint64_t v87 = a4;
                uint64_t v88 = a2;
                int v86 = a6;
                uint64_t v85 = a7;
                cstdlib_memset(v25, 0, __len);
LABEL_12:
                log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 12, (uint64_t)"%s%s", v20, v21, v22, v23, v24, "BEG");
                BOOL HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32));
                uint64_t v36 = v89;
                if (!v89 && HasTraceTuningDataSubscriber)
                {
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v31, v32, v33, v34, v35, "BEG");
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s", v37, v38, v39, v40, v41, "RES");
                }
                uint64_t v42 = 0;
                unsigned int v43 = -1;
                int v44 = -1;
                while (v42 < v36)
                {
                  log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v31, v32, v33, v34, v35, "BEG");
                  uint64_t v45 = PCRE_Exec(*(void **)(a1 + 16), *(void *)(a1 + 24), v88, a3, (uint64_t)a5, v36, v42, (uint64_t)&v98, 0x1Eu, &inited);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  uint64_t v51 = v45;
                  if ((v45 & 0x80000000) != 0)
                  {
                    unsigned int inited = PCRE_ErrorToLhError(*(void *)(a1 + 16), *(void *)(a1 + 24), v45);
                    BOOL v76 = *(uint64_t ***)(v96 + 32);
                    int v77 = "RES";
LABEL_45:
                    log_OutTraceTuningData(v76, 13, (uint64_t)"%s%s %s%s %s%u", v71, v72, v73, v74, v75, v77);
                    break;
                  }
                  if (v98 == v44 && v99 == v43)
                  {
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s", v46, v47, v48, v49, v50, "RES");
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%d", v52, v53, v54, v55, v56, "BEG");
                    int v57 = a5[v42];
                    if ((~v57 & 0xC0) != 0) {
                      int v58 = 0;
                    }
                    else {
                      int v58 = pcre_sub_utf8_table4[v57 & 0x3F];
                    }
                    uint64_t v59 = PCRE_Exec(*(void **)(a1 + 16), *(void *)(a1 + 24), v88, a3, (uint64_t)a5, v89, (v58 + v42 + 1), (uint64_t)&v98, 0x1Eu, &inited);
                    if ((inited & 0x80000000) != 0) {
                      goto LABEL_58;
                    }
                    uint64_t v51 = v59;
                    if ((v59 & 0x80000000) != 0)
                    {
                      unsigned int inited = PCRE_ErrorToLhError(*(void *)(a1 + 16), *(void *)(a1 + 24), v59);
                      BOOL v76 = *(uint64_t ***)(v96 + 32);
                      int v77 = "END";
                      goto LABEL_45;
                    }
                  }
                  if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32)))
                  {
                    if (v51)
                    {
                      int v65 = 0;
                      do
                      {
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 14, (uint64_t)"%s%d %s%d %s%d", v60, v61, v62, v63, v64, "$");
                        v65 += 2;
                      }
                      while (((unsigned __int16)v65 | 1u) < 2 * (int)v51);
                    }
                    else
                    {
                      log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%d %s%s", v60, v61, v62, v63, v64, "IDXBEG");
                    }
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v60, v61, v62, v63, v64, "END");
                  }
                  unsigned int inited = sub_Append((uint64_t)v92, (void *)&a5[v42], (v98 - v42), v60, v61, v62, v63, v64);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32))) {
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v66, v67, v68, v69, v70, "APPEND");
                  }
                  unsigned int inited = sub_AppendSubstitute((uint64_t)v92, v87, (uint64_t)a5, (uint64_t)&v98, v51, v68, v69, v70);
                  if ((inited & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                  if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32))) {
                    log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v31, v32, v33, v34, v35, "APPEND");
                  }
                  uint64_t v36 = v89;
                  int v44 = v98;
                  unsigned int v43 = v99;
                  uint64_t v42 = v99;
                  if (!v86) {
                    goto LABEL_47;
                  }
                }
                unsigned int v43 = v42;
LABEL_47:
                unsigned int v78 = inited;
                if (inited >> 20 == 2213)
                {
                  if ((inited & 0x1FFF) == 0xA)
                  {
                    uint64_t v79 = *(void *)(v96 + 32);
                    uint64_t v80 = 11002;
                    uint64_t v81 = 0;
                  }
                  else
                  {
                    if ((inited & 0x1FFF) == 0x14)
                    {
                      unsigned int inited = 0;
LABEL_55:
                      unsigned int inited = sub_Append((uint64_t)v92, (void *)&a5[v43], v89 - v43 + 1, v31, v32, v33, v34, v35);
                      if ((inited & 0x80000000) != 0)
                      {
LABEL_58:
                        *uint64_t v85 = v93;
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 12, (uint64_t)"%s%s %s%u %s%s", v46, v47, v48, v49, v50, "END");
                        return inited;
                      }
LABEL_56:
                      if (log_HasTraceTuningDataSubscriber(*(void *)(v96 + 32))) {
                        log_OutTraceTuningData(*(uint64_t ***)(v96 + 32), 15, (uint64_t)"%s%.*s", v46, v47, v48, v49, v50, "APPEND");
                      }
                      goto LABEL_58;
                    }
                    uint64_t v79 = *(void *)(v96 + 32);
                    uint64_t v84 = "lhError";
                    uint64_t v81 = "%s%x";
                    uint64_t v80 = 11027;
                  }
                  log_OutPublic(v79, (uint64_t)"RETTT", v80, (uint64_t)v81, v32, v33, v34, v35, v84);
                  unsigned int v78 = inited;
                }
                if ((v78 & 0x80000000) != 0) {
                  goto LABEL_56;
                }
                goto LABEL_55;
              }
              log_OutPublic(*(void *)(v96 + 32), (uint64_t)"RETTT", 11002, 0, v26, v27, v28, v29, v83);
              return 2147491850;
            }
          }
        }
      }
    }
  }
  return v7;
}

uint64_t sub_SubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t sub_GsubStringRe(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2147491847;
  uint64_t v21 = 0;
  if (a1)
  {
    if (a2)
    {
      int v20 = 0;
      unsigned int inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v21);
      if ((inited & 0x80000000) == 0)
      {
        uint64_t v11 = PCRE_CompilePattern(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, (uint64_t)v23, 256, (uint64_t)&v20, (int *)&inited);
        if ((inited & 0x80000000) != 0)
        {
          return inited;
        }
        else
        {
          uint64_t v17 = (uint64_t)v11;
          if (v11)
          {
            int v18 = v12;
            unsigned int inited = sub_Substitute(a1, (uint64_t)v11, v12, a3, a4, 1, a5);
            PCRE_FreePattern(v17, v18);
            return inited;
          }
          else
          {
            log_OutPublic(*(void *)(v21 + 32), (uint64_t)"RETTT", 11005, (uint64_t)"%s%s%s%s%s%d", v13, v14, v15, v16, "regularExpression");
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_GsubCompiledRe(uint64_t a1, uint64_t a2, int a3, char *a4, const char *a5, const char **a6)
{
  return sub_Substitute(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t sub_GsubCompiledRePCRE1(uint64_t a1, uint64_t a2, char *a3, const char *a4, const char **a5)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v5 = 2147491847;
  uint64_t v94 = 0;
  if (!a1) {
    return v5;
  }
  if (!a2) {
    return v5;
  }
  if (!a4) {
    return v5;
  }
  if (!a5) {
    return v5;
  }
  unsigned int v91 = 0;
  uint64_t v92 = 0;
  size_t __len = 0;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v94) & 0x80000000) != 0) {
    return v5;
  }
  unsigned int v15 = cstdlib_strlen(a4);
  if ((v15 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(v94 + 32), (uint64_t)"RETTT", 11004, (uint64_t)"%s%u", v11, v12, v13, v14, "bufferBytes");
    return 2147491849;
  }
  uint64_t v16 = *(void *)(v94 + 8);
  uint64_t v17 = *(void *)(v94 + 32);
  v90[0] = v16;
  v90[1] = v17;
  uint64_t v92 = v15;
  if (*a5)
  {
    LODWORD(__len) = cstdlib_strlen(*a5);
    unsigned int v91 = *a5;
    *a5 = 0;
  }
  else
  {
    LODWORD(__len) = 128;
    uint64_t v23 = (char *)heap_Alloc(v16, 128);
    unsigned int v91 = v23;
    if (!v23)
    {
      log_OutPublic(*(void *)(v94 + 32), (uint64_t)"RETTT", 11002, 0, v24, v25, v26, v27, v86);
      return 2147491850;
    }
    cstdlib_memset(v23, 0, __len);
  }
  log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 12, (uint64_t)"%s%s", v18, v19, v20, v21, v22, "BEG");
  BOOL HasTraceTuningDataSubscriber = log_HasTraceTuningDataSubscriber(*(void *)(v94 + 32));
  uint64_t v89 = (char *)a4;
  if (!v15 && HasTraceTuningDataSubscriber)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v29, v30, v31, v32, v33, "BEG");
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s", v34, v35, v36, v37, v38, "RES");
LABEL_41:
    unsigned int v39 = 0;
    goto LABEL_42;
  }
  if (!v15) {
    goto LABEL_41;
  }
  unsigned int v88 = v15;
  unsigned int v39 = 0;
  int v40 = -1;
  int v41 = -1;
  while (1)
  {
    log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v29, v30, v31, v32, v33, "BEG");
    uint64_t v42 = nuance_pcre_exec(*(void **)(a1 + 16), *(void *)(a1 + 24), a2, 0, v89, v15, v39, 0, &v95, 30);
    uint64_t v48 = v42;
    if ((v42 & 0x80000000) != 0)
    {
      uint64_t v5 = nuance_pcre_ErrorToLhError(v42);
      uint64_t v82 = *(uint64_t ***)(v94 + 32);
      unsigned int v83 = "RES";
      goto LABEL_52;
    }
    if (v95 != v40)
    {
      uint64_t v50 = (uint64_t)v89;
      goto LABEL_26;
    }
    BOOL v49 = v96 == v41;
    uint64_t v50 = (uint64_t)v89;
    if (v49)
    {
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s", v43, v44, v45, v46, v47, "RES");
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%d", v51, v52, v53, v54, v55, "BEG");
      int v56 = v89[v39];
      int v57 = (~v56 & 0xC0) != 0 ? 0 : pcre_sub_utf8_table4[v56 & 0x3F];
      uint64_t v58 = nuance_pcre_exec(*(void **)(a1 + 16), *(void *)(a1 + 24), a2, 0, v89, v88, v57 + v39 + 1, 0, &v95, 30);
      uint64_t v48 = v58;
      if ((v58 & 0x80000000) != 0) {
        break;
      }
    }
LABEL_26:
    if (log_HasTraceTuningDataSubscriber(*(void *)(v94 + 32)))
    {
      if (v48)
      {
        int v64 = 0;
        do
        {
          log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 14, (uint64_t)"%s%d %s%d %s%d", v59, v60, v61, v62, v63, "$");
          v64 += 2;
        }
        while (((unsigned __int16)v64 | 1u) < 2 * (int)v48);
      }
      else
      {
        log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%d %s%s", v59, v60, v61, v62, v63, "IDXBEG");
      }
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 13, (uint64_t)"%s%s %s%s %s%d %s%d", v59, v60, v61, v62, v63, "END");
      uint64_t v50 = (uint64_t)v89;
    }
    uint64_t appended = sub_Append((uint64_t)v90, (void *)(v50 + v39), v95 - v39, v59, v60, v61, v62, v63);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_46;
    }
    if (log_HasTraceTuningDataSubscriber(*(void *)(v94 + 32))) {
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v71, v72, v73, v74, v75, "APPEND");
    }
    uint64_t appended = sub_AppendSubstitute((uint64_t)v90, a3, v50, (uint64_t)&v95, v48, v73, v74, v75);
    if ((appended & 0x80000000) != 0) {
      goto LABEL_46;
    }
    if (log_HasTraceTuningDataSubscriber(*(void *)(v94 + 32))) {
      log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v29, v30, v31, v32, v33, "APPEND");
    }
    unsigned int v15 = v88;
    int v40 = v95;
    unsigned int v39 = v96;
    int v41 = v96;
    if (v96 >= v88) {
      goto LABEL_42;
    }
  }
  uint64_t v5 = nuance_pcre_ErrorToLhError(v58);
  uint64_t v82 = *(uint64_t ***)(v94 + 32);
  unsigned int v83 = "END";
LABEL_52:
  log_OutTraceTuningData(v82, 13, (uint64_t)"%s%s %s%s %s%u", v77, v78, v79, v80, v81, v83);
  unsigned int v15 = v88;
  if (v5 >> 20 == 2213)
  {
    if ((v5 & 0x1FFF) != 0x14)
    {
      if ((v5 & 0x1FFF) == 0xA)
      {
        uint64_t v84 = 11002;
        uint64_t v85 = 0;
      }
      else
      {
        uint64_t v87 = "lhError";
        uint64_t v85 = "%s%x";
        uint64_t v84 = 11027;
      }
      log_OutPublic(*(void *)(v94 + 32), (uint64_t)"RETTT", v84, (uint64_t)v85, v30, v31, v32, v33, v87);
LABEL_44:
      if (log_HasTraceTuningDataSubscriber(*(void *)(v94 + 32))) {
        log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 15, (uint64_t)"%s%.*s", v66, v67, v68, v69, v70, "APPEND");
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x80000000) != 0)
  {
    goto LABEL_44;
  }
LABEL_42:
  uint64_t appended = sub_Append((uint64_t)v90, &v89[v39], v15 - v39 + 1, v29, v30, v31, v32, v33);
  if ((appended & 0x80000000) == 0)
  {
    uint64_t v5 = 0;
    goto LABEL_44;
  }
LABEL_46:
  uint64_t v5 = appended;
LABEL_47:
  *a5 = v91;
  log_OutTraceTuningData(*(uint64_t ***)(v94 + 32), 12, (uint64_t)"%s%s %s%u %s%s", v66, v67, v68, v69, v70, "END");
  return v5;
}

uint64_t sub_Append(uint64_t a1, void *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && __src)
  {
    unsigned int v10 = __n;
    if (!__n) {
      return 0;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 28);
    unsigned int v12 = v11 + __n;
    if (v11 > (__n ^ 0x7FFFFFFF) || v12 >= 0xF4240 && v12 > 2 * *(_DWORD *)(a1 + 24))
    {
      log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11001, (uint64_t)"%s%u", a5, a6, a7, a8, "bufferLimitBytes");
      return 2147491849;
    }
    if (*(_DWORD *)(a1 + 32) >= v12)
    {
      uint64_t v22 = *(void *)(a1 + 16);
LABEL_21:
      cstdlib_memcpy((void *)(v22 + v11), __src, v10);
      uint64_t v13 = 0;
      *(_DWORD *)(a1 + 28) += v10;
      return v13;
    }
    if (v12 <= 0x7FFFFF7F) {
      uint64_t v14 = (v12 & 0xFFFFFF80) + 128;
    }
    else {
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(uint64_t **)a1;
    if (v15)
    {
      uint64_t v17 = heap_Realloc(v16, v15, v14);
      if (v17)
      {
        uint64_t v22 = v17;
        cstdlib_memset((void *)(v17 + *(unsigned int *)(a1 + 32) + 1), 0, (v14 + ~*(_DWORD *)(a1 + 32)));
LABEL_20:
        *(void *)(a1 + 16) = v22;
        *(_DWORD *)(a1 + 32) = v14;
        unsigned int v11 = *(_DWORD *)(a1 + 28);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v22 = heap_Calloc(v16, v14, 1);
      if (v22) {
        goto LABEL_20;
      }
    }
    log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11002, 0, v18, v19, v20, v21, v24);
    return 2147491850;
  }
  uint64_t v13 = 2147491847;
  if (a1) {
    log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11000, 0, a5, a6, a7, a8, v24);
  }
  return v13;
}

uint64_t sub_AppendSubstitute(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 && __s && a4)
  {
    int v11 = a5;
    unsigned int v18 = cstdlib_strlen(__s);
    if (v18)
    {
      unsigned int v19 = 0;
      while (1)
      {
        uint64_t v20 = &__s[v19];
        int v21 = *v20;
        if (v21 == 36) {
          break;
        }
        if (v21 == 92)
        {
          __int16 __src = 0;
          char v22 = v20[1];
          if ((v22 - 48) < 8)
          {
            uint64_t v23 = v20 + 2;
            v22 -= 48;
            int v33 = v19 + __s + 4;
            unsigned int v34 = 1;
            while (1)
            {
              char v35 = *v23;
              if ((*v23 & 0xF8) != 0x30) {
                break;
              }
              ++v23;
              char v22 = v35 + 8 * v22 - 48;
              if (v34++ >= 2)
              {
LABEL_35:
                LODWORD(v23) = v33;
                break;
              }
            }
          }
          else
          {
            switch(v20[1])
            {
              case 'n':
                LODWORD(v23) = v20 + 2;
                char v22 = 10;
                break;
              case 'o':
              case 'p':
              case 'q':
              case 's':
              case 'u':
              case 'w':
LABEL_55:
                LODWORD(v23) = v20 + 2;
                break;
              case 'r':
                LODWORD(v23) = v20 + 2;
                char v22 = 13;
                break;
              case 't':
                LODWORD(v23) = v20 + 2;
                char v22 = 9;
                break;
              case 'v':
                LODWORD(v23) = v20 + 2;
                char v22 = 11;
                break;
              case 'x':
                char v22 = 0;
                uint64_t v23 = v20 + 2;
                int v33 = v19 + __s + 4;
                char v38 = 1;
                while (1)
                {
                  char v39 = v38;
                  int v40 = *v23;
                  char v41 = v40 - 48;
                  if ((v40 - 48) >= 0xA)
                  {
                    if ((v40 - 97) >= 6)
                    {
                      if ((v40 - 65) > 5) {
                        goto LABEL_36;
                      }
                      char v41 = v40 - 55;
                    }
                    else
                    {
                      char v41 = v40 - 87;
                    }
                  }
                  char v38 = 0;
                  char v22 = v41 + 16 * v22;
                  ++v23;
                  if ((v39 & 1) == 0) {
                    goto LABEL_35;
                  }
                }
              default:
                switch(v20[1])
                {
                  case 'a':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 7;
                    break;
                  case 'b':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 8;
                    break;
                  case 'e':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 27;
                    break;
                  case 'f':
                    LODWORD(v23) = v20 + 2;
                    char v22 = 12;
                    break;
                  default:
                    goto LABEL_55;
                }
                break;
            }
          }
LABEL_36:
          int v37 = v23 - __s;
          LOBYTE(__src) = v22;
          uint64_t v28 = sub_Append(a1, &__src, 1uLL, v13, v14, v15, v16, v17);
          unsigned int v24 = v37;
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
        }
        else
        {
          uint64_t v28 = sub_Append(a1, v20, 1uLL, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          unsigned int v24 = v19 + 1;
        }
LABEL_37:
        unsigned int v19 = v24;
        if (v24 >= v18) {
          return 0;
        }
      }
      unsigned int v24 = v19 + 1;
      int v25 = __s[v19 + 1];
      unsigned int v26 = v25 - 58;
      if ((v25 - 58) <= 0xFFFFFFF5)
      {
        if (v25 != 123)
        {
          uint64_t v32 = a1;
          size_t v31 = 1;
LABEL_29:
          uint64_t v28 = sub_Append(v32, v20, v31, v13, v14, v15, v16, v17);
          if ((v28 & 0x80000000) != 0) {
            return v28;
          }
          goto LABEL_37;
        }
        unsigned int v24 = v19 + 2;
        int v25 = __s[v19 + 2];
      }
      if ((v25 - 48) > 9)
      {
        int v27 = 0;
      }
      else
      {
        int v27 = 0;
        do
        {
          int v27 = v25 + 10 * v27 - 48;
          int v25 = __s[++v24];
        }
        while ((v25 - 48) < 0xA);
      }
      if (v26 <= 0xFFFFFFF5)
      {
        if (v25 != 125) {
          goto LABEL_37;
        }
        ++v24;
      }
      if (v27 >= v11) {
        goto LABEL_37;
      }
      uint64_t v29 = *(unsigned int *)(a4 + 8 * v27);
      if ((v29 & 0x80000000) != 0) {
        goto LABEL_37;
      }
      int v30 = *(_DWORD *)(a4 + ((8 * v27) | 4));
      if (v30 < 0) {
        goto LABEL_37;
      }
      uint64_t v20 = (char *)(a3 + v29);
      size_t v31 = (v30 - v29);
      uint64_t v32 = a1;
      goto LABEL_29;
    }
    return 0;
  }
  else
  {
    uint64_t v42 = 2147491847;
    if (a1) {
      log_OutPublic(*(void *)(a1 + 8), (uint64_t)"RETTT", 11003, 0, a5, a6, a7, a8, v44);
    }
  }
  return v42;
}

uint64_t PCRE_V10_Adapter_Init(void *a1)
{
  a1[2] = PCRE_V10_ObjOpen;
  a1[3] = PCRE_V10_ObjClose;
  a1[4] = PCRE_V10_ErrorToLhError;
  a1[5] = PCRE_V10_CompilePattern;
  a1[9] = PCRE_V10_Exec;
  a1[7] = PCRE_V10_SerializeAndEncode;
  a1[6] = PCRE_V10_SerializeAndDecode;
  a1[8] = PCRE_V10_SerializeFree;
  a1[10] = &PCRE_V10_OPTIONS_MAP;
  return 0;
}

uint64_t PCRE_V10_ObjOpen(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 2320506890;
  uint64_t v6 = heap_Alloc(*(void *)(a3 + 8), 32);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = pcre2_general_context_create_8((void *(__cdecl *)(size_t))loc_PCRE_V10_private_malloc, (void (__cdecl *)(void *))loc_PCRE_V10_private_free, *(void *(__cdecl **)(size_t))(a3 + 8));
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      pcre2_compile_context_create_8((uint64_t)v8);
      uint64_t v11 = v10;
      pcre2_match_context_create_8(v9);
      if (v11) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v5 = 0;
        void *v7 = a3;
        v7[1] = v9;
        v7[2] = v11;
        v7[3] = v12;
        *a1 = v7;
      }
    }
  }
  return v5;
}

uint64_t PCRE_V10_ObjClose(void *a1)
{
  if (!a1) {
    return 2320506886;
  }
  uint64_t v2 = a1[3];
  if (v2) {
    pcre2_match_context_free_8(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    pcre2_compile_context_free_8(v3);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    pcre2_general_context_free_8(v4);
  }
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t PCRE_V10_ErrorToLhError(int a1)
{
  if ((a1 & 0x80000000) == 0) {
    return 0;
  }
  uint64_t result = 2320506887;
  switch(a1)
  {
    case -55:
    case -54:
    case -53:
    case -52:
    case -50:
    case -46:
    case -45:
    case -43:
    case -42:
    case -41:
    case -40:
    case -39:
    case -38:
    case -36:
    case -35:
    case -33:
    case -32:
    case -30:
      goto LABEL_7;
    case -51:
      return 2320507149;
    case -49:
      goto LABEL_6;
    case -48:
      return 2320506890;
    case -47:
      return 2320514656;
    case -44:
      return 2320514660;
    case -37:
      return 2320514657;
    case -34:
    case -29:
      return result;
    case -31:
      return 2320514662;
    default:
      if (a1 == -2)
      {
        uint64_t result = 2320514658;
      }
      else if (a1 == -1)
      {
LABEL_6:
        uint64_t result = 2320506900;
      }
      else
      {
LABEL_7:
        uint64_t result = 2320514663;
      }
      break;
  }
  return result;
}

uint64_t PCRE_V10_CompilePattern(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v12 = 0;
  int v11 = 0;
  uint64_t v9 = pcre2_compile_8(a2, 0xFFFFFFFFFFFFFFFFLL, a3, &v11, &v12, *(long long **)(a1 + 16));
  if (!v9)
  {
    pcre2_get_error_message_8(v11, a4, a5);
    if (!a6) {
      return v9;
    }
    goto LABEL_3;
  }
  if (a6) {
LABEL_3:
  }
    *a6 = v12;
  return v9;
}

uint64_t PCRE_V10_Exec(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, unsigned int a6, int32x2_t *a7, int a8, int *a9)
{
  uint64_t v17 = pcre2_match_data_create_from_pattern_8(a2, *(long long **)(a1 + 8));
  if (v17)
  {
    uint64_t matched = pcre2_match_8(a2, a3, a4, a5, a6, (uint64_t)v17, *(long long **)(a1 + 24));
    uint64_t v19 = matched;
    if ((matched & 0x80000000) == 0)
    {
      if (a8 / 3 >= (int)matched) {
        uint64_t v20 = matched;
      }
      else {
        uint64_t v20 = (a8 / 3);
      }
      ovector_pointer_8 = (int64x2_t *)pcre2_get_ovector_pointer_8((uint64_t)v17);
      if ((int)v20 >= 1)
      {
        do
        {
          int64x2_t v22 = *ovector_pointer_8++;
          *a7++ = vmovn_s64(v22);
          --v20;
        }
        while (v20);
      }
    }
    int v23 = 0;
  }
  else
  {
    int v23 = -1974460406;
    *a9 = -1974460406;
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  pcre2_match_data_free_8((uint64_t)v17);
  *a9 = v23;
  return v19;
}

uint64_t PCRE_V10_SerializeAndEncode(uint64_t a1, size_t *a2, _DWORD *a3, void *a4)
{
  v10[1] = *(size_t **)MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v10[0] = a2;
  int v6 = pcre2_serialize_encode_8(v10, 1, &v9, &v8, *(long long **)(a1 + 8));
  if ((v6 & 0x80000000) == 0)
  {
    *a3 = v8;
    *a4 = v9;
  }
  return PCRE_V10_ErrorToLhError(v6);
}

uint64_t PCRE_V10_SerializeAndDecode(uint64_t a1, _DWORD *a2, void *a3)
{
  v6[1] = *MEMORY[0x263EF8340];
  v6[0] = 0;
  int v4 = pcre2_serialize_decode_8((uint64_t)v6, 1, a2, *(long long **)(a1 + 8));
  uint64_t result = PCRE_V10_ErrorToLhError(v4);
  *a3 = v6[0];
  return result;
}

uint64_t PCRE_V10_Adapter_Pattern_Init(void *a1)
{
  a1[2] = PCRE_V10_FreePattern;
  a1[3] = PCRE_V10_GetPatternSize;
  a1[4] = PCRE_V10_CopyPattern;
  return 0;
}

uint64_t PCRE_V10_GetPatternSize(uint64_t a1, uint64_t *a2)
{
  int v2 = pcre2_pattern_info_8(a1, 0x16u, a2);

  return PCRE_V10_ErrorToLhError(v2);
}

uint64_t loc_PCRE_V10_private_malloc(uint64_t a1, uint64_t a2)
{
  return heap_Alloc(a2, a1);
}

void *loc_PCRE_V10_private_free(uint64_t a1, void *a2)
{
  return heap_Free(a2, a1);
}

uint64_t PCRE_Adapter_Create(int a1, uint64_t a2, _WORD *a3, int a4)
{
  uint64_t v11 = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v11);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v7 = 2320506890;
  uint64_t v8 = (void *)heap_Alloc(*(void *)(v11 + 8), 88);
  if (v8)
  {
    uint64_t v9 = v8;
    if (a1 == 1) {
      uint64_t v7 = PCRE_V10_Adapter_Init(v8);
    }
    else {
      uint64_t v7 = 2320506898;
    }
    *uint64_t v9 = v11;
    v9[1] = 0;
    *(void *)a2 = v9;
    *(_DWORD *)(a2 + 8) = 56664;
  }
  return v7;
}

uint64_t PCRE_ObjOpen(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    int v6 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))a1[2];
    uint64_t v7 = *a1;
    return v6(a1 + 1, a3, v7);
  }
  return result;
}

uint64_t PCRE_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(a1 + 24))(*(void *)(a1 + 8));
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
    return v4;
  }
  return result;
}

uint64_t PCRE_ErrorToLhError(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(uint64_t (**)(uint64_t))(a1 + 32);
    return v6(a3);
  }
  return result;
}

void *PCRE_CompilePattern(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v8[0] = 0;
  v8[1] = 0;
  int v9 = 0;
  return PCRE_CompilePatternWithOptions(a1, a2, a3, (uint64_t)v8, a4, a5, a6, a7);
}

void *PCRE_CompilePatternWithOptions(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  int v15 = safeh_HandleCheck(a1, a2, 56664, 88);
  if (v15 < 0)
  {
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  uint64_t v16 = 0;
  LODWORD(v17) = 0;
  do
  {
    int v18 = *(_DWORD *)(a4 + v16);
    if (v18) {
      int v18 = *(_DWORD *)(*(void *)(a1 + 80) + v16);
    }
    uint64_t v17 = v18 | v17;
    v16 += 4;
  }
  while (v16 != 20);
  uint64_t v19 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  uint64_t v20 = v19;
  if (!v19)
  {
LABEL_12:
    int v15 = -1974460406;
    goto LABEL_13;
  }
  PCRE_V10_Adapter_Pattern_Init(v19);
  uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 40))(*(void *)(a1 + 8), a3, v17, a5, a6, a7);
  if (!v21)
  {
    uint64_t v20 = 0;
    goto LABEL_12;
  }
  *uint64_t v20 = *(void *)a1;
  v20[1] = v21;
LABEL_13:
  *a8 = v15;
  return v20;
}

uint64_t PCRE_SerializeAndEncode(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = safeh_HandleCheck(a3, a4, 56665, 0);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56);
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = *(void *)(a3 + 8);
      return v12(v13, v14, a5, a6);
    }
  }
  return result;
}

uint64_t PCRE_SerializeAndDecode(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2320506890;
  uint64_t v13 = 0;
  int v9 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  if (v9)
  {
    uint64_t v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t *))(a1 + 48))(*(void *)(a1 + 8), a3, &v13);
    if ((v7 & 0x80000000) != 0) {
      return v7;
    }
    uint64_t v11 = v13;
    if (v13)
    {
      *uint64_t v10 = *(void *)a1;
      v10[1] = v11;
      *a4 = v10;
      a4[1] = 56665;
      return v7;
    }
  }
  return v8;
}

uint64_t PCRE_SerializeFree(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = safeh_HandleCheck(a1, a2, 56664, 88);
  if ((v5 & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(a1 + 64))(a3);
  }
  return v5;
}

uint64_t PCRE_FreePattern(uint64_t a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(void))(a1 + 16))(*(void *)(a1 + 8));
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
  }
  return v3;
}

uint64_t PCRE_CopyPattern(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((v7 & 0x80000000) != 0) {
    goto LABEL_5;
  }
  uint64_t v8 = 2320506890;
  int v9 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), 40);
  if (v9)
  {
    uint64_t v10 = v9;
    PCRE_V10_Adapter_Pattern_Init(v9);
    uint64_t v11 = *(void *)(a1 + 8);
    *uint64_t v10 = *(void *)a1;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(a1 + 32))(v11);
    v10[1] = v12;
    if (v12)
    {
      *(void *)a3 = v10;
      *(_DWORD *)(a3 + 8) = 56665;
LABEL_5:
      uint64_t v8 = v7;
    }
  }
  *a4 = v8;
  return v8;
}

uint64_t PCRE_GetPatternSize(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 56665, 0);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 8);
    return v6(v7, a3);
  }
  return result;
}

uint64_t PCRE_Exec(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, _DWORD *a10)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  return PCRE_ExecWithOptions(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v11, a8, a9, a10);
}

uint64_t PCRE_ExecWithOptions(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, _DWORD *a11)
{
  int v18 = safeh_HandleCheck((uint64_t)a1, a2, 56664, 88);
  if (v18 < 0 || (int v18 = safeh_HandleCheck(a3, a4, 56665, 0), v18 < 0))
  {
    *a11 = v18;
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v19 = 0;
    LODWORD(v20) = 0;
    do
    {
      int v21 = *(_DWORD *)(a8 + v19);
      if (v21) {
        int v21 = *(_DWORD *)(a1[10] + v19);
      }
      uint64_t v20 = v21 | v20;
      v19 += 4;
    }
    while (v19 != 20);
    int64x2_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, _DWORD *))a1[9];
    uint64_t v23 = a1[1];
    uint64_t v24 = *(void *)(a3 + 8);
    return v22(v23, v24, a5, a6, a7, v20, a9, a10, a11);
  }
}

uint64_t PCRE_Adapter2PCREOptions(uint64_t a1, int a2, uint64_t a3)
{
  if ((safeh_HandleCheck(a1, a2, 56664, 88) & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(result) = 0;
  do
  {
    int v7 = *(_DWORD *)(a3 + v5);
    if (v7) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 80) + v5);
    }
    uint64_t result = v7 | result;
    v5 += 4;
  }
  while (v5 != 20);
  return result;
}

uint64_t _pcre2_auto_possessify_8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v21 = 1000;
  unsigned int v3 = *a1;
  if (v3 <= 0xA4)
  {
    int v7 = a1;
    while ((v3 - 33) > 0x40u)
    {
      if (v3 - 110 < 2)
      {
        uint64_t v9 = 33;
        goto LABEL_14;
      }
      if (v3 == 112)
      {
        uint64_t v9 = __rev16(*(unsigned __int16 *)(v7 + 1));
LABEL_14:
        unsigned __int8 v10 = v7[v9];
        if ((v10 - 98) <= 7u)
        {
          chr_property_list = get_chr_property_list(v7, a2, *(void *)(a3 + 16), (uint64_t)&v22);
          BOOL v23 = (v10 & 1) == 0;
          if (compare_opcodes(chr_property_list, a2, a3, &v22, chr_property_list, &v21))
          {
            if ((v10 - 98) <= 7u) {
              v7[v9] = 0x6D6D6C6C6B6B6A6AuLL >> (8 * (v10 - 98));
            }
          }
        }
LABEL_35:
        LOBYTE(v3) = *v7;
      }
      uint64_t result = v3;
      switch((char)v3)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '^':
        case '_':
          int v15 = v7[1];
          goto LABEL_42;
        case '[':
        case '\\':
        case ']':
        case 'a':
          int v15 = v7[3];
LABEL_42:
          uint64_t v16 = 2 * ((v15 - 15) < 2);
          goto LABEL_43;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
        case 'v':
          goto LABEL_51;
        case 'p':
          unsigned int v19 = *(unsigned __int16 *)(v7 + 1);
          goto LABEL_49;
        case 'w':
          unsigned int v19 = *(unsigned __int16 *)(v7 + 5);
LABEL_49:
          uint64_t v16 = __rev16(v19);
          goto LABEL_43;
        default:
          if (v3 - 150 <= 8 && ((1 << (v3 + 106)) & 0x155) != 0)
          {
            uint64_t v16 = v7[1];
LABEL_43:
            uint64_t v17 = _pcre2_OP_lengths_8;
            goto LABEL_44;
          }
          if (!(_BYTE)v3) {
            return result;
          }
LABEL_51:
          uint64_t v16 = _pcre2_OP_lengths_8[v3];
          int v18 = &v7[v16];
          if (a2)
          {
            if ((v3 - 29) <= 0x37u)
            {
              unsigned int v20 = *(v18 - 1);
              if (v20 >= 0xC0)
              {
                LOBYTE(v3) = v20 & 0x3F;
                uint64_t v17 = _pcre2_utf8_table4;
LABEL_44:
                int v18 = &v7[v16 + v17[v3]];
              }
            }
          }
          unsigned int v3 = *v18;
          int v7 = v18;
          if (v3 >= 0xA5) {
            return 0xFFFFFFFFLL;
          }
          break;
      }
    }
    if (v3 <= 0x54u)
    {
      if (v3 <= 0x47u)
      {
        if (v3 >= 0x2Eu) {
          int v12 = -46;
        }
        else {
          int v12 = -33;
        }
        if (v3 <= 0x3Au) {
          int v8 = v12;
        }
        else {
          int v8 = 197;
        }
      }
      else
      {
        int v8 = 184;
      }
    }
    else
    {
      int v8 = 171;
    }
    if ((v3 + v8 + 33) >= 0x29u)
    {
      BOOL v23 = ((v8 + v3) & 0xF9) == 0;
    }
    else
    {
      uint64_t v13 = get_chr_property_list(v7, a2, *(void *)(a3 + 16), (uint64_t)&v22);
      BOOL v23 = ((v8 + v3) & 0xF9) == 0;
      if (v13 && compare_opcodes(v13, a2, a3, &v22, v13, &v21))
      {
        switch((_BYTE)v3 + (_BYTE)v8)
        {
          case 0:
            unsigned __int8 v14 = *v7 + 9;
            goto LABEL_34;
          case 1:
          case 2:
            unsigned __int8 v14 = *v7 + 8;
            goto LABEL_34;
          case 3:
          case 4:
            unsigned __int8 v14 = *v7 + 7;
            goto LABEL_34;
          case 5:
          case 6:
            unsigned __int8 v14 = *v7 + 6;
            goto LABEL_34;
          case 7:
            unsigned __int8 v14 = *v7 + 5;
LABEL_34:
            unsigned __int8 *v7 = v14;
            break;
          default:
            goto LABEL_35;
        }
      }
    }
    goto LABEL_35;
  }
  return 0xFFFFFFFFLL;
}

unsigned __int8 *get_chr_property_list(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *a1;
  uint64_t result = a1 + 1;
  unsigned int v6 = v7;
  *(void *)a4 = v7;
  if (v7 - 33 <= 0x40)
  {
    if (v6 >= 0x2E) {
      int v8 = 46;
    }
    else {
      int v8 = 33;
    }
    if (v6 <= 0x3A) {
      int v9 = v8;
    }
    else {
      int v9 = 59;
    }
    if (v6 <= 0x47) {
      int v10 = v9;
    }
    else {
      int v10 = 72;
    }
    if (v6 <= 0x54) {
      int v11 = v10;
    }
    else {
      int v11 = 85;
    }
    BOOL v12 = (v6 - v11 + 33) > 0x2Du
       || ((1 << (v6 - v11 + 33)) & 0x238000000000) == 0;
    uint64_t v13 = a1 + 3;
    if (!v12) {
      uint64_t result = v13;
    }
    if ((v6 - v11 - 2) > 8u) {
      int v14 = 1;
    }
    else {
      int v14 = dword_22072252C[(char)(v6 - v11 - 2)];
    }
    *(_DWORD *)(a4 + 4) = v14;
    if (v11 <= 58)
    {
      if (v11 == 33)
      {
        int v15 = 29;
LABEL_38:
        *(_DWORD *)a4 = v15;
LABEL_39:
        int v21 = result + 1;
        unsigned int v20 = *result;
        if (a2 && v20 >= 0xC0)
        {
          if ((v20 & 0x20) != 0)
          {
            int v24 = *v21 & 0x3F;
            if ((v20 & 0x10) != 0)
            {
              if ((v20 & 8) != 0)
              {
                int v35 = result[2] & 0x3F;
                int v36 = result[3] & 0x3F;
                int v37 = result[4] & 0x3F;
                if ((v20 & 4) != 0)
                {
                  unsigned int v20 = ((v20 & 1) << 30) | (v24 << 24) | (v35 << 18) | (v36 << 12) | (v37 << 6) | result[5] & 0x3F;
                  int v21 = result + 6;
                }
                else
                {
                  unsigned int v20 = ((v20 & 3) << 24) | (v24 << 18) | (v35 << 12) | (v36 << 6) | v37;
                  int v21 = result + 5;
                }
              }
              else
              {
                unsigned int v20 = ((v20 & 7) << 18) | (v24 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
                int v21 = result + 4;
              }
            }
            else
            {
              unsigned int v20 = ((v20 & 0xF) << 12) | (v24 << 6) | result[2] & 0x3F;
              int v21 = result + 3;
            }
          }
          else
          {
            int v21 = result + 2;
            unsigned int v20 = result[1] & 0x3F | ((v20 & 0x1F) << 6);
          }
        }
        *(_DWORD *)(a4 + 8) = v20;
        *(_DWORD *)(a4 + 12) = -1;
        return v21;
      }
LABEL_30:
      int v17 = 29;
LABEL_32:
      *(_DWORD *)a4 = v17;
      unsigned int v18 = *result;
      if (a2 && v18 >= 0xC0)
      {
        if ((v18 & 0x20) != 0)
        {
          int v23 = result[1] & 0x3F;
          if ((v18 & 0x10) != 0)
          {
            if ((v18 & 8) != 0)
            {
              int v32 = result[2] & 0x3F;
              int v33 = result[3] & 0x3F;
              int v34 = result[4] & 0x3F;
              if ((v18 & 4) != 0)
              {
                unsigned int v18 = ((v18 & 1) << 30) | (v23 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | result[5] & 0x3F;
                result += 6;
              }
              else
              {
                unsigned int v18 = ((v18 & 3) << 24) | (v23 << 18) | (v32 << 12) | (v33 << 6) | v34;
                result += 5;
              }
            }
            else
            {
              unsigned int v18 = ((v18 & 7) << 18) | (v23 << 12) | ((result[2] & 0x3F) << 6) | result[3] & 0x3F;
              result += 4;
            }
          }
          else
          {
            unsigned int v18 = ((v18 & 0xF) << 12) | (v23 << 6) | result[2] & 0x3F;
            result += 3;
          }
        }
        else
        {
          unsigned __int8 v19 = result[1];
          result += 2;
          unsigned int v18 = v19 & 0x3F | ((v18 & 0x1F) << 6);
        }
      }
      else
      {
        ++result;
      }
      *(_DWORD *)(a4 + 8) = v18;
      if (a2) {
        BOOL v38 = 1;
      }
      else {
        BOOL v38 = v18 > 0xFF;
      }
      char v39 = v38;
      if (v18 >= 0x80 && (v39 & 1) != 0) {
        unsigned int v40 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v18 & 0x7F | (_pcre2_ucd_stage1_8[v18 >> 7] << 7)] + 1] + v18;
      }
      else {
        unsigned int v40 = *(unsigned __int8 *)(a3 + v18);
      }
      *(_DWORD *)(a4 + 12) = v40;
      if (v18 == v40) {
        *(_DWORD *)(a4 + 12) = -1;
      }
      else {
        *(_DWORD *)(a4 + 16) = -1;
      }
      return result;
    }
    if (v11 != 85)
    {
      if (v11 != 72)
      {
        int v15 = 31;
        goto LABEL_38;
      }
      int v17 = 31;
      goto LABEL_32;
    }
    unsigned int v16 = *result++;
    unsigned int v6 = v16;
    *(_DWORD *)a4 = v16;
  }
  int v17 = 31;
  switch(v6)
  {
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
      return result;
    case 0xEu:
    case 0x1Bu:
    case 0x1Cu:
      return 0;
    case 0xFu:
    case 0x10u:
      int v25 = *result;
      if (v25 != 9)
      {
        *(_DWORD *)(a4 + 8) = v25;
        *(_DWORD *)(a4 + 12) = result[1];
        result += 2;
        return result;
      }
      uint64_t v26 = 0;
      int v27 = (char *)&_pcre2_ucd_caseless_sets_8 + 4 * result[1];
      int v22 = result + 2;
      do
      {
        if (v26 == 24)
        {
          *(_DWORD *)(a4 + 8) = result[2];
          *(_DWORD *)(a4 + 12) = result[3];
          return v22;
        }
        int v28 = *(_DWORD *)&v27[v26];
        *(_DWORD *)(a4 + v26 + 8) = v28;
        v26 += 4;
      }
      while (v28 != -1);
      if (v6 == 16) {
        int v29 = 29;
      }
      else {
        int v29 = 31;
      }
      *(_DWORD *)a4 = v29;
      return v22;
    case 0x1Du:
    case 0x1Fu:
      goto LABEL_39;
    case 0x1Eu:
      goto LABEL_30;
    case 0x20u:
      goto LABEL_32;
    default:
      if (v6 - 110 >= 2)
      {
        if (v6 != 112) {
          return 0;
        }
        int v22 = &result[__rev16(*(unsigned __int16 *)result) - 1];
      }
      else
      {
        int v22 = result + 32;
      }
      unsigned int v30 = *v22 - 98;
      if (v30 > 0xB) {
        goto LABEL_71;
      }
      int v31 = 1 << v30;
      if ((v31 & 0x533) != 0)
      {
        *(_DWORD *)(a4 + 4) = 1;
LABEL_64:
        ++v22;
        goto LABEL_71;
      }
      if ((v31 & 0x20C) != 0) {
        goto LABEL_64;
      }
      *(_DWORD *)(a4 + 4) = __rev16(*(unsigned __int16 *)(v22 + 1)) == 0;
      v22 += 5;
LABEL_71:
      *(_DWORD *)(a4 + 8) = v22 - result;
      return v22;
  }
}

uint64_t compare_opcodes(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int *a4, unsigned __int8 *a5, _DWORD *a6)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  int v6 = (*a6)--;
  if (v6 >= 2)
  {
    uint64_t v14 = 0;
    uint64_t v85 = a4 + 2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v15 = *a1;
          if (v15 != 118) {
            break;
          }
          a1 += 6;
        }
        if (v15 != 119) {
          break;
        }
        a1 += __rev16(*(unsigned __int16 *)(a1 + 5));
      }
      while (v15 == 120)
      {
        a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
        int v15 = *a1;
      }
      if ((v15 - 121) > 0x1B) {
        goto LABEL_14;
      }
      int v16 = 1 << (v15 - 121);
      if ((v16 & 0x1600) != 0)
      {
        int v21 = &a1[__rev16(*(unsigned __int16 *)(a1 + 1))];
        a1 += _pcre2_OP_lengths_8[v15];
        uint64_t v14 = 1;
        if (*v21 == 120)
        {
          do
          {
            uint64_t result = compare_opcodes(a1, a2, a3, a4, a5, a6);
            if (!result) {
              return result;
            }
            a1 = v21 + 3;
            v21 += __rev16(*(unsigned __int16 *)(v21 + 1));
          }
          while (*v21 == 120);
          uint64_t v14 = 1;
        }
      }
      else if ((v16 & 9) != 0)
      {
        if (!a4[1]) {
          return 0;
        }
        unsigned int v22 = a1[-__rev16(*(unsigned __int16 *)(a1 + 1))] - 126;
        if (v22 <= 0xD)
        {
          int v23 = 1 << v22;
          if ((v23 & 0x3180) != 0)
          {
            if (*(_DWORD *)(a3 + 292)) {
              return 0;
            }
          }
          else if ((v23 & 0x1F) != 0)
          {
            return v14 ^ 1;
          }
        }
        a1 += _pcre2_OP_lengths_8[v15];
      }
      else if ((v16 & 0xC000000) != 0)
      {
        uint64_t v80 = a1 + 1;
        unsigned int v81 = a1[1] - 130;
        if (v81 > 3 || v81 == 2) {
          return 0;
        }
        do
          v80 += __rev16(*(unsigned __int16 *)(v80 + 1));
        while (*v80 == 120);
        uint64_t result = compare_opcodes(v80 + 3, a2, a3, a4, a5, a6);
        if (!result) {
          return result;
        }
        a1 += _pcre2_OP_lengths_8[v15];
      }
      else
      {
LABEL_14:
        if (!v15) {
          return a4[1] != 0;
        }
        uint64_t result = (uint64_t)get_chr_property_list(a1, a2, *(void *)(a3 + 16), (uint64_t)&v86);
        if (!result) {
          return result;
        }
        a1 = (unsigned __int8 *)result;
        int v18 = *a4;
        if (*a4 == 29)
        {
          unsigned __int8 v19 = &v86;
          unsigned int v20 = v85;
LABEL_27:
          int v24 = *v20;
          if (v19 == &v86) {
            uint64_t v25 = result;
          }
          else {
            uint64_t v25 = (uint64_t)a5;
          }
          uint64_t v26 = v25 + 2;
          int v27 = v19 + 3;
          while (2)
          {
            uint64_t result = 0;
            int v28 = *v19;
            if (*v19 <= 109)
            {
              switch(v28)
              {
                case 6:
                  if (v24 > 0xFF || (*(unsigned char *)(*(void *)(a3 + 32) + v24) & 4) == 0) {
                    return 0;
                  }
                  goto LABEL_149;
                case 7:
                  if (v24 <= 0xFF && (*(unsigned char *)(*(void *)(a3 + 32) + v24) & 4) != 0) {
                    return 0;
                  }
                  goto LABEL_149;
                case 8:
                  if (v24 > 0xFF || (*(unsigned char *)(*(void *)(a3 + 32) + v24) & 1) == 0) {
                    return 0;
                  }
                  goto LABEL_149;
                case 9:
                  if v24 <= 0xFF && (*(unsigned char *)(*(void *)(a3 + 32) + v24)) {
                    return 0;
                  }
                  goto LABEL_149;
                case 10:
                  if (v24 > 0xFF || (*(unsigned char *)(*(void *)(a3 + 32) + v24) & 0x10) == 0) {
                    return 0;
                  }
                  goto LABEL_149;
                case 11:
                  if (v24 <= 0xFE && (*(unsigned char *)(*(void *)(a3 + 32) + v24) & 0x10) != 0) {
                    return 0;
                  }
                  goto LABEL_149;
                case 15:
                case 16:
                  int v32 = v28 == 15;
                  int v33 = v19[3];
                  unint64_t v17 = _pcre2_ucd_stage2_8[(int)(v24 - (v17 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v24 / 128] << 7))];
                  switch(v19[2])
                  {
                    case 1:
                      int v40 = BYTE1(_pcre2_ucd_records_8[2 * v17]);
                      if (v40 == 5 || v40 == 9) {
                        goto LABEL_119;
                      }
                      BOOL v42 = v40 == 8;
                      goto LABEL_144;
                    case 2:
                      BOOL v43 = v28 == 15;
                      BOOL v44 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] == v33;
                      goto LABEL_114;
                    case 3:
                      BOOL v43 = v28 == 15;
                      int v45 = BYTE1(_pcre2_ucd_records_8[2 * v17]);
                      goto LABEL_112;
                    case 4:
                      BOOL v43 = v28 == 15;
                      int v45 = LOBYTE(_pcre2_ucd_records_8[2 * v17]);
LABEL_112:
                      BOOL v44 = v33 == v45;
                      goto LABEL_114;
                    case 5:
                      BOOL v43 = v28 == 15;
                      BOOL v44 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] & 0xFFFFFFFD) == 1;
                      goto LABEL_114;
                    case 6:
                    case 7:
                      if (v24 < 0x2000)
                      {
                        if (v24 > 132)
                        {
                          if (v24 > 5759)
                          {
                            if (v24 == 5760 || v24 == 6158) {
                              goto LABEL_148;
                            }
                          }
                          else if (v24 == 133 || v24 == 160)
                          {
                            goto LABEL_148;
                          }
                        }
                        else if (v24 <= 0x20 && ((1 << v24) & 0x100003E00) != 0)
                        {
                          goto LABEL_148;
                        }
                      }
                      else if ((v24 - 0x2000) < 0xB {
                             || (v24 - 8232) <= 0x37
                      }
                             && ((1 << (v24 - 40)) & 0x80000000000083) != 0
                             || v24 == 12288)
                      {
                        goto LABEL_148;
                      }
                      BOOL v43 = v28 == 15;
                      BOOL v44 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] == 6;
LABEL_114:
                      int v46 = !v44;
                      int v32 = v43 ^ v46;
                      goto LABEL_148;
                    case 8:
                      if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v17])] | 2) == 3)
                      {
LABEL_119:
                        int v47 = 1;
                      }
                      else
                      {
                        BOOL v42 = v24 == 95;
LABEL_144:
                        int v47 = v42;
                      }
                      int v32 = v47 == v32;
                      goto LABEL_148;
                    case 9:
                      unint64_t v17 = (unint64_t)&_pcre2_ucd_caseless_sets_8 + 4 * HIBYTE(_pcre2_ucd_records_8[2 * v17]);
                      break;
                    default:
                      return 0;
                  }
                  while (1)
                  {
                    int v48 = *(_DWORD *)v17;
                    if (*(_DWORD *)v17 > v24) {
                      break;
                    }
                    v17 += 4;
                    if (v48 == v24) {
                      goto LABEL_148;
                    }
                  }
                  int v32 = v28 != 15;
LABEL_148:
                  if (v32) {
                    goto LABEL_149;
                  }
                  return 0;
                case 17:
                case 21:
                case 23:
                case 25:
                  uint64_t result = 0;
                  if ((v24 - 10) >= 4 && (v24 - 8232) >= 2 && v24 != 133) {
                    goto LABEL_149;
                  }
                  return result;
                case 18:
                  uint64_t result = 0;
                  if (v24 < 0x2000)
                  {
                    if (v24 <= 159)
                    {
                      if (v24 != 9 && v24 != 32) {
                        return result;
                      }
                    }
                    else if (v24 != 160 && v24 != 5760 && v24 != 6158)
                    {
                      return result;
                    }
                  }
                  else if (v24 > 8238)
                  {
                    if (v24 != 8239 && v24 != 8287 && v24 != 12288) {
                      return result;
                    }
                  }
                  else if ((v24 - 0x2000) >= 0xB)
                  {
                    return result;
                  }
                  goto LABEL_149;
                case 19:
                  uint64_t result = 0;
                  if (v24 < 0x2000)
                  {
                    if (v24 <= 159)
                    {
                      if (v24 == 9 || v24 == 32) {
                        return result;
                      }
                    }
                    else if (v24 == 160 || v24 == 5760 || v24 == 6158)
                    {
                      return result;
                    }
                  }
                  else if (v24 > 8238)
                  {
                    if (v24 == 8239 || v24 == 8287 || v24 == 12288) {
                      return result;
                    }
                  }
                  else if ((v24 - 0x2000) < 0xB)
                  {
                    return result;
                  }
                  break;
                case 20:
                  if ((v24 - 10) >= 4 && (v24 - 8232) >= 2 && v24 != 133) {
                    return 0;
                  }
                  goto LABEL_149;
                case 24:
                  goto LABEL_149;
                case 29:
                  int v34 = v19[2];
                  int v35 = v27;
                  while (v24 != v34)
                  {
                    int v36 = *v35++;
                    int v34 = v36;
                    if (v36 == -1) {
                      goto LABEL_149;
                    }
                  }
                  return 0;
                case 31:
                  int v37 = v19[2];
                  BOOL v38 = v27;
                  while (v24 != v37)
                  {
                    int v39 = *v38++;
                    int v37 = v39;
                    if (v39 == -1) {
                      return 0;
                    }
                  }
                  if (v24 == -1) {
                    return 0;
                  }
                  goto LABEL_149;
                default:
                  return result;
              }
              goto LABEL_149;
            }
            switch(v28)
            {
              case 'n':
                if (v24 <= 0xFF) {
                  goto LABEL_90;
                }
                break;
              case 'o':
                if (v24 > 0xFF) {
                  return 0;
                }
LABEL_90:
                if ((*(unsigned __int8 *)(v25 - v19[2] + ((unint64_t)v24 >> 3)) >> (v24 & 7))) {
                  return 0;
                }
                break;
              case 'p':
                uint64_t v83 = v26;
                uint64_t v84 = v19;
                uint64_t v29 = v14;
                uint64_t v30 = v25;
                BOOL v31 = _pcre2_xclass_8(v24, (unsigned char *)(v26 - v19[2]));
                uint64_t v26 = v83;
                unsigned __int8 v19 = v84;
                uint64_t v25 = v30;
                uint64_t v14 = v29;
                if (v31) {
                  return 0;
                }
                break;
              default:
                return result;
            }
LABEL_149:
            int v49 = v20[1];
            ++v20;
            int v24 = v49;
            if (v49 == -1) {
              goto LABEL_201;
            }
            continue;
          }
        }
        unsigned int v20 = (int *)&v88;
        unsigned __int8 v19 = a4;
        if (v86 == 29) {
          goto LABEL_27;
        }
        if (v18 == 110 || v86 == 110 || !a2 && (v18 == 111 || v86 == 111))
        {
          uint64_t result = 0;
          if (a2) {
            BOOL v54 = 0;
          }
          else {
            BOOL v54 = v18 == 111;
          }
          BOOL v55 = v54 || v18 == 110;
          int v56 = v55;
          if (v55) {
            int v57 = a4;
          }
          else {
            int v57 = &v86;
          }
          if (v55) {
            uint64_t v58 = a5;
          }
          else {
            uint64_t v58 = a1;
          }
          if (v55) {
            int v59 = v86;
          }
          else {
            int v59 = *a4;
          }
          if (v55) {
            uint64_t v60 = &v86;
          }
          else {
            uint64_t v60 = a4;
          }
          uint64_t v61 = &v58[-v57[2]];
          switch(v59)
          {
            case 6:
              LODWORD(result) = 1;
              goto LABEL_197;
            case 7:
LABEL_197:
              uint64_t v62 = *(void *)(a3 + 24) + 64;
              goto LABEL_226;
            case 8:
              LODWORD(result) = 1;
              goto LABEL_223;
            case 9:
LABEL_223:
              uint64_t v62 = *(void *)(a3 + 24);
              goto LABEL_226;
            case 10:
              LODWORD(result) = 1;
              goto LABEL_225;
            case 11:
LABEL_225:
              uint64_t v62 = *(void *)(a3 + 24) + 160;
LABEL_226:
              if (!result) {
                goto LABEL_232;
              }
              uint64_t v70 = 0;
              while ((v61[v70] & ~*(unsigned __int8 *)(v62 + v70)) == 0)
              {
                if (++v70 == 32) {
                  goto LABEL_235;
                }
              }
              return 0;
            default:
              if ((v59 - 110) >= 2)
              {
                if (v59 != 112) {
                  return result;
                }
                if (v60 == &v86) {
                  uint64_t v66 = a1;
                }
                else {
                  uint64_t v66 = a5;
                }
                if (v56) {
                  uint64_t v67 = &v86;
                }
                else {
                  uint64_t v67 = a4;
                }
                uint64_t v68 = &v66[-v67[2]];
                unsigned __int8 v69 = v68[2];
                if ((v69 & 4) != 0) {
                  return 0;
                }
                if ((v68[2] & 2) != 0)
                {
                  uint64_t v62 = (uint64_t)(v68 + 3);
                  goto LABEL_232;
                }
                if (!v87) {
                  return (v69 & 1) == 0;
                }
              }
              else
              {
                if (v60 == &v86) {
                  int v64 = a1;
                }
                else {
                  int v64 = a5;
                }
                if (v56) {
                  int v65 = &v86;
                }
                else {
                  int v65 = a4;
                }
                uint64_t v62 = (uint64_t)&v64[-v65[2]];
LABEL_232:
                for (uint64_t i = 0; i != 32; ++i)
                {
                  if ((*(unsigned char *)(v62 + i) & v61[i]) != 0) {
                    return 0;
                  }
                }
LABEL_235:
                if (!v87) {
                  return 1;
                }
              }
              break;
          }
        }
        else
        {
          if ((v18 - 15) > 1)
          {
            uint64_t result = 0;
            unsigned int v63 = v18 - 6;
            if (v63 > 0x10 || (v86 - 6) > 0x14) {
              return result;
            }
            if (!autoposstab[21 * v63 + v86 - 6]) {
              return 0;
            }
          }
          else if (v86 != 24)
          {
            if ((v86 - 15) > 1) {
              return 0;
            }
            int v50 = propposstab[11 * *v85 + v88];
            switch(propposstab[11 * *v85 + v88])
            {
              case 1u:
                uint64_t result = 0;
                if (v18 != 16 || v86 != 16) {
                  return result;
                }
                break;
              case 2u:
                if ((v18 == v86) == (a4[3] == v89)) {
                  return 0;
                }
                break;
              case 3u:
                if (v18 == v86) {
                  return 0;
                }
                break;
              case 4u:
                if (v86 != 16) {
                  return 0;
                }
                int v77 = v18 == 16;
                unsigned int v78 = a4[3];
                uint64_t v79 = v89;
                goto LABEL_271;
              case 5u:
                if (v18 != 16) {
                  return 0;
                }
                int v77 = v86 == 16;
                unsigned int v78 = v89;
                uint64_t v79 = a4[3];
LABEL_271:
                if (catposstab[30 * v78 + v79] != v77) {
                  return 0;
                }
                break;
              case 6u:
              case 7u:
              case 8u:
                if (v86 != 16) {
                  return 0;
                }
                uint64_t v51 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 6);
                unsigned int v52 = v89;
                if (v89 == *v51 || v89 == v51[1]) {
                  goto LABEL_249;
                }
                uint64_t result = 0;
                if (v18 != 16) {
                  return result;
                }
                int v53 = v51[2];
                goto LABEL_242;
              case 9u:
              case 0xAu:
              case 0xBu:
                if (v18 != 16) {
                  return 0;
                }
                uint64_t v72 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 9);
                unsigned int v52 = a4[3];
                if (v52 == *v72 || v52 == v72[1]) {
                  goto LABEL_258;
                }
                uint64_t result = 0;
                if (v86 != 16) {
                  return result;
                }
                int v53 = v72[2];
LABEL_242:
                if (v52 == v53) {
                  return result;
                }
                break;
              case 0xCu:
              case 0xDu:
              case 0xEu:
                if (v86 != 16) {
                  return 0;
                }
                uint64_t v73 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 12);
                LODWORD(v74) = v89;
                if (catposstab[30 * *v73 + v89] && catposstab[30 * v73[1] + v89])
                {
                  uint64_t result = 0;
                  if (v18 != 16) {
                    return result;
                  }
                  int v75 = v73[3];
                  goto LABEL_256;
                }
LABEL_249:
                if (v18 == 16) {
                  return 0;
                }
                break;
              case 0xFu:
              case 0x10u:
              case 0x11u:
                if (v18 != 16) {
                  return 0;
                }
                BOOL v76 = (unsigned __int8 *)&posspropstab + 4 * (v50 - 15);
                uint64_t v74 = a4[3];
                if (catposstab[30 * *v76 + v74] && catposstab[30 * v76[1] + v74])
                {
                  uint64_t result = 0;
                  if (v86 != 16) {
                    return result;
                  }
                  int v75 = v76[3];
LABEL_256:
                  if (v74 == v75) {
                    return result;
                  }
                }
                else
                {
LABEL_258:
                  if (v86 == 16) {
                    return 0;
                  }
                }
                break;
              default:
                return 0;
            }
          }
LABEL_201:
          if (!v87) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

void *pcre2_code_copy_8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = (void *)(*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 72), *(void *)(a1 + 16));
  unsigned int v3 = v2;
  if (v2)
  {
    cstdlib_memcpy(v2, (const void *)a1, *(void *)(a1 + 72));
    v3[4] = 0;
    if ((*(unsigned char *)(a1 + 98) & 4) != 0) {
      ++*(void *)(*(void *)(a1 + 24) + 1088);
    }
  }
  return v3;
}

void *pcre2_code_copy_with_tables_8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = (void *)(*(uint64_t (**)(void, void))a1)(*(void *)(a1 + 72), *(void *)(a1 + 16));
  unsigned int v3 = v2;
  if (v2)
  {
    cstdlib_memcpy(v2, (const void *)a1, *(void *)(a1 + 72));
    v3[4] = 0;
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, void))a1)(1096, *(void *)(a1 + 16));
    if (v4)
    {
      uint64_t v5 = v4;
      cstdlib_memcpy(v4, *(const void **)(a1 + 24), 0x440uLL);
      v5[136] = 1;
      v3[3] = v5;
      *((_DWORD *)v3 + 24) |= 0x40000u;
      return v3;
    }
    (*(void (**)(void *, void))(a1 + 8))(v3, *(void *)(a1 + 16));
    return 0;
  }
  return v3;
}

uint64_t pcre2_code_free_8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 32);
    if (v2) {
      _pcre2_jit_free_8(v2, v1);
    }
    if ((*(unsigned char *)(v1 + 98) & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t v4 = *(void *)(v3 + 1088);
      if (v4)
      {
        uint64_t v5 = v4 - 1;
        *(void *)(v3 + 1088) = v5;
        if (!v5) {
          (*(void (**)(void))(v1 + 8))();
        }
      }
    }
    unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v6 = *(void *)(v1 + 16);
    return v7(v1, v6);
  }
  return result;
}

uint64_t _pcre2_check_escape_8(unsigned __int8 **a1, unint64_t a2, int *a3, int *a4, unsigned int a5, int a6, _DWORD *a7)
{
  int v8 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    uint64_t result = 0;
    int v15 = 101;
    goto LABEL_7;
  }
  uint64_t v13 = v8 + 1;
  int v12 = *v8;
  uint64_t v60 = v8 + 1;
  if ((a5 & 0x80000) != 0 && v12 >= 0xC0)
  {
    if ((v12 & 0x20) != 0)
    {
      int v16 = *v13 & 0x3F;
      if ((v12 & 0x10) != 0)
      {
        if ((v12 & 8) != 0)
        {
          int v17 = v8[2] & 0x3F;
          int v18 = v8[3] & 0x3F;
          int v19 = v8[4] & 0x3F;
          if ((v12 & 4) != 0)
          {
            int v12 = ((v12 & 1) << 30) | (v16 << 24) | (v17 << 18) | (v18 << 12) | (v19 << 6) | v8[5] & 0x3F;
            uint64_t v13 = v8 + 6;
          }
          else
          {
            int v12 = ((v12 & 3) << 24) | (v16 << 18) | (v17 << 12) | (v18 << 6) | v19;
            uint64_t v13 = v8 + 5;
          }
        }
        else
        {
          int v12 = ((v12 & 7) << 18) | (v16 << 12) | ((v8[2] & 0x3F) << 6) | v8[3] & 0x3F;
          uint64_t v13 = v8 + 4;
        }
      }
      else
      {
        int v12 = ((v12 & 0xF) << 12) | (v16 << 6) | v8[2] & 0x3F;
        uint64_t v13 = v8 + 3;
      }
      uint64_t v60 = v13;
    }
    else
    {
      uint64_t v13 = v8 + 2;
      uint64_t v60 = v8 + 2;
      int v12 = v8[1] & 0x3F | ((v12 & 0x1F) << 6);
    }
  }
  *a4 = 0;
  if ((v12 - 123) < 0xFFFFFFB5) {
    goto LABEL_17;
  }
  int v20 = escapes[v12 - 48];
  if (escapes[v12 - 48])
  {
    if (v20 > 0)
    {
      uint64_t result = 0;
      int v12 = escapes[v12 - 48];
      goto LABEL_21;
    }
    uint64_t result = -v20;
    if (a7)
    {
      if (v12 > 87)
      {
        if (v12 != 112 && v12 != 88) {
          goto LABEL_21;
        }
LABEL_60:
        a7[52] |= 0x100000u;
        goto LABEL_21;
      }
      if (v12 != 78)
      {
        if (v12 != 80) {
          goto LABEL_21;
        }
        goto LABEL_60;
      }
    }
    else if (v12 != 78)
    {
      goto LABEL_21;
    }
    if ((unint64_t)v13 >= a2 || *v13 != 123)
    {
LABEL_104:
      uint64_t result = 12;
      int v12 = 78;
      goto LABEL_21;
    }
    int v59 = v13 + 1;
    if ((uint64_t)(a2 - (void)(v13 + 1)) < 2 || v13[1] != 85 || (int v26 = v13[2], v13 += 2, v26 != 43))
    {
      if (read_repeat_counts(&v59, a2, 0, 0, a4) || *a4) {
        goto LABEL_104;
      }
      int v27 = 137;
      goto LABEL_103;
    }
    if ((a5 & 0x80000) == 0)
    {
      int v27 = 193;
LABEL_103:
      *a4 = v27;
      goto LABEL_104;
    }
    goto LABEL_91;
  }
  int v58 = 0;
  if (!a7)
  {
    if (v12 > 116)
    {
      if (v12 == 120)
      {
LABEL_88:
        if ((a5 & 2) == 0)
        {
          if ((unint64_t)v13 < a2)
          {
            uint64_t v34 = *v13;
            if (v34 == 123)
            {
LABEL_91:
              int v35 = v13 + 1;
              uint64_t v60 = v13 + 1;
              if ((unint64_t)(v13 + 1) < a2 && *v35 != 125)
              {
                int v12 = 0;
                unint64_t v50 = a2 - (void)v35;
                do
                {
                  uint64_t v51 = *v35;
                  int v52 = xdigitab[v51];
                  if (v52 == 255) {
                    goto LABEL_182;
                  }
                  if (v12 || v51 != 48)
                  {
                    int v12 = v52 | (16 * v12);
                    BOOL v54 = (a5 & 0x80000) == 0 && v12 > 0xFF;
                    if (((v12 > 0x10FFFF) & (a5 >> 19)) != 0 || v54)
                    {
                      int v56 = v35 + 1;
                      uint64_t v60 = v56;
                      if ((unint64_t)v56 < a2)
                      {
                        while (xdigitab[*v56] != 255)
                        {
                          if ((unint64_t)++v56 >= a2) {
                            goto LABEL_205;
                          }
                        }
                      }
                      goto LABEL_206;
                    }
                  }
                  else
                  {
                    int v12 = 0;
                  }
                  ++v35;
                  --v50;
                }
                while (v50);
                int v35 = (unsigned __int8 *)a2;
LABEL_182:
                if ((unint64_t)v35 >= a2)
                {
                  BOOL v55 = v35;
                }
                else
                {
                  BOOL v55 = v35 + 1;
                  uint64_t v60 = v35 + 1;
                  if (*v35 == 125)
                  {
                    uint64_t result = 0;
                    if ((a5 & 0x80000) != 0 && v12 >> 11 >= 0x1B && v12 >> 13 <= 6)
                    {
                      if (!a7 || (*(unsigned char *)(*(void *)a7 + 64) & 1) == 0)
                      {
                        uint64_t result = 0;
                        uint64_t v60 = v35;
                        goto LABEL_190;
                      }
                      goto LABEL_17;
                    }
                    goto LABEL_21;
                  }
                }
                uint64_t result = 0;
                uint64_t v60 = v55 - 1;
                int v33 = 167;
                goto LABEL_109;
              }
              uint64_t result = 0;
              int v33 = 178;
LABEL_109:
              *a4 = v33;
              goto LABEL_21;
            }
            int v12 = xdigitab[v34];
            if (v12 != 255)
            {
              uint64_t v60 = v13 + 1;
              if ((unint64_t)(v13 + 1) >= a2) {
                goto LABEL_17;
              }
              int v44 = xdigitab[v13[1]];
              if (v44 == 255) {
                goto LABEL_17;
              }
              uint64_t result = 0;
              uint64_t v60 = v13 + 2;
              int v12 = v44 | (16 * v12);
              goto LABEL_21;
            }
          }
          int v12 = 0;
          goto LABEL_17;
        }
        if ((uint64_t)(a2 - (void)v13) < 2
          || (int v36 = xdigitab[*v13], v36 == 255)
          || (int v37 = xdigitab[v13[1]], v37 == 255))
        {
          uint64_t result = 0;
          int v12 = 120;
          goto LABEL_21;
        }
        uint64_t result = 0;
        int v12 = v37 | (16 * v36);
        BOOL v38 = v13 + 2;
LABEL_117:
        uint64_t v60 = v38;
        goto LABEL_21;
      }
      if (v12 == 117 && (a5 & 2) == 0) {
        goto LABEL_114;
      }
    }
    else
    {
      if (v12 == 99) {
        goto LABEL_77;
      }
      if (v12 == 111) {
        goto LABEL_45;
      }
    }
    uint64_t result = 0;
    int v15 = 103;
LABEL_7:
    *a4 = v15;
    return result;
  }
  if (v12 <= 84)
  {
    switch(v12)
    {
      case '0':
        goto LABEL_27;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        if (a6) {
          goto LABEL_26;
        }
        int v28 = v13 - 1;
        uint64_t v60 = v13 - 1;
        *a4 = 0;
        if ((unint64_t)(v13 - 1) >= a2) {
          goto LABEL_17;
        }
        unsigned int v29 = *v28;
        if (v29 - 48 > 9) {
          goto LABEL_17;
        }
        unsigned int v30 = 0;
        break;
      case 'F':
      case 'L':
        goto LABEL_83;
      default:
        goto LABEL_115;
    }
    while ((unint64_t)v28 < a2)
    {
      int v31 = *v28;
      if ((v31 - 48) > 9) {
        break;
      }
      ++v28;
      unsigned int v30 = v31 + 10 * v30 - 48;
      if (v30 >= 0xCCCCCCC)
      {
        uint64_t result = 0;
        *a4 = 161;
        uint64_t v60 = v28;
        goto LABEL_21;
      }
    }
    uint64_t v60 = v28;
    if (v30 >= 0xA)
    {
      if (v29 <= 0x37 && (signed int)v30 > a7[53])
      {
        uint64_t v60 = v13;
LABEL_26:
        if (v12 > 0x37) {
          goto LABEL_17;
        }
LABEL_27:
        uint64_t v21 = 0;
        v12 -= 48;
        unsigned int v22 = v13;
        while ((unint64_t)&v13[v21] < a2)
        {
          int v23 = v13[v21];
          if ((v23 & 0xF8) != 0x30)
          {
            unsigned int v22 = &v13[v21];
            break;
          }
          ++v22;
          int v12 = v23 + 8 * v12 - 48;
          if (++v21 == 2)
          {
            unsigned int v22 = v13 + 2;
            break;
          }
        }
        uint64_t result = 0;
        uint64_t v60 = v22;
        if ((a5 & 0x80000) != 0 || v12 < 0x100) {
          goto LABEL_21;
        }
        uint64_t result = 0;
        int v33 = 151;
        goto LABEL_109;
      }
      if (v30 >= 0x10000)
      {
        uint64_t result = 0;
        int v33 = 161;
        goto LABEL_109;
      }
    }
    uint64_t result = -v30;
    goto LABEL_21;
  }
  if (v12 <= 107)
  {
    if (v12 == 85)
    {
      uint64_t result = 0;
      if ((a5 & 2) == 0) {
        *a4 = 137;
      }
      int v12 = 85;
      goto LABEL_21;
    }
    if (v12 != 99)
    {
      if (v12 != 103) {
        goto LABEL_115;
      }
      if (a6) {
        goto LABEL_76;
      }
      if ((unint64_t)v13 < a2)
      {
        int v45 = *v13;
        uint64_t result = 27;
        int v12 = 103;
        if (v45 == 39 || v45 == 60) {
          goto LABEL_21;
        }
        if (v45 == 123)
        {
          int v59 = v13 + 1;
          if (!read_number(&v59, a2, a7[53], 0xFFFFu, 161, &v58, a4))
          {
            if (*a4) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = 28;
            }
            goto LABEL_215;
          }
          if ((unint64_t)v59 < a2 && *v59 == 125)
          {
            uint64_t v60 = v59 + 1;
LABEL_196:
            if (v58 > 0)
            {
              uint64_t result = -v58;
              goto LABEL_215;
            }
            uint64_t result = 0;
            int v57 = 115;
LABEL_214:
            *a4 = v57;
            goto LABEL_215;
          }
        }
        else
        {
          if (read_number(&v60, a2, a7[53], 0xFFFFu, 161, &v58, a4)) {
            goto LABEL_196;
          }
          if (*a4)
          {
LABEL_76:
            uint64_t result = 0;
LABEL_215:
            int v12 = 103;
            goto LABEL_21;
          }
        }
      }
      uint64_t result = 0;
      int v57 = 157;
      goto LABEL_214;
    }
LABEL_77:
    if ((unint64_t)v13 >= a2)
    {
      uint64_t result = 0;
      *a4 = 102;
      int v12 = 99;
      goto LABEL_21;
    }
    int v32 = *v13;
    if ((v32 - 97) >= 0x1A) {
      int v12 = *v13;
    }
    else {
      int v12 = v32 - 32;
    }
    if ((v12 - 127) <= 0xFFFFFFA0)
    {
      uint64_t result = 0;
      int v33 = 168;
      goto LABEL_109;
    }
    uint64_t result = 0;
    v12 ^= 0x40u;
    BOOL v38 = v13 + 1;
    goto LABEL_117;
  }
  if (v12 > 116)
  {
    if (v12 != 117)
    {
      if (v12 != 120) {
        goto LABEL_115;
      }
      goto LABEL_88;
    }
    if ((a5 & 2) != 0)
    {
      if ((uint64_t)(a2 - (void)v13) >= 4)
      {
        int v39 = xdigitab[*v13];
        if (v39 != 255)
        {
          int v40 = xdigitab[v13[1]];
          if (v40 != 255)
          {
            int v41 = xdigitab[v13[2]];
            if (v41 != 255)
            {
              int v42 = xdigitab[v13[3]];
              if (v42 != 255)
              {
                int v43 = (16 * v40) | (v39 << 8) | v41;
                int v12 = v42 | (16 * v43);
                uint64_t v60 = v13 + 4;
                if ((a5 & 0x80000) != 0)
                {
                  if (v43 & 0xFF80) != 0xD80 || (*(unsigned char *)(*(void *)a7 + 64)) {
                    goto LABEL_17;
                  }
                  uint64_t result = 0;
LABEL_190:
                  int v33 = 173;
                }
                else
                {
                  if (v12 < 0x100) {
                    goto LABEL_17;
                  }
                  uint64_t result = 0;
                  int v33 = 177;
                }
                goto LABEL_109;
              }
            }
          }
        }
      }
      uint64_t result = 0;
LABEL_132:
      int v12 = 117;
      goto LABEL_21;
    }
LABEL_114:
    uint64_t result = 0;
    *a4 = 137;
    goto LABEL_132;
  }
  if (v12 == 108)
  {
LABEL_83:
    uint64_t result = 0;
    int v33 = 137;
    goto LABEL_109;
  }
  if (v12 != 111)
  {
LABEL_115:
    uint64_t result = 0;
    *a4 = 103;
    *a1 = v13 - 1;
    return result;
  }
LABEL_45:
  if ((unint64_t)v13 >= a2 || (int v24 = *v13, ++v13, v60 = v13, v24 != 123))
  {
    uint64_t result = 0;
    uint64_t v60 = v13 - 1;
    int v25 = 155;
    goto LABEL_85;
  }
  if ((unint64_t)v13 >= a2 || *v13 == 125)
  {
    uint64_t result = 0;
    int v25 = 178;
LABEL_85:
    *a4 = v25;
    int v12 = 111;
    goto LABEL_21;
  }
  int v12 = 0;
  if ((a5 & 0x80000) != 0) {
    unsigned int v46 = 1114111;
  }
  else {
    unsigned int v46 = 255;
  }
  unint64_t v47 = a2 - (void)v13;
  do
  {
    int v48 = *v13;
    if ((v48 & 0xF8) != 0x30) {
      goto LABEL_160;
    }
    if (v12 || v48 != 48)
    {
      int v12 = v48 + 8 * v12 - 48;
      if (v12 > v46)
      {
        int v56 = v13 + 1;
        uint64_t v60 = v13 + 1;
        if ((unint64_t)(v13 + 1) >= a2) {
          goto LABEL_206;
        }
        do
        {
          if ((*v56 & 0xF8) != 0x30) {
            goto LABEL_206;
          }
          ++v56;
        }
        while ((unint64_t)v56 < a2);
LABEL_205:
        int v56 = (unsigned __int8 *)a2;
LABEL_206:
        uint64_t result = 0;
        uint64_t v60 = v56;
        int v33 = 134;
        goto LABEL_109;
      }
    }
    else
    {
      int v12 = 0;
    }
    ++v13;
    --v47;
  }
  while (v47);
  uint64_t v13 = (unsigned __int8 *)a2;
LABEL_160:
  if ((unint64_t)v13 >= a2)
  {
    int v49 = v13;
    goto LABEL_192;
  }
  int v49 = v13 + 1;
  uint64_t v60 = v13 + 1;
  if (*v13 != 125)
  {
LABEL_192:
    uint64_t result = 0;
    uint64_t v60 = v49 - 1;
    int v33 = 164;
    goto LABEL_109;
  }
  uint64_t result = 0;
  if ((a5 & 0x80000) != 0 && (v12 & 0xFFFFF800) == 0xD800)
  {
    if (!a7 || (*(unsigned char *)(*(void *)a7 + 64) & 1) == 0)
    {
      uint64_t result = 0;
      uint64_t v60 = v13;
      goto LABEL_190;
    }
LABEL_17:
    uint64_t result = 0;
  }
LABEL_21:
  *a1 = v60;
  *a3 = v12;
  return result;
}

uint64_t read_repeat_counts(unsigned __int8 **a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *a1;
  *a5 = 0;
  if ((unint64_t)v6 < a2)
  {
    if (*v6 - 48 <= 9)
    {
      unsigned int v7 = 0;
      int v8 = v6 + 1;
      while (1)
      {
        int v9 = v8 - 1;
        if ((unint64_t)(v8 - 1) >= a2) {
          return 0;
        }
        int v10 = *v9;
        if ((v10 - 48) > 9) {
          break;
        }
        unsigned int v7 = v10 + 10 * v7 - 48;
        ++v8;
        if (v7 >= 0x10000)
        {
          uint64_t v5 = 0;
          *a5 = 105;
          --v8;
LABEL_21:
          *a1 = v8;
          return v5;
        }
      }
      unsigned int v11 = v7;
      if (v10 == 125)
      {
LABEL_16:
        int v8 = v9 + 1;
        if (a3) {
          *a3 = v7;
        }
        if (a4) {
          *a4 = v11;
        }
        uint64_t v5 = 1;
        goto LABEL_21;
      }
      if (v10 == 44 && (unint64_t)v8 < a2)
      {
        int v13 = *v8;
        if (v13 == 125)
        {
          unsigned int v11 = 0x10000;
LABEL_15:
          int v9 = v8;
          goto LABEL_16;
        }
        if ((v13 - 48) <= 9)
        {
          unsigned int v11 = 0;
          while ((unint64_t)v8 < a2)
          {
            int v14 = *v8;
            if ((v14 - 48) > 9) {
              goto LABEL_29;
            }
            ++v8;
            unsigned int v11 = v14 + 10 * v11 - 48;
            if (v11 >= 0x10000)
            {
              uint64_t v5 = 0;
              int v15 = 105;
LABEL_33:
              *a5 = v15;
              goto LABEL_21;
            }
          }
          int v8 = (unsigned __int8 *)a2;
LABEL_29:
          if ((unint64_t)v8 < a2 && *v8 == 125)
          {
            if (v11 >= v7) {
              goto LABEL_15;
            }
            uint64_t v5 = 0;
            int v15 = 104;
            goto LABEL_33;
          }
        }
      }
    }
    return 0;
  }
  return v5;
}

uint64_t read_number(unsigned __int8 **a1, unint64_t a2, int a3, unsigned int a4, int a5, int *a6, int *a7)
{
  BOOL v7 = 0;
  int v8 = *a1;
  *a7 = 0;
  if (a3 < 0 || (unint64_t)v8 >= a2)
  {
    BOOL v14 = 0;
  }
  else
  {
    int v9 = *v8;
    unsigned int v10 = a4 - a3;
    if (v9 != 43) {
      unsigned int v10 = a4;
    }
    BOOL v11 = v9 == 43;
    if (v9 == 43) {
      int v12 = v8 + 1;
    }
    else {
      int v12 = v8;
    }
    BOOL v13 = v9 == 45;
    if (v9 == 45)
    {
      BOOL v7 = 1;
    }
    else
    {
      a4 = v10;
      BOOL v7 = v9 == 43;
    }
    BOOL v14 = !v13 && v11;
    if (v13) {
      ++v8;
    }
    else {
      int v8 = v12;
    }
  }
  if ((unint64_t)v8 < a2 && *v8 - 48 <= 9)
  {
    int v15 = 0;
    while ((unint64_t)v8 < a2)
    {
      int v16 = *v8;
      if ((v16 - 48) > 9) {
        break;
      }
      ++v8;
      int v15 = v16 + 10 * v15 - 48;
      if (v15 > a4)
      {
        uint64_t v17 = 0;
        *a7 = a5;
        goto LABEL_38;
      }
    }
    char v18 = !v7;
    if (a3 < 0) {
      char v18 = 1;
    }
    if (v18) {
      goto LABEL_37;
    }
    if (v15)
    {
      if (v14)
      {
        v15 += a3;
LABEL_37:
        uint64_t v17 = 1;
        goto LABEL_38;
      }
      if (v15 <= a3)
      {
        int v15 = a3 - v15 + 1;
        goto LABEL_37;
      }
      uint64_t v17 = 0;
      int v19 = 115;
    }
    else
    {
      uint64_t v17 = 0;
      int v19 = 126;
    }
    *a7 = v19;
LABEL_38:
    *a6 = v15;
    *a1 = v8;
    return v17;
  }
  return 0;
}

uint64_t pcre2_compile_8(unsigned __int8 *a1, unint64_t a2, int a3, int *a4, void *a5, long long *a6)
{
  uint64_t v6 = 0;
  v131[128] = *MEMORY[0x263EF8340];
  unint64_t v110 = 1;
  uint64_t v111 = 0;
  v127[0] = 0;
  int v112 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  if (!a4 || !a5) {
    return v6;
  }
  *a4 = 100;
  *a5 = 0;
  if (!a1)
  {
    uint64_t v6 = 0;
    int v14 = 116;
    goto LABEL_14;
  }
  if (a6) {
    BOOL v11 = a6;
  }
  else {
    BOOL v11 = &_pcre2_default_compile_context_8;
  }
  if ((a3 & 0x1C000000) != 0 || (unsigned int v12 = *((_DWORD *)v11 + 16), v12 >= 0x10))
  {
    uint64_t v6 = 0;
    int v14 = 117;
    goto LABEL_14;
  }
  unint64_t v13 = a2;
  if ((a3 & 0x2000000) != 0 && v12 & 0xFFFFFFF3 | a3 & 0x1D76FEF3)
  {
    uint64_t v6 = 0;
    int v14 = 192;
LABEL_14:
    *a4 = v14;
    return v6;
  }
  if (a2 == -1) {
    unint64_t v13 = _pcre2_strlen_8(a1);
  }
  if (v13 > *((void *)v11 + 6))
  {
    uint64_t v6 = 0;
    int v14 = 188;
    goto LABEL_14;
  }
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  memset(v118, 0, sizeof(v118));
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  if (*((void *)v11 + 5)) {
    int v16 = (char *)*((void *)v11 + 5);
  }
  else {
    int v16 = (char *)&_pcre2_default_tables_8;
  }
  *(void *)&long long v114 = v16 + 256;
  *((void *)&v114 + 1) = v16 + 512;
  *(void *)&long long v113 = v11;
  *((void *)&v113 + 1) = v16;
  *(void *)&long long v123 = v131;
  *(void *)((char *)&v126 + 4) = 0;
  *(void *)&long long v120 = &v129;
  HIDWORD(v120) = a3;
  DWORD2(v120) = 20;
  *(void *)&long long v122 = v130;
  v118[11] = 0;
  *(void *)&long long v121 = 0;
  DWORD2(v121) = 0;
  long long v117 = (unint64_t)&a1[v13];
  long long v119 = 0uLL;
  *(void *)((char *)&v125 + 4) = 0;
  *(void *)&long long v116 = v128;
  *((void *)&v116 + 1) = a1;
  *(void *)&long long v115 = v16 + 832;
  *((void *)&v115 + 1) = v128;
  v118[0] = 6000;
  *((void *)&v123 + 1) = 0;
  *(void *)&long long v17 = -1;
  *((void *)&v17 + 1) = -1;
  *(_OWORD *)&v118[1] = v17;
  *(_OWORD *)&v118[3] = v17;
  *(_OWORD *)&v118[5] = v17;
  *(_OWORD *)&v118[7] = v17;
  *(_OWORD *)&v118[9] = v17;
  uint64_t v106 = v11;
  uint64_t v92 = v16;
  if ((a3 & 0x2000000) != 0 || (unint64_t v18 = v13 - 2, v13 < 2))
  {
    int v23 = 0;
    LODWORD(v38) = 0;
    int v21 = 0;
    int v20 = 0;
    int v93 = -1;
    int v94 = -1;
    int v95 = -1;
    goto LABEL_62;
  }
  uint64_t v19 = 0;
  int v20 = 0;
  int v21 = 0;
  unsigned int v22 = 0;
  int v23 = 0;
  int v24 = a1 + 2;
  int v94 = -1;
  int v95 = -1;
  int v93 = -1;
  while (2)
  {
    if (a1[v19] != 40 || a1[v22 + 1] != 42)
    {
      LODWORD(v38) = v22;
LABEL_62:
      int v39 = &a1[v38];
      unsigned int v40 = HIDWORD(v120);
      if ((HIDWORD(v120) & 0x80000) != 0)
      {
        if ((a3 & 0x1000) != 0)
        {
          uint64_t v6 = 0;
          LODWORD(recurse) = 174;
LABEL_72:
          int v107 = (int)recurse;
          goto LABEL_73;
        }
        unsigned int v41 = HIDWORD(v120);
        if ((a3 & 0x40000000) == 0)
        {
          int v97 = v23;
          int v100 = v20;
          int v103 = v21;
          LODWORD(recurse) = _pcre2_valid_utf_8(a1, v13, a5);
          int v107 = (int)recurse;
          if (recurse)
          {
            uint64_t v6 = 0;
            int v43 = v106;
            goto LABEL_155;
          }
          unsigned int v41 = HIDWORD(v120);
          int v20 = v100;
          int v21 = v103;
          int v23 = v97;
        }
      }
      else
      {
        unsigned int v41 = HIDWORD(v120);
      }
      if ((~v41 & 0x20800) == 0)
      {
        uint64_t v6 = 0;
        LODWORD(recurse) = 175;
        goto LABEL_72;
      }
      if (!v20) {
        LOWORD(v20) = *((_WORD *)v106 + 28);
      }
      if (!v21) {
        int v21 = *((unsigned __int16 *)v106 + 29);
      }
      LODWORD(v124) = 0;
      switch(v21)
      {
        case 1:
          DWORD1(v124) = 1;
          char v44 = 13;
          goto LABEL_82;
        case 2:
          DWORD1(v124) = 1;
          char v44 = 10;
LABEL_82:
          LOBYTE(v125) = v44;
          break;
        case 3:
          DWORD1(v124) = 2;
          LOWORD(v125) = 2573;
          break;
        case 4:
          int v45 = 1;
          goto LABEL_86;
        case 5:
          int v45 = 2;
LABEL_86:
          LODWORD(v124) = v45;
          break;
        case 6:
          DWORD1(v124) = 1;
          LOBYTE(v125) = 0;
          break;
        default:
          uint64_t v6 = 0;
          LODWORD(recurse) = 156;
          goto LABEL_72;
      }
      int v98 = v23;
      __int16 v101 = v20;
      __int16 v104 = v21;
      unint64_t v46 = v13 - v38;
      if ((v106[4] & 0xC) != 0) {
        v46 += 4;
      }
      if ((a3 & 4) != 0) {
        unint64_t v47 = 5 * v46 + 5;
      }
      else {
        unint64_t v47 = v46;
      }
      if (v47 <= 0x3FF)
      {
        uint64_t v48 = v122;
      }
      else
      {
        uint64_t v48 = (*(uint64_t (**)(unint64_t, void))v106)(4 * v47 + 4, *((void *)v106 + 2));
        if (!v48)
        {
          uint64_t v6 = 0;
          *a4 = 121;
          int v43 = v106;
          goto LABEL_156;
        }
        *(void *)&long long v122 = v48;
        unsigned int v41 = HIDWORD(v120);
      }
      *((void *)&v122 + 1) = v48 + 4 * v47 + 4;
      LODWORD(recurse) = parse_regex(v39, v41, v127, (int *)&v113);
      int v107 = (int)recurse;
      if (recurse)
      {
        uint64_t v6 = 0;
        int v43 = v106;
LABEL_153:
        int v39 = &a1[v118[11]];
        goto LABEL_154;
      }
      int v49 = DWORD1(v121);
      int v43 = v106;
      if (DWORD1(v121) <= 0xFF)
      {
        unint64_t v50 = (void *)v123;
      }
      else
      {
        unint64_t v50 = (void *)(*(uint64_t (**)(uint64_t, void))v106)(4 * (DWORD1(v121) + 1), *((void *)v106 + 2));
        *(void *)&long long v123 = v50;
        if (!v50)
        {
          uint64_t v6 = 0;
          LODWORD(recurse) = 121;
          int v107 = 121;
          v118[11] = 0;
          goto LABEL_153;
        }
        int v49 = DWORD1(v121);
      }
      cstdlib_memset(v50, 0, 4 * (v49 + 1));
      if (v127[0])
      {
        LODWORD(recurse) = check_lookbehinds((uint64_t)&v113);
        int v107 = (int)recurse;
        if (recurse) {
          goto LABEL_107;
        }
      }
      v118[11] = v13;
      uint64_t v111 = (unsigned int *)v122;
      int v112 = v128;
      v128[0] = -125;
      compile_regex(HIDWORD(v120), &v112, &v111, &v107, 0, (unsigned int *)&v108 + 1, (int *)&v109 + 1, (unsigned int *)&v108, (int *)&v109, 0, (uint64_t)&v113, &v110);
      LODWORD(recurse) = v107;
      if (v107)
      {
LABEL_107:
        uint64_t v6 = 0;
        goto LABEL_153;
      }
      if (v110 > 0x10000)
      {
        uint64_t v6 = 0;
        LODWORD(recurse) = 120;
        int v107 = 120;
        goto LABEL_153;
      }
      unsigned int v91 = v40;
      unint64_t v51 = v110 + WORD1(v119) * (unint64_t)(unsigned __int16)v119 + 136;
      uint64_t v52 = (*(uint64_t (**)(unint64_t, void))v106)(v51, *((void *)v106 + 2));
      uint64_t v6 = v52;
      if (!v52)
      {
        LODWORD(recurse) = 121;
        int v107 = 121;
        goto LABEL_153;
      }
      uint64_t v53 = v52 + 136;
      cstdlib_memset((void *)(v52 + 128), 0, 8uLL);
      uint64_t v54 = *((void *)v106 + 2);
      *(_OWORD *)uint64_t v6 = *v106;
      *(void *)(v6 + 16) = v54;
      *(void *)(v6 + 24) = v92;
      *(void *)(v6 + 32) = 0;
      cstdlib_memset((void *)(v6 + 40), 0, 0x20uLL);
      *(void *)(v6 + 72) = v51;
      *(_DWORD *)(v6 + 80) = 1346589253;
      *(_DWORD *)(v6 + 84) = a3;
      unsigned int v55 = HIDWORD(v120);
      *(_DWORD *)(v6 + 88) = HIDWORD(v120);
      *(_DWORD *)(v6 + 92) = *((_DWORD *)v106 + 16);
      *(_DWORD *)(v6 + 96) = v98 | v121 | 1;
      *(_DWORD *)(v6 + 100) = v94;
      *(_DWORD *)(v6 + 104) = v93;
      *(_DWORD *)(v6 + 108) = v95;
      *(void *)(v6 + 112) = 0;
      *(_WORD *)(v6 + 120) = v101;
      *(_WORD *)(v6 + 122) = v104;
      *(void *)(v6 + 124) = 0;
      unsigned int v56 = WORD1(v119);
      *(_WORD *)(v6 + 132) = WORD1(v119);
      uint64_t v57 = (unsigned __int16)v119;
      *(_WORD *)(v6 + 134) = v119;
      int v58 = (char *)(v53 + v57 * (unint64_t)v56);
      DWORD1(v119) = 0;
      DWORD2(v121) = 0;
      *((void *)&v117 + 1) = v6 + 136;
      *(void *)&long long v116 = v58;
      *((void *)&v125 + 1) = 0;
      LODWORD(v126) = 0;
      *((void *)&v119 + 1) = 0;
      if (v57)
      {
        unsigned int v59 = 0;
        uint64_t v60 = v120;
        do
        {
          add_name_to_table((uint64_t)&v113, *(void **)v60, *(unsigned __int16 *)(v60 + 12), *(_DWORD *)(v60 + 8), v59++);
          v60 += 16;
        }
        while (v59 < (unsigned __int16)v119);
        unsigned int v55 = *(_DWORD *)(v6 + 88);
      }
      uint64_t v111 = (unsigned int *)v122;
      int v112 = v58;
      *int v58 = -125;
      if ((compile_regex(v55, &v112, &v111, &v107, 0, (unsigned int *)&v108 + 1, (int *)&v109 + 1, (unsigned int *)&v108, (int *)&v109, 0, (uint64_t)&v113, 0) & 0x80000000) != 0)*(_DWORD *)(v6 + 96) |= 0x2000u; {
      *(_WORD *)(v6 + 128) = WORD2(v121);
      }
      *(_WORD *)(v6 + 130) = WORD4(v123);
      *(_WORD *)(v6 + 124) = WORD2(v125);
      if (HIDWORD(v125))
      {
        LODWORD(v108) = 0;
        LODWORD(v109) = -1;
      }
      uint64_t v61 = v112;
      *int v112 = 0;
      int v112 = v61 + 1;
      unint64_t v62 = v61 + 1 - v58;
      BOOL v63 = v62 > v110;
      unint64_t v64 = v62 - v110;
      if (v63)
      {
        LODWORD(recurse) = 123;
LABEL_125:
        int v107 = (int)recurse;
LABEL_152:
        int v43 = v106;
        goto LABEL_153;
      }
      unsigned int v105 = (v91 >> 19) & 1;
      *(void *)(v6 + 72) += v64;
      LODWORD(recurse) = v107;
      if (!v107)
      {
        if (DWORD1(v126))
        {
          recurse = find_recurse((unsigned __int8 *)v58, v105);
          if (recurse)
          {
            int v65 = recurse;
            unsigned int v66 = 0;
            int v67 = 8;
            while (1)
            {
              int v68 = __rev16(*(unsigned __int16 *)(v65 + 1));
              if (v68)
              {
                unsigned __int8 v69 = (unsigned __int8 *)v58;
                if (!v66) {
                  goto LABEL_141;
                }
                unsigned int v70 = v66;
                unsigned __int8 v69 = (unsigned __int8 *)v58;
                int v71 = v67;
                while (1)
                {
                  uint64_t v72 = &v127[4 * v71 + 1];
                  int v73 = v72[2];
                  if (v68 == v73) {
                    break;
                  }
                  if (v68 > v73) {
                    unsigned __int8 v69 = *(unsigned __int8 **)v72;
                  }
                  int v71 = ((_BYTE)v71 + 1) & 7;
                  if (!--v70) {
                    goto LABEL_141;
                  }
                }
                uint64_t v74 = *(void *)v72;
                if (!*(void *)v72)
                {
LABEL_141:
                  bracket_8 = _pcre2_find_bracket_8(v69, v105, v68);
                  if (!bracket_8)
                  {
                    LODWORD(recurse) = 153;
                    int v107 = 153;
                    break;
                  }
                  LODWORD(v74) = bracket_8;
                  if (v67 >= 1) {
                    --v67;
                  }
                  else {
                    int v67 = 7;
                  }
                  BOOL v76 = &v127[4 * v67 + 1];
                  v76[2] = v68;
                  *(void *)BOOL v76 = bracket_8;
                  if (v66 < 8) {
                    ++v66;
                  }
                }
              }
              else
              {
                LODWORD(v74) = v58;
              }
              *(_WORD *)(v65 + 1) = bswap32(v74 - v58) >> 16;
              int v65 = find_recurse(v65 + 3, v105);
              if (!v65)
              {
                LODWORD(recurse) = v107;
                break;
              }
            }
          }
        }
      }
      if (recurse) {
        goto LABEL_152;
      }
      int v77 = *(_DWORD *)(v6 + 88);
      if ((v77 & 0x4000) == 0)
      {
        if (_pcre2_auto_possessify_8((unsigned __int8 *)v58, v105, (uint64_t)&v113))
        {
          LODWORD(recurse) = 180;
          goto LABEL_125;
        }
        int v77 = *(_DWORD *)(v6 + 88);
      }
      if ((v77 & 0x80000000) == 0 && is_anchored((unsigned __int8 *)v58, 0, (uint64_t)&v113, 0, 0))
      {
        v77 |= 0x80000000;
        *(_DWORD *)(v6 + 88) = v77;
      }
      if ((v77 & 0x10000) != 0)
      {
LABEL_204:
        int v43 = v106;
        goto LABEL_156;
      }
      int v78 = v91 & 0x80000;
      char v79 = BYTE4(v109);
      if (v109 < 0)
      {
        unsigned int firstassertedcu = find_firstassertedcu(v58, (int *)&v109 + 1, 0);
        HIDWORD(v108) = firstassertedcu;
        char v79 = BYTE4(v109);
        if (v109 < 0)
        {
          if ((*(_DWORD *)(v6 + 88) & 0x80000000) != 0
            || !is_startline((unsigned __int8 *)v58, 0, (uint64_t)&v113, 0, 0))
          {
            goto LABEL_188;
          }
          int v84 = *(_DWORD *)(v6 + 96) | 0x200;
          goto LABEL_187;
        }
      }
      else
      {
        unsigned int firstassertedcu = HIDWORD(v108);
      }
      *(_DWORD *)(v6 + 112) = firstassertedcu;
      int v81 = *(_DWORD *)(v6 + 96);
      *(_DWORD *)(v6 + 96) = v81 | 0x10;
      if ((v79 & 1) == 0
        || (!v78 ? (BOOL v82 = firstassertedcu >= 0xFF) : (BOOL v82 = 1),
            v82 ? (int v83 = 0) : (int v83 = 1),
            firstassertedcu >= 0x80 && !v83 || firstassertedcu == *(unsigned __int8 *)(v114 + firstassertedcu)))
      {
LABEL_188:
        char v85 = v109;
        if ((v109 & 0x80000000) == 0 && ((v109 & 2) != 0 || (*(_DWORD *)(v6 + 88) & 0x80000000) == 0))
        {
          uint64_t v86 = v108;
          *(_DWORD *)(v6 + 116) = v108;
          int v87 = *(_DWORD *)(v6 + 96);
          *(_DWORD *)(v6 + 96) = v87 | 0x80;
          if (v85)
          {
            BOOL v88 = v78 || v86 >= 0xFF;
            BOOL v89 = !v88;
            if ((v86 < 0x80 || v89) && v86 != *(unsigned __int8 *)(v114 + v86)) {
              *(_DWORD *)(v6 + 96) = v87 | 0x180;
            }
          }
        }
        if (_pcre2_study_8(v6))
        {
          LODWORD(recurse) = 131;
          goto LABEL_125;
        }
        goto LABEL_204;
      }
      int v84 = v81 | 0x30;
LABEL_187:
      *(_DWORD *)(v6 + 96) = v84;
      goto LABEL_188;
    }
    int v96 = v23;
    int v99 = v20;
    int v102 = v21;
    uint64_t v25 = 0;
    unint64_t v26 = v18 - v22;
    unsigned int v90 = v22;
    int v27 = &v24[v22];
    while (1)
    {
      unint64_t v28 = LOWORD((&pso_list)[v25 + 1]);
      if (v26 >= v28
        && !_pcre2_strncmp_c8_8(v27, (unsigned __int8 *)(&pso_list)[v25], LOWORD((&pso_list)[v25 + 1])))
      {
        break;
      }
      v25 += 2;
      if (v25 == 42)
      {
        LODWORD(v38) = v90;
        int v20 = v99;
        int v21 = v102;
        int v23 = v96;
        goto LABEL_62;
      }
    }
    uint64_t v38 = v90 + v28 + 2;
    int v29 = *((unsigned __int16 *)&pso_list + 4 * v25 + 5);
    int v20 = v99;
    int v21 = v102;
    int v23 = v96;
    switch(*((_WORD *)&pso_list + 4 * v25 + 5))
    {
      case 0:
        HIDWORD(v120) |= *((_DWORD *)&pso_list + 2 * v25 + 3);
        goto LABEL_58;
      case 1:
        int v23 = *((_DWORD *)&pso_list + 2 * v25 + 3) | v96;
        goto LABEL_58;
      case 2:
        int v21 = *((_DWORD *)&pso_list + 2 * v25 + 3);
        int v23 = v96 | 0x8000;
        goto LABEL_58;
      case 3:
        int v20 = *((_DWORD *)&pso_list + 2 * v25 + 3);
        int v23 = v96 | 0x4000;
        goto LABEL_58;
      case 4:
      case 5:
      case 6:
        unsigned int v30 = a1[v38];
        if (v30 - 48 > 9)
        {
          uint64_t v6 = 0;
          int v39 = &a1[v38];
          LODWORD(recurse) = 160;
          goto LABEL_72;
        }
        unsigned int v31 = 0;
        LODWORD(v38) = v90 + v28 + 3;
        int v24 = a1 + 2;
        unint64_t v18 = v13 - 2;
        do
        {
          if (v30 > 0x39 || v31 > 0x19999998) {
            goto LABEL_109;
          }
          unsigned int v31 = v30 + 10 * v31 - 48;
          unsigned int v30 = a1[v38];
          LODWORD(v38) = v38 + 1;
        }
        while (v30 > 0x2F);
        if (v30 == 41)
        {
          int v33 = v94;
          int v32 = v95;
          if (v29 == 4) {
            unsigned int v34 = v31;
          }
          else {
            unsigned int v34 = v94;
          }
          if (v29 == 4) {
            unsigned int v35 = v95;
          }
          else {
            unsigned int v35 = v31;
          }
          BOOL v36 = v29 == 5;
          if (v29 != 5) {
            int v33 = v34;
          }
          int v37 = v93;
          if (v36) {
            int v37 = v31;
          }
          int v93 = v37;
          int v94 = v33;
          if (!v36) {
            int v32 = v35;
          }
          int v95 = v32;
LABEL_59:
          uint64_t v19 = v38;
          unsigned int v22 = v38;
          if (v13 - v38 <= 1) {
            goto LABEL_62;
          }
          continue;
        }
LABEL_109:
        uint64_t v6 = 0;
        LODWORD(recurse) = 160;
        int v107 = 160;
        int v39 = &a1[v38];
LABEL_73:
        int v43 = v106;
LABEL_154:
        *a5 = v39 - a1;
LABEL_155:
        *a4 = (int)recurse;
        pcre2_code_free_8(v6);
        uint64_t v6 = 0;
LABEL_156:
        if ((unsigned char *)v122 != v130) {
          (*((void (**)(void, void))v43 + 1))(v122, *((void *)v43 + 2));
        }
        if (DWORD2(v120) >= 0x15) {
          (*((void (**)(void, void))v43 + 1))(v120, *((void *)v43 + 2));
        }
        if ((void *)v123 != v131) {
          (*((void (**)(void, void))v43 + 1))(v123, *((void *)v43 + 2));
        }
        return v6;
      default:
        int v20 = v99;
        int v21 = v102;
        int v23 = v96;
LABEL_58:
        int v24 = a1 + 2;
        unint64_t v18 = v13 - 2;
        goto LABEL_59;
    }
  }
}

uint64_t parse_regex(unsigned __int8 *a1, unsigned int a2, _DWORD *a3, int *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  v368[0] = a1;
  unsigned int v366 = 0;
  uint64_t v364 = 0;
  v365 = 0;
  uint64_t v6 = (unsigned int *)*((void *)a4 + 28);
  unint64_t v356 = *((void *)a4 + 29);
  int v355 = a2 & 0x80000;
  int v7 = (a2 >> 2) & 1;
  v363 = 0;
  int v8 = (unsigned __int8 *)*((void *)a4 + 8);
  int v9 = *(_DWORD *)(*(void *)a4 + 64);
  int v10 = -2146893824;
  if ((v9 & 8) == 0)
  {
    if ((v9 & 4) == 0) {
      goto LABEL_5;
    }
    int v10 = -2145910779;
  }
  *uint64_t v6 = v10;
  v6[1] = -2145779712;
  v6 += 2;
LABEL_5:
  int v367 = 0;
  if ((a2 & 0x2000000) != 0)
  {
    if (v8 <= a1) {
      goto LABEL_750;
    }
    int v307 = a2 & 4;
    while (1)
    {
      if ((unint64_t)v6 >= v356) {
        goto LABEL_759;
      }
      v308 = v5 + 1;
      v368[0] = v5 + 1;
      unsigned int v309 = *v5;
      int v367 = v309;
      if (!v355 || v309 < 0xC0) {
        goto LABEL_738;
      }
      if ((v309 & 0x20) == 0) {
        break;
      }
      int v310 = *v308 & 0x3F;
      if ((v309 & 0x10) != 0)
      {
        if ((v309 & 8) != 0)
        {
          int v311 = v5[2] & 0x3F;
          int v312 = v5[3] & 0x3F;
          int v313 = v5[4] & 0x3F;
          if ((v309 & 4) != 0)
          {
            unsigned int v309 = ((v309 & 1) << 30) | (v310 << 24) | (v311 << 18) | (v312 << 12) | (v313 << 6) | v5[5] & 0x3F;
            int v367 = v309;
            v308 = v5 + 6;
          }
          else
          {
            v308 = v5 + 5;
            unsigned int v309 = ((v309 & 3) << 24) | (v310 << 18) | (v311 << 12) | (v312 << 6) | v313;
            int v367 = v309;
          }
        }
        else
        {
          unsigned int v309 = ((v309 & 7) << 18) | (v310 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
          int v367 = v309;
          v308 = v5 + 4;
        }
      }
      else
      {
        unsigned int v309 = ((v309 & 0xF) << 12) | (v310 << 6) | v5[2] & 0x3F;
        int v367 = v309;
        v308 = v5 + 3;
      }
      v368[0] = v308;
      if (v307)
      {
LABEL_748:
        uint64_t v6 = manage_callouts((int)v5, &v365, v7, v6, (uint64_t)v4);
        unsigned int v309 = v367;
        uint64_t v5 = v368[0];
        goto LABEL_749;
      }
LABEL_739:
      uint64_t v5 = v308;
LABEL_749:
      *v6++ = v309;
      if (v5 >= v8) {
        goto LABEL_750;
      }
    }
    v308 = v5 + 2;
    v368[0] = v5 + 2;
    int v367 = v5[1] & 0x3F | ((v309 & 0x1F) << 6);
    unsigned int v309 = v367;
LABEL_738:
    if (v307) {
      goto LABEL_748;
    }
    goto LABEL_739;
  }
  if (v8 <= a1)
  {
LABEL_750:
    LOWORD(v17) = 0;
    goto LABEL_751;
  }
  unsigned int v353 = 0;
  int v354 = (a2 >> 2) & 1;
  v350 = 0;
  BOOL v11 = 0;
  BOOL v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v352 = 0;
  int v348 = (a2 >> 19) & 1;
  unint64_t v346 = *((void *)v4 + 5) + 12 * (*((void *)v4 + 10) / 0xCuLL);
  uint64_t v19 = (a2 >> 17) & 0x80 | a2;
  v351 = v4 + 65;
  v349 = v8 - 1;
LABEL_8:
  uint64_t v361 = 0;
  uint64_t v362 = 0;
  v359 = 0;
  v360 = 0;
  if ((unint64_t)v6 >= v356) {
    goto LABEL_759;
  }
  if (*(_DWORD *)(*(void *)v4 + 60) < (unsigned __int16)v17)
  {
    int v321 = 119;
    goto LABEL_760;
  }
  int v20 = v5 + 1;
  v368[0] = v5 + 1;
  unsigned int v21 = *v5;
  int v367 = v21;
  if (!v355 || v21 < 0xC0) {
    goto LABEL_14;
  }
  if ((v21 & 0x20) == 0)
  {
    int v20 = v5 + 2;
    v368[0] = v5 + 2;
    int v367 = v5[1] & 0x3F | ((v21 & 0x1F) << 6);
    unsigned int v21 = v367;
LABEL_14:
    if (v14) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
  int v24 = *v20 & 0x3F;
  if ((v21 & 0x10) != 0)
  {
    if ((v21 & 8) != 0)
    {
      int v33 = v5[2] & 0x3F;
      int v34 = v5[3] & 0x3F;
      int v35 = v5[4] & 0x3F;
      if ((v21 & 4) != 0)
      {
        unsigned int v21 = ((v21 & 1) << 30) | (v24 << 24) | (v33 << 18) | (v34 << 12) | (v35 << 6) | v5[5] & 0x3F;
        int v367 = v21;
        int v20 = v5 + 6;
      }
      else
      {
        int v20 = v5 + 5;
        unsigned int v21 = ((v21 & 3) << 24) | (v24 << 18) | (v33 << 12) | (v34 << 6) | v35;
        int v367 = v21;
      }
    }
    else
    {
      unsigned int v21 = ((v21 & 7) << 18) | (v24 << 12) | ((v5[2] & 0x3F) << 6) | v5[3] & 0x3F;
      int v367 = v21;
      int v20 = v5 + 4;
    }
  }
  else
  {
    unsigned int v21 = ((v21 & 0xF) << 12) | (v24 << 6) | v5[2] & 0x3F;
    int v367 = v21;
    int v20 = v5 + 3;
  }
  v368[0] = v20;
  if (v14)
  {
LABEL_15:
    if (v21 != 92 || v20 >= v8 || *v20 != 69)
    {
      if ((int)v15 < 1)
      {
        if (v13)
        {
          uint64_t v23 = v16;
        }
        else
        {
          uint64_t v23 = (v16 - 1);
          if ((int)v16 <= 0)
          {
            int v25 = (int)v5;
            uint64_t v26 = v13;
            uint64_t v27 = v17;
            unint64_t v28 = v6;
            uint64_t v29 = v19;
            uint64_t v30 = v15;
            unsigned int v31 = v11;
            int v32 = manage_callouts(v25, &v365, v354, v28, (uint64_t)v4);
            BOOL v11 = v31;
            uint64_t v15 = v30;
            uint64_t v19 = v29;
            uint64_t v17 = v27;
            uint64_t v13 = v26;
            uint64_t v6 = v32;
            unsigned int v21 = v367;
          }
        }
        uint64_t v18 = 0;
        *v6++ = v21;
        int v14 = 1;
        uint64_t v16 = v23;
        goto LABEL_29;
      }
      v319 = v20 - 1;
LABEL_768:
      v368[0] = v319;
      int v321 = 128;
      goto LABEL_760;
    }
    int v14 = 0;
    goto LABEL_19;
  }
LABEL_38:
  if (!v13)
  {
LABEL_51:
    if (v21 != 92) {
      goto LABEL_57;
    }
    if (v20 >= v8 || (int v36 = *v20, v36 != 81) && v36 != 69)
    {
      unsigned int v21 = 92;
      goto LABEL_57;
    }
    int v14 = v36 == 81;
LABEL_19:
    unsigned int v22 = v20 + 1;
    goto LABEL_20;
  }
  if ((~v19 & 0x400080) != 0) {
    goto LABEL_47;
  }
  if (v21 < 0x100)
  {
    if (v21 == 35) {
      goto LABEL_57;
    }
    if (v21 != 133 && (*(unsigned char *)(*((void *)v4 + 4) + v21) & 1) == 0)
    {
LABEL_47:
      if (v21 == 41)
      {
        if ((uint64_t)&v20[~(unint64_t)v11] >= 256)
        {
          v368[0] = v20 - 1;
          int v321 = 176;
          goto LABEL_760;
        }
        *(_DWORD *)v352 = ((unint64_t)((char *)v6 - v352) >> 2) - 1;
        if (v353)
        {
          int v14 = 0;
          uint64_t v13 = 0;
          BOOL v12 = 0;
          *v6++ = v353;
          unsigned int v353 = 0;
          goto LABEL_30;
        }
        unsigned int v353 = 0;
        int v14 = 0;
        uint64_t v13 = 0;
        goto LABEL_94;
      }
      if (v21 == 92)
      {
        if ((v19 & 0x400000) != 0)
        {
          uint64_t v65 = v18;
          uint64_t v66 = v15;
          int v67 = v11;
          uint64_t v68 = v17;
          uint64_t v69 = v19;
          int v70 = _pcre2_check_escape_8(v368, (unint64_t)v8, &v367, (int *)&v364 + 1, v19, 0, v4);
          if (HIDWORD(v364)) {
            goto LABEL_761;
          }
          uint64_t v17 = v68;
          if (v70 == 26)
          {
            int v14 = 1;
            uint64_t v19 = v69;
            BOOL v11 = v67;
            uint64_t v15 = v66;
            uint64_t v13 = 1;
            uint64_t v18 = v65;
            goto LABEL_30;
          }
          uint64_t v19 = v69;
          BOOL v11 = v67;
          uint64_t v15 = v66;
          uint64_t v18 = v65;
          if (v70 == 25)
          {
            int v14 = 0;
            uint64_t v13 = 1;
            goto LABEL_30;
          }
          if (v70)
          {
            int v321 = 140;
            goto LABEL_760;
          }
          unsigned int v21 = v367;
        }
        else
        {
          unsigned int v21 = 92;
        }
      }
      int v14 = 0;
      *v6++ = v21;
      uint64_t v13 = 1;
LABEL_29:
      BOOL v12 = 1;
      goto LABEL_30;
    }
    goto LABEL_51;
  }
  if ((v21 | 1) != 0x200F && (v21 | 1) != 0x2029) {
    goto LABEL_47;
  }
LABEL_57:
  if ((v19 & 0x80) == 0)
  {
    if ((int)v21 <= 62)
    {
      if (v21 - 42 < 2) {
        goto LABEL_81;
      }
      goto LABEL_60;
    }
LABEL_75:
    if (v21 == 63) {
      goto LABEL_81;
    }
    if (v21 == 123)
    {
      v360 = v20;
      unint64_t v38 = (unint64_t)v8;
      uint64_t v39 = v17;
      v340 = v8;
      v345 = v4;
      uint64_t v40 = v16;
      uint64_t v41 = v13;
      int v42 = v11;
      uint64_t v43 = v19;
      int v44 = v15;
      int v45 = v18;
      int v46 = read_repeat_counts(&v360, v38, 0, 0, (int *)&v364 + 1);
      LODWORD(v18) = v45;
      LODWORD(v15) = v44;
      uint64_t v19 = v43;
      BOOL v11 = v42;
      uint64_t v13 = v41;
      uint64_t v16 = v40;
      int v8 = v340;
      uint64_t v4 = v345;
      uint64_t v17 = v39;
      if (v46) {
        goto LABEL_81;
      }
    }
    goto LABEL_78;
  }
  if (v21 <= 0xFF)
  {
    int v14 = 0;
    if (v21 == 133 || (*(unsigned char *)(*((void *)v4 + 4) + v21) & 1) != 0) {
      goto LABEL_30;
    }
  }
  int v14 = 0;
  if ((v21 | 1) == 0x200F || (v21 | 1) == 0x2029) {
    goto LABEL_30;
  }
  if ((int)v21 > 41)
  {
    if (v21 - 42 < 2) {
      goto LABEL_81;
    }
    goto LABEL_75;
  }
  if (v21 == 35)
  {
    if (v20 >= v8)
    {
LABEL_153:
      int v14 = 0;
      goto LABEL_30;
    }
    BOOL v336 = v12;
    while (1)
    {
      int v76 = v4[64];
      unint64_t v77 = *((void *)v4 + 8);
      if (v76)
      {
        if ((unint64_t)v20 < v77)
        {
          uint64_t v78 = v18;
          uint64_t v79 = v16;
          uint64_t v80 = v11;
          uint64_t v81 = v15;
          uint64_t v82 = v19;
          uint64_t v83 = v17;
          int is_newline_8 = _pcre2_is_newline_8(v20, v76, v77, v351, v348);
          int v20 = v368[0];
          if (is_newline_8)
          {
            uint64_t v85 = *v351;
            uint64_t v17 = v83;
            uint64_t v19 = v82;
            uint64_t v15 = v81;
            BOOL v11 = v80;
            uint64_t v16 = v79;
            uint64_t v18 = v78;
            BOOL v12 = v336;
            goto LABEL_486;
          }
          uint64_t v17 = v83;
          uint64_t v19 = v82;
          uint64_t v15 = v81;
          BOOL v11 = v80;
          uint64_t v16 = v79;
          uint64_t v18 = v78;
          BOOL v12 = v336;
        }
      }
      else
      {
        uint64_t v85 = *v351;
        if ((unint64_t)v20 <= v77 - v85 && *v20 == *((unsigned __int8 *)v4 + 272))
        {
          if (v85 == 1)
          {
            uint64_t v85 = 1;
LABEL_486:
            int v14 = 0;
            unsigned int v22 = &v20[v85];
LABEL_20:
            v368[0] = v22;
            goto LABEL_30;
          }
          if (v20[1] == *((unsigned __int8 *)v4 + 273)) {
            goto LABEL_486;
          }
        }
      }
      uint64_t v86 = v20 + 1;
      v368[0] = v20 + 1;
      if (v355 && v86 < v8)
      {
        int64_t v87 = v349 - v20;
        do
        {
          if ((*v86 & 0xC0) != 0x80) {
            goto LABEL_152;
          }
          v368[0] = ++v86;
          --v87;
        }
        while (v87);
        uint64_t v86 = v8;
      }
LABEL_152:
      int v20 = v86;
      if (v86 >= v8) {
        goto LABEL_153;
      }
    }
  }
LABEL_60:
  if (v21 == 40 && v8 - v20 >= 2 && *v20 == 63 && v20[1] == 35)
  {
    unsigned int v22 = v20 + 1;
    while (1)
    {
      v368[0] = v22;
      if (v22 >= v8) {
        break;
      }
      int v37 = *v22++;
      if (v37 == 41)
      {
        int v14 = 0;
        goto LABEL_20;
      }
    }
    int v321 = 118;
    goto LABEL_760;
  }
LABEL_78:
  uint64_t v47 = (v16 - 1);
  if ((int)v16 <= 0)
  {
    int v48 = (int)v5;
    uint64_t v49 = v17;
    unint64_t v50 = v6;
    uint64_t v51 = v19;
    uint64_t v52 = v13;
    int v53 = v15;
    uint64_t v54 = v11;
    int v55 = v18;
    unsigned int v56 = manage_callouts(v48, &v365, v354, v50, (uint64_t)v4);
    LODWORD(v18) = v55;
    BOOL v11 = v54;
    LODWORD(v15) = v53;
    uint64_t v13 = v52;
    uint64_t v19 = v51;
    uint64_t v17 = v49;
    uint64_t v6 = v56;
  }
  uint64_t v16 = v47;
LABEL_81:
  uint64_t v57 = (v15 - 1);
  if ((int)v15 < 1) {
    goto LABEL_98;
  }
  if (v367 != 40 || v8 - v368[0] < 3 || *v368[0] != 63)
  {
LABEL_767:
    v319 = v368[0] - 1;
    goto LABEL_768;
  }
  unsigned int v58 = v368[0][1];
  if (v58 > 0x3C)
  {
    if (v58 != 61 && (v58 != 67 || v15 != 2)) {
      goto LABEL_767;
    }
  }
  else if (v58 != 33)
  {
    if (v58 != 60) {
      goto LABEL_767;
    }
    int v59 = v368[0][2];
    if (v59 != 33 && v59 != 61) {
      goto LABEL_767;
    }
  }
LABEL_98:
  if (v18)
  {
    if (v367 <= 62)
    {
      uint64_t v60 = 2150694912;
      switch(v367)
      {
        case '$':
          goto LABEL_103;
        case '(':
          goto LABEL_154;
        case ')':
          goto LABEL_164;
        case '*':
          goto LABEL_228;
        case '+':
          goto LABEL_106;
        case '.':
          goto LABEL_172;
        default:
          goto LABEL_183;
      }
    }
    if (v367 <= 93)
    {
      if (v367 == 63)
      {
LABEL_106:
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        if (v367 == 63) {
          int v62 = 0x20000;
        }
        else {
          int v62 = 0x10000;
        }
        unsigned int v63 = v62 + v18;
        uint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
        if (v18 == -2143682560) {
          uint64_t v64 = 0x3FFFFFFFFFFFFFFDLL;
        }
        v6[v64] = v63;
        uint64_t v18 = 0;
        goto LABEL_30;
      }
      goto LABEL_120;
    }
LABEL_124:
    if (v367 == 94)
    {
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      int v14 = 0;
      BOOL v12 = 0;
      unsigned int v61 = -2146893824;
      goto LABEL_187;
    }
    if (v367 != 123)
    {
      if (v367 != 124)
      {
LABEL_183:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        *v6++ = v367;
        goto LABEL_29;
      }
      if (v350 && *v350 == (unsigned __int16)v17 && (v350[3] & 1) != 0)
      {
        unsigned int v75 = v4[53];
        if (v75 > v350[2]) {
          v350[2] = v75;
        }
        v4[53] = v350[1];
      }
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      int v14 = 0;
      BOOL v12 = 0;
      unsigned int v61 = -2147418112;
LABEL_187:
      *v6++ = v61;
      goto LABEL_30;
    }
    int v112 = v11;
    uint64_t v113 = v19;
    uint64_t v114 = v17;
    if (read_repeat_counts(v368, (unint64_t)v8, (unsigned int *)&v362 + 1, (unsigned int *)&v362, (int *)&v364 + 1))
    {
      uint64_t v60 = 2151284736;
      uint64_t v17 = v114;
      uint64_t v19 = v113;
      BOOL v11 = v112;
LABEL_228:
      if (v12)
      {
        *uint64_t v6 = v60;
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        if (v367 == 123)
        {
          unsigned int v133 = v362;
          v6[1] = HIDWORD(v362);
          void v6[2] = v133;
          v6 += 3;
        }
        else
        {
          ++v6;
        }
        uint64_t v18 = v60;
        goto LABEL_30;
      }
      int v320 = 109;
      goto LABEL_775;
    }
    int v14 = HIDWORD(v364);
    if (HIDWORD(v364)) {
      goto LABEL_761;
    }
    uint64_t v17 = v114;
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    *v6++ = 123;
LABEL_236:
    BOOL v12 = 1;
    uint64_t v19 = v113;
    BOOL v11 = v112;
    goto LABEL_30;
  }
  if (v367 <= 62)
  {
    uint64_t v60 = 2150694912;
    switch(v367)
    {
      case '$':
LABEL_103:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        unsigned int v61 = -2146041856;
        goto LABEL_187;
      case '(':
LABEL_154:
        BOOL v88 = v368[0];
        if (v368[0] >= v8) {
          goto LABEL_758;
        }
        int v89 = *v368[0];
        if (v89 == 42)
        {
          if (v8 - v368[0] < 2 || v368[0][1] == 41) {
            goto LABEL_387;
          }
          unsigned int v325 = v16;
          unsigned int v333 = v13;
          unsigned int v338 = v17;
          v329 = v11;
          unsigned int v342 = v19;
          if (!read_name(v368, v8, 0, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
            goto LABEL_761;
          }
          if (v368[0] >= v8 || (int v192 = *v368[0], v192 != 41) && v192 != 58)
          {
LABEL_765:
            int v321 = 160;
            goto LABEL_760;
          }
          uint64_t v193 = v366;
          uint64_t v194 = v363;
          unint64_t v195 = -2;
          int v196 = &dword_220722BD0;
          uint64_t v197 = (unsigned __int8 *)&verbnames;
          while (1)
          {
            int v198 = *(v196 - 1);
            if (v193 == v198)
            {
              int v199 = _pcre2_strncmp_c8_8(v194, v197, v193);
              uint64_t v17 = v338;
              uint64_t v19 = v342;
              if (!v199) {
                break;
              }
            }
            v197 += (v198 + 1);
            v196 += 3;
            if (++v195 == 7) {
              goto LABEL_765;
            }
          }
          unsigned int v200 = v195 + 2;
          LODWORD(v364) = v195 + 2;
          uint64_t v201 = v368[0];
          uint64_t v202 = v368[0] + 1;
          if (*v368[0] != 58 || v202 >= v8)
          {
            BOOL v11 = v329;
            uint64_t v13 = v333;
            uint64_t v16 = v325;
          }
          else
          {
            BOOL v11 = v329;
            uint64_t v13 = v333;
            uint64_t v16 = v325;
            if (*v202 == 41)
            {
              ++v368[0];
              ++v201;
            }
          }
          if (v200 <= 1 && *v201 != 58)
          {
            int v321 = 166;
            goto LABEL_760;
          }
          uint64_t v204 = v201 + 1;
          v368[0] = v201 + 1;
          if (*v201 == 58)
          {
            uint64_t v18 = 0;
            uint64_t v15 = 0;
            int v14 = 0;
            BOOL v12 = 0;
            int v205 = *v196 + ((v200 > 1) << 16);
            if (v195 < 3) {
              int v205 = -2144993280;
            }
            int v206 = v353;
            if (v195 < 3) {
              int v206 = *v196;
            }
            unsigned int v353 = v206;
            v352 = (char *)(v6 + 1);
            *uint64_t v6 = v205;
            v6 += 2;
            uint64_t v13 = 1;
            BOOL v11 = v204;
            goto LABEL_30;
          }
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          BOOL v12 = 0;
          unsigned int v61 = *v196;
          goto LABEL_187;
        }
        if (v89 != 63)
        {
          uint64_t v17 = (v17 + 1);
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          BOOL v12 = 0;
          if ((v19 & 0x2000) != 0)
          {
            unsigned int v61 = -2145779712;
          }
          else
          {
            int v187 = v4[53] + 1;
            v4[53] = v187;
            unsigned int v61 = v187 | 0x80080000;
          }
          goto LABEL_187;
        }
        unsigned int v90 = ++v368[0];
        if (v88 + 1 >= v8) {
          goto LABEL_758;
        }
        break;
      case ')':
LABEL_164:
        __int16 v101 = v350;
        if (v350 && *v350 == (unsigned __int16)v17)
        {
          int v102 = *((_DWORD *)v350 + 2);
          unsigned __int16 v103 = v350[3];
          if (v103)
          {
            unsigned int v104 = v350[2];
            if (v4[53] < v104) {
              v4[53] = v104;
            }
          }
          uint64_t v19 = v102 | v19 & 0xFEFBDB17;
          BOOL v12 = (v103 & 2) == 0;
          if (v350 == *((unsigned __int16 **)v4 + 5)) {
            __int16 v101 = 0;
          }
          else {
            __int16 v101 = v350 - 6;
          }
        }
        else
        {
          BOOL v12 = 1;
        }
        if (!(_WORD)v17)
        {
          int v320 = 122;
          goto LABEL_775;
        }
        v350 = v101;
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        uint64_t v17 = (v17 - 1);
        unsigned int v61 = -2145845248;
        goto LABEL_187;
      case '*':
        goto LABEL_228;
      case '+':
        uint64_t v60 = 2150891520;
        goto LABEL_228;
      case '.':
LABEL_172:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        int v105 = -2145976320;
        goto LABEL_173;
      default:
        goto LABEL_183;
    }
    unsigned __int8 v91 = *v90;
    int v92 = -1;
    switch(*v90)
    {
      case '!':
        int v207 = -2145189888;
        goto LABEL_446;
      case '&':
        goto LABEL_463;
      case '\'':
        goto LABEL_470;
      case '(':
        v368[0] = v88 + 2;
        if (v88 + 2 >= v8) {
          goto LABEL_758;
        }
        uint64_t v17 = (v17 + 1);
        if (v88[2] == 63)
        {
          uint64_t v18 = 0;
          int v14 = 0;
          BOOL v12 = 0;
          *v6++ = -2146500608;
          v368[0] = v88 + 1;
          uint64_t v15 = 2;
          goto LABEL_30;
        }
        unsigned int v326 = v16;
        int v235 = v11;
        unsigned int v339 = v17;
        unsigned int v344 = v19;
        if (read_number(v368, (unint64_t)v8, v4[53], 0xFFFFu, 161, (int *)&v364, (int *)&v364 + 1))
        {
          if ((int)v364 <= 0)
          {
            int v321 = 115;
            goto LABEL_760;
          }
          uint64_t v236 = v8;
          *uint64_t v6 = -2146304000;
          long long v237 = v368[0];
          long long v238 = &v368[0][-*((void *)v4 + 7) - 2];
          v359 = v238;
          v6[1] = HIDWORD(v238);
          void v6[2] = v238;
          v6[3] = v364;
LABEL_620:
          v6 += 4;
          goto LABEL_621;
        }
        if (HIDWORD(v364)) {
          goto LABEL_761;
        }
        uint64_t v263 = v368[0];
        uint64_t v236 = v8;
        if (v8 - v368[0] >= 10)
        {
          int v264 = _pcre2_strncmp_c8_8(v368[0], "VERSION", 7);
          uint64_t v263 = v368[0];
          if (!v264 && v368[0][7] != 41)
          {
            v368[0] += 7;
            int v272 = v263[7];
            if (v272 == 62)
            {
              int v272 = v263[8];
              v368[0] = v263 + 8;
              int v273 = 1;
              uint64_t v274 = 8;
            }
            else
            {
              int v273 = 0;
              uint64_t v274 = 7;
            }
            if (v272 == 61)
            {
              v277 = &v263[v274 + 1];
              v368[0] = v277;
              if (*v277 - 48 <= 9)
              {
                HIDWORD(v364) = 0;
                if (v277 >= v8) {
                  goto LABEL_761;
                }
                unsigned int v278 = 0;
                char v279 = &v263[v274 + 2];
                while (1)
                {
                  long long v237 = v279 - 1;
                  if (v279 - 1 >= v8)
                  {
                    v368[0] = v279 - 1;
                    goto LABEL_803;
                  }
                  int v280 = *v237;
                  if ((v280 - 48) > 9) {
                    break;
                  }
                  unsigned int v278 = v280 + 10 * v278 - 48;
                  ++v279;
                  if (v278 >= 0x3E9)
                  {
                    HIDWORD(v364) = 179;
                    v368[0] = v279 - 1;
                    goto LABEL_761;
                  }
                }
                v368[0] = v279 - 1;
                if (*(v279 - 1) != 46)
                {
                  int v282 = 0;
                  goto LABEL_642;
                }
                v368[0] = v279;
                if (v279 < v8 && *v279 - 48 <= 9)
                {
                  long long v237 = v279 + 1;
                  v368[0] = v279 + 1;
                  int v281 = 10 * *v279;
                  if (v279[1] - 48 > 9)
                  {
                    int v282 = v281 - 480;
                  }
                  else
                  {
                    long long v237 = v279 + 2;
                    v368[0] = v279 + 2;
                    int v282 = v281 + v279[1] - 528;
                  }
                  if (v237 < v8 && *v237 == 41)
                  {
LABEL_642:
                    *uint64_t v6 = -2146107392;
                    v6[1] = v273;
                    void v6[2] = v278;
                    v6[3] = v282;
                    goto LABEL_620;
                  }
                }
              }
            }
LABEL_803:
            int v323 = 179;
LABEL_797:
            HIDWORD(v364) = v323;
            goto LABEL_761;
          }
        }
        int v265 = *v263;
        if (v265 == 82 && v8 - v263 >= 2)
        {
          if (v263[1] == 38)
          {
            v368[0] = v263 + 1;
            if (!read_name(v368, v8, 0x29u, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
              goto LABEL_761;
            }
            int v266 = -2146238464;
            goto LABEL_618;
          }
LABEL_596:
          v368[0] = v263 - 1;
          if (!read_name(v368, v8, 0x29u, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
            goto LABEL_761;
          }
          uint64_t v269 = v366;
          v270 = v363;
          if (v366 == 6)
          {
            if (!_pcre2_strncmp_c8_8(v363, "DEFINE", 6))
            {
              *uint64_t v6 = -2146435072;
              long long v237 = --v368[0];
              *(void *)(v6 + 1) = __ROR8__(v359, 32);
              v6 += 3;
LABEL_621:
              if (v237 < v236 && *v237 == 41)
              {
                int v8 = v236;
                uint64_t v18 = 0;
                uint64_t v15 = 0;
                int v14 = 0;
                v368[0] = v237 + 1;
                uint64_t v17 = v339;
                uint64_t v19 = v344;
                BOOL v11 = v235;
                uint64_t v16 = v326;
                BOOL v12 = 0;
                goto LABEL_30;
              }
              int v323 = 124;
              goto LABEL_797;
            }
          }
          else if ((int)v366 < 2)
          {
            LODWORD(v271) = 1;
LABEL_611:
            LODWORD(v364) = v271;
            BOOL v275 = *v270 != 82 || (int)v271 < (int)v269;
            if (v275) {
              int v276 = -458752;
            }
            else {
              int v276 = -262144;
            }
            int v266 = v276 - 2145910784;
LABEL_618:
            *uint64_t v6 = v266;
            long long v237 = --v368[0];
LABEL_619:
            v6[1] = v366;
            *((void *)v6 + 1) = __ROR8__(v359, 32);
            goto LABEL_620;
          }
          uint64_t v271 = 1;
          do
          {
            if (v270[v271] - 48 > 9) {
              goto LABEL_611;
            }
            ++v271;
          }
          while (v269 != v271);
          LODWORD(v271) = v269;
          goto LABEL_611;
        }
        if (v265 == 60)
        {
          unsigned __int8 v268 = 62;
        }
        else
        {
          if (v265 != 39) {
            goto LABEL_596;
          }
          unsigned __int8 v268 = 39;
        }
        if (!read_name(v368, v8, v268, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
          goto LABEL_761;
        }
        *uint64_t v6 = -2146369536;
        long long v237 = v368[0];
        goto LABEL_619;
      case '+':
        if (v8 - v90 >= 2 && v88[2] - 48 < 0xA) {
          goto LABEL_434;
        }
        int v321 = 129;
        goto LABEL_760;
      case '-':
        if (v8 - v90 < 2 || v88[2] - 48 >= 0xA) {
          goto LABEL_435;
        }
LABEL_434:
        int v92 = v4[53];
LABEL_159:
        uint64_t v93 = v16;
        uint64_t v94 = v13;
        int v95 = v11;
        uint64_t v96 = v19;
        uint64_t v97 = v17;
        if (!read_number(v368, (unint64_t)v8, v92, 0xFFFFu, 161, (int *)&v364, (int *)&v364 + 1)) {
          goto LABEL_761;
        }
        int v98 = v364;
        if ((v364 & 0x80000000) != 0)
        {
          int v320 = 115;
          goto LABEL_775;
        }
        int v99 = v368[0];
        if (v368[0] >= v8) {
          goto LABEL_758;
        }
        uint64_t v17 = v97;
        uint64_t v19 = v96;
        BOOL v11 = v95;
        uint64_t v13 = v94;
        uint64_t v16 = v93;
        if (*v368[0] != 41) {
          goto LABEL_758;
        }
LABEL_163:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        *uint64_t v6 = v98 | 0x80200000;
        v359 = &v99[-*((void *)v4 + 7)];
        unsigned int v100 = v359;
        v368[0] = v99 + 1;
        v6[1] = HIDWORD(v359);
        void v6[2] = v100;
        goto LABEL_664;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto LABEL_159;
      case '<':
        if (v8 - v90 < 2) {
          goto LABEL_469;
        }
        int v209 = v88[2];
        if (v209 != 61 && v209 != 33) {
          goto LABEL_469;
        }
        if (v209 == 61) {
          int v210 = -2145124352;
        }
        else {
          int v210 = -2145058816;
        }
        *uint64_t v6 = v210;
        *a3 = 1;
        uint64_t v211 = (uint64_t)&v90[-*((void *)v4 + 7) - 2];
        v359 = (unsigned __int8 *)v211;
        v6[1] = HIDWORD(v211);
        void v6[2] = v211;
        v6 += 3;
        uint64_t v212 = v88 + 3;
LABEL_447:
        v368[0] = v212;
        uint64_t v17 = (v17 + 1);
        if ((int)v15 < 1) {
          goto LABEL_387;
        }
        if (v350)
        {
          __int16 v213 = v350 + 6;
          if ((unint64_t)(v350 + 6) >= v346) {
            goto LABEL_788;
          }
        }
        else
        {
          __int16 v213 = (unsigned __int16 *)*((void *)v4 + 5);
        }
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        *__int16 v213 = v17;
        v213[3] = 2;
        v350 = v213;
        *((_DWORD *)v213 + 2) = v19 & 0x10424E8;
        goto LABEL_30;
      case '=':
        int v207 = -2145255424;
LABEL_446:
        *v6++ = v207;
        uint64_t v212 = v88 + 2;
        goto LABEL_447;
      case '>':
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        *v6++ = -2147352576;
        uint64_t v17 = (v17 + 1);
        unsigned int v22 = v88 + 2;
        goto LABEL_20;
      case 'C':
        unsigned int v90 = v88 + 2;
        v368[0] = v88 + 2;
        if (v88 + 2 >= v8) {
          goto LABEL_758;
        }
        if (v365 && (v19 & 4) != 0 && v365 == v6 - 4)
        {
          if (*(v6 - 1) == 255) {
            __int16 v214 = v365;
          }
          else {
            __int16 v214 = v6;
          }
        }
        else
        {
          __int16 v214 = v6;
        }
        v365 = v214;
        int v239 = *v90;
        if (v239 == 41 || (v239 - 48) < 0xA)
        {
          unsigned __int8 v241 = v11;
          int v244 = 0;
          *__int16 v214 = -2147090432;
          while (v90 < v8 && *v90 - 48 <= 9)
          {
            v368[0] = v90 + 1;
            int v245 = *v90 + 10 * v244;
            int v244 = v245 - 48;
            ++v90;
            if (v245 > 303)
            {
              int v321 = 138;
              goto LABEL_760;
            }
          }
          uint64_t v6 = v214 + 4;
          v214[3] = v244;
LABEL_589:
          if (v90 >= v8 || *v90 != 41)
          {
            int v321 = 139;
            goto LABEL_760;
          }
          uint64_t v18 = 0;
          int v14 = 0;
          v368[0] = v90 + 1;
          *(void *)(v214 + 1) = (v90 + 1 - v4[14]);
          uint64_t v16 = 1;
          uint64_t v15 = v57;
          BOOL v11 = v241;
          goto LABEL_94;
        }
        int v240 = 96;
        unsigned __int8 v241 = v11;
        uint64_t v242 = 0;
        while (v240 != v239)
        {
          long long v243 = &_pcre2_callout_start_delims_8[v242++];
          int v240 = v243[1];
          if (!v240) {
            goto LABEL_785;
          }
        }
        LODWORD(v364) = v242;
        int v260 = _pcre2_callout_end_delims_8[v242];
        if (!v260)
        {
LABEL_785:
          int v321 = 182;
          goto LABEL_760;
        }
        *__int16 v214 = -2147024896;
        __int16 v261 = v88 + 3;
        v368[0] = v88 + 3;
        __int16 v262 = v88 + 2;
        while (v261 < v8)
        {
          if (v260 == *v261)
          {
            __int16 v261 = v262 + 2;
            v368[0] = v262 + 2;
            if (v262 + 2 >= v8 || v260 != *v261)
            {
              if ((unint64_t)(v261 - v90) >> 32)
              {
                int v321 = 172;
                goto LABEL_760;
              }
              v214[3] = v261 - v90;
              v267 = &v90[-*((void *)v4 + 7)];
              v359 = v267;
              uint64_t v6 = v214 + 6;
              v214[4] = HIDWORD(v267);
              v214[5] = v267;
              unsigned int v90 = v262 + 2;
              goto LABEL_589;
            }
          }
          __int16 v262 = v261++;
          v368[0] = v261;
        }
        int v322 = 181;
        goto LABEL_794;
      case 'P':
        v368[0] = v88 + 2;
        if (v88 + 2 >= v8) {
          goto LABEL_758;
        }
        int v215 = v88[2];
        if (v215 != 60)
        {
          if (v215 == 61)
          {
            int v112 = v11;
            uint64_t v113 = v19;
            uint64_t v259 = v17;
            if (!read_name(v368, v8, 0x29u, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
              goto LABEL_761;
            }
            uint64_t v17 = v259;
            uint64_t v18 = 0;
            uint64_t v15 = 0;
            int v14 = 0;
            int v217 = -2147221504;
          }
          else
          {
            if (v215 != 62)
            {
              int v321 = 141;
              goto LABEL_760;
            }
LABEL_463:
            int v112 = v11;
            uint64_t v113 = v19;
            uint64_t v216 = v17;
            if (!read_name(v368, v8, 0x29u, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
              goto LABEL_761;
            }
            uint64_t v17 = v216;
            uint64_t v18 = 0;
            uint64_t v15 = 0;
            int v14 = 0;
            int v217 = -2145320960;
          }
          *uint64_t v6 = v217;
          v6[1] = v366;
          *((void *)v6 + 1) = __ROR8__(v359, 32);
          v6 += 4;
          goto LABEL_236;
        }
LABEL_469:
        unsigned __int8 v91 = 62;
LABEL_470:
        unsigned int v324 = v16;
        unsigned int v334 = v13;
        v330 = v11;
        unsigned int v343 = v19;
        int v218 = v17;
        if (!read_name(v368, v8, v91, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
          goto LABEL_761;
        }
        int v219 = v4[53] + 1;
        v4[53] = v219;
        *v6++ = v219 | 0x80080000;
        unsigned int v220 = *((unsigned __int16 *)v4 + 88);
        if (v220 >> 4 >= 0x271)
        {
          int v321 = 149;
          goto LABEL_760;
        }
        int v221 = v218;
        uint64_t v222 = v366;
        uint64_t v19 = v343;
        if (v366 + 3 > *((unsigned __int16 *)v4 + 89)) {
          *((_WORD *)v4 + 89) = v366 + 3;
        }
        if (!v220)
        {
          unsigned int v229 = 0;
          unsigned int v224 = 0;
          __int16 v223 = 0;
          goto LABEL_489;
        }
        __int16 v223 = 0;
        unsigned int v224 = 0;
        char v225 = v363;
        uint64_t v226 = *((void *)v4 + 24) + 8;
        while (v222 == *(unsigned __int16 *)(v226 + 4))
        {
          int v227 = _pcre2_strncmp_8(v225, *(unsigned __int8 **)(v226 - 8), v222);
          uint64_t v19 = v343;
          int v221 = v218;
          int v228 = v4[53];
          if (v227) {
            goto LABEL_482;
          }
          if (*(_DWORD *)v226 == v228)
          {
            unsigned int v229 = *((unsigned __int16 *)v4 + 88);
LABEL_489:
            uint64_t v17 = (v221 + 1);
            LODWORD(v364) = v224;
            BOOL v11 = v330;
            uint64_t v13 = v334;
            if ((int)v224 < (int)v229)
            {
              uint64_t v18 = 0;
              uint64_t v15 = 0;
              int v14 = 0;
              BOOL v12 = 0;
LABEL_384:
              uint64_t v16 = v324;
              goto LABEL_30;
            }
            uint64_t v230 = v4[50];
            if (v230 <= v229)
            {
              uint64_t v256 = v17;
              char v257 = (void *)(**(uint64_t (***)(uint64_t, void))v4)(32 * v230, *(void *)(*(void *)v4 + 16));
              if (!v257)
              {
                int v321 = 121;
                goto LABEL_760;
              }
              uint64_t v231 = v257;
              cstdlib_memcpy(v257, *((const void **)v4 + 24), 16 * v4[50]);
              if (v4[50] >= 0x15) {
                (*(void (**)(void, void))(*(void *)v4 + 8))(*((void *)v4 + 24), *(void *)(*(void *)v4 + 16));
              }
              *((void *)v4 + 24) = v231;
              v4[50] = 2 * v230;
              unsigned int v229 = *((unsigned __int16 *)v4 + 88);
              uint64_t v17 = v256;
              uint64_t v19 = v343;
              BOOL v11 = v330;
              uint64_t v13 = v334;
            }
            else
            {
              uint64_t v231 = (void *)*((void *)v4 + 24);
            }
            uint64_t v16 = v324;
            uint64_t v18 = 0;
            uint64_t v15 = 0;
            int v14 = 0;
            BOOL v12 = 0;
            uint64_t v258 = (uint64_t)v231 + 16 * v229;
            *(void *)uint64_t v258 = v363;
            *(_WORD *)(v258 + 12) = v222;
            *(_DWORD *)(v258 + 8) = v4[53];
            *(_WORD *)(v258 + 14) = v223;
            *((_WORD *)v4 + 88) = v229 + 1;
            goto LABEL_30;
          }
          if ((v343 & 0x40) == 0)
          {
            int v321 = 143;
            goto LABEL_760;
          }
          __int16 v223 = 1;
          *(_WORD *)(v226 + 6) = 1;
          v4[74] = 1;
LABEL_483:
          v226 += 16;
          ++v224;
          unsigned int v229 = *((unsigned __int16 *)v4 + 88);
          if (v224 >= v229) {
            goto LABEL_489;
          }
        }
        int v228 = v4[53];
LABEL_482:
        if (*(_DWORD *)v226 == v228)
        {
          int v321 = 165;
          goto LABEL_760;
        }
        goto LABEL_483;
      case 'R':
        LODWORD(v364) = 0;
        int v99 = v88 + 2;
        v368[0] = v88 + 2;
        if (v88 + 2 < v8 && *v99 == 41)
        {
          int v98 = 0;
          goto LABEL_163;
        }
        int v321 = 158;
        goto LABEL_760;
      default:
LABEL_435:
        if (v350)
        {
          uint64_t v208 = v350 + 6;
          if ((unint64_t)(v350 + 6) >= v346)
          {
LABEL_788:
            int v321 = 184;
            goto LABEL_760;
          }
        }
        else
        {
          uint64_t v208 = (unsigned __int16 *)*((void *)v4 + 5);
        }
        unsigned __int16 *v208 = v17 + 1;
        v208[3] = 0;
        *((_DWORD *)v208 + 2) = v19 & 0x10424E8;
        if (*v90 == 124)
        {
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          BOOL v12 = 0;
          unsigned __int16 v232 = *((_WORD *)v4 + 106);
          v208[1] = v232;
          v208[2] = v232;
          v350 = v208;
          v208[3] = 1;
          v4[52] |= 0x200000u;
          *v6++ = -2145779712;
          v368[0] = v88 + 2;
          uint64_t v17 = (v17 + 1);
          goto LABEL_30;
        }
        *(_DWORD *)(v208 + 1) = 0;
        uint64_t v361 = 0;
        if (*v90 == 94)
        {
          int v233 = 0;
          int v234 = v19 & 0xFEFFDB57;
          unsigned int v90 = v88 + 2;
          v368[0] = v88 + 2;
        }
        else
        {
          int v233 = 1;
          int v234 = v19;
        }
        if (v90 >= v8) {
          goto LABEL_758;
        }
        char v246 = (int *)&v361 + 1;
        break;
    }
    while (1)
    {
      int v247 = *v90;
      char v248 = 1;
      if (v247 == 41 || v247 == 58) {
        goto LABEL_549;
      }
      __int16 v249 = v90 + 1;
      v368[0] = v90 + 1;
      unsigned int v250 = *v90;
      if (v250 <= 0x6C) {
        break;
      }
      if (*v90 <= 0x72u)
      {
        if (v250 == 109)
        {
          int v251 = *v246 | 0x400;
        }
        else
        {
          if (v250 != 110) {
            goto LABEL_792;
          }
          int v251 = *v246 | 0x2000;
        }
        goto LABEL_545;
      }
      if (v250 == 115)
      {
        int v251 = *v246 | 0x20;
        goto LABEL_545;
      }
      if (v250 != 120)
      {
LABEL_792:
        int v322 = 111;
LABEL_794:
        HIDWORD(v364) = v322;
        v368[0] = v90;
        goto LABEL_761;
      }
      int v252 = *v246;
      *v246 |= 0x80u;
      if (v249 >= v8 || *v249 != 120) {
        goto LABEL_546;
      }
      *char v246 = v252 | 0x1000080;
      v90 += 2;
      v368[0] = v90;
LABEL_547:
      if (v90 >= v8)
      {
        char v248 = 0;
LABEL_549:
        int v253 = v361;
        if ((HIDWORD(v361) & 0x1000080) == 0x80 || (v361 & 0x80) != 0)
        {
          int v253 = v361 | 0x1000000;
          LODWORD(v361) = v361 | 0x1000000;
        }
        if (v248)
        {
          uint64_t v255 = (HIDWORD(v361) | v234) & ~v253;
          v368[0] = v90 + 1;
          if (*v90 == 41)
          {
            if ((unint64_t)v208 > *((void *)v4 + 5) && *(v208 - 6) == (unsigned __int16)v17) {
              v208 -= 6;
            }
            else {
              unsigned __int16 *v208 = v17;
            }
          }
          else
          {
            *v6++ = -2145779712;
            uint64_t v17 = (v17 + 1);
          }
          v350 = v208;
          if (v255 != v19)
          {
            uint64_t v18 = 0;
            uint64_t v15 = 0;
            int v14 = 0;
            BOOL v12 = 0;
            *uint64_t v6 = -2145714176;
            v6[1] = v255;
            v6 += 2;
            uint64_t v19 = v255;
            goto LABEL_30;
          }
LABEL_387:
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
LABEL_94:
          BOOL v12 = 0;
          goto LABEL_30;
        }
LABEL_758:
        int v321 = 114;
        goto LABEL_760;
      }
    }
    if (*v90 > 0x54u)
    {
      if (v250 == 85)
      {
        int v251 = *v246 | 0x40000;
      }
      else
      {
        if (v250 != 105) {
          goto LABEL_792;
        }
        int v251 = *v246 | 8;
      }
LABEL_545:
      *char v246 = v251;
    }
    else if (v250 == 45)
    {
      if (!v233)
      {
        int v322 = 194;
        goto LABEL_794;
      }
      int v233 = 0;
      char v246 = (int *)&v361;
    }
    else
    {
      if (v250 != 74) {
        goto LABEL_792;
      }
      *v246 |= 0x40u;
      v4[52] |= 0x400u;
    }
LABEL_546:
    unsigned int v90 = v249;
    goto LABEL_547;
  }
  if (v367 > 93) {
    goto LABEL_124;
  }
  if (v367 == 63)
  {
    uint64_t v60 = 2151088128;
    goto LABEL_228;
  }
LABEL_120:
  if (v367 == 91)
  {
    uint64_t v106 = v368[0];
    if (v8 - v368[0] >= 6)
    {
      int v107 = v11;
      uint64_t v108 = v16;
      uint64_t v109 = v13;
      uint64_t v110 = v19;
      uint64_t v111 = v17;
      if (!_pcre2_strncmp_c8_8(v368[0], "[:<:]]", 6)
        || !_pcre2_strncmp_c8_8(v368[0], "[:>:]]", 6))
      {
        *uint64_t v6 = -2145910779;
        uint64_t v188 = (int *)(v6 + 2);
        int v189 = v368[0];
        if (v368[0][2] == 60)
        {
          v6[1] = -2145255424;
        }
        else
        {
          v6[1] = -2145124352;
          *a3 = 1;
          uint64_t v188 = (int *)(v6 + 4);
          *((void *)v6 + 1) = 0;
        }
        uint64_t v17 = v111;
        uint64_t v19 = v110;
        BOOL v11 = v107;
        uint64_t v13 = v109;
        if ((v19 & 0x20000) != 0)
        {
          uint64_t v190 = v188 + 2;
          v188[1] = 0x80000;
          int v191 = -2145910768;
        }
        else
        {
          uint64_t v190 = v188 + 1;
          int v191 = -2145910773;
        }
        uint64_t v16 = v108;
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        *uint64_t v188 = v191;
        *uint64_t v190 = -2145845248;
        uint64_t v6 = v190 + 1;
        v368[0] = v189 + 6;
        goto LABEL_29;
      }
      uint64_t v106 = v368[0];
      uint64_t v17 = v111;
      uint64_t v19 = v110;
      uint64_t v13 = v109;
      uint64_t v16 = v108;
      BOOL v11 = v107;
    }
    if (v106 < v8)
    {
      unsigned int v115 = *v106;
      if (v115 <= 0x3D && ((1 << v115) & 0x2400400000000000) != 0)
      {
        long long v116 = v11;
        uint64_t v117 = v16;
        uint64_t v118 = v13;
        uint64_t v119 = v19;
        uint64_t v120 = v17;
        int v121 = check_posix_syntax(v106, (uint64_t)v8, &v360);
        uint64_t v106 = v368[0];
        if (v121)
        {
          --v368[0];
          if (*v106 == 58) {
            int v321 = 112;
          }
          else {
            int v321 = 113;
          }
          goto LABEL_760;
        }
        uint64_t v17 = v120;
        uint64_t v19 = v119;
        uint64_t v13 = v118;
        uint64_t v16 = v117;
        BOOL v11 = v116;
      }
    }
    if (v106 < v8)
    {
      int v122 = 0;
      while (1)
      {
        v368[0] = v106 + 1;
        unsigned int v123 = *v106;
        if (v355 && v123 >= 0xC0)
        {
          if ((v123 & 0x20) != 0)
          {
            int v125 = v106[1] & 0x3F;
            if ((v123 & 0x10) != 0)
            {
              if ((v123 & 8) != 0)
              {
                int v126 = v106[2] & 0x3F;
                int v127 = v106[3] & 0x3F;
                int v128 = v106[4] & 0x3F;
                if ((v123 & 4) != 0)
                {
                  unsigned int v123 = ((v123 & 1) << 30) | (v125 << 24) | (v126 << 18) | (v127 << 12) | (v128 << 6) | v106[5] & 0x3F;
                  v106 += 6;
                }
                else
                {
                  unsigned int v123 = ((v123 & 3) << 24) | (v125 << 18) | (v126 << 12) | (v127 << 6) | v128;
                  v106 += 5;
                }
              }
              else
              {
                unsigned int v123 = ((v123 & 7) << 18) | (v125 << 12) | ((v106[2] & 0x3F) << 6) | v106[3] & 0x3F;
                v106 += 4;
              }
            }
            else
            {
              unsigned int v123 = ((v123 & 0xF) << 12) | (v125 << 6) | v106[2] & 0x3F;
              v106 += 3;
            }
            v368[0] = v106;
          }
          else
          {
            v368[0] = v106 + 2;
            int v124 = v106[1] & 0x3F | ((v123 & 0x1F) << 6);
            v106 += 2;
            unsigned int v123 = v124;
          }
        }
        else
        {
          ++v106;
        }
        if (v123 == 92)
        {
          int v367 = 92;
          if (v106 < v8 && *v106 == 69)
          {
            v368[0] = ++v106;
            unsigned int v123 = 92;
          }
          else
          {
            if (v8 - v106 < 3) {
              goto LABEL_241;
            }
            v327 = v11;
            uint64_t v130 = v13;
            uint64_t v131 = v19;
            uint64_t v132 = v17;
            if (_pcre2_strncmp_c8_8(v106, "Q\\E", 3))
            {
              unsigned int v123 = v367;
              uint64_t v17 = v132;
              uint64_t v19 = v131;
              uint64_t v13 = v130;
              BOOL v11 = v327;
              goto LABEL_239;
            }
            uint64_t v106 = v368[0] + 3;
            v368[0] += 3;
            unsigned int v123 = 92;
            uint64_t v17 = v132;
            uint64_t v19 = v131;
            uint64_t v13 = v130;
            BOOL v11 = v327;
          }
        }
        else if ((v19 & 0x1000000) == 0 || (v123 != 32 ? (BOOL v129 = v123 == 9) : (BOOL v129 = 1), !v129))
        {
          int v367 = v123;
          if (v122 || v123 != 94) {
            goto LABEL_239;
          }
          int v122 = 1;
        }
        if (v106 >= v8) {
          goto LABEL_238;
        }
      }
    }
    int v122 = 0;
    unsigned int v123 = 91;
LABEL_238:
    int v367 = v123;
LABEL_239:
    if (v123 == 93 && (v4[51] & 1) != 0)
    {
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      int v14 = 0;
      if (v122) {
        int v105 = -2146697216;
      }
      else {
        int v105 = -2146762752;
      }
LABEL_173:
      *v6++ = v105;
      goto LABEL_29;
    }
LABEL_241:
    unsigned int v324 = v16;
    unsigned int v332 = v13;
    unsigned int v135 = 0;
    int v136 = 0;
    if (v122) {
      int v137 = -2146566144;
    }
    else {
      int v137 = -2146828288;
    }
    *uint64_t v6 = v137;
    uint64_t v138 = (int *)(v6 + 1);
LABEL_245:
    if (v136)
    {
      if (v367 == 92 && v368[0] < v8 && *v368[0] == 69)
      {
        int v136 = 0;
        ++v368[0];
        goto LABEL_366;
      }
      goto LABEL_288;
    }
    if ((v19 & 0x1000000) != 0 && (v367 == 9 || v367 == 32))
    {
      int v136 = 0;
      goto LABEL_366;
    }
    if (v367 == 91)
    {
      if (v8 - v368[0] >= 3)
      {
        unsigned int v139 = *v368[0];
        BOOL v275 = v139 > 0x3D;
        uint64_t v140 = (1 << v139) & 0x2400400000000000;
        if (!v275 && v140 != 0)
        {
          uint64_t v142 = v11;
          uint64_t v143 = v19;
          uint64_t v144 = v17;
          if (!check_posix_syntax(v368[0], (uint64_t)v8, &v360))
          {
            int v157 = 0;
            int v158 = 3;
            uint64_t v17 = v144;
            uint64_t v19 = v143;
            BOOL v11 = v142;
            goto LABEL_289;
          }
          if (v135 != 1)
          {
            uint64_t v145 = v368[0];
            if (*v368[0] != 58)
            {
              int v320 = 113;
              goto LABEL_775;
            }
            unint64_t v146 = ++v368[0];
            int v147 = v145[1];
            if (v147 == 94)
            {
              unint64_t v146 = v145 + 2;
              v368[0] = v145 + 2;
            }
            unint64_t v148 = v360;
            int v149 = check_posix_name(v146, (int)v360 - (int)v146);
            if (v149 < 0)
            {
              int v321 = 130;
              goto LABEL_760;
            }
            v368[0] = v148 + 2;
            uint64_t v17 = v144;
            uint64_t v19 = v143;
            if (v148 + 2 >= v349 || v148[2] != 45 || v148[3] == 93)
            {
              BOOL v11 = v142;
              if ((v143 & 0x20000) != 0)
              {
                if ((0xBFFFAFFuLL >> (2 * v149)))
                {
                  unsigned int v135 = 0;
                  int v136 = 0;
                  int v164 = posix_substitutes[(2 * v149) | 1];
                  int v165 = posix_substitutes[2 * v149];
                  if (v147 == 94) {
                    int v166 = -2145910769;
                  }
                  else {
                    int v166 = -2145910768;
                  }
                  *uint64_t v138 = v166;
                  v138[1] = v164 | (v165 << 16);
                  v138 += 2;
                  goto LABEL_366;
                }
                if (((0xAAA2280uLL >> ((2 * v149) | 1u)) & 1) == 0)
                {
                  unsigned int v135 = 0;
                  int v136 = 0;
                  if (v147 == 94) {
                    int v150 = -2145910766;
                  }
                  else {
                    int v150 = -2145910765;
                  }
                  *v138++ = v150;
                  goto LABEL_366;
                }
              }
              unsigned int v135 = 0;
              int v136 = 0;
              if (v147 == 94) {
                int v162 = -2145583104;
              }
              else {
                int v162 = -2145648640;
              }
              *uint64_t v138 = v162;
              v138[1] = v149;
              v138 += 2;
              goto LABEL_366;
            }
          }
LABEL_777:
          int v321 = 150;
LABEL_760:
          HIDWORD(v364) = v321;
          goto LABEL_761;
        }
      }
LABEL_288:
      int v157 = 0;
      int v158 = 3;
      goto LABEL_289;
    }
    if (v367 == 45 && v135 >= 2)
    {
      int v136 = 0;
      if (v135 == 3) {
        int v161 = -2145452032;
      }
      else {
        int v161 = -2145517568;
      }
      *v138++ = v161;
      unsigned int v135 = 1;
      goto LABEL_366;
    }
    if (v367 != 92) {
      goto LABEL_288;
    }
    v328 = v11;
    unsigned int v337 = v17;
    uint64_t v152 = v368[0];
    v360 = v368[0];
    uint64_t v153 = v19;
    int v154 = _pcre2_check_escape_8(v368, (unint64_t)v8, &v367, (int *)&v364 + 1, v19, 1, v4);
    if (HIDWORD(v364))
    {
      uint64_t v17 = v337;
      goto LABEL_282;
    }
    int v155 = v154;
    uint64_t v17 = v337;
LABEL_310:
    uint64_t v19 = v153;
    while (1)
    {
      while (1)
      {
        do
        {
          int v157 = 1;
          if (v155 > 24)
          {
            if (v155 == 25)
            {
              int v136 = 0;
              goto LABEL_320;
            }
            if (v155 == 26)
            {
              int v136 = 1;
LABEL_320:
              BOOL v11 = v328;
              goto LABEL_366;
            }
          }
          else
          {
            if (!v155) {
              goto LABEL_315;
            }
            if (v155 == 5)
            {
              int v367 = 8;
              int v157 = 1;
LABEL_315:
              int v158 = 2;
              BOOL v11 = v328;
LABEL_289:
              int v159 = v367;
              if (v135 != 1)
              {
                *v138++ = v367;
                unsigned int v135 = v158;
                goto LABEL_366;
              }
              unsigned int v160 = *(v138 - 2);
              if (v367 == v160)
              {
                unsigned int v135 = 0;
                --v138;
                goto LABEL_366;
              }
              if (v160 <= v367)
              {
                if (v157 && *(v138 - 1) == -2145452032)
                {
                  *(v138 - 1) = -2145517568;
                  int v159 = v367;
                }
                unsigned int v135 = 0;
                *v138++ = v159;
                goto LABEL_366;
              }
              int v320 = 108;
LABEL_775:
              HIDWORD(v364) = v320;
              --v368[0];
LABEL_761:
              *((void *)v4 + 21) = &v368[0][-*((void *)v4 + 7)];
              return HIDWORD(v364);
            }
          }
          if (v135 != 1)
          {
            switch(v155)
            {
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
                if ((v19 & 0x20000) == 0) {
                  goto LABEL_332;
                }
                if ((v155 - 7) > 4) {
                  int v173 = -2145910769;
                }
                else {
                  int v173 = dword_220722E28[v155 - 7];
                }
                *uint64_t v138 = v173;
                uint64_t v169 = v138 + 1;
                if (v155 > 0xB) {
                  goto LABEL_360;
                }
                int v178 = 1 << v155;
                if (((1 << v155) & 0xC0) != 0)
                {
                  uint64_t v169 = v138 + 2;
                  int v179 = 196621;
                }
                else
                {
                  if ((v178 & 0x300) == 0)
                  {
                    uint64_t v17 = v337;
                    uint64_t v19 = v153;
                    BOOL v11 = v328;
                    if ((v178 & 0xC00) != 0)
                    {
                      uint64_t v169 = v138 + 2;
                      v138[1] = 0x80000;
                    }
                    goto LABEL_362;
                  }
                  uint64_t v169 = v138 + 2;
                  int v179 = 393216;
                }
                v138[1] = v179;
LABEL_360:
                uint64_t v17 = v337;
                uint64_t v19 = v153;
LABEL_361:
                BOOL v11 = v328;
LABEL_362:
                if (v368[0] < v349 && *v368[0] == 45 && v368[0][1] != 93) {
                  goto LABEL_777;
                }
                unsigned int v135 = 0;
                int v136 = 0;
                uint64_t v138 = v169;
                break;
              case 12:
                unsigned int v135 = 0;
                int v163 = 171;
                goto LABEL_323;
              case 15:
              case 16:
                LODWORD(v357) = 0;
                int v358 = 0;
                if (!get_ucp((unint64_t *)v368, &v357, (_WORD *)&v358 + 1, &v358, (_DWORD *)&v364 + 1, (uint64_t)v4))goto LABEL_761; {
                if (v155 == 15)
                }
                  int v174 = 16;
                else {
                  int v174 = 15;
                }
                if (v357) {
                  int v175 = v174;
                }
                else {
                  int v175 = v155;
                }
                int v176 = v175 - 2145910784;
                int v177 = (unsigned __int16)v358 | (HIWORD(v358) << 16);
                uint64_t v169 = v138 + 2;
                *uint64_t v138 = v176;
                v138[1] = v177;
                goto LABEL_360;
              case 18:
              case 19:
              case 20:
              case 21:
LABEL_332:
                *uint64_t v138 = v155 - 2145910784;
                uint64_t v169 = v138 + 1;
                goto LABEL_361;
              default:
                unsigned int v135 = 0;
                HIDWORD(v364) = 107;
                --v368[0];
                goto LABEL_282;
            }
LABEL_366:
            uint64_t v180 = v368[0];
            if (v368[0] >= v8)
            {
              int v321 = 106;
              goto LABEL_760;
            }
            ++v368[0];
            unsigned int v181 = *v180;
            int v367 = v181;
            if (v355 && v181 >= 0xC0)
            {
              if ((v181 & 0x20) != 0)
              {
                int v182 = v180[1] & 0x3F;
                if ((v181 & 0x10) != 0)
                {
                  if ((v181 & 8) != 0)
                  {
                    int v184 = v180[2] & 0x3F;
                    int v185 = v180[3] & 0x3F;
                    int v186 = v180[4] & 0x3F;
                    if ((v181 & 4) != 0)
                    {
                      unsigned int v181 = ((v181 & 1) << 30) | (v182 << 24) | (v184 << 18) | (v185 << 12) | (v186 << 6) | v180[5] & 0x3F;
                      int v367 = v181;
                      uint64_t v183 = v180 + 6;
                    }
                    else
                    {
                      uint64_t v183 = v180 + 5;
                      unsigned int v181 = ((v181 & 3) << 24) | (v182 << 18) | (v184 << 12) | (v185 << 6) | v186;
                      int v367 = v181;
                    }
                  }
                  else
                  {
                    unsigned int v181 = ((v181 & 7) << 18) | (v182 << 12) | ((v180[2] & 0x3F) << 6) | v180[3] & 0x3F;
                    int v367 = v181;
                    uint64_t v183 = v180 + 4;
                  }
                }
                else
                {
                  unsigned int v181 = ((v181 & 0xF) << 12) | (v182 << 6) | v180[2] & 0x3F;
                  int v367 = v181;
                  uint64_t v183 = v180 + 3;
                }
                v368[0] = v183;
              }
              else
              {
                v368[0] = v180 + 2;
                int v367 = v180[1] & 0x3F | ((v181 & 0x1F) << 6);
                unsigned int v181 = v367;
              }
            }
            if (!v136 && v181 == 93)
            {
              if (v135 == 1) {
                *(v138 - 1) = 45;
              }
              uint64_t v18 = 0;
              uint64_t v15 = 0;
              int v14 = 0;
              *uint64_t v138 = -2146631680;
              uint64_t v6 = (unsigned int *)(v138 + 1);
              BOOL v12 = 1;
              uint64_t v13 = v332;
              goto LABEL_384;
            }
            goto LABEL_245;
          }
          int v163 = 150;
LABEL_323:
          HIDWORD(v364) = v163;
LABEL_282:
          if ((*(unsigned char *)(*(void *)v4 + 64) & 2) == 0) {
            goto LABEL_761;
          }
          v368[0] = v152;
          if (v152 >= v8)
          {
            int v155 = 0;
            int v367 = 92;
            goto LABEL_310;
          }
          int v155 = 0;
          v368[0] = v152 + 1;
          unsigned int v156 = *v152;
          int v367 = v156;
          uint64_t v19 = v153;
        }
        while (!v355 || v156 < 0xC0);
        if ((v156 & 0x20) != 0) {
          break;
        }
        int v155 = 0;
        v368[0] = v152 + 2;
        int v367 = v152[1] & 0x3F | ((v156 & 0x1F) << 6);
      }
      int v167 = v152[1] & 0x3F;
      if ((v156 & 0x10) == 0)
      {
        int v155 = 0;
        int v367 = ((v156 & 0xF) << 12) | (v167 << 6) | v152[2] & 0x3F;
        int v168 = v152 + 3;
        goto LABEL_340;
      }
      if ((v156 & 8) == 0) {
        break;
      }
      int v170 = v152[2] & 0x3F;
      int v171 = v152[3] & 0x3F;
      int v172 = v152[4] & 0x3F;
      int v155 = 0;
      if ((v156 & 4) != 0)
      {
        int v367 = ((v156 & 1) << 30) | (v167 << 24) | (v170 << 18) | (v171 << 12) | (v172 << 6) | v152[5] & 0x3F;
        int v168 = v152 + 6;
LABEL_340:
        v368[0] = v168;
      }
      else
      {
        int v367 = ((v156 & 3) << 24) | (v167 << 18) | (v170 << 12) | (v171 << 6) | v172;
        v368[0] = v152 + 5;
      }
    }
    int v155 = 0;
    int v367 = ((v156 & 7) << 18) | (v167 << 12) | ((v152[2] & 0x3F) << 6) | v152[3] & 0x3F;
    int v168 = v152 + 4;
    goto LABEL_340;
  }
  if (v367 != 92) {
    goto LABEL_183;
  }
  uint64_t v71 = v16;
  uint64_t v72 = v11;
  unsigned int v331 = v13;
  unsigned int v335 = v17;
  int v73 = v368[0];
  v360 = v368[0];
  unsigned int v341 = v19;
  unsigned int v74 = _pcre2_check_escape_8(v368, (unint64_t)v8, &v367, (int *)&v364 + 1, v19, 0, v4);
  if (HIDWORD(v364)) {
    goto LABEL_123;
  }
  unsigned int v134 = v74;
  uint64_t v17 = v335;
  uint64_t v19 = v341;
  BOOL v11 = v72;
  uint64_t v16 = v71;
  while (2)
  {
    if (!v134)
    {
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      int v14 = 0;
      int v284 = v367;
      goto LABEL_656;
    }
    if ((v134 & 0x80000000) != 0)
    {
      v285 = &v368[0][~*((void *)v4 + 7)];
      *uint64_t v6 = -v134 | 0x80030000;
      uint64_t v13 = v331;
      if (v134 >= 0xFFFFFFF7)
      {
        v286 = &v4[-2 * v134];
        uint64_t v288 = *((void *)v286 + 11);
        v287 = (unsigned __int8 **)(v286 + 22);
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        if (v288 == -1) {
          *v287 = v285;
        }
        BOOL v12 = 1;
        ++v6;
        goto LABEL_30;
      }
      uint64_t v18 = 0;
      uint64_t v15 = 0;
      int v14 = 0;
      *(void *)(v6 + 1) = __ROR8__(v285, 32);
LABEL_664:
      v6 += 3;
      goto LABEL_29;
    }
    switch(v134)
    {
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        if ((v19 & 0x20000) == 0) {
          goto LABEL_654;
        }
        uint64_t v13 = v331;
        if (v134 - 7 > 4) {
          int v291 = -2145910769;
        }
        else {
          int v291 = dword_220722E28[v134 - 7];
        }
        uint64_t v18 = 0;
        *uint64_t v6 = v291;
        BOOL v12 = 1;
        if (v134 > 0xB) {
          goto LABEL_720;
        }
        int v302 = 1 << v134;
        if (((1 << v134) & 0xC0) != 0)
        {
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          int v303 = 196621;
        }
        else if ((v302 & 0x300) != 0)
        {
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          int v303 = 393216;
        }
        else
        {
          if ((v302 & 0xC00) == 0)
          {
LABEL_720:
            ++v6;
            uint64_t v15 = 0;
            int v14 = 0;
            goto LABEL_30;
          }
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          int v303 = 0x80000;
        }
        v6[1] = v303;
        v6 += 2;
        goto LABEL_30;
      case 0xCu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
LABEL_654:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        int v284 = v134 - 2145910784;
        goto LABEL_656;
      case 0xEu:
        if ((v19 & 0x100000) == 0)
        {
          uint64_t v18 = 0;
          uint64_t v15 = 0;
          int v14 = 0;
          int v284 = -2145910770;
LABEL_656:
          *v6++ = v284;
          BOOL v12 = 1;
LABEL_657:
          uint64_t v13 = v331;
          goto LABEL_30;
        }
        uint64_t v71 = v16;
        int v304 = 183;
        goto LABEL_719;
      case 0xFu:
      case 0x10u:
        uint64_t v71 = v16;
        uint64_t v72 = v11;
        LODWORD(v357) = 0;
        int v358 = 0;
        if (!get_ucp((unint64_t *)v368, &v357, (_WORD *)&v358 + 1, &v358, (_DWORD *)&v364 + 1, (uint64_t)v4))goto LABEL_123; {
        uint64_t v18 = 0;
        }
        uint64_t v15 = 0;
        int v14 = 0;
        if (v134 == 15) {
          int v292 = 16;
        }
        else {
          int v292 = 15;
        }
        if (v357) {
          unsigned int v293 = v292;
        }
        else {
          unsigned int v293 = v134;
        }
        int v294 = (unsigned __int16)v358 | (HIWORD(v358) << 16);
        *uint64_t v6 = v293 - 2145910784;
        v6[1] = v294;
        v6 += 2;
        goto LABEL_679;
      case 0x1Bu:
      case 0x1Cu:
        uint64_t v71 = v16;
        if (v368[0] >= v8 || (int v295 = *v368[0], v295 != 39) && v295 != 60 && v295 != 123)
        {
          if (v134 == 27) {
            int v304 = 157;
          }
          else {
            int v304 = 169;
          }
LABEL_719:
          HIDWORD(v364) = v304;
LABEL_643:
          uint64_t v17 = v335;
          if ((*(unsigned char *)(*(void *)v4 + 64) & 2) == 0) {
            goto LABEL_761;
          }
          uint64_t v16 = v71;
          v368[0] = v73;
          if (v73 >= v8)
          {
            unsigned int v134 = 0;
            int v367 = 92;
            uint64_t v19 = v341;
          }
          else
          {
            unsigned int v134 = 0;
            v368[0] = v73 + 1;
            unsigned int v283 = *v73;
            int v367 = v283;
            uint64_t v19 = v341;
            if (v355 && v283 >= 0xC0)
            {
              if ((v283 & 0x20) != 0)
              {
                int v289 = v73[1] & 0x3F;
                if ((v283 & 0x10) == 0)
                {
                  unsigned int v134 = 0;
                  int v367 = ((v283 & 0xF) << 12) | (v289 << 6) | v73[2] & 0x3F;
                  v290 = v73 + 3;
                  goto LABEL_717;
                }
                if ((v283 & 8) == 0)
                {
                  unsigned int v134 = 0;
                  int v367 = ((v283 & 7) << 18) | (v289 << 12) | ((v73[2] & 0x3F) << 6) | v73[3] & 0x3F;
                  v290 = v73 + 4;
                  goto LABEL_717;
                }
                int v299 = v73[2] & 0x3F;
                int v300 = v73[3] & 0x3F;
                int v301 = v73[4] & 0x3F;
                unsigned int v134 = 0;
                if ((v283 & 4) != 0)
                {
                  int v367 = ((v283 & 1) << 30) | (v289 << 24) | (v299 << 18) | (v300 << 12) | (v301 << 6) | v73[5] & 0x3F;
                  v290 = v73 + 6;
LABEL_717:
                  v368[0] = v290;
                }
                else
                {
                  int v367 = ((v283 & 3) << 24) | (v289 << 18) | (v299 << 12) | (v300 << 6) | v301;
                  v368[0] = v73 + 5;
                }
              }
              else
              {
                unsigned int v134 = 0;
                v368[0] = v73 + 2;
                int v367 = v73[1] & 0x3F | ((v283 & 0x1F) << 6);
              }
            }
          }
          continue;
        }
        uint64_t v72 = v11;
        if (v295 == 39) {
          int v296 = 39;
        }
        else {
          int v296 = 125;
        }
        if (v295 == 60) {
          int v297 = 62;
        }
        else {
          int v297 = v296;
        }
        BOOL v298 = v295 == 39 || v295 == 60;
        if (v134 == 27 && v298)
        {
          v357 = v368[0] + 1;
          if (read_number(&v357, (unint64_t)v8, v4[53], 0xFFFFu, 161, (int *)&v364, (int *)&v364 + 1))
          {
            int v99 = v357;
            if (v357 < v8 && v297 == *v357)
            {
              int v98 = v364;
              uint64_t v17 = v335;
              uint64_t v19 = v341;
              uint64_t v13 = v331;
              BOOL v11 = v72;
              uint64_t v16 = v71;
              goto LABEL_163;
            }
            HIDWORD(v364) = 157;
LABEL_123:
            BOOL v11 = v72;
            goto LABEL_643;
          }
          if (HIDWORD(v364)) {
            goto LABEL_123;
          }
        }
        if (!read_name(v368, v8, v297, &v359, &v363, &v366, (int *)&v364 + 1, (uint64_t)v4)) {
          goto LABEL_123;
        }
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        if (v297 == 125 || v134 == 28) {
          int v306 = -2147221504;
        }
        else {
          int v306 = -2145320960;
        }
        *uint64_t v6 = v306;
        v6[1] = v366;
        *((void *)v6 + 1) = __ROR8__(v359, 32);
        v6 += 4;
LABEL_679:
        BOOL v12 = 1;
        uint64_t v17 = v335;
        uint64_t v19 = v341;
        uint64_t v13 = v331;
        BOOL v11 = v72;
        uint64_t v16 = v71;
LABEL_30:
        uint64_t v5 = v368[0];
        if (v368[0] < v8) {
          goto LABEL_8;
        }
        int v7 = v354;
        if (v13) {
          goto LABEL_765;
        }
LABEL_751:
        __int16 v314 = v17;
        v315 = manage_callouts((int)v5, &v365, v7, v6, (uint64_t)v4);
        int v316 = *(_DWORD *)(*(void *)v4 + 64);
        if ((v316 & 8) != 0)
        {
          int v317 = -2146041856;
LABEL_755:
          _DWORD *v315 = -2145845248;
          v315[1] = v317;
          v315 += 2;
        }
        else if ((v316 & 4) != 0)
        {
          int v317 = -2145910779;
          goto LABEL_755;
        }
        if ((unint64_t)v315 >= v356)
        {
LABEL_759:
          int v321 = 163;
          goto LABEL_760;
        }
        _DWORD *v315 = 0x80000000;
        if (v314) {
          goto LABEL_758;
        }
        return 0;
      default:
        uint64_t v18 = 0;
        uint64_t v15 = 0;
        int v14 = 0;
        BOOL v12 = 0;
        *v6++ = v134 - 2145910784;
        goto LABEL_657;
    }
  }
}

uint64_t check_lookbehinds(uint64_t a1)
{
  uint64_t result = 0;
  *(void *)(a1 + 168) = -1;
  uint64_t v3 = *(unsigned int **)(a1 + 224);
  uint64_t v7 = 0;
  int v8 = v3;
  unsigned int v4 = *v3;
  if (*v3 != 0x80000000)
  {
    while (1)
    {
      if ((v4 & 0x80000000) != 0)
      {
        switch(((v4 & 0xFFFF0000) + 2147418112) >> 16)
        {
          case 0u:
          case 1u:
          case 2u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0x15u:
          case 0x16u:
          case 0x18u:
          case 0x19u:
          case 0x1Du:
          case 0x1Eu:
          case 0x21u:
          case 0x22u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x2Au:
          case 0x2Cu:
          case 0x2Eu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
            break;
          case 3u:
          case 5u:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x20u:
            v3 += 3;
            break;
          case 4u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
            ++v3;
            break;
          case 6u:
            v3 += 5;
            break;
          case 0x17u:
            unsigned int v5 = v4 + 2145910769 < 2;
            goto LABEL_6;
          case 0x1Fu:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
            v3 += 2;
            break;
          case 0x23u:
          case 0x24u:
            if (!set_lookbehind_lengths(&v8, (int *)&v7 + 1, &v7, 0, a1)) {
              return HIDWORD(v7);
            }
            uint64_t v3 = v8;
            break;
          case 0x25u:
          case 0x29u:
          case 0x2Bu:
          case 0x2Du:
          case 0x2Fu:
            unsigned int v5 = v3[1] + 1;
LABEL_6:
            v3 += v5;
            break;
          default:
            return 170;
        }
      }
      unsigned int v6 = v3[1];
      ++v3;
      unsigned int v4 = v6;
      int v8 = v3;
      if (v6 == 0x80000000) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t compile_regex(unsigned int a1, char **a2, unsigned int **a3, int *a4, unsigned int a5, unsigned int *a6, int *a7, unsigned int *a8, int *a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v419 = *MEMORY[0x263EF8340];
  v369 = *a2;
  uint64_t v15 = *a3;
  uint64_t v16 = *(unsigned int (**)(void, void))(*(void *)a11 + 24);
  if (v16 && v16(*(unsigned __int16 *)(a11 + 180), *(void *)(*(void *)a11 + 32)))
  {
    uint64_t v17 = 0;
    int v18 = 133;
LABEL_4:
    *a4 = v18;
    return v17;
  }
  uint64_t v19 = a12;
  uint64_t v405 = 0;
  uint64_t v406 = 0;
  uint64_t v403 = a10;
  v404 = v369;
  unint64_t v20 = a5 + 6;
  int v21 = *v369;
  if (v21 > -127)
  {
    unsigned int v22 = 0;
    if (v21 == -123)
    {
      int v351 = __rev16(*(unsigned __int16 *)(v369 + 3));
      LODWORD(v406) = (unsigned __int16)v351;
      uint64_t v405 = *(void *)(a11 + 184);
      WORD2(v406) = *(_WORD *)(a11 + 182);
      *(void *)(a11 + 184) = &v405;
    }
    else
    {
      int v351 = 0;
    }
  }
  else
  {
    int v351 = 0;
    unsigned int v22 = *((unsigned __int16 *)v15 - 2);
    v15 += 2;
  }
  unsigned int v354 = 0;
  unsigned int v355 = 0;
  *(_WORD *)(v369 + 1) = 0;
  uint64_t v23 = &v369[a5 + 3];
  uint64_t v370 = a11 + 184;
  int v24 = &v412;
  if (!a12) {
    int v24 = 0;
  }
  v372 = v24;
  int v358 = -2;
  LODWORD(v17) = 1;
  v359 = v369;
  int v356 = -2;
  uint64_t v357 = a5;
  v352 = a7;
  unsigned int v353 = a8;
  int v360 = v21;
  while (2)
  {
    unsigned int v361 = v17;
    if (v21 <= -127 && v22)
    {
      *uint64_t v23 = 125;
      v23[1] = BYTE1(v22);
      v23[2] = v22;
      v23 += 3;
      v20 += 3;
    }
    unsigned int v25 = 0;
    unsigned int v26 = 0;
    unint64_t v376 = 0;
    unint64_t v371 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    int v373 = 0;
    uint64_t v412 = 0;
    v413 = v15;
    v410 = 0;
    v411 = 0;
    uint64_t v29 = *(void *)(a11 + 24);
    int v362 = (a1 >> 18) & 1;
    BOOL v366 = (a1 & 0x40000) == 0;
    int v367 = (a1 >> 3) & 1;
    BOOL v368 = 0;
    uint64_t v379 = v29 + 160;
    uint64_t v380 = v29;
    uint64_t v378 = v29 + 64;
    int v30 = -1;
    int v387 = -2;
    unsigned int v386 = a1;
    int v31 = -2;
    int v374 = -2;
    int __src = -2;
    int v32 = v23;
    v381 = v23;
    v388 = v23;
LABEL_17:
    uint64_t v408 = 0;
    uint64_t v409 = 0;
    LODWORD(v33) = *v15;
    unsigned int v34 = *v15 & 0xFFFF0000;
    if (v19)
    {
      unint64_t v35 = *(void *)(a11 + 40) + *(void *)(a11 + 80);
      if ((unint64_t)v32 > v35 - 100)
      {
        if ((unint64_t)v32 >= v35) {
          int v331 = 152;
        }
        else {
          int v331 = 186;
        }
        goto LABEL_778;
      }
      if (v32 < v388) {
        int v32 = v388;
      }
      unsigned int v36 = v34 + 2143551487;
      if (v34 + 2143551487 > 0xFFF4FFFE)
      {
        v388 = v32;
      }
      else
      {
        if (2147483627 - v20 < v32 - v381) {
          goto LABEL_774;
        }
        v20 += v32 - v381;
        int v32 = v381;
        v388 = v381;
        if (v20 > 0x10000) {
          goto LABEL_774;
        }
      }
    }
    else
    {
      unsigned int v36 = v34 + 2143551487;
    }
    unsigned int v389 = *v15 & 0xFFFF0000;
    unsigned int v399 = v25;
    unsigned int v400 = v26;
    int v397 = v31;
    unint64_t v401 = v20;
    if (v28) {
      int v37 = 1;
    }
    else {
      int v37 = v30;
    }
    if (v36 < 0xFFF4FFFF) {
      uint64_t v27 = v32;
    }
    v396 = v27;
    if (v36 < 0xFFF4FFFF) {
      int v30 = v37;
    }
    int v395 = v30;
    uint64_t v38 = 0;
    int v39 = 0;
    int v40 = 0;
    unsigned int v41 = 0;
    uint64_t v42 = (unsigned __int16)*v15;
    unsigned int v43 = 0x10000;
    unsigned int v44 = 135;
    int v45 = 1;
    char v46 = 1;
    switch(WORD1(v33) ^ 0x8000)
    {
      case 0:
      case 1:
      case 0x19:
        if (v395 < 0) {
          uint64_t v17 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v361;
        }
        uint64_t v19 = a12;
        unint64_t v20 = v401;
        if (a12)
        {
          unsigned int v22 = *v15;
          v318 = v369;
          int v21 = v360;
          if ((*v15 & 0xFFFF0000) == 0x80010000)
          {
            uint64_t v23 = &(*a2)[v357 + 3];
            unint64_t v20 = v401 + 3;
LABEL_773:
            unsigned int v22 = (unsigned __int16)v22;
            ++v15;
            a1 = v386;
            continue;
          }
        }
        else
        {
          v319 = v359;
          v318 = v369;
          int v21 = v360;
          if (*v359 == 120)
          {
            int v320 = v358;
            if (v358 == v387 && (int v320 = v358, v354 == v25))
            {
              int v321 = v356;
            }
            else
            {
              int v323 = v320;
              int v321 = v356;
              BOOL v324 = v320 < 0 || v356 >= 0;
              unsigned int v325 = v355;
              if (!v324) {
                unsigned int v325 = v354;
              }
              unsigned int v355 = v325;
              if (!v324) {
                int v321 = v323;
              }
              int v320 = -1;
            }
            int v358 = v320;
            BOOL v327 = v320 < 0 && v387 >= 0;
            BOOL v328 = v327 && v397 < 0;
            if (v328) {
              int v329 = v387;
            }
            else {
              int v329 = v397;
            }
            if (((v329 ^ v321) & 0xFFFFFFFD) != 0)
            {
              int v322 = -1;
            }
            else
            {
              BOOL v61 = !v328;
              unsigned int v330 = v26;
              if (!v61) {
                unsigned int v330 = v25;
              }
              int v322 = v329 | v321;
              if (v355 != v330) {
                int v322 = -1;
              }
            }
          }
          else
          {
            unsigned int v354 = v25;
            unsigned int v355 = v26;
            int v358 = v387;
            int v322 = v397;
          }
          int v356 = v322;
          if (*((unsigned __int16 *)v15 + 1) << 16 == -2147418112)
          {
            *int v32 = 120;
            v32[1] = (unsigned __int16)((_WORD)v32 - (_WORD)v359) >> 8;
            v32[2] = (_BYTE)v32 - (_BYTE)v359;
            v404 = v32;
            uint64_t v23 = v32 + 3;
            LOWORD(v22) = *(_WORD *)v15;
            v359 = v32;
            goto LABEL_773;
          }
          unsigned int v333 = v32 - v359;
          do
          {
            uint64_t v334 = __rev16(*(unsigned __int16 *)(v319 + 1));
            *(_WORD *)(v319 + 1) = bswap32(v333) >> 16;
            v319 -= v334;
            unsigned int v333 = v334;
          }
          while (v334);
        }
        *int v32 = 121;
        v32[1] = (unsigned __int16)((_WORD)v32 - (_WORD)v318) >> 8;
        v32[2] = (_BYTE)v32 - (_BYTE)v318;
        unsigned int v335 = v32 + 3;
        if (v351 >= 1)
        {
          BOOL v336 = *(void **)v370;
          if (*(_WORD *)(*(void *)v370 + 10))
          {
            cstdlib_memmove(v318 + 3, v318, v335 - v318);
            unsigned char *v318 = -126;
            __int16 v337 = (_WORD)v32 + 6 - (_WORD)v318;
            v318[1] = HIBYTE(v337);
            v318[2] = v337;
            v32[6] = 121;
            v32[7] = HIBYTE(v337);
            v32[8] = v337;
            unsigned int v335 = v32 + 9;
            unint64_t v20 = v401 + 6;
            BOOL v336 = *(void **)v370;
          }
          *(void *)uint64_t v370 = *v336;
        }
        *a2 = v335;
        *a3 = v15;
        *a6 = v354;
        int *v352 = v358;
        *unsigned int v353 = v355;
        *a9 = v356;
        if (!a12) {
          return v17;
        }
        if (2147483627 - *a12 >= v20)
        {
          *a12 += v20;
          return v17;
        }
        uint64_t v17 = 0;
        int v18 = 120;
        goto LABEL_4;
      case 2:
        uint64_t v38 = 0;
        int v40 = 0;
        char v46 = 0;
        unsigned int v44 = 130;
        goto LABEL_186;
      case 3:
        if (v42 > 9)
        {
          unsigned int v209 = v15[2];
          uint64_t v208 = v15 + 2;
          unint64_t v108 = v209 | ((unint64_t)*(v208 - 1) << 32);
          v413 = v208;
          uint64_t v81 = a11;
        }
        else
        {
          uint64_t v81 = a11;
          unint64_t v108 = *(void *)(a11 + 8 * v42 + 88);
        }
        if (v42 > *(_DWORD *)(v81 + 212)) {
          goto LABEL_785;
        }
        unint64_t v371 = v108;
        uint64_t v19 = a12;
        goto LABEL_405;
      case 4:
      case 0x21:
        unsigned int v77 = v15[3];
        int v76 = v15 + 3;
        uint64_t v78 = *(void *)(a11 + 192);
        uint64_t v79 = *(v76 - 2);
        unint64_t v80 = v77 | ((unint64_t)*(v76 - 1) << 32);
        v413 = v76;
        uint64_t v81 = a11;
        uint64_t v19 = a12;
        if (!*(_WORD *)(a11 + 176)) {
          goto LABEL_783;
        }
        int v82 = 0;
        LODWORD(v42) = 0;
        unsigned int v83 = 0;
        unint64_t v371 = v80;
        int v84 = (unsigned __int8 *)(*(void *)(a11 + 56) + v80);
        do
        {
          if (v79 == *(unsigned __int16 *)(v78 + 12)
            && !_pcre2_strncmp_8(v84, *(unsigned __int8 **)v78, v79))
          {
            LODWORD(v42) = *(_DWORD *)(v78 + 8);
            if (v389 == -2145320960) {
              goto LABEL_190;
            }
            int v82 = *(unsigned __int16 *)(v78 + 14);
            int v85 = 1 << v42;
            if (v42 >= 0x20) {
              int v85 = 1;
            }
            unsigned int v86 = *(_DWORD *)(a11 + 248);
            *(_DWORD *)(a11 + 252) |= v85;
            if (v42 > v86) {
              *(_DWORD *)(a11 + 248) = v42;
            }
            uint64_t v87 = a11 + 184;
            while (1)
            {
              uint64_t v87 = *(void *)v87;
              if (!v87) {
                break;
              }
              if (v42 == *(unsigned __int16 *)(v87 + 8))
              {
                *(_WORD *)(v87 + 10) = 1;
                break;
              }
            }
          }
          ++v83;
          v78 += 16;
        }
        while (v83 < *(unsigned __int16 *)(a11 + 176));
        unint64_t v80 = v371;
        if (!v42)
        {
LABEL_783:
          *a4 = 115;
          *(void *)(a11 + 168) = v80;
          return 0;
        }
        if (!v82)
        {
LABEL_405:
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          int v210 = v387;
          BOOL v211 = v387 == -2;
          if (v387 == -2) {
            int v210 = -1;
          }
          int v387 = v210;
          int v212 = __src;
          if (v211) {
            int v212 = -1;
          }
          int __src = v212;
          if ((v386 & 8) != 0) {
            char v213 = 114;
          }
          else {
            char v213 = 113;
          }
          *int v32 = v213;
          v32[1] = BYTE1(v42);
          v32[2] = v42;
          int v214 = 1 << v42;
          if (v42 >= 0x20) {
            int v214 = 1;
          }
          unsigned int v215 = *(_DWORD *)(v81 + 248);
          *(_DWORD *)(v81 + 252) |= v214;
          BOOL v236 = v42 > v215;
          int v30 = v395;
          int v92 = v397;
          if (v236) {
            *(_DWORD *)(v81 + 248) = v42;
          }
          v32 += 3;
          uint64_t v216 = a11 + 184;
          while (1)
          {
            uint64_t v216 = *(void *)v216;
            if (!v216) {
              break;
            }
            if (v42 == *(unsigned __int16 *)(v216 + 8))
            {
              int v28 = 0;
              *(_WORD *)(v216 + 10) = 1;
              goto LABEL_423;
            }
          }
          int v28 = 0;
LABEL_423:
          unsigned int v90 = v399;
          unsigned int v91 = v400;
          goto LABEL_734;
        }
        v414[0] = 0;
        unsigned int v407 = 0;
        unint64_t v20 = v401;
        uint64_t v27 = v396;
        if (!a12 && !find_dupname_details(v84, v79, &v407, v414, a4, a11)) {
          return 0;
        }
        int v28 = 0;
        int v88 = v387;
        if (v387 == -2) {
          int v88 = -1;
        }
        int v387 = v88;
        if ((v386 & 8) != 0) {
          char v89 = 116;
        }
        else {
          char v89 = 115;
        }
        *int v32 = v89;
        v32[1] = BYTE1(v407);
        v32[2] = v407;
        v32[3] = BYTE1(v414[0]);
        v32[4] = v414[0];
        v32 += 5;
        unsigned int v90 = v399;
        unsigned int v91 = v400;
        int v92 = v397;
        goto LABEL_525;
      case 5:
        LODWORD(v33) = v15[1];
        v413 = v15 + 1;
        goto LABEL_136;
      case 6:
        int v28 = 0;
        *int v32 = 118;
        v32[1] = BYTE1(v413[1]);
        v32[2] = v413[1];
        v32[3] = BYTE1(v413[2]);
        v32[4] = v413[2];
        v32[5] = v413[3];
        v413 += 3;
        v32 += 6;
        goto LABEL_115;
      case 7:
        unsigned int v110 = v15[3];
        uint64_t v19 = a12;
        if (!a12)
        {
          *int v32 = 119;
          v32[1] = BYTE1(v413[1]);
          v32[2] = v413[1];
          v32[3] = BYTE1(v413[2]);
          v32[4] = v413[2];
          uint64_t v221 = v413[5];
          unint64_t v222 = v221 | ((unint64_t)v413[4] << 32);
          v413 += 5;
          unint64_t v371 = v222;
          __int16 v223 = (unsigned __int8 *)(*(void *)(a11 + 56) + v222);
          int v224 = *v223;
          char v225 = v32 + 10;
          v32[9] = v224;
          if (v224 == 123) {
            int v224 = 125;
          }
          __int16 v226 = v221 + 1;
          v32[7] = HIBYTE(v226);
          v32[8] = v226;
          unsigned int v227 = v110 - 1;
          unint64_t v20 = v401;
          if (v110 - 1 < 2)
          {
            int v30 = v395;
            uint64_t v27 = v396;
          }
          else
          {
            int v228 = v223 + 1;
            int v30 = v395;
            uint64_t v27 = v396;
            do
            {
              int v229 = *v228;
              if (v229 == v224 && v228[1] == v224)
              {
                *char v225 = v224;
                v228 += 2;
                unsigned int v227 = v110 - 2;
              }
              else
              {
                ++v228;
                *char v225 = v229;
              }
              unsigned int v110 = v227;
              ++v225;
              --v227;
            }
            while (v227 > 1);
          }
          int v28 = 0;
          *char v225 = 0;
          int v260 = v225 + 1;
          v32[5] = (unsigned __int16)((_WORD)v260 - (_WORD)v32) >> 8;
          v32[6] = (_BYTE)v260 - (_BYTE)v32;
          unsigned int v90 = v25;
          unsigned int v91 = v400;
          int v92 = v397;
          int v32 = v260;
          goto LABEL_734;
        }
        int v28 = 0;
        unint64_t v20 = v401 + v110 + 9;
        v413 = v15 + 5;
LABEL_221:
        unsigned int v90 = v399;
        unsigned int v91 = v400;
        int v92 = v397;
        goto LABEL_222;
      case 8:
        int v40 = 0;
        char v46 = 0;
        *(_WORD *)(v32 + 3) = bswap32(v33) >> 16;
        *(_DWORD *)(a11 + 216) = v42;
        unsigned int v44 = 133;
        uint64_t v38 = 2;
        goto LABEL_186;
      case 9:
        if ((v386 & 0x400) != 0)
        {
          int v28 = 0;
          int v217 = v387;
          BOOL v218 = v387 == -2;
          if (v387 == -2) {
            int v217 = -1;
          }
          int v387 = v217;
          int v96 = __src;
          if (v218) {
            int v96 = -1;
          }
          int __src = v96;
          LOBYTE(v96) = 28;
        }
        else
        {
          int v28 = 0;
          LOBYTE(v96) = 27;
        }
        goto LABEL_114;
      case 0xA:
      case 0xE:
        uint64_t v93 = v15 + 1;
        unint64_t v33 = v15[1];
        if ((v33 & 0x80000000) == 0 && v15[2] == -2146631680)
        {
          v413 = v15 + 2;
          if (v34 == -2146828288)
          {
LABEL_136:
            unsigned int v109 = a1;
LABEL_144:
            if ((v109 & 0x80000) != 0 && (v386 & 8) != 0)
            {
              int v111 = HIBYTE(_pcre2_ucd_records_8[2
                                               * _pcre2_ucd_stage2_8[(int)(v33
                                                                         - (v109 & 0xFFFFFF80)
                                                                         + (_pcre2_ucd_stage1_8[(int)v33 / 128] << 7))]]);
              unint64_t v20 = v401;
              uint64_t v27 = v396;
              int v67 = v31;
              if (v111)
              {
                *(_WORD *)int v32 = 2320;
                v32[2] = v111;
                v32 += 3;
                int v112 = v387;
                BOOL v113 = v387 == -2;
                if (v387 == -2) {
                  int v112 = -1;
                }
                int v387 = v112;
                int v114 = __src;
                if (v113) {
                  int v114 = -1;
                }
                int __src = v114;
                int v28 = 1;
                unsigned int v90 = v25;
                unsigned int v91 = v26;
                int v92 = v31;
LABEL_443:
                uint64_t v19 = a12;
                goto LABEL_525;
              }
LABEL_154:
              unsigned int v115 = _pcre2_ord2utf_8(v33, (uint64_t)__dst);
            }
            else
            {
              unint64_t v20 = v401;
              uint64_t v27 = v396;
              int v67 = v31;
              if ((v109 & 0x80000) != 0) {
                goto LABEL_154;
              }
              __dst[0] = v33;
              unsigned int v115 = 1;
            }
            uint64_t v19 = a12;
            int v30 = v395;
            if ((v386 & 8) != 0) {
              char v201 = 30;
            }
            else {
              char v201 = 29;
            }
            *int v32 = v201;
            uint64_t v202 = v32 + 1;
            cstdlib_memcpy(v202, __dst, v115);
            unsigned int v90 = __dst[0];
            if (__dst[0] == 13 || __dst[0] == 10) {
              *(_DWORD *)(a11 + 208) |= 0x800u;
            }
            int v32 = &v202[v115];
            BOOL v204 = v115 == 1 || v367 == 0;
            if (v387 != -2)
            {
              if (v204)
              {
                int v92 = *(_DWORD *)(a11 + 280) | v367;
                int v28 = 1;
                unsigned int v90 = v399;
                unsigned int v91 = *(v32 - 1);
                unint64_t v376 = __PAIR64__(v399, v400);
                goto LABEL_389;
              }
              int v367 = 1;
              unsigned int v90 = v399;
              unsigned int v91 = v400;
              unint64_t v376 = __PAIR64__(v399, v400);
              int v92 = v67;
              int v374 = v67;
              int v207 = v387;
              goto LABEL_550;
            }
            if (!v204)
            {
              int v367 = 1;
              int v387 = -1;
              unsigned int v90 = v399;
              unsigned int v91 = v400;
              int v374 = v67;
              LODWORD(v376) = v400;
              int v92 = -1;
              int v207 = -1;
LABEL_550:
              int __src = v207;
              int v28 = 1;
              goto LABEL_734;
            }
            if (v115 != 1)
            {
              unsigned int v91 = *(v32 - 1);
              int v28 = 1;
              int v92 = *(_DWORD *)(a11 + 280);
              int __src = -1;
              int v374 = v67;
              LODWORD(v376) = v400;
              int v387 = v367;
              goto LABEL_734;
            }
            int v28 = 1;
            int __src = -1;
            unsigned int v91 = v400;
            int v374 = v67;
            LODWORD(v376) = v400;
            int v387 = v367;
LABEL_733:
            int v92 = v67;
            goto LABEL_734;
          }
          int v243 = v387;
          if (v387 == -2) {
            int v243 = -1;
          }
          uint64_t v27 = v396;
          int v387 = v243;
          if ((a1 & 0x80000) == 0
            || (v386 & 8) == 0
            || (char v244 = HIBYTE(_pcre2_ucd_records_8[2
                                                 * _pcre2_ucd_stage2_8[v33 & 0x7F | (*(unsigned __int16 *)((char *)_pcre2_ucd_stage1_8 + ((v33 >> 6) & 0x3FFFFFE)) << 7)]])) == 0)
          {
            if ((v386 & 8) != 0) {
              char v255 = 32;
            }
            else {
              char v255 = 31;
            }
            *int v32 = v255;
            uint64_t v256 = v32 + 1;
            unint64_t v20 = v401;
            if ((a1 & 0x80000) != 0 && v33 >= 0x80)
            {
              unsigned int v257 = _pcre2_ord2utf_8(v33, (uint64_t)v256);
            }
            else
            {
              *uint64_t v256 = v33;
              unsigned int v257 = 1;
            }
            uint64_t v19 = a12;
            int v30 = v395;
            int v28 = 1;
            unsigned int v90 = v399;
            unsigned int v91 = v400;
            unint64_t v376 = __PAIR64__(v399, v400);
            int v92 = v397;
            int v374 = v397;
            int __src = v387;
            int v32 = &v256[v257];
            goto LABEL_734;
          }
          *(_WORD *)int v32 = 2319;
          v32[2] = v244;
          v32 += 3;
          int v28 = 1;
          unsigned int v90 = v25;
          unsigned int v91 = v26;
          unint64_t v376 = __PAIR64__(v25, v26);
          int v92 = v31;
          int v374 = v31;
          int __src = v243;
          uint64_t v19 = a12;
          unint64_t v20 = v401;
LABEL_525:
          int v30 = v395;
          goto LABEL_734;
        }
        int v375 = v34 == -2146566144;
        unint64_t __srca = (unint64_t)(v32 + 4);
        v410 = v32 + 4;
        cstdlib_memset(&__b, 0, 0x20uLL);
        unsigned int v97 = *v93;
        if (*v93 == -2146631680)
        {
          int v98 = 0;
          v413 = v15 + 1;
          int v99 = v387;
          if (v387 == -2) {
            int v99 = -1;
          }
          int v387 = v99;
          uint64_t v19 = a12;
LABEL_360:
          int v30 = v395;
          int v67 = v397;
          unsigned int v198 = v389;
LABEL_361:
          if (v98 == v375) {
            char v199 = 110;
          }
          else {
            char v199 = 111;
          }
          *int v32 = v199;
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          if (!v19)
          {
            if (v198 == -2146566144)
            {
              int8x16_t __b = vmvnq_s8(__b);
              int8x16_t v418 = vmvnq_s8(v418);
            }
            cstdlib_memcpy(v32 + 1, &__b, 0x20uLL);
          }
          v32 += 33;
          goto LABEL_369;
        }
        uint64_t v143 = 0;
        uint64_t v377 = 0;
        int v98 = 0;
        int v144 = 0;
        unsigned int v343 = v386 & 0xFFFFFFF7;
        uint64_t v19 = a12;
        uint64_t v145 = v379;
        uint64_t v146 = v380;
        uint64_t v147 = v378;
        while (1)
        {
          unint64_t v148 = v15;
          uint64_t v149 = v143;
          if (v97 == -2147155968)
          {
            unsigned int v97 = v15[2];
            v15 += 2;
LABEL_247:
            if (v97 == 13 || v97 == 10) {
              *(_DWORD *)(a11 + 208) |= 0x800u;
            }
            uint64_t v159 = v15[1] | 0x10000;
            if (v159 == -2145452032)
            {
              uint64_t v161 = (uint64_t)(v15 + 2);
              unsigned int v160 = v15[2];
              if (v160 == -2147155968)
              {
                unsigned int v162 = v15[3];
                v15 += 3;
                unsigned int v160 = v162;
              }
              else
              {
                v15 += 2;
              }
              if (v160 == 13 || v160 == 10)
              {
                uint64_t v161 = *(_DWORD *)(a11 + 208) | 0x800u;
                *(_DWORD *)(a11 + 208) = v161;
              }
              *(_DWORD *)(a11 + 264) = v97;
              *(_DWORD *)(a11 + 268) = v160;
              uint64_t v143 = add_to_class_internal((uint64_t)&__b, &v410, v386, a11, v97, v160, v161)
                   + v143;
              uint64_t v145 = v379;
              uint64_t v146 = v380;
            }
            else
            {
              *(_DWORD *)(a11 + 264) = v97;
              *(_DWORD *)(a11 + 268) = v97;
              int v163 = add_to_class_internal((uint64_t)&__b, &v410, v386, a11, v97, v97, v159);
              uint64_t v145 = v379;
              uint64_t v146 = v380;
              uint64_t v143 = (v163 + v143);
            }
            uint64_t v147 = v378;
            goto LABEL_296;
          }
          if (v97 != -2145583104 && v97 != -2145648640)
          {
            uint64_t v15 = v93;
            if ((v97 & 0x80000000) != 0)
            {
              if ((v97 & 0xFFFF0000) != 0x80180000)
              {
LABEL_784:
                int v331 = 189;
                goto LABEL_778;
              }
              uint64_t v143 = (v143 + 1);
              switch((__int16)v97)
              {
                case 6:
                  for (uint64_t i = 0; i != 32; ++i)
                  {
                    __b.i8[i] |= ~*(unsigned char *)(v147 + i);
                    int v98 = 1;
                  }
                  goto LABEL_296;
                case 7:
                  for (uint64_t j = 0; j != 32; ++j)
                    __b.i8[j] |= *(unsigned char *)(v147 + j);
                  goto LABEL_296;
                case 8:
                  for (uint64_t k = 0; k != 32; ++k)
                  {
                    __b.i8[k] |= ~*(unsigned char *)(v146 + k);
                    int v98 = 1;
                  }
                  goto LABEL_296;
                case 9:
                  for (uint64_t m = 0; m != 32; ++m)
                    __b.i8[m] |= *(unsigned char *)(v146 + m);
                  goto LABEL_296;
                case 10:
                  for (uint64_t n = 0; n != 32; ++n)
                  {
                    __b.i8[n] |= ~*(unsigned char *)(v145 + n);
                    int v98 = 1;
                  }
                  goto LABEL_296;
                case 11:
                  for (iuint64_t i = 0; ii != 32; ++ii)
                    __b.i8[ii] |= *(unsigned char *)(v145 + ii);
                  goto LABEL_296;
                case 15:
                case 16:
                  unsigned int v172 = v148[2];
                  uint64_t v151 = v148 + 2;
                  char v171 = v172;
                  unsigned int v173 = HIWORD(v172);
                  if ((unsigned __int16)v97 == 16) {
                    char v174 = 3;
                  }
                  else {
                    char v174 = 4;
                  }
                  int v175 = v410++;
                  *int v175 = v174;
                  int v176 = v410++;
                  *int v176 = v173;
                  int v177 = v410++;
                  *int v177 = v171;
                  goto LABEL_244;
                case 18:
                  int v191 = &_pcre2_hspace_list_8;
                  goto LABEL_324;
                case 19:
                  int v192 = (unsigned int *)&_pcre2_hspace_list_8;
                  goto LABEL_326;
                case 20:
                  int v191 = &_pcre2_vspace_list_8;
LABEL_324:
                  add_not_list_to_class((uint64_t)&__b, &v410, v343, a11, v191);
                  goto LABEL_327;
                case 21:
                  int v192 = (unsigned int *)&_pcre2_vspace_list_8;
LABEL_326:
                  add_list_to_class((uint64_t)&__b, &v410, v343, a11, v192);
LABEL_327:
                  uint64_t v147 = v378;
                  uint64_t v145 = v379;
                  uint64_t v146 = v380;
                  break;
                default:
                  goto LABEL_296;
              }
              goto LABEL_296;
            }
            goto LABEL_247;
          }
          int v98 = v97 == -2145583104;
          uint64_t v151 = v15 + 2;
          int v150 = v15[2];
          if (((v150 < 3) & (v386 >> 3)) != 0) {
            int v150 = 0;
          }
          if ((v386 & 0x20000) != 0)
          {
            if ((v150 - 8) <= 2)
            {
              if (v97 == -2145583104) {
                char v152 = 4;
              }
              else {
                char v152 = 3;
              }
              uint64_t v153 = v410++;
              *uint64_t v153 = v152;
              if (v150 == 9) {
                char v154 = 12;
              }
              else {
                char v154 = 13;
              }
              if (v150 == 8) {
                char v155 = 11;
              }
              else {
                char v155 = v154;
              }
              unsigned int v156 = v410++;
              char *v156 = v155;
              int v157 = v410++;
              *int v157 = 0;
LABEL_244:
              LODWORD(v377) = 1;
              goto LABEL_295;
            }
            BOOL v164 = (a1 & 0x80000) != 0 && v97 == -2145583104;
            HIDWORD(v377) |= v164;
          }
          int v165 = 3 * v150;
          cstdlib_memcpy(v414, (const void *)(v146 + posix_class_maps[3 * v150]), 0x20uLL);
          uint64_t v146 = v380;
          uint64_t v166 = v165 + 1;
          uint64_t v167 = v165 + 2;
          if ((0x2DB6DB6FB6BuLL >> v166))
          {
            uint64_t v168 = posix_class_maps[v166];
            if ((0x2DB6DB6FB6BuLL >> v167))
            {
              uint64_t v178 = 0;
              uint64_t v179 = v380 + v168;
              do
              {
                *((unsigned char *)v414 + v178) |= *(unsigned char *)(v179 + v178);
                ++v178;
              }
              while (v178 != 32);
            }
            else
            {
              uint64_t v169 = 0;
              uint64_t v170 = v380 + v168;
              do
              {
                *((unsigned char *)v414 + v169) &= ~*(unsigned char *)(v170 + v169);
                ++v169;
              }
              while (v169 != 32);
            }
          }
          int v180 = ((0x12492490494uLL >> v167) & 1) != 0 ? -posix_class_maps[v167] : posix_class_maps[v167];
          uint64_t v147 = v378;
          uint64_t v145 = v379;
          if (v180 == 1) {
            break;
          }
          if (v180 == 2)
          {
            char v181 = 127;
            int v182 = v415;
LABEL_287:
            *v182 &= v181;
          }
          if (v97 == -2145583104)
          {
            for (juint64_t j = 0; jj != 8; jj += 4)
              *(int8x16_t *)((char *)&__b + jj * 4) = vornq_s8(*(int8x16_t *)((char *)&__b + jj * 4), *(int8x16_t *)&v414[jj]);
          }
          else
          {
            for (uint64_t kk = 0; kk != 8; kk += 4)
              *(int8x16_t *)((char *)&__b + kk * 4) = vorrq_s8(*(int8x16_t *)((char *)&__b + kk * 4), *(int8x16_t *)&v414[kk]);
          }
          uint64_t v149 = 1;
LABEL_295:
          uint64_t v15 = v151;
          uint64_t v143 = v149;
LABEL_296:
          if ((unint64_t)v410 > __srca) {
            int v144 = 1;
          }
          if (a12 && (unint64_t)v410 > __srca)
          {
            v401 += (unint64_t)&v410[-__srca];
            v410 = v32 + 4;
            int v144 = 1;
          }
          uint64_t v93 = v15 + 1;
          unsigned int v97 = v15[1];
          if (v97 == -2146631680)
          {
            v413 = v15 + 1;
            int v197 = v387;
            if (v387 == -2) {
              int v197 = -1;
            }
            int v387 = v197;
            if (!v144) {
              goto LABEL_360;
            }
            int v67 = v397;
            unsigned int v198 = v389;
            if ((v386 & 0x20000) == 0 && !v377 && v98)
            {
              int v30 = v395;
              goto LABEL_361;
            }
            int v30 = v395;
            if (HIDWORD(v377))
            {
              uint64_t v258 = v410++;
              *uint64_t v258 = 2;
              unint64_t v20 = v401;
              if ((a1 & 0x80000) == 0)
              {
                uint64_t v259 = v410;
                goto LABEL_599;
              }
LABEL_592:
              unsigned int v265 = _pcre2_ord2utf_8(0x100u, (uint64_t)v410);
              v410 += v265;
              int v266 = _pcre2_ord2utf_8(0x10FFFFu, (uint64_t)v410);
              uint64_t v259 = &v410[v266];
            }
            else
            {
              uint64_t v259 = v410;
              if ((v386 & 0x20000) == 0 && (a1 & 0x80000) != 0 && v98 && v389 != -2146566144)
              {
                ++v410;
                *uint64_t v259 = 2;
                unint64_t v20 = v401;
                goto LABEL_592;
              }
              unint64_t v20 = v401;
            }
LABEL_599:
            v410 = v259 + 1;
            *uint64_t v259 = 0;
            *int v32 = 112;
            char v270 = (v389 == -2146566144) | 4;
            if (!v377) {
              char v270 = v389 == -2146566144;
            }
            v32[3] = v270;
            if ((int)v143 < 1)
            {
              int v32 = v410;
              uint64_t v27 = v396;
            }
            else
            {
              v32[3] = v270 | 2;
              cstdlib_memmove(v32 + 36, (const void *)__srca, (size_t)&v410[-__srca]);
              uint64_t v27 = v396;
              if (v389 == -2146566144 && !v377)
              {
                int8x16_t __b = vmvnq_s8(__b);
                int8x16_t v418 = vmvnq_s8(v418);
              }
              cstdlib_memcpy((void *)__srca, &__b, 0x20uLL);
              int v32 = v410 + 32;
            }
            *(_WORD *)(v27 + 1) = bswap32(v32 - v27) >> 16;
LABEL_369:
            int v28 = 1;
            unsigned int v90 = v399;
            unsigned int v91 = v400;
            unint64_t v376 = __PAIR64__(v399, v400);
            int v92 = v67;
LABEL_389:
            int v374 = v67;
            int __src = v387;
LABEL_734:
            uint64_t v15 = ++v413;
            unsigned int v25 = v90;
            unsigned int v26 = v91;
            int v31 = v92;
            goto LABEL_17;
          }
        }
        char v181 = -61;
        int v182 = (char *)v414 + 1;
        goto LABEL_287;
      case 0xB:
      case 0xC:
        if (v34 == -2146697216) {
          char v94 = 13;
        }
        else {
          char v94 = -97;
        }
        *v32++ = v94;
        int v95 = v387;
        if (v387 == -2) {
          int v95 = -1;
        }
        int v28 = 1;
        unsigned int v90 = v25;
        unsigned int v91 = v26;
        HIDWORD(v376) = v25;
        int v92 = v31;
        goto LABEL_174;
      case 0xF:
        goto LABEL_461;
      case 0x10:
        int v45 = 0;
        int v39 = 0;
        int v40 = 0;
        unsigned int v117 = v15[2];
        long long v116 = v15 + 2;
        unint64_t v371 = v117 | ((unint64_t)*(v116 - 1) << 32);
        v413 = v116;
        v32[3] = -92;
        goto LABEL_460;
      case 0x11:
      case 0x13:
      case 0x14:
        uint64_t v47 = *(void *)(a11 + 192);
        unsigned int v50 = v15[3];
        uint64_t v49 = v15 + 3;
        uint64_t v48 = v50;
        uint64_t v52 = *(v49 - 2);
        uint64_t v51 = *(v49 - 1);
        v413 = v49;
        uint64_t v53 = *(void *)(a11 + 56);
        unint64_t v371 = v50 | ((unint64_t)v51 << 32);
        uint64_t v54 = (unsigned __int8 *)(v53 + v371);
        unsigned __int16 v55 = *(_WORD *)(a11 + 176);
        if (!v55)
        {
          unsigned int v56 = 0;
          unsigned int v58 = a12;
          goto LABEL_335;
        }
        unsigned int v56 = 0;
        uint64_t v57 = v47 + 8;
        unsigned int v58 = a12;
        while (2)
        {
          if (v52 != *(unsigned __int16 *)(v57 + 4)) {
            goto LABEL_40;
          }
          if (_pcre2_strncmp_8(v54, *(unsigned __int8 **)(v57 - 8), v52))
          {
            unsigned __int16 v55 = *(_WORD *)(a11 + 176);
LABEL_40:
            ++v56;
            v57 += 16;
            if (v56 >= v55) {
              goto LABEL_335;
            }
            continue;
          }
          break;
        }
        if (!*(_WORD *)(v57 + 6))
        {
          if (v389 == -2146238464) {
            char v254 = -113;
          }
          else {
            char v254 = -115;
          }
          v32[3] = v254;
          v32[4] = BYTE1(*(_DWORD *)v57);
          v32[5] = *(_DWORD *)v57;
          if (*(_DWORD *)v57 > *(_DWORD *)(a11 + 248)) {
            *(_DWORD *)(a11 + 248) = *(_DWORD *)v57;
          }
          goto LABEL_351;
        }
        unsigned __int16 v55 = *(_WORD *)(a11 + 176);
LABEL_335:
        if (v56 < v55)
        {
          if (v389 == -2146238464) {
            char v193 = -113;
          }
          else {
            char v193 = -115;
          }
          v32[3] = v193;
          v414[0] = 0;
          unsigned int v407 = 0;
          if (v58 || find_dupname_details(v54, v52, &v407, v414, a4, a11))
          {
            ++v32[3];
            *((_WORD *)v32 + 2) = bswap32((unsigned __int16)v407) >> 16;
            *((_WORD *)v32 + 3) = bswap32(LOWORD(v414[0])) >> 16;
            uint64_t v38 = 5;
            goto LABEL_352;
          }
          return 0;
        }
        if (v389 != -2146172928) {
          goto LABEL_786;
        }
        if ((int)v52 < 2) {
          goto LABEL_349;
        }
        unsigned int v194 = 0;
        uint64_t v195 = (v51 << 32) + v48 + 1;
        uint64_t v196 = v52 - 1;
        do
        {
          unsigned int v194 = 10 * v194 + *(unsigned __int8 *)(v53 + v195) - 48;
          if (v194 >= 0x10000)
          {
            *a4 = 161;
LABEL_782:
            *(void *)(a11 + 168) = v195;
            return 0;
          }
          ++v195;
          --v196;
        }
        while (v196);
        if (v194 > *(_DWORD *)(a11 + 212))
        {
LABEL_786:
          *a4 = 115;
          uint64_t v195 = v371;
          goto LABEL_782;
        }
        if (!v194) {
LABEL_349:
        }
          LOWORD(v194) = -1;
        v32[3] = -113;
        v32[4] = BYTE1(v194);
        v32[5] = v194;
LABEL_351:
        uint64_t v38 = 3;
LABEL_352:
        int v39 = 0;
        int v40 = 0;
        unsigned int v44 = 135;
        int v45 = 1;
        char v46 = 1;
LABEL_461:
        ++*(_WORD *)(a11 + 180);
        *int v32 = v44;
        uint64_t v412 = 0;
        ++v413;
        v411 = (unsigned __int8 *)v32;
        int v230 = *(_DWORD *)(a11 + 280);
        int v231 = compile_regex(v386, &v411, &v413, a4, v38, &v409, &v408, (char *)&v409 + 4, (char *)&v408 + 4, &v403, a11, v372);
        if (!v231) {
          return 0;
        }
        --*(_WORD *)(a11 + 180);
        if (v231 > 0) {
          int v28 = v45 & v39;
        }
        else {
          int v28 = 0;
        }
        int v373 = v231;
        if (v40)
        {
          --*(_WORD *)(a11 + 182);
          uint64_t v19 = a12;
          unint64_t v20 = v401;
          goto LABEL_475;
        }
        uint64_t v19 = a12;
        char v232 = v46 ^ 1;
        if (a12) {
          char v232 = 1;
        }
        unint64_t v20 = v401;
        if (v232)
        {
LABEL_475:
          uint64_t v27 = v396;
          int v31 = v397;
          unsigned int v26 = v400;
          unsigned int v134 = v399;
          if (!v19)
          {
LABEL_483:
            int v32 = (char *)v411;
            if (v44 < 0x82)
            {
              BOOL v368 = 0;
              BOOL v236 = v44 != 126 || v408 < 0;
              int v237 = !v236;
              BOOL v238 = (int)v408 >= 0;
              BOOL v239 = (v237 & v238) == 0;
              if ((v237 & v238) != 0) {
                unsigned int v91 = HIDWORD(v409);
              }
              else {
                unsigned int v91 = v26;
              }
              if (v239) {
                int v92 = v31;
              }
              else {
                int v92 = HIDWORD(v408);
              }
              unsigned int v90 = v134;
              unint64_t v376 = __PAIR64__(v134, v26);
              int v374 = v31;
              int __src = v387;
            }
            else
            {
              if (v387 != -2 || v408 == -2)
              {
                int v92 = HIDWORD(v408);
                if ((v408 & 0x80000000) != 0 || (v408 & 0x8000000000000000) == 0)
                {
                  BOOL v368 = 0;
                }
                else
                {
                  BOOL v368 = 0;
                  HIDWORD(v409) = v409;
                  int v92 = v408 | v230;
                  HIDWORD(v408) = v408 | v230;
                }
                unsigned int v90 = v134;
                int __src = v387;
              }
              else
              {
                if ((int)v408 < 0) {
                  unsigned int v90 = v134;
                }
                else {
                  unsigned int v90 = v409;
                }
                if ((int)v408 < 0) {
                  int v235 = -1;
                }
                else {
                  int v235 = v408;
                }
                int v387 = v235;
                BOOL v368 = (int)v408 >= 0;
                int __src = -1;
                int v92 = HIDWORD(v408);
              }
              if (v92 < 0) {
                unsigned int v91 = v26;
              }
              else {
                unsigned int v91 = HIDWORD(v409);
              }
              if (v92 < 0) {
                int v92 = v31;
              }
              unint64_t v376 = __PAIR64__(v134, v26);
              int v374 = v31;
            }
            goto LABEL_525;
          }
          goto LABEL_476;
        }
        int v233 = 1;
        int v234 = v32;
        uint64_t v27 = v396;
        int v31 = v397;
        unsigned int v26 = v400;
        unsigned int v134 = v399;
        do
        {
          v234 += __rev16(*(unsigned __int16 *)(v234 + 1));
          --v233;
        }
        while (*v234 != 121);
        if (v32[3] != 164)
        {
          if (-v233 >= 2)
          {
            *(void *)(a11 + 168) = v371;
            int v331 = 127;
            goto LABEL_778;
          }
          if (v233) {
            int v28 = v231 > 0;
          }
          else {
            uint64_t v408 = -1;
          }
          unsigned int v44 = 135;
          if (!a12) {
            goto LABEL_483;
          }
LABEL_476:
          int v30 = v395;
          if (2147483627 - v20 >= v412 - 6)
          {
            v20 += v412 - 6;
            *(_DWORD *)(v32 + 1) = 7930624;
            v32[5] = 3;
            v32 += 6;
            unsigned int v90 = v134;
            unsigned int v91 = v26;
            int v92 = v31;
            goto LABEL_734;
          }
          goto LABEL_774;
        }
        if (!v233)
        {
          v32[3] = -111;
          int v32 = (char *)v411;
LABEL_524:
          unsigned int v90 = v134;
          unsigned int v91 = v26;
          int v92 = v31;
          goto LABEL_525;
        }
        *(void *)(a11 + 168) = v371;
        int v331 = 154;
LABEL_778:
        *a4 = v331;
        return 0;
      case 0x12:
        unsigned int v120 = v15[3];
        uint64_t v119 = v15 + 3;
        unsigned int v118 = v120;
        unint64_t v121 = *(v119 - 1) | ((unint64_t)*(v119 - 2) << 32);
        v413 = v119;
        if (v120 <= *(_DWORD *)(a11 + 212))
        {
          if (v118 > *(_DWORD *)(a11 + 248)) {
            *(_DWORD *)(a11 + 248) = v118;
          }
          int v39 = 0;
          int v40 = 0;
          unint64_t v371 = v121 - 2;
          v32[3] = -115;
          v32[4] = BYTE1(v118);
          v32[5] = v118;
          uint64_t v38 = 3;
          goto LABEL_461;
        }
        *a4 = 115;
        *(void *)(a11 + 168) = v121;
        return 0;
      case 0x15:
        unsigned int v122 = v15[2];
        if (v15[1])
        {
          if (v122 < 0xA || v122 == 10 && v15[3] <= 0x20)
          {
            char v123 = -110;
            goto LABEL_459;
          }
        }
        else if (v122 == 10)
        {
          if (v15[3] == 32) {
            char v123 = -110;
          }
          else {
            char v123 = -111;
          }
LABEL_459:
          int v39 = 0;
          int v40 = 0;
          v32[3] = v123;
          v413 += 3;
LABEL_460:
          uint64_t v38 = 1;
          goto LABEL_461;
        }
        char v123 = -111;
        goto LABEL_459;
      case 0x16:
        int v28 = 0;
        if ((v386 & 0x400) != 0) {
          LOBYTE(v96) = 26;
        }
        else {
          LOBYTE(v96) = 25;
        }
        goto LABEL_114;
      case 0x17:
        int v95 = v387;
        if (v387 == -2) {
          int v95 = -1;
        }
        if ((v386 & 0x20) != 0) {
          char v124 = 13;
        }
        else {
          char v124 = 12;
        }
        *v32++ = v124;
        int v28 = 1;
        unsigned int v90 = v25;
        unsigned int v91 = v26;
        unint64_t v376 = __PAIR64__(v25, v26);
        int v92 = v31;
        int v374 = v31;
LABEL_174:
        int v387 = v95;
        goto LABEL_175;
      case 0x18:
        int v28 = (v42 - 6) < 0x11;
        int v95 = v387;
        if ((v28 & (v387 == -2)) != 0) {
          int v95 = -1;
        }
        int v387 = v95;
        if ((v42 - 15) > 1)
        {
          if (v42 == 14) {
            *(_DWORD *)(a11 + 208) |= 0x400000u;
          }
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          if (((v33 & 0xFFFE) == 4 || v42 == 1) && !*(_DWORD *)(a11 + 276)) {
            *(_DWORD *)(a11 + 276) = 1;
          }
          if (v42 == 14 && (a1 & 0x80000) == 0) {
            char v220 = 13;
          }
          else {
            char v220 = v33;
          }
          *v32++ = v220;
          unsigned int v90 = v25;
          unsigned int v91 = v26;
          unint64_t v376 = __PAIR64__(v25, v26);
          int v92 = v31;
          int v374 = v31;
          int __src = v95;
          goto LABEL_443;
        }
        unsigned int v126 = v15[1];
        char v125 = v126;
        v413 = v15 + 1;
        unsigned int v127 = HIWORD(v126);
        if (v42 == 16) {
          char v128 = 16;
        }
        else {
          char v128 = 15;
        }
        *int v32 = v128;
        v32[1] = v127;
        v32[2] = v125;
        v32 += 3;
        unsigned int v90 = v25;
        unsigned int v91 = v26;
        unint64_t v376 = __PAIR64__(v25, v26);
        int v92 = v31;
        int v374 = v31;
LABEL_175:
        int __src = v95;
        goto LABEL_176;
      case 0x1A:
        uint64_t v38 = 0;
        int v40 = 0;
        char v46 = 0;
        unsigned int v44 = 131;
LABEL_186:
        int v39 = 1;
        goto LABEL_461;
      case 0x1B:
        int v28 = 0;
        unsigned int v129 = v15[1];
        int v362 = (v129 >> 18) & 1;
        v413 = v15 + 1;
        unsigned int v386 = v129;
        BOOL v366 = (v129 & 0x40000) == 0;
        int v367 = (v129 >> 3) & 1;
        goto LABEL_115;
      case 0x20:
        unsigned int v131 = v15[2];
        uint64_t v130 = v15 + 2;
        unint64_t v108 = v131 | ((unint64_t)*(v130 - 1) << 32);
        v413 = v130;
        uint64_t v81 = a11;
        if (v42 <= *(_DWORD *)(a11 + 212))
        {
          unint64_t v371 = v108;
          uint64_t v19 = a12;
LABEL_190:
          BOOL v368 = 0;
          int v28 = 0;
          *int v32 = 117;
          v32[1] = BYTE1(v42);
          v32[2] = v42;
          *(_DWORD *)(v81 + 292) = 1;
          v32 += 3;
          int v132 = v387;
          if (v387 == -2) {
            int v132 = -1;
          }
          int v387 = v132;
          unsigned int v90 = v399;
          unsigned int v91 = v400;
          int v92 = v397;
LABEL_177:
          unint64_t v20 = v401;
LABEL_222:
          int v30 = v395;
          uint64_t v27 = v396;
          goto LABEL_734;
        }
LABEL_785:
        *(void *)(v81 + 168) = v108;
        int v331 = 115;
        goto LABEL_778;
      case 0x22:
        int v45 = 0;
        uint64_t v38 = 0;
        char v46 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v44 = 126;
        goto LABEL_224;
      case 0x23:
        if (v15[1] != -2145845248 || v15[2] + 2143551487 > 0xFFF4FFFE)
        {
          int v45 = 0;
          uint64_t v38 = 0;
          char v46 = 0;
          ++*(_WORD *)(a11 + 182);
          unsigned int v44 = 127;
LABEL_224:
          int v39 = 1;
          int v40 = 1;
          goto LABEL_461;
        }
        int v28 = 0;
        *v32++ = -97;
        ++v413;
LABEL_115:
        unsigned int v90 = v25;
        unsigned int v91 = v26;
        int v92 = v31;
LABEL_176:
        uint64_t v19 = a12;
        goto LABEL_177;
      case 0x24:
        int v45 = 0;
        uint64_t v38 = 0;
        char v46 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v44 = 128;
        goto LABEL_224;
      case 0x25:
        int v45 = 0;
        uint64_t v38 = 0;
        char v46 = 0;
        ++*(_WORD *)(a11 + 182);
        unsigned int v44 = 129;
        goto LABEL_224;
      case 0x26:
      case 0x2A:
        goto LABEL_209;
      case 0x27:
        *(_DWORD *)(a11 + 284) = 1;
        unsigned int v133 = *(uint64_t **)(a11 + 184);
        if (v133)
        {
          uint64_t v19 = a12;
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          unsigned int v134 = v25;
          do
          {
            if (*((unsigned __int16 *)v133 + 6) < *(unsigned __int16 *)(a11 + 182)) {
              break;
            }
            if (a12)
            {
              v20 += 3;
            }
            else
            {
              *int v32 = -94;
              v32[1] = *((unsigned char *)v133 + 9);
              v32[2] = *((unsigned char *)v133 + 8);
              v32 += 3;
            }
            unsigned int v133 = (uint64_t *)*v133;
          }
          while (v133);
        }
        else
        {
          uint64_t v19 = a12;
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          unsigned int v134 = v25;
        }
        int v28 = 0;
        if (*(_WORD *)(a11 + 182)) {
          char v240 = -95;
        }
        else {
          char v240 = -96;
        }
        *v32++ = v240;
        int v241 = v387;
        if (v387 == -2) {
          int v241 = -1;
        }
        int v387 = v241;
        goto LABEL_524;
      case 0x28:
      case 0x29:
        goto LABEL_113;
      case 0x2B:
      case 0x2D:
        *(_DWORD *)(a11 + 288) = 1;
LABEL_113:
        int v28 = 0;
        int v96 = verbops[(v33 + 2144993280) >> 16];
        goto LABEL_114;
      case 0x2C:
      case 0x2E:
        *(_DWORD *)(a11 + 288) = 1;
        goto LABEL_209;
      case 0x2F:
        int v28 = 0;
        *(_DWORD *)(a11 + 208) |= 0x1000u;
        LOBYTE(v96) = -101;
LABEL_114:
        *v32++ = v96;
        goto LABEL_115;
      case 0x30:
        *(_DWORD *)(a11 + 208) |= 0x1000u;
LABEL_209:
        unsigned int v135 = (unsigned __int8 *)(v32 + 1);
        *int v32 = verbops[(v33 + 2144993280) >> 16];
        int v136 = v32 + 2;
        int v138 = v413[1];
        int v137 = v138;
        ++v413;
        v411 = v135;
        if (v138 < 1)
        {
          unsigned __int8 v139 = 0;
          uint64_t v19 = a12;
          unint64_t v20 = v401;
        }
        else
        {
          unsigned __int8 v139 = 0;
          uint64_t v19 = a12;
          unint64_t v20 = v401;
          do
          {
            unsigned int v140 = v413[1];
            ++v413;
            if ((a1 & 0x80000) != 0)
            {
              unsigned int v141 = _pcre2_ord2utf_8(v140, (uint64_t)__dst);
            }
            else
            {
              __dst[0] = v140;
              unsigned int v141 = 1;
            }
            uint64_t v142 = v141;
            if (a12)
            {
              v20 += v141;
            }
            else
            {
              cstdlib_memcpy(v136, __dst, v141);
              v136 += v142;
              v139 += v142;
            }
            --v137;
          }
          while (v137);
          unsigned int v135 = v411;
        }
        int v28 = 0;
        unsigned __int8 *v135 = v139;
        char *v136 = 0;
        int v32 = v136 + 1;
        goto LABEL_221;
      case 0x31:
      case 0x32:
      case 0x33:
        goto LABEL_45;
      case 0x34:
      case 0x35:
      case 0x36:
        unsigned int v41 = 1;
        goto LABEL_45;
      case 0x37:
      case 0x38:
      case 0x39:
        unsigned int v41 = 0;
        unsigned int v43 = 1;
        goto LABEL_45;
      case 0x3A:
      case 0x3B:
      case 0x3C:
        unsigned int v60 = v15[2];
        int v59 = v15 + 2;
        unsigned int v43 = v60;
        unsigned int v41 = *(v59 - 1);
        v413 = v59;
LABEL_45:
        if (v28) {
          BOOL v61 = v41 == 0;
        }
        else {
          BOOL v61 = 1;
        }
        int v28 = !v61;
        BOOL v62 = v43 != v41;
        if (v43 == 1 && v41 == 1)
        {
          uint64_t v19 = a12;
          unint64_t v20 = v401;
          uint64_t v27 = v396;
          uint64_t v63 = a11;
LABEL_54:
          int v30 = v395;
LABEL_731:
          int v67 = v397;
          goto LABEL_732;
        }
        unsigned int v64 = v25;
        if (!v41) {
          unsigned int v64 = HIDWORD(v376);
        }
        unsigned int v399 = v64;
        unsigned int v65 = v400;
        if (!v41) {
          unsigned int v65 = v376;
        }
        unsigned int v400 = v65;
        int v66 = v387;
        if (v41)
        {
          int v67 = v31;
        }
        else
        {
          int v66 = __src;
          int v67 = v374;
        }
        unsigned int v68 = (v34 + 2144206848) >> 16;
        uint64_t v27 = v396;
        int v387 = v66;
        if (v68 > 0xA) {
          goto LABEL_332;
        }
        int v69 = 1;
        if (((1 << v68) & 0x249) != 0)
        {
          char v70 = 0;
          char v71 = 0;
        }
        else if (((1 << v68) & 0x492) != 0)
        {
          int v69 = 0;
          char v70 = 1;
          char v71 = v366;
        }
        else
        {
LABEL_332:
          int v69 = 0;
          char v70 = 1;
          char v71 = v362;
        }
        v411 = (unsigned __int8 *)v396;
        uint64_t v72 = *v396;
        uint64_t v73 = (v72 - 117);
        uint64_t v19 = a12;
        unint64_t v20 = v401;
        if (v73 > 0x2A) {
          goto LABEL_68;
        }
        if (((1 << (v72 - 117)) & 0x57E00) != 0)
        {
          int v75 = v32 - v396;
          if (v72 == 135)
          {
            if (v396[3] != 145 || v396[__rev16(*(unsigned __int16 *)(v396 + 1))] == 120) {
              goto LABEL_631;
            }
            goto LABEL_330;
          }
          if (v72 <= 0x81)
          {
            if (!v41)
            {
              unsigned int v43 = v43 != 0;
              goto LABEL_634;
            }
            goto LABEL_330;
          }
LABEL_631:
          int v397 = v67;
          BOOL v275 = v27;
          uint64_t v276 = v41 - 1;
          if (v41 == 1)
          {
            int v402 = v75;
LABEL_651:
            char v279 = 0;
            uint64_t v27 = v275;
            if (v43 == 0x10000)
            {
              unsigned int v74 = v32;
              int v30 = v395;
LABEL_660:
              v285 = v74 - 3;
              v286 = &v74[-__rev16(*((unsigned __int16 *)v74 - 1)) - 3];
              int v287 = *v286;
              char v288 = v69 ^ 1;
              if (v287 != 130) {
                char v288 = 1;
              }
              if ((v288 & 1) == 0)
              {
                int v287 = 131;
                char *v286 = -125;
                goto LABEL_675;
              }
              if (v287 != 130)
              {
LABEL_675:
                if (a12) {
                  goto LABEL_723;
                }
                if (v373 < 0)
                {
                  LOBYTE(v287) = v287 + 5;
                }
                else
                {
                  if (v287 != 135) {
                    goto LABEL_723;
                  }
                  if (v286[__rev16(*(unsigned __int16 *)(v286 + 1))] == 120)
                  {
                    LOBYTE(v287) = -121;
                    goto LABEL_723;
                  }
                  LOBYTE(v287) = -116;
                }
                char *v286 = v287;
LABEL_723:
                if (!v69)
                {
                  char *v285 = v71 + 122;
                  int v32 = v74;
                  uint64_t v63 = a11;
                  goto LABEL_731;
                }
                if (v287 == 140 || v287 == 135)
                {
                  int v314 = v28;
                  BOOL v315 = v62;
                  cstdlib_memmove(v286 + 3, v286, (int)v74 - (int)v286);
                  BOOL v62 = v315;
                  int v28 = v314;
                  if (*v286 == 135) {
                    char v316 = -124;
                  }
                  else {
                    char v316 = -119;
                  }
                  char *v286 = v316;
                  v74[3] = 124;
                  __int16 v317 = (_WORD)v74 - (_WORD)v286 + 3;
                  v74[4] = HIBYTE(v317);
                  v74[5] = v317;
                  v74 += 6;
                  v286[1] = HIBYTE(v317);
                  v286[2] = v317;
                }
                else
                {
                  char *v286 = v287 + 1;
                  char *v285 = 124;
                }
                uint64_t v63 = a11;
                if (v279) {
                  *char v279 = -107;
                }
                if (v41 >= 2)
                {
LABEL_667:
                  int v289 = v411;
                  uint64_t v290 = *v411;
                  if (v290 > 0x5C)
                  {
                    int v291 = v27;
                    if ((v290 - 110) < 2)
                    {
                      int v289 = v411 + 33;
LABEL_713:
                      v411 = v289;
                      goto LABEL_714;
                    }
                    if (v290 == 112)
                    {
                      uint64_t v294 = __rev16(*(unsigned __int16 *)(v411 + 1));
                    }
                    else
                    {
                      if (v290 != 93) {
                        goto LABEL_714;
                      }
                      uint64_t v294 = 2 * (v411[3] - 15 < 2) + 4;
                    }
                  }
                  else
                  {
                    int v291 = v27;
                    BOOL v292 = (v290 - 29) > 0x33
                        || ((1 << (v290 - 29)) & 0x800400200100FLL) == 0;
                    if (v292
                      || (int v289 = &v411[_pcre2_OP_lengths_8[v290]], v411 = v289, (a1 & 0x80000) == 0)
                      || (unsigned int v293 = *(v289 - 1), v293 < 0xC0))
                    {
LABEL_714:
                      int v309 = v74 - v289;
                      if ((int)v74 - (int)v289 >= 1)
                      {
                        unint64_t v310 = *v289;
                        if (v310 > 0x75 || (int v311 = opcode_possessify[v310]) == 0)
                        {
                          int v312 = v28;
                          BOOL v313 = v62;
                          cstdlib_memmove(v289 + 3, v289, (v74 - v289));
                          BOOL v62 = v313;
                          int v28 = v312;
                          *int v289 = -126;
                          v74[3] = 121;
                          v74[4] = (unsigned __int16)(v309 + 3) >> 8;
                          v74[5] = v309 + 3;
                          int v32 = v74 + 6;
                          *(_WORD *)(v411 + 1) = bswap32(v309 + 3) >> 16;
                          goto LABEL_720;
                        }
                        *int v289 = v311;
                      }
                      int v32 = v74;
LABEL_720:
                      uint64_t v27 = v291;
                      goto LABEL_731;
                    }
                    uint64_t v294 = _pcre2_utf8_table4[v293 & 0x3F];
                  }
                  v289 += v294;
                  goto LABEL_713;
                }
LABEL_626:
                int v32 = v74;
                goto LABEL_731;
              }
              char *v285 = v71 + 122;
LABEL_666:
              uint64_t v63 = a11;
              if ((v70 & 1) == 0) {
                goto LABEL_667;
              }
              goto LABEL_626;
            }
            unsigned int v284 = v43 - v41;
            unsigned int v278 = v275;
            uint64_t v27 = 0;
            int v67 = v397;
LABEL_658:
            int v30 = v395;
            int v397 = v67;
            if (v284 == 0x10000)
            {
              char v279 = v27;
              uint64_t v27 = v278;
              unsigned int v74 = v32;
              goto LABEL_660;
            }
            if (a12 && v284)
            {
              uint64_t v295 = (v412 + 7) * v284;
              unint64_t v296 = v295 - 6;
              BOOL v297 = v295 <= 0x7FFFFFFF && 2147483627 - v20 >= v296;
              uint64_t v63 = a11;
              if (!v297) {
                goto LABEL_774;
              }
              v20 += v296;
            }
            else
            {
              unsigned int v298 = v284 - 1;
              uint64_t v63 = a11;
              if ((int)(v284 - 1) >= 0)
              {
                char v394 = v70;
                BOOL v346 = v62;
                int v350 = v28;
                char v299 = v71 - 109;
                *int v32 = v71 - 109;
                int v300 = v32 + 1;
                if (v284 != 1)
                {
                  __int16 v301 = (_WORD)v32 + 2;
                  do
                  {
                    __int16 v302 = v301 - (_WORD)v279;
                    if (!v279) {
                      __int16 v302 = 0;
                    }
                    v300[1] = HIBYTE(v302);
                    char v279 = v300 + 1;
                    *int v300 = -125;
                    v300[2] = v302;
                    cstdlib_memcpy(v300 + 3, v278, v402);
                    v300 += v402 + 4;
                    *(v300 - 1) = v299;
                    v301 += v402 + 4;
                    --v298;
                  }
                  while (v298);
                  char v279 = &v300[-v402 - 3];
                  uint64_t v19 = a12;
                  uint64_t v63 = a11;
                }
                cstdlib_memcpy(v300, v278, v402);
                int v32 = &v300[v402];
                int v30 = v395;
                BOOL v62 = v346;
                int v28 = v350;
                char v70 = v394;
              }
            }
            if (v279)
            {
              int v303 = v32 + 1;
              do
              {
                char v304 = v303 - (_BYTE)v279;
                v305 = &v32[-(v303 - (int)v279)];
                uint64_t v306 = __rev16(*(unsigned __int16 *)(v305 + 1));
                *int v32 = 121;
                unsigned int v307 = (v303 - v279) >> 8;
                v32[1] = (unsigned __int16)(v303 - (_WORD)v279) >> 8;
                v32[2] = v303 - (_BYTE)v279;
                if (v306) {
                  BOOL v308 = v279 == 0;
                }
                else {
                  BOOL v308 = 1;
                }
                v279 -= v306;
                v32 += 3;
                v305[1] = v307;
                v305[2] = v304;
                v303 += 3;
              }
              while (!v308);
            }
            unsigned int v74 = v32;
            uint64_t v27 = v278;
            if ((v70 & 1) == 0) {
              goto LABEL_667;
            }
            goto LABEL_626;
          }
          if (!v41)
          {
            uint64_t v27 = v275;
            int v67 = v397;
LABEL_634:
            char v277 = v71;
            char v392 = v70;
            BOOL v344 = v62;
            int v348 = v28;
            int v402 = v75;
            if (v43 >= 2 && v43 != 0x10000)
            {
              unsigned int v278 = v27 + 4;
              cstdlib_memmove(v27 + 4, v27, v75);
              v32 += 4;
              char v71 = v277;
              *uint64_t v27 = v277 - 109;
              char v279 = v27 + 2;
              *(_WORD *)(v27 + 1) = 131;
              v27[3] = 0;
              uint64_t v27 = 0;
              goto LABEL_655;
            }
            unsigned int v278 = v27 + 1;
            cstdlib_memmove(v27 + 1, v27, v75);
            ++v32;
            if (v43)
            {
              char v279 = 0;
              char v71 = v277;
              *uint64_t v27 = v277 - 109;
LABEL_655:
              unsigned int v41 = 0;
              char v70 = v392;
              if (v43 == 0x10000)
              {
                int v397 = v67;
                char v279 = v27;
                uint64_t v27 = v278;
                unsigned int v74 = v32;
                int v30 = v395;
                BOOL v62 = v344;
                int v28 = v348;
                goto LABEL_660;
              }
              unsigned int v284 = v43 - 1;
              BOOL v62 = v344;
              int v28 = v348;
              goto LABEL_658;
            }
            *v27++ = -93;
            uint64_t v63 = a11;
            int v30 = v395;
            BOOL v62 = v344;
            int v28 = v348;
LABEL_732:
            *(_DWORD *)(v63 + 280) |= 2 * v62;
            unsigned int v90 = v399;
            unsigned int v91 = v400;
            goto LABEL_733;
          }
          int v402 = v75;
          if (!a12)
          {
            char v342 = v71;
            char v393 = v70;
            BOOL v345 = v62;
            int v349 = v28;
            int v281 = v397;
            unsigned int v282 = v400;
            if (v368 && v397 < 0) {
              unsigned int v282 = v399;
            }
            unsigned int v400 = v282;
            if (v368 && v397 < 0) {
              int v281 = v387;
            }
            int v397 = v281;
            size_t v283 = v75;
            do
            {
              cstdlib_memcpy(v32, v275, v283);
              v32 += v283;
              LODWORD(v276) = v276 - 1;
            }
            while (v276);
            BOOL v62 = v345;
            int v28 = v349;
            char v70 = v393;
            char v71 = v342;
            goto LABEL_651;
          }
          unint64_t v280 = v412 * v276;
          if (v412 * v276 <= 0x7FFFFFFF && 2147483627 - v20 >= v280)
          {
            v20 += v280;
            goto LABEL_651;
          }
LABEL_774:
          int v331 = 120;
          goto LABEL_778;
        }
        if (v72 == 117)
        {
          char v391 = v70;
          char v340 = v71;
          if (v41)
          {
            if (v43 == 0x10000 && v41 == 1)
            {
              BOOL v245 = v43 != v41;
              int v246 = v28;
              unsigned int v43 = 0x10000;
            }
            else
            {
              int v263 = v41 - (v43 == v41);
              if (a12)
              {
                if (v263 > 715827882) {
                  goto LABEL_774;
                }
                unint64_t v264 = 3 * v263;
                if (2147483627 - v401 < v264) {
                  goto LABEL_774;
                }
                unint64_t v20 = v401 + v264;
                uint64_t v27 = v396;
              }
              else
              {
                int v271 = v28;
                int v272 = v396;
                if (v263 < 1)
                {
                  uint64_t v27 = v396;
                }
                else
                {
                  do
                  {
                    int v273 = v32;
                    cstdlib_memcpy(v32, v272, 3uLL);
                    v32 += 3;
                    int v272 = v273;
                    --v263;
                  }
                  while (v263);
                  uint64_t v27 = v32 - 3;
                }
                int v28 = v271;
                BOOL v62 = v43 != v41;
                char v70 = v391;
              }
              unsigned int v274 = v43 - v41;
              if (v43 == v41)
              {
                int v397 = v67;
                unsigned int v74 = v32;
                uint64_t v63 = a11;
                goto LABEL_625;
              }
              BOOL v245 = v62;
              int v246 = v28;
              unsigned int v41 = 0;
              if (v43 == 0x10000) {
                unsigned int v43 = 0x10000;
              }
              else {
                unsigned int v43 = v274;
              }
            }
          }
          else
          {
            BOOL v245 = v43 != v41;
            int v246 = v28;
          }
          cstdlib_memmove(v27 + 3, v27, 3uLL);
          *(_WORD *)uint64_t v27 = 131;
          v27[2] = 6;
          *((_WORD *)v27 + 3) = 121;
          _OWORD v27[8] = 6;
          v32 += 6;
          int v75 = v32 - v27;
          int v373 = -1;
          uint64_t v412 = 9;
          int v28 = v246;
          BOOL v62 = v245;
          char v70 = v391;
          char v71 = v340;
          goto LABEL_631;
        }
        if (v73 == 42) {
          goto LABEL_330;
        }
LABEL_68:
        if ((v72 - 110) < 7)
        {
          uint64_t v63 = a11;
          if (!v43)
          {
            int v32 = v396;
LABEL_331:
            int v30 = v395;
            goto LABEL_732;
          }
          int v397 = v67;
          if (v43 == 0x10000 && !v41)
          {
            *int v32 = v71 + 98;
            unsigned int v74 = v32 + 1;
            goto LABEL_625;
          }
          unsigned int v74 = v32 + 1;
          if (v43 == 0x10000 && v41 == 1)
          {
            char v200 = v71 + 100;
LABEL_538:
            *int v32 = v200;
            goto LABEL_625;
          }
          if (v43 == 1 && !v41)
          {
            char v200 = v71 + 102;
            goto LABEL_538;
          }
          *int v32 = v71 + 104;
          v32[1] = BYTE1(v41);
          v32[2] = v41;
          if (v43 == 0x10000) {
            __int16 v261 = 0;
          }
          else {
            __int16 v261 = v43;
          }
          v32[3] = HIBYTE(v261);
          v32[4] = v261;
          unsigned int v74 = v32 + 5;
LABEL_625:
          int v30 = v395;
          if ((v70 & 1) == 0) {
            goto LABEL_667;
          }
          goto LABEL_626;
        }
        if ((v72 - 29) > 3)
        {
          if (v72 >= 0x17)
          {
            int v331 = 110;
            goto LABEL_778;
          }
          size_t v105 = 0;
          if ((v72 - 15) > 1)
          {
            char v106 = -1;
            int v107 = -1;
          }
          else
          {
            int v107 = v396[1];
            char v106 = v396[2];
          }
          LOBYTE(v100) = 52;
          if (!v43) {
            goto LABEL_127;
          }
        }
        else
        {
          int v100 = chartypeoffset[v72 - 29];
          unsigned int v101 = *(v32 - 1);
          if ((a1 & 0x80000) != 0 && (v101 & 0xC0) == 0x80)
          {
            int v398 = chartypeoffset[v72 - 29];
            char v339 = v71;
            char v390 = v70;
            int v102 = v28;
            uint64_t v103 = 0;
            do
              int v104 = v32[--v103] & 0xC0;
            while (v104 == 128);
            size_t v105 = -(int)v103;
            cstdlib_memcpy(__dst, &v32[v103], v105);
            char v106 = -1;
            int v107 = -1;
            int v28 = v102;
            BOOL v62 = v43 != v41;
            char v70 = v390;
            char v71 = v339;
            LOBYTE(v100) = v398;
            if (!v43)
            {
LABEL_127:
              uint64_t v27 = v396;
              int v32 = v396;
LABEL_330:
              uint64_t v63 = a11;
              goto LABEL_331;
            }
          }
          else
          {
            __dst[0] = *(v32 - 1);
            char v106 = -1;
            int v107 = -1;
            size_t v105 = 1;
            if (v72 <= 0x1E && v41 >= 2)
            {
              int v67 = *(_DWORD *)(a11 + 280) | v367;
              char v106 = -1;
              size_t v105 = 1;
              unsigned int v400 = v101;
            }
            if (!v43) {
              goto LABEL_127;
            }
          }
        }
        int v397 = v67;
        char v205 = v100 + v71;
        if (!v41)
        {
          if (v43 == 0x10000)
          {
            unsigned __int8 v206 = v205 + 33;
            goto LABEL_528;
          }
          uint64_t v27 = v396;
          if (v43 == 1)
          {
            uint64_t v242 = v396 + 1;
            char *v396 = v205 + 37;
          }
          else
          {
            char *v396 = v205 + 39;
            v396[1] = BYTE1(v43);
            v396[2] = v43;
            uint64_t v242 = v396 + 3;
          }
LABEL_594:
          int v30 = v395;
          if (v105)
          {
LABEL_595:
            int v267 = v28;
            BOOL v268 = v62;
            char v269 = v70;
            cstdlib_memcpy(v242, __dst, v105);
            char v70 = v269;
            BOOL v62 = v268;
            int v28 = v267;
            unsigned int v74 = &v242[v105];
            goto LABEL_666;
          }
LABEL_616:
          *uint64_t v242 = v72;
          unsigned int v74 = v242 + 1;
          if ((v107 & 0x80000000) == 0)
          {
            v242[1] = v107;
            unsigned int v74 = v242 + 3;
            v242[2] = v106;
          }
          goto LABEL_666;
        }
        if (v41 == 1)
        {
          if (v43 == 0x10000)
          {
            unsigned __int8 v206 = v205 + 35;
LABEL_528:
            uint64_t v27 = v396;
            char *v396 = v206;
            uint64_t v242 = v396 + 1;
            goto LABEL_594;
          }
          __int16 v262 = v43 - 1;
          uint64_t v27 = v396;
          if (v43 == 1)
          {
            uint64_t v63 = a11;
            goto LABEL_54;
          }
          *int v32 = v205 + 39;
          v32[1] = HIBYTE(v262);
          v32[2] = v262;
          uint64_t v242 = v32 + 3;
          goto LABEL_594;
        }
        char *v396 = v100 + 41;
        v396[1] = BYTE1(v41);
        v396[2] = v41;
        uint64_t v242 = v396 + 3;
        unsigned int v247 = v43 - v41;
        if (v43 == v41) {
          goto LABEL_614;
        }
        if (v105)
        {
          int v347 = v28;
          size_t v248 = v105;
          size_t v341 = v105;
          BOOL v249 = v62;
          char v250 = v70;
          char v251 = v106;
          int v252 = v107;
          unsigned int v338 = v247;
          cstdlib_memcpy(v242, __dst, v248);
          unsigned int v247 = v338;
          int v107 = v252;
          char v106 = v251;
          char v70 = v250;
          BOOL v62 = v249;
          size_t v105 = v341;
          int v28 = v347;
          int v253 = &v242[v341];
        }
        else
        {
          v396[3] = v72;
          if (v107 < 0)
          {
            int v253 = v396 + 4;
          }
          else
          {
            v396[4] = v107;
            int v253 = v396 + 6;
            v396[5] = v106;
          }
        }
        if (v43 == 0x10000)
        {
          *int v253 = v205 + 33;
          uint64_t v242 = v253 + 1;
LABEL_614:
          int v30 = v395;
        }
        else
        {
          int v30 = v395;
          if (v247 == 1)
          {
            *int v253 = v205 + 37;
            uint64_t v242 = v253 + 1;
          }
          else
          {
            *int v253 = v205 + 39;
            v253[1] = BYTE1(v247);
            v253[2] = v247;
            uint64_t v242 = v253 + 3;
          }
        }
        uint64_t v27 = v396;
        if (v105) {
          goto LABEL_595;
        }
        goto LABEL_616;
      default:
        unsigned int v109 = a1;
        if ((*v15 & 0x80000000) == 0) {
          goto LABEL_144;
        }
        goto LABEL_784;
    }
  }
}

void *add_name_to_table(uint64_t a1, void *__src, size_t __n, unsigned int a4, int a5)
{
  int v6 = __n;
  int v9 = *(_WORD **)(a1 + 72);
  size_t v10 = __n;
  if (a5)
  {
    int v11 = a5;
    uint64_t v12 = __n + 2;
    do
    {
      int v13 = cstdlib_memcmp(__src, v9 + 1, v10);
      if (v13)
      {
        if (v13 < 0) {
          goto LABEL_9;
        }
      }
      else if (*((unsigned char *)v9 + v12))
      {
LABEL_9:
        cstdlib_memmove((char *)v9 + *(unsigned __int16 *)(a1 + 178), v9, v11 * *(unsigned __int16 *)(a1 + 178));
        break;
      }
      int v9 = (_WORD *)((char *)v9 + *(unsigned __int16 *)(a1 + 178));
      --v11;
    }
    while (v11);
  }
  *int v9 = bswap32(a4) >> 16;
  int v14 = (char *)(v9 + 1);
  cstdlib_memcpy(v14, __src, v10);
  size_t v15 = *(unsigned __int16 *)(a1 + 178) - v6 - 2;

  return cstdlib_memset(&v14[v10], 0, v15);
}

unsigned __int8 *find_recurse(unsigned __int8 *result, int a2)
{
  while (2)
  {
    uint64_t v2 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        int v3 = result[1];
        goto LABEL_9;
      case '[':
      case '\\':
      case ']':
      case 'a':
        int v3 = result[3];
LABEL_9:
        uint64_t v5 = 2 * ((v3 - 15) < 2);
        goto LABEL_10;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'v':
        goto LABEL_15;
      case 'p':
        unsigned int v6 = *(unsigned __int16 *)(result + 1);
        goto LABEL_13;
      case 'u':
        return result;
      case 'w':
        unsigned int v6 = *(unsigned __int16 *)(result + 5);
LABEL_13:
        result += __rev16(v6);
        continue;
      default:
        if ((v2 - 150) <= 8 && ((1 << (v2 + 106)) & 0x155) != 0)
        {
          uint64_t v5 = result[1];
LABEL_10:
          result += v5 + _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (*result)
        {
LABEL_15:
          result += _pcre2_OP_lengths_8[v2];
          if (a2 && (v2 - 29) <= 0x37)
          {
            unsigned int v7 = *(result - 1);
            if (v7 >= 0xC0) {
              result += _pcre2_utf8_table4[v7 & 0x3F];
            }
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t is_anchored(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1;
  uint64_t v10 = (a4 + 1);
  for (uint64_t i = *a1; ; uint64_t i = 0x78u)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[i]], 0);
    uint64_t result = 0;
    unsigned int v14 = *significant_code;
    if (v14 > 0x5D)
    {
      switch(*significant_code)
      {
        case 0x7Eu:
          int v18 = significant_code;
          uint64_t v17 = a2;
          uint64_t v19 = a3;
          uint64_t v20 = a4;
          uint64_t v21 = 1;
          goto LABEL_16;
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
          return result;
        case 0x82u:
          int v18 = significant_code;
          uint64_t v17 = a2;
          uint64_t v19 = a3;
          uint64_t v20 = v10;
          goto LABEL_15;
        case 0x83u:
        case 0x84u:
        case 0x88u:
        case 0x89u:
          goto LABEL_13;
        case 0x85u:
        case 0x86u:
        case 0x8Au:
        case 0x8Bu:
          unsigned int v15 = __rev16(*(unsigned __int16 *)(significant_code + 3));
          if (v15 >= 0x20) {
            int v16 = 1;
          }
          else {
            int v16 = 1 << v15;
          }
          uint64_t v17 = v16 | a2;
          int v18 = significant_code;
          goto LABEL_14;
        case 0x87u:
        case 0x8Cu:
          if (significant_code[__rev16(*(unsigned __int16 *)(significant_code + 1))] != 120) {
            return 0;
          }
LABEL_13:
          int v18 = significant_code;
          uint64_t v17 = a2;
LABEL_14:
          uint64_t v19 = a3;
          uint64_t v20 = a4;
LABEL_15:
          uint64_t v21 = a5;
LABEL_16:
          uint64_t result = is_anchored(v18, v17, v19, v20, v21);
          if (!result) {
            return result;
          }
          goto LABEL_24;
        default:
          if (v14 == 94) {
            goto LABEL_19;
          }
          return result;
      }
    }
    if (v14 - 1 >= 2) {
      break;
    }
LABEL_24:
    v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
    if (*v9 != 120) {
      return 1;
    }
  }
  if (v14 - 85 >= 2)
  {
    if (v14 != 27) {
      return result;
    }
    goto LABEL_24;
  }
LABEL_19:
  if (significant_code[1] == 13)
  {
    uint64_t result = 0;
    if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0) {
      return result;
    }
    if (!(*(_DWORD *)(a3 + 288) | a5) && (*(unsigned char *)(a3 + 205) & 0x80) == 0) {
      goto LABEL_24;
    }
  }
  return 0;
}

uint64_t find_firstassertedcu(unsigned char *a1, int *a2, int a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = 0;
  int v7 = -1;
  *a2 = -1;
  for (char i = *a1 + 123; ; char i = -13)
  {
    uint64_t v9 = i > 6u ? 0 : qword_220722E40[i];
    significant_code = first_significant_code(&v5[v9 + 3], 1);
    unsigned int v11 = *significant_code;
    if (v11 > 0x35) {
      break;
    }
    if (*significant_code > 0x28u)
    {
      if (v11 - 48 >= 2)
      {
        if (v11 == 41)
        {
          significant_code += 2;
        }
        else if (v11 != 43)
        {
          return 0;
        }
LABEL_32:
        if (!a3) {
          return 0;
        }
        uint64_t v16 = significant_code[1];
        if (v7 < 0)
        {
          int v7 = 0;
LABEL_41:
          uint64_t v6 = v16;
          goto LABEL_42;
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (v11 - 35 < 2 || v11 == 29) {
        goto LABEL_32;
      }
      if (v11 != 30) {
        return 0;
      }
    }
LABEL_36:
    if (!a3) {
      return 0;
    }
    uint64_t v16 = significant_code[1];
    if (v7 < 0)
    {
      int v7 = 1;
      goto LABEL_41;
    }
LABEL_38:
    if (v6 != v16) {
      return 0;
    }
LABEL_42:
    v5 += __rev16(*(unsigned __int16 *)(v5 + 1));
    if (*v5 != 120)
    {
      *a2 = v7;
      return v6;
    }
  }
  if (v11 - 126 > 0xD || ((1 << (v11 - 126)) & 0x31F1) == 0)
  {
    if (v11 == 54)
    {
      significant_code += 2;
    }
    else if (v11 != 56)
    {
      return 0;
    }
    goto LABEL_36;
  }
  uint64_t firstassertedcu = find_firstassertedcu();
  if (v7 < 0)
  {
    uint64_t v6 = firstassertedcu;
    int v7 = 0;
    goto LABEL_42;
  }
  if (v6 == firstassertedcu && v7 == 0) {
    goto LABEL_42;
  }
  return 0;
}

uint64_t is_startline(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  uint64_t v10 = (a4 + 1);
  uint64_t v11 = *a1;
  while (2)
  {
    significant_code = first_significant_code(&v9[_pcre2_OP_lengths_8[v11]], 0);
    int v13 = *significant_code;
    if (v13 != 135) {
      goto LABEL_16;
    }
    unsigned int v15 = significant_code + 3;
    int v14 = significant_code[3];
    if (v14 == 119)
    {
      uint64_t v16 = __rev16(*((unsigned __int16 *)significant_code + 4));
      goto LABEL_7;
    }
    if (v14 == 118)
    {
      uint64_t v16 = 6;
LABEL_7:
      v15 += v16;
      int v14 = *v15;
    }
    unsigned int v17 = v14 - 141;
    BOOL v18 = v17 > 0x12;
    int v19 = (1 << v17) & 0x4003F;
    if (!v18 && v19 != 0) {
      return 0;
    }
    uint64_t result = is_startline(v15, a2, a3, a4, 1);
    if (!result) {
      return result;
    }
    do
      v15 += __rev16(*(unsigned __int16 *)(v15 + 1));
    while (*v15 == 120);
    significant_code = first_significant_code(v15 + 3, 0);
    int v13 = *significant_code;
LABEL_16:
    switch(v13)
    {
      case 126:
        uint64_t v22 = a2;
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        uint64_t v27 = 1;
        goto LABEL_24;
      case 127:
      case 128:
      case 129:
      case 135:
        goto LABEL_35;
      case 130:
        uint64_t v22 = a2;
        uint64_t v25 = a3;
        uint64_t v26 = v10;
        goto LABEL_23;
      case 131:
      case 132:
      case 136:
      case 137:
        uint64_t v22 = a2;
        goto LABEL_22;
      case 133:
      case 134:
      case 138:
      case 139:
        unsigned int v23 = __rev16(*(unsigned __int16 *)(significant_code + 3));
        if (v23 >= 0x20) {
          int v24 = 1;
        }
        else {
          int v24 = 1 << v23;
        }
        uint64_t v22 = v24 | a2;
LABEL_22:
        uint64_t v25 = a3;
        uint64_t v26 = a4;
LABEL_23:
        uint64_t v27 = a5;
LABEL_24:
        uint64_t result = is_startline(significant_code, v22, v25, v26, v27);
        if (result) {
          goto LABEL_25;
        }
        return result;
      default:
        if ((v13 - 85) < 2 || v13 == 94)
        {
          if (significant_code[1] != 12) {
            return 0;
          }
          uint64_t result = 0;
          if ((int)a4 > 0 || (*(_DWORD *)(a3 + 252) & a2) != 0) {
            return result;
          }
          if (*(_DWORD *)(a3 + 288) | a5 || (*(unsigned char *)(a3 + 205) & 0x80) != 0) {
            return 0;
          }
        }
        else
        {
LABEL_35:
          if ((v13 - 29) < 0xFFFFFFFE) {
            return 0;
          }
        }
LABEL_25:
        v9 += __rev16(*(unsigned __int16 *)(v9 + 1));
        uint64_t v11 = 0x78u;
        if (*v9 == 120) {
          continue;
        }
        uint64_t result = 1;
        break;
    }
    return result;
  }
}

_DWORD *manage_callouts(int a1, void *a2, int a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = (_DWORD *)*a2;
  if (*a2) {
    v5[2] = a1 - *(_DWORD *)(a5 + 56) - v5[1];
  }
  if (a3)
  {
    if (v5) {
      BOOL v6 = v5 == a4 - 4;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6 && v5[3] == 255)
    {
      int v7 = a4;
      a4 = v5;
    }
    else
    {
      int v7 = a4 + 4;
      *a4 = -2147090432;
      *((void *)a4 + 1) = 0xFF00000000;
    }
    int v8 = a4;
    a4[1] = a1 - *(_DWORD *)(a5 + 56);
    a4 = v7;
  }
  else
  {
    int v8 = 0;
  }
  *a2 = v8;
  return a4;
}

uint64_t get_ucp(unint64_t *a1, _DWORD *a2, _WORD *a3, _WORD *a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v7 = (unsigned char *)*a1;
  int v8 = (unsigned char *)*a1;
  unint64_t v9 = *(void *)(a6 + 64);
  if (*a1 >= v9) {
    goto LABEL_14;
  }
  unsigned int v13 = *v8++;
  uint64_t v12 = v13;
  *a2 = 0;
  if (v13 == 123)
  {
    if ((unint64_t)v8 < v9)
    {
      if (*v8 == 94)
      {
        *a2 = 1;
        int v8 = v7 + 2;
      }
      if ((unint64_t)v8 < v9)
      {
        unint64_t v14 = 0;
        while (1)
        {
          unsigned int v15 = &v8[v14];
          unint64_t v16 = (unint64_t)&v8[v14 + 1];
          int v17 = v8[v14];
          if (!v8[v14])
          {
LABEL_12:
            int v8 = v15 + 1;
            goto LABEL_14;
          }
          if (v17 == 125) {
            break;
          }
          v25[v14] = v17;
          if (v14 <= 0x1D)
          {
            ++v14;
            if (v16 < v9) {
              continue;
            }
          }
          goto LABEL_12;
        }
        v8 += v14 + 1;
        goto LABEL_17;
      }
    }
LABEL_14:
    uint64_t v18 = 0;
    *a5 = 146;
    *a1 = (unint64_t)v8;
    return v18;
  }
  if ((*(unsigned char *)(*(void *)(a6 + 32) + v12) & 2) == 0) {
    goto LABEL_14;
  }
  v25[0] = v12;
  unint64_t v14 = 1;
LABEL_17:
  v25[v14] = 0;
  *a1 = (unint64_t)v8;
  unint64_t v20 = 192;
  unint64_t v21 = 0;
  while (1)
  {
    unint64_t v22 = (v20 + v21) >> 1;
    int v23 = _pcre2_strcmp_c8_8(v25, (unsigned __int8 *)&_pcre2_utt_names_8[_pcre2_utt_8[3 * v22]]);
    if (!v23) {
      break;
    }
    if (v23 <= 0) {
      unint64_t v20 = (v20 + v21) >> 1;
    }
    else {
      unint64_t v21 = v22 + 1;
    }
    if (v21 >= v20)
    {
      uint64_t v18 = 0;
      *a5 = 147;
      return v18;
    }
  }
  int v24 = (char *)&_pcre2_utt_8[3 * v22];
  *a3 = *((_WORD *)v24 + 1);
  *a4 = *((_WORD *)v24 + 2);
  return 1;
}

uint64_t read_name(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 a3, void *a4, void *a5, _DWORD *a6, int *a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t)*a1;
  unint64_t v9 = *a1 + 1;
  int v10 = **a1;
  if (v10 == 42) {
    char v11 = 2;
  }
  else {
    char v11 = 16;
  }
  if (v9 >= a2)
  {
    uint64_t v12 = 0;
    if (v10 == 42) {
      int v13 = 160;
    }
    else {
      int v13 = 162;
    }
    goto LABEL_10;
  }
  *a5 = v9;
  *a4 = &v9[-*(void *)(a8 + 56)];
  if (*v9 - 48 >= 0xA)
  {
    uint64_t v15 = 0;
    uint64_t v12 = (~v8 + a2);
    unint64_t v16 = (unsigned __int8 *)(v8 + 34);
    while (1)
    {
      int v17 = &v9[v15];
      if (&v9[v15] >= a2)
      {
        unint64_t v9 = a2;
        goto LABEL_19;
      }
      if ((v11 & *(unsigned char *)(*(void *)(a8 + 32) + *v17)) == 0) {
        break;
      }
      if (++v15 == 33)
      {
        uint64_t v12 = 0;
        *a7 = 148;
        unint64_t v9 = v16;
        goto LABEL_11;
      }
    }
    v9 += v15;
    uint64_t v12 = v15;
LABEL_19:
    if (v10 != 42)
    {
      if (!v12)
      {
        int v13 = 162;
        goto LABEL_10;
      }
      if (v17 >= a2 || *v9 != a3)
      {
        uint64_t v12 = 0;
        int v13 = 142;
        goto LABEL_10;
      }
      ++v9;
    }
    *a6 = v12;
    uint64_t v12 = 1;
    goto LABEL_11;
  }
  uint64_t v12 = 0;
  int v13 = 144;
LABEL_10:
  *a7 = v13;
LABEL_11:
  *a1 = v9;
  return v12;
}

uint64_t check_posix_syntax(unsigned __int8 *a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned int v4 = a1 + 1;
  int v3 = *a1;
  if (a2 - (uint64_t)(a1 + 1) < 2) {
    return 0;
  }
  while (1)
  {
    int v5 = a1[1];
    if (v5 == 91) {
      break;
    }
    if (v5 != 92)
    {
      if (v5 == 93) {
        return 0;
      }
      goto LABEL_10;
    }
    if ((a1[2] & 0xFE) != 0x5C) {
      goto LABEL_10;
    }
    unsigned int v4 = a1 + 2;
LABEL_12:
    a1 = v4++;
    if (a2 - (uint64_t)v4 <= 1) {
      return 0;
    }
  }
  if (a1[2] == v3) {
    return 0;
  }
LABEL_10:
  if (v5 != v3 || a1[2] != 93) {
    goto LABEL_12;
  }
  *a3 = v4;
  return 1;
}

uint64_t check_posix_name(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2;
  BOOL v6 = "alpha";
  while (1)
  {
    uint64_t v7 = posix_name_lengths[v4];
    if (v7 == a2 && !_pcre2_strncmp_c8_8(a1, v6, v5)) {
      break;
    }
    v6 += v7 + 1;
    if (++v4 == 14) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t set_lookbehind_lengths(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a1;
  char v11 = *a1 + 2;
  unint64_t v12 = *v11 | ((unint64_t)(*a1)[1] << 32);
  while (1)
  {
    *a1 = v11 + 1;
    int branchlength = get_branchlength(a1, a2, a3, a4, a5);
    if (branchlength < 0) {
      break;
    }
    *v10 |= branchlength;
    char v11 = *a1;
    int v10 = *a1;
    if (**a1 != -2147418112) {
      return 1;
    }
  }
  if (!*a2) {
    *a2 = 125;
  }
  uint64_t result = 0;
  if (*(void *)(a5 + 168) == -1) {
    *(void *)(a5 + 168) = v12;
  }
  return result;
}

uint64_t get_branchlength(unsigned int **a1, int *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  BOOL v6 = a1;
  uint64_t v7 = *a1;
  unsigned __int16 v55 = v7;
  int v8 = (*a3)++;
  if (v8 > 2000)
  {
    int v9 = 135;
    goto LABEL_87;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  while (2)
  {
    uint64_t v52 = 0;
    unsigned int v15 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
LABEL_5:
      int grouplength = 1;
      goto LABEL_6;
    }
    unsigned int v17 = v15 & 0xFFFF0000;
    int v18 = 0;
    int grouplength = 0;
    switch(((v15 & 0xFFFF0000) + 2147418112) >> 16)
    {
      case 0u:
      case 0x18u:
        goto LABEL_82;
      case 1u:
      case 0x19u:
        goto LABEL_38;
      case 2u:
        if ((*(unsigned char *)(a5 + 205) & 2) != 0 || (*(unsigned char *)(a5 + 210) & 0x20) != 0) {
          goto LABEL_86;
        }
        uint64_t v29 = (unsigned __int16)*v7;
        if ((unsigned __int16)*v7 > 9u) {
          goto LABEL_52;
        }
        unint64_t v30 = *(void *)(a5 + 8 * v29 + 88);
        goto LABEL_53;
      case 3u:
        if ((*(unsigned char *)(a5 + 205) & 2) == 0) {
          goto LABEL_28;
        }
        goto LABEL_86;
      case 4u:
        goto LABEL_49;
      case 5u:
        goto LABEL_73;
      case 6u:
        int grouplength = 0;
        unint64_t v20 = v7 + 5;
        goto LABEL_74;
      case 7u:
        int v18 = (unsigned __int16)*v7;
        goto LABEL_38;
      case 8u:
      case 0x15u:
      case 0x28u:
      case 0x2Au:
      case 0x2Cu:
      case 0x2Eu:
        goto LABEL_6;
      case 9u:
      case 0xDu:
        int grouplength = 1;
        unsigned __int16 v55 = parsed_skip(v7, 1);
        if (v55) {
          goto LABEL_6;
        }
        goto LABEL_84;
      case 0xBu:
      case 0x16u:
        goto LABEL_5;
      case 0xEu:
        int v18 = 0;
LABEL_38:
        int v19 = v7 + 1;
        goto LABEL_39;
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
        int v18 = 0;
        int v19 = v7 + 4;
LABEL_39:
        unsigned __int16 v55 = v19;
        int grouplength = get_grouplength(&v55, 1, (uint64_t)a2, (uint64_t)a3, v18, a4, a5);
        if (grouplength < 0) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_6;
      case 0x17u:
        int v39 = (unsigned __int16)*v7;
        if (v39 == 17 || v39 == 22) {
          return 0xFFFFFFFFLL;
        }
        if ((v39 - 6) > 0x10) {
          goto LABEL_22;
        }
        if (v39 == 14 && (*(_DWORD *)(a5 + 204) & 0x80000) != 0)
        {
          int v9 = 136;
          goto LABEL_87;
        }
        if ((v39 - 15) <= 1) {
LABEL_49:
        }
          unsigned __int16 v55 = v7 + 1;
        goto LABEL_5;
      case 0x1Au:
        int grouplength = 0;
        unint64_t v20 = v7 + 1;
        goto LABEL_74;
      case 0x1Fu:
        LODWORD(v29) = (unsigned __int16)*v7;
LABEL_52:
        unsigned int v42 = v7[2];
        unsigned int v41 = v7 + 2;
        unint64_t v30 = v42 | ((unint64_t)*(v41 - 1) << 32);
        unsigned __int16 v55 = v41;
        goto LABEL_53;
      case 0x20u:
LABEL_28:
        uint64_t v50 = a4;
        uint64_t v51 = v6;
        unsigned int v32 = v7[3];
        int v31 = v7 + 3;
        uint64_t v33 = *(void *)(a5 + 192);
        uint64_t v34 = *(v31 - 2);
        unint64_t v30 = v32 | ((unint64_t)*(v31 - 1) << 32);
        unsigned __int16 v55 = v31;
        unsigned __int16 v35 = *(_WORD *)(a5 + 176);
        if (!v35) {
          goto LABEL_79;
        }
        unsigned int v36 = 0;
        int v37 = (unsigned __int8 *)(*(void *)(a5 + 56) + v30);
        uint64_t v38 = (unsigned __int16 *)(v33 + 14);
        while (2)
        {
          if (v34 != *(v38 - 1)) {
            goto LABEL_33;
          }
          if (_pcre2_strncmp_8(v37, *(unsigned __int8 **)(v38 - 7), v34))
          {
            unsigned __int16 v35 = *(_WORD *)(a5 + 176);
LABEL_33:
            ++v36;
            v38 += 8;
            if (v36 >= v35) {
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        LODWORD(v29) = *(_DWORD *)(v38 - 3);
        if (!v29)
        {
LABEL_79:
          *a2 = 115;
          *(void *)(a5 + 168) = v30;
          return 0xFFFFFFFFLL;
        }
        if (v17 == -2145320960)
        {
          a4 = v50;
          BOOL v6 = v51;
        }
        else
        {
          int v48 = *v38;
          a4 = v50;
          BOOL v6 = v51;
          if (v48 || (*(unsigned char *)(a5 + 210) & 0x20) != 0) {
            goto LABEL_86;
          }
        }
LABEL_53:
        if (v29 > *(_DWORD *)(a5 + 212))
        {
          *(void *)(a5 + 168) = v30;
          int v9 = 115;
          goto LABEL_87;
        }
        if (!v29) {
          goto LABEL_86;
        }
        unsigned int v43 = *(unsigned int **)(a5 + 224);
        unsigned int v44 = *v43;
        if (*v43 != 0x80000000)
        {
          do
          {
            if ((v44 & 0xFFFF0000) == 0x80050000)
            {
              ++v43;
            }
            else if (v44 == (v29 | 0x80080000))
            {
              break;
            }
            unsigned int v45 = v43[1];
            ++v43;
            unsigned int v44 = v45;
          }
          while (v45 != 0x80000000);
        }
        uint64_t v52 = v43;
        char v46 = parsed_skip(v43 + 1, 2);
        if (!v46)
        {
LABEL_84:
          int v9 = 190;
          goto LABEL_87;
        }
        if (v55 > v43 && v55 < v46) {
          goto LABEL_86;
        }
        if (!a4)
        {
LABEL_67:
          uint64_t v53 = a4;
          uint64_t v54 = v43;
          uint64_t v52 = v43 + 1;
          int grouplength = get_grouplength(&v52, 0, (uint64_t)a2, (uint64_t)a3, v29, (uint64_t)&v53, a5);
          if (grouplength < 0)
          {
            if (!*a2) {
              goto LABEL_86;
            }
            return 0xFFFFFFFFLL;
          }
LABEL_6:
          uint64_t v13 = (grouplength + v13);
          if ((int)v13 >= 0x10000)
          {
            int v9 = 187;
            goto LABEL_87;
          }
          uint64_t v7 = ++v55;
          int v14 = grouplength;
          continue;
        }
        uint64_t v47 = (void *)a4;
        while ((unsigned int *)v47[1] != v43)
        {
          uint64_t v47 = (void *)*v47;
          if (!v47) {
            goto LABEL_67;
          }
        }
LABEL_86:
        int v9 = 125;
LABEL_87:
        *a2 = v9;
        return 0xFFFFFFFFLL;
      case 0x21u:
      case 0x22u:
        uint64_t v7 = parsed_skip(v7 + 1, 2);
        unsigned __int16 v55 = v7;
        if (!v7) {
          goto LABEL_84;
        }
        unint64_t v20 = v7 + 1;
        HIDWORD(v26) = v7[1];
        LODWORD(v26) = HIDWORD(v26) + 2144272384;
        unsigned int v25 = v26 >> 16;
        BOOL v27 = v25 >= 9;
        unsigned int v28 = v25 - 9;
        if (v27)
        {
          if (v28 >= 3)
          {
LABEL_22:
            int grouplength = 0;
            goto LABEL_6;
          }
LABEL_73:
          int grouplength = 0;
          unint64_t v20 = v7 + 3;
        }
        else
        {
          int grouplength = 0;
        }
LABEL_74:
        unsigned __int16 v55 = v20;
        goto LABEL_6;
      case 0x23u:
      case 0x24u:
        if (!set_lookbehind_lengths(&v55, a2, a3, a4, a5)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_22;
      case 0x25u:
      case 0x29u:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Fu:
        int grouplength = 0;
        unint64_t v20 = &v7[v7[1] + 1];
        goto LABEL_74;
      case 0x26u:
      case 0x27u:
        uint64_t v7 = parsed_skip(v7, 0);
        if (!v7) {
          goto LABEL_84;
        }
LABEL_82:
        *BOOL v6 = v7;
        if ((int)v13 > *(_DWORD *)(a5 + 276)) {
          *(_DWORD *)(a5 + 276) = v13;
        }
        return v13;
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
        unsigned int v22 = v7[2];
        unint64_t v21 = v7 + 2;
        int v23 = *(v21 - 1);
        if (v23 != v22) {
          goto LABEL_86;
        }
        int v24 = (v23 - 1) * v14;
        if (v23)
        {
          int v14 = 0;
          int grouplength = v24;
        }
        else
        {
          int grouplength = 0;
        }
        LODWORD(v13) = v13 - v14;
        unsigned __int16 v55 = v21;
        goto LABEL_6;
      default:
        goto LABEL_86;
    }
  }
}

unsigned int *parsed_skip(unsigned int *a1, int a2)
{
  int v2 = 0;
  while (2)
  {
    unint64_t v3 = *a1;
    uint64_t v4 = 0;
    switch(WORD1(v3) ^ 0x8000)
    {
      case 0:
        return v4;
      case 1:
        uint64_t v4 = a1;
        if (v2 | a2) {
          goto LABEL_5;
        }
        return v4;
      case 2:
      case 8:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x1A:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
        ++v2;
        goto LABEL_5;
      case 3:
        a1 += 2 * ((*a1 & 0xFFFE) > 9);
        goto LABEL_5;
      case 0xD:
        uint64_t v4 = a1;
        if (a2 == 1) {
          return v4;
        }
        goto LABEL_5;
      case 0x18:
        BOOL v6 = a1 + 1;
        if ((unsigned __int16)*a1 - 15 > 1) {
          BOOL v6 = a1;
        }
        if ((unsigned __int16)*a1 - 27 >= 2) {
          a1 = v6;
        }
        else {
          a1 += 3;
        }
        goto LABEL_5;
      case 0x19:
        if (!v2) {
          return a1;
        }
        --v2;
LABEL_5:
        uint64_t v5 = (v3 >> 16) & 0x7FFF;
        if (v5 <= 0x3C)
        {
          a1 += meta_extra_lengths[v5];
LABEL_7:
          ++a1;
          continue;
        }
        return 0;
      case 0x26:
      case 0x2A:
      case 0x2C:
      case 0x2E:
      case 0x30:
        a1 += a1[1];
        goto LABEL_5;
      default:
        if ((v3 & 0x80000000) != 0) {
          goto LABEL_5;
        }
        goto LABEL_7;
    }
  }
}

uint64_t get_grouplength(unsigned int **a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a5 < 1 || (*(unsigned char *)(a7 + 210) & 0x20) != 0) {
    goto LABEL_5;
  }
  LODWORD(v13) = *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5);
  if ((v13 & 0x40000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v13 & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t branchlength = get_branchlength(a1, a3, a4, a6, a7);
    if ((branchlength & 0x80000000) == 0)
    {
      int v15 = -1;
      do
      {
        uint64_t v13 = branchlength;
        if (v15 != -1 && v15 != branchlength) {
          break;
        }
        if (**a1 == -2145845248)
        {
          if (a5 >= 1) {
            *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5) |= branchlength | 0x80000000;
          }
          return v13;
        }
        ++*a1;
        uint64_t branchlength = get_branchlength(a1, a3, a4, a6, a7);
        int v15 = v13;
      }
      while ((branchlength & 0x80000000) == 0);
    }
    if (a5 >= 1) {
      *(_DWORD *)(*(void *)(a7 + 240) + 4 * a5) |= 0x40000000u;
    }
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    *a1 = parsed_skip(*a1, 2);
  }
  return (unsigned __int16)v13;
}

uint64_t add_list_to_class(uint64_t result, unsigned char **a2, int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5 = *a5;
  if (*a5 != -1)
  {
    uint64_t v9 = result;
    do
    {
      unsigned int v10 = -1;
      do
      {
        uint64_t v11 = v10 + 2;
        ++v10;
      }
      while (v5 + v10 + 1 == a5[v11]);
      unint64_t v12 = &a5[v11];
      *(_DWORD *)(a4 + 264) = v5;
      *(_DWORD *)(a4 + 268) = a5[v10];
      uint64_t result = add_to_class_internal(v9, a2, a3, a4, *a5, a5[v10], *a5);
      unsigned int v5 = *v12;
      a5 = v12;
    }
    while (*v12 != -1);
  }
  return result;
}

uint64_t add_not_list_to_class(uint64_t a1, unsigned char **a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10 = *a5;
  if (!v10
    || (*(_DWORD *)(a4 + 264) = 0,
        *(_DWORD *)(a4 + 268) = v10 - 1,
        uint64_t result = add_to_class_internal(a1, a2, a3, a4, 0, (int)v10 - 1, v10),
        LODWORD(v10) = *a5,
        *a5 != -1))
  {
    if ((a3 & 0x80000) != 0) {
      int v12 = 1114111;
    }
    else {
      int v12 = -1;
    }
    for (char i = a5 + 1; ; ++i)
    {
      int v14 = *i;
      unsigned int v15 = v10 + 1;
      if (*i != v10 + 1)
      {
        unsigned int v16 = v14 == -1 ? v12 : v14 - 1;
        *(_DWORD *)(a4 + 264) = v15;
        *(_DWORD *)(a4 + 268) = v16;
        uint64_t result = add_to_class_internal(a1, a2, a3, a4, v15, v16, (v14 - 1));
        int v14 = *i;
        if (*i == -1) {
          break;
        }
      }
      LODWORD(v10) = v14;
    }
  }
  return result;
}

uint64_t find_dupname_details(unsigned __int8 *a1, unsigned int a2, unsigned int *a3, int *a4, _DWORD *a5, uint64_t a6)
{
  int v12 = *(unsigned __int8 **)(a6 + 72);
  unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
  if (*(_WORD *)(a6 + 176))
  {
    unsigned int v14 = 0;
    uint64_t v15 = a2 + 2;
    while (_pcre2_strncmp_8(a1, v12 + 2, a2) || v12[v15])
    {
      v12 += *(unsigned __int16 *)(a6 + 178);
      ++v14;
      unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
      if (v14 >= v13) {
        goto LABEL_9;
      }
    }
    unsigned int v13 = *(unsigned __int16 *)(a6 + 176);
  }
  else
  {
    unsigned int v14 = 0;
  }
LABEL_9:
  if (v14 >= v13)
  {
    uint64_t result = 0;
    *a5 = 153;
    *(void *)(a6 + 168) = &a1[-*(void *)(a6 + 56)];
  }
  else
  {
    *a3 = v14;
    int v16 = 1;
    do
    {
      int v17 = v16;
      unsigned int v18 = __rev16(*(unsigned __int16 *)v12);
      int v19 = 1 << v18;
      if (v18 >= 0x20) {
        int v19 = 1;
      }
      unsigned int v20 = *(_DWORD *)(a6 + 248);
      *(_DWORD *)(a6 + 252) |= v19;
      if (v18 > v20) {
        *(_DWORD *)(a6 + 248) = v18;
      }
      if (v14 + v17 >= *(unsigned __int16 *)(a6 + 176)) {
        break;
      }
      v12 += *(unsigned __int16 *)(a6 + 178);
      if (_pcre2_strncmp_8(a1, v12 + 2, a2)) {
        break;
      }
      int v16 = v17 + 1;
    }
    while (!v12[a2 + 2]);
    *a4 = v17;
    return 1;
  }
  return result;
}

uint64_t add_to_class_internal@<X0>(uint64_t a1@<X0>, unsigned char **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v7 = a6;
  unsigned int v8 = a5;
  LODWORD(v10) = a3;
  if (a6 >= 0xFF) {
    unsigned int v12 = 255;
  }
  else {
    unsigned int v12 = a6;
  }
  if ((a3 & 8) == 0) {
    goto LABEL_7;
  }
  if ((a3 & 0x80000) != 0)
  {
    uint64_t v13 = 0;
    uint64_t v10 = a3 & 0xFFFFFFF7;
    unsigned int v14 = a5;
LABEL_9:
    unsigned int v38 = v14 - 1;
    unsigned int v41 = v14;
LABEL_10:
    unsigned int v39 = v7 + 1;
    unsigned int v42 = v7;
    while (v8 <= v7)
    {
      signed int v15 = v8;
      while (1)
      {
        int v16 = &_pcre2_ucd_records_8[2
                                  * _pcre2_ucd_stage2_8[(int)(v15
                                                            - (a7 & 0xFFFFFF80)
                                                            + (_pcre2_ucd_stage1_8[v15 / 128] << 7))]];
        a7 = *((unsigned __int8 *)v16 + 3);
        if (*((unsigned char *)v16 + 3))
        {
          unsigned int v8 = v15 + 1;
          int v17 = (int *)((char *)&_pcre2_ucd_caseless_sets_8 + 4 * a7);
          int v18 = *v17;
          if (*v17 == -1)
          {
            int v19 = 0;
          }
          else
          {
            unsigned int v40 = v12;
            int v19 = 0;
            do
            {
              if (v18 == v15)
              {
                int v20 = 0;
                int v18 = v17[1];
              }
              else
              {
                int v20 = -1;
                do
                {
                  int v21 = v17[v20 + 2];
                  ++v20;
                }
                while (v18 + v20 + 1 == v21);
                v19 += add_to_class_internal(a1, a2, v10, a4);
                int v18 = v21;
              }
              v17 += (v20 + 1);
            }
            while (v18 != -1);
            unsigned int v12 = v40;
          }
          goto LABEL_40;
        }
        LODWORD(a7) = v16[1];
        if (a7) {
          break;
        }
        if (++v15 > v7) {
          goto LABEL_48;
        }
      }
      unsigned int v22 = v15 + 1;
      unsigned int v23 = v15 + a7;
      do
      {
        unsigned int v24 = v23;
        unsigned int v8 = v22;
        if (v22 > v7) {
          break;
        }
        int v25 = v22 + 127;
        if ((v8 & 0x80000000) == 0) {
          int v25 = v8;
        }
        unint64_t v26 = &_pcre2_ucd_records_8[2
                                  * _pcre2_ucd_stage2_8[v8 - (v25 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v25 >> 7] << 7)]];
        if (*((unsigned char *)v26 + 3)) {
          break;
        }
        ++v23;
        int v27 = v26[1];
        unsigned int v22 = v8 + 1;
      }
      while (v23 == v27 + v8);
      if ((v15 + a7) < *(_DWORD *)(a4 + 264) || v24 > *(_DWORD *)(a4 + 268))
      {
        if (v15 + (int)a7 < v14 && v24 >= v38)
        {
          unsigned int v14 = v15 + a7;
          goto LABEL_9;
        }
        if (v24 <= v7 || v15 + (int)a7 > v39)
        {
          int v19 = add_to_class_internal(a1, a2, v10, a4);
LABEL_40:
          uint64_t v13 = (v19 + v13);
          unsigned int v14 = v41;
          unsigned int v7 = v42;
          continue;
        }
        if (v24 >= 0xFF) {
          LODWORD(a7) = 255;
        }
        else {
          LODWORD(a7) = v24;
        }
        if (v24 > v12) {
          unsigned int v12 = a7;
        }
        unsigned int v7 = v24;
        goto LABEL_10;
      }
    }
LABEL_48:
    unsigned int v8 = v14;
  }
  else
  {
    if (v12 < a5)
    {
LABEL_7:
      uint64_t v13 = 0;
      goto LABEL_52;
    }
    uint64_t v28 = a5;
    uint64_t v29 = v12 + 1;
    do
    {
      unint64_t v30 = *(unsigned __int8 *)(*(void *)(a4 + 16) + v28);
      *(unsigned char *)(a1 + (v30 >> 3)) |= 1 << (v30 & 7);
      ++v28;
    }
    while (v29 != v28);
    uint64_t v13 = v29 - a5;
  }
LABEL_52:
  if (v7 > 0xFF && (v10 & 0x80000) == 0) {
    unsigned int v32 = 255;
  }
  else {
    unsigned int v32 = v7;
  }
  if (v8 <= *(_DWORD *)(a4 + 264) || v32 >= *(_DWORD *)(a4 + 268))
  {
    if (v8 <= v12)
    {
      unsigned int v33 = v8;
      do
      {
        *(unsigned char *)(a1 + ((unint64_t)v33 >> 3)) |= 1 << (v33 & 7);
        uint64_t v13 = (v13 + 1);
        ++v33;
      }
      while (v33 <= v12);
    }
    unsigned int v34 = v8 <= 0x100 ? 256 : v8;
    if (v32 >= v34)
    {
      unsigned __int16 v35 = *a2;
      if ((v10 & 0x80000) != 0)
      {
        if (v34 < v7)
        {
          *unsigned __int16 v35 = 2;
          uint64_t v36 = (uint64_t)&v35[_pcre2_ord2utf_8(v34, (uint64_t)(v35 + 1)) + 1];
LABEL_72:
          unsigned __int16 v35 = (unsigned char *)(v36 + _pcre2_ord2utf_8(v7, v36));
          goto LABEL_73;
        }
        if (v34 == v7)
        {
          *unsigned __int16 v35 = 1;
          uint64_t v36 = (uint64_t)(v35 + 1);
          goto LABEL_72;
        }
      }
LABEL_73:
      *a2 = v35;
    }
  }
  return v13;
}

unsigned __int8 *first_significant_code(unsigned __int8 *result, int a2)
{
  while (2)
  {
    uint64_t v2 = *result;
    switch(*result)
    {
      case 0x76u:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
        goto LABEL_7;
      case 0x77u:
        result += __rev16(*(unsigned __int16 *)(result + 5));
        continue;
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
        return result;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
        if (!a2) {
          return result;
        }
        do
        {
          result += __rev16(*(unsigned __int16 *)(result + 1));
          uint64_t v2 = *result;
        }
        while (v2 == 120);
        goto LABEL_7;
      case 0x87u:
      case 0x8Cu:
        if (result[3] != 145) {
          return result;
        }
        unsigned int v3 = __rev16(*(unsigned __int16 *)(result + 1));
        if (result[v3] != 121) {
          return result;
        }
        result += v3 + 3;
        continue;
      default:
        if ((v2 - 4) < 2)
        {
          if (!a2) {
            return result;
          }
LABEL_7:
          result += _pcre2_OP_lengths_8[v2];
          continue;
        }
        if (v2 == 163)
        {
          result += __rev16(*((unsigned __int16 *)result + 1)) + 4;
          continue;
        }
        return result;
    }
  }
}

uint64_t pcre2_config_8(int a1, unsigned char *a2)
{
  uint64_t result = 4294967262;
  if (a2)
  {
    switch(a1)
    {
      case 0:
      case 9:
      case 14:
        uint64_t result = 0;
        int v6 = 1;
        goto LABEL_19;
      case 1:
      case 8:
      case 13:
        uint64_t result = 0;
        *(_DWORD *)a2 = 0;
        return result;
      case 3:
      case 5:
        uint64_t result = 0;
        int v6 = 2;
        goto LABEL_19;
      case 4:
      case 7:
        uint64_t result = 0;
        int v6 = 10000000;
        goto LABEL_19;
      case 6:
        uint64_t result = 0;
        int v6 = 250;
        goto LABEL_19;
      case 10:
        unsigned int v7 = _pcre2_unicode_version_8;
        goto LABEL_17;
      case 11:
        unsigned int v7 = "10.32 2018-09-10";
LABEL_17:
        unsigned int v8 = _pcre2_strcpy_c8_8(a2, v7);
        return v8 + 1;
      case 12:
        uint64_t result = 0;
        int v6 = 20000000;
LABEL_19:
        *(_DWORD *)a2 = v6;
        return result;
      default:
        return result;
    }
  }
  if (!(!v3 & v2))
  {
    if (((1 << a1) & 0x73FB) != 0) {
      return 4;
    }
    if (a1 == 10)
    {
      uint64_t v9 = _pcre2_unicode_version_8;
    }
    else
    {
      if (a1 != 11) {
        return result;
      }
      uint64_t v9 = "10.32 2018-09-10";
    }
    unsigned int v8 = cstdlib_strlen(v9);
    return v8 + 1;
  }
  return result;
}

void *_pcre2_memctl_malloc_8(size_t a1, long long *a2)
{
  if (a2)
  {
    uint64_t result = (void *)(*(uint64_t (**)(size_t, void))a2)(a1, *((void *)a2 + 2));
    if (result)
    {
      long long v4 = *a2;
      result[2] = *((void *)a2 + 2);
      *(_OWORD *)uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = malloc(a1);
    if (result)
    {
      *uint64_t result = default_malloc;
      result[1] = default_free;
      result[2] = 0;
    }
  }
  return result;
}

void *(__cdecl **pcre2_general_context_create_8(void *(__cdecl *a1)(size_t __size), void (__cdecl *a2)(void *), void *(__cdecl *a3)(size_t __size)))(size_t __size)
{
  if (a1)
  {
    unsigned int v5 = a1;
    uint64_t result = (void *(__cdecl **)(size_t))((uint64_t (*)(uint64_t, void *(__cdecl *)(size_t)))a1)(24, a3);
  }
  else
  {
    unsigned int v5 = default_malloc;
    uint64_t result = (void *(__cdecl **)(size_t))((uint64_t (*)(uint64_t, void *(__cdecl *)(size_t)))default_malloc)(24, a3);
  }
  if (result)
  {
    if (a2) {
      unsigned int v7 = a2;
    }
    else {
      unsigned int v7 = default_free;
    }
    *uint64_t result = v5;
    result[1] = (void *(__cdecl *)(size_t))v7;
    result[2] = a3;
  }
  return result;
}

__n128 pcre2_compile_context_create_8(uint64_t a1)
{
  char v2 = _pcre2_memctl_malloc_8(0x48uLL, (long long *)a1);
  if (v2)
  {
    long long v4 = unk_26D213498;
    *((_OWORD *)v2 + 2) = xmmword_26D213488;
    *((_OWORD *)v2 + 3) = v4;
    v2[8] = qword_26D2134A8;
    __n128 result = (__n128)unk_26D213478;
    *(_OWORD *)char v2 = _pcre2_default_compile_context_8;
    *((__n128 *)v2 + 1) = result;
    if (a1)
    {
      __n128 result = *(__n128 *)a1;
      v2[2] = *(void *)(a1 + 16);
      *(__n128 *)char v2 = result;
    }
  }
  return result;
}

__n128 pcre2_match_context_create_8(uint64_t a1)
{
  char v2 = _pcre2_memctl_malloc_8(0x40uLL, (long long *)a1);
  if (v2)
  {
    long long v4 = unk_26D2134C0;
    *char v2 = _pcre2_default_match_context_8;
    v2[1] = v4;
    result.n128_u64[0] = xmmword_26D2134D0;
    long long v5 = *(_OWORD *)&dword_26D2134E0;
    v2[2] = xmmword_26D2134D0;
    v2[3] = v5;
    if (a1)
    {
      __n128 result = *(__n128 *)a1;
      *((void *)v2 + 2) = *(void *)(a1 + 16);
      *char v2 = result;
    }
  }
  return result;
}

__n128 pcre2_convert_context_create_8(uint64_t a1)
{
  char v2 = _pcre2_memctl_malloc_8(0x20uLL, (long long *)a1);
  if (v2)
  {
    result.n128_u64[0] = _pcre2_default_convert_context_8;
    long long v4 = unk_26D213500;
    *char v2 = _pcre2_default_convert_context_8;
    v2[1] = v4;
    if (a1)
    {
      __n128 result = *(__n128 *)a1;
      *((void *)v2 + 2) = *(void *)(a1 + 16);
      *char v2 = result;
    }
  }
  return result;
}

void *pcre2_general_context_copy_8(void *a1)
{
  char v2 = (void *)((uint64_t (*)(uint64_t, void))*a1)(24, a1[2]);
  char v3 = v2;
  if (v2) {
    cstdlib_memcpy(v2, a1, 0x18uLL);
  }
  return v3;
}

void *pcre2_compile_context_copy_8(void *a1)
{
  char v2 = (void *)((uint64_t (*)(uint64_t, void))*a1)(72, a1[2]);
  char v3 = v2;
  if (v2) {
    cstdlib_memcpy(v2, a1, 0x48uLL);
  }
  return v3;
}

void *pcre2_match_context_copy_8(void *a1)
{
  char v2 = (void *)((uint64_t (*)(uint64_t, void))*a1)(64, a1[2]);
  char v3 = v2;
  if (v2) {
    cstdlib_memcpy(v2, a1, 0x40uLL);
  }
  return v3;
}

void *pcre2_convert_context_copy_8(void *a1)
{
  char v2 = (void *)((uint64_t (*)(uint64_t, void))*a1)(32, a1[2]);
  char v3 = v2;
  if (v2) {
    cstdlib_memcpy(v2, a1, 0x20uLL);
  }
  return v3;
}

uint64_t pcre2_general_context_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_compile_context_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_match_context_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_convert_context_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_set_character_tables_8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  return 0;
}

uint64_t pcre2_set_bsr_8(uint64_t a1, int a2)
{
  if ((a2 - 1) > 1) {
    return 4294967267;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 56) = a2;
  return result;
}

uint64_t pcre2_set_max_pattern_length_8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = a2;
  return 0;
}

uint64_t pcre2_set_newline_8(uint64_t a1, int a2)
{
  if ((a2 - 1) > 5) {
    return 4294967267;
  }
  uint64_t result = 0;
  *(_WORD *)(a1 + 58) = a2;
  return result;
}

uint64_t pcre2_set_parens_nest_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 60) = a2;
  return 0;
}

uint64_t pcre2_set_compile_extra_options_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 64) = a2;
  return 0;
}

uint64_t pcre2_set_compile_recursion_guard_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_callout_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  return 0;
}

uint64_t pcre2_set_heap_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 48) = a2;
  return 0;
}

uint64_t pcre2_set_match_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 52) = a2;
  return 0;
}

uint64_t pcre2_set_depth_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return 0;
}

uint64_t pcre2_set_offset_limit_8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_limit_8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 56) = a2;
  return 0;
}

uint64_t pcre2_set_recursion_memory_management_8()
{
  return 0;
}

uint64_t pcre2_set_glob_separator_8(uint64_t a1, int a2)
{
  uint64_t result = 4294967267;
  if ((a2 - 46) <= 0x2E && ((1 << (a2 - 46)) & 0x400000000003) != 0)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 24) = a2;
  }
  return result;
}

uint64_t pcre2_set_glob_escape_8(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFF) {
    return 4294967267;
  }
  if (a2 && !cstdlib_ispunct(a2)) {
    return 4294967267;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 28) = a2;
  return result;
}

uint64_t pcre2_pattern_convert_8(unsigned __int8 *a1, int64_t a2, unsigned int a3, void *a4, uint64_t *a5, long long *a6, int8x8_t a7)
{
  v283[1] = *MEMORY[0x263EF8340];
  uint64_t result = 4294967245;
  if (a1)
  {
    uint64_t v9 = a5;
    if (a5)
    {
      if (a3 > 0x7F
        || (int v10 = a3 & 0x1C, a7.i32[0] = v10, v11 = (uint8x8_t)vcnt_s8(a7), v11.i16[0] = vaddlv_u8(v11), v11.i32[0] != 1))
      {
        *a5 = 0;
        return 4294967262;
      }
      int64_t v14 = a2;
      char v278 = a3;
      if (a2 == -1)
      {
        uint64_t v15 = _pcre2_strlen_8(a1);
        LOBYTE(a3) = v278;
        int64_t v14 = v15;
      }
      int v16 = &_pcre2_default_convert_context_8;
      if (a6) {
        int v16 = a6;
      }
      uint64_t v276 = v16;
      if ((a3 & 3) == 1)
      {
        v279[0] = 0;
        uint64_t result = _pcre2_valid_utf_8(a1, v14, v279);
        if (result)
        {
          *uint64_t v9 = v279[0];
          return result;
        }
        LOBYTE(a3) = v278;
      }
      if (a4 && (int v17 = (void *)*a4) != 0)
      {
        uint64_t v18 = *v9;
      }
      else
      {
        int v17 = v279;
        uint64_t v18 = 100;
      }
      unint64_t v263 = (unint64_t)&a1[v14];
      BOOL v260 = (a3 & 0x60) != 0;
      char v19 = 1;
      int64_t v269 = v14;
      int v268 = v10;
      while (1)
      {
        char v273 = v19;
        if (a4) {
          uint64_t v20 = *a4 == 0;
        }
        else {
          uint64_t v20 = 1;
        }
        char v277 = v17;
        if (v10 == 4 || v10 == 8)
        {
          uint64_t v24 = 0;
          unint64_t v25 = (unint64_t)v17 + v18 - 1;
          *uint64_t v9 = v14;
          char v26 = 40;
          do
          {
            if ((unint64_t)v17 + v24 >= v25) {
              return 4294967248;
            }
            *((unsigned char *)v17 + v24) = v26;
            char v26 = aNul_0[++v24];
          }
          while (v24 != 6);
          int __src = a1;
          int v27 = (char *)v17 + 6;
          if (!v14)
          {
            uint64_t v31 = 0;
            unsigned int v32 = (char *)v17;
            goto LABEL_159;
          }
          char v255 = a4;
          uint64_t v258 = v9;
          int v28 = 0;
          int v274 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          unsigned int v32 = (char *)v17;
          unsigned int v33 = __src;
          int64_t v34 = v14;
          while (2)
          {
            unsigned __int16 v35 = v27;
            uint64_t v36 = v32;
            if (v20) {
              unsigned int v32 = (char *)v17;
            }
            else {
              unsigned int v32 = v27;
            }
            unsigned int v37 = *v33;
            if ((a3 & 1) != 0 && v37 >= 0xC0)
            {
              int v38 = v33[1] & 0x3F;
              if ((v37 & 0x20) != 0)
              {
                if ((v37 & 0x10) != 0)
                {
                  if ((v37 & 8) != 0)
                  {
                    int v40 = v33[2] & 0x3F;
                    int v41 = v33[3] & 0x3F;
                    int v42 = v33[4] & 0x3F;
                    if ((v37 & 4) != 0)
                    {
                      unsigned int v37 = ((v37 & 1) << 30) | (v38 << 24) | (v40 << 18) | (v41 << 12) | (v42 << 6) | v33[5] & 0x3F;
                      size_t v39 = 6;
                    }
                    else
                    {
                      unsigned int v37 = ((v37 & 3) << 24) | (v38 << 18) | (v40 << 12) | (v41 << 6) | v42;
                      size_t v39 = 5;
                    }
                  }
                  else
                  {
                    unsigned int v37 = ((v37 & 7) << 18) | (v38 << 12) | ((v33[2] & 0x3F) << 6) | v33[3] & 0x3F;
                    size_t v39 = 4;
                  }
                }
                else
                {
                  unsigned int v37 = ((v37 & 0xF) << 12) | (v38 << 6) | v33[2] & 0x3F;
                  size_t v39 = 3;
                }
              }
              else
              {
                unsigned int v37 = v33[1] & 0x3F | ((v37 & 0x1F) << 6);
                size_t v39 = 2;
              }
            }
            else
            {
              size_t v39 = 1;
            }
            int v27 = v32 + 1;
            unsigned int v43 = &v33[v39];
            v34 -= v39;
            if (v29 >= 3)
            {
              if (v37 == 93)
              {
                if ((unint64_t)v32 >= v25) {
                  return 4294967248;
                }
                int v28 = 0;
                *unsigned int v32 = 93;
                uint64_t v29 = 2;
                goto LABEL_140;
              }
              switch(v29)
              {
                case 3:
                  goto LABEL_131;
                case 4:
                  BOOL v56 = v37 == 58;
                  unsigned int v57 = 4;
                  break;
                case 5:
                  if (v37 <= 0x7F)
                  {
                    int v253 = &v33[v39];
                    char v254 = v32;
                    char v46 = v36;
                    int64_t v47 = v34;
                    int v48 = v35;
                    uint64_t v49 = v30;
                    unsigned int v264 = v20;
                    if (cstdlib_islower(v37))
                    {
                      uint64_t v29 = 5;
                      uint64_t v20 = v264;
                      uint64_t v30 = v49;
                      unsigned __int16 v35 = v48;
                      int64_t v34 = v47;
                      uint64_t v36 = v46;
                      unsigned int v43 = &v33[v39];
                      unsigned int v32 = v254;
                      goto LABEL_135;
                    }
                    LOBYTE(a3) = v278;
                    int v17 = v277;
                    uint64_t v20 = v264;
                    uint64_t v30 = v49;
                    unsigned __int16 v35 = v48;
                    int64_t v34 = v47;
                    uint64_t v36 = v46;
                    unsigned int v43 = &v33[v39];
                    unsigned int v32 = v254;
                    if (v37 == 58 && v34 && *v253 == 93)
                    {
                      uint64_t v73 = 0;
                      char v74 = 58;
                      do
                      {
                        if ((unint64_t)&v254[v73] >= v25) {
                          return 4294967248;
                        }
                        v254[v73] = v74;
                        char v74 = asc_2207D86DA[++v73];
                      }
                      while (v73 != 2);
                      int v28 = 0;
                      --v34;
                      unsigned int v43 = v253 + 1;
                      int v27 = v254 + 2;
LABEL_123:
                      uint64_t v29 = 3;
                      goto LABEL_140;
                    }
                  }
LABEL_131:
                  BOOL v56 = v37 == 91;
                  unsigned int v57 = 3;
                  break;
                default:
                  goto LABEL_135;
              }
              if (v56) {
                uint64_t v29 = v57 + 1;
              }
              else {
                uint64_t v29 = v57;
              }
LABEL_135:
              int v271 = v36;
              int64_t v75 = v34;
              int v76 = v35;
              uint64_t v77 = v30;
              uint64_t v78 = v32;
              if (v37 == 92)
              {
                if ((unint64_t)v32 >= v25) {
                  return 4294967248;
                }
                *unsigned int v32 = 92;
                uint64_t v78 = v27;
              }
              uint64_t v79 = &v78[v39];
              if ((unint64_t)&v78[v39] > v25) {
                return 4294967248;
              }
              uint64_t v80 = v20;
              uint64_t v81 = v33;
              size_t v82 = v39;
              unsigned int v83 = v32;
              int v84 = v43;
              uint64_t v85 = v31;
              unsigned int v86 = v79;
              unint64_t v87 = v25;
              uint64_t v88 = v29;
              cstdlib_memcpy(v78, v81, v82);
              uint64_t v29 = v88;
              unint64_t v25 = v87;
              int v27 = v86;
              uint64_t v31 = v85;
              unsigned int v43 = v84;
              unsigned int v32 = v83;
              uint64_t v20 = v80;
              int v17 = v277;
              LOBYTE(a3) = v278;
              int v28 = 0;
              uint64_t v30 = v77;
              unsigned __int16 v35 = v76;
              int64_t v34 = v75;
              uint64_t v36 = v271;
LABEL_140:
              v31 += v35 - v36;
              unsigned int v33 = v43;
              if (!v34)
              {
                a4 = v255;
                uint64_t v9 = v258;
                int v10 = v268;
                if (v29 > 2) {
                  return 106;
                }
LABEL_159:
                uint64_t result = 0;
                *uint64_t v9 = (uint64_t)&v27[v31 - (void)v32];
                *int v27 = 0;
                a1 = __src;
                int64_t v14 = v269;
                goto LABEL_506;
              }
              continue;
            }
            break;
          }
          if (v28) {
            int v44 = 0;
          }
          else {
            int v44 = v37;
          }
          if (v44 <= 90)
          {
            uint64_t v45 = 2;
            switch(v44)
            {
              case '$':
              case '.':
                goto LABEL_118;
              case '%':
              case '&':
              case '\'':
              case ',':
              case '-':
                goto LABEL_82;
              case '(':
                uint64_t v30 = (v30 + 1);
                goto LABEL_73;
              case ')':
                if ((a3 & 8) == 0 || !v30) {
                  goto LABEL_74;
                }
                uint64_t v30 = (v30 - 1);
                goto LABEL_117;
              case '*':
                if (v274 == 42)
                {
                  int v28 = 0;
                  int v274 = 42;
                  goto LABEL_121;
                }
                if ((a3 & 8) != 0) {
                  goto LABEL_117;
                }
                if (v29 < 2 || v274 == 40) {
                  goto LABEL_74;
                }
                goto LABEL_118;
              case '+':
                goto LABEL_73;
              default:
                if (v44 != 63) {
                  goto LABEL_82;
                }
                goto LABEL_73;
            }
          }
          if (v44 > 122)
          {
            if ((v44 - 123) >= 3) {
              goto LABEL_82;
            }
LABEL_73:
            if ((a3 & 8) == 0)
            {
LABEL_74:
              unsigned int v265 = v30;
              goto LABEL_75;
            }
            uint64_t v45 = 2;
          }
          else
          {
            if (v44 == 91)
            {
              if ((unint64_t)v32 >= v25) {
                return 4294967248;
              }
              *unsigned int v32 = 91;
              if (!v34) {
                return 106;
              }
              int v63 = *v43;
              if (v63 == 94)
              {
                if ((unint64_t)v27 >= v25) {
                  return 4294967248;
                }
                *int v27 = 94;
                if (!--v34) {
                  return 106;
                }
                if (v20) {
                  unsigned int v64 = v17;
                }
                else {
                  unsigned int v64 = v35;
                }
                int v27 = (char *)v64 + 2;
                int v65 = *++v43;
                int v63 = v65;
              }
              if (v63 == 93)
              {
                if ((unint64_t)v27 >= v25) {
                  return 4294967248;
                }
                int v28 = 0;
                --v34;
                ++v43;
                *v27++ = 93;
              }
              else
              {
                int v28 = 0;
              }
              goto LABEL_123;
            }
            if (v44 == 92)
            {
              if (!v34) {
                return 101;
              }
              if ((a3 & 8) != 0)
              {
                int v28 = 1;
LABEL_121:
                int v27 = v32;
              }
              else
              {
                uint64_t v66 = v20;
                unsigned int v67 = *v43;
                if (v67 > 0x7E)
                {
                  int v28 = 1;
                  int v27 = v32;
                  int v17 = v277;
                }
                else
                {
                  unsigned int v266 = v29;
                  unsigned int v68 = v43;
                  int v69 = v32;
                  uint64_t v70 = v30;
                  if (cstdlib_strchr("(){}123456789", v67))
                  {
                    if (cstdlib_isdigit(*v68))
                    {
                      LOBYTE(a3) = v278;
                      int v17 = v277;
                      if ((unint64_t)v69 >= v25) {
                        return 4294967248;
                      }
                      unsigned int v32 = v69;
                      uint64_t v20 = v66;
                      if (v66) {
                        char v71 = (char *)v277;
                      }
                      else {
                        char v71 = v35;
                      }
                      uint64_t v72 = v27;
                      int v27 = v71 + 2;
                      *int v69 = 92;
                    }
                    else
                    {
                      unsigned int v32 = v69;
                      uint64_t v72 = v69;
                      LOBYTE(a3) = v278;
                      int v17 = v277;
                      uint64_t v20 = v66;
                    }
                    uint64_t v30 = v70;
                    uint64_t v29 = v266;
                    if ((unint64_t)v27 > v25) {
                      return 4294967248;
                    }
                    int v28 = 0;
                    unsigned int v43 = v68 + 1;
                    int v274 = *v68;
                    char *v72 = v274;
                    --v34;
                  }
                  else
                  {
                    int v28 = 1;
                    unsigned int v32 = v69;
                    int v27 = v69;
                    LOBYTE(a3) = v278;
                    int v17 = v277;
                    uint64_t v20 = v66;
                    uint64_t v30 = v70;
                    unsigned int v43 = v68;
                    uint64_t v29 = v266;
                  }
                }
              }
              goto LABEL_140;
            }
            if (v44 != 94) {
              goto LABEL_82;
            }
            if ((a3 & 8) == 0)
            {
              uint64_t v45 = 1;
              if (!v29 || v274 == 40) {
                goto LABEL_118;
              }
LABEL_82:
              unsigned int v265 = v30;
              if (v37 > 0x7F)
              {
                uint64_t v50 = v32;
LABEL_77:
                int v27 = &v50[v39];
                if ((unint64_t)&v50[v39] > v25) {
                  return 4294967248;
                }
                uint64_t v51 = v36;
                uint64_t v52 = v20;
                uint64_t v53 = v33;
                uint64_t v54 = v32;
                unsigned __int16 v55 = v43;
                cstdlib_memcpy(v50, v53, v39);
                unsigned int v43 = v55;
                unsigned int v32 = v54;
                uint64_t v20 = v52;
                uint64_t v36 = v51;
                int v17 = v277;
                LOBYTE(a3) = v278;
                int v28 = 0;
                int v274 = 255;
                uint64_t v29 = 2;
                uint64_t v30 = v265;
                goto LABEL_140;
              }
              char v270 = v36;
              uint64_t v58 = v20;
              int v59 = v37;
              unsigned int v60 = v32;
              BOOL v61 = cstdlib_strchr("\\?*+|.^${}[]()", v59);
              unsigned int v43 = &v33[v39];
              unsigned int v32 = v60;
              uint64_t v20 = v58;
              uint64_t v36 = v270;
              BOOL v62 = v61;
              uint64_t v50 = v60;
              if (!v62) {
                goto LABEL_77;
              }
LABEL_75:
              if ((unint64_t)v32 >= v25) {
                return 4294967248;
              }
              *unsigned int v32 = 92;
              uint64_t v50 = v27;
              goto LABEL_77;
            }
LABEL_117:
            uint64_t v45 = v29;
          }
LABEL_118:
          if ((unint64_t)v27 > v25) {
            return 4294967248;
          }
          int v28 = 0;
          *unsigned int v32 = v37;
          uint64_t v29 = v45;
          int v274 = v37;
          goto LABEL_140;
        }
        if (v10 != 16)
        {
          *uint64_t v9 = 0;
          return 4294967252;
        }
        unsigned int v21 = *((unsigned __int8 *)v276 + 24);
        int v22 = *((unsigned __int8 *)v276 + 28);
        if ((a3 & 1) != 0 && ((v21 | v22) & 0x80) != 0)
        {
          uint64_t v23 = 0;
          uint64_t result = 4294967232;
          int v10 = v268;
          goto LABEL_505;
        }
        char v267 = v20;
        v283[0] = 0;
        char v89 = cstdlib_strchr("\\?*+|.^${}[]()", v21);
        unsigned int v90 = v277;
        unint64_t v280 = v277;
        unint64_t v281 = (unint64_t)v277 + v18;
        uint64_t v282 = 0;
        LODWORD(v283[0]) = 695418664;
        uint64_t v91 = -4;
        int v92 = (char *)v283;
        do
        {
          if (v90 < (unsigned char *)v277 + v18)
          {
            char v93 = *v92++;
            *v90++ = v93;
          }
          BOOL v143 = __CFADD__(v91++, 1);
        }
        while (!v143);
        int v272 = v89;
        BOOL v275 = v89 != 0;
        unint64_t v280 = v90;
        uint64_t v282 = 4;
        char v94 = v278;
        if (v14 < 1 || *a1 != 42) {
          break;
        }
        if (v260)
        {
          if ((v278 & 0x20) == 0) {
            break;
          }
        }
        else if ((unint64_t)v14 < 2 || a1[1] != 42)
        {
          break;
        }
LABEL_168:
        int __srca = 0;
        int v99 = 0;
        BOOL v101 = v21 == 9 || v21 == 32;
        BOOL v259 = v101;
        int v102 = a1;
        do
        {
          uint64_t v103 = v102 + 1;
          int v104 = *v102;
          if (v104 == 91)
          {
            if ((unint64_t)v103 >= v263) {
              goto LABEL_493;
            }
            int v107 = *v103;
            if (v107 == 94 || v107 == 33)
            {
              uint64_t v103 = v102 + 2;
              int64_t v14 = v269;
              if ((unint64_t)(v102 + 2) >= v263)
              {
                uint64_t result = 106;
                goto LABEL_496;
              }
              LOWORD(v283[0]) = 24155;
              if ((v94 & 0x20) != 0)
              {
                uint64_t v108 = 2;
              }
              else
              {
                if (v272)
                {
                  BYTE2(v283[0]) = 92;
                  uint64_t v108 = 3;
                }
                else
                {
                  uint64_t v108 = 2;
                }
                *(unsigned char *)(((unint64_t)&v280 | v108) + 0x18) = v21;
              }
              uint64_t v118 = v108 + 1;
              uint64_t v119 = v280;
              unint64_t v120 = v281;
              uint64_t v121 = v282;
              uint64_t v122 = v118;
              char v123 = (char *)v283;
              do
              {
                if ((unint64_t)v119 < v120)
                {
                  char v124 = *v123++;
                  *v119++ = v124;
                }
                --v122;
              }
              while (v122);
              int v117 = 0;
              unint64_t v280 = v119;
              uint64_t v282 = v121 + v118;
              uint64_t v116 = 1;
            }
            else
            {
              ++v282;
              unsigned int v115 = v280;
              uint64_t v116 = 0;
              if ((unint64_t)v280 < v281)
              {
                ++v280;
                *unsigned int v115 = 91;
              }
              int v117 = 1;
            }
            if (*v103 == 93)
            {
              LOWORD(v283[0]) = 23900;
              char v125 = v280;
              unint64_t v126 = v281;
              uint64_t v127 = -2;
              char v128 = (char *)v283;
              uint64_t v129 = v282;
              do
              {
                if ((unint64_t)v125 < v126)
                {
                  char v130 = *v128++;
                  *v125++ = v130;
                }
                BOOL v143 = __CFADD__(v127++, 1);
              }
              while (!v143);
              unint64_t v280 = v125;
              uint64_t v282 = v129 + 2;
              ++v103;
              unsigned int v131 = 93;
              int v132 = 1;
            }
            else
            {
              int v132 = 0;
              unsigned int v131 = 0;
            }
            if ((unint64_t)v103 >= v263)
            {
LABEL_493:
              uint64_t result = 106;
              goto LABEL_495;
            }
            int v133 = 0;
LABEL_235:
            unsigned int v134 = v103;
            int v102 = v103 + 1;
            unsigned int v135 = *v103;
            if ((v94 & 1) != 0 && v135 >= 0xC0)
            {
              if ((v135 & 0x20) != 0)
              {
                int v136 = *v102 & 0x3F;
                if ((v135 & 0x10) != 0)
                {
                  if ((v135 & 8) != 0)
                  {
                    int v137 = v103[2] & 0x3F;
                    int v138 = v103[3] & 0x3F;
                    int v139 = v103[4] & 0x3F;
                    if ((v135 & 4) != 0)
                    {
                      unsigned int v135 = ((v135 & 1) << 30) | (v136 << 24) | (v137 << 18) | (v138 << 12) | (v139 << 6) | v103[5] & 0x3F;
                      int v102 = v103 + 6;
                    }
                    else
                    {
                      unsigned int v135 = ((v135 & 3) << 24) | (v136 << 18) | (v137 << 12) | (v138 << 6) | v139;
                      int v102 = v103 + 5;
                    }
                  }
                  else
                  {
                    unsigned int v135 = ((v135 & 7) << 18) | (v136 << 12) | ((v103[2] & 0x3F) << 6) | v103[3] & 0x3F;
                    int v102 = v103 + 4;
                  }
                }
                else
                {
                  unsigned int v135 = ((v135 & 0xF) << 12) | (v136 << 6) | v103[2] & 0x3F;
                  int v102 = v103 + 3;
                }
              }
              else
              {
                int v102 = v103 + 2;
                unsigned int v135 = v103[1] & 0x3F | ((v135 & 0x1F) << 6);
              }
            }
            if (v135 == 93)
            {
              ++v282;
              uint64_t v178 = v280;
              if ((unint64_t)v280 < v281)
              {
                ++v280;
                unsigned char *v178 = 93;
              }
              if (((v116 | ((v94 & 0x20) >> 5)) & 1) == 0 && v133)
              {
                LODWORD(v283[0]) = 557596456;
                uint64_t v179 = v280;
                unint64_t v180 = v281;
                uint64_t v181 = -4;
                int v182 = (char *)v283;
                uint64_t v183 = v282;
                do
                {
                  if ((unint64_t)v179 < v180)
                  {
                    char v184 = *v182++;
                    *v179++ = v184;
                  }
                  BOOL v143 = __CFADD__(v181++, 1);
                }
                while (!v143);
                unint64_t v280 = v179;
                unint64_t v185 = v281;
                if (v272)
                {
                  uint64_t v186 = v183 + 5;
                  uint64_t v282 = v186;
                  if ((unint64_t)v179 < v281)
                  {
                    unint64_t v280 = v179 + 1;
                    *uint64_t v179 = 92;
                    unint64_t v185 = v281;
                    uint64_t v186 = v282;
                    uint64_t v179 = v280;
                  }
                }
                else
                {
                  uint64_t v186 = v183 + 4;
                }
                uint64_t v226 = v186 + 1;
                uint64_t v282 = v226;
                if ((unint64_t)v179 < v185)
                {
                  unint64_t v280 = v179 + 1;
                  *uint64_t v179 = v21;
                  unint64_t v185 = v281;
                  uint64_t v226 = v282;
                  uint64_t v179 = v280;
                }
                uint64_t v282 = v226 + 1;
                if ((unint64_t)v179 < v185)
                {
                  unint64_t v280 = v179 + 1;
                  *uint64_t v179 = 41;
                }
              }
              continue;
            }
            if ((unint64_t)v102 >= v263)
            {
              uint64_t result = 106;
              uint64_t v103 = v102;
              goto LABEL_495;
            }
            if (v135 == 91)
            {
              if (*v102 == 58)
              {
                unsigned int v140 = v102 + 1;
                while ((unint64_t)v140 < v263)
                {
                  int v142 = *v140++;
                  int v141 = v142;
                  if ((v142 - 123) <= 0xFFFFFFE5)
                  {
                    BOOL v143 = v141 != 58 || (unint64_t)v140 >= v263;
                    if (!v143 && *v140 == 93)
                    {
                      int v144 = 1;
                      int v145 = 97;
                      uint64_t v146 = "alnum:alpha:ascii:blank:cntrl:digit:graph:lower:print:punct:space:upper:word:xdigit:";
                      while (1)
                      {
                        uint64_t v103 = v102 + 3;
                        int v147 = v102[1];
                        if (v147 == v145) {
                          break;
                        }
LABEL_262:
                        if (v145 != 58)
                        {
                          do
                            int v149 = *(unsigned __int8 *)++v146;
                          while (v149 != 58);
                        }
                        int v150 = *(unsigned __int8 *)++v146;
                        int v145 = v150;
                        ++v144;
                        unsigned int v135 = 91;
                        if (!v150) {
                          goto LABEL_277;
                        }
                      }
                      while (v147 != 58)
                      {
                        int v148 = *(unsigned __int8 *)++v146;
                        int v145 = v148;
                        int v147 = *(v103++ - 1);
                        if (v147 != v148) {
                          goto LABEL_262;
                        }
                      }
                      char v154 = v102 - 1;
                      do
                      {
                        char v156 = *v154++;
                        char v155 = v156;
                        ++v282;
                        int v157 = v280;
                        if ((unint64_t)v280 < v281)
                        {
                          ++v280;
                          *int v157 = v155;
                        }
                      }
                      while (v154 < v103);
                      if (v117)
                      {
                        int v158 = v259;
                        switch(v144)
                        {
                          case 1:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isalnum(v21);
                            goto LABEL_356;
                          case 2:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isalpha(v21);
                            goto LABEL_356;
                          case 3:
                            int v132 = 0;
                            unsigned int v131 = 0;
                            int v133 = 1;
                            goto LABEL_315;
                          case 4:
                            goto LABEL_357;
                          case 5:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_iscntrl(v21);
                            goto LABEL_356;
                          case 6:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isdigit(v21);
                            goto LABEL_356;
                          case 7:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isgraph(v21);
                            goto LABEL_356;
                          case 8:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_islower(v21);
                            goto LABEL_356;
                          case 9:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isprint(v21);
                            goto LABEL_356;
                          case 10:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_ispunct(v21);
                            goto LABEL_356;
                          case 11:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isspace(v21);
                            goto LABEL_356;
                          case 12:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isupper(v21);
                            goto LABEL_356;
                          case 13:
                            uint64_t v175 = v116;
                            int v257 = v117;
                            int v176 = cstdlib_isalnum(v21);
                            int v117 = v257;
                            uint64_t v116 = v175;
                            char v94 = v278;
                            int v158 = v21 == 95 || v176 != 0;
                            goto LABEL_357;
                          default:
                            uint64_t v159 = v116;
                            int v256 = v117;
                            int v158 = cstdlib_isxdigit(v21);
LABEL_356:
                            int v117 = v256;
                            uint64_t v116 = v159;
                            char v94 = v278;
LABEL_357:
                            int v132 = 0;
                            unsigned int v131 = 0;
                            if (v158) {
                              int v133 = 1;
                            }
                            break;
                        }
                      }
                      else
                      {
                        int v132 = 0;
                        unsigned int v131 = 0;
                      }
                      goto LABEL_315;
                    }
                    break;
                  }
                }
                unsigned int v135 = 91;
LABEL_277:
                uint64_t v103 = v102;
LABEL_308:
                ++v282;
                int v163 = v280;
                if ((unint64_t)v280 < v281)
                {
                  ++v280;
                  *int v163 = 92;
                }
                do
                {
LABEL_310:
                  char v165 = *v134++;
                  char v164 = v165;
                  ++v282;
                  uint64_t v166 = v280;
                  if ((unint64_t)v280 < v281)
                  {
                    ++v280;
                    *uint64_t v166 = v164;
                  }
                }
                while (v134 < v103);
                if (v135 == v21) {
                  int v133 = 1;
                }
LABEL_315:
                if ((unint64_t)v103 >= v263) {
                  goto LABEL_493;
                }
                goto LABEL_235;
              }
LABEL_269:
              int v132 = 1;
              if (v22 && v135 == v22)
              {
                uint64_t v103 = v102 + 1;
                unsigned int v135 = *v102;
                if ((v94 & 1) != 0 && v135 >= 0xC0)
                {
                  if ((v135 & 0x20) != 0)
                  {
                    int v152 = *v103 & 0x3F;
                    if ((v135 & 0x10) != 0)
                    {
                      if ((v135 & 8) != 0)
                      {
                        int v160 = v102[2] & 0x3F;
                        int v161 = v102[3] & 0x3F;
                        int v162 = v102[4] & 0x3F;
                        if ((v135 & 4) != 0)
                        {
                          unsigned int v135 = ((v135 & 1) << 30) | (v152 << 24) | (v160 << 18) | (v161 << 12) | (v162 << 6) | v102[5] & 0x3F;
                          uint64_t v103 = v102 + 6;
                        }
                        else
                        {
                          unsigned int v135 = ((v135 & 3) << 24) | (v152 << 18) | (v160 << 12) | (v161 << 6) | v162;
                          uint64_t v103 = v102 + 5;
                        }
                      }
                      else
                      {
                        unsigned int v135 = ((v135 & 7) << 18) | (v152 << 12) | ((v102[2] & 0x3F) << 6) | v102[3] & 0x3F;
                        uint64_t v103 = v102 + 4;
                      }
                    }
                    else
                    {
                      unsigned int v135 = ((v135 & 0xF) << 12) | (v152 << 6) | v102[2] & 0x3F;
                      uint64_t v103 = v102 + 3;
                    }
                  }
                  else
                  {
                    uint64_t v103 = v102 + 2;
                    unsigned int v135 = v102[1] & 0x3F | ((v135 & 0x1F) << 6);
                  }
                }
                if ((unint64_t)v103 >= v263) {
                  goto LABEL_493;
                }
                int v132 = 1;
                unsigned int v134 = v102;
              }
              else
              {
                uint64_t v103 = v102;
              }
              unsigned int v131 = v135;
            }
            else
            {
              if (v135 != 45 || !v132 || *v102 == 93) {
                goto LABEL_269;
              }
              ++v282;
              uint64_t v151 = v280;
              if ((unint64_t)v280 < v281)
              {
                ++v280;
                *uint64_t v151 = 45;
              }
              unsigned int v134 = v102 + 1;
              unsigned int v135 = *v102;
              if ((v94 & 1) != 0 && v135 >= 0xC0)
              {
                if ((v135 & 0x20) != 0)
                {
                  int v153 = *v134 & 0x3F;
                  if ((v135 & 0x10) != 0)
                  {
                    if ((v135 & 8) != 0)
                    {
                      int v167 = v102[2] & 0x3F;
                      int v168 = v102[3] & 0x3F;
                      int v169 = v102[4] & 0x3F;
                      if ((v135 & 4) != 0)
                      {
                        unsigned int v135 = ((v135 & 1) << 30) | (v153 << 24) | (v167 << 18) | (v168 << 12) | (v169 << 6) | v102[5] & 0x3F;
                        unsigned int v134 = v102 + 6;
                      }
                      else
                      {
                        unsigned int v135 = ((v135 & 3) << 24) | (v153 << 18) | (v167 << 12) | (v168 << 6) | v169;
                        unsigned int v134 = v102 + 5;
                      }
                    }
                    else
                    {
                      unsigned int v135 = ((v135 & 7) << 18) | (v153 << 12) | ((v102[2] & 0x3F) << 6) | v102[3] & 0x3F;
                      unsigned int v134 = v102 + 4;
                    }
                  }
                  else
                  {
                    unsigned int v135 = ((v135 & 0xF) << 12) | (v153 << 6) | v102[2] & 0x3F;
                    unsigned int v134 = v102 + 3;
                  }
                }
                else
                {
                  unsigned int v134 = v102 + 2;
                  unsigned int v135 = v102[1] & 0x3F | ((v135 & 0x1F) << 6);
                }
              }
              if ((unint64_t)v134 >= v263)
              {
                uint64_t result = 106;
LABEL_515:
                uint64_t v103 = v134;
                goto LABEL_495;
              }
              if (v22 && v135 == v22)
              {
                uint64_t v103 = v134 + 1;
                unsigned int v135 = *v134;
                if ((v94 & 1) != 0 && v135 >= 0xC0)
                {
                  if ((v135 & 0x20) != 0)
                  {
                    int v171 = *v103 & 0x3F;
                    if ((v135 & 0x10) != 0)
                    {
                      if ((v135 & 8) != 0)
                      {
                        int v172 = v134[2] & 0x3F;
                        int v173 = v134[3] & 0x3F;
                        int v174 = v134[4] & 0x3F;
                        if ((v135 & 4) != 0)
                        {
                          unsigned int v135 = ((v135 & 1) << 30) | (v171 << 24) | (v172 << 18) | (v173 << 12) | (v174 << 6) | v134[5] & 0x3F;
                          uint64_t v103 = v134 + 6;
                        }
                        else
                        {
                          unsigned int v135 = ((v135 & 3) << 24) | (v171 << 18) | (v172 << 12) | (v173 << 6) | v174;
                          uint64_t v103 = v134 + 5;
                        }
                      }
                      else
                      {
                        unsigned int v135 = ((v135 & 7) << 18) | (v171 << 12) | ((v134[2] & 0x3F) << 6) | v134[3] & 0x3F;
                        uint64_t v103 = v134 + 4;
                      }
                    }
                    else
                    {
                      unsigned int v135 = ((v135 & 0xF) << 12) | (v171 << 6) | v134[2] & 0x3F;
                      uint64_t v103 = v134 + 3;
                    }
                  }
                  else
                  {
                    uint64_t v103 = v134 + 2;
                    unsigned int v135 = v134[1] & 0x3F | ((v135 & 0x1F) << 6);
                  }
                }
              }
              else
              {
                if (v135 == 91)
                {
                  if (*v134 == 58)
                  {
                    uint64_t result = 4294967232;
                    goto LABEL_515;
                  }
                  unsigned int v135 = 91;
                }
                uint64_t v103 = v134;
                unsigned int v134 = v102;
              }
              if (v131 > v135) {
                goto LABEL_513;
              }
              int v132 = 0;
              if (v135 > v21 && v131 < v21) {
                int v133 = 1;
              }
              unsigned int v131 = 0;
            }
            if (v135 - 45 <= 0x30 && ((1 << (v135 - 45)) & 0x1C00000000001) != 0) {
              goto LABEL_308;
            }
            goto LABEL_310;
          }
          if (v104 == 63)
          {
            if ((v94 & 0x20) != 0)
            {
              ++v282;
              unsigned int v109 = v280;
              if ((unint64_t)v280 < v281)
              {
                ++v280;
                *unsigned int v109 = 46;
              }
            }
            else
            {
              convert_glob_print_wildcard((uint64_t)&v280, v21, v275);
              char v94 = v278;
            }
            goto LABEL_442;
          }
          if (v104 != 42)
          {
            if (!v22 || v104 != v22)
            {
              ++v102;
LABEL_207:
              if ((v104 & 0x80) == 0)
              {
                int v112 = cstdlib_strchr("\\?*+|.^${}[]()", v104);
                char v94 = v278;
                if (v112)
                {
                  ++v282;
                  BOOL v113 = v280;
                  if ((unint64_t)v280 < v281)
                  {
                    ++v280;
                    *BOOL v113 = 92;
                  }
                }
              }
              ++v282;
              int v114 = v280;
              if ((unint64_t)v280 < v281)
              {
                ++v280;
                *int v114 = v104;
              }
              continue;
            }
            if ((unint64_t)v103 < v263)
            {
              int v104 = v102[1];
              v102 += 2;
              goto LABEL_207;
            }
LABEL_513:
            uint64_t result = 4294967232;
LABEL_495:
            int64_t v14 = v269;
LABEL_496:
            int v10 = v268;
LABEL_497:
            uint64_t v23 = v103 - a1;
            goto LABEL_505;
          }
          if (v99)
          {
            ++v282;
            size_t v105 = v280;
            if ((unint64_t)v280 < v281)
            {
              ++v280;
              unsigned char *v105 = 41;
            }
          }
          int64_t v14 = v269;
          if ((v94 & 0x40) != 0 || (unint64_t)v103 >= v263 || *v103 != 42)
          {
            if ((unint64_t)v103 < v263 && *v103 == 42)
            {
              unsigned int v110 = v102 + 2;
              while ((unint64_t)v110 < v263)
              {
                int v111 = *v110++;
                if (v111 != 42)
                {
                  uint64_t v103 = v110 - 1;
                  goto LABEL_378;
                }
              }
              uint64_t v103 = (unsigned __int8 *)v263;
            }
LABEL_378:
            if ((v94 & 0x20) != 0)
            {
              if ((unint64_t)v103 >= v263)
              {
                int v102 = v103;
                int v10 = v268;
LABEL_499:
                unsigned int v247 = v277;
                char v246 = v267;
                goto LABEL_500;
              }
              if (v102 == a1)
              {
                int v99 = 0;
LABEL_442:
                int v102 = v103;
                continue;
              }
LABEL_383:
              LOBYTE(v283[0]) = 40;
              if (__srca)
              {
                *(_WORD *)((char *)v283 + 1) = 15935;
                int v187 = v280;
                unint64_t v188 = v281;
                uint64_t v189 = -3;
                uint64_t v190 = (char *)v283;
                uint64_t v191 = v282;
                do
                {
                  if ((unint64_t)v187 < v188)
                  {
                    char v192 = *v190++;
                    *v187++ = v192;
                  }
                  BOOL v143 = __CFADD__(v189++, 1);
                }
                while (!v143);
                unint64_t v280 = v187;
                uint64_t v282 = v191 + 3;
                int v99 = 1;
              }
              else
              {
                *(_DWORD *)((char *)v283 + 1) = 1297040170;
                *(_WORD *)((char *)v283 + 5) = 18765;
                HIBYTE(v283[0]) = 84;
                char v193 = v280;
                unint64_t v194 = v281;
                uint64_t v195 = -8;
                uint64_t v196 = (char *)v283;
                uint64_t v197 = v282;
                do
                {
                  if ((unint64_t)v193 < v194)
                  {
                    char v198 = *v196++;
                    *v193++ = v198;
                  }
                  BOOL v143 = __CFADD__(v195++, 1);
                }
                while (!v143);
                unint64_t v280 = v193;
                uint64_t v282 = v197 + 9;
                int v99 = 0;
                if ((unint64_t)v193 < v281)
                {
                  unint64_t v280 = v193 + 1;
                  *char v193 = 41;
                }
              }
              if ((v94 & 0x20) != 0)
              {
                ++v282;
                BOOL v218 = v280;
                if ((unint64_t)v280 < v281)
                {
                  ++v280;
                  *BOOL v218 = 46;
                }
                goto LABEL_433;
              }
            }
            else
            {
              if (v102 != a1) {
                goto LABEL_383;
              }
              int v99 = 0;
            }
            convert_glob_print_wildcard((uint64_t)&v280, v21, v275);
            char v94 = v278;
LABEL_433:
            LOBYTE(v283[0]) = 42;
            if ((unint64_t)v103 >= v263) {
              char v219 = 43;
            }
            else {
              char v219 = 63;
            }
            BYTE1(v283[0]) = v219;
            char v220 = v280;
            unint64_t v221 = v281;
            uint64_t v222 = -2;
            uint64_t v223 = v282;
            int v224 = (char *)v283;
            do
            {
              if ((unint64_t)v220 < v221)
              {
                char v225 = *v224++;
                *v220++ = v225;
              }
              BOOL v143 = __CFADD__(v222++, 1);
            }
            while (!v143);
            unint64_t v280 = v220;
            uint64_t v282 = v223 + 2;
            goto LABEL_442;
          }
          BOOL v106 = v102 == a1 || *(v102 - 1) == v21;
          char v199 = v102 + 2;
          do
          {
            if ((unint64_t)v199 >= v263)
            {
              int v102 = v199;
              int v10 = v268;
              goto LABEL_499;
            }
            int v201 = *v199++;
            int v200 = v201;
          }
          while (v201 == 42);
          if (v22) {
            BOOL v202 = v106;
          }
          else {
            BOOL v202 = 0;
          }
          unsigned __int16 v203 = v199 - 1;
          if (v202 && v200 == v22)
          {
            int v200 = v22;
            if ((unint64_t)v199 < v263)
            {
              int v200 = *v199;
              if (v200 == v21) {
                unsigned __int16 v203 = v199;
              }
              else {
                int v200 = v22;
              }
            }
          }
          if (v102 != a1)
          {
            v283[0] = 0x54494D4D4F432A28;
            BOOL v204 = v280;
            unint64_t v205 = v281;
            uint64_t v206 = -8;
            int v207 = (char *)v283;
            uint64_t v208 = v282;
            do
            {
              if ((unint64_t)v204 < v205)
              {
                char v209 = *v207++;
                *v204++ = v209;
              }
              BOOL v143 = __CFADD__(v206++, 1);
            }
            while (!v143);
            unint64_t v280 = v204;
            uint64_t v282 = v208 + 9;
            if ((unint64_t)v204 < v281)
            {
              unint64_t v280 = v204 + 1;
              *BOOL v204 = 41;
            }
            if (v106)
            {
              int v210 = v280;
              unint64_t v211 = v281;
              uint64_t v212 = v282;
              if (*v203 == v21)
              {
                qmemcpy(v283, "(?:.*?", 6);
                uint64_t v213 = -6;
                int v214 = (char *)v283;
                do
                {
                  if ((unint64_t)v210 < v211)
                  {
                    char v215 = *v214++;
                    *v210++ = v215;
                  }
                  BOOL v143 = __CFADD__(v213++, 1);
                }
                while (!v143);
                unint64_t v280 = v210;
                unint64_t v216 = v281;
                if (v272)
                {
                  uint64_t v217 = v212 + 7;
                  uint64_t v282 = v217;
                  if ((unint64_t)v210 < v281)
                  {
                    unint64_t v280 = v210 + 1;
                    unsigned char *v210 = 92;
                    unint64_t v216 = v281;
                    uint64_t v217 = v282;
                    int v210 = v280;
                  }
                }
                else
                {
                  uint64_t v217 = v212 + 6;
                }
                uint64_t v239 = v217 + 1;
                uint64_t v282 = v239;
                if ((unint64_t)v210 < v216)
                {
                  unint64_t v280 = v210 + 1;
                  unsigned char *v210 = v21;
                  int v210 = v280;
                  unint64_t v216 = v281;
                  uint64_t v239 = v282;
                }
                qmemcpy(v283, ")??", 3);
                uint64_t v240 = -3;
                int v241 = (char *)v283;
                do
                {
                  if ((unint64_t)v210 < v216)
                  {
                    char v242 = *v241++;
                    *v210++ = v242;
                  }
                  BOOL v143 = __CFADD__(v240++, 1);
                }
                while (!v143);
                int v99 = 0;
                unint64_t v280 = v210;
                uint64_t v282 = v239 + 3;
                goto LABEL_483;
              }
            }
            else
            {
              int v210 = v280;
              unint64_t v211 = v281;
              uint64_t v212 = v282;
            }
            qmemcpy(v283, ".*?", 3);
            uint64_t v235 = -3;
            BOOL v236 = (char *)v283;
            do
            {
              if ((unint64_t)v210 < v211)
              {
                char v237 = *v236++;
                *v210++ = v237;
              }
              BOOL v143 = __CFADD__(v235++, 1);
            }
            while (!v143);
            int v99 = 0;
            unint64_t v280 = v210;
            uint64_t v282 = v212 + 3;
LABEL_467:
            int __srca = 1;
            int v102 = v203;
            continue;
          }
          if (v200 != v21)
          {
            int v99 = 0;
            goto LABEL_467;
          }
          qmemcpy(v283, "(?:\\A|", 6);
          unsigned int v227 = v280;
          unint64_t v228 = v281;
          uint64_t v229 = -6;
          int v230 = (char *)v283;
          uint64_t v231 = v282;
          do
          {
            if ((unint64_t)v227 < v228)
            {
              char v232 = *v230++;
              *v227++ = v232;
            }
            BOOL v143 = __CFADD__(v229++, 1);
          }
          while (!v143);
          unint64_t v280 = v227;
          unint64_t v233 = v281;
          if (v272)
          {
            uint64_t v234 = v231 + 7;
            uint64_t v282 = v234;
            if ((unint64_t)v227 < v281)
            {
              unint64_t v280 = v227 + 1;
              *unsigned int v227 = 92;
              unint64_t v233 = v281;
              uint64_t v234 = v282;
              unsigned int v227 = v280;
            }
          }
          else
          {
            uint64_t v234 = v231 + 6;
          }
          uint64_t v238 = v234 + 1;
          uint64_t v282 = v238;
          if ((unint64_t)v227 < v233)
          {
            unint64_t v280 = v227 + 1;
            *unsigned int v227 = v21;
            unint64_t v233 = v281;
            uint64_t v238 = v282;
            unsigned int v227 = v280;
          }
          uint64_t v282 = v238 + 1;
          if ((unint64_t)v227 < v233)
          {
            unint64_t v280 = v227 + 1;
            *unsigned int v227 = 41;
          }
          int v99 = 0;
LABEL_483:
          int v102 = v203 + 1;
          int __srca = 1;
        }
        while ((unint64_t)v102 < v263);
        unsigned int v90 = v280;
        uint64_t v252 = v282;
        int64_t v14 = v269;
LABEL_485:
        LOWORD(v283[0]) = 31324;
        uint64_t v243 = -2;
        unint64_t v244 = v281;
        BOOL v245 = (char *)v283;
        char v246 = v267;
        int v10 = v268;
        unsigned int v247 = v277;
        do
        {
          if ((unint64_t)v90 < v244)
          {
            char v248 = *v245++;
            *v90++ = v248;
          }
          BOOL v143 = __CFADD__(v243++, 1);
        }
        while (!v143);
        unint64_t v280 = v90;
        uint64_t v282 = v252 + 2;
        if (v99)
        {
          uint64_t v282 = v252 + 3;
          if ((unint64_t)v90 < v281)
          {
            unint64_t v280 = v90 + 1;
            unsigned char *v90 = 41;
          }
        }
LABEL_500:
        uint64_t v249 = ++v282;
        char v250 = v280;
        if ((unint64_t)v280 < v281)
        {
          ++v280;
          unsigned char *v250 = 0;
          uint64_t v249 = v282;
        }
        if ((v246 & 1) == 0 && v249 != v280 - (unsigned char *)v247)
        {
          uint64_t result = 4294967248;
          uint64_t v103 = v102;
          goto LABEL_497;
        }
        uint64_t result = 0;
        uint64_t v23 = v249 - 1;
LABEL_505:
        *uint64_t v9 = v23;
LABEL_506:
        if (!a4 || result) {
          return result;
        }
        if (*a4) {
          return 0;
        }
        char v251 = _pcre2_memctl_malloc_8(8 * *v9 + 32, v276);
        if (!v251) {
          return 4294967248;
        }
        char v19 = 0;
        int v17 = v251 + 3;
        *a4 = v251 + 3;
        uint64_t v18 = *v9 + 1;
        uint64_t result = 4294967252;
        LOBYTE(a3) = v278;
        if ((v273 & 1) == 0) {
          return result;
        }
      }
      LOWORD(v283[0]) = 16732;
      uint64_t v95 = -2;
      unint64_t v96 = v281;
      unsigned int v97 = (char *)v283;
      do
      {
        if ((unint64_t)v90 < v96)
        {
          char v98 = *v97++;
          *v90++ = v98;
        }
        BOOL v143 = __CFADD__(v95++, 1);
      }
      while (!v143);
      unint64_t v280 = v90;
      uint64_t v282 = 6;
      if (v14 < 1)
      {
        int v99 = 0;
        uint64_t v252 = 6;
        int v102 = a1;
        goto LABEL_485;
      }
      goto LABEL_168;
    }
  }
  return result;
}

uint64_t pcre2_converted_pattern_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result - 16))(result - 24, *(void *)(result - 8));
  }
  return result;
}

uint64_t convert_glob_print_separator(uint64_t result, char a2, int a3)
{
  char v3 = *(unsigned char **)result;
  if (a3)
  {
    unint64_t v4 = *(void *)(result + 8);
    ++*(void *)(result + 16);
    if ((unint64_t)v3 < v4)
    {
      *(void *)uint64_t result = v3 + 1;
      *char v3 = 92;
      char v3 = *(unsigned char **)result;
    }
  }
  unint64_t v5 = *(void *)(result + 8);
  ++*(void *)(result + 16);
  if ((unint64_t)v3 < v5)
  {
    *(void *)uint64_t result = v3 + 1;
    *char v3 = a2;
  }
  return result;
}

uint64_t convert_glob_print_wildcard(uint64_t a1, char a2, int a3)
{
  *(_WORD *)(a1 + 24) = 24155;
  unint64_t v4 = (char *)(a1 + 24);
  unint64_t v5 = *(unsigned char **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = -2;
  do
  {
    if ((unint64_t)v5 < v6)
    {
      char v9 = *v4++;
      *v5++ = v9;
    }
  }
  while (!__CFADD__(v8++, 1));
  *(void *)a1 = v5;
  *(void *)(a1 + 16) = v7 + 2;
  uint64_t result = convert_glob_print_separator(a1, a2, a3);
  unint64_t v12 = *(void *)(a1 + 8);
  ++*(void *)(a1 + 16);
  uint64_t v13 = *(unsigned char **)a1;
  if (*(void *)a1 < v12)
  {
    *(void *)a1 = v13 + 1;
    unsigned char *v13 = 93;
  }
  return result;
}

uint64_t pcre2_dfa_match_8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5, int64x2_t *a6, long long *a7, _DWORD *a8, unint64_t a9)
{
  v117[3840] = *MEMORY[0x263EF8340];
  v117[0] = 0;
  v117[1] = 0x1DFC00001E00;
  if (a3 == -1) {
    a3 = _pcre2_strlen_8(a2);
  }
  if ((a5 & 0x1FFFFF00) != 0) {
    return 4294967262;
  }
  uint64_t v16 = 4294967245;
  if (!a6 || !a1 || !a2 || !a8) {
    return v16;
  }
  if (a9 < 0x14) {
    return 4294967253;
  }
  if (a3 < (unint64_t)a4) {
    return 4294967263;
  }
  if ((a5 & 0x30) != 0 && ((*(_DWORD *)(a1 + 88) | a5) & 0x20000000) != 0) {
    return 4294967262;
  }
  if (*(_DWORD *)(a1 + 80) != 1346589253) {
    return 4294967265;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 96);
  if ((v18 & 7) != 1) {
    return 4294967264;
  }
  if ((a5 & 0x40) != 0)
  {
    if (*a8 > 1u) {
      return 4294967258;
    }
    int v23 = a8[1];
    if (v23 < 1 || v23 > (int)((a9 - 2) / 3)) {
      return 4294967258;
    }
  }
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v110 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  int64x2_t v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  int8x16_t v108 = 0u;
  char v19 = &a2[a3];
  unsigned int v92 = *(_DWORD *)(a1 + 88);
  BOOL v21 = (a5 & 0x80000040) != 0 || *(int *)(a1 + 88) < 0;
  BOOL v98 = v21;
  uint64_t v109 = 0;
  *((void *)&v107 + 1) = &v110;
  LODWORD(v110) = 2;
  *(void *)&long long v112 = a2;
  *((void *)&v112 + 1) = a3;
  DWORD2(v116) = 0;
  *((void *)&v110 + 1) = 1;
  *((void *)&v111 + 1) = 0;
  if (a7)
  {
    uint64_t v22 = *((void *)a7 + 5);
    unint64_t v96 = &a2[a3];
    if (v22 != -1)
    {
      if ((v92 & 0x800000) == 0) {
        return 4294967240;
      }
      unint64_t v96 = &a2[v22];
    }
    int8x16_t v108 = vextq_s8(*(int8x16_t *)((char *)a7 + 24), *(int8x16_t *)((char *)a7 + 24), 8uLL);
    long long v99 = *a7;
    *(void *)&long long v100 = *((void *)a7 + 2);
    unsigned int v25 = *((_DWORD *)a7 + 13);
    unsigned int v24 = *((_DWORD *)a7 + 14);
    *(void *)&long long v105 = __PAIR64__(v24, v25);
    char v26 = (int *)(a7 + 3);
  }
  else
  {
    v108.i64[1] = 0;
    long long v99 = *(_OWORD *)a1;
    *(void *)&long long v100 = *(void *)(a1 + 16);
    unsigned int v25 = qword_26D2134E4;
    unsigned int v24 = HIDWORD(qword_26D2134E4);
    *(void *)&long long v105 = qword_26D2134E4;
    char v26 = &dword_26D2134E0;
    unint64_t v96 = &a2[a3];
  }
  uint64_t v27 = *v26;
  *(void *)&long long v104 = v27;
  unsigned int v28 = v92;
  if (v25 > *(_DWORD *)(a1 + 104)) {
    LODWORD(v105) = *(_DWORD *)(a1 + 104);
  }
  if (v24 > *(_DWORD *)(a1 + 108)) {
    DWORD1(v105) = *(_DWORD *)(a1 + 108);
  }
  if (v27 > *(_DWORD *)(a1 + 100)) {
    *(void *)&long long v104 = *(unsigned int *)(a1 + 100);
  }
  uint64_t v29 = *(void *)(a1 + 24);
  *((void *)&v100 + 1) = a1
                         + *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 134)
                         + 136;
  *(void *)&long long v101 = a2;
  *(void *)&long long v103 = v29;
  *((void *)&v103 + 1) = a4;
  *((void *)&v101 + 1) = &a2[a3];
  DWORD2(v105) = 0;
  HIDWORD(v105) = (v18 >> 14) & 0xC | a5;
  *((void *)&v104 + 1) = 0;
  LOWORD(v107) = *(_WORD *)(a1 + 120);
  *(void *)&long long v106 = v92;
  unsigned int v89 = v18;
  unint64_t v30 = (unint64_t)&a2[a4];
  int v97 = v92 & 0x80000;
  switch(*(_WORD *)(a1 + 122))
  {
    case 1:
      DWORD2(v106) = 1;
      char v31 = 13;
      goto LABEL_48;
    case 2:
      DWORD2(v106) = 1;
      char v31 = 10;
LABEL_48:
      BYTE12(v106) = v31;
      goto LABEL_54;
    case 3:
      DWORD2(v106) = 2;
      WORD6(v106) = 2573;
      goto LABEL_54;
    case 4:
      int v32 = 1;
      goto LABEL_52;
    case 5:
      int v32 = 2;
LABEL_52:
      DWORD1(v106) = v32;
      goto LABEL_54;
    case 6:
      DWORD2(v106) = 1;
      BYTE12(v106) = 0;
LABEL_54:
      LOWORD(v33) = v18;
      if ((a5 & 0x40000000) != 0) {
        goto LABEL_70;
      }
      LOWORD(v33) = v18;
      if (!v97) {
        goto LABEL_70;
      }
      int64_t v34 = &a2[a4];
      if (!a4) {
        goto LABEL_67;
      }
      if (a3 > a4 && (*(unsigned char *)v30 & 0xC0) == 0x80) {
        return 4294967260;
      }
      int v35 = *(unsigned __int16 *)(a1 + 124);
      int64_t v34 = &a2[a4];
      if (!*(_WORD *)(a1 + 124)) {
        goto LABEL_67;
      }
      int64_t v34 = &a2[a4];
      if (a4 < 1) {
        goto LABEL_67;
      }
      uint64_t v36 = &a2[a4];
      break;
    default:
      return 4294967252;
  }
LABEL_63:
  unsigned int v37 = v36 - 1;
  while (1)
  {
    int64_t v34 = v37;
    if (v37 <= a2) {
      break;
    }
    --v37;
    if ((*v34 & 0xC0) != 0x80)
    {
      uint64_t v36 = v34;
      if (--v35) {
        goto LABEL_63;
      }
      break;
    }
  }
LABEL_67:
  char v93 = &a2[a3];
  int64_t v94 = v34 - a2;
  uint64_t valid = _pcre2_valid_utf_8(v34, a3 - (v34 - a2), (int64x2_t *)a6[4].i64);
  a6[4].i32[3] = valid;
  if (valid)
  {
    uint64_t v16 = valid;
    a6[4].i64[0] += v94;
    return v16;
  }
  int v33 = *(_DWORD *)(a1 + 96);
  unsigned int v28 = v92;
  char v19 = v93;
LABEL_70:
  char v85 = v33;
  if ((v33 & 0x10) != 0)
  {
    __int16 v39 = v33;
    int __c = *(unsigned __int8 *)(a1 + 112);
    uint64_t v40 = 0;
    if ((v33 & 0x20) != 0)
    {
      int v82 = *(unsigned __int8 *)(v103 + *(unsigned __int8 *)(a1 + 112) + 256);
      __int16 v39 = v33;
    }
    else
    {
      int v82 = *(unsigned __int8 *)(a1 + 112);
    }
  }
  else
  {
    int __c = 0;
    int v82 = 0;
    int v41 = (v89 >> 9) & 1;
    if ((v33 & 0x40) == 0) {
      int v41 = 1;
    }
    BOOL v43 = v41 == 0;
    __int16 v39 = v33;
    if (v43) {
      uint64_t v40 = a1 + 40;
    }
    else {
      uint64_t v40 = 0;
    }
  }
  int v90 = (v28 >> 19) & 1;
  unint64_t v81 = v30 - 1;
  unsigned int v88 = v39 & 0x10;
  if ((v39 & 0x80) != 0)
  {
    uint64_t v42 = *(unsigned __int8 *)(a1 + 116);
    if ((v39 & 0x100) != 0) {
      int v91 = *(unsigned __int8 *)(v103 + v42 + 256);
    }
    else {
      int v91 = *(unsigned __int8 *)(a1 + 116);
    }
  }
  else
  {
    LODWORD(v42) = 0;
    int v91 = 0;
  }
  uint64_t v86 = v40;
  int v87 = v42;
  int v95 = a5 & 0x40;
  a6[1].i64[1] = a1;
  a6[2].i64[0] = (uint64_t)a2;
  BOOL v43 = (v39 & 0x10) == 0 && v40 == 0;
  a6[2].i64[1] = 0;
  a6[4].i16[4] = 1;
  int v44 = !v43;
  int v84 = v44;
  uint64_t v80 = v88 >> 4;
  while (1)
  {
    if (*(_DWORD *)(a1 + 88) & 0x10000 | v95) {
      goto LABEL_204;
    }
    if ((v28 & 0x100) == 0)
    {
      uint64_t v45 = v19;
      goto LABEL_118;
    }
    if (v97)
    {
      uint64_t v45 = (unsigned __int8 *)v30;
      if (v30 >= (unint64_t)v19) {
        goto LABEL_118;
      }
LABEL_96:
      if (DWORD1(v106))
      {
        if ((unint64_t)v45 < *((void *)&v101 + 1))
        {
          char v46 = v19;
          int is_newline_8 = _pcre2_is_newline_8(v45, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
          char v19 = v46;
          if (is_newline_8) {
            goto LABEL_118;
          }
        }
      }
      else if ((unint64_t)v45 <= *((void *)&v101 + 1) - (unint64_t)DWORD2(v106) {
             && *v45 == BYTE12(v106)
      }
             && (DWORD2(v106) == 1 || v45[1] == BYTE13(v106)))
      {
        goto LABEL_118;
      }
      ++v45;
      while (v45 < v19)
      {
        char v48 = *v45++;
        if ((v48 & 0xC0) != 0x80)
        {
          --v45;
          goto LABEL_96;
        }
      }
    }
    else
    {
      uint64_t v45 = (unsigned __int8 *)v30;
      if (v30 < (unint64_t)v19)
      {
        do
        {
          if (DWORD1(v106))
          {
            if ((unint64_t)v45 < *((void *)&v101 + 1))
            {
              uint64_t v49 = v19;
              int v50 = _pcre2_is_newline_8(v45, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
              char v19 = v49;
              if (v50) {
                break;
              }
            }
          }
          else if ((unint64_t)v45 <= *((void *)&v101 + 1) - (unint64_t)DWORD2(v106) {
                 && *v45 == BYTE12(v106)
          }
                 && (DWORD2(v106) == 1 || v45[1] == BYTE13(v106)))
          {
            break;
          }
          ++v45;
        }
        while (v45 < v19);
      }
    }
LABEL_118:
    if (v98)
    {
      if (!v84) {
        goto LABEL_202;
      }
      if (v30 >= (unint64_t)v45) {
        goto LABEL_254;
      }
      unint64_t v51 = *(unsigned __int8 *)v30;
      if (v88)
      {
        BOOL v53 = v51 != __c && v51 != v82;
        BOOL v54 = !v53 || v86 == 0;
        int v55 = v87;
        if (v54)
        {
          if (v53) {
            goto LABEL_254;
          }
          goto LABEL_203;
        }
      }
      else
      {
        int v55 = v87;
        if (!v86) {
          goto LABEL_254;
        }
      }
      if (((*(unsigned __int8 *)(v86 + (v51 >> 3)) >> (v51 & 7)) & 1) == 0) {
        goto LABEL_254;
      }
    }
    else
    {
      if (v88)
      {
        BOOL v56 = (unsigned __int8 *)cstdlib_memchr((void *)v30, __c, (size_t)&v45[-v30]);
        unsigned int v57 = v56;
        if (__c == v82)
        {
          if (v56) {
            unint64_t v30 = (unint64_t)v56;
          }
          else {
            unint64_t v30 = (unint64_t)v45;
          }
        }
        else
        {
          int v59 = (unsigned __int8 *)cstdlib_memchr((void *)v30, v82, (size_t)&v45[-v30]);
          if (v57 < v59 || v59 == 0) {
            unint64_t v61 = (unint64_t)v57;
          }
          else {
            unint64_t v61 = (unint64_t)v59;
          }
          if (v59) {
            BOOL v62 = v59;
          }
          else {
            BOOL v62 = v45;
          }
          if (v57) {
            unint64_t v30 = v61;
          }
          else {
            unint64_t v30 = (unint64_t)v62;
          }
        }
        LOWORD(v28) = v92;
        int v55 = v87;
        if ((BYTE12(v105) & 0x30) == 0 && v30 >= *((void *)&v101 + 1)) {
          goto LABEL_254;
        }
        goto LABEL_203;
      }
      if ((v89 & 0x200) != 0)
      {
        if (v30 > (uint64_t)v101 + a4)
        {
          if (v97)
          {
            if (v30 >= (unint64_t)v45) {
              goto LABEL_195;
            }
LABEL_144:
            if (DWORD1(v106))
            {
              if (v30 > (unint64_t)v101
                && _pcre2_was_newline_8((unsigned char *)v30, SDWORD1(v106), v101, (int *)&v106 + 2, v90))
              {
                goto LABEL_195;
              }
            }
            else if (v30 >= (unint64_t)v101 + DWORD2(v106) {
                   && *(unsigned __int8 *)(v30 - DWORD2(v106)) == BYTE12(v106))
            }
            {
              if (DWORD2(v106) == 1)
              {
                LOWORD(v28) = v92;
                goto LABEL_195;
              }
              LOWORD(v28) = v92;
              if (*(unsigned __int8 *)(v30 - DWORD2(v106) + 1) == BYTE13(v106)) {
                goto LABEL_195;
              }
            }
            ++v30;
            while (v30 < (unint64_t)v45)
            {
              char v58 = *(unsigned char *)v30++;
              if ((v58 & 0xC0) != 0x80)
              {
                --v30;
                goto LABEL_144;
              }
            }
          }
          else
          {
            while (v30 < (unint64_t)v45)
            {
              if (DWORD1(v106))
              {
                if (v30 > (unint64_t)v101
                  && _pcre2_was_newline_8((unsigned char *)v30, SDWORD1(v106), v101, (int *)&v106 + 2, v90))
                {
                  break;
                }
              }
              else if (v30 >= (unint64_t)v101 + DWORD2(v106) {
                     && *(unsigned __int8 *)(v30 - DWORD2(v106)) == BYTE12(v106)
              }
                     && (DWORD2(v106) == 1 || *(unsigned __int8 *)(v30 - DWORD2(v106) + 1) == BYTE13(v106)))
              {
                break;
              }
              ++v30;
            }
          }
LABEL_195:
          if (*(unsigned char *)(v30 - 1) == 13)
          {
            BOOL v65 = (DWORD1(v106) - 1) > 1 || v30 >= (unint64_t)v45;
            if (!v65 && *(unsigned char *)v30 == 10) {
              ++v30;
            }
          }
        }
LABEL_202:
        int v55 = v87;
        goto LABEL_203;
      }
      if (!v86) {
        goto LABEL_202;
      }
      unint64_t v63 = v30;
      do
      {
        unint64_t v30 = v63;
        if (v63 >= (unint64_t)v45) {
          break;
        }
        ++v63;
      }
      while (((*(unsigned __int8 *)(v86 + ((unint64_t)*(unsigned __int8 *)v30 >> 3)) >> (*(unsigned char *)v30 & 7)) & 1) == 0);
      BOOL v64 = (BYTE12(v105) & 0x30) == 0 && v30 >= *((void *)&v101 + 1);
      int v55 = v87;
      if (v64) {
        goto LABEL_254;
      }
    }
LABEL_203:
    char v19 = (unsigned __int8 *)*((void *)&v101 + 1);
    if ((BYTE12(v105) & 0x30) == 0)
    {
      if ((uint64_t)(*((void *)&v101 + 1) - v30) < *(unsigned __int16 *)(a1 + 126)) {
        goto LABEL_254;
      }
      if (v85 < 0 && (uint64_t)(*((void *)&v101 + 1) - v30) <= 1999)
      {
        char v74 = (unsigned __int8 *)(v30 + v80);
        if (v30 + v80 > v81)
        {
          if (v91 == v55)
          {
            while ((unint64_t)v74 < *((void *)&v101 + 1))
            {
              int64_t v75 = v74;
              int v76 = *v74++;
              if (v76 == v91) {
                goto LABEL_253;
              }
            }
          }
          else
          {
            while ((unint64_t)v74 < *((void *)&v101 + 1))
            {
              int64_t v75 = v74;
              int v78 = *v74++;
              int v77 = v78;
              if (v78 == v55 || v77 == v91) {
                goto LABEL_253;
              }
            }
          }
          int64_t v75 = v74;
LABEL_253:
          unint64_t v81 = (unint64_t)v75;
          if ((unint64_t)v75 >= *((void *)&v101 + 1)) {
            goto LABEL_254;
          }
        }
      }
    }
LABEL_204:
    if (v30 > (unint64_t)v96) {
      goto LABEL_254;
    }
    uint64_t v66 = v19;
    v102.i64[0] = v30;
    v102.i64[1] = v30;
    uint64_t v109 = 0;
    uint64_t v67 = internal_dfa_match((uint64_t)&v99, *((char **)&v100 + 1), (unsigned char *)v30, a4, (int64x2_t *)a6[5].i64, 2 * a6[4].u16[5], a8, a9, 0, (uint64_t)v117);
    int v68 = v98;
    if (v67 != -1) {
      int v68 = 1;
    }
    if (v68 == 1) {
      break;
    }
    char v19 = v66;
    if ((v28 & 0x100) != 0)
    {
      if (DWORD1(v106))
      {
        if (v30 < *((void *)&v101 + 1))
        {
          int v69 = _pcre2_is_newline_8((unsigned __int8 *)v30, SDWORD1(v106), *((uint64_t *)&v101 + 1), (int *)&v106 + 2, v90);
          char v19 = v66;
          if (v69) {
            goto LABEL_254;
          }
        }
      }
      else if (v30 <= *((void *)&v101 + 1) - (unint64_t)DWORD2(v106) {
             && *(unsigned __int8 *)v30 == BYTE12(v106)
      }
             && (DWORD2(v106) == 1 || *(unsigned __int8 *)(v30 + 1) == BYTE13(v106)))
      {
        goto LABEL_254;
      }
    }
    uint64_t v70 = (unsigned __int8 *)(v30 + 1);
    if (v97 && v70 < v19)
    {
      char v71 = &v19[~v30];
      while ((*v70 & 0xC0) == 0x80)
      {
        ++v70;
        if (!--v71)
        {
          unint64_t v30 = (unint64_t)v19;
          goto LABEL_224;
        }
      }
    }
    unint64_t v30 = (unint64_t)v70;
LABEL_224:
    if (v30 > (unint64_t)v19)
    {
LABEL_254:
      uint64_t v16 = 0xFFFFFFFFLL;
      goto LABEL_260;
    }
    BOOL v72 = *(unsigned char *)(v30 - 1) != 13 || v30 >= (unint64_t)v19;
    if (!v72
      && *(unsigned char *)v30 == 10
      && (*(unsigned char *)(a1 + 97) & 8) == 0
      && ((DWORD1(v106) - 1) < 2 || DWORD2(v106) == 2))
    {
      ++v30;
    }
  }
  uint64_t v16 = v67;
  if (v67 == -2 && a6[4].i16[5])
  {
    a6[5].i64[0] = v30 - (void)a2;
    a6[5].i64[1] = v66 - a2;
  }
  a6[3] = vsubq_s64(v102, vdupq_n_s64((unint64_t)a2));
  a6[4].i64[0] = v30 - (void)a2;
  a6[4].i32[3] = v67;
LABEL_260:
  while (v117[0])
  {
    v117[0] = *(void *)v117[0];
    (*((void (**)(void))&v99 + 1))();
  }
  return v16;
}

uint64_t internal_dfa_match(uint64_t a1, char *a2, unsigned char *a3, uint64_t a4, void *a5, int a6, _DWORD *a7, int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v429 = 0;
  v430 = 0;
  uint64_t v431 = 0;
  unint64_t v13 = *(void *)(a1 + 32);
  unint64_t v422 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 24);
  unsigned int v15 = *(_DWORD *)(a1 + 112);
  unsigned int v16 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = v16 + 1;
  if (v16 >= *(_DWORD *)(a1 + 96)) {
    return 4294967249;
  }
  uint64_t v17 = a1;
  unsigned int v18 = a9;
  if (*(_DWORD *)(a1 + 100) < a9) {
    return 4294967243;
  }
  uint64_t v22 = a3;
  int v23 = (unsigned __int8 *)a2;
  int v24 = v15 & 0x80000;
  int v25 = (a8 - 2) / 6;
  uint64_t v404 = *(void *)(a1 + 64);
  char v26 = a7 + 2;
  uint64_t v27 = (uint64_t)&a7[3 * v25 + 2];
  LODWORD(v28) = *a2;
  unint64_t v408 = v13;
  uint64_t v418 = v14;
  int v417 = v15 & 0x80000;
  int v407 = v25;
  if ((int)v28 <= -127)
  {
    unint64_t v29 = 0;
    unint64_t v30 = a2;
    do
    {
      unint64_t v31 = __rev16(*((unsigned __int16 *)v30 + 2));
      if (v31 > v29) {
        unint64_t v29 = v31;
      }
      v30 += __rev16(*(unsigned __int16 *)(v30 + 1));
    }
    while (*v30 == 120);
    if (v24)
    {
      unint64_t v28 = 0;
      if (v29) {
        BOOL v32 = v13 >= (unint64_t)a3;
      }
      else {
        BOOL v32 = 1;
      }
      if (!v32)
      {
        int v33 = a3;
        do
        {
          int64_t v34 = v33 - 1;
          do
          {
            uint64_t v22 = v34;
            if ((unint64_t)v34 <= v13)
            {
              ++v28;
              goto LABEL_37;
            }
            --v34;
          }
          while ((*v22 & 0xC0) == 0x80);
          ++v28;
          int v33 = v22;
        }
        while (v28 < v29);
      }
    }
    else
    {
      unint64_t v28 = (unint64_t)&a3[-v13];
      if ((unint64_t)&a3[-v13] >= v29) {
        unint64_t v28 = v29;
      }
      uint64_t v22 = &a3[-v28];
    }
LABEL_37:
    if ((unint64_t)v22 < *(void *)(a1 + 48)) {
      *(void *)(a1 + 48) = v22;
    }
    uint64_t v36 = 0;
    LODWORD(v10) = v14 - 3;
    uint64_t v11 = (uint64_t)&a7[3 * v25 + 2];
    while (1)
    {
      int v40 = v23[3];
      if (v40 != 125) {
        break;
      }
      unint64_t v41 = __rev16(*((unsigned __int16 *)v23 + 2));
      if (v41 <= v28) {
        goto LABEL_44;
      }
LABEL_49:
      v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
      if (*v23 != 120) {
        goto LABEL_50;
      }
    }
    LODWORD(v41) = 0;
LABEL_44:
    if ((int)v36 >= v25) {
      return 4294967253;
    }
    uint64_t v36 = (v36 + 1);
    if (v40 == 125) {
      int v42 = -3;
    }
    else {
      int v42 = 0;
    }
    *(_DWORD *)uint64_t v11 = v10 - v23 + v42;
    *(_DWORD *)(v11 + 4) = 0;
    *(_DWORD *)(v11 + 8) = v28 - v41;
    v11 += 12;
    goto LABEL_49;
  }
  if (a9 || (*(unsigned char *)(a1 + 108) & 0x40) == 0)
  {
    unsigned int v35 = v28 + 123;
    if (v35 > 6) {
      LODWORD(v10) = 3;
    }
    else {
      unint64_t v10 = qword_220723018[(char)v35];
    }
    LODWORD(v36) = 0;
    LODWORD(v28) = v25 & ~(v25 >> 31);
    __int16 v39 = &a7[3 * v25 + 2];
    while (v28 != v36)
    {
      uint64_t v36 = (v36 + 1);
      *__int16 v39 = v23 - v14 + v10;
      v39[1] = 0;
      v39 += 3;
      v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
      LODWORD(v10) = 3;
      if (*v23 != 120) {
        goto LABEL_50;
      }
    }
    return 4294967253;
  }
  do
    v23 += __rev16(*(unsigned __int16 *)(v23 + 1));
  while (*v23 == 120);
  uint64_t v36 = a7[1];
  if (!*a7)
  {
    uint64_t v358 = a7[1];
    unsigned int v37 = v22;
    int v38 = &a7[3 * v25 + 2];
    cstdlib_memcpy(v38, a7 + 2, 12 * (int)v36);
    uint64_t v36 = v358;
    uint64_t v27 = (uint64_t)v38;
    int v25 = v407;
    int v24 = v15 & 0x80000;
    uint64_t v14 = v418;
    uint64_t v22 = v37;
    unint64_t v13 = v408;
  }
LABEL_50:
  uint64_t v43 = 0;
  int v389 = (v15 >> 19) & 1;
  unsigned int v419 = a9 + 1;
  uint64_t v376 = v404 + 256;
  *a7 = 0;
  signed int v363 = a6 & 0xFFFFFFFE;
  int v364 = v25 - 1;
  int v373 = (int *)(v17 + 120);
  uint64_t v374 = v404 + 832;
  int v362 = (unsigned __int8 *)(v13 + a4);
  uint64_t v357 = &v22[-v13];
  unsigned int v371 = -1;
  int v44 = v22;
  int v387 = a7;
  unint64_t v372 = (unint64_t)v22;
LABEL_51:
  if ((unint64_t)v44 > *(void *)(v17 + 56)) {
    *(void *)(v17 + 56) = v44;
  }
  *a7 ^= 1u;
  a7[1] = v36;
  if ((unint64_t)v44 >= v422)
  {
    int v46 = 0;
    LODWORD(v45) = -1;
  }
  else
  {
    LODWORD(v45) = *v44;
    int v46 = 1;
    if (v24 && v45 >= 0xC0)
    {
      LODWORD(v28) = v44[1] & 0x3F;
      if ((v45 & 0x20) != 0)
      {
        if ((v45 & 0x10) != 0)
        {
          if ((v45 & 8) != 0)
          {
            int v353 = v44[2] & 0x3F;
            LODWORD(v10) = v44[3] & 0x3F;
            LODWORD(v11) = v44[4] & 0x3F;
            if ((v45 & 4) != 0)
            {
              LODWORD(v45) = ((v45 & 1) << 30) | (v28 << 24) | (v353 << 18) | (v10 << 12) | (v11 << 6) | v44[5] & 0x3F;
              int v46 = 6;
            }
            else
            {
              LODWORD(v45) = ((v45 & 3) << 24) | (v28 << 18) | (v353 << 12) | (v10 << 6) | v11;
              int v46 = 5;
            }
          }
          else
          {
            LODWORD(v45) = ((v45 & 7) << 18) | (v28 << 12) | ((v44[2] & 0x3F) << 6) | v44[3] & 0x3F;
            int v46 = 4;
          }
        }
        else
        {
          LODWORD(v45) = ((v45 & 0xF) << 12) | (v28 << 6) | v44[2] & 0x3F;
          int v46 = 3;
        }
      }
      else
      {
        int v46 = 2;
        LODWORD(v45) = v44[1] & 0x3F | ((v45 & 0x1F) << 6);
      }
    }
  }
  if ((int)v36 < 1)
  {
    LODWORD(v47) = 0;
    int v354 = 0;
    if (v18) {
      goto LABEL_1412;
    }
    goto LABEL_1410;
  }
  int v427 = v46;
  v421 = v44;
  uint64_t v47 = 0;
  int v388 = 0;
  int v48 = 0;
  unsigned int v425 = 0;
  v426 = (int *)(v27 + 12 * (int)v36);
  int v375 = (int *)(v27 + 12);
  uint64_t v397 = v45;
  unint64_t v378 = (unint64_t)v45 >> 3;
  char v377 = v45 & 7;
  uint64_t v399 = ((int)v45 / 128);
  int v398 = v45 - (v28 & 0xFFFFFF80);
  BOOL v49 = v45 >> 13 <= 6 && (v45 - 160) >> 5 >= 0x6BB;
  uint64_t v50 = 0;
  int v51 = !v49;
  int v380 = v51;
  int v423 = v45;
  BOOL v379 = v45 == 95;
  unint64_t v424 = v27 + 4;
  uint64_t v400 = (uint64_t)v26;
  uint64_t v52 = v26;
  uint64_t v406 = (_DWORD *)v27;
  while (2)
  {
    int v53 = v48;
    unint64_t v28 = v27 + 12 * v48;
    int v54 = *(_DWORD *)v28;
    if ((*(_DWORD *)v28 & 0x80000000) != 0)
    {
      int v60 = *(_DWORD *)(v27 + 12 * v48 + 8);
      BOOL v61 = __OFSUB__(v60, 1);
      int v62 = v60 - 1;
      if (v62 < 0 == v61)
      {
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        *uint64_t v52 = v54;
        v52[1] = *(_DWORD *)(v27 + 12 * v48 + 4);
        v52[2] = v62;
        v52 += 3;
        BOOL v63 = v43 == 0;
LABEL_85:
        LODWORD(v28) = v425;
        if (!v63) {
          LODWORD(v28) = 1;
        }
        unsigned int v425 = v28;
        goto LABEL_1328;
      }
      int v54 = -v54;
      *(_DWORD *)unint64_t v28 = v54;
    }
    if (v48 >= 1)
    {
      uint64_t v55 = v48;
      unint64_t v10 = v424;
      do
      {
        if (*(_DWORD *)(v10 - 4) == v54 && *(_DWORD *)v10 == *(_DWORD *)(v27 + 12 * v48 + 4)) {
          goto LABEL_1328;
        }
        v10 += 12;
        --v55;
      }
      while (v55);
    }
    BOOL v56 = (unsigned __int8 *)(v14 + v54);
    uint64_t v57 = *v56;
    if (!v427)
    {
      if (poptable[v57]) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v43;
      }
    }
    unint64_t v28 = coptable[v57];
    if (coptable[v57])
    {
      char v58 = &v56[v28];
      unsigned int v59 = v56[v28];
      LODWORD(v28) = 1;
      if (v24 && v59 >= 0xC0)
      {
        LODWORD(v10) = v58[1] & 0x3F;
        if ((v59 & 0x20) != 0)
        {
          if ((v59 & 0x10) != 0)
          {
            if ((v59 & 8) != 0)
            {
              int v64 = v58[2] & 0x3F;
              LODWORD(v11) = v58[3] & 0x3F;
              LODWORD(v45) = v58[4] & 0x3F;
              if ((v59 & 4) != 0)
              {
                unsigned int v59 = ((v59 & 1) << 30) | (v10 << 24) | (v64 << 18) | (v11 << 12) | (v45 << 6) | v58[5] & 0x3F;
                LODWORD(v28) = 6;
              }
              else
              {
                unsigned int v59 = ((v59 & 3) << 24) | (v10 << 18) | (v64 << 12) | (v11 << 6) | v45;
                LODWORD(v28) = 5;
              }
            }
            else
            {
              unsigned int v59 = ((v59 & 7) << 18) | (v10 << 12) | ((v58[2] & 0x3F) << 6) | v58[3] & 0x3F;
              LODWORD(v28) = 4;
            }
          }
          else
          {
            unsigned int v59 = ((v59 & 0xF) << 12) | (v10 << 6) | v58[2] & 0x3F;
            LODWORD(v28) = 3;
          }
        }
        else
        {
          LODWORD(v28) = 2;
          unsigned int v59 = v58[1] & 0x3F | ((v59 & 0x1F) << 6);
        }
      }
      if (v57 >= 0x55)
      {
        uint64_t result = 4294967254;
        switch(v59)
        {
          case 0xEu:
            return result;
          case 0xFu:
          case 0x10u:
            LODWORD(v57) = v57 + 300;
            break;
          case 0x11u:
            LODWORD(v57) = v57 + 340;
            unsigned int v59 = 0x11u;
            break;
          case 0x12u:
          case 0x13u:
            LODWORD(v57) = v57 + 360;
            break;
          case 0x14u:
          case 0x15u:
            LODWORD(v57) = v57 + 380;
            break;
          case 0x16u:
            LODWORD(v57) = v57 + 320;
            unsigned int v59 = 0x16u;
            break;
          default:
            break;
        }
      }
    }
    else
    {
      unsigned int v59 = -1;
    }
    uint64_t result = 0;
    LOBYTE(v10) = 1;
    int v65 = -2;
    int v66 = 4;
    switch((int)v57)
    {
      case 1:
        if (v421 != (unsigned __int8 *)v408) {
          goto LABEL_1328;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        int v188 = v54 + 1;
        uint64_t v189 = v426;
        goto LABEL_657;
      case 2:
        LODWORD(v28) = v362;
        if (v421 != v362) {
          goto LABEL_1328;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        int *v426 = v54 + 1;
        v426[1] = 0;
        v426 += 3;
        unint64_t v28 = (unint64_t)v362;
        goto LABEL_659;
      case 4:
      case 5:
        if ((unint64_t)v421 <= v408)
        {
          LODWORD(v28) = 0;
          LODWORD(v10) = v427;
          goto LABEL_995;
        }
        int v133 = v421 - 1;
        if ((unint64_t)(v421 - 1) < *(void *)(v17 + 48)) {
          *(void *)(v17 + 48) = v133;
        }
        if (!v24)
        {
          unsigned int v135 = *v133;
          goto LABEL_774;
        }
        unsigned int v134 = (char *)(v421 + 2);
        do
        {
          unsigned int v135 = *(v134 - 3);
          --v134;
        }
        while ((v135 & 0xC0) == 0x80);
        if (v135 < 0xC0) {
          goto LABEL_774;
        }
        int v136 = *(v134 - 1) & 0x3F;
        if ((v135 & 0x20) == 0)
        {
          unsigned int v135 = *(v134 - 1) & 0x3F | ((v135 & 0x1F) << 6);
          goto LABEL_774;
        }
        if ((v135 & 0x10) == 0)
        {
          int v340 = ((v135 & 0xF) << 12) | (v136 << 6);
          char v341 = *v134;
LABEL_1339:
          unsigned int v135 = v340 & 0xFFFFFFC0 | v341 & 0x3F;
          goto LABEL_774;
        }
        if ((v135 & 8) == 0)
        {
          int v340 = ((v135 & 7) << 18) | (v136 << 12) | ((*v134 & 0x3F) << 6);
          char v341 = v134[1];
          goto LABEL_1339;
        }
        uint64_t v351 = v50;
        LODWORD(v11) = *v134 & 0x3F;
        LODWORD(v45) = v134[1] & 0x3F;
        int v352 = v134[2] & 0x3F;
        if ((v135 & 4) != 0) {
          unsigned int v135 = ((v135 & 1) << 30) | (v136 << 24) | (v11 << 18) | (v45 << 12) | (v352 << 6) | v134[3] & 0x3F;
        }
        else {
          unsigned int v135 = ((v135 & 3) << 24) | (v136 << 18) | (v11 << 12) | (v45 << 6) | v352;
        }
        uint64_t v50 = v351;
LABEL_774:
        LODWORD(v10) = v427;
        if ((*(unsigned char *)(v17 + 114) & 2) != 0)
        {
          if (v135 == 95)
          {
            LODWORD(v28) = 1;
          }
          else
          {
            LODWORD(v10) = v427;
            LODWORD(v28) = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                          * _pcre2_ucd_stage2_8[v135 & 0x7F | (_pcre2_ucd_stage1_8[v135 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
          }
        }
        else if (v135 > 0xFF)
        {
          LODWORD(v28) = 0;
        }
        else
        {
          LODWORD(v28) = (*(unsigned __int8 *)(v374 + v135) >> 4) & 1;
        }
LABEL_995:
        if ((int)v10 < 1)
        {
          int v306 = 0;
        }
        else
        {
          if ((unint64_t)v421 >= *(void *)(v17 + 56))
          {
            v305 = v421 + 1;
            if (v24)
            {
              unint64_t v10 = *(void *)(v17 + 40);
              if ((unint64_t)v305 < v10)
              {
                uint64_t v11 = ~(unint64_t)v421 + v10;
                while ((*v305 & 0xC0) == 0x80)
                {
                  ++v305;
                  if (!--v11)
                  {
                    v305 = *(unsigned char **)(v17 + 40);
                    break;
                  }
                }
              }
            }
            *(void *)(v17 + 56) = v305;
          }
          if ((*(unsigned char *)(v17 + 114) & 2) != 0)
          {
            int v306 = v423 == 95
                || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                  * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399]
                                                                                      + v398]])] & 0xFFFFFFFD) == 1;
          }
          else if (v423 > 0xFF)
          {
            int v306 = 0;
          }
          else
          {
            LODWORD(v10) = v397;
            int v306 = (*(unsigned __int8 *)(v374 + v397) >> 4) & 1;
          }
        }
        if ((v57 == 4) == (v28 != v306)) {
          goto LABEL_1328;
        }
LABEL_1013:
        int v69 = v426;
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        LODWORD(v28) = v54 + 1;
        goto LABEL_1015;
      case 6:
      case 8:
      case 10:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        if (v423 > 0xFF) {
          goto LABEL_1323;
        }
LABEL_219:
        if ((toptable1[v57] & *(unsigned char *)(v374 + v397)) == toptable2[v57]) {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 7:
      case 9:
      case 11:
        if (v423 <= 0xFF && v427 >= 1) {
          goto LABEL_219;
        }
        goto LABEL_1328;
      case 12:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        uint64_t v107 = v36;
        uint64_t v190 = v43;
        int v191 = *(_DWORD *)(v17 + 116);
        unint64_t v192 = *(void *)(v17 + 40);
        if (v191)
        {
          char v193 = v421;
          unint64_t v194 = v373;
          if ((unint64_t)v421 >= v192) {
            goto LABEL_1037;
          }
          unsigned int v366 = v50;
          int v195 = v48;
          if (!_pcre2_is_newline_8(v421, v191, v192, v373, v389))
          {
            unint64_t v192 = *(void *)(v17 + 40);
            uint64_t v14 = v418;
            int v24 = v417;
            int v25 = v407;
            uint64_t v27 = (uint64_t)v406;
            int v48 = v195;
            uint64_t v50 = v366;
LABEL_1037:
            if ((unint64_t)(v193 + 1) >= v192
              && (*(unsigned char *)(v17 + 108) & 0x20) != 0
              && !*(_DWORD *)(v17 + 116)
              && *v194 == 2
              && v423 == *(unsigned __int8 *)(v17 + 124))
            {
              uint64_t v47 = 1;
              uint64_t v43 = 1;
              goto LABEL_1378;
            }
            if ((int)v50 >= v25) {
              return 4294967253;
            }
            uint64_t v36 = v107;
            goto LABEL_1324;
          }
LABEL_1101:
          uint64_t v14 = v418;
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          uint64_t v43 = v190;
          int v48 = v195;
          uint64_t v50 = v366;
          goto LABEL_1378;
        }
        unint64_t v194 = v373;
        unint64_t v28 = *v373;
        char v193 = v421;
        if ((unint64_t)v421 > v192 - v28
          || *v421 != *(unsigned __int8 *)(v17 + 124)
          || v28 != 1 && v421[1] != *(unsigned __int8 *)(v17 + 125))
        {
          goto LABEL_1037;
        }
        goto LABEL_1377;
      case 13:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 15:
      case 16:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        unint64_t v28 = _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399] + v398];
        switch(v56[1])
        {
          case 0u:
            goto LABEL_1308;
          case 1u:
            unsigned int v344 = BYTE1(_pcre2_ucd_records_8[2 * v28]);
            BOOL v181 = v344 > 9;
            LODWORD(v28) = (1 << v344) & 0x320;
            if (!v181 && v28 != 0) {
              goto LABEL_1308;
            }
            goto LABEL_1260;
          case 2u:
            int v346 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v28])];
            goto LABEL_1265;
          case 3u:
            int v346 = BYTE1(_pcre2_ucd_records_8[2 * v28]);
            goto LABEL_1265;
          case 4u:
            int v346 = LOBYTE(_pcre2_ucd_records_8[2 * v28]);
LABEL_1265:
            BOOL v347 = v346 == v56[2];
            goto LABEL_1267;
          case 5u:
            BOOL v347 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v28])] & 0xFFFFFFFD) == 1;
            goto LABEL_1267;
          case 6u:
          case 7u:
            LODWORD(v10) = v423;
            if (v423 < 0x2000)
            {
              if (v423 > 132)
              {
                if (v423 > 5759)
                {
                  if (v423 != 5760 && v423 != 6158) {
                    goto LABEL_1392;
                  }
                }
                else if (v423 != 133 && v423 != 160)
                {
                  goto LABEL_1392;
                }
              }
              else if (v423 > 0x20 || ((1 << v397) & 0x100003E00) == 0)
              {
                goto LABEL_1392;
              }
            }
            else if ((v423 - 0x2000) >= 0xB {
                   && ((v423 - 8232) > 0x37
            }
                    || ((1 << (v423 - 40)) & 0x80000000000083) == 0)
                   && v423 != 12288)
            {
LABEL_1392:
              BOOL v347 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v28])] == 6;
LABEL_1267:
              LODWORD(v28) = v347;
LABEL_1270:
              if ((v57 != 16) == v28) {
                goto LABEL_1328;
              }
LABEL_1309:
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              LODWORD(v28) = v54 + 3;
              goto LABEL_1325;
            }
LABEL_1308:
            if (v57 != 16) {
              goto LABEL_1328;
            }
            goto LABEL_1309;
          case 8u:
            int v348 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v28])] | 2;
            LODWORD(v28) = v379;
            if (v348 != 3) {
              goto LABEL_1270;
            }
            goto LABEL_1308;
          case 9u:
            unint64_t v28 = (unint64_t)&_pcre2_ucd_caseless_sets_8[v56[2]];
            while (1)
            {
              int v349 = *(_DWORD *)v28;
              LODWORD(v10) = v423;
              if (v423 < *(_DWORD *)v28) {
                break;
              }
              v28 += 4;
              if (v423 == v349) {
                goto LABEL_1308;
              }
            }
LABEL_1260:
            if (v57 == 16) {
              goto LABEL_1328;
            }
            goto LABEL_1309;
          case 0xAu:
            LODWORD(v28) = v380;
            if ((v423 - 36) > 0x3C) {
              goto LABEL_1270;
            }
            LODWORD(v28) = v380;
            if (((1 << (v423 - 36)) & 0x1000000010000001) == 0) {
              goto LABEL_1270;
            }
            goto LABEL_1308;
          default:
            LODWORD(v28) = v57 != 16;
            goto LABEL_1270;
        }
      case 17:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        if (v423 <= 12)
        {
          if ((v423 - 11) >= 2)
          {
            if (v423 != 10) {
              goto LABEL_1328;
            }
LABEL_1323:
            if ((int)v50 >= v25) {
              return 4294967253;
            }
LABEL_1324:
            uint64_t v50 = (v50 + 1);
            LODWORD(v28) = v54 + 1;
LABEL_1325:
            *uint64_t v52 = v28;
LABEL_1326:
            v52[1] = 0;
            goto LABEL_1327;
          }
LABEL_970:
          if (*(_WORD *)(v17 + 128) == 2) {
            goto LABEL_1328;
          }
          goto LABEL_1323;
        }
        if ((v423 - 8232) < 2) {
          goto LABEL_970;
        }
        if (v423 != 13)
        {
          if (v423 != 133) {
            goto LABEL_1328;
          }
          goto LABEL_970;
        }
        if ((unint64_t)(v421 + 1) < v422)
        {
          if (v421[1] != 10) {
            goto LABEL_1323;
          }
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          *uint64_t v52 = ~v54;
          *(void *)(v52 + 1) = 0x100000000;
LABEL_1327:
          v52 += 3;
          goto LABEL_1328;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        *uint64_t v52 = v54 + 1;
        v52[1] = 0;
        v52 += 3;
        BOOL v63 = (*(unsigned char *)(v17 + 108) & 0x20) == 0;
        goto LABEL_85;
      case 18:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v10) = v423;
        LODWORD(v28) = v423 - 0x2000;
        if (v423 < 0x2000)
        {
          if (v423 <= 159)
          {
            if (v423 == 9 || v423 == 32) {
              goto LABEL_1328;
            }
          }
          else if (v423 == 160 || v423 == 5760 || v423 == 6158)
          {
            goto LABEL_1328;
          }
        }
        else if (v423 > 8238)
        {
          if (v423 == 8239 || v423 == 8287 || v423 == 12288) {
            goto LABEL_1328;
          }
        }
        else if (v28 < 0xB)
        {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 19:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v10) = v423;
        LODWORD(v28) = v423 - 0x2000;
        if (v423 < 0x2000)
        {
          if (v423 <= 159)
          {
            if (v423 != 9 && v423 != 32) {
              goto LABEL_1328;
            }
          }
          else if (v423 != 160 && v423 != 5760 && v423 != 6158)
          {
            goto LABEL_1328;
          }
        }
        else if (v423 > 8238)
        {
          if (v423 != 8239 && v423 != 8287 && v423 != 12288) {
            goto LABEL_1328;
          }
        }
        else if (v28 >= 0xB)
        {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 20:
        if (v427 < 1 || (v423 - 10) < 4 || (v423 - 8232) < 2 || v423 == 133) {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 21:
        if (v427 < 1 || (v423 - 10) >= 4 && (v423 - 8232) >= 2 && v423 != 133) {
          goto LABEL_1328;
        }
        goto LABEL_1323;
      case 22:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        uint64_t v139 = v47;
        uint64_t v196 = v36;
        int v197 = v50;
        int v198 = v48;
        LODWORD(v428) = 0;
        if ((unint64_t)_pcre2_extuni_8(v423, &v421[v427], *(void *)(v17 + 32), v422, v389, &v428) >= v422)
        {
          LODWORD(v28) = v425;
          if ((*(unsigned char *)(v17 + 108) & 0x20) != 0) {
            LODWORD(v28) = 1;
          }
          unsigned int v425 = v28;
        }
        int v25 = v407;
        uint64_t v14 = v418;
        int v24 = v417;
        uint64_t v27 = (uint64_t)v406;
        if (v197 >= v407) {
          return 4294967253;
        }
        int v48 = v198;
        uint64_t v36 = v196;
        uint64_t v50 = (v197 + 1);
        *uint64_t v52 = ~v54;
        v52[1] = 0;
        v52[2] = v428;
        v52 += 3;
        goto LABEL_737;
      case 23:
        if (v427)
        {
          uint64_t v107 = v36;
          uint64_t v190 = v43;
          int v199 = *(_DWORD *)(v17 + 116);
          unint64_t v200 = *(void *)(v17 + 40);
          if (v199)
          {
            if ((unint64_t)v421 < v200)
            {
              unsigned int v366 = v50;
              int v195 = v48;
              if (!_pcre2_is_newline_8(v421, v199, v200, v373, v389)) {
                goto LABEL_1101;
              }
              unint64_t v28 = *v373;
              uint64_t v14 = v418;
              int v24 = v417;
              int v25 = v407;
              uint64_t v27 = (uint64_t)v406;
              int v48 = v195;
              uint64_t v50 = v366;
              uint64_t v36 = v107;
              goto LABEL_630;
            }
          }
          else
          {
            unint64_t v28 = *v373;
            if ((unint64_t)v421 <= v200 - v28)
            {
              uint64_t v36 = v107;
              if (*v421 != *(unsigned __int8 *)(v17 + 124) || v28 != 1 && v421[1] != *(unsigned __int8 *)(v17 + 125)) {
                goto LABEL_1328;
              }
LABEL_630:
              if (v421 != (unsigned __int8 *)(v422 - v28)) {
                goto LABEL_1328;
              }
              goto LABEL_851;
            }
          }
LABEL_1377:
          uint64_t v43 = v190;
          goto LABEL_1378;
        }
        if ((*(unsigned char *)(v17 + 108) & 0x20) == 0)
        {
LABEL_851:
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          LODWORD(v28) = v54 + 1;
LABEL_974:
          int v69 = v426;
LABEL_1015:
          *int v69 = v28;
          v69[1] = 0;
LABEL_1016:
          v426 = v69 + 3;
          goto LABEL_1328;
        }
        goto LABEL_853;
      case 24:
        if ((unint64_t)v421 < v422) {
          goto LABEL_1328;
        }
        if ((*(unsigned char *)(v17 + 108) & 0x20) == 0) {
          goto LABEL_1013;
        }
        goto LABEL_854;
      case 25:
        LODWORD(v28) = *(_DWORD *)(v17 + 108);
        if ((v28 & 2) != 0) {
          goto LABEL_1328;
        }
        if (!v427 && (v28 & 0x20) != 0) {
          goto LABEL_853;
        }
        uint64_t v107 = v36;
        uint64_t v190 = v43;
        int v201 = v373;
        BOOL v202 = v421;
        if (!v427) {
          goto LABEL_1379;
        }
        if ((*(unsigned char *)(v17 + 112) & 0x10) != 0) {
          goto LABEL_1376;
        }
        int v203 = *(_DWORD *)(v17 + 116);
        unint64_t v204 = *(void *)(v17 + 40);
        if (v203)
        {
          if ((unint64_t)v421 < v204)
          {
            int v205 = v48;
            uint64_t v383 = v17;
            uint64_t v206 = v52;
            uint64_t v207 = v50;
            int is_newline_8 = _pcre2_is_newline_8(v421, v203, v204, v373, v389);
            uint64_t v50 = v207;
            uint64_t v52 = v206;
            uint64_t v17 = v383;
            int v48 = v205;
            uint64_t v27 = (uint64_t)v406;
            int v25 = v407;
            int v24 = v417;
            uint64_t v14 = v418;
            if (is_newline_8)
            {
              unint64_t v28 = *v373;
              goto LABEL_1375;
            }
          }
        }
        else
        {
          unint64_t v28 = *v373;
          if ((unint64_t)v421 <= v204 - v28
            && *v421 == *(unsigned __int8 *)(v17 + 124)
            && (v28 == 1 || v421[1] == *(unsigned __int8 *)(v17 + 125)))
          {
LABEL_1375:
            if (v421 != (unsigned __int8 *)(v422 - v28)) {
              goto LABEL_1376;
            }
LABEL_1379:
            if ((int)v107 < v25)
            {
              uint64_t v36 = (v107 + 1);
              *(void *)v426 = (v54 + 1);
              v426 += 3;
              uint64_t v43 = v190;
              goto LABEL_1328;
            }
            return 4294967253;
          }
        }
        goto LABEL_1376;
      case 26:
        LODWORD(v28) = *(_DWORD *)(v17 + 108);
        if ((v28 & 2) == 0)
        {
          if (v427 || (v28 & 0x20) == 0)
          {
            uint64_t v107 = v36;
            uint64_t v190 = v43;
            int v201 = v373;
            BOOL v202 = v421;
            if (!v427) {
              goto LABEL_1379;
            }
            if ((*(unsigned char *)(v17 + 112) & 0x10) != 0) {
              goto LABEL_1376;
            }
            int v209 = *(_DWORD *)(v17 + 116);
            unint64_t v210 = *(void *)(v17 + 40);
            if (v209)
            {
              if ((unint64_t)v421 < v210)
              {
                int v211 = v48;
                uint64_t v384 = v17;
                uint64_t v212 = v52;
                uint64_t v213 = v50;
                int v214 = _pcre2_is_newline_8(v421, v209, v210, v373, v389);
                uint64_t v50 = v213;
                uint64_t v52 = v212;
                uint64_t v17 = v384;
                int v48 = v211;
                uint64_t v27 = (uint64_t)v406;
                int v25 = v407;
                int v24 = v417;
                uint64_t v14 = v418;
                if (v214) {
                  goto LABEL_1379;
                }
              }
            }
            else
            {
              unint64_t v28 = *v373;
              if ((unint64_t)v421 <= v210 - v28
                && *v421 == *(unsigned __int8 *)(v17 + 124)
                && (v28 == 1 || v421[1] == *(unsigned __int8 *)(v17 + 125)))
              {
                goto LABEL_1379;
              }
            }
LABEL_1376:
            if ((unint64_t)(v202 + 1) >= *(void *)(v17 + 40))
            {
              LODWORD(v28) = *(_DWORD *)(v17 + 108);
              uint64_t v43 = v190;
              uint64_t v36 = v107;
              if ((v28 & 0x30) == 0 || *(_DWORD *)(v17 + 116) || *v201 != 2 || v423 != *(unsigned __int8 *)(v17 + 124)) {
                goto LABEL_1328;
              }
              if ((v28 & 0x20) != 0)
              {
                if ((int)v50 >= v407) {
                  return 4294967253;
                }
                uint64_t v50 = (v50 + 1);
                *uint64_t v52 = ~v54;
                *(void *)(v52 + 1) = 0x100000000;
                v52 += 3;
                uint64_t v14 = v418;
                int v24 = v417;
                int v25 = v407;
                uint64_t v27 = (uint64_t)v406;
                unsigned int v425 = 1;
                uint64_t v43 = v190;
              }
              else
              {
                uint64_t v43 = 1;
                uint64_t v14 = v418;
                int v24 = v417;
                int v25 = v407;
                uint64_t v27 = (uint64_t)v406;
                uint64_t v47 = 1;
              }
LABEL_1378:
              uint64_t v36 = v107;
              goto LABEL_1328;
            }
            goto LABEL_1377;
          }
LABEL_853:
          int v427 = 0;
LABEL_854:
          uint64_t v43 = 1;
          goto LABEL_1328;
        }
        uint64_t v237 = v36;
        uint64_t v238 = v43;
        int v246 = *(_DWORD *)(v17 + 116);
        unint64_t v247 = *(void *)(v17 + 40);
        if (v246)
        {
          if ((unint64_t)v421 < v247)
          {
            int v248 = v48;
            uint64_t v249 = v50;
            int v250 = _pcre2_is_newline_8(v421, v246, v247, v373, v389);
            uint64_t v50 = v249;
            int v48 = v248;
            uint64_t v27 = (uint64_t)v406;
            int v25 = v407;
            int v24 = v417;
            uint64_t v14 = v418;
            uint64_t v36 = v237;
            if (!v250) {
              goto LABEL_1328;
            }
            goto LABEL_851;
          }
        }
        else
        {
          unint64_t v28 = *v373;
          LODWORD(v11) = v421;
          if ((unint64_t)v421 <= v247 - v28)
          {
            uint64_t v36 = v237;
            if (*v421 != *(unsigned __int8 *)(v17 + 124)
              || v28 != 1 && v421[1] != *(unsigned __int8 *)(v17 + 125))
            {
              goto LABEL_1328;
            }
            goto LABEL_851;
          }
        }
        goto LABEL_1108;
      case 27:
        if (v421 != (unsigned __int8 *)v408) {
          goto LABEL_1328;
        }
        if (*(unsigned char *)(v17 + 108)) {
          goto LABEL_658;
        }
        uint64_t v189 = v426;
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        int v188 = v54 + 1;
LABEL_657:
        *uint64_t v189 = v188;
        v189[1] = 0;
        v426 = v189 + 3;
LABEL_658:
        unint64_t v28 = v408;
LABEL_659:
        v421 = (unsigned __int8 *)v28;
        goto LABEL_1328;
      case 28:
        if (v421 == (unsigned __int8 *)v408 && (*(unsigned char *)(v17 + 108) & 1) == 0) {
          goto LABEL_748;
        }
        LODWORD(v28) = v422;
        if (v421 == (unsigned __int8 *)v422 && (*(unsigned char *)(v17 + 114) & 0x20) == 0)
        {
          v421 = (unsigned __int8 *)v422;
          goto LABEL_1328;
        }
        uint64_t v237 = v36;
        uint64_t v238 = v43;
        int v239 = *(_DWORD *)(v17 + 116);
        unint64_t v240 = *(void *)(v17 + 32);
        if (v239)
        {
          if ((unint64_t)v421 > v240)
          {
            int v241 = v48;
            uint64_t v242 = v50;
            int v243 = _pcre2_was_newline_8(v421, v239, v240, v373, v389);
            uint64_t v50 = v242;
            int v48 = v241;
            uint64_t v27 = (uint64_t)v406;
            int v25 = v407;
            int v24 = v417;
            uint64_t v14 = v418;
            uint64_t v36 = v237;
            if (!v243) {
              goto LABEL_1328;
            }
LABEL_748:
            if ((int)v36 < v25)
            {
              uint64_t v36 = (v36 + 1);
              *(void *)v426 = (v54 + 1);
              v426 += 3;
              goto LABEL_1328;
            }
            return 4294967253;
          }
        }
        else
        {
          unint64_t v28 = *v373;
          if ((unint64_t)v421 >= v240 + v28)
          {
            uint64_t v36 = v237;
            if (v421[-v28] != *(unsigned __int8 *)(v17 + 124)
              || v28 != 1 && v421[-v28 + 1] != *(unsigned __int8 *)(v17 + 125))
            {
              goto LABEL_1328;
            }
            goto LABEL_748;
          }
        }
LABEL_1108:
        uint64_t v43 = v238;
        uint64_t v36 = v237;
        goto LABEL_1328;
      case 29:
        if (v427 < 1 || v423 != v59) {
          goto LABEL_1328;
        }
        goto LABEL_912;
      case 30:
        if (!v427)
        {
          int v427 = 0;
          goto LABEL_1328;
        }
        if (v24)
        {
          LODWORD(v11) = v423;
          if (v423 != v59)
          {
            if (v423 > 0x7F)
            {
              int v215 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399] + v398] + 1] + v423;
            }
            else
            {
              LODWORD(v10) = v397;
              int v215 = *(unsigned __int8 *)(v376 + v397);
            }
            if (v59 != v215) {
              goto LABEL_1328;
            }
          }
LABEL_912:
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          LODWORD(v28) = v54 + v28 + 1;
        }
        else
        {
          if (*(unsigned __int8 *)(v404 + v397) != *(unsigned __int8 *)(v404 + v59)) {
            goto LABEL_1328;
          }
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          LODWORD(v28) = v54 + 2;
        }
        goto LABEL_1325;
      case 31:
        if (v427 < 1 || v423 == v59) {
          goto LABEL_1328;
        }
        goto LABEL_912;
      case 32:
        if (v427 >= 1)
        {
          int v216 = v24 && v59 >= 0x80
               ? _pcre2_ucd_records_8[2
                                    * _pcre2_ucd_stage2_8[(int)(v59
                                                              - (v10 & 0xFFFFFF80)
                                                              + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                    + 1]
               + v59
               : *(unsigned __int8 *)(v376 + v59);
          LODWORD(v10) = v423;
          if (v423 != v59 && v423 != v216) {
            goto LABEL_912;
          }
        }
        goto LABEL_1328;
      case 33:
      case 34:
      case 42:
      case 59:
      case 60:
      case 68:
        goto LABEL_106;
      case 35:
      case 36:
      case 43:
      case 61:
      case 62:
      case 69:
        goto LABEL_114;
      case 37:
      case 38:
      case 44:
      case 63:
      case 64:
      case 70:
        goto LABEL_118;
      case 39:
      case 40:
      case 45:
      case 65:
      case 66:
      case 71:
        goto LABEL_123;
      case 41:
      case 67:
        if (v427 <= 0) {
          goto LABEL_1328;
        }
        int v137 = *(_DWORD *)(v27 + 12 * v48 + 4);
        int v138 = -1;
        goto LABEL_752;
      case 46:
      case 47:
      case 55:
      case 72:
      case 73:
      case 81:
        LOBYTE(v10) = 0;
        LODWORD(v57) = v57 - 13;
LABEL_106:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v67 = (v36 + 1);
        int *v426 = v54 + v28 + 1;
        v426[1] = 0;
        unint64_t v28 = (unint64_t)(v426 + 3);
        if (v427 < 1) {
          goto LABEL_457;
        }
        if (v10) {
          int v68 = -1;
        }
        else {
          int v68 = v24 && v59 >= 0x80
        }
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[(int)(v59
                                                             - (v11 & 0xFFFFFF80)
                                                             + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                   + 1]
              + v59
              : *(unsigned __int8 *)(v376 + v59);
        LODWORD(v11) = v423;
        BOOL v165 = v423 == v59 || v423 == v68;
        LODWORD(v10) = v165;
        if (v57 > 0x3A == v10) {
          goto LABEL_457;
        }
        if (v57 == 68 || v57 == 42)
        {
          unint64_t v28 = (unint64_t)v426;
          uint64_t v67 = v36;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        *uint64_t v52 = v54;
        goto LABEL_455;
      case 48:
      case 49:
      case 56:
      case 74:
      case 75:
      case 82:
        LOBYTE(v10) = 0;
        LODWORD(v57) = v57 - 13;
LABEL_114:
        int v70 = *(_DWORD *)(v27 + 12 * v48 + 4);
        if (v70 < 1)
        {
          uint64_t v11 = (uint64_t)v426;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + v28 + 1);
          uint64_t v11 = (uint64_t)(v426 + 3);
        }
        v426 = (int *)v11;
        if (v427 < 1) {
          goto LABEL_1328;
        }
        if (v10) {
          int v83 = -1;
        }
        else {
          int v83 = v24 && v59 >= 0x80
        }
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[(int)(v59
                                                             - (v10 & 0xFFFFFF80)
                                                             + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                   + 1]
              + v59
              : *(unsigned __int8 *)(v376 + v59);
        LODWORD(v10) = v423;
        BOOL v163 = v423 == v59 || v423 == v83;
        LODWORD(v28) = v163;
        if (v57 > 0x3A == v28) {
          goto LABEL_1328;
        }
        if (v70 < 1)
        {
          char v164 = (int *)v11;
        }
        else
        {
          char v164 = (int *)v11;
          if (v57 == 69 || v57 == 43)
          {
            uint64_t v36 = (v36 - 1);
            char v164 = (int *)(v11 - 12);
          }
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        v426 = v164;
LABEL_489:
        uint64_t v50 = (v50 + 1);
        LODWORD(v28) = v70 + 1;
        goto LABEL_1251;
      case 50:
      case 51:
      case 57:
      case 76:
      case 77:
      case 83:
        LOBYTE(v10) = 0;
        LODWORD(v57) = v57 - 13;
LABEL_118:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v67 = (v36 + 1);
        LODWORD(v11) = v54 + v28 + 1;
        *(void *)v426 = v11;
        unint64_t v28 = (unint64_t)(v426 + 3);
        if (v427 < 1) {
          goto LABEL_457;
        }
        if (v10) {
          int v71 = -1;
        }
        else {
          int v71 = v24 && v59 >= 0x80
        }
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[(int)(v59
                                                             - (v45 & 0xFFFFFF80)
                                                             + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                   + 1]
              + v59
              : *(unsigned __int8 *)(v376 + v59);
        LODWORD(v45) = v423;
        BOOL v166 = v423 == v59 || v423 == v71;
        LODWORD(v10) = v166;
        if (v57 > 0x3A == v10) {
          goto LABEL_457;
        }
        if (v57 == 70 || v57 == 44)
        {
          unint64_t v28 = (unint64_t)v426;
          uint64_t v67 = v36;
        }
        goto LABEL_453;
      case 52:
      case 53:
      case 58:
      case 78:
      case 79:
      case 84:
        LOBYTE(v10) = 0;
        LODWORD(v57) = v57 - 13;
LABEL_123:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v67 = (v36 + 1);
        LODWORD(v11) = v54 + v28 + 3;
        *(void *)v426 = v11;
        unint64_t v28 = (unint64_t)(v426 + 3);
        if (v427 < 1) {
          goto LABEL_457;
        }
        if (v10) {
          int v72 = -1;
        }
        else {
          int v72 = v24 && v59 >= 0x80
        }
              ? _pcre2_ucd_records_8[2
                                   * _pcre2_ucd_stage2_8[(int)(v59
                                                             - (v10 & 0xFFFFFF80)
                                                             + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                   + 1]
              + v59
              : *(unsigned __int8 *)(v376 + v59);
        LODWORD(v45) = v423;
        BOOL v167 = v423 == v59 || v423 == v72;
        LODWORD(v10) = v167;
        if (v57 > 0x3A == v10) {
          goto LABEL_457;
        }
        if (v57 == 71 || v57 == 45)
        {
          unint64_t v28 = (unint64_t)v426;
          uint64_t v67 = v36;
        }
        LODWORD(v10) = *(_DWORD *)(v27 + 12 * v48 + 4) + 1;
        if ((int)v10 >= (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
        {
LABEL_453:
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          *uint64_t v52 = v11;
LABEL_455:
          v52[1] = 0;
        }
        else
        {
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          *uint64_t v52 = v54;
          v52[1] = v10;
        }
        v52 += 3;
LABEL_457:
        v426 = (int *)v28;
        goto LABEL_458;
      case 54:
      case 80:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v57) = v57 - 13;
        int v137 = *(_DWORD *)(v27 + 12 * v48 + 4);
        if (v24 && v59 >= 0x80) {
          int v138 = _pcre2_ucd_records_8[2
        }
                                    * _pcre2_ucd_stage2_8[(int)(v59
                                                              - (v11 & 0xFFFFFF80)
                                                              + (_pcre2_ucd_stage1_8[(int)v59 / 128] << 7))]
                                    + 1]
               + v59;
        else {
          int v138 = *(unsigned __int8 *)(v376 + v59);
        }
LABEL_752:
        LODWORD(v11) = v423;
        LODWORD(v10) = v423 == v59 || v423 == v138;
        if (v57 > 0x3A == v10) {
          goto LABEL_1328;
        }
        signed int v245 = v137 + 1;
        if (v245 < (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
        {
          if ((int)v50 < v25)
          {
            uint64_t v50 = (v50 + 1);
            *uint64_t v52 = v54;
            v52[1] = v245;
            v52 += 3;
            goto LABEL_1328;
          }
          return 4294967253;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        LODWORD(v28) = v54 + v28 + 3;
        goto LABEL_1325;
      case 85:
      case 86:
      case 94:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v105 = (v36 + 1);
        *(void *)v426 = (v54 + 2);
        LODWORD(v10) = v427;
        if (v427 >= 1)
        {
          int v402 = v52;
          if (v59 == 12)
          {
            unint64_t v28 = (unint64_t)(v421 + 1);
            if ((unint64_t)(v421 + 1) >= *(void *)(v17 + 40)
              && (*(unsigned char *)(v17 + 108) & 0x20) != 0
              && !*(_DWORD *)(v17 + 116)
              && *v373 == 2)
            {
              LODWORD(v10) = v427;
              if (v423 == *(unsigned __int8 *)(v17 + 124))
              {
                uint64_t v47 = 1;
                v426 += 3;
LABEL_254:
                uint64_t v36 = v105;
                goto LABEL_854;
              }
            }
            unsigned int v232 = v36;
            int v427 = v10;
            uint64_t v233 = v43;
            if (v423 > 0xFF)
            {
LABEL_721:
              if (v59 > 0xB || ((1 << v59) & 0xA80) == 0) {
                goto LABEL_1139;
              }
              goto LABEL_1138;
            }
            int v254 = *(_DWORD *)(v17 + 116);
            unint64_t v255 = *(void *)(v17 + 40);
            if (v254)
            {
              if ((unint64_t)v421 >= v255) {
                goto LABEL_1137;
              }
              int v394 = v48;
              unsigned int v412 = v47;
              uint64_t v256 = v50;
              int v257 = _pcre2_is_newline_8(v421, v254, v255, v373, v389);
              uint64_t v50 = v256;
              uint64_t v47 = v412;
              int v24 = v417;
              int v48 = v394;
              uint64_t v27 = (uint64_t)v406;
              int v25 = v407;
              uint64_t v14 = v418;
              if (!v257) {
                goto LABEL_1137;
              }
LABEL_1138:
              v426 += 3;
LABEL_1153:
              uint64_t v36 = v105;
              uint64_t v43 = v233;
              uint64_t v52 = v402;
              goto LABEL_1328;
            }
            uint64_t v320 = *v373;
            if ((unint64_t)v421 <= v255 - v320
              && *v421 == *(unsigned __int8 *)(v17 + 124)
              && (v320 == 1 || *(unsigned __int8 *)v28 == *(unsigned __int8 *)(v17 + 125)))
            {
              goto LABEL_1138;
            }
          }
          else
          {
            unsigned int v232 = v36;
            uint64_t v233 = v43;
            if (v423 >= 0x100) {
              goto LABEL_721;
            }
          }
LABEL_1137:
          if ((toptable1[v59] & *(unsigned char *)(v374 + v397)) != toptable2[v59])
          {
LABEL_1139:
            if ((int)v50 >= v25) {
              return 4294967253;
            }
            uint64_t v43 = v233;
            uint64_t v50 = (v50 + 1);
            if (v57 == 94) {
              uint64_t v36 = v232;
            }
            else {
              uint64_t v36 = v105;
            }
            unint64_t v28 = (unint64_t)v426;
            if (v57 != 94) {
              unint64_t v28 = (unint64_t)(v426 + 3);
            }
            v426 = (int *)v28;
            uint64_t v52 = v402;
LABEL_1146:
            *uint64_t v52 = v54;
            goto LABEL_1326;
          }
          goto LABEL_1138;
        }
        v426 += 3;
        goto LABEL_574;
      case 87:
      case 88:
      case 95:
        int v106 = *(_DWORD *)(v27 + 12 * v48 + 4);
        if (v106 < 1) {
          goto LABEL_233;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        *(void *)v426 = (v54 + 2);
        v426 += 3;
LABEL_233:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        if (v59 != 12)
        {
          uint64_t v107 = v36;
          uint64_t v108 = v43;
          if (v423 < 0x100) {
            goto LABEL_1123;
          }
          goto LABEL_711;
        }
        unint64_t v28 = (unint64_t)(v421 + 1);
        if ((unint64_t)(v421 + 1) < *(void *)(v17 + 40)
          || (*(unsigned char *)(v17 + 108) & 0x20) == 0
          || *(_DWORD *)(v17 + 116)
          || *v373 != 2
          || v423 != *(unsigned __int8 *)(v17 + 124))
        {
          uint64_t v107 = v36;
          uint64_t v108 = v43;
          if (v423 <= 0xFF)
          {
            int v109 = *(_DWORD *)(v17 + 116);
            unint64_t v110 = *(void *)(v17 + 40);
            if (v109)
            {
              if ((unint64_t)v421 < v110)
              {
                uint64_t v381 = v17;
                unsigned int v411 = v47;
                int v111 = v48;
                uint64_t v112 = v50;
                int v113 = _pcre2_is_newline_8(v421, v109, v110, v373, v389);
                uint64_t v50 = v112;
                int v48 = v111;
                uint64_t v47 = v411;
                int v24 = v417;
                uint64_t v17 = v381;
                uint64_t v27 = (uint64_t)v406;
                int v25 = v407;
                uint64_t v14 = v418;
                if (v113) {
                  goto LABEL_1124;
                }
              }
            }
            else
            {
              uint64_t v317 = *v373;
              if ((unint64_t)v421 <= v110 - v317
                && *v421 == *(unsigned __int8 *)(v17 + 124)
                && (v317 == 1 || *(unsigned __int8 *)v28 == *(unsigned __int8 *)(v17 + 125)))
              {
                goto LABEL_1124;
              }
            }
LABEL_1123:
            if ((toptable1[v59] & *(unsigned char *)(v374 + v397)) == toptable2[v59])
            {
LABEL_1124:
              uint64_t v43 = v108;
              goto LABEL_1378;
            }
            goto LABEL_1125;
          }
LABEL_711:
          if (v59 <= 0xB && ((1 << v59) & 0xA80) != 0) {
            goto LABEL_1124;
          }
LABEL_1125:
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v43 = v108;
          uint64_t v50 = (v50 + 1);
          int v319 = v57 == 95 && v106 > 0;
          uint64_t v36 = (v107 - v319);
          v426 += 3 * (v319 << 31 >> 31);
          LODWORD(v28) = v106 + 1;
LABEL_1251:
          *uint64_t v52 = v54;
          v52[1] = v28;
          v52 += 3;
          goto LABEL_1328;
        }
        goto LABEL_687;
      case 89:
      case 90:
      case 96:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v105 = (v36 + 1);
        LODWORD(v28) = v426;
        *(void *)v426 = (v54 + 2);
        LODWORD(v10) = v427;
        if (v427 < 1)
        {
          v426 += 3;
LABEL_574:
          uint64_t v36 = v105;
          goto LABEL_1328;
        }
        int v402 = v52;
        if (v59 == 12)
        {
          unint64_t v28 = (unint64_t)(v421 + 1);
          if ((unint64_t)(v421 + 1) >= *(void *)(v17 + 40)
            && (*(unsigned char *)(v17 + 108) & 0x20) != 0
            && !*(_DWORD *)(v17 + 116)
            && *v373 == 2)
          {
            LODWORD(v10) = v427;
            if (v423 == *(unsigned __int8 *)(v17 + 124))
            {
              uint64_t v47 = 1;
              v426 += 3;
              goto LABEL_254;
            }
          }
          unsigned int v234 = v36;
          int v427 = v10;
          uint64_t v233 = v43;
          if (v423 > 0xFF)
          {
LABEL_725:
            if (v59 > 0xB || ((1 << v59) & 0xA80) == 0) {
              goto LABEL_1154;
            }
            goto LABEL_1152;
          }
          int v258 = *(_DWORD *)(v17 + 116);
          unint64_t v259 = *(void *)(v17 + 40);
          if (v258)
          {
            if ((unint64_t)v421 < v259)
            {
              int v395 = v48;
              unsigned int v413 = v47;
              uint64_t v260 = v50;
              int v261 = _pcre2_is_newline_8(v421, v258, v259, v373, v389);
              uint64_t v50 = v260;
              uint64_t v47 = v413;
              int v24 = v417;
              int v48 = v395;
              uint64_t v27 = (uint64_t)v406;
              int v25 = v407;
              uint64_t v14 = v418;
              if (v261) {
                goto LABEL_1152;
              }
            }
          }
          else
          {
            uint64_t v321 = *v373;
            if ((unint64_t)v421 <= v259 - v321
              && *v421 == *(unsigned __int8 *)(v17 + 124)
              && (v321 == 1 || *(unsigned __int8 *)v28 == *(unsigned __int8 *)(v17 + 125)))
            {
              goto LABEL_1152;
            }
          }
        }
        else
        {
          unsigned int v234 = v36;
          uint64_t v233 = v43;
          if (v423 >= 0x100) {
            goto LABEL_725;
          }
        }
        if ((toptable1[v59] & *(unsigned char *)(v374 + v397)) != toptable2[v59])
        {
LABEL_1154:
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v43 = v233;
          uint64_t v50 = (v50 + 1);
          if (v57 == 96) {
            uint64_t v36 = v234;
          }
          else {
            uint64_t v36 = v105;
          }
          unint64_t v28 = (unint64_t)v426;
          if (v57 != 96) {
            unint64_t v28 = (unint64_t)(v426 + 3);
          }
          v426 = (int *)v28;
          uint64_t v52 = v402;
          *int v402 = v54 + 2;
          goto LABEL_1326;
        }
LABEL_1152:
        v426 += 3;
        goto LABEL_1153;
      case 91:
      case 92:
      case 97:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v45 = (v36 + 1);
        LODWORD(v28) = v426;
        *(void *)v426 = (v54 + 4);
        long long v114 = v426 + 3;
        LODWORD(v10) = v427;
        if (v427 < 1)
        {
          v426 += 3;
          uint64_t v36 = (v36 + 1);
          goto LABEL_1328;
        }
        int v115 = *(_DWORD *)(v27 + 12 * v48 + 4);
        unsigned int v409 = v47;
        uint64_t v403 = v52;
        if (v59 == 12)
        {
          if ((unint64_t)(v421 + 1) >= *(void *)(v17 + 40)
            && (*(unsigned char *)(v17 + 108) & 0x20) != 0
            && !*(_DWORD *)(v17 + 116)
            && *v373 == 2
            && v423 == *(unsigned __int8 *)(v17 + 124))
          {
            uint64_t v47 = 1;
            v426 += 3;
            uint64_t v36 = (v36 + 1);
            goto LABEL_854;
          }
          unsigned int v235 = v36;
          uint64_t v236 = v43;
          if (v423 > 0xFF)
          {
LABEL_729:
            if (v59 > 0xB || ((1 << v59) & 0xA80) == 0) {
              goto LABEL_1168;
            }
            goto LABEL_1166;
          }
          int v262 = *(_DWORD *)(v17 + 116);
          unint64_t v263 = *(void *)(v17 + 40);
          if (v262)
          {
            LODWORD(v28) = v421;
            if ((unint64_t)v421 < v263)
            {
              int v396 = v48;
              unsigned int v369 = v50;
              unsigned int v385 = v45;
              int v356 = *(_DWORD *)(v27 + 12 * v48 + 4);
              int v264 = _pcre2_is_newline_8(v421, v262, v263, v373, v389);
              int v115 = v356;
              long long v114 = v426 + 3;
              uint64_t v45 = v385;
              uint64_t v50 = v369;
              int v48 = v396;
              uint64_t v27 = (uint64_t)v406;
              int v25 = v407;
              int v24 = v417;
              uint64_t v14 = v418;
              if (v264) {
                goto LABEL_1166;
              }
            }
          }
          else
          {
            uint64_t v322 = *v373;
            if ((unint64_t)v421 <= v263 - v322
              && *v421 == *(unsigned __int8 *)(v17 + 124)
              && (v322 == 1 || v421[1] == *(unsigned __int8 *)(v17 + 125)))
            {
              goto LABEL_1166;
            }
          }
        }
        else
        {
          unsigned int v235 = v36;
          uint64_t v236 = v43;
          if (v423 >= 0x100) {
            goto LABEL_729;
          }
        }
        if ((toptable1[v59] & *(unsigned char *)(v374 + v397)) != toptable2[v59])
        {
LABEL_1168:
          int v323 = v426;
          if (v57 != 97) {
            int v323 = v114;
          }
          v426 = v323;
          if (v57 == 97) {
            uint64_t v36 = v235;
          }
          else {
            uint64_t v36 = v45;
          }
          LODWORD(v28) = v115 + 1;
          uint64_t v43 = v236;
          if (v115 + 1 >= (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
          {
            uint64_t v52 = v403;
            uint64_t v47 = v409;
            if ((int)v50 >= v25) {
              return 4294967253;
            }
            uint64_t v50 = (v50 + 1);
            *uint64_t v403 = v54 + 4;
            goto LABEL_1326;
          }
          uint64_t v52 = v403;
          uint64_t v47 = v409;
          if ((int)v50 >= v25) {
            return 4294967253;
          }
LABEL_1187:
          uint64_t v50 = (v50 + 1);
          goto LABEL_1251;
        }
LABEL_1166:
        v426 = v114;
        uint64_t v36 = v45;
        uint64_t v43 = v236;
        uint64_t v52 = v403;
        goto LABEL_1167;
      case 93:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        int v217 = *(_DWORD *)(v27 + 12 * v48 + 4);
        if (v59 == 12)
        {
          uint64_t v190 = v43;
          unint64_t v28 = (unint64_t)(v421 + 1);
          if ((unint64_t)(v421 + 1) >= *(void *)(v17 + 40)
            && (*(unsigned char *)(v17 + 108) & 0x20) != 0
            && !*(_DWORD *)(v17 + 116)
            && *v373 == 2
            && v423 == *(unsigned __int8 *)(v17 + 124))
          {
LABEL_687:
            uint64_t v47 = 1;
            goto LABEL_854;
          }
          uint64_t v107 = v36;
          if (v423 > 0xFF) {
            goto LABEL_926;
          }
          int v331 = *(_DWORD *)(v17 + 116);
          unint64_t v332 = *(void *)(v17 + 40);
          if (v331)
          {
            if ((unint64_t)v421 < v332)
            {
              uint64_t v386 = v17;
              unsigned int v416 = v47;
              int v333 = v48;
              uint64_t v334 = v50;
              int v335 = _pcre2_is_newline_8(v421, v331, v332, v373, v389);
              uint64_t v50 = v334;
              int v48 = v333;
              uint64_t v47 = v416;
              int v24 = v417;
              uint64_t v17 = v386;
              uint64_t v27 = (uint64_t)v406;
              int v25 = v407;
              uint64_t v14 = v418;
              if (v335) {
                goto LABEL_1377;
              }
            }
          }
          else
          {
            uint64_t v350 = *v373;
            if ((unint64_t)v421 <= v332 - v350
              && *v421 == *(unsigned __int8 *)(v17 + 124)
              && (v350 == 1 || *(unsigned __int8 *)v28 == *(unsigned __int8 *)(v17 + 125)))
            {
              goto LABEL_1377;
            }
          }
        }
        else
        {
          uint64_t v107 = v36;
          uint64_t v190 = v43;
          if (v423 >= 0x100)
          {
LABEL_926:
            if (v59 <= 0xB && ((1 << v59) & 0xA80) != 0) {
              goto LABEL_1377;
            }
LABEL_1345:
            LODWORD(v28) = v217 + 1;
            uint64_t v43 = v190;
            uint64_t v36 = v107;
            if (v217 + 1 >= (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
            {
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              LODWORD(v28) = v54 + 4;
              goto LABEL_1325;
            }
LABEL_1186:
            if ((int)v50 >= v25) {
              return 4294967253;
            }
            goto LABEL_1187;
          }
        }
        if ((toptable1[v59] & *(unsigned char *)(v374 + v397)) == toptable2[v59]) {
          goto LABEL_1377;
        }
        goto LABEL_1345;
      case 110:
      case 111:
      case 112:
        if (v57 == 112)
        {
          long long v116 = &v56[__rev16(*(unsigned __int16 *)(v56 + 1))];
          if (v427 >= 1)
          {
            int v117 = v56 + 3;
            v382 = v116;
            uint64_t v118 = v47;
            uint64_t v119 = v36;
            int v120 = v48;
            uint64_t v121 = v17;
            uint64_t v122 = v52;
            uint64_t v123 = v50;
            int v124 = _pcre2_xclass_8(v423, v117);
            uint64_t v36 = v119;
            uint64_t v47 = v118;
            long long v116 = v382;
            uint64_t v50 = v123;
            uint64_t v52 = v122;
            uint64_t v17 = v121;
            int v48 = v120;
            uint64_t v27 = (uint64_t)v406;
            int v25 = v407;
            int v24 = v417;
            uint64_t v14 = v418;
            goto LABEL_784;
          }
        }
        else
        {
          long long v116 = v56 + 33;
          if (v427 >= 1)
          {
            if (v423 < 0x100) {
              int v124 = (v56[v378 + 1] >> v377) & 1;
            }
            else {
              int v124 = v57 == 111;
            }
LABEL_784:
            LODWORD(v28) = v116 - v14;
            switch(*v116)
            {
              case 'b':
              case 'c':
              case 'j':
                if ((int)v36 >= v25) {
                  return 4294967253;
                }
                uint64_t v67 = (v36 + 1);
                uint64_t v11 = (uint64_t)v426;
                int *v426 = v28 + 1;
                v426[1] = 0;
                unint64_t v28 = (unint64_t)(v426 + 3);
                if (!v124) {
                  goto LABEL_457;
                }
                if ((int)v50 >= v25) {
                  return 4294967253;
                }
                uint64_t v50 = (v50 + 1);
                LODWORD(v10) = *v116;
                if (v10 == 106) {
                  uint64_t v36 = v36;
                }
                else {
                  uint64_t v36 = v67;
                }
                if (v10 != 106) {
                  uint64_t v11 = (uint64_t)(v426 + 3);
                }
                v426 = (int *)v11;
                goto LABEL_1146;
              case 'd':
              case 'e':
              case 'k':
                int v70 = *(_DWORD *)(v27 + 12 * v53 + 4);
                if (v70 < 1)
                {
                  uint64_t v45 = (uint64_t)v426;
                  if (!v124) {
                    goto LABEL_1328;
                  }
                }
                else
                {
                  uint64_t v45 = (uint64_t)v426;
                  if ((int)v36 >= v25) {
                    return 4294967253;
                  }
                  LODWORD(v10) = v36 + 1;
                  int *v426 = v28 + 1;
                  v426[1] = 0;
                  if (!v124)
                  {
                    v426 += 3;
                    uint64_t v36 = (v36 + 1);
                    goto LABEL_1328;
                  }
                  if (*v116 == 107)
                  {
                    uint64_t v36 = v36;
                  }
                  else
                  {
                    uint64_t v45 = (uint64_t)(v426 + 3);
                    uint64_t v36 = v10;
                  }
                }
                if ((int)v50 >= v25) {
                  return 4294967253;
                }
                v426 = (int *)v45;
                goto LABEL_489;
              case 'f':
              case 'g':
              case 'l':
                if ((int)v36 >= v25) {
                  return 4294967253;
                }
                uint64_t v67 = (v36 + 1);
                LODWORD(v28) = v28 + 1;
                uint64_t v45 = (uint64_t)v426;
                *(void *)v426 = v28;
                if (!v124)
                {
                  v426 += 3;
LABEL_458:
                  uint64_t v36 = v67;
                  goto LABEL_1328;
                }
                if ((int)v50 >= v25) {
                  return 4294967253;
                }
                uint64_t v50 = (v50 + 1);
                LODWORD(v11) = *v116;
                if (v11 == 108) {
                  uint64_t v36 = v36;
                }
                else {
                  uint64_t v36 = v67;
                }
                if (v11 != 108) {
                  uint64_t v45 = (uint64_t)(v426 + 3);
                }
                v426 = (int *)v45;
                break;
              case 'h':
              case 'i':
              case 'm':
                signed int v251 = *(_DWORD *)(v27 + 12 * v53 + 4);
                if (v251 >= (int)(bswap32(*(unsigned __int16 *)(v116 + 1)) >> 16))
                {
                  if ((int)v36 >= v25) {
                    return 4294967253;
                  }
                  uint64_t v36 = (v36 + 1);
                  *(void *)v426 = (v28 + 5);
                  uint64_t v11 = (uint64_t)(v426 + 3);
                }
                else
                {
                  uint64_t v11 = (uint64_t)v426;
                }
                if (v124)
                {
                  if (*v116 == 109 && v251 >= (int)(bswap32(*(unsigned __int16 *)(v116 + 1)) >> 16))
                  {
                    uint64_t v36 = (v36 - 1);
                    v11 -= 12;
                  }
                  LODWORD(v10) = __rev16(*(unsigned __int16 *)(v116 + 3));
                  int v282 = v251 + 1;
                  v426 = (int *)v11;
                  if (v282 >= (int)v10 && v10)
                  {
                    if ((int)v50 >= v25) {
                      return 4294967253;
                    }
                    int v282 = 0;
                    int v54 = v28 + 5;
                  }
                  else if ((int)v50 >= v25)
                  {
                    return 4294967253;
                  }
                  *uint64_t v52 = v54;
                  v52[1] = v282;
                  v52 += 3;
                  uint64_t v50 = (v50 + 1);
                  goto LABEL_1328;
                }
                goto LABEL_901;
              default:
                if (!v124) {
                  goto LABEL_1328;
                }
                if ((int)v50 >= v25) {
                  return 4294967253;
                }
                uint64_t v50 = (v50 + 1);
                goto LABEL_1325;
            }
            goto LABEL_1325;
          }
        }
        int v124 = 0;
        goto LABEL_784;
      case 117:
        unsigned int v367 = v50;
        uint64_t v218 = a10;
        uint64_t v428 = a10;
        uint64_t v219 = v14 + __rev16(*(unsigned __int16 *)(v56 + 1));
        if (v219 == *(void *)(v17 + 24)) {
          unsigned int v220 = 0;
        }
        else {
          unsigned int v220 = __rev16(*(unsigned __int16 *)(v219 + 3));
        }
        unint64_t v265 = v408;
        unsigned int v266 = v425;
        unsigned int v267 = *(_DWORD *)(a10 + 12);
        unsigned int v409 = v47;
        uint64_t v360 = v36;
        if (v267 > 0xBB7) {
          goto LABEL_860;
        }
        int v268 = v48;
        uint64_t result = more_workspace(&v428, 0x7D0u, v17);
        if (result) {
          return result;
        }
        uint64_t v218 = v428;
        unsigned int v267 = *(_DWORD *)(v428 + 12);
        unint64_t v265 = v408;
        int v48 = v268;
        unsigned int v266 = v425;
LABEL_860:
        uint64_t v269 = *(unsigned int *)(v218 + 8);
        *(_DWORD *)(v218 + 12) = v267 - 3000;
        uint64_t v270 = *(void *)(v17 + 160);
        if (!v270) {
          goto LABEL_865;
        }
        int v271 = *(uint64_t **)(v17 + 160);
        do
        {
          if (v220 == *((_DWORD *)v271 + 4) && v421 == (unsigned __int8 *)v271[1]) {
            return 4294967244;
          }
          int v271 = (uint64_t *)*v271;
        }
        while (v271);
LABEL_865:
        unsigned int v425 = v266;
        int v272 = v48;
        uint64_t v273 = v218 + 4 * v269 - 4 * v267;
        LODWORD(v431) = v220;
        uint64_t v429 = v270;
        v430 = v421;
        *(void *)(v17 + 160) = &v429;
        a10 = v218;
        uint64_t result = internal_dfa_match(v17, v219, v421, &v421[-v265], v273, 1000, v273 + 8000, 1000, v419, v218);
        *(_DWORD *)(v428 + 12) += 3000;
        *(void *)(v17 + 160) = v429;
        if (!result) {
          return 4294967257;
        }
        uint64_t v14 = v418;
        if ((int)result < 1)
        {
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          int v48 = v272;
          uint64_t v50 = v367;
          uint64_t v36 = v360;
          int v274 = v426;
          if (result == -1) {
            goto LABEL_965;
          }
          return result;
        }
        LODWORD(v28) = 2 * result;
        LODWORD(v10) = v54 + 3;
        int v24 = v417;
        int v25 = v407;
        uint64_t v27 = (uint64_t)v406;
        uint64_t v50 = v367;
        uint64_t v36 = v360;
        int v274 = v426;
        do
        {
          uint64_t v275 = v50;
          uint64_t v276 = *(void *)(v273 + 8 * ((v28 - 2) | 1u));
          uint64_t v277 = *(void *)(v273 + 8 * (v28 - 2));
          uint64_t v45 = v276 - v277;
          if (v417 && v276 > v277)
          {
            unint64_t v278 = v408 + v276;
            char v279 = (unsigned __int8 *)(v408 + v277);
            do
            {
              char v280 = *v279++;
              v45 -= (v280 & 0xC0) == 128;
            }
            while ((unint64_t)v279 < v278);
          }
          if (v45)
          {
            if ((int)v275 >= v407) {
              return 4294967253;
            }
            int v48 = v272;
            uint64_t v50 = (v275 + 1);
            *uint64_t v52 = -3 - v54;
            v52[1] = 0;
            v52[2] = v45 - 1;
            v52 += 3;
          }
          else
          {
            if ((int)v36 >= v407) {
              return 4294967253;
            }
            int v48 = v272;
            uint64_t v50 = v275;
            uint64_t v36 = (v36 + 1);
            int *v274 = v10;
            v274[1] = 0;
            v274 += 3;
          }
          BOOL v181 = (int)v28 <= 3;
          LODWORD(v28) = v28 - 2;
        }
        while (!v181);
LABEL_965:
        v426 = v274;
LABEL_1167:
        uint64_t v47 = v409;
LABEL_1328:
        if (++v48 < (int)v36) {
          continue;
        }
        if ((int)v50 <= 0)
        {
          a7 = v387;
          int v44 = v421;
          int v354 = v388;
          if (a9)
          {
LABEL_1412:
            uint64_t result = v371;
            if ((v371 & 0x80000000) == 0)
            {
              if ((((unint64_t)v44 < v422) & ((*(_DWORD *)(v17 + 112) | *(_DWORD *)(v17 + 108)) >> 29)) != 0) {
                return 0xFFFFFFFFLL;
              }
              else {
                return v371;
              }
            }
            return result;
          }
LABEL_1410:
          if (v43)
          {
            if (v354 != a7[1])
            {
              int v355 = *(_DWORD *)(v17 + 108);
              if (((v355 & 0x20) != 0 || (v355 & 0x10) != 0 && (v371 & 0x80000000) != 0)
                && (v47 || (unint64_t)v44 >= v422 && (unint64_t)v44 > *(void *)(v17 + 48)))
              {
                return 4294967294;
              }
            }
          }
          goto LABEL_1412;
        }
        char v26 = (int *)v27;
        uint64_t v27 = v400;
        uint64_t v36 = v50;
        uint64_t v43 = v425;
        int v44 = &v421[v427];
        a7 = v387;
        unsigned int v18 = a9;
        goto LABEL_51;
      case 118:
      case 119:
        uint64_t v139 = v47;
        uint64_t v140 = v36;
        uint64_t v141 = v50;
        int v142 = v48;
        uint64_t v428 = 0;
        uint64_t result = do_callout(v14 + v54, (uint64_t)a5, v372, (uint64_t)v421, (void *)v17, 0, &v428);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (result)
        {
          uint64_t v14 = v418;
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          int v48 = v142;
          uint64_t v50 = v141;
          uint64_t v36 = v140;
        }
        else
        {
          int v25 = v407;
          uint64_t v14 = v418;
          int v24 = v417;
          uint64_t v27 = (uint64_t)v406;
          if ((int)v140 >= v407) {
            return 4294967253;
          }
          int v48 = v142;
          uint64_t v50 = v141;
          uint64_t v36 = (v140 + 1);
          *(void *)v426 = (v54 + v428);
          v426 += 3;
        }
LABEL_737:
        uint64_t v47 = v139;
        goto LABEL_1328;
      case 120:
        do
          v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
        while (*v56 == 120);
        int v69 = v426;
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        LODWORD(v28) = v56 - v14;
        goto LABEL_1015;
      case 121:
      case 122:
      case 123:
      case 124:
        if (v56 != v23)
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          unint64_t v28 = (v36 + 1);
          int v84 = v426;
          *(void *)v426 = (v54 + 3);
          if (v57 != 121)
          {
            if ((int)v28 < v25)
            {
              uint64_t v36 = (v36 + 2);
              LODWORD(v28) = v54 - (bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16);
LABEL_506:
              v84[3] = v28;
              v84[4] = 0;
              unint64_t v10 = (unint64_t)(v84 + 6);
LABEL_507:
              v426 = (int *)v10;
              goto LABEL_1328;
            }
            return 4294967253;
          }
          unint64_t v10 = (unint64_t)(v426 + 3);
          goto LABEL_1031;
        }
        uint64_t v168 = v371;
        if ((unint64_t)v421 <= v372)
        {
          LODWORD(v28) = *(_DWORD *)(v17 + 108);
          if ((v28 & 4) != 0 || (v28 & 8) != 0 && v372 <= v408 + *(void *)(v17 + 72)) {
            goto LABEL_1328;
          }
        }
        if ((v371 & 0x80000000) != 0)
        {
          if (v363)
          {
            uint64_t v168 = 1;
LABEL_989:
            *a5 = v357;
            a5[1] = &v421[-v408];
            goto LABEL_990;
          }
          uint64_t v168 = 0;
        }
        else
        {
          if (v371)
          {
            LODWORD(v28) = 2 * (v371 + 1);
            if ((int)v28 <= v363) {
              uint64_t v168 = v371 + 1;
            }
            else {
              uint64_t v168 = 0;
            }
            if ((int)v28 >= v363) {
              LODWORD(v28) = v363;
            }
          }
          else
          {
            LODWORD(v28) = v363;
          }
          if ((int)v28 >= 3)
          {
            unsigned int v415 = v47;
            uint64_t v300 = v36;
            int v301 = v48;
            uint64_t v302 = v17;
            int v303 = v52;
            uint64_t v304 = v50;
            cstdlib_memmove(a5 + 2, a5, 8 * (v28 - 2));
            uint64_t v36 = v300;
            uint64_t v47 = v415;
            int v24 = v417;
            uint64_t v50 = v304;
            uint64_t v52 = v303;
            uint64_t v17 = v302;
            int v48 = v301;
            uint64_t v27 = (uint64_t)v406;
            int v25 = v407;
            uint64_t v14 = v418;
          }
          if (v363) {
            goto LABEL_989;
          }
        }
LABEL_990:
        unsigned int v371 = v168;
        uint64_t result = v168;
        if ((*(unsigned char *)(v17 + 108) & 0x80) == 0) {
          goto LABEL_1328;
        }
        return result;
      case 126:
      case 127:
      case 128:
      case 129:
        unsigned int v409 = v47;
        unsigned int v85 = *(unsigned __int16 *)(v56 + 1);
        uint64_t v86 = a10;
        uint64_t v428 = a10;
        unsigned int v87 = *(_DWORD *)(a10 + 12);
        unint64_t v88 = v408;
        if (v87 > 0x3EB) {
          goto LABEL_149;
        }
        uint64_t v89 = v36;
        uint64_t v90 = v17;
        int v91 = v52;
        uint64_t v92 = v50;
        int v93 = v48;
        uint64_t v94 = v90;
        uint64_t result = more_workspace(&v428, 4u, v90);
        if (result) {
          return result;
        }
        uint64_t v86 = v428;
        unsigned int v87 = *(_DWORD *)(v428 + 12);
        unint64_t v88 = v408;
        int v48 = v93;
        uint64_t v50 = v92;
        uint64_t v52 = v91;
        uint64_t v17 = v94;
        uint64_t v36 = v89;
LABEL_149:
        uint64_t v95 = v36;
        unint64_t v96 = &v56[__rev16(v85)];
        uint64_t v97 = *(unsigned int *)(v86 + 8);
        *(_DWORD *)(v86 + 12) = v87 - 1004;
        uint64_t v98 = v50;
        int v99 = v48;
        if (*v96 == 120)
        {
          long long v100 = v421;
          do
            v96 += __rev16(*(unsigned __int16 *)(v96 + 1));
          while (*v96 == 120);
        }
        else
        {
          long long v100 = v421;
        }
        uint64_t v160 = v86 + 4 * v97 - 4 * v87;
        a10 = v86;
        uint64_t result = internal_dfa_match(v17, v56, v100, &v100[-v88], v160, 2, v160 + 16, 1000, v419, v86);
        *(_DWORD *)(v428 + 12) += 1004;
        if ((int)result < -1) {
          return result;
        }
        LODWORD(v28) = result == -1;
        int v162 = v57 == 126 || v57 == 128;
        if (v162 == v28)
        {
          uint64_t v14 = v418;
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          int v48 = v99;
          uint64_t v50 = v98;
          uint64_t v36 = v95;
          goto LABEL_1167;
        }
        int v25 = v407;
        uint64_t v14 = v418;
        int v24 = v417;
        uint64_t v27 = (uint64_t)v406;
        if ((int)v95 < v407)
        {
          int v48 = v99;
          uint64_t v50 = v98;
          uint64_t v36 = (v95 + 1);
          *(void *)v426 = (v96 - v418 + 3);
          v426 += 3;
          goto LABEL_1167;
        }
        return 4294967253;
      case 130:
        uint64_t v221 = v36;
        unsigned int v368 = v50;
        int v222 = v48;
        uint64_t v223 = a10;
        uint64_t v428 = a10;
        unsigned int v224 = *(_DWORD *)(a10 + 12);
        unint64_t v225 = v408;
        if (v224 > 0x3EB) {
          goto LABEL_693;
        }
        uint64_t result = more_workspace(&v428, 4u, v17);
        if (result) {
          return result;
        }
        uint64_t v223 = v428;
        unsigned int v224 = *(_DWORD *)(v428 + 12);
        unint64_t v225 = v408;
LABEL_693:
        uint64_t v226 = v223 + 4 * *(unsigned int *)(v223 + 8) - 4 * v224;
        *(_DWORD *)(v223 + 12) = v224 - 1004;
        a10 = v223;
        uint64_t result = internal_dfa_match(v17, v56, v421, &v421[-v225], v226, 2, v226 + 16, 1000, v419, v223);
        *(_DWORD *)(v428 + 12) += 1004;
        if ((result & 0x80000000) != 0)
        {
          uint64_t v14 = v418;
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          int v48 = v222;
          uint64_t v50 = v368;
          uint64_t v36 = v221;
          if (result == -1) {
            goto LABEL_1328;
          }
          return result;
        }
        uint64_t v45 = *(void *)v226;
        uint64_t v11 = *(void *)(v226 + 8);
        uint64_t v14 = v418;
        uint64_t v27 = (uint64_t)v406;
        uint64_t v36 = v221;
        do
        {
          v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
          int v227 = *v56;
        }
        while (v227 == 120);
        int v228 = v56 - v418;
        int v24 = v417;
        int v25 = v407;
        if ((v227 & 0xFE) == 0x7A) {
          LODWORD(v28) = v228 - (bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16);
        }
        else {
          LODWORD(v28) = -1;
        }
        int v283 = v228 + 3;
        unint64_t v10 = v11 - v45;
        if (v11 == v45)
        {
          if ((int)v221 < v407)
          {
            uint64_t v36 = (v221 + 1);
            int *v426 = v283;
            v426[1] = 0;
            v426 += 3;
            int v48 = v222;
            uint64_t v50 = v368;
            goto LABEL_1328;
          }
        }
        else if (v222 + 1 < (int)v221 || v368)
        {
          if (v417)
          {
            int v48 = v222;
            if (v11 > v45)
            {
              unint64_t v315 = v408 + v11;
              v45 += v408;
              do
              {
                char v316 = *(unsigned char *)v45++;
                LODWORD(v10) = v10 - ((v316 & 0xC0) == 128);
              }
              while (v45 < v315);
            }
          }
          else
          {
            int v48 = v222;
          }
          if ((int)v368 < v407)
          {
            LODWORD(v11) = v368 + 1;
            *uint64_t v52 = -3 - v228;
            v52[1] = 0;
            v52[2] = v10 - 1;
            if ((v28 & 0x80000000) != 0)
            {
              v52 += 3;
              uint64_t v50 = v368 + 1;
              goto LABEL_1328;
            }
            if ((int)v11 < v407)
            {
              uint64_t v50 = v368 + 2;
              *(void *)(v52 + 3) = -(int)v28;
              v52[5] = v10 - 1;
              v52 += 6;
              goto LABEL_1328;
            }
          }
        }
        else if (a8 >= 8)
        {
          v421 += v10;
          *uint64_t v52 = v283;
          v52[1] = 0;
          v52 += 3;
          if ((v28 & 0x80000000) != 0)
          {
            int v48 = v222;
            int v427 = 0;
          }
          else
          {
            int v427 = 0;
            *uint64_t v406 = v28;
            v406[1] = 0;
            int v48 = -1;
            uint64_t v36 = 1;
            LODWORD(v28) = v375;
            v426 = v375;
          }
          uint64_t v50 = 1;
          goto LABEL_1328;
        }
        return 4294967253;
      case 131:
      case 136:
        if ((int)v36 <= v25) {
          LODWORD(v28) = v25;
        }
        else {
          LODWORD(v28) = v36;
        }
        unint64_t v10 = (unint64_t)v426;
        while (v28 != v36)
        {
          uint64_t v36 = (v36 + 1);
          *(_DWORD *)unint64_t v10 = v56 - v14 + 3;
          *(_DWORD *)(v10 + 4) = 0;
          v10 += 12;
          v56 += __rev16(*(unsigned __int16 *)(v56 + 1));
          if (*v56 != 120) {
            goto LABEL_507;
          }
        }
        return 4294967253;
      case 132:
      case 134:
      case 137:
      case 139:
      case 149:
        uint64_t v359 = v36;
        int v365 = v50;
        int v391 = v48;
        uint64_t v73 = a10;
        uint64_t v428 = a10;
        unsigned int v74 = *(_DWORD *)(a10 + 12);
        unint64_t v75 = v408;
        if (v74 > 0x3EB) {
          goto LABEL_130;
        }
        uint64_t result = more_workspace(&v428, 4u, v17);
        if (result) {
          return result;
        }
        uint64_t v73 = v428;
        unsigned int v74 = *(_DWORD *)(v428 + 12);
        unint64_t v75 = v408;
LABEL_130:
        unint64_t v401 = v52;
        int v76 = (void *)(v73 + 4 * *(unsigned int *)(v73 + 8) - 4 * v74);
        *(_DWORD *)(v73 + 12) = v74 - 1004;
        if (v57 == 149) {
          int v77 = v56 + 1;
        }
        else {
          int v77 = v56;
        }
        int v78 = &v421[-v75];
        a10 = v73;
        uint64_t v79 = v17;
        uint64_t result = internal_dfa_match(v17, v77, v421, &v421[-v75], v76, 2, v76 + 2, 1000, v419, v73);
        uint64_t v80 = 0;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v81 = v421;
          uint64_t v47 = v47;
          while (1)
          {
            unint64_t v28 = v76[1] - *v76;
            if (!v28) {
              break;
            }
            v81 += v28;
            ++v80;
            uint64_t result = internal_dfa_match(v79, v77, v81, v78, v76, 2, v76 + 2, 1000, v419, a10);
            if ((result & 0x80000000) != 0)
            {
              uint64_t v14 = v418;
              int v24 = v417;
              int v25 = v407;
              uint64_t v27 = (uint64_t)v406;
              int v82 = v421;
              uint64_t v43 = v43;
              goto LABEL_401;
            }
          }
          uint64_t v14 = v418;
          int v24 = v417;
          int v25 = v407;
          uint64_t v27 = (uint64_t)v406;
          int v82 = v421;
          uint64_t v43 = v43;
          int v48 = v391;
          uint64_t v36 = v359;
          goto LABEL_463;
        }
        unint64_t v81 = v421;
        uint64_t v14 = v418;
        int v25 = v407;
        uint64_t v27 = (uint64_t)v406;
        int v82 = v421;
        uint64_t v43 = v43;
        uint64_t v47 = v47;
        int v24 = v417;
LABEL_401:
        int v48 = v391;
        uint64_t v36 = v359;
        if (result == -1)
        {
LABEL_463:
          *(_DWORD *)(v428 + 12) += 1004;
          if (v57 == 149 || v80)
          {
            do
              v77 += __rev16(*(unsigned __int16 *)(v77 + 1));
            while (*v77 == 120);
            LODWORD(v28) = v77 - v14;
            if (v48 + 1 < (int)v36 || v365)
            {
              unint64_t v10 = v81 - v82;
              uint64_t v17 = v79;
              if (v24)
              {
                int v172 = v401;
                if (v82 >= v81)
                {
                  int v174 = v81 - v82;
                }
                else
                {
                  int v173 = v82;
                  int v174 = v81 - v82;
                  do
                  {
                    char v175 = *v173++;
                    v174 -= (v175 & 0xC0) == 128;
                    --v10;
                  }
                  while (v10);
                }
              }
              else
              {
                int v174 = v81 - v82;
                int v172 = v401;
              }
              LODWORD(v11) = v365;
              if (v365 >= v25) {
                return 4294967253;
              }
              *int v172 = -3 - v28;
              v172[1] = 0;
              v172[2] = v174 - 1;
              uint64_t v52 = v172 + 3;
              unint64_t v81 = v82;
              uint64_t v50 = (v365 + 1);
            }
            else
            {
              if (a8 < 8) {
                return 4294967253;
              }
              uint64_t v17 = v79;
              int v427 = 0;
              *unint64_t v401 = (v28 + 3);
              uint64_t v52 = (int *)v401 + 3;
              uint64_t v50 = 1;
            }
          }
          else
          {
            unint64_t v81 = v82;
            uint64_t v17 = v79;
            uint64_t v50 = v365;
            uint64_t v52 = (int *)v401;
          }
          v421 = v81;
          goto LABEL_1328;
        }
        return result;
      case 133:
      case 138:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        unint64_t v10 = (unint64_t)v426;
        int *v426 = v54 + 5;
        v426[1] = 0;
        unint64_t v28 = (unint64_t)&v56[__rev16(*(unsigned __int16 *)(v56 + 1))];
        while (2)
        {
          uint64_t v36 = (v36 + 1);
          v10 += 12;
          if (*(unsigned char *)v28 != 120) {
            goto LABEL_507;
          }
          if (v25 != v36)
          {
            *(_DWORD *)unint64_t v10 = v28 - v14 + 3;
            *(_DWORD *)(v10 + 4) = 0;
            v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
            continue;
          }
          return 4294967253;
        }
      case 135:
      case 140:
        unsigned int v143 = *(unsigned __int16 *)(v56 + 1);
        int v144 = v56[3];
        if ((v144 & 0xFE) != 0x76) {
          goto LABEL_883;
        }
        unsigned int v409 = v47;
        uint64_t v145 = v36;
        uint64_t v146 = (void *)v17;
        int v147 = v52;
        uint64_t v148 = v50;
        int v149 = v48;
        uint64_t v428 = 0;
        int v150 = v146;
        uint64_t result = do_callout(v14 + v54, (uint64_t)a5, v372, (uint64_t)v421, v146, 3, &v428);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v14 = v418;
        int v24 = v417;
        int v25 = v407;
        uint64_t v27 = (uint64_t)v406;
        int v48 = v149;
        uint64_t v50 = v148;
        uint64_t v36 = v145;
        if (result)
        {
          uint64_t v52 = v147;
LABEL_532:
          uint64_t v17 = (uint64_t)v150;
          goto LABEL_1167;
        }
        v56 += v428;
        int v144 = v56[3];
        uint64_t v52 = v147;
        uint64_t v17 = (uint64_t)v150;
        uint64_t v47 = v409;
LABEL_883:
        unsigned int v281 = __rev16(v143);
        uint64_t result = 4294967256;
        switch(v144)
        {
          case 141:
          case 142:
          case 144:
            return result;
          case 143:
            if (bswap32(*((unsigned __int16 *)v56 + 2)) >> 16 != 0xFFFF) {
              return result;
            }
            if (*(void *)(v17 + 160))
            {
              int v69 = v426;
              if ((int)v36 >= v25) {
                return 4294967253;
              }
              LODWORD(v28) = v54 + 6;
            }
            else
            {
              int v69 = v426;
              if ((int)v36 >= v25) {
                return 4294967253;
              }
              LODWORD(v28) = v54 + v281 + 3;
            }
            goto LABEL_1291;
          case 145:
            goto LABEL_889;
          case 146:
            if ((int)v36 >= v25) {
              return 4294967253;
            }
            uint64_t v36 = (v36 + 1);
            LODWORD(v28) = v54 + 6;
            goto LABEL_974;
          default:
            if (v144 == 159)
            {
LABEL_889:
              if ((int)v36 >= v25) {
                return 4294967253;
              }
              uint64_t v36 = (v36 + 1);
              LODWORD(v28) = v54 + v281 + 3;
              goto LABEL_974;
            }
            unsigned int v414 = v47;
            unsigned int v288 = *((unsigned __int16 *)v56 + 2);
            uint64_t v289 = a10;
            uint64_t v428 = a10;
            unsigned int v290 = *(_DWORD *)(a10 + 12);
            unint64_t v291 = v408;
            if (v290 <= 0x3EB)
            {
              int v361 = v36;
              unsigned int v370 = v50;
              int v292 = v48;
              uint64_t result = more_workspace(&v428, 4u, v17);
              if (result) {
                return result;
              }
              uint64_t v289 = v428;
              unsigned int v290 = *(_DWORD *)(v428 + 12);
              unint64_t v291 = v408;
              int v48 = v292;
              uint64_t v50 = v370;
              LODWORD(v36) = v361;
            }
            int v293 = v36;
            uint64_t v294 = v56 + 3;
            uint64_t v295 = (uint64_t)&v56[__rev16(v288) + 3];
            uint64_t v296 = *(unsigned int *)(v289 + 8);
            *(_DWORD *)(v289 + 12) = v290 - 1004;
            uint64_t v297 = v50;
            int v298 = v48;
            if (*(unsigned char *)v295 == 120)
            {
              char v299 = v421;
              do
                v295 += __rev16(*(unsigned __int16 *)(v295 + 1));
              while (*(unsigned char *)v295 == 120);
            }
            else
            {
              char v299 = v421;
            }
            uint64_t v336 = v289 + 4 * v296 - 4 * v290;
            a10 = v289;
            uint64_t result = internal_dfa_match(v17, v294, v299, &v299[-v291], v336, 2, v336 + 16, 1000, v419, v289);
            *(_DWORD *)(v428 + 12) += 1004;
            if ((int)result >= -1)
            {
              BOOL v338 = v144 == 126 || v144 == 128;
              uint64_t v14 = v418;
              int v24 = v417;
              int v25 = v407;
              uint64_t v27 = (uint64_t)v406;
              int v48 = v298;
              uint64_t v50 = v297;
              LODWORD(v36) = v293;
              if (v338 == (result == -1))
              {
                uint64_t v47 = v414;
                if ((int)v36 >= v407) {
                  return 4294967253;
                }
                unsigned int v339 = v54 + v281;
              }
              else
              {
                uint64_t v47 = v414;
                if ((int)v36 >= v407) {
                  return 4294967253;
                }
                unsigned int v339 = v295 - v418;
              }
              LODWORD(v28) = v339 + 3;
              int v69 = v426;
LABEL_1291:
              *int v69 = v28;
              v69[1] = 0;
              uint64_t v36 = (v36 + 1);
              goto LABEL_1016;
            }
            break;
        }
        return result;
      case 147:
      case 148:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        int v84 = v426;
        int *v426 = v54 + 1;
        v426[1] = 0;
        uint64_t v151 = &v56[__rev16(*((unsigned __int16 *)v56 + 1))];
        int v153 = v151[1];
        unint64_t v28 = (unint64_t)(v151 + 1);
        for (int i = v153; i == 120; int i = *(unsigned __int8 *)v28)
          v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
        if ((int)v36 >= v364) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 2);
        LODWORD(v28) = v28 - v14 + 3;
        goto LABEL_506;
      case 159:
        ++v388;
        goto LABEL_1328;
      case 163:
        uint64_t v229 = &v56[__rev16(*((unsigned __int16 *)v56 + 1))];
        int v231 = v229[1];
        unint64_t v28 = (unint64_t)(v229 + 1);
        for (int j = v231; j == 120; int j = *(unsigned __int8 *)v28)
          v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
        int v69 = v426;
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        LODWORD(v28) = v28 - v14 + 3;
        goto LABEL_1015;
      case 165:
      case 166:
        return result;
      case 385:
      case 386:
      case 394:
        int v66 = 0;
        goto LABEL_268;
      case 387:
      case 388:
      case 395:
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        if ((int)v28 < 1)
        {
          uint64_t v45 = (uint64_t)v426;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 4);
          uint64_t v45 = (uint64_t)(v426 + 3);
        }
        if (v427 < 1) {
          goto LABEL_1208;
        }
        uint64_t v176 = _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399] + v398];
        switch(v56[2])
        {
          case 1u:
            unsigned int v324 = BYTE1(_pcre2_ucd_records_8[2 * v176]);
            BOOL v181 = v324 > 9;
            int v325 = (1 << v324) & 0x320;
            if (!v181 && v325 != 0) {
              goto LABEL_1242;
            }
            goto LABEL_1197;
          case 2u:
            int v327 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v176])];
            goto LABEL_1202;
          case 3u:
            int v327 = BYTE1(_pcre2_ucd_records_8[2 * v176]);
            goto LABEL_1202;
          case 4u:
            int v327 = LOBYTE(_pcre2_ucd_records_8[2 * v176]);
LABEL_1202:
            BOOL v328 = v327 == v56[3];
            goto LABEL_1204;
          case 5u:
            BOOL v328 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v176])] & 0xFFFFFFFD) == 1;
            goto LABEL_1204;
          case 6u:
          case 7u:
            LODWORD(v11) = v423;
            LODWORD(v10) = v423 - 0x2000;
            if (v423 >= 0x2000)
            {
              if (v10 >= 0xB)
              {
                LODWORD(v10) = v423 - 8232;
                if (((v423 - 8232) > 0x37 || ((1 << v10) & 0x80000000000083) == 0) && v423 != 12288) {
                  goto LABEL_1389;
                }
              }
              goto LABEL_1242;
            }
            if (v423 <= 132)
            {
              if (v423 <= 0x20 && ((1 << v397) & 0x100003E00) != 0) {
                goto LABEL_1242;
              }
LABEL_1389:
              BOOL v328 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v176])] == 6;
LABEL_1204:
              int v329 = v328;
LABEL_1207:
              if ((v59 != 16) == v329) {
                goto LABEL_1208;
              }
LABEL_1243:
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              int v343 = v57 == 395 && (int)v28 > 0;
              uint64_t v36 = (v36 - v343);
              v426 = (int *)(v45 + 12 * (v343 << 31 >> 31));
              LODWORD(v28) = v28 + 1;
              goto LABEL_1251;
            }
            if (v423 > 5759)
            {
              if (v423 != 5760 && v423 != 6158) {
                goto LABEL_1389;
              }
            }
            else if (v423 != 133 && v423 != 160)
            {
              goto LABEL_1389;
            }
LABEL_1242:
            if (v59 == 16) {
              goto LABEL_1243;
            }
LABEL_1208:
            v426 = (int *)v45;
            goto LABEL_1328;
          case 8u:
            LODWORD(v10) = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v176])] | 2;
            int v329 = v379;
            if (v10 != 3) {
              goto LABEL_1207;
            }
            goto LABEL_1242;
          case 9u:
            unsigned int v330 = &_pcre2_ucd_caseless_sets_8[v56[3]];
            while (1)
            {
              LODWORD(v10) = *v330;
              LODWORD(v11) = v423;
              if (v423 < *v330) {
                break;
              }
              ++v330;
              if (v423 == v10) {
                goto LABEL_1242;
              }
            }
LABEL_1197:
            if (v59 != 16) {
              goto LABEL_1243;
            }
            goto LABEL_1208;
          case 0xAu:
            LODWORD(v10) = v423 - 36;
            int v329 = v380;
            if ((v423 - 36) > 0x3C) {
              goto LABEL_1207;
            }
            int v329 = v380;
            if (((1 << v10) & 0x1000000010000001) == 0) {
              goto LABEL_1207;
            }
            goto LABEL_1242;
          default:
            goto LABEL_1242;
        }
      case 389:
      case 390:
      case 396:
LABEL_268:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        unint64_t v28 = (v36 + 1);
        int *v426 = v54 + 4;
        v426[1] = 0;
        unint64_t v10 = (unint64_t)(v426 + 3);
        if (v427 < 1) {
          goto LABEL_1031;
        }
        uint64_t v11 = _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399] + v398];
        switch(v56[2])
        {
          case 1u:
            unsigned int v284 = BYTE1(_pcre2_ucd_records_8[2 * v11]);
            BOOL v181 = v284 > 9;
            LODWORD(v11) = (1 << v284) & 0x320;
            if (!v181 && v11 != 0) {
              goto LABEL_1025;
            }
            goto LABEL_934;
          case 2u:
            int v286 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v11])];
            goto LABEL_939;
          case 3u:
            int v286 = BYTE1(_pcre2_ucd_records_8[2 * v11]);
            goto LABEL_939;
          case 4u:
            int v286 = LOBYTE(_pcre2_ucd_records_8[2 * v11]);
LABEL_939:
            BOOL v287 = v286 == v56[3];
            goto LABEL_941;
          case 5u:
            BOOL v287 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v11])] & 0xFFFFFFFD) == 1;
            goto LABEL_941;
          case 6u:
          case 7u:
            LODWORD(v45) = v423 - 0x2000;
            if (v423 >= 0x2000)
            {
              if (v45 >= 0xB)
              {
                LODWORD(v45) = v423 - 8232;
                if (((v423 - 8232) > 0x37 || ((1 << v45) & 0x80000000000083) == 0) && v423 != 12288) {
                  goto LABEL_1354;
                }
              }
LABEL_1025:
              if (v59 != 16)
              {
LABEL_1031:
                v426 = (int *)v10;
                goto LABEL_1032;
              }
LABEL_1026:
              if (v57 == 396 || v57 == 394)
              {
                unint64_t v10 = (unint64_t)v426;
                unint64_t v28 = v36;
              }
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              *(void *)uint64_t v52 = (v66 + v54);
              v52 += 3;
              goto LABEL_1031;
            }
            if (v423 > 132)
            {
              if (v423 > 5759)
              {
                if (v423 == 5760 || v423 == 6158) {
                  goto LABEL_1025;
                }
              }
              else if (v423 == 133 || v423 == 160)
              {
                goto LABEL_1025;
              }
            }
            else if (v423 <= 0x20 && ((1 << v397) & 0x100003E00) != 0)
            {
              goto LABEL_1025;
            }
LABEL_1354:
            BOOL v287 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v11])] == 6;
LABEL_941:
            LODWORD(v11) = v287;
LABEL_944:
            if ((v59 != 16) == v11) {
              goto LABEL_1031;
            }
            goto LABEL_1026;
          case 8u:
            LODWORD(v45) = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v11])] | 2;
            LODWORD(v11) = v379;
            if (v45 != 3) {
              goto LABEL_944;
            }
            goto LABEL_1025;
          case 9u:
            uint64_t v11 = (uint64_t)&_pcre2_ucd_caseless_sets_8[v56[3]];
            while (1)
            {
              LODWORD(v45) = *(_DWORD *)v11;
              if (v423 < *(_DWORD *)v11) {
                break;
              }
              v11 += 4;
              if (v423 == v45) {
                goto LABEL_1025;
              }
            }
LABEL_934:
            if (v59 == 16) {
              goto LABEL_1031;
            }
            goto LABEL_1026;
          case 0xAu:
            LODWORD(v45) = v423 - 36;
            LODWORD(v11) = v380;
            if ((v423 - 36) > 0x3C) {
              goto LABEL_944;
            }
            LODWORD(v11) = v380;
            if (((1 << v45) & 0x1000000010000001) == 0) {
              goto LABEL_944;
            }
            goto LABEL_1025;
          default:
            goto LABEL_1025;
        }
      case 391:
      case 392:
      case 393:
      case 397:
        if (v57 == 393) {
          goto LABEL_156;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        *(void *)v426 = (v54 + 6);
        v426 += 3;
LABEL_156:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        uint64_t v101 = _pcre2_ucd_stage2_8[128 * _pcre2_ucd_stage1_8[v399] + v398];
        uint64_t v45 = (uint64_t)v426;
        switch(v56[4])
        {
          case 0u:
            goto LABEL_1181;
          case 1u:
            unsigned int v308 = BYTE1(_pcre2_ucd_records_8[2 * v101]);
            BOOL v181 = v308 > 9;
            int v309 = (1 << v308) & 0x320;
            if (!v181 && v309 != 0) {
              goto LABEL_1181;
            }
            goto LABEL_1080;
          case 2u:
            int v311 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v101])];
            goto LABEL_1085;
          case 3u:
            int v311 = BYTE1(_pcre2_ucd_records_8[2 * v101]);
            goto LABEL_1085;
          case 4u:
            int v311 = LOBYTE(_pcre2_ucd_records_8[2 * v101]);
LABEL_1085:
            BOOL v312 = v311 == v56[5];
            goto LABEL_1087;
          case 5u:
            BOOL v312 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v101])] & 0xFFFFFFFD) == 1;
            goto LABEL_1087;
          case 6u:
          case 7u:
            LODWORD(v11) = v423;
            LODWORD(v10) = v423 - 0x2000;
            if (v423 < 0x2000)
            {
              if (v423 > 132)
              {
                if (v423 > 5759)
                {
                  if (v423 == 5760 || v423 == 6158) {
                    goto LABEL_1181;
                  }
                }
                else if (v423 == 133 || v423 == 160)
                {
                  goto LABEL_1181;
                }
              }
              else if (v423 <= 0x20 && ((1 << v397) & 0x100003E00) != 0)
              {
                goto LABEL_1181;
              }
            }
            else
            {
              if (v10 < 0xB) {
                goto LABEL_1181;
              }
              LODWORD(v10) = v423 - 8232;
              if ((v423 - 8232) <= 0x37 && ((1 << v10) & 0x80000000000083) != 0) {
                goto LABEL_1181;
              }
              if (v423 == 12288) {
                goto LABEL_1181;
              }
            }
            BOOL v312 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v101])] == 6;
LABEL_1087:
            int v313 = v312;
LABEL_1090:
            if ((v59 != 16) == v313) {
              goto LABEL_1328;
            }
            goto LABEL_1182;
          case 8u:
            LODWORD(v10) = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v101])] | 2;
            int v313 = v379;
            if (v10 != 3) {
              goto LABEL_1090;
            }
            goto LABEL_1181;
          case 9u:
            int v314 = &_pcre2_ucd_caseless_sets_8[v56[5]];
            break;
          case 0xAu:
            LODWORD(v10) = v423 - 36;
            int v313 = v380;
            if ((v423 - 36) > 0x3C) {
              goto LABEL_1090;
            }
            int v313 = v380;
            if (((1 << v10) & 0x1000000010000001) == 0) {
              goto LABEL_1090;
            }
            goto LABEL_1181;
          default:
            uint64_t v45 = (uint64_t)v426;
            if (v59 != 16) {
              goto LABEL_1328;
            }
            goto LABEL_1182;
        }
        while (1)
        {
          LODWORD(v10) = *v314;
          LODWORD(v11) = v423;
          if (v423 < *v314) {
            break;
          }
          ++v314;
          if (v423 == v10)
          {
LABEL_1181:
            if (v59 != 16) {
              goto LABEL_1328;
            }
            goto LABEL_1182;
          }
        }
LABEL_1080:
        if (v59 == 16) {
          goto LABEL_1328;
        }
LABEL_1182:
        if (v57 == 397) {
          unint64_t v10 = -1;
        }
        else {
          unint64_t v10 = 0;
        }
        uint64_t v36 = v36 - (v57 == 397);
        LODWORD(v28) = v28 + 1;
        v426 = (int *)(v45 + 12 * v10);
        if ((int)v28 < (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16)) {
          goto LABEL_1186;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        LODWORD(v28) = v54 + 6;
        goto LABEL_1325;
      case 405:
      case 406:
      case 414:
        int v65 = 0;
        goto LABEL_281;
      case 407:
      case 408:
      case 415:
        int v129 = *(_DWORD *)(v27 + 12 * v48 + 4);
        unsigned int v409 = v47;
        if (v129 < 1)
        {
          int v130 = v48;
          uint64_t v131 = v43;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          int v130 = v48;
          uint64_t v131 = v43;
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 2);
          v426 += 3;
        }
        LODWORD(v28) = v421;
        LODWORD(v10) = v427;
        if (v427 < 1)
        {
          uint64_t v14 = v418;
          uint64_t v47 = v47;
          int v24 = v417;
          uint64_t v43 = v131;
          int v48 = v130;
          goto LABEL_1328;
        }
        int v177 = v36;
        uint64_t v178 = v17;
        uint64_t v179 = v52;
        LODWORD(v428) = 0;
        int v150 = (void *)v178;
        int v180 = v50;
        _pcre2_extuni_8(v423, &v421[v427], *(void *)(v178 + 32), v422, v389, &v428);
        int v25 = v407;
        if (v180 >= v407) {
          return 4294967253;
        }
        uint64_t v50 = (v180 + 1);
        BOOL v181 = v57 != 415 || v129 <= 0;
        LODWORD(v28) = !v181;
        uint64_t v36 = (v177 - v28);
        v426 += 3 * ((int)(v28 << 31) >> 31);
        *uint64_t v179 = -v54;
        v179[1] = v129 + 1;
        v179[2] = v428;
        uint64_t v52 = v179 + 3;
        uint64_t v14 = v418;
        int v24 = v417;
        uint64_t v27 = (uint64_t)v406;
        uint64_t v43 = v131;
        int v48 = v130;
        goto LABEL_532;
      case 409:
      case 410:
      case 416:
LABEL_281:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v125 = (v36 + 1);
        *(void *)v426 = (v54 + 2);
        unint64_t v126 = v426 + 3;
        if (v427 < 1)
        {
          v426 += 3;
          uint64_t v36 = (v36 + 1);
          goto LABEL_1328;
        }
        unsigned int v409 = v47;
        uint64_t v127 = v52;
        int v128 = v50;
        int v393 = v48;
        LODWORD(v428) = 0;
        if (v57 == 416 || v57 == 414)
        {
          unint64_t v126 = v426;
          uint64_t v125 = v36;
        }
        _pcre2_extuni_8(v423, &v421[v427], *(void *)(v17 + 32), v422, v389, &v428);
        int v25 = v407;
        if (v128 < v407)
        {
          uint64_t v50 = (v128 + 1);
          int *v127 = v65 - v54;
          v127[1] = 0;
          v127[2] = v428;
          uint64_t v52 = v127 + 3;
          v426 = v126;
          uint64_t v36 = v125;
          uint64_t v14 = v418;
          int v24 = v417;
          uint64_t v27 = (uint64_t)v406;
          uint64_t v43 = v43;
          int v48 = v393;
          goto LABEL_1167;
        }
        return 4294967253;
      case 411:
      case 412:
      case 413:
      case 417:
        unsigned int v410 = v47;
        int v392 = v48;
        if (v57 == 413)
        {
          unint64_t v10 = v17;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          unint64_t v10 = v17;
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 4);
          v426 += 3;
        }
        LODWORD(v11) = v427;
        if (v427 < 1)
        {
          uint64_t v14 = v418;
          uint64_t v47 = v47;
          int v24 = v417;
        }
        else
        {
          int v154 = v36;
          int v155 = v50;
          int v156 = *(_DWORD *)(v27 + 12 * v48 + 4);
          LODWORD(v428) = 0;
          BOOL v157 = v57 == 417;
          if (v57 == 417) {
            uint64_t v158 = -1;
          }
          else {
            uint64_t v158 = 0;
          }
          unint64_t v159 = v10;
          if ((unint64_t)_pcre2_extuni_8(v423, &v421[v427], *(void *)(v10 + 32), v422, v389, &v428) >= v422)
          {
            unint64_t v10 = v159;
            int v169 = v425;
            if ((*(unsigned char *)(v159 + 108) & 0x20) != 0) {
              int v169 = 1;
            }
            unsigned int v425 = v169;
          }
          else
          {
            unint64_t v10 = v159;
          }
          int v25 = v407;
          uint64_t v14 = v418;
          int v24 = v417;
          uint64_t v27 = (uint64_t)v406;
          uint64_t v43 = v43;
          int v48 = v392;
          if (v155 >= v407) {
            return 4294967253;
          }
          v426 += 3 * v158;
          uint64_t v36 = (v154 - v157);
          unsigned int v170 = bswap32(*(unsigned __int16 *)(v56 + 1));
          if (v156 + 1 < (int)HIWORD(v170)) {
            LODWORD(v28) = v156 + 1;
          }
          else {
            LODWORD(v28) = 0;
          }
          if (v156 + 1 >= (int)HIWORD(v170)) {
            int v171 = -4;
          }
          else {
            int v171 = 0;
          }
          *uint64_t v52 = v171 - v54;
          v52[1] = v28;
          v52[2] = v428;
          uint64_t v50 = (v155 + 1);
          v52 += 3;
          uint64_t v47 = v410;
        }
        uint64_t v17 = v10;
        goto LABEL_1328;
      case 425:
      case 426:
      case 434:
        int v65 = 0;
        goto LABEL_292;
      case 427:
      case 428:
      case 435:
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        if ((int)v28 < 1)
        {
          unint64_t v10 = (unint64_t)v426;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 2);
          unint64_t v10 = (unint64_t)(v426 + 3);
        }
        v426 = (int *)v10;
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v10) = v423;
        if (v423 <= 12)
        {
          if ((v423 - 11) >= 2)
          {
            if (v423 != 10) {
              goto LABEL_1328;
            }
            goto LABEL_1057;
          }
        }
        else if ((v423 - 8232) >= 2)
        {
          if (v423 == 13)
          {
            if ((unint64_t)(v421 + 1) < v422)
            {
              BOOL v252 = v421[1] == 10;
LABEL_1058:
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              LODWORD(v10) = v57 == 435 && (int)v28 > 0;
              uint64_t v36 = (v36 - v10);
              v426 += 3 * ((int)(v10 << 31) >> 31);
              LODWORD(v28) = v28 + 1;
              goto LABEL_1066;
            }
LABEL_1057:
            BOOL v252 = 0;
            goto LABEL_1058;
          }
          if (v423 != 133) {
            goto LABEL_1328;
          }
        }
        if (*(_WORD *)(v17 + 128) == 2) {
          goto LABEL_1328;
        }
        goto LABEL_1057;
      case 429:
      case 430:
      case 436:
LABEL_292:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        unint64_t v28 = (v36 + 1);
        LODWORD(v45) = v426;
        int *v426 = v54 + 2;
        v426[1] = 0;
        int v132 = v426 + 3;
        if (v427 < 1) {
          goto LABEL_830;
        }
        LODWORD(v11) = v423;
        if (v423 <= 12)
        {
          if ((v423 - 11) >= 2)
          {
            if (v423 != 10) {
              goto LABEL_830;
            }
            goto LABEL_823;
          }
        }
        else if ((v423 - 8232) >= 2)
        {
          if (v423 != 13)
          {
            if (v423 != 133) {
              goto LABEL_830;
            }
            goto LABEL_460;
          }
          if ((unint64_t)(v421 + 1) < v422)
          {
            LODWORD(v10) = v421[1] == 10;
            goto LABEL_824;
          }
LABEL_823:
          LODWORD(v10) = 0;
LABEL_824:
          if (v57 == 436 || v57 == 434)
          {
            int v132 = v426;
            unint64_t v28 = v36;
          }
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          *(void *)uint64_t v52 = (v65 - v54);
          v52[2] = v10;
          goto LABEL_829;
        }
LABEL_460:
        if (*(_WORD *)(v17 + 128) == 2) {
          goto LABEL_830;
        }
        goto LABEL_823;
      case 431:
      case 432:
      case 433:
      case 437:
        if (v57 == 433) {
          goto LABEL_169;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        *(void *)v426 = (v54 + 4);
        v426 += 3;
LABEL_169:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        LODWORD(v10) = v423;
        if (v423 <= 12)
        {
          if ((v423 - 11) >= 2)
          {
            if (v423 != 10) {
              goto LABEL_1328;
            }
LABEL_812:
            BOOL v252 = 0;
            int v253 = v426;
            goto LABEL_813;
          }
        }
        else if ((v423 - 8232) >= 2)
        {
          if (v423 == 13)
          {
            int v253 = v426;
            BOOL v252 = (unint64_t)(v421 + 1) < v422 && v421[1] == 10;
LABEL_813:
            LODWORD(v10) = v57 == 437;
            if (v57 == 437) {
              uint64_t v11 = -1;
            }
            else {
              uint64_t v11 = 0;
            }
            uint64_t v36 = (v36 - v10);
            LODWORD(v28) = v28 + 1;
            v426 = &v253[3 * v11];
            if ((int)v28 >= (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
            {
              if ((int)v50 >= v25) {
                return 4294967253;
              }
              uint64_t v50 = (v50 + 1);
              *(void *)uint64_t v52 = (-4 - v54);
              goto LABEL_1067;
            }
            if ((int)v50 >= v25) {
              return 4294967253;
            }
            uint64_t v50 = (v50 + 1);
LABEL_1066:
            *uint64_t v52 = -v54;
            v52[1] = v28;
LABEL_1067:
            v52[2] = v252;
            goto LABEL_1327;
          }
          if (v423 != 133) {
            goto LABEL_1328;
          }
        }
        if (*(_WORD *)(v17 + 128) == 2) {
          goto LABEL_1328;
        }
        goto LABEL_812;
      case 445:
      case 446:
      case 454:
        int v65 = 0;
        goto LABEL_303;
      case 447:
      case 448:
      case 455:
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        if ((int)v28 < 1)
        {
          uint64_t v45 = (uint64_t)v426;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 2);
          uint64_t v45 = (uint64_t)(v426 + 3);
        }
        if (v427 < 1) {
          goto LABEL_1208;
        }
        int v182 = 1;
        LODWORD(v10) = v423 - 0x2000;
        if (v423 < 0x2000)
        {
          if (v423 <= 159)
          {
            if (v423 == 9 || v423 == 32) {
              goto LABEL_545;
            }
          }
          else if (v423 == 160 || v423 == 5760 || v423 == 6158)
          {
            goto LABEL_545;
          }
        }
        else if (v423 > 8238)
        {
          LODWORD(v11) = v423;
          if (v423 == 8239 || v423 == 8287 || v423 == 12288) {
            goto LABEL_545;
          }
        }
        else if (v10 < 0xB)
        {
LABEL_545:
          if (v182 != (v59 == 19)) {
            goto LABEL_1208;
          }
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          int v184 = v57 == 455 && (int)v28 > 0;
          uint64_t v36 = (v36 - v184);
          v426 = (int *)(v45 + 12 * (v184 << 31 >> 31));
LABEL_568:
          LODWORD(v28) = v28 + 1;
LABEL_569:
          *uint64_t v52 = -v54;
          v52[1] = v28;
          v52[2] = 0;
          goto LABEL_1327;
        }
        int v182 = 0;
        goto LABEL_545;
      case 449:
      case 450:
      case 456:
LABEL_303:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        unint64_t v28 = (v36 + 1);
        int *v426 = v54 + 2;
        v426[1] = 0;
        int v132 = v426 + 3;
        if (v427 < 1) {
          goto LABEL_830;
        }
        LODWORD(v10) = 1;
        LODWORD(v11) = v423 - 0x2000;
        if (v423 < 0x2000)
        {
          if (v423 <= 159)
          {
            if (v423 != 9 && v423 != 32) {
              goto LABEL_845;
            }
          }
          else if (v423 != 160 && v423 != 5760 && v423 != 6158)
          {
            goto LABEL_845;
          }
        }
        else
        {
          if (v423 <= 8238)
          {
            if (v11 < 0xB) {
              goto LABEL_308;
            }
            goto LABEL_845;
          }
          LODWORD(v45) = v423;
          if (v423 != 8239 && v423 != 8287 && v423 != 12288) {
LABEL_845:
          }
            LODWORD(v10) = 0;
        }
LABEL_308:
        if (v10 != (v59 == 19))
        {
LABEL_830:
          v426 = v132;
LABEL_1032:
          uint64_t v36 = v28;
          goto LABEL_1328;
        }
        if (v57 == 456 || v57 == 454)
        {
          int v132 = v426;
LABEL_325:
          unint64_t v28 = v36;
        }
LABEL_326:
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        v52[1] = 0;
        v52[2] = 0;
        *uint64_t v52 = v65 - v54;
LABEL_829:
        v52 += 3;
        goto LABEL_830;
      case 451:
      case 452:
      case 453:
      case 457:
        if (v57 == 453) {
          goto LABEL_178;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        *(void *)v426 = (v54 + 4);
        v426 += 3;
LABEL_178:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v28) = 1;
        LODWORD(v11) = v423;
        if (v423 < 0x2000)
        {
          if (v423 <= 159)
          {
            if (v423 != 9 && v423 != 32) {
              goto LABEL_968;
            }
          }
          else if (v423 != 160 && v423 != 5760 && v423 != 6158)
          {
            goto LABEL_968;
          }
        }
        else
        {
          if (v423 <= 8238)
          {
            if ((v423 - 0x2000) < 0xB) {
              goto LABEL_182;
            }
            goto LABEL_968;
          }
          LODWORD(v10) = v423;
          if (v423 != 8239 && v423 != 8287 && v423 != 12288) {
LABEL_968:
          }
            LODWORD(v28) = 0;
        }
LABEL_182:
        if (v28 != (v59 == 19)) {
          goto LABEL_1328;
        }
        int v102 = *(_DWORD *)(v27 + 12 * v48 + 4);
        BOOL v103 = v57 == 457;
LABEL_193:
        int v104 = v103;
        if (v103) {
          unint64_t v10 = -1;
        }
        else {
          unint64_t v10 = 0;
        }
        uint64_t v36 = (v36 - v104);
        LODWORD(v28) = v102 + 1;
        v426 += 3 * v10;
        if ((int)v28 >= (int)(bswap32(*(unsigned __int16 *)(v56 + 1)) >> 16))
        {
          if ((int)v50 >= v25) {
            return 4294967253;
          }
          uint64_t v50 = (v50 + 1);
          v52[2] = 0;
          LODWORD(v28) = -4 - v54;
          goto LABEL_1325;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        goto LABEL_569;
      case 465:
      case 466:
      case 474:
        int v65 = 0;
        goto LABEL_316;
      case 467:
      case 468:
      case 475:
        LODWORD(v28) = *(_DWORD *)(v27 + 12 * v48 + 4);
        if ((int)v28 < 1)
        {
          uint64_t v11 = (uint64_t)v426;
        }
        else
        {
          if ((int)v36 >= v25) {
            return 4294967253;
          }
          uint64_t v36 = (v36 + 1);
          *(void *)v426 = (v54 + 2);
          uint64_t v11 = (uint64_t)(v426 + 3);
        }
        if (v427 < 1) {
          goto LABEL_901;
        }
        BOOL v185 = 1;
        LODWORD(v45) = v423;
        if ((v423 - 10) >= 4 && (v423 - 8232) >= 2) {
          BOOL v185 = v423 == 133;
        }
        if (v185 != (v59 == 21))
        {
LABEL_901:
          v426 = (int *)v11;
          goto LABEL_1328;
        }
        if ((int)v50 >= v25) {
          return 4294967253;
        }
        uint64_t v50 = (v50 + 1);
        int v187 = v57 == 475 && (int)v28 > 0;
        uint64_t v36 = (v36 - v187);
        v426 = (int *)(v11 + 12 * (v187 << 31 >> 31));
        goto LABEL_568;
      case 469:
      case 470:
      case 476:
LABEL_316:
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        unint64_t v28 = (v36 + 1);
        LODWORD(v45) = v426;
        int *v426 = v54 + 2;
        v426[1] = 0;
        int v132 = v426 + 3;
        if (v427 < 1) {
          goto LABEL_830;
        }
        LODWORD(v10) = 1;
        if ((v423 - 10) >= 4 && (v423 - 8232) >= 2) {
          LODWORD(v10) = v423 == 133;
        }
        if (v10 != (v59 == 21)) {
          goto LABEL_830;
        }
        if (v57 != 476 && v57 != 474) {
          goto LABEL_326;
        }
        int v132 = v426;
        goto LABEL_325;
      case 471:
      case 472:
      case 473:
      case 477:
        if (v57 == 473) {
          goto LABEL_187;
        }
        if ((int)v36 >= v25) {
          return 4294967253;
        }
        uint64_t v36 = (v36 + 1);
        *(void *)v426 = (v54 + 4);
        v426 += 3;
LABEL_187:
        if (v427 < 1) {
          goto LABEL_1328;
        }
        LODWORD(v28) = 1;
        LODWORD(v10) = v423;
        if ((v423 - 10) >= 4 && (v423 - 8232) >= 2) {
          LODWORD(v28) = v423 == 133;
        }
        if (v28 != (v59 == 21)) {
          goto LABEL_1328;
        }
        int v102 = *(_DWORD *)(v27 + 12 * v48 + 4);
        BOOL v103 = v57 == 477;
        goto LABEL_193;
      default:
        return 4294967254;
    }
  }
}

uint64_t more_workspace(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = (uint64_t *)*a1;
  uint64_t v5 = *(void *)*a1;
  if (v5)
  {
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  else
  {
    unsigned int v9 = 2 * *((_DWORD *)v4 + 2);
    unsigned int v10 = (*(_DWORD *)(a3 + 80) << 8) - *(_DWORD *)(a3 + 88);
    if (v9 >= v10) {
      unint64_t v6 = v10;
    }
    else {
      unint64_t v6 = v9;
    }
    if ((unint64_t)a2 + 1004 > v6) {
      return 4294967233;
    }
    uint64_t v5 = (*(uint64_t (**)(unint64_t, void))a3)(4 * v6, *(void *)(a3 + 16));
    if (!v5) {
      return 4294967248;
    }
    *(void *)(a3 + 88) += v6;
    *(void *)uint64_t v5 = 0;
    *(_DWORD *)(v5 + 8) = v6;
    *unint64_t v4 = v5;
  }
  uint64_t v7 = 0;
  *(_DWORD *)(v5 + 12) = v6 - 4;
  *a1 = v5;
  return v7;
}

uint64_t do_callout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t *a7)
{
  if (*(unsigned char *)(a1 + a6) == 118) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = __rev16(*(unsigned __int16 *)(a6 + a1 + 5));
  }
  uint64_t v9 = a5[17];
  *a7 = v8;
  unsigned int v10 = (uint64_t (*)(void))a5[19];
  if (!v10) {
    return 0;
  }
  *(void *)(v9 + 16) = a2;
  uint64_t v11 = a5[4];
  *(void *)(v9 + 48) = a3 - v11;
  *(void *)(v9 + 56) = a4 - v11;
  *(void *)(v9 + 64) = __rev16(*(unsigned __int16 *)(a1 + a6 + 1));
  *(void *)(v9 + 72) = __rev16(*(unsigned __int16 *)(a1 + a6 + 3));
  if (*(unsigned char *)(a1 + a6) == 118)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *(_DWORD *)(v9 + 4) = *(unsigned __int8 *)(a6 + a1 + 5);
    *(void *)(v9 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v9 + 4) = 0;
    uint64_t v15 = a6 + a1;
    *(void *)(v9 + 80) = __rev16(*(unsigned __int16 *)(v15 + 7));
    uint64_t v12 = v15 + 10;
    uint64_t v13 = *a7 - 11;
  }
  *(void *)(v9 + 88) = v13;
  *(void *)(v9 + 96) = v12;
  return v10();
}

uint64_t pcre2_get_error_message_8(int a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967248;
  }
  int v3 = a1 - 100;
  if (a1 < 100)
  {
    if ((a1 & 0x80000000) == 0)
    {
      unint64_t v4 = &byte_2207249A2;
      int v3 = 1;
      goto LABEL_8;
    }
    int v3 = -a1;
    unint64_t v4 = "no error";
  }
  else
  {
    unint64_t v4 = "no error";
  }
  if (v3 < 1)
  {
    LOBYTE(v6) = *v4;
    if (!*v4)
    {
      uint64_t result = 0;
LABEL_22:
      *(unsigned char *)(a2 + result) = 0;
      return result;
    }
LABEL_15:
    uint64_t v9 = 0;
    uint64_t v10 = a3 - 1;
    uint64_t v11 = v4 + 1;
    while (v10 != v9)
    {
      *(unsigned char *)(a2 + v9) = v6;
      uint64_t result = v9 + 1;
      int v6 = v11[v9++];
      if (!v6) {
        goto LABEL_22;
      }
    }
    *(unsigned char *)(a2 + v10) = 0;
    return 4294967248;
  }
  while (1)
  {
LABEL_8:
    while (*v4++)
      ;
    LOBYTE(v6) = *v4;
    if (!*v4) {
      return 4294967267;
    }
    if (v3-- < 2) {
      goto LABEL_15;
    }
  }
}

unsigned __int8 *_pcre2_extuni_8(int a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, int a5, _DWORD *a6)
{
  if ((unint64_t)a2 >= a4) {
    return a2;
  }
  if (a1 >= 0) {
    int v6 = a1;
  }
  else {
    int v6 = a1 + 127;
  }
  unsigned int v7 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[a1 - (v6 & 0xFFFFFF80) + (_pcre2_ucd_stage1_8[v6 >> 7] << 7)]]);
  while (1)
  {
    unsigned int v8 = *a2;
    if (a5 && v8 >= 0xC0)
    {
      int v9 = a2[1] & 0x3F;
      if ((v8 & 0x20) != 0)
      {
        if ((v8 & 0x10) != 0)
        {
          if ((v8 & 8) != 0)
          {
            int v26 = a2[2] & 0x3F;
            int v27 = a2[3] & 0x3F;
            int v28 = a2[4] & 0x3F;
            if ((v8 & 4) != 0)
            {
              unsigned int v8 = ((v8 & 1) << 30) | (v9 << 24) | (v26 << 18) | (v27 << 12) | (v28 << 6) | a2[5] & 0x3F;
              uint64_t v10 = 6;
            }
            else
            {
              unsigned int v8 = ((v8 & 3) << 24) | (v9 << 18) | (v26 << 12) | (v27 << 6) | v28;
              uint64_t v10 = 5;
            }
          }
          else
          {
            unsigned int v8 = ((v8 & 7) << 18) | (v9 << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
            uint64_t v10 = 4;
          }
        }
        else
        {
          unsigned int v8 = ((v8 & 0xF) << 12) | (v9 << 6) | a2[2] & 0x3F;
          uint64_t v10 = 3;
        }
      }
      else
      {
        unsigned int v8 = a2[1] & 0x3F | ((v8 & 0x1F) << 6);
        uint64_t v10 = 2;
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unsigned int v11 = BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v8 & 0x7F | (_pcre2_ucd_stage1_8[v8 >> 7] << 7)]]);
    if (((_pcre2_ucp_gbtable_8[v7] >> v11) & 1) == 0) {
      return a2;
    }
    if (v7 == 11 && v11 == 11)
    {
      if (a5)
      {
        uint64_t v12 = a2;
        do
          char v13 = *--v12;
        while ((v13 & 0xC0) == 0x80);
      }
      else
      {
        uint64_t v12 = a2 - 1;
      }
      if ((unint64_t)v12 > a3) {
        break;
      }
    }
LABEL_40:
    if ((v11 == 13 || v11 == 3) && v7 == 14) {
      unsigned int v7 = 14;
    }
    else {
      unsigned int v7 = v11;
    }
    if (a6) {
      ++*a6;
    }
    a2 += v10;
    if ((unint64_t)a2 >= a4) {
      return a2;
    }
  }
  char v14 = 0;
  do
  {
    if (a5)
    {
      do
      {
        unsigned int v16 = *--v12;
        unsigned int v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      if (v15 >= 0xC0)
      {
        int v17 = v12[1] & 0x3F;
        if ((v15 & 0x20) != 0)
        {
          if ((v15 & 0x10) != 0)
          {
            if ((v15 & 8) != 0)
            {
              int v21 = v12[2] & 0x3F;
              int v22 = v12[3] & 0x3F;
              int v23 = v12[4] & 0x3F;
              if ((v15 & 4) == 0)
              {
                unsigned int v15 = ((v15 & 3) << 24) | (v17 << 18) | (v21 << 12) | (v22 << 6) | v23;
                goto LABEL_37;
              }
              int v19 = ((v15 & 1) << 30) | (v17 << 24) | (v21 << 18) | (v22 << 12) | (v23 << 6);
              unsigned __int8 v20 = v12[5];
            }
            else
            {
              int v19 = ((v15 & 7) << 18) | (v17 << 12) | ((v12[2] & 0x3F) << 6);
              unsigned __int8 v20 = v12[3];
            }
          }
          else
          {
            int v19 = ((v15 & 0xF) << 12) | (v17 << 6);
            unsigned __int8 v20 = v12[2];
          }
          unsigned int v15 = v19 & 0xFFFFFFC0 | v20 & 0x3F;
          goto LABEL_37;
        }
        unsigned int v15 = v12[1] & 0x3F | ((v15 & 0x1F) << 6);
      }
    }
    else
    {
      unsigned int v18 = *--v12;
      unsigned int v15 = v18;
    }
LABEL_37:
    if (BYTE2(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v15 & 0x7F | (_pcre2_ucd_stage1_8[v15 >> 7] << 7)]]) != 11) {
      break;
    }
    ++v14;
  }
  while ((unint64_t)v12 > a3);
  if ((v14 & 1) == 0) {
    goto LABEL_40;
  }
  return a2;
}

unsigned __int8 *_pcre2_find_bracket_8(unsigned __int8 *result, int a2, int a3)
{
  while (2)
  {
    uint64_t v3 = *result;
    switch(*result)
    {
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '^':
      case '_':
        int v4 = result[1];
        goto LABEL_10;
      case '[':
      case '\\':
      case ']':
      case 'a':
        int v4 = result[3];
LABEL_10:
        uint64_t v6 = 2 * ((v4 - 15) < 2);
        goto LABEL_11;
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_19;
      case 'p':
        unsigned int v7 = *(unsigned __int16 *)(result + 1);
        goto LABEL_17;
      case 'w':
        unsigned int v7 = *(unsigned __int16 *)(result + 5);
LABEL_17:
        result += __rev16(v7);
        continue;
      default:
        char v5 = v3 - 125;
        if ((v3 - 125) > 0x21) {
          goto LABEL_18;
        }
        if (((1 << v5) & 0x2AA000000) != 0)
        {
          uint64_t v6 = result[1];
LABEL_11:
          result += v6 + _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (((1 << v5) & 0x6300) != 0)
        {
          if (a3 == bswap32(*(unsigned __int16 *)(result + 3)) >> 16) {
            return result;
          }
          result += _pcre2_OP_lengths_8[v3];
          continue;
        }
        if (v3 == 125)
        {
          if (a3 < 0) {
            return result;
          }
          result += 3;
          continue;
        }
LABEL_18:
        if (*result)
        {
LABEL_19:
          result += _pcre2_OP_lengths_8[v3];
          if (a2 && (v3 - 29) <= 0x37)
          {
            unsigned int v8 = *(result - 1);
            if (v8 >= 0xC0) {
              result += _pcre2_utf8_table4[v8 & 0x3F];
            }
          }
          continue;
        }
        return 0;
    }
  }
}

uint64_t pcre2_jit_compile_8()
{
  return 4294967251;
}

uint64_t pcre2_jit_match_8()
{
  return 4294967251;
}

uint64_t pcre2_jit_stack_create_8()
{
  return 0;
}

const char *_pcre2_jit_get_target_8()
{
  return "JIT is not supported";
}

uint64_t _pcre2_jit_get_size_8()
{
  return 0;
}

unsigned char *pcre2_maketables_8(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (unsigned char *)(*(uint64_t (**)(uint64_t, void))a1)(1088, *(void *)(a1 + 16));
  }
  else {
    uint64_t v1 = malloc(0x440uLL);
  }
  char v2 = v1;
  if (v1)
  {
    uint64_t v3 = 0;
    do
    {
      v2[v3] = cstdlib_tolower(v3);
      ++v3;
    }
    while (v3 != 256);
    uint64_t v4 = 0;
    do
    {
      if (cstdlib_islower(v4)) {
        char v5 = cstdlib_toupper(v4);
      }
      else {
        char v5 = cstdlib_tolower(v4);
      }
      v2[v4++ + v3] = v5;
    }
    while (v4 != 256);
    uint64_t v6 = &v2[v3];
    cstdlib_memset(&v2[v3 + v4], 0, 0x140uLL);
    unint64_t v7 = 0;
    for (int i = 0; i != 256; ++i)
    {
      uint64_t v9 = v4 + (v7 >> 3);
      if (cstdlib_isdigit(i)) {
        v2[v9 + 64 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_isupper(i)) {
        v2[v9 + 96 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_islower(i)) {
        v2[v9 + 128 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_isalnum(i)) {
        v6[v9 + 160] |= 1 << (i & 7);
      }
      if (i == 95) {
        v2[v4 + 171 + v3] |= 0x80u;
      }
      if (cstdlib_isspace(i)) {
        v6[v9] |= 1 << (i & 7);
      }
      if (cstdlib_isxdigit(i)) {
        v2[v9 + 32 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_isgraph(i)) {
        v2[v9 + 192 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_isprint(i)) {
        v2[v9 + 224 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_ispunct(i)) {
        v2[v9 + 256 + v3] |= 1 << (i & 7);
      }
      if (cstdlib_iscntrl(i)) {
        v2[v9 + 288 + v3] |= 1 << (i & 7);
      }
      ++v7;
    }
    int v10 = 0;
    unsigned int v11 = &v2[v3 + 320 + v4];
    do
    {
      char v12 = cstdlib_isspace(v10) != 0;
      if (cstdlib_isalpha(v10)) {
        v12 |= 2u;
      }
      if (cstdlib_isdigit(v10)) {
        v12 |= 4u;
      }
      if (cstdlib_isxdigit(v10)) {
        v12 |= 8u;
      }
      if (cstdlib_isalnum(v10)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v10 == 95;
      }
      char v14 = v12 + 16;
      if (!v13) {
        char v14 = v12;
      }
      *v11++ = v14;
      ++v10;
    }
    while (v10 != 256);
  }
  return v2;
}

uint64_t pcre2_match_8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, long long *a7)
{
  uint64_t v11 = a3;
  uint64_t v124 = *MEMORY[0x263EF8340];
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v118 = 0u;
  memset(v117, 0, sizeof(v117));
  memset(v116, 0, 40);
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v101 = 0u;
  memset(v123, 0, sizeof(v123));
  long long v104 = (unint64_t)v123;
  if (a3 == -1) {
    uint64_t v11 = _pcre2_strlen_8(a2);
  }
  if ((a5 & 0x1FFFDFC0) != 0) {
    return 4294967262;
  }
  uint64_t v14 = 4294967245;
  if (!a1 || !a2 || !a6) {
    return v14;
  }
  if (v11 < (unint64_t)a4) {
    return 4294967263;
  }
  if (*(_DWORD *)(a1 + 80) != 1346589253) {
    return 4294967265;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 96);
  if ((v16 & 7) != 1) {
    return 4294967264;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 88);
  int v18 = (a5 >> 4) & 1;
  if ((a5 & 0x20) != 0) {
    int v18 = 2;
  }
  LOWORD(v109) = v18;
  if (v18)
  {
    if (((v17 | a5) & 0x20000000) != 0) {
      return 4294967262;
    }
  }
  char __s = &a2[a4];
  unsigned int v99 = v17;
  int v95 = v17 & 0x80000;
  if ((a5 & 0x40000000) == 0 && v95)
  {
    int v19 = &a2[a4];
    if (a4)
    {
      if (v11 > a4 && (*__s & 0xC0) == 0x80) {
        return 4294967260;
      }
      int v20 = *(unsigned __int16 *)(a1 + 124);
      int v19 = &a2[a4];
      if (*(_WORD *)(a1 + 124))
      {
        int v19 = &a2[a4];
        if (a4 >= 1)
        {
          int v21 = &a2[a4];
LABEL_28:
          int v22 = v21 - 1;
          while (1)
          {
            int v19 = v22;
            if (v22 <= a2) {
              break;
            }
            --v22;
            if ((*v19 & 0xC0) != 0x80)
            {
              int v21 = v19;
              if (--v20) {
                goto LABEL_28;
              }
              break;
            }
          }
        }
      }
    }
    int64_t v96 = v19 - a2;
    uint64_t valid = _pcre2_valid_utf_8(v19, v11 - (v19 - a2), (void *)(a6 + 64));
    *(_DWORD *)(a6 + 76) = valid;
    if (valid)
    {
      uint64_t v14 = valid;
      *(void *)(a6 + 64) += v96;
      return v14;
    }
  }
  if (a7)
  {
    uint64_t v24 = *((void *)a7 + 5);
    if (v24 != -1 && (*(unsigned char *)(a1 + 90) & 0x80) == 0) {
      return 4294967240;
    }
    long long v101 = *a7;
    *(void *)&long long v102 = *((void *)a7 + 2);
  }
  else
  {
    long long v101 = *(_OWORD *)a1;
    *(void *)&long long v102 = *(void *)(a1 + 16);
    a7 = &_pcre2_default_match_context_8;
    uint64_t v24 = *((void *)&xmmword_26D2134D0 + 1);
  }
  int v25 = &a2[v11];
  unsigned int v26 = v16 >> 14;
  LODWORD(v27) = *(_DWORD *)(a1 + 88);
  unsigned int v28 = *(_DWORD *)(a1 + 96);
  int v29 = v26 & 0xC | a5;
  *(void *)&v116[1] = v117;
  LODWORD(v117[0]) = 2;
  if (v24 == -1) {
    unint64_t v30 = &a2[v11];
  }
  else {
    unint64_t v30 = &a2[v24];
  }
  unint64_t v94 = (unint64_t)v30;
  *(void *)&long long v118 = a2;
  *((void *)&v118 + 1) = v11;
  DWORD2(v122) = 0;
  *(int8x16_t *)((char *)&v116[1] + 8) = vextq_s8(*(int8x16_t *)((char *)a7 + 24), *(int8x16_t *)((char *)a7 + 24), 8uLL);
  *(void *)&long long v108 = a4;
  *((void *)&v110 + 1) = a2;
  *(void *)&long long v111 = &a2[v11];
  unsigned int v85 = v28;
  *(void *)((char *)&v115 + 4) = __PAIR64__(v27, v29);
  HIDWORD(v105) = 0;
  LODWORD(v106) = (v28 >> 12) & 1;
  long long v113 = 0uLL;
  WORD2(v109) = *(_WORD *)(a1 + 134);
  WORD3(v109) = *(_WORD *)(a1 + 132);
  *((void *)&v109 + 1) = a1 + 136;
  *(void *)&long long v110 = a1 + 136 + WORD3(v109) * (unint64_t)WORD2(v109);
  WORD1(v109) = *(_WORD *)(a1 + 120);
  int v31 = *(unsigned __int16 *)(a1 + 122) - 1;
  *(void *)&v116[0] = 0;
  switch(v31)
  {
    case 0:
      DWORD2(v116[0]) = 1;
      char v32 = 13;
      goto LABEL_47;
    case 1:
      DWORD2(v116[0]) = 1;
      char v32 = 10;
LABEL_47:
      BYTE12(v116[0]) = v32;
      goto LABEL_53;
    case 2:
      DWORD2(v116[0]) = 2;
      WORD6(v116[0]) = 2573;
      goto LABEL_53;
    case 3:
      int v33 = 1;
      goto LABEL_51;
    case 4:
      int v33 = 2;
LABEL_51:
      DWORD1(v116[0]) = v33;
      goto LABEL_53;
    case 5:
      DWORD2(v116[0]) = 1;
      BYTE12(v116[0]) = 0;
LABEL_53:
      unint64_t v34 = *(unsigned __int16 *)(a1 + 128);
      size_t v35 = 16 * v34;
      unint64_t v36 = 16 * v34 + 128;
      LODWORD(v37) = *((_DWORD *)a7 + 12);
      unsigned int v38 = *(_DWORD *)(a1 + 100);
      if (v37 >= v38) {
        unint64_t v37 = v38;
      }
      else {
        unint64_t v37 = v37;
      }
      *((void *)&v104 + 1) = v37;
      *(uint32x2_t *)&long long v105 = vmin_u32(*(uint32x2_t *)((char *)a7 + 52), *(uint32x2_t *)(a1 + 104));
      if (v34 > 0x78)
      {
        *((void *)&v102 + 1) = 10 * v36;
        if (v37 < (10 * v36) >> 10)
        {
          if (v36 > v37 << 10) {
            return 4294967233;
          }
          *((void *)&v102 + 1) = (v37 << 10) / v36 * v36;
        }
        uint64_t v39 = ((uint64_t (*)(void))v101)();
        *(void *)&long long v103 = v39;
        if (!v39) {
          return 4294967248;
        }
        uint64_t v40 = *((void *)&v102 + 1);
        size_t v35 = 16 * *(unsigned __int16 *)(a1 + 128);
      }
      else
      {
        uint64_t v39 = v104;
        uint64_t v40 = 0x5000 / v36 * v36;
        *((void *)&v102 + 1) = v40;
        *(void *)&long long v103 = v104;
      }
      *((void *)&v103 + 1) = v39 + v40;
      cstdlib_memset((void *)(v39 + 128), 255, v35);
      uint64_t v41 = *(void *)(a1 + 24);
      uint64_t v42 = v41 + 256;
      *((void *)&v106 + 1) = v41;
      *(void *)&long long v107 = v41 + 256;
      *((void *)&v107 + 1) = v41 + 832;
      int v43 = *(_DWORD *)(a1 + 96);
      unint64_t v91 = v43 & 0x10;
      if ((v43 & 0x10) != 0)
      {
        uint64_t v44 = *(unsigned __int8 *)(a1 + 112);
        uint64_t v86 = 0;
        if ((v43 & 0x20) != 0) {
          int v87 = *(unsigned __int8 *)(v42 + v44);
        }
        else {
          int v87 = *(unsigned __int8 *)(a1 + 112);
        }
      }
      else
      {
        LODWORD(v44) = 0;
        int v87 = 0;
        int v45 = (v85 >> 9) & 1;
        if ((v43 & 0x40) == 0) {
          int v45 = 1;
        }
        if (v45) {
          uint64_t v46 = 0;
        }
        else {
          uint64_t v46 = a1 + 40;
        }
        uint64_t v86 = v46;
      }
      int __c = v44;
      int v83 = __s - 1;
      int v92 = (v99 >> 19) & 1;
      int v90 = *(_DWORD *)(a1 + 96);
      uint64_t v93 = v36;
      if ((v43 & 0x80) != 0)
      {
        int v80 = *(unsigned __int8 *)(a1 + 116);
        if ((v43 & 0x100) != 0) {
          int v81 = *(unsigned __int8 *)(v42 + *(unsigned __int8 *)(a1 + 116));
        }
        else {
          int v81 = *(unsigned __int8 *)(a1 + 116);
        }
      }
      else
      {
        int v80 = 0;
        int v81 = 0;
      }
      uint64_t v47 = 0;
      unint64_t v100 = 0;
      int v97 = v27 | a5;
      BOOL v49 = (v43 & 0x10) != 0 || v86 != 0;
      BOOL v84 = v49;
      unint64_t v82 = v91 >> 4;
      unint64_t v50 = (unint64_t)&a2[a4];
      __int16 v89 = v27;
      break;
    default:
      return 4294967252;
  }
  while (1)
  {
    if (*(unsigned char *)(a1 + 90)) {
      goto LABEL_189;
    }
    if ((v27 & 0x100) == 0)
    {
      int v51 = v25;
      goto LABEL_113;
    }
    if (v95)
    {
      int v51 = (unsigned __int8 *)v50;
      if (v50 >= (unint64_t)v25) {
        goto LABEL_113;
      }
LABEL_91:
      if (DWORD1(v116[0]))
      {
        if ((unint64_t)v51 < (unint64_t)v111
          && _pcre2_is_newline_8(v51, SDWORD1(v116[0]), v111, (int *)v116 + 2, v92))
        {
          goto LABEL_113;
        }
      }
      else if ((unint64_t)v51 <= (unint64_t)v111 - DWORD2(v116[0]) {
             && *v51 == BYTE12(v116[0])
      }
             && (DWORD2(v116[0]) == 1 || v51[1] == BYTE13(v116[0])))
      {
        goto LABEL_113;
      }
      ++v51;
      while (v51 < v25)
      {
        char v52 = *v51++;
        if ((v52 & 0xC0) != 0x80)
        {
          --v51;
          goto LABEL_91;
        }
      }
    }
    else
    {
      int v51 = (unsigned __int8 *)v50;
      if (v50 < (unint64_t)v25)
      {
        do
        {
          if (DWORD1(v116[0]))
          {
            if ((unint64_t)v51 < (unint64_t)v111
              && _pcre2_is_newline_8(v51, SDWORD1(v116[0]), v111, (int *)v116 + 2, v92))
            {
              break;
            }
          }
          else if ((unint64_t)v51 <= (unint64_t)v111 - DWORD2(v116[0]) {
                 && *v51 == BYTE12(v116[0])
          }
                 && (DWORD2(v116[0]) == 1 || v51[1] == BYTE13(v116[0])))
          {
            break;
          }
          ++v51;
        }
        while (v51 < v25);
      }
    }
LABEL_113:
    if (v97 < 0) {
      break;
    }
    if (!v91)
    {
      if ((v85 & 0x200) != 0)
      {
        if (v50 > *((void *)&v110 + 1) + a4)
        {
          if (v95)
          {
            if (v50 >= (unint64_t)v51) {
              goto LABEL_238;
            }
LABEL_139:
            if (DWORD1(v116[0]))
            {
              if (v50 > *((void *)&v110 + 1)
                && _pcre2_was_newline_8((unsigned char *)v50, SDWORD1(v116[0]), *((unint64_t *)&v110 + 1), (int *)v116 + 2, v92))
              {
                goto LABEL_238;
              }
LABEL_147:
              ++v50;
              while (v50 < (unint64_t)v51)
              {
                char v60 = *(unsigned char *)v50++;
                if ((v60 & 0xC0) != 0x80)
                {
                  --v50;
                  goto LABEL_139;
                }
              }
            }
            else if (v50 < *((void *)&v110 + 1) + (unint64_t)DWORD2(v116[0]) {
                   || *(unsigned __int8 *)(v50 - DWORD2(v116[0])) != BYTE12(v116[0])
            }
                   || DWORD2(v116[0]) != 1 && *(unsigned __int8 *)(v50 - DWORD2(v116[0]) + 1) != BYTE13(v116[0]))
            {
              goto LABEL_147;
            }
          }
          else
          {
            while (v50 < (unint64_t)v51)
            {
              if (DWORD1(v116[0]))
              {
                if (v50 > *((void *)&v110 + 1)
                  && _pcre2_was_newline_8((unsigned char *)v50, SDWORD1(v116[0]), *((unint64_t *)&v110 + 1), (int *)v116 + 2, v92))
                {
                  break;
                }
              }
              else if (v50 >= *((void *)&v110 + 1) + (unint64_t)DWORD2(v116[0]) {
                     && *(unsigned __int8 *)(v50 - DWORD2(v116[0])) == BYTE12(v116[0])
              }
                     && (DWORD2(v116[0]) == 1 || *(unsigned __int8 *)(v50 - DWORD2(v116[0]) + 1) == BYTE13(v116[0])))
              {
                break;
              }
              ++v50;
            }
          }
LABEL_238:
          if (*(unsigned char *)(v50 - 1) == 13)
          {
            BOOL v76 = (DWORD1(v116[0]) - 1) > 1 || v50 >= (unint64_t)v51;
            if (!v76 && *(unsigned char *)v50 == 10) {
              ++v50;
            }
          }
        }
LABEL_185:
        int v63 = (unsigned __int16)v109;
        int v25 = (unsigned __int8 *)v111;
        unint64_t v27 = v50;
      }
      else
      {
        if (!v86) {
          goto LABEL_185;
        }
        do
        {
          unint64_t v27 = v50;
          if (v50 >= (unint64_t)v51) {
            break;
          }
          ++v50;
        }
        while (((*(unsigned __int8 *)(v86 + ((unint64_t)*(unsigned __int8 *)v27 >> 3)) >> (*(unsigned char *)v27 & 7)) & 1) == 0);
        int v63 = (unsigned __int16)v109;
        int v25 = (unsigned __int8 *)v111;
        if ((_WORD)v109) {
          BOOL v64 = 0;
        }
        else {
          BOOL v64 = v27 >= (unint64_t)v111;
        }
        if (v64)
        {
LABEL_252:
          uint64_t v14 = 0;
          unint64_t v50 = v27;
          goto LABEL_254;
        }
      }
      char v65 = v90;
      goto LABEL_187;
    }
    int v53 = cstdlib_memchr((void *)v50, __c, (size_t)&v51[-v50]);
    int v54 = v53;
    if (__c == v87)
    {
      if (v53) {
        unint64_t v27 = (unint64_t)v53;
      }
      else {
        unint64_t v27 = (unint64_t)v51;
      }
    }
    else
    {
      BOOL v61 = cstdlib_memchr((void *)v50, v87, (size_t)&v51[-v50]);
      if (v54)
      {
        if (v54 < v61 || v61 == 0) {
          unint64_t v27 = (unint64_t)v54;
        }
        else {
          unint64_t v27 = (unint64_t)v61;
        }
      }
      else if (v61)
      {
        unint64_t v27 = (unint64_t)v61;
      }
      else
      {
        unint64_t v27 = (unint64_t)v51;
      }
    }
    char v65 = v90;
    int v63 = (unsigned __int16)v109;
    int v25 = (unsigned __int8 *)v111;
    if (!(_WORD)v109 && v27 >= (unint64_t)v111) {
      goto LABEL_252;
    }
LABEL_187:
    if (v63) {
      goto LABEL_188;
    }
    if ((uint64_t)&v25[-v27] < *(unsigned __int16 *)(a1 + 126)) {
      goto LABEL_248;
    }
    if ((v65 & 0x80) == 0) {
      goto LABEL_188;
    }
    if ((uint64_t)&v25[-v27] > 1999) {
      goto LABEL_188;
    }
    uint64_t v73 = (unsigned __int8 *)(v27 + v82);
    if (v27 + v82 <= (unint64_t)v83) {
      goto LABEL_188;
    }
    if (v73 >= v25)
    {
      unsigned int v74 = (unsigned __int8 *)(v27 + v82);
    }
    else
    {
      unsigned int v74 = (unsigned __int8 *)cstdlib_memchr((void *)(v27 + v82), v80, v25 - v73);
      if (v80 != v81)
      {
        if (v74) {
          goto LABEL_247;
        }
        unsigned int v74 = (unsigned __int8 *)cstdlib_memchr(v73, v81, v25 - v73);
      }
      if (!v74) {
        unsigned int v74 = v25;
      }
    }
LABEL_247:
    int v83 = v74;
    if (v74 >= v25)
    {
LABEL_248:
      uint64_t v14 = 0;
      unint64_t v50 = v27;
      goto LABEL_255;
    }
LABEL_188:
    unint64_t v50 = v27;
    LOWORD(v27) = v89;
LABEL_189:
    if (v50 > v94) {
      goto LABEL_249;
    }
    *(void *)&long long v119 = v50 - (void)a2;
    DWORD2(v122) |= 1u;
    *(void *)&long long v112 = v50;
    *((void *)&v112 + 1) = v50;
    DWORD2(v105) = 0;
    *((void *)&v108 + 1) = 0;
    HIDWORD(v115) = 0;
    uint64_t matched = match_1((unsigned __int8 *)v50, (unsigned __int8 *)v110, (void *)(a6 + 80), *(unsigned __int16 *)(a6 + 74), *(unsigned __int16 *)(a1 + 128), v93, (uint64_t)&v101);
    BOOL v67 = HIDWORD(v105) != 0;
    BOOL v68 = v47 == 0;
    BOOL v69 = !v67 || !v68;
    if (v67 && v68) {
      uint64_t v47 = v112;
    }
    unint64_t v70 = v100;
    if (!v69) {
      unint64_t v70 = v50;
    }
    unint64_t v100 = v70;
    uint64_t v14 = 0;
    switch(matched)
    {
      case 0xFFFFFC1B:
        goto LABEL_255;
      case 0xFFFFFC1C:
      case 0xFFFFFC1F:
        goto LABEL_198;
      case 0xFFFFFC1D:
        int v71 = (unsigned __int8 *)*((void *)&v114 + 1);
        if (*((void *)&v114 + 1) > v50) {
          goto LABEL_205;
        }
        goto LABEL_198;
      case 0xFFFFFC1E:
        LODWORD(v116[0]) = HIDWORD(v115);
        int v71 = (unsigned __int8 *)v50;
        goto LABEL_205;
      default:
        uint64_t v14 = matched;
        if (matched) {
          goto LABEL_255;
        }
LABEL_198:
        LODWORD(v116[0]) = 0;
        int v71 = (unsigned __int8 *)(v50 + 1);
        if (!v95 || v71 >= v25) {
          goto LABEL_205;
        }
        int v72 = &v25[~v50];
        break;
    }
    while ((*v71 & 0xC0) == 0x80)
    {
      ++v71;
      if (!--v72)
      {
        int v71 = v25;
        break;
      }
    }
LABEL_205:
    if ((v27 & 0x100) != 0)
    {
      if (DWORD1(v116[0]))
      {
        if (v50 < (unint64_t)v111
          && _pcre2_is_newline_8((unsigned __int8 *)v50, SDWORD1(v116[0]), v111, (int *)v116 + 2, v92))
        {
          goto LABEL_249;
        }
      }
      else if (v50 <= (unint64_t)v111 - DWORD2(v116[0]) {
             && *(unsigned __int8 *)v50 == BYTE12(v116[0])
      }
             && (DWORD2(v116[0]) == 1 || *(unsigned __int8 *)(v50 + 1) == BYTE13(v116[0])))
      {
LABEL_249:
        uint64_t v14 = 0;
        goto LABEL_255;
      }
    }
    if (v97 < 0 || v71 > v25)
    {
      uint64_t v14 = 0;
      unint64_t v50 = (unint64_t)v71;
      goto LABEL_255;
    }
    if (v71 > __s
      && *(v71 - 1) == 13
      && v71 < v25
      && *v71 == 10
      && (*(unsigned char *)(a1 + 97) & 8) == 0
      && ((DWORD1(v116[0]) - 1) < 2 || DWORD2(v116[0]) == 2))
    {
      ++v71;
    }
    *(void *)&long long v113 = 0;
    unint64_t v50 = (unint64_t)v71;
  }
  if (!v84) {
    goto LABEL_185;
  }
  if (v50 >= (unint64_t)v51) {
    goto LABEL_253;
  }
  unint64_t v55 = *(unsigned __int8 *)v50;
  if (v91)
  {
    BOOL v57 = v55 != __c && v55 != v87;
    uint64_t v58 = v86;
    if (!v57 || v86 == 0)
    {
      if (v57) {
        goto LABEL_253;
      }
      goto LABEL_185;
    }
  }
  else
  {
    uint64_t v58 = v86;
    if (!v86) {
      goto LABEL_253;
    }
  }
  if ((*(unsigned __int8 *)(v58 + (v55 >> 3)) >> (v55 & 7))) {
    goto LABEL_185;
  }
LABEL_253:
  uint64_t v14 = 0;
LABEL_254:
  int v25 = v51;
LABEL_255:
  if ((void)v103 != (void)v104) {
    (*((void (**)(void, void))&v101 + 1))(v103, v102);
  }
  *(void *)(a6 + 24) = a1;
  *(void *)(a6 + 32) = a2;
  *(void *)(a6 + 40) = v113;
  *(_WORD *)(a6 + 72) = 0;
  if (v14 == 1)
  {
    if ((SDWORD2(v108) & 0x80000000) == 0) {
      int v77 = DWORD2(v108);
    }
    else {
      int v77 = DWORD2(v108) + 1;
    }
    int v78 = v77 >> 1;
    if (SDWORD2(v108) < 2 * *(unsigned __int16 *)(a6 + 74)) {
      uint64_t v14 = (v78 + 1);
    }
    else {
      uint64_t v14 = 0;
    }
    *(_DWORD *)(a6 + 76) = v14;
    *(void *)(a6 + 64) = v50 - (void)a2;
    uint64_t v79 = *((void *)&v111 + 1);
    if (*((void *)&v112 + 1) > *((void *)&v111 + 1)) {
      uint64_t v79 = *((void *)&v112 + 1);
    }
    *(void *)(a6 + 48) = v112 - (void)a2;
    *(void *)(a6 + 56) = v79 - (void)a2;
  }
  else
  {
    *(void *)(a6 + 40) = *((void *)&v113 + 1);
    if (v14 == -2 || !v14)
    {
      if (v100)
      {
        *(void *)(a6 + 80) = v100 - (void)a2;
        *(void *)(a6 + 88) = v25 - a2;
        *(void *)(a6 + 56) = v25 - a2;
        *(void *)(a6 + 64) = v100 - (void)a2;
        *(void *)(a6 + 48) = v47 - (void)a2;
        uint64_t v14 = 4294967294;
      }
      else
      {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
    }
    *(_DWORD *)(a6 + 76) = v14;
  }
  return v14;
}

uint64_t match_1(unsigned __int8 *a1, unsigned __int8 *a2, void *a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  v1355 = 0;
  unsigned int v9 = 0;
  int v10 = 0;
  LODWORD(v11) = 0;
  v1367 = 0;
  unsigned int v12 = *(_DWORD *)(a7 + 232);
  unsigned int v1362 = 0;
  int v1364 = v12 & 0x80000;
  int v1361 = (v12 >> 19) & 1;
  size_t __n = a6 - 80;
  uint64_t v13 = *(void *)(a7 + 32);
  *(_DWORD *)(v13 + 48) = 0;
  *(void *)(v13 + 104) = 0xFFFFFFFFLL;
  *(void *)(v13 + 80) = a1;
  *(void *)(v13 + 88) = a1;
  *(void *)(v13 + 96) = 0;
  uint64_t v14 = (unint64_t *)(a7 + 176);
  unsigned int v15 = (unint64_t *)(a7 + 160);
  *(_OWORD *)(v13 + 112) = xmmword_2207249B0;
  unsigned int v16 = (_WORD *)(a7 + 128);
  v1360 = (_DWORD *)(a7 + 76);
  v1356 = (int *)(a7 + 248);
  uint64_t v1358 = -a6;
LABEL_2:
  *(_DWORD *)(v13 + 52) = v11;
  *(void *)uint64_t v13 = a2;
  *(void *)(v13 + 32) = a6;
  if (v11)
  {
    *(void *)(v13 + 112) = v13 - *(void *)(v7 + 32);
    if ((v11 & 0xFFFF0000) == 0x40000) {
      *(_DWORD *)(v13 + 104) = (unsigned __int16)v11;
    }
  }
  unsigned int v17 = *(_DWORD *)(v7 + 72);
  *(_DWORD *)(v7 + 72) = v17 + 1;
  if (v17 >= *(_DWORD *)(v7 + 64)) {
    return 4294967249;
  }
  if (v9 >= *(_DWORD *)(v7 + 68)) {
    return 4294967243;
  }
  v1357 = v10;
  uint64_t v11 = v1362;
LABEL_8:
  unsigned int v18 = *a2;
  *(unsigned char *)(v13 + 73) = v18;
  uint64_t v19 = 4294967252;
  uint64_t v20 = 0;
  switch(v18)
  {
    case 0u:
    case 0xA0u:
      if (*(_DWORD *)(v13 + 104) == -1)
      {
        unsigned int v307 = *(unsigned __int8 **)(v13 + 80);
        unsigned int v308 = *(unsigned __int8 **)(v13 + 88);
        if (v307 == v308)
        {
          int v503 = *(_DWORD *)(v7 + 228);
          if ((v503 & 4) != 0
            || (v503 & 8) != 0 && v307 == (unsigned __int8 *)(*(void *)(v7 + 152) + *(void *)(v7 + 112)))
          {
            goto LABEL_1172;
          }
        }
        if ((unint64_t)v307 < *v15 && ((*(_DWORD *)(v7 + 232) | *(_DWORD *)(v7 + 228)) & 0x20000000) != 0)
        {
          uint64_t v20 = 0;
          uint64_t v19 = 0;
          if (!v18) {
            goto LABEL_2451;
          }
        }
        else
        {
          *(void *)(v7 + 168) = v307;
          *(void *)(v7 + 120) = *(void *)(v13 + 120);
          *(void *)(v7 + 192) = *(void *)(v13 + 96);
          if ((unint64_t)v307 > *(void *)(v7 + 184)) {
            *(void *)(v7 + 184) = v307;
          }
          uint64_t v1344 = *(void *)(v7 + 152);
          *a3 = &v308[-v1344];
          a3[1] = &v307[-v1344];
          if (a5 + 1 < a4) {
            unsigned int v1345 = a5 + 1;
          }
          else {
            unsigned int v1345 = a4;
          }
          int v1346 = 2 * v1345;
          unsigned int v1347 = 2 * v1345 - 2;
          cstdlib_memcpy(a3 + 2, (const void *)(v13 + 128), 8 * v1347);
          unint64_t v1348 = (v1346 - 1);
          if (*(void *)(v13 + 120) + 2 <= v1348)
          {
            do
            {
              a3[v1348] = -1;
              unint64_t v1348 = v1347;
              BOOL v95 = *(void *)(v13 + 120) + 2 > (unint64_t)v1347;
              uint64_t v19 = 1;
              --v1347;
            }
            while (!v95);
          }
          else
          {
            return 1;
          }
        }
        return v19;
      }
      unsigned int v38 = (void *)v13;
      do
      {
        uint64_t v39 = v38[14];
        if (v39 == -1) {
          return 4294967252;
        }
        uint64_t v40 = *(void *)(v7 + 32) + v39;
        unsigned int v38 = (void *)(v40 + v1358);
      }
      while (*(unsigned __int16 *)(v40 + 54) << 16 != 0x40000);
      v1357 = (unsigned __int8 *)v40;
      v38[10] = *(void *)(v13 + 80);
      v38[12] = *(void *)(v13 + 96);
      *v38 += 3;
      uint64_t v13 = v40 + v1358;
      goto LABEL_2445;
    case 1u:
      int v129 = *(unsigned __int8 **)(v13 + 80);
      int v130 = *(unsigned __int8 **)(v7 + 152);
      goto LABEL_173;
    case 2u:
      int v129 = *(unsigned __int8 **)(v13 + 80);
      int v130 = (unsigned __int8 *)(*(void *)(v7 + 152) + *(void *)(v7 + 112));
LABEL_173:
      if (v129 == v130) {
        goto LABEL_2389;
      }
      goto LABEL_2925;
    case 3u:
      *(void *)(v13 + 88) = *(void *)(v13 + 80);
      goto LABEL_2389;
    case 4u:
    case 5u:
      unint64_t v41 = *(void *)(v13 + 80);
      if (v41 == *(void *)(v7 + 152)) {
        goto LABEL_587;
      }
      if (!v1364)
      {
        uint64_t v42 = (unsigned __int8 *)(v41 - 1);
        unsigned int v43 = *(unsigned __int8 *)(v41 - 1);
        goto LABEL_582;
      }
      uint64_t v42 = *(unsigned __int8 **)(v13 + 80);
      do
      {
        unsigned int v44 = *--v42;
        unsigned int v43 = v44;
      }
      while ((v44 & 0xC0) == 0x80);
      if (v43 < 0xC0) {
        goto LABEL_582;
      }
      int v45 = v42[1] & 0x3F;
      if ((v43 & 0x20) == 0)
      {
        unsigned int v43 = v42[1] & 0x3F | ((v43 & 0x1F) << 6);
        goto LABEL_582;
      }
      if ((v43 & 0x10) != 0)
      {
        if ((v43 & 8) != 0)
        {
          int v849 = v42[2] & 0x3F;
          int v850 = v42[3] & 0x3F;
          int v851 = v42[4] & 0x3F;
          if ((v43 & 4) == 0)
          {
            unsigned int v43 = ((v43 & 3) << 24) | (v45 << 18) | (v849 << 12) | (v850 << 6) | v851;
            goto LABEL_582;
          }
          int v547 = ((v43 & 1) << 30) | (v45 << 24) | (v849 << 18) | (v850 << 12) | (v851 << 6);
          unsigned __int8 v548 = v42[5];
        }
        else
        {
          int v547 = ((v43 & 7) << 18) | (v45 << 12) | ((v42[2] & 0x3F) << 6);
          unsigned __int8 v548 = v42[3];
        }
      }
      else
      {
        int v547 = ((v43 & 0xF) << 12) | (v45 << 6);
        unsigned __int8 v548 = v42[2];
      }
      unsigned int v43 = v547 & 0xFFFFFFC0 | v548 & 0x3F;
LABEL_582:
      if ((unint64_t)v42 < *v14) {
        *uint64_t v14 = (unint64_t)v42;
      }
      if ((*(unsigned char *)(v7 + 234) & 2) != 0)
      {
        int v323 = v43 == 95
            || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                              * _pcre2_ucd_stage2_8[v43 & 0x7F | (_pcre2_ucd_stage1_8[v43 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
      }
      else if (v43 > 0xFF)
      {
LABEL_587:
        int v323 = 0;
      }
      else
      {
        int v323 = (*(unsigned __int8 *)(*(void *)(v7 + 104) + v43) >> 4) & 1;
      }
      v491 = (unsigned char *)*v15;
      if (v41 >= *v15)
      {
        unsigned int v497 = (unsigned __int16)*v16;
        if (*v16)
        {
          if (v41 > *v14)
          {
            _DWORD *v1360 = 1;
            if (v497 > 1) {
              return 4294967294;
            }
          }
        }
LABEL_968:
        int v498 = 0;
        goto LABEL_969;
      }
      v492 = (unsigned char *)(v41 + 1);
      if (!v1364)
      {
        unsigned int v495 = *(unsigned __int8 *)v41;
        v493 = (unsigned char *)(v41 + 1);
        goto LABEL_963;
      }
      v493 = (unsigned char *)(v41 + 1);
      if (v492 < v491)
      {
        v494 = &v491[~v41];
        v493 = (unsigned char *)(v41 + 1);
        while ((*v493 & 0xC0) == 0x80)
        {
          ++v493;
          if (!--v494)
          {
            v493 = (unsigned char *)*v15;
            break;
          }
        }
      }
      unsigned int v495 = *(unsigned __int8 *)v41;
      if (v495 < 0xC0) {
        goto LABEL_963;
      }
      int v496 = *v492 & 0x3F;
      if ((v495 & 0x20) == 0)
      {
        unsigned int v495 = v496 & 0xFFFFF83F | ((v495 & 0x1F) << 6);
        goto LABEL_963;
      }
      if ((v495 & 0x10) != 0)
      {
        if ((v495 & 8) != 0)
        {
          int v891 = *(unsigned char *)(v41 + 2) & 0x3F;
          int v892 = *(unsigned char *)(v41 + 3) & 0x3F;
          int v893 = *(unsigned char *)(v41 + 4) & 0x3F;
          if ((v495 & 4) == 0)
          {
            unsigned int v495 = ((v495 & 3) << 24) | (v496 << 18) | (v891 << 12) | (v892 << 6) | v893;
            goto LABEL_963;
          }
          int v573 = ((v495 & 1) << 30) | (v496 << 24) | (v891 << 18) | (v892 << 12) | (v893 << 6);
          unsigned __int8 v574 = *(unsigned char *)(v41 + 5);
        }
        else
        {
          int v573 = ((v495 & 7) << 18) | (v496 << 12) | ((*(unsigned char *)(v41 + 2) & 0x3F) << 6);
          unsigned __int8 v574 = *(unsigned char *)(v41 + 3);
        }
      }
      else
      {
        int v573 = ((v495 & 0xF) << 12) | (v496 << 6);
        unsigned __int8 v574 = *(unsigned char *)(v41 + 2);
      }
      unsigned int v495 = v573 & 0xFFFFFFC0 | v574 & 0x3F;
LABEL_963:
      if ((unint64_t)v493 > *(void *)(v7 + 184)) {
        *(void *)(v7 + 184) = v493;
      }
      if ((*(unsigned char *)(v7 + 234) & 2) == 0)
      {
        if (v495 <= 0xFF)
        {
          int v498 = (*(unsigned __int8 *)(*(void *)(v7 + 104) + v495) >> 4) & 1;
          goto LABEL_969;
        }
        goto LABEL_968;
      }
      int v498 = v495 == 95
          || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                            * _pcre2_ucd_stage2_8[v495 & 0x7F | (_pcre2_ucd_stage1_8[v495 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
LABEL_969:
      *(void *)uint64_t v13 = a2 + 1;
      if (*a2 == 5)
      {
        if (v498 == v323) {
          goto LABEL_2925;
        }
      }
      else if (v498 != v323)
      {
        goto LABEL_2925;
      }
      goto LABEL_2445;
    case 6u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v132 = *v131;
      if (v1364 && v132 >= 0xC0)
      {
        if ((v132 & 0x20) != 0)
        {
          int v551 = v131[1] & 0x3F;
          if ((v132 & 0x10) != 0)
          {
            if ((v132 & 8) != 0)
            {
              int v855 = v131[2] & 0x3F;
              int v856 = v131[3] & 0x3F;
              int v857 = v131[4] & 0x3F;
              if ((v132 & 4) != 0)
              {
                unsigned int v132 = ((v132 & 1) << 30) | (v551 << 24) | (v855 << 18) | (v856 << 12) | (v857 << 6) | v131[5] & 0x3F;
                v552 = v131 + 6;
              }
              else
              {
                unsigned int v132 = ((v132 & 3) << 24) | (v551 << 18) | (v855 << 12) | (v856 << 6) | v857;
                v552 = v131 + 5;
              }
            }
            else
            {
              unsigned int v132 = ((v132 & 7) << 18) | (v551 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v552 = v131 + 4;
            }
          }
          else
          {
            unsigned int v132 = ((v132 & 0xF) << 12) | (v551 << 6) | v131[2] & 0x3F;
            v552 = v131 + 3;
          }
          *(void *)(v13 + 80) = v552;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          unsigned int v132 = v131[1] & 0x3F | ((v132 & 0x1F) << 6);
        }
        if (v132 > 0xFF) {
          goto LABEL_2389;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v132) & 4) == 0) {
        goto LABEL_2389;
      }
      goto LABEL_1172;
    case 7u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v133 = *v131;
      if (!v1364 || v133 < 0xC0) {
        goto LABEL_2290;
      }
      if ((v133 & 0x20) != 0)
      {
        int v553 = v131[1] & 0x3F;
        if ((v133 & 0x10) != 0)
        {
          if ((v133 & 8) != 0)
          {
            int v858 = v131[2] & 0x3F;
            int v859 = v131[3] & 0x3F;
            int v860 = v131[4] & 0x3F;
            if ((v133 & 4) != 0)
            {
              unsigned int v133 = ((v133 & 1) << 30) | (v553 << 24) | (v858 << 18) | (v859 << 12) | (v860 << 6) | v131[5] & 0x3F;
              v554 = v131 + 6;
            }
            else
            {
              unsigned int v133 = ((v133 & 3) << 24) | (v553 << 18) | (v858 << 12) | (v859 << 6) | v860;
              v554 = v131 + 5;
            }
          }
          else
          {
            unsigned int v133 = ((v133 & 7) << 18) | (v553 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
            v554 = v131 + 4;
          }
        }
        else
        {
          unsigned int v133 = ((v133 & 0xF) << 12) | (v553 << 6) | v131[2] & 0x3F;
          v554 = v131 + 3;
        }
        *(void *)(v13 + 80) = v554;
      }
      else
      {
        *(void *)(v13 + 80) = v131 + 2;
        unsigned int v133 = v131[1] & 0x3F | ((v133 & 0x1F) << 6);
      }
      if (v133 <= 0xFF)
      {
LABEL_2290:
        if ((*(unsigned char *)(*(void *)(v7 + 104) + v133) & 4) != 0) {
          goto LABEL_2389;
        }
      }
      goto LABEL_1172;
    case 8u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v134 = *v131;
      if (v1364 && v134 >= 0xC0)
      {
        if ((v134 & 0x20) != 0)
        {
          int v555 = v131[1] & 0x3F;
          if ((v134 & 0x10) != 0)
          {
            if ((v134 & 8) != 0)
            {
              int v861 = v131[2] & 0x3F;
              int v862 = v131[3] & 0x3F;
              int v863 = v131[4] & 0x3F;
              if ((v134 & 4) != 0)
              {
                unsigned int v134 = ((v134 & 1) << 30) | (v555 << 24) | (v861 << 18) | (v862 << 12) | (v863 << 6) | v131[5] & 0x3F;
                v556 = v131 + 6;
              }
              else
              {
                unsigned int v134 = ((v134 & 3) << 24) | (v555 << 18) | (v861 << 12) | (v862 << 6) | v863;
                v556 = v131 + 5;
              }
            }
            else
            {
              unsigned int v134 = ((v134 & 7) << 18) | (v555 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v556 = v131 + 4;
            }
          }
          else
          {
            unsigned int v134 = ((v134 & 0xF) << 12) | (v555 << 6) | v131[2] & 0x3F;
            v556 = v131 + 3;
          }
          *(void *)(v13 + 80) = v556;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          unsigned int v134 = v131[1] & 0x3F | ((v134 & 0x1F) << 6);
        }
        if (v134 > 0xFF) {
          goto LABEL_2389;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v134) & 1) == 0) {
        goto LABEL_2389;
      }
      goto LABEL_1172;
    case 9u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v135 = *v131;
      if (!v1364 || v135 < 0xC0) {
        goto LABEL_2300;
      }
      if ((v135 & 0x20) != 0)
      {
        int v557 = v131[1] & 0x3F;
        if ((v135 & 0x10) != 0)
        {
          if ((v135 & 8) != 0)
          {
            int v864 = v131[2] & 0x3F;
            int v865 = v131[3] & 0x3F;
            int v866 = v131[4] & 0x3F;
            if ((v135 & 4) != 0)
            {
              unsigned int v135 = ((v135 & 1) << 30) | (v557 << 24) | (v864 << 18) | (v865 << 12) | (v866 << 6) | v131[5] & 0x3F;
              v558 = v131 + 6;
            }
            else
            {
              unsigned int v135 = ((v135 & 3) << 24) | (v557 << 18) | (v864 << 12) | (v865 << 6) | v866;
              v558 = v131 + 5;
            }
          }
          else
          {
            unsigned int v135 = ((v135 & 7) << 18) | (v557 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
            v558 = v131 + 4;
          }
        }
        else
        {
          unsigned int v135 = ((v135 & 0xF) << 12) | (v557 << 6) | v131[2] & 0x3F;
          v558 = v131 + 3;
        }
        *(void *)(v13 + 80) = v558;
      }
      else
      {
        *(void *)(v13 + 80) = v131 + 2;
        unsigned int v135 = v131[1] & 0x3F | ((v135 & 0x1F) << 6);
      }
      if (v135 <= 0xFF)
      {
LABEL_2300:
        if (*(unsigned char *)(*(void *)(v7 + 104) + v135)) {
          goto LABEL_2389;
        }
      }
      goto LABEL_1172;
    case 0xAu:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v136 = *v131;
      if (v1364 && v136 >= 0xC0)
      {
        if ((v136 & 0x20) != 0)
        {
          int v559 = v131[1] & 0x3F;
          if ((v136 & 0x10) != 0)
          {
            if ((v136 & 8) != 0)
            {
              int v867 = v131[2] & 0x3F;
              int v868 = v131[3] & 0x3F;
              int v869 = v131[4] & 0x3F;
              if ((v136 & 4) != 0)
              {
                unsigned int v136 = ((v136 & 1) << 30) | (v559 << 24) | (v867 << 18) | (v868 << 12) | (v869 << 6) | v131[5] & 0x3F;
                v560 = v131 + 6;
              }
              else
              {
                unsigned int v136 = ((v136 & 3) << 24) | (v559 << 18) | (v867 << 12) | (v868 << 6) | v869;
                v560 = v131 + 5;
              }
            }
            else
            {
              unsigned int v136 = ((v136 & 7) << 18) | (v559 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v560 = v131 + 4;
            }
          }
          else
          {
            unsigned int v136 = ((v136 & 0xF) << 12) | (v559 << 6) | v131[2] & 0x3F;
            v560 = v131 + 3;
          }
          *(void *)(v13 + 80) = v560;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          unsigned int v136 = v131[1] & 0x3F | ((v136 & 0x1F) << 6);
        }
        if (v136 > 0xFF) {
          goto LABEL_2389;
        }
      }
      if ((*(unsigned char *)(*(void *)(v7 + 104) + v136) & 0x10) == 0) {
        goto LABEL_2389;
      }
      goto LABEL_1172;
    case 0xBu:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v137 = *v131;
      if (!v1364 || v137 < 0xC0) {
        goto LABEL_2310;
      }
      if ((v137 & 0x20) != 0)
      {
        int v561 = v131[1] & 0x3F;
        if ((v137 & 0x10) != 0)
        {
          if ((v137 & 8) != 0)
          {
            int v870 = v131[2] & 0x3F;
            int v871 = v131[3] & 0x3F;
            int v872 = v131[4] & 0x3F;
            if ((v137 & 4) != 0)
            {
              unsigned int v137 = ((v137 & 1) << 30) | (v561 << 24) | (v870 << 18) | (v871 << 12) | (v872 << 6) | v131[5] & 0x3F;
              v562 = v131 + 6;
            }
            else
            {
              unsigned int v137 = ((v137 & 3) << 24) | (v561 << 18) | (v870 << 12) | (v871 << 6) | v872;
              v562 = v131 + 5;
            }
          }
          else
          {
            unsigned int v137 = ((v137 & 7) << 18) | (v561 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
            v562 = v131 + 4;
          }
        }
        else
        {
          unsigned int v137 = ((v137 & 0xF) << 12) | (v561 << 6) | v131[2] & 0x3F;
          v562 = v131 + 3;
        }
        *(void *)(v13 + 80) = v562;
      }
      else
      {
        *(void *)(v13 + 80) = v131 + 2;
        unsigned int v137 = v131[1] & 0x3F | ((v137 & 0x1F) << 6);
      }
      if (v137 <= 0xFF)
      {
LABEL_2310:
        if ((*(unsigned char *)(*(void *)(v7 + 104) + v137) & 0x10) != 0) {
          goto LABEL_2389;
        }
      }
      goto LABEL_1172;
    case 0xCu:
      int v138 = *(_DWORD *)(v7 + 244);
      uint64_t v139 = *(unsigned __int8 **)(v13 + 80);
      unint64_t v140 = *(void *)(v7 + 160);
      if (v138)
      {
        if ((unint64_t)v139 < v140)
        {
          uint64_t v141 = v16;
          int v142 = (unsigned __int8 *)a6;
          if (_pcre2_is_newline_8(v139, v138, v140, v1356, v1361))
          {
            uint64_t v20 = 0;
            a6 = (uint64_t)v142;
            unsigned int v16 = v141;
            goto LABEL_2451;
          }
          unint64_t v140 = *v15;
          a6 = (uint64_t)v142;
          unsigned int v16 = v141;
        }
      }
      else
      {
        uint64_t v478 = *v1356;
        if ((unint64_t)v139 <= v140 - v478
          && *v139 == *(unsigned __int8 *)(v7 + 252)
          && (v478 == 1 || v139[1] == *(unsigned __int8 *)(v7 + 253)))
        {
          goto LABEL_1172;
        }
      }
      unsigned int v575 = (unsigned __int16)*v16;
      if (*v16)
      {
        v576 = *(unsigned __int8 **)(v13 + 80);
        if (v576 == (unsigned __int8 *)(v140 - 1)
          && !*(_DWORD *)(v7 + 244)
          && *v1356 == 2
          && *v576 == *(unsigned __int8 *)(v7 + 252))
        {
          _DWORD *v1360 = 1;
          if (v575 > 1) {
            return 4294967294;
          }
        }
      }
LABEL_1162:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= v140)
      {
LABEL_1169:
        unsigned int v108 = (unsigned __int16)*v16;
        if (!*v16 || (unint64_t)v131 <= *v14) {
          goto LABEL_1172;
        }
        goto LABEL_1171;
      }
      v577 = v131 + 1;
      *(void *)(v13 + 80) = v131 + 1;
      if (v1364 && (unint64_t)v577 < v140)
      {
        unint64_t v578 = v140 - (void)v577;
        v579 = v131 + 2;
        do
        {
          if ((*(v579 - 1) & 0xC0) != 0x80) {
            break;
          }
          *(void *)(v13 + 80) = v579++;
          --v578;
        }
        while (v578);
      }
LABEL_1168:
      uint64_t v244 = *(void *)v13 + 1;
      goto LABEL_2444;
    case 0xDu:
      unint64_t v140 = *v15;
      goto LABEL_1162;
    case 0xEu:
      unsigned int v143 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v143 >= *v15) {
        goto LABEL_1048;
      }
      int v144 = v143 + 1;
      goto LABEL_213;
    case 0xFu:
    case 0x10u:
      uint64_t v46 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v46 >= *v15) {
        goto LABEL_138;
      }
      *(void *)(v13 + 80) = v46 + 1;
      int v47 = *v46;
      if (v1364 && v47 >= 0xC0)
      {
        if ((v47 & 0x20) != 0)
        {
          int v507 = v46[1] & 0x3F;
          if ((v47 & 0x10) != 0)
          {
            if ((v47 & 8) != 0)
            {
              int v829 = v46[2] & 0x3F;
              int v830 = v46[3] & 0x3F;
              int v831 = v46[4] & 0x3F;
              if ((v47 & 4) != 0)
              {
                int v47 = ((v47 & 1) << 30) | (v507 << 24) | (v829 << 18) | (v830 << 12) | (v831 << 6) | v46[5] & 0x3F;
                v508 = v46 + 6;
              }
              else
              {
                int v47 = ((v47 & 3) << 24) | (v507 << 18) | (v829 << 12) | (v830 << 6) | v831;
                v508 = v46 + 5;
              }
            }
            else
            {
              int v47 = ((v47 & 7) << 18) | (v507 << 12) | ((v46[2] & 0x3F) << 6) | v46[3] & 0x3F;
              v508 = v46 + 4;
            }
          }
          else
          {
            int v47 = ((v47 & 0xF) << 12) | (v507 << 6) | v46[2] & 0x3F;
            v508 = v46 + 3;
          }
          *(void *)(v13 + 80) = v508;
        }
        else
        {
          *(void *)(v13 + 80) = v46 + 2;
          int v47 = v46[1] & 0x3F | ((v47 & 0x1F) << 6);
        }
      }
      uint64_t v894 = _pcre2_ucd_stage2_8[v47 & 0x7F | (_pcre2_ucd_stage1_8[v47 >> 7] << 7)];
      switch(a2[1])
      {
        case 0u:
          goto LABEL_1954;
        case 1u:
          unsigned int v896 = BYTE1(_pcre2_ucd_records_8[2 * v894]);
          BOOL v95 = v896 > 9;
          int v897 = (1 << v896) & 0x320;
          if (!v95 && v897 != 0) {
            goto LABEL_1954;
          }
          if (v18 == 15) {
            goto LABEL_2450;
          }
          goto LABEL_1172;
        case 2u:
          int v899 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v894])];
          int v900 = a2[2];
          goto LABEL_1915;
        case 3u:
          int v899 = a2[2];
          int v900 = BYTE1(_pcre2_ucd_records_8[2 * v894]);
LABEL_1915:
          BOOL v901 = v899 == v900;
          goto LABEL_1917;
        case 4u:
          BOOL v901 = a2[2] == LOBYTE(_pcre2_ucd_records_8[2 * v894]);
LABEL_1917:
          BOOL v902 = v901;
          BOOL v903 = v18 == 16;
          goto LABEL_1921;
        case 5u:
          BOOL v905 = (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v894])] & 0xFFFFFFFD) == 1;
          goto LABEL_1927;
        case 6u:
        case 7u:
          if (v47 < 0x2000)
          {
            if (v47 > 132)
            {
              if (v47 > 5759)
              {
                if (v47 != 5760 && v47 != 6158) {
                  goto LABEL_2413;
                }
              }
              else if (v47 != 133 && v47 != 160)
              {
                goto LABEL_2413;
              }
            }
            else
            {
              BOOL v95 = v47 > 0x20;
              uint64_t v910 = (1 << v47) & 0x100003E00;
              if (v95 || v910 == 0)
              {
LABEL_2413:
                BOOL v902 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v894])] != 6;
                BOOL v903 = v18 == 15;
LABEL_1921:
                BOOL v904 = v903;
LABEL_1931:
                if ((v904 ^ v902)) {
                  goto LABEL_1172;
                }
                goto LABEL_2450;
              }
            }
          }
          else if ((v47 - 0x2000) >= 0xB)
          {
            BOOL v895 = (v47 - 8232) > 0x37 || ((1 << (v47 - 40)) & 0x80000000000083) == 0;
            if (v895 && v47 != 12288) {
              goto LABEL_2413;
            }
          }
LABEL_1954:
          if (v18 == 15) {
            goto LABEL_1172;
          }
          break;
        case 8u:
          if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v894])] | 2) == 3) {
            goto LABEL_1954;
          }
          BOOL v905 = v47 == 95;
LABEL_1927:
          BOOL v902 = v905;
          goto LABEL_1930;
        case 9u:
          v906 = &_pcre2_ucd_caseless_sets_8[a2[2]];
          while (1)
          {
            int v907 = *v906;
            if (v47 < *v906) {
              break;
            }
            ++v906;
            if (v47 == v907)
            {
              if (v18 == 16) {
                goto LABEL_2450;
              }
LABEL_1172:
              uint64_t v20 = 0;
              goto LABEL_2451;
            }
          }
          if (v18 == 16) {
            goto LABEL_1172;
          }
          goto LABEL_2450;
        case 0xAu:
          if ((v47 - 36) <= 0x3C && ((1 << (v47 - 36)) & 0x1000000010000001) != 0) {
            goto LABEL_1954;
          }
          BOOL v902 = v47 >> 13 > 6 || (v47 - 160) >> 5 < 0x6BB;
LABEL_1930:
          BOOL v904 = v18 != 15;
          goto LABEL_1931;
        default:
          return 4294967252;
      }
      goto LABEL_2450;
    case 0x11u:
      uint64_t v145 = *(unsigned __int8 **)(v13 + 80);
      unint64_t v146 = *v15;
      if ((unint64_t)v145 < *v15)
      {
        int v147 = v145 + 1;
        *(void *)(v13 + 80) = v145 + 1;
        int v148 = *v145;
        if (v1364 && v148 >= 0xC0)
        {
          if ((v148 & 0x20) != 0)
          {
            int v563 = *v147 & 0x3F;
            if ((v148 & 0x10) != 0)
            {
              if ((v148 & 8) != 0)
              {
                int v873 = v145[2] & 0x3F;
                int v874 = v145[3] & 0x3F;
                int v875 = v145[4] & 0x3F;
                if ((v148 & 4) != 0)
                {
                  int v148 = ((v148 & 1) << 30) | (v563 << 24) | (v873 << 18) | (v874 << 12) | (v875 << 6) | v145[5] & 0x3F;
                  int v147 = v145 + 6;
                }
                else
                {
                  int v148 = ((v148 & 3) << 24) | (v563 << 18) | (v873 << 12) | (v874 << 6) | v875;
                  int v147 = v145 + 5;
                }
              }
              else
              {
                int v148 = ((v148 & 7) << 18) | (v563 << 12) | ((v145[2] & 0x3F) << 6) | v145[3] & 0x3F;
                int v147 = v145 + 4;
              }
            }
            else
            {
              int v148 = ((v148 & 0xF) << 12) | (v563 << 6) | v145[2] & 0x3F;
              int v147 = v145 + 3;
            }
            *(void *)(v13 + 80) = v147;
          }
          else
          {
            int v147 = v145 + 2;
            *(void *)(v13 + 80) = v145 + 2;
            int v148 = v145[1] & 0x3F | ((v148 & 0x1F) << 6);
          }
        }
        uint64_t v20 = 0;
        if (v148 <= 12)
        {
          if ((v148 - 11) >= 2)
          {
            if (v148 != 10) {
              goto LABEL_2451;
            }
            goto LABEL_2389;
          }
        }
        else if ((v148 - 8232) >= 2 && v148 != 133)
        {
          if (v148 != 13) {
            goto LABEL_2451;
          }
          if ((unint64_t)v147 >= v146)
          {
            unsigned int v169 = (unsigned __int16)*v16;
            if (*v16 && (unint64_t)v147 > *v14)
            {
LABEL_610:
              _DWORD *v1360 = 1;
              if (v169 > 1) {
                return 4294967294;
              }
            }
          }
          else if (*v147 == 10)
          {
            int v144 = v147 + 1;
LABEL_213:
            *(void *)(v13 + 80) = v144;
          }
          goto LABEL_2389;
        }
        if (*(_WORD *)(v7 + 130) == 2) {
          goto LABEL_1172;
        }
        goto LABEL_2389;
      }
      unsigned int v108 = (unsigned __int16)*v16;
      if (!*v16 || (unint64_t)v145 <= *v14) {
        goto LABEL_1172;
      }
      goto LABEL_1171;
    case 0x12u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      int v149 = *v131;
      if (v1364 && v149 >= 0xC0)
      {
        if ((v149 & 0x20) != 0)
        {
          int v564 = v131[1] & 0x3F;
          if ((v149 & 0x10) != 0)
          {
            if ((v149 & 8) != 0)
            {
              int v876 = v131[2] & 0x3F;
              int v877 = v131[3] & 0x3F;
              int v878 = v131[4] & 0x3F;
              if ((v149 & 4) != 0)
              {
                int v149 = ((v149 & 1) << 30) | (v564 << 24) | (v876 << 18) | (v877 << 12) | (v878 << 6) | v131[5] & 0x3F;
                v565 = v131 + 6;
              }
              else
              {
                int v149 = ((v149 & 3) << 24) | (v564 << 18) | (v876 << 12) | (v877 << 6) | v878;
                v565 = v131 + 5;
              }
            }
            else
            {
              int v149 = ((v149 & 7) << 18) | (v564 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v565 = v131 + 4;
            }
          }
          else
          {
            int v149 = ((v149 & 0xF) << 12) | (v564 << 6) | v131[2] & 0x3F;
            v565 = v131 + 3;
          }
          *(void *)(v13 + 80) = v565;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          int v149 = v131[1] & 0x3F | ((v149 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      if (v149 < 0x2000)
      {
        if (v149 <= 159)
        {
          if (v149 == 9 || v149 == 32) {
            goto LABEL_2451;
          }
        }
        else if (v149 == 160 || v149 == 5760 || v149 == 6158)
        {
          goto LABEL_2451;
        }
      }
      else if (v149 > 8238)
      {
        BOOL v1026 = v149 == 8239 || v149 == 8287;
        if (v1026 || v149 == 12288) {
          goto LABEL_2451;
        }
      }
      else if ((v149 - 0x2000) < 0xB)
      {
        goto LABEL_2451;
      }
      goto LABEL_2389;
    case 0x13u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      int v150 = *v131;
      if (v1364 && v150 >= 0xC0)
      {
        if ((v150 & 0x20) != 0)
        {
          int v566 = v131[1] & 0x3F;
          if ((v150 & 0x10) != 0)
          {
            if ((v150 & 8) != 0)
            {
              int v879 = v131[2] & 0x3F;
              int v880 = v131[3] & 0x3F;
              int v881 = v131[4] & 0x3F;
              if ((v150 & 4) != 0)
              {
                int v150 = ((v150 & 1) << 30) | (v566 << 24) | (v879 << 18) | (v880 << 12) | (v881 << 6) | v131[5] & 0x3F;
                v567 = v131 + 6;
              }
              else
              {
                int v150 = ((v150 & 3) << 24) | (v566 << 18) | (v879 << 12) | (v880 << 6) | v881;
                v567 = v131 + 5;
              }
            }
            else
            {
              int v150 = ((v150 & 7) << 18) | (v566 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v567 = v131 + 4;
            }
          }
          else
          {
            int v150 = ((v150 & 0xF) << 12) | (v566 << 6) | v131[2] & 0x3F;
            v567 = v131 + 3;
          }
          *(void *)(v13 + 80) = v567;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          int v150 = v131[1] & 0x3F | ((v150 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      if (v150 < 0x2000)
      {
        if (v150 <= 159)
        {
          if (v150 != 9 && v150 != 32) {
            goto LABEL_2451;
          }
          goto LABEL_2389;
        }
        BOOL v1027 = v150 == 160 || v150 == 5760;
        int v1028 = 6158;
      }
      else
      {
        if (v150 <= 8238)
        {
          if ((v150 - 0x2000) >= 0xB) {
            goto LABEL_2451;
          }
          goto LABEL_2389;
        }
        if (v150 == 8239)
        {
LABEL_2389:
          uint64_t v244 = (uint64_t)(a2 + 1);
          goto LABEL_2444;
        }
        BOOL v1027 = v150 == 12288;
        int v1028 = 8287;
      }
      if (!v1027 && v150 != v1028) {
        goto LABEL_2451;
      }
      goto LABEL_2389;
    case 0x14u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v151 = *v131;
      if (v1364 && v151 >= 0xC0)
      {
        if ((v151 & 0x20) != 0)
        {
          int v568 = v131[1] & 0x3F;
          if ((v151 & 0x10) != 0)
          {
            if ((v151 & 8) != 0)
            {
              int v882 = v131[2] & 0x3F;
              int v883 = v131[3] & 0x3F;
              int v884 = v131[4] & 0x3F;
              if ((v151 & 4) != 0)
              {
                unsigned int v151 = ((v151 & 1) << 30) | (v568 << 24) | (v882 << 18) | (v883 << 12) | (v884 << 6) | v131[5] & 0x3F;
                v569 = v131 + 6;
              }
              else
              {
                unsigned int v151 = ((v151 & 3) << 24) | (v568 << 18) | (v882 << 12) | (v883 << 6) | v884;
                v569 = v131 + 5;
              }
            }
            else
            {
              unsigned int v151 = ((v151 & 7) << 18) | (v568 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v569 = v131 + 4;
            }
          }
          else
          {
            unsigned int v151 = ((v151 & 0xF) << 12) | (v568 << 6) | v131[2] & 0x3F;
            v569 = v131 + 3;
          }
          *(void *)(v13 + 80) = v569;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          unsigned int v151 = v131[1] & 0x3F | ((v151 & 0x1F) << 6);
        }
      }
      uint64_t v20 = 0;
      BOOL v1030 = v151 - 10 >= 4 && v151 - 8232 >= 2;
      if (v1030 && v151 != 133) {
        goto LABEL_2389;
      }
      goto LABEL_2451;
    case 0x15u:
      uint64_t v131 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v131 >= *v15) {
        goto LABEL_1169;
      }
      *(void *)(v13 + 80) = v131 + 1;
      unsigned int v152 = *v131;
      if (v1364 && v152 >= 0xC0)
      {
        if ((v152 & 0x20) != 0)
        {
          int v570 = v131[1] & 0x3F;
          if ((v152 & 0x10) != 0)
          {
            if ((v152 & 8) != 0)
            {
              int v885 = v131[2] & 0x3F;
              int v886 = v131[3] & 0x3F;
              int v887 = v131[4] & 0x3F;
              if ((v152 & 4) != 0)
              {
                unsigned int v152 = ((v152 & 1) << 30) | (v570 << 24) | (v885 << 18) | (v886 << 12) | (v887 << 6) | v131[5] & 0x3F;
                v571 = v131 + 6;
              }
              else
              {
                unsigned int v152 = ((v152 & 3) << 24) | (v570 << 18) | (v885 << 12) | (v886 << 6) | v887;
                v571 = v131 + 5;
              }
            }
            else
            {
              unsigned int v152 = ((v152 & 7) << 18) | (v570 << 12) | ((v131[2] & 0x3F) << 6) | v131[3] & 0x3F;
              v571 = v131 + 4;
            }
          }
          else
          {
            unsigned int v152 = ((v152 & 0xF) << 12) | (v570 << 6) | v131[2] & 0x3F;
            v571 = v131 + 3;
          }
          *(void *)(v13 + 80) = v571;
        }
        else
        {
          *(void *)(v13 + 80) = v131 + 2;
          unsigned int v152 = v131[1] & 0x3F | ((v152 & 0x1F) << 6);
        }
      }
      BOOL v1031 = v152 - 10 >= 4 && v152 - 8232 >= 2;
      if (!v1031 || v152 == 133) {
        goto LABEL_2389;
      }
      goto LABEL_1172;
    case 0x16u:
      int v153 = v16;
      int v154 = (unsigned __int8 *)a6;
      int v155 = *(unsigned __int8 **)(v13 + 80);
      unint64_t v156 = *v15;
      if ((unint64_t)v155 < *v15)
      {
        BOOL v157 = v155 + 1;
        *(void *)(v13 + 80) = v155 + 1;
        unsigned int v158 = *v155;
        if (v1364 && v158 >= 0xC0)
        {
          if ((v158 & 0x20) != 0)
          {
            int v572 = *v157 & 0x3F;
            if ((v158 & 0x10) != 0)
            {
              if ((v158 & 8) != 0)
              {
                int v888 = v155[2] & 0x3F;
                int v889 = v155[3] & 0x3F;
                int v890 = v155[4] & 0x3F;
                unint64_t v159 = v15;
                if ((v158 & 4) != 0)
                {
                  unsigned int v158 = ((v158 & 1) << 30) | (v572 << 24) | (v888 << 18) | (v889 << 12) | (v890 << 6) | v155[5] & 0x3F;
                  BOOL v157 = v155 + 6;
                }
                else
                {
                  unsigned int v158 = ((v158 & 3) << 24) | (v572 << 18) | (v888 << 12) | (v889 << 6) | v890;
                  BOOL v157 = v155 + 5;
                }
              }
              else
              {
                unint64_t v159 = v15;
                unsigned int v158 = ((v158 & 7) << 18) | (v572 << 12) | ((v155[2] & 0x3F) << 6) | v155[3] & 0x3F;
                BOOL v157 = v155 + 4;
              }
            }
            else
            {
              unint64_t v159 = v15;
              unsigned int v158 = ((v158 & 0xF) << 12) | (v572 << 6) | v155[2] & 0x3F;
              BOOL v157 = v155 + 3;
            }
            *(void *)(v13 + 80) = v157;
          }
          else
          {
            unint64_t v159 = v15;
            BOOL v157 = v155 + 2;
            *(void *)(v13 + 80) = v155 + 2;
            unsigned int v158 = v155[1] & 0x3F | ((v158 & 0x1F) << 6);
          }
        }
        else
        {
          unint64_t v159 = v15;
        }
        v1032 = _pcre2_extuni_8(v158, v157, *(void *)(v7 + 152), v156, v1361, 0);
        *(void *)(v13 + 80) = v1032;
        unsigned int v1033 = *(unsigned __int16 *)(v7 + 128);
        unsigned int v15 = v159;
        if (*(_WORD *)(v7 + 128))
        {
          if ((unint64_t)v1032 >= *v159 && (unint64_t)v1032 > *v14)
          {
            _DWORD *v1360 = 1;
            if (v1033 > 1) {
              return 4294967294;
            }
          }
        }
        ++*(void *)v13;
        a6 = (uint64_t)v154;
        unsigned int v16 = v153;
        goto LABEL_2445;
      }
      unsigned int v328 = (unsigned __int16)*v16;
      if (!*v16)
      {
        uint64_t v20 = 0;
        goto LABEL_2451;
      }
      if ((unint64_t)v155 <= *v14) {
        goto LABEL_1172;
      }
LABEL_2902:
      _DWORD *v1360 = 1;
      if (v328 > 1) {
        return 4294967294;
      }
      goto LABEL_3189;
    case 0x17u:
      goto LABEL_246;
    case 0x18u:
      goto LABEL_255;
    case 0x19u:
      if ((*(unsigned char *)(v7 + 228) & 2) != 0) {
        goto LABEL_2925;
      }
      if ((*(unsigned char *)(v7 + 232) & 0x10) == 0)
      {
LABEL_246:
        uint64_t v160 = *(unsigned __int8 **)(v13 + 80);
        uint64_t v161 = *v15;
        if ((unint64_t)v160 < *v15)
        {
          int v162 = *(_DWORD *)(v7 + 244);
          if (v162)
          {
            BOOL v163 = (unsigned __int8 *)a6;
            char v164 = v16;
            int is_newline_8 = _pcre2_is_newline_8(v160, v162, v161, v1356, v1361);
            unsigned int v16 = v164;
            a6 = (uint64_t)v163;
            if (!is_newline_8) {
              goto LABEL_1080;
            }
            uint64_t v160 = *(unsigned __int8 **)(v13 + 80);
            uint64_t v161 = *v15;
            uint64_t v166 = *v1356;
          }
          else
          {
            uint64_t v166 = *v1356;
            if ((unint64_t)v160 > v161 - v166
              || *v160 != *(unsigned __int8 *)(v7 + 252)
              || v166 != 1 && v160[1] != *(unsigned __int8 *)(v7 + 253))
            {
              goto LABEL_1080;
            }
          }
          if (v160 != (unsigned __int8 *)(v161 - v166)) {
            goto LABEL_1080;
          }
        }
        unsigned int v167 = (unsigned __int16)*v16;
        if (*v16)
        {
          if ((unint64_t)v160 > *v14)
          {
            _DWORD *v1360 = 1;
            if (v167 > 1) {
              return 4294967294;
            }
          }
        }
        goto LABEL_1168;
      }
LABEL_255:
      uint64_t v168 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v168 < *v15) {
        goto LABEL_2925;
      }
      unsigned int v169 = (unsigned __int16)*v16;
      if (*v16 && (unint64_t)v168 > *v14) {
        goto LABEL_610;
      }
      goto LABEL_2389;
    case 0x1Au:
      unsigned int v170 = *(unsigned __int8 **)(v13 + 80);
      uint64_t v171 = *v15;
      if ((unint64_t)v170 < *v15)
      {
        int v172 = *(_DWORD *)(v7 + 244);
        if (v172)
        {
          int v173 = (unsigned __int8 *)a6;
          int v174 = v16;
          int v175 = _pcre2_is_newline_8(v170, v172, v171, v1356, v1361);
          unsigned int v16 = v174;
          a6 = (uint64_t)v173;
          if (!v175) {
            goto LABEL_1080;
          }
          a2 = *(unsigned __int8 **)v13;
        }
        else
        {
          uint64_t v537 = *v1356;
          if ((unint64_t)v170 > v171 - v537
            || *v170 != *(unsigned __int8 *)(v7 + 252)
            || v537 != 1 && v170[1] != *(unsigned __int8 *)(v7 + 253))
          {
LABEL_1080:
            unsigned int v358 = (unsigned __int16)*v16;
            if (!*v16) {
              goto LABEL_2925;
            }
            v538 = *(unsigned __int8 **)(v13 + 80);
            if ((unint64_t)(v538 + 1) < *v15
              || *(_DWORD *)(v7 + 244)
              || *v1356 != 2
              || *v538 != *(unsigned __int8 *)(v7 + 252))
            {
              goto LABEL_2925;
            }
            goto LABEL_1229;
          }
        }
        goto LABEL_2389;
      }
      if ((*(unsigned char *)(v7 + 228) & 2) != 0) {
        goto LABEL_2925;
      }
      unsigned int v169 = (unsigned __int16)*v16;
      if (*v16 && (unint64_t)v170 > *v14) {
        goto LABEL_610;
      }
      goto LABEL_2389;
    case 0x1Bu:
      if (*(void *)(v13 + 80) != *(void *)(v7 + 152) || (*(unsigned char *)(v7 + 228) & 1) != 0) {
        goto LABEL_2925;
      }
      goto LABEL_2389;
    case 0x1Cu:
      uint64_t v176 = *(unsigned __int8 **)(v13 + 80);
      unint64_t v177 = *(void *)(v7 + 152);
      if ((*(unsigned char *)(v7 + 228) & 1) != 0 && v176 == (unsigned __int8 *)v177) {
        goto LABEL_2925;
      }
      if (v176 == (unsigned __int8 *)v177) {
        goto LABEL_2389;
      }
      if (v176 == (unsigned __int8 *)*v15 && (*(unsigned char *)(v7 + 234) & 0x20) == 0) {
        goto LABEL_2925;
      }
      int v178 = *(_DWORD *)(v7 + 244);
      if (v178)
      {
        if ((unint64_t)v176 <= v177) {
          goto LABEL_2925;
        }
        unint64_t v100 = v15;
        long long v101 = v16;
        long long v102 = (unsigned __int8 *)a6;
        uint64_t v20 = _pcre2_was_newline_8(v176, v178, v177, v1356, v1361);
        if (!v20) {
          goto LABEL_132;
        }
        a2 = *(unsigned __int8 **)v13;
        a6 = (uint64_t)v102;
        unsigned int v16 = v101;
      }
      else
      {
        uint64_t v580 = *v1356;
        if ((unint64_t)v176 < v177 + v580
          || v176[-v580] != *(unsigned __int8 *)(v7 + 252)
          || v580 != 1 && v176[-v580 + 1] != *(unsigned __int8 *)(v7 + 253))
        {
          goto LABEL_2925;
        }
      }
      goto LABEL_2389;
    case 0x1Du:
      if (!v1364)
      {
        unsigned int v143 = *(unsigned __int8 **)(v13 + 80);
        if ((uint64_t)(*v15 - (void)v143) <= 0) {
          goto LABEL_1048;
        }
        int v329 = a2[1];
        *(void *)(v13 + 80) = v143 + 1;
        if (v329 != *v143) {
          goto LABEL_1172;
        }
LABEL_1017:
        uint64_t v244 = (uint64_t)(a2 + 2);
        goto LABEL_2444;
      }
      unint64_t v179 = 1;
      *(void *)(v13 + 24) = 1;
      *(void *)uint64_t v13 = a2 + 1;
      unsigned int v180 = a2[1];
      if (v180 >= 0xC0)
      {
        unint64_t v179 = 3;
        uint64_t v181 = 4;
        uint64_t v182 = 5;
        if ((v180 & 4) != 0) {
          uint64_t v182 = 6;
        }
        if ((v180 & 8) != 0) {
          uint64_t v181 = v182;
        }
        if ((v180 & 0x10) != 0) {
          unint64_t v179 = v181;
        }
        if ((v180 & 0x20) == 0) {
          unint64_t v179 = 2;
        }
        *(void *)(v13 + 24) = v179;
      }
      unsigned int v143 = *(unsigned __int8 **)(v13 + 80);
      if (v179 <= *v15 - (unint64_t)v143)
      {
        v509 = v143 + 1;
        v510 = a2 + 2;
        v511 = (unsigned __int8 *)(v179 - 1);
        do
        {
          *(void *)uint64_t v13 = v510;
          int v512 = *(v510 - 1);
          *(void *)(v13 + 80) = v509;
          if (v512 != *(v509 - 1)) {
            goto LABEL_1172;
          }
          *(void *)(v13 + 24) = v511;
          ++v509;
          ++v510;
          --v511;
        }
        while (v511 != (unsigned __int8 *)-1);
        goto LABEL_2445;
      }
      uint64_t v20 = 0;
      if ((unint64_t)v143 < *v15) {
        goto LABEL_2451;
      }
      unsigned int v183 = (unsigned __int16)*v16;
      if (!*v16) {
        goto LABEL_2451;
      }
LABEL_1049:
      if ((unint64_t)v143 <= *v14) {
        goto LABEL_1172;
      }
      _DWORD *v1360 = 1;
      if (v183 <= 1) {
        goto LABEL_1172;
      }
      return 4294967294;
    case 0x1Eu:
      unsigned int v143 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v143 >= *v15) {
        goto LABEL_1048;
      }
      if (v1364)
      {
        uint64_t v184 = 1;
        *(void *)(v13 + 24) = 1;
        *(void *)uint64_t v13 = a2 + 1;
        unsigned int v185 = a2[1];
        if (v185 >= 0xC0)
        {
          int v186 = a2[2] & 0x3F;
          if ((v185 & 0x20) != 0)
          {
            if ((v185 & 0x10) != 0)
            {
              if ((v185 & 8) != 0)
              {
                int v1015 = a2[3] & 0x3F;
                int v1016 = a2[4] & 0x3F;
                int v1017 = a2[5] & 0x3F;
                if ((v185 & 4) != 0)
                {
                  unsigned int v185 = ((v185 & 1) << 30) | (v186 << 24) | (v1015 << 18) | (v1016 << 12) | (v1017 << 6) | a2[6] & 0x3F;
                  uint64_t v184 = 6;
                }
                else
                {
                  unsigned int v185 = ((v185 & 3) << 24) | (v186 << 18) | (v1015 << 12) | (v1016 << 6) | v1017;
                  uint64_t v184 = 5;
                }
              }
              else
              {
                unsigned int v185 = ((v185 & 7) << 18) | (v186 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                uint64_t v184 = 4;
              }
            }
            else
            {
              unsigned int v185 = ((v185 & 0xF) << 12) | (v186 << 6) | a2[3] & 0x3F;
              uint64_t v184 = 3;
            }
          }
          else
          {
            uint64_t v184 = 2;
            unsigned int v185 = a2[2] & 0x3F | ((v185 & 0x1F) << 6);
          }
          *(void *)(v13 + 24) = v184;
        }
        if (v185 > 0x7F)
        {
          *(void *)(v13 + 80) = v143 + 1;
          unsigned int v1037 = *v143;
          if (v1037 >= 0xC0)
          {
            if ((v1037 & 0x20) != 0)
            {
              int v1038 = v143[1] & 0x3F;
              if ((v1037 & 0x10) != 0)
              {
                if ((v1037 & 8) != 0)
                {
                  int v1040 = v143[2] & 0x3F;
                  int v1041 = v143[3] & 0x3F;
                  int v1042 = v143[4] & 0x3F;
                  if ((v1037 & 4) != 0)
                  {
                    unsigned int v1037 = ((v1037 & 1) << 30) | (v1038 << 24) | (v1040 << 18) | (v1041 << 12) | (v1042 << 6) | v143[5] & 0x3F;
                    v1039 = v143 + 6;
                  }
                  else
                  {
                    unsigned int v1037 = ((v1037 & 3) << 24) | (v1038 << 18) | (v1040 << 12) | (v1041 << 6) | v1042;
                    v1039 = v143 + 5;
                  }
                }
                else
                {
                  unsigned int v1037 = ((v1037 & 7) << 18) | (v1038 << 12) | ((v143[2] & 0x3F) << 6) | v143[3] & 0x3F;
                  v1039 = v143 + 4;
                }
              }
              else
              {
                unsigned int v1037 = ((v1037 & 0xF) << 12) | (v1038 << 6) | v143[2] & 0x3F;
                v1039 = v143 + 3;
              }
              *(void *)(v13 + 80) = v1039;
            }
            else
            {
              *(void *)(v13 + 80) = v143 + 2;
              unsigned int v1037 = v143[1] & 0x3F | ((v1037 & 0x1F) << 6);
            }
          }
          *(void *)uint64_t v13 = &a2[v184 + 1];
          if (v1037 != v185
            && v1037 != _pcre2_ucd_records_8[2
                                           * _pcre2_ucd_stage2_8[v185 & 0x7F | (_pcre2_ucd_stage1_8[v185 >> 7] << 7)]
                                           + 1]
                      + v185)
          {
            goto LABEL_1172;
          }
        }
        else
        {
          if (*(unsigned __int8 *)(*(void *)(v7 + 88) + v185) != *(unsigned __int8 *)(*(void *)(v7 + 88) + *v143)) {
            goto LABEL_1172;
          }
          *(void *)uint64_t v13 = a2 + 2;
          *(void *)(v13 + 80) = v143 + 1;
        }
        goto LABEL_2445;
      }
      if (*(unsigned __int8 *)(*(void *)(v7 + 88) + a2[1]) != *(unsigned __int8 *)(*(void *)(v7 + 88) + *v143)) {
        goto LABEL_1172;
      }
      *(void *)(v13 + 80) = v143 + 1;
      goto LABEL_1017;
    case 0x1Fu:
    case 0x20u:
      uint64_t v46 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v46 < *v15)
      {
        if (v1364)
        {
          *(void *)uint64_t v13 = a2 + 2;
          unsigned int v48 = a2[1];
          if (v48 >= 0xC0)
          {
            if ((v48 & 0x20) != 0)
            {
              int v549 = a2[2] & 0x3F;
              if ((v48 & 0x10) != 0)
              {
                if ((v48 & 8) != 0)
                {
                  int v852 = a2[3] & 0x3F;
                  int v853 = a2[4] & 0x3F;
                  int v854 = a2[5] & 0x3F;
                  if ((v48 & 4) != 0)
                  {
                    unsigned int v48 = ((v48 & 1) << 30) | (v549 << 24) | (v852 << 18) | (v853 << 12) | (v854 << 6) | a2[6] & 0x3F;
                    v550 = a2 + 7;
                  }
                  else
                  {
                    unsigned int v48 = ((v48 & 3) << 24) | (v549 << 18) | (v852 << 12) | (v853 << 6) | v854;
                    v550 = a2 + 6;
                  }
                }
                else
                {
                  unsigned int v48 = ((v48 & 7) << 18) | (v549 << 12) | ((a2[3] & 0x3F) << 6) | a2[4] & 0x3F;
                  v550 = a2 + 5;
                }
              }
              else
              {
                unsigned int v48 = ((v48 & 0xF) << 12) | (v549 << 6) | a2[3] & 0x3F;
                v550 = a2 + 4;
              }
              *(void *)uint64_t v13 = v550;
            }
            else
            {
              *(void *)uint64_t v13 = a2 + 3;
              unsigned int v48 = a2[2] & 0x3F | ((v48 & 0x1F) << 6);
            }
          }
          *(void *)(v13 + 80) = v46 + 1;
          unsigned int v1018 = *v46;
          if (v1018 >= 0xC0)
          {
            if ((v1018 & 0x20) != 0)
            {
              int v1019 = v46[1] & 0x3F;
              if ((v1018 & 0x10) != 0)
              {
                if ((v1018 & 8) != 0)
                {
                  int v1021 = v46[2] & 0x3F;
                  int v1022 = v46[3] & 0x3F;
                  int v1023 = v46[4] & 0x3F;
                  if ((v1018 & 4) != 0)
                  {
                    unsigned int v1018 = ((v1018 & 1) << 30) | (v1019 << 24) | (v1021 << 18) | (v1022 << 12) | (v1023 << 6) | v46[5] & 0x3F;
                    v1020 = v46 + 6;
                  }
                  else
                  {
                    unsigned int v1018 = ((v1018 & 3) << 24) | (v1019 << 18) | (v1021 << 12) | (v1022 << 6) | v1023;
                    v1020 = v46 + 5;
                  }
                }
                else
                {
                  unsigned int v1018 = ((v1018 & 7) << 18) | (v1019 << 12) | ((v46[2] & 0x3F) << 6) | v46[3] & 0x3F;
                  v1020 = v46 + 4;
                }
              }
              else
              {
                unsigned int v1018 = ((v1018 & 0xF) << 12) | (v1019 << 6) | v46[2] & 0x3F;
                v1020 = v46 + 3;
              }
              *(void *)(v13 + 80) = v1020;
            }
            else
            {
              *(void *)(v13 + 80) = v46 + 2;
              unsigned int v1018 = v46[1] & 0x3F | ((v1018 & 0x1F) << 6);
            }
          }
          if (v48 == v1018) {
            goto LABEL_1172;
          }
          if (v18 == 32)
          {
            int v1034 = v48 < 0x80
                  ? *(unsigned __int8 *)(*(void *)(v7 + 96) + v48)
                  : _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v48 & 0x7F | (_pcre2_ucd_stage1_8[v48 >> 7] << 7)] + 1]
                  + v48;
            if (v1034 == v1018) {
              goto LABEL_1172;
            }
          }
          goto LABEL_2445;
        }
        uint64_t v326 = a2[1];
        *(void *)(v13 + 80) = v46 + 1;
        int v327 = *v46;
        if (v326 == v327 || v18 == 32 && *(unsigned __int8 *)(*(void *)(v7 + 96) + v326) == v327) {
          goto LABEL_1172;
        }
        goto LABEL_1017;
      }
LABEL_138:
      unsigned int v108 = (unsigned __int16)*v16;
      if (!*v16 || (unint64_t)v46 <= *v14) {
        goto LABEL_1172;
      }
      goto LABEL_1171;
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      int v21 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      int v22 = *a2;
      if (v18 >= 0x2E) {
        int v23 = -46;
      }
      else {
        int v23 = -33;
      }
      unsigned int v24 = v23 + v22;
      unsigned int v25 = rep_min[v23 + v22];
      *(_DWORD *)(v13 + 56) = v25;
      unsigned int v26 = rep_max[v24];
      *(_DWORD *)(v13 + 60) = v26;
      uint64_t v11 = rep_typ[v24];
      goto LABEL_52;
    case 0x27u:
    case 0x34u:
      unsigned int v25 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v26 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v26;
      int v21 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      uint64_t v11 = 1;
      goto LABEL_52;
    case 0x28u:
    case 0x35u:
      unsigned int v25 = 0;
      uint64_t v11 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v26 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v26;
      int v21 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      goto LABEL_52;
    case 0x29u:
    case 0x36u:
      unsigned int v26 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 56) = v26;
      *(_DWORD *)(v13 + 60) = v26;
      int v21 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      unsigned int v25 = v26;
      goto LABEL_52;
    case 0x2Au:
    case 0x37u:
      unsigned int v25 = 0;
      *(void *)(v13 + 56) = 0xFFFFFFFF00000000;
      int v21 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      goto LABEL_49;
    case 0x2Bu:
    case 0x38u:
      *(void *)(v13 + 56) = 0xFFFFFFFF00000001;
      int v21 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      unsigned int v25 = 1;
LABEL_49:
      unsigned int v26 = -1;
      goto LABEL_52;
    case 0x2Cu:
    case 0x39u:
      unsigned int v25 = 0;
      *(void *)(v13 + 56) = 0x100000000;
      int v21 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      unsigned int v26 = 1;
      goto LABEL_52;
    case 0x2Du:
    case 0x3Au:
      unsigned int v25 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v26 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v26;
      int v21 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      uint64_t v11 = 2;
LABEL_52:
      if (v1364)
      {
        *(void *)(v13 + 24) = 1;
        BOOL v49 = (size_t *)(v13 + 24);
        *(void *)(v13 + 16) = v21;
        unsigned int v50 = *v21;
        if (v50 >= 0xC0)
        {
          int v51 = v21[1] & 0x3F;
          if ((v50 & 0x20) != 0)
          {
            if ((v50 & 0x10) != 0)
            {
              if ((v50 & 8) != 0)
              {
                int v247 = v21[2] & 0x3F;
                int v248 = v21[3] & 0x3F;
                int v249 = v21[4] & 0x3F;
                if ((v50 & 4) != 0)
                {
                  unsigned int v52 = ((v50 & 1) << 30) | (v51 << 24) | (v247 << 18) | (v248 << 12) | (v249 << 6) | v21[5] & 0x3F;
                  uint64_t v53 = 6;
                }
                else
                {
                  unsigned int v52 = ((v50 & 3) << 24) | (v51 << 18) | (v247 << 12) | (v248 << 6) | v249;
                  uint64_t v53 = 5;
                }
              }
              else
              {
                unsigned int v52 = ((v50 & 7) << 18) | (v51 << 12) | ((v21[2] & 0x3F) << 6) | v21[3] & 0x3F;
                uint64_t v53 = 4;
              }
            }
            else
            {
              unsigned int v52 = ((v50 & 0xF) << 12) | (v51 << 6) | v21[2] & 0x3F;
              uint64_t v53 = 3;
            }
          }
          else
          {
            unsigned int v52 = v21[1] & 0x3F | ((v50 & 0x1F) << 6);
            uint64_t v53 = 2;
          }
          uint64_t v1350 = v7;
          *(void *)(v13 + 24) = v53;
          *(void *)uint64_t v13 = &v21[v53];
          unsigned int v1363 = v11;
          if (v18 >= 0x2E
            && (int v359 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v52 & 0x7F | (_pcre2_ucd_stage1_8[v52 >> 7] << 7)]
                                          + 1]) != 0)
          {
            uint64_t v360 = v16;
            int v361 = v15;
            int v362 = (unsigned __int8 *)a6;
            unsigned int v363 = _pcre2_ord2utf_8(v359 + v52, v13 + 74);
            a6 = (uint64_t)v362;
            *(void *)(v13 + 40) = v363;
            if (!*(_DWORD *)(v13 + 56)) {
              goto LABEL_695;
            }
          }
          else
          {
            uint64_t v360 = v16;
            int v361 = v15;
            *(void *)(v13 + 40) = 0;
            if (!v25)
            {
LABEL_695:
              unsigned int v364 = 0;
              goto LABEL_705;
            }
          }
          v1349 = (unsigned __int8 *)a6;
          int v365 = (size_t *)(v13 + 40);
          unsigned int v366 = *(unsigned __int8 **)(v13 + 80);
          unsigned int v367 = 1;
          while (1)
          {
            if ((unint64_t)v366 > *v361 - *v49
              || (int v368 = cstdlib_memcmp(v366, *(const void **)(v13 + 16), *v49), v369 = (void *)(v13 + 24), v368))
            {
              size_t v370 = *v365;
              if (!*v365) {
                break;
              }
              unsigned int v371 = *(unsigned __int8 **)(v13 + 80);
              if ((unint64_t)v371 > *v361 - v370) {
                break;
              }
              int v372 = cstdlib_memcmp(v371, (const void *)(v13 + 74), v370);
              unsigned int v369 = (void *)(v13 + 40);
              if (v372) {
                break;
              }
            }
            unsigned int v366 = (unsigned __int8 *)(*(void *)(v13 + 80) + *v369);
            *(void *)(v13 + 80) = v366;
            ++v367;
            unsigned int v364 = *(_DWORD *)(v13 + 56);
            if (v367 > v364)
            {
              a6 = (uint64_t)v1349;
LABEL_705:
              unsigned int v373 = *(_DWORD *)(v13 + 60);
              unsigned int v15 = v361;
              unsigned int v16 = v360;
              uint64_t v11 = v1363;
              if (v364 == v373)
              {
                uint64_t v7 = v1350;
                goto LABEL_2445;
              }
              long long v104 = v14;
              uint64_t v7 = v1350;
              if (!v1363)
              {
                v1351 = v16;
                unsigned int v1362 = 0;
LABEL_3317:
                LODWORD(v11) = 0;
                a2 = *(unsigned __int8 **)v13;
                char v1316 = -54;
                goto LABEL_3216;
              }
              int v375 = v16;
              uint64_t v376 = (unsigned __int8 *)a6;
              char v377 = *(unsigned __int8 **)(v13 + 80);
              *(void *)(v13 + 8) = v377;
              if (v364 < v373)
              {
                unint64_t v378 = (size_t *)(v13 + 40);
                BOOL v379 = v15;
                while (1)
                {
                  if ((unint64_t)v377 > *v15 - *v49
                    || (int v380 = cstdlib_memcmp(v377, *(const void **)(v13 + 16), *v49),
                        unsigned int v15 = v379,
                        uint64_t v381 = (void *)(v13 + 24),
                        v380))
                  {
                    size_t v382 = *v378;
                    if (!*v378) {
                      break;
                    }
                    uint64_t v383 = *(unsigned __int8 **)(v13 + 80);
                    if ((unint64_t)v383 > *v15 - v382) {
                      break;
                    }
                    int v384 = cstdlib_memcmp(v383, (const void *)(v13 + 74), v382);
                    unsigned int v15 = v379;
                    uint64_t v381 = (void *)(v13 + 40);
                    if (v384) {
                      break;
                    }
                  }
                  char v377 = (unsigned __int8 *)(*(void *)(v13 + 80) + *v381);
                  *(void *)(v13 + 80) = v377;
                  if (++v364 >= *(_DWORD *)(v13 + 60)) {
                    goto LABEL_727;
                  }
                }
                unsigned int v385 = (unsigned __int16)*v375;
                if (*v375)
                {
                  uint64_t v386 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v386 >= *v15 && (unint64_t)v386 > *v104)
                  {
                    _DWORD *v1360 = 1;
                    if (v385 > 1) {
                      return 4294967294;
                    }
                  }
                }
              }
LABEL_727:
              uint64_t v11 = v1363;
              if (v1363 == 2)
              {
                a6 = (uint64_t)v376;
                unsigned int v16 = v375;
                uint64_t v14 = v104;
              }
              else
              {
                int v387 = *(unsigned __int8 **)(v13 + 80);
                a6 = (uint64_t)v376;
                unsigned int v16 = v375;
                uint64_t v14 = v104;
LABEL_2943:
                if ((unint64_t)v387 > *(void *)(v13 + 8))
                {
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = 0;
                  a2 = *(unsigned __int8 **)v13;
                  char v1316 = -53;
                  goto LABEL_3216;
                }
              }
              goto LABEL_2445;
            }
          }
          unsigned int v16 = v360;
          unsigned int v108 = (unsigned __int16)*v360;
          if (!*v360)
          {
            uint64_t v20 = 0;
            a6 = (uint64_t)v1349;
            uint64_t v7 = v1350;
            unsigned int v15 = v361;
            uint64_t v11 = v1363;
            goto LABEL_2451;
          }
          uint64_t v374 = *(unsigned __int8 **)(v13 + 80);
          a6 = (uint64_t)v1349;
          uint64_t v7 = v1350;
          uint64_t v11 = v1363;
          if ((unint64_t)v374 < *v361)
          {
            uint64_t v20 = 0;
            unsigned int v15 = v361;
            goto LABEL_2451;
          }
          unsigned int v15 = v361;
          if ((unint64_t)v374 <= *v14) {
            goto LABEL_1172;
          }
          goto LABEL_1171;
        }
        a2 = v21 + 1;
        *(void *)uint64_t v13 = v21 + 1;
      }
      else
      {
        a2 = v21 + 1;
        *(void *)uint64_t v13 = v21 + 1;
        unsigned int v50 = *v21;
      }
      *(_DWORD *)(v13 + 64) = v50;
      if (v18 > 0x2D)
      {
        int v54 = *(unsigned __int8 *)(*(void *)(v7 + 96) + v50);
        *(_DWORD *)(v13 + 68) = v54;
        if (v25)
        {
          uint64_t v55 = 0;
          unint64_t v56 = *v15;
          BOOL v57 = *(unsigned __int8 **)(v13 + 80);
          do
          {
            uint64_t v58 = &v57[v55];
            if ((unint64_t)&v57[v55] >= v56) {
              goto LABEL_482;
            }
            int v59 = *v58;
            if (v50 != v59 && v54 != v59) {
              goto LABEL_1172;
            }
            *(void *)(v13 + 80) = &v57[++v55];
          }
          while ((int)v55 + 1 <= v25);
        }
        if (v26 == v25) {
          goto LABEL_2445;
        }
        if (!v11)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = 0;
LABEL_3247:
          char v1316 = 25;
          goto LABEL_3216;
        }
        BOOL v61 = *(unsigned __int8 **)(v13 + 80);
        *(void *)(v13 + 8) = v61;
        int v62 = v61;
        BOOL v474 = v26 >= v25;
        unsigned int v63 = v26 - v25;
        if (v63 != 0 && v474)
        {
          unint64_t v64 = *v15;
          int v62 = v61;
          while ((unint64_t)v62 < v64)
          {
            int v65 = *v62;
            if (v50 == v65 || v54 == v65)
            {
              *(void *)(v13 + 80) = ++v62;
              if (--v63) {
                continue;
              }
            }
            goto LABEL_621;
          }
          unsigned int v331 = (unsigned __int16)*v16;
          if (*v16)
          {
            if ((unint64_t)v62 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v331 > 1) {
                return 4294967294;
              }
            }
          }
        }
LABEL_621:
        if (v11 != 2)
        {
LABEL_2926:
          if (v62 != v61)
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = v11;
            LODWORD(v11) = 0;
            a2 = *(unsigned __int8 **)v13;
            char v1316 = 26;
            goto LABEL_3216;
          }
        }
        goto LABEL_2445;
      }
      if (v25)
      {
        uint64_t v67 = 0;
        unint64_t v68 = *v15;
        BOOL v69 = *(unsigned __int8 **)(v13 + 80);
        do
        {
          unint64_t v70 = &v69[v67];
          if ((unint64_t)&v69[v67] >= v68) {
            goto LABEL_485;
          }
          *(void *)(v13 + 80) = v70 + 1;
          if (v50 != *v70) {
            goto LABEL_1172;
          }
          ++v67;
        }
        while ((int)v67 + 1 <= v25);
      }
      if (v26 == v25) {
        goto LABEL_2445;
      }
      if (!v11)
      {
        long long v104 = v14;
        v1351 = v16;
        unsigned int v1362 = 0;
LABEL_3264:
        char v1316 = 27;
        goto LABEL_3216;
      }
      int v71 = *(unsigned __int8 **)(v13 + 80);
      *(void *)(v13 + 8) = v71;
      int v72 = v71;
      BOOL v474 = v26 >= v25;
      unsigned int v73 = v26 - v25;
      if (v73 != 0 && v474)
      {
        unint64_t v74 = *v15;
        int v72 = v71;
        while ((unint64_t)v72 < v74)
        {
          if (v50 == *v72)
          {
            *(void *)(v13 + 80) = ++v72;
            if (--v73) {
              continue;
            }
          }
          goto LABEL_626;
        }
        unsigned int v332 = (unsigned __int16)*v16;
        if (*v16)
        {
          if ((unint64_t)v72 > *v14)
          {
            _DWORD *v1360 = 1;
            if (v332 > 1) {
              return 4294967294;
            }
          }
        }
      }
LABEL_626:
      if (v11 != 2)
      {
LABEL_2928:
        if (v72 > v71)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = v11;
          LODWORD(v11) = 0;
          a2 = *(unsigned __int8 **)v13;
          char v1316 = 28;
          goto LABEL_3216;
        }
      }
      goto LABEL_2445;
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
      unint64_t v27 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      if (v18 <= 0x47) {
        int v28 = -59;
      }
      else {
        int v28 = -72;
      }
      unsigned int v29 = v28 + *a2;
      unsigned int v30 = rep_min[v29];
      *(_DWORD *)(v13 + 56) = v30;
      unsigned int v31 = rep_max[v29];
      *(_DWORD *)(v13 + 60) = v31;
      uint64_t v11 = rep_typ[v29];
      goto LABEL_105;
    case 0x41u:
    case 0x4Eu:
      unsigned int v30 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v31 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v31;
      unint64_t v27 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      uint64_t v11 = 1;
      goto LABEL_105;
    case 0x42u:
    case 0x4Fu:
      unsigned int v30 = 0;
      uint64_t v11 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v31 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v31;
      unint64_t v27 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      goto LABEL_105;
    case 0x43u:
    case 0x50u:
      unsigned int v31 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 56) = v31;
      *(_DWORD *)(v13 + 60) = v31;
      unint64_t v27 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      unsigned int v30 = v31;
      goto LABEL_105;
    case 0x44u:
    case 0x51u:
      unsigned int v30 = 0;
      *(void *)(v13 + 56) = 0xFFFFFFFF00000000;
      unint64_t v27 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      goto LABEL_102;
    case 0x45u:
    case 0x52u:
      *(void *)(v13 + 56) = 0xFFFFFFFF00000001;
      unint64_t v27 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      unsigned int v30 = 1;
LABEL_102:
      unsigned int v31 = -1;
      goto LABEL_105;
    case 0x46u:
    case 0x53u:
      unsigned int v30 = 0;
      *(void *)(v13 + 56) = 0x100000000;
      unint64_t v27 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      uint64_t v11 = 2;
      unsigned int v31 = 1;
      goto LABEL_105;
    case 0x47u:
    case 0x54u:
      unsigned int v30 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      unsigned int v31 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 60) = v31;
      unint64_t v27 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      uint64_t v11 = 2;
LABEL_105:
      a2 = v27 + 1;
      *(void *)uint64_t v13 = v27 + 1;
      unsigned int v75 = *v27;
      *(_DWORD *)(v13 + 64) = v75;
      if (v1364 && v75 >= 0xC0)
      {
        if ((v75 & 0x20) != 0)
        {
          int v77 = *a2 & 0x3F;
          if ((v75 & 0x10) != 0)
          {
            if ((v75 & 8) != 0)
            {
              int v109 = v27[2] & 0x3F;
              int v110 = v27[3] & 0x3F;
              int v111 = v27[4] & 0x3F;
              if ((v75 & 4) != 0)
              {
                unsigned int v75 = ((v75 & 1) << 30) | (v77 << 24) | (v109 << 18) | (v110 << 12) | (v111 << 6) | v27[5] & 0x3F;
                *(_DWORD *)(v13 + 64) = v75;
                a2 = v27 + 6;
              }
              else
              {
                a2 = v27 + 5;
                unsigned int v75 = ((v75 & 3) << 24) | (v77 << 18) | (v109 << 12) | (v110 << 6) | v111;
                *(_DWORD *)(v13 + 64) = v75;
              }
            }
            else
            {
              unsigned int v75 = ((v75 & 7) << 18) | (v77 << 12) | ((v27[2] & 0x3F) << 6) | v27[3] & 0x3F;
              *(_DWORD *)(v13 + 64) = v75;
              a2 = v27 + 4;
            }
          }
          else
          {
            unsigned int v75 = ((v75 & 0xF) << 12) | (v77 << 6) | v27[2] & 0x3F;
            *(_DWORD *)(v13 + 64) = v75;
            a2 = v27 + 3;
          }
          *(void *)uint64_t v13 = a2;
        }
        else
        {
          a2 = v27 + 2;
          *(void *)uint64_t v13 = v27 + 2;
          int v76 = v27[1] & 0x3F | ((v75 & 0x1F) << 6);
          *(_DWORD *)(v13 + 64) = v76;
          unsigned int v75 = v76;
        }
      }
      if (v18 < 0x48)
      {
        if (v1364)
        {
          if (v30)
          {
            unint64_t v251 = *v15;
            BOOL v252 = *(unsigned __int8 **)(v13 + 80);
            int v253 = 1;
            while ((unint64_t)v252 < v251)
            {
              *(void *)(v13 + 80) = v252 + 1;
              unsigned int v254 = *v252;
              if (v254 < 0xC0)
              {
                ++v252;
              }
              else if ((v254 & 0x20) != 0)
              {
                int v256 = v252[1] & 0x3F;
                if ((v254 & 0x10) != 0)
                {
                  if ((v254 & 8) != 0)
                  {
                    int v257 = v252[2] & 0x3F;
                    int v258 = v252[3] & 0x3F;
                    int v259 = v252[4] & 0x3F;
                    if ((v254 & 4) != 0)
                    {
                      unsigned int v254 = ((v254 & 1) << 30) | (v256 << 24) | (v257 << 18) | (v258 << 12) | (v259 << 6) | v252[5] & 0x3F;
                      v252 += 6;
                    }
                    else
                    {
                      unsigned int v254 = ((v254 & 3) << 24) | (v256 << 18) | (v257 << 12) | (v258 << 6) | v259;
                      v252 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v254 = ((v254 & 7) << 18) | (v256 << 12) | ((v252[2] & 0x3F) << 6) | v252[3] & 0x3F;
                    v252 += 4;
                  }
                }
                else
                {
                  unsigned int v254 = ((v254 & 0xF) << 12) | (v256 << 6) | v252[2] & 0x3F;
                  v252 += 3;
                }
                *(void *)(v13 + 80) = v252;
              }
              else
              {
                *(void *)(v13 + 80) = v252 + 2;
                int v255 = v252[1] & 0x3F | ((v254 & 0x1F) << 6);
                v252 += 2;
                unsigned int v254 = v255;
              }
              if (v75 == v254) {
                goto LABEL_1172;
              }
              if (++v253 > v30) {
                goto LABEL_461;
              }
            }
            unsigned int v108 = (unsigned __int16)*v16;
            if (!*v16 || (unint64_t)v252 <= *v14) {
              goto LABEL_1172;
            }
            goto LABEL_1171;
          }
        }
        else if (v30)
        {
          uint64_t v265 = 0;
          unint64_t v266 = *v15;
          unsigned int v267 = *(unsigned __int8 **)(v13 + 80);
          while (1)
          {
            unint64_t v70 = &v267[v265];
            if ((unint64_t)&v267[v265] >= v266) {
              break;
            }
            *(void *)(v13 + 80) = v70 + 1;
            if (v75 == *v70) {
              goto LABEL_1172;
            }
            if ((int)++v265 + 1 > v30) {
              goto LABEL_461;
            }
          }
LABEL_485:
          unsigned int v108 = (unsigned __int16)*v16;
          if (!*v16 || (unint64_t)v70 <= *v14) {
            goto LABEL_1172;
          }
          goto LABEL_1171;
        }
LABEL_461:
        if (v31 == v30) {
          goto LABEL_2445;
        }
        if (!v11)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = 0;
          if (v1364)
          {
LABEL_3270:
            char v1316 = -50;
          }
          else
          {
LABEL_3265:
            LODWORD(v11) = 0;
            char v1316 = 31;
          }
          goto LABEL_3216;
        }
        int v268 = *(unsigned __int8 **)(v13 + 80);
        *(void *)(v13 + 8) = v268;
        if (v1364)
        {
          uint64_t v269 = v268;
          BOOL v474 = v31 >= v30;
          unsigned int v270 = v31 - v30;
          if (v270 != 0 && v474)
          {
            unint64_t v271 = *v15;
            uint64_t v269 = v268;
            while ((unint64_t)v269 < v271)
            {
              unsigned int v272 = *v269;
              if (v272 < 0xC0)
              {
                uint64_t v274 = 1;
              }
              else
              {
                int v273 = v269[1] & 0x3F;
                if ((v272 & 0x20) != 0)
                {
                  if ((v272 & 0x10) != 0)
                  {
                    if ((v272 & 8) != 0)
                    {
                      int v275 = v269[2] & 0x3F;
                      int v276 = v269[3] & 0x3F;
                      int v277 = v269[4] & 0x3F;
                      if ((v272 & 4) != 0)
                      {
                        unsigned int v272 = ((v272 & 1) << 30) | (v273 << 24) | (v275 << 18) | (v276 << 12) | (v277 << 6) | v269[5] & 0x3F;
                        uint64_t v274 = 6;
                      }
                      else
                      {
                        unsigned int v272 = ((v272 & 3) << 24) | (v273 << 18) | (v275 << 12) | (v276 << 6) | v277;
                        uint64_t v274 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v272 = ((v272 & 7) << 18) | (v273 << 12) | ((v269[2] & 0x3F) << 6) | v269[3] & 0x3F;
                      uint64_t v274 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v272 = ((v272 & 0xF) << 12) | (v273 << 6) | v269[2] & 0x3F;
                    uint64_t v274 = 3;
                  }
                }
                else
                {
                  uint64_t v274 = 2;
                  unsigned int v272 = v269[1] & 0x3F | ((v272 & 0x1F) << 6);
                }
              }
              if (v75 != v272)
              {
                v269 += v274;
                *(void *)(v13 + 80) = v269;
                if (--v270) {
                  continue;
                }
              }
              goto LABEL_979;
            }
            unsigned int v499 = (unsigned __int16)*v16;
            if (*v16)
            {
              if ((unint64_t)v269 > *v14)
              {
                _DWORD *v1360 = 1;
                if (v499 > 1) {
                  return 4294967294;
                }
              }
            }
          }
LABEL_979:
          if (v11 != 2)
          {
LABEL_2951:
            if (v269 > v268)
            {
              long long v104 = v14;
              v1351 = v16;
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -49;
              goto LABEL_3216;
            }
          }
          goto LABEL_2445;
        }
        char v299 = v268;
        BOOL v474 = v31 >= v30;
        unsigned int v300 = v31 - v30;
        if (v300 != 0 && v474)
        {
          unint64_t v301 = *v15;
          char v299 = v268;
          while ((unint64_t)v299 < v301)
          {
            if (v75 != *v299)
            {
              *(void *)(v13 + 80) = ++v299;
              if (--v300) {
                continue;
              }
            }
            goto LABEL_989;
          }
          unsigned int v501 = (unsigned __int16)*v16;
          if (*v16)
          {
            if ((unint64_t)v299 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v501 > 1) {
                return 4294967294;
              }
            }
          }
        }
LABEL_989:
        if (v11 != 2)
        {
LABEL_2932:
          if (v299 != v268)
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = v11;
            LODWORD(v11) = 0;
            a2 = *(unsigned __int8 **)v13;
            char v1316 = 32;
            goto LABEL_3216;
          }
        }
        goto LABEL_2445;
      }
      if (v1364)
      {
        if (v75 <= 0x7F) {
          unsigned int v250 = *(unsigned __int8 *)(*(void *)(v7 + 96) + v75);
        }
        else {
          unsigned int v250 = _pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v75 & 0x7F | (_pcre2_ucd_stage1_8[v75 >> 7] << 7)] + 1]
        }
               + v75;
        *(_DWORD *)(v13 + 68) = v250;
        if (v30)
        {
          unint64_t v278 = *v15;
          char v279 = *(unsigned __int8 **)(v13 + 80);
          int v280 = 1;
          while ((unint64_t)v279 < v278)
          {
            *(void *)(v13 + 80) = v279 + 1;
            unsigned int v281 = *v279;
            if (v281 < 0xC0)
            {
              ++v279;
            }
            else if ((v281 & 0x20) != 0)
            {
              int v283 = v279[1] & 0x3F;
              if ((v281 & 0x10) != 0)
              {
                if ((v281 & 8) != 0)
                {
                  int v284 = v279[2] & 0x3F;
                  int v285 = v279[3] & 0x3F;
                  int v286 = v279[4] & 0x3F;
                  if ((v281 & 4) != 0)
                  {
                    unsigned int v281 = ((v281 & 1) << 30) | (v283 << 24) | (v284 << 18) | (v285 << 12) | (v286 << 6) | v279[5] & 0x3F;
                    v279 += 6;
                  }
                  else
                  {
                    unsigned int v281 = ((v281 & 3) << 24) | (v283 << 18) | (v284 << 12) | (v285 << 6) | v286;
                    v279 += 5;
                  }
                }
                else
                {
                  unsigned int v281 = ((v281 & 7) << 18) | (v283 << 12) | ((v279[2] & 0x3F) << 6) | v279[3] & 0x3F;
                  v279 += 4;
                }
              }
              else
              {
                unsigned int v281 = ((v281 & 0xF) << 12) | (v283 << 6) | v279[2] & 0x3F;
                v279 += 3;
              }
              *(void *)(v13 + 80) = v279;
            }
            else
            {
              *(void *)(v13 + 80) = v279 + 2;
              int v282 = v279[1] & 0x3F | ((v281 & 0x1F) << 6);
              v279 += 2;
              unsigned int v281 = v282;
            }
            if (v75 == v281 || v250 == v281) {
              goto LABEL_1172;
            }
            if (++v280 > v30) {
              goto LABEL_509;
            }
          }
          unsigned int v108 = (unsigned __int16)*v16;
          if (!*v16 || (unint64_t)v279 <= *v14) {
            goto LABEL_1172;
          }
          goto LABEL_1171;
        }
LABEL_509:
        if (v31 == v30) {
          goto LABEL_2445;
        }
        if (!v11)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = 0;
          if (v1364)
          {
LABEL_3322:
            char v1316 = -52;
          }
          else
          {
LABEL_3321:
            LODWORD(v11) = 0;
            char v1316 = 29;
          }
          goto LABEL_3216;
        }
        unsigned int v288 = *(unsigned __int8 **)(v13 + 80);
        *(void *)(v13 + 8) = v288;
        if (v1364)
        {
          uint64_t v289 = v288;
          BOOL v474 = v31 >= v30;
          unsigned int v290 = v31 - v30;
          if (v290 != 0 && v474)
          {
            unint64_t v291 = *v15;
            uint64_t v289 = v288;
            while ((unint64_t)v289 < v291)
            {
              unsigned int v292 = *v289;
              if (v292 < 0xC0)
              {
                uint64_t v294 = 1;
              }
              else
              {
                int v293 = v289[1] & 0x3F;
                if ((v292 & 0x20) != 0)
                {
                  if ((v292 & 0x10) != 0)
                  {
                    if ((v292 & 8) != 0)
                    {
                      int v296 = v289[2] & 0x3F;
                      int v297 = v289[3] & 0x3F;
                      int v298 = v289[4] & 0x3F;
                      if ((v292 & 4) != 0)
                      {
                        unsigned int v292 = ((v292 & 1) << 30) | (v293 << 24) | (v296 << 18) | (v297 << 12) | (v298 << 6) | v289[5] & 0x3F;
                        uint64_t v294 = 6;
                      }
                      else
                      {
                        unsigned int v292 = ((v292 & 3) << 24) | (v293 << 18) | (v296 << 12) | (v297 << 6) | v298;
                        uint64_t v294 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v292 = ((v292 & 7) << 18) | (v293 << 12) | ((v289[2] & 0x3F) << 6) | v289[3] & 0x3F;
                      uint64_t v294 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v292 = ((v292 & 0xF) << 12) | (v293 << 6) | v289[2] & 0x3F;
                    uint64_t v294 = 3;
                  }
                }
                else
                {
                  uint64_t v294 = 2;
                  unsigned int v292 = v289[1] & 0x3F | ((v292 & 0x1F) << 6);
                }
              }
              if (v75 != v292 && v250 != v292)
              {
                v289 += v294;
                *(void *)(v13 + 80) = v289;
                if (--v290) {
                  continue;
                }
              }
              goto LABEL_984;
            }
            unsigned int v500 = (unsigned __int16)*v16;
            if (*v16)
            {
              if ((unint64_t)v289 > *v14)
              {
                _DWORD *v1360 = 1;
                if (v500 > 1) {
                  return 4294967294;
                }
              }
            }
          }
LABEL_984:
          if (v11 != 2)
          {
LABEL_2947:
            if (v289 > v288)
            {
              long long v104 = v14;
              v1351 = v16;
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -51;
              goto LABEL_3216;
            }
          }
          goto LABEL_2445;
        }
        uint64_t v302 = v288;
        BOOL v474 = v31 >= v30;
        unsigned int v303 = v31 - v30;
        if (v303 != 0 && v474)
        {
          unint64_t v304 = *v15;
          uint64_t v302 = v288;
          while ((unint64_t)v302 < v304)
          {
            int v305 = *v302;
            if (v75 != v305 && v250 != v305)
            {
              *(void *)(v13 + 80) = ++v302;
              if (--v303) {
                continue;
              }
            }
            goto LABEL_994;
          }
          unsigned int v502 = (unsigned __int16)*v16;
          if (*v16)
          {
            if ((unint64_t)v302 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v502 > 1) {
                return 4294967294;
              }
            }
          }
        }
LABEL_994:
        if (v11 != 2)
        {
LABEL_2930:
          if (v302 != v288)
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = v11;
            LODWORD(v11) = 0;
            a2 = *(unsigned __int8 **)v13;
            char v1316 = 30;
            goto LABEL_3216;
          }
        }
        goto LABEL_2445;
      }
      unsigned int v250 = *(unsigned __int8 *)(*(void *)(v7 + 96) + v75);
      *(_DWORD *)(v13 + 68) = v250;
      if (!v30) {
        goto LABEL_509;
      }
      uint64_t v260 = 0;
      unint64_t v261 = *v15;
      int v262 = *(unsigned __int8 **)(v13 + 80);
      while (1)
      {
        uint64_t v58 = &v262[v260];
        if ((unint64_t)&v262[v260] >= v261) {
          break;
        }
        int v263 = *v58;
        if (v75 == v263 || v250 == v263) {
          goto LABEL_1172;
        }
        *(void *)(v13 + 80) = &v262[++v260];
        if ((int)v260 + 1 > v30) {
          goto LABEL_509;
        }
      }
LABEL_482:
      unsigned int v108 = (unsigned __int16)*v16;
      if (!*v16 || (unint64_t)v58 <= *v14) {
        goto LABEL_1172;
      }
      goto LABEL_1171;
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Au:
      char v32 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      unsigned int v33 = *a2 - 85;
      unsigned int v34 = rep_min[v33];
      *(_DWORD *)(v13 + 56) = v34;
      *(_DWORD *)(v13 + 60) = rep_max[v33];
      uint64_t v11 = rep_typ[v33];
      goto LABEL_304;
    case 0x5Bu:
    case 0x5Cu:
      unsigned int v34 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
      uint64_t v11 = *a2 != 92;
      goto LABEL_296;
    case 0x5Du:
      unsigned int v34 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)(v13 + 56) = v34;
      *(_DWORD *)(v13 + 60) = v34;
LABEL_296:
      char v32 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      goto LABEL_304;
    case 0x5Eu:
      unsigned int v34 = 0;
      unint64_t v187 = 0xFFFFFFFF00000000;
      goto LABEL_301;
    case 0x5Fu:
      *(void *)(v13 + 56) = 0xFFFFFFFF00000001;
      int v188 = (unsigned int *)(v13 + 56);
      *(void *)uint64_t v13 = a2 + 2;
      int v189 = a2[1];
      *(_DWORD *)(v13 + 64) = v189;
      uint64_t v190 = (int *)(v13 + 64);
      if ((v189 - 15) <= 1)
      {
        *(void *)uint64_t v13 = a2 + 3;
        int v191 = a2[2];
        *(void *)uint64_t v13 = a2 + 4;
        uint64_t v192 = a2[3];
        *(_DWORD *)(v13 + 68) = v192;
        uint64_t v11 = 2;
        unsigned int v34 = 1;
        goto LABEL_306;
      }
      uint64_t v11 = 2;
      unsigned int v34 = 1;
      goto LABEL_345;
    case 0x60u:
      unsigned int v34 = 0;
      unint64_t v187 = 0x100000000;
LABEL_301:
      *(void *)(v13 + 56) = v187;
      char v32 = a2 + 1;
      goto LABEL_303;
    case 0x61u:
      unsigned int v34 = 0;
      *(_DWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 60) = __rev16(*(unsigned __int16 *)(a2 + 1));
      char v32 = a2 + 3;
LABEL_303:
      *(void *)uint64_t v13 = v32;
      uint64_t v11 = 2;
LABEL_304:
      *(void *)uint64_t v13 = v32 + 1;
      int v189 = *v32;
      *(_DWORD *)(v13 + 64) = v189;
      uint64_t v190 = (int *)(v13 + 64);
      if ((v189 - 15) < 2)
      {
        *(void *)uint64_t v13 = v32 + 2;
        int v191 = v32[1];
        *(void *)uint64_t v13 = v32 + 3;
        uint64_t v192 = v32[2];
        *(_DWORD *)(v13 + 68) = v192;
        if (!v34) {
          goto LABEL_1340;
        }
LABEL_306:
        int v193 = v189;
        switch(v191)
        {
          case 0:
            if (v189 == 15) {
              goto LABEL_3189;
            }
            unint64_t v388 = *v15;
            int v389 = *(unsigned __int8 **)(v13 + 80);
            unsigned int v390 = 1;
            while ((unint64_t)v389 < v388)
            {
              int v391 = v389 + 1;
              *(void *)(v13 + 80) = v389 + 1;
              if (v1364)
              {
                unsigned int v392 = *v389;
                if (v392 >= 0xC0)
                {
                  uint64_t v393 = 2;
                  uint64_t v394 = 3;
                  uint64_t v395 = 4;
                  uint64_t v396 = 5;
                  if ((v392 & 4) != 0) {
                    uint64_t v396 = 6;
                  }
                  if ((v392 & 8) != 0) {
                    uint64_t v395 = v396;
                  }
                  if ((v392 & 0x10) != 0) {
                    uint64_t v394 = v395;
                  }
                  if ((v392 & 0x20) != 0) {
                    uint64_t v393 = v394;
                  }
                  int v391 = &v389[v393];
                  *(void *)(v13 + 80) = v391;
                }
              }
              ++v390;
              int v389 = v391;
              if (v390 > v34) {
                goto LABEL_1340;
              }
            }
LABEL_1072:
            unsigned int v230 = (unsigned __int16)*v16;
            if (!*v16 || (unint64_t)v389 <= *v14) {
              goto LABEL_3189;
            }
            goto LABEL_2879;
          case 1:
            unint64_t v397 = *v15;
            int v398 = *(unsigned __int8 **)(v13 + 80);
            int v399 = 1;
            while (2)
            {
              if ((unint64_t)v398 < v397)
              {
                *(void *)(v13 + 80) = v398 + 1;
                unsigned int v400 = *v398;
                if (v1364 && v400 >= 0xC0)
                {
                  if ((v400 & 0x20) == 0)
                  {
                    *(void *)(v13 + 80) = v398 + 2;
                    int v401 = v398[1] & 0x3F | ((v400 & 0x1F) << 6);
                    v398 += 2;
                    unsigned int v400 = v401;
                    goto LABEL_762;
                  }
                  int v402 = v398[1] & 0x3F;
                  if ((v400 & 0x10) == 0)
                  {
                    unsigned int v400 = ((v400 & 0xF) << 12) | (v402 << 6) | v398[2] & 0x3F;
                    v398 += 3;
                    goto LABEL_757;
                  }
                  if ((v400 & 8) != 0)
                  {
                    int v403 = v398[2] & 0x3F;
                    int v404 = v398[3] & 0x3F;
                    int v405 = v398[4] & 0x3F;
                    if ((v400 & 4) != 0)
                    {
                      unsigned int v400 = ((v400 & 1) << 30) | (v402 << 24) | (v403 << 18) | (v404 << 12) | (v405 << 6) | v398[5] & 0x3F;
                      v398 += 6;
                    }
                    else
                    {
                      unsigned int v400 = ((v400 & 3) << 24) | (v402 << 18) | (v403 << 12) | (v404 << 6) | v405;
                      v398 += 5;
                    }
                    *(void *)(v13 + 80) = v398;
                  }
                  else
                  {
                    unsigned int v400 = ((v400 & 7) << 18) | (v402 << 12) | ((v398[2] & 0x3F) << 6) | v398[3] & 0x3F;
                    v398 += 4;
LABEL_757:
                    *(void *)(v13 + 80) = v398;
                  }
                }
                else
                {
                  ++v398;
                }
LABEL_762:
                unsigned int v406 = BYTE1(_pcre2_ucd_records_8[2
                                                * _pcre2_ucd_stage2_8[v400 & 0x7F | (_pcre2_ucd_stage1_8[v400 >> 7] << 7)]]);
                BOOL v95 = v406 > 9;
                int v407 = (1 << v406) & 0x320;
                if (v95 || v407 == 0)
                {
                  if (v189 != 15) {
                    goto LABEL_3189;
                  }
                  int v193 = 15;
                }
                else if (v193 == 15)
                {
                  goto LABEL_3189;
                }
                if (++v399 > v34) {
                  goto LABEL_1340;
                }
                continue;
              }
              break;
            }
            unsigned int v230 = (unsigned __int16)*v16;
            if (!*v16 || (unint64_t)v398 <= *v14) {
              goto LABEL_3189;
            }
            goto LABEL_2879;
          case 2:
            unsigned int v409 = (unsigned __int8 *)a6;
            unint64_t v410 = *v15;
            unsigned int v411 = *(unsigned __int8 **)(v13 + 80);
            int v412 = 1;
            while ((unint64_t)v411 < v410)
            {
              *(void *)(v13 + 80) = v411 + 1;
              unsigned int v413 = *v411;
              if (v1364 && v413 >= 0xC0)
              {
                if ((v413 & 0x20) != 0)
                {
                  int v415 = v411[1] & 0x3F;
                  if ((v413 & 0x10) != 0)
                  {
                    if ((v413 & 8) != 0)
                    {
                      int v416 = v411[2] & 0x3F;
                      int v417 = v411[3] & 0x3F;
                      int v418 = v411[4] & 0x3F;
                      if ((v413 & 4) != 0)
                      {
                        unsigned int v413 = ((v413 & 1) << 30) | (v415 << 24) | (v416 << 18) | (v417 << 12) | (v418 << 6) | v411[5] & 0x3F;
                        v411 += 6;
                      }
                      else
                      {
                        unsigned int v413 = ((v413 & 3) << 24) | (v415 << 18) | (v416 << 12) | (v417 << 6) | v418;
                        v411 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v413 = ((v413 & 7) << 18) | (v415 << 12) | ((v411[2] & 0x3F) << 6) | v411[3] & 0x3F;
                      v411 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v413 = ((v413 & 0xF) << 12) | (v415 << 6) | v411[2] & 0x3F;
                    v411 += 3;
                  }
                  *(void *)(v13 + 80) = v411;
                }
                else
                {
                  *(void *)(v13 + 80) = v411 + 2;
                  int v414 = v411[1] & 0x3F | ((v413 & 0x1F) << 6);
                  v411 += 2;
                  unsigned int v413 = v414;
                }
              }
              else
              {
                ++v411;
              }
              if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                  * _pcre2_ucd_stage2_8[v413 & 0x7F | (_pcre2_ucd_stage1_8[v413 >> 7] << 7)]])] != v192) != (v189 == 15))
              {
LABEL_1121:
                uint64_t v20 = 0;
                a6 = (uint64_t)v409;
                goto LABEL_2451;
              }
              if (++v412 > v34)
              {
                a6 = (uint64_t)v409;
                goto LABEL_1340;
              }
            }
            unsigned int v230 = (unsigned __int16)*v16;
            if (!*v16) {
              goto LABEL_1121;
            }
            a6 = (uint64_t)v409;
            if ((unint64_t)v411 <= *v14) {
              goto LABEL_3189;
            }
            goto LABEL_2879;
          case 3:
            unint64_t v419 = *v15;
            int v195 = *(unsigned __int8 **)(v13 + 80);
            int v420 = 1;
            while (2)
            {
              if ((unint64_t)v195 >= v419) {
                goto LABEL_872;
              }
              *(void *)(v13 + 80) = v195 + 1;
              unsigned int v421 = *v195;
              if (!v1364 || v421 < 0xC0)
              {
                ++v195;
                goto LABEL_806;
              }
              if ((v421 & 0x20) == 0)
              {
                *(void *)(v13 + 80) = v195 + 2;
                int v422 = v195[1] & 0x3F | ((v421 & 0x1F) << 6);
                v195 += 2;
                unsigned int v421 = v422;
                goto LABEL_806;
              }
              int v423 = v195[1] & 0x3F;
              if ((v421 & 0x10) != 0)
              {
                if ((v421 & 8) != 0)
                {
                  int v424 = v195[2] & 0x3F;
                  int v425 = v195[3] & 0x3F;
                  int v426 = v195[4] & 0x3F;
                  if ((v421 & 4) != 0)
                  {
                    unsigned int v421 = ((v421 & 1) << 30) | (v423 << 24) | (v424 << 18) | (v425 << 12) | (v426 << 6) | v195[5] & 0x3F;
                    v195 += 6;
                  }
                  else
                  {
                    unsigned int v421 = ((v421 & 3) << 24) | (v423 << 18) | (v424 << 12) | (v425 << 6) | v426;
                    v195 += 5;
                  }
                  *(void *)(v13 + 80) = v195;
LABEL_806:
                  if ((v192 != BYTE1(_pcre2_ucd_records_8[2
                                                         * _pcre2_ucd_stage2_8[v421 & 0x7F | (_pcre2_ucd_stage1_8[v421 >> 7] << 7)]])) == (v189 == 15))
                  {
                    if (++v420 > v34) {
                      goto LABEL_1340;
                    }
                    continue;
                  }
                  goto LABEL_3189;
                }
                unsigned int v421 = ((v421 & 7) << 18) | (v423 << 12) | ((v195[2] & 0x3F) << 6) | v195[3] & 0x3F;
                v195 += 4;
              }
              else
              {
                unsigned int v421 = ((v421 & 0xF) << 12) | (v423 << 6) | v195[2] & 0x3F;
                v195 += 3;
              }
              break;
            }
            *(void *)(v13 + 80) = v195;
            goto LABEL_806;
          case 4:
            unint64_t v427 = *v15;
            int v195 = *(unsigned __int8 **)(v13 + 80);
            int v428 = 1;
            while (2)
            {
              if ((unint64_t)v195 >= v427) {
                goto LABEL_872;
              }
              *(void *)(v13 + 80) = v195 + 1;
              unsigned int v429 = *v195;
              if (!v1364 || v429 < 0xC0)
              {
                ++v195;
                goto LABEL_825;
              }
              if ((v429 & 0x20) == 0)
              {
                *(void *)(v13 + 80) = v195 + 2;
                int v430 = v195[1] & 0x3F | ((v429 & 0x1F) << 6);
                v195 += 2;
                unsigned int v429 = v430;
                goto LABEL_825;
              }
              int v431 = v195[1] & 0x3F;
              if ((v429 & 0x10) != 0)
              {
                if ((v429 & 8) != 0)
                {
                  int v432 = v195[2] & 0x3F;
                  int v433 = v195[3] & 0x3F;
                  int v434 = v195[4] & 0x3F;
                  if ((v429 & 4) != 0)
                  {
                    unsigned int v429 = ((v429 & 1) << 30) | (v431 << 24) | (v432 << 18) | (v433 << 12) | (v434 << 6) | v195[5] & 0x3F;
                    v195 += 6;
                  }
                  else
                  {
                    unsigned int v429 = ((v429 & 3) << 24) | (v431 << 18) | (v432 << 12) | (v433 << 6) | v434;
                    v195 += 5;
                  }
                  *(void *)(v13 + 80) = v195;
LABEL_825:
                  if ((v192 != LOBYTE(_pcre2_ucd_records_8[2
                                                          * _pcre2_ucd_stage2_8[v429 & 0x7F | (_pcre2_ucd_stage1_8[v429 >> 7] << 7)]])) == (v189 == 15))
                  {
                    if (++v428 > v34) {
                      goto LABEL_1340;
                    }
                    continue;
                  }
                  goto LABEL_3189;
                }
                unsigned int v429 = ((v429 & 7) << 18) | (v431 << 12) | ((v195[2] & 0x3F) << 6) | v195[3] & 0x3F;
                v195 += 4;
              }
              else
              {
                unsigned int v429 = ((v429 & 0xF) << 12) | (v431 << 6) | v195[2] & 0x3F;
                v195 += 3;
              }
              break;
            }
            *(void *)(v13 + 80) = v195;
            goto LABEL_825;
          case 5:
            unint64_t v435 = *v15;
            int v195 = *(unsigned __int8 **)(v13 + 80);
            int v436 = 1;
            while (2)
            {
              if ((unint64_t)v195 >= v435) {
                goto LABEL_872;
              }
              *(void *)(v13 + 80) = v195 + 1;
              unsigned int v437 = *v195;
              if (!v1364 || v437 < 0xC0)
              {
                ++v195;
                goto LABEL_844;
              }
              if ((v437 & 0x20) == 0)
              {
                *(void *)(v13 + 80) = v195 + 2;
                int v438 = v195[1] & 0x3F | ((v437 & 0x1F) << 6);
                v195 += 2;
                unsigned int v437 = v438;
                goto LABEL_844;
              }
              int v439 = v195[1] & 0x3F;
              if ((v437 & 0x10) != 0)
              {
                if ((v437 & 8) != 0)
                {
                  int v440 = v195[2] & 0x3F;
                  int v441 = v195[3] & 0x3F;
                  int v442 = v195[4] & 0x3F;
                  if ((v437 & 4) != 0)
                  {
                    unsigned int v437 = ((v437 & 1) << 30) | (v439 << 24) | (v440 << 18) | (v441 << 12) | (v442 << 6) | v195[5] & 0x3F;
                    v195 += 6;
                  }
                  else
                  {
                    unsigned int v437 = ((v437 & 3) << 24) | (v439 << 18) | (v440 << 12) | (v441 << 6) | v442;
                    v195 += 5;
                  }
                  *(void *)(v13 + 80) = v195;
LABEL_844:
                  if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                       * _pcre2_ucd_stage2_8[v437 & 0x7F | (_pcre2_ucd_stage1_8[v437 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) == (v189 == 15))
                  {
                    if (++v436 > v34) {
                      goto LABEL_1340;
                    }
                    continue;
                  }
                  goto LABEL_3189;
                }
                unsigned int v437 = ((v437 & 7) << 18) | (v439 << 12) | ((v195[2] & 0x3F) << 6) | v195[3] & 0x3F;
                v195 += 4;
              }
              else
              {
                unsigned int v437 = ((v437 & 0xF) << 12) | (v439 << 6) | v195[2] & 0x3F;
                v195 += 3;
              }
              break;
            }
            *(void *)(v13 + 80) = v195;
            goto LABEL_844;
          case 6:
          case 7:
            unint64_t v194 = *v15;
            int v195 = *(unsigned __int8 **)(v13 + 80);
            int v196 = 1;
            while (2)
            {
              if ((unint64_t)v195 >= v194) {
                goto LABEL_872;
              }
              *(void *)(v13 + 80) = v195 + 1;
              int v197 = *v195;
              if (!v1364 || v197 < 0xC0)
              {
                ++v195;
                goto LABEL_323;
              }
              if ((v197 & 0x20) == 0)
              {
                *(void *)(v13 + 80) = v195 + 2;
                int v198 = v195[1] & 0x3F | ((v197 & 0x1F) << 6);
                v195 += 2;
                int v197 = v198;
                goto LABEL_323;
              }
              int v199 = v195[1] & 0x3F;
              if ((v197 & 0x10) == 0)
              {
                int v197 = ((v197 & 0xF) << 12) | (v199 << 6) | v195[2] & 0x3F;
                v195 += 3;
LABEL_318:
                *(void *)(v13 + 80) = v195;
                goto LABEL_323;
              }
              if ((v197 & 8) == 0)
              {
                int v197 = ((v197 & 7) << 18) | (v199 << 12) | ((v195[2] & 0x3F) << 6) | v195[3] & 0x3F;
                v195 += 4;
                goto LABEL_318;
              }
              int v200 = v195[2] & 0x3F;
              int v201 = v195[3] & 0x3F;
              int v202 = v195[4] & 0x3F;
              if ((v197 & 4) != 0)
              {
                int v197 = ((v197 & 1) << 30) | (v199 << 24) | (v200 << 18) | (v201 << 12) | (v202 << 6) | v195[5] & 0x3F;
                v195 += 6;
              }
              else
              {
                int v197 = ((v197 & 3) << 24) | (v199 << 18) | (v200 << 12) | (v201 << 6) | v202;
                v195 += 5;
              }
              *(void *)(v13 + 80) = v195;
LABEL_323:
              if (v197 < 0x2000)
              {
                if (v197 > 132)
                {
                  if (v197 > 5759)
                  {
                    if (v197 != 5760 && v197 != 6158) {
                      goto LABEL_341;
                    }
                  }
                  else if (v197 != 133 && v197 != 160)
                  {
                    goto LABEL_341;
                  }
                }
                else if (v197 > 0x20 || ((1 << v197) & 0x100003E00) == 0)
                {
                  goto LABEL_341;
                }
              }
              else if ((v197 - 0x2000) >= 0xB {
                     && ((v197 - 8232) > 0x37
              }
                      || ((1 << (v197 - 40)) & 0x80000000000083) == 0)
                     && v197 != 12288)
              {
LABEL_341:
                if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                    * _pcre2_ucd_stage2_8[v197 & 0x7F | (_pcre2_ucd_stage1_8[v197 >> 7] << 7)]])] != 6) != (v189 == 15))
                  goto LABEL_3189;
LABEL_333:
                if (++v196 > v34) {
                  goto LABEL_1340;
                }
                continue;
              }
              break;
            }
            if (v189 == 15) {
              goto LABEL_3189;
            }
            goto LABEL_333;
          case 8:
            unint64_t v443 = *v15;
            int v195 = *(unsigned __int8 **)(v13 + 80);
            int v444 = 1;
            while (2)
            {
              if ((unint64_t)v195 >= v443)
              {
LABEL_872:
                unsigned int v230 = (unsigned __int16)*v16;
                if (*v16 && (unint64_t)v195 > *v14) {
                  goto LABEL_2879;
                }
                goto LABEL_3189;
              }
              *(void *)(v13 + 80) = v195 + 1;
              unsigned int v445 = *v195;
              if (!v1364 || v445 < 0xC0)
              {
                ++v195;
                goto LABEL_863;
              }
              if ((v445 & 0x20) == 0)
              {
                *(void *)(v13 + 80) = v195 + 2;
                int v446 = v195[1] & 0x3F | ((v445 & 0x1F) << 6);
                v195 += 2;
                unsigned int v445 = v446;
                goto LABEL_863;
              }
              int v447 = v195[1] & 0x3F;
              if ((v445 & 0x10) != 0)
              {
                if ((v445 & 8) != 0)
                {
                  int v448 = v195[2] & 0x3F;
                  int v449 = v195[3] & 0x3F;
                  int v450 = v195[4] & 0x3F;
                  if ((v445 & 4) != 0)
                  {
                    unsigned int v445 = ((v445 & 1) << 30) | (v447 << 24) | (v448 << 18) | (v449 << 12) | (v450 << 6) | v195[5] & 0x3F;
                    v195 += 6;
                  }
                  else
                  {
                    unsigned int v445 = ((v445 & 3) << 24) | (v447 << 18) | (v448 << 12) | (v449 << 6) | v450;
                    v195 += 5;
                  }
                  *(void *)(v13 + 80) = v195;
LABEL_863:
                  BOOL v452 = v445 == 95
                      || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                        * _pcre2_ucd_stage2_8[v445 & 0x7F | (_pcre2_ucd_stage1_8[v445 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
                  if ((((v189 != 15) ^ v452) & 1) == 0)
                  {
                    if (++v444 > v34) {
                      goto LABEL_1340;
                    }
                    continue;
                  }
                  goto LABEL_3189;
                }
                unsigned int v445 = ((v445 & 7) << 18) | (v447 << 12) | ((v195[2] & 0x3F) << 6) | v195[3] & 0x3F;
                v195 += 4;
              }
              else
              {
                unsigned int v445 = ((v445 & 0xF) << 12) | (v447 << 6) | v195[2] & 0x3F;
                v195 += 3;
              }
              break;
            }
            *(void *)(v13 + 80) = v195;
            goto LABEL_863;
          case 9:
            unint64_t v453 = *v15;
            int v389 = *(unsigned __int8 **)(v13 + 80);
            v454 = &_pcre2_ucd_caseless_sets_8[v192];
            int v455 = 1;
LABEL_876:
            if ((unint64_t)v389 >= v453) {
              goto LABEL_1072;
            }
            *(void *)(v13 + 80) = v389 + 1;
            unsigned int v456 = *v389;
            if (v1364 && v456 >= 0xC0)
            {
              if ((v456 & 0x20) != 0)
              {
                int v458 = v389[1] & 0x3F;
                if ((v456 & 0x10) != 0)
                {
                  if ((v456 & 8) != 0)
                  {
                    int v459 = v389[2] & 0x3F;
                    int v460 = v389[3] & 0x3F;
                    int v461 = v389[4] & 0x3F;
                    if ((v456 & 4) != 0)
                    {
                      unsigned int v456 = ((v456 & 1) << 30) | (v458 << 24) | (v459 << 18) | (v460 << 12) | (v461 << 6) | v389[5] & 0x3F;
                      v389 += 6;
                    }
                    else
                    {
                      unsigned int v456 = ((v456 & 3) << 24) | (v458 << 18) | (v459 << 12) | (v460 << 6) | v461;
                      v389 += 5;
                    }
                  }
                  else
                  {
                    unsigned int v456 = ((v456 & 7) << 18) | (v458 << 12) | ((v389[2] & 0x3F) << 6) | v389[3] & 0x3F;
                    v389 += 4;
                  }
                }
                else
                {
                  unsigned int v456 = ((v456 & 0xF) << 12) | (v458 << 6) | v389[2] & 0x3F;
                  v389 += 3;
                }
                *(void *)(v13 + 80) = v389;
              }
              else
              {
                *(void *)(v13 + 80) = v389 + 2;
                int v457 = v389[1] & 0x3F | ((v456 & 0x1F) << 6);
                v389 += 2;
                unsigned int v456 = v457;
              }
            }
            else
            {
              ++v389;
            }
            v462 = v454;
            while (1)
            {
              unsigned int v463 = *v462;
              if (v456 < *v462) {
                break;
              }
              ++v462;
              if (v456 == v463)
              {
                if (v193 == 15) {
                  goto LABEL_3189;
                }
LABEL_897:
                if (++v455 > v34) {
                  goto LABEL_1340;
                }
                goto LABEL_876;
              }
            }
            if (v189 != 15) {
              goto LABEL_3189;
            }
            int v193 = 15;
            goto LABEL_897;
          case 10:
            unint64_t v464 = *v15;
            v465 = *(unsigned __int8 **)(v13 + 80);
            int v466 = 1;
            while (2)
            {
              if ((unint64_t)v465 < v464)
              {
                *(void *)(v13 + 80) = v465 + 1;
                unsigned int v467 = *v465;
                if (v1364 && v467 >= 0xC0)
                {
                  if ((v467 & 0x20) != 0)
                  {
                    int v469 = v465[1] & 0x3F;
                    if ((v467 & 0x10) != 0)
                    {
                      if ((v467 & 8) != 0)
                      {
                        int v470 = v465[2] & 0x3F;
                        int v471 = v465[3] & 0x3F;
                        int v472 = v465[4] & 0x3F;
                        if ((v467 & 4) != 0)
                        {
                          unsigned int v467 = ((v467 & 1) << 30) | (v469 << 24) | (v470 << 18) | (v471 << 12) | (v472 << 6) | v465[5] & 0x3F;
                          v465 += 6;
                        }
                        else
                        {
                          unsigned int v467 = ((v467 & 3) << 24) | (v469 << 18) | (v470 << 12) | (v471 << 6) | v472;
                          v465 += 5;
                        }
                      }
                      else
                      {
                        unsigned int v467 = ((v467 & 7) << 18) | (v469 << 12) | ((v465[2] & 0x3F) << 6) | v465[3] & 0x3F;
                        v465 += 4;
                      }
                    }
                    else
                    {
                      unsigned int v467 = ((v467 & 0xF) << 12) | (v469 << 6) | v465[2] & 0x3F;
                      v465 += 3;
                    }
                    *(void *)(v13 + 80) = v465;
                  }
                  else
                  {
                    *(void *)(v13 + 80) = v465 + 2;
                    int v468 = v465[1] & 0x3F | ((v467 & 0x1F) << 6);
                    v465 += 2;
                    unsigned int v467 = v468;
                  }
                }
                else
                {
                  ++v465;
                }
                if (v467 - 36 > 0x3C || ((1 << (v467 - 36)) & 0x1000000010000001) == 0)
                {
                  BOOL v474 = v467 >> 13 <= 6 && (v467 - 160) >> 5 >= 0x6BB;
                  int v475 = !v474;
                  if ((v475 ^ (v189 != 15))) {
                    goto LABEL_3189;
                  }
                }
                else if (v189 == 15)
                {
                  goto LABEL_3189;
                }
                if (++v466 > v34) {
                  goto LABEL_1340;
                }
                continue;
              }
              break;
            }
            unsigned int v230 = (unsigned __int16)*v16;
            if (!*v16 || (unint64_t)v465 <= *v14) {
              goto LABEL_3189;
            }
            goto LABEL_2879;
          default:
            return 4294967252;
        }
      }
      if (v34)
      {
        int v188 = (unsigned int *)(v13 + 56);
LABEL_345:
        if (v189 == 22)
        {
          long long v104 = v14;
          int v203 = v16;
          unint64_t v204 = (unsigned __int8 *)a6;
          uint64_t v205 = v11;
          uint64_t v206 = *(unsigned __int8 **)(v13 + 80);
          int v207 = 1;
          while (1)
          {
            unint64_t v208 = *v15;
            if ((unint64_t)v206 >= *v15) {
              break;
            }
            int v209 = v206 + 1;
            *(void *)(v13 + 80) = v206 + 1;
            unsigned int v210 = *v206;
            if (v1364 && v210 >= 0xC0)
            {
              if ((v210 & 0x20) != 0)
              {
                int v212 = *v209 & 0x3F;
                if ((v210 & 0x10) != 0)
                {
                  if ((v210 & 8) != 0)
                  {
                    int v213 = v206[2] & 0x3F;
                    int v214 = v206[3] & 0x3F;
                    int v215 = v206[4] & 0x3F;
                    int v211 = v15;
                    if ((v210 & 4) != 0)
                    {
                      unsigned int v210 = ((v210 & 1) << 30) | (v212 << 24) | (v213 << 18) | (v214 << 12) | (v215 << 6) | v206[5] & 0x3F;
                      int v209 = v206 + 6;
                    }
                    else
                    {
                      unsigned int v210 = ((v210 & 3) << 24) | (v212 << 18) | (v213 << 12) | (v214 << 6) | v215;
                      int v209 = v206 + 5;
                    }
                  }
                  else
                  {
                    int v211 = v15;
                    unsigned int v210 = ((v210 & 7) << 18) | (v212 << 12) | ((v206[2] & 0x3F) << 6) | v206[3] & 0x3F;
                    int v209 = v206 + 4;
                  }
                }
                else
                {
                  int v211 = v15;
                  unsigned int v210 = ((v210 & 0xF) << 12) | (v212 << 6) | v206[2] & 0x3F;
                  int v209 = v206 + 3;
                }
                *(void *)(v13 + 80) = v209;
              }
              else
              {
                int v211 = v15;
                int v209 = v206 + 2;
                *(void *)(v13 + 80) = v206 + 2;
                unsigned int v210 = v206[1] & 0x3F | ((v210 & 0x1F) << 6);
              }
            }
            else
            {
              int v211 = v15;
            }
            uint64_t v206 = _pcre2_extuni_8(v210, v209, *(void *)(v7 + 152), v208, v1361, 0);
            *(void *)(v13 + 80) = v206;
            unsigned int v216 = *(unsigned __int16 *)(v7 + 128);
            unsigned int v15 = v211;
            if (*(_WORD *)(v7 + 128))
            {
              if ((unint64_t)v206 >= *v211 && (unint64_t)v206 > *v104)
              {
                _DWORD *v1360 = 1;
                if (v216 > 1) {
                  return 4294967294;
                }
              }
            }
            if (++v207 > *v188)
            {
              int v191 = -1;
              uint64_t v11 = v205;
              a6 = (uint64_t)v204;
              unsigned int v16 = v203;
              uint64_t v14 = v104;
              goto LABEL_1340;
            }
          }
          unsigned int v16 = v203;
          unsigned int v230 = (unsigned __int16)*v203;
          if (!*v203)
          {
            uint64_t v20 = 0;
            uint64_t v11 = v205;
LABEL_2912:
            a6 = (uint64_t)v204;
            uint64_t v14 = v104;
            goto LABEL_2451;
          }
          uint64_t v14 = v104;
          uint64_t v11 = v205;
          a6 = (uint64_t)v204;
          if ((unint64_t)v206 > *v104)
          {
LABEL_2879:
            _DWORD *v1360 = 1;
            if (v230 > 1) {
              return 4294967294;
            }
          }
LABEL_3189:
          uint64_t v20 = 0;
          while (1)
          {
            while (1)
            {
LABEL_2451:
              uint64_t v19 = v20;
              if (!*(_DWORD *)(v13 + 48)) {
                return v19;
              }
              v13 -= *(void *)(v13 + 32);
              *(_DWORD *)(*(void *)(v7 + 256) + 104) |= 2u;
              unsigned int v1044 = *(unsigned __int8 *)(v13 + 72);
              uint64_t v19 = 4294967252;
              if (v1044 <= 0x63) {
                break;
              }
              switch(*(unsigned char *)(v13 + 72))
              {
                case 0xC8:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1045 = *(_DWORD *)(v13 + 56);
                  unsigned int v1046 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1045 + 1;
                  if (v1045 >= v1046) {
                    goto LABEL_2749;
                  }
                  v1047 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1047 >= *v15) {
                    goto LABEL_2611;
                  }
                  *(void *)(v13 + 80) = v1047 + 1;
                  unsigned int v1048 = *v1047;
                  if (v1048 < 0xC0) {
                    goto LABEL_2739;
                  }
                  if ((v1048 & 0x20) != 0)
                  {
                    int v1122 = v1047[1] & 0x3F;
                    if ((v1048 & 0x10) != 0)
                    {
                      if ((v1048 & 8) != 0)
                      {
                        int v1136 = v1047[2] & 0x3F;
                        int v1137 = v1047[3] & 0x3F;
                        int v1138 = v1047[4] & 0x3F;
                        if ((v1048 & 4) != 0)
                        {
                          unsigned int v1048 = ((v1048 & 1) << 30) | (v1122 << 24) | (v1136 << 18) | (v1137 << 12) | (v1138 << 6) | v1047[5] & 0x3F;
                          v1123 = v1047 + 6;
                        }
                        else
                        {
                          unsigned int v1048 = ((v1048 & 3) << 24) | (v1122 << 18) | (v1136 << 12) | (v1137 << 6) | v1138;
                          v1123 = v1047 + 5;
                        }
                      }
                      else
                      {
                        unsigned int v1048 = ((v1048 & 7) << 18) | (v1122 << 12) | ((v1047[2] & 0x3F) << 6) | v1047[3] & 0x3F;
                        v1123 = v1047 + 4;
                      }
                    }
                    else
                    {
                      unsigned int v1048 = ((v1048 & 0xF) << 12) | (v1122 << 6) | v1047[2] & 0x3F;
                      v1123 = v1047 + 3;
                    }
                    *(void *)(v13 + 80) = v1123;
                  }
                  else
                  {
                    *(void *)(v13 + 80) = v1047 + 2;
                    unsigned int v1048 = v1047[1] & 0x3F | ((v1048 & 0x1F) << 6);
                  }
                  if (v1048 < 0x100)
                  {
LABEL_2739:
                    if ((*(unsigned __int8 *)(*(void *)(v13 + 16) + ((unint64_t)v1048 >> 3)) >> (v1048 & 7)))
                    {
LABEL_3268:
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      LODWORD(v11) = 0;
                      a2 = *(unsigned __int8 **)v13;
                      char v1316 = -56;
                      goto LABEL_3216;
                    }
                  }
                  else if (*(unsigned char *)(v13 + 73) != 110)
                  {
                    goto LABEL_3268;
                  }
                  goto LABEL_2749;
                case 0xC9:
                  if (v20) {
                    continue;
                  }
                  v1079 = *(unsigned __int8 **)(v13 + 80);
                  *(void *)(v13 + 80) = v1079 - 1;
                  if ((unint64_t)v1079 <= *(void *)(v13 + 8)) {
                    continue;
                  }
                  long long v104 = v14;
                  unsigned int v1362 = v11;
                  v1351 = v16;
                  if ((*(v1079 - 1) & 0xC0) == 0x80)
                  {
                    v1331 = v1079 - 2;
                    do
                    {
                      *(void *)(v13 + 80) = v1331;
                      char v1332 = *v1331--;
                    }
                    while ((v1332 & 0xC0) == 0x80);
                  }
                  goto LABEL_3358;
                case 0xCA:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1080 = *(_DWORD *)(v13 + 56);
                  unsigned int v1081 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1080 + 1;
                  if (v1080 >= v1081) {
                    goto LABEL_2749;
                  }
                  v1082 = *(unsigned __int8 **)(v13 + 80);
                  size_t v1083 = *(void *)(v13 + 24);
                  if ((unint64_t)v1082 <= *v15 - v1083)
                  {
                    v1084 = (unsigned __int8 *)a6;
                    v1085 = v16;
                    int v1086 = cstdlib_memcmp(v1082, *(const void **)(v13 + 16), v1083);
                    unsigned int v16 = v1085;
                    a6 = (uint64_t)v1084;
                    if (!v1086)
                    {
                      long long v104 = v14;
                      v1317 = (void *)(v13 + 24);
LABEL_3316:
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      *(void *)(v13 + 80) += *v1317;
                      goto LABEL_3317;
                    }
                  }
                  size_t v1087 = *(void *)(v13 + 40);
                  if (v1087)
                  {
                    v1088 = *(unsigned __int8 **)(v13 + 80);
                    if ((unint64_t)v1088 <= *v15 - v1087)
                    {
                      v1089 = (unsigned __int8 *)a6;
                      v1090 = v16;
                      int v1091 = cstdlib_memcmp(v1088, (const void *)(v13 + 74), v1087);
                      unsigned int v16 = v1090;
                      a6 = (uint64_t)v1089;
                      if (!v1091)
                      {
                        long long v104 = v14;
                        v1317 = (void *)(v13 + 40);
                        goto LABEL_3316;
                      }
                    }
                  }
                  unsigned int v1092 = (unsigned __int16)*v16;
                  if (*v16)
                  {
                    v1047 = *(unsigned __int8 **)(v13 + 80);
                    if ((unint64_t)v1047 >= *v15)
                    {
LABEL_2612:
                      if ((unint64_t)v1047 > *v14)
                      {
                        _DWORD *v1360 = 1;
                        if (v1092 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                  }
LABEL_2749:
                  uint64_t v20 = 0;
                  continue;
                case 0xCB:
                  if (v20) {
                    continue;
                  }
                  v1201 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                  do
                  {
                    *(void *)(v13 + 80) = v1201;
                    char v1202 = *v1201--;
                  }
                  while ((v1202 & 0xC0) == 0x80);
                  int v387 = v1201 + 1;
                  goto LABEL_2943;
                case 0xCC:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1093 = *(_DWORD *)(v13 + 56);
                  unsigned int v1094 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1093 + 1;
                  if (v1093 >= v1094) {
                    goto LABEL_2749;
                  }
                  v1047 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1047 >= *v15) {
                    goto LABEL_2611;
                  }
                  *(void *)(v13 + 80) = v1047 + 1;
                  unsigned int v1095 = *v1047;
                  if (v1095 >= 0xC0)
                  {
                    if ((v1095 & 0x20) != 0)
                    {
                      int v1124 = v1047[1] & 0x3F;
                      if ((v1095 & 0x10) != 0)
                      {
                        if ((v1095 & 8) != 0)
                        {
                          int v1139 = v1047[2] & 0x3F;
                          int v1140 = v1047[3] & 0x3F;
                          int v1141 = v1047[4] & 0x3F;
                          if ((v1095 & 4) != 0)
                          {
                            unsigned int v1095 = ((v1095 & 1) << 30) | (v1124 << 24) | (v1139 << 18) | (v1140 << 12) | (v1141 << 6) | v1047[5] & 0x3F;
                            v1125 = v1047 + 6;
                          }
                          else
                          {
                            unsigned int v1095 = ((v1095 & 3) << 24) | (v1124 << 18) | (v1139 << 12) | (v1140 << 6) | v1141;
                            v1125 = v1047 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1095 = ((v1095 & 7) << 18) | (v1124 << 12) | ((v1047[2] & 0x3F) << 6) | v1047[3] & 0x3F;
                          v1125 = v1047 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1095 = ((v1095 & 0xF) << 12) | (v1124 << 6) | v1047[2] & 0x3F;
                        v1125 = v1047 + 3;
                      }
                      *(void *)(v13 + 80) = v1125;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1047 + 2;
                      unsigned int v1095 = v1047[1] & 0x3F | ((v1095 & 0x1F) << 6);
                    }
                  }
                  if (*(_DWORD *)(v13 + 64) == v1095 || *(_DWORD *)(v13 + 68) == v1095) {
                    goto LABEL_2749;
                  }
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = 0;
                  a2 = *(unsigned __int8 **)v13;
                  goto LABEL_3322;
                case 0xCD:
                  if (v20) {
                    continue;
                  }
                  v1203 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                  do
                  {
                    *(void *)(v13 + 80) = v1203;
                    char v1204 = *v1203--;
                  }
                  while ((v1204 & 0xC0) == 0x80);
                  unsigned int v288 = *(unsigned __int8 **)(v13 + 8);
                  uint64_t v289 = v1203 + 1;
                  goto LABEL_2947;
                case 0xCE:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1096 = *(_DWORD *)(v13 + 56);
                  unsigned int v1097 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1096 + 1;
                  if (v1096 >= v1097) {
                    goto LABEL_2749;
                  }
                  v1047 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1047 >= *v15) {
                    goto LABEL_2611;
                  }
                  *(void *)(v13 + 80) = v1047 + 1;
                  unsigned int v1098 = *v1047;
                  if (v1098 >= 0xC0)
                  {
                    if ((v1098 & 0x20) != 0)
                    {
                      int v1126 = v1047[1] & 0x3F;
                      if ((v1098 & 0x10) != 0)
                      {
                        if ((v1098 & 8) != 0)
                        {
                          int v1142 = v1047[2] & 0x3F;
                          int v1143 = v1047[3] & 0x3F;
                          int v1144 = v1047[4] & 0x3F;
                          if ((v1098 & 4) != 0)
                          {
                            unsigned int v1098 = ((v1098 & 1) << 30) | (v1126 << 24) | (v1142 << 18) | (v1143 << 12) | (v1144 << 6) | v1047[5] & 0x3F;
                            v1127 = v1047 + 6;
                          }
                          else
                          {
                            unsigned int v1098 = ((v1098 & 3) << 24) | (v1126 << 18) | (v1142 << 12) | (v1143 << 6) | v1144;
                            v1127 = v1047 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1098 = ((v1098 & 7) << 18) | (v1126 << 12) | ((v1047[2] & 0x3F) << 6) | v1047[3] & 0x3F;
                          v1127 = v1047 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1098 = ((v1098 & 0xF) << 12) | (v1126 << 6) | v1047[2] & 0x3F;
                        v1127 = v1047 + 3;
                      }
                      *(void *)(v13 + 80) = v1127;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1047 + 2;
                      unsigned int v1098 = v1047[1] & 0x3F | ((v1098 & 0x1F) << 6);
                    }
                  }
                  if (*(_DWORD *)(v13 + 64) == v1098) {
                    goto LABEL_2749;
                  }
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = 0;
                  a2 = *(unsigned __int8 **)v13;
                  goto LABEL_3270;
                case 0xCF:
                  if (v20) {
                    continue;
                  }
                  v1205 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                  do
                  {
                    *(void *)(v13 + 80) = v1205;
                    char v1206 = *v1205--;
                  }
                  while ((v1206 & 0xC0) == 0x80);
                  int v268 = *(unsigned __int8 **)(v13 + 8);
                  uint64_t v269 = v1205 + 1;
                  goto LABEL_2951;
                case 0xD0:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1099 = *(_DWORD *)(v13 + 56);
                  unsigned int v1100 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1099 + 1;
                  if (v1099 >= v1100) {
                    goto LABEL_2749;
                  }
                  v1058 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1058 >= *v15) {
                    goto LABEL_2653;
                  }
                  *(void *)(v13 + 80) = v1058 + 1;
                  if (v1364)
                  {
                    unsigned int v1101 = *v1058;
                    if (v1101 >= 0xC0)
                    {
                      if ((v1101 & 0x20) != 0)
                      {
                        uint64_t v1128 = 4;
                        uint64_t v1129 = 5;
                        if ((v1101 & 4) != 0) {
                          uint64_t v1129 = 6;
                        }
                        if ((v1101 & 8) != 0) {
                          uint64_t v1128 = v1129;
                        }
                        if ((v1101 & 0x10) != 0) {
                          uint64_t v1102 = v1128;
                        }
                        else {
                          uint64_t v1102 = 3;
                        }
                      }
                      else
                      {
                        uint64_t v1102 = 2;
                      }
                      *(void *)(v13 + 80) = &v1058[v1102];
                    }
                  }
                  if (*(_DWORD *)(v13 + 64) == 15) {
                    goto LABEL_2749;
                  }
                  long long v104 = v14;
                  v1351 = v16;
                  int v191 = v11;
                  goto LABEL_3267;
                case 0xD1:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1103 = *(_DWORD *)(v13 + 56);
                  unsigned int v1104 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1103 + 1;
                  if (v1103 >= v1104) {
                    goto LABEL_2749;
                  }
                  v1047 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1047 < *v15)
                  {
                    *(void *)(v13 + 80) = v1047 + 1;
                    unsigned int v1194 = *v1047;
                    if (v1364 && v1194 >= 0xC0)
                    {
                      if ((v1194 & 0x20) != 0)
                      {
                        int v1236 = v1047[1] & 0x3F;
                        if ((v1194 & 0x10) != 0)
                        {
                          if ((v1194 & 8) != 0)
                          {
                            int v1267 = v1047[2] & 0x3F;
                            int v1268 = v1047[3] & 0x3F;
                            int v1269 = v1047[4] & 0x3F;
                            if ((v1194 & 4) != 0)
                            {
                              unsigned int v1194 = ((v1194 & 1) << 30) | (v1236 << 24) | (v1267 << 18) | (v1268 << 12) | (v1269 << 6) | v1047[5] & 0x3F;
                              v1237 = v1047 + 6;
                            }
                            else
                            {
                              unsigned int v1194 = ((v1194 & 3) << 24) | (v1236 << 18) | (v1267 << 12) | (v1268 << 6) | v1269;
                              v1237 = v1047 + 5;
                            }
                          }
                          else
                          {
                            unsigned int v1194 = ((v1194 & 7) << 18) | (v1236 << 12) | ((v1047[2] & 0x3F) << 6) | v1047[3] & 0x3F;
                            v1237 = v1047 + 4;
                          }
                        }
                        else
                        {
                          unsigned int v1194 = ((v1194 & 0xF) << 12) | (v1236 << 6) | v1047[2] & 0x3F;
                          v1237 = v1047 + 3;
                        }
                        *(void *)(v13 + 80) = v1237;
                      }
                      else
                      {
                        *(void *)(v13 + 80) = v1047 + 2;
                        unsigned int v1194 = v1047[1] & 0x3F | ((v1194 & 0x1F) << 6);
                      }
                    }
                    unsigned int v1282 = BYTE1(_pcre2_ucd_records_8[2
                                                     * _pcre2_ucd_stage2_8[v1194 & 0x7F | (_pcre2_ucd_stage1_8[v1194 >> 7] << 7)]]);
                    BOOL v95 = v1282 > 9;
                    int v1283 = (1 << v1282) & 0x320;
                    if (v95 || v1283 == 0)
                    {
                      if (*(_DWORD *)(v13 + 64) == 15)
                      {
LABEL_3284:
                        long long v104 = v14;
                        v1351 = v16;
LABEL_3285:
                        unsigned int v1362 = v11;
                        LODWORD(v11) = 0;
                        a2 = *(unsigned __int8 **)v13;
                        char v1316 = -47;
                        goto LABEL_3216;
                      }
                    }
                    else if (*(_DWORD *)(v13 + 64) != 15)
                    {
                      goto LABEL_3284;
                    }
                    goto LABEL_3189;
                  }
LABEL_2611:
                  unsigned int v1092 = (unsigned __int16)*v16;
                  if (!*v16) {
                    goto LABEL_2749;
                  }
                  goto LABEL_2612;
                case 0xD2:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1165 = *(_DWORD *)(v13 + 56);
                  unsigned int v1166 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1165 + 1;
                  if (v1165 >= v1166) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1167 = *v1164;
                  if (v1364 && v1167 >= 0xC0)
                  {
                    if ((v1167 & 0x20) != 0)
                    {
                      int v1220 = v1164[1] & 0x3F;
                      if ((v1167 & 0x10) != 0)
                      {
                        if ((v1167 & 8) != 0)
                        {
                          int v1243 = v1164[2] & 0x3F;
                          int v1244 = v1164[3] & 0x3F;
                          int v1245 = v1164[4] & 0x3F;
                          if ((v1167 & 4) != 0)
                          {
                            unsigned int v1167 = ((v1167 & 1) << 30) | (v1220 << 24) | (v1243 << 18) | (v1244 << 12) | (v1245 << 6) | v1164[5] & 0x3F;
                            v1221 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1167 = ((v1167 & 3) << 24) | (v1220 << 18) | (v1243 << 12) | (v1244 << 6) | v1245;
                            v1221 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1167 = ((v1167 & 7) << 18) | (v1220 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1221 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1167 = ((v1167 & 0xF) << 12) | (v1220 << 6) | v1164[2] & 0x3F;
                        v1221 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1221;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1167 = v1164[1] & 0x3F | ((v1167 & 0x1F) << 6);
                    }
                  }
                  if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                      * _pcre2_ucd_stage2_8[v1167 & 0x7F | (_pcre2_ucd_stage1_8[v1167 >> 7] << 7)]])] != *(_DWORD *)(v13 + 68)) != (*(_DWORD *)(v13 + 64) == 15))
                    goto LABEL_3189;
                  long long v104 = v14;
                  v1351 = v16;
                  goto LABEL_3273;
                case 0xD3:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1168 = *(_DWORD *)(v13 + 56);
                  unsigned int v1169 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1168 + 1;
                  if (v1168 >= v1169) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1170 = *v1164;
                  if (v1364 && v1170 >= 0xC0)
                  {
                    if ((v1170 & 0x20) != 0)
                    {
                      int v1222 = v1164[1] & 0x3F;
                      if ((v1170 & 0x10) != 0)
                      {
                        if ((v1170 & 8) != 0)
                        {
                          int v1246 = v1164[2] & 0x3F;
                          int v1247 = v1164[3] & 0x3F;
                          int v1248 = v1164[4] & 0x3F;
                          if ((v1170 & 4) != 0)
                          {
                            unsigned int v1170 = ((v1170 & 1) << 30) | (v1222 << 24) | (v1246 << 18) | (v1247 << 12) | (v1248 << 6) | v1164[5] & 0x3F;
                            v1223 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1170 = ((v1170 & 3) << 24) | (v1222 << 18) | (v1246 << 12) | (v1247 << 6) | v1248;
                            v1223 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1170 = ((v1170 & 7) << 18) | (v1222 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1223 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1170 = ((v1170 & 0xF) << 12) | (v1222 << 6) | v1164[2] & 0x3F;
                        v1223 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1223;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1170 = v1164[1] & 0x3F | ((v1170 & 0x1F) << 6);
                    }
                  }
                  if ((*(_DWORD *)(v13 + 68) != BYTE1(_pcre2_ucd_records_8[2
                                                                          * _pcre2_ucd_stage2_8[v1170 & 0x7F | (_pcre2_ucd_stage1_8[v1170 >> 7] << 7)]])) != (*(_DWORD *)(v13 + 64) == 15))
                    goto LABEL_3189;
                  long long v104 = v14;
                  v1351 = v16;
                  goto LABEL_3274;
                case 0xD4:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1171 = *(_DWORD *)(v13 + 56);
                  unsigned int v1172 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1171 + 1;
                  if (v1171 >= v1172) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1173 = *v1164;
                  if (v1364 && v1173 >= 0xC0)
                  {
                    if ((v1173 & 0x20) != 0)
                    {
                      int v1224 = v1164[1] & 0x3F;
                      if ((v1173 & 0x10) != 0)
                      {
                        if ((v1173 & 8) != 0)
                        {
                          int v1249 = v1164[2] & 0x3F;
                          int v1250 = v1164[3] & 0x3F;
                          int v1251 = v1164[4] & 0x3F;
                          if ((v1173 & 4) != 0)
                          {
                            unsigned int v1173 = ((v1173 & 1) << 30) | (v1224 << 24) | (v1249 << 18) | (v1250 << 12) | (v1251 << 6) | v1164[5] & 0x3F;
                            v1225 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1173 = ((v1173 & 3) << 24) | (v1224 << 18) | (v1249 << 12) | (v1250 << 6) | v1251;
                            v1225 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1173 = ((v1173 & 7) << 18) | (v1224 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1225 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1173 = ((v1173 & 0xF) << 12) | (v1224 << 6) | v1164[2] & 0x3F;
                        v1225 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1225;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1173 = v1164[1] & 0x3F | ((v1173 & 0x1F) << 6);
                    }
                  }
                  if ((*(_DWORD *)(v13 + 68) != LOBYTE(_pcre2_ucd_records_8[2
                                                                           * _pcre2_ucd_stage2_8[v1173 & 0x7F | (_pcre2_ucd_stage1_8[v1173 >> 7] << 7)]])) != (*(_DWORD *)(v13 + 64) == 15))
                    goto LABEL_3189;
                  long long v104 = v14;
                  v1351 = v16;
                  goto LABEL_3275;
                case 0xD5:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1174 = *(_DWORD *)(v13 + 56);
                  unsigned int v1175 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1174 + 1;
                  if (v1174 >= v1175) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1176 = *v1164;
                  if (v1364 && v1176 >= 0xC0)
                  {
                    if ((v1176 & 0x20) != 0)
                    {
                      int v1226 = v1164[1] & 0x3F;
                      if ((v1176 & 0x10) != 0)
                      {
                        if ((v1176 & 8) != 0)
                        {
                          int v1252 = v1164[2] & 0x3F;
                          int v1253 = v1164[3] & 0x3F;
                          int v1254 = v1164[4] & 0x3F;
                          if ((v1176 & 4) != 0)
                          {
                            unsigned int v1176 = ((v1176 & 1) << 30) | (v1226 << 24) | (v1252 << 18) | (v1253 << 12) | (v1254 << 6) | v1164[5] & 0x3F;
                            v1227 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1176 = ((v1176 & 3) << 24) | (v1226 << 18) | (v1252 << 12) | (v1253 << 6) | v1254;
                            v1227 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1176 = ((v1176 & 7) << 18) | (v1226 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1227 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1176 = ((v1176 & 0xF) << 12) | (v1226 << 6) | v1164[2] & 0x3F;
                        v1227 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1227;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1176 = v1164[1] & 0x3F | ((v1176 & 0x1F) << 6);
                    }
                  }
                  if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                       * _pcre2_ucd_stage2_8[v1176 & 0x7F | (_pcre2_ucd_stage1_8[v1176 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) != (*(_DWORD *)(v13 + 64) == 15))
                    goto LABEL_3189;
                  long long v104 = v14;
                  v1351 = v16;
                  goto LABEL_3276;
                case 0xD6:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1177 = *(_DWORD *)(v13 + 56);
                  unsigned int v1178 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1177 + 1;
                  if (v1177 >= v1178) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  int v1179 = *v1164;
                  if (v1364 && v1179 >= 0xC0)
                  {
                    if ((v1179 & 0x20) != 0)
                    {
                      int v1228 = v1164[1] & 0x3F;
                      if ((v1179 & 0x10) != 0)
                      {
                        if ((v1179 & 8) != 0)
                        {
                          int v1255 = v1164[2] & 0x3F;
                          int v1256 = v1164[3] & 0x3F;
                          int v1257 = v1164[4] & 0x3F;
                          if ((v1179 & 4) != 0)
                          {
                            int v1179 = ((v1179 & 1) << 30) | (v1228 << 24) | (v1255 << 18) | (v1256 << 12) | (v1257 << 6) | v1164[5] & 0x3F;
                            v1229 = v1164 + 6;
                          }
                          else
                          {
                            int v1179 = ((v1179 & 3) << 24) | (v1228 << 18) | (v1255 << 12) | (v1256 << 6) | v1257;
                            v1229 = v1164 + 5;
                          }
                        }
                        else
                        {
                          int v1179 = ((v1179 & 7) << 18) | (v1228 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1229 = v1164 + 4;
                        }
                      }
                      else
                      {
                        int v1179 = ((v1179 & 0xF) << 12) | (v1228 << 6) | v1164[2] & 0x3F;
                        v1229 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1229;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      int v1179 = v1164[1] & 0x3F | ((v1179 & 0x1F) << 6);
                    }
                  }
                  if (v1179 < 0x2000)
                  {
                    if (v1179 > 132)
                    {
                      if (v1179 > 5759)
                      {
                        if (v1179 != 5760 && v1179 != 6158)
                        {
LABEL_3136:
                          if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                              * _pcre2_ucd_stage2_8[v1179 & 0x7F | (_pcre2_ucd_stage1_8[v1179 >> 7] << 7)]])] != 6) == (*(_DWORD *)(v13 + 64) == 15))
                            goto LABEL_3277;
                          goto LABEL_3189;
                        }
                      }
                      else if (v1179 != 133 && v1179 != 160)
                      {
                        goto LABEL_3136;
                      }
                    }
                    else if (v1179 > 0x20 || ((1 << v1179) & 0x100003E00) == 0)
                    {
                      goto LABEL_3136;
                    }
                  }
                  else if ((v1179 - 0x2000) >= 0xB)
                  {
                    BOOL v1272 = (v1179 - 8232) > 0x37
                         || ((1 << (v1179 - 40)) & 0x80000000000083) == 0;
                    if (v1272 && v1179 != 12288) {
                      goto LABEL_3136;
                    }
                  }
                  if (*(_DWORD *)(v13 + 64) != 15)
                  {
LABEL_3277:
                    long long v104 = v14;
                    v1351 = v16;
LABEL_3278:
                    unsigned int v1362 = v11;
                    LODWORD(v11) = 0;
                    a2 = *(unsigned __int8 **)v13;
                    char v1316 = -42;
                    goto LABEL_3216;
                  }
                  goto LABEL_3189;
                case 0xD7:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1180 = *(_DWORD *)(v13 + 56);
                  unsigned int v1181 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1180 + 1;
                  if (v1180 >= v1181) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1182 = *v1164;
                  if (v1364 && v1182 >= 0xC0)
                  {
                    if ((v1182 & 0x20) != 0)
                    {
                      int v1230 = v1164[1] & 0x3F;
                      if ((v1182 & 0x10) != 0)
                      {
                        if ((v1182 & 8) != 0)
                        {
                          int v1258 = v1164[2] & 0x3F;
                          int v1259 = v1164[3] & 0x3F;
                          int v1260 = v1164[4] & 0x3F;
                          if ((v1182 & 4) != 0)
                          {
                            unsigned int v1182 = ((v1182 & 1) << 30) | (v1230 << 24) | (v1258 << 18) | (v1259 << 12) | (v1260 << 6) | v1164[5] & 0x3F;
                            v1231 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1182 = ((v1182 & 3) << 24) | (v1230 << 18) | (v1258 << 12) | (v1259 << 6) | v1260;
                            v1231 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1182 = ((v1182 & 7) << 18) | (v1230 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1231 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1182 = ((v1182 & 0xF) << 12) | (v1230 << 6) | v1164[2] & 0x3F;
                        v1231 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1231;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1182 = v1164[1] & 0x3F | ((v1182 & 0x1F) << 6);
                    }
                  }
                  BOOL v1276 = v1182 == 95
                       || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                         * _pcre2_ucd_stage2_8[v1182 & 0x7F | (_pcre2_ucd_stage1_8[v1182 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
                  if (((*(_DWORD *)(v13 + 64) != 15) ^ v1276)) {
                    goto LABEL_3189;
                  }
                  long long v104 = v14;
                  v1351 = v16;
                  goto LABEL_3279;
                case 0xD8:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1183 = *(_DWORD *)(v13 + 56);
                  unsigned int v1184 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1183 + 1;
                  if (v1183 >= v1184) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2877;
                  }
                  *(void *)(v13 + 80) = v1164 + 1;
                  unsigned int v1185 = *v1164;
                  if (v1364 && v1185 >= 0xC0)
                  {
                    if ((v1185 & 0x20) != 0)
                    {
                      int v1232 = v1164[1] & 0x3F;
                      if ((v1185 & 0x10) != 0)
                      {
                        if ((v1185 & 8) != 0)
                        {
                          int v1261 = v1164[2] & 0x3F;
                          int v1262 = v1164[3] & 0x3F;
                          int v1263 = v1164[4] & 0x3F;
                          if ((v1185 & 4) != 0)
                          {
                            unsigned int v1185 = ((v1185 & 1) << 30) | (v1232 << 24) | (v1261 << 18) | (v1262 << 12) | (v1263 << 6) | v1164[5] & 0x3F;
                            v1233 = v1164 + 6;
                          }
                          else
                          {
                            unsigned int v1185 = ((v1185 & 3) << 24) | (v1232 << 18) | (v1261 << 12) | (v1262 << 6) | v1263;
                            v1233 = v1164 + 5;
                          }
                        }
                        else
                        {
                          unsigned int v1185 = ((v1185 & 7) << 18) | (v1232 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                          v1233 = v1164 + 4;
                        }
                      }
                      else
                      {
                        unsigned int v1185 = ((v1185 & 0xF) << 12) | (v1232 << 6) | v1164[2] & 0x3F;
                        v1233 = v1164 + 3;
                      }
                      *(void *)(v13 + 80) = v1233;
                    }
                    else
                    {
                      *(void *)(v13 + 80) = v1164 + 2;
                      unsigned int v1185 = v1164[1] & 0x3F | ((v1185 & 0x1F) << 6);
                    }
                  }
                  v1277 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v13 + 68)];
                  do
                  {
                    unsigned int v1278 = *v1277;
                    if (v1185 < *v1277)
                    {
                      if (*(_DWORD *)(v13 + 64) == 15) {
                        goto LABEL_3280;
                      }
                      goto LABEL_3189;
                    }
                    ++v1277;
                  }
                  while (v1185 != v1278);
                  if (*(_DWORD *)(v13 + 64) != 15)
                  {
LABEL_3280:
                    long long v104 = v14;
                    v1351 = v16;
LABEL_3281:
                    unsigned int v1362 = v11;
                    LODWORD(v11) = 0;
                    a2 = *(unsigned __int8 **)v13;
                    char v1316 = -40;
                    goto LABEL_3216;
                  }
                  goto LABEL_3189;
                case 0xD9:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1186 = *(_DWORD *)(v13 + 56);
                  unsigned int v1187 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1186 + 1;
                  if (v1186 >= v1187) {
                    goto LABEL_3189;
                  }
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 < *v15)
                  {
                    *(void *)(v13 + 80) = v1164 + 1;
                    unsigned int v1188 = *v1164;
                    if (v1364 && v1188 >= 0xC0)
                    {
                      if ((v1188 & 0x20) != 0)
                      {
                        int v1234 = v1164[1] & 0x3F;
                        if ((v1188 & 0x10) != 0)
                        {
                          if ((v1188 & 8) != 0)
                          {
                            int v1264 = v1164[2] & 0x3F;
                            int v1265 = v1164[3] & 0x3F;
                            int v1266 = v1164[4] & 0x3F;
                            if ((v1188 & 4) != 0)
                            {
                              unsigned int v1188 = ((v1188 & 1) << 30) | (v1234 << 24) | (v1264 << 18) | (v1265 << 12) | (v1266 << 6) | v1164[5] & 0x3F;
                              v1235 = v1164 + 6;
                            }
                            else
                            {
                              unsigned int v1188 = ((v1188 & 3) << 24) | (v1234 << 18) | (v1264 << 12) | (v1265 << 6) | v1266;
                              v1235 = v1164 + 5;
                            }
                          }
                          else
                          {
                            unsigned int v1188 = ((v1188 & 7) << 18) | (v1234 << 12) | ((v1164[2] & 0x3F) << 6) | v1164[3] & 0x3F;
                            v1235 = v1164 + 4;
                          }
                        }
                        else
                        {
                          unsigned int v1188 = ((v1188 & 0xF) << 12) | (v1234 << 6) | v1164[2] & 0x3F;
                          v1235 = v1164 + 3;
                        }
                        *(void *)(v13 + 80) = v1235;
                      }
                      else
                      {
                        *(void *)(v13 + 80) = v1164 + 2;
                        unsigned int v1188 = v1164[1] & 0x3F | ((v1188 & 0x1F) << 6);
                      }
                    }
                    if (v1188 - 36 > 0x3C || ((1 << (v1188 - 36)) & 0x1000000010000001) == 0)
                    {
                      BOOL v1281 = v1188 >> 13 > 6 || (v1188 - 160) >> 5 < 0x6BB;
                      if (((v1281 ^ (*(_DWORD *)(v13 + 64) != 15)) & 1) == 0)
                      {
LABEL_3282:
                        long long v104 = v14;
                        v1351 = v16;
LABEL_3283:
                        unsigned int v1362 = v11;
                        LODWORD(v11) = 0;
                        a2 = *(unsigned __int8 **)v13;
                        char v1316 = -39;
                        goto LABEL_3216;
                      }
                    }
                    else if (*(_DWORD *)(v13 + 64) != 15)
                    {
                      goto LABEL_3282;
                    }
                    goto LABEL_3189;
                  }
LABEL_2877:
                  unsigned int v230 = (unsigned __int16)*v16;
                  if (!*v16) {
                    goto LABEL_3189;
                  }
LABEL_2878:
                  if ((unint64_t)v1164 > *v14) {
                    goto LABEL_2879;
                  }
                  goto LABEL_3189;
                case 0xDA:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1189 = *(_DWORD *)(v13 + 56);
                  unsigned int v1190 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1189 + 1;
                  if (v1189 >= v1190) {
                    goto LABEL_3189;
                  }
                  long long v104 = v14;
                  v1351 = v16;
                  unint64_t v204 = (unsigned __int8 *)a6;
                  v1191 = *(unsigned __int8 **)(v13 + 80);
                  unint64_t v1192 = *v15;
                  if ((unint64_t)v1191 < *v15)
                  {
                    v1312 = v1191 + 1;
                    *(void *)(v13 + 80) = v1191 + 1;
                    unsigned int v1313 = *v1191;
                    if (v1364 && v1313 >= 0xC0)
                    {
                      if ((v1313 & 0x20) != 0)
                      {
                        int v1324 = *v1312 & 0x3F;
                        if ((v1313 & 0x10) != 0)
                        {
                          if ((v1313 & 8) != 0)
                          {
                            int v1337 = v1191[2] & 0x3F;
                            int v1338 = v1191[3] & 0x3F;
                            int v1339 = v1191[4] & 0x3F;
                            v1314 = v15;
                            if ((v1313 & 4) != 0)
                            {
                              unsigned int v1313 = ((v1313 & 1) << 30) | (v1324 << 24) | (v1337 << 18) | (v1338 << 12) | (v1339 << 6) | v1191[5] & 0x3F;
                              v1312 = v1191 + 6;
                            }
                            else
                            {
                              unsigned int v1313 = ((v1313 & 3) << 24) | (v1324 << 18) | (v1337 << 12) | (v1338 << 6) | v1339;
                              v1312 = v1191 + 5;
                            }
                          }
                          else
                          {
                            v1314 = v15;
                            unsigned int v1313 = ((v1313 & 7) << 18) | (v1324 << 12) | ((v1191[2] & 0x3F) << 6) | v1191[3] & 0x3F;
                            v1312 = v1191 + 4;
                          }
                        }
                        else
                        {
                          v1314 = v15;
                          unsigned int v1313 = ((v1313 & 0xF) << 12) | (v1324 << 6) | v1191[2] & 0x3F;
                          v1312 = v1191 + 3;
                        }
                        *(void *)(v13 + 80) = v1312;
                      }
                      else
                      {
                        v1314 = v15;
                        v1312 = v1191 + 2;
                        *(void *)(v13 + 80) = v1191 + 2;
                        unsigned int v1313 = v1191[1] & 0x3F | ((v1313 & 0x1F) << 6);
                      }
                    }
                    else
                    {
                      v1314 = v15;
                    }
                    v1341 = _pcre2_extuni_8(v1313, v1312, *(void *)(v7 + 152), v1192, v1361, 0);
                    *(void *)(v13 + 80) = v1341;
                    unsigned int v1342 = *(unsigned __int16 *)(v7 + 128);
                    unsigned int v1362 = v11;
                    if (*(_WORD *)(v7 + 128))
                    {
                      unsigned int v15 = v1314;
                      a6 = (uint64_t)v204;
                      if ((unint64_t)v1341 >= *v1314 && (unint64_t)v1341 > *v14)
                      {
                        _DWORD *v1360 = 1;
                        if (v1342 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                    else
                    {
                      a6 = (uint64_t)v204;
                      unsigned int v15 = v1314;
                    }
LABEL_3382:
                    LODWORD(v11) = 0;
                    a2 = *(unsigned __int8 **)v13;
                    char v1316 = -38;
                    goto LABEL_3216;
                  }
                  unsigned int v328 = (unsigned __int16)*v16;
                  if (!*v16)
                  {
                    uint64_t v20 = 0;
                    goto LABEL_2912;
                  }
                  if ((unint64_t)v1191 > *v14) {
                    goto LABEL_2902;
                  }
                  goto LABEL_3189;
                case 0xDB:
                  if (v20) {
                    continue;
                  }
                  unsigned int v1105 = *(_DWORD *)(v13 + 56);
                  unsigned int v1106 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1105 + 1;
                  if (v1105 >= v1106) {
                    goto LABEL_3189;
                  }
                  v1107 = *(unsigned __int8 **)(v13 + 80);
                  uint64_t v1108 = *v15;
                  if ((unint64_t)v1107 < *v15)
                  {
                    if (*(_DWORD *)(v13 + 64) == 12)
                    {
                      int v1109 = *(_DWORD *)(v7 + 244);
                      if (v1109)
                      {
                        v1052 = v15;
                        v1053 = v16;
                        v1054 = (unsigned __int8 *)a6;
                        if (_pcre2_is_newline_8(v1107, v1109, v1108, v1356, v1361)) {
                          goto LABEL_2639;
                        }
                        v1107 = *(unsigned __int8 **)(v13 + 80);
                        a6 = (uint64_t)v1054;
                        unsigned int v16 = v1053;
                      }
                      else
                      {
                        uint64_t v1132 = *v1356;
                        if ((unint64_t)v1107 <= v1108 - v1132
                          && *v1107 == *(unsigned __int8 *)(v7 + 252)
                          && (v1132 == 1 || v1107[1] == *(unsigned __int8 *)(v7 + 253)))
                        {
                          goto LABEL_3189;
                        }
                      }
                    }
                    v1133 = v1107 + 1;
                    *(void *)(v13 + 80) = v1107 + 1;
                    int v1134 = *v1107;
                    if (v1134 >= 0xC0)
                    {
                      if ((v1134 & 0x20) != 0)
                      {
                        int v1135 = *v1133 & 0x3F;
                        if ((v1134 & 0x10) != 0)
                        {
                          if ((v1134 & 8) != 0)
                          {
                            int v1148 = v1107[2] & 0x3F;
                            int v1149 = v1107[3] & 0x3F;
                            int v1150 = v1107[4] & 0x3F;
                            if ((v1134 & 4) != 0)
                            {
                              int v1134 = ((v1134 & 1) << 30) | (v1135 << 24) | (v1148 << 18) | (v1149 << 12) | (v1150 << 6) | v1107[5] & 0x3F;
                              v1133 = v1107 + 6;
                            }
                            else
                            {
                              int v1134 = ((v1134 & 3) << 24) | (v1135 << 18) | (v1148 << 12) | (v1149 << 6) | v1150;
                              v1133 = v1107 + 5;
                            }
                          }
                          else
                          {
                            int v1134 = ((v1134 & 7) << 18) | (v1135 << 12) | ((v1107[2] & 0x3F) << 6) | v1107[3] & 0x3F;
                            v1133 = v1107 + 4;
                          }
                        }
                        else
                        {
                          int v1134 = ((v1134 & 0xF) << 12) | (v1135 << 6) | v1107[2] & 0x3F;
                          v1133 = v1107 + 3;
                        }
                        *(void *)(v13 + 80) = v1133;
                      }
                      else
                      {
                        v1133 = v1107 + 2;
                        *(void *)(v13 + 80) = v1107 + 2;
                        int v1134 = v1107[1] & 0x3F | ((v1134 & 0x1F) << 6);
                      }
                    }
                    uint64_t v19 = 4294967252;
                    switch(*(_DWORD *)(v13 + 64))
                    {
                      case 6:
                        if (v1134 > 0xFF
                          || (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 4) == 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 7:
                        if (v1134 <= 0xFF
                          && (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 4) != 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 8:
                        if (v1134 > 0xFF
                          || (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 1) == 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 9:
                        if (v1134 <= 0xFF
                          && (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 1) != 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 0xA:
                        if (v1134 > 0xFF
                          || (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 0x10) == 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 0xB:
                        if (v1134 <= 0xFF
                          && (*(unsigned char *)(*(void *)(v7 + 104) + v1134) & 0x10) != 0)
                        {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      case 0xC:
                        unsigned int v1340 = (unsigned __int16)*v16;
                        if (*v16)
                        {
                          if ((unint64_t)v1133 >= *v15
                            && !*(_DWORD *)(v7 + 244)
                            && *v1356 == 2
                            && v1134 == *(unsigned __int8 *)(v7 + 252))
                          {
                            _DWORD *v1360 = 1;
                            if (v1340 > 1) {
                              return 4294967294;
                            }
                          }
                        }
                        goto LABEL_3384;
                      case 0xD:
                      case 0xE:
                        goto LABEL_3384;
                      case 0x11:
                        uint64_t v20 = 0;
                        if (v1134 > 132)
                        {
                          if ((v1134 - 8232) >= 2 && v1134 != 133) {
                            continue;
                          }
LABEL_3074:
                          if (*(_WORD *)(v7 + 130) != 2) {
                            goto LABEL_3384;
                          }
                          goto LABEL_3189;
                        }
                        if ((v1134 - 11) < 2) {
                          goto LABEL_3074;
                        }
                        if (v1134 == 10) {
                          goto LABEL_3384;
                        }
                        if (v1134 == 13)
                        {
                          if ((unint64_t)v1133 < *v15 && *v1133 == 10) {
                            *(void *)(v13 + 80) = v1133 + 1;
                          }
                          goto LABEL_3384;
                        }
                        break;
                      case 0x12:
                        uint64_t v20 = 0;
                        if (v1134 < 0x2000)
                        {
                          if (v1134 <= 159)
                          {
                            if (v1134 != 9 && v1134 != 32) {
                              goto LABEL_3384;
                            }
                          }
                          else if (v1134 != 160 && v1134 != 5760 && v1134 != 6158)
                          {
                            goto LABEL_3384;
                          }
                        }
                        else if (v1134 > 8238)
                        {
                          BOOL v1157 = v1134 == 8239 || v1134 == 8287;
                          if (!v1157 && v1134 != 12288) {
                            goto LABEL_3384;
                          }
                        }
                        else if ((v1134 - 0x2000) >= 0xB)
                        {
                          goto LABEL_3384;
                        }
                        continue;
                      case 0x13:
                        uint64_t v20 = 0;
                        if (v1134 < 0x2000)
                        {
                          if (v1134 <= 159)
                          {
                            if (v1134 == 9 || v1134 == 32) {
                              goto LABEL_3384;
                            }
                          }
                          else if (v1134 == 160 || v1134 == 5760 || v1134 == 6158)
                          {
                            goto LABEL_3384;
                          }
                        }
                        else if (v1134 > 8238)
                        {
                          BOOL v1156 = v1134 == 8239 || v1134 == 8287;
                          if (v1156 || v1134 == 12288) {
                            goto LABEL_3384;
                          }
                        }
                        else if ((v1134 - 0x2000) < 0xB)
                        {
                          goto LABEL_3384;
                        }
                        continue;
                      case 0x14:
                        uint64_t v20 = 0;
                        BOOL v1151 = (v1134 - 10) >= 4 && (v1134 - 8232) >= 2;
                        if (v1151 && v1134 != 133) {
                          goto LABEL_3384;
                        }
                        continue;
                      case 0x15:
                        BOOL v1242 = (v1134 - 10) >= 4 && (v1134 - 8232) >= 2;
                        if (!v1242 || v1134 == 133) {
                          goto LABEL_3384;
                        }
                        goto LABEL_3189;
                      default:
                        return v19;
                    }
                    continue;
                  }
                  unsigned int v230 = (unsigned __int16)*v16;
                  if (*v16 && (unint64_t)v1107 > *v14) {
                    goto LABEL_2879;
                  }
                  goto LABEL_3189;
                case 0xDC:
                  if (v20) {
                    continue;
                  }
                  v1207 = *(unsigned __int8 **)(v13 + 80);
                  v662 = v1207 - 1;
                  *(void *)(v13 + 80) = v1207 - 1;
                  unsigned int v1208 = *(v1207 - 1);
                  if (!v1364) {
                    goto LABEL_3196;
                  }
                  if ((v1208 & 0xC0) == 0x80)
                  {
                    v1209 = v1207 - 2;
                    do
                    {
                      *(void *)(v13 + 80) = v1209;
                      unsigned int v1210 = *v1209--;
                      unsigned int v1208 = v1210;
                    }
                    while ((v1210 & 0xC0) == 0x80);
                    v662 = v1209 + 1;
                  }
                  if (v1208 < 0xC0) {
                    goto LABEL_3196;
                  }
                  int v1211 = v662[1] & 0x3F;
                  if ((v1208 & 0x20) == 0)
                  {
                    unsigned int v1208 = v662[1] & 0x3F | ((v1208 & 0x1F) << 6);
                    goto LABEL_3196;
                  }
                  if ((v1208 & 0x10) != 0)
                  {
                    if ((v1208 & 8) != 0)
                    {
                      int v1285 = v662[2] & 0x3F;
                      int v1286 = v662[3] & 0x3F;
                      int v1287 = v662[4] & 0x3F;
                      if ((v1208 & 4) == 0)
                      {
                        unsigned int v1208 = ((v1208 & 3) << 24) | (v1211 << 18) | (v1285 << 12) | (v1286 << 6) | v1287;
                        goto LABEL_3196;
                      }
                      int v1270 = ((v1208 & 1) << 30) | (v1211 << 24) | (v1285 << 18) | (v1286 << 12) | (v1287 << 6);
                      unsigned __int8 v1271 = v662[5];
                    }
                    else
                    {
                      int v1270 = ((v1208 & 7) << 18) | (v1211 << 12) | ((v662[2] & 0x3F) << 6);
                      unsigned __int8 v1271 = v662[3];
                    }
                  }
                  else
                  {
                    int v1270 = ((v1208 & 0xF) << 12) | (v1211 << 6);
                    unsigned __int8 v1271 = v662[2];
                  }
                  unsigned int v1208 = v1270 & 0xFFFFFFC0 | v1271 & 0x3F;
LABEL_3196:
                  v783 = *(unsigned __int8 **)(v13 + 8);
                  if (v662 <= v783) {
                    goto LABEL_2448;
                  }
                  char v1288 = BYTE2(_pcre2_ucd_records_8[2
                                                   * _pcre2_ucd_stage2_8[v1208 & 0x7F | (_pcre2_ucd_stage1_8[v1208 >> 7] << 7)]]);
                  v1289 = v662;
                  while (1)
                  {
                    if (v1364)
                    {
                      do
                      {
                        unsigned int v1291 = *--v1289;
                        unsigned int v1290 = v1291;
                      }
                      while ((v1291 & 0xC0) == 0x80);
                      if (v1290 < 0xC0) {
                        goto LABEL_3204;
                      }
                      int v1292 = v1289[1] & 0x3F;
                      if ((v1290 & 0x20) != 0)
                      {
                        if ((v1290 & 0x10) == 0)
                        {
                          int v1294 = ((v1290 & 0xF) << 12) | (v1292 << 6);
                          unsigned __int8 v1295 = v1289[2];
LABEL_3214:
                          unsigned int v1290 = v1294 & 0xFFFFFFC0 | v1295 & 0x3F;
                          goto LABEL_3204;
                        }
                        if ((v1290 & 8) == 0)
                        {
                          int v1294 = ((v1290 & 7) << 18) | (v1292 << 12) | ((v1289[2] & 0x3F) << 6);
                          unsigned __int8 v1295 = v1289[3];
                          goto LABEL_3214;
                        }
                        int v1296 = v1289[2] & 0x3F;
                        int v1297 = v1289[3] & 0x3F;
                        int v1298 = v1289[4] & 0x3F;
                        if ((v1290 & 4) != 0)
                        {
                          int v1294 = ((v1290 & 1) << 30) | (v1292 << 24) | (v1296 << 18) | (v1297 << 12) | (v1298 << 6);
                          unsigned __int8 v1295 = v1289[5];
                          goto LABEL_3214;
                        }
                        unsigned int v1290 = ((v1290 & 3) << 24) | (v1292 << 18) | (v1296 << 12) | (v1297 << 6) | v1298;
                      }
                      else
                      {
                        unsigned int v1290 = v1289[1] & 0x3F | ((v1290 & 0x1F) << 6);
                      }
                    }
                    else
                    {
                      v1289 = v662 - 1;
                      unsigned int v1290 = *(v662 - 1);
                    }
LABEL_3204:
                    int v1293 = BYTE2(_pcre2_ucd_records_8[2
                                                     * _pcre2_ucd_stage2_8[v1290 & 0x7F | (_pcre2_ucd_stage1_8[v1290 >> 7] << 7)]]);
                    if (((_pcre2_ucp_gbtable_8[v1293] >> v1288) & 1) == 0) {
                      goto LABEL_2448;
                    }
                    *(void *)(v13 + 80) = v1289;
                    char v1288 = v1293;
                    v662 = v1289;
                    if (v1289 <= v783)
                    {
                      v662 = v1289;
                      goto LABEL_2448;
                    }
                  }
                case 0xDD:
                  if (v20) {
                    continue;
                  }
                  v1036 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                  do
                  {
                    *(void *)(v13 + 80) = v1036;
                    int v1213 = *v1036--;
                    int v1212 = v1213;
                  }
                  while ((v1213 & 0xC0) == 0x80);
                  if (*(_DWORD *)(v13 + 64) == 17
                    && (v1212 == 10 ? (BOOL v1214 = (unint64_t)(v1036 + 1) > *(void *)(v13 + 8)) : (BOOL v1214 = 0),
                        v1214 && *v1036 == 13))
                  {
                    *(void *)(v13 + 80) = v1036;
                  }
                  else
                  {
                    ++v1036;
                  }
                  goto LABEL_2978;
                case 0xDE:
                  if (v20) {
                    continue;
                  }
                  v1215 = *(unsigned __int8 **)(v13 + 80);
                  v662 = v1215 - 1;
                  *(void *)(v13 + 80) = v1215 - 1;
                  if (v1364 && (*v662 & 0xC0) == 0x80)
                  {
                    v1216 = v1215 - 2;
                    do
                    {
                      *(void *)(v13 + 80) = v1216;
                      char v1217 = *v1216--;
                    }
                    while ((v1217 & 0xC0) == 0x80);
                    v662 = v1216 + 1;
                  }
                  goto LABEL_1637;
                default:
                  if (v1044 != 100)
                  {
                    if (v1044 != 101) {
                      return v19;
                    }
                    if (!v20)
                    {
                      v1049 = *(unsigned __int8 **)(v13 + 80);
                      *(void *)(v13 + 80) = v1049 - 1;
                      if ((unint64_t)v1049 <= *(void *)(v13 + 8)) {
                        goto LABEL_2749;
                      }
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      if (v1364 && (*(v1049 - 1) & 0xC0) == 0x80)
                      {
                        v1309 = v1049 - 2;
                        do
                        {
                          *(void *)(v13 + 80) = v1309;
                          char v1310 = *v1309--;
                        }
                        while ((v1310 & 0xC0) == 0x80);
                      }
LABEL_3231:
                      LODWORD(v11) = 0;
                      a2 = *(unsigned __int8 **)v13;
                      char v1316 = 101;
                      goto LABEL_3216;
                    }
                    continue;
                  }
                  if (v20) {
                    continue;
                  }
                  unsigned int v1110 = *(_DWORD *)(v13 + 56);
                  unsigned int v1111 = *(_DWORD *)(v13 + 60);
                  *(_DWORD *)(v13 + 56) = v1110 + 1;
                  if (v1110 >= v1111) {
                    goto LABEL_2749;
                  }
                  v1058 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1058 >= *v15)
                  {
LABEL_2653:
                    unsigned int v1115 = (unsigned __int16)*v16;
                    if (*v16)
                    {
                      if ((unint64_t)v1058 > *v14)
                      {
                        _DWORD *v1360 = 1;
                        if (v1115 > 1) {
                          return 4294967294;
                        }
                      }
                    }
                    goto LABEL_2749;
                  }
                  *(void *)(v13 + 80) = v1058 + 1;
                  unsigned int v1112 = *v1058;
                  v1351 = v16;
                  if (!v1364)
                  {
                    v1113 = v15;
                    long long v104 = v14;
LABEL_2693:
                    v1114 = (unsigned __int8 *)a6;
                    goto LABEL_2752;
                  }
                  long long v104 = v14;
                  v1113 = v15;
                  if (v1112 < 0xC0) {
                    goto LABEL_2693;
                  }
                  if ((v1112 & 0x20) != 0)
                  {
                    int v1130 = v1058[1] & 0x3F;
                    if ((v1112 & 0x10) != 0)
                    {
                      if ((v1112 & 8) != 0)
                      {
                        int v1145 = v1058[2] & 0x3F;
                        int v1146 = v1058[3] & 0x3F;
                        int v1147 = v1058[4] & 0x3F;
                        v1114 = (unsigned __int8 *)a6;
                        if ((v1112 & 4) != 0)
                        {
                          unsigned int v1112 = ((v1112 & 1) << 30) | (v1130 << 24) | (v1145 << 18) | (v1146 << 12) | (v1147 << 6) | v1058[5] & 0x3F;
                          v1131 = v1058 + 6;
                        }
                        else
                        {
                          unsigned int v1112 = ((v1112 & 3) << 24) | (v1130 << 18) | (v1145 << 12) | (v1146 << 6) | v1147;
                          v1131 = v1058 + 5;
                        }
                      }
                      else
                      {
                        v1114 = (unsigned __int8 *)a6;
                        unsigned int v1112 = ((v1112 & 7) << 18) | (v1130 << 12) | ((v1058[2] & 0x3F) << 6) | v1058[3] & 0x3F;
                        v1131 = v1058 + 4;
                      }
                    }
                    else
                    {
                      v1114 = (unsigned __int8 *)a6;
                      unsigned int v1112 = ((v1112 & 0xF) << 12) | (v1130 << 6) | v1058[2] & 0x3F;
                      v1131 = v1058 + 3;
                    }
                    *(void *)(v13 + 80) = v1131;
                  }
                  else
                  {
                    v1114 = (unsigned __int8 *)a6;
                    *(void *)(v13 + 80) = v1058 + 2;
                    unsigned int v1112 = v1058[1] & 0x3F | ((v1112 & 0x1F) << 6);
                  }
LABEL_2752:
                  uint64_t v20 = _pcre2_xclass_8(v1112, *(unsigned char **)(v13 + 16));
                  if (v20)
                  {
                    unsigned int v1362 = v11;
                    a6 = (uint64_t)v1114;
                    unsigned int v15 = v1113;
                    goto LABEL_3272;
                  }
                  a6 = (uint64_t)v1114;
                  unsigned int v16 = v1351;
                  uint64_t v14 = v104;
                  unsigned int v15 = v1113;
                  break;
              }
            }
            switch(*(unsigned char *)(v13 + 72))
            {
              case 1:
                if (v20) {
                  goto LABEL_2451;
                }
                a2 = *(unsigned __int8 **)(v13 + 8);
                *(void *)uint64_t v13 = a2;
                goto LABEL_2918;
              case 2:
                if (v20 == -993)
                {
                  v1116 = *(unsigned __int8 **)v13;
                  uint64_t v1117 = __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
                  v1118 = (unsigned __int8 *)(*(void *)v13 + v1117);
                  if (*(void *)(v7 + 208) < (unint64_t)v1118 && (*v1116 == 120 || *v1118 == 120)) {
                    goto LABEL_2887;
                  }
                  goto LABEL_2674;
                }
                if (v20) {
                  goto LABEL_2451;
                }
                v1116 = *(unsigned __int8 **)v13;
                uint64_t v1117 = __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
LABEL_2887:
                a2 = &v1116[v1117];
                *(void *)uint64_t v13 = &v1116[v1117];
                if (v1116[v1117] == 120)
                {
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = *(_DWORD *)(v13 + 56);
LABEL_3257:
                  a2 += _pcre2_OP_lengths_8[*a2];
                  char v1316 = 2;
                  goto LABEL_3216;
                }
                goto LABEL_3189;
              case 3:
                if (v20 != -993 && v20)
                {
                  if (v20 == -999)
                  {
                    v1239 = v16;
                    v1240 = (unsigned __int8 *)a6;
                    cstdlib_memcpy((void *)(v13 + 128), v1355 + 16, 8 * v1355[15]);
                    *(void *)(v13 + 120) = v1355[15];
                    *(void *)(v13 + 96) = v1355[12];
                    v1241 = *(unsigned __int8 **)v13;
                    do
                    {
                      v1241 += __rev16(*(unsigned __int16 *)(v1241 + 1));
                      *(void *)uint64_t v13 = v1241;
                    }
                    while (*v1241 == 120);
                    *(void *)uint64_t v13 = v1241 + 3;
                    a6 = (uint64_t)v1240;
                    unsigned int v16 = v1239;
                    goto LABEL_2445;
                  }
                  goto LABEL_2451;
                }
                v1158 = *(unsigned __int8 **)v13;
                uint64_t v1159 = __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
                a2 = (unsigned __int8 *)(*(void *)v13 + v1159);
                *(void *)uint64_t v13 = a2;
                if (v1158[v1159] == 120)
                {
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = *(_DWORD *)(v13 + 56);
                  uint64_t v1308 = 0x78u;
LABEL_3225:
                  a2 += _pcre2_OP_lengths_8[v1308];
                  char v1316 = 3;
                  goto LABEL_3216;
                }
                goto LABEL_3189;
              case 4:
                if ((int)v20 <= -994)
                {
                  if (v20 == -999) {
                    goto LABEL_2749;
                  }
                  if ((v20 + 997) < 3)
                  {
                    a2 = *(unsigned __int8 **)v13;
                    do
                    {
                      a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
                      *(void *)uint64_t v13 = a2;
                    }
                    while (*a2 == 120);
LABEL_2450:
                    uint64_t v244 = (uint64_t)(a2 + 3);
                    goto LABEL_2444;
                  }
                  goto LABEL_2451;
                }
                if (v20 == 1) {
                  goto LABEL_2749;
                }
                if (v20 != -993 && v20) {
                  goto LABEL_2451;
                }
                a2 = (unsigned __int8 *)(*(void *)v13 + __rev16(*(unsigned __int16 *)(*(void *)v13 + 1)));
                *(void *)uint64_t v13 = a2;
                if (*a2 != 120) {
                  goto LABEL_2450;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                LODWORD(v11) = *(_DWORD *)(v13 + 56);
                uint64_t v1336 = 0x78u;
LABEL_3250:
                a2 += _pcre2_OP_lengths_8[v1336];
                char v1316 = 4;
LABEL_3216:
                *(unsigned char *)(v13 + 72) = v1316;
                int v10 = (unsigned __int8 *)(v13 + a6);
                if ((unint64_t)(v13 + a6) >= *(void *)(v7 + 40))
                {
                  unint64_t v1302 = *(void *)(v7 + 24);
                  unint64_t v1303 = 2 * v1302;
                  unint64_t v1304 = *(void *)(v7 + 56);
                  if (v1304 < (2 * v1302) >> 10)
                  {
                    unint64_t v1303 = (v1304 << 10) / a6 * a6;
                    if (v1302 >= v1303) {
                      return 4294967233;
                    }
                  }
                  v1301 = (unsigned __int8 *)a6;
                  v1305 = (char *)(*(uint64_t (**)(unint64_t, void))v7)(v1303, *(void *)(v7 + 16));
                  if (!v1305) {
                    return 4294967248;
                  }
                  v1306 = v1305;
                  cstdlib_memcpy(v1305, *(const void **)(v7 + 32), *(void *)(v7 + 24));
                  uint64_t v1307 = *(void *)(v7 + 32);
                  if (v1307 != *(void *)(v7 + 48)) {
                    (*(void (**)(void, void))(v7 + 8))(*(void *)(v7 + 32), *(void *)(v7 + 16));
                  }
                  *(void *)(v7 + 32) = v1306;
                  *(void *)(v7 + 40) = &v1306[v1303];
                  uint64_t v13 = (uint64_t)&v1306[v13 - v1307];
                  *(void *)(v7 + 24) = v1303;
                  int v10 = &v1301[v13];
                  size_t v1300 = __n;
                  v1299 = v15;
                }
                else
                {
                  v1299 = v15;
                  size_t v1300 = __n;
                  v1301 = (unsigned __int8 *)a6;
                }
                cstdlib_memcpy(v10 + 80, (const void *)(v13 + 80), v1300);
                unsigned int v9 = *(_DWORD *)(v13 + 48) + 1;
                *((_DWORD *)v10 + 12) = v9;
                uint64_t v13 = (uint64_t)v10;
                a6 = (uint64_t)v1301;
                unsigned int v16 = v1351;
                uint64_t v14 = v104;
                unsigned int v15 = v1299;
                goto LABEL_2;
              case 5:
                if ((int)v20 > -994)
                {
                  if (v20 == -993 || !v20)
                  {
                    v1195 = *(unsigned __int8 **)(v13 + 8);
                    uint64_t v1196 = __rev16(*(unsigned __int16 *)(v1195 + 1));
                    long long v106 = &v1195[v1196];
                    *(void *)(v13 + 8) = &v1195[v1196];
                    if (v1195[v1196] != 120)
                    {
LABEL_2914:
                      if (*(_DWORD *)(v13 + 56)) {
                        goto LABEL_2981;
                      }
                      goto LABEL_2915;
                    }
                    long long v104 = v14;
                    v1351 = v16;
                    unsigned int v1362 = v11;
                    unsigned int v1322 = **(unsigned __int8 **)v13;
                    unsigned int v1323 = 0x78u;
LABEL_3363:
                    LODWORD(v11) = v1322 | 0x30000;
                    a2 = &v106[_pcre2_OP_lengths_8[v1323]];
                    char v1316 = 5;
                    goto LABEL_3216;
                  }
                  if (v20 == 1) {
                    goto LABEL_2980;
                  }
                }
                else
                {
                  if ((v20 + 997) < 3) {
                    goto LABEL_2914;
                  }
                  if (v20 == -999)
                  {
                    v1218 = (unsigned __int8 *)a6;
                    v1219 = v16;
                    cstdlib_memcpy((void *)(v13 + 128), v1355 + 16, 8 * v1355[15]);
                    unsigned int v16 = v1219;
                    a6 = (uint64_t)v1218;
                    *(void *)(v13 + 120) = v1355[15];
LABEL_2980:
                    if (!*(_DWORD *)(v13 + 56))
                    {
LABEL_2981:
                      int64_t v103 = *(void *)(v13 + 24);
                      long long v106 = *(unsigned __int8 **)v13;
                      goto LABEL_2446;
                    }
LABEL_2915:
                    long long v106 = *(unsigned __int8 **)v13;
                    do
                    {
                      v106 += __rev16(*(unsigned __int16 *)(v106 + 1));
                      *(void *)uint64_t v13 = v106;
                      int v107 = *v106;
                    }
                    while (v107 == 120);
LABEL_2917:
                    int64_t v103 = _pcre2_OP_lengths_8[v107];
LABEL_2446:
                    a2 = &v106[v103];
                    *(void *)uint64_t v13 = &v106[v103];
                    if (*(unsigned __int8 *)(v13 + 73) == 140)
                    {
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      LODWORD(v11) = 131212;
                      char v1316 = 35;
                      goto LABEL_3216;
                    }
LABEL_2445:
                    a2 = *(unsigned __int8 **)v13;
                    goto LABEL_8;
                  }
                }
                break;
              case 6:
                if (v20) {
                  goto LABEL_2451;
                }
                uint64_t v244 = *(void *)v13 - __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
                goto LABEL_2444;
              case 7:
                if (v20) {
                  goto LABEL_2451;
                }
                a2 = *(unsigned __int8 **)v13;
                goto LABEL_2450;
              case 8:
                switch(v20)
                {
                  case 0xFFFFFC1F:
                    v1119 = *(unsigned __int8 **)v13;
                    uint64_t v1120 = __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
                    v1121 = (unsigned __int8 *)(*(void *)v13 + v1120);
                    if (*(void *)(v7 + 208) < (unint64_t)v1121 && (*v1119 == 120 || *v1121 == 120)) {
                      goto LABEL_2890;
                    }
LABEL_2674:
                    uint64_t v20 = 4294966303;
                    goto LABEL_2451;
                  case 0:
                    v1119 = *(unsigned __int8 **)v13;
                    uint64_t v1120 = __rev16(*(unsigned __int16 *)(*(void *)v13 + 1));
LABEL_2890:
                    v1193 = &v1119[v1120];
                    *(void *)uint64_t v13 = &v1119[v1120];
                    if (v1119[v1120] == 120)
                    {
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
LABEL_3299:
                      *(void *)(v13 + 8) = *(void *)(v13 + 80);
                      LODWORD(v11) = *(_DWORD *)(v13 + 56);
                      a2 = &v1193[_pcre2_OP_lengths_8[*v1193]];
                      char v1316 = 8;
                      goto LABEL_3216;
                    }
                    if (*(_DWORD *)(v13 + 60) || *(_DWORD *)(v13 + 64))
                    {
                      int v246 = &v1119[v1120];
                      goto LABEL_3030;
                    }
                    goto LABEL_3189;
                  case 0xFFFFFC1A:
                    *(_DWORD *)(v13 + 60) = 1;
                    if (*(void *)(v13 + 80) != *(void *)(v13 + 8))
                    {
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      v1193 = *(unsigned __int8 **)(v13 + 16);
                      *(void *)uint64_t v13 = v1193;
                      goto LABEL_3299;
                    }
                    int v246 = *(unsigned __int8 **)v13;
                    do
                    {
                      v246 += __rev16(*(unsigned __int16 *)(v246 + 1));
                      *(void *)uint64_t v13 = v246;
                    }
                    while (*v246 == 120);
LABEL_3030:
                    uint64_t v244 = (uint64_t)(v246 + 3);
LABEL_2444:
                    *(void *)uint64_t v13 = v244;
                    goto LABEL_2445;
                }
                goto LABEL_2451;
              case 9:
                if (v20) {
                  goto LABEL_2451;
                }
                int v246 = *(unsigned __int8 **)(v13 + 8);
                do
                {
                  v246 += __rev16(*(unsigned __int16 *)(v246 + 1));
                  *(void *)(v13 + 8) = v246;
                }
                while (*v246 == 120);
                goto LABEL_3030;
              case 0xA:
                if (!v20) {
                  goto LABEL_1168;
                }
                goto LABEL_2451;
              case 0xB:
                v1050 = *(unsigned __int8 **)(v13 + 8);
                v1051 = &v1050[__rev16(*(unsigned __int16 *)(v1050 + 1))];
                if ((v20 + 997) >= 5)
                {
                  if (!v20) {
                    goto LABEL_2898;
                  }
                  goto LABEL_2451;
                }
                if (*(_DWORD *)(v7 + 224) != (*(_DWORD *)(v13 + 56) ^ 0x40000)) {
                  goto LABEL_2451;
                }
                if (v20 == -993
                  && *(void *)(v7 + 208) < (unint64_t)v1051
                  && (*v1050 == 120 || *v1051 == 120))
                {
LABEL_2898:
                  *(void *)(v13 + 8) = v1051;
                  if (*v1051 == 120)
                  {
                    long long v104 = v14;
                    v1351 = v16;
                    unsigned int v1362 = v11;
                    LODWORD(v11) = *(_DWORD *)(v13 + 56);
                    uint64_t v1311 = 0x78u;
LABEL_3352:
                    a2 = &v1051[_pcre2_OP_lengths_8[v1311]];
                    char v1316 = 11;
                    goto LABEL_3216;
                  }
                }
                goto LABEL_3189;
              case 0xC:
                if (v20 != -994) {
                  goto LABEL_2451;
                }
                v1052 = v15;
                v1053 = v16;
                v1054 = (unsigned __int8 *)a6;
                if (_pcre2_strcmp_8((unsigned __int8 *)(*(void *)v13 + 2), *(unsigned __int8 **)(v7 + 216)))
                {
                  uint64_t v20 = 4294966302;
                  goto LABEL_2507;
                }
                *(void *)(v7 + 216) = *(void *)(v13 + 80);
                uint64_t v20 = 4294966301;
                a6 = (uint64_t)v1054;
                unsigned int v16 = v1053;
                goto LABEL_2451;
              case 0xD:
              case 0x24:
                if (!v20)
                {
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v13 + 104);
                  uint64_t v20 = 4294966299;
                }
                goto LABEL_2451;
              case 0xE:
              case 0xF:
                if (!v20)
                {
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v13 + 104);
                  uint64_t v20 = 4294966300;
                }
                goto LABEL_2451;
              case 0x10:
                if (!v20)
                {
                  *(void *)(v7 + 216) = *(void *)(v13 + 80);
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v13 + 104);
                  uint64_t v20 = 4294966301;
                }
                goto LABEL_2451;
              case 0x11:
                if (!v20)
                {
                  *(void *)(v7 + 216) = *(void *)v13 + 2;
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v13 + 104);
                  uint64_t v20 = 4294966302;
                }
                goto LABEL_2451;
              case 0x12:
              case 0x13:
                if (!v20)
                {
                  *(void *)(v7 + 208) = *(void *)v13;
                  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v13 + 104);
                  uint64_t v20 = 4294966303;
                }
                goto LABEL_2451;
              case 0x14:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1160 = *(_DWORD *)(v13 + 56);
                unsigned int v1161 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1160 + 1;
                if (v1160 >= v1161) {
                  goto LABEL_3189;
                }
                long long v104 = v14;
                v1351 = v16;
                v1162 = (unsigned __int8 *)a6;
                int matched = match_ref(*(void *)(v13 + 40), *(_DWORD *)(v13 + 64), v13, v7, &v1365);
                if (!matched)
                {
                  unsigned int v1362 = v11;
                  *(void *)(v13 + 80) += v1365;
                  a6 = (uint64_t)v1162;
LABEL_3241:
                  LODWORD(v11) = 0;
                  v1365 = 0;
                  a2 = *(unsigned __int8 **)v13;
                  char v1316 = 20;
                  goto LABEL_3216;
                }
                a6 = (uint64_t)v1162;
                unsigned int v16 = v1351;
                if (matched >= 1) {
                  *(void *)(v13 + 80) = *v15;
                }
                unsigned int v230 = (unsigned __int16)*v1351;
                if (*v1351)
                {
                  v1164 = *(unsigned __int8 **)(v13 + 80);
                  if ((unint64_t)v1164 >= *v15) {
                    goto LABEL_2878;
                  }
                }
                goto LABEL_3189;
              case 0x15:
                if (v20) {
                  goto LABEL_2451;
                }
                v582 = (unsigned __int8 *)(*(void *)(v13 + 80) - *(void *)(v13 + 24));
                *(void *)(v13 + 80) = v582;
                goto LABEL_2922;
              case 0x16:
                if (v20) {
                  goto LABEL_2451;
                }
                v1055 = *(unsigned __int8 **)(v13 + 8);
                if (*(unsigned __int8 **)(v13 + 80) == v1055) {
                  goto LABEL_2451;
                }
                long long v104 = v14;
                v1351 = v16;
                *(void *)(v13 + 80) = v1055;
                unsigned int v1328 = *(_DWORD *)(v13 + 56);
                unsigned int v1329 = *(_DWORD *)(v13 + 60) - 1;
                *(_DWORD *)(v13 + 60) = v1329;
                unsigned int v1362 = v11;
                if (v1328 < v1329)
                {
                  v1330 = (unsigned __int8 *)a6;
                  do
                  {
                    v1366 = 0;
                    match_ref(*(void *)(v13 + 40), *(_DWORD *)(v13 + 64), v13, v7, &v1366);
                    *(void *)(v13 + 80) += v1366;
                    ++v1328;
                  }
                  while (v1328 < *(_DWORD *)(v13 + 60));
                  a6 = (uint64_t)v1330;
                }
                goto LABEL_3360;
              case 0x17:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1056 = *(_DWORD *)(v13 + 56);
                unsigned int v1057 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1056 + 1;
                if (v1056 >= v1057) {
                  goto LABEL_2749;
                }
                v1058 = *(unsigned __int8 **)(v13 + 80);
                if ((unint64_t)v1058 >= *v15) {
                  goto LABEL_2653;
                }
                *(void *)(v13 + 80) = v1058 + 1;
                if (((*(unsigned __int8 *)(*(void *)(v13 + 16) + ((unint64_t)*v1058 >> 3)) >> (*v1058 & 7)) & 1) == 0) {
                  goto LABEL_2749;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                uint64_t v79 = *(unsigned __int8 **)v13;
                goto LABEL_3262;
              case 0x18:
                if (v20) {
                  goto LABEL_2451;
                }
                v504 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                *(void *)(v13 + 80) = v504;
                int v346 = *(unsigned __int8 **)(v13 + 8);
                goto LABEL_2924;
              case 0x19:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1059 = *(_DWORD *)(v13 + 56);
                unsigned int v1060 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1059 + 1;
                if (v1059 >= v1060) {
                  goto LABEL_2749;
                }
                v1058 = *(unsigned __int8 **)(v13 + 80);
                if ((unint64_t)v1058 >= *v15) {
                  goto LABEL_2653;
                }
                int v1061 = *v1058;
                if (*(_DWORD *)(v13 + 64) != v1061 && *(_DWORD *)(v13 + 68) != v1061) {
                  goto LABEL_2749;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                LODWORD(v11) = 0;
                *(void *)(v13 + 80) = v1058 + 1;
                a2 = *(unsigned __int8 **)v13;
                goto LABEL_3247;
              case 0x1A:
                int v62 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                *(void *)(v13 + 80) = v62;
                if (v20) {
                  goto LABEL_2451;
                }
                BOOL v61 = *(unsigned __int8 **)(v13 + 8);
                goto LABEL_2926;
              case 0x1B:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1062 = *(_DWORD *)(v13 + 56);
                unsigned int v1063 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1062 + 1;
                if (v1062 >= v1063) {
                  goto LABEL_2749;
                }
                v1058 = *(unsigned __int8 **)(v13 + 80);
                if ((unint64_t)v1058 >= *v15) {
                  goto LABEL_2653;
                }
                int v1064 = *(_DWORD *)(v13 + 64);
                *(void *)(v13 + 80) = v1058 + 1;
                if (v1064 != *v1058) {
                  goto LABEL_2749;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                LODWORD(v11) = 0;
                a2 = *(unsigned __int8 **)v13;
                goto LABEL_3264;
              case 0x1C:
                int v72 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                *(void *)(v13 + 80) = v72;
                if (v20) {
                  goto LABEL_2451;
                }
                int v71 = *(unsigned __int8 **)(v13 + 8);
                goto LABEL_2928;
              case 0x1D:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1065 = *(_DWORD *)(v13 + 56);
                unsigned int v1066 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1065 + 1;
                if (v1065 >= v1066) {
                  goto LABEL_2749;
                }
                v1058 = *(unsigned __int8 **)(v13 + 80);
                if ((unint64_t)v1058 >= *v15) {
                  goto LABEL_2653;
                }
                int v1067 = *v1058;
                if (*(_DWORD *)(v13 + 64) == v1067 || *(_DWORD *)(v13 + 68) == v1067) {
                  goto LABEL_2749;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                *(void *)(v13 + 80) = v1058 + 1;
                a2 = *(unsigned __int8 **)v13;
                goto LABEL_3321;
              case 0x1E:
                if (v20) {
                  goto LABEL_2451;
                }
                uint64_t v302 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                *(void *)(v13 + 80) = v302;
                unsigned int v288 = *(unsigned __int8 **)(v13 + 8);
                goto LABEL_2930;
              case 0x1F:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1068 = *(_DWORD *)(v13 + 56);
                unsigned int v1069 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1068 + 1;
                if (v1068 >= v1069) {
                  goto LABEL_2749;
                }
                v1058 = *(unsigned __int8 **)(v13 + 80);
                if ((unint64_t)v1058 >= *v15) {
                  goto LABEL_2653;
                }
                int v1070 = *(_DWORD *)(v13 + 64);
                *(void *)(v13 + 80) = v1058 + 1;
                if (v1070 == *v1058) {
                  goto LABEL_2749;
                }
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                a2 = *(unsigned __int8 **)v13;
                goto LABEL_3265;
              case 0x20:
                if (v20) {
                  goto LABEL_2451;
                }
                char v299 = (unsigned __int8 *)(*(void *)(v13 + 80) - 1);
                *(void *)(v13 + 80) = v299;
                int v268 = *(unsigned __int8 **)(v13 + 8);
                goto LABEL_2932;
              case 0x21:
                if (v20) {
                  goto LABEL_2451;
                }
                unsigned int v1071 = *(_DWORD *)(v13 + 56);
                unsigned int v1072 = *(_DWORD *)(v13 + 60);
                *(_DWORD *)(v13 + 56) = v1071 + 1;
                if (v1071 >= v1072) {
                  goto LABEL_3189;
                }
                v1073 = *(unsigned __int8 **)(v13 + 80);
                uint64_t v1074 = *v15;
                if ((unint64_t)v1073 >= *v15)
                {
                  unsigned int v328 = (unsigned __int16)*v16;
                  if (!*v16 || (unint64_t)v1073 <= *v14) {
                    goto LABEL_3189;
                  }
                  goto LABEL_2902;
                }
                int v1075 = *(_DWORD *)(v13 + 64);
                if (v1075 != 12) {
                  goto LABEL_2563;
                }
                int v1076 = *(_DWORD *)(v7 + 244);
                if (v1076)
                {
                  v1052 = v15;
                  v1053 = v16;
                  v1054 = (unsigned __int8 *)a6;
                  if (_pcre2_is_newline_8(*(unsigned __int8 **)(v13 + 80), v1076, v1074, v1356, v1361))
                  {
LABEL_2639:
                    uint64_t v20 = 0;
LABEL_2507:
                    a6 = (uint64_t)v1054;
                    unsigned int v16 = v1053;
                    unsigned int v15 = v1052;
                    goto LABEL_2451;
                  }
                  int v1075 = *(_DWORD *)(v13 + 64);
                  v1073 = *(unsigned __int8 **)(v13 + 80);
                  a6 = (uint64_t)v1054;
                  unsigned int v16 = v1053;
LABEL_2563:
                  *(void *)(v13 + 80) = v1073 + 1;
                  uint64_t v19 = 4294967252;
                  int v1077 = v1075 - 6;
                  uint64_t v1078 = *v1073;
                  switch(v1077)
                  {
                    case 0:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1078) & 4) == 0) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 1:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1078) & 4) != 0) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 2:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1078) & 1) == 0) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 3:
                      if (*(unsigned char *)(*(void *)(v7 + 104) + v1078)) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 4:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1078) & 0x10) == 0) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 5:
                      if ((*(unsigned char *)(*(void *)(v7 + 104) + v1078) & 0x10) != 0) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 6:
                      v1325 = v1073 + 1;
                      goto LABEL_3326;
                    case 7:
                    case 8:
                      goto LABEL_3390;
                    case 11:
                      uint64_t v20 = 0;
                      if (*v1073 <= 0xCu)
                      {
                        if ((v1078 - 11) >= 2)
                        {
                          if (v1078 == 10) {
                            goto LABEL_3390;
                          }
                          goto LABEL_2451;
                        }
LABEL_3097:
                        if (*(_WORD *)(v7 + 130) != 2) {
                          goto LABEL_3390;
                        }
                        goto LABEL_3189;
                      }
                      if (v1078 == 133) {
                        goto LABEL_3097;
                      }
                      if (v1078 == 13)
                      {
                        if ((unint64_t)(v1073 + 1) < *v15 && v1073[1] == 10) {
                          *(void *)(v13 + 80) = v1073 + 2;
                        }
                        goto LABEL_3390;
                      }
                      break;
                    case 12:
                      uint64_t v20 = 0;
                      if (v1078 != 9 && v1078 != 32 && v1078 != 160) {
                        goto LABEL_3390;
                      }
                      goto LABEL_2451;
                    case 13:
                      if (v1078 == 9 || v1078 == 32 || v1078 == 160) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    case 14:
                      uint64_t v20 = 0;
                      if ((v1078 - 10) >= 4 && v1078 != 133) {
                        goto LABEL_3390;
                      }
                      goto LABEL_2451;
                    case 15:
                      if ((v1078 - 10) < 4 || v1078 == 133) {
                        goto LABEL_3390;
                      }
                      goto LABEL_3189;
                    default:
                      return v19;
                  }
                  goto LABEL_2451;
                }
                uint64_t v1238 = *v1356;
                if ((unint64_t)v1073 > v1074 - v1238
                  || *v1073 != *(unsigned __int8 *)(v7 + 252)
                  || v1238 != 1 && v1073[1] != *(unsigned __int8 *)(v7 + 253))
                {
                  v1325 = v1073 + 1;
                  *(void *)(v13 + 80) = v1073 + 1;
                  LODWORD(v1078) = *v1073;
LABEL_3326:
                  unsigned int v1326 = (unsigned __int16)*v16;
                  if (*v16)
                  {
                    if ((unint64_t)v1325 >= *v15
                      && !*(_DWORD *)(v7 + 244)
                      && *v1356 == 2
                      && v1078 == *(unsigned __int8 *)(v7 + 252))
                    {
                      _DWORD *v1360 = 1;
                      if (v1326 > 1) {
                        return 4294967294;
                      }
                    }
                  }
                  goto LABEL_3390;
                }
                goto LABEL_3189;
              case 0x22:
                if (v20) {
                  goto LABEL_2451;
                }
                v1198 = *(unsigned __int8 **)(v13 + 80);
                v1014 = v1198 - 1;
                *(void *)(v13 + 80) = v1198 - 1;
                if (*(_DWORD *)(v13 + 64) == 17 && (unint64_t)v1014 > *(void *)(v13 + 8) && *v1014 == 10)
                {
                  int v1200 = *(v1198 - 2);
                  v1199 = v1198 - 2;
                  if (v1200 == 13)
                  {
                    *(void *)(v13 + 80) = v1199;
                    v1014 = v1199;
                  }
                }
                goto LABEL_2939;
              case 0x23:
                goto LABEL_2451;
              default:
                return v19;
            }
          }
        }
        if (v1364)
        {
          uint64_t v19 = 4294967252;
          switch(v189)
          {
            case 6:
              unint64_t v217 = *v15;
              uint64_t v218 = *(unsigned __int8 **)(v13 + 80);
              for (unsigned int i = 1; i <= v34; ++i)
              {
                if ((unint64_t)v218 >= v217) {
                  goto LABEL_1777;
                }
                *(void *)(v13 + 80) = v218 + 1;
                unsigned int v220 = *v218;
                if (v220 < 0xC0)
                {
                  ++v218;
                }
                else if ((v220 & 0x20) != 0)
                {
                  int v222 = v218[1] & 0x3F;
                  if ((v220 & 0x10) != 0)
                  {
                    if ((v220 & 8) != 0)
                    {
                      int v223 = v218[2] & 0x3F;
                      int v224 = v218[3] & 0x3F;
                      int v225 = v218[4] & 0x3F;
                      if ((v220 & 4) != 0)
                      {
                        unsigned int v220 = ((v220 & 1) << 30) | (v222 << 24) | (v223 << 18) | (v224 << 12) | (v225 << 6) | v218[5] & 0x3F;
                        v218 += 6;
                      }
                      else
                      {
                        unsigned int v220 = ((v220 & 3) << 24) | (v222 << 18) | (v223 << 12) | (v224 << 6) | v225;
                        v218 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v220 = ((v220 & 7) << 18) | (v222 << 12) | ((v218[2] & 0x3F) << 6) | v218[3] & 0x3F;
                      v218 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v220 = ((v220 & 0xF) << 12) | (v222 << 6) | v218[2] & 0x3F;
                    v218 += 3;
                  }
                  *(void *)(v13 + 80) = v218;
                }
                else
                {
                  *(void *)(v13 + 80) = v218 + 2;
                  int v221 = v218[1] & 0x3F | ((v220 & 0x1F) << 6);
                  v218 += 2;
                  unsigned int v220 = v221;
                }
                if (v220 <= 0x7F && (*(unsigned char *)(*(void *)(v7 + 104) + v220) & 4) != 0) {
                  goto LABEL_2925;
                }
                int v191 = -1;
              }
              goto LABEL_1340;
            case 7:
              uint64_t v629 = 0;
              unint64_t v630 = *v15;
              v631 = *(unsigned __int8 **)(v13 + 80);
              do
              {
                uint64_t v229 = &v631[v629];
                if ((unint64_t)&v631[v629] >= v630) {
                  goto LABEL_1227;
                }
                int v632 = (char)*v229;
                if (v632 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v632) & 4) == 0) {
                  goto LABEL_2925;
                }
                *(void *)(v13 + 80) = &v631[++v629];
                int v191 = -1;
              }
              while ((int)v629 + 1 <= v34);
              goto LABEL_1340;
            case 8:
              unint64_t v633 = *v15;
              v634 = *(unsigned __int8 **)(v13 + 80);
              for (unsigned int j = 1; j <= v34; ++j)
              {
                if ((unint64_t)v634 >= v633) {
                  goto LABEL_1812;
                }
                if ((char)*v634 & 0x80000000) == 0 && (*(unsigned char *)(*(void *)(v7 + 104) + *v634)) {
                  goto LABEL_2925;
                }
                v636 = v634 + 1;
                do
                {
                  v634 = v636;
                  *(void *)(v13 + 80) = v636;
                  if ((unint64_t)v636 >= v633) {
                    break;
                  }
                  ++v636;
                }
                while ((*v634 & 0xC0) == 0x80);
                int v191 = -1;
              }
              goto LABEL_1340;
            case 9:
              uint64_t v637 = 0;
              unint64_t v638 = *v15;
              v639 = *(unsigned __int8 **)(v13 + 80);
              do
              {
                uint64_t v229 = &v639[v637];
                if ((unint64_t)&v639[v637] >= v638) {
                  goto LABEL_1227;
                }
                int v640 = (char)*v229;
                if (v640 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v640) & 1) == 0) {
                  goto LABEL_2925;
                }
                *(void *)(v13 + 80) = &v639[++v637];
                int v191 = -1;
              }
              while ((int)v637 + 1 <= v34);
              goto LABEL_1340;
            case 10:
              unint64_t v641 = *v15;
              v634 = *(unsigned __int8 **)(v13 + 80);
              unsigned int v642 = 1;
              while ((unint64_t)v634 < v641)
              {
                if (((char)*v634 & 0x80000000) == 0 && (*(unsigned char *)(*(void *)(v7 + 104) + *v634) & 0x10) != 0) {
                  goto LABEL_2925;
                }
                v643 = v634 + 1;
                do
                {
                  v634 = v643;
                  *(void *)(v13 + 80) = v643;
                  if ((unint64_t)v643 >= v641) {
                    break;
                  }
                  ++v643;
                }
                while ((*v634 & 0xC0) == 0x80);
                ++v642;
                int v191 = -1;
                if (v642 > v34) {
                  goto LABEL_1340;
                }
              }
LABEL_1812:
              unsigned int v358 = (unsigned __int16)*v16;
              if (!*v16 || (unint64_t)v634 <= *v14) {
                goto LABEL_2925;
              }
              goto LABEL_1229;
            case 11:
              uint64_t v644 = 0;
              unint64_t v645 = *v15;
              v646 = *(unsigned __int8 **)(v13 + 80);
              while (1)
              {
                uint64_t v229 = &v646[v644];
                if ((unint64_t)&v646[v644] >= v645) {
                  break;
                }
                int v647 = (char)*v229;
                if (v647 < 0 || (*(unsigned char *)(*(void *)(v7 + 104) + v647) & 0x10) == 0) {
                  goto LABEL_2925;
                }
                *(void *)(v13 + 80) = &v646[++v644];
                int v191 = -1;
                if ((int)v644 + 1 > v34) {
                  goto LABEL_1340;
                }
              }
LABEL_1227:
              unsigned int v358 = (unsigned __int16)*v16;
              if (!*v16) {
                goto LABEL_2925;
              }
              goto LABEL_1228;
            case 12:
              uint64_t v648 = v11;
              v649 = *(unsigned __int8 **)(v13 + 80);
              unint64_t v650 = *v15;
              unsigned int v651 = 1;
              while ((unint64_t)v649 < v650)
              {
                int v652 = *(_DWORD *)(v7 + 244);
                if (v652)
                {
                  v602 = v15;
                  v603 = v14;
                  v604 = v16;
                  v605 = (unsigned __int8 *)a6;
                  if (_pcre2_is_newline_8(v649, v652, v650, v1356, v1361))
                  {
                    uint64_t v20 = 0;
                    uint64_t v11 = v648;
                    goto LABEL_2268;
                  }
                  v649 = *(unsigned __int8 **)(v13 + 80);
                  unint64_t v650 = *v15;
                  a6 = (uint64_t)v605;
                  unsigned int v16 = v604;
                  uint64_t v14 = v603;
                }
                else
                {
                  uint64_t v653 = *v1356;
                  if ((unint64_t)v649 <= v650 - v653
                    && *v649 == *(unsigned __int8 *)(v7 + 252)
                    && (v653 == 1 || v649[1] == *(unsigned __int8 *)(v7 + 253)))
                  {
                    goto LABEL_2410;
                  }
                }
                unsigned int v654 = (unsigned __int16)*v16;
                v655 = v649 + 1;
                if (*v16)
                {
                  if ((unint64_t)v655 >= v650
                    && !*(_DWORD *)(v7 + 244)
                    && *v1356 == 2
                    && *v649 == *(unsigned __int8 *)(v7 + 252))
                  {
                    _DWORD *v1360 = 1;
                    if (v654 > 1) {
                      return 4294967294;
                    }
                  }
                }
                do
                {
                  v649 = v655;
                  *(void *)(v13 + 80) = v655;
                  if ((unint64_t)v655 >= v650) {
                    break;
                  }
                  ++v655;
                }
                while ((*v649 & 0xC0) == 0x80);
                ++v651;
                int v191 = -1;
                if (v651 > *v188)
                {
                  uint64_t v11 = v648;
                  goto LABEL_1340;
                }
              }
              unsigned int v358 = (unsigned __int16)*v16;
              if (!*v16)
              {
LABEL_2410:
                uint64_t v20 = 0;
                uint64_t v11 = v648;
                goto LABEL_2451;
              }
              uint64_t v11 = v648;
              if ((unint64_t)v649 <= *v14) {
                goto LABEL_2925;
              }
              goto LABEL_1229;
            case 13:
              unint64_t v656 = *v15;
              uint64_t v218 = *(unsigned __int8 **)(v13 + 80);
              for (unsigned int k = 1; k <= v34; ++k)
              {
                if ((unint64_t)v218 >= v656) {
                  goto LABEL_1777;
                }
                v658 = v218 + 1;
                do
                {
                  uint64_t v218 = v658;
                  *(void *)(v13 + 80) = v658;
                  if ((unint64_t)v658 >= v656) {
                    break;
                  }
                  ++v658;
                }
                while ((*v218 & 0xC0) == 0x80);
                int v191 = -1;
              }
              goto LABEL_1340;
            case 14:
              uint64_t v229 = *(unsigned __int8 **)(v13 + 80);
              if ((unint64_t)v229 <= *v15 - v34) {
                goto LABEL_1338;
              }
              goto LABEL_2925;
            case 17:
              unint64_t v784 = *v15;
              v609 = *(unsigned __int8 **)(v13 + 80);
              unsigned int v785 = 1;
              while (1)
              {
                if ((unint64_t)v609 >= v784)
                {
LABEL_1815:
                  unsigned int v358 = (unsigned __int16)*v16;
                  if (!*v16 || (unint64_t)v609 <= *v14) {
                    goto LABEL_2925;
                  }
                  goto LABEL_1229;
                }
                v786 = v609 + 1;
                *(void *)(v13 + 80) = v609 + 1;
                int v787 = *v609;
                if (v787 >= 0xC0)
                {
                  if ((v787 & 0x20) != 0)
                  {
                    int v788 = *v786 & 0x3F;
                    if ((v787 & 0x10) != 0)
                    {
                      if ((v787 & 8) != 0)
                      {
                        int v789 = v609[2] & 0x3F;
                        int v790 = v609[3] & 0x3F;
                        int v791 = v609[4] & 0x3F;
                        if ((v787 & 4) != 0)
                        {
                          int v787 = ((v787 & 1) << 30) | (v788 << 24) | (v789 << 18) | (v790 << 12) | (v791 << 6) | v609[5] & 0x3F;
                          v786 = v609 + 6;
                        }
                        else
                        {
                          int v787 = ((v787 & 3) << 24) | (v788 << 18) | (v789 << 12) | (v790 << 6) | v791;
                          v786 = v609 + 5;
                        }
                      }
                      else
                      {
                        int v787 = ((v787 & 7) << 18) | (v788 << 12) | ((v609[2] & 0x3F) << 6) | v609[3] & 0x3F;
                        v786 = v609 + 4;
                      }
                    }
                    else
                    {
                      int v787 = ((v787 & 0xF) << 12) | (v788 << 6) | v609[2] & 0x3F;
                      v786 = v609 + 3;
                    }
                    *(void *)(v13 + 80) = v786;
                  }
                  else
                  {
                    v786 = v609 + 2;
                    *(void *)(v13 + 80) = v609 + 2;
                    int v787 = v609[1] & 0x3F | ((v787 & 0x1F) << 6);
                  }
                }
                if (v787 <= 12) {
                  break;
                }
                if ((v787 - 8232) < 2 || v787 == 133) {
                  goto LABEL_1666;
                }
                if (v787 != 13) {
                  goto LABEL_2925;
                }
                if ((unint64_t)v786 < v784 && *v786 == 10) {
                  *(void *)(v13 + 80) = ++v786;
                }
LABEL_1667:
                ++v785;
                int v191 = -1;
                v609 = v786;
                if (v785 > v34) {
                  goto LABEL_1340;
                }
              }
              if ((v787 - 11) >= 2)
              {
                if (v787 != 10) {
                  goto LABEL_2925;
                }
                goto LABEL_1667;
              }
LABEL_1666:
              if (*(_WORD *)(v7 + 130) == 2) {
                goto LABEL_2925;
              }
              goto LABEL_1667;
            case 18:
              unint64_t v792 = *v15;
              v793 = *(unsigned __int8 **)(v13 + 80);
              for (unsigned int m = 1; m <= v34; ++m)
              {
                if ((unint64_t)v793 >= v792)
                {
                  unsigned int v1043 = (unsigned __int16)*v16;
                  if (*v16)
                  {
                    if ((unint64_t)v793 <= *v14)
                    {
                      uint64_t v20 = 0;
                      goto LABEL_2451;
                    }
                    _DWORD *v1360 = 1;
                    if (v1043 <= 1)
                    {
                      uint64_t v20 = 0;
                      goto LABEL_2451;
                    }
                    return 4294967294;
                  }
                  goto LABEL_2925;
                }
                *(void *)(v13 + 80) = v793 + 1;
                int v795 = *v793;
                if (v795 < 0xC0)
                {
                  ++v793;
                }
                else if ((v795 & 0x20) != 0)
                {
                  int v797 = v793[1] & 0x3F;
                  if ((v795 & 0x10) != 0)
                  {
                    if ((v795 & 8) != 0)
                    {
                      int v798 = v793[2] & 0x3F;
                      int v799 = v793[3] & 0x3F;
                      int v800 = v793[4] & 0x3F;
                      if ((v795 & 4) != 0)
                      {
                        int v795 = ((v795 & 1) << 30) | (v797 << 24) | (v798 << 18) | (v799 << 12) | (v800 << 6) | v793[5] & 0x3F;
                        v793 += 6;
                      }
                      else
                      {
                        int v795 = ((v795 & 3) << 24) | (v797 << 18) | (v798 << 12) | (v799 << 6) | v800;
                        v793 += 5;
                      }
                    }
                    else
                    {
                      int v795 = ((v795 & 7) << 18) | (v797 << 12) | ((v793[2] & 0x3F) << 6) | v793[3] & 0x3F;
                      v793 += 4;
                    }
                  }
                  else
                  {
                    int v795 = ((v795 & 0xF) << 12) | (v797 << 6) | v793[2] & 0x3F;
                    v793 += 3;
                  }
                  *(void *)(v13 + 80) = v793;
                }
                else
                {
                  *(void *)(v13 + 80) = v793 + 2;
                  int v796 = v793[1] & 0x3F | ((v795 & 0x1F) << 6);
                  v793 += 2;
                  int v795 = v796;
                }
                if (v795 < 0x2000)
                {
                  if (v795 <= 159)
                  {
                    if (v795 == 9 || v795 == 32) {
                      goto LABEL_1172;
                    }
                  }
                  else if (v795 == 160 || v795 == 5760 || v795 == 6158)
                  {
                    goto LABEL_1172;
                  }
                }
                else if (v795 > 8238)
                {
                  if (v795 == 8239 || v795 == 8287 || v795 == 12288) {
                    goto LABEL_1172;
                  }
                }
                else if ((v795 - 0x2000) < 0xB)
                {
                  goto LABEL_1172;
                }
                int v191 = -1;
              }
              goto LABEL_1340;
            case 19:
              unint64_t v801 = *v15;
              v802 = *(unsigned __int8 **)(v13 + 80);
              unsigned int v803 = 1;
              break;
            case 20:
              unint64_t v811 = *v15;
              uint64_t v218 = *(unsigned __int8 **)(v13 + 80);
              for (unsigned int n = 1; n <= v34; ++n)
              {
                if ((unint64_t)v218 >= v811) {
                  goto LABEL_1777;
                }
                *(void *)(v13 + 80) = v218 + 1;
                unsigned int v813 = *v218;
                if (v813 < 0xC0)
                {
                  ++v218;
                }
                else if ((v813 & 0x20) != 0)
                {
                  int v815 = v218[1] & 0x3F;
                  if ((v813 & 0x10) != 0)
                  {
                    if ((v813 & 8) != 0)
                    {
                      int v816 = v218[2] & 0x3F;
                      int v817 = v218[3] & 0x3F;
                      int v818 = v218[4] & 0x3F;
                      if ((v813 & 4) != 0)
                      {
                        unsigned int v813 = ((v813 & 1) << 30) | (v815 << 24) | (v816 << 18) | (v817 << 12) | (v818 << 6) | v218[5] & 0x3F;
                        v218 += 6;
                      }
                      else
                      {
                        unsigned int v813 = ((v813 & 3) << 24) | (v815 << 18) | (v816 << 12) | (v817 << 6) | v818;
                        v218 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v813 = ((v813 & 7) << 18) | (v815 << 12) | ((v218[2] & 0x3F) << 6) | v218[3] & 0x3F;
                      v218 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v813 = ((v813 & 0xF) << 12) | (v815 << 6) | v218[2] & 0x3F;
                    v218 += 3;
                  }
                  *(void *)(v13 + 80) = v218;
                }
                else
                {
                  *(void *)(v13 + 80) = v218 + 2;
                  int v814 = v218[1] & 0x3F | ((v813 & 0x1F) << 6);
                  v218 += 2;
                  unsigned int v813 = v814;
                }
                BOOL v819 = v813 - 10 >= 4 && v813 - 8232 >= 2;
                if (!v819 || v813 == 133) {
                  goto LABEL_1172;
                }
                int v191 = -1;
              }
              goto LABEL_1340;
            case 21:
              unint64_t v820 = *v15;
              uint64_t v218 = *(unsigned __int8 **)(v13 + 80);
              for (iunsigned int i = 1; ii <= v34; ++ii)
              {
                if ((unint64_t)v218 >= v820)
                {
LABEL_1777:
                  unsigned int v358 = (unsigned __int16)*v16;
                  if (!*v16 || (unint64_t)v218 <= *v14) {
                    goto LABEL_2925;
                  }
                  goto LABEL_1229;
                }
                *(void *)(v13 + 80) = v218 + 1;
                unsigned int v822 = *v218;
                if (v822 < 0xC0)
                {
                  ++v218;
                }
                else if ((v822 & 0x20) != 0)
                {
                  int v824 = v218[1] & 0x3F;
                  if ((v822 & 0x10) != 0)
                  {
                    if ((v822 & 8) != 0)
                    {
                      int v825 = v218[2] & 0x3F;
                      int v826 = v218[3] & 0x3F;
                      int v827 = v218[4] & 0x3F;
                      if ((v822 & 4) != 0)
                      {
                        unsigned int v822 = ((v822 & 1) << 30) | (v824 << 24) | (v825 << 18) | (v826 << 12) | (v827 << 6) | v218[5] & 0x3F;
                        v218 += 6;
                      }
                      else
                      {
                        unsigned int v822 = ((v822 & 3) << 24) | (v824 << 18) | (v825 << 12) | (v826 << 6) | v827;
                        v218 += 5;
                      }
                    }
                    else
                    {
                      unsigned int v822 = ((v822 & 7) << 18) | (v824 << 12) | ((v218[2] & 0x3F) << 6) | v218[3] & 0x3F;
                      v218 += 4;
                    }
                  }
                  else
                  {
                    unsigned int v822 = ((v822 & 0xF) << 12) | (v824 << 6) | v218[2] & 0x3F;
                    v218 += 3;
                  }
                  *(void *)(v13 + 80) = v218;
                }
                else
                {
                  *(void *)(v13 + 80) = v218 + 2;
                  int v823 = v218[1] & 0x3F | ((v822 & 0x1F) << 6);
                  v218 += 2;
                  unsigned int v822 = v823;
                }
                BOOL v828 = v822 - 10 >= 4 && v822 - 8232 >= 2;
                if (v828 && v822 != 133) {
                  goto LABEL_1172;
                }
                int v191 = -1;
              }
              goto LABEL_1340;
            default:
              return v19;
          }
          while (1)
          {
            if ((unint64_t)v802 >= v801)
            {
              unsigned int v358 = (unsigned __int16)*v16;
              if (!*v16 || (unint64_t)v802 <= *v14) {
                goto LABEL_2925;
              }
              goto LABEL_1229;
            }
            *(void *)(v13 + 80) = v802 + 1;
            int v804 = *v802;
            if (v804 < 0xC0)
            {
              ++v802;
            }
            else if ((v804 & 0x20) != 0)
            {
              int v806 = v802[1] & 0x3F;
              if ((v804 & 0x10) != 0)
              {
                if ((v804 & 8) != 0)
                {
                  int v807 = v802[2] & 0x3F;
                  int v808 = v802[3] & 0x3F;
                  int v809 = v802[4] & 0x3F;
                  if ((v804 & 4) != 0)
                  {
                    int v804 = ((v804 & 1) << 30) | (v806 << 24) | (v807 << 18) | (v808 << 12) | (v809 << 6) | v802[5] & 0x3F;
                    v802 += 6;
                  }
                  else
                  {
                    int v804 = ((v804 & 3) << 24) | (v806 << 18) | (v807 << 12) | (v808 << 6) | v809;
                    v802 += 5;
                  }
                }
                else
                {
                  int v804 = ((v804 & 7) << 18) | (v806 << 12) | ((v802[2] & 0x3F) << 6) | v802[3] & 0x3F;
                  v802 += 4;
                }
              }
              else
              {
                int v804 = ((v804 & 0xF) << 12) | (v806 << 6) | v802[2] & 0x3F;
                v802 += 3;
              }
              *(void *)(v13 + 80) = v802;
            }
            else
            {
              *(void *)(v13 + 80) = v802 + 2;
              int v805 = v802[1] & 0x3F | ((v804 & 0x1F) << 6);
              v802 += 2;
              int v804 = v805;
            }
            if (v804 < 0x2000)
            {
              if (v804 <= 159)
              {
                if (v804 != 9 && v804 != 32) {
                  goto LABEL_1172;
                }
              }
              else if (v804 != 160 && v804 != 5760)
              {
                int v810 = 6158;
                goto LABEL_1728;
              }
            }
            else
            {
              if (v804 <= 8238)
              {
                if ((v804 - 0x2000) >= 0xB) {
                  goto LABEL_1172;
                }
                goto LABEL_1719;
              }
              if (v804 != 8239 && v804 != 12288)
              {
                int v810 = 8287;
LABEL_1728:
                if (v804 != v810) {
                  goto LABEL_1172;
                }
              }
            }
LABEL_1719:
            ++v803;
            int v191 = -1;
            if (v803 > v34) {
              goto LABEL_1340;
            }
          }
        }
        uint64_t v19 = 4294967252;
        switch(v189)
        {
          case 6:
            uint64_t v226 = 0;
            unint64_t v227 = *v15;
            int v228 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v228[v226];
              if ((unint64_t)&v228[v226] >= v227) {
                goto LABEL_1227;
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v229) & 4) != 0) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v228[++v226];
              int v191 = -1;
            }
            while ((int)v226 + 1 <= v34);
            goto LABEL_1340;
          case 7:
            uint64_t v583 = 0;
            unint64_t v584 = *v15;
            v585 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v585[v583];
              if ((unint64_t)&v585[v583] >= v584) {
                goto LABEL_1227;
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v229) & 4) == 0) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v585[++v583];
              int v191 = -1;
            }
            while ((int)v583 + 1 <= v34);
            goto LABEL_1340;
          case 8:
            uint64_t v586 = 0;
            unint64_t v587 = *v15;
            v588 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v588[v586];
              if ((unint64_t)&v588[v586] >= v587) {
                goto LABEL_1227;
              }
              if (*(unsigned char *)(*(void *)(v7 + 104) + *v229)) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v588[++v586];
              int v191 = -1;
            }
            while ((int)v586 + 1 <= v34);
            goto LABEL_1340;
          case 9:
            uint64_t v589 = 0;
            unint64_t v590 = *v15;
            v591 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v591[v589];
              if ((unint64_t)&v591[v589] >= v590) {
                goto LABEL_1227;
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v229) & 1) == 0) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v591[++v589];
              int v191 = -1;
            }
            while ((int)v589 + 1 <= v34);
            goto LABEL_1340;
          case 10:
            uint64_t v592 = 0;
            unint64_t v593 = *v15;
            v594 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v594[v592];
              if ((unint64_t)&v594[v592] >= v593) {
                goto LABEL_1227;
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v229) & 0x10) != 0) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v594[++v592];
              int v191 = -1;
            }
            while ((int)v592 + 1 <= v34);
            goto LABEL_1340;
          case 11:
            uint64_t v595 = 0;
            unint64_t v596 = *v15;
            v597 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v597[v595];
              if ((unint64_t)&v597[v595] >= v596) {
                goto LABEL_1227;
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + *v229) & 0x10) == 0) {
                goto LABEL_2925;
              }
              *(void *)(v13 + 80) = &v597[++v595];
              int v191 = -1;
            }
            while ((int)v595 + 1 <= v34);
            goto LABEL_1340;
          case 12:
            v598 = *(unsigned __int8 **)(v13 + 80);
            unsigned int v599 = 1;
            while (1)
            {
              uint64_t v600 = *v15;
              if ((unint64_t)v598 >= *v15) {
                break;
              }
              int v601 = *(_DWORD *)(v7 + 244);
              if (v601)
              {
                v602 = v15;
                v603 = v14;
                v604 = v16;
                v605 = (unsigned __int8 *)a6;
                if (_pcre2_is_newline_8(v598, v601, v600, v1356, v1361))
                {
                  uint64_t v20 = 0;
LABEL_2268:
                  a6 = (uint64_t)v605;
                  unsigned int v16 = v604;
                  uint64_t v14 = v603;
                  unsigned int v15 = v602;
                  goto LABEL_2451;
                }
                v598 = *(unsigned __int8 **)(v13 + 80);
                a6 = (uint64_t)v605;
                unsigned int v16 = v604;
                uint64_t v14 = v603;
              }
              else
              {
                uint64_t v606 = *v1356;
                if ((unint64_t)v598 <= v600 - v606
                  && *v598 == *(unsigned __int8 *)(v7 + 252)
                  && (v606 == 1 || v598[1] == *(unsigned __int8 *)(v7 + 253)))
                {
                  goto LABEL_2925;
                }
              }
              unsigned int v607 = (unsigned __int16)*v16;
              if (*v16)
              {
                if ((unint64_t)(v598 + 1) >= *v15
                  && !*(_DWORD *)(v7 + 244)
                  && *v1356 == 2
                  && *v598 == *(unsigned __int8 *)(v7 + 252))
                {
                  _DWORD *v1360 = 1;
                  if (v607 > 1) {
                    return 4294967294;
                  }
                }
              }
              *(void *)(v13 + 80) = ++v598;
              ++v599;
              int v191 = -1;
              if (v599 > *(_DWORD *)(v13 + 56)) {
                goto LABEL_1340;
              }
            }
            unsigned int v358 = (unsigned __int16)*v16;
            if (!*v16 || (unint64_t)v598 <= *v14) {
              goto LABEL_2925;
            }
            goto LABEL_1229;
          case 13:
            uint64_t v229 = *(unsigned __int8 **)(v13 + 80);
            if ((unint64_t)v229 > *v15 - v34) {
              goto LABEL_1227;
            }
LABEL_1338:
            *(void *)(v13 + 80) = &v229[v34];
            goto LABEL_1339;
          case 17:
            unint64_t v608 = *v15;
            v609 = *(unsigned __int8 **)(v13 + 80);
            unsigned int v610 = 1;
            break;
          case 18:
            uint64_t v613 = 0;
            unint64_t v614 = *v15;
            v615 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v615[v613];
              if ((unint64_t)&v615[v613] >= v614) {
                goto LABEL_1227;
              }
              *(void *)(v13 + 80) = v229 + 1;
              int v616 = *v229;
              if (v616 == 9 || v616 == 32 || v616 == 160) {
                goto LABEL_1172;
              }
              ++v613;
              int v191 = -1;
            }
            while ((int)v613 + 1 <= v34);
            goto LABEL_1340;
          case 19:
            uint64_t v617 = 0;
            unint64_t v618 = *v15;
            v619 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v619[v617];
              if ((unint64_t)&v619[v617] >= v618) {
                goto LABEL_1227;
              }
              *(void *)(v13 + 80) = v229 + 1;
              int v620 = *v229;
              if (v620 != 9 && v620 != 160 && v620 != 32) {
                goto LABEL_1172;
              }
              ++v617;
              int v191 = -1;
            }
            while ((int)v617 + 1 <= v34);
            goto LABEL_1340;
          case 20:
            uint64_t v621 = 0;
            unint64_t v622 = *v15;
            v623 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v623[v621];
              if ((unint64_t)&v623[v621] >= v622) {
                goto LABEL_1227;
              }
              *(void *)(v13 + 80) = v229 + 1;
              int v624 = *v229;
              if ((v624 - 10) < 4 || v624 == 133) {
                goto LABEL_1172;
              }
              ++v621;
              int v191 = -1;
            }
            while ((int)v621 + 1 <= v34);
            goto LABEL_1340;
          case 21:
            uint64_t v625 = 0;
            unint64_t v626 = *v15;
            v627 = *(unsigned __int8 **)(v13 + 80);
            do
            {
              uint64_t v229 = &v627[v625];
              if ((unint64_t)&v627[v625] >= v626) {
                goto LABEL_1227;
              }
              *(void *)(v13 + 80) = v229 + 1;
              int v628 = *v229;
              if ((v628 - 10) >= 4 && v628 != 133) {
                goto LABEL_1172;
              }
              ++v625;
              int v191 = -1;
            }
            while ((int)v625 + 1 <= v34);
            goto LABEL_1340;
          default:
            return v19;
        }
        while (1)
        {
          if ((unint64_t)v609 >= v608) {
            goto LABEL_1815;
          }
          v611 = v609 + 1;
          *(void *)(v13 + 80) = v609 + 1;
          unsigned int v612 = *v609;
          if (v612 > 0xC)
          {
            if (v612 == 133)
            {
LABEL_1242:
              if (*(_WORD *)(v7 + 130) == 2) {
                goto LABEL_2925;
              }
              goto LABEL_1243;
            }
            if (v612 != 13) {
              goto LABEL_2925;
            }
            if ((unint64_t)v611 < v608 && *v611 == 10)
            {
              v611 = v609 + 2;
              *(void *)(v13 + 80) = v609 + 2;
            }
          }
          else
          {
            if (v612 - 11 < 2) {
              goto LABEL_1242;
            }
            if (v612 != 10) {
              goto LABEL_2925;
            }
          }
LABEL_1243:
          ++v610;
          int v191 = -1;
          v609 = v611;
          if (v610 > v34) {
            goto LABEL_1340;
          }
        }
      }
LABEL_1339:
      int v191 = -1;
LABEL_1340:
      unsigned int v660 = *(_DWORD *)(v13 + 56);
      unsigned int v659 = *(_DWORD *)(v13 + 60);
      unsigned int v661 = v659 - v660;
      if (v659 == v660) {
        goto LABEL_2445;
      }
      if (!v11)
      {
        if ((v191 & 0x80000000) == 0)
        {
          v1351 = v16;
          long long v104 = v14;
          LODWORD(v11) = 0;
          switch(v191)
          {
            case 0:
LABEL_3267:
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -48;
              unsigned int v1362 = v191;
              goto LABEL_3216;
            case 1:
              goto LABEL_3285;
            case 2:
LABEL_3273:
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -46;
              goto LABEL_3216;
            case 3:
LABEL_3274:
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -45;
              goto LABEL_3216;
            case 4:
LABEL_3275:
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -44;
              goto LABEL_3216;
            case 5:
LABEL_3276:
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -43;
              goto LABEL_3216;
            case 6:
            case 7:
              goto LABEL_3278;
            case 8:
LABEL_3279:
              unsigned int v1362 = v11;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = -41;
              goto LABEL_3216;
            case 9:
              goto LABEL_3281;
            case 10:
              goto LABEL_3283;
            default:
              return 4294967252;
          }
        }
        if (*v190 == 22)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = 0;
          goto LABEL_3382;
        }
        LODWORD(v11) = 0;
        if (v1364)
        {
LABEL_3384:
          v1351 = v16;
          long long v104 = v14;
          unsigned int v1362 = v11;
          LODWORD(v11) = 0;
          a2 = *(unsigned __int8 **)v13;
          char v1316 = -37;
          goto LABEL_3216;
        }
LABEL_3390:
        v1351 = v16;
        long long v104 = v14;
        unsigned int v1362 = v11;
        LODWORD(v11) = 0;
        a2 = *(unsigned __int8 **)v13;
        char v1316 = 33;
        goto LABEL_3216;
      }
      v662 = *(unsigned __int8 **)(v13 + 80);
      *(void *)(v13 + 8) = v662;
      if ((v191 & 0x80000000) == 0)
      {
        switch(v191)
        {
          case 0:
            BOOL v474 = v659 >= v660;
            unsigned int v701 = v659 - v660;
            if (v701 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v702 = *v15;
            while ((unint64_t)v662 < v702)
            {
              uint64_t v703 = 1;
              if (v1364)
              {
                unsigned int v704 = *v662;
                uint64_t v705 = 2;
                uint64_t v706 = 3;
                uint64_t v707 = 4;
                uint64_t v708 = 5;
                if ((v704 & 4) != 0) {
                  uint64_t v708 = 6;
                }
                if ((v704 & 8) != 0) {
                  uint64_t v707 = v708;
                }
                if ((v704 & 0x10) != 0) {
                  uint64_t v706 = v707;
                }
                if ((v704 & 0x20) != 0) {
                  uint64_t v705 = v706;
                }
                if (v704 >= 0xC0) {
                  uint64_t v703 = v705;
                }
              }
              if (*v190 != 15)
              {
                v662 += v703;
                *(void *)(v13 + 80) = v662;
                if (--v701) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 1:
            BOOL v474 = v659 >= v660;
            unsigned int v709 = v659 - v660;
            if (v709 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v710 = *v15;
            while ((unint64_t)v662 < v710)
            {
              unsigned int v711 = *v662;
              if (v1364 && v711 >= 0xC0)
              {
                int v712 = v662[1] & 0x3F;
                if ((v711 & 0x20) != 0)
                {
                  if ((v711 & 0x10) != 0)
                  {
                    if ((v711 & 8) != 0)
                    {
                      int v716 = v662[2] & 0x3F;
                      int v717 = v662[3] & 0x3F;
                      int v718 = v662[4] & 0x3F;
                      if ((v711 & 4) != 0)
                      {
                        unsigned int v711 = ((v711 & 1) << 30) | (v712 << 24) | (v716 << 18) | (v717 << 12) | (v718 << 6) | v662[5] & 0x3F;
                        uint64_t v713 = 6;
                      }
                      else
                      {
                        unsigned int v711 = ((v711 & 3) << 24) | (v712 << 18) | (v716 << 12) | (v717 << 6) | v718;
                        uint64_t v713 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v711 = ((v711 & 7) << 18) | (v712 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v713 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v711 = ((v711 & 0xF) << 12) | (v712 << 6) | v662[2] & 0x3F;
                    uint64_t v713 = 3;
                  }
                }
                else
                {
                  uint64_t v713 = 2;
                  unsigned int v711 = v662[1] & 0x3F | ((v711 & 0x1F) << 6);
                }
              }
              else
              {
                uint64_t v713 = 1;
              }
              unsigned int v714 = BYTE1(_pcre2_ucd_records_8[2
                                              * _pcre2_ucd_stage2_8[v711 & 0x7F | (_pcre2_ucd_stage1_8[v711 >> 7] << 7)]]);
              if (v714 > 9 || ((1 << v714) & 0x320) == 0)
              {
                if (*v190 != 15) {
                  goto LABEL_1636;
                }
              }
              else if (*v190 == 15)
              {
                goto LABEL_1636;
              }
              v662 += v713;
              *(void *)(v13 + 80) = v662;
              if (!--v709) {
                goto LABEL_1636;
              }
            }
            goto LABEL_1633;
          case 2:
            BOOL v474 = v659 >= v660;
            unsigned int v719 = v659 - v660;
            if (v719 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v720 = *v15;
            while ((unint64_t)v662 < v720)
            {
              unsigned int v721 = *v662;
              uint64_t v722 = 1;
              if (v1364 && v721 >= 0xC0)
              {
                int v723 = v662[1] & 0x3F;
                if ((v721 & 0x20) != 0)
                {
                  if ((v721 & 0x10) != 0)
                  {
                    if ((v721 & 8) != 0)
                    {
                      int v724 = v662[2] & 0x3F;
                      int v725 = v662[3] & 0x3F;
                      int v726 = v662[4] & 0x3F;
                      if ((v721 & 4) != 0)
                      {
                        unsigned int v721 = ((v721 & 1) << 30) | (v723 << 24) | (v724 << 18) | (v725 << 12) | (v726 << 6) | v662[5] & 0x3F;
                        uint64_t v722 = 6;
                      }
                      else
                      {
                        unsigned int v721 = ((v721 & 3) << 24) | (v723 << 18) | (v724 << 12) | (v725 << 6) | v726;
                        uint64_t v722 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v721 = ((v721 & 7) << 18) | (v723 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v722 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v721 = ((v721 & 0xF) << 12) | (v723 << 6) | v662[2] & 0x3F;
                    uint64_t v722 = 3;
                  }
                }
                else
                {
                  uint64_t v722 = 2;
                  unsigned int v721 = v662[1] & 0x3F | ((v721 & 0x1F) << 6);
                }
              }
              if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                  * _pcre2_ucd_stage2_8[v721 & 0x7F | (_pcre2_ucd_stage1_8[v721 >> 7] << 7)]])] != *(_DWORD *)(v13 + 68)) == (*(_DWORD *)(v13 + 64) == 15))
              {
                v662 += v722;
                *(void *)(v13 + 80) = v662;
                if (--v719) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 3:
            BOOL v474 = v659 >= v660;
            unsigned int v727 = v659 - v660;
            if (v727 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v728 = *v15;
            while ((unint64_t)v662 < v728)
            {
              unsigned int v729 = *v662;
              uint64_t v730 = 1;
              if (v1364 && v729 >= 0xC0)
              {
                int v731 = v662[1] & 0x3F;
                if ((v729 & 0x20) != 0)
                {
                  if ((v729 & 0x10) != 0)
                  {
                    if ((v729 & 8) != 0)
                    {
                      int v732 = v662[2] & 0x3F;
                      int v733 = v662[3] & 0x3F;
                      int v734 = v662[4] & 0x3F;
                      if ((v729 & 4) != 0)
                      {
                        unsigned int v729 = ((v729 & 1) << 30) | (v731 << 24) | (v732 << 18) | (v733 << 12) | (v734 << 6) | v662[5] & 0x3F;
                        uint64_t v730 = 6;
                      }
                      else
                      {
                        unsigned int v729 = ((v729 & 3) << 24) | (v731 << 18) | (v732 << 12) | (v733 << 6) | v734;
                        uint64_t v730 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v729 = ((v729 & 7) << 18) | (v731 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v730 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v729 = ((v729 & 0xF) << 12) | (v731 << 6) | v662[2] & 0x3F;
                    uint64_t v730 = 3;
                  }
                }
                else
                {
                  uint64_t v730 = 2;
                  unsigned int v729 = v662[1] & 0x3F | ((v729 & 0x1F) << 6);
                }
              }
              if ((*(_DWORD *)(v13 + 68) != BYTE1(_pcre2_ucd_records_8[2
                                                                      * _pcre2_ucd_stage2_8[v729 & 0x7F | (_pcre2_ucd_stage1_8[v729 >> 7] << 7)]])) == (*(_DWORD *)(v13 + 64) == 15))
              {
                v662 += v730;
                *(void *)(v13 + 80) = v662;
                if (--v727) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 4:
            BOOL v474 = v659 >= v660;
            unsigned int v735 = v659 - v660;
            if (v735 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v736 = *v15;
            while ((unint64_t)v662 < v736)
            {
              unsigned int v737 = *v662;
              uint64_t v738 = 1;
              if (v1364 && v737 >= 0xC0)
              {
                int v739 = v662[1] & 0x3F;
                if ((v737 & 0x20) != 0)
                {
                  if ((v737 & 0x10) != 0)
                  {
                    if ((v737 & 8) != 0)
                    {
                      int v740 = v662[2] & 0x3F;
                      int v741 = v662[3] & 0x3F;
                      int v742 = v662[4] & 0x3F;
                      if ((v737 & 4) != 0)
                      {
                        unsigned int v737 = ((v737 & 1) << 30) | (v739 << 24) | (v740 << 18) | (v741 << 12) | (v742 << 6) | v662[5] & 0x3F;
                        uint64_t v738 = 6;
                      }
                      else
                      {
                        unsigned int v737 = ((v737 & 3) << 24) | (v739 << 18) | (v740 << 12) | (v741 << 6) | v742;
                        uint64_t v738 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v737 = ((v737 & 7) << 18) | (v739 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v738 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v737 = ((v737 & 0xF) << 12) | (v739 << 6) | v662[2] & 0x3F;
                    uint64_t v738 = 3;
                  }
                }
                else
                {
                  uint64_t v738 = 2;
                  unsigned int v737 = v662[1] & 0x3F | ((v737 & 0x1F) << 6);
                }
              }
              if ((*(_DWORD *)(v13 + 68) != LOBYTE(_pcre2_ucd_records_8[2
                                                                       * _pcre2_ucd_stage2_8[v737 & 0x7F | (_pcre2_ucd_stage1_8[v737 >> 7] << 7)]])) == (*(_DWORD *)(v13 + 64) == 15))
              {
                v662 += v738;
                *(void *)(v13 + 80) = v662;
                if (--v735) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 5:
            BOOL v474 = v659 >= v660;
            unsigned int v743 = v659 - v660;
            if (v743 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v744 = *v15;
            while ((unint64_t)v662 < v744)
            {
              unsigned int v745 = *v662;
              uint64_t v746 = 1;
              if (v1364 && v745 >= 0xC0)
              {
                int v747 = v662[1] & 0x3F;
                if ((v745 & 0x20) != 0)
                {
                  if ((v745 & 0x10) != 0)
                  {
                    if ((v745 & 8) != 0)
                    {
                      int v748 = v662[2] & 0x3F;
                      int v749 = v662[3] & 0x3F;
                      int v750 = v662[4] & 0x3F;
                      if ((v745 & 4) != 0)
                      {
                        unsigned int v745 = ((v745 & 1) << 30) | (v747 << 24) | (v748 << 18) | (v749 << 12) | (v750 << 6) | v662[5] & 0x3F;
                        uint64_t v746 = 6;
                      }
                      else
                      {
                        unsigned int v745 = ((v745 & 3) << 24) | (v747 << 18) | (v748 << 12) | (v749 << 6) | v750;
                        uint64_t v746 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v745 = ((v745 & 7) << 18) | (v747 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v746 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v745 = ((v745 & 0xF) << 12) | (v747 << 6) | v662[2] & 0x3F;
                    uint64_t v746 = 3;
                  }
                }
                else
                {
                  uint64_t v746 = 2;
                  unsigned int v745 = v662[1] & 0x3F | ((v745 & 0x1F) << 6);
                }
              }
              if (((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                   * _pcre2_ucd_stage2_8[v745 & 0x7F | (_pcre2_ucd_stage1_8[v745 >> 7] << 7)]])] & 0xFFFFFFFD) != 1) == (*v190 == 15))
              {
                v662 += v746;
                *(void *)(v13 + 80) = v662;
                if (--v743) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 6:
          case 7:
            BOOL v474 = v659 >= v660;
            unsigned int v663 = v659 - v660;
            if (v663 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v664 = *v15;
            break;
          case 8:
            BOOL v474 = v659 >= v660;
            unsigned int v751 = v659 - v660;
            if (v751 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v752 = *v15;
            while ((unint64_t)v662 < v752)
            {
              unsigned int v753 = *v662;
              uint64_t v754 = 1;
              if (v1364 && v753 >= 0xC0)
              {
                int v755 = v662[1] & 0x3F;
                if ((v753 & 0x20) != 0)
                {
                  if ((v753 & 0x10) != 0)
                  {
                    if ((v753 & 8) != 0)
                    {
                      int v756 = v662[2] & 0x3F;
                      int v757 = v662[3] & 0x3F;
                      int v758 = v662[4] & 0x3F;
                      if ((v753 & 4) != 0)
                      {
                        unsigned int v753 = ((v753 & 1) << 30) | (v755 << 24) | (v756 << 18) | (v757 << 12) | (v758 << 6) | v662[5] & 0x3F;
                        uint64_t v754 = 6;
                      }
                      else
                      {
                        unsigned int v753 = ((v753 & 3) << 24) | (v755 << 18) | (v756 << 12) | (v757 << 6) | v758;
                        uint64_t v754 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v753 = ((v753 & 7) << 18) | (v755 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v754 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v753 = ((v753 & 0xF) << 12) | (v755 << 6) | v662[2] & 0x3F;
                    uint64_t v754 = 3;
                  }
                }
                else
                {
                  uint64_t v754 = 2;
                  unsigned int v753 = v662[1] & 0x3F | ((v753 & 0x1F) << 6);
                }
              }
              BOOL v760 = v753 == 95
                  || (_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                    * _pcre2_ucd_stage2_8[v753 & 0x7F | (_pcre2_ucd_stage1_8[v753 >> 7] << 7)]])] & 0xFFFFFFFD) == 1;
              if ((((*v190 != 15) ^ v760) & 1) == 0)
              {
                v662 += v754;
                *(void *)(v13 + 80) = v662;
                if (--v751) {
                  continue;
                }
              }
              goto LABEL_1636;
            }
            goto LABEL_1633;
          case 9:
            if (v659 <= v660) {
              goto LABEL_1636;
            }
            unint64_t v761 = *v15;
            while ((unint64_t)v662 < v761)
            {
              unsigned int v762 = *v662;
              uint64_t v763 = 1;
              if (v1364 && v762 >= 0xC0)
              {
                int v764 = v662[1] & 0x3F;
                if ((v762 & 0x20) != 0)
                {
                  if ((v762 & 0x10) != 0)
                  {
                    if ((v762 & 8) != 0)
                    {
                      int v765 = v662[2] & 0x3F;
                      int v766 = v662[3] & 0x3F;
                      int v767 = v662[4] & 0x3F;
                      if ((v762 & 4) != 0)
                      {
                        unsigned int v762 = ((v762 & 1) << 30) | (v764 << 24) | (v765 << 18) | (v766 << 12) | (v767 << 6) | v662[5] & 0x3F;
                        uint64_t v763 = 6;
                      }
                      else
                      {
                        unsigned int v762 = ((v762 & 3) << 24) | (v764 << 18) | (v765 << 12) | (v766 << 6) | v767;
                        uint64_t v763 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v762 = ((v762 & 7) << 18) | (v764 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v763 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v762 = ((v762 & 0xF) << 12) | (v764 << 6) | v662[2] & 0x3F;
                    uint64_t v763 = 3;
                  }
                }
                else
                {
                  uint64_t v763 = 2;
                  unsigned int v762 = v662[1] & 0x3F | ((v762 & 0x1F) << 6);
                }
              }
              v768 = &_pcre2_ucd_caseless_sets_8[*(unsigned int *)(v13 + 68)];
              do
              {
                unsigned int v769 = *v768;
                if (v762 < *v768)
                {
                  if (*v190 != 15) {
                    goto LABEL_1636;
                  }
                  goto LABEL_1601;
                }
                ++v768;
              }
              while (v762 != v769);
              if (*v190 == 15) {
                goto LABEL_1636;
              }
LABEL_1601:
              v662 += v763;
              *(void *)(v13 + 80) = v662;
              if (++v660 == v659) {
                goto LABEL_1636;
              }
            }
            goto LABEL_1633;
          case 10:
            BOOL v474 = v659 >= v660;
            unsigned int v770 = v659 - v660;
            if (v770 == 0 || !v474) {
              goto LABEL_1636;
            }
            unint64_t v771 = *v15;
            while (1)
            {
              if ((unint64_t)v662 >= v771)
              {
LABEL_1633:
                unsigned int v781 = (unsigned __int16)*v16;
                if (*v16)
                {
                  if ((unint64_t)v662 > *v14)
                  {
                    _DWORD *v1360 = 1;
                    if (v781 > 1) {
                      return 4294967294;
                    }
                  }
                }
                goto LABEL_1636;
              }
              unsigned int v772 = *v662;
              uint64_t v773 = 1;
              if (v1364 && v772 >= 0xC0)
              {
                int v774 = v662[1] & 0x3F;
                if ((v772 & 0x20) != 0)
                {
                  if ((v772 & 0x10) != 0)
                  {
                    if ((v772 & 8) != 0)
                    {
                      int v775 = v662[2] & 0x3F;
                      int v776 = v662[3] & 0x3F;
                      int v777 = v662[4] & 0x3F;
                      if ((v772 & 4) != 0)
                      {
                        unsigned int v772 = ((v772 & 1) << 30) | (v774 << 24) | (v775 << 18) | (v776 << 12) | (v777 << 6) | v662[5] & 0x3F;
                        uint64_t v773 = 6;
                      }
                      else
                      {
                        unsigned int v772 = ((v772 & 3) << 24) | (v774 << 18) | (v775 << 12) | (v776 << 6) | v777;
                        uint64_t v773 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v772 = ((v772 & 7) << 18) | (v774 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v773 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v772 = ((v772 & 0xF) << 12) | (v774 << 6) | v662[2] & 0x3F;
                    uint64_t v773 = 3;
                  }
                }
                else
                {
                  uint64_t v773 = 2;
                  unsigned int v772 = v662[1] & 0x3F | ((v772 & 0x1F) << 6);
                }
              }
              if (v772 - 36 > 0x3C || ((1 << (v772 - 36)) & 0x1000000010000001) == 0)
              {
                BOOL v780 = v772 >> 13 > 6 || (v772 - 160) >> 5 < 0x6BB;
                if ((v780 ^ (*v190 != 15)))
                {
LABEL_1636:
                  if (v11 != 2)
                  {
LABEL_1637:
                    if ((unint64_t)v662 > *(void *)(v13 + 8))
                    {
                      long long v104 = v14;
                      v1351 = v16;
                      unsigned int v1362 = v11;
                      LODWORD(v11) = 0;
                      a2 = *(unsigned __int8 **)v13;
                      char v1316 = -34;
                      goto LABEL_3216;
                    }
                  }
                  goto LABEL_2445;
                }
              }
              else if (*v190 == 15)
              {
                goto LABEL_1636;
              }
              v662 += v773;
              *(void *)(v13 + 80) = v662;
              if (!--v770) {
                goto LABEL_1636;
              }
            }
          default:
            return 4294967252;
        }
        while (2)
        {
          if ((unint64_t)v662 >= v664) {
            goto LABEL_1633;
          }
          int v665 = *v662;
          uint64_t v666 = 1;
          if (v1364 && v665 >= 0xC0)
          {
            int v667 = v662[1] & 0x3F;
            if ((v665 & 0x20) != 0)
            {
              if ((v665 & 0x10) != 0)
              {
                if ((v665 & 8) != 0)
                {
                  int v668 = v662[2] & 0x3F;
                  int v669 = v662[3] & 0x3F;
                  int v670 = v662[4] & 0x3F;
                  if ((v665 & 4) != 0)
                  {
                    int v665 = ((v665 & 1) << 30) | (v667 << 24) | (v668 << 18) | (v669 << 12) | (v670 << 6) | v662[5] & 0x3F;
                    uint64_t v666 = 6;
                  }
                  else
                  {
                    int v665 = ((v665 & 3) << 24) | (v667 << 18) | (v668 << 12) | (v669 << 6) | v670;
                    uint64_t v666 = 5;
                  }
                }
                else
                {
                  int v665 = ((v665 & 7) << 18) | (v667 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                  uint64_t v666 = 4;
                }
              }
              else
              {
                int v665 = ((v665 & 0xF) << 12) | (v667 << 6) | v662[2] & 0x3F;
                uint64_t v666 = 3;
              }
            }
            else
            {
              uint64_t v666 = 2;
              int v665 = v662[1] & 0x3F | ((v665 & 0x1F) << 6);
            }
          }
          if (v665 < 0x2000)
          {
            if (v665 > 132)
            {
              if (v665 > 5759)
              {
                if (v665 == 5760 || v665 == 6158) {
                  goto LABEL_1369;
                }
              }
              else if (v665 == 133 || v665 == 160)
              {
                goto LABEL_1369;
              }
            }
            else if (v665 <= 0x20 && ((1 << v665) & 0x100003E00) != 0)
            {
              goto LABEL_1369;
            }
LABEL_1364:
            if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2
                                                                * _pcre2_ucd_stage2_8[v665 & 0x7F | (_pcre2_ucd_stage1_8[v665 >> 7] << 7)]])] != 6) != (*v190 == 15))
              goto LABEL_1636;
          }
          else
          {
            if ((v665 - 0x2000) >= 0xB
              && ((v665 - 8232) > 0x37 || ((1 << (v665 - 40)) & 0x80000000000083) == 0)
              && v665 != 12288)
            {
              goto LABEL_1364;
            }
LABEL_1369:
            if (*v190 == 15) {
              goto LABEL_1636;
            }
          }
          v662 += v666;
          *(void *)(v13 + 80) = v662;
          if (!--v663) {
            goto LABEL_1636;
          }
          continue;
        }
      }
      int v671 = *v190;
      if (*v190 == 22)
      {
        v672 = v16;
        v673 = (unsigned __int8 *)a6;
        if (v659 > v660)
        {
          while (1)
          {
            unint64_t v674 = *v15;
            if ((unint64_t)v662 >= *v15) {
              break;
            }
            v675 = v662 + 1;
            *(void *)(v13 + 80) = v662 + 1;
            unsigned int v676 = *v662;
            if (v1364 && v676 >= 0xC0)
            {
              if ((v676 & 0x20) != 0)
              {
                int v678 = *v675 & 0x3F;
                if ((v676 & 0x10) != 0)
                {
                  if ((v676 & 8) != 0)
                  {
                    int v679 = v662[2] & 0x3F;
                    int v680 = v662[3] & 0x3F;
                    int v681 = v662[4] & 0x3F;
                    v677 = v15;
                    if ((v676 & 4) != 0)
                    {
                      unsigned int v676 = ((v676 & 1) << 30) | (v678 << 24) | (v679 << 18) | (v680 << 12) | (v681 << 6) | v662[5] & 0x3F;
                      v675 = v662 + 6;
                    }
                    else
                    {
                      unsigned int v676 = ((v676 & 3) << 24) | (v678 << 18) | (v679 << 12) | (v680 << 6) | v681;
                      v675 = v662 + 5;
                    }
                  }
                  else
                  {
                    v677 = v15;
                    unsigned int v676 = ((v676 & 7) << 18) | (v678 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                    v675 = v662 + 4;
                  }
                }
                else
                {
                  v677 = v15;
                  unsigned int v676 = ((v676 & 0xF) << 12) | (v678 << 6) | v662[2] & 0x3F;
                  v675 = v662 + 3;
                }
                *(void *)(v13 + 80) = v675;
              }
              else
              {
                v677 = v15;
                v675 = v662 + 2;
                *(void *)(v13 + 80) = v662 + 2;
                unsigned int v676 = v662[1] & 0x3F | ((v676 & 0x1F) << 6);
              }
            }
            else
            {
              v677 = v15;
            }
            v662 = _pcre2_extuni_8(v676, v675, *(void *)(v7 + 152), v674, v1361, 0);
            *(void *)(v13 + 80) = v662;
            unsigned int v682 = *(unsigned __int16 *)(v7 + 128);
            unsigned int v15 = v677;
            if (*(_WORD *)(v7 + 128))
            {
              if ((unint64_t)v662 >= *v677 && (unint64_t)v662 > *v14)
              {
                _DWORD *v1360 = 1;
                if (v682 > 1) {
                  return 4294967294;
                }
              }
            }
            if (++v660 >= *(_DWORD *)(v13 + 60)) {
              goto LABEL_1642;
            }
          }
          unsigned int v782 = (unsigned __int16)*v672;
          if (*v672)
          {
            if ((unint64_t)v662 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v782 > 1) {
                return 4294967294;
              }
            }
          }
        }
LABEL_1642:
        if (v11 == 2)
        {
          a6 = (uint64_t)v673;
          unsigned int v16 = v672;
        }
        else
        {
          v783 = *(unsigned __int8 **)(v13 + 8);
          a6 = (uint64_t)v673;
          unsigned int v16 = v672;
LABEL_2448:
          if (v662 > v783)
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = v11;
            LODWORD(v11) = 0;
            a2 = *(unsigned __int8 **)v13;
            char v1316 = -36;
            goto LABEL_3216;
          }
        }
        goto LABEL_2445;
      }
      if (v1364)
      {
        uint64_t v19 = 4294967252;
        switch(v671)
        {
          case 6:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v912 = v659 - v660;
            if (v912 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v913 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v913) {
                goto LABEL_2143;
              }
              unsigned int v914 = *v662;
              if (v914 < 0xC0)
              {
                uint64_t v916 = 1;
LABEL_1984:
                if ((*(unsigned char *)(*(void *)(v7 + 104) + v914) & 4) != 0) {
                  goto LABEL_2417;
                }
              }
              else
              {
                int v915 = v662[1] & 0x3F;
                if ((v914 & 0x20) != 0)
                {
                  if ((v914 & 0x10) != 0)
                  {
                    if ((v914 & 8) != 0)
                    {
                      int v917 = v662[2] & 0x3F;
                      int v918 = v662[3] & 0x3F;
                      int v919 = v662[4] & 0x3F;
                      if ((v914 & 4) != 0)
                      {
                        unsigned int v914 = ((v914 & 1) << 30) | (v915 << 24) | (v917 << 18) | (v918 << 12) | (v919 << 6) | v662[5] & 0x3F;
                        uint64_t v916 = 6;
                      }
                      else
                      {
                        unsigned int v914 = ((v914 & 3) << 24) | (v915 << 18) | (v917 << 12) | (v918 << 6) | v919;
                        uint64_t v916 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v914 = ((v914 & 7) << 18) | (v915 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v916 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v914 = ((v914 & 0xF) << 12) | (v915 << 6) | v662[2] & 0x3F;
                    uint64_t v916 = 3;
                  }
                }
                else
                {
                  uint64_t v916 = 2;
                  unsigned int v914 = v662[1] & 0x3F | ((v914 & 0x1F) << 6);
                }
                if (v914 <= 0xFF) {
                  goto LABEL_1984;
                }
              }
              v662 += v916;
              *(void *)(v13 + 80) = v662;
              if (!--v912) {
                goto LABEL_2417;
              }
              continue;
            }
          case 7:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v920 = v659 - v660;
            if (v920 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v921 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v921) {
                goto LABEL_2143;
              }
              unsigned int v922 = *v662;
              if (v922 < 0xC0)
              {
                uint64_t v924 = 1;
                goto LABEL_2003;
              }
              int v923 = v662[1] & 0x3F;
              if ((v922 & 0x20) != 0)
              {
                if ((v922 & 0x10) != 0)
                {
                  if ((v922 & 8) != 0)
                  {
                    int v925 = v662[2] & 0x3F;
                    int v926 = v662[3] & 0x3F;
                    int v927 = v662[4] & 0x3F;
                    if ((v922 & 4) != 0)
                    {
                      unsigned int v922 = ((v922 & 1) << 30) | (v923 << 24) | (v925 << 18) | (v926 << 12) | (v927 << 6) | v662[5] & 0x3F;
                      uint64_t v924 = 6;
                    }
                    else
                    {
                      unsigned int v922 = ((v922 & 3) << 24) | (v923 << 18) | (v925 << 12) | (v926 << 6) | v927;
                      uint64_t v924 = 5;
                    }
                  }
                  else
                  {
                    unsigned int v922 = ((v922 & 7) << 18) | (v923 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                    uint64_t v924 = 4;
                  }
                }
                else
                {
                  unsigned int v922 = ((v922 & 0xF) << 12) | (v923 << 6) | v662[2] & 0x3F;
                  uint64_t v924 = 3;
                }
              }
              else
              {
                uint64_t v924 = 2;
                unsigned int v922 = v662[1] & 0x3F | ((v922 & 0x1F) << 6);
              }
              if (v922 <= 0xFF)
              {
LABEL_2003:
                if ((*(unsigned char *)(*(void *)(v7 + 104) + v922) & 4) == 0) {
                  goto LABEL_2417;
                }
                v662 += v924;
                *(void *)(v13 + 80) = v662;
                if (!--v920) {
                  goto LABEL_2417;
                }
                continue;
              }
              goto LABEL_2417;
            }
          case 8:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v928 = v659 - v660;
            if (v928 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v929 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v929) {
                goto LABEL_2143;
              }
              unsigned int v930 = *v662;
              if (v930 < 0xC0)
              {
                uint64_t v932 = 1;
              }
              else
              {
                int v931 = v662[1] & 0x3F;
                if ((v930 & 0x20) != 0)
                {
                  if ((v930 & 0x10) != 0)
                  {
                    if ((v930 & 8) != 0)
                    {
                      int v933 = v662[2] & 0x3F;
                      int v934 = v662[3] & 0x3F;
                      int v935 = v662[4] & 0x3F;
                      if ((v930 & 4) != 0)
                      {
                        unsigned int v930 = ((v930 & 1) << 30) | (v931 << 24) | (v933 << 18) | (v934 << 12) | (v935 << 6) | v662[5] & 0x3F;
                        uint64_t v932 = 6;
                      }
                      else
                      {
                        unsigned int v930 = ((v930 & 3) << 24) | (v931 << 18) | (v933 << 12) | (v934 << 6) | v935;
                        uint64_t v932 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v930 = ((v930 & 7) << 18) | (v931 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v932 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v930 = ((v930 & 0xF) << 12) | (v931 << 6) | v662[2] & 0x3F;
                    uint64_t v932 = 3;
                  }
                }
                else
                {
                  uint64_t v932 = 2;
                  unsigned int v930 = v662[1] & 0x3F | ((v930 & 0x1F) << 6);
                }
                if (v930 > 0xFF) {
                  goto LABEL_2023;
                }
              }
              if (*(unsigned char *)(*(void *)(v7 + 104) + v930)) {
                goto LABEL_2417;
              }
LABEL_2023:
              v662 += v932;
              *(void *)(v13 + 80) = v662;
              if (!--v928) {
                goto LABEL_2417;
              }
              continue;
            }
          case 9:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v936 = v659 - v660;
            if (v936 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v937 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v937) {
                goto LABEL_2143;
              }
              unsigned int v938 = *v662;
              if (v938 < 0xC0)
              {
                uint64_t v940 = 1;
                goto LABEL_2041;
              }
              int v939 = v662[1] & 0x3F;
              if ((v938 & 0x20) != 0)
              {
                if ((v938 & 0x10) != 0)
                {
                  if ((v938 & 8) != 0)
                  {
                    int v941 = v662[2] & 0x3F;
                    int v942 = v662[3] & 0x3F;
                    int v943 = v662[4] & 0x3F;
                    if ((v938 & 4) != 0)
                    {
                      unsigned int v938 = ((v938 & 1) << 30) | (v939 << 24) | (v941 << 18) | (v942 << 12) | (v943 << 6) | v662[5] & 0x3F;
                      uint64_t v940 = 6;
                    }
                    else
                    {
                      unsigned int v938 = ((v938 & 3) << 24) | (v939 << 18) | (v941 << 12) | (v942 << 6) | v943;
                      uint64_t v940 = 5;
                    }
                  }
                  else
                  {
                    unsigned int v938 = ((v938 & 7) << 18) | (v939 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                    uint64_t v940 = 4;
                  }
                }
                else
                {
                  unsigned int v938 = ((v938 & 0xF) << 12) | (v939 << 6) | v662[2] & 0x3F;
                  uint64_t v940 = 3;
                }
              }
              else
              {
                uint64_t v940 = 2;
                unsigned int v938 = v662[1] & 0x3F | ((v938 & 0x1F) << 6);
              }
              if (v938 <= 0xFF)
              {
LABEL_2041:
                if ((*(unsigned char *)(*(void *)(v7 + 104) + v938) & 1) == 0) {
                  goto LABEL_2417;
                }
                v662 += v940;
                *(void *)(v13 + 80) = v662;
                if (!--v936) {
                  goto LABEL_2417;
                }
                continue;
              }
              goto LABEL_2417;
            }
          case 10:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v944 = v659 - v660;
            if (v944 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v945 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v945) {
                goto LABEL_2143;
              }
              unsigned int v946 = *v662;
              if (v946 < 0xC0)
              {
                uint64_t v948 = 1;
              }
              else
              {
                int v947 = v662[1] & 0x3F;
                if ((v946 & 0x20) != 0)
                {
                  if ((v946 & 0x10) != 0)
                  {
                    if ((v946 & 8) != 0)
                    {
                      int v949 = v662[2] & 0x3F;
                      int v950 = v662[3] & 0x3F;
                      int v951 = v662[4] & 0x3F;
                      if ((v946 & 4) != 0)
                      {
                        unsigned int v946 = ((v946 & 1) << 30) | (v947 << 24) | (v949 << 18) | (v950 << 12) | (v951 << 6) | v662[5] & 0x3F;
                        uint64_t v948 = 6;
                      }
                      else
                      {
                        unsigned int v946 = ((v946 & 3) << 24) | (v947 << 18) | (v949 << 12) | (v950 << 6) | v951;
                        uint64_t v948 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v946 = ((v946 & 7) << 18) | (v947 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v948 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v946 = ((v946 & 0xF) << 12) | (v947 << 6) | v662[2] & 0x3F;
                    uint64_t v948 = 3;
                  }
                }
                else
                {
                  uint64_t v948 = 2;
                  unsigned int v946 = v662[1] & 0x3F | ((v946 & 0x1F) << 6);
                }
                if (v946 > 0xFF) {
                  goto LABEL_2061;
                }
              }
              if ((*(unsigned char *)(*(void *)(v7 + 104) + v946) & 0x10) != 0) {
                goto LABEL_2417;
              }
LABEL_2061:
              v662 += v948;
              *(void *)(v13 + 80) = v662;
              if (!--v944) {
                goto LABEL_2417;
              }
              continue;
            }
          case 11:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v952 = v659 - v660;
            if (v952 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v953 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v953) {
                goto LABEL_2143;
              }
              unsigned int v954 = *v662;
              if (v954 < 0xC0)
              {
                uint64_t v956 = 1;
                goto LABEL_2079;
              }
              int v955 = v662[1] & 0x3F;
              if ((v954 & 0x20) != 0)
              {
                if ((v954 & 0x10) != 0)
                {
                  if ((v954 & 8) != 0)
                  {
                    int v957 = v662[2] & 0x3F;
                    int v958 = v662[3] & 0x3F;
                    int v959 = v662[4] & 0x3F;
                    if ((v954 & 4) != 0)
                    {
                      unsigned int v954 = ((v954 & 1) << 30) | (v955 << 24) | (v957 << 18) | (v958 << 12) | (v959 << 6) | v662[5] & 0x3F;
                      uint64_t v956 = 6;
                    }
                    else
                    {
                      unsigned int v954 = ((v954 & 3) << 24) | (v955 << 18) | (v957 << 12) | (v958 << 6) | v959;
                      uint64_t v956 = 5;
                    }
                  }
                  else
                  {
                    unsigned int v954 = ((v954 & 7) << 18) | (v955 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                    uint64_t v956 = 4;
                  }
                }
                else
                {
                  unsigned int v954 = ((v954 & 0xF) << 12) | (v955 << 6) | v662[2] & 0x3F;
                  uint64_t v956 = 3;
                }
              }
              else
              {
                uint64_t v956 = 2;
                unsigned int v954 = v662[1] & 0x3F | ((v954 & 0x1F) << 6);
              }
              if (v954 <= 0xFF)
              {
LABEL_2079:
                if ((*(unsigned char *)(*(void *)(v7 + 104) + v954) & 0x10) == 0) {
                  goto LABEL_2417;
                }
                v662 += v956;
                *(void *)(v13 + 80) = v662;
                if (!--v952) {
                  goto LABEL_2417;
                }
                continue;
              }
              goto LABEL_2417;
            }
          case 12:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            if (v659 <= v660) {
              goto LABEL_2417;
            }
            unint64_t v960 = *v15;
            while ((unint64_t)v662 < v960)
            {
              int v961 = *(_DWORD *)(v7 + 244);
              if (v961)
              {
                if (_pcre2_is_newline_8(v662, v961, v960, v1356, v1361)) {
                  goto LABEL_2417;
                }
                v662 = *(unsigned __int8 **)(v13 + 80);
                unint64_t v960 = *v15;
              }
              else
              {
                uint64_t v962 = *v1356;
                if ((unint64_t)v662 <= v960 - v962
                  && *v662 == *(unsigned __int8 *)(v7 + 252)
                  && (v962 == 1 || v662[1] == *(unsigned __int8 *)(v7 + 253)))
                {
                  goto LABEL_2417;
                }
              }
              unsigned int v963 = (unsigned __int16)*v684;
              v964 = v662 + 1;
              if (*v684)
              {
                if ((unint64_t)v964 >= v960
                  && !*(_DWORD *)(v7 + 244)
                  && *v1356 == 2
                  && *v662 == *(unsigned __int8 *)(v7 + 252))
                {
                  _DWORD *v1360 = 1;
                  if (v963 > 1) {
                    return 4294967294;
                  }
                }
              }
              do
              {
                v662 = v964;
                *(void *)(v13 + 80) = v964;
                if ((unint64_t)v964 >= v960) {
                  break;
                }
                ++v964;
              }
              while ((*v662 & 0xC0) == 0x80);
              if (++v660 >= *(_DWORD *)(v13 + 60)) {
                goto LABEL_2417;
              }
            }
            goto LABEL_2143;
          case 13:
            uint64_t v683 = v11;
            v684 = v16;
            v686 = (unsigned __int8 *)a6;
            if (v659 == -1)
            {
              v685 = v15;
              unint64_t v1035 = *v15;
              *(void *)(v13 + 80) = *v15;
              unsigned int v979 = (unsigned __int16)*v16;
              if (*v16 && v1035 > *v14) {
                goto LABEL_2145;
              }
            }
            else
            {
              v685 = v15;
              if (v659 <= v660) {
                goto LABEL_2417;
              }
              unint64_t v965 = *v15;
              do
              {
                if ((unint64_t)v662 >= v965) {
                  goto LABEL_2143;
                }
                v966 = v662 + 1;
                do
                {
                  v662 = v966;
                  *(void *)(v13 + 80) = v966;
                  if ((unint64_t)v966 >= v965) {
                    break;
                  }
                  ++v966;
                }
                while ((*v662 & 0xC0) == 0x80);
                ++v660;
              }
              while (v660 != v659);
            }
            goto LABEL_2417;
          case 14:
            uint64_t v683 = v11;
            v684 = v16;
            v686 = (unsigned __int8 *)a6;
            v685 = v15;
            v967 = (unsigned __int8 *)*v15;
            if (v661 <= *v15 - v662)
            {
              *(void *)(v13 + 80) = &v662[v661];
            }
            else
            {
              *(void *)(v13 + 80) = v967;
              unsigned int v968 = (unsigned __int16)*v16;
              if (*v16)
              {
                if ((unint64_t)v967 > *v14)
                {
                  _DWORD *v1360 = 1;
                  if (v968 > 1) {
                    return 4294967294;
                  }
                }
              }
            }
            goto LABEL_2417;
          case 17:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v969 = v659 - v660;
            if (v969 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v970 = *v15;
            while (2)
            {
              if ((unint64_t)v662 >= v970) {
                goto LABEL_2143;
              }
              unsigned int v971 = *v662;
              if (v971 < 0xC0)
              {
                uint64_t v974 = 1;
                uint64_t v973 = v7;
              }
              else
              {
                int v972 = v662[1] & 0x3F;
                uint64_t v973 = v7;
                if ((v971 & 0x20) != 0)
                {
                  if ((v971 & 0x10) != 0)
                  {
                    if ((v971 & 8) != 0)
                    {
                      int v976 = v662[2] & 0x3F;
                      int v977 = v662[3] & 0x3F;
                      int v978 = v662[4] & 0x3F;
                      if ((v971 & 4) != 0)
                      {
                        unsigned int v971 = ((v971 & 1) << 30) | (v972 << 24) | (v976 << 18) | (v977 << 12) | (v978 << 6) | v662[5] & 0x3F;
                        uint64_t v974 = 6;
                      }
                      else
                      {
                        unsigned int v971 = ((v971 & 3) << 24) | (v972 << 18) | (v976 << 12) | (v977 << 6) | v978;
                        uint64_t v974 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v971 = ((v971 & 7) << 18) | (v972 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v974 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v971 = ((v971 & 0xF) << 12) | (v972 << 6) | v662[2] & 0x3F;
                    uint64_t v974 = 3;
                  }
                }
                else
                {
                  uint64_t v974 = 2;
                  unsigned int v971 = v662[1] & 0x3F | ((v971 & 0x1F) << 6);
                }
              }
              if (v971 == 10) {
                break;
              }
              if (v971 == 13)
              {
                v975 = v662 + 1;
                *(void *)(v13 + 80) = v662 + 1;
                if ((unint64_t)(v662 + 1) >= v970) {
                  goto LABEL_2417;
                }
                if (*v975 != 10)
                {
LABEL_2134:
                  v662 = v975;
                  if (!--v969) {
                    goto LABEL_2417;
                  }
                  continue;
                }
                uint64_t v974 = 2;
              }
              else if (*(_WORD *)(v973 + 130) == 2 || v971 - 11 >= 2 && v971 - 8232 >= 2 && v971 != 133)
              {
LABEL_2417:
                a6 = (uint64_t)v686;
                if (v683 == 2)
                {
LABEL_2418:
                  unsigned int v15 = v685;
                  unsigned int v16 = v684;
                  uint64_t v11 = 2;
                  goto LABEL_2445;
                }
                v1036 = *(unsigned __int8 **)(v13 + 80);
                unsigned int v15 = v685;
                unsigned int v16 = v684;
                uint64_t v11 = v683;
LABEL_2978:
                if ((unint64_t)v1036 > *(void *)(v13 + 8))
                {
                  long long v104 = v14;
                  v1351 = v16;
                  unsigned int v1362 = v11;
                  LODWORD(v11) = 0;
                  a2 = *(unsigned __int8 **)v13;
                  char v1316 = -35;
                  goto LABEL_3216;
                }
                goto LABEL_2445;
              }
              break;
            }
            v975 = &v662[v974];
            *(void *)(v13 + 80) = &v662[v974];
            goto LABEL_2134;
          case 18:
          case 19:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v687 = v659 - v660;
            if (v687 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v688 = *v15;
            int v689 = v671 == 18;
            while (2)
            {
              if ((unint64_t)v662 >= v688) {
                goto LABEL_2143;
              }
              int v690 = *v662;
              if (v690 < 0xC0)
              {
                uint64_t v692 = 1;
              }
              else
              {
                int v691 = v662[1] & 0x3F;
                if ((v690 & 0x20) != 0)
                {
                  if ((v690 & 0x10) != 0)
                  {
                    if ((v690 & 8) != 0)
                    {
                      int v693 = v662[2] & 0x3F;
                      int v694 = v662[3] & 0x3F;
                      int v695 = v662[4] & 0x3F;
                      if ((v690 & 4) != 0)
                      {
                        int v690 = ((v690 & 1) << 30) | (v691 << 24) | (v693 << 18) | (v694 << 12) | (v695 << 6) | v662[5] & 0x3F;
                        uint64_t v692 = 6;
                      }
                      else
                      {
                        int v690 = ((v690 & 3) << 24) | (v691 << 18) | (v693 << 12) | (v694 << 6) | v695;
                        uint64_t v692 = 5;
                      }
                    }
                    else
                    {
                      int v690 = ((v690 & 7) << 18) | (v691 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v692 = 4;
                    }
                  }
                  else
                  {
                    int v690 = ((v690 & 0xF) << 12) | (v691 << 6) | v662[2] & 0x3F;
                    uint64_t v692 = 3;
                  }
                }
                else
                {
                  uint64_t v692 = 2;
                  int v690 = v662[1] & 0x3F | ((v690 & 0x1F) << 6);
                }
              }
              int v696 = 1;
              if (v690 < 0x2000)
              {
                if (v690 <= 159)
                {
                  if (v690 != 9 && v690 != 32) {
                    goto LABEL_1435;
                  }
                }
                else if (v690 != 160 && v690 != 5760 && v690 != 6158)
                {
                  goto LABEL_1435;
                }
              }
              else
              {
                if (v690 <= 8238)
                {
                  if ((v690 - 0x2000) < 0xB) {
                    goto LABEL_1421;
                  }
LABEL_1435:
                  int v696 = 0;
                  goto LABEL_1421;
                }
                if (v690 != 8239 && v690 != 8287 && v690 != 12288) {
                  goto LABEL_1435;
                }
              }
LABEL_1421:
              if (v696 == v689) {
                goto LABEL_2417;
              }
              v662 += v692;
              *(void *)(v13 + 80) = v662;
              if (!--v687) {
                goto LABEL_2417;
              }
              continue;
            }
          case 20:
          case 21:
            uint64_t v683 = v11;
            v684 = v16;
            v685 = v15;
            v686 = (unsigned __int8 *)a6;
            BOOL v474 = v659 >= v660;
            unsigned int v832 = v659 - v660;
            if (v832 == 0 || !v474) {
              goto LABEL_2417;
            }
            unint64_t v833 = *v15;
            int v834 = v671 == 20;
            while ((unint64_t)v662 < v833)
            {
              unsigned int v835 = *v662;
              if (v835 < 0xC0)
              {
                uint64_t v837 = 1;
              }
              else
              {
                int v836 = v662[1] & 0x3F;
                if ((v835 & 0x20) != 0)
                {
                  if ((v835 & 0x10) != 0)
                  {
                    if ((v835 & 8) != 0)
                    {
                      int v838 = v662[2] & 0x3F;
                      int v839 = v662[3] & 0x3F;
                      int v840 = v662[4] & 0x3F;
                      if ((v835 & 4) != 0)
                      {
                        unsigned int v835 = ((v835 & 1) << 30) | (v836 << 24) | (v838 << 18) | (v839 << 12) | (v840 << 6) | v662[5] & 0x3F;
                        uint64_t v837 = 6;
                      }
                      else
                      {
                        unsigned int v835 = ((v835 & 3) << 24) | (v836 << 18) | (v838 << 12) | (v839 << 6) | v840;
                        uint64_t v837 = 5;
                      }
                    }
                    else
                    {
                      unsigned int v835 = ((v835 & 7) << 18) | (v836 << 12) | ((v662[2] & 0x3F) << 6) | v662[3] & 0x3F;
                      uint64_t v837 = 4;
                    }
                  }
                  else
                  {
                    unsigned int v835 = ((v835 & 0xF) << 12) | (v836 << 6) | v662[2] & 0x3F;
                    uint64_t v837 = 3;
                  }
                }
                else
                {
                  uint64_t v837 = 2;
                  unsigned int v835 = v662[1] & 0x3F | ((v835 & 0x1F) << 6);
                }
              }
              unsigned int v841 = v835 - 10;
              BOOL v842 = v835 == 133;
              unsigned int v843 = v835 - 8232;
              int v845 = v841 < 4 || v843 < 2 || v842;
              if (v845 != v834)
              {
                v662 += v837;
                *(void *)(v13 + 80) = v662;
                if (--v832) {
                  continue;
                }
              }
              goto LABEL_2417;
            }
LABEL_2143:
            unsigned int v979 = (unsigned __int16)*v684;
            if (*v684 && (unint64_t)v662 > *v14)
            {
LABEL_2145:
              _DWORD *v1360 = 1;
              if (v979 > 1) {
                return 4294967294;
              }
            }
            goto LABEL_2417;
          default:
            return v19;
        }
      }
      uint64_t v19 = 4294967252;
      switch(v671)
      {
        case 6:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v980 = v659 - v660;
          if (v980 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v981 = *v15;
          while ((unint64_t)v662 < v981)
          {
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v662) & 4) == 0)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v980) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 7:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v982 = v659 - v660;
          if (v982 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v983 = *v15;
          while ((unint64_t)v662 < v983)
          {
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v662) & 4) != 0)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v982) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 8:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v984 = v659 - v660;
          if (v984 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v985 = *v15;
          while ((unint64_t)v662 < v985)
          {
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v662) & 1) == 0)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v984) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 9:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v986 = v659 - v660;
          if (v986 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v987 = *v15;
          while ((unint64_t)v662 < v987)
          {
            if (*(unsigned char *)(*(void *)(v7 + 104) + *v662))
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v986) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 10:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v988 = v659 - v660;
          if (v988 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v989 = *v15;
          while ((unint64_t)v662 < v989)
          {
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v662) & 0x10) == 0)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v988) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 11:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v990 = v659 - v660;
          if (v990 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v991 = *v15;
          while ((unint64_t)v662 < v991)
          {
            if ((*(unsigned char *)(*(void *)(v7 + 104) + *v662) & 0x10) != 0)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v990) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 12:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          if (v659 <= v660) {
            goto LABEL_2262;
          }
          while (1)
          {
            uint64_t v992 = *v15;
            if ((unint64_t)v662 >= *v15) {
              goto LABEL_2257;
            }
            int v993 = *(_DWORD *)(v7 + 244);
            if (v993)
            {
              if (_pcre2_is_newline_8(v662, v993, v992, v1356, v1361)) {
                goto LABEL_2262;
              }
              v662 = *(unsigned __int8 **)(v13 + 80);
            }
            else
            {
              uint64_t v994 = *v1356;
              if ((unint64_t)v662 <= v992 - v994
                && *v662 == *(unsigned __int8 *)(v7 + 252)
                && (v994 == 1 || v662[1] == *(unsigned __int8 *)(v7 + 253)))
              {
                goto LABEL_2262;
              }
            }
            unsigned int v995 = (unsigned __int16)*v684;
            if (*v684)
            {
              if ((unint64_t)(v662 + 1) >= *v15
                && !*(_DWORD *)(v7 + 244)
                && *v1356 == 2
                && *v662 == *(unsigned __int8 *)(v7 + 252))
              {
                _DWORD *v1360 = 1;
                if (v995 > 1) {
                  return 4294967294;
                }
              }
            }
            *(void *)(v13 + 80) = ++v662;
            if (++v660 >= *(_DWORD *)(v13 + 60)) {
              goto LABEL_2262;
            }
          }
        case 13:
        case 14:
          uint64_t v697 = v11;
          v684 = v16;
          v698 = (unsigned __int8 *)a6;
          v685 = v15;
          v699 = (unsigned __int8 *)*v15;
          if (v661 <= *v15 - v662)
          {
            *(void *)(v13 + 80) = &v662[v661];
          }
          else
          {
            *(void *)(v13 + 80) = v699;
            unsigned int v700 = (unsigned __int16)*v16;
            if (*v16)
            {
              if ((unint64_t)v699 > *v14)
              {
                _DWORD *v1360 = 1;
                if (v700 > 1) {
                  return 4294967294;
                }
              }
            }
          }
          goto LABEL_2262;
        case 17:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v996 = v659 - v660;
          if (v996 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v997 = *v15;
          while (2)
          {
            if ((unint64_t)v662 >= v997) {
              goto LABEL_2257;
            }
            int v998 = *v662;
            if (v998 == 10)
            {
              uint64_t v1000 = 1;
            }
            else if (v998 == 13)
            {
              v999 = v662 + 1;
              *(void *)(v13 + 80) = v662 + 1;
              if ((unint64_t)(v662 + 1) >= v997) {
                goto LABEL_2262;
              }
              if (*v999 != 10)
              {
LABEL_2220:
                v662 = v999;
                if (!--v996) {
                  goto LABEL_2262;
                }
                continue;
              }
              uint64_t v1000 = 2;
            }
            else if (*(_WORD *)(v7 + 130) == 2 || (uint64_t v1000 = 1, (v998 - 11) >= 2) && v998 != 133)
            {
LABEL_2262:
              a6 = (uint64_t)v698;
              if (v697 == 2) {
                goto LABEL_2418;
              }
              v1014 = *(unsigned __int8 **)(v13 + 80);
              unsigned int v15 = v685;
              unsigned int v16 = v684;
              uint64_t v11 = v697;
LABEL_2939:
              if (v1014 != *(unsigned __int8 **)(v13 + 8))
              {
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
                LODWORD(v11) = 0;
                a2 = *(unsigned __int8 **)v13;
                char v1316 = 34;
                goto LABEL_3216;
              }
              goto LABEL_2445;
            }
            break;
          }
          v999 = &v662[v1000];
          *(void *)(v13 + 80) = v999;
          goto LABEL_2220;
        case 18:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v1001 = v659 - v660;
          if (v1001 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v1002 = *v15;
          while ((unint64_t)v662 < v1002)
          {
            int v1003 = *v662;
            if (v1003 != 9 && v1003 != 32 && v1003 != 160)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v1001) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 19:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v1004 = v659 - v660;
          if (v1004 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v1005 = *v15;
          while ((unint64_t)v662 < v1005)
          {
            int v1006 = *v662;
            if (v1006 == 9 || v1006 == 160 || v1006 == 32)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v1004) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 20:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v1007 = v659 - v660;
          if (v1007 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v1008 = *v15;
          while ((unint64_t)v662 < v1008)
          {
            int v1009 = *v662;
            if ((v1009 - 10) >= 4 && v1009 != 133)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v1007) {
                continue;
              }
            }
            goto LABEL_2262;
          }
          goto LABEL_2257;
        case 21:
          uint64_t v697 = v11;
          v684 = v16;
          v685 = v15;
          v698 = (unsigned __int8 *)a6;
          BOOL v474 = v659 >= v660;
          unsigned int v1010 = v659 - v660;
          if (v1010 == 0 || !v474) {
            goto LABEL_2262;
          }
          unint64_t v1011 = *v15;
          while ((unint64_t)v662 < v1011)
          {
            int v1012 = *v662;
            if ((v1012 - 10) < 4 || v1012 == 133)
            {
              *(void *)(v13 + 80) = ++v662;
              if (--v1010) {
                continue;
              }
            }
            goto LABEL_2262;
          }
LABEL_2257:
          unsigned int v1013 = (unsigned __int16)*v684;
          if (*v684)
          {
            if ((unint64_t)v662 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v1013 > 1) {
                return 4294967294;
              }
            }
          }
          goto LABEL_2262;
        default:
          return v19;
      }
    case 0x6Eu:
    case 0x6Fu:
      int v78 = a2 + 1;
      *(void *)(v13 + 16) = a2 + 1;
      uint64_t v79 = a2 + 33;
      *(void *)uint64_t v13 = a2 + 33;
      unsigned int v80 = a2[33] - 98;
      if (v80 > 0xB)
      {
        *(void *)(v13 + 56) = 0x100000001;
        unsigned int v83 = 1;
        unsigned int v82 = 1;
        if (v1364)
        {
LABEL_634:
          unint64_t v334 = *v15;
          int v335 = *(unsigned __int8 **)(v13 + 80);
          for (junsigned int j = 1; jj <= v82; ++jj)
          {
            if ((unint64_t)v335 >= v334) {
              goto LABEL_682;
            }
            __int16 v337 = v335 + 1;
            *(void *)(v13 + 80) = v335 + 1;
            unsigned int v338 = *v335;
            if (v338 < 0xC0) {
              goto LABEL_650;
            }
            if ((v338 & 0x20) != 0)
            {
              int v339 = *v337 & 0x3F;
              if ((v338 & 0x10) != 0)
              {
                if ((v338 & 8) != 0)
                {
                  int v340 = v335[2] & 0x3F;
                  int v341 = v335[3] & 0x3F;
                  int v342 = v335[4] & 0x3F;
                  if ((v338 & 4) != 0)
                  {
                    unsigned int v338 = ((v338 & 1) << 30) | (v339 << 24) | (v340 << 18) | (v341 << 12) | (v342 << 6) | v335[5] & 0x3F;
                    __int16 v337 = v335 + 6;
                  }
                  else
                  {
                    unsigned int v338 = ((v338 & 3) << 24) | (v339 << 18) | (v340 << 12) | (v341 << 6) | v342;
                    __int16 v337 = v335 + 5;
                  }
                }
                else
                {
                  unsigned int v338 = ((v338 & 7) << 18) | (v339 << 12) | ((v335[2] & 0x3F) << 6) | v335[3] & 0x3F;
                  __int16 v337 = v335 + 4;
                }
              }
              else
              {
                unsigned int v338 = ((v338 & 0xF) << 12) | (v339 << 6) | v335[2] & 0x3F;
                __int16 v337 = v335 + 3;
              }
              *(void *)(v13 + 80) = v337;
            }
            else
            {
              __int16 v337 = v335 + 2;
              *(void *)(v13 + 80) = v335 + 2;
              unsigned int v338 = v335[1] & 0x3F | ((v338 & 0x1F) << 6);
            }
            if (v338 < 0x100)
            {
LABEL_650:
              if (((v78[(unint64_t)v338 >> 3] >> (v338 & 7)) & 1) == 0) {
                goto LABEL_1172;
              }
            }
            else if (v18 == 110)
            {
              goto LABEL_1172;
            }
            int v335 = v337;
          }
          goto LABEL_658;
        }
      }
      else
      {
        if (((1 << v80) & 0x73F) != 0)
        {
          uint64_t v79 = a2 + 34;
          *(void *)uint64_t v13 = a2 + 34;
          unsigned int v81 = a2[33] - 98;
          unsigned int v82 = rep_min[v81];
          *(_DWORD *)(v13 + 56) = v82;
          unsigned int v83 = rep_max[v81];
          *(_DWORD *)(v13 + 60) = v83;
          uint64_t v11 = rep_typ[v81];
        }
        else
        {
          unsigned int v82 = __rev16(*((unsigned __int16 *)a2 + 17));
          *(_DWORD *)(v13 + 56) = v82;
          unsigned int v333 = __rev16(*((unsigned __int16 *)a2 + 18));
          if (v333) {
            unsigned int v83 = v333;
          }
          else {
            unsigned int v83 = -1;
          }
          *(_DWORD *)(v13 + 60) = v83;
          uint64_t v11 = rep_typ[a2[33] - 98];
          uint64_t v79 = a2 + 38;
          *(void *)uint64_t v13 = a2 + 38;
        }
        if (v1364)
        {
          if (v82) {
            goto LABEL_634;
          }
LABEL_658:
          if (v83 == v82) {
            goto LABEL_2445;
          }
          if (!v11)
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = 0;
            if (v1364)
            {
              char v1316 = -56;
            }
            else
            {
LABEL_3262:
              LODWORD(v11) = 0;
              char v1316 = 23;
            }
            a2 = v79;
            goto LABEL_3216;
          }
          int v346 = *(unsigned __int8 **)(v13 + 80);
          *(void *)(v13 + 8) = v346;
          if (!v1364)
          {
            v504 = v346;
            BOOL v474 = v83 >= v82;
            unsigned int v505 = v83 - v82;
            if (v505 == 0 || !v474) {
              goto LABEL_1850;
            }
            unint64_t v506 = *v15;
            v504 = v346;
            while (2)
            {
              if ((unint64_t)v504 >= v506)
              {
                unsigned int v847 = (unsigned __int16)*v16;
                if (*v16)
                {
                  if ((unint64_t)v504 > *v14)
                  {
                    _DWORD *v1360 = 1;
                    if (v847 > 1) {
                      return 4294967294;
                    }
                  }
                }
              }
              else if ((v78[(unint64_t)*v504 >> 3] >> (*v504 & 7)))
              {
                *(void *)(v13 + 80) = ++v504;
                if (--v505) {
                  continue;
                }
              }
              break;
            }
LABEL_1850:
            if (v11 == 2) {
              goto LABEL_2445;
            }
LABEL_2924:
            v1351 = v16;
            unsigned int v1362 = v11;
            if (v504 >= v346)
            {
              long long v104 = v14;
              LODWORD(v11) = 0;
              a2 = *(unsigned __int8 **)v13;
              char v1316 = 24;
              goto LABEL_3216;
            }
LABEL_2925:
            uint64_t v20 = 0;
            goto LABEL_2451;
          }
          BOOL v474 = v83 >= v82;
          unsigned int v347 = v83 - v82;
          if (v347 == 0 || !v474) {
            goto LABEL_1845;
          }
          unint64_t v348 = *v15;
          while (1)
          {
            if ((unint64_t)v346 >= v348)
            {
              unsigned int v846 = (unsigned __int16)*v16;
              if (*v16)
              {
                if ((unint64_t)v346 > *v14)
                {
                  _DWORD *v1360 = 1;
                  if (v846 > 1) {
                    return 4294967294;
                  }
                }
              }
LABEL_1845:
              if (v11 != 2)
              {
                long long v104 = v14;
                v1351 = v16;
                unsigned int v1362 = v11;
LABEL_3358:
                LODWORD(v11) = 0;
                a2 = *(unsigned __int8 **)v13;
                char v1316 = -55;
                goto LABEL_3216;
              }
              goto LABEL_2445;
            }
            unsigned int v349 = *v346;
            if (v349 < 0xC0) {
              break;
            }
            int v350 = v346[1] & 0x3F;
            if ((v349 & 0x20) != 0)
            {
              if ((v349 & 0x10) != 0)
              {
                if ((v349 & 8) != 0)
                {
                  int v352 = v346[2] & 0x3F;
                  int v353 = v346[3] & 0x3F;
                  int v354 = v346[4] & 0x3F;
                  if ((v349 & 4) != 0)
                  {
                    unsigned int v349 = ((v349 & 1) << 30) | (v350 << 24) | (v352 << 18) | (v353 << 12) | (v354 << 6) | v346[5] & 0x3F;
                    uint64_t v351 = 6;
                  }
                  else
                  {
                    unsigned int v349 = ((v349 & 3) << 24) | (v350 << 18) | (v352 << 12) | (v353 << 6) | v354;
                    uint64_t v351 = 5;
                  }
                }
                else
                {
                  unsigned int v349 = ((v349 & 7) << 18) | (v350 << 12) | ((v346[2] & 0x3F) << 6) | v346[3] & 0x3F;
                  uint64_t v351 = 4;
                }
              }
              else
              {
                unsigned int v349 = ((v349 & 0xF) << 12) | (v350 << 6) | v346[2] & 0x3F;
                uint64_t v351 = 3;
              }
            }
            else
            {
              uint64_t v351 = 2;
              unsigned int v349 = v346[1] & 0x3F | ((v349 & 0x1F) << 6);
            }
            if (v349 < 0x100) {
              goto LABEL_679;
            }
            if (v18 == 110) {
              goto LABEL_1845;
            }
LABEL_680:
            v346 += v351;
            *(void *)(v13 + 80) = v346;
            if (!--v347) {
              goto LABEL_1845;
            }
          }
          uint64_t v351 = 1;
LABEL_679:
          if (((v78[(unint64_t)v349 >> 3] >> (v349 & 7)) & 1) == 0) {
            goto LABEL_1845;
          }
          goto LABEL_680;
        }
        if (!v82) {
          goto LABEL_658;
        }
      }
      uint64_t v343 = 0;
      unint64_t v344 = *v15;
      BOOL v345 = *(unsigned __int8 **)(v13 + 80);
      while (1)
      {
        int v335 = &v345[v343];
        if ((unint64_t)&v345[v343] >= v344) {
          break;
        }
        *(void *)(v13 + 80) = v335 + 1;
        if (((v78[(unint64_t)*v335 >> 3] >> (*v335 & 7)) & 1) == 0) {
          goto LABEL_1172;
        }
        if ((int)++v343 + 1 > v82) {
          goto LABEL_658;
        }
      }
LABEL_682:
      unsigned int v108 = (unsigned __int16)*v16;
      if (!*v16 || (unint64_t)v335 <= *v14) {
        goto LABEL_1172;
      }
LABEL_1171:
      _DWORD *v1360 = 1;
      if (v108 <= 1) {
        goto LABEL_1172;
      }
      return 4294967294;
    case 0x70u:
      *(void *)(v13 + 16) = a2 + 3;
      int v231 = &a2[__rev16(*(unsigned __int16 *)(a2 + 1))];
      *(void *)uint64_t v13 = v231;
      unsigned int v232 = *v231 - 98;
      if (v232 <= 0xB)
      {
        if (((1 << v232) & 0x73F) != 0)
        {
          *(void *)uint64_t v13 = v231 + 1;
          unsigned int v233 = *v231 - 98;
          unsigned int v234 = rep_min[v233];
          *(_DWORD *)(v13 + 56) = v234;
          unsigned int v235 = rep_max[v233];
          *(_DWORD *)(v13 + 60) = v235;
          uint64_t v11 = rep_typ[v233];
        }
        else
        {
          unsigned int v234 = __rev16(*(unsigned __int16 *)(v231 + 1));
          *(_DWORD *)(v13 + 56) = v234;
          unsigned int v235 = __rev16(*(unsigned __int16 *)(v231 + 3));
          if (!v235) {
            unsigned int v235 = -1;
          }
          *(_DWORD *)(v13 + 60) = v235;
          uint64_t v11 = rep_typ[*v231 - 98];
          *(void *)uint64_t v13 = v231 + 5;
        }
        if (v234) {
          goto LABEL_1028;
        }
        unsigned int v524 = 0;
LABEL_1053:
        if (v524 == v235) {
          goto LABEL_2445;
        }
        if (v11)
        {
          v525 = *(unsigned __int8 **)(v13 + 80);
          *(void *)(v13 + 8) = v525;
          while (1)
          {
            if (v524 >= *(_DWORD *)(v13 + 60)) {
              goto LABEL_1855;
            }
            if ((unint64_t)v525 >= *v15) {
              break;
            }
            unsigned int v526 = *v525;
            uint64_t v527 = 1;
            if (v1364 && v526 >= 0xC0)
            {
              int v528 = v525[1] & 0x3F;
              if ((v526 & 0x20) != 0)
              {
                if ((v526 & 0x10) != 0)
                {
                  if ((v526 & 8) != 0)
                  {
                    v530 = v14;
                    int v534 = v525[2] & 0x3F;
                    int v535 = v525[3] & 0x3F;
                    int v536 = v525[4] & 0x3F;
                    v529 = v15;
                    v531 = v16;
                    v532 = (unsigned __int8 *)a6;
                    if ((v526 & 4) != 0)
                    {
                      unsigned int v526 = ((v526 & 1) << 30) | (v528 << 24) | (v534 << 18) | (v535 << 12) | (v536 << 6) | v525[5] & 0x3F;
                      uint64_t v527 = 6;
                    }
                    else
                    {
                      unsigned int v526 = ((v526 & 3) << 24) | (v528 << 18) | (v534 << 12) | (v535 << 6) | v536;
                      uint64_t v527 = 5;
                    }
                  }
                  else
                  {
                    v529 = v15;
                    v530 = v14;
                    v531 = v16;
                    v532 = (unsigned __int8 *)a6;
                    unsigned int v526 = ((v526 & 7) << 18) | (v528 << 12) | ((v525[2] & 0x3F) << 6) | v525[3] & 0x3F;
                    uint64_t v527 = 4;
                  }
                }
                else
                {
                  v529 = v15;
                  v530 = v14;
                  v531 = v16;
                  v532 = (unsigned __int8 *)a6;
                  unsigned int v526 = ((v526 & 0xF) << 12) | (v528 << 6) | v525[2] & 0x3F;
                  uint64_t v527 = 3;
                }
              }
              else
              {
                v529 = v15;
                v530 = v14;
                v531 = v16;
                v532 = (unsigned __int8 *)a6;
                uint64_t v527 = 2;
                unsigned int v526 = v525[1] & 0x3F | ((v526 & 0x1F) << 6);
              }
            }
            else
            {
              v529 = v15;
              v530 = v14;
              v531 = v16;
              v532 = (unsigned __int8 *)a6;
            }
            BOOL v533 = _pcre2_xclass_8(v526, *(unsigned char **)(v13 + 16));
            a6 = (uint64_t)v532;
            unsigned int v16 = v531;
            uint64_t v14 = v530;
            unsigned int v15 = v529;
            if (!v533) {
              goto LABEL_1855;
            }
            v525 = (unsigned __int8 *)(*(void *)(v13 + 80) + v527);
            *(void *)(v13 + 80) = v525;
            ++v524;
          }
          unsigned int v848 = (unsigned __int16)*v16;
          if (*v16)
          {
            if ((unint64_t)v525 > *v14)
            {
              _DWORD *v1360 = 1;
              if (v848 > 1) {
                return 4294967294;
              }
            }
          }
LABEL_1855:
          if (v11 == 2) {
            goto LABEL_2445;
          }
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = v11;
          goto LABEL_3231;
        }
        long long v104 = v14;
        v1351 = v16;
        unsigned int v1362 = 0;
LABEL_3272:
        LODWORD(v11) = 0;
        a2 = *(unsigned __int8 **)v13;
        char v1316 = 100;
        goto LABEL_3216;
      }
      *(void *)(v13 + 56) = 0x100000001;
LABEL_1028:
      unsigned int v513 = 1;
      break;
    case 0x71u:
    case 0x72u:
      BOOL v84 = v18 == 114;
      *(_DWORD *)(v13 + 64) = v84;
      *(void *)(v13 + 40) = ((a2[1] << 9) | (2 * a2[2])) - 2;
      unsigned int v85 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      goto LABEL_128;
    case 0x73u:
    case 0x74u:
      BOOL v84 = v18 == 116;
      *(_DWORD *)(v13 + 64) = v84;
      unsigned int v86 = __rev16(*(unsigned __int16 *)(a2 + 3));
      uint64_t v87 = *(void *)(v7 + 136);
      int v88 = a2[1];
      int v89 = a2[2];
      uint64_t v90 = *(unsigned __int16 *)(v7 + 134);
      unsigned int v85 = a2 + 5;
      *(void *)uint64_t v13 = a2 + 5;
      if (!v86) {
        goto LABEL_128;
      }
      unsigned int v91 = v89 | (v88 << 8);
      int v92 = *(unsigned __int8 **)(v13 + 120);
      uint64_t v93 = (unsigned __int8 *)(v87 + v91 * (unint64_t)v90 + 1);
      while (2)
      {
        unint64_t v94 = (unsigned __int8 *)(((*(v93 - 1) << 9) | (2 * *v93)) - 2);
        *(void *)(v13 + 40) = v94;
        if (v94 >= v92)
        {
          if (v86 >= 2) {
            goto LABEL_127;
          }
        }
        else
        {
          BOOL v95 = *(void *)(v13 + 8 * (void)v94 + 128) == -1 && v86 > 1;
          if (v95)
          {
LABEL_127:
            v93 += v90;
            --v86;
            continue;
          }
        }
        break;
      }
LABEL_128:
      int v96 = *v85;
      if ((v96 - 98) >= 6)
      {
        if ((v96 - 104) >= 2)
        {
          unint64_t v100 = v15;
          int v355 = v16;
          int v356 = (unsigned __int8 *)a6;
          int v357 = match_ref(*(void *)(v13 + 40), v84, v13, v7, &v1367);
          if (!v357)
          {
            *(void *)(v13 + 80) += v1367;
            a6 = (uint64_t)v356;
            unsigned int v16 = v355;
LABEL_1109:
            unsigned int v15 = v100;
            goto LABEL_2445;
          }
          unsigned int v16 = v355;
          if (v357 >= 1) {
            *(void *)(v13 + 80) = *v15;
          }
          unsigned int v358 = (unsigned __int16)*v355;
          a6 = (uint64_t)v356;
          if (!*v355) {
            goto LABEL_2925;
          }
          uint64_t v229 = *(unsigned __int8 **)(v13 + 80);
          if ((unint64_t)v229 < *v15) {
            goto LABEL_2925;
          }
LABEL_1228:
          if ((unint64_t)v229 <= *v14) {
            goto LABEL_2925;
          }
LABEL_1229:
          _DWORD *v1360 = 1;
          if (v358 > 1) {
            return 4294967294;
          }
          goto LABEL_2925;
        }
        unsigned int v98 = __rev16(*(unsigned __int16 *)(v85 + 1));
        *(_DWORD *)(v13 + 56) = v98;
        unsigned int v99 = __rev16(*(unsigned __int16 *)(v85 + 3));
        *(_DWORD *)(v13 + 60) = v99;
        unsigned int v116 = *v85;
        long long v115 = v85 + 5;
        uint64_t v11 = rep_typ[v116 - 98];
        if (!v99) {
          unsigned int v99 = -1;
        }
        *(_DWORD *)(v13 + 60) = v99;
        *(void *)uint64_t v13 = v115;
      }
      else
      {
        *(void *)uint64_t v13 = v85 + 1;
        unsigned int v97 = *v85 - 98;
        unsigned int v98 = rep_min[v97];
        *(_DWORD *)(v13 + 56) = v98;
        unsigned int v99 = rep_max[v97];
        *(_DWORD *)(v13 + 60) = v99;
        uint64_t v11 = rep_typ[v97];
      }
      unint64_t v117 = *(void *)(v13 + 40);
      if (v117 >= *(void *)(v13 + 120)
        || (long long v118 = (unsigned __int8 **)(v13 + 8 * v117), v119 = v118[16], v119 == (unsigned __int8 *)-1))
      {
        if (v98 && (*(unsigned char *)(v7 + 233) & 2) == 0) {
          goto LABEL_158;
        }
        goto LABEL_2445;
      }
      if (v119 == v118[17]) {
        goto LABEL_2445;
      }
      if (v98)
      {
LABEL_158:
        long long v121 = v14;
        long long v122 = v16;
        uint64_t v123 = (unsigned __int8 *)a6;
        unsigned int v124 = 1;
        do
        {
          v1366 = 0;
          int v125 = match_ref(*(void *)(v13 + 40), *(_DWORD *)(v13 + 64), v13, v7, &v1366);
          if (v125)
          {
            a6 = (uint64_t)v123;
            if (v125 >= 1) {
              *(void *)(v13 + 80) = *v15;
            }
            unsigned int v16 = v122;
            unsigned int v324 = *v122;
            uint64_t v14 = v121;
            if (!v324) {
              goto LABEL_1172;
            }
            int v325 = *(unsigned __int8 **)(v13 + 80);
            if ((unint64_t)v325 < *v15) {
              goto LABEL_1172;
            }
            if ((unint64_t)v325 <= *v121) {
              goto LABEL_1172;
            }
            _DWORD *v1360 = 1;
            if (v324 < 2) {
              goto LABEL_1172;
            }
            return 4294967294;
          }
          *(void *)(v13 + 80) += v1366;
          ++v124;
          unsigned int v120 = *(_DWORD *)(v13 + 56);
        }
        while (v124 <= v120);
        unsigned int v99 = *(_DWORD *)(v13 + 60);
        a6 = (uint64_t)v123;
        unsigned int v16 = v122;
        uint64_t v14 = v121;
      }
      else
      {
        unsigned int v120 = 0;
      }
      if (v120 == v99) {
        goto LABEL_2445;
      }
      long long v104 = v14;
      v1351 = v16;
      if (v11)
      {
        *(void *)(v13 + 8) = *(void *)(v13 + 80);
        *(void *)(v13 + 24) = *(void *)(v13 + 8 * *(void *)(v13 + 40) + 136)
                              - *(void *)(v13 + 8 * *(void *)(v13 + 40) + 128);
        if (v120 < v99)
        {
          unint64_t v126 = (unsigned __int8 *)a6;
          int v127 = 1;
          while (1)
          {
            v1366 = 0;
            int v128 = match_ref(*(void *)(v13 + 40), *(_DWORD *)(v13 + 64), v13, v7, &v1366);
            if (v128) {
              break;
            }
            if (v1366 != *(unsigned __int8 **)(v13 + 24)) {
              int v127 = 0;
            }
            *(void *)(v13 + 80) += v1366;
            if (++v120 >= *(_DWORD *)(v13 + 60)) {
              goto LABEL_1182;
            }
          }
          if (v128 >= 1)
          {
            unsigned int v581 = (unsigned __int16)*v1351;
            if (*v1351)
            {
              if (*v15 > *v14)
              {
                _DWORD *v1360 = 1;
                if (v581 >= 2) {
                  return 4294967294;
                }
              }
            }
          }
LABEL_1182:
          a6 = (uint64_t)v126;
          if (!v127)
          {
            unsigned int v1362 = v11;
            *(_DWORD *)(v13 + 60) = v120;
LABEL_3360:
            LODWORD(v11) = 0;
            a2 = *(unsigned __int8 **)v13;
            char v1316 = 22;
            goto LABEL_3216;
          }
        }
        v582 = *(unsigned __int8 **)(v13 + 80);
        unsigned int v16 = v1351;
LABEL_2922:
        v1351 = v16;
        unsigned int v1362 = v11;
        if ((unint64_t)v582 >= *(void *)(v13 + 8))
        {
          long long v104 = v14;
          LODWORD(v11) = 0;
          a2 = *(unsigned __int8 **)v13;
          char v1316 = 21;
          goto LABEL_3216;
        }
        goto LABEL_2925;
      }
      unsigned int v1362 = 0;
      goto LABEL_3241;
    case 0x75u:
      uint64_t v1318 = __rev16(*(unsigned __int16 *)(a2 + 1));
      v1051 = (unsigned __int8 *)(*(void *)(v7 + 144) + v1318);
      unsigned int v1362 = v11;
      long long v104 = v14;
      if (v1318) {
        LODWORD(v1318) = __rev16(*(unsigned __int16 *)(v1051 + 3));
      }
      v1351 = v16;
      LODWORD(v11) = v1318 | 0x40000;
      if (*(_DWORD *)(v13 + 104) == -1) {
        goto LABEL_3351;
      }
      v1333 = (unsigned __int8 **)v13;
      do
      {
        v1334 = v1333[14];
        if (v1334 == (unsigned __int8 *)-1) {
          goto LABEL_3351;
        }
        v1335 = &v1334[*(void *)(v7 + 32)];
        v1333 = (unsigned __int8 **)&v1335[v1358];
      }
      while (*((_DWORD *)v1335 + 13) != v11);
      if (*(unsigned __int8 **)(v13 + 80) == v1333[10]) {
        return 4294967244;
      }
LABEL_3351:
      *(void *)(v13 + 8) = v1051;
      *(_DWORD *)(v13 + 56) = v11;
      uint64_t v1311 = *v1051;
      goto LABEL_3352;
    case 0x76u:
    case 0x77u:
      unint64_t v100 = v15;
      long long v101 = v16;
      long long v102 = (unsigned __int8 *)a6;
      uint64_t v20 = do_callout_0(v13, (void *)v7, (uint64_t *)&v1367);
      if ((int)v20 > 0)
      {
        uint64_t v20 = 0;
LABEL_132:
        a6 = (uint64_t)v102;
        unsigned int v16 = v101;
        unsigned int v15 = v100;
        goto LABEL_2451;
      }
      unsigned int v16 = v101;
      if ((v20 & 0x80000000) != 0)
      {
        a6 = (uint64_t)v102;
        goto LABEL_2451;
      }
      *(void *)v13 += v1367;
      a6 = (uint64_t)v102;
      goto LABEL_1109;
    case 0x78u:
      do
      {
        a2 += __rev16(*(unsigned __int16 *)(a2 + 1));
        *(void *)uint64_t v13 = a2;
      }
      while (*a2 == 120);
      goto LABEL_2445;
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
      size_t v35 = &a2[-__rev16(*(unsigned __int16 *)(a2 + 1))];
      int v36 = *v35;
      if ((v36 | 4) == 0x87)
      {
        unint64_t v37 = 0;
      }
      else
      {
        long long v112 = (unsigned __int8 *)(*(void *)(v7 + 32) + *(void *)(v13 + 112));
        unint64_t v37 = (char *)&v112[v1358];
        *(void *)(v13 + 112) = *(void *)&v112[v1358 + 112];
        v1357 = v112;
        if (*((unsigned __int16 *)v112 + 27) << 16 == 196608)
        {
          long long v113 = (unsigned __int8 *)a6;
          long long v114 = v16;
          cstdlib_memcpy(v37 + 128, (const void *)(v13 + 128), 8 * *(void *)(v13 + 120));
          unsigned int v16 = v114;
          a6 = (uint64_t)v113;
          *((void *)v37 + 15) = *(void *)(v13 + 120);
          *(void *)(v13 + 32) = v13 - (void)v37;
          uint64_t v20 = 1;
          goto LABEL_2451;
        }
        int v36 = *v35;
      }
      uint64_t v20 = 1;
      switch(v36)
      {
        case 126:
        case 128:
          BOOL v312 = *(unsigned __int8 **)(v13 + 80);
          if ((unint64_t)v312 > *(void *)(v7 + 184)) {
            *(void *)(v7 + 184) = v312;
          }
          *(void *)(v13 + 80) = *((void *)v37 + 10);
          goto LABEL_570;
        case 127:
        case 129:
          goto LABEL_2451;
        case 130:
LABEL_570:
          *(void *)(v13 + 32) = v13 - (void)v37;
          uint64_t v313 = *(void *)v37 + __rev16(*(unsigned __int16 *)(*(void *)v37 + 1));
          if (*(unsigned char *)v313 == 120)
          {
            do
            {
              *(void *)unint64_t v37 = v313;
              v313 += __rev16(*(unsigned __int16 *)(v313 + 1));
            }
            while (*(unsigned char *)v313 == 120);
            a2 = *(unsigned __int8 **)v13;
          }
          goto LABEL_575;
        case 133:
        case 134:
        case 138:
        case 139:
          unsigned int v309 = *(unsigned __int16 *)(v35 + 3);
          if (*(_DWORD *)(v13 + 104) == bswap32(v309) >> 16)
          {
            unint64_t v310 = (unsigned __int8 *)a6;
            int v311 = v16;
            cstdlib_memcpy((void *)(v13 + 128), &v1357[v1358 + 128], 8 * *(void *)&v1357[v1358 + 120]);
            unsigned int v16 = v311;
            a6 = (uint64_t)v310;
            *(void *)(v13 + 120) = *(void *)&v1357[v1358 + 120];
            *(void *)(v13 + 104) = *(void *)&v1357[v1358 + 104];
            int v246 = *(unsigned __int8 **)&v1357[v1358];
            goto LABEL_3030;
          }
          unsigned int v314 = __rev16(v309);
          unint64_t v315 = 2 * v314 - 2;
          *(_DWORD *)(v13 + 108) = v314;
          uint64_t v316 = *(void *)(v7 + 152);
          uint64_t v317 = (unsigned __int8 *)(*((void *)v37 + 10) - v316);
          v318 = (unsigned __int8 **)(v13 + 8 * v315);
          int v319 = (unsigned __int8 *)(*(void *)(v13 + 80) - v316);
          v318[16] = v317;
          v318[17] = v319;
          if (*(void *)(v13 + 120) <= v315) {
            *(void *)(v13 + 120) = v315 + 2;
          }
LABEL_575:
          if (*a2 == 124)
          {
            uint64_t v320 = v37 + 80;
            uint64_t v321 = (unsigned __int8 *)a6;
            uint64_t v322 = v16;
            cstdlib_memcpy(v320, (const void *)(v13 + 80), __n);
            unsigned int v16 = v322;
            a6 = (uint64_t)v321;
            uint64_t v20 = 4294966298;
            goto LABEL_2451;
          }
          if (v18 != 121 && (!v37 || *(void *)(v13 + 80) != *((void *)v37 + 10)))
          {
            long long v104 = v14;
            v1351 = v16;
            unsigned int v1362 = v11;
            LODWORD(v11) = 0;
            BOOL v1321 = v18 == 123;
            if (v18 == 123) {
              char v1316 = 6;
            }
            else {
              char v1316 = 7;
            }
            if (v1321) {
              a2 += 3;
            }
            else {
              a2 = v35;
            }
            goto LABEL_3216;
          }
          break;
        default:
          goto LABEL_575;
      }
      goto LABEL_2450;
    case 0x7Du:
      uint64_t v236 = __rev16(*(unsigned __int16 *)(a2 + 1));
      if (v1364)
      {
        if (v236)
        {
          unint64_t v237 = *(void *)(v7 + 152);
          uint64_t v238 = *(unsigned __int8 **)(v13 + 80);
          do
          {
            if ((unint64_t)v238 <= v237) {
              goto LABEL_2925;
            }
            LODWORD(v236) = v236 - 1;
            int v239 = v238 - 1;
            do
            {
              *(void *)(v13 + 80) = v239;
              char v240 = *v239--;
            }
            while ((v240 & 0xC0) == 0x80);
            uint64_t v238 = v239 + 1;
          }
          while (v236);
        }
        else
        {
          uint64_t v238 = *(unsigned __int8 **)(v13 + 80);
        }
      }
      else
      {
        unsigned int v330 = *(unsigned __int8 **)(v13 + 80);
        if ((uint64_t)&v330[-*(void *)(v7 + 152)] < v236) {
          goto LABEL_2925;
        }
        uint64_t v238 = &v330[-v236];
        *(void *)(v13 + 80) = v238;
      }
      if ((unint64_t)v238 < *v14) {
        *uint64_t v14 = (unint64_t)v238;
      }
      goto LABEL_2450;
    case 0x7Eu:
    case 0x80u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = v18 | 0x20000;
      *(_DWORD *)(v13 + 56) = v18 | 0x20000;
      uint64_t v1308 = *a2;
      goto LABEL_3225;
    case 0x7Fu:
    case 0x81u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = v18 | 0x20000;
      *(_DWORD *)(v13 + 56) = v18 | 0x20000;
      uint64_t v1336 = *a2;
      goto LABEL_3250;
    case 0x82u:
    case 0x88u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = v18 | 0x20000;
      goto LABEL_3254;
    case 0x83u:
      if (!*(_DWORD *)(v7 + 80) && *(_DWORD *)(v13 + 48))
      {
LABEL_2918:
        uint64_t v1197 = __rev16(*(unsigned __int16 *)(a2 + 1));
        *(void *)(v13 + 8) = &a2[v1197];
        LODWORD(v1197) = a2[v1197];
        a2 += _pcre2_OP_lengths_8[*a2];
        if (v1197 == 120)
        {
          long long v104 = v14;
          v1351 = v16;
          unsigned int v1362 = v11;
          LODWORD(v11) = 0;
          char v1316 = 1;
          goto LABEL_3216;
        }
        *(void *)uint64_t v13 = a2;
        goto LABEL_2445;
      }
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(_DWORD *)(v13 + 56) = 0;
      goto LABEL_3257;
    case 0x84u:
    case 0x89u:
      long long v104 = v14;
      *(_DWORD *)(v13 + 64) = 0;
      unsigned int v1315 = 0x20000;
      goto LABEL_3297;
    case 0x85u:
    case 0x8Au:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3254:
      *(_DWORD *)(v13 + 56) = v11;
      goto LABEL_3257;
    case 0x86u:
    case 0x8Bu:
      *(_DWORD *)(v13 + 64) = 0;
      goto LABEL_3296;
    case 0x87u:
    case 0x8Cu:
      int64_t v103 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(void *)(v13 + 24) = v103;
      long long v104 = v14;
      if (a2[v103] != 120)
      {
        v103 -= 3;
        *(void *)(v13 + 24) = v103;
      }
      v1351 = v16;
      long long v105 = (unsigned __int8 *)a6;
      long long v106 = a2 + 3;
      *(void *)uint64_t v13 = a2 + 3;
      int v107 = a2[3];
      if ((v107 & 0xFE) != 0x76) {
        goto LABEL_932;
      }
      uint64_t v20 = do_callout_0(v13, (void *)v7, (uint64_t *)&v1367);
      if ((int)v20 > 0)
      {
        uint64_t v20 = 0;
        a6 = (uint64_t)v105;
        unsigned int v16 = v1351;
        goto LABEL_2451;
      }
      if ((v20 & 0x80000000) != 0)
      {
        a6 = (uint64_t)v105;
        unsigned int v16 = v1351;
        goto LABEL_2451;
      }
      v476 = v1367;
      long long v106 = &v1367[*(void *)v13];
      *(void *)uint64_t v13 = v106;
      int64_t v103 = *(void *)(v13 + 24) - (void)v476;
      *(void *)(v13 + 24) = v103;
      int v107 = *v106;
LABEL_932:
      if (v107 <= 158)
      {
        a6 = (uint64_t)v105;
        unsigned int v16 = v1351;
        switch(v107)
        {
          case 141:
            unint64_t v477 = ((v106[1] << 9) | (2 * v106[2])) - 2;
            if (v477 >= *(void *)(v13 + 120) || *(void *)(v13 + 8 * v477 + 128) == -1) {
              goto LABEL_2446;
            }
            int v107 = 0x8Du;
            goto LABEL_2917;
          case 142:
            if (!(v106[4] | (v106[3] << 8))) {
              goto LABEL_2446;
            }
            int v539 = (v106[3] << 8) + v106[4] + 1;
            v540 = (unsigned __int8 *)(*(void *)(v7 + 136)
                                     + *(unsigned __int16 *)(v7 + 134)
                                     * (unint64_t)__rev16(*(unsigned __int16 *)(v106 + 1))
                                     + 1);
            break;
          case 143:
            int v542 = *(_DWORD *)(v13 + 104);
            if (v542 != -1)
            {
              unsigned int v543 = __rev16(*(unsigned __int16 *)(v106 + 1));
              int v107 = 0x8Fu;
              if (v543 == 0xFFFF || v543 == v542) {
                goto LABEL_2917;
              }
            }
            goto LABEL_2446;
          case 144:
            int v544 = *(_DWORD *)(v13 + 104);
            if (v544 == -1 || !(v106[4] | (v106[3] << 8))) {
              goto LABEL_2446;
            }
            int v545 = (v106[3] << 8) + v106[4] + 1;
            unint64_t v546 = *(void *)(v7 + 136)
                 + *(unsigned __int16 *)(v7 + 134) * (unint64_t)__rev16(*(unsigned __int16 *)(v106 + 1))
                 + 1;
            while (v544 != bswap32(*(unsigned __int16 *)(v546 - 1)) >> 16)
            {
              v546 += *(unsigned __int16 *)(v7 + 134);
              if (--v545 <= 1) {
                goto LABEL_2446;
              }
            }
            int v107 = 0x90u;
            goto LABEL_2917;
          case 145:
            goto LABEL_2446;
          case 146:
            goto LABEL_2917;
          default:
            if (v107 != 126 && v107 != 128) {
              goto LABEL_3361;
            }
            int v1327 = 1;
            goto LABEL_3362;
        }
        while (1)
        {
          unint64_t v541 = ((*(v540 - 1) << 9) | (2 * *v540)) - 2;
          if (v541 < *(void *)(v13 + 120) && *(void *)(v13 + 8 * v541 + 128) != -1) {
            break;
          }
          v540 += *(unsigned __int16 *)(v7 + 134);
          if (--v539 <= 1) {
            goto LABEL_2446;
          }
        }
        int v107 = 0x8Eu;
        goto LABEL_2917;
      }
      a6 = (uint64_t)v105;
      unsigned int v16 = v1351;
      if (v107 == 159) {
        goto LABEL_2446;
      }
LABEL_3361:
      int v1327 = 0;
LABEL_3362:
      unsigned int v1362 = v11;
      *(_DWORD *)(v13 + 56) = v1327;
      *(void *)(v13 + 8) = v106;
      unsigned int v1322 = *v106;
      unsigned int v1323 = v1322;
      goto LABEL_3363;
    case 0x93u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(void *)(v13 + 8) = ++a2;
      char v1316 = 9;
      goto LABEL_3216;
    case 0x94u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      v1319 = a2 + 1;
      *(void *)(v13 + 8) = a2 + 1;
      do
      {
        v1319 += __rev16(*(unsigned __int16 *)(v1319 + 1));
        *(void *)(v13 + 8) = v1319;
      }
      while (*v1319 == 120);
      LODWORD(v11) = 0;
      a2 = v1319 + 3;
      char v1316 = 10;
      goto LABEL_3216;
    case 0x95u:
      *(_DWORD *)(v13 + 64) = 1;
      v1193 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      int v1320 = a2[1];
      if (v1320 == 134 || v1320 == 139)
      {
        ++a2;
LABEL_3296:
        long long v104 = v14;
        unsigned int v1315 = (bswap32(*(unsigned __int16 *)(a2 + 3)) >> 16) | 0x10000;
LABEL_3297:
        v1193 = a2;
      }
      else
      {
        long long v104 = v14;
        unsigned int v1315 = 0x20000;
      }
      v1351 = v16;
      unsigned int v1362 = v11;
      *(_DWORD *)(v13 + 56) = v1315;
      *(_DWORD *)(v13 + 60) = 0;
      *(void *)(v13 + 16) = v1193;
      goto LABEL_3299;
    case 0x96u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(void *)(v7 + 200) = a2 + 2;
      *(void *)(v13 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1316 = 12;
      goto LABEL_3216;
    case 0x97u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1316 = 14;
      goto LABEL_3216;
    case 0x98u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(void *)(v7 + 200) = a2 + 2;
      *(void *)(v13 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1316 = 15;
      goto LABEL_3216;
    case 0x99u:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1316 = 16;
      goto LABEL_3216;
    case 0x9Au:
      unsigned int v241 = *(_DWORD *)(v7 + 240);
      unsigned int v242 = *(_DWORD *)(v7 + 236) + 1;
      *(_DWORD *)(v7 + 236) = v242;
      uint64_t v243 = _pcre2_OP_lengths_8[*a2];
      if (v242 > v241)
      {
        long long v104 = v14;
        v1351 = v16;
        unsigned int v1362 = v11;
        LODWORD(v11) = 0;
        a2 += v243 + a2[1];
        char v1316 = 17;
        goto LABEL_3216;
      }
      uint64_t v244 = (uint64_t)&a2[a2[1] + v243];
      goto LABEL_2444;
    case 0x9Bu:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1316 = 18;
      goto LABEL_3216;
    case 0x9Cu:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(void *)(v7 + 200) = a2 + 2;
      *(void *)(v13 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1316 = 19;
      goto LABEL_3216;
    case 0x9Du:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      a2 += _pcre2_OP_lengths_8[*a2];
      char v1316 = 13;
      goto LABEL_3216;
    case 0x9Eu:
      long long v104 = v14;
      v1351 = v16;
      unsigned int v1362 = v11;
      LODWORD(v11) = 0;
      *(void *)(v7 + 200) = a2 + 2;
      *(void *)(v13 + 96) = a2 + 2;
      a2 += a2[1] + (unint64_t)_pcre2_OP_lengths_8[*a2];
      char v1316 = 36;
      goto LABEL_3216;
    case 0x9Fu:
      goto LABEL_2451;
    case 0xA1u:
      signed int v245 = *(unsigned __int8 **)(v13 + 80);
      if ((unint64_t)v245 > *(void *)(v7 + 184)) {
        *(void *)(v7 + 184) = v245;
      }
      uint64_t v20 = 4294966297;
      v1355 = (void *)v13;
      goto LABEL_2451;
    case 0xA2u:
      if (*(_DWORD *)(v13 + 104) != -1) {
        goto LABEL_416;
      }
      unsigned int v479 = *(unsigned __int16 *)(a2 + 1);
      unsigned int v480 = __rev16(v479);
      unsigned int v481 = (bswap32(v479) >> 16) | 0x10000;
      v482 = (unsigned __int8 **)v13;
      do
      {
        v483 = v482[14];
        if (v483 == (unsigned __int8 *)-1) {
          return 4294967252;
        }
        v484 = &v483[*(void *)(v7 + 32)];
        v482 = (unsigned __int8 **)&v484[v1358];
      }
      while (*((_DWORD *)v484 + 13) != v481);
      v1357 = v484;
      unint64_t v485 = 2 * v480 - 2;
      *(_DWORD *)(v13 + 108) = v480;
      v486 = v482[10];
      uint64_t v487 = *(void *)(v7 + 152);
      v488 = &v486[-v487];
      v489 = (unsigned __int8 **)(v13 + 8 * v485);
      v490 = (unsigned __int8 *)(*(void *)(v13 + 80) - v487);
      v489[16] = v488;
      v489[17] = v490;
      if (*(void *)(v13 + 120) <= v485) {
        *(void *)(v13 + 120) = v485 + 2;
      }
LABEL_416:
      uint64_t v244 = (uint64_t)&a2[_pcre2_OP_lengths_8[*a2]];
      goto LABEL_2444;
    case 0xA3u:
      int v246 = a2 + 1;
      *(void *)uint64_t v13 = a2 + 1;
      do
      {
        v246 += __rev16(*(unsigned __int16 *)(v246 + 1));
        *(void *)uint64_t v13 = v246;
      }
      while (*v246 == 120);
      goto LABEL_3030;
    default:
      return v19;
  }
  while (1)
  {
    unsigned int v143 = *(unsigned __int8 **)(v13 + 80);
    if ((unint64_t)v143 >= *v15)
    {
LABEL_1048:
      unsigned int v183 = (unsigned __int16)*v16;
      if (!*v16) {
        goto LABEL_1172;
      }
      goto LABEL_1049;
    }
    *(void *)(v13 + 80) = v143 + 1;
    unsigned int v514 = *v143;
    if (v1364)
    {
      v515 = v14;
      if (v514 >= 0xC0)
      {
        v516 = v16;
        if ((v514 & 0x20) != 0)
        {
          int v519 = v143[1] & 0x3F;
          if ((v514 & 0x10) != 0)
          {
            if ((v514 & 8) != 0)
            {
              int v521 = v143[2] & 0x3F;
              int v522 = v143[3] & 0x3F;
              int v523 = v143[4] & 0x3F;
              v517 = v15;
              v518 = (unsigned __int8 *)a6;
              if ((v514 & 4) != 0)
              {
                unsigned int v514 = ((v514 & 1) << 30) | (v519 << 24) | (v521 << 18) | (v522 << 12) | (v523 << 6) | v143[5] & 0x3F;
                v520 = v143 + 6;
              }
              else
              {
                unsigned int v514 = ((v514 & 3) << 24) | (v519 << 18) | (v521 << 12) | (v522 << 6) | v523;
                v520 = v143 + 5;
              }
            }
            else
            {
              v517 = v15;
              v518 = (unsigned __int8 *)a6;
              unsigned int v514 = ((v514 & 7) << 18) | (v519 << 12) | ((v143[2] & 0x3F) << 6) | v143[3] & 0x3F;
              v520 = v143 + 4;
            }
          }
          else
          {
            v517 = v15;
            v518 = (unsigned __int8 *)a6;
            unsigned int v514 = ((v514 & 0xF) << 12) | (v519 << 6) | v143[2] & 0x3F;
            v520 = v143 + 3;
          }
          *(void *)(v13 + 80) = v520;
        }
        else
        {
          v517 = v15;
          v518 = (unsigned __int8 *)a6;
          *(void *)(v13 + 80) = v143 + 2;
          unsigned int v514 = v143[1] & 0x3F | ((v514 & 0x1F) << 6);
        }
        goto LABEL_1045;
      }
      v517 = v15;
    }
    else
    {
      v517 = v15;
      v515 = v14;
    }
    v516 = v16;
    v518 = (unsigned __int8 *)a6;
LABEL_1045:
    uint64_t v20 = _pcre2_xclass_8(v514, *(unsigned char **)(v13 + 16));
    if (!v20)
    {
      a6 = (uint64_t)v518;
      unsigned int v16 = v516;
      uint64_t v14 = v515;
      unsigned int v15 = v517;
      goto LABEL_2451;
    }
    ++v513;
    unsigned int v524 = *(_DWORD *)(v13 + 56);
    a6 = (uint64_t)v518;
    unsigned int v16 = v516;
    uint64_t v14 = v515;
    unsigned int v15 = v517;
    if (v513 > v524)
    {
      unsigned int v235 = *(_DWORD *)(v13 + 60);
      goto LABEL_1053;
    }
  }
}

uint64_t match_ref(unint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  if (*(void *)(a3 + 120) <= a1 || (uint64_t v6 = a3 + 8 * a1, v7 = *(void *)(v6 + 128), v7 == -1))
  {
    if ((*(unsigned char *)(a4 + 233) & 2) != 0)
    {
      unsigned int v18 = 0;
LABEL_57:
      uint64_t result = 0;
      *a5 = v18;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *(void *)(a3 + 80);
  uint64_t v9 = *(void *)(a4 + 152);
  int v10 = (unsigned __int8 *)(v9 + v7);
  uint64_t v11 = *(void *)(v6 + 136);
  unint64_t v12 = v11 - v7;
  if (a2)
  {
    if ((*(unsigned char *)(a4 + 234) & 8) != 0)
    {
      if (v7 < v11)
      {
        unint64_t v21 = v9 + v11;
        unint64_t v22 = *(void *)(a4 + 160);
        uint64_t v13 = *(unsigned __int8 **)(a3 + 80);
        while ((unint64_t)v13 < v22)
        {
          unsigned int v23 = *v13;
          if (v23 < 0xC0)
          {
            ++v13;
          }
          else if ((v23 & 0x20) != 0)
          {
            int v30 = v13[1] & 0x3F;
            if ((v23 & 0x10) != 0)
            {
              if ((v23 & 8) != 0)
              {
                int v32 = v13[2] & 0x3F;
                int v33 = v13[3] & 0x3F;
                int v34 = v13[4] & 0x3F;
                if ((v23 & 4) != 0)
                {
                  unsigned int v23 = ((v23 & 1) << 30) | (v30 << 24) | (v32 << 18) | (v33 << 12) | (v34 << 6) | v13[5] & 0x3F;
                  v13 += 6;
                }
                else
                {
                  unsigned int v23 = ((v23 & 3) << 24) | (v30 << 18) | (v32 << 12) | (v33 << 6) | v34;
                  v13 += 5;
                }
              }
              else
              {
                unsigned int v23 = ((v23 & 7) << 18) | (v30 << 12) | ((v13[2] & 0x3F) << 6) | v13[3] & 0x3F;
                v13 += 4;
              }
            }
            else
            {
              unsigned int v23 = ((v23 & 0xF) << 12) | (v30 << 6) | v13[2] & 0x3F;
              v13 += 3;
            }
          }
          else
          {
            unsigned __int8 v24 = v13[1];
            v13 += 2;
            unsigned int v23 = v24 & 0x3F | ((v23 & 0x1F) << 6);
          }
          unsigned int v25 = *v10;
          if (v25 < 0xC0)
          {
            ++v10;
          }
          else if ((v25 & 0x20) != 0)
          {
            int v31 = v10[1] & 0x3F;
            if ((v25 & 0x10) != 0)
            {
              if ((v25 & 8) != 0)
              {
                int v35 = v10[2] & 0x3F;
                int v36 = v10[3] & 0x3F;
                int v37 = v10[4] & 0x3F;
                if ((v25 & 4) != 0)
                {
                  unsigned int v25 = ((v25 & 1) << 30) | (v31 << 24) | (v35 << 18) | (v36 << 12) | (v37 << 6) | v10[5] & 0x3F;
                  v10 += 6;
                }
                else
                {
                  unsigned int v25 = ((v25 & 3) << 24) | (v31 << 18) | (v35 << 12) | (v36 << 6) | v37;
                  v10 += 5;
                }
              }
              else
              {
                unsigned int v25 = ((v25 & 7) << 18) | (v31 << 12) | ((v10[2] & 0x3F) << 6) | v10[3] & 0x3F;
                v10 += 4;
              }
            }
            else
            {
              unsigned int v25 = ((v25 & 0xF) << 12) | (v31 << 6) | v10[2] & 0x3F;
              v10 += 3;
            }
          }
          else
          {
            unsigned __int8 v26 = v10[1];
            v10 += 2;
            unsigned int v25 = v26 & 0x3F | ((v25 & 0x1F) << 6);
          }
          if (v23 != v25)
          {
            unint64_t v27 = &_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v25 & 0x7F | (_pcre2_ucd_stage1_8[v25 >> 7] << 7)]];
            if (v23 != v27[1] + v25)
            {
              int v28 = (unsigned int *)((char *)&_pcre2_ucd_caseless_sets_8 + 4 * *((unsigned __int8 *)v27 + 3));
              do
              {
                unsigned int v29 = *v28;
                if (v23 < *v28) {
                  return 0xFFFFFFFFLL;
                }
                ++v28;
              }
              while (v23 != v29);
            }
          }
          if ((unint64_t)v10 >= v21) {
            goto LABEL_56;
          }
        }
        return 1;
      }
    }
    else if (v12)
    {
      uint64_t v13 = (unsigned __int8 *)(v8 + v12);
      uint64_t v14 = v7 - v11;
      unsigned int v15 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v15 < *(void *)(a4 + 160))
      {
        if (*(unsigned __int8 *)(*(void *)(a4 + 88) + *v10) != *(unsigned __int8 *)(*(void *)(a4 + 88) + *v15)) {
          return 0xFFFFFFFFLL;
        }
        ++v10;
        ++v15;
        BOOL v16 = __CFADD__(v14++, 1);
        if (v16) {
          goto LABEL_56;
        }
      }
      return 1;
    }
    goto LABEL_55;
  }
  if (*(_WORD *)(a4 + 128))
  {
    if (v12)
    {
      uint64_t v13 = (unsigned __int8 *)(v8 + v12);
      uint64_t v19 = v7 - v11;
      uint64_t v20 = *(unsigned __int8 **)(a3 + 80);
      while ((unint64_t)v20 < *(void *)(a4 + 160))
      {
        if (*v10 != *v20) {
          return 0xFFFFFFFFLL;
        }
        ++v20;
        ++v10;
        BOOL v16 = __CFADD__(v19++, 1);
        if (v16) {
          goto LABEL_56;
        }
      }
      return 1;
    }
LABEL_55:
    uint64_t v13 = *(unsigned __int8 **)(a3 + 80);
LABEL_56:
    unsigned int v18 = &v13[-v8];
    goto LABEL_57;
  }
  if (*(void *)(a4 + 160) - v8 >= v12)
  {
    if (!cstdlib_memcmp(v10, *(const void **)(a3 + 80), v11 - v7))
    {
      uint64_t v13 = (unsigned __int8 *)(v8 + v12);
      goto LABEL_56;
    }
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t do_callout_0(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned char **)a1;
  if (**(unsigned char **)a1 == 118) {
    uint64_t v5 = 6;
  }
  else {
    uint64_t v5 = __rev16(*(unsigned __int16 *)(v4 + 5));
  }
  *a3 = v5;
  uint64_t v6 = (uint64_t (*)(uint64_t, void))a2[34];
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a2[32];
  int v8 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v7 + 8) = (*(_DWORD *)(a1 + 120) >> 1) + 1;
  *(_DWORD *)(v7 + 12) = v8;
  uint64_t v9 = a2[25];
  *(void *)(v7 + 16) = a1 + 112;
  *(void *)(v7 + 24) = v9;
  *(void *)(v7 + 56) = *(void *)(a1 + 80) - a2[19];
  *(void *)(v7 + 64) = __rev16(*(unsigned __int16 *)(v4 + 1));
  *(void *)(v7 + 72) = __rev16(*(unsigned __int16 *)(v4 + 3));
  if (*v4 == 118)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    *(_DWORD *)(v7 + 4) = v4[5];
    *(void *)(v7 + 80) = 0;
  }
  else
  {
    *(_DWORD *)(v7 + 4) = 0;
    *(void *)(v7 + 80) = __rev16(*(unsigned __int16 *)(v4 + 7));
    int v10 = v4 + 10;
    uint64_t v11 = *a3 - 11;
  }
  *(void *)(v7 + 88) = v11;
  *(void *)(v7 + 96) = v10;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v14 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = -1;
  *(void *)(a1 + 120) = -1;
  uint64_t result = v6(v7, a2[33]);
  *(void *)(a1 + 112) = v13;
  *(void *)(a1 + 120) = v14;
  *(_DWORD *)(v7 + 104) = 0;
  return result;
}

void *pcre2_match_data_create_8(unsigned int a1, long long *a2)
{
  if (a1 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a1;
  }
  uint64_t result = _pcre2_memctl_malloc_8(8 * (2 * v2) + 80, a2);
  if (result) {
    *((_WORD *)result + 37) = v2;
  }
  return result;
}

void *pcre2_match_data_create_from_pattern_8(uint64_t a1, long long *a2)
{
  if (!a2) {
    a2 = (long long *)a1;
  }
  uint64_t v2 = *(unsigned __int16 *)(a1 + 128) + 1;
  uint64_t result = _pcre2_memctl_malloc_8(16 * v2 + 80, a2);
  if (result) {
    *((_WORD *)result + 37) = v2;
  }
  return result;
}

uint64_t pcre2_match_data_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 8))(result, *(void *)(result + 16));
  }
  return result;
}

uint64_t pcre2_get_mark_8(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t pcre2_get_ovector_pointer_8(uint64_t a1)
{
  return a1 + 80;
}

uint64_t pcre2_get_ovector_count_8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 74);
}

uint64_t pcre2_get_startchar_8(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t _pcre2_is_newline_8(unsigned __int8 *a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v5 = *a1;
  if (a5 && v5 >= 0xC0)
  {
    int v6 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      int v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_13;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        int v9 = a1[2] & 0x3F;
        int v10 = a1[3] & 0x3F;
        int v11 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          int v5 = ((v5 & 3) << 24) | (v6 << 18) | (v9 << 12) | (v10 << 6) | v11;
          goto LABEL_13;
        }
        int v7 = ((v5 & 1) << 30) | (v6 << 24) | (v9 << 18) | (v10 << 12) | (v11 << 6);
        unsigned __int8 v8 = a1[5];
      }
      else
      {
        int v7 = ((v5 & 7) << 18) | (v6 << 12) | ((a1[2] & 0x3F) << 6);
        unsigned __int8 v8 = a1[3];
      }
    }
    else
    {
      int v7 = ((v5 & 0xF) << 12) | (v6 << 6);
      unsigned __int8 v8 = a1[2];
    }
    int v5 = v7 & 0xFFFFFFC0 | v8 & 0x3F;
  }
LABEL_13:
  if (a2 != 2)
  {
    uint64_t v12 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133) {
          return v12;
        }
        if (a5) {
          int v13 = 2;
        }
        else {
          int v13 = 1;
        }
      }
      else
      {
        int v13 = 3;
      }
LABEL_31:
      *a4 = v13;
      return 1;
    }
    if ((v5 - 10) >= 3)
    {
      if (v5 != 13) {
        return v12;
      }
      goto LABEL_23;
    }
LABEL_19:
    int v13 = 1;
    goto LABEL_31;
  }
  if (v5 == 10) {
    goto LABEL_19;
  }
  if (v5 == 13)
  {
LABEL_23:
    int v13 = 1;
    if (a3 - 1 > (unint64_t)a1)
    {
      if (a1[1] == 10) {
        int v13 = 2;
      }
      else {
        int v13 = 1;
      }
    }
    goto LABEL_31;
  }
  return 0;
}

uint64_t _pcre2_was_newline_8(unsigned char *a1, int a2, unint64_t a3, int *a4, int a5)
{
  if (!a5)
  {
    int v8 = *--a1;
    int v5 = v8;
    goto LABEL_15;
  }
  do
  {
    int v6 = *--a1;
    int v5 = v6;
  }
  while ((v6 & 0xC0) == 0x80);
  if (v5 >= 0xC0)
  {
    int v7 = a1[1] & 0x3F;
    if ((v5 & 0x20) == 0)
    {
      int v5 = a1[1] & 0x3F | ((v5 & 0x1F) << 6);
      goto LABEL_15;
    }
    if ((v5 & 0x10) != 0)
    {
      if ((v5 & 8) != 0)
      {
        int v11 = a1[2] & 0x3F;
        int v12 = a1[3] & 0x3F;
        int v13 = a1[4] & 0x3F;
        if ((v5 & 4) == 0)
        {
          int v5 = ((v5 & 3) << 24) | (v7 << 18) | (v11 << 12) | (v12 << 6) | v13;
          goto LABEL_15;
        }
        int v9 = ((v5 & 1) << 30) | (v7 << 24) | (v11 << 18) | (v12 << 12) | (v13 << 6);
        char v10 = a1[5];
      }
      else
      {
        int v9 = ((v5 & 7) << 18) | (v7 << 12) | ((a1[2] & 0x3F) << 6);
        char v10 = a1[3];
      }
    }
    else
    {
      int v9 = ((v5 & 0xF) << 12) | (v7 << 6);
      char v10 = a1[2];
    }
    int v5 = v9 & 0xFFFFFFC0 | v10 & 0x3F;
  }
LABEL_15:
  if (a2 != 2)
  {
    uint64_t v14 = 0;
    if (v5 > 132)
    {
      if ((v5 - 8232) >= 2)
      {
        if (v5 != 133) {
          return v14;
        }
        if (a5) {
          int v15 = 2;
        }
        else {
          int v15 = 1;
        }
      }
      else
      {
        int v15 = 3;
      }
LABEL_33:
      *a4 = v15;
      return 1;
    }
    if ((v5 - 11) >= 3)
    {
      if (v5 != 10) {
        return v14;
      }
      goto LABEL_25;
    }
LABEL_21:
    int v15 = 1;
    goto LABEL_33;
  }
  if (v5 == 13) {
    goto LABEL_21;
  }
  if (v5 == 10)
  {
LABEL_25:
    int v15 = 1;
    if ((unint64_t)a1 > a3)
    {
      if (*(a1 - 1) == 13) {
        int v15 = 2;
      }
      else {
        int v15 = 1;
      }
    }
    goto LABEL_33;
  }
  return 0;
}

uint64_t _pcre2_ord2utf_8(unsigned int a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (_pcre2_utf8_table1[v2] < (signed int)a1)
  {
    if (++v2 == 6)
    {
      LODWORD(v2) = 6;
      break;
    }
  }
  uint64_t v3 = (unsigned char *)(a2 + v2);
  if ((int)v2 >= 1)
  {
    unsigned int v4 = v2 + 1;
    do
    {
      *v3-- = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v4 > 1);
  }
  *uint64_t v3 = _pcre2_utf8_table2[4 * v2] | a1;
  return (v2 + 1);
}

uint64_t pcre2_pattern_info_8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (!a3 && a2 < 0x1B) {
    return dword_220724A50[a2];
  }
  if (!a1) {
    return 4294967245;
  }
  if (*(_DWORD *)(a1 + 80) != 1346589253) {
    return 4294967265;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 1) == 0) {
    return 4294967264;
  }
  switch(a2)
  {
    case 0u:
      int v5 = *(_DWORD *)(a1 + 88);
      goto LABEL_49;
    case 1u:
      int v5 = *(_DWORD *)(a1 + 84);
      goto LABEL_49;
    case 2u:
      int v5 = *(unsigned __int16 *)(a1 + 130);
      goto LABEL_49;
    case 3u:
      int v5 = *(unsigned __int16 *)(a1 + 120);
      goto LABEL_49;
    case 4u:
      int v5 = *(unsigned __int16 *)(a1 + 128);
      goto LABEL_49;
    case 5u:
      if ((v4 & 0x10) == 0) {
        goto LABEL_23;
      }
      int v5 = *(_DWORD *)(a1 + 112);
      goto LABEL_49;
    case 6u:
      if ((v4 & 0x10) != 0) {
        int v5 = 1;
      }
      else {
        int v5 = (v4 >> 8) & 2;
      }
      goto LABEL_49;
    case 7u:
      if ((v4 & 0x40) != 0) {
        uint64_t v6 = a1 + 40;
      }
      else {
        uint64_t v6 = 0;
      }
      goto LABEL_45;
    case 8u:
      int v5 = (v4 >> 11) & 1;
      goto LABEL_49;
    case 9u:
      int v5 = (v4 >> 10) & 1;
      goto LABEL_49;
    case 0xAu:
      *a3 = 0;
      goto LABEL_50;
    case 0xBu:
      if ((v4 & 0x80) != 0) {
        int v5 = *(_DWORD *)(a1 + 116);
      }
      else {
LABEL_23:
      }
        int v5 = 0;
      goto LABEL_49;
    case 0xCu:
      int v5 = (v4 >> 7) & 1;
      goto LABEL_49;
    case 0xDu:
      int v5 = (v4 >> 13) & 1;
      goto LABEL_49;
    case 0xEu:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 104);
      int v7 = *(_DWORD *)(a1 + 104);
      goto LABEL_42;
    case 0xFu:
      int v5 = *(unsigned __int16 *)(a1 + 124);
      goto LABEL_49;
    case 0x10u:
      int v5 = *(unsigned __int16 *)(a1 + 126);
      goto LABEL_49;
    case 0x11u:
      int v5 = *(unsigned __int16 *)(a1 + 134);
      goto LABEL_49;
    case 0x12u:
      int v5 = *(unsigned __int16 *)(a1 + 132);
      goto LABEL_49;
    case 0x13u:
      uint64_t v6 = a1 + 136;
      goto LABEL_45;
    case 0x14u:
      int v5 = *(unsigned __int16 *)(a1 + 122);
      goto LABEL_49;
    case 0x15u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 108);
      int v7 = *(_DWORD *)(a1 + 108);
      goto LABEL_42;
    case 0x16u:
      uint64_t v6 = *(void *)(a1 + 72);
      goto LABEL_45;
    case 0x17u:
      int v5 = (v4 >> 22) & 1;
      goto LABEL_49;
    case 0x18u:
      uint64_t v6 = 16 * *(unsigned __int16 *)(a1 + 128) + 128;
LABEL_45:
      *a3 = v6;
      goto LABEL_50;
    case 0x19u:
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 100);
      int v7 = *(_DWORD *)(a1 + 100);
LABEL_42:
      if (v7 != -1) {
        goto LABEL_50;
      }
      uint64_t result = 4294967241;
      break;
    case 0x1Au:
      int v5 = *(_DWORD *)(a1 + 92);
LABEL_49:
      *(_DWORD *)a3 = v5;
LABEL_50:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 4294967262;
      break;
  }
  return result;
}

uint64_t pcre2_callout_enumerate_8(uint64_t a1, uint64_t (*a2)(long long *, uint64_t), uint64_t a3)
{
  if (!a1) {
    return 4294967245;
  }
  if (*(_DWORD *)(a1 + 80) != 1346589253) {
    return 4294967265;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    int v6 = *(_DWORD *)(a1 + 88);
    BOOL v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    int v7 = (unsigned __int8 *)(a1
                           + *(unsigned __int16 *)(a1 + 132) * (unint64_t)*(unsigned __int16 *)(a1 + 134)
                           + 136);
    while (1)
    {
      while (1)
      {
        uint64_t result = *v7;
        if ((result - 29) >= 0x38) {
          break;
        }
        v7 += _pcre2_OP_lengths_8[result];
        if ((v6 & 0x80000) != 0)
        {
          unsigned int v8 = *(v7 - 1);
          if (v8 >= 0xC0) {
            v7 += _pcre2_utf8_table4[v8 & 0x3F];
          }
        }
      }
      switch(*v7)
      {
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'a':
          v7 += 2 * (v7[_pcre2_OP_lengths_8[result] - 1] - 15 < 2) + _pcre2_OP_lengths_8[result];
          continue;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 's':
        case 't':
        case 'u':
          goto LABEL_27;
        case 'p':
          unsigned int v10 = *(unsigned __int16 *)(v7 + 1);
          goto LABEL_25;
        case 'v':
          uint64_t v11 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((void *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(void *)&long long v14 = v11;
          DWORD2(v14) = v7[5];
          BOOL v16 = 0;
          long long v15 = 0uLL;
          uint64_t result = a2(&v13, a3);
          if (result) {
            return result;
          }
          v7 += _pcre2_OP_lengths_8[*v7];
          continue;
        case 'w':
          uint64_t v12 = __rev16(*(unsigned __int16 *)(v7 + 3));
          *((void *)&v13 + 1) = __rev16(*(unsigned __int16 *)(v7 + 1));
          *(void *)&long long v14 = v12;
          DWORD2(v14) = 0;
          LODWORD(v12) = __rev16(*(unsigned __int16 *)(v7 + 5));
          *(void *)&long long v15 = __rev16(*(unsigned __int16 *)(v7 + 7));
          *((void *)&v15 + 1) = (v12 - 11);
          BOOL v16 = v7 + 10;
          uint64_t result = a2(&v13, a3);
          if (result) {
            return result;
          }
          unsigned int v10 = *(unsigned __int16 *)(v7 + 5);
LABEL_25:
          v7 += __rev16(v10);
          continue;
        default:
          if ((result - 150) > 8 || ((1 << (result + 106)) & 0x155) == 0)
          {
            if (!*v7) {
              return result;
            }
LABEL_27:
            v7 += _pcre2_OP_lengths_8[result];
          }
          else
          {
            v7 += v7[1] + (unint64_t)_pcre2_OP_lengths_8[result];
          }
          break;
      }
    }
  }
  return 4294967264;
}

uint64_t pcre2_serialize_encode_8(size_t **a1, uint64_t a2, void *a3, uint64_t *a4, long long *a5)
{
  if (a5) {
    int v6 = a5;
  }
  else {
    int v6 = &_pcre2_default_compile_context_8;
  }
  uint64_t result = 4294967245;
  if (a1 && a3 && a4)
  {
    if ((int)a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = a2;
      uint64_t v13 = 1104;
      uint64_t v14 = a2;
      long long v15 = a1;
      do
      {
        BOOL v16 = *v15;
        if (!*v15) {
          return 4294967245;
        }
        if (*((_DWORD *)v16 + 20) != 1346589253) {
          return 4294967265;
        }
        if (v11)
        {
          if (v11 != (const void *)v16[3]) {
            return 4294967266;
          }
        }
        else
        {
          uint64_t v11 = (const void *)v16[3];
        }
        v13 += v16[9];
        ++v15;
        --v14;
      }
      while (v14);
      unsigned int v17 = (char *)(*(uint64_t (**)(uint64_t, void))v6)(v13 + 24, *((void *)v6 + 2));
      if (v17)
      {
        unsigned int v18 = v17;
        cstdlib_memcpy(v17, v6, 0x18uLL);
        *((void *)v18 + 3) = 0x20000A50523253;
        uint64_t v19 = v18 + 24;
        v19[2] = 526337;
        v19[3] = a2;
        cstdlib_memcpy(v19 + 4, v11, 0x440uLL);
        uint64_t v20 = v19 + 276;
        do
        {
          unint64_t v21 = *a1++;
          cstdlib_memcpy(v20, v21, v21[9]);
          cstdlib_memset(v20, 0, 0x18uLL);
          cstdlib_memset(v20 + 6, 0, 8uLL);
          cstdlib_memset(v20 + 8, 0, 8uLL);
          uint64_t v20 = (_DWORD *)((char *)v20 + v21[9]);
          --v12;
        }
        while (v12);
        *a3 = v19;
        *a4 = v13;
        return a2;
      }
      else
      {
        return 4294967248;
      }
    }
  }
  return result;
}

uint64_t pcre2_serialize_decode_8(uint64_t a1, int a2, _DWORD *a3, long long *a4)
{
  if (a4) {
    unsigned int v4 = a4;
  }
  else {
    unsigned int v4 = &_pcre2_default_compile_context_8;
  }
  uint64_t v5 = 4294967245;
  if (a1 && a3)
  {
    if (a2 < 1)
    {
      return 4294967267;
    }
    else
    {
      int v7 = a3[3];
      if (v7 < 1) {
        return 4294967234;
      }
      if (*a3 == 1347564115)
      {
        if (a3[1] == 2097162 && a3[2] == 526337)
        {
          if (v7 >= a2) {
            uint64_t v5 = a2;
          }
          else {
            uint64_t v5 = v7;
          }
          unsigned int v10 = (void *)(*(uint64_t (**)(uint64_t, void))v4)(1096, *((void *)v4 + 2));
          if (!v10) {
            return 4294967248;
          }
          uint64_t v11 = v10;
          cstdlib_memcpy(v10, a3 + 4, 0x440uLL);
          uint64_t v12 = 0;
          v11[136] = v5;
          uint64_t v13 = a3 + 276;
          while (1)
          {
            size_t __dst = 0;
            cstdlib_memcpy(&__dst, v13 + 18, 8uLL);
            if (__dst < 0x89) {
              break;
            }
            uint64_t v14 = _pcre2_memctl_malloc_8(__dst, a4);
            if (!v14)
            {
              (*((void (**)(void *, void))v4 + 1))(v11, *((void *)v4 + 2));
              if (v12)
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  (*((void (**)(void, void))v4 + 1))(*(void *)(a1 + 8 * i), *((void *)v4 + 2));
                  *(void *)(a1 + 8 * i) = 0;
                }
              }
              return 4294967248;
            }
            long long v15 = v14;
            cstdlib_memcpy(v14 + 3, v13 + 6, __dst - 24);
            if (*((_DWORD *)v15 + 20) != 1346589253
              || *((unsigned __int16 *)v15 + 66) > 0x23u
              || *((unsigned __int16 *)v15 + 67) >= 0x2711u)
            {
              (*((void (**)(void *, void))v4 + 1))(v15, *((void *)v4 + 2));
              return 4294967234;
            }
            v15[3] = v11;
            v15[4] = 0;
            *((_DWORD *)v15 + 24) |= 0x40000u;
            *(void *)(a1 + 8 * v12) = v15;
            uint64_t v13 = (_DWORD *)((char *)v13 + __dst);
            if (v5 == ++v12) {
              return v5;
            }
          }
          return 4294967234;
        }
        return 4294967264;
      }
      else
      {
        return 4294967265;
      }
    }
  }
  return v5;
}

uint64_t pcre2_serialize_get_number_of_codes_8(_DWORD *a1)
{
  if (!a1) {
    return 4294967245;
  }
  if (*a1 != 1347564115) {
    return 4294967265;
  }
  if (a1[1] == 2097162 && a1[2] == 526337) {
    return a1[3];
  }
  return 4294967264;
}

uint64_t pcre2_serialize_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result - 16))(result - 24, *(void *)(result - 8));
  }
  return result;
}

uint64_t _pcre2_strcmp_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  do
  {
    unsigned int v2 = *a1;
    unsigned int v3 = *a2;
    if (!(v2 | v3)) {
      return 0;
    }
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strcmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  do
  {
    unsigned int v2 = *a1;
    unsigned int v3 = *a2;
    if (!(v2 | v3)) {
      return 0;
    }
    ++a1;
    ++a2;
  }
  while (v2 == v3);
  if (v2 > v3) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strncmp_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *a1;
    unsigned int v4 = *a2;
    if (v3 != v4) {
      break;
    }
    ++a2;
    ++a1;
    if (!--a3) {
      return 0;
    }
  }
  if (v3 > v4) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strncmp_c8_8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    unsigned int v3 = *a1;
    unsigned int v4 = *a2;
    if (v3 != v4) {
      break;
    }
    ++a2;
    ++a1;
    if (!--a3) {
      return 0;
    }
  }
  if (v3 > v4) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t _pcre2_strlen_8(unsigned char *a1)
{
  if (!*a1) {
    return 0;
  }
  uint64_t v1 = 0;
  unsigned int v2 = a1 + 1;
  do
    uint64_t result = v1 + 1;
  while (v2[v1++]);
  return result;
}

unsigned char *_pcre2_strcpy_c8_8(unsigned char *a1, unsigned char *a2)
{
  char v2 = *a2;
  unsigned int v3 = a1;
  if (*a2)
  {
    unsigned int v4 = a2 + 1;
    unsigned int v3 = a1;
    do
    {
      *v3++ = v2;
      int v5 = *v4++;
      char v2 = v5;
    }
    while (v5);
  }
  *unsigned int v3 = 0;
  return (unsigned char *)(v3 - a1);
}

uint64_t _pcre2_study_8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v9 = 0;
  int v2 = (*(_DWORD *)(a1 + 88) >> 19) & 1;
  unsigned int v3 = (char *)(a1 + *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132) + 136);
  int v4 = *(_DWORD *)(a1 + 96);
  if ((v4 & 0x210) == 0)
  {
    int started = set_start_bits(a1, (unsigned __int8 *)(a1+ *(unsigned __int16 *)(a1 + 134) * (unint64_t)*(unsigned __int16 *)(a1 + 132)+ 136), (*(_DWORD *)(a1 + 88) >> 19) & 1);
    if (started == 1)
    {
      int v4 = *(_DWORD *)(a1 + 96) | 0x40;
      *(_DWORD *)(a1 + 96) = v4;
    }
    else
    {
      if (started == 3) {
        return 1;
      }
      int v4 = *(_DWORD *)(a1 + 96);
    }
  }
  if ((v4 & 0x2000) == 0 && *(unsigned __int16 *)(a1 + 130) <= 0x80u)
  {
    v10[0] = 0;
    int minlength = find_minlength(a1, v3, (unsigned __int8 *)v3, v2, 0, &v9, v10);
    if (minlength != -1)
    {
      if (minlength == -2) {
        return 2;
      }
      if (minlength == -3) {
        return 3;
      }
      if (minlength >= 0xFFFF) {
        __int16 v8 = -1;
      }
      else {
        __int16 v8 = minlength;
      }
      *(_WORD *)(a1 + 126) = v8;
    }
  }
  return 0;
}

uint64_t set_start_bits(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = a2;
  if (a3) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = 32;
  }
  unsigned __int8 v7 = *a2;
  int8x16_t __b = (void *)(a1 + 65);
  uint64_t v8 = a1 + 40;
  uint64_t v9 = 1;
LABEL_5:
  unsigned int v10 = v7 - 133;
  BOOL v11 = v10 > 6;
  int v12 = (1 << v10) & 0x63;
  if (v11 || v12 == 0) {
    uint64_t v14 = v4 + 3;
  }
  else {
    uint64_t v14 = v4 + 5;
  }
  while (2)
  {
    int v15 = *v14;
    uint64_t result = 3;
    unsigned int v17 = 0;
    uint64_t v18 = 2;
    switch(*v14)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x12u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
      case 0x1Fu:
      case 0x20u:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x51u:
      case 0x52u:
      case 0x53u:
      case 0x54u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x7Du:
      case 0x87u:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Cu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
      case 0xA0u:
      case 0xA1u:
      case 0xA2u:
        return 0;
      case 4u:
      case 5u:
      case 0x57u:
      case 0x58u:
      case 0x5Fu:
        ++v14;
        continue;
      case 6u:
        uint64_t v41 = 0;
        uint64_t v42 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v8 + v41) |= ~*(unsigned char *)(v42 + (v41 + 576));
          ++v41;
        }
        while (v6 != v41);
        goto LABEL_101;
      case 7u:
        uint64_t v43 = a1;
        int v44 = 64;
        goto LABEL_104;
      case 8u:
        uint64_t v45 = 0;
        uint64_t v46 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v8 + v45) |= ~*(unsigned char *)(v46 + (v45 + 512));
          ++v45;
        }
        while (v6 != v45);
        goto LABEL_101;
      case 9u:
        uint64_t v43 = a1;
        int v44 = 0;
        goto LABEL_104;
      case 0xAu:
        uint64_t v47 = 0;
        uint64_t v48 = *(void *)(a1 + 24);
        do
        {
          *(unsigned char *)(v8 + v47) |= ~*(unsigned char *)(v48 + (v47 + 672));
          ++v47;
        }
        while (v6 != v47);
LABEL_101:
        if (a3) {
          *(void *)(a1 + 64) = -1;
        }
        goto LABEL_123;
      case 0xBu:
        uint64_t v43 = a1;
        int v44 = 160;
LABEL_104:
        set_type_bits(v43, v44, v6);
        goto LABEL_123;
      case 0x10u:
        if (v14[1] == 9)
        {
          uint64_t v49 = v14[2];
          unsigned int v50 = _pcre2_ucd_caseless_sets_8[v49];
          if (v50 != -1)
          {
            int v51 = &_pcre2_ucd_caseless_sets_8[v49 + 1];
            while (!a3)
            {
              if (v50 < 0x100) {
                goto LABEL_112;
              }
              *(unsigned char *)(a1 + 71) |= 0x80u;
LABEL_113:
              unsigned int v52 = *v51++;
              unsigned int v50 = v52;
              if (v52 == -1) {
                goto LABEL_123;
              }
            }
            _pcre2_ord2utf_8(v50, (uint64_t)v57);
            unsigned int v50 = v57[0];
LABEL_112:
            *(unsigned char *)(a1 + (v50 >> 3) + 40) |= 1 << (v50 & 7);
            goto LABEL_113;
          }
LABEL_123:
          uint64_t v18 = v9;
LABEL_124:
          v4 += __rev16(*(unsigned __int16 *)(v4 + 1));
          unsigned __int8 v7 = 120;
          uint64_t v9 = v18;
          uint64_t result = v18;
          if (*v4 != 120) {
            return result;
          }
          goto LABEL_5;
        }
        return 0;
      case 0x11u:
      case 0x15u:
        *(unsigned char *)(a1 + 41) |= 0x3Cu;
        if (a3)
        {
          *(unsigned char *)(a1 + 64) |= 4u;
          char v40 = *(unsigned char *)(a1 + 68) | 4;
          goto LABEL_117;
        }
        *(unsigned char *)(a1 + 56) |= 0x20u;
        goto LABEL_123;
      case 0x13u:
        *(unsigned char *)(a1 + 41) |= 2u;
        *(unsigned char *)(a1 + 44) |= 1u;
        if (a3)
        {
          *(unsigned char *)(a1 + 64) |= 4u;
          char v40 = *(unsigned char *)(a1 + 68) | 0xE;
LABEL_117:
          *(unsigned char *)(a1 + 68) = v40;
        }
        else
        {
          *(unsigned char *)(a1 + 60) |= 1u;
        }
        goto LABEL_123;
      case 0x1Bu:
        uint64_t v22 = 1;
        goto LABEL_60;
      case 0x1Du:
      case 0x23u:
      case 0x24u:
      case 0x2Bu:
        goto LABEL_119;
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
      case 0x38u:
        goto LABEL_121;
      case 0x21u:
      case 0x22u:
      case 0x25u:
      case 0x26u:
      case 0x2Au:
      case 0x2Cu:
        uint64_t v19 = v14 + 1;
        goto LABEL_23;
      case 0x27u:
      case 0x28u:
      case 0x2Du:
        uint64_t v19 = v14 + 3;
LABEL_23:
        uint64_t v14 = set_table_bit(a1, v19, 0, a3);
        continue;
      case 0x29u:
        v14 += 2;
LABEL_119:
        uint64_t v53 = v14 + 1;
        uint64_t v54 = a1;
        int v55 = 0;
        goto LABEL_122;
      case 0x2Eu:
      case 0x2Fu:
      case 0x32u:
      case 0x33u:
      case 0x37u:
      case 0x39u:
        uint64_t v20 = v14 + 1;
        goto LABEL_25;
      case 0x34u:
      case 0x35u:
      case 0x3Au:
        uint64_t v20 = v14 + 3;
LABEL_25:
        uint64_t v14 = set_table_bit(a1, v20, 1, a3);
        continue;
      case 0x36u:
        v14 += 2;
LABEL_121:
        uint64_t v53 = v14 + 1;
        uint64_t v54 = a1;
        int v55 = 1;
LABEL_122:
        set_table_bit(v54, v53, v55, a3);
        goto LABEL_123;
      case 0x55u:
      case 0x56u:
      case 0x59u:
      case 0x5Au:
      case 0x5Eu:
      case 0x60u:
        goto LABEL_27;
      case 0x5Bu:
      case 0x5Cu:
      case 0x61u:
        v14 += 2;
LABEL_27:
        uint64_t result = 0;
        switch(v14[1])
        {
          case 6u:
            uint64_t v30 = 0;
            uint64_t v31 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v8 + v30) |= ~*(unsigned char *)(v31 + (v30 + 576));
              ++v30;
            }
            while (v6 != v30);
            goto LABEL_74;
          case 7u:
            uint64_t v32 = a1;
            int v33 = 64;
            goto LABEL_77;
          case 8u:
            uint64_t v34 = 0;
            uint64_t v35 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v8 + v34) |= ~*(unsigned char *)(v35 + (v34 + 512));
              ++v34;
            }
            while (v6 != v34);
            goto LABEL_74;
          case 9u:
            uint64_t v32 = a1;
            int v33 = 0;
            goto LABEL_77;
          case 0xAu:
            uint64_t v36 = 0;
            uint64_t v37 = *(void *)(a1 + 24);
            do
            {
              *(unsigned char *)(v8 + v36) |= ~*(unsigned char *)(v37 + (v36 + 672));
              ++v36;
            }
            while (v6 != v36);
LABEL_74:
            if (a3) {
              *(void *)(a1 + 64) = -1;
            }
            break;
          case 0xBu:
            uint64_t v32 = a1;
            int v33 = 160;
LABEL_77:
            set_type_bits(v32, v33, v6);
            break;
          case 0x11u:
          case 0x15u:
            *(unsigned char *)(a1 + 41) |= 0x3Cu;
            if (a3)
            {
              *(unsigned char *)(a1 + 64) |= 4u;
              char v21 = *(unsigned char *)(a1 + 68) | 4;
              goto LABEL_80;
            }
            *(unsigned char *)(a1 + 56) |= 0x20u;
            break;
          case 0x13u:
            *(unsigned char *)(a1 + 41) |= 2u;
            *(unsigned char *)(a1 + 44) |= 1u;
            if (a3)
            {
              *(unsigned char *)(a1 + 64) |= 4u;
              char v21 = *(unsigned char *)(a1 + 68) | 0xE;
LABEL_80:
              *(unsigned char *)(a1 + 68) = v21;
            }
            else
            {
              *(unsigned char *)(a1 + 60) |= 1u;
            }
            break;
          default:
            return result;
        }
        v14 += 2;
        continue;
      case 0x5Du:
        goto LABEL_33;
      case 0x6Eu:
        goto LABEL_45;
      case 0x6Fu:
        goto LABEL_40;
      case 0x70u:
        uint64_t result = 0;
        if ((v14[3] & 4) != 0 || (v14[3] & 3) == 1) {
          return result;
        }
        if ((v14[3] & 2) != 0) {
          unsigned int v17 = v14 + 4;
        }
        else {
          unsigned int v17 = 0;
        }
LABEL_40:
        if (a3)
        {
          *(unsigned char *)(a1 + 64) |= 0xF0u;
          cstdlib_memset(__b, 255, 7uLL);
          int v15 = *v14;
        }
        if (v15 == 112)
        {
          unsigned int v23 = &v14[__rev16(*(unsigned __int16 *)(v14 + 1))];
          if (!v17) {
            goto LABEL_55;
          }
        }
        else
        {
LABEL_45:
          unsigned int v17 = v14 + 1;
          unsigned int v23 = v14 + 33;
        }
        uint64_t v24 = 0;
        if (a3)
        {
          do
          {
            *(unsigned char *)(v8 + v24) |= v17[v24];
            ++v24;
          }
          while (v24 != 16);
          unsigned int v25 = 128;
          do
          {
            if ((v17[(unint64_t)v25 >> 3] >> (v25 & 7)))
            {
              *(unsigned char *)(a1 + 64) |= 1 << (v25 >> 6);
              v25 |= 0x3Fu;
            }
          }
          while (v25++ < 0xFF);
        }
        else
        {
          do
          {
            *(unsigned char *)(v8 + v24) |= v17[v24];
            ++v24;
          }
          while (v24 != 32);
        }
LABEL_55:
        unsigned int v27 = *v23 - 98;
        if (v27 > 0xB) {
          goto LABEL_123;
        }
        int v28 = 1 << v27;
        if ((v28 & 0x533) != 0)
        {
          uint64_t v14 = v23 + 1;
        }
        else
        {
          if ((v28 & 0x8C0) == 0) {
            goto LABEL_123;
          }
          BOOL v38 = __rev16(*(unsigned __int16 *)(v23 + 1)) == 0;
          uint64_t v39 = 5;
          if (!v38) {
            uint64_t v39 = 0;
          }
          uint64_t v14 = &v23[v39];
          if (!v38) {
            goto LABEL_123;
          }
        }
        continue;
      case 0x76u:
        uint64_t v22 = 6;
        goto LABEL_60;
      case 0x77u:
        uint64_t v22 = __rev16(*(unsigned __int16 *)(v14 + 5));
LABEL_60:
        v14 += v22;
        continue;
      case 0x78u:
        goto LABEL_124;
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
        return 2;
      case 0x7Eu:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
        uint64_t result = set_start_bits(a1, v14, a3);
        switch(result)
        {
          case 0:
            return result;
          case 1:
            goto LABEL_123;
          case 3:
            return result;
        }
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
LABEL_33:
        v14 += 3;
        continue;
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
        goto LABEL_33;
      case 0x93u:
      case 0x94u:
      case 0x95u:
        uint64_t result = set_start_bits(a1, ++v14, a3);
        if (!result || result == 3) {
          return result;
        }
        do
          v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
        while (*v14 == 120);
        goto LABEL_33;
      case 0xA3u:
        unsigned int v29 = v14 + 1;
        do
          v29 += __rev16(*(unsigned __int16 *)(v29 + 1));
        while (*v29 == 120);
        uint64_t v14 = v29 + 3;
        continue;
      default:
        return result;
    }
  }
}

uint64_t find_minlength(uint64_t a1, char *a2, unsigned __int8 *a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  char v7 = *a2;
  if ((*a2 + 120) >= 5u)
  {
    int v76 = *(_DWORD *)(a1 + 96);
    int v9 = (*a6)++;
    if (v9 > 1000) {
      return 0xFFFFFFFFLL;
    }
    int v11 = 0;
    int v67 = 0;
    BOOL v12 = ((v7 + 123) & 0xFE) == 0;
    uint64_t v13 = 3;
    if (v12) {
      uint64_t v13 = 5;
    }
    uint64_t v14 = (unsigned __int8 *)&a2[v13];
    uint64_t v66 = a1 + 136;
    unint64_t v70 = a7 + 1;
    int v68 = -1;
    int v69 = 0;
    int v71 = -1;
    int v72 = 0;
    int v74 = -1;
    int v75 = 0;
    int v78 = a3;
    uint64_t v79 = a7;
    uint64_t v77 = a1;
    while (2)
    {
      uint64_t v15 = *v14;
      uint64_t v8 = 0xFFFFFFFFLL;
      switch(*v14)
      {
        case 0u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
          if (v74 < 0 || !v75 && v11 < v74) {
            int v74 = v11;
          }
          if (v15 == 120)
          {
            int v75 = 0;
            int v11 = 0;
            goto LABEL_33;
          }
          return v74;
        case 1u:
        case 2u:
        case 4u:
        case 5u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x76u:
        case 0x7Du:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x91u:
        case 0x92u:
          goto LABEL_12;
        case 3u:
        case 0x97u:
        case 0x99u:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Fu:
        case 0xA2u:
          uint64_t v18 = _pcre2_OP_lengths_8[v15];
          goto LABEL_94;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_90;
        case 0xEu:
          if (!a4) {
            goto LABEL_90;
          }
          return v8;
        case 0xFu:
        case 0x10u:
          v14 += 2;
LABEL_90:
          ++v11;
          BOOL v16 = v14 + 1;
          goto LABEL_95;
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x23u:
        case 0x24u:
        case 0x2Bu:
        case 0x30u:
        case 0x31u:
        case 0x38u:
        case 0x3Du:
        case 0x3Eu:
        case 0x45u:
        case 0x4Au:
        case 0x4Bu:
        case 0x52u:
          ++v11;
          BOOL v16 = v14 + 2;
          if (!a4) {
            goto LABEL_95;
          }
          unsigned int v17 = v14[1];
          goto LABEL_15;
        case 0x21u:
        case 0x22u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Au:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x37u:
        case 0x39u:
        case 0x3Au:
        case 0x3Bu:
        case 0x3Cu:
        case 0x3Fu:
        case 0x40u:
        case 0x41u:
        case 0x42u:
        case 0x44u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x51u:
        case 0x53u:
        case 0x54u:
          BOOL v16 = &v14[_pcre2_OP_lengths_8[v15]];
          if (!a4) {
            goto LABEL_95;
          }
          unsigned int v17 = *(v16 - 1);
          goto LABEL_15;
        case 0x29u:
        case 0x36u:
        case 0x43u:
        case 0x50u:
          v11 += bswap32(*(unsigned __int16 *)(v14 + 1)) >> 16;
          BOOL v16 = v14 + 4;
          if (!a4) {
            goto LABEL_95;
          }
          unsigned int v17 = v14[3];
LABEL_15:
          if (v17 >= 0xC0) {
            v16 += _pcre2_utf8_table4[v17 & 0x3F];
          }
          goto LABEL_95;
        case 0x55u:
        case 0x56u:
        case 0x59u:
        case 0x5Au:
        case 0x5Eu:
        case 0x60u:
          int v19 = v14[1];
          goto LABEL_39;
        case 0x57u:
        case 0x58u:
        case 0x5Fu:
          ++v11;
          BOOL v26 = v14[1] - 15 >= 2;
          uint64_t v18 = 2;
          uint64_t v27 = 4;
          goto LABEL_92;
        case 0x5Bu:
        case 0x5Cu:
        case 0x61u:
          int v19 = v14[3];
LABEL_39:
          char v21 = &v14[2 * ((v19 - 15) < 2)];
          uint64_t v20 = _pcre2_OP_lengths_8[v15];
          goto LABEL_40;
        case 0x5Du:
          v11 += bswap32(*(unsigned __int16 *)(v14 + 1)) >> 16;
          BOOL v26 = v14[3] - 15 >= 2;
          uint64_t v18 = 4;
          uint64_t v27 = 6;
LABEL_92:
          if (!v26) {
            uint64_t v18 = v27;
          }
          goto LABEL_94;
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
          if (v15 == 112) {
            uint64_t v28 = __rev16(*(unsigned __int16 *)(v14 + 1));
          }
          else {
            uint64_t v28 = 33;
          }
          BOOL v16 = &v14[v28];
          unsigned int v50 = *v16 - 98;
          if (v50 > 0xB)
          {
            ++v11;
          }
          else
          {
            int v51 = 1 << v50;
            if ((v51 & 0x533) != 0) {
              goto LABEL_88;
            }
            if ((v51 & 0x20C) != 0)
            {
              ++v11;
LABEL_88:
              ++v16;
              goto LABEL_95;
            }
            v11 += bswap32(*(unsigned __int16 *)(v16 + 1)) >> 16;
            v16 += 5;
          }
          goto LABEL_95;
        case 0x71u:
        case 0x72u:
          if ((v76 & 0x200000) != 0) {
            return v8;
          }
          int v29 = v14[1];
          int v30 = v14[2];
          int v31 = v30 | (v29 << 8);
          if (v31 <= *a7)
          {
            LODWORD(v32) = a7[v31];
            if ((v32 & 0x80000000) == 0) {
              goto LABEL_123;
            }
          }
          if ((*(unsigned char *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v32) = 0;
          }
          else
          {
            bracket_8 = _pcre2_find_bracket_8(a3, a4, v14[2] | (v14[1] << 8));
            if (!bracket_8) {
              return 4294967294;
            }
            uint64_t v34 = bracket_8;
            uint64_t v35 = bracket_8;
            do
              v35 += __rev16(*(unsigned __int16 *)(v35 + 1));
            while (*v35 == 120);
            a3 = v78;
            a7 = v79;
            a1 = v77;
            if (v14 > v34 && v14 < v35) {
              goto LABEL_53;
            }
            if (a5)
            {
              BOOL v57 = a5;
              while ((unsigned __int8 *)v57[1] != v34)
              {
                BOOL v57 = (void *)*v57;
                if (!v57) {
                  goto LABEL_119;
                }
              }
LABEL_53:
              LODWORD(v32) = 0;
              int v75 = 1;
              goto LABEL_120;
            }
LABEL_119:
            uint64_t minlength = find_minlength(v77);
            a3 = v78;
            a7 = v79;
            uint64_t v32 = minlength;
            a1 = v77;
            uint64_t v8 = v32;
            if ((v32 & 0x80000000) != 0) {
              return v8;
            }
          }
LABEL_120:
          a7[v31] = v32;
          uint64_t v59 = *a7;
          if ((int)v59 + 1 < v31)
          {
            memset(&v70[v59], 255, 4 * ((v29 << 8) + v30 - v59 - 2) + 4);
            a1 = v77;
            a3 = v78;
            a7 = v79;
          }
          *a7 = v31;
LABEL_123:
          uint64_t v56 = 3;
LABEL_124:
          BOOL v16 = &v14[v56];
          unsigned int v60 = 1;
          unsigned int v61 = *v16 - 98;
          if (v61 <= 0xB)
          {
            if (((1 << v61) & 0x533) != 0)
            {
              unsigned int v60 = 0;
              ++v16;
            }
            else if (((1 << v61) & 0x20C) != 0)
            {
              ++v16;
              unsigned int v60 = 1;
            }
            else
            {
              unsigned int v60 = __rev16(*(unsigned __int16 *)(v16 + 1));
              v16 += 5;
            }
          }
          if ((int)v32 >= 1 && 0x7FFFFFFF / v32 < v60) {
            return 0xFFFFLL;
          }
          uint64_t v8 = 0xFFFFLL;
          int v62 = v60 * v32;
          if (0xFFFF - v11 < v62) {
            return v8;
          }
          v11 += v62;
LABEL_95:
          uint64_t v14 = v16;
          if (v11 > 65534) {
            return 0xFFFFLL;
          }
          continue;
        case 0x73u:
        case 0x74u:
          if ((v76 & 0x200000) != 0) {
            return v8;
          }
          if ((*(unsigned char *)(a1 + 89) & 2) != 0)
          {
            LODWORD(v32) = 0;
            goto LABEL_114;
          }
          signed int v36 = __rev16(*(unsigned __int16 *)(v14 + 3));
          if (!v36)
          {
            LODWORD(v32) = 0x7FFFFFFF;
            goto LABEL_114;
          }
          uint64_t v37 = (unsigned __int8 *)(v66
                                  + *(unsigned __int16 *)(a1 + 132)
                                  * (unint64_t)__rev16(*(unsigned __int16 *)(v14 + 1)));
          uint64_t v38 = *a7;
          LODWORD(v32) = 0x7FFFFFFF;
          break;
        case 0x75u:
          unsigned int v52 = &a3[__rev16(*(unsigned __int16 *)(v14 + 1))];
          unsigned int v53 = __rev16(*(unsigned __int16 *)(v52 + 3));
          unint64_t v54 = (unint64_t)v52;
          if (v53 == v68)
          {
            v11 += v67;
            goto LABEL_140;
          }
          do
            v54 += __rev16(*(unsigned __int16 *)(v54 + 1));
          while (*(unsigned char *)v54 == 120);
          if (v14 > v52 && (unint64_t)v14 < v54) {
            goto LABEL_102;
          }
          if (a5)
          {
            unsigned int v63 = a5;
            while ((unsigned __int8 *)v63[1] != v52)
            {
              unsigned int v63 = (void *)*v63;
              if (!v63) {
                goto LABEL_138;
              }
            }
LABEL_102:
            int v75 = 1;
          }
          else
          {
LABEL_138:
            uint64_t v64 = ((uint64_t (*)(void))find_minlength)();
            if ((v64 & 0x80000000) != 0) {
              return v64;
            }
            int v67 = v64;
            int v68 = v53;
            v11 += v64;
            a3 = v78;
            a7 = v79;
            a1 = v77;
          }
LABEL_140:
          uint64_t v18 = (v69 + 3);
          int v69 = 0;
LABEL_94:
          BOOL v16 = &v14[v18];
          goto LABEL_95;
        case 0x77u:
          uint64_t v18 = __rev16(*(unsigned __int16 *)(v14 + 5));
          goto LABEL_94;
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
          do
          {
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
            LODWORD(v15) = *v14;
          }
          while (v15 == 120);
LABEL_12:
          uint64_t v18 = _pcre2_OP_lengths_8[v15];
          goto LABEL_94;
        case 0x82u:
        case 0x84u:
        case 0x88u:
        case 0x89u:
          goto LABEL_107;
        case 0x83u:
          BOOL v16 = v14 + 3;
          if (v14[3] != 117 || v14[6] != 121) {
            goto LABEL_107;
          }
          int v69 = 3;
          goto LABEL_95;
        case 0x85u:
        case 0x86u:
        case 0x8Au:
        case 0x8Bu:
          unsigned int v22 = __rev16(*(unsigned __int16 *)(v14 + 3));
          if ((v76 & 0x200000) != 0 || v22 != v71)
          {
            uint64_t v23 = find_minlength(v77);
            a3 = v78;
            a7 = v79;
            uint64_t v24 = v23;
            a1 = v77;
            int v71 = v22;
            int v72 = v24;
            uint64_t v8 = v24;
            if ((v24 & 0x80000000) != 0) {
              return v8;
            }
          }
          do
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
          while (*v14 == 120);
          v11 += v72;
LABEL_33:
          BOOL v16 = v14 + 3;
          goto LABEL_95;
        case 0x87u:
        case 0x8Cu:
          unsigned int v25 = &v14[__rev16(*(unsigned __int16 *)(v14 + 1))];
          if (*v25 != 120) {
            goto LABEL_36;
          }
LABEL_107:
          uint64_t v55 = ((uint64_t (*)(void))find_minlength)();
          uint64_t v8 = v55;
          if ((v55 & 0x80000000) != 0) {
            return v8;
          }
          do
            v14 += __rev16(*(unsigned __int16 *)(v14 + 1));
          while (*v14 == 120);
          v11 += v55;
          BOOL v16 = v14 + 3;
          a3 = v78;
          a7 = v79;
          a1 = v77;
          goto LABEL_95;
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0xA3u:
          unsigned int v25 = &v14[_pcre2_OP_lengths_8[v15]];
          do
            v25 += __rev16(*(unsigned __int16 *)(v25 + 1));
          while (*v25 == 120);
LABEL_36:
          BOOL v16 = v25 + 3;
          goto LABEL_95;
        case 0x96u:
        case 0x98u:
        case 0x9Au:
        case 0x9Cu:
        case 0x9Eu:
          uint64_t v20 = _pcre2_OP_lengths_8[v15];
          char v21 = &v14[v14[1]];
LABEL_40:
          BOOL v16 = &v21[v20];
          goto LABEL_95;
        case 0xA0u:
        case 0xA1u:
          return v8;
        default:
          return 4294967293;
      }
      break;
    }
    while (1)
    {
      int v39 = *v37;
      int v40 = v37[1];
      uint64_t v41 = v40 | (v39 << 8);
      if ((int)v41 > (int)v38) {
        break;
      }
      LODWORD(v8) = a7[v41];
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      uint64_t v41 = v38;
LABEL_75:
      if ((int)v8 < (int)v32) {
        LODWORD(v32) = v8;
      }
      if ((int)v32 >= 1)
      {
        v37 += *(unsigned __int16 *)(a1 + 132);
        uint64_t v38 = v41;
        if (v36-- > 1) {
          continue;
        }
      }
LABEL_114:
      uint64_t v56 = 5;
      goto LABEL_124;
    }
    uint64_t v42 = _pcre2_find_bracket_8(a3, a4, v37[1] | (*v37 << 8));
    if (!v42) {
      return 4294967294;
    }
    uint64_t v43 = v42;
    int v44 = v39 << 8;
    uint64_t v45 = v42;
    do
      v45 += __rev16(*(unsigned __int16 *)(v45 + 1));
    while (*v45 == 120);
    a3 = v78;
    a7 = v79;
    a1 = v77;
    if (v14 <= v43 || v14 >= v45)
    {
      if (!a5)
      {
LABEL_71:
        uint64_t v47 = find_minlength(v77);
        a3 = v78;
        a7 = v79;
        uint64_t v8 = v47;
        a1 = v77;
        if ((v8 & 0x80000000) != 0) {
          return v8;
        }
        goto LABEL_72;
      }
      uint64_t v46 = a5;
      while ((unsigned __int8 *)v46[1] != v43)
      {
        uint64_t v46 = (void *)*v46;
        if (!v46) {
          goto LABEL_71;
        }
      }
    }
    LODWORD(v8) = 0;
    int v75 = 1;
LABEL_72:
    a7[v41] = v8;
    uint64_t v48 = *a7;
    if ((int)v48 + 1 < (int)v41)
    {
      memset(&v70[v48], 255, 4 * (v44 + v40 - v48 - 2) + 4);
      a1 = v77;
      a3 = v78;
      a7 = v79;
    }
    *a7 = v41;
    goto LABEL_75;
  }
  return 0;
}

unsigned __int8 *set_table_bit(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v6 = a2 + 1;
  unint64_t v5 = *a2;
  *(unsigned char *)(a1 + (v5 >> 3) + 40) |= 1 << (v5 & 7);
  if (a4 && v5 >= 0xC0)
  {
    if ((v5 & 0x20) != 0)
    {
      if ((v5 & 0x10) != 0)
      {
        if ((v5 & 8) != 0)
        {
          int v7 = a2[1] & 0x3F;
          int v8 = a2[2] & 0x3F;
          int v9 = a2[3] & 0x3F;
          int v10 = a2[4] & 0x3F;
          if ((v5 & 4) != 0)
          {
            LODWORD(v5) = ((v5 & 1) << 30) | (v7 << 24) | (v8 << 18) | (v9 << 12) | (v10 << 6) | a2[5] & 0x3F;
            uint64_t v6 = a2 + 6;
          }
          else
          {
            LODWORD(v5) = ((v5 & 3) << 24) | (v7 << 18) | (v8 << 12) | (v9 << 6) | v10;
            uint64_t v6 = a2 + 5;
          }
        }
        else
        {
          LODWORD(v5) = ((v5 & 7) << 18) | ((a2[1] & 0x3F) << 12) | ((a2[2] & 0x3F) << 6) | a2[3] & 0x3F;
          uint64_t v6 = a2 + 4;
        }
      }
      else
      {
        LODWORD(v5) = ((v5 & 0xF) << 12) | ((a2[1] & 0x3F) << 6) | a2[2] & 0x3F;
        uint64_t v6 = a2 + 3;
      }
    }
    else
    {
      uint64_t v6 = a2 + 2;
      LODWORD(v5) = a2[1] & 0x3F | ((v5 & 0x1F) << 6);
    }
  }
  if (a3)
  {
    if (a4)
    {
      _pcre2_ord2utf_8(_pcre2_ucd_records_8[2 * _pcre2_ucd_stage2_8[v5 & 0x7F | (_pcre2_ucd_stage1_8[v5 >> 7] << 7)] + 1]+ v5, (uint64_t)v13);
      unint64_t v11 = v13[0];
    }
    else
    {
      unint64_t v11 = *(unsigned __int8 *)(*(void *)(a1 + 24) + v5 + 256);
    }
    *(unsigned char *)(a1 + (v11 >> 3) + 40) |= 1 << (v11 & 7);
  }
  return v6;
}

uint64_t set_type_bits(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  if (!a3) {
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(result + 24);
  do
  {
    *(unsigned char *)(result + 40 + v4) |= *(unsigned char *)(v5 + (a2 + 512 + v4));
    ++v4;
  }
  while (a3 != v4);
  if (a3 != 32)
  {
LABEL_5:
    for (unsigned int i = 128; i != 256; ++i)
    {
      if ((*(unsigned __int8 *)((i >> 3) + *(void *)(v3 + 24) + 512) >> (i & 7)))
      {
        uint64_t result = _pcre2_ord2utf_8(i, (uint64_t)v7);
        *(unsigned char *)(v3 + ((unint64_t)v7[0] >> 3) + 40) |= 1 << (v7[0] & 7);
      }
    }
  }
  return result;
}

uint64_t pcre2_substitute_8(uint64_t a1, unsigned char *a2, unint64_t a3, size_t a4, int a5, void *a6, long long *a7, unsigned __int8 *a8, unint64_t a9, char *__dst, unint64_t *a11)
{
  uint64_t v174 = *MEMORY[0x263EF8340];
  int v11 = *(_DWORD *)(a1 + 88);
  unint64_t v12 = *a11;
  *a11 = -1;
  if ((a5 & 0x30) != 0) {
    return 4294967262;
  }
  uint64_t v20 = a6;
  if (!a6)
  {
    char v21 = a7 ? a7 : (long long *)a1;
    uint64_t v20 = pcre2_match_data_create_from_pattern_8(a1, v21);
    if (!v20) {
      return 4294967248;
    }
  }
  BOOL v157 = a7;
  unint64_t v146 = a6;
  unint64_t v22 = a9;
  ovector_pointer_8 = (uint64_t *)pcre2_get_ovector_pointer_8((uint64_t)v20);
  unsigned int ovector_count_8 = pcre2_get_ovector_count_8((uint64_t)v20);
  if (a3 == -1) {
    a3 = _pcre2_strlen_8(a2);
  }
  int v23 = v11 & 0x80000;
  if (a9 == -1) {
    unint64_t v22 = _pcre2_strlen_8(a8);
  }
  unsigned int v170 = 0;
  if ((a5 & 0x40000000) == 0)
  {
    if (v23)
    {
      unsigned int valid = _pcre2_valid_utf_8(a8, v22, v20 + 7);
      if (valid)
      {
        unsigned int v151 = valid;
        v20[6] = 0;
        goto LABEL_316;
      }
    }
  }
  if (a3 < a4)
  {
    v20[6] = 0;
    int v25 = -33;
    goto LABEL_315;
  }
  unint64_t v165 = v12 - a4;
  if (v12 >= a4)
  {
    unint64_t v163 = a3;
    unint64_t v142 = v12;
    unsigned int v143 = a8;
    uint64_t v141 = a11;
    int v149 = __dst;
    cstdlib_memcpy(__dst, a2, a4);
    uint64_t v27 = 0;
    unint64_t v26 = 0;
    int v28 = a5;
    BOOL v154 = (a5 & 0x1000) == 0;
    size_t v160 = a4;
  }
  else
  {
    if ((a5 & 0x1000) == 0) {
      goto LABEL_314;
    }
    int v149 = __dst;
    unint64_t v163 = a3;
    unint64_t v142 = v12;
    unsigned int v143 = a8;
    uint64_t v141 = a11;
    BOOL v154 = 0;
    size_t v160 = 0;
    unint64_t v26 = a4 - v12;
    uint64_t v27 = 1;
    unint64_t v165 = v12;
    int v28 = a5;
  }
  int v29 = 0;
  int v162 = 0;
  int v30 = 0;
  int v31 = 0;
  unint64_t v32 = (unint64_t)&v143[v22];
  unsigned int v33 = v28 & 0xFFFFE0FF;
  if ((v28 & 0x800) != 0) {
    int v34 = -55;
  }
  else {
    int v34 = -49;
  }
  int v140 = v34;
  if ((v28 & 0x400) != 0) {
    int v35 = 9;
  }
  else {
    int v35 = 16;
  }
  int v139 = v35;
  int v147 = 0;
  int v148 = v33 | (v23 << 11);
  uint64_t v158 = -1;
  unint64_t v159 = a2;
  unsigned int v151 = -48;
  uint64_t v150 = -1;
  uint64_t v152 = (uint64_t)v20;
  uint64_t v153 = -1;
  while (1)
  {
    int v155 = v30;
    memset(v173, 0, sizeof(v173));
    int matched = pcre2_match_8(a1, a2, v163, a4, v30 | v33, (uint64_t)v20, v157);
    if (matched < 0) {
      break;
    }
    unint64_t v38 = *ovector_pointer_8;
    unint64_t v37 = ovector_pointer_8[1];
    int v39 = -60;
    if (v37 < *ovector_pointer_8) {
      goto LABEL_303;
    }
    unint64_t v40 = v38 - a4;
    if (v38 < a4) {
      goto LABEL_303;
    }
    if (v153 != v38 || v150 != v37)
    {
      if (v147 == 0x7FFFFFFF)
      {
        int v39 = -61;
        goto LABEL_303;
      }
      int v44 = ovector_count_8;
      if (matched) {
        int v44 = matched;
      }
      int v145 = v44;
      uint64_t v45 = v27;
      if (!v27 && v165 < v40)
      {
        if (!v154)
        {
          unint64_t v26 = v40 - v165;
          uint64_t v45 = 1;
          goto LABEL_68;
        }
LABEL_300:
        int v39 = -48;
LABEL_303:
        unsigned int v151 = v39;
        uint64_t v20 = (void *)v152;
        goto LABEL_316;
      }
      if (v27)
      {
        v26 += v40;
      }
      else
      {
        cstdlib_memcpy(&v149[v160], &a2[a4], v38 - a4);
        uint64_t v45 = 0;
        v160 += v40;
        v165 -= v40;
      }
LABEL_68:
      unsigned int v46 = 0;
      ++v147;
      uint64_t v47 = v143;
      unsigned int v170 = v143;
      while (2)
      {
        unsigned int v169 = 0;
        if ((unint64_t)v47 >= v32)
        {
          if (!v46)
          {
            uint64_t v27 = v45;
            unint64_t v41 = ovector_pointer_8[1];
            uint64_t v153 = *ovector_pointer_8;
            if (*ovector_pointer_8 != v41 || *ovector_pointer_8 > a4) {
              int v30 = 0;
            }
            else {
              int v30 = -2147483640;
            }
            uint64_t v150 = ovector_pointer_8[1];
            goto LABEL_298;
          }
          unint64_t v32 = *((void *)&v173[v46 / 2 - 1] + 1);
          v46 -= 2;
          unsigned int v50 = *(unsigned __int8 **)&v173[v46 / 2];
LABEL_79:
          unsigned int v170 = v50;
          goto LABEL_159;
        }
        int v48 = *v47;
        if (v31)
        {
          BOOL v49 = v48 != 92 || (unint64_t)v47 >= v32 - 1;
          if (!v49 && v47[1] == 69)
          {
            int v31 = 0;
            unsigned int v50 = v47 + 2;
            goto LABEL_79;
          }
LABEL_101:
          int v51 = v47;
LABEL_102:
          unsigned int v170 = v51 + 1;
          LODWORD(v62) = *v51;
          unsigned int v169 = v62;
          if (v23 && v62 >= 0xC0)
          {
            if ((v62 & 0x20) == 0)
            {
              unsigned int v170 = v51 + 2;
              unsigned int v169 = v51[1] & 0x3F | ((v62 & 0x1F) << 6);
              if (!v29) {
                goto LABEL_106;
              }
LABEL_128:
              if (v23)
              {
                unsigned int v63 = v169;
                uint64_t v70 = _pcre2_ucd_stage2_8[v169
                                        - (v62 & 0xFFFFFF80)
                                        + (_pcre2_ucd_stage1_8[(int)v169 / 128] << 7)];
                uint64_t v71 = BYTE1(_pcre2_ucd_records_8[2 * v70]);
                if (_pcre2_ucp_gentype_8[v71] != 1) {
                  goto LABEL_135;
                }
                if (v29 <= 0) {
                  int v72 = 5;
                }
                else {
                  int v72 = 9;
                }
                int v29 = v162;
                if (v72 != v71)
                {
                  unsigned int v63 = _pcre2_ucd_records_8[2 * v70 + 1] + v169;
                  unsigned int v169 = v63;
LABEL_135:
                  int v29 = v162;
                }
LABEL_136:
                uint64_t v73 = v45;
                unsigned int v74 = _pcre2_ord2utf_8(v63, (uint64_t)__src);
                uint64_t v45 = v73;
LABEL_142:
                uint64_t v77 = v74;
                if (v45)
                {
                  v26 += v74;
                }
                else
                {
                  unint64_t v78 = v165 - v74;
                  if (v165 >= v74)
                  {
                    cstdlib_memcpy(&v149[v160], __src, v74);
                    uint64_t v45 = 0;
                    v160 += v77;
                    unint64_t v165 = v78;
                  }
                  else
                  {
                    if (v154) {
                      goto LABEL_300;
                    }
                    unint64_t v26 = v74 - v165;
                    uint64_t v45 = 1;
                  }
                  a2 = v159;
                }
LABEL_159:
                uint64_t v47 = v170;
                continue;
              }
              uint64_t v75 = *(void *)(a1 + 24);
              uint64_t v76 = 128;
              if (v29 > 0) {
                uint64_t v76 = 96;
              }
              LOBYTE(v63) = v169;
              int v29 = v162;
              if (((*(unsigned __int8 *)(v75 + v76 + ((unint64_t)v169 >> 3) + 512) >> (v169 & 7)) & 1) == 0)
              {
                LOBYTE(v63) = *(unsigned char *)(v75 + v169 + 256);
                unsigned int v169 = v63;
                int v29 = v162;
              }
LABEL_141:
              __src[0] = v63;
              unsigned int v74 = 1;
              goto LABEL_142;
            }
            int v64 = v51[1] & 0x3F;
            if ((v62 & 0x10) == 0)
            {
              unsigned int v169 = ((v62 & 0xF) << 12) | (v64 << 6) | v51[2] & 0x3F;
              int v62 = v51 + 3;
              goto LABEL_126;
            }
            if ((v62 & 8) == 0)
            {
              unsigned int v169 = ((v62 & 7) << 18) | (v64 << 12) | ((v51[2] & 0x3F) << 6) | v51[3] & 0x3F;
              int v62 = v51 + 4;
              goto LABEL_126;
            }
            int v65 = v51[2] & 0x3F;
            int v66 = v51[3] & 0x3F;
            int v67 = v51[4] & 0x3F;
            if ((v62 & 4) == 0)
            {
              unsigned int v169 = ((v62 & 3) << 24) | (v64 << 18) | (v65 << 12) | (v66 << 6) | v67;
              unsigned int v170 = v51 + 5;
              if (v29) {
                goto LABEL_128;
              }
              goto LABEL_106;
            }
            unsigned int v169 = ((v62 & 1) << 30) | (v64 << 24) | (v65 << 18) | (v66 << 12) | (v67 << 6) | v51[5] & 0x3F;
            int v62 = v51 + 6;
LABEL_126:
            unsigned int v170 = v62;
          }
          if (v29) {
            goto LABEL_128;
          }
LABEL_106:
          unsigned int v63 = v169;
          if (v23) {
            goto LABEL_136;
          }
          goto LABEL_141;
        }
        break;
      }
      if (v48 == 36)
      {
        unint64_t v168 = 0;
        int v51 = v47 + 1;
        unsigned int v170 = v47 + 1;
        if ((unint64_t)(v47 + 1) >= v32) {
          goto LABEL_156;
        }
        int v52 = *v51;
        if (v52 == 36) {
          goto LABEL_102;
        }
        unsigned int v53 = *v51;
        if (v52 == 123)
        {
          int v51 = v47 + 2;
          unsigned int v170 = v47 + 2;
          if ((unint64_t)(v47 + 2) >= v32) {
            goto LABEL_156;
          }
          unsigned int v53 = *v51;
        }
        if (v53 == 42)
        {
          unsigned int v170 = ++v51;
          if ((unint64_t)v51 >= v32) {
            goto LABEL_156;
          }
          unsigned int v58 = *v51;
        }
        else
        {
          signed int v54 = v53 - 48;
          if (v53 - 48 <= 9)
          {
            uint64_t v55 = v51 + 1;
            unsigned int v170 = v51 + 1;
            if ((unint64_t)(v51 + 1) >= v32)
            {
              unsigned int v58 = v53;
            }
            else
            {
              unint64_t v56 = ~(unint64_t)v51 + v32;
              BOOL v57 = v51 + 2;
              while (1)
              {
                unsigned int v58 = *v55;
                if (v58 - 58 < 0xFFFFFFF6) {
                  goto LABEL_171;
                }
                signed int v54 = v58 + 10 * v54 - 48;
                if (v54 > *(unsigned __int16 *)(a1 + 128)) {
                  break;
                }
                unsigned int v170 = ++v55;
                ++v57;
                if (!--v56)
                {
                  uint64_t v55 = (unsigned __int8 *)v32;
                  goto LABEL_171;
                }
              }
              if ((a5 & 0x800) == 0)
              {
                int v60 = 16;
                int v96 = -49;
                goto LABEL_193;
              }
              do
              {
                uint64_t v55 = v57;
                unsigned int v170 = v57;
                if ((unint64_t)v57 >= v32) {
                  break;
                }
                ++v57;
              }
              while (*v55 - 48 < 0xA);
            }
LABEL_171:
            if (v52 == 123)
            {
              if ((a5 & 0x200) != 0 && v53 != 42 && v58 == 58 && (unint64_t)v55 < v32 - 2)
              {
                unsigned int v170 = v55 + 1;
                int v85 = v55[1];
                if (v85 != 45 && v85 != 43)
                {
                  int v60 = 16;
                  int v96 = -59;
                  goto LABEL_193;
                }
                unsigned int v131 = v45;
                unsigned int v86 = v55 + 2;
                unsigned int v170 = v55 + 2;
                int v133 = v85;
                int text_end = find_text_end(a1, &v170, v32, v85 == 45);
                if (text_end) {
                  goto LABEL_179;
                }
                unsigned int v137 = v86;
                uint64_t v90 = v170;
                int v88 = v133;
                uint64_t v45 = v131;
                if (v133 == 43)
                {
                  if (*v170 == 58)
                  {
                    unsigned int v135 = v170;
                    unsigned int v91 = ++v170;
                    int text_end = find_text_end(a1, &v170, v32, 1);
                    if (text_end)
                    {
LABEL_179:
                      int v145 = text_end;
                      int v60 = 16;
                      uint64_t v45 = v131;
                      goto LABEL_157;
                    }
                    int v145 = 0;
                    int v88 = 43;
                    uint64_t v55 = v170;
                    int v92 = v170;
                    uint64_t v45 = v131;
                    uint64_t v90 = v135;
                    int v89 = v137;
                    goto LABEL_231;
                  }
                  int v145 = 0;
                  unsigned int v91 = 0;
                  int v92 = 0;
                  int v88 = 43;
                }
                else
                {
                  int v145 = 0;
                  unsigned int v91 = 0;
                  int v92 = 0;
                }
                uint64_t v55 = v170;
                int v89 = v137;
                goto LABEL_231;
              }
              if ((unint64_t)v55 >= v32 || *v55 != 125)
              {
                int v60 = 16;
                int v96 = -58;
LABEL_193:
                int v145 = v96;
                goto LABEL_157;
              }
              int v88 = 0;
              int v89 = 0;
              uint64_t v90 = 0;
              unsigned int v91 = 0;
              int v92 = 0;
LABEL_231:
              unsigned int v170 = v55 + 1;
            }
            else
            {
              int v88 = 0;
              int v89 = 0;
              uint64_t v90 = 0;
              unsigned int v91 = 0;
              int v92 = 0;
            }
            if (v53 == 42)
            {
              uint64_t v94 = v45;
              if (!_pcre2_strcmp_c8_8((unsigned __int8 *)v172, "MARK"))
              {
                mark_8 = (unsigned __int8 *)pcre2_get_mark_8(v152);
                if (mark_8)
                {
                  size_t v98 = -1;
                  uint64_t v45 = v94;
                  while (mark_8[++v98])
                    ;
                  if (v94 || v165 >= v98)
                  {
                    if (v94)
                    {
                      v26 += v98;
                    }
                    else
                    {
                      cstdlib_memcpy(&v149[v160], mark_8, v98);
                      uint64_t v45 = 0;
                      v160 += v98;
                      v165 -= v98;
                    }
                  }
                  else
                  {
                    if (v154)
                    {
                      uint64_t v45 = 0;
                      int v60 = 3;
                      goto LABEL_157;
                    }
                    unint64_t v26 = v98 - v165;
                    uint64_t v45 = 1;
                  }
                }
                else
                {
                  uint64_t v45 = v94;
                }
                goto LABEL_287;
              }
              int v60 = 11;
            }
            else
            {
              int v130 = v92;
              unsigned int v132 = v91;
              int v93 = v88;
              unsigned int v134 = v90;
              unsigned int v136 = v89;
              uint64_t v94 = v45;
              if ((v54 & 0x80000000) == 0) {
                goto LABEL_233;
              }
              uint64_t v166 = 0;
              unsigned int v167 = 0;
              unsigned int v95 = pcre2_substring_nametable_scan_8(a1, (unsigned __int8 *)v172, &v167, (unsigned __int8 **)&v166);
              if ((a5 & 0x800) != 0 && v95 == -49)
              {
                signed int v54 = *(unsigned __int16 *)(a1 + 128) + 1;
                goto LABEL_233;
              }
              if ((v95 & 0x80000000) == 0)
              {
                if (v167 <= v166)
                {
                  unint64_t v100 = v167;
                  do
                  {
                    unsigned int v101 = __rev16(*v100);
                    if (v101 < ovector_count_8)
                    {
                      if (v54 < 0) {
                        signed int v54 = v101;
                      }
                      if (ovector_pointer_8[2 * v101] != -1)
                      {
                        signed int v54 = v101;
                        goto LABEL_233;
                      }
                    }
                    unint64_t v100 = (unsigned __int16 *)((char *)v100 + v95);
                  }
                  while (v100 <= v166);
                  if ((v54 & 0x80000000) == 0) {
                    goto LABEL_233;
                  }
                }
                signed int v54 = __rev16(*v167);
LABEL_233:
                int v102 = pcre2_substring_length_bynumber_8(v152, v54, &v168);
                uint64_t v45 = v94;
                int v145 = v102;
                if (v102 < 0)
                {
                  int v104 = v102;
                  if (v102 == -49) {
                    int v104 = v140;
                  }
                  int v145 = v104;
                  if (v104 != -55)
                  {
                    int v60 = 16;
                    goto LABEL_157;
                  }
                  int v145 = -55;
                  if (!v93)
                  {
                    int v60 = v139;
                    goto LABEL_157;
                  }
                }
                if (v93)
                {
                  if (v93 != 45 || (int v130 = v134, v132 = v136, v145))
                  {
                    if (v46 > 0x13) {
                      goto LABEL_156;
                    }
                    *(void *)&v173[v46 / 2] = v170;
                    *((void *)&v173[v46 / 2] + 1) = v32;
                    v46 += 2;
                    int64_t v103 = v132;
                    if (v145)
                    {
                      unint64_t v32 = (unint64_t)v130;
                    }
                    else
                    {
                      int64_t v103 = v136;
                      unint64_t v32 = (unint64_t)v134;
                    }
                    unsigned int v170 = v103;
                    int v60 = 9;
LABEL_157:
                    int v31 = 0;
LABEL_158:
                    if (v60 != 9)
                    {
                      uint64_t v20 = (void *)v152;
                      LODWORD(v27) = v45;
                      switch(v60)
                      {
                        case 2:
                          int v25 = v145;
                          goto LABEL_315;
                        case 3:
                          goto LABEL_316;
                        case 4:
                          goto LABEL_306;
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                          return 4294967248;
                        case 11:
                          int v129 = -35;
                          goto LABEL_328;
                        default:
                          int v129 = v145;
                          if (v60 == 16) {
                            goto LABEL_328;
                          }
                          if (v60 != 28) {
                            return 4294967248;
                          }
                          int v129 = -57;
LABEL_328:
                          unint64_t *v141 = v170 - v143;
                          unsigned int v151 = v129;
                          break;
                      }
                      goto LABEL_316;
                    }
                    goto LABEL_159;
                  }
                }
                uint64_t v105 = ovector_pointer_8[2 * v54];
                uint64_t v106 = ovector_pointer_8[(2 * v54) | 1u];
                if (v105 < v106)
                {
                  int v138 = &a2[v106];
                  int v107 = &a2[v105];
                  do
                  {
                    unsigned int v108 = *v107;
                    unsigned int v169 = v108;
                    if (v23 && v108 >= 0xC0)
                    {
                      if ((v108 & 0x20) != 0)
                      {
                        int v119 = v107[1] & 0x3F;
                        if ((v108 & 0x10) != 0)
                        {
                          if ((v108 & 8) != 0)
                          {
                            int v120 = v107[2] & 0x3F;
                            int v121 = v107[3] & 0x3F;
                            int v122 = v107[4] & 0x3F;
                            if ((v108 & 4) != 0)
                            {
                              unsigned int v108 = ((v108 & 1) << 30) | (v119 << 24) | (v120 << 18) | (v121 << 12) | (v122 << 6) | v107[5] & 0x3F;
                              unsigned int v169 = v108;
                              v107 += 6;
                            }
                            else
                            {
                              v107 += 5;
                              unsigned int v108 = ((v108 & 3) << 24) | (v119 << 18) | (v120 << 12) | (v121 << 6) | v122;
                              unsigned int v169 = v108;
                            }
                          }
                          else
                          {
                            unsigned int v108 = ((v108 & 7) << 18) | (v119 << 12) | ((v107[2] & 0x3F) << 6) | v107[3] & 0x3F;
                            unsigned int v169 = v108;
                            v107 += 4;
                          }
                        }
                        else
                        {
                          unsigned int v108 = ((v108 & 0xF) << 12) | (v119 << 6) | v107[2] & 0x3F;
                          unsigned int v169 = v108;
                          v107 += 3;
                        }
                      }
                      else
                      {
                        unsigned __int8 v109 = v107[1];
                        v107 += 2;
                        unsigned int v169 = v109 & 0x3F | ((v108 & 0x1F) << 6);
                        unsigned int v108 = v169;
                      }
                    }
                    else
                    {
                      ++v107;
                    }
                    if (v29)
                    {
                      if (v23)
                      {
                        uint64_t v110 = _pcre2_ucd_stage2_8[v108 & 0x7F | (_pcre2_ucd_stage1_8[v108 >> 7] << 7)];
                        uint64_t v111 = BYTE1(_pcre2_ucd_records_8[2 * v110]);
                        if (_pcre2_ucp_gentype_8[v111] == 1)
                        {
                          int v112 = v29 <= 0 ? 5 : 9;
                          if (v112 != v111)
                          {
                            v108 += _pcre2_ucd_records_8[2 * v110 + 1];
                            unsigned int v169 = v108;
                          }
                        }
                        int v29 = v162;
LABEL_264:
                        uint64_t v113 = v45;
                        unsigned int v114 = _pcre2_ord2utf_8(v108, (uint64_t)__src);
                        uint64_t v45 = v113;
                        goto LABEL_271;
                      }
                      uint64_t v115 = *(void *)(a1 + 24);
                      uint64_t v116 = 128;
                      if (v29 > 0) {
                        uint64_t v116 = 96;
                      }
                      if (((*(unsigned __int8 *)(v115 + v116 + ((unint64_t)v108 >> 3) + 512) >> (v108 & 7)) & 1) == 0)
                      {
                        LOBYTE(v108) = *(unsigned char *)(v115 + v108 + 256);
                        unsigned int v169 = v108;
                      }
                      int v29 = v162;
                    }
                    else if (v23)
                    {
                      goto LABEL_264;
                    }
                    __src[0] = v108;
                    unsigned int v114 = 1;
LABEL_271:
                    uint64_t v117 = v114;
                    if (v45)
                    {
                      v26 += v114;
                    }
                    else
                    {
                      unint64_t v118 = v165 - v114;
                      if (v165 >= v114)
                      {
                        cstdlib_memcpy(&v149[v160], __src, v114);
                        uint64_t v45 = 0;
                        v160 += v117;
                        unint64_t v165 = v118;
                      }
                      else
                      {
                        if (v154)
                        {
                          uint64_t v45 = 0;
                          int v60 = 3;
                          a2 = v159;
                          goto LABEL_157;
                        }
                        unint64_t v26 = v114 - v165;
                        uint64_t v45 = 1;
                      }
                      a2 = v159;
                    }
                  }
                  while (v107 < v138);
                }
LABEL_287:
                int v31 = 0;
                goto LABEL_159;
              }
              int v145 = v95;
              int v60 = 16;
            }
            uint64_t v45 = v94;
            goto LABEL_157;
          }
          unsigned int v58 = v53;
        }
        uint64_t v79 = *(void *)(a1 + 24) + 832;
        if ((*(unsigned char *)(v79 + v58) & 0x10) == 0) {
          goto LABEL_156;
        }
        uint64_t v80 = 0;
        unsigned int v81 = v51 + 1;
        do
        {
          uint64_t v82 = v80;
          *((unsigned char *)v172 + v80) = v58;
          if (v80 == 32) {
            goto LABEL_156;
          }
          unsigned int v83 = &v81[v80];
          unsigned int v170 = &v81[v82];
          if ((unint64_t)&v81[v82] >= v32) {
            goto LABEL_165;
          }
          unsigned int v58 = *v83;
          char v84 = *(unsigned char *)(v79 + *v83);
          uint64_t v80 = v82 + 1;
        }
        while ((v84 & 0x10) != 0);
        if (v82 == -1)
        {
LABEL_156:
          int v60 = 11;
          goto LABEL_157;
        }
LABEL_165:
        *((unsigned char *)v172 + v82 + 1) = 0;
        uint64_t v55 = &v51[v82 + 1];
        signed int v54 = -1;
        goto LABEL_171;
      }
      if ((a5 & 0x200) == 0 || v48 != 92) {
        goto LABEL_101;
      }
      v172[0] = 0;
      if ((unint64_t)v47 < v32 - 1)
      {
        unsigned int v59 = v47[1];
        if (v59 > 0x6B)
        {
          if (v59 == 108)
          {
            int v162 = 0;
            int v31 = 0;
            unsigned int v170 = v47 + 2;
            int v60 = 9;
            int v29 = -1;
            goto LABEL_158;
          }
          if (v59 == 117)
          {
            int v162 = 0;
            int v31 = 0;
            unsigned int v170 = v47 + 2;
            int v60 = 9;
            int v29 = 1;
            goto LABEL_158;
          }
        }
        else
        {
          if (v59 == 76)
          {
            int v31 = 0;
            unsigned int v170 = v47 + 2;
            int v60 = 9;
            int v29 = -1;
            int v61 = -1;
            goto LABEL_152;
          }
          if (v59 == 85)
          {
            int v31 = 0;
            unsigned int v170 = v47 + 2;
            int v60 = 9;
            int v29 = 1;
            int v61 = 1;
LABEL_152:
            int v162 = v61;
            goto LABEL_158;
          }
        }
      }
      uint64_t v68 = v45;
      unsigned int v170 = v47 + 1;
      int v69 = _pcre2_check_escape_8(&v170, v32, (int *)&v169, v172, *(_DWORD *)(a1 + 88), 0, 0);
      int v145 = v69;
      if (v172[0])
      {
        int v31 = 0;
        int v60 = 28;
      }
      else
      {
        if (!v69)
        {
          int v145 = 0;
          uint64_t v45 = v68;
          if (v29) {
            goto LABEL_128;
          }
          goto LABEL_106;
        }
        if (v69 != 25)
        {
          uint64_t v45 = v68;
          if (v69 == 26)
          {
            int v60 = 9;
            int v31 = 1;
            int v145 = 26;
          }
          else
          {
            int v31 = 0;
            int v60 = 28;
          }
          goto LABEL_158;
        }
        int v29 = 0;
        int v162 = 0;
        int v31 = 0;
        int v60 = 9;
      }
      uint64_t v45 = v68;
      goto LABEL_158;
    }
    int v39 = -65;
    if (v153 != v150) {
      goto LABEL_303;
    }
    unint64_t v41 = a4;
    int v30 = -2147483640;
    uint64_t v153 = v150;
    if (v158 == a4) {
      goto LABEL_303;
    }
LABEL_298:
    uint64_t v158 = a4;
    a4 = v41;
    uint64_t v20 = (void *)v152;
    unsigned int v33 = v148;
    if ((a5 & 0x100) == 0) {
      goto LABEL_306;
    }
  }
  if (matched != -1)
  {
    int v39 = matched;
    goto LABEL_303;
  }
  if (v155 && a4 < v163)
  {
    unint64_t v41 = a4 + 1;
    if (a2[a4] == 13 && *(unsigned __int16 *)(a1 + 122) - 3 <= 0xFFFFFFFD && v41 < v163 && a2[v41] == 10)
    {
      unint64_t v41 = a4 + 2;
      int v42 = v27;
    }
    else
    {
      int v42 = v27;
      if ((*(unsigned char *)(a1 + 90) & 8) != 0 && v41 < v163)
      {
        while ((a2[v41] & 0xC0) == 0x80)
        {
          if (v163 == ++v41)
          {
            unint64_t v41 = v163;
            break;
          }
        }
      }
    }
    size_t v43 = v41 - a4;
    if (v42 || v165 >= v43)
    {
      if (v42)
      {
        int v30 = 0;
        v26 += v43;
      }
      else
      {
        cstdlib_memcpy(&v149[v160], &a2[a4], v43);
        int v30 = 0;
        uint64_t v27 = 0;
        v160 += v43;
        v165 -= v43;
      }
    }
    else
    {
      if (v154) {
        goto LABEL_300;
      }
      int v30 = 0;
      unint64_t v26 = v43 - v165;
      uint64_t v27 = 1;
    }
    a4 = v158;
    goto LABEL_298;
  }
LABEL_306:
  unint64_t v124 = v163 - a4;
  if (!v27)
  {
    unint64_t v125 = v124 - v165;
    if (v124 > v165)
    {
      unint64_t v126 = v142;
      if (v154)
      {
LABEL_314:
        int v25 = -48;
        goto LABEL_315;
      }
LABEL_312:
      int v127 = v141;
      __src[0] = 0;
      uint64_t v128 = v125 + 1;
LABEL_313:
      unint64_t *v127 = v128 + v126;
      goto LABEL_314;
    }
  }
  unint64_t v126 = v142;
  if (v27)
  {
    unint64_t v125 = v124 + v26;
    goto LABEL_312;
  }
  cstdlib_memcpy(&v149[v160], &a2[a4], v163 - a4);
  __src[0] = 0;
  int v127 = v141;
  if (v124 == v165)
  {
    if (v154) {
      goto LABEL_314;
    }
    uint64_t v128 = 1;
    goto LABEL_313;
  }
  cstdlib_memcpy(&v149[v124 + v160], __src, 1uLL);
  unint64_t *v141 = v124 + v160;
  int v25 = v147;
LABEL_315:
  unsigned int v151 = v25;
LABEL_316:
  if (v146)
  {
    uint64_t result = v151;
    *((_DWORD *)v20 + 19) = v151;
  }
  else
  {
    pcre2_match_data_free_8((uint64_t)v20);
    return v151;
  }
  return result;
}

uint64_t find_text_end(uint64_t a1, unsigned __int8 **a2, unint64_t a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v24 = v5;
  if ((unint64_t)v5 < a3)
  {
    BOOL v9 = 0;
    int v10 = 0;
    unint64_t v11 = a3 - 1;
    while (1)
    {
      int v12 = *v5;
      if (v9) {
        break;
      }
      if (v12 != 125)
      {
        if (!a4 && v12 == 58 && v10 == 0)
        {
LABEL_42:
          uint64_t result = 0;
          goto LABEL_41;
        }
        if (v12 != 92)
        {
          if (v12 == 36 && (unint64_t)v5 < v11)
          {
            BOOL v9 = 0;
            if (v5[1] == 123)
            {
              ++v5;
              ++v10;
            }
          }
          else
          {
            BOOL v9 = 0;
          }
          goto LABEL_39;
        }
        uint64_t v23 = 0;
        if ((unint64_t)v5 < v11)
        {
          unsigned int v17 = v5[1] - 76;
          BOOL v18 = v17 > 0x29;
          uint64_t v19 = (1 << v17) & 0x20100000201;
          if (!v18 && v19 != 0)
          {
            BOOL v9 = 0;
            ++v5;
            goto LABEL_39;
          }
        }
        uint64_t v24 = v5 + 1;
        int v21 = _pcre2_check_escape_8(&v24, a3, (int *)&v23, (int *)&v23 + 1, *(_DWORD *)(a1 + 88), 0, 0);
        uint64_t v5 = v24 - 1;
        uint64_t result = HIDWORD(v23);
        if (HIDWORD(v23)) {
          goto LABEL_41;
        }
        BOOL v9 = 0;
        if (!v21 || v21 == 25) {
          goto LABEL_39;
        }
        if (v21 != 26)
        {
          uint64_t result = 4294967239;
          goto LABEL_41;
        }
        goto LABEL_9;
      }
      if (!v10) {
        goto LABEL_42;
      }
      BOOL v9 = 0;
      --v10;
LABEL_39:
      uint64_t v24 = ++v5;
      if ((unint64_t)v5 >= a3) {
        goto LABEL_40;
      }
    }
    if (v12 == 92 && (unint64_t)v5 < v11)
    {
      int v14 = v5[1];
      BOOL v15 = v14 == 69;
      BOOL v9 = v14 != 69;
      if (v15) {
        ++v5;
      }
      goto LABEL_39;
    }
LABEL_9:
    BOOL v9 = 1;
    goto LABEL_39;
  }
LABEL_40:
  uint64_t result = 4294967238;
LABEL_41:
  *a2 = v5;
  return result;
}

uint64_t pcre2_substring_copy_byname_8(uint64_t a1, unsigned __int8 *a2, void *a3, size_t *a4)
{
  if (*(_WORD *)(a1 + 72) == 1) {
    return 4294967255;
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t result = pcre2_substring_nametable_scan_8(*(void *)(a1 + 24), a2, &v12, (unsigned __int8 **)&v11);
  if ((result & 0x80000000) == 0)
  {
    int v8 = (unsigned __int16 *)v12;
    if (v12 > (unint64_t)v11) {
      return 4294967242;
    }
    uint64_t v9 = result;
    uint64_t result = 4294967242;
    do
    {
      unsigned int v10 = __rev16(*v8);
      if (v10 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(void *)(a1 + 16 * v10 + 80) != -1) {
          return pcre2_substring_copy_bynumber_8(a1, v10, a3, a4);
        }
        uint64_t result = 4294967241;
      }
      int v8 = (unsigned __int16 *)((char *)v8 + v9);
    }
    while (v8 <= v11);
  }
  return result;
}

uint64_t pcre2_substring_nametable_scan_8(uint64_t a1, unsigned __int8 *a2, void *a3, unsigned __int8 **a4)
{
  unsigned __int16 v6 = 0;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 134);
  uint64_t v8 = *(unsigned __int16 *)(a1 + 132);
  uint64_t v28 = a1 + 136;
  uint64_t v9 = a1 - v8 + 138;
  int v25 = *(unsigned __int16 *)(a1 + 132);
  while (1)
  {
    if ((unsigned __int16)v7 <= v6) {
      return 4294967247;
    }
    unsigned int v29 = v7;
    unsigned int v10 = ((unsigned __int16)v7 + v6) >> 1;
    uint64_t v11 = v10 * v8;
    unint64_t v12 = (unsigned __int8 *)(a1 + (v11 + 136));
    int v13 = _pcre2_strcmp_8(a2, v12 + 2);
    if (!v13) {
      break;
    }
    if (v13 > 0) {
      unsigned __int16 v6 = v10 + 1;
    }
    unsigned int v7 = v29;
    if (v13 <= 0) {
      unsigned int v7 = v10;
    }
  }
  uint64_t v14 = 0;
  unint64_t v15 = v28 + (*(unsigned __int16 *)(a1 + 134) - 1) * (uint64_t)v25;
  do
  {
    uint64_t v16 = v11;
    uint64_t v17 = v14;
    if (v11 + 136 < 137) {
      break;
    }
    int v18 = _pcre2_strcmp_8(a2, (unsigned __int8 *)(v9 + v11));
    v11 -= v8;
    uint64_t v14 = v17 + v8;
  }
  while (!v18);
  uint64_t v27 = v28 + v16;
  uint64_t v19 = v12;
  do
  {
    uint64_t v20 = v19;
    uint64_t v21 = v17;
    if ((unint64_t)v19 >= v15) {
      break;
    }
    v19 += v8;
    v17 += v8;
  }
  while (!_pcre2_strcmp_8(a2, &v20[v8 + 2]));
  if (a3)
  {
    *a3 = v27;
    *a4 = v20;
    return v8;
  }
  else if (v21)
  {
    return 4294967246;
  }
  else
  {
    return __rev16(*(unsigned __int16 *)v12);
  }
}

uint64_t pcre2_substring_copy_bynumber_8(uint64_t a1, unsigned int a2, void *a3, size_t *a4)
{
  size_t __n = 0;
  uint64_t result = pcre2_substring_length_bynumber_8(a1, a2, &__n);
  if ((result & 0x80000000) == 0)
  {
    if (__n + 1 <= *a4)
    {
      cstdlib_memcpy(a3, (const void *)(*(void *)(a1 + 32) + *(void *)(a1 + 16 * a2 + 80)), __n);
      uint64_t result = 0;
      size_t v9 = __n;
      *((unsigned char *)a3 + __n) = 0;
      *a4 = v9;
    }
    else
    {
      return 4294967248;
    }
  }
  return result;
}

uint64_t pcre2_substring_length_bynumber_8(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 76);
  if (result == -2)
  {
    if (a2) {
      return 4294967294;
    }
    LODWORD(result) = 0;
  }
  else if ((result & 0x80000000) != 0)
  {
    return result;
  }
  if (*(_WORD *)(a1 + 72) == 1)
  {
    if (*(unsigned __int16 *)(a1 + 74) > a2)
    {
      if ((int)result - 1 < a2) {
        return 4294967241;
      }
      goto LABEL_15;
    }
    return 4294967242;
  }
  if (*(unsigned __int16 *)(*(void *)(a1 + 24) + 128) < a2) {
    return 4294967247;
  }
  if (*(unsigned __int16 *)(a1 + 74) <= a2) {
    return 4294967242;
  }
  if (*(void *)(a1 + 16 * a2 + 80) == -1) {
    return 4294967241;
  }
LABEL_15:
  uint64_t result = 0;
  if (a3)
  {
    uint64_t v5 = a1 + 80;
    unint64_t v6 = *(void *)(v5 + 8 * ((2 * a2) | 1));
    unint64_t v7 = *(void *)(v5 + 16 * a2);
    BOOL v8 = v6 >= v7;
    unint64_t v9 = v6 - v7;
    if (!v8) {
      unint64_t v9 = 0;
    }
    *a3 = v9;
  }
  return result;
}

uint64_t pcre2_substring_get_byname_8(uint64_t a1, unsigned __int8 *a2, void *a3, size_t *a4)
{
  if (*(_WORD *)(a1 + 72) == 1) {
    return 4294967255;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t result = pcre2_substring_nametable_scan_8(*(void *)(a1 + 24), a2, &v12, (unsigned __int8 **)&v11);
  if ((result & 0x80000000) == 0)
  {
    BOOL v8 = (unsigned __int16 *)v12;
    if (v12 > (unint64_t)v11) {
      return 4294967242;
    }
    uint64_t v9 = result;
    uint64_t result = 4294967242;
    do
    {
      unsigned int v10 = __rev16(*v8);
      if (v10 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(void *)(a1 + 16 * v10 + 80) != -1) {
          return pcre2_substring_get_bynumber_8(a1, v10, a3, a4);
        }
        uint64_t result = 4294967241;
      }
      BOOL v8 = (unsigned __int16 *)((char *)v8 + v9);
    }
    while (v8 <= v11);
  }
  return result;
}

uint64_t pcre2_substring_get_bynumber_8(uint64_t a1, unsigned int a2, void *a3, size_t *a4)
{
  size_t __n = 0;
  uint64_t result = pcre2_substring_length_bynumber_8(a1, a2, &__n);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v9 = _pcre2_memctl_malloc_8(8 * __n + 32, (long long *)a1);
    if (v9)
    {
      unsigned int v10 = v9 + 3;
      cstdlib_memcpy(v9 + 3, (const void *)(*(void *)(a1 + 32) + *(void *)(a1 + 16 * a2 + 80)), __n);
      uint64_t result = 0;
      *((unsigned char *)v10 + __n) = 0;
      *a3 = v10;
      *a4 = __n;
    }
    else
    {
      return 4294967248;
    }
  }
  return result;
}

uint64_t pcre2_substring_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result - 16))(result - 24, *(void *)(result - 8));
  }
  return result;
}

uint64_t pcre2_substring_length_byname_8(uint64_t a1, unsigned __int8 *a2, unint64_t *a3)
{
  if (*(_WORD *)(a1 + 72) == 1) {
    return 4294967255;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t result = pcre2_substring_nametable_scan_8(*(void *)(a1 + 24), a2, &v10, (unsigned __int8 **)&v9);
  if ((result & 0x80000000) == 0)
  {
    unint64_t v6 = (unsigned __int16 *)v10;
    if (v10 > (unint64_t)v9) {
      return 4294967242;
    }
    uint64_t v7 = result;
    uint64_t result = 4294967242;
    do
    {
      unsigned int v8 = __rev16(*v6);
      if (v8 < *(unsigned __int16 *)(a1 + 74))
      {
        if (*(void *)(a1 + 16 * v8 + 80) != -1) {
          return pcre2_substring_length_bynumber_8(a1, v8, a3);
        }
        uint64_t result = 4294967241;
      }
      unint64_t v6 = (unsigned __int16 *)((char *)v6 + v7);
    }
    while (v6 <= v9);
  }
  return result;
}

uint64_t pcre2_substring_list_get_8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 76);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (v3)
  {
    uint64_t v7 = a1 + 80;
    BOOL v8 = a3 == 0;
    uint64_t v9 = 8 * v3;
    if (a3) {
      size_t v10 = 8 * v3 + 32;
    }
    else {
      size_t v10 = 32;
    }
LABEL_11:
    unint64_t v12 = 0;
    unint64_t v13 = (2 * v3);
    do
    {
      unint64_t v14 = *(void *)(a1 + 8 * v12 + 80);
      unint64_t v15 = *(void *)(a1 + 8 * v12 + 88);
      BOOL v26 = v15 >= v14;
      unint64_t v16 = v15 - v14;
      if (!v26) {
        unint64_t v16 = 0;
      }
      v10 += v16 + 9;
      v12 += 2;
    }
    while (v12 < v13);
    char v17 = 0;
    goto LABEL_16;
  }
  uint64_t v11 = *(unsigned __int16 *)(a1 + 74);
  uint64_t v7 = a1 + 80;
  BOOL v8 = a3 == 0;
  uint64_t v9 = 8 * v11;
  if (a3) {
    size_t v10 = 8 * v11 + 32;
  }
  else {
    size_t v10 = 32;
  }
  if (*(_WORD *)(a1 + 74))
  {
    LODWORD(v3) = *(unsigned __int16 *)(a1 + 74);
    goto LABEL_11;
  }
  unint64_t v13 = 0;
  LODWORD(v3) = 0;
  char v17 = 1;
LABEL_16:
  int v18 = _pcre2_memctl_malloc_8(v10, (long long *)a1);
  if (v18)
  {
    uint64_t v19 = v18 + 3;
    *a2 = v18 + 3;
    int v20 = v3 + 1;
    uint64_t v21 = (char *)&v18[(int)v3 + 4];
    if (v8)
    {
      unint64_t v22 = 0;
      if (v17) {
        goto LABEL_32;
      }
    }
    else
    {
      *a3 = v21;
      unint64_t v22 = &v18[v20 + 3];
      v21 += v9;
      if (v17)
      {
LABEL_32:
        uint64_t v3 = 0;
        *uint64_t v19 = 0;
        return v3;
      }
    }
    unint64_t v23 = 0;
    do
    {
      unint64_t v24 = *(void *)(v7 + 8 * v23);
      unint64_t v25 = *(void *)(v7 + 8 * v23 + 8);
      BOOL v26 = v25 >= v24;
      size_t v27 = v25 - v24;
      if (v26) {
        size_t v28 = v27;
      }
      else {
        size_t v28 = 0;
      }
      if (v27 != 0 && v26) {
        cstdlib_memcpy(v21, (const void *)(*(void *)(a1 + 32) + v24), v28);
      }
      *v19++ = v21;
      if (v22) {
        *v22++ = v28;
      }
      unsigned int v29 = &v21[v28];
      *unsigned int v29 = 0;
      uint64_t v21 = v29 + 1;
      v23 += 2;
    }
    while (v23 < v13);
    goto LABEL_32;
  }
  return 4294967248;
}

uint64_t pcre2_substring_list_free_8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result - 16))(result - 24, *(void *)(result - 8));
  }
  return result;
}

uint64_t pcre2_substring_number_from_name_8(uint64_t a1, unsigned __int8 *a2)
{
  return pcre2_substring_nametable_scan_8(a1, a2, 0, 0);
}

uint64_t _pcre2_valid_utf_8(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  for (unsigned int i = a1; ; ++i)
  {
    unint64_t v4 = a2 - 1;
    if ((char)*i < 0) {
      break;
    }
    --a2;
LABEL_15:
    if (!a2) {
      return 0;
    }
  }
  unsigned int v5 = *i;
  if (v5 <= 0xBF)
  {
    *a3 = i - a1;
    return 4294967274;
  }
  else if (v5 >= 0xFE)
  {
    *a3 = i - a1;
    return 4294967273;
  }
  else
  {
    unint64_t v6 = _pcre2_utf8_table4[*i & 0x3F];
    a2 = v4 - v6;
    if (v4 < v6 && (*a3 = i - a1, unint64_t v7 = ~v4 + v6, v7 < 5))
    {
      return (-3 - v7);
    }
    else
    {
      int v9 = i + 1;
      unsigned int v8 = i[1];
      if ((v8 & 0xC0) == 0x80)
      {
        switch((int)v6)
        {
          case 1:
            if ((v5 & 0x3E) != 0) {
              goto LABEL_14;
            }
            *a3 = v9 + ~a1;
            uint64_t v16 = 4294967279;
            break;
          case 2:
            char v10 = i[2];
            i += 2;
            if ((v10 & 0xC0) != 0x80)
            {
              int v15 = i - a1;
              goto LABEL_54;
            }
            if (v5 == 224 && (v8 & 0x20) == 0)
            {
              *a3 = (int)i - (int)a1 - 2;
              uint64_t v16 = 4294967278;
            }
            else
            {
              if (v5 != 237 || v8 < 0xA0) {
                goto LABEL_15;
              }
              *a3 = (int)i - (int)a1 - 2;
              uint64_t v16 = 4294967280;
            }
            break;
          case 3:
            if ((i[2] & 0xC0) != 0x80)
            {
              int v17 = i - a1;
              goto LABEL_56;
            }
            char v11 = i[3];
            i += 3;
            if ((v11 & 0xC0) != 0x80)
            {
              int v18 = i - a1;
              goto LABEL_61;
            }
            if (v5 == 240 && (v8 & 0x30) == 0)
            {
              *a3 = (int)i - (int)a1 - 3;
              uint64_t v16 = 4294967277;
            }
            else
            {
              if (v5 <= 0xF4 && (v5 != 244 || v8 < 0x90)) {
                goto LABEL_15;
              }
              *a3 = (int)i - (int)a1 - 3;
              uint64_t v16 = 4294967281;
            }
            break;
          case 4:
            int v13 = i + 2;
            if ((i[2] & 0xC0) != 0x80) {
              goto LABEL_50;
            }
            int v14 = i + 3;
            if ((i[3] & 0xC0) != 0x80) {
              goto LABEL_60;
            }
            int v9 = i + 4;
            if ((i[4] & 0xC0) != 0x80)
            {
              int v19 = v9 - a1;
              goto LABEL_64;
            }
            uint64_t v16 = 4294967283;
            if (v5 != 248 || (v8 & 0x38) != 0) {
              goto LABEL_52;
            }
            *a3 = v9 - (int)a1 - 4;
            uint64_t v16 = 4294967276;
            break;
          case 5:
            int v13 = i + 2;
            if ((i[2] & 0xC0) == 0x80)
            {
              int v14 = i + 3;
              if ((i[3] & 0xC0) == 0x80)
              {
                if ((i[4] & 0xC0) == 0x80)
                {
                  int v9 = i + 5;
                  if ((i[5] & 0xC0) == 0x80)
                  {
                    uint64_t v16 = 4294967282;
                    if (v5 != 252 || (v8 & 0x3C) != 0) {
                      goto LABEL_52;
                    }
                    *a3 = v9 - (int)a1 - 5;
                    uint64_t v16 = 4294967275;
                  }
                  else
                  {
                    *a3 = (int)i - (int)a1;
                    uint64_t v16 = 4294967284;
                  }
                }
                else
                {
                  int v19 = i + 4 - a1;
LABEL_64:
                  *a3 = v19 - 4;
                  uint64_t v16 = 4294967285;
                }
              }
              else
              {
LABEL_60:
                int v18 = v14 - a1;
LABEL_61:
                *a3 = v18 - 3;
                uint64_t v16 = 4294967286;
              }
            }
            else
            {
LABEL_50:
              int v15 = v13 - a1;
LABEL_54:
              int v17 = v15 - 2;
LABEL_56:
              *a3 = v17;
              uint64_t v16 = 4294967287;
            }
            break;
          default:
            if (v6 < 4)
            {
LABEL_14:
              ++i;
              goto LABEL_15;
            }
            uint64_t v16 = 4294967282;
LABEL_52:
            *a3 = (v9 - a1 - v6);
            break;
        }
      }
      else
      {
        *a3 = v9 + ~a1;
        return 4294967288;
      }
    }
  }
  return v16;
}

BOOL _pcre2_xclass_8(int a1, unsigned char *a2)
{
  if (a1 <= 0xFF)
  {
    if ((*a2 & 4) == 0)
    {
      uint64_t v2 = *a2 & 1;
      if ((*a2 & 2) != 0) {
        return (a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7)) & 1;
      }
      return v2;
    }
    if (*a2 & 2) != 0 && ((a2[((unint64_t)a1 >> 3) + 1] >> (a1 & 7))) {
      return !(*a2 & 1);
    }
  }
  if ((*a2 & 2) != 0) {
    uint64_t v3 = a2 + 33;
  }
  else {
    uint64_t v3 = a2 + 1;
  }
  int v4 = a1 + 127;
  if (a1 >= 0) {
    int v4 = a1;
  }
  uint64_t v5 = (uint64_t)v4 >> 7;
  unsigned int v6 = a1 - (v4 & 0xFFFFFF80);
  unsigned int v7 = a1 - 8232;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v8 = *v3;
        if (v8 != 1) {
          break;
        }
        char v10 = v3 + 2;
        unsigned int v11 = v3[1];
        if (v11 >= 0xC0)
        {
          if ((v11 & 0x20) != 0)
          {
            int v14 = *v10 & 0x3F;
            if ((v11 & 0x10) != 0)
            {
              if ((v11 & 8) != 0)
              {
                int v31 = v3[3] & 0x3F;
                int v32 = v3[4] & 0x3F;
                int v33 = v3[5] & 0x3F;
                if ((v11 & 4) != 0)
                {
                  unsigned int v11 = ((v11 & 1) << 30) | (v14 << 24) | (v31 << 18) | (v32 << 12) | (v33 << 6) | v3[6] & 0x3F;
                  char v10 = v3 + 7;
                }
                else
                {
                  unsigned int v11 = ((v11 & 3) << 24) | (v14 << 18) | (v31 << 12) | (v32 << 6) | v33;
                  char v10 = v3 + 6;
                }
              }
              else
              {
                unsigned int v11 = ((v11 & 7) << 18) | (v14 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
                char v10 = v3 + 5;
              }
            }
            else
            {
              unsigned int v11 = ((v11 & 0xF) << 12) | (v14 << 6) | v3[3] & 0x3F;
              char v10 = v3 + 4;
            }
          }
          else
          {
            char v10 = v3 + 3;
            unsigned int v11 = v3[2] & 0x3F | ((v11 & 0x1F) << 6);
          }
        }
        uint64_t v3 = v10;
        if (v11 == a1) {
          return !(*a2 & 1);
        }
      }
      if (v8 != 2) {
        break;
      }
      unint64_t v12 = v3 + 2;
      unsigned int v13 = v3[1];
      if (v13 >= 0xC0)
      {
        if ((v13 & 0x20) != 0)
        {
          int v15 = *v12 & 0x3F;
          if ((v13 & 0x10) != 0)
          {
            if ((v13 & 8) != 0)
            {
              int v34 = v3[3] & 0x3F;
              int v35 = v3[4] & 0x3F;
              int v36 = v3[5] & 0x3F;
              if ((v13 & 4) != 0)
              {
                unsigned int v13 = ((v13 & 1) << 30) | (v15 << 24) | (v34 << 18) | (v35 << 12) | (v36 << 6) | v3[6] & 0x3F;
                unint64_t v12 = v3 + 7;
              }
              else
              {
                unsigned int v13 = ((v13 & 3) << 24) | (v15 << 18) | (v34 << 12) | (v35 << 6) | v36;
                unint64_t v12 = v3 + 6;
              }
            }
            else
            {
              unsigned int v13 = ((v13 & 7) << 18) | (v15 << 12) | ((v3[3] & 0x3F) << 6) | v3[4] & 0x3F;
              unint64_t v12 = v3 + 5;
            }
          }
          else
          {
            unsigned int v13 = ((v13 & 0xF) << 12) | (v15 << 6) | v3[3] & 0x3F;
            unint64_t v12 = v3 + 4;
          }
        }
        else
        {
          unint64_t v12 = v3 + 3;
          unsigned int v13 = v3[2] & 0x3F | ((v13 & 0x1F) << 6);
        }
      }
      uint64_t v3 = v12 + 1;
      unsigned int v37 = *v12;
      if (v37 >= 0xC0)
      {
        if ((v37 & 0x20) != 0)
        {
          int v38 = *v3 & 0x3F;
          if ((v37 & 0x10) != 0)
          {
            if ((v37 & 8) != 0)
            {
              int v39 = v12[2] & 0x3F;
              int v40 = v12[3] & 0x3F;
              int v41 = v12[4] & 0x3F;
              if ((v37 & 4) != 0)
              {
                unsigned int v37 = ((v37 & 1) << 30) | (v38 << 24) | (v39 << 18) | (v40 << 12) | (v41 << 6) | v12[5] & 0x3F;
                uint64_t v3 = v12 + 6;
              }
              else
              {
                unsigned int v37 = ((v37 & 3) << 24) | (v38 << 18) | (v39 << 12) | (v40 << 6) | v41;
                uint64_t v3 = v12 + 5;
              }
            }
            else
            {
              unsigned int v37 = ((v37 & 7) << 18) | (v38 << 12) | ((v12[2] & 0x3F) << 6) | v12[3] & 0x3F;
              uint64_t v3 = v12 + 4;
            }
          }
          else
          {
            unsigned int v37 = ((v37 & 0xF) << 12) | (v38 << 6) | v12[2] & 0x3F;
            uint64_t v3 = v12 + 3;
          }
        }
        else
        {
          uint64_t v3 = v12 + 2;
          unsigned int v37 = v12[1] & 0x3F | ((v37 & 0x1F) << 6);
        }
      }
      if (v13 <= a1 && v37 >= a1) {
        return !(*a2 & 1);
      }
    }
    if (!*v3) {
      return *a2 & 1;
    }
    uint64_t v2 = 0;
    uint64_t v9 = _pcre2_ucd_stage2_8[v6 + (_pcre2_ucd_stage1_8[v5] << 7)];
    switch(v3[1])
    {
      case 0u:
        goto LABEL_116;
      case 1u:
        unsigned int v16 = BYTE1(_pcre2_ucd_records_8[2 * v9]);
        BOOL v17 = v16 > 9;
        int v18 = (1 << v16) & 0x320;
        if (!v17 && v18 != 0) {
          goto LABEL_116;
        }
        goto LABEL_68;
      case 2u:
        int v20 = v8 == 3;
        int v21 = v3[2];
        int v22 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])];
        goto LABEL_47;
      case 3u:
        int v20 = v8 == 3;
        BOOL v23 = v3[2] == BYTE1(_pcre2_ucd_records_8[2 * v9]);
        goto LABEL_48;
      case 4u:
        int v20 = v8 == 3;
        int v22 = v3[2];
        int v21 = LOBYTE(_pcre2_ucd_records_8[2 * v9]);
LABEL_47:
        BOOL v23 = v22 == v21;
        goto LABEL_48;
      case 5u:
        if ((v8 == 3) == ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] & 0xFFFFFFFD) == 1)) {
          return !(*a2 & 1);
        }
        goto LABEL_117;
      case 6u:
      case 7u:
        if (a1 < 0x2000)
        {
          if (a1 > 132)
          {
            if (a1 > 5759)
            {
              if (a1 == 5760 || a1 == 6158) {
                goto LABEL_116;
              }
            }
            else if (a1 == 133 || a1 == 160)
            {
              goto LABEL_116;
            }
          }
          else if (a1 <= 0x20 && ((1 << a1) & 0x100003E00) != 0)
          {
            goto LABEL_116;
          }
        }
        else if ((a1 - 0x2000) < 0xB {
               || v7 <= 0x37 && ((1 << v7) & 0x80000000000083) != 0
        }
               || a1 == 12288)
        {
LABEL_116:
          if (v8 == 3) {
            return !(*a2 & 1);
          }
          goto LABEL_117;
        }
        int v20 = v8 == 3;
        BOOL v23 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] == 6;
LABEL_48:
        int v24 = !v23;
        if (v20 != v24) {
          return !(*a2 & 1);
        }
LABEL_117:
        v3 += 3;
        break;
      case 8u:
        if ((_pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])] | 2) == 3) {
          goto LABEL_116;
        }
        BOOL v25 = v8 == 3;
        BOOL v26 = a1 == 95;
        goto LABEL_91;
      case 0xAu:
        if (a1 > 0x9F)
        {
          if (((a1 & 0xFFFFF800) == 55296) != (v8 == 3)) {
            return !(*a2 & 1);
          }
        }
        else
        {
          if ((a1 - 36) <= 0x3C && ((1 << (a1 - 36)) & 0x1000000010000001) != 0) {
            goto LABEL_116;
          }
LABEL_68:
          if (v8 != 3) {
            return !(*a2 & 1);
          }
        }
        goto LABEL_117;
      case 0xBu:
        int v27 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])];
        if (v27 == 6) {
          goto LABEL_68;
        }
        if (v27) {
          goto LABEL_116;
        }
        if (BYTE1(_pcre2_ucd_records_8[2 * v9]) == 1 && a1 != 1564 && a1 != 6158) {
          goto LABEL_90;
        }
        goto LABEL_68;
      case 0xCu:
        uint64_t v28 = BYTE1(_pcre2_ucd_records_8[2 * v9]);
        if ((v28 - 27) < 2) {
          goto LABEL_68;
        }
        if (_pcre2_ucp_gentype_8[v28]) {
          goto LABEL_116;
        }
        if (a1 == 1564 || v28 != 1) {
          goto LABEL_68;
        }
LABEL_90:
        BOOL v25 = v8 == 3;
        BOOL v26 = (a1 - 8298) < 0xFFFFFFFC;
LABEL_91:
        if (((v26 ^ v25) & 1) == 0) {
          return !(*a2 & 1);
        }
        goto LABEL_117;
      case 0xDu:
        int v29 = _pcre2_ucp_gentype_8[BYTE1(_pcre2_ucd_records_8[2 * v9])];
        if (v29 == 4) {
          goto LABEL_116;
        }
        BOOL v26 = v8 == 3;
        BOOL v25 = a1 < 0x80 && v29 == 5;
        goto LABEL_91;
      default:
        return v2;
    }
  }
}

uint64_t luattt_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2711625729;
  }
  uint64_t result = 0;
  *a2 = &ILuattt;
  return result;
}

uint64_t luattt_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = 2711625735;
  if (a5)
  {
    *a5 = safeh_GetNullHandle();
    a5[1] = v9;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if ((InitRsrcFunction(a3, a4, &v22) & 0x80000000) == 0)
    {
      char v10 = (void *)heap_Calloc(*(void **)(v22 + 8), 1, 144);
      if (v10)
      {
        unsigned int v11 = (_WORD **)v10;
        v10[2] = 0;
        unint64_t v12 = v10 + 2;
        *char v10 = a3;
        v10[1] = a4;
        v10[8] = 0;
        unsigned int v13 = v10 + 8;
        uint64_t Object = objc_GetObject(*(void *)(v22 + 48), (uint64_t)"SYNTHSTREAM", &v21);
        if ((Object & 0x80000000) == 0)
        {
          v11[9] = *(_WORD **)(v21 + 8);
          int v15 = *(void **)(v22 + 8);
          long long v19 = xmmword_22073C350;
          uint64_t v20 = 0;
          if (!vector_ObjOpen(v15, &v19, 1, v13))
          {
            unsigned int v11 = 0;
            goto LABEL_14;
          }
          int Allocator = ooc_utils_createAllocator((uint64_t)(v11 + 3), *v11, (int)v11[1]);
          uint64_t Object = LH_ERROR_to_VERROR(Allocator);
          if ((Object & 0x80000000) == 0)
          {
            unsigned int v17 = cstdlib_strlen("TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n    local info = {}\n    info.id = id\n    info.func = _G[name]\n    table.insert(TTT_script_set, 1, info)\n    return tostring(id)\nend\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n");
            uint64_t v5 = 2711626240;
            if ((luavmldoutil_initialize_lua_vm_from_buffer(*v11, (uint64_t)v11[1], (uint64_t)(v11 + 3), (uint64_t)"TTT_rewrite_process", (uint64_t)"LUATTT", v12, "TTT_script_set = {}\n\n-- Load a resource\n-- argument: the resource name\n-- return: the identifier\nfunction TTT_resource_load(name)\n    local id = 0\n    for _, info in ipairs(TTT_script_set) do\n        if id < info.id then\n            id = info.id\n        end\n    end\n    id = id + 1\n"
                    "    local info = {}\n"
                    "    info.id = id\n"
                    "    info.func = _G[name]\n"
                    "    table.insert(TTT_script_set, 1, info)\n"
                    "    return tostring(id)\n"
                    "end\n"
                    "\n"
                    "-- Unload a resource\n"
                    "-- argument: the identifier\n"
                    "-- return: the identifier or an empty string if not present\n"
                    "function TTT_resource_unload(id_str)\n"
                    "    local id = tonumber(id_str)\n"
                    "    for pos, info in ipairs(TTT_script_set) do\n"
                    "        if info.id == id then\n"
                    "            table.remove(TTT_script_set, pos)\n"
                    "            return id_str\n"
                    "        end\n"
                    "    end\n"
                    "    return \"\"\n"
                    "end\n"
                    "\n"
                    "-- Call the rewrite process of all resources\n"
                    "-- argument: input text\n"
                    "-- return: output text\n"
                    "function TTT_rewrite_process(text)\n"
                    "    local buffer = text\n"
                    "    for _, info in ipairs(TTT_script_set) do\n"
                    "        buffer = info.func(buffer)\n"
                    "    end\n"
                    "    return buffer\n"
                    "end\n",
                    v17) & 0x80000000) != 0
              || !*v12)
            {
              goto LABEL_12;
            }
LABEL_14:
            uint64_t v5 = 0;
            *a5 = (uint64_t)v11;
            *((_DWORD *)a5 + 2) = 1077;
            return v5;
          }
        }
        uint64_t v5 = Object;
LABEL_12:
        luattt_pObjClose((uint64_t)v11);
        return v5;
      }
      return 2711625738;
    }
  }
  return v5;
}

uint64_t luattt_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = luattt_UnloadAllScripts((uint64_t)a1);
    if ((result & 0x80000000) == 0)
    {
      luattt_ProcessEnd(a1, a2);
      return luattt_pObjClose((uint64_t)a1);
    }
  }
  return result;
}

uint64_t luattt_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    return luattt_UnloadAllScripts(a1);
  }
  return result;
}

uint64_t luattt_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    *a3 = &luattt_ResourceTypes_SZ_LUATTT_CONTENT_TYPES;
  }
  return result;
}

uint64_t luattt_ResourceLoad(uint64_t a1, int a2, char *a3, const char *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v7 = 2711625735;
  unsigned int v31 = 0;
  if (a3 && a7)
  {
    unsigned int v9 = a6;
    uint64_t v10 = a5;
    if (a4)
    {
      BOOL v14 = a6 != 0;
      if (!a5 && a6) {
        return v7;
      }
    }
    else
    {
      if (!a5 || !a6) {
        return v7;
      }
      BOOL v14 = 1;
    }
    uint64_t v15 = safeh_HandleCheck(a1, a2, 1077, 144);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    uint64_t v29 = 0;
    int v30 = 0;
    *(void *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v34) & 0x80000000) == 0)
    {
      uint64_t v35 = 0;
      if (a4 && *a4 && vector_GetElemAt(*(void *)(a1 + 64), 0, &v35))
      {
        unsigned int v16 = 1;
        do
        {
          unsigned int v17 = *(const char **)(v35 + 8);
          if (v17)
          {
            if (!cstdlib_strcmp(v17, a4)) {
              return 2711625752;
            }
          }
        }
        while (vector_GetElemAt(*(void *)(a1 + 64), v16++, &v35));
      }
      char v19 = !v14;
      if (!v10) {
        char v19 = 1;
      }
      if (v19)
      {
        uint64_t v20 = luattt_DataOpen(v34, a4, &v33, a3, (uint64_t)&v32, (uint64_t)&v31);
        if ((v20 & 0x80000000) != 0) {
          goto LABEL_32;
        }
        uint64_t v10 = v32;
        unsigned int v9 = v31;
      }
      else
      {
        uint64_t v32 = v10;
        unsigned int v31 = v9;
      }
      int ScriptFromBuffer = LuaVMLDO_LoadScriptFromBuffer(*(void *)(a1 + 16), v10, v9);
      uint64_t v20 = LH_ERROR_to_VERROR(ScriptFromBuffer);
      if ((v20 & 0x80000000) == 0)
      {
        int v22 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_load", (uint64_t)"TTT_script", 4u, (char *)&v29);
        uint64_t v23 = LH_ERROR_to_VERROR(v22);
        unsigned int v27 = v23;
        if ((v23 & 0x80000000) != 0)
        {
          uint64_t v7 = v23;
        }
        else
        {
          int v30 = a4;
          log_OutText(*(void *)(v34 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Loaded resource %s", v24, v25, v26, (uint64_t)&v29);
          if (vector_Add(*(void *)(a1 + 64), &v29) == 1) {
            uint64_t v7 = v27;
          }
          else {
            uint64_t v7 = 2711625738;
          }
          *(void *)a7 = v30;
          *(_DWORD *)(a7 + 8) = 1108;
        }
        goto LABEL_34;
      }
LABEL_32:
      uint64_t v7 = v20;
LABEL_34:
      if (v32)
      {
        brk_DataUnmap(*(void *)(v34 + 24), v33, v32);
        uint64_t v32 = 0;
      }
      if (v33) {
        brk_DataClose(*(void *)(v34 + 24), v33);
      }
    }
  }
  return v7;
}

uint64_t luattt_ResourceUnload(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  uint64_t v8 = 2711626765;
  if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v16) & 0x80000000) != 0) {
    return 2711625735;
  }
  uint64_t v7 = safeh_HandleCheck(a3, a4, 1108, 16);
  if ((v7 & 0x80000000) != 0) {
    return v7;
  }
  if (vector_GetElemAt(*(void *)(a1 + 64), 0, &v15))
  {
    unsigned int v9 = 0;
    while (*((void *)v15 + 1) != a3)
    {
      if (!vector_GetElemAt(*(void *)(a1 + 64), ++v9, &v15)) {
        return v8;
      }
    }
    int v11 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v15, 4u, v15);
    uint64_t v8 = LH_ERROR_to_VERROR(v11);
    if ((v8 & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v16 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v12, v13, v14, (uint64_t)v15);
      vector_Remove(*(void *)(a1 + 64), v9);
    }
  }
  return v8;
}

uint64_t luattt_ProcessStart(_WORD **a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t v14 = 0;
  uint64_t v8 = 2711625735;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 1077, 144) & 0x80000000) != 0) {
    return 2711625736;
  }
  if ((InitRsrcFunction(*a1, (int)a1[1], &v14) & 0x80000000) == 0)
  {
    uint64_t v9 = 0;
    a1[14] = a3;
    a1[15] = a4;
    do
    {
      int v10 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, char *, void, void, _WORD **))a1[9] + 8))(a3, a4, 538, luattt_ProcessStart_szInput[v9], 0, 0, a1 + 16);
      if ((v10 & 0x80000000) == 0) {
        break;
      }
    }
    while (v9++ != 6);
    if (v10 < 0) {
      a1[16] = 0;
    }
    uint64_t v12 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, void, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
            0,
            0,
            a1 + 10);
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v8 = v12;
LABEL_14:
      luattt_ProcessEnd(a1, a2);
      return v8;
    }
    uint64_t v8 = (*((uint64_t (**)(_WORD *, _WORD *, uint64_t, const char *, void, uint64_t, _WORD **))a1[9] + 8))(a3, a4, 538, "text/plain;charset=utf-8",
           0,
           1,
           a1 + 12);
    if ((v8 & 0x80000000) != 0) {
      goto LABEL_14;
    }
  }
  return v8;
}

uint64_t luattt_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 1077, 144);
  if ((v7 & 0x80000000) == 0)
  {
    if ((InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v22) & 0x80000000) != 0) {
      return 2711625735;
    }
    if (!*(void *)(a1 + 80) || !*(void *)(a1 + 96))
    {
      uint64_t v15 = 0;
LABEL_24:
      int v8 = 1;
LABEL_25:
      *a5 = v8;
      return v15;
    }
    *a5 = 0;
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 72) + 144))(*(void *)(a1 + 80), *(void *)(a1 + 88), (char *)&v18 + 4, &v18);
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = v18;
      if (!v18)
      {
        uint64_t v15 = 0;
        goto LABEL_25;
      }
      uint64_t v7 = (*(uint64_t (**)(void, void, char **, char *))(*(void *)(a1 + 72) + 88))(*(void *)(a1 + 80), *(void *)(a1 + 88), &v21, (char *)&v18 + 4);
      if ((v7 & 0x80000000) == 0)
      {
        char __s = v21;
        size_t v9 = HIDWORD(v18);
        if (vector_GetSize(*(void *)(a1 + 64)))
        {
          int v10 = LuaVMLDO_RunFunctionReturningPointerToString(*(void *)(a1 + 16), (uint64_t)"TTT_rewrite_process", (uint64_t)v21, (uint64_t *)&__s);
          unsigned int v11 = LH_ERROR_to_VERROR(v10);
          if ((v11 & 0x80000000) != 0) {
            goto LABEL_17;
          }
          size_t v9 = cstdlib_strlen(__s);
        }
        if (!v9
          || (unsigned int v11 = (*(uint64_t (**)(void, void, void **, size_t))(*(void *)(a1 + 72) + 112))(*(void *)(a1 + 96), *(void *)(a1 + 104), &v19, v9), (v11 & 0x80000000) == 0)&& (cstdlib_memcpy(v19, __s, v9), unsigned int v11 = (*(uint64_t (**)(void, void, size_t))(*(void *)(a1 + 72) + 120))(*(void *)(a1 + 96), *(void *)(a1 + 104), v9), (v11 & 0x80000000) == 0))
        {
          unsigned int v12 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 72) + 96))(*(void *)(a1 + 80), *(void *)(a1 + 88), HIDWORD(v18));
          if ((v12 & 0x80000000) != 0 || !vector_GetSize(*(void *)(a1 + 64)))
          {
LABEL_18:
            int v14 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 72) + 72))(*(void *)(a1 + 96), *(void *)(a1 + 104));
            if (v14 >= 0) {
              uint64_t v15 = v12;
            }
            else {
              uint64_t v15 = v14;
            }
            *(void *)(a1 + 96) = safeh_GetNullHandle();
            *(void *)(a1 + 104) = v16;
            goto LABEL_24;
          }
          int v13 = LuaVMLDO_ReleasePointerToString(*(void *)(a1 + 16));
          unsigned int v11 = LH_ERROR_to_VERROR(v13);
        }
LABEL_17:
        unsigned int v12 = v11;
        goto LABEL_18;
      }
    }
  }
  return v7;
}

uint64_t luattt_ProcessEnd(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 1077, 144);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t NullHandle = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[16], a1[17], NullHandle, v5))
    {
      int v6 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[16], a1[17]);
      if (v6 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    a1[16] = safeh_GetNullHandle();
    a1[17] = v7;
    uint64_t v8 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[10], a1[11], v8, v9))
    {
      int v10 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[10], a1[11]);
      if (v10 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    a1[10] = safeh_GetNullHandle();
    a1[11] = v11;
    uint64_t v12 = safeh_GetNullHandle();
    if (!safeh_HandlesEqual(a1[12], a1[13], v12, v13))
    {
      int v14 = (*(uint64_t (**)(void, void))(a1[9] + 72))(a1[12], a1[13]);
      if (v14 >= 0) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v14;
      }
    }
    a1[12] = safeh_GetNullHandle();
    a1[13] = v15;
  }
  return v3;
}

uint64_t luattt_pObjClose(uint64_t a1)
{
  uint64_t v1 = 2711625735;
  uint64_t v5 = 0;
  if (a1 && (InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v5) & 0x80000000) == 0)
  {
    if (*(void *)(a1 + 72)) {
      objc_ReleaseObject(*(void *)(v5 + 48), (uint64_t)"SYNTHSTREAM");
    }
    if (*(void *)(a1 + 16)) {
      luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 16));
    }
    OOCAllocator_Des();
    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      vector_ObjClose(v3);
    }
    heap_Free(*(void **)(v5 + 8), a1);
    return 0;
  }
  return v1;
}

uint64_t luattt_UnloadAllScripts(uint64_t a1)
{
  uint64_t i = 2711625735;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (a1)
  {
    uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v13);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v4 = inited;
      int Size = vector_GetSize(*(void *)(a1 + 64));
      if (Size)
      {
        unsigned int v6 = Size - 1;
        for (uint64_t i = v4; vector_GetElemAt(*(void *)(a1 + 64), v6, &v12); --v6)
        {
          int v7 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 16), (uint64_t)"TTT_resource_unload", (uint64_t)v12, 4u, v12);
          uint64_t i = LH_ERROR_to_VERROR(v7);
          if ((i & 0x80000000) != 0) {
            break;
          }
          log_OutText(*(void *)(v13 + 32), (uint64_t)"LUATTT", 5, 0, (uint64_t)"Unloaded resource %s", v8, v9, v10, (uint64_t)v12);
          vector_Remove(*(void *)(a1 + 64), v6);
          if (!v6) {
            break;
          }
        }
      }
      else
      {
        return v4;
      }
    }
  }
  return i;
}

uint64_t luattt_DataOpen(uint64_t a1, const char *a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v16 = 0;
  bzero(v17, 0x400uLL);
  uint64_t v12 = brk_DataOpenEx(*(void *)(a1 + 24), (uint64_t)a2, 1, (uint64_t)a3);
  if (cstdlib_strstr(a4, ";loader=broker") && (v12 & 0x80000000) != 0)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v16);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    int v14 = brokeraux_ComposeBrokerString(a1, a2, 0, 1, v16, 0, 0, v17, 0x400uLL);
    if (v14 < 0) {
      return v14 | 0xA1A02000;
    }
    uint64_t v12 = brk_DataOpenEx(*(void *)(a1 + 24), (uint64_t)v17, 0, (uint64_t)a3);
  }
  if ((v12 & 0x80000000) == 0) {
    return brk_DataMapEx(*(void *)(a1 + 24), *a3, 0, a6, a5);
  }
  return v12;
}

uint64_t lua_nn_diacritizer_create(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = 2712674311;
  if (!a4 || *a4) {
    return v4;
  }
  uint64_t v10 = heap_Alloc(*(void *)(a3 + 8), 72);
  *a4 = v10;
  if (!v10) {
    return 2712674314;
  }
  int Allocator = ooc_utils_createAllocator(v10 + 24, a1, a2);
  uint64_t v12 = LH_ERROR_to_VERROR(Allocator);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v16 = (void *)*a4;
    *uint64_t v16 = a1;
    v16[1] = a2;
    *(void *)(*a4 + 16) = a3;
    *(void *)(*a4 + 64) = 0;
    uint64_t v17 = *a4;
    uint64_t v29 = 0;
    log_OutText(*(void *)(*(void *)(v17 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Entering lua_nn_diacritizer_loc_AddListener for '%s'", v13, v14, v15, (uint64_t)"nn_diacritizer_mode");
    uint64_t Str = paramc_ParamGetStr(*(void *)(*(void *)(v17 + 16) + 40), (uint64_t)"nn_diacritizer_mode", &v29);
    if ((Str & 0x80000000) == 0)
    {
LABEL_7:
      uint64_t v22 = *(void *)(*(void *)(v17 + 16) + 40);
      v28[0] = v17;
      v28[1] = lua_nn_diacritizer_loc_ParamCheckChange;
      v28[2] = lua_nn_diacritizer_loc_ParamLearnChange;
      uint64_t v4 = paramc_ListenerAdd(v22, "nn_diacritizer_mode", v28);
      goto LABEL_13;
    }
    uint64_t v4 = Str;
    if ((Str & 0x1FFF) == 0x14)
    {
      log_OutText(*(void *)(*(void *)(v17 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Parameter '%s' not found: registering it with default value '%s'", v19, v20, v21, (uint64_t)"nn_diacritizer_mode");
      uint64_t v23 = paramc_ParamSetStr(*(void *)(*(void *)(v17 + 16) + 40), (uint64_t)"nn_diacritizer_mode", "optim_latency");
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      uint64_t v4 = v23;
      log_OutText(*(void *)(*(void *)(v17 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Failed to register parameter '%s'", v24, v25, v26, (uint64_t)"nn_diacritizer_mode");
    }
LABEL_13:
    log_OutText(*(void *)(*(void *)(v17 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Leaving lua_nn_diacritizer_loc_AddListener", v19, v20, v21, v27);
    if ((v4 & 0x80000000) == 0) {
      return v4;
    }
    goto LABEL_14;
  }
  uint64_t v4 = v12;
LABEL_14:
  if (*a4)
  {
    heap_Free(*(void **)(a3 + 8), *a4);
    *a4 = 0;
  }
  return v4;
}

uint64_t lua_nn_diacritizer_initialize(uint64_t a1)
{
  uint64_t v15 = 0;
  uint64_t v2 = a1 + 24;
  uint64_t v3 = (uint64_t *)(a1 + 64);
  luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 64));
  uint64_t v4 = paramc_ParamGet(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &v15, 0);
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = luavmldoutil_initialize_lua_vm(*(_WORD **)a1, *(void *)(a1 + 8), v2, (uint64_t)"runDiacritizer", (uint64_t)"FE_LUA_NN_DIACRITIZER", v3, 0);
    if ((v5 & 0x80000000) != 0)
    {
      uint64_t v13 = v5;
      log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 5, 0, (uint64_t)"LUA NN DIACRITIZER Lua function [%s] is not available.", v10, v11, v12, (uint64_t)"runDiacritizer");
      return v13;
    }
    return lua_nn_diacritizer_loc_RunInitConfigLuaFunction(a1, v6, v7, v8, v9, v10, v11, v12);
  }
  return v4;
}

uint64_t lua_nn_diacritizer_loc_RunInitConfigLuaFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Entering lua_nn_diacritizer_loc_RunInitConfigLuaFunction", a6, a7, a8, 0);
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"nn_diacritizer_mode", &v16) & 0x80000000) != 0)
  {
    uint64_t v9 = "optim_latency";
    uint64_t v16 = "optim_latency";
  }
  else
  {
    uint64_t v9 = v16;
  }
  int v10 = LuaVMLDO_RunFunctionReturningString(*(void *)(a1 + 64), (uint64_t)"configDiacritizer", (uint64_t)v9, 0xAu, v17);
  uint64_t v11 = LH_ERROR_to_VERROR(v10);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Leaving lua_nn_diacritizer_loc_RunInitConfigLuaFunction", v12, v13, v14, (uint64_t)v16);
  return v11;
}

uint64_t lua_nn_diacritizer_destroy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Entering lua_nn_diacritizer_loc_RemoveListeners", a6, a7, a8, v14);
    uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 40);
    *(void *)&long long v16 = a1;
    *((void *)&v16 + 1) = lua_nn_diacritizer_loc_ParamCheckChange;
    uint64_t v17 = lua_nn_diacritizer_loc_ParamLearnChange;
    paramc_ListenerRemove(v9, "nn_diacritizer_mode", &v16);
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Leaving lua_nn_diacritizer_loc_RemoveListeners", v10, v11, v12, v15);
    luavmldoutil_destroy_lua_vm(a1 + 24, (uint64_t *)(a1 + 64));
    OOCAllocator_Des();
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
  }
  return 0;
}

uint64_t lua_nn_diacritizer_process(uint64_t a1, uint64_t *a2, _DWORD *a3, int a4)
{
  char __s = 0;
  int v6 = LuaVMLDO_RunFunctionWithStringAndMarkerArguments(*(void *)(a1 + 64), (uint64_t)"runDiacritizer", *a2, (uint64_t *)&__s, a3, a4);
  uint64_t result = LH_ERROR_to_VERROR(v6);
  if ((result & 0x80000000) == 0)
  {
    size_t v8 = cstdlib_strlen((const char *)*a2);
    size_t v9 = cstdlib_strlen(__s);
    uint64_t v10 = (char *)*a2;
    if (v8 >= v9)
    {
LABEL_5:
      cstdlib_strcpy(v10, __s);
      int v14 = LuaVMLDO_ReleasePointerToString(*(void *)(a1 + 64));
      return LH_ERROR_to_VERROR(v14);
    }
    uint64_t v11 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
    size_t v12 = cstdlib_strlen(__s);
    uint64_t v13 = heap_Realloc(v11, (uint64_t)v10, v12 + 1);
    if (v13)
    {
      uint64_t v10 = (char *)v13;
      *a2 = v13;
      goto LABEL_5;
    }
    return 2712674314;
  }
  return result;
}

uint64_t lua_nn_diacritizer_loc_ParamCheckChange(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 1;
  return 0;
}

uint64_t lua_nn_diacritizer_loc_ParamLearnChange(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Entering lua_nn_diacritizer_loc_ParamLearnChange", a6, a7, a8, v22);
  uint64_t inited = 0;
  if (!cstdlib_strcmp(a2, "nn_diacritizer_mode"))
  {
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Parameter '%s' changed, new value: '%s'", v10, v11, v12, (uint64_t)a2);
    uint64_t inited = lua_nn_diacritizer_loc_RunInitConfigLuaFunction(a1, v14, v15, v16, v17, v18, v19, v20);
  }
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_LUA_NN_DIACRITIZER", 4, 0, (uint64_t)"Leaving lua_nn_diacritizer_loc_ParamLearnChange", v10, v11, v12, v23);
  return inited;
}

uint64_t araparser_loc_getStandardizeRule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(__c) = 0;
  uint64_t v22 = 0;
  __int16 v21 = -1;
  uint64_t v5 = (*(uint64_t (**)(void, void, const char *, uint64_t, char ***, __int16 *, int *))(*(void *)(*(void *)(a1 + 40) + 24) + 96))(*(void *)(*(void *)(a1 + 40) + 8), *(void *)(*(void *)(a1 + 40) + 16), "fecfg", a2, &v22, &v21, &__c);
  if ((v5 & 0x80000000) == 0 && v21)
  {
    int v6 = *v22;
    uint64_t v7 = cstdlib_strchr(*v22, __c);
    if (v7) {
      char *v7 = 0;
    }
    if (v6)
    {
      for (char i = 0; ; ++i)
      {
        size_t v9 = cstdlib_strchr(v6, 95);
        uint64_t v10 = v9;
        if (v9) {
          *size_t v9 = 0;
        }
        uint64_t v11 = *(void **)(*(void *)(a1 + 16) + 8);
        int v12 = cstdlib_strlen(v6);
        uint64_t v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
        if (!v13) {
          break;
        }
        uint64_t v18 = v13;
        cstdlib_strcpy(v13, v6);
        if (i == 1)
        {
          *(void *)(a3 + 8) = v18;
        }
        else if (i)
        {
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v18);
        }
        else
        {
          *(void *)a3 = v18;
          *(_WORD *)(a3 + 16) = cstdlib_strlen(v18);
        }
        int v6 = v10 + 1;
        if (!v10) {
          return v5;
        }
      }
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v14, v15, v16, v17, v20);
      return 2356158474;
    }
  }
  return v5;
}

uint64_t fe_ara_parser_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v5 = 2356158471;
  uint64_t v31 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v34);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"SYNTHSTREAM", &v33);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(*(void *)(v34 + 48), (uint64_t)"FE_DEPES", &v31);
  uint64_t v11 = *(void *)(v34 + 48);
  if ((Object & 0x80000000) != 0)
  {
    uint64_t v27 = "SYNTHSTREAM";
LABEL_15:
    objc_ReleaseObject(v11, (uint64_t)v27);
    return Object;
  }
  uint64_t v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v32);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Object = v12;
    objc_ReleaseObject(*(void *)(v34 + 48), (uint64_t)"SYNTHSTREAM");
    uint64_t v11 = *(void *)(v34 + 48);
    uint64_t v27 = "FE_DEPES";
    goto LABEL_15;
  }
  uint64_t v13 = heap_Calloc(*(void **)(v34 + 8), 960, 1);
  if (!v13)
  {
    log_OutPublic(*(void *)(v34 + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v14, v15, v16, v17, v29[0]);
    objc_ReleaseObject(*(void *)(v34 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(v34 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(v34 + 48), (uint64_t)"FE_DEPES");
    return 2356158474;
  }
  uint64_t v18 = v13;
  *(_DWORD *)(v13 + 32) = 0;
  uint64_t inited = posparser_Open(v34, (uint64_t *)(v13 + 40));
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *(_WORD *)(v18 + 56) = 0;
  *(void *)(v18 + 48) = 0;
  uint64_t v19 = *(void **)(v34 + 8);
  unsigned int v20 = (uint64_t *)(*(void *)(v18 + 40) + 256);
  v29[0] = xmmword_26D213588;
  v29[1] = *(_OWORD *)off_26D213598;
  int v30 = off_26D2135A8;
  uint64_t v21 = ssftmap_ObjOpen(v19, 0, v29, v20);
  if ((v21 & 0x80000000) != 0
    || (*(_DWORD *)(v18 + 60) = 0,
        uint64_t v21 = lua_nn_diacritizer_create(a3, a4, v34, (uint64_t *)(v18 + 64)),
        (v21 & 0x80000000) != 0))
  {
    uint64_t v5 = v21;
LABEL_19:
    fe_ara_parser_ObjClose(*(void *)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    return v5;
  }
  uint64_t v22 = v34;
  *(void *)(v18 + 8) = a4;
  *(void *)(v18 + 16) = v22;
  *(void *)uint64_t v18 = a3;
  *(void *)(v18 + 24) = *(void *)(v33 + 8);
  uint64_t v23 = v32;
  uint64_t v24 = *(void *)(v18 + 40);
  *(void *)(v24 + 24) = *(void *)(v32 + 8);
  *(_OWORD *)(v24 + 8) = *(_OWORD *)(v23 + 16);
  uint64_t v25 = v31;
  uint64_t v26 = *(void *)(v18 + 40);
  *(void *)(v26 + 56) = *(void *)(v31 + 8);
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v25 + 16);
  *(void *)a5 = v18;
  *(_DWORD *)(a5 + 8) = 85954;
  uint64_t v5 = fe_ara_parser_ObjReopen(v18, *(void *)(a5 + 8));
  if ((v5 & 0x80000000) != 0) {
    goto LABEL_19;
  }
  return v5;
}

uint64_t fe_ara_parser_ObjReopen(uint64_t a1, int a2)
{
  int __src = 0;
  int v3 = safeh_HandleCheck(a1, a2, 85954, 960);
  uint64_t result = 2356158472;
  if ((v3 & 0x80000000) == 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 60) == 1
        || *(_DWORD *)(a1 + 32) != 1
        || (uint64_t result = ssftmap_Clear(*(void *)(*(void *)(a1 + 40) + 256)), (result & 0x80000000) == 0)
        && ((uint64_t v5 = *(void *)(a1 + 40), *(_DWORD *)(v5 + 232) != 1)
         || (uint64_t result = freePosparserIGTrees(*(void *)(a1 + 16), (uint64_t *)(v5 + 216), (uint64_t *)(v5 + 224)),
             (result & 0x80000000) == 0)))
      {
        size_t v8 = 0;
        *(_DWORD *)(a1 + 60) = 0;
        uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, char **))(*(void *)(*(void *)(a1 + 40) + 24)
                                                                                                + 256))(*(void *)(*(void *)(a1 + 40) + 8), *(void *)(*(void *)(a1 + 40) + 16), "nn_diacritizer_enable", "no", &v8);
        if ((result & 0x80000000) == 0)
        {
          if (!v8
            || LH_stricmp(v8, "yes")
            && LH_stricmp(v8, "true")
            && LH_stricmp(v8, "1"))
          {
            if (*(_DWORD *)(a1 + 60) != 1)
            {
              uint64_t result = paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"langcode", &__src);
              if ((result & 0x80000000) == 0)
              {
                cstdlib_strcpy((char *)(*(void *)(a1 + 40) + 240), __src);
                cstdlib_strcpy((char *)(*(void *)(a1 + 40) + 243), "pos");
                uint64_t v6 = *(void *)(a1 + 40);
                *(_DWORD *)(v6 + 232) = 0;
                v6 += 232;
                uint64_t result = getPosparserIGTreesAndDict(*(void *)(a1 + 16), *(_WORD **)a1, *(void *)(a1 + 8), *(void *)(v6 - 224), *(void *)(v6 - 216), *(void *)(v6 - 208), (_DWORD *)v6, (uint64_t *)(v6 - 16), (uint64_t *)(v6 - 8), (_DWORD *)(v6 + 4), (const char *)(v6 + 8), (_DWORD *)(a1 + 32));
                if ((result & 0x80000000) == 0 && *(_DWORD *)(a1 + 32) == 1) {
                  return posparser_getPosMap(*(void **)(a1 + 40));
                }
              }
              return result;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 60) = 1;
          }
          return lua_nn_diacritizer_initialize(*(void *)(a1 + 64));
        }
      }
    }
  }
  return result;
}

uint64_t fe_ara_parser_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 85954, 960);
  if ((result & 0x80000000) != 0) {
    return 2356158472;
  }
  if (a1)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 256)) == 0 || (ssftmap_ObjClose(v12) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 32) != 1
        || (uint64_t v13 = *(void *)(a1 + 40), *(_DWORD *)(v13 + 232) != 1)
        || (freePosparserIGTrees(*(void *)(a1 + 16), (uint64_t *)(v13 + 216), (uint64_t *)(v13 + 224)) & 0x80000000) == 0)
      {
        lua_nn_diacritizer_destroy(*(void *)(a1 + 64), v4, v5, v6, v7, v8, v9, v10);
      }
    }
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    posparser_Close(*(void **)(a1 + 40));
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_ara_parser_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_WORD *)&__c[1] = -1;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 85954, 960);
  if ((v7 & 0x80000000) != 0) {
    return 2356158472;
  }
  if (!*(_DWORD *)(a1 + 32) && !*(_DWORD *)(a1 + 60)) {
    return v7;
  }
  *(void *)&__c[3] = 0;
  __c[0] = 0;
  synstrmaux_InitStreamOpener(a1 + 72, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 896);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 912);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"text/plain;charset=utf-8", a1 + 928);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 72), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 944);
  uint64_t StandardizeRule = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 72), *(void *)(a1 + 24), a3, a4);
  if ((StandardizeRule & 0x80000000) != 0) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 60) || !*(_DWORD *)(a1 + 32)) {
    return StandardizeRule;
  }
  uint64_t v9 = posparser_ProcessStart(*(char **)(a1 + 40));
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t StandardizeRule = v9;
    goto LABEL_16;
  }
  *(_WORD *)&__c[1] = -1;
  uint64_t StandardizeRule = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(*(void *)(*(void *)(a1 + 40) + 24) + 96))(*(void *)(*(void *)(a1 + 40) + 8), *(void *)(*(void *)(a1 + 40) + 16), "fecfg", "araparsernumstandardize", &__c[3], &__c[1], __c);
  if ((StandardizeRule & 0x80000000) != 0)
  {
LABEL_16:
    synstrmaux_CloseStreams((_WORD *)(a1 + 72), *(void *)(a1 + 24));
    return StandardizeRule;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v10 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v10) {
      *uint64_t v10 = 0;
    }
    unsigned __int16 v11 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    unsigned int v12 = v11;
    *(_WORD *)(a1 + 56) = v11;
  }
  else
  {
    unsigned int v12 = *(unsigned __int16 *)(a1 + 56);
  }
  if (v12)
  {
    uint64_t v14 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (24 * v12) | 1);
    *(void *)(a1 + 48) = v14;
    if (v14)
    {
      if (!*(_WORD *)(a1 + 56)) {
        return StandardizeRule;
      }
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        cstdlib_memset(__b, 0, 0x20uLL);
        cstdlib_strcpy(__b, "araparserstandardize");
        uint64_t v21 = LH_itoa(v20, v23, 0xAu);
        cstdlib_strcat(v26, v21);
        uint64_t StandardizeRule = araparser_loc_getStandardizeRule(a1, (uint64_t)__b, *(void *)(a1 + 48) + v19);
        if ((StandardizeRule & 0x80000000) != 0) {
          break;
        }
        ++v20;
        v19 += 24;
        if (v20 >= *(unsigned __int16 *)(a1 + 56)) {
          return StandardizeRule;
        }
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v15, v16, v17, v18, v22);
      uint64_t StandardizeRule = 2356158474;
    }
    goto LABEL_16;
  }
  return StandardizeRule;
}

uint64_t fe_ara_parser_process_legacy(uint64_t a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t *a5, _WORD *a6)
{
  uint64_t v185 = 0;
  unsigned __int16 v184 = 0;
  int v183 = 0;
  if (!*(_DWORD *)(a1 + 32)) {
    return 0;
  }
  unsigned int v180 = cstdlib_strlen(*a4);
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sentence \"%s\"", v10, v11, v12, (uint64_t)*a4);
  uint64_t v181 = a5;
  uint64_t v182 = a4;
  v189[0] = (char *)*a4;
  __int16 v188 = 0;
  unint64_t v187 = (_DWORD *)*a5;
  unsigned __int16 v186 = 0;
  unsigned __int16 v13 = cstdlib_strlen(v189[0]);
  if (!v13) {
    goto LABEL_162;
  }
  unsigned __int16 v14 = 0;
  unsigned int v15 = v13;
  unsigned __int16 v16 = v13;
  do
  {
    if ((unsigned __int16)*a6 < 2u) {
      goto LABEL_24;
    }
    uint64_t v17 = (uint64_t)v187;
    uint64_t v18 = 64;
    unint64_t v19 = 1;
    do
    {
      if (*(_DWORD *)(v17 + 32 * v19) == 21
        && (unint64_t v20 = *(char **)(v17 + 32 * v19 + 24)) != 0
        && (int v21 = LH_stricmp(v20, "spell"), v17 = (uint64_t)v187, !v21)
        && ((int v23 = v187[3], v24 = v187[8 * v19 + 3] - v23, v24 == v14) || v24 == (unsigned __int16)(v14 + 1)))
      {
        uint64_t v25 = v18;
        unint64_t v26 = v19;
        do
        {
          if (++v26 >= (unsigned __int16)*a6)
          {
            LOWORD(v28) = v16;
            goto LABEL_22;
          }
          int v27 = *(_DWORD *)((char *)v187 + v25);
          v25 += 32;
        }
        while (v27 != 21);
        LOWORD(v28) = v16;
        if (v187[8 * (unsigned __int16)v26] == 21) {
          int v28 = v187[8 * (unsigned __int16)v26 + 3] - v23;
        }
LABEL_22:
        BOOL v22 = v14 != (unsigned __int16)v28;
        unsigned __int16 v14 = v28;
      }
      else
      {
        BOOL v22 = 0;
      }
      if (*(_DWORD *)(v17 + 32 * v19 + 12) - *(_DWORD *)(v17 + 12) > v14) {
        break;
      }
      if (v22) {
        break;
      }
      ++v19;
      v18 += 32;
    }
    while (v19 < (unsigned __int16)*a6);
    if (!v22)
    {
LABEL_24:
      uint64_t v29 = v14;
      int v30 = (unsigned __int8 *)&v189[0][v14];
      if (*v30 != 32) {
        goto LABEL_40;
      }
      unsigned int v31 = v14;
      uint64_t v32 = v14 + 1;
      if (v32 < v15 && v189[0][v32] == 32)
      {
        unint64_t v33 = (unsigned __int16)*a6;
        if (v33 >= 2)
        {
          uint64_t v34 = v187 + 11;
          unint64_t v35 = 2;
          do
          {
            unsigned int v36 = *v34 - v187[3];
            BOOL v37 = v36 == v14;
            if (v36 == (unsigned __int16)(v14 + 1)) {
              BOOL v37 = 1;
            }
            char v38 = *(v34 - 3) == 21 && v37;
            if (v36 > v14) {
              break;
            }
            v34 += 8;
            char v39 = v35++ >= v33 ? 1 : v38;
          }
          while ((v39 & 1) == 0);
          if (v38)
          {
LABEL_40:
            if (!isPunc_0(*(void *)(a1 + 40), v30)) {
              goto LABEL_100;
            }
            unint64_t v40 = (unsigned __int16)*a6;
            if (v40 > 1)
            {
              int v41 = v187 + 8;
              uint64_t v42 = 2;
              for (uint64_t i = 1; i != v40; ++i)
              {
                if (v187[8 * i] == 34)
                {
                  int v44 = v187[3];
                  if (v187[8 * i + 3] - v44 <= v14)
                  {
                    uint64_t v45 = v41;
                    unint64_t v46 = v42;
                    uint64_t v47 = v41;
                    do
                    {
                      int v49 = *v47;
                      v47 += 8;
                      int v48 = v49;
                      if (v49 == 21 || v48 == 3)
                      {
                        if (v45[3] - v44 > v14 || v40 == v46)
                        {
LABEL_74:
                          inSMSMode(v14, (uint64_t)v187, v40);
                          goto LABEL_100;
                        }
                      }
                      else if (v40 == v46)
                      {
                        goto LABEL_74;
                      }
                      BOOL v52 = v48 == 21 || v46++ >= v40;
                      uint64_t v45 = v47;
                    }
                    while (!v52);
                  }
                }
                ++v42;
                v41 += 8;
              }
            }
            int v53 = inSMSMode(v14, (uint64_t)v187, v40);
            int v54 = v53;
            if (!v14) {
              goto LABEL_93;
            }
            uint64_t v55 = v14 - 1;
            int v56 = v189[0][v55];
            if (v56 == 32) {
              goto LABEL_93;
            }
            if (v53)
            {
              if (v53 != 1) {
                goto LABEL_93;
              }
              if (isSMSPunc(*(void *)(a1 + 40), (unsigned __int8 *)&v189[0][v55]))
              {
                int v54 = 1;
                goto LABEL_93;
              }
              LOBYTE(v56) = v189[0][v55];
            }
            if (!isDigit(v56))
            {
              uint64_t v74 = v14 + 1;
              if (v74 == v15)
              {
                if (v14 < 2u) {
                  goto LABEL_93;
                }
                uint64_t v75 = v189[0];
              }
              else
              {
                if (v74 >= v15) {
                  goto LABEL_93;
                }
                if (v14 < 2u) {
                  goto LABEL_93;
                }
                uint64_t v75 = v189[0];
                if (v189[0][v74] != 32) {
                  goto LABEL_93;
                }
              }
              unsigned int v83 = &v75[v14 - 2];
              size_t v84 = cstdlib_strlen("§");
              if (cstdlib_strncmp(v83, "§", v84))
              {
                if ((posparserGrowStr(*(void *)(a1 + 40), (uint64_t *)v189, (unsigned __int16)(v15 + 1), &v188, 0) & 0x80000000) != 0
                  || (posparserInsertWordMarker(*(void *)(a1 + 40), (uint64_t *)&v187, a6, v14, 1, v189[0], &v186) & 0x80000000) != 0)
                {
LABEL_140:
                  unsigned int v94 = v180;
                  goto LABEL_163;
                }
                cstdlib_memmove(&v189[0][v14 + 1], &v189[0][v14], (int)(v15 - v14));
                v189[0][v15 + 1] = 0;
                unsigned __int16 v16 = cstdlib_strlen(v189[0]);
                v189[0][v14] = 32;
                unint64_t v85 = (unsigned __int16)*a6;
                uint64_t v78 = (uint64_t)v187;
                if (v85 >= 2)
                {
                  uint64_t v86 = 0;
                  uint64_t v87 = 32 * v85 - 32;
                  uint64_t v88 = 32 * v186 - 32;
                  do
                  {
                    if (v88 != v86)
                    {
                      int v89 = *(_DWORD *)(v78 + v86 + 44);
                      if (v14 <= (unsigned __int16)(v89 - *(_WORD *)(v78 + 12))) {
                        *(_DWORD *)(v78 + v86 + 44) = v89 + 1;
                      }
                    }
                    v86 += 32;
                  }
                  while (v87 != v86);
                }
LABEL_129:
                ++*(_DWORD *)(v78 + 16);
                if (v14) {
                  --v14;
                }
                else {
                  unsigned __int16 v14 = 0;
                }
                goto LABEL_101;
              }
            }
LABEL_93:
            uint64_t v71 = v14 + 1;
            int v72 = v15 - v71;
            if (v15 <= v71) {
              goto LABEL_100;
            }
            if (v54 == 1)
            {
              if (isSMSPunc(*(void *)(a1 + 40), (unsigned __int8 *)&v189[0][v71])) {
                goto LABEL_100;
              }
            }
            else if (v54)
            {
              goto LABEL_100;
            }
            int v73 = v189[0][v71];
            if (v73 == 32 || isDigit(v73) || v14 && v189[0][v14 - 1] != 32) {
              goto LABEL_100;
            }
            uint64_t v76 = v15 + 1;
            if ((posparserGrowStr(*(void *)(a1 + 40), (uint64_t *)v189, (unsigned __int16)v76, &v188, 0) & 0x80000000) != 0
              || (posparserInsertWordMarker(*(void *)(a1 + 40), (uint64_t *)&v187, a6, (unsigned __int16)(v14 + 1), 1, v189[0], &v186) & 0x80000000) != 0)
            {
              goto LABEL_140;
            }
            cstdlib_memmove(&v189[0][v14 + 2], &v189[0][v71], v72);
            v189[0][v76] = 0;
            unsigned __int16 v16 = cstdlib_strlen(v189[0]);
            v189[0][v71] = 32;
            unint64_t v77 = (unsigned __int16)*a6;
            uint64_t v78 = (uint64_t)v187;
            if (v77 >= 2)
            {
              uint64_t v79 = 0;
              uint64_t v80 = 32 * v77 - 32;
              uint64_t v81 = 32 * v186 - 32;
              do
              {
                if (v81 != v79)
                {
                  int v82 = *(_DWORD *)(v78 + v79 + 44);
                  if (v14 < (unsigned __int16)(v82 - *(_WORD *)(v78 + 12))) {
                    *(_DWORD *)(v78 + v79 + 44) = v82 + 1;
                  }
                }
                v79 += 32;
              }
              while (v80 != v79);
            }
            goto LABEL_129;
          }
        }
      }
      unsigned __int16 v57 = v14;
      if (v14 >= v16) {
        goto LABEL_78;
      }
      while (v189[0][v29] == 32)
      {
        if (v16 == ++v29)
        {
          unsigned __int16 v57 = v16;
          goto LABEL_76;
        }
      }
      unsigned __int16 v57 = v29;
LABEL_76:
      unsigned int v31 = v57;
      if (!v14 || v32 != v57)
      {
LABEL_78:
        if ((posparserGrowStr(*(void *)(a1 + 40), (uint64_t *)v189, (unsigned __int16)(v16 + 1), &v188, 0) & 0x80000000) != 0) {
          goto LABEL_140;
        }
        cstdlib_memmove(&v189[0][v32], &v189[0][v57], (int)(v15 - v31));
        int v61 = v31 - v32;
        v189[0][(int)(v15 - (v31 - v32))] = 0;
        unsigned __int16 v62 = cstdlib_strlen(v189[0]);
        unint64_t v63 = (unsigned __int16)*a6;
        uint64_t v64 = (uint64_t)v187;
        if (v63 >= 2)
        {
          int v65 = v187[3];
          unint64_t v66 = v63 - 1;
          int v67 = v187 + 11;
          while (1)
          {
            unsigned int v68 = (unsigned __int16)(*v67 - v65);
            BOOL v69 = v68 <= v32 || v68 >= v31;
            int v70 = v65 + v32;
            if (!v69) {
              goto LABEL_88;
            }
            if (v68 >= v31) {
              break;
            }
LABEL_89:
            v67 += 8;
            if (!--v66) {
              goto LABEL_90;
            }
          }
          int v70 = *v67 - v61;
LABEL_88:
          *int v67 = v70;
          goto LABEL_89;
        }
LABEL_90:
        *(_DWORD *)(v64 + 16) -= v61;
        unsigned __int16 v16 = v62;
      }
LABEL_100:
      ++v14;
    }
LABEL_101:
    unsigned int v15 = v16;
  }
  while (v16 > v14);
  if (!v16) {
    goto LABEL_162;
  }
  uint64_t v91 = v16 - 1;
  if (v189[0][v91] == 32
    || v16 >= 3u
    && (int v92 = &v189[0][v16 - 3], v93 = cstdlib_strlen("§"), !cstdlib_strncmp(v92, "§", v93))
    && isPunc_0(*(void *)(a1 + 40), (unsigned __int8 *)&v189[0][v91]))
  {
LABEL_142:
    unsigned __int16 v95 = v16 - 1;
    if (v16 != 1)
    {
      int v96 = &v189[0][v95];
      if (*v96 == 32)
      {
        int v97 = v189[0][(unsigned __int16)(v16 - 1) - 1];
        if (v97 == 32)
        {
          while (1)
          {
            unsigned __int16 v16 = v95;
            *int v96 = 0;
            if (!--v95) {
              break;
            }
            int v96 = &v189[0][v95];
            if (*v96 != 32) {
              goto LABEL_151;
            }
            if (v189[0][v95 - 1] != 32) {
              goto LABEL_148;
            }
          }
          unsigned __int16 v16 = 1;
LABEL_151:
          unint64_t v98 = (unsigned __int16)*a6;
          if (v98 >= 2)
          {
            int v99 = v187[3];
            unint64_t v100 = v98 - 1;
            unsigned int v101 = v187 + 11;
            while (1)
            {
              unsigned int v102 = (unsigned __int16)(*v101 - v99);
              BOOL v103 = v102 <= v16 || v102 >= v14;
              int v104 = v99 + v16;
              if (!v103) {
                goto LABEL_160;
              }
              if (v102 >= v14) {
                break;
              }
LABEL_161:
              v101 += 8;
              if (!--v100) {
                goto LABEL_162;
              }
            }
            int v104 = v16 - v14 + *v101;
LABEL_160:
            *unsigned int v101 = v104;
            goto LABEL_161;
          }
          goto LABEL_162;
        }
LABEL_148:
        if (v97 == 32) {
          goto LABEL_151;
        }
      }
    }
LABEL_162:
    unsigned int v94 = cstdlib_strlen(v189[0]);
    goto LABEL_163;
  }
  unsigned int v94 = v180;
  if ((posparserGrowStr(*(void *)(a1 + 40), (uint64_t *)v189, (unsigned __int16)(v16 + 1), &v188, 0) & 0x80000000) == 0)
  {
    v189[0][v16] = 32;
    v189[0][v16 + 1] = 0;
    unsigned __int16 v16 = cstdlib_strlen(v189[0]);
    if (!v16) {
      goto LABEL_162;
    }
    goto LABEL_142;
  }
LABEL_163:
  *uint64_t v181 = (uint64_t)v187;
  uint64_t v105 = v189[0];
  *uint64_t v182 = v189[0];
  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sanitized Sentence \"%s\"", v58, v59, v60, (uint64_t)v105);
  if (*(_WORD *)(a1 + 56))
  {
    uint64_t v106 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, v94 + 1);
    uint64_t v111 = v106;
    if (!v106) {
      goto LABEL_231;
    }
    cstdlib_strcpy(v106, *v182);
    if (*(_WORD *)(a1 + 56))
    {
      unint64_t v115 = 0;
      do
      {
        uint64_t v116 = cstdlib_strstr(v111, *(const char **)(*(void *)(a1 + 48) + 24 * v115));
        if (v116)
        {
          uint64_t v117 = v116;
          do
          {
            cstdlib_memcpy(v117, *(const void **)(*(void *)(a1 + 48) + 24 * v115 + 8), *(unsigned __int16 *)(*(void *)(a1 + 48) + 24 * v115 + 16));
            uint64_t v117 = cstdlib_strstr(v117, *(const char **)(*(void *)(a1 + 48) + 24 * v115));
          }
          while (v117);
        }
        ++v115;
      }
      while (v115 < *(unsigned __int16 *)(a1 + 56));
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Got Standardized Sentence     \"%s\"", v112, v113, v114, (uint64_t)v111);
  }
  else
  {
    uint64_t v111 = 0;
  }
  uint64_t v118 = posparser_ExtractWords(*(_DWORD **)(a1 + 40), *v181, (unsigned __int16)*a6, *v182, v94, &v185, &v184);
  if ((v118 & 0x80000000) != 0) {
    goto LABEL_251;
  }
  if (*(_WORD *)(a1 + 56))
  {
    uint64_t v119 = v184;
    if (v184)
    {
      int v120 = *v182;
      int v121 = (_DWORD *)(v185 + 92);
      do
      {
        if (!*(v121 - 1)
          && !*v121
          && cstdlib_strncmp(&v120[*((unsigned __int16 *)v121 - 42)], &v111[*((unsigned __int16 *)v121 - 42)], *((unsigned __int16 *)v121 - 41) - (unint64_t)*((unsigned __int16 *)v121 - 42)))
        {
          cstdlib_memcpy((void *)&v120[*((unsigned __int16 *)v121 - 42)], &v111[*((unsigned __int16 *)v121 - 42)], *((unsigned __int16 *)v121 - 41) - (unint64_t)*((unsigned __int16 *)v121 - 42));
        }
        v121 += 26;
        --v119;
      }
      while (v119);
    }
    if (v111)
    {
      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v111);
      uint64_t v111 = 0;
    }
  }
  uint64_t v122 = *(void *)(a1 + 40);
  if (!*(_WORD *)(v122 + 184)) {
    goto LABEL_187;
  }
  uint64_t v118 = posparser_applyEmbeddedRules(v122, v185, v184, (uint64_t)*v182, v94);
  if ((v118 & 0x80000000) != 0)
  {
LABEL_251:
    uint64_t v90 = v118;
    goto LABEL_252;
  }
  uint64_t v122 = *(void *)(a1 + 40);
LABEL_187:
  if (*(_DWORD *)(v122 + 192) != 1) {
    goto LABEL_190;
  }
  *(_WORD *)(v122 + 210) = 50;
  uint64_t v123 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 306);
  uint64_t v124 = *(void *)(a1 + 40);
  *(void *)(v124 + 200) = v123;
  if (v123)
  {
    *(_WORD *)(v124 + 208) = 0;
    cstdlib_memset(v123, 0, 6 * *(unsigned __int16 *)(v124 + 210));
LABEL_190:
    uint64_t v125 = *v181;
    uint64_t v176 = (unsigned __int16)*a6;
    uint64_t v177 = v185;
    uint64_t v126 = v184;
    int v127 = *v182;
    LOWORD(v189[0]) = 0;
    unsigned __int16 v128 = cstdlib_strlen(v127);
    if (v128)
    {
      unsigned int v129 = 0;
      int v130 = 0;
      unsigned int v131 = v128;
      if (v126 <= 1) {
        uint64_t v132 = 1;
      }
      else {
        uint64_t v132 = v126;
      }
      uint64_t v175 = v132;
      uint64_t v174 = (_DWORD *)(v125 + 44);
      unsigned __int16 v133 = v128;
      while (1)
      {
        if (!v126) {
          goto LABEL_204;
        }
        uint64_t v134 = v126;
        unsigned int v135 = (_DWORD *)(v177 + 92);
        while (*((unsigned __int16 *)v135 - 42) > (unsigned __int16)v130
             || *((unsigned __int16 *)v135 - 41) <= (unsigned __int16)v130)
        {
          v135 += 26;
          if (!--v134) {
            goto LABEL_204;
          }
        }
        if (*(v135 - 1) || *(v135 - 20) || *v135)
        {
LABEL_204:
          v130 += Utf8_LengthInBytes((unsigned __int8 *)&v127[(unsigned __int16)v130], 1);
          goto LABEL_205;
        }
        uint64_t v173 = v125;
        int v136 = isMAPPINGXBI2A(*(void *)(a1 + 40), (unsigned __int8 *)&v127[(unsigned __int16)v130]);
        uint64_t v137 = *(void *)(a1 + 40);
        if (v136 != 1) {
          break;
        }
        if (*(_DWORD *)(v137 + 192) == 1)
        {
          uint64_t v118 = storeDiacritic(a1, v130, (unsigned __int8 *)&v127[(unsigned __int16)v130], (uint64_t *)(v137 + 200), (_WORD *)(v137 + 208), (_WORD *)(v137 + 210), (unsigned __int16 *)v189);
          if ((v118 & 0x80000000) != 0) {
            goto LABEL_251;
          }
        }
        v127[(unsigned __int16)v130++] = 65;
LABEL_205:
        unsigned int v129 = (unsigned __int16)v130;
        unsigned int v131 = v133;
        if ((unsigned __int16)v130 >= v133) {
          goto LABEL_232;
        }
      }
      if (!isDiacritic(v137, (unsigned __int8 *)&v127[(unsigned __int16)v130]))
      {
        v130 += Utf8_LengthInBytes((unsigned __int8 *)&v127[(unsigned __int16)v130], 1);
LABEL_230:
        uint64_t v125 = v173;
        goto LABEL_205;
      }
      uint64_t v138 = *(void *)(a1 + 40);
      if (*(_DWORD *)(v138 + 192) != 1
        || (uint64_t v118 = storeDiacritic(a1, v130, (unsigned __int8 *)&v127[(unsigned __int16)v130], (uint64_t *)(v138 + 200), (_WORD *)(v138 + 208), (_WORD *)(v138 + 210), (unsigned __int16 *)v189), (v118 & 0x80000000) == 0))
      {
        uint64_t v139 = LOWORD(v189[0]);
        unsigned int v140 = v129 + LOWORD(v189[0]);
        if (v140 < v131) {
          cstdlib_memmove((void *)&v127[(unsigned __int16)v130], &v127[v140], (int)(v131 - v129));
        }
        v127[(int)v131 - v139] = 0;
        unsigned __int16 v133 = cstdlib_strlen(v127);
        if (v176 >= 2)
        {
          uint64_t v141 = v174;
          int v142 = *(_DWORD *)(v173 + 12);
          uint64_t v143 = v176 - 1;
          do
          {
            if (v129 < (unsigned __int16)(*v141 - v142)) {
              *v141 -= v139;
            }
            v141 += 8;
            --v143;
          }
          while (v143);
        }
        uint64_t v144 = 0;
        *(_DWORD *)(v173 + 16) -= v139;
        unint64_t v146 = (_WORD *)(v177 + 10);
        uint64_t v145 = v175;
        while (1)
        {
          unsigned int v147 = (unsigned __int16)*(v146 - 1);
          if (v147 > (unsigned __int16)v130) {
            break;
          }
          unsigned int v147 = (unsigned __int16)*v146;
          if (v147 > (unsigned __int16)v130)
          {
            int v148 = (_WORD *)(v177 + 104 * v144 + 10);
            goto LABEL_226;
          }
LABEL_227:
          ++v144;
          v146 += 52;
          if (!--v145) {
            goto LABEL_230;
          }
        }
        *(v146 - 1) = v147 - v139;
        LOWORD(v147) = *v146;
        int v148 = v146;
LABEL_226:
        *int v148 = v147 - v139;
        goto LABEL_227;
      }
      goto LABEL_251;
    }
LABEL_232:
    int v152 = cstdlib_strlen(v127);
    uint64_t v153 = (char **)v182;
    *uint64_t v182 = v127;
    uint64_t v154 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v154 + 192) == 1)
    {
      uint64_t v155 = *(unsigned __int16 *)(v154 + 208);
      if (v155)
      {
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Identified %d Diacritics", v149, v150, v151, v155);
        uint64_t v156 = *(void *)(a1 + 40);
        if (*(_WORD *)(v156 + 208))
        {
          uint64_t v157 = 0;
          unint64_t v158 = 0;
          do
          {
            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"(%d,%s)", v149, v150, v151, *(unsigned __int16 *)(*(void *)(v156 + 200) + v157));
            ++v158;
            uint64_t v156 = *(void *)(a1 + 40);
            v157 += 6;
          }
          while (v158 < *(unsigned __int16 *)(v156 + 208));
        }
      }
    }
    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Normalized Sentence \"%s\"", v149, v150, v151, (uint64_t)*v182);
    uint64_t v159 = v185;
    unint64_t v160 = v184;
    if (v184)
    {
      int v161 = v184;
      if (v184 == 1)
      {
LABEL_248:
        uint64_t v118 = posparser_Process(*(void *)(a1 + 40), a2, a3, v159, v160, v161, 0, v153, v181, a6);
        if ((v118 & 0x80000000) == 0)
        {
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Final Sentence \"%s\"", v167, v168, v169, (uint64_t)*v153);
          uint64_t v118 = (*(uint64_t (**)(void, void, int *, void))(*(void *)(*(void *)(a1 + 40) + 56)
                                                                          + 112))(*(void *)(*(void *)(a1 + 40) + 40), *(void *)(*(void *)(a1 + 40) + 48), &v183, 0);
          if ((v118 & 0x80000000) == 0)
          {
            v183 += v152 - v180;
            uint64_t v118 = (*(uint64_t (**)(void, void))(*(void *)(*(void *)(a1 + 40) + 56) + 104))(*(void *)(*(void *)(a1 + 40) + 40), *(void *)(*(void *)(a1 + 40) + 48));
          }
        }
        goto LABEL_251;
      }
      unsigned __int16 v162 = 0;
      unint64_t v163 = *v182;
      char v164 = (unsigned __int16 *)(v185 + 10);
      unint64_t v165 = 1;
      do
      {
        uint64_t v166 = *(v164 - 1);
        if (*v164 - v166 != 1 || !isPunc_0(*(void *)(a1 + 40), (unsigned __int8 *)&v163[v166])) {
          ++v162;
        }
        if (v165 >= v160) {
          break;
        }
        v164 += 52;
        ++v165;
      }
      while (v162 < 2u);
      uint64_t v159 = v185;
      LODWORD(v160) = v184;
      uint64_t v153 = (char **)v182;
    }
    else
    {
      unsigned __int16 v162 = v184;
    }
    int v161 = v162 == 1;
    goto LABEL_248;
  }
LABEL_231:
  uint64_t v90 = 2356158474;
  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v107, v108, v109, v110, v172);
LABEL_252:
  posparser_FreeWords(*(void **)(a1 + 40), v185, v184);
  uint64_t v185 = 0;
  if (v111) {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v111);
  }
  uint64_t v170 = *(void *)(*(void *)(a1 + 40) + 200);
  if (v170)
  {
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v170);
    *(void *)(*(void *)(a1 + 40) + 200) = 0;
  }
  return v90;
}

uint64_t fe_ara_parser_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v55 = 0;
  memset(__n, 0, sizeof(__n));
  uint64_t v9 = 2356158474;
  uint64_t v51 = 0;
  unsigned int v49 = 0;
  uint64_t v10 = safeh_HandleCheck(a1, a2, 85954, 960);
  if ((v10 & 0x80000000) != 0) {
    return 2356158472;
  }
  *a5 = 1;
  if (!*(_DWORD *)(a1 + 32) && !*(_DWORD *)(a1 + 60)) {
    return v10;
  }
  int __src = 0;
  uint64_t v10 = (*(uint64_t (**)(void, void, char **, unsigned int *))(*(void *)(a1 + 24) + 88))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v55, &v49);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v11 = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 24) + 144))(*(void *)(a1 + 912), *(void *)(a1 + 920), (char *)&v51 + 4, &v51);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  if (v49)
  {
    uint64_t v10 = (*(uint64_t (**)(void, void, void **, _DWORD *))(*(void *)(a1 + 24) + 88))(*(void *)(a1 + 912), *(void *)(a1 + 920), &__src, __n);
    if ((v10 & 0x80000000) == 0)
    {
      unint64_t v12 = __n[0];
      int v13 = __n[0] >> 5;
      unsigned __int16 v53 = __n[0] >> 5;
      unsigned __int16 v14 = (unsigned char *)heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), __n[0]);
      unsigned int v50 = v14;
      if (v14)
      {
        unint64_t v19 = v14;
        unsigned __int16 v20 = v12 >> 5;
        cstdlib_memcpy(v14, __src, __n[0]);
        log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing Sentence \"%s\"", v21, v22, v23, (uint64_t)v55);
        unint64_t v48 = v12;
        uint64_t v24 = 0;
        if (v20)
        {
          uint64_t v25 = v19 + 3;
          uint64_t v26 = (unsigned __int16)(v12 >> 5);
          while (1)
          {
            int v27 = *v25;
            v25 += 8;
            if (v27 != v19[3]) {
              break;
            }
            if (v26 == ++v24)
            {
              unsigned __int16 v20 = v13;
              uint64_t v24 = (unsigned __int16)(v12 >> 5);
              goto LABEL_31;
            }
          }
          unsigned __int16 v20 = v24;
        }
        else
        {
          uint64_t v26 = (unsigned __int16)(v12 >> 5);
        }
LABEL_31:
        uint64_t v30 = heap_Alloc(*(void *)(*(void *)(a1 + 16) + 8), 4 * v26);
        if (!v30)
        {
          uint64_t v33 = *(void *)(*(void *)(a1 + 16) + 32);
          uint64_t v34 = 30000;
LABEL_43:
          log_OutPublic(v33, (uint64_t)"FE_ARAPARSER", v34, 0, v15, v16, v17, v18, v47);
LABEL_44:
          if (v50)
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v50);
            unsigned int v50 = 0;
          }
          if (*(void *)&__n[1]) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(uint64_t *)&__n[1]);
          }
          return v9;
        }
        uint64_t v31 = v30;
        uint64_t v32 = (uint64_t)&v19[8 * v24];
        if (v20 == (unsigned __int16)v13)
        {
          marker_sort(v32, v26 - v24);
        }
        else
        {
          uint64_t v35 = 0;
          uint64_t v36 = (unsigned __int16)(v13 - v20);
          BOOL v37 = (_DWORD *)(v32 + 4);
          do
          {
            *(_DWORD *)(v31 + 4 * v35) = *v37;
            *BOOL v37 = v35;
            v37 += 8;
            ++v35;
          }
          while (v36 != v35);
          marker_sort(v32, v26 - v24);
          char v38 = &v19[8 * v24 + 1];
          do
          {
            *char v38 = *(_DWORD *)(v31 + 4 * *v38);
            v38 += 8;
            --v36;
          }
          while (v36);
        }
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v31);
        char v39 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, v49 + 1);
        *(void *)&__n[1] = v39;
        if (v39)
        {
          uint64_t v40 = (uint64_t)v39;
          cstdlib_strcpy(v39, v55);
          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 5, 0, (uint64_t)"Processing This Sentence \"%s\"", v41, v42, v43, v40);
          if (*(_DWORD *)(a1 + 32))
          {
            uint64_t v9 = fe_ara_parser_process_legacy(a1, a3, a4, (const char **)&__n[1], (uint64_t *)&v50, &v53);
            unint64_t v44 = v48;
          }
          else
          {
            unint64_t v44 = v48;
            uint64_t v9 = lua_nn_diacritizer_process(*(void *)(a1 + 64), (uint64_t *)&__n[1], v19, (unsigned __int16)(v48 >> 5));
          }
          if ((v9 & 0x80000000) == 0)
          {
            int v45 = cstdlib_strlen(*(const char **)&__n[1]);
            uint64_t v46 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 24) + 104))(*(void *)(a1 + 928), *(void *)(a1 + 936), *(void *)&__n[1], (v45 + 1));
            if ((v46 & 0x80000000) == 0)
            {
              uint64_t v46 = (*(uint64_t (**)(void, void, unsigned char *, void))(*(void *)(a1 + 24) + 104))(*(void *)(a1 + 944), *(void *)(a1 + 952), v50, 32 * v53);
              if ((v46 & 0x80000000) == 0)
              {
                uint64_t v46 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 896), *(void *)(a1 + 904), v49);
                if ((v46 & 0x80000000) == 0) {
                  uint64_t v46 = (*(uint64_t (**)(void, void, unint64_t))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 912), *(void *)(a1 + 920), v44);
                }
              }
            }
            uint64_t v9 = v46;
          }
          goto LABEL_44;
        }
      }
      uint64_t v33 = *(void *)(*(void *)(a1 + 16) + 32);
      uint64_t v34 = 54000;
      goto LABEL_43;
    }
    return v10;
  }
  int v28 = v51;
  if (v51)
  {
    if (HIDWORD(v51))
    {
      uint64_t v10 = (*(uint64_t (**)(void, void, void **, _DWORD *))(*(void *)(a1 + 24) + 88))(*(void *)(a1 + 912), *(void *)(a1 + 920), &__src, __n);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      uint64_t v10 = (*(uint64_t (**)(void, void, void *, void))(*(void *)(a1 + 24) + 104))(*(void *)(a1 + 944), *(void *)(a1 + 952), __src, __n[0]);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      uint64_t v11 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 912), *(void *)(a1 + 920), __n[0]);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
      int v28 = v51;
    }
    if (!v28) {
      return v11;
    }
    return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 72), *(void *)(a1 + 24));
  }
  unsigned int v50 = 0;
  if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", &v50) & 0x80000000) != 0
    || !v50
    || !*v50)
  {
    *a5 = 0;
  }
  return v11;
}

uint64_t fe_ara_parser_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 85954, 960) & 0x80000000) != 0) {
    return 2356158472;
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    if (*(_WORD *)(a1 + 56))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = *(void *)(a1 + 48);
      do
      {
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v5 + v3));
        uint64_t v6 = (void *)(*(void *)(a1 + 48) + v3);
        *uint64_t v6 = 0;
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v6[1]);
        uint64_t v5 = *(void *)(a1 + 48);
        *(void *)(v5 + v3 + 8) = 0;
        ++v4;
        v3 += 24;
      }
      while (v4 < *(unsigned __int16 *)(a1 + 56));
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 48);
      if (!v5)
      {
LABEL_10:
        *(_WORD *)(a1 + 56) = 0;
        posparser_ProcessEnd(*(void **)(a1 + 40));
        goto LABEL_11;
      }
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v5);
    *(void *)(a1 + 48) = 0;
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v8 = *(void *)(a1 + 24);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 72), v8);
}

uint64_t fe_ara_parser_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2356158465;
  }
  uint64_t result = 0;
  *a2 = &IAraParser;
  return result;
}

uint64_t storeDiacritic(uint64_t a1, __int16 a2, unsigned __int8 *a3, uint64_t *a4, _WORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  uint64_t v14 = *a4;
  unsigned __int16 v15 = Utf8_LengthInBytes(a3, 1);
  *a7 = v15;
  unsigned int v16 = (unsigned __int16)*a5;
  unsigned int v17 = (unsigned __int16)*a6;
  if (v16 < v17) {
    goto LABEL_4;
  }
  *a6 = v17 + 50;
  uint64_t v18 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), v14, 6 * (unsigned __int16)(v17 + 50) + 6);
  if (v18)
  {
    uint64_t v14 = v18;
    unsigned int v16 = (unsigned __int16)*a5;
    unsigned __int16 v15 = *a7;
LABEL_4:
    cstdlib_strncpy((char *)(v14 + 6 * v16 + 2), (const char *)a3, v15);
    uint64_t result = 0;
    *(unsigned char *)(v14 + 6 * (unsigned __int16)*a5 + *a7 + 2) = 0;
    *(_WORD *)(v14 + 6 * (unsigned __int16)(*a5)++) = a2;
    *a4 = v14;
    return result;
  }
  log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_ARAPARSER", 54000, 0, v19, v20, v21, v22, v24);
  return 2356158474;
}

uint64_t embed_dict_getName(char *a1, char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  if (cstdlib_strstr(a1, "clm") == a1)
  {
    uint64_t v5 = cstdlib_strstr(a1, "_");
    if (!v5) {
      return 2693799943;
    }
    unint64_t v4 = v5;
    cstdlib_strncat((char *)v7, a1, v5 - a1);
    cstdlib_strcat((char *)v7, "_embed_dict");
  }
  else
  {
    cstdlib_strcat((char *)v7, a1);
    unint64_t v4 = "_embed_dict";
  }
  cstdlib_strcat((char *)v7, v4);
  cstdlib_strcpy(a2, (const char *)v7);
  return 0;
}

uint64_t embed_vect_getBrokerString(uint64_t a1, char *a2, char *a3, unsigned char *a4, size_t a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v12 = 0;
  __s2 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)int __s1 = 0u;
  long long v15 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v12);
    if ((result & 0x80000000) == 0)
    {
      if (cstdlib_strstr(a2, "clm") == a2)
      {
        uint64_t result = (uint64_t)cstdlib_strstr(a2, "_");
        if (!result) {
          return result;
        }
        uint64_t v11 = (const char *)result;
        cstdlib_strcpy(a3, "clmnn:");
        cstdlib_strncat(a3, a2, v11 - a2);
        cstdlib_strcat(a3, "_embed_vect");
        cstdlib_strcat(a3, v11);
        return 0;
      }
      if (cstdlib_strcmp(a2, "lid"))
      {
        cstdlib_strcat(__s1, a2);
        cstdlib_strcat(__s1, "_embed_vect");
        cstdlib_strcat(__s1, "_");
        cstdlib_strcat(__s1, __s2);
        cstdlib_strcat(__s1, "_");
        cstdlib_strcat(__s1, v12);
        uint64_t result = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a3, a5);
      }
      else
      {
        cstdlib_strcat(__s1, "ml2emb");
        uint64_t result = brokeraux_ComposeBrokerString(a1, __s1, 1, 0, __s2, 0, 0, a3, a5);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        cstdlib_strcpy(__s1, "ml2emb");
        cstdlib_strcat(__s1, __s2);
        uint64_t result = brokeraux_ComposeBrokerString(a1, __s1, 1, 0, __s2, 0, 0, a4, a5);
      }
      if ((result & 0x80000000) == 0) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t nn_word_lkp_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2693799937;
  }
  uint64_t result = 0;
  *a2 = &INnWordLkp;
  return result;
}

uint64_t nn_word_lkp_ObjOpen(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0;
  uint64_t v6 = 2693799943;
  if (a6)
  {
    *(void *)a6 = 0;
    *(_DWORD *)(a6 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a4, a5, &v28);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjOpen", v14, v15, v16, v26);
      long long v17 = (void *)heap_Calloc(*(void **)(v28 + 8), 1, 128);
      if (v17)
      {
        *(void *)a6 = v17;
        *(_DWORD *)(a6 + 8) = 62639;
        void *v17 = a1;
        v17[1] = a2;
        v17[2] = a4;
        v17[3] = a5;
        v17[4] = v28;
        v17[15] = a3;
        uint64_t v6 = nn_word_lkp_ObjOpenHelper((uint64_t)v17, a6);
        if ((v6 & 0x80000000) == 0) {
          log_OutText(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjOpen", v22, v23, v24, v27);
        }
      }
      else
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v18, v19, v20, v21, v27);
        return 2693799946;
      }
    }
  }
  return v6;
}

uint64_t nn_word_lkp_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  if (a1)
  {
    log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lookup_ObjClose", v4, v5, v6, v12);
    nn_word_lkp_ObjCloseHelper(a1);
    uint64_t v10 = a1[4];
    uint64_t v11 = *(void *)(v10 + 48);
    if (v11)
    {
      objc_ReleaseObject(v11, (uint64_t)"FE_DCTLKP");
      uint64_t v10 = a1[4];
    }
    log_OutText(*(void *)(v10 + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lookup_ObjClose", v7, v8, v9, v13);
    heap_Free(*(void **)(a1[4] + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t nn_word_lkp_ObjReopen(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = (void *)a1;
  uint64_t v13 = (void *)a1;
  uint64_t v14 = a2;
  uint64_t v7 = 2693799944;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0 && v3)
  {
    log_OutText(*(void *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Entering nn_word_lkp_ObjReOpen", v4, v5, v6, (uint64_t)v13);
    uint64_t v8 = nn_word_lkp_ObjCloseHelper(v3);
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v7 = v8;
    }
    else
    {
      uint64_t v7 = nn_word_lkp_ObjOpenHelper((uint64_t)v3, (uint64_t)&v13);
      if ((v7 & 0x80000000) == 0)
      {
        log_OutText(*(void *)(v3[4] + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"Leaving nn_word_lkp_ObjReOpen", v9, v10, v11, (uint64_t)v13);
        return v7;
      }
      uint64_t v3 = v13;
      int v2 = v14;
    }
    nn_word_lkp_ObjClose(v3, v2);
  }
  return v7;
}

uint64_t nn_word_lkp_getVectorLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  *a3 = *(_DWORD *)(a1 + 68);
  return result;
}

uint64_t nn_word_lkp_getVectorExtLength(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62639, 128);
  if ((result & 0x80000000) != 0) {
    return 2693799944;
  }
  *a3 = *(_DWORD *)(a1 + 72);
  return result;
}

uint64_t nn_word_lkp_word2fvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  __int16 v33 = 0;
  uint64_t v7 = 2693799944;
  char v32 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (cstdlib_strstr(__s, "lid") || cstdlib_strstr(__s, "clm") == __s) {
        __int16 v33 = 1;
      }
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
      size_t v13 = cstdlib_strlen(__s);
      uint64_t v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v31);
        return 2693799946;
      }
      uint64_t v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v19, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (!v33)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
    int v24 = cstdlib_atoi(*v34);
    unsigned int v28 = *(_DWORD *)(a1 + 64);
    if (v28 <= 6)
    {
      if (((1 << v28) & 0x12) != 0) {
        return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 0, a4, v25, v26, v27);
      }
      if (((1 << v28) & 0x24) != 0) {
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 0, a4, v25, v26, v27);
      }
      if (((1 << v28) & 0x48) != 0) {
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 0, a4, v25, v26, v27);
      }
    }
    log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
    return 2693799952;
  }
  return v7;
}

uint64_t nn_word_lkp_word2extfvector(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  __int16 v33 = 0;
  uint64_t v7 = 2693799944;
  char v32 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v36 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v34, &v33, &v32);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
      size_t v13 = cstdlib_strlen(__s);
      uint64_t v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v31);
        return 2693799946;
      }
      uint64_t v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v19, a3, &v34, &v33, &v32, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (v33)
    {
      int v24 = cstdlib_atoi(*v34);
      int v28 = *(_DWORD *)(a1 + 64);
      if (v28 == 6) {
        return nn_word_lkp_get_vector_binary(a1, v24, a3, 1, a4, v25, v26, v27);
      }
      if (v28 == 5) {
        return nn_word_lkp_get_vector_u8kmeans(a1, v24, a3, 1, a4, v25, v26, v27);
      }
      if (v28 != 4)
      {
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v25, v26, v27, *(unsigned int *)(a1 + 64));
        return 2693799952;
      }
      return nn_word_lkp_get_vector_u16linear(a1, v24, a3, 1, a4, v25, v26, v27);
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_word2id(uint64_t a1, int a2, uint64_t a3, float *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v28 = 0;
  __int16 v27 = 0;
  uint64_t v7 = 2693799944;
  char v26 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)char __s = 0u;
  long long v30 = 0u;
  if ((safeh_HandleCheck(a1, a2, 62639, 128) & 0x80000000) == 0)
  {
    int Name = embed_dict_getName(*(char **)(a1 + 120), __s);
    if (Name < 0)
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to generate the embedding dict name. Returns %u", v9, v10, v11, Name & 0x1FFF);
      return v7;
    }
    if (*(_DWORD *)(a1 + 84) < 2u)
    {
      if (cstdlib_strstr(__s, "lid") || cstdlib_strstr(__s, "clm") == __s) {
        __int16 v27 = 1;
      }
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *))(*(void *)(a1 + 40) + 96))(*(void *)(a1 + 48), *(void *)(a1 + 56), __s, a3, &v28, &v27, &v26);
      if ((v20 & 0x80000000) != 0)
      {
LABEL_6:
        log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to lookup word %s returns %u", v21, v22, v23, a3);
        return v20;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
      size_t v13 = cstdlib_strlen(__s);
      uint64_t v14 = (char *)heap_Alloc(v12, v13 + 2);
      if (!v14)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v15, v16, v17, v18, v25);
        return 2693799946;
      }
      uint64_t v19 = v14;
      cstdlib_strcpy(v14, __s);
      cstdlib_strcat(v19, "_");
      uint64_t v20 = (*(uint64_t (**)(void, void, char *, uint64_t, unsigned __int8 ***, __int16 *, char *, void))(*(void *)(a1 + 40) + 152))(*(void *)(a1 + 48), *(void *)(a1 + 56), v19, a3, &v28, &v27, &v26, *(unsigned __int8 *)(a1 + 84));
      heap_Free(*(void **)(*(void *)(a1 + 32) + 8), (uint64_t)v19);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_6;
      }
    }
    if (v27)
    {
      uint64_t v7 = 0;
      *a4 = (float)(int)cstdlib_atoi(*v28);
    }
    else
    {
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 4, 0, (uint64_t)"No index found for word %s", v21, v22, v23, a3);
      return 2693799956;
    }
  }
  return v7;
}

uint64_t nn_word_lkp_ObjOpenHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v51 = 0;
  memset(v57, 0, sizeof(v57));
  memset(v56, 0, sizeof(v56));
  uint64_t BrokerString = embed_vect_getBrokerString(*(void *)(a1 + 32), *(char **)(a1 + 120), (char *)v57, v56, 0x100uLL);
  if ((BrokerString & 0x80000000) != 0)
  {
    uint64_t v9 = BrokerString;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
    uint64_t v11 = v9 & 0x1FFF;
    uint64_t v12 = "Failed to generate the embedding vector brokerstring. Returns %u";
LABEL_34:
    log_OutText(v10, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v12, v5, v6, v7, v11);
    goto LABEL_35;
  }
  if ((ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), 2, (const char *)v56, "CRPH", 5, (uint64_t *)&v51) & 0x80000000) != 0)
  {
    uint64_t v13 = ssftriff_reader_ObjOpen(*(_WORD **)(a1 + 16), *(void *)(a1 + 24), 0, (const char *)v57, "CRPH", 5, (uint64_t *)&v51);
    uint64_t v17 = *(void *)(a1 + 32);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v9 = v13;
      log_OutText(*(void *)(v17 + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to open the word vector riff file (%s). Returns %u", v14, v15, v16, (uint64_t)v57);
      goto LABEL_35;
    }
    uint64_t v8 = *(void *)(v17 + 24);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 24);
  }
  uint64_t v18 = brk_DataOpen(v8);
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v9 = v18;
    goto LABEL_35;
  }
  uint64_t v19 = v51;
  char v55 = 0;
  unsigned int v53 = 0;
  *(_DWORD *)int __s1 = 0;
  int __src = 0;
  uint64_t v20 = ssftriff_reader_OpenChunk((uint64_t)v51, (__int32 *)__s1, &v53, &__src);
  if ((v20 & 0x80000000) != 0)
  {
LABEL_33:
    uint64_t v9 = v20;
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
    uint64_t v11 = v9 & 0x1FFF;
    uint64_t v12 = "Failed to open riff chunk. Returns %u";
    goto LABEL_34;
  }
  if (!cstdlib_strcmp(__s1, "HEAD"))
  {
    uint64_t v11 = v53;
    if (v53 > 0xF)
    {
      uint64_t v21 = (char *)__src;
      uint64_t v22 = *(void *)__src;
      *(void *)(a1 + 64) = *(void *)__src;
      if ((v22 - 4) > 2)
      {
        int v23 = 0;
        uint64_t v24 = 2;
      }
      else
      {
        int v23 = *((_DWORD *)v21 + 2);
        uint64_t v24 = 3;
      }
      *(_DWORD *)(a1 + 72) = v23;
      *(_DWORD *)(a1 + 84) = *(_DWORD *)&v21[4 * v24];
      switch((int)v22)
      {
        case 1:
          int32x2_t v26 = *(int32x2_t *)(v21 + 12);
          goto LABEL_25;
        case 2:
        case 3:
          int v25 = *((_DWORD *)v21 + 3);
          goto LABEL_21;
        case 4:
          int32x2_t v26 = *(int32x2_t *)(v21 + 16);
LABEL_25:
          *(float32x2_t *)(a1 + 76) = vcvt_f32_s32(v26);
          *(_DWORD *)(a1 + 88) = 0;
          goto LABEL_26;
        case 5:
        case 6:
          int v25 = *((_DWORD *)v21 + 4);
LABEL_21:
          *(_DWORD *)(a1 + 88) = v25;
          *(_DWORD *)(a1 + 76) = 0;
          *(_DWORD *)(a1 + 80) = 0;
LABEL_26:
          uint64_t v27 = ssftriff_reader_CloseChunk((uint64_t)v19);
          if ((v27 & 0x80000000) != 0) {
            goto LABEL_51;
          }
          int v28 = v51;
          char v55 = 0;
          unsigned int v53 = 0;
          *(_DWORD *)int __s1 = 0;
          int __src = 0;
          uint64_t v20 = ssftriff_reader_OpenChunk((uint64_t)v51, (__int32 *)__s1, &v53, &__src);
          if ((v20 & 0x80000000) != 0) {
            goto LABEL_33;
          }
          if (cstdlib_strcmp(__s1, "VECT")) {
            goto LABEL_10;
          }
          unsigned int v29 = *(_DWORD *)(a1 + 64);
          if (v29 <= 6 && ((1 << v29) & 0x6C) != 0)
          {
            size_t v30 = (4 * *(_DWORD *)(a1 + 88));
            long long v31 = (void *)heap_Calloc(*(void **)(*(void *)(a1 + 32) + 8), 1, v30);
            *(void *)(a1 + 104) = v31;
            if (!v31)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 41000, 0, v32, v33, v34, v35, v50);
              uint64_t v9 = 2693799946;
              goto LABEL_35;
            }
            cstdlib_memcpy(v31, __src, v30);
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v28) + v30;
            unsigned int v36 = v53 - v30;
          }
          else
          {
            *(_DWORD *)(a1 + 112) = ssftriff_reader_GetPosition((uint64_t)v28);
            unsigned int v36 = v53;
          }
          *(_DWORD *)(a1 + 116) = v36;
          uint64_t v27 = ssftriff_reader_CloseChunk((uint64_t)v28);
          if ((v27 & 0x80000000) != 0)
          {
LABEL_51:
            uint64_t v9 = v27;
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
            uint64_t v11 = v9 & 0x1FFF;
            uint64_t v12 = "Failed to close riff chunk. Returns %u";
          }
          else
          {
            uint64_t v48 = ssftriff_reader_ObjClose(v51, v44, v45, v46, v47, v5, v6, v7);
            uint64_t v51 = 0;
            if ((v48 & 0x80000000) != 0)
            {
              uint64_t v9 = v48;
              uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
              uint64_t v11 = v9 & 0x1FFF;
              uint64_t v12 = "Failed to close the riff file; ssftriff_reader_ObjClose returns %u";
            }
            else
            {
              uint64_t Interface = fe_dctlkp_GetInterface(1u, (void *)(a1 + 40));
              if ((Interface & 0x80000000) != 0)
              {
                uint64_t v9 = Interface;
                uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
                uint64_t v11 = v9 & 0x1FFF;
                uint64_t v12 = "fe_dctlkp_GetInterface returns %u";
              }
              else
              {
                uint64_t v9 = (*(uint64_t (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 40) + 32))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a1 + 48);
                if ((v9 & 0x80000000) == 0) {
                  goto LABEL_35;
                }
                uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
                uint64_t v11 = v9 & 0x1FFF;
                uint64_t v12 = "pfObjOpen returns %u";
              }
            }
          }
          break;
        default:
          log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid or unsupported vector data format %u", v5, v6, v7, v22);
          uint64_t v9 = 2693799952;
          goto LABEL_35;
      }
    }
    else
    {
      uint64_t v9 = 2693799953;
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v12 = "Found riff chunk of size %u. Expected at least %u";
    }
    goto LABEL_34;
  }
LABEL_10:
  uint64_t v9 = 2693799953;
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Found riff chunk (%s). Expected %s", v5, v6, v7, (uint64_t)__s1);
LABEL_35:
  if (v51)
  {
    unsigned int v37 = ssftriff_reader_CloseChunk((uint64_t)v51);
    if ((v37 & 0x80000000) != 0)
    {
      unsigned int v41 = v37;
      log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; ssftriff_reader_CloseChunk returns %u",
        v38,
        v39,
        v40,
        v37 & 0x1FFF);
      if ((int)v9 >= 0) {
        uint64_t v9 = v41;
      }
      else {
        uint64_t v9 = v9;
      }
      goto LABEL_42;
    }
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_42:
    nn_word_lkp_ObjClose(*(void **)a2, *(void *)(a2 + 8));
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = safeh_GetNullHandle();
    *(void *)(a2 + 8) = v42;
  }
  return v9;
}

uint64_t nn_word_lkp_ObjCloseHelper(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2 && (uint64_t v3 = (*(uint64_t (**)(void, void))(v2 + 40))(a1[6], a1[7]), (v3 & 0x80000000) != 0))
  {
    uint64_t v7 = v3;
    log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close dct. pIDct->pfObjClose returns %u", v4, v5, v6, v3 & 0x1FFF);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[13];
  if (v8)
  {
    heap_Free(*(void **)(a1[4] + 8), v8);
    a1[13] = 0;
  }
  uint64_t v9 = a1[12];
  if (v9)
  {
    unsigned int v10 = brk_DataClose(*(void *)(a1[4] + 24), v9);
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v14 = v10;
      log_OutText(*(void *)(a1[4] + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Failed to close the riff file; brk_DataClose returns %u",
        v11,
        v12,
        v13,
        v10 & 0x1FFF);
      if (v7) {
        return v7;
      }
      else {
        return v14;
      }
    }
  }
  return v7;
}

uint64_t nn_word_lkp_get_vector_u16linear(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = *(_DWORD *)(a1 + 116) - v10;
  uint64_t v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v9;
    }
    uint64_t v15 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, (2 * v14), (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v12 = v15;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int32x2_t v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v20 = v28;
      if (v14)
      {
        unint64_t v21 = 0;
        unint64_t v22 = *(unsigned int *)(a1 + 68);
        do
        {
          LOWORD(v19) = *(_WORD *)(v20 + 2 * v21);
          float v19 = (float)LODWORD(v19);
          if (v21 < v22) {
            float v19 = *(float *)(a1 + 76)
          }
                + (float)((float)((float)(*(float *)(a1 + 80) - *(float *)(a1 + 76)) * v19) * 0.000030518);
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      uint64_t v23 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v12 = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int32x2_t v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_binary(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = (v10 + 7) >> 3;
  unsigned int v12 = *(_DWORD *)(a1 + 116) - v11;
  uint64_t v35 = 0;
  if (v11 * a2 <= v12)
  {
    if (a4) {
      unsigned int v15 = v10;
    }
    else {
      unsigned int v15 = v9;
    }
    if (a4) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = (v9 + 7) >> 3;
    }
    uint64_t v17 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v11 * a2, v16, (uint64_t)&v35);
    if ((v17 & 0x80000000) != 0)
    {
      uint64_t v13 = v17;
      uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v32 = v13 & 0x1FFF;
      uint64_t v33 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v21 = v35;
      if (v16)
      {
        unint64_t v22 = 0;
        unint64_t v23 = (*(_DWORD *)(a1 + 68) + 7) >> 3;
        uint64_t v24 = (float *)(a5 + 16);
        do
        {
          unsigned int v25 = *(unsigned __int8 *)(v21 + v22);
          if (v15 >= 8) {
            int v26 = 8;
          }
          else {
            int v26 = v15;
          }
          unsigned int v27 = v25 >> 7;
          if (v22 >= v23)
          {
            switch(v26)
            {
              case 1:
                goto LABEL_40;
              case 2:
                goto LABEL_39;
              case 3:
                goto LABEL_38;
              case 4:
                goto LABEL_37;
              case 5:
                goto LABEL_36;
              case 6:
                goto LABEL_35;
              case 7:
                goto LABEL_34;
              default:
                v24[3] = (float)(v25 & 1);
LABEL_34:
                v24[2] = (float)((v25 >> 1) & 1);
LABEL_35:
                v24[1] = (float)((v25 >> 2) & 1);
LABEL_36:
                float *v24 = (float)((v25 >> 3) & 1);
LABEL_37:
                *(v24 - 1) = (float)((v25 >> 4) & 1);
LABEL_38:
                *(v24 - 2) = (float)((v25 >> 5) & 1);
LABEL_39:
                *(v24 - 3) = (float)((v25 >> 6) & 1);
LABEL_40:
                float v29 = (float)v27;
                break;
            }
          }
          else
          {
            switch(v26)
            {
              case 1:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_32;
              case 2:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_31;
              case 3:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_30;
              case 4:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_29;
              case 5:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_28;
              case 6:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_27;
              case 7:
                uint64_t v28 = *(void *)(a1 + 104);
                goto LABEL_26;
              default:
                uint64_t v28 = *(void *)(a1 + 104);
                v24[3] = *(float *)(v28 + 4 * (v25 & 1));
LABEL_26:
                v24[2] = *(float *)(v28 + 4 * ((v25 >> 1) & 1));
LABEL_27:
                v24[1] = *(float *)(v28 + 4 * ((v25 >> 2) & 1));
LABEL_28:
                float *v24 = *(float *)(v28 + 4 * ((v25 >> 3) & 1));
LABEL_29:
                *(v24 - 1) = *(float *)(v28 + 4 * ((v25 >> 4) & 1));
LABEL_30:
                *(v24 - 2) = *(float *)(v28 + 4 * ((v25 >> 5) & 1));
LABEL_31:
                *(v24 - 3) = *(float *)(v28 + 4 * ((v25 >> 6) & 1));
LABEL_32:
                float v29 = *(float *)(v28 + 4 * v27);
                break;
            }
          }
          *(v24 - 4) = v29;
          ++v22;
          v24 += 8;
          v15 -= 8;
        }
        while (v16 != v22);
      }
      uint64_t v30 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v21);
      if ((v30 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v13 = v30;
      uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v32 = v13 & 0x1FFF;
      uint64_t v33 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v31, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v33, v18, v19, v20, v32);
    return v13;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t nn_word_lkp_get_vector_u8kmeans(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 72) + v9;
  unsigned int v11 = *(_DWORD *)(a1 + 116) - v10;
  uint64_t v28 = 0;
  if (v10 * a2 <= v11)
  {
    if (a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v9;
    }
    uint64_t v15 = brk_DataMap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), *(_DWORD *)(a1 + 112) + v10 * a2, v14, (uint64_t)&v28);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v12 = v15;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int v26 = "Failed to map data, brk_DataMap returns %u.";
    }
    else
    {
      uint64_t v20 = v28;
      if (v14)
      {
        unint64_t v21 = 0;
        unint64_t v22 = *(unsigned int *)(a1 + 68);
        do
        {
          if (v21 >= v22)
          {
            LOBYTE(v19) = *(unsigned char *)(v20 + v21);
            float v19 = (float)LODWORD(v19);
          }
          else
          {
            float v19 = *(float *)(*(void *)(a1 + 104) + 4 * *(unsigned __int8 *)(v20 + v21));
          }
          *(float *)(a5 + 4 * v21++) = v19;
        }
        while (v14 != v21);
      }
      uint64_t v23 = brk_DataUnmap(*(void *)(*(void *)(a1 + 32) + 24), *(void *)(a1 + 96), v20);
      if ((v23 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v12 = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 32);
      uint64_t v25 = v12 & 0x1FFF;
      int v26 = "Failed to unmap data, brk_DataUnMap returns %u.";
    }
    log_OutText(v24, (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)v26, v16, v17, v18, v25);
    return v12;
  }
  log_OutText(*(void *)(*(void *)(a1 + 32) + 32), (uint64_t)"NN_WORD_LKP", 0, 0, (uint64_t)"Got invalid index for word %s, (%u > %u)", a6, a7, a8, a3);
  return 2693799952;
}

uint64_t tnplus_sentences_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = 3222282247;
  if (a3)
  {
    if (a2)
    {
      uint64_t v5 = heap_Calloc(*(void **)(a1 + 8), a2, 16);
      *a3 = v5;
      if (v5) {
        return 0;
      }
      else {
        return 3222282250;
      }
    }
    else
    {
      uint64_t v3 = 0;
      *a3 = 0;
    }
  }
  return v3;
}

void *tnplus_sentences_free(void *result, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = result;
    unint64_t v6 = *a2;
    if (v6)
    {
      for (unint64_t i = 0; i < v6; ++i)
      {
        uint64_t v8 = (unsigned int *)(*a3 + 16 * i);
        unsigned int v10 = (uint64_t *)(v8 + 2);
        uint64_t v9 = *((void *)v8 + 1);
        if (v9)
        {
          if (*v8)
          {
            uint64_t v11 = 0;
            unint64_t v12 = 0;
            do
            {
              tnplus_word_freeParts((uint64_t *)(*v10 + v11), (void *)v5[1]);
              ++v12;
              v11 += 160;
            }
            while (v12 < *v8);
            uint64_t v9 = *v10;
          }
          heap_Free((void *)v5[1], v9);
          *unsigned int v10 = 0;
          *uint64_t v8 = 0;
          unint64_t v6 = *a2;
        }
      }
    }
    uint64_t result = heap_Free((void *)v5[1], *a3);
    *a3 = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t tnplus_words_alloc(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = 3222282247;
  if (a3)
  {
    if (a2)
    {
      uint64_t v5 = heap_Calloc(*(void **)(a1 + 8), a2, 160);
      *a3 = v5;
      if (v5) {
        return 0;
      }
      else {
        return 3222282250;
      }
    }
    else
    {
      uint64_t v3 = 0;
      *a3 = 0;
    }
  }
  return v3;
}

uint64_t tnplus_word_copyParts(char **a1, void *a2, void *a3)
{
  if (!a1) {
    return 1;
  }
  if (!a3) {
    return 1;
  }
  uint64_t result = hlp_DuplicateString(a2, *a1, a3);
  if (result)
  {
    uint64_t result = hlp_DuplicateString(a2, a1[1], a3 + 1);
    if (result)
    {
      uint64_t result = hlp_DuplicateString(a2, a1[2], a3 + 2);
      if (result)
      {
        uint64_t result = hlp_DuplicateString(a2, a1[3], a3 + 3);
        if (result)
        {
          uint64_t result = hlp_DuplicateString(a2, a1[4], a3 + 4);
          if (result)
          {
            uint64_t result = hlp_DuplicateString(a2, a1[6], a3 + 6);
            if (result)
            {
              uint64_t result = hlp_DuplicateString(a2, a1[7], a3 + 7);
              if (result)
              {
                uint64_t result = hlp_DuplicateString(a2, a1[9], a3 + 9);
                if (result)
                {
                  uint64_t result = hlp_DuplicateString(a2, a1[10], a3 + 10);
                  if (result)
                  {
                    uint64_t result = hlp_DuplicateString(a2, a1[11], a3 + 11);
                    if (result)
                    {
                      uint64_t result = hlp_DuplicateString(a2, a1[12], a3 + 12);
                      if (result)
                      {
                        uint64_t result = hlp_DuplicateString(a2, a1[13], a3 + 13);
                        if (result)
                        {
                          uint64_t result = hlp_DuplicateString(a2, a1[15], a3 + 15);
                          if (result)
                          {
                            uint64_t result = hlp_DuplicateString(a2, a1[19], a3 + 19);
                            if (result) {
                              return 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_DuplicateString(void *a1, char *__s, void *a3)
{
  if (!a3) {
    return 0;
  }
  if (__s)
  {
    size_t v6 = cstdlib_strlen(__s);
    uint64_t result = heap_Calloc(a1, v6 + 1, 1);
    *a3 = result;
    if (!result) {
      return result;
    }
    cstdlib_strcpy((char *)result, __s);
  }
  else
  {
    *a3 = 0;
  }
  return 1;
}

uint64_t *tnplus_word_freeParts(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*result)
    {
      uint64_t result = heap_Free(a2, *result);
      *uint64_t v3 = 0;
    }
    uint64_t v4 = v3[1];
    if (v4)
    {
      uint64_t result = heap_Free(a2, v4);
      v3[1] = 0;
    }
    uint64_t v5 = v3[2];
    if (v5)
    {
      uint64_t result = heap_Free(a2, v5);
      v3[2] = 0;
    }
    uint64_t v6 = v3[3];
    if (v6)
    {
      uint64_t result = heap_Free(a2, v6);
      v3[3] = 0;
    }
    uint64_t v7 = v3[4];
    if (v7)
    {
      uint64_t result = heap_Free(a2, v7);
      v3[4] = 0;
    }
    uint64_t v8 = v3[6];
    if (v8)
    {
      uint64_t result = heap_Free(a2, v8);
      v3[6] = 0;
    }
    uint64_t v9 = v3[7];
    if (v9)
    {
      uint64_t result = heap_Free(a2, v9);
      v3[7] = 0;
    }
    uint64_t v10 = v3[9];
    if (v10)
    {
      uint64_t result = heap_Free(a2, v10);
      v3[9] = 0;
    }
    uint64_t v11 = v3[10];
    if (v11)
    {
      uint64_t result = heap_Free(a2, v11);
      v3[10] = 0;
    }
    uint64_t v12 = v3[11];
    if (v12)
    {
      uint64_t result = heap_Free(a2, v12);
      v3[11] = 0;
    }
    uint64_t v13 = v3[12];
    if (v13)
    {
      uint64_t result = heap_Free(a2, v13);
      v3[12] = 0;
    }
    uint64_t v14 = v3[13];
    if (v14)
    {
      uint64_t result = heap_Free(a2, v14);
      v3[13] = 0;
    }
    uint64_t v15 = v3[15];
    if (v15)
    {
      uint64_t result = heap_Free(a2, v15);
      v3[15] = 0;
    }
    uint64_t v16 = v3[19];
    if (v16)
    {
      uint64_t result = heap_Free(a2, v16);
      v3[19] = 0;
    }
  }
  return result;
}

char *tnplus_words_createTSOInfoString(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unsigned int v8 = a4 / 0xA0;
  uint64_t v66 = 200 * (a4 / 0xA0);
  uint64_t result = (char *)heap_Calloc(*(void **)(a1 + 8), v66, 1);
  if (result)
  {
    uint64_t v10 = result;
    snprintf(__str, 0x80uLL, "%s, %lu geene words:", a2, v8);
    uint64_t appended = hlp_AppendString(a1, v10, &v66, __str);
    if (a4 >= 0xA0)
    {
      uint64_t v12 = 0;
      if (v8 <= 1) {
        unsigned int v13 = 1;
      }
      else {
        unsigned int v13 = v8;
      }
      uint64_t v14 = 160 * v13;
      do
      {
        uint64_t v15 = hlp_AppendString(a1, appended, &v66, "\n------------------------");
        uint64_t v16 = hlp_AppendString(a1, v15, &v66, "\northo=");
        uint64_t v17 = a3 + v12;
        uint64_t v18 = hlp_AppendString(a1, v16, &v66, *(const char **)(a3 + v12));
        float v19 = hlp_AppendString(a1, v18, &v66, "\nphon=");
        uint64_t v20 = hlp_AppendString(a1, v19, &v66, *(const char **)(a3 + v12 + 8));
        unint64_t v21 = hlp_AppendString(a1, v20, &v66, "\npunc.beg=");
        unint64_t v22 = hlp_AppendString(a1, v21, &v66, *(const char **)(a3 + v12 + 16));
        uint64_t v23 = hlp_AppendString(a1, v22, &v66, "\npunc.end=");
        uint64_t v24 = hlp_AppendString(a1, v23, &v66, *(const char **)(a3 + v12 + 24));
        uint64_t v25 = hlp_AppendString(a1, v24, &v66, "\nmetadata.token=");
        int v26 = hlp_AppendString(a1, v25, &v66, *(const char **)(a3 + v12 + 32));
        unsigned int v27 = hlp_AppendString(a1, v26, &v66, "\nmetadata.spell=");
        if (*(_DWORD *)(a3 + v12 + 40)) {
          uint64_t v28 = "true";
        }
        else {
          uint64_t v28 = "false";
        }
        cstdlib_strcpy(__dst, v28);
        float v29 = hlp_AppendString(a1, v27, &v66, __dst);
        uint64_t v30 = hlp_AppendString(a1, v29, &v66, "\nmetadata.stylename=");
        uint64_t v31 = hlp_AppendString(a1, v30, &v66, *(const char **)(v17 + 48));
        uint64_t v32 = hlp_AppendString(a1, v31, &v66, "\nmetadata.styleintensity=");
        uint64_t v33 = hlp_AppendString(a1, v32, &v66, *(const char **)(v17 + 56));
        uint64_t v34 = hlp_AppendString(a1, v33, &v66, "\nmetadata.compund=");
        if (*(_DWORD *)(v17 + 64)) {
          uint64_t v35 = "true";
        }
        else {
          uint64_t v35 = "false";
        }
        cstdlib_strcpy(__dst, v35);
        unsigned int v36 = hlp_AppendString(a1, v34, &v66, __dst);
        unsigned int v37 = hlp_AppendString(a1, v36, &v66, "\nmetadata.oriorthjoined=");
        if (*(_DWORD *)(v17 + 68)) {
          uint64_t v38 = "true";
        }
        else {
          uint64_t v38 = "false";
        }
        cstdlib_strcpy(__dst, v38);
        uint64_t v39 = hlp_AppendString(a1, v37, &v66, __dst);
        uint64_t v40 = hlp_AppendString(a1, v39, &v66, "\nmetadata.phrasetype=");
        unsigned int v41 = hlp_AppendString(a1, v40, &v66, *(const char **)(v17 + 72));
        uint64_t v42 = hlp_AppendString(a1, v41, &v66, "\nmetadata.language=");
        long long v43 = hlp_AppendString(a1, v42, &v66, *(const char **)(v17 + 80));
        uint64_t v44 = hlp_AppendString(a1, v43, &v66, "\nmetadata.audiosrc=");
        uint64_t v45 = hlp_AppendString(a1, v44, &v66, *(const char **)(v17 + 88));
        uint64_t v46 = hlp_AppendString(a1, v45, &v66, "\nmetadata.origortho=");
        uint64_t v47 = hlp_AppendString(a1, v46, &v66, *(const char **)(v17 + 96));
        uint64_t v48 = hlp_AppendString(a1, v47, &v66, "\nmetadata.break=");
        long long v49 = hlp_AppendString(a1, v48, &v66, *(const char **)(v17 + 104));
        unsigned int v50 = hlp_AppendString(a1, v49, &v66, "\nmetadata.userphon=");
        if (*(_DWORD *)(v17 + 112)) {
          uint64_t v51 = "true";
        }
        else {
          uint64_t v51 = "false";
        }
        cstdlib_strcpy(__dst, v51);
        BOOL v52 = hlp_AppendString(a1, v50, &v66, __dst);
        unsigned int v53 = hlp_AppendString(a1, v52, &v66, "\nmetadata.tone=");
        int v54 = hlp_AppendString(a1, v53, &v66, *(const char **)(v17 + 120));
        char v55 = hlp_AppendString(a1, v54, &v66, "\nmetadata.sildur=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v17 + 128));
        int v56 = hlp_AppendString(a1, v55, &v66, __dst);
        unsigned __int16 v57 = hlp_AppendString(a1, v56, &v66, "\nmetadata.volume=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v17 + 132));
        uint64_t v58 = hlp_AppendString(a1, v57, &v66, __dst);
        uint64_t v59 = hlp_AppendString(a1, v58, &v66, "\nmetadata.pitch=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v17 + 136));
        uint64_t v60 = hlp_AppendString(a1, v59, &v66, __dst);
        int v61 = hlp_AppendString(a1, v60, &v66, "\nmetadata.rate=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v17 + 140));
        unsigned __int16 v62 = hlp_AppendString(a1, v61, &v66, __dst);
        unint64_t v63 = hlp_AppendString(a1, v62, &v66, "\nmetadata.timbre=");
        snprintf(__dst, 0x64uLL, "%d", *(_DWORD *)(v17 + 144));
        uint64_t v64 = hlp_AppendString(a1, v63, &v66, __dst);
        int v65 = hlp_AppendString(a1, v64, &v66, "\nmetadata.loo=");
        uint64_t appended = hlp_AppendString(a1, v65, &v66, *(const char **)(v17 + 152));
        v12 += 160;
      }
      while (v14 != v12);
    }
    return hlp_AppendString(a1, appended, &v66, "\n");
  }
  return result;
}

char *hlp_AppendString(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  uint64_t v6 = __s;
  size_t v8 = cstdlib_strlen(__s);
  if (v8 + cstdlib_strlen(a4) + 1 >= *a3)
  {
    uint64_t v9 = *a3;
    uint64_t v10 = v9 + cstdlib_strlen(a4) + 128;
    uint64_t v11 = (char *)heap_Calloc(*(void **)(a1 + 8), v10, 1);
    if (v11)
    {
      uint64_t v12 = v11;
      cstdlib_strcat(v11, v6);
      cstdlib_strcat(v12, a4);
      heap_Free(*(void **)(a1 + 8), (uint64_t)v6);
      *a3 = v10;
      return v12;
    }
  }
  else
  {
    cstdlib_strcat(v6, a4);
  }
  return v6;
}

uint64_t p_xcoder_ObjOpen(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v10);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v3 = (void *)heap_Alloc(*(void *)(v10 + 8), 4);
    *(void *)(a1 + 280) = v3;
    if (v3)
    {
      cstdlib_memset(v3, 0, 4uLL);
    }
    else
    {
      log_OutPublic(*(void *)(v10 + 32), (uint64_t)"XCODER", 15000, 0, v4, v5, v6, v7, v9);
      return 2282758154;
    }
  }
  return inited;
}

uint64_t p_xcoder_ObjClose(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v4);
  if ((inited & 0x80000000) == 0)
  {
    heap_Free(*(void **)(v4 + 8), *(void *)(a1 + 280));
    *(void *)(a1 + 280) = 0;
  }
  return inited;
}

uint64_t p_xcoder_OpenXCoder(uint64_t a1)
{
  uint64_t v14 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v14);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 144))
  {
    **(_DWORD **)(a1 + 280) = 0;
    if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
    {
      uint64_t v11 = 2282758145;
      log_OutPublic(*(void *)(v14 + 32), (uint64_t)"XCODER", 15004, (uint64_t)"%s%s%s%s", v7, v8, v9, v10, "charsetIn");
    }
    else
    {
      uint64_t v11 = 0;
      **(_DWORD **)(a1 + 280) = 2;
    }
  }
  else
  {
    log_OutPublic(*(void *)(v14 + 32), (uint64_t)"XCODER", 15002, 0, v3, v4, v5, v6, v13);
    uint64_t v11 = 2282758151;
  }
  *(_DWORD *)(a1 + 272) = v11;
  return v11;
}

uint64_t p_xcoder_ResetXCoder()
{
  return 0;
}

uint64_t p_xcoder_Convert(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5, unsigned int a6, unsigned int *a7, _DWORD *a8)
{
  uint64_t v28 = 0;
  *a4 = 0;
  *a7 = 0;
  uint64_t inited = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v21 = 2282758158;
  if (**(_DWORD **)(a1 + 280) == 2)
  {
    if (a3)
    {
      uint64_t v21 = 2282758405;
      goto LABEL_10;
    }
    uint64_t v21 = utf8_Utf16ToUtf8(a2, a3 >> 1, a4, a5, a6, a7, a8);
    int v22 = v21 & 0x1FFF;
    if ((v21 & 0x1FFF) != 0 && v22 != 7)
    {
      if (v22 == 9)
      {
        uint64_t v23 = *(void *)(v28 + 32);
        uint64_t v24 = 15015;
        uint64_t v25 = 0;
LABEL_11:
        log_OutPublic(v23, (uint64_t)"XCODER", v24, (uint64_t)v25, v17, v18, v19, v20, v27);
        return v21;
      }
LABEL_10:
      uint64_t v23 = *(void *)(v28 + 32);
      unsigned int v27 = "input";
      uint64_t v25 = "%s%s%s%s%s%x";
      uint64_t v24 = 15016;
      goto LABEL_11;
    }
  }
  return v21;
}

uint64_t xcoder_mrksync_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2282758145;
  }
  uint64_t result = 0;
  *a2 = &IXCoderMrkSync;
  return result;
}

uint64_t xcoder_mrksync_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Object = 2282758151;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        uint64_t v12 = (void *)heap_Calloc(*(void **)(v24 + 8), 1, 72);
        if (v12)
        {
          uint64_t v17 = (uint64_t)v12;
          *uint64_t v12 = a3;
          v12[1] = a4;
          uint64_t Object = objc_GetObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23);
          if ((Object & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
            heap_Free(*(void **)(v24 + 8), v17);
          }
          else
          {
            *(void *)(v17 + 16) = *(void *)(v23 + 8);
            *(void *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 854;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return Object;
}

uint64_t xcoder_mrksync_ObjClose(void *a1, int a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v6, &v5);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = objc_ReleaseObject(*(void *)(v6 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v3 & 0x80000000) == 0) {
    heap_Free(*(void **)(v6 + 8), v5);
  }
  return v3;
}

uint64_t xcoder_mrksync_ProcessStart(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v17, &v16);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  uint64_t v7 = v16;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(v16 + 16) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
          0,
          0,
          v16 + 24) & 0x80000000) != 0)
    return 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, void, uint64_t))(*(void *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
         0,
         0,
         v7 + 40);
  if ((v8 & 0x80000000) != 0)
  {
    uint64_t v13 = v8;
    uint64_t v14 = 15026;
    goto LABEL_9;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(v7 + 16) + 64))(a3, a4, 129, "application/x-realspeak-markers-pp;version=4.0",
          0,
          1,
          v7 + 56);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v14 = 15027;
LABEL_9:
    log_OutPublic(*(void *)(v17 + 32), (uint64_t)"XCODER", v14, (uint64_t)"%s%s", v9, v10, v11, v12, "contentType");
  }
  return v13;
}

uint64_t xcoder_mrksync_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v56 = 0;
  size_t __n = 0;
  uint64_t v55 = 0;
  BOOL v52 = 0;
  unsigned int v53 = 0;
  unsigned int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v6 = p_xcoder_mrksync_BeginFunction(a1, a2, &v55, &v56);
  if ((v6 & 0x80000000) != 0) {
    return v6;
  }
  *a5 = 1;
  uint64_t v7 = v56;
  if (!v56[7]) {
    return 0;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void, size_t *, char *))(v56[2] + 144))(v56[5], v56[6], &__n, (char *)&__n + 4);
  if ((v12 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15028, (uint64_t)"%s%s%s%x", v8, v9, v10, v11, "stream");
    return v12;
  }
  if (__n)
  {
    uint64_t v13 = (*(uint64_t (**)(void, void, char **, size_t *))(v7[2] + 88))(v7[5], v7[6], &v53, &__n);
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v12 = v13;
      uint64_t v35 = *(void *)(v55 + 32);
    }
    else
    {
      uint64_t v18 = (*(uint64_t (**)(void, void, char *))(v7[2] + 136))(v7[3], v7[4], (char *)&v51 + 4);
      if ((v18 & 0x80000000) != 0)
      {
        uint64_t v12 = v18;
        log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15029, (uint64_t)"%s%s%s%x", v19, v20, v21, v22, "stream");
        return v12;
      }
      uint64_t v23 = (*(uint64_t (**)(void, void, int **, uint64_t *))(v7[2] + 88))(v7[3], v7[4], &v50, &v51);
      if ((v23 & 0x80000000) == 0)
      {
        uint64_t v12 = (*(uint64_t (**)(void, void, char **, void))(v7[2] + 112))(v7[7], v7[8], &v52, __n);
        if ((v12 & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(v55 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v24, v25, v26, v27, "stream");
          (*(void (**)(void, void, void))(v7[2] + 96))(v7[5], v7[6], 0);
        }
        else
        {
          cstdlib_memcpy(v52, v53, __n);
          unsigned int v30 = v51 >> 2;
          LODWORD(v51) = v51 >> 2;
          HIDWORD(v51) >>= 2;
          unsigned int v31 = __n;
          if (__n >= 0x20)
          {
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            unsigned int v32 = 0;
            uint64_t v39 = v53;
            do
            {
              unsigned int v40 = *(_DWORD *)&v39[v37];
              BOOL v41 = v40 > 0x1D || ((1 << v40) & 0x215F0112) == 0;
              if (!v41 || v40 == 0x4000)
              {
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, *(unsigned int *)&v39[v37 + 4], (int *)&v52[v37 + 4], v28, v29);
                p_xcoder_GetRefPosition(v55, HIDWORD(v51), v50, v51, (*(_DWORD *)&v53[v37 + 8] + *(_DWORD *)&v53[v37 + 4]), (int *)&v52[v37 + 8], v42, v43);
                LODWORD(v12) = 0;
                *(_DWORD *)&v52[v37 + 8] -= *(_DWORD *)&v52[v37 + 4];
                uint64_t v39 = v53;
                if (*(_DWORD *)&v53[v37 + 4] > v32) {
                  unsigned int v32 = *(_DWORD *)&v53[v37 + 4];
                }
                unsigned int v31 = __n;
              }
              ++v38;
              v37 += 32;
            }
            while (v38 < v31 >> 5);
            unsigned int v30 = v51;
          }
          else
          {
            unsigned int v32 = 0;
          }
          if (v32 >= v30) {
            unsigned int v32 = v30 - 1;
          }
          int v44 = (*(uint64_t (**)(void, void))(v7[2] + 120))(v7[7], v7[8]);
          if (v44 < 0) {
            LODWORD(v12) = v44;
          }
          int v45 = (*(uint64_t (**)(void, void, void))(v7[2] + 96))(v7[5], v7[6], __n);
          if (v45 < 0 && (int)v12 > -1) {
            LODWORD(v12) = v45;
          }
          if (v32 <= HIDWORD(v51)) {
            uint64_t v47 = 0;
          }
          else {
            uint64_t v47 = 4 * (v32 - HIDWORD(v51));
          }
          int v48 = (*(uint64_t (**)(void, void, uint64_t))(v7[2] + 96))(v7[3], v7[4], v47);
          if (v48 >= 0 || (int)v12 <= -1) {
            return v12;
          }
          else {
            return v48;
          }
        }
        return v12;
      }
      uint64_t v12 = v23;
      uint64_t v35 = *(void *)(v55 + 32);
    }
    log_OutPublic(v35, (uint64_t)"XCODER", 15030, (uint64_t)"%s%s%s%x", v14, v15, v16, v17, "stream");
    return v12;
  }
  if (HIDWORD(__n))
  {
    uint64_t v33 = v7[7];
    if (v33)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void))(v7[2] + 72))(v33, v7[8]);
      v7[7] = safeh_GetNullHandle();
      _OWORD v7[8] = v34;
    }
  }
  else
  {
    *a5 = 1;
  }
  return v12;
}

uint64_t xcoder_mrksync_ProcessEnd(void *a1, int a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = p_xcoder_mrksync_BeginFunction(a1, a2, &v12, &v11);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v11;
    uint64_t v4 = v11[3];
    if (v4)
    {
      (*(void (**)(uint64_t, void))(v11[2] + 72))(v4, v11[4]);
      v3[3] = safeh_GetNullHandle();
      v3[4] = v5;
    }
    uint64_t v6 = v3[5];
    if (v6)
    {
      (*(void (**)(uint64_t, void))(v3[2] + 72))(v6, v3[6]);
      v3[5] = safeh_GetNullHandle();
      v3[6] = v7;
    }
    uint64_t v8 = v3[7];
    if (v8)
    {
      (*(void (**)(uint64_t, void))(v3[2] + 72))(v8, v3[8]);
      v3[7] = safeh_GetNullHandle();
      v3[8] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_mrksync_BeginFunction(void *a1, int a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck((uint64_t)a1, a2, 854, 72);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2282758152;
    }
    else {
      return result;
    }
  }
  else
  {
    *a4 = a1;
    uint64_t v8 = (_WORD *)*a1;
    uint64_t v9 = a1[1];
    return InitRsrcFunction(v8, v9, a3);
  }
}

uint64_t p_xcoder_GetRefPosition(uint64_t result, unsigned int a2, int *a3, int a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  if (a5 >= a2)
  {
    if (a4 + a2 >= a5)
    {
      if (a4 + a2 == a5) {
        int v8 = a3[a4 - 1] + 2;
      }
      else {
        int v8 = a3[a5 - a2];
      }
      *a6 = v8;
    }
    else
    {
      *a6 = a3[a4 - 1] + 2;
      return log_OutText(*(void *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is beyond the end of the sync object, charPos=%u, maxSyncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
    }
  }
  else
  {
    *a6 = *a3;
    return log_OutText(*(void *)(result + 32), (uint64_t)"XCODER", 3, 0, (uint64_t)"Marker text position is before the synch object, charPos=%u, syncPos=%u, return position=%u", (uint64_t)a6, a7, a8, a5);
  }
  return result;
}

uint64_t xcoder_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2282758145;
  }
  uint64_t result = 0;
  *a2 = &IXCoder;
  return result;
}

uint64_t xcoder_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 2282758151;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t NullHandle = safeh_GetNullHandle();
  BOOL v11 = safeh_HandlesEqual((uint64_t)a3, a4, NullHandle, v10);
  if (a5)
  {
    if (!v11)
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      if ((InitRsrcFunction(a3, a4, &v24) & 0x80000000) == 0)
      {
        uint64_t v12 = heap_Calloc(*(void **)(v24 + 8), 1, 344);
        if (v12)
        {
          uint64_t v17 = v12;
          *(void *)uint64_t v12 = a3;
          *(void *)(v12 + 8) = a4;
          *(_DWORD *)(v12 + 272) = -2012209145;
          cstdlib_strcpy((char *)(v12 + 144), "UTF-8");
          if ((objc_GetObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM", &v23) & 0x80000000) != 0) {
            log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15024, 0, v18, v19, v20, v21, v23);
          }
          else {
            *(void *)(v17 + 288) = *(void *)(v23 + 8);
          }
          uint64_t v8 = p_xcoder_ObjOpen(v17);
          if ((v8 & 0x80000000) != 0)
          {
            heap_Free(*(void **)(v24 + 8), v17);
            if (v23) {
              objc_ReleaseObject(*(void *)(v24 + 48), (uint64_t)"SYNTHSTREAM");
            }
          }
          else
          {
            *(void *)a5 = v17;
            *(_DWORD *)(a5 + 8) = 852;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v24 + 32), (uint64_t)"XCODER", 15000, 0, v13, v14, v15, v16, v23);
          return 2282758154;
        }
      }
    }
  }
  return v8;
}

uint64_t xcoder_ObjClose(void *a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v2 = p_xcoder_BeginFunction(a1, a2, &v7, &v6);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v3 = v6;
  uint64_t v2 = p_xcoder_ObjClose(v6);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  uint64_t v4 = objc_ReleaseObject(*(void *)(v7 + 48), (uint64_t)"SYNTHSTREAM");
  if ((v4 & 0x80000000) == 0) {
    heap_Free(*(void **)(v7 + 8), v3);
  }
  return v4;
}

uint64_t xcoder_ProcessStart(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  __s2 = 0;
  int __s1 = 0;
  uint64_t v6 = p_xcoder_BeginFunction(a1, a2, &v31, &v30);
  if ((v6 & 0x80000000) == 0)
  {
    __dst[0] = 0;
    if ((paramc_ParamGetStr(*(void *)(v31 + 40), (uint64_t)"inputmimetype", &__s1) & 0x80000000) == 0 && __s1 && *__s1)
    {
      if (cstdlib_strcmp(__s1, "text/plain"))
      {
        if (cstdlib_strncmp(__s1, "text/plain;", 0xBuLL)) {
          return 0;
        }
        uint64_t v7 = cstdlib_strstr(__s1, ";charset=");
        if (!v7) {
          return 0;
        }
        int v8 = v7[9];
        if (v7[9])
        {
          unint64_t v9 = 0;
          while (v9 <= 0x7E && v8 != 59)
          {
            __dst[v9] = v8;
            unint64_t v10 = v9 + 1;
            int v8 = v7[v9++ + 10];
            if (!v8) {
              goto LABEL_43;
            }
          }
          unint64_t v10 = v9;
        }
        else
        {
          unint64_t v10 = 0;
        }
LABEL_43:
        __dst[v10] = 0;
      }
      else
      {
        if ((paramc_ParamGetStr(*(void *)(v31 + 40), (uint64_t)"nativetypeofchar", &__s2) & 0x80000000) != 0
          || (uint64_t v14 = __s2) == 0
          || !*__s2)
        {
          __s2 = "UTF-8";
          uint64_t v14 = "UTF-8";
        }
        cstdlib_strcpy(__dst, v14);
      }
    }
    else
    {
      if ((paramc_ParamGetStr(*(void *)(v31 + 40), (uint64_t)"nativetypeofchar", &__s2) & 0x80000000) != 0
        || (BOOL v11 = __s2) == 0
        || !*__s2)
      {
        __s2 = "UTF-8";
        BOOL v11 = "UTF-8";
      }
      cstdlib_strcpy(__dst, v11);
      cstdlib_strcpy(v33, "text/plain;charset=");
      cstdlib_strcat(v33, __s2);
      int __s1 = v33;
    }
    if (LH_stricmp(__dst, "UTF-8"))
    {
      uint64_t v12 = v30;
      if (*(_DWORD *)(v30 + 272) || LH_stricmp(__dst, (char *)(v30 + 16)))
      {
        cstdlib_strcpy((char *)(v12 + 16), __dst);
        uint64_t v13 = p_xcoder_OpenXCoder(v12);
        if ((v13 & 0x1FFF) == 1) {
          return 0;
        }
        uint64_t v6 = v13;
        if ((v13 & 0x80000000) != 0) {
          return v6;
        }
      }
      else
      {
        uint64_t v15 = p_xcoder_ResetXCoder();
        if ((v15 & 0x80000000) != 0) {
          return v15;
        }
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t))(*(void *)(v12 + 288)
                                                                                                  + 64))(a3, a4, 129, __s1, 0, 0, v12 + 296);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v6 = v16;
        log_OutPublic(*(void *)(v31 + 32), (uint64_t)"XCODER", 15026, (uint64_t)"%s%s", v17, v18, v19, v20, "contentType");
        return v6;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(v12 + 288) + 64))(a3, a4, 129, "text/plain;charset=utf-8",
              0,
              1,
              v12 + 312);
      if ((v21 & 0x80000000) != 0)
      {
        uint64_t v6 = v21;
        uint64_t v26 = *(void *)(v31 + 32);
      }
      else
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void, uint64_t, uint64_t))(*(void *)(v12 + 288) + 64))(a3, a4, 129, "application/x-realspeak-xcoder-sync;version=5.0",
               0,
               1,
               v12 + 328);
        if ((v6 & 0x80000000) == 0) {
          return v6;
        }
        uint64_t v26 = *(void *)(v31 + 32);
      }
      log_OutPublic(v26, (uint64_t)"XCODER", 15027, (uint64_t)"%s%s", v22, v23, v24, v25, "contentType");
    }
  }
  return v6;
}

uint64_t xcoder_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  unsigned int v54 = 0;
  uint64_t v51 = 0;
  BOOL v52 = 0;
  int8x16_t __b = 0;
  uint64_t v6 = p_xcoder_BeginFunction(a1, a2, &v57, &v56);
  if ((v6 & 0x80000000) == 0)
  {
    *a5 = 1;
    uint64_t v7 = v56;
    if (v56[39])
    {
      uint64_t v6 = (*(uint64_t (**)(void, void, unsigned int *, char *))(v56[36] + 144))(v56[37], v56[38], &v54, (char *)&v55 + 4);
      if ((v6 & 0x80000000) != 0)
      {
        log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15028, (uint64_t)"%s%s%s%x", v8, v9, v10, v11, "stream");
      }
      else if (v54)
      {
        uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t *))(v7[36] + 136))(v7[37], v7[38], &v55);
        if ((v12 & 0x80000000) != 0)
        {
          uint64_t v6 = v12;
          log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15029, (uint64_t)"%s%s%s%x", v13, v14, v15, v16, "stream");
        }
        else
        {
          uint64_t v17 = (*(uint64_t (**)(void, void, unsigned __int8 **, unsigned int *))(v7[36] + 88))(v7[37], v7[38], &v52, &v54);
          if ((v17 & 0x80000000) != 0)
          {
            uint64_t v6 = v17;
            log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15030, (uint64_t)"%s%s%s%x", v18, v19, v20, v21, "stream");
          }
          else
          {
            uint64_t v22 = (*(uint64_t (**)(void, void, uint64_t *, void))(v7[36] + 112))(v7[39], v7[40], &v51, 4 * v54);
            if ((v22 & 0x80000000) != 0)
            {
              uint64_t v6 = v22;
              log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v23, v24, v25, v26, "stream");
            }
            else
            {
              uint64_t v27 = (*(uint64_t (**)(void, void, void **, void))(v7[36] + 112))(v7[41], v7[42], &__b, 16 * v54);
              if ((v27 & 0x80000000) != 0)
              {
                uint64_t v6 = v27;
                log_OutPublic(*(void *)(v57 + 32), (uint64_t)"XCODER", 15031, (uint64_t)"%s%s%s%x", v28, v29, v30, v31, "stream");
                (*(void (**)(void, void, void))(v7[36] + 96))(v7[37], v7[38], 0);
              }
              else if (!v55 {
                     && p_xcoder_CheckBom((uint64_t)v7, v52, v54)
              }
                     && (uint64_t v43 = p_xcoder_OpenXCoder((uint64_t)v7), (v43 & 0x80000000) != 0))
              {
                return v43;
              }
              else
              {
                unsigned int v32 = 4 * v54;
                unsigned int v53 = 4 * v54;
                cstdlib_memset(__b, 255, 16 * v54);
                int v33 = p_xcoder_Convert((uint64_t)v7, (uint64_t)v52, v54, &v54, v51, v32, &v53, __b);
                if (v33 < 0 && ((LODWORD(v6) = v33, (v33 & 0x1FFF) != 7) || HIDWORD(v55)))
                {
                  unsigned int v34 = 0;
                  unsigned int v53 = 0;
                  unsigned int v54 = 0;
                }
                else
                {
                  LODWORD(v6) = 0;
                  unsigned int v34 = v53;
                  if (v55 && v53)
                  {
                    unint64_t v35 = 0;
                    unsigned int v36 = __b;
                    do
                    {
                      v36[v35++] += v55;
                      unsigned int v34 = v53;
                    }
                    while (v35 < v53);
                    LODWORD(v6) = 0;
                  }
                }
                int v44 = (*(uint64_t (**)(void, void, void))(v7[36] + 120))(v7[41], v7[42], 4 * v34);
                if (v44 < 0 && (int)v6 > -1) {
                  LODWORD(v6) = v44;
                }
                int v46 = (*(uint64_t (**)(void, void, void))(v7[36] + 120))(v7[39], v7[40], v53);
                if (v46 < 0 && (int)v6 > -1) {
                  LODWORD(v6) = v46;
                }
                int v48 = (*(uint64_t (**)(void, void, void))(v7[36] + 96))(v7[37], v7[38], v54);
                if (v48 >= 0 || (int)v6 <= -1) {
                  return v6;
                }
                else {
                  return v48;
                }
              }
            }
          }
        }
      }
      else if (HIDWORD(v55))
      {
        uint64_t v37 = v7[39];
        if (v37)
        {
          LODWORD(v6) = (*(uint64_t (**)(uint64_t, void))(v7[36] + 72))(v37, v7[40]);
          v7[39] = safeh_GetNullHandle();
          v7[40] = v38;
          int v39 = (*(uint64_t (**)(void, void))(v7[36] + 72))(v7[41], v7[42]);
          v7[41] = safeh_GetNullHandle();
          v7[42] = v40;
          if (v39 >= 0 || (int)v6 <= -1) {
            return v6;
          }
          else {
            return v39;
          }
        }
      }
      else
      {
        *a5 = 0;
      }
    }
  }
  return v6;
}

uint64_t xcoder_ProcessEnd(void *a1, int a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = p_xcoder_BeginFunction(a1, a2, &v12, &v11);
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v3 = v11;
    uint64_t v4 = v11[37];
    if (v4)
    {
      (*(void (**)(uint64_t, void))(v11[36] + 72))(v4, v11[38]);
      v3[37] = safeh_GetNullHandle();
      v3[38] = v5;
    }
    uint64_t v6 = v3[39];
    if (v6)
    {
      (*(void (**)(uint64_t, void))(v3[36] + 72))(v6, v3[40]);
      v3[39] = safeh_GetNullHandle();
      v3[40] = v7;
    }
    uint64_t v8 = v3[41];
    if (v8)
    {
      (*(void (**)(uint64_t, void))(v3[36] + 72))(v8, v3[42]);
      v3[41] = safeh_GetNullHandle();
      v3[42] = v9;
    }
  }
  return v2;
}

uint64_t p_xcoder_BeginFunction(void *a1, int a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  LODWORD(result) = safeh_HandleCheck((uint64_t)a1, a2, 852, 344);
  if ((result & 0x80000000) != 0)
  {
    if ((result & 0x1FFF) == 8) {
      return 2282758152;
    }
    else {
      return result;
    }
  }
  else
  {
    *a4 = a1;
    uint64_t v8 = (_WORD *)*a1;
    uint64_t v9 = a1[1];
    return InitRsrcFunction(v8, v9, a3);
  }
}

uint64_t p_xcoder_CheckBom(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 < 2) {
    return 0;
  }
  uint64_t v4 = (char *)(a1 + 16);
  if (LH_stricmp((char *)(a1 + 16), "UTF-16"))
  {
    if (LH_stricmp(v4, "UCS-2")) {
      return 0;
    }
  }
  if (*a2 == 254 && a2[1] == 255)
  {
    uint64_t v5 = 1;
    uint64_t v6 = "UTF-16BE";
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = "UTF-16";
  }
  cstdlib_strcpy(v4, v6);
  return v5;
}

uint64_t synthstream_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2297438209;
  }
  uint64_t result = 0;
  *a2 = &ISynthStream;
  return result;
}

uint64_t synthstream_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2297438214;
  uint64_t v31 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v31);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      log_OutText(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: Begin", v10, v11, v12, v27);
      uint64_t v13 = heap_Calloc(*(void **)(v31 + 8), 1, 48);
      if (v13)
      {
        uint64_t v18 = v13;
        *(void *)uint64_t v13 = a3;
        *(void *)(v13 + 8) = a4;
        uint64_t v19 = (_DWORD *)(v13 + 32);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemalloc", (unsigned int *)(v13 + 32)) & 0x80000000) != 0
          || !*v19)
        {
          *uint64_t v19 = 1024;
        }
        uint64_t v20 = (_DWORD *)(v18 + 36);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemmove", (unsigned int *)(v18 + 36)) & 0x80000000) != 0
          || !*v20)
        {
          *uint64_t v20 = 128;
        }
        uint64_t v21 = (_DWORD *)(v18 + 40);
        if ((paramc_ParamGetUInt(*(void *)(v31 + 40), (uint64_t)"synthstreamminmemfree", (unsigned int *)(v18 + 40)) & 0x80000000) != 0
          || !*v21)
        {
          *uint64_t v21 = 4097;
        }
        paramc_ParamGetInt(*(void *)(v31 + 40), (uint64_t)"loginputtext", (_DWORD *)(v18 + 44));
        uint64_t v22 = *(void **)(v31 + 8);
        v29[0] = xmmword_26D213828;
        v29[1] = *(_OWORD *)&off_26D213838;
        uint64_t v30 = off_26D213848;
        uint64_t v5 = ssftmap_ObjOpen(v22, 0, v29, (uint64_t *)(v18 + 24));
        if ((v5 & 0x80000000) != 0)
        {
          heap_Free(*(void **)(v31 + 8), v18);
        }
        else
        {
          *(void *)a5 = v18;
          *(_DWORD *)(a5 + 8) = 18397;
        }
      }
      else
      {
        log_OutPublic(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v14, v15, v16, v17, v28);
        uint64_t v5 = 2297438218;
      }
      log_OutText(*(void *)(v31 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjOpen: End (%x)", v23, v24, v25, v5);
    }
  }
  return v5;
}

uint64_t synthstream_ObjClose(uint64_t a1, int a2)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t v2 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v2 & 0x80000000) != 0) {
    return v2;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : Begin", v3, v4, v5, v23);
  uint64_t v6 = v29;
  uint64_t v10 = ssftmap_IteratorOpen(*(void *)(v29 + 24), 0, 1, (uint64_t)&v27);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v26, &v25) & 0x80000000) == 0)
    {
      uint64_t v15 = v25;
      if (!*(_DWORD *)(v25 + 108))
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v11, v12, v13, v14, "writer");
        uint64_t v15 = v25;
      }
      if (*(void *)(v15 + 16))
      {
        log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v11, v12, v13, v14, "module");
        heap_Free(*(void **)(v28 + 8), *(void *)(v25 + 16));
        uint64_t v15 = v25;
        *(void *)(v25 + 16) = 0;
      }
      if (vector_GetElemAt(*(void *)(v15 + 24), 0, &v24) == 1)
      {
        unsigned int v20 = 1;
        do
        {
          log_OutPublic(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 22001, (uint64_t)"%s%u%s%s%s%u", v16, v17, v18, v19, "module");
          heap_Free(*(void **)(v28 + 8), *v24);
          int ElemAt = vector_GetElemAt(*(void *)(v25 + 24), v20++, &v24);
        }
        while (ElemAt == 1);
      }
      if (*(unsigned __int16 *)(v25 + 42) >= 2u) {
        *(_WORD *)(v25 + 42) = 1;
      }
    }
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v10 & 0x80000000) == 0 || (v10 & 0x1FFF) == 0x14)
  {
    uint64_t v10 = ssftmap_ObjClose(*(void *)(v6 + 24));
    if ((v10 & 0x80000000) == 0) {
      heap_Free(*(void **)(v28 + 8), v6);
    }
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ObjClose : End (%x)", v7, v8, v9, v10);
  return v10;
}

uint64_t synthstream_SetPipelinePos(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = synthstream_loc_BeginFunction(a1, a2, &v12, &v13);
  if ((v7 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : Begin (%u)", v4, v5, v6, a3);
    *(_WORD *)(v13 + 16) = a3;
    log_OutText(*(void *)(v12 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM SetPipelinePos : End (%x)", v8, v9, v10, v7);
  }
  return v7;
}

uint64_t synthstream_StreamOpen(uint64_t a1, int a2, unsigned int a3, const char *a4, long long *a5, int a6, uint64_t a7)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v69 = 0;
  uint64_t v12 = synthstream_loc_BeginFunction(a1, a2, &v69, &v71);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v16 = v71;
  log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : Begin (%u, %s, %p, %d, %u)", v13, v14, v15, a3);
  if (a4 && a7 && *a4 && cstdlib_strlen(a4) < 0x80)
  {
    *(void *)a7 = 0;
    *(_DWORD *)(a7 + 8) = 0;
    int v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    uint64_t v22 = 0;
    if (cstdlib_strlen(a4))
    {
      unsigned int v23 = 1;
      do
      {
        __s1[v22] = cstdlib_tolower(a4[v22]);
        uint64_t v22 = v23;
      }
      while (cstdlib_strlen(a4) > v23++);
    }
    __s1[v22] = 0;
    int v67 = __s1;
    LOWORD(v68) = 0;
    uint64_t v21 = ssftmap_IteratorOpen(*(void *)(v16 + 24), (uint64_t)&v67, 1, (uint64_t)&v66);
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      *(void *)&long long v63 = 0;
      uint64_t v65 = 0;
      if ((ssftmap_IteratorNext(v66, &v63, &v65) & 0x80000000) != 0 || cstdlib_strcmp(__s1, *(const char **)v63))
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        do
        {
          BOOL v33 = a6 == 0;
          unsigned int v34 = *(unsigned __int16 *)(v65 + 40);
          unsigned int v35 = *(unsigned __int16 *)(v16 + 16);
          if (v34 != v35) {
            BOOL v33 = 0;
          }
          if (v34 >= v35 && !v33) {
            break;
          }
          uint64_t v30 = v65;
          uint64_t v29 = v63;
          if ((ssftmap_IteratorNext(v66, &v63, &v65) & 0x80000000) != 0) {
            break;
          }
        }
        while (!cstdlib_strcmp(__s1, *(const char **)v63));
      }
      ssftmap_IteratorClose((uint64_t)v66);
    }
    if ((v21 & 0x1FFF) == 0x14) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v21;
    }
    if ((v31 & 0x80000000) != 0) {
      goto LABEL_82;
    }
    if ((a6 - 1) < 2)
    {
      if (v30 && *(unsigned __int16 *)(v30 + 40) == *(unsigned __int16 *)(v16 + 16))
      {
        log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for write failed for %s %u, already present", v26, v27, v28, (uint64_t)__s1);
        uint64_t v21 = 2297438210;
LABEL_82:
        log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamOpen : End (%x, %p, %p, %u)", v26, v27, v28, v21);
        return v21;
      }
      if (v29) {
        __int16 v32 = *(_WORD *)(v29 + 8) + 1;
      }
      else {
        __int16 v32 = 0;
      }
      LOWORD(v68) = v32;
      uint64_t v37 = heap_Calloc(*(void **)(v69 + 8), 1, 120);
      uint64_t v39 = v69;
      if (!v37)
      {
        uint64_t v21 = 2297438218;
LABEL_81:
        log_OutPublic(*(void *)(v39 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v38, v26, v27, v28, v62);
        goto LABEL_82;
      }
      uint64_t v30 = v37;
      uint64_t v40 = *(void **)(v69 + 8);
      long long v63 = xmmword_22073C548;
      uint64_t v64 = 0;
      if (vector_ObjOpen(v40, &v63, 1, (uint64_t *)(v30 + 24)) == 1)
      {
        uint64_t v45 = *(void *)(v69 + 8);
        int v46 = cstdlib_strlen(__s1);
        uint64_t v47 = heap_Alloc(v45, (v46 + 1));
        *(void *)(v30 + 32) = v47;
        if (v47)
        {
          if (!a5)
          {
            if (cstdlib_strcmp(__s1, "application/x-realspeak-markers-pp;version=4.0"))
            {
              if (cstdlib_strcmp(__s1, "application/x-realspeak-int-markers-pp;version=4.0"))
              {
                if (cstdlib_strcmp(__s1, "application/x-tnplus-words;version=1.0")) {
                  a5 = 0;
                }
                else {
                  a5 = (long long *)&IElemGeeneWordT;
                }
              }
              else
              {
                a5 = &IElemIntMarkerT;
              }
            }
            else
            {
              a5 = &IElemMarkerT;
            }
          }
          *(void *)uint64_t v30 = v16;
          *(void *)(v30 + 8) = v69;
          cstdlib_strcpy(*(char **)(v30 + 32), __s1);
          *(_WORD *)(v30 + 40) = *(_WORD *)(v16 + 16);
          *(_WORD *)(v30 + 42) = 1;
          *(_WORD *)(v30 + 44) = a3;
          if (a5 && *(_WORD *)a5)
          {
            long long v52 = *a5;
            *(void *)(v30 + 64) = *((void *)a5 + 2);
            *(_OWORD *)(v30 + 48) = v52;
          }
          *(unsigned char *)(v30 + 72) = a6 == 2;
          if (cstdlib_strncmp(v67, "text/", 5uLL)) {
            BOOL v53 = 0;
          }
          else {
            BOOL v53 = cstdlib_strstr(v67, "charset=wchar_t") == 0;
          }
          *(unsigned char *)(v30 + 73) = v53;
          if (*(_DWORD *)(v16 + 44)
            && (!cstdlib_strcmp(__s1, "text/plain;charset=utf-16")
             || !cstdlib_strcmp(__s1, "text/plain;charset=utf-8")
             || !cstdlib_strcmp(__s1, "application/synthesis+ssml")
             || !cstdlib_strcmp(__s1, "text/html")
             || !cstdlib_strcmp(__s1, "text/email")
             || !cstdlib_strcmp(__s1, "text/xml")))
          {
            *(_DWORD *)(v16 + 44) = 0;
            *(unsigned char *)(v30 + 72) = 1;
            *(unsigned char *)(v30 + 74) = 1;
          }
          uint64_t v21 = ssftmap_Insert(*(void *)(v16 + 24), (uint64_t)&v67, v30);
          if ((v21 & 0x80000000) != 0) {
            log_OutPublic(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22002, (uint64_t)"%s%u%s%s%s%u", v54, v55, v56, v57, "module");
          }
          synthstream_loc_ElemReleaseStreamImpl((void *)v30);
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_82;
          }
LABEL_73:
          uint64_t v58 = heap_Calloc(*(void **)(v69 + 8), 1, 24);
          uint64_t v70 = v58;
          if (v58)
          {
            uint64_t v59 = v58;
            if (a6 || (int v60 = vector_Add(*(void *)(v30 + 24), &v70), v59 = v70, v60))
            {
              *(_DWORD *)uint64_t v59 = a6;
              *(_WORD *)(v59 + 4) = a3;
              *(void *)(v59 + 8) = v30;
              *(_DWORD *)(v59 + 16) = *(_DWORD *)(v30 + 80);
              ++*(_WORD *)(v30 + 42);
              if ((a6 - 1) <= 1) {
                *(void *)(v30 + 16) = v59;
              }
              *(void *)a7 = v59;
              *(_DWORD *)(a7 + 8) = 18398;
              goto LABEL_82;
            }
            uint64_t v21 = 2297438218;
            heap_Free(*(void **)(v69 + 8), v70);
            uint64_t v70 = 0;
          }
          else
          {
            uint64_t v21 = 2297438218;
          }
          uint64_t v39 = v69;
          goto LABEL_81;
        }
        uint64_t v21 = 2297438218;
        log_OutPublic(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v48, v49, v50, v51, v62);
        vector_ObjClose(*(void *)(v30 + 24));
      }
      else
      {
        uint64_t v21 = 2297438218;
        log_OutPublic(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v41, v42, v43, v44, v62);
      }
      heap_Free(*(void **)(v69 + 8), v30);
      goto LABEL_82;
    }
    if (a6)
    {
      log_OutPublic(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22007, (uint64_t)"%s%d%s%u%s%s", v25, v26, v27, v28, "openMode");
      uint64_t v21 = 2297438215;
      goto LABEL_82;
    }
    if (!v30)
    {
      log_OutText(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"SYNTHSTREAM ObjOpen for read failed for %s %u, not found", v26, v27, v28, (uint64_t)__s1);
      uint64_t v21 = 2297438228;
      goto LABEL_82;
    }
    uint64_t v21 = v31;
    goto LABEL_73;
  }
  log_OutPublic(*(void *)(v69 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v17, v18, v19, v20, "function");
  return 2297438215;
}

uint64_t synthstream_StreamClose(uint64_t a1, int a2)
{
  uint64_t v6 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : Begin (%u, %p, %d)", v3, v4, v5, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 108) = 1;
      synthstream_loc_StreamImplDump(v8, 0, 0);
    }
    else
    {
      uint64_t v19 = 0;
      unsigned int v13 = 0;
      if (vector_GetElemAt(*(void *)(*(void *)(a1 + 8) + 24), 0, &v19) == 1)
      {
        unsigned int v13 = 0;
        do
        {
          if (*v19 == a1) {
            break;
          }
          ++v13;
        }
        while (vector_GetElemAt(*(void *)(*(void *)(a1 + 8) + 24), v13, &v19) == 1);
      }
      if (*v19 == a1) {
        vector_Remove(*(void *)(*(void *)(a1 + 8) + 24), v13);
      }
      else {
        log_OutPublic(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 22003, 0, v9, v10, v11, v12, v18);
      }
    }
    synthstream_loc_ElemReleaseStreamImpl(*(void **)(a1 + 8));
    heap_Free(*(void **)(v7 + 8), a1);
    log_OutText(*(void *)(v7 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM StreamClose : End (%x)", v14, v15, v16, v6);
  }
  return v6;
}

uint64_t synthstream_Read(uint64_t a1, int a2, void *a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : Begin (%u, %p, %lu bytes)", v9, v10, v11, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4 && a5)
    {
      if (*(_DWORD *)a1)
      {
        uint64_t v12 = 2297438215;
        log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v14, v15, v16, v17, "function");
      }
      else
      {
        unsigned int v18 = *(_DWORD *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 8);
        unsigned int v20 = *(_DWORD *)(v19 + 88);
        uint64_t v21 = v18 - v20;
        if (v18 >= v20)
        {
          unsigned int v23 = *(_DWORD *)(v19 + 76) - v18;
          if (v23 >= a4) {
            size_t v24 = a4;
          }
          else {
            size_t v24 = v23;
          }
          *a5 = v24;
          if (v24)
          {
            cstdlib_memcpy(a3, (const void *)(*(void *)(v19 + 96) + v21), v24);
            unsigned int v29 = *(_DWORD *)(a1 + 16) + *a5;
            *(_DWORD *)(a1 + 16) = v29;
            uint64_t v30 = *(void *)(a1 + 8);
            if (v29 > *(_DWORD *)(v30 + 80)) {
              *(_DWORD *)(v30 + 80) = v29;
            }
            if (*(void *)(v30 + 56)) {
              log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22014, (uint64_t)"%s%s%s%u%s%s", v25, v26, v27, v28, "function");
            }
            else {
              synthstream_loc_StreamImplRecoverExcessBuffer(v30, 0);
            }
          }
          goto LABEL_12;
        }
        log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22011, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v14, v15, v16, v17, "function");
        uint64_t v12 = 2297438212;
      }
    }
    else
    {
      uint64_t v12 = 2297438215;
      log_OutPublic(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%d%s%p", v14, v15, v16, v17, "function");
      if (!a5) {
        return v12;
      }
    }
    *a5 = 0;
LABEL_12:
    log_OutText(*(void *)(v13 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Read : End (%x, %lu bytes)", v15, v16, v17, v12);
  }
  return v12;
}

uint64_t synthstream_ReadDirectStart(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if (*(_DWORD *)a1)
      {
        uint64_t v10 = 2297438215;
        log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        unsigned int v16 = *(_DWORD *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 8);
        unsigned int v18 = *(_DWORD *)(v17 + 88);
        uint64_t v19 = v16 - v18;
        if (v16 >= v18)
        {
          int v20 = *(_DWORD *)(v17 + 76);
          uint64_t v21 = *(void *)(v17 + 96);
          uint64_t v22 = v21 + v19;
          if (v21) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          int v24 = v20 - v16;
          *a4 = v24;
          *a3 = v23;
          if (v24) {
            BOOL v25 = v23 == 0;
          }
          else {
            BOOL v25 = 0;
          }
          if (!v25) {
            goto LABEL_22;
          }
          uint64_t v10 = 2297438218;
        }
        else
        {
          log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22011, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          uint64_t v10 = 2297438212;
        }
      }
    }
    else
    {
      uint64_t v10 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%p", v12, v13, v14, v15, "function");
      if (!a3)
      {
        if (!a4) {
          return v10;
        }
        goto LABEL_21;
      }
    }
    *a3 = 0;
    if (a4)
    {
LABEL_21:
      *a4 = 0;
LABEL_22:
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectStart : End (%x, %lu bytes)", v13, v14, v15, v10);
    }
  }
  return v10;
}

uint64_t synthstream_ReadDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (*(_DWORD *)a1)
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v10, v11, v12, v13, "function");
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 8);
      int v18 = *(_DWORD *)(a1 + 16);
      unsigned int v19 = *(_DWORD *)(v17 + 76) - v18;
      if (v19 >= a3)
      {
        unsigned int v20 = v18 + a3;
      }
      else
      {
        uint64_t v8 = 2297438215;
        log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22004, (uint64_t)"%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
        unsigned int v20 = *(_DWORD *)(a1 + 16) + v19;
        uint64_t v17 = *(void *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 16) = v20;
      if (v20 > *(_DWORD *)(v17 + 80)) {
        *(_DWORD *)(v17 + 80) = v20;
      }
      synthstream_loc_StreamImplRecoverExcessBuffer(v17, 0);
    }
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM ReadDirectEnd : End (%x)", v14, v15, v16, v8);
  }
  return v8;
}

uint64_t synthstream_Write(uint64_t a1, int a2, char *a3, unsigned int a4)
{
  int v31 = 1;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (!a3 || !a4)
    {
      uint64_t v20 = 2297438215;
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"%s%u%s%s%s%p%s%u", v13, v14, v15, (uint64_t)"function=Write|module=");
      goto LABEL_22;
    }
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      uint64_t v20 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      goto LABEL_22;
    }
    uint64_t v16 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v16 + 76) < *(_DWORD *)(v16 + 88))
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
      uint64_t v20 = 2297438213;
LABEL_22:
      log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Write : End (%x)", v17, v18, v19, v20);
      return v20;
    }
    uint64_t v21 = synthstream_loc_StreamImplGrowBuf(v16, a4, &v31);
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v20 = v21;
      goto LABEL_22;
    }
    uint64_t v22 = *(void *)(a1 + 8);
    if (v31 == 1)
    {
      unsigned int v23 = *(_DWORD *)(v22 + 76);
      unsigned int v24 = *(_DWORD *)(v22 + 88);
      uint64_t v25 = v23 - v24;
      if (v23 >= v24)
      {
        cstdlib_memcpy((void *)(*(void *)(v22 + 96) + v25), a3, a4);
        uint64_t v22 = *(void *)(a1 + 8);
        if (*(void *)(v22 + 56))
        {
          unsigned int v26 = 0;
          while (1)
          {
            int v27 = (*(uint64_t (**)(char *, void, void))(v22 + 56))(&a3[v26], *(void *)(*(void *)(v22 + 8) + 8), *(void *)(v22 + 96) + v26 + v25);
            uint64_t v22 = *(void *)(a1 + 8);
            if (!v27) {
              break;
            }
            v26 += *(unsigned __int16 *)(v22 + 48);
            if (v26 >= a4) {
              goto LABEL_21;
            }
          }
          if (*(void *)(v22 + 64)) {
            BOOL v29 = v26 == 0;
          }
          else {
            BOOL v29 = 1;
          }
          if (!v29)
          {
            unsigned int v30 = 0;
            do
            {
              (*(void (**)(void, void))(v22 + 64))(*(void *)(v22 + 96) + v30 + v25, *(void *)(*(void *)(v22 + 8) + 8));
              uint64_t v22 = *(void *)(a1 + 8);
              v30 += *(unsigned __int16 *)(v22 + 48);
            }
            while (v30 < v26);
          }
          uint64_t v20 = 2297438218;
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v24 = *(_DWORD *)(v22 + 88);
    }
    *(_DWORD *)(v22 + 88) = v24 + a4;
LABEL_21:
    *(_DWORD *)(v22 + 76) += a4;
    synthstream_loc_StreamImplDump(v22, (uint64_t)a3, a4);
    uint64_t v20 = 0;
    goto LABEL_22;
  }
  return v7;
}

uint64_t synthstream_WriteDirectStart(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : Begin (%u, %p, %lu bytes)", v8, v9, v10, *(unsigned __int16 *)(a1 + 4));
    if (a3 && a4)
    {
      if ((*(_DWORD *)a1 - 1) >= 2)
      {
        uint64_t v20 = 2297438215;
        log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v16 + 76) >= *(_DWORD *)(v16 + 88))
        {
          uint64_t v22 = synthstream_loc_StreamImplGrowBuf(v16, a4, 0);
          if ((v22 & 0x80000000) != 0)
          {
            uint64_t v20 = v22;
          }
          else
          {
            uint64_t v23 = *(void *)(a1 + 8);
            uint64_t v24 = *(void *)(v23 + 96);
            if (v24)
            {
              uint64_t v25 = (void *)(v24 + (*(_DWORD *)(v23 + 76) - *(_DWORD *)(v23 + 88)));
              *a3 = v25;
              cstdlib_memset(v25, 0, a4);
              uint64_t v20 = 0;
              goto LABEL_12;
            }
            uint64_t v20 = 0;
          }
        }
        else
        {
          log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v12, v13, v14, v15, "function");
          uint64_t v20 = 2297438213;
        }
      }
    }
    else
    {
      uint64_t v20 = 2297438215;
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p%s%u", v12, v13, v14, v15, "function");
      if (!a3) {
        goto LABEL_12;
      }
    }
    *a3 = 0;
LABEL_12:
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectStart : End (%x)", v17, v18, v19, v20);
    return v20;
  }
  return v7;
}

uint64_t synthstream_WriteDirectEnd(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : Begin (%u, %p, %lu bytes)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if ((*(_DWORD *)a1 - 1) >= 2)
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v10, v11, v12, v13, "function");
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(v14 + 76);
    unsigned int v16 = *(_DWORD *)(v14 + 88);
    unsigned int v17 = v15 - v16;
    if (v15 < v16)
    {
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22012, (uint64_t)"%s%s%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "function");
      uint64_t v8 = 2297438213;
LABEL_6:
      log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteDirectEnd : End (%x)", v18, v19, v20, v8);
      return v8;
    }
    unsigned int v22 = v17 + a3;
    if (v17 + a3 > *(_DWORD *)(v14 + 104))
    {
      uint64_t v8 = 2297438215;
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22005, (uint64_t)"%s%u%s%s%s%u%s%u", v10, v11, v12, v13, "module");
      goto LABEL_6;
    }
    if (*(void *)(v14 + 56))
    {
      if (a3)
      {
        unsigned int v23 = 0;
        while (1)
        {
          int v24 = (*(uint64_t (**)(void, void))(v14 + 56))(*(void *)(v14 + 96) + v23 + v17, *(void *)(*(void *)(v14 + 8) + 8));
          uint64_t v14 = *(void *)(a1 + 8);
          if (!v24) {
            break;
          }
          v23 += *(unsigned __int16 *)(v14 + 48);
          if (v23 >= a3) {
            goto LABEL_15;
          }
        }
        if (*(void *)(v14 + 64)) {
          BOOL v28 = v23 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          unsigned int v29 = 0;
          do
          {
            (*(void (**)(void, void))(v14 + 64))(*(void *)(v14 + 96) + v29 + v17, *(void *)(*(void *)(v14 + 8) + 8));
            uint64_t v14 = *(void *)(a1 + 8);
            v29 += *(unsigned __int16 *)(v14 + 48);
          }
          while (v29 < v23);
        }
        uint64_t v8 = 2297438218;
        goto LABEL_6;
      }
LABEL_15:
      unsigned int v15 = *(_DWORD *)(v14 + 76);
    }
    *(_DWORD *)(v14 + 76) = v15 + a3;
    synthstream_loc_StreamImplDump(v14, *(void *)(v14 + 96) + v17, a3);
    uint64_t v25 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v25 + 104) - v22 >= *(_DWORD *)(*(void *)v25 + 40))
    {
      *(_DWORD *)(v25 + 104) = v22;
      uint64_t v26 = *(void *)(v25 + 96);
      if (v22)
      {
        uint64_t v27 = heap_Realloc(*(uint64_t **)(*(void *)(v25 + 8) + 8), v26, v22 + 1);
        uint64_t v25 = *(void *)(a1 + 8);
        if (!v27) {
          goto LABEL_29;
        }
      }
      else
      {
        heap_Free(*(void **)(*(void *)(v25 + 8) + 8), v26);
        uint64_t v27 = 0;
        uint64_t v25 = *(void *)(a1 + 8);
      }
      *(void *)(v25 + 96) = v27;
    }
LABEL_29:
    synthstream_loc_StreamImplRecoverExcessBuffer(v25, 0);
    goto LABEL_6;
  }
  return v8;
}

uint64_t synthstream_WriteCopy(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v12 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v16 = 2297438215;
    uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : Begin (%u, %p, %p, %lu bytes)", v13, v14, v15, *(unsigned __int16 *)(a1 + 4));
    if (a5 && a6)
    {
      if ((*(_DWORD *)a1 - 1) < 2)
      {
        BOOL v28 = 0;
        unsigned int v27 = 0;
        *a6 = 0;
        uint64_t v16 = synthstream_ReadDirectStart(a3, a4, &v28, &v27);
        if ((v16 & 0x80000000) == 0 && v27)
        {
          if (v27 < a5) {
            a5 = v27;
          }
          uint64_t v25 = synthstream_Write(a1, a2, v28, a5);
          if ((v25 & 0x80000000) != 0)
          {
            uint64_t v16 = v25;
            a5 = 0;
          }
          else
          {
            uint64_t v16 = 0;
            *a6 = a5;
          }
          synthstream_ReadDirectEnd(a3, a4, a5);
        }
        goto LABEL_18;
      }
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22008, (uint64_t)"%s%s%s%u%s%s", v18, v19, v20, v21, "function");
    }
    else
    {
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%u%s%p", v18, v19, v20, v21, "function");
      if (!a6) {
        return v16;
      }
    }
    *a6 = 0;
LABEL_18:
    log_OutText(*(void *)(v17 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM WriteCopy : End (%x, %lu bytes)", v22, v23, v24, v16);
    return v16;
  }
  return v12;
}

uint64_t synthstream_GetPosition(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v8 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : Begin (%u, %p)", v5, v6, v7, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (*(_DWORD *)a1) {
        uint64_t v14 = (_DWORD *)(*(void *)(a1 + 8) + 76);
      }
      else {
        uint64_t v14 = (_DWORD *)(a1 + 16);
      }
      *a3 = *v14;
      log_OutText(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetPosition : End (%x, %lu)", v11, v12, v13, v8);
    }
    else
    {
      log_OutPublic(*(void *)(v9 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v10, v11, v12, v13, "function");
      return 2297438215;
    }
  }
  return v8;
}

uint64_t synthstream_GetRemaining(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v10 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 8);
    log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : Begin (%u, %p)", v7, v8, v9, *(unsigned __int16 *)(a1 + 4));
    if (a3)
    {
      if (!*(_DWORD *)a1)
      {
        uint64_t v16 = *(void *)(a1 + 8);
        *a3 = *(_DWORD *)(v16 + 76) - *(_DWORD *)(a1 + 16);
        if (a4) {
          *a4 = *(_DWORD *)(v16 + 108);
        }
LABEL_12:
        log_OutText(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM GetRemaining : End (%x, %lu)", v13, v14, v15, v10);
        return v10;
      }
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22009, (uint64_t)"%s%s%s%u%s%s", v12, v13, v14, v15, "function");
      *a3 = 0;
      if (a4) {
        goto LABEL_5;
      }
    }
    else
    {
      log_OutPublic(*(void *)(v11 + 32), (uint64_t)"SYNTHSTREAM", 22006, (uint64_t)"%s%s%s%u%s%s%s%p", v12, v13, v14, v15, "function");
      if (a4) {
LABEL_5:
      }
        *a4 = 1;
    }
    uint64_t v10 = 2297438215;
    if (!a3) {
      return v10;
    }
    goto LABEL_12;
  }
  return v10;
}

long long *synthstream_GetMarkerTIElem()
{
  return &IElemMarkerT;
}

uint64_t synthstream_Reset(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  unsigned int v27 = 0;
  uint64_t v25 = 0;
  uint64_t v4 = synthstream_loc_BeginFunction(a1, a2, &v28, &v29);
  if ((v4 & 0x80000000) != 0) {
    return v4;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : Begin (%u)", v5, v6, v7, a3);
  int Str = paramc_ParamGetStr(*(void *)(v28 + 40), (uint64_t)"clcpppipelinemode", &v26);
  int v9 = ssftmap_IteratorOpen(*(void *)(v29 + 24), 0, 1, (uint64_t)&v27);
  LODWORD(v13) = v9;
  if (Str < 0)
  {
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
      {
        if (*(_WORD *)(v23 + 42) == 1)
        {
          unsigned int v20 = *(unsigned __int16 *)(v23 + 40);
          if (v20 >= a3) {
            uint64_t v21 = "Clear";
          }
          else {
            uint64_t v21 = "Keep";
          }
          log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)v21);
          if (v20 >= a3) {
            ssftmap_IteratorRemove(v27);
          }
        }
        else
        {
          log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 3, 0, (uint64_t)"%s stream %s %u", v17, v18, v19, (uint64_t)"Keep");
        }
      }
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    while ((ssftmap_IteratorNext(v27, &v24, &v23) & 0x80000000) == 0)
    {
      uint64_t v14 = v23;
      *(void *)(v23 + 84) = 0;
      *(void *)(v14 + 76) = 0;
      if (vector_GetElemAt(*(void *)(v14 + 24), 0, &v25) == 1)
      {
        unsigned int v15 = 1;
        do
        {
          *(_DWORD *)(*(void *)v25 + 16) = 0;
          int ElemAt = vector_GetElemAt(*(void *)(v23 + 24), v15++, &v25);
        }
        while (ElemAt == 1);
      }
    }
LABEL_21:
    ssftmap_IteratorClose((uint64_t)v27);
  }
  if ((v13 & 0x1FFF) == 0x14) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v13;
  }
  log_OutText(*(void *)(v28 + 32), (uint64_t)"SYNTHSTREAM", 4, 0, (uint64_t)"SYNTHSTREAM Reset : End (%x)", v10, v11, v12, v13);
  return v13;
}

long long *synthstream_GetIntMarkerTIElem()
{
  return &IElemIntMarkerT;
}

uint64_t synthstream_SetRulRes(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v7 = safeh_HandleCheck(a1, a2, 18398, 24);
  if ((v7 & 0x80000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v8 + 8);
    if (a4)
    {
      int v10 = 0;
      uint64_t v11 = a4;
      uint64_t v12 = a3;
      do
      {
        int v13 = *v12++;
        if ((v13 - 1) < 0x1F) {
          ++v10;
        }
        --v11;
      }
      while (v11);
      int v14 = 4 * v10;
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = *(void *)(v8 + 112);
    if (v15)
    {
      heap_Free(*(void **)(v9 + 8), v15);
      uint64_t v16 = *(void *)(a1 + 8);
      *(void *)(v16 + 112) = 0;
      uint64_t v9 = *(void *)(v16 + 8);
    }
    uint64_t v17 = heap_Alloc(*(void *)(v9 + 8), a4 + v14 + 1);
    *(void *)(*(void *)(a1 + 8) + 112) = v17;
    if (v17) {
      uint64_t v18 = v7;
    }
    else {
      uint64_t v18 = 2297438218;
    }
    if (v17) {
      BOOL v19 = a4 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      return v18;
    }
    else
    {
      unsigned int v20 = (char *)v17;
      uint64_t v21 = a4;
      do
      {
        int v23 = *a3++;
        int v22 = v23;
        if ((v23 - 1) > 0x1E)
        {
          *unsigned int v20 = v22;
          size_t v26 = 1;
        }
        else
        {
          switch(v22)
          {
            case 7:
              uint64_t v24 = v20;
              uint64_t v25 = "\\a";
              goto LABEL_33;
            case 8:
              uint64_t v24 = v20;
              uint64_t v25 = "\\b";
              goto LABEL_33;
            case 9:
              cstdlib_strcpy(v20, "\\t");
              unsigned int v27 = "\\t";
              goto LABEL_34;
            case 10:
              cstdlib_strcpy(v20, "\\n");
              unsigned int v27 = "\\n";
              goto LABEL_34;
            case 11:
              cstdlib_strcpy(v20, "\\v");
              unsigned int v27 = "\\v";
              goto LABEL_34;
            case 12:
              cstdlib_strcpy(v20, "\\f");
              unsigned int v27 = "\\f";
              goto LABEL_34;
            case 13:
              cstdlib_strcpy(v20, "\\r");
              unsigned int v27 = "\\r";
              goto LABEL_34;
            default:
              uint64_t v24 = v20;
              if (v22 == 27) {
                uint64_t v25 = "<ESC>";
              }
              else {
                uint64_t v25 = "<SPC>";
              }
LABEL_33:
              cstdlib_strcpy(v24, v25);
              unsigned int v27 = v25;
LABEL_34:
              size_t v26 = cstdlib_strlen(v27);
              break;
          }
        }
        v20 += v26;
        --v21;
      }
      while (v21);
    }
  }
  return v7;
}

void *synthstream_GetGeeneMarkerTIElem()
{
  return &IElemGeeneWordT;
}

uint64_t synthstream_loc_ElemCopyMapKey(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = 2297438215;
  if (a1 && a2 && a3)
  {
    uint64_t v7 = heap_Calloc(a2, 1, 16);
    if (v7)
    {
      uint64_t v8 = v7;
      *(_WORD *)(v7 + 8) = *(_WORD *)(a1 + 8);
      uint64_t v3 = ssftmap_ElemCopyString(*(const char **)a1, (uint64_t)a2, (char **)v7);
      if ((v3 & 0x80000000) != 0) {
        heap_Free(a2, v8);
      }
      else {
        *a3 = v8;
      }
    }
    else
    {
      return 2297438218;
    }
  }
  return v3;
}

uint64_t *synthstream_loc_ElemFreeMapKey(uint64_t *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (*result) {
      heap_Free(a2, *result);
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t synthstream_loc_ElemCompareKeysMapKey(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(const char **)a1;
    if (*(void *)a1)
    {
      if (!a2) {
        return 1;
      }
      uint64_t v5 = *(const char **)a2;
      if (!*(void *)a2) {
        return 1;
      }
LABEL_13:
      uint64_t result = cstdlib_strcmp(v4, v5);
      if (!result)
      {
        unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
        unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
        BOOL v9 = v7 >= v8;
        BOOL v10 = v7 > v8;
        if (v9) {
          return v10;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      return result;
    }
  }
  if (!a2) {
    return 0;
  }
  uint64_t v5 = *(const char **)a2;
  if (*(void *)a2) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 0;
  }
  if (a1 && v5)
  {
    uint64_t v4 = *(const char **)a1;
    if (!*(void *)a1) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t synthstream_loc_ElemCopyStreamImpl(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 2297438215;
  if (a1 && a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      ++*(_WORD *)(a1 + 42);
      *a3 = a1;
    }
  }
  return result;
}

void *synthstream_loc_ElemReleaseStreamImpl(void *result)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    unsigned int v2 = *((unsigned __int16 *)result + 21);
    if (v2 < 2)
    {
      uint64_t v3 = result[1];
      if (*((unsigned char *)result + 74))
      {
        uint64_t v25 = 0;
        __s2 = 0;
        uint64_t v4 = (char *)result[4];
        v27[0] = 0;
        cstdlib_strcpy(__dst, v4);
        if (cstdlib_strcmp(v4, "application/synthesis+ssml")
          && cstdlib_strcmp(v4, "text/html")
          && cstdlib_strcmp(v4, "text/email")
          && cstdlib_strcmp(v4, "text/xml"))
        {
          if ((paramc_ParamGetStr(*(void *)(*(void *)(v1 + 8) + 40), (uint64_t)"inputmimetype", &__s2) & 0x80000000) != 0
            || !__s2
            || !*__s2)
          {
            __s2 = cstdlib_strstr(v4, ";charset=");
            if (__s2)
            {
              cstdlib_strcpy(v28, v4);
              v28[__s2 - v4] = 0;
            }
          }
        }
        else if ((paramc_ParamGetStr(*(void *)(*(void *)(v1 + 8) + 40), (uint64_t)"ssmldocumentencoding", &__s2) & 0x80000000) == 0 {
               && __s2
        }
               && *__s2)
        {
          cstdlib_strcat(__dst, ";charset=");
          cstdlib_strcat(__dst, __s2);
        }
        if ((ssftstring_ObjOpen(*(void **)(*(void *)(v1 + 8) + 8), &v25) & 0x80000000) == 0)
        {
          log_OutBinary(*(void *)(*(void *)(v1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 0, 0, (uint64_t)"input text", (uint64_t)__dst, *(void *)(v1 + 96), *(_DWORD *)(v1 + 76), (uint64_t)v25);
          __s2 = (char *)ssftstring_CStr((uint64_t)v25);
          BOOL v10 = *(uint64_t ***)(*(void *)(v1 + 8) + 32);
          if (__s2)
          {
            log_OutEvent(v10, 17, (uint64_t)"%s%s%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
            cstdlib_strcpy(v27, __s2);
          }
          else
          {
            log_OutEvent(v10, 17, (uint64_t)"%s%s%s%u", v5, v6, v7, v8, v9, "MIME");
          }
          ssftstring_ObjClose(v25);
          if (v27[0])
          {
            if (*(void *)(v1 + 112)) {
              log_OutEvent(*(uint64_t ***)(*(void *)(v1 + 8) + 32), 20, (uint64_t)"%s%s%s%s", v11, v12, v13, v14, v15, "TXID");
            }
          }
        }
      }
      uint64_t v16 = *(void *)(v1 + 32);
      if (v16) {
        heap_Free(*(void **)(v3 + 8), v16);
      }
      uint64_t v17 = *(void *)(v1 + 112);
      if (v17)
      {
        heap_Free(*(void **)(v3 + 8), v17);
        *(void *)(v1 + 112) = 0;
      }
      uint64_t v18 = *(void *)(v1 + 24);
      if (v18) {
        vector_ObjClose(v18);
      }
      uint64_t v19 = *(void *)(v1 + 96);
      if (v19)
      {
        if (*(void *)(v1 + 64))
        {
          int v20 = *(_DWORD *)(v1 + 88);
          unsigned int v21 = *(_DWORD *)(v1 + 84) - v20;
          if (v21 < *(_DWORD *)(v1 + 76) - v20)
          {
            unint64_t v22 = v19 + v21;
            do
            {
              (*(void (**)(unint64_t, void))(v1 + 64))(v22, *(void *)(*(void *)(v1 + 8) + 8));
              uint64_t v23 = *(unsigned __int16 *)(v1 + 48);
              int v24 = *(_DWORD *)(v1 + 88);
              *(_DWORD *)(v1 + 84) += v23;
              v22 += v23;
              uint64_t v19 = *(void *)(v1 + 96);
            }
            while (v22 < v19 + (unint64_t)(*(_DWORD *)(v1 + 76) - v24));
          }
        }
        heap_Free(*(void **)(v3 + 8), v19);
        *(void *)(v1 + 96) = 0;
      }
      return heap_Free(*(void **)(v3 + 8), v1);
    }
    else
    {
      *((_WORD *)result + 21) = v2 - 1;
    }
  }
  return result;
}

uint64_t synthstream_loc_BeginFunction(uint64_t a1, int a2, void *a3, uint64_t *a4)
{
  *a4 = 0;
  uint64_t result = safeh_HandleCheck(a1, a2, 18397, 48);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)a1, *(void *)(a1 + 8), a3);
    if ((result & 0x80000000) == 0) {
      *a4 = a1;
    }
  }
  return result;
}

uint64_t synthstream_loc_StreamImplDump(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = log_GetLogLevel(*(void *)(*(void *)(a1 + 8) + 32));
  if (result >= 6)
  {
    if (a2 && a3)
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
      uint64_t v11 = *(unsigned __int16 *)(a1 + 44);
      if (*(unsigned char *)(a1 + 73))
      {
        log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)"writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes [%.*s]", v7, v8, v9, v11);
        LH_utoa(*(unsigned __int16 *)(a1 + 44), v13, 0xAu);
        return log_OutBinary(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 99, 0, (uint64_t)v13, *(void *)(a1 + 32), a2, a3, 0);
      }
      uint64_t v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d, writing %u bytes";
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
      uint64_t v11 = *(unsigned __int16 *)(a1 + 44);
      uint64_t v12 = "writerID=%u, szContentType=%s, pipelinePos=%u, refCount=%u, writePos=%u, bufPos=%u, eos=%d";
    }
    return log_OutText(v10, (uint64_t)"SYNTHSTREAM", 6, 0, (uint64_t)v12, v7, v8, v9, v11);
  }
  return result;
}

uint64_t synthstream_loc_StreamImplRecoverExcessBuffer(uint64_t result, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 76);
  uint64_t v17 = 0;
  if (!*(void *)(result + 96)) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 72)) {
    return result;
  }
  uint64_t result = vector_GetElemAt(*(void *)(result + 24), 0, &v17);
  if (result == 1)
  {
    unsigned int v5 = 1;
    do
    {
      if (*(_DWORD *)(*(void *)v17 + 16) < v2) {
        unsigned int v2 = *(_DWORD *)(*(void *)v17 + 16);
      }
      uint64_t result = vector_GetElemAt(*(void *)(v3 + 24), v5++, &v17);
    }
    while (result == 1);
  }
  int v6 = *(_DWORD *)(v3 + 88);
  unsigned int v7 = v2 - v6;
  unsigned int v8 = *(unsigned __int16 *)(v3 + 48);
  if (v8 >= 2) {
    unsigned int v7 = v7 / v8 * v8;
  }
  if (*(void *)(v3 + 64))
  {
    if (v7)
    {
      unsigned int v9 = *(_DWORD *)(v3 + 84) - v6;
      if (v9 < v7)
      {
        unint64_t v10 = *(void *)(v3 + 96) + v9;
        do
        {
          uint64_t result = (*(uint64_t (**)(unint64_t, void))(v3 + 64))(v10, *(void *)(*(void *)(v3 + 8) + 8));
          uint64_t v11 = *(unsigned __int16 *)(v3 + 48);
          *(_DWORD *)(v3 + 84) += v11;
          v10 += v11;
        }
        while (v10 < *(void *)(v3 + 96) + (unint64_t)v7);
      }
    }
  }
  if (a2)
  {
    if (v7 >= a2) {
      goto LABEL_21;
    }
    unsigned int v12 = *(_DWORD *)(*(void *)v3 + 36);
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(*(void *)v3 + 40);
  }
  if (v7 < v12) {
    return result;
  }
LABEL_21:
  int v13 = *(_DWORD *)(v3 + 76);
  if (v13 != v2) {
    uint64_t result = (uint64_t)cstdlib_memmove(*(void **)(v3 + 96), (const void *)(*(void *)(v3 + 96) + v7), v13 - v2);
  }
  *(_DWORD *)(v3 + 88) += v7;
  if (!a2)
  {
    int v14 = *(_DWORD *)(v3 + 104);
    if (v14 == v7)
    {
      uint64_t v15 = *(void *)(v3 + 96);
    }
    else
    {
      uint64_t v15 = *(void *)(v3 + 96);
      if (v2 != *(_DWORD *)(v3 + 76))
      {
        uint64_t result = heap_Realloc(*(uint64_t **)(*(void *)(v3 + 8) + 8), v15, v14 - v7);
        if (!result) {
          return result;
        }
        *(void *)(v3 + 96) = result;
        unsigned int v16 = *(_DWORD *)(v3 + 104) - v7;
LABEL_28:
        *(_DWORD *)(v3 + 104) = v16;
        return result;
      }
    }
    uint64_t result = (uint64_t)heap_Free(*(void **)(*(void *)(v3 + 8) + 8), v15);
    unsigned int v16 = 0;
    *(void *)(v3 + 96) = 0;
    goto LABEL_28;
  }
  return result;
}

uint64_t synthstream_loc_StreamImplGrowBuf(uint64_t a1, int a2, _DWORD *a3)
{
  if (!a3)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
    unsigned int v7 = *(_DWORD *)(a1 + 104);
    if (v6 > v7) {
      goto LABEL_7;
    }
    return 0;
  }
  *a3 = 1;
  unsigned int v6 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  unsigned int v7 = *(_DWORD *)(a1 + 104);
  if (v6 <= v7) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t result = vector_GetSize(*(void *)(a1 + 24));
    if (!result)
    {
      *a3 = 0;
      return result;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 104);
  }
LABEL_7:
  synthstream_loc_StreamImplRecoverExcessBuffer(a1, v6 - v7);
  unsigned int v9 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  if (v9 <= *(_DWORD *)(a1 + 104)) {
    return 0;
  }
  if (v9 <= *(_DWORD *)(*(void *)a1 + 32)) {
    int v10 = *(_DWORD *)(*(void *)a1 + 32);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 76) - *(_DWORD *)(a1 + 88) + a2;
  }
  uint64_t v11 = *(void *)(a1 + 96);
  unsigned int v12 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v13 = (v10 + 1);
  if (v11) {
    uint64_t v14 = heap_Realloc(v12, v11, v13);
  }
  else {
    uint64_t v14 = heap_Calloc(v12, 1, v13);
  }
  uint64_t v19 = v14;
  if (v14)
  {
    uint64_t result = 0;
    *(void *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = v10;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)(a1 + 8) + 32), (uint64_t)"SYNTHSTREAM", 22000, 0, v15, v16, v17, v18, v20);
    return 2297438218;
  }
  return result;
}

uint64_t DecoAddr(void *a1, int a2)
{
  uint64_t v3 = (unsigned int *)a1[2];
  uint64_t v4 = *(void *)v3;
  int v5 = *(unsigned __int8 *)(*(void *)v3 + 19);
  char v6 = v5 * a2;
  unsigned int v7 = (v5 * a2) >> 3;
  uint64_t v8 = a1[6];
  if (v8)
  {
    a1[1] = v8 + v3[34] + v7;
  }
  else
  {
    unsigned int v15 = *(unsigned __int16 *)(v4 + 54);
    unsigned int v16 = *(_DWORD *)(v4 + 68);
    if (v7 + v15 <= v16) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = v16 - v7;
    }
    int v18 = brk_DataMap(a1[3], a1[4], v3[34] + v7, v17, (uint64_t)(a1 + 1));
    if ((v18 & 0x1FFF) == 0xA) {
      return 4294967294;
    }
    if (v18) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v9 = (v6 & 7) + v5;
  int v10 = (unsigned __int8 *)a1[1];
  unsigned int v11 = *v10;
  if (v9 < 9)
  {
    uint64_t v19 = (v11 >> (8 - v9)) & (0xFFFFFFFF >> -(char)v5);
  }
  else
  {
    unsigned int v12 = ((0xFFu >> (v6 & 7)) & v11) << (v9 - 8);
    if (v9 < 0x11)
    {
      char v14 = 16;
      uint64_t v13 = 1;
    }
    else
    {
      LOBYTE(v13) = 1;
      char v14 = 16;
      do
      {
        v12 += v10[v13] << (v9 - v14);
        LOBYTE(v13) = v13 + 1;
        char v14 = 8 * v13 + 8;
      }
      while (v9 > (v14 & 0xF8u));
      uint64_t v13 = v13;
    }
    uint64_t v19 = (v10[v13] >> (v14 - v9)) + v12;
  }
  if (!a1[6]) {
    brk_DataUnmap(a1[3], a1[4], (uint64_t)v10);
  }
  return v19;
}

uint64_t WordToHashOpt(uint64_t a1, uint64_t a2, unsigned int a3, __int16 a4, int a5, uint64_t a6)
{
  int v34 = 0;
  unsigned int v12 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
  {
    unsigned __int16 v13 = 0;
    goto LABEL_3;
  }
  uint64_t v23 = *(void **)(a1 + 16);
  uint64_t v24 = v23[1];
  uint64_t v25 = *(unsigned __int8 *)(a2 + a3);
  if (a5)
  {
    LODWORD(v25) = depes_tolower(v25);
    uint64_t v23 = *(void **)(a1 + 16);
  }
  uint64_t v26 = *v23;
  unsigned int v27 = *(unsigned __int8 *)(v24 - *(unsigned __int8 *)(*v23 + 4) + v25);
  uint64_t v28 = *(unsigned __int16 *)(*v23 + 46);
  if (*(_WORD *)(*v23 + 46))
  {
    uint64_t v29 = 0;
    int v30 = 0;
    while (v27 > *(unsigned __int8 *)(v23[3] + v29))
    {
      v30 += *(_DWORD *)(v23[5] + 4 * v29++);
      if (v28 == v29) {
        return 0xFFFFFFFFLL;
      }
    }
    LODWORD(v29) = (unsigned __int16)v29;
  }
  else
  {
    int v30 = 0;
    LODWORD(v29) = 0;
  }
  int v34 = v30;
  if (v29 != v28 && v27 == *(unsigned __int8 *)(v23[3] + v29))
  {
    *(_DWORD *)(a6 + 4) = v30;
    unsigned int v12 = *(_DWORD *)(v23[4] + 4 * v29);
    if (v12 <= *(unsigned __int8 *)(v26 + 18))
    {
      int v32 = *(_DWORD *)(v26 + 56);
      *(_DWORD *)a1 = v32;
      int v33 = *(unsigned __int8 *)(v26 + 17);
      *(unsigned char *)(a1 + 4) = v33;
      unsigned int v12 = v33 + 8 * v32;
    }
    *(_DWORD *)a6 = v12;
    unsigned __int16 v13 = 1;
LABEL_3:
    uint64_t v14 = a3;
    unsigned __int16 v15 = a4 - a3 + 1;
    while (v13 != v15)
    {
      unsigned int v16 = *(void **)(a1 + 16);
      uint64_t v17 = v16[1];
      uint64_t v18 = *(unsigned __int8 *)(a2 + v14 + v13);
      if (a5)
      {
        unint64_t v19 = depes_tolower(v18) - (unint64_t)*(unsigned __int8 *)(**(void **)(a1 + 16) + 4);
        unsigned int v12 = *(_DWORD *)a6;
      }
      else
      {
        unint64_t v19 = v18 - *(unsigned __int8 *)(*v16 + 4);
      }
      unsigned int v20 = *(unsigned __int8 *)(v17 + v19);
      if ((SearchEntry(a1, v12, v20, (unsigned __int16 *)(a6 + 8), &v34, (unsigned int *)a6) & 0x1FFF) == 0xA) {
        return 4294967294;
      }
      unsigned int v12 = *(_DWORD *)a6;
      if (!*(_DWORD *)a6)
      {
        uint64_t result = 0xFFFFFFFFLL;
        *(_DWORD *)(a6 + 4) = -1;
        return result;
      }
      unsigned int v21 = *(_DWORD *)(a6 + 4) + v34;
      *(_DWORD *)(a6 + 4) = v21;
      ++v13;
      if (v20 == *(unsigned __int8 *)(**(void **)(a1 + 16) + 16))
      {
        if (v12 == 1) {
          return v21;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    unsigned int v36 = 0;
    unsigned int v31 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 16);
    unsigned __int16 v35 = *(_WORD *)(a6 + 8);
    if ((SearchEntry(a1, v12, v31, &v35, &v34, &v36) & 0x1FFF) == 0xA) {
      return 4294967294;
    }
    if (v36 == 1) {
      return (v34 + *(_DWORD *)(a6 + 4));
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t SearchEntry(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int16 *a4, _DWORD *a5, unsigned int *a6)
{
  char v6 = a6;
  unsigned int SourceAddress = a2;
  unsigned int v12 = a2 >> 3;
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13)
  {
    int v46 = a6;
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v13 + *(unsigned int *)(v14 + 128) + v12;
  }
  else
  {
    uint64_t result = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 16) + 128) + v12, *(unsigned __int16 *)(**(void **)(a1 + 16) + 50), a1 + 8);
    if (result)
    {
      unsigned int SourceAddress = 0;
      goto LABEL_72;
    }
    int v46 = v6;
    uint64_t v14 = *(void *)(a1 + 16);
  }
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = SourceAddress & 7;
  *a5 = 0;
  uint64_t v15 = *(void *)(v14 + 88);
  unsigned int v16 = *(unsigned __int16 *)(v15
                            + 2
                            * HuffDecode((unsigned int *)a1, *(void *)(v14 + 48), *(unsigned __int16 *)(*(void *)v14 + 26)));
  uint64_t v17 = *(uint64_t **)(a1 + 16);
  unsigned int v18 = *(unsigned __int16 *)(*v17 + 24);
  unsigned __int16 v19 = v16 - v18;
  if (v16 > v18)
  {
    int v20 = 0;
    do
    {
      unsigned int v21 = *(uint64_t **)(a1 + 16);
      uint64_t v22 = v21[12];
      unsigned int v23 = HuffDecode((unsigned int *)a1, v21[7], *(unsigned __int16 *)(*v21 + 28));
      ++v20;
      unsigned int v24 = *a4;
    }
    while (v24 >= (unsigned __int16)v20);
    if (*(unsigned __int8 *)(v22 + v23) == a3)
    {
      *a5 = 0;
      unsigned __int16 v25 = v24 + 1;
      *a4 = v25;
      if (v25 < v19)
      {
        uint64_t v26 = *(void *)(a1 + 48);
        goto LABEL_44;
      }
      *a4 = 0;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) == a3)
      {
LABEL_43:
        uint64_t v26 = *(void *)(a1 + 48);
        unsigned int SourceAddress = 1;
LABEL_44:
        char v6 = v46;
        if (!v26) {
          goto LABEL_70;
        }
LABEL_71:
        uint64_t result = 0;
        goto LABEL_72;
      }
      unsigned int v43 = DecodeSourceLink(a1);
      char v6 = v46;
      if (!v43)
      {
        unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
        goto LABEL_69;
      }
      unsigned int SourceAddress = v43;
      uint64_t v44 = **(void **)(a1 + 16);
      if (v43 > *(unsigned __int8 *)(v44 + 18)) {
        goto LABEL_69;
      }
      int v40 = *(unsigned __int8 *)(a1 + 4);
      int v45 = *(unsigned __int8 *)(v44 + 15);
      if ((v45 & v40) != 0)
      {
        do
          ++v40;
        while ((v45 & v40) != 0);
        *(unsigned char *)(a1 + 4) = v40;
      }
LABEL_59:
      unsigned int v42 = *(_DWORD *)a1;
      if (v40 == 8)
      {
        LOBYTE(v40) = 0;
        *(unsigned char *)(a1 + 4) = 0;
        *(_DWORD *)a1 = ++v42;
      }
      unsigned int SourceAddress = 8 * (v42 + v12) + v40;
LABEL_69:
      if (*(void *)(a1 + 48)) {
        goto LABEL_71;
      }
LABEL_70:
      brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 8));
      goto LABEL_71;
    }
    goto LABEL_39;
  }
  uint64_t v27 = v17[12];
  unsigned int v28 = *(unsigned __int8 *)(v27 + HuffDecode((unsigned int *)a1, v17[7], *(unsigned __int16 *)(*v17 + 28)));
  if (v28 == *(unsigned __int8 *)(**(void **)(a1 + 16) + 16))
  {
    unsigned int SourceAddress = 0;
    if (v28 == a3) {
      goto LABEL_19;
    }
    int v29 = 1;
    goto LABEL_18;
  }
  unsigned int SourceAddress = DecodeSourceLink(a1);
  if (!SourceAddress) {
    unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
  }
  if (v28 != a3)
  {
    int v29 = DecodeSourceHash(a1);
LABEL_18:
    *a5 += v29;
  }
LABEL_19:
  BOOL v31 = v16 > 1;
  unsigned __int16 v32 = 1;
  if (v28 < a3 && v16 >= 2)
  {
    do
    {
      int v34 = *(uint64_t **)(a1 + 16);
      uint64_t v35 = v34[13];
      LOBYTE(v28) = *(unsigned char *)(v35
                             + HuffDecode((unsigned int *)a1, v34[8], *(unsigned __int16 *)(*v34 + 30)))
                  + v28;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) == v28)
      {
        if (a3 == v28) {
          goto LABEL_32;
        }
        int v36 = 1;
      }
      else
      {
        unsigned int SourceAddress = DecodeSourceLink(a1);
        if (!SourceAddress) {
          unsigned int SourceAddress = GetSourceAddress((unsigned int *)a1);
        }
        if (a3 == v28) {
          goto LABEL_32;
        }
        int v36 = DecodeSourceHash(a1);
      }
      *a5 += v36;
LABEL_32:
      BOOL v31 = v16 > ++v32;
    }
    while (a3 > v28 && v16 > v32);
  }
  if (a3 != v28)
  {
LABEL_39:
    unsigned int SourceAddress = 0;
    uint64_t result = 0;
    char v6 = v46;
    if (!*(void *)(a1 + 48)) {
      goto LABEL_70;
    }
    goto LABEL_72;
  }
  uint64_t v37 = **(void **)(a1 + 16);
  if (*(unsigned __int8 *)(v37 + 16) == a3) {
    goto LABEL_43;
  }
  if (SourceAddress <= *(unsigned __int8 *)(v37 + 18))
  {
    if (v31) {
      DecodeSourceHash(a1);
    }
    while (v16 > v32)
    {
      uint64_t v38 = *(uint64_t **)(a1 + 16);
      uint64_t v39 = v38[13];
      LOBYTE(a3) = *(unsigned char *)(v39
                            + HuffDecode((unsigned int *)a1, v38[8], *(unsigned __int16 *)(*v38 + 30)))
                 + a3;
      if (*(unsigned __int8 *)(**(void **)(a1 + 16) + 16) != a3)
      {
        if (!DecodeSourceLink(a1)) {
          GetSourceAddress((unsigned int *)a1);
        }
        if (v32 < (unsigned __int16)(v16 - 1)) {
          DecodeSourceHash(a1);
        }
      }
      ++v32;
    }
    int v40 = *(unsigned __int8 *)(a1 + 4);
    int v41 = *(unsigned __int8 *)(**(void **)(a1 + 16) + 15);
    if ((v41 & v40) != 0)
    {
      do
        ++v40;
      while ((v41 & v40) != 0);
      *(unsigned char *)(a1 + 4) = v40;
    }
    char v6 = v46;
    goto LABEL_59;
  }
  if (!*(void *)(a1 + 48))
  {
    char v6 = v46;
    goto LABEL_70;
  }
  uint64_t result = 0;
  char v6 = v46;
LABEL_72:
  *char v6 = SourceAddress;
  return result;
}

uint64_t open_DctRom(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v11 = 0;
  int v5 = (_DWORD *)a1[6];
  if (v5)
  {
    unsigned int v11 = (_DWORD *)a1[6];
  }
  else
  {
    uint64_t v8 = brk_DataOpenEx(a1[3], a2, 1, (uint64_t)(a1 + 4));
    if (v8)
    {
      uint64_t v6 = v8;
      a1[4] = 0;
      return v6;
    }
    uint64_t v9 = brk_DataMap(a1[3], a1[4], 0, 40, (uint64_t)&v11);
    if (v9)
    {
      uint64_t v6 = v9;
      brk_DataClose(a1[3], a1[4]);
      a1[4] = 0;
      return v6;
    }
    int v5 = v11;
  }
  uint64_t v6 = 2306875417;
  if (*v5 == 65279
    && !LH_strnicmp((uint64_t)(v5 + 1), (uint64_t)"SCANSOFT", 8uLL)
    && !LH_strnicmp((uint64_t)(v11 + 3), (uint64_t)"SYS_DCT", 7uLL))
  {
    int v7 = v11[5];
    if (!a1[6]) {
      brk_DataUnmap(a1[3], a1[4], (uint64_t)v11);
    }
    uint64_t v6 = 0;
    *a3 = v7 - 40;
  }
  return v6;
}

uint64_t close_DctRom(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    brk_DataClose(*(void *)(a1 + 24), v1);
    *(void *)(a1 + 32) = 0;
  }
  return 0;
}

uint64_t query_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v6 = a3;
  uint64_t v14 = 0;
  *a5 = 0;
  uint64_t v9 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), 40, a3, (uint64_t)&v14);
  if (v9)
  {
    uint64_t v10 = v9;
    brk_DataClose(*(void *)(a1 + 24), *(void *)(a1 + 32));
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    if (v6)
    {
      unsigned int v11 = 0;
      while (LH_stricmp((char *)(v14 + v11), a2))
      {
        int v12 = cstdlib_strlen((const char *)(v14 + v11));
        v11 += v12 + ((~(_BYTE)v12 - (_BYTE)v11) & 3) + 5;
        if (v11 >= v6) {
          goto LABEL_9;
        }
      }
      *a5 = 1;
    }
LABEL_9:
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), v14);
    return 0;
  }
  return v10;
}

uint64_t init_DctRom(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = a3;
  uint64_t v35 = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    uint64_t v35 = (char *)(v8 + 40);
  }
  else
  {
    uint64_t v14 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), 40, a3, (uint64_t)&v35);
    if (v14)
    {
LABEL_10:
      uint64_t v13 = v14;
      brk_DataClose(*(void *)(a1 + 24), *(void *)(a1 + 32));
      *(void *)(a1 + 32) = 0;
      return v13;
    }
  }
  if (v5)
  {
    unsigned int v9 = 0;
    while (1)
    {
      int v10 = LH_stricmp(&v35[v9], a2);
      int v11 = cstdlib_strlen(&v35[v9]);
      int v12 = (~(_BYTE)v11 - (_BYTE)v9) & 3;
      if (!v10) {
        break;
      }
      v9 += v12 + v11 + 5;
      if (v9 >= v5) {
        goto LABEL_7;
      }
    }
    uint64_t v15 = *(unsigned int *)&v35[(v11 + v9 + v12 + 1) & 0xFFFFFFFC];
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16
      || (brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v35), (uint64_t v16 = *(void *)(a1 + 48)) != 0))
    {
      if (v15 > *(_DWORD *)(a1 + 56)) {
        return 2306875412;
      }
      LODWORD(v17) = *(_DWORD *)(v16 + v15);
      goto LABEL_16;
    }
    uint64_t v14 = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), v15, 4, (uint64_t)&v35);
    if (!v14)
    {
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(unsigned int *)v35;
      if (!v16)
      {
        brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v35);
        uint64_t v13 = brk_DataMap(*(void *)(a1 + 24), a4, v15, v17, *(void *)(a1 + 16));
        if (v13) {
          return v13;
        }
        unsigned __int16 v19 = *(uint64_t **)(a1 + 16);
        uint64_t v18 = *v19;
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v18 = v16 + v15;
      unsigned __int16 v19 = *(uint64_t **)(a1 + 16);
      *unsigned __int16 v19 = v18;
LABEL_17:
      uint64_t v13 = 0;
      uint64_t v20 = v18 + 72 + ((*(unsigned __int8 *)(v18 + 5) - *(unsigned __int8 *)(v18 + 4) + 4) & 0xFFFFFFFC);
      v19[1] = v18 + 72;
      v19[2] = v20;
      uint64_t v21 = v20 + ((2 * (*(unsigned __int8 *)(v18 + 7) - *(unsigned __int8 *)(v18 + 6)) + 5) & 0xFFFFFFFC);
      LODWORD(v20) = *(unsigned __int16 *)(v18 + 46);
      uint64_t v22 = v21 + ((v20 + 3) & 0x1FFFC);
      v19[3] = v21;
      v19[4] = v22;
      uint64_t v23 = v22 + 4 * v20;
      uint64_t v24 = v23 + 4 * v20;
      v19[5] = v23;
      v19[6] = v24;
      uint64_t v25 = v24 + 4 * *(unsigned __int16 *)(v18 + 26) + 4;
      uint64_t v26 = v25 + 4 * *(unsigned __int16 *)(v18 + 28) + 4;
      v19[7] = v25;
      v19[8] = v26;
      uint64_t v27 = v26 + 4 * *(unsigned __int16 *)(v18 + 30) + 4;
      uint64_t v28 = v27 + 4 * *(unsigned __int16 *)(v18 + 32) + 4;
      v19[9] = v27;
      v19[10] = v28;
      uint64_t v29 = v28 + 4 * *(unsigned __int16 *)(v18 + 34) + 4;
      uint64_t v30 = v29 + ((2 * *(unsigned __int16 *)(v18 + 36) + 3) & 0x3FFFC);
      v19[11] = v29;
      v19[12] = v30;
      uint64_t v31 = v30 + ((*(unsigned __int16 *)(v18 + 38) + 3) & 0x1FFFC);
      uint64_t v32 = v31 + ((*(unsigned __int16 *)(v18 + 40) + 3) & 0x1FFFC);
      v19[13] = v31;
      v19[14] = v32;
      v19[15] = v32 + ((2 * *(unsigned __int16 *)(v18 + 42) + 3) & 0x3FFFC);
      LODWORD(v32) = *(_DWORD *)(v18 + 60);
      int v33 = *(_DWORD *)(v18 + 64);
      LODWORD(v32) = ((v32 + 3) & 0xFFFFFFFC) + v17 + v15;
      *((_DWORD *)v19 + 32) = v17 + v15;
      *((_DWORD *)v19 + 33) = v32;
      *((_DWORD *)v19 + 34) = ((v33 + 3) & 0xFFFFFFFC) + v32;
      return v13;
    }
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v13 = 2306875412;
  if (!*(void *)(a1 + 48)) {
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v35);
  }
  return v13;
}

uint64_t exit_DctRom(uint64_t a1, uint64_t a2)
{
  if (a2) {
    brk_DataUnmap(*(void *)(a1 + 24), a2, **(void **)(a1 + 16));
  }
  return 0;
}

uint64_t GetMaxOutLen(uint64_t a1)
{
  return *(unsigned __int16 *)(**(void **)(a1 + 16) + 48);
}

uint64_t GetFieldSeparator(uint64_t a1)
{
  return *(unsigned __int8 *)(**(void **)(a1 + 16) + 9);
}

uint64_t set_DctBrk(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

BOOL test_DCT(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (a3 > a4) {
    return a4 >= a3;
  }
  LOWORD(v10) = a3;
  while (1)
  {
    uint64_t v11 = *(unsigned __int8 *)(a2 + (__int16)v10);
    if (a5) {
      LODWORD(v11) = depes_tolower(v11);
    }
    uint64_t v12 = **(void **)(a1 + 16);
    if (v11 < *(unsigned __int8 *)(v12 + 4) || v11 > *(unsigned __int8 *)(v12 + 5)) {
      break;
    }
    int v10 = (__int16)(v10 + 1);
    if (v10 > a4) {
      return a4 >= a3;
    }
  }
  return 0;
}

uint64_t DctLookup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, __int16 *a4, int a5, _WORD *a6, uint64_t a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  memset(v54, 0, 41);
  if ((unsigned __int16)(*a4 - *a3) > 0x7FFEu
    || *(__int16 *)(**(void **)(a1 + 16) + 22) <= (__int16)(*a4 - *a3)
    || !test_DCT(a1, a2, (__int16)*a3, *a4, a5))
  {
    return 20;
  }
  int v14 = WordToHashOpt(a1, a2, *a3, *a4, a5, a7);
  if (v14 == -2) {
    return 10;
  }
  if (v14 < 0) {
    return 20;
  }
  unsigned int v15 = DecoAddr((void *)a1, v14);
  if (v15 == -2) {
    return 10;
  }
  if ((v15 & 0x80000000) != 0) {
    return 20;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    uint64_t v18 = (unsigned char *)(v17 + *(unsigned int *)(*(void *)(a1 + 16) + 132) + v15);
    *(void *)(a1 + 8) = v18;
  }
  else
  {
    uint64_t result = brk_DataMap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 16) + 132) + v15, *(unsigned __int16 *)(**(void **)(a1 + 16) + 52), a1 + 8);
    if (result) {
      return result;
    }
    uint64_t v18 = *(unsigned char **)(a1 + 8);
  }
  uint64_t v19 = 0;
  LOWORD(v20) = 0;
  int v21 = 0;
  LOBYTE(v22) = *v18;
  uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
  do
  {
    v23[(__int16)v21++] = v22;
    uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
    uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v25 = *v24;
    do
    {
      uint64_t v20 = (__int16)v20;
      unsigned __int8 v26 = v24[2][2 * (v23[(__int16)v20] - (unint64_t)v25[6])];
      if (v26)
      {
        __int16 v27 = v21 - 1;
        do
        {
          if ((int)v20 < (__int16)(v21 - 1))
          {
            uint64_t v28 = v27;
            do
            {
              *(unsigned char *)(*(void *)(a1 + 40) + v28 + 1) = *(unsigned char *)(*(void *)(a1 + 40) + v28);
              --v28;
            }
            while (v28 > v20);
            uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
            uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
            uint64_t v25 = *v24;
          }
          ++v21;
          v23[v20 + 1] = v24[2][2 * (v23[v20] - (unint64_t)v25[6]) + 1];
          *(unsigned char *)(*(void *)(a1 + 40) + v20) = v26;
          uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
          uint64_t v23 = *(unsigned __int8 **)(a1 + 40);
          uint64_t v25 = *v24;
          unsigned __int8 v26 = v24[2][2 * (v23[v20] - (unint64_t)(*v24)[6])];
          ++v27;
        }
        while (v26);
      }
      LODWORD(v20) = (__int16)(v20 + 1);
    }
    while ((int)v20 < (__int16)v21);
    ++v19;
    unsigned int v22 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v19);
    unsigned int v29 = v25[10];
  }
  while (v22 != v25[8] && (v22 < v29 || v22 > v25[11]));
  unsigned int v30 = *v23;
  if (v30 >= v29)
  {
    do
    {
      int v31 = v30;
      unsigned int v32 = v25[11];
      if (v30 > v32) {
        break;
      }
      uint64_t v33 = *(void *)(a1 + 8);
      int v34 = v25[8];
      int v35 = *(unsigned __int8 *)(v33 + (int)v19);
      if (v35 == v34)
      {
LABEL_34:
        int v38 = 1;
      }
      else
      {
        int v36 = (unsigned __int8 *)(v33 + (int)v19 + 1);
        while (v35 < v29 || v32 < v35)
        {
          LODWORD(v19) = v19 + 1;
          int v37 = *v36++;
          LOBYTE(v35) = v37;
          if (v37 == v34) {
            goto LABEL_34;
          }
        }
        int v38 = 0;
        LOBYTE(v34) = v35;
      }
      LODWORD(v19) = v19 + v38;
      unsigned int v39 = v29;
      unsigned __int8 v40 = v29 - 1;
      if (v34 <= v32 && v34 >= v39) {
        unsigned __int8 v40 = v34;
      }
      if (v40 >= v30)
      {
        LODWORD(v19) = v19 + 1;
      }
      else
      {
        LOWORD(v42) = 0;
        int v43 = 0;
        uint64_t v44 = v24[2];
        uint64_t v45 = v25[6];
        uint64_t v19 = (int)v19;
        do
        {
          uint64_t v46 = (__int16)v43++;
          *((unsigned char *)v54 + v46) = *(unsigned char *)(v33 + v19);
          do
          {
            uint64_t v42 = (__int16)v42;
            uint64_t v47 = *((unsigned __int8 *)v54 + (__int16)v42);
            if (v44[2 * (v47 - v45)])
            {
              __int16 v48 = v43 - 1;
              do
              {
                if ((int)v42 < (__int16)(v43 - 1))
                {
                  uint64_t v49 = v48;
                  do
                  {
                    *((unsigned char *)v54 + v49 + 1) = *((unsigned char *)v54 + v49);
                    --v49;
                  }
                  while (v49 > v42);
                  uint64_t v47 = *((unsigned __int8 *)v54 + v42);
                }
                uint64_t v50 = &v44[2 * (v47 - v45)];
                *((unsigned char *)v54 + v42 + 1) = v50[1];
                uint64_t v47 = *v50;
                *((unsigned char *)v54 + v42) = v47;
                ++v43;
                ++v48;
              }
              while (v44[2 * (v47 - v45)]);
            }
            LODWORD(v42) = (__int16)(v42 + 1);
            LOBYTE(v30) = v30 - 1;
          }
          while ((int)v42 < (__int16)v43 && v30 >= v40);
          ++v19;
        }
        while (v30 >= v40);
        unsigned int v30 = v31 - v40;
        if ((__int16)v21 >= 2)
        {
          uint64_t v51 = (unsigned __int16)v21 - 1;
          uint64_t v52 = (__int16)(v21 + v31 - v40) - 1;
          do
            *(unsigned char *)(*(void *)(a1 + 40) + v52--) = *(unsigned char *)(*(void *)(a1 + 40) + v51--);
          while (v51);
        }
        if ((v30 & 0x80000000) == 0)
        {
          int v53 = 0;
          do
          {
            *(unsigned char *)(*(void *)(a1 + 40) + (__int16)v53) = *((unsigned char *)v54 + (__int16)v53);
            ++v53;
          }
          while ((int)v30 >= (__int16)v53);
        }
        LOWORD(v21) = v21 + v30;
        LOBYTE(v30) = v40;
      }
      uint64_t v24 = *(unsigned __int8 ***)(a1 + 16);
      uint64_t v25 = *v24;
      unsigned int v29 = (*v24)[10];
    }
    while (v29 <= v30);
  }
  if (!*(void *)(a1 + 48)) {
    brk_DataUnmap(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 8));
  }
  uint64_t result = 0;
  *a6 = v21;
  return result;
}

uint64_t HuffDecode(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (__int16 *)(a2 + 4 * a3);
  if (*v3 != -1)
  {
    uint64_t v4 = *((void *)a1 + 1);
    a3 = a3;
    uint64_t v5 = *a1;
    unsigned __int8 v6 = *(unsigned char *)(v4 + v5);
    unsigned int v7 = *((unsigned __int8 *)a1 + 4);
    do
    {
      if (!v7) {
        unsigned __int8 v6 = *(unsigned char *)(v4 + v5);
      }
      if (((1 << v7) & v6) == 0) {
        uint64_t v3 = (__int16 *)(a2 + 4 * a3 + 2);
      }
      a3 = (unsigned __int16)*v3;
      if (v7 > 6)
      {
        unsigned int v7 = 0;
        LODWORD(v5) = v5 + 1;
        *a1 = v5;
      }
      else
      {
        ++v7;
      }
      *((unsigned char *)a1 + 4) = v7;
      uint64_t v3 = (__int16 *)(a2 + 4 * a3);
    }
    while (*v3 != -1);
  }
  return a3;
}

uint64_t DecodeSourceLink(uint64_t a1)
{
  unsigned int v2 = *(uint64_t **)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(*v2 + 12);
  int v4 = HuffDecode((unsigned int *)a1, v2[10], *(unsigned __int16 *)(*v2 + 34));
  int v5 = (v4 * v3) & 0xF;
  char v6 = 16 - v5;
  unsigned int v7 = *(uint64_t **)(a1 + 16);
  uint64_t v8 = v7[15];
  int v9 = (unsigned __int16)((v4 * v3) >> 4);
  int v10 = *(unsigned __int16 *)(v8 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  if (16 - v5 >= v3)
  {
    uint64_t result = v10 & (0xFFFFu >> (16 - v3));
  }
  else
  {
    int v11 = *(unsigned __int16 *)(v8 + 2 * (v9 + 1));
    if (32 - v5 >= v3) {
      uint64_t result = (((0xFFFFu >> (-(char)v3 - v5)) & v11) << v6) + v10;
    }
    else {
      uint64_t result = (v11 << v6)
    }
             + v10
             + (((0xFFFFu >> (48 - v3 - v5)) & *(unsigned __int16 *)(v8 + 2 * (v9 + 2))) << (32 - v5));
  }
  uint64_t v13 = *v7;
  if (result > *(unsigned __int8 *)(v13 + 18)) {
    return (result << *(unsigned char *)(v13 + 14));
  }
  return result;
}

uint64_t GetSourceAddress(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = **((void **)a1 + 2);
  int v3 = *(unsigned __int8 *)(v2 + 12);
  int v4 = *((unsigned __int8 *)a1 + 4);
  unsigned int v5 = v4 + v3;
  uint64_t v6 = *a1;
  int v7 = *(unsigned __int8 *)(v1 + v6) >> v4;
  if ((v4 + v3) < 9)
  {
    unsigned int v12 = v7 & (0xFFu >> (8 - v3));
  }
  else
  {
    if (v5 < 0x11)
    {
      char v11 = 16;
      LOBYTE(v9) = 8;
      int v8 = 1;
    }
    else
    {
      int v8 = 1;
      LOBYTE(v9) = 8;
      int v10 = 1;
      do
      {
        v7 += *(unsigned __int8 *)(v1 + (v8 + v6)) << (v9 - v4);
        int v8 = ++v10;
        int v9 = 8 * v10;
        char v11 = 8 * v10 + 8;
      }
      while (v5 > v9 + 8);
    }
    unsigned int v12 = (((0xFFu >> (v11 - v5)) & *(unsigned __int8 *)(v1 + (v8 + v6))) << (v9 - v4)) + v7;
  }
  unsigned int v13 = v4 + v3;
  *a1 = v6 + ((v13 >> 3) & 7);
  *((unsigned char *)a1 + 4) = v13 & 7;
  return v12 << *(unsigned char *)(v2 + 14);
}

uint64_t DecodeSourceHash(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  unsigned int v3 = *(unsigned __int8 *)(*v2 + 13);
  unsigned int v4 = HuffDecode((unsigned int *)a1, v2[9], *(unsigned __int16 *)(*v2 + 32));
  if (v3 <= 0x10) {
    return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 112) + 2 * v4);
  }
  int v6 = (v4 * v3) & 0xF;
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 112);
  int v8 = (unsigned __int16)((v4 * v3) >> 4);
  int v9 = *(unsigned __int16 *)(v7 + 2 * (unsigned __int16)((v4 * v3) >> 4)) >> ((v4 * v3) & 0xF);
  int v10 = *(unsigned __int16 *)(v7 + 2 * (v8 + 1));
  if (32 - v6 >= v3) {
    return (((0xFFFFu >> (-(char)v3 - v6)) & v10) << (16 - v6)) + v9;
  }
  else {
    return (v10 << (16 - v6))
  }
         + v9
         + (((0xFFFFu >> (48 - v3 - v6)) & *(unsigned __int16 *)(v7 + 2 * (v8 + 2))) << (32 - v6));
}

uint64_t nuance_pcre_copy_substring(uint64_t a1, uint64_t a2, int a3, int a4, void *__dst, int a6)
{
  uint64_t v6 = 4294967289;
  if ((a4 & 0x80000000) == 0 && a4 < a3)
  {
    uint64_t v7 = *(int *)(a2 + 4 * ((2 * a4) | 1u));
    uint64_t v8 = *(int *)(a2 + 4 * (2 * a4));
    uint64_t v6 = v7 - v8;
    if ((int)v7 - (int)v8 >= a6)
    {
      return 4294967290;
    }
    else
    {
      cstdlib_memcpy(__dst, (const void *)(a1 + v8), v7 - v8);
      *((unsigned char *)__dst + v6) = 0;
    }
  }
  return v6;
}

uint64_t nuance_pcre_info(uint64_t a1, int *a2, int *a3)
{
  if (!a1) {
    return 4294967294;
  }
  memset(v8, 0, sizeof(v8));
  if (*(_DWORD *)a1 != 1346589253)
  {
    a1 = try_flipped((long long *)a1, (uint64_t)v8, 0, 0);
    if (!a1) {
      return 4294967292;
    }
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 8) & 0x7A7F;
  }
  if (a3)
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if ((v5 & 0x40000000) != 0)
    {
      int v6 = *(unsigned __int16 *)(a1 + 20);
    }
    else if ((v5 & 0x10000000) != 0)
    {
      int v6 = -1;
    }
    else
    {
      int v6 = -2;
    }
    *a3 = v6;
  }
  return *(unsigned __int16 *)(a1 + 16);
}

uint64_t try_flipped(long long *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*(_DWORD *)a1 != 1163019088) {
    return 0;
  }
  long long v4 = *a1;
  long long v5 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)a2 = v4;
  *(int8x8_t *)(a2 + 4) = vrev32_s8(*(int8x8_t *)((char *)a1 + 4));
  *(int8x8_t *)(a2 + 16) = vrev16_s8((int8x8_t)a1[1]);
  *(_WORD *)(a2 + 24) = bswap32(*((unsigned __int16 *)a1 + 12)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*((unsigned __int16 *)a1 + 13)) >> 16;
  *(_WORD *)(a2 + 28) = bswap32(*((unsigned __int16 *)a1 + 14)) >> 16;
  if (a3)
  {
    long long v6 = *a3;
    long long v7 = a3[1];
    *(void *)(a4 + 32) = *((void *)a3 + 4);
    *(_OWORD *)a4 = v6;
    *(_OWORD *)(a4 + 16) = v7;
    *(int8x8_t *)a4 = vrev32_s8(*(int8x8_t *)a3);
  }
  return a2;
}

uint64_t nuance_pcre_fullinfo(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t result = 4294967294;
  if (a1 && a4)
  {
    if (a2 && (*(unsigned char *)a2 & 1) != 0) {
      int v9 = *(long long **)(a2 + 8);
    }
    else {
      int v9 = 0;
    }
    memset(v14, 0, sizeof(v14));
    memset(v15, 0, sizeof(v15));
    uint64_t v16 = 0;
    if (*(_DWORD *)a1 != 1346589253)
    {
      uint64_t v10 = try_flipped((long long *)a1, (uint64_t)v14, v9, (uint64_t)v15);
      if (!v10) {
        return 4294967292;
      }
      a1 = v10;
      if (v9) {
        int v9 = v15;
      }
      else {
        int v9 = 0;
      }
    }
    switch(a3)
    {
      case 0:
        uint64_t result = 0;
        uint64_t v11 = *(_DWORD *)(a1 + 8) & 0x7A7FLL;
        goto LABEL_36;
      case 1:
        uint64_t result = 0;
        uint64_t v11 = *(unsigned int *)(a1 + 4);
        goto LABEL_36;
      case 2:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 16);
        goto LABEL_40;
      case 3:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 18);
        goto LABEL_40;
      case 4:
        int v13 = *(_DWORD *)(a1 + 8);
        if ((v13 & 0x40000000) != 0)
        {
          int v12 = *(unsigned __int16 *)(a1 + 20);
        }
        else if ((v13 & 0x10000000) != 0)
        {
          int v12 = -1;
        }
        else
        {
          int v12 = -2;
        }
        goto LABEL_39;
      case 5:
        if (!v9 || (*((unsigned char *)v9 + 4) & 1) == 0) {
          goto LABEL_34;
        }
        uint64_t v11 = *(void *)(a2 + 8) + 8;
        goto LABEL_35;
      case 6:
        if ((*(unsigned char *)(a1 + 11) & 0x20) != 0) {
          int v12 = *(unsigned __int16 *)(a1 + 22);
        }
        else {
          int v12 = -1;
        }
LABEL_39:
        uint64_t result = 0;
        goto LABEL_40;
      case 7:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 26);
        goto LABEL_40;
      case 8:
        uint64_t result = 0;
        int v12 = *(unsigned __int16 *)(a1 + 28);
LABEL_40:
        *a4 = v12;
        return result;
      case 9:
        uint64_t result = 0;
        uint64_t v11 = a1 + *(unsigned __int16 *)(a1 + 24);
        goto LABEL_36;
      case 10:
        if (v9) {
          uint64_t v11 = *(unsigned int *)v9;
        }
        else {
LABEL_34:
        }
          uint64_t v11 = 0;
LABEL_35:
        uint64_t result = 0;
        goto LABEL_36;
      case 11:
        uint64_t result = 0;
        uint64_t v11 = (uint64_t)&pcre_default_tables;
LABEL_36:
        *(void *)a4 = v11;
        break;
      default:
        uint64_t result = 4294967293;
        break;
    }
  }
  return result;
}

uint64_t nuance_pcre_config(unsigned int a1, _DWORD *a2)
{
  if (a1 > 6) {
    return 4294967293;
  }
  uint64_t result = 0;
  *a2 = dword_220752F04[a1];
  return result;
}

uint64_t nuance_pcre_compile(uint64_t a1, int a2, char *a3, uint64_t a4, const char **a5, _DWORD *a6, char *a7)
{
  v202[126] = *MEMORY[0x263EF8340];
  v202[0] = 0;
  int v201 = 0;
  int v200 = 0;
  if ((safeh_HandleCheck(a1, a2, 56663, 32) & 0x80000000) != 0 || !a5) {
    return 0;
  }
  *a5 = 0;
  if (!a6)
  {
    uint64_t v14 = 0;
    unsigned int v15 = "erroffset passed as NULL";
    goto LABEL_11;
  }
  *a6 = 0;
  if ((a4 & 0x2800) == 0x800)
  {
    int valid = valid_utf8(a3, -1);
    *a6 = valid;
    if ((valid & 0x80000000) == 0)
    {
      uint64_t v14 = 0;
      unsigned int v15 = "invalid UTF-8 string";
LABEL_11:
      *a5 = v15;
      return v14;
    }
  }
  if ((a4 & 0xFFFF8580) != 0)
  {
    uint64_t v14 = 0;
    unsigned int v15 = "unknown option bit(s) set";
    goto LABEL_11;
  }
  uint64_t v184 = 0;
  int v183 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v196 = 0u;
  if (a7) {
    uint64_t v20 = a7;
  }
  else {
    uint64_t v20 = (char *)&pcre_default_tables;
  }
  uint64_t v192 = v20;
  int v193 = v20 + 256;
  uint64_t v182 = v20;
  uint64_t v185 = (unsigned __int8 *)a3;
  unint64_t v194 = v20 + 512;
  int v195 = v20 + 832;
  *(void *)&long long v198 = 0;
  int v199 = (unsigned __int8 *)(a3 - 1);
  int v21 = digitab;
  uint64_t v22 = a4;
  int v23 = 3;
  int v24 = -1;
LABEL_17:
  uint64_t v25 = v199;
  unsigned __int8 v26 = v199 + 1;
  uint64_t v27 = *++v199;
  if (!v27)
  {
LABEL_398:
    if ((v22 & 0x4000) != 0) {
      int v154 = 10;
    }
    else {
      int v154 = 4;
    }
    int v155 = v154 + v23;
    if (v154 + v23 > 0x10000)
    {
      uint64_t v14 = 0;
      unsigned int v15 = "regular expression too large";
      goto LABEL_11;
    }
    uint64_t v156 = v22;
    int v157 = v17 + 3;
    unsigned int v158 = v155 + (v17 + 3) * v183 + 48;
    uint64_t v159 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v158);
    uint64_t v14 = v159;
    if (!v159)
    {
      unsigned int v15 = "failed to get memory";
      goto LABEL_11;
    }
    *(_DWORD *)uint64_t v159 = 1346589253;
    *(_DWORD *)(v159 + 4) = v158;
    *(_WORD *)(v159 + 30) = 0;
    *(_DWORD *)(v159 + 8) = v156;
    *(_DWORD *)(v159 + 12) = 0;
    *(_WORD *)(v159 + 24) = 48;
    *(_WORD *)(v159 + 26) = v157;
    *(_WORD *)(v159 + 28) = v183;
    if (v182 == (char *)&pcre_default_tables) {
      unint64_t v160 = 0;
    }
    else {
      unint64_t v160 = v182;
    }
    *(void *)(v159 + 32) = v160;
    *(void *)(v159 + 40) = 0;
    DWORD2(v197) = 0;
    HIDWORD(v197) = v157;
    *(void *)&long long v197 = v159 + 48;
    int v161 = (unsigned char *)(v159 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183);
    *(void *)&long long v196 = v161;
    *((void *)&v196 + 1) = v185;
    *((void *)&v198 + 1) = 0;
    int v199 = v185;
    int v200 = v161;
    *int v161 = 80;
    int v201 = 0;
    compile_regex_0(v156, v156 & 7, &v201, (unint64_t *)&v200, &v199, a5, 0, 0, (int *)v202 + 1, (int *)v202, 0, (uint64_t)&v192);
    *(_WORD *)(v14 + 16) = v201;
    int v162 = HIDWORD(v198);
    *(_WORD *)(v14 + 18) = v198;
    if (v162) {
      *(_DWORD *)(v14 + 8) |= 0x4000000u;
    }
    if (!*a5 && *v199) {
      *a5 = "unmatched parentheses";
    }
    unint64_t v163 = v200;
    *int v200 = 0;
    if (v163 - v161 + 1 > v155) {
      *a5 = "internal error: code overflow";
    }
    if (*(unsigned __int16 *)(v14 + 18) > *(unsigned __int16 *)(v14 + 16))
    {
      *a5 = "reference to non-existent subpattern";
LABEL_418:
      heap_Free(*(void **)(*(void *)a1 + 8), v14);
      goto LABEL_421;
    }
    if (*a5) {
      goto LABEL_418;
    }
    if ((v156 & 0x10) == 0)
    {
      int v190 = v156;
      int v165 = DWORD1(v198);
      if (is_anchored_0(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, &v190, 0, SDWORD1(v198)))
      {
        int v166 = 16;
      }
      else
      {
        LOWORD(firstassertedchar) = WORD2(v202[0]);
        if ((v202[0] & 0x8000000000000000) != 0
          && (int firstassertedchar = find_firstassertedchar(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, &v190, 0), firstassertedchar < 0))
        {
          if (!is_startline_0(v14 + 48 + (unsigned __int16)v157 * (unint64_t)(unsigned __int16)v183, 0, v165))goto LABEL_432; {
          int v166 = 0x10000000;
          }
        }
        else
        {
          if ((firstassertedchar & 0x100) == 0
            || (__int16 v168 = firstassertedchar,
                v193[firstassertedchar] != firstassertedchar))
          {
            __int16 v168 = firstassertedchar;
          }
          *(_WORD *)(v14 + 20) = v168;
          int v166 = 0x40000000;
        }
      }
      *(_DWORD *)(v14 + 8) |= v166;
    }
LABEL_432:
    __int16 v169 = v202[0];
    if ((v202[0] & 0x80000000) == 0)
    {
      int v170 = *(_DWORD *)(v14 + 8);
      if ((v202[0] & 0x200) != 0 || (v170 & 0x10) == 0)
      {
        if ((v202[0] & 0x100) != 0 && v193[LOBYTE(v202[0])] == LOBYTE(v202[0])) {
          __int16 v169 = v202[0] & 0xFEFF;
        }
        *(_WORD *)(v14 + 22) = v169;
        *(_DWORD *)(v14 + 8) = v170 | 0x20000000;
      }
    }
    return v14;
  }
  uint64_t v191 = 0;
  if (v19)
  {
    if ((v22 & 0x4000) != 0) {
      v23 += 6;
    }
    if (v27 == 92)
    {
      int v29 = v25[2];
      uint64_t v28 = v25 + 2;
      if (v29 == 69)
      {
        int v19 = 0;
        int v199 = v28;
        goto LABEL_77;
      }
      v23 += 2;
LABEL_74:
      int v44 = 2;
      uint64_t v18 = 1;
      goto LABEL_78;
    }
    goto LABEL_63;
  }
  if ((v22 & 8) != 0)
  {
    if (v195[v27]) {
      goto LABEL_72;
    }
    if (v27 == 35)
    {
      while (1)
      {
        int v39 = *++v26;
        int v38 = v39;
        if (v39 == 10) {
          break;
        }
        if (!v38) {
          goto LABEL_398;
        }
      }
      int v19 = 0;
      goto LABEL_76;
    }
  }
  ++v24;
  unsigned int v187 = v22;
  if ((v22 & 0x4000) != 0 && (v27 - 42) >= 2 && v27 != 63)
  {
    if (v27 == 123)
    {
      unsigned int v179 = v17;
      int v180 = v24;
      uint64_t v30 = v18;
      int v31 = is_counted_repeat(v25 + 2);
      uint64_t v18 = v30;
      uint64_t v17 = v179;
      int v24 = v180;
      int v21 = digitab;
      uint64_t v22 = v187;
      if (v31) {
        goto LABEL_85;
      }
    }
    v23 += 6;
  }
  if ((int)v27 <= 62)
  {
    switch((int)v27)
    {
      case '$':
      case '.':
        goto LABEL_73;
      case '(':
        int v32 = v24;
        if (v25[2] != 63)
        {
          int v59 = 0;
          if ((v22 & 0x1000) != 0)
          {
            int v61 = 3;
          }
          else
          {
            int v60 = v201++;
            if (v60 <= 99) {
              int v61 = 3;
            }
            else {
              int v61 = 6;
            }
          }
          unsigned int v107 = HIDWORD(v184);
          goto LABEL_263;
        }
        break;
      case ')':
        v23 += 3;
        if (HIDWORD(v184))
        {
          int v37 = v23 - *((_DWORD *)&v202[26] + (HIDWORD(v184) - 1));
          LODWORD(v184) = *((unsigned __int8 *)&v202[1] + --HIDWORD(v184));
        }
        else
        {
          HIDWORD(v184) = 0;
          int v37 = 0;
        }
        goto LABEL_225;
      case '*':
      case '+':
        goto LABEL_69;
      default:
        goto LABEL_63;
    }
    HIDWORD(v189) = 0;
    int v190 = 0;
    unsigned __int8 v26 = v25 + 3;
    unsigned __int8 v33 = v25[3];
    switch(v33)
    {
      case '!':
      case ':':
      case '=':
      case '>':
        int v59 = 0;
        int v199 = v25 + 3;
        goto LABEL_262;
      case '#':
        uint64_t v119 = v25 + 4;
        while (2)
        {
          if (!*v119)
          {
            int v199 = v119;
            uint64_t v134 = "missing) after comment";
            goto LABEL_370;
          }
          if (*v119 != 41)
          {
            ++v119;
            continue;
          }
          break;
        }
        int v199 = v119;
        int v44 = 2;
        goto LABEL_383;
      case '(':
        int v120 = v25 + 4;
        uint64_t v121 = v25[4];
        if (v121 == 82)
        {
          int v123 = v25[5];
          uint64_t v122 = v25 + 5;
          if (v123 == 41)
          {
            int v59 = 0;
            int v199 = v122;
            v23 += 3;
            goto LABEL_262;
          }
LABEL_353:
          int v199 = v120;
          uint64_t v134 = "assertion expected after (?(";
          goto LABEL_370;
        }
        uint64_t v128 = v17;
        if ((v21[v121] & 4) == 0)
        {
          int v199 = v25 + 2;
          if (v121 == 63)
          {
            unsigned int v135 = v25[5];
            if (v135 <= 0x3D && ((1 << v135) & 0x3000000200000000) != 0)
            {
              int v59 = 0;
              goto LABEL_262;
            }
          }
          goto LABEL_353;
        }
        int v142 = v25 + 4;
        do
        {
          int v144 = *++v142;
          int v143 = v144;
        }
        while ((v21[v144] & 4) != 0);
        v23 += 3;
        int v199 = v142;
        if (v143 == 41) {
          goto LABEL_368;
        }
        uint64_t v138 = "malformed number after (?(";
LABEL_382:
        *a5 = v138;
        int v44 = 8;
        uint64_t v22 = v187;
        uint64_t v17 = v128;
        goto LABEL_383;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        do
        {
          int v35 = *++v26;
          int v34 = v35;
        }
        while ((v21[v35] & 4) != 0);
        goto LABEL_36;
      case '<':
        int v125 = v25[4];
        int v124 = v125;
        int v199 = v25 + 4;
        if (v125 == 61 || v124 == 33)
        {
          v23 += 3;
          int v59 = 3;
          goto LABEL_262;
        }
        uint64_t v134 = "unrecognized character after (?<";
        goto LABEL_370;
      case 'C':
        do
        {
          int v58 = *++v26;
          int v57 = v58;
        }
        while ((v21[v58] & 4) != 0);
        int v199 = v26;
        int v24 = v32;
        if (v57 == 41)
        {
          v23 += 6;
          goto LABEL_283;
        }
        uint64_t v109 = "closing) for (?C expected";
        goto LABEL_260;
      case 'P':
        uint64_t v126 = v25 + 4;
        int v127 = v25[4];
        int v199 = v25 + 4;
        if ((v127 - 61) < 2)
        {
          uint64_t v128 = v17;
          do
          {
            int v130 = *++v126;
            int v129 = v130;
          }
          while ((v195[v130] & 0x10) != 0);
          int v199 = v126;
          if (v129 != 41)
          {
LABEL_354:
            uint64_t v138 = "syntax error after (?P";
            goto LABEL_382;
          }
LABEL_368:
          int v59 = 0;
          uint64_t v22 = v187;
          uint64_t v17 = v128;
          goto LABEL_262;
        }
        if (v127 == 60)
        {
          uint64_t v128 = v17;
          uint64_t v136 = -1;
          do
            uint64_t v137 = v25[v136++ + 6];
          while ((v195[v137] & 0x10) != 0);
          int v199 = &v25[v136 + 5];
          if (v137 != 62) {
            goto LABEL_354;
          }
          int v59 = 0;
          ++v183;
          if (v136 <= (int)v17) {
            uint64_t v17 = v17;
          }
          else {
            uint64_t v17 = v136;
          }
          uint64_t v22 = v187;
          goto LABEL_262;
        }
        uint64_t v134 = "unrecognized character after (?P";
        goto LABEL_370;
      case 'R':
        int v34 = v25[4];
        unsigned __int8 v26 = v25 + 4;
LABEL_36:
        int v24 = v32;
        int v199 = v26;
        if (v34 == 41)
        {
          int v36 = v26[1];
          if ((v36 - 42) < 2 || v36 == 63 || v36 == 123)
          {
            v23 += 9;
            int v37 = 11;
LABEL_225:
            unint64_t v100 = v26 + 1;
            unsigned int v101 = v26[1];
            if (v101 <= 0x3E)
            {
              if (v101 == 42)
              {
                uint64_t v191 = 0xFFFFFFFFLL;
                ++v23;
                goto LABEL_248;
              }
              if (v101 == 43)
              {
                uint64_t v191 = 0x1FFFFFFFFLL;
LABEL_248:
                ++v26;
                int v199 = v100;
                goto LABEL_70;
              }
LABEL_244:
              uint64_t v191 = 0x100000001;
              goto LABEL_70;
            }
            if (v101 == 63)
            {
              int v106 = 1;
              uint64_t v191 = 1;
              int v199 = v26 + 1;
              ++v23;
              ++v26;
            }
            else
            {
              if (v101 != 123) {
                goto LABEL_244;
              }
              uint64_t v102 = v17;
              int v181 = v24;
              uint64_t v103 = v18;
              int v104 = is_counted_repeat(v26 + 2);
              uint64_t v18 = v103;
              int v24 = v181;
              int v21 = digitab;
              uint64_t v17 = v102;
              uint64_t v22 = v187;
              if (!v104) {
                goto LABEL_244;
              }
              repeat_counts_0 = read_repeat_counts_0(v26 + 2, (int *)&v191 + 1, (int *)&v191, a5);
              int v199 = repeat_counts_0;
              if (*a5) {
                goto LABEL_421;
              }
              unsigned __int8 v26 = repeat_counts_0;
              int v106 = v191;
              if (HIDWORD(v191))
              {
                if ((int)v191 > SHIDWORD(v191)) {
                  int v23 = v23 + (HIDWORD(v191) - 1) * v37 + (v191 - HIDWORD(v191)) * (v37 + 7) - 6;
                }
                else {
                  v23 += (HIDWORD(v191) - 1) * v37;
                }
                uint64_t v22 = v187;
                uint64_t v17 = v102;
                int v21 = digitab;
                int v24 = v181;
                uint64_t v18 = v103;
                goto LABEL_70;
              }
              ++v23;
              uint64_t v22 = v187;
              uint64_t v17 = v102;
              int v21 = digitab;
              int v24 = v181;
              uint64_t v18 = v103;
              if ((int)v191 < 1) {
                goto LABEL_70;
              }
            }
            v23 += (v106 - 1) * (v37 + 7);
            goto LABEL_70;
          }
          v23 += 3;
LABEL_283:
          int v44 = 2;
        }
        else
        {
          uint64_t v109 = "(?R or (?digits must be followed by)";
LABEL_260:
          *a5 = v109;
          int v44 = 8;
        }
        goto LABEL_384;
      default:
        int v190 = 0;
        uint64_t v116 = &v190;
        while (2)
        {
          if (v33 <= 0x68u)
          {
            if (v33 <= 0x54u)
            {
              switch(v33)
              {
                case '-':
                  uint64_t v116 = (int *)&v189 + 1;
LABEL_303:
                  unsigned __int8 v118 = *++v26;
                  unsigned __int8 v33 = v118;
                  continue;
                case ')':
                  int v199 = v26;
                  char v139 = BYTE4(v189);
                  char v140 = v190;
                  if (!v32)
                  {
                    unsigned int v187 = (v190 | v187) & ~HIDWORD(v189);
                    HIDWORD(v189) = 0;
                    int v190 = 0;
                    int v32 = -1;
                    char v139 = 0;
                    char v140 = 0;
                  }
                  char v141 = v139 | v140;
                  if ((v141 & 7) != 0)
                  {
                    v23 += 4;
                    v187 |= (v141 & 1) << 27;
                    if (v184 == 3 || !v184) {
                      LODWORD(v184) = v184 + 2;
                    }
                  }
                  int v44 = 2;
                  uint64_t v22 = v187;
LABEL_383:
                  int v24 = v32;
LABEL_384:
                  int v19 = 0;
                  goto LABEL_78;
                case ':':
                  int v199 = v26;
                  if (((BYTE4(v189) | v190) & 7) != 0) {
                    uint64_t v22 = (((BYTE4(v189) | v190) & 1) << 27) | v22;
                  }
                  else {
                    uint64_t v22 = v22;
                  }
                  if (((BYTE4(v189) | v190) & 7) != 0)
                  {
                    v23 += 4;
                    int v59 = 2;
                  }
                  else
                  {
                    int v59 = 0;
                  }
LABEL_262:
                  unsigned int v107 = HIDWORD(v184);
                  int v61 = 3;
LABEL_263:
                  if (v107 > 0xC7)
                  {
                    char v164 = "parentheses nested too deeply";
                    goto LABEL_420;
                  }
                  int v19 = 0;
                  *((unsigned char *)&v202[1] + v107) = v184;
                  *((_DWORD *)&v202[26] + v107) = v23;
                  v23 += v61;
                  int v44 = 2;
                  LODWORD(v184) = v59;
                  HIDWORD(v184) = v107 + 1;
                  int v24 = v32;
                  goto LABEL_78;
              }
            }
            else
            {
              if (v33 == 85)
              {
                int v117 = 512;
                goto LABEL_302;
              }
              if (v33 == 88)
              {
                int v117 = 64;
                goto LABEL_302;
              }
            }
          }
          else if (v33 > 0x72u)
          {
            if (v33 == 115)
            {
              int v117 = 4;
              goto LABEL_302;
            }
            if (v33 == 120)
            {
              int v117 = 8;
              goto LABEL_302;
            }
          }
          else
          {
            if (v33 == 105)
            {
              int v117 = 1;
              goto LABEL_302;
            }
            if (v33 == 109)
            {
              int v117 = 2;
LABEL_302:
              *v116 |= v117;
              goto LABEL_303;
            }
          }
          break;
        }
        int v199 = v26;
        uint64_t v134 = "unrecognized character after (?";
LABEL_370:
        *a5 = v134;
        int v44 = 8;
        goto LABEL_383;
    }
  }
  if ((int)v27 > 93)
  {
    if (v27 == 94)
    {
LABEL_73:
      int v19 = 0;
      ++v23;
      goto LABEL_74;
    }
    if (v27 != 123)
    {
      if (v27 == 124)
      {
        int v19 = 0;
        v23 += v184 + 3;
        goto LABEL_77;
      }
      goto LABEL_63;
    }
    uint64_t v30 = v18;
    unsigned int v179 = v17;
    int v180 = v24;
LABEL_85:
    if (!is_counted_repeat(v25 + 2))
    {
      int v19 = 0;
      v23 += 2;
      int v44 = 2;
      uint64_t v18 = 1;
      uint64_t v22 = v187;
      goto LABEL_99;
    }
    int v53 = read_repeat_counts_0(v25 + 2, (int *)&v191 + 1, (int *)&v191, a5);
    int v199 = v53;
    if (*a5) {
      goto LABEL_421;
    }
    unsigned __int8 v26 = v53;
    if (HIDWORD(v191))
    {
      int v54 = v191;
      uint64_t v22 = v187;
      uint64_t v18 = v30;
      if (v191 != 0x1FFFFFFFFLL)
      {
        if (SHIDWORD(v191) <= 0) {
          int v55 = -(int)v30;
        }
        else {
          int v55 = 3;
        }
        if (HIDWORD(v191) == 1) {
          int v56 = 0;
        }
        else {
          int v56 = v55;
        }
        goto LABEL_254;
      }
    }
    else
    {
      int v54 = v191;
      uint64_t v22 = v187;
      uint64_t v18 = v30;
      if (v191 != -1 && v191 != 1)
      {
        int v56 = -(int)v30;
LABEL_254:
        BOOL v86 = v54 < 1;
        int v108 = v23 + v18 + v56;
        if (v86) {
          int v23 = v108 + 1;
        }
        else {
          int v23 = v108 + 3;
        }
LABEL_257:
        uint64_t v17 = v179;
        int v24 = v180;
        int v21 = digitab;
        if (v53[1] == 63)
        {
          int v199 = v53 + 1;
          unsigned __int8 v26 = v53 + 1;
        }
LABEL_70:
        int v49 = v26[1];
        __int16 v48 = v26 + 1;
        if (v49 == 43)
        {
          int v19 = 0;
          int v199 = v48;
          v23 += 6;
        }
        else
        {
LABEL_72:
          int v19 = 0;
        }
LABEL_77:
        int v44 = 2;
        goto LABEL_78;
      }
    }
    ++v23;
    goto LABEL_257;
  }
  if (v27 == 63)
  {
LABEL_69:
    ++v23;
    goto LABEL_70;
  }
  if (v27 != 91)
  {
    if (v27 == 92)
    {
      int v40 = v24;
      int v41 = v21;
      uint64_t v42 = v17;
      unsigned int v43 = check_escape(&v199, a5, v201, v22, 0);
      if (*a5) {
        goto LABEL_421;
      }
      if ((v43 & 0x80000000) != 0)
      {
        if (v43 + 14 >= 2)
        {
          uint64_t v22 = v187;
          uint64_t v17 = v42;
          int v21 = v41;
          int v24 = v40;
          if (v43 == -19)
          {
            int v44 = 2;
            uint64_t v18 = 1;
            int v19 = 1;
            goto LABEL_78;
          }
          uint64_t v18 = 1;
          if (v43 > 0xFFFFFFEC)
          {
            int v19 = 0;
            ++v23;
            goto LABEL_77;
          }
          int v110 = -20 - v43;
          int v111 = 1 << (-20 - v43);
          if (v43 <= 0xFFFFFFCC) {
            int v111 = 1;
          }
          int v112 = DWORD1(v198) | v111;
          if (v110 <= (int)v198) {
            int v110 = v198;
          }
          *(void *)&long long v198 = __PAIR64__(v112, v110);
          if (v199[1] != 123)
          {
            int v19 = 0;
            int v44 = 2;
            v23 += 3;
            goto LABEL_242;
          }
          uint64_t v113 = v199 + 2;
          if (is_counted_repeat(v199 + 2))
          {
            uint64_t v114 = read_repeat_counts_0(v113, (int *)&v191 + 1, (int *)&v191, a5);
            int v199 = v114;
            if (*a5) {
              goto LABEL_421;
            }
            if (HIDWORD(v191)) {
              BOOL v115 = HIDWORD(v191) == 1 && v191 == -1;
            }
            else {
              BOOL v115 = ((v191 + 1) & 0xFFFFFFFD) == 0;
            }
            if (v115) {
              int v146 = 4;
            }
            else {
              int v146 = 8;
            }
            v23 += v146;
            int v148 = v114[1];
            unsigned int v147 = v114 + 1;
            int v19 = 0;
            if (v148 == 63) {
              int v199 = v147;
            }
            int v44 = 2;
            uint64_t v18 = 1;
          }
          else
          {
            int v19 = 0;
            int v44 = 2;
            uint64_t v18 = 1;
            v23 += 3;
          }
        }
        else
        {
          if ((get_ucp_0(&v199, &v190, a5) & 0x80000000) != 0) {
            goto LABEL_421;
          }
          int v19 = 0;
          v23 += 2;
          uint64_t v18 = 2;
          int v44 = 2;
        }
        uint64_t v22 = v187;
      }
      else
      {
        int v19 = 0;
        v23 += 2;
        int v44 = 2;
        uint64_t v18 = 1;
        uint64_t v22 = v187;
        if ((a4 & 0x800) != 0)
        {
          uint64_t v17 = v42;
          int v21 = v41;
          if (v43 >= 0x80)
          {
            for (uint64_t i = 0; i != 6; ++i)
            {
              if ((signed int)v43 <= utf8_table1[i]) {
                break;
              }
            }
            int v19 = 0;
            v23 += i;
            uint64_t v18 = (i + 1);
            int v44 = 2;
          }
          goto LABEL_243;
        }
      }
LABEL_242:
      uint64_t v17 = v42;
      int v21 = v41;
LABEL_243:
      int v24 = v40;
      goto LABEL_78;
    }
LABEL_63:
    v23 += 2;
    int v44 = 2;
    uint64_t v18 = 1;
    if ((a4 & 0x800) == 0 || v27 < 0xC0) {
      goto LABEL_78;
    }
    if ((v25[2] & 0xC0) == 0x80)
    {
      uint64_t v46 = 0;
      do
        int v47 = v25[v46++ + 3] & 0xC0;
      while (v47 == 128);
      unsigned __int8 v26 = &v25[v46 + 1];
      uint64_t v18 = (v46 + 1);
      v23 += v46;
    }
LABEL_76:
    int v199 = v26;
    goto LABEL_77;
  }
  uint64_t v50 = v25 + 2;
  int v51 = v25[2];
  int v199 = v25 + 2;
  if (v51 == 94)
  {
    int v51 = v25[3];
    int v199 = v25 + 3;
    int v52 = 10;
    uint64_t v50 = v25 + 3;
  }
  else
  {
    int v52 = 0;
  }
  if (!v51)
  {
LABEL_419:
    char v164 = "missing terminating ] for character class";
    goto LABEL_420;
  }
  int v177 = v52;
  unsigned int v179 = v17;
  int v180 = v24;
  int v62 = 0;
  long long v63 = v195;
  int v186 = v201;
  int v172 = v22 & 1;
  if (v22) {
    int v64 = 127;
  }
  else {
    int v64 = 255;
  }
  int v173 = v64;
  int v174 = 0;
  BOOL v65 = 1;
  unsigned int v176 = v18;
  while (1)
  {
    int v66 = v62;
    while (1)
    {
      if (!v65)
      {
        uint64_t v18 = v176;
        if (v51 == 92 && v50[1] == 69)
        {
          int v66 = 0;
          int v199 = v50 + 1;
          goto LABEL_195;
        }
LABEL_130:
        if ((a4 & 0x800) != 0)
        {
          if ((~v51 & 0xC0) != 0)
          {
            LODWORD(v71) = 0;
          }
          else
          {
            unint64_t v71 = utf8_table4[v51 & 0x3F];
            int v51 = (utf8_table3[v71] & v51) << (6 * v71);
            int v72 = (char *)(v50 + 1);
            if (v71 <= 1) {
              uint64_t v73 = 1;
            }
            else {
              uint64_t v73 = v71;
            }
            int v74 = 6 * v71 - 6;
            do
            {
              char v75 = *v72++;
              v51 |= (v75 & 0x3F) << v74;
              v74 -= 6;
              --v73;
            }
            while (v73);
          }
          int v199 = &v50[v71];
        }
        goto LABEL_147;
      }
      if (v51 != 92)
      {
        uint64_t v18 = v176;
        if (v51 == 91)
        {
          uint64_t v68 = v50 + 2;
          if (v50[2] == 94) {
            uint64_t v68 = v50 + 3;
          }
          do
          {
            int v70 = *v68++;
            int v69 = v70;
          }
          while ((v63[v70] & 2) != 0);
          if (v69 == v50[1] && *v68 == 93)
          {
            int v66 = 0;
            int v199 = v68;
            goto LABEL_194;
          }
        }
        goto LABEL_130;
      }
      int v67 = check_escape(&v199, a5, v186, v22, 1);
      if (*a5) {
        goto LABEL_421;
      }
      int v51 = v67;
      if (v67 != -19) {
        break;
      }
      BOOL v65 = 0;
      uint64_t v50 = v199 + 1;
      int v51 = *++v199;
      int v66 = 1;
      uint64_t v22 = v187;
      if (!v51) {
        goto LABEL_419;
      }
    }
    uint64_t v22 = v187;
    if (v67 == -15)
    {
      int v51 = 88;
LABEL_139:
      uint64_t v18 = v176;
    }
    else
    {
      if (v67 == -4)
      {
        int v51 = 8;
        goto LABEL_139;
      }
      uint64_t v18 = v176;
      if (v67 < 0)
      {
        if ((v67 & 0xFFFFFFFE) == 0xFFFFFFF2)
        {
          int v66 = 0;
          int v76 = v23 + 4;
          if (v174) {
            int v76 = v23;
          }
          int v23 = v76 + 2;
LABEL_193:
          int v177 = 10;
          int v174 = 1;
          goto LABEL_195;
        }
        int v66 = 0;
LABEL_194:
        int v177 = 10;
        goto LABEL_195;
      }
    }
LABEL_147:
    unint64_t v77 = v199;
    if (v199[1] != 45) {
      goto LABEL_187;
    }
    uint64_t v78 = v199 + 2;
    uint64_t v79 = v199[2];
    if (v199[2])
    {
      if (v79 != 93) {
        break;
      }
    }
LABEL_186:
    int v199 = v77;
LABEL_187:
    ++v177;
    if ((a4 & 0x800) != 0 && v51 > v173)
    {
      if (v174) {
        int v89 = v23;
      }
      else {
        int v89 = v23 + 4;
      }
      int v90 = ord2utf8(v51, (uint64_t)&v190);
      uint64_t v18 = v176;
      uint64_t v22 = v187;
      int v23 = ((v90 + 1) << v172) + v89;
      goto LABEL_193;
    }
LABEL_195:
    uint64_t v91 = v199;
    uint64_t v50 = v199 + 1;
    int v51 = *++v199;
    if (!v51) {
      goto LABEL_419;
    }
    BOOL v65 = v66 == 0;
    int v62 = 1;
    if (!v66)
    {
      int v62 = 0;
      if (v51 == 93)
      {
        if (v177 == 1)
        {
          int v19 = 0;
          v23 += 3;
          int v44 = 2;
LABEL_99:
          uint64_t v17 = v179;
          int v24 = v180;
          int v21 = digitab;
        }
        else
        {
          if (v91[2] == 123 && (unsigned int v131 = v91 + 3, is_counted_repeat(v91 + 3)))
          {
            uint64_t v132 = read_repeat_counts_0(v131, (int *)&v191 + 1, (int *)&v191, a5);
            int v199 = v132;
            if (*a5) {
              goto LABEL_421;
            }
            if (HIDWORD(v191)) {
              BOOL v133 = HIDWORD(v191) == 1 && v191 == -1;
            }
            else {
              BOOL v133 = ((v191 + 1) & 0xFFFFFFFD) == 0;
            }
            if (v133) {
              int v150 = 34;
            }
            else {
              int v150 = 38;
            }
            v23 += v150;
            int v153 = v132[1];
            uint64_t v151 = v132 + 1;
            int v152 = v153;
            if (v153 == 63)
            {
              int v19 = 0;
              int v199 = v151;
            }
            else
            {
              int v19 = 0;
              if (v152 == 43)
              {
                int v199 = v151;
                v23 += 6;
              }
            }
            int v44 = 2;
          }
          else
          {
            int v19 = 0;
            int v44 = 2;
            v23 += 33;
          }
          uint64_t v22 = v187;
          uint64_t v17 = v179;
          int v24 = v180;
          int v21 = digitab;
          uint64_t v18 = v176;
        }
LABEL_78:
        if (v44 != 2) {
          goto LABEL_421;
        }
        goto LABEL_17;
      }
    }
  }
  if (v79 != 92)
  {
    v199 += 2;
    if ((a4 & 0x800) == 0)
    {
      if (v51 <= (int)v79) {
        goto LABEL_194;
      }
      goto LABEL_440;
    }
    if ((~v79 & 0xC0) != 0)
    {
      LODWORD(v81) = 0;
    }
    else
    {
      unint64_t v81 = utf8_table4[v79 & 0x3F];
      LODWORD(v79) = (utf8_table3[v81] & v79) << (6 * v81);
      int v82 = (char *)(v77 + 3);
      if (v81 <= 1) {
        uint64_t v83 = 1;
      }
      else {
        uint64_t v83 = v81;
      }
      int v84 = 6 * v81 - 6;
      do
      {
        char v85 = *v82++;
        uint64_t v79 = ((v85 & 0x3F) << v84) | v79;
        v84 -= 6;
        --v83;
      }
      while (v83);
    }
    int v199 = &v78[v81];
LABEL_169:
    if ((v79 & 0x80000000) == 0) {
      goto LABEL_170;
    }
    goto LABEL_186;
  }
  v199 += 2;
  uint64_t v80 = check_escape(&v199, a5, v186, v22, 1);
  if (*a5) {
    goto LABEL_421;
  }
  uint64_t v79 = v80;
  if (v80 == -15)
  {
    uint64_t v79 = 88;
    uint64_t v22 = v187;
    uint64_t v18 = v176;
    goto LABEL_170;
  }
  uint64_t v22 = v187;
  uint64_t v18 = v176;
  if (v80 != -4) {
    goto LABEL_169;
  }
  uint64_t v79 = 8;
LABEL_170:
  if ((int)v79 >= v51)
  {
    if ((a4 & 0x800) != 0)
    {
      BOOL v86 = v172 && v79 > 0x7F;
      BOOL v87 = v86;
      if (v79 > 0xFF || v87)
      {
        if (!v174) {
          v23 += 4;
        }
        if (v172)
        {
          uint64_t v189 = 0;
          uint64_t v92 = v79;
          int v188 = v51;
          uint64_t v171 = v63;
LABEL_200:
          int v178 = v23;
LABEL_201:
          uint64_t v93 = v92;
LABEL_202:
          uint64_t v92 = v93;
          while (1)
          {
            uint64_t v94 = v92;
            if (!get_othercase_range(&v188, v79, (_DWORD *)&v189 + 1, &v189)) {
              break;
            }
            uint64_t v93 = v189;
            int v95 = HIDWORD(v189);
            uint64_t v92 = v94;
            if (SHIDWORD(v189) < v51 || (int)v189 > (int)v94)
            {
              if (SHIDWORD(v189) < v51 && (int)v189 >= v51 - 1)
              {
                int v51 = HIDWORD(v189);
                goto LABEL_201;
              }
              if ((int)v189 <= (int)v94 || SHIDWORD(v189) > (int)v94 + 1)
              {
                int v175 = ord2utf8(SHIDWORD(v189), (uint64_t)&v190);
                if (v95 == v93) {
                  int v98 = 0;
                }
                else {
                  int v98 = ord2utf8(v93, (uint64_t)&v190);
                }
                int v23 = v178 + v175 + v98 + 1;
                uint64_t v92 = v94;
                goto LABEL_200;
              }
              goto LABEL_202;
            }
          }
          int v23 = v178;
          LODWORD(v79) = v94;
          long long v63 = v171;
        }
        int v99 = ord2utf8(v51, (uint64_t)&v190);
        v23 += v99 + ord2utf8(v79, (uint64_t)&v190) + 1;
        int v177 = 10;
        int v174 = 1;
        uint64_t v22 = v187;
        uint64_t v18 = v176;
        goto LABEL_195;
      }
    }
    goto LABEL_194;
  }
LABEL_440:
  char v164 = "range out of order in character class";
LABEL_420:
  *a5 = v164;
LABEL_421:
  uint64_t v14 = 0;
  *a6 = v199 - v185;
  return v14;
}

uint64_t valid_utf8(char *a1, int a2)
{
  if (a2 < 0)
  {
    a2 = -1;
    uint64_t v2 = a1;
    do
    {
      int v3 = *v2++;
      ++a2;
    }
    while (v3);
  }
  if (a2 >= 1)
  {
    long long v4 = a1;
    do
    {
      int v5 = a2 - 1;
      if (*v4 < 0)
      {
        unsigned int v7 = *v4;
        if ((~v7 & 0xC0) != 0) {
          return (v4 - a1);
        }
        int v8 = utf8_table4[*v4 & 0x3F];
        if (a2 <= v8) {
          return (v4 - a1);
        }
        long long v6 = (unsigned __int8 *)(v4 + 1);
        if ((v4[1] & 0xC0) != 0x80) {
          return (v6 - a1);
        }
        v5 -= v8;
        switch(*v4 & 0x3F)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
            if ((v7 & 0x3E) == 0) {
              return (v6 - a1);
            }
            goto LABEL_8;
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
            if (v7 == 224 && (v4[1] & 0x20) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
            if (v7 == 240 && (v4[1] & 0x30) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
            if (v7 == 248 && (v4[1] & 0x38) == 0) {
              return (v6 - a1);
            }
            break;
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
            if (v7 > 0xFD || v7 == 252 && (v4[1] & 0x3C) == 0) {
              return (v6 - a1);
            }
            break;
          default:
            break;
        }
        LODWORD(v4) = 1 - a1 + v4;
        while (1)
        {
          BOOL v9 = __OFSUB__(v8--, 1);
          if ((v8 < 0) ^ v9 | (v8 == 0)) {
            break;
          }
          char v10 = *++v6;
          long long v4 = (char *)(v4 + 1);
          if ((v10 & 0xC0) != 0x80) {
            return (uint64_t)v4;
          }
        }
      }
      else
      {
        long long v6 = (unsigned __int8 *)v4;
      }
LABEL_8:
      long long v4 = (char *)(v6 + 1);
      a2 = v5;
    }
    while (v5 >= 1);
  }
  return 0xFFFFFFFFLL;
}

uint64_t is_counted_repeat(unsigned __int8 *a1)
{
  if ((digitab[*a1] & 4) == 0) {
    return 0;
  }
  do
  {
    uint64_t v2 = a1;
    int v4 = *++a1;
    int v3 = v4;
  }
  while ((digitab[v4] & 4) != 0);
  if (v3 != 44) {
    return v3 == 125;
  }
  uint64_t v5 = v2[2];
  if (v5 == 125) {
    return 1;
  }
  if ((digitab[v5] & 4) == 0) {
    return 0;
  }
  uint64_t v6 = 2;
  do
    uint64_t v7 = a1[v6++];
  while ((digitab[v7] & 4) != 0);
  return v7 == 125;
}

uint64_t check_escape(unsigned __int8 **a1, const char **a2, int a3, __int16 a4, int a5)
{
  uint64_t v5 = *a1;
  uint64_t v7 = *a1 + 1;
  uint64_t v6 = *v7;
  if (!*v7)
  {
    BOOL v9 = "\\ at end of pattern";
    goto LABEL_6;
  }
  if ((v6 - 123) < 0xFFFFFFB5) {
    goto LABEL_7;
  }
  unsigned int v8 = v6 - 48;
  if (escapes_0[(v6 - 48)])
  {
    uint64_t v6 = escapes_0[v8];
    goto LABEL_7;
  }
  if ((v6 - 49) < 9)
  {
    if (!a5)
    {
      int v11 = v5[2];
      if ((digitab[v5[2]] & 4) != 0)
      {
        int v12 = v6 - 48;
        do
        {
          int v12 = v11 + 10 * v12 - 48;
          int v11 = v7[2];
          char v16 = digitab[v7[2]];
          ++v7;
        }
        while ((v16 & 4) != 0);
      }
      else
      {
        int v12 = v6 - 48;
      }
      if (v12 < 10 || v12 <= a3)
      {
        uint64_t v6 = (-20 - v12);
        goto LABEL_7;
      }
    }
    if (v6 > 0x37)
    {
      uint64_t v6 = 0;
LABEL_35:
      uint64_t v7 = v5;
      goto LABEL_7;
    }
LABEL_36:
    uint64_t v18 = 0;
    uint64_t v7 = v5 + 3;
    while (1)
    {
      unsigned __int8 v19 = v5[v18 + 2];
      if ((v19 & 0xF8) != 0x30) {
        break;
      }
      LOBYTE(v8) = v19 + 8 * v8 - 48;
      if (++v18 == 2) {
        goto LABEL_41;
      }
    }
    uint64_t v7 = &v5[v18 + 1];
LABEL_41:
    uint64_t v6 = v8;
    goto LABEL_7;
  }
  uint64_t v13 = (v6 - 76);
  if (v13 > 0x2C) {
    goto LABEL_22;
  }
  if (((1 << (v6 - 76)) & 0x20100000205) != 0)
  {
    BOOL v9 = "PCRE does not support \\L, \\l, \\N, \\U, or \\u";
    goto LABEL_6;
  }
  if (v13 == 23)
  {
    unsigned int v20 = v5[2];
    v5 += 2;
    uint64_t v6 = v20;
    if (!v20)
    {
      *a2 = "\\c at end of pattern";
      return v6;
    }
    if ((v6 - 97) < 0x1A) {
      LODWORD(v6) = v6 - 32;
    }
    uint64_t v6 = v6 ^ 0x40;
    goto LABEL_35;
  }
  if (v13 != 44)
  {
LABEL_22:
    if (v6 == 48) {
      goto LABEL_36;
    }
    if ((a4 & 0x40) == 0) {
      goto LABEL_7;
    }
    BOOL v9 = "unrecognized character follows \\"";
LABEL_6:
    *a2 = v9;
    goto LABEL_7;
  }
  if ((a4 & 0x800) == 0 || v5[2] != 123) {
    goto LABEL_59;
  }
  uint64_t v7 = v5 + 3;
  int v14 = v5[3];
  if ((digitab[v5[3]] & 8) != 0)
  {
    uint64_t v15 = 0;
    LODWORD(v6) = 0;
    do
    {
      int v21 = &v5[v15];
      if (v14 > 0x60) {
        v14 -= 32;
      }
      int v22 = v14 + 16 * v6;
      if (v14 >= 65) {
        int v23 = -55;
      }
      else {
        int v23 = -48;
      }
      uint64_t v6 = (v22 + v23);
      int v14 = v21[4];
      ++v15;
    }
    while ((digitab[v21[4]] & 8) != 0);
    uint64_t v7 = &v5[v15 + 3];
  }
  else
  {
    uint64_t v6 = 0;
    LODWORD(v15) = 0;
  }
  if (v14 != 125)
  {
LABEL_59:
    uint64_t v24 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v5 + 3;
    while (1)
    {
      uint64_t v25 = v5[v24 + 2];
      if ((digitab[v25] & 8) == 0) {
        break;
      }
      if (v25 > 0x60) {
        LODWORD(v25) = v25 - 32;
      }
      int v26 = v25 + 16 * v6;
      if ((int)v25 >= 65) {
        int v27 = -55;
      }
      else {
        int v27 = -48;
      }
      uint64_t v6 = (v26 + v27);
      if (++v24 == 2) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = &v5[v24 + 1];
    goto LABEL_7;
  }
  if ((v6 & 0x80000000) != 0 || v15 >= 9)
  {
    BOOL v9 = "character value in \\x{...} sequence is too large";
    goto LABEL_6;
  }
LABEL_7:
  *a1 = v7;
  return v6;
}

uint64_t get_ucp_0(void *a1, _DWORD *a2, const char **a3)
{
  uint64_t v5 = *a1;
  uint64_t v7 = (unsigned char *)(*a1 + 1);
  int v6 = *v7;
  if (!*v7)
  {
LABEL_15:
    int v14 = "malformed \\P or \\p sequence";
LABEL_26:
    *a3 = v14;
    *a1 = v7;
    return 0xFFFFFFFFLL;
  }
  *a2 = 0;
  if (v6 == 123)
  {
    int v9 = *(unsigned __int8 *)(v5 + 2);
    unsigned int v8 = (unsigned char *)(v5 + 2);
    if (v9 == 94)
    {
      *a2 = 1;
      uint64_t v7 = v8;
    }
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v11 = v7[i + 1];
      if (!v7[i + 1])
      {
        v7 += i + 1;
        goto LABEL_15;
      }
      if (v11 == 125)
      {
        v7 += i + 1;
        goto LABEL_17;
      }
      __s1[i] = v11;
    }
    v7 += 3;
    while (1)
    {
      int v13 = *++v7;
      int v12 = v13;
      if (!v13) {
        goto LABEL_15;
      }
      if (v12 == 125) {
        goto LABEL_25;
      }
    }
  }
  __s1[0] = v6;
  uint64_t i = 1;
LABEL_17:
  int v15 = 0;
  __s1[i] = 0;
  *a1 = v7;
  int v16 = 37;
  while (1)
  {
    int v17 = v16 + v15;
    if (v16 + v15 < 0 != __OFADD__(v16, v15)) {
      ++v17;
    }
    uint64_t v18 = (uint64_t)v17 >> 1;
    int v19 = cstdlib_strcmp(__s1, (&utt)[2 * (v17 >> 1)]);
    if (!v19) {
      return LODWORD((&utt)[2 * v18 + 1]);
    }
    if (v19 <= 0) {
      int v16 = v18;
    }
    else {
      int v15 = v18 + 1;
    }
    if (v15 >= v16)
    {
LABEL_25:
      int v14 = "unknown property name after \\P or \\p";
      goto LABEL_26;
    }
  }
}

unsigned __int8 *read_repeat_counts_0(unsigned __int8 *result, int *a2, int *a3, const char **a4)
{
  int v4 = *result;
  if ((digitab[*result] & 4) != 0)
  {
    int v5 = 0;
    int v6 = *result;
    do
    {
      int v7 = *++result;
      int v4 = v7;
      int v5 = v6 + 10 * v5 - 48;
      int v6 = v7;
    }
    while ((digitab[v7] & 4) != 0);
  }
  else
  {
    int v5 = 0;
  }
  if (v4 == 125)
  {
    int v8 = v5;
  }
  else
  {
    unsigned int v10 = *++result;
    uint64_t v9 = v10;
    if (v10 == 125)
    {
      int v8 = -1;
    }
    else
    {
      if ((digitab[v9] & 4) != 0)
      {
        int v8 = 0;
        do
        {
          int v11 = v9 + 10 * v8;
          int v12 = *++result;
          LODWORD(v9) = v12;
          int v8 = v11 - 48;
        }
        while ((digitab[v12] & 4) != 0);
      }
      else
      {
        int v8 = 0;
      }
      if (v8 < v5)
      {
        int v13 = "numbers out of order in {} quantifier";
        goto LABEL_19;
      }
    }
  }
  if (v5 < 0x10000 && v8 < 0x10000)
  {
    *a2 = v5;
    *a3 = v8;
    return result;
  }
  int v13 = "number too big in {} quantifier";
LABEL_19:
  *a4 = v13;
  return result;
}

uint64_t get_othercase_range(int *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 0;
  unsigned int v19 = 0;
  int v6 = *a1;
  if (*a1 <= a2)
  {
    int v10 = a2 + 1;
    while (1)
    {
      int v11 = ucp_findchar(v6, &v20, &v19);
      unsigned int v12 = v19;
      if (v11 == 1 && v19 != 0) {
        break;
      }
      if (v10 == ++v6) {
        return 0;
      }
    }
    int v14 = 0;
    *a3 = v19;
    do
    {
      int v15 = v14;
      int v16 = v6 + v14;
      int v17 = v6 + v14 + 1;
      if (v6 + v14 >= a2) {
        break;
      }
      ++v14;
    }
    while (ucp_findchar(v16 + 1, &v20, &v19) == 1 && v14 + v12 == v19);
    *a4 = v12 + v15;
    *a1 = v17;
    return 1;
  }
  return result;
}

uint64_t ord2utf8(int a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (utf8_table1[v2] < a1)
  {
    if (++v2 == 6)
    {
      int v3 = (unsigned char *)(a2 + 6);
      int v4 = 6;
      goto LABEL_6;
    }
  }
  int v3 = (unsigned char *)(a2 + v2);
  int v4 = v2;
  if ((int)v2 <= 0) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v5 = v4 + 1;
  do
  {
    *v3-- = a1 & 0x3F | 0x80;
    a1 >>= 6;
    --v5;
  }
  while (v5 > 1);
LABEL_8:
  *int v3 = utf8_table2[4 * v2] | a1;
  return (v4 + 1);
}

uint64_t compile_regex_0(uint64_t a1, int a2, int *a3, unint64_t *a4, unsigned __int8 **a5, const char **a6, int a7, int a8, int *a9, int *a10, uint64_t a11, uint64_t a12)
{
  int v341 = 0;
  uint64_t v391 = *MEMORY[0x263EF8340];
  int v13 = (unsigned __int8 *)*a4;
  int v14 = (unsigned __int8 *)(*a4 + (a8 + 3));
  int v15 = v388;
  int v16 = *a5;
  uint64_t v377 = a11;
  unint64_t v378 = (unint64_t)v13;
  *(_WORD *)(v13 + 1) = 0;
  __int16 v333 = (__int16)v13;
  int v340 = v13;
  int v338 = -2;
  int v339 = -2;
  int v337 = a2;
  while (2)
  {
    if ((a1 & 7) != a2)
    {
      *int v14 = 18;
      v14[1] = a1 & 7;
      v14 += 2;
    }
    if (a7)
    {
      int v341 = v14 + 1;
      *(_WORD *)int v14 = 73;
      v14[2] = 0;
      v14 += 3;
    }
    int v371 = 0;
    uint64_t v17 = 0;
    BOOL v347 = 0;
    uint64_t v18 = 0;
    int v375 = 0;
    unsigned int v385 = 0;
    uint64_t v386 = 0;
    int v19 = a1 & 0x800;
    unsigned int v344 = (a1 >> 11) & 1;
    int v384 = v16;
    __int16 v383 = 0;
    unsigned int v355 = (a1 >> 9) & 1;
    int v356 = 0;
    BOOL v348 = (a1 & 0x200) == 0;
    int v373 = (a1 & 1) << 8;
    uint64_t v20 = 4294967294;
    int __dst = 0;
    uint64_t v21 = 4294967294;
    unsigned int v374 = -2;
    unsigned int v376 = -2;
    int v372 = v19;
    while (1)
    {
      uint64_t v381 = 0;
      uint64_t v22 = *v16;
      if (v17 && *v16)
      {
        if (v22 == 92 && v16[1] == 69)
        {
          uint64_t v17 = 0;
          int v384 = v16 + 1;
LABEL_87:
          unint64_t v28 = (unint64_t)v18;
          goto LABEL_644;
        }
        if (v375) {
          *((_WORD *)v375 + 2) = bswap32(v16- *(_DWORD *)(a12 + 40)- (bswap32(*((unsigned __int16 *)v375 + 1)) >> 16)) >> 16;
        }
        if ((a1 & 0x4000) != 0)
        {
          __int16 v29 = (__int16)v384;
          *(_WORD *)int v14 = -192;
          v14[2] = (unsigned __int16)(v29 - *(_WORD *)(a12 + 40)) >> 8;
          _OWORD v14[3] = v29 - *(unsigned char *)(a12 + 40);
          *((_WORD *)v14 + 2) = 0;
          unint64_t v28 = (unint64_t)(v14 + 6);
          int v375 = v14;
        }
        else
        {
          int v375 = 0;
          unint64_t v28 = (unint64_t)v14;
        }
LABEL_25:
        unsigned __int8 v387 = v22;
        if (v19 && (v22 & 0xC0) == 0xC0)
        {
          uint64_t v30 = v384;
          unsigned __int8 v31 = v384[1];
          if ((v31 & 0xC0) == 0x80)
          {
            uint64_t v32 = 0;
            do
            {
              v15[v32] = v31;
              unsigned __int8 v31 = v30[v32++ + 2];
            }
            while ((v31 & 0xC0) == 0x80);
            int v33 = v32 + 1;
            v30 += v32;
          }
          else
          {
            int v33 = 1;
          }
          int v384 = v30;
LABEL_33:
          if (a1) {
            unsigned __int8 v34 = 22;
          }
          else {
            unsigned __int8 v34 = 21;
          }
          *(unsigned char *)unint64_t v28 = v34;
          int v14 = (unsigned __int8 *)(v28 + 1);
          if (v33 < 1) {
            goto LABEL_361;
          }
          goto LABEL_359;
        }
        goto LABEL_355;
      }
      char v23 = 1;
      if ((v22 - 42) >= 2 && v22 != 63)
      {
        if (v22 == 123)
        {
          uint64_t v24 = v21;
          uint64_t v25 = v20;
          uint64_t v26 = v17;
          int v27 = is_counted_repeat(v16 + 1);
          uint64_t v17 = v26;
          uint64_t v20 = v25;
          int v19 = v372;
          BOOL v85 = v27 == 0;
          uint64_t v21 = v24;
          char v23 = !v85;
          if (v23) {
            goto LABEL_42;
          }
        }
        else
        {
          char v23 = 0;
        }
        if (v375)
        {
          if (v371 <= 0)
          {
            char v23 = 0;
            *((_WORD *)v375 + 2) = bswap32(v16- *(_DWORD *)(a12 + 40)- (bswap32(*((unsigned __int16 *)v375 + 1)) >> 16)) >> 16;
            --v371;
            int v375 = 0;
            if ((a1 & 8) == 0) {
              goto LABEL_43;
            }
            goto LABEL_66;
          }
          char v23 = 0;
          --v371;
        }
      }
LABEL_42:
      if ((a1 & 8) == 0) {
        goto LABEL_43;
      }
LABEL_66:
      if (*(unsigned char *)(*(void *)(a12 + 24) + v22)) {
        goto LABEL_87;
      }
      if (v22 == 35)
      {
        uint64_t v45 = v384;
        while (1)
        {
          int v47 = *++v45;
          int v46 = v47;
          if (v47 == 10) {
            break;
          }
          if (!v46)
          {
            LODWORD(v22) = 0;
            int v384 = v45;
            goto LABEL_43;
          }
        }
        int v384 = v45;
        goto LABEL_87;
      }
LABEL_43:
      char v35 = (a1 & 0x4000) != 0 ? v23 : 1;
      if (v35)
      {
        unint64_t v28 = (unint64_t)v14;
      }
      else
      {
        __int16 v36 = (__int16)v384;
        *(_WORD *)int v14 = -192;
        v14[2] = (unsigned __int16)(v36 - *(_WORD *)(a12 + 40)) >> 8;
        _OWORD v14[3] = v36 - *(unsigned char *)(a12 + 40);
        *((_WORD *)v14 + 2) = 0;
        unint64_t v28 = (unint64_t)(v14 + 6);
        int v375 = v14;
      }
      if ((int)v22 > 62) {
        break;
      }
      switch((int)v22)
      {
        case '$':
          char v37 = 20;
          goto LABEL_292;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_25;
        case '(':
          __int16 v48 = v384;
          int v49 = *++v384;
          if (v49 != 63)
          {
            __int16 v169 = a3;
            if ((a1 & 0x1000) == 0) {
              goto LABEL_313;
            }
            uint64_t v171 = v17;
            uint64_t v172 = 0;
            int v173 = 80;
LABEL_383:
            uint64_t v194 = a1;
            goto LABEL_614;
          }
          break;
        case ')':
          goto LABEL_658;
        case '*':
          HIDWORD(v386) = 0;
          goto LABEL_78;
        case '+':
          HIDWORD(v386) = 1;
LABEL_78:
          LODWORD(v386) = -1;
          goto LABEL_79;
        case '.':
          if (v376 == -2) {
            uint64_t v20 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v20 = v376;
          }
          *(unsigned char *)unint64_t v28 = 11;
          int v14 = (unsigned __int8 *)(v28 + 1);
          goto LABEL_85;
        default:
          if (!v22) {
            goto LABEL_658;
          }
          goto LABEL_25;
      }
      uint64_t v380 = 0;
      int v51 = v48 + 2;
      uint64_t v50 = v48[2];
      int v384 = v48 + 2;
      switch(v50)
      {
        case '!':
          uint64_t v172 = 0;
          int v384 = v48 + 3;
          int v173 = 70;
          goto LABEL_612;
        case '#':
          uint64_t v260 = v48 + 2;
          do
            int v261 = *++v260;
          while (v261 != 41);
          int v384 = v260;
          int v213 = 4;
          int v14 = (unsigned __int8 *)v28;
          unint64_t v28 = (unint64_t)v18;
          goto LABEL_552;
        case '(':
          int v262 = v48 + 3;
          uint64_t v263 = v48[3];
          if (v263 == 82)
          {
            *(_WORD *)(v28 + 3) = -180;
            *(unsigned char *)(v28 + 5) = -1;
            v384 += 3;
LABEL_586:
            int v173 = 75;
            uint64_t v172 = 3;
LABEL_612:
            uint64_t v194 = a1;
            __int16 v169 = a3;
            goto LABEL_613;
          }
          if (!digitab[v263])
          {
            uint64_t v172 = 0;
            int v173 = 75;
            goto LABEL_612;
          }
          int v279 = v263 - 48;
          unsigned int v281 = v48 + 4;
          int v280 = v48[4];
          if (v280 != 41)
          {
            int v262 = v48 + 3;
            do
            {
              int v279 = v280 + 10 * v279 - 48;
              int v280 = v262[2];
              ++v262;
            }
            while (v280 != 41);
            unsigned int v281 = v262 + 1;
          }
          int v384 = v281;
          if (v279)
          {
            int v384 = v262 + 2;
            *(unsigned char *)(v28 + 3) = 76;
            *(unsigned char *)(v28 + 4) = BYTE1(v279);
            *(unsigned char *)(v28 + 5) = v279;
            goto LABEL_586;
          }
          *a6 = "invalid condition (?(0)";
          int v356 = 75;
          int v213 = 9;
          int v14 = (unsigned __int8 *)v28;
          unint64_t v28 = (unint64_t)v18;
          int v19 = v372;
LABEL_552:
          unint64_t v53 = (unint64_t)v375;
          goto LABEL_651;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          goto LABEL_74;
        case ':':
          uint64_t v172 = 0;
          int v384 = v48 + 3;
          int v173 = 80;
          goto LABEL_612;
        case '<':
          int v264 = v48[3];
          int v384 = v48 + 3;
          if (v264 == 33)
          {
            uint64_t v172 = 0;
            int v384 = v48 + 4;
            int v173 = 72;
            goto LABEL_612;
          }
          __int16 v169 = a3;
          uint64_t v172 = 0;
          if (v264 == 61)
          {
            int v384 = v48 + 4;
            int v173 = 71;
            goto LABEL_432;
          }
          uint64_t v194 = a1;
          goto LABEL_605;
        case '=':
          uint64_t v172 = 0;
          int v384 = v48 + 3;
          int v173 = 69;
          goto LABEL_612;
        case '>':
          uint64_t v172 = 0;
          int v384 = v48 + 3;
          int v173 = 74;
          goto LABEL_612;
        case 'C':
          *(unsigned char *)unint64_t v28 = 64;
          int v14 = (unsigned __int8 *)(v28 + 1);
          uint64_t v265 = v384 + 1;
          uint64_t v266 = v384[1];
          if ((digitab[v266] & 4) == 0)
          {
            LOBYTE(v267) = 0;
            ++v384;
LABEL_590:
            *(unsigned char *)(v28 + 1) = v267;
            *(unsigned char *)(v28 + 2) = (unsigned __int16)((_WORD)v384 - *(_WORD *)(a12 + 40) + 1) >> 8;
            int v14 = (unsigned __int8 *)(v28 + 6);
            *(unsigned char *)(v28 + 3) = (_BYTE)v384 - *(_DWORD *)(a12 + 40) + 1;
            *(_WORD *)(v28 + 4) = 0;
            int v213 = 4;
            int v371 = 1;
            unint64_t v53 = v28;
            unint64_t v28 = 0;
            goto LABEL_651;
          }
          int v267 = 0;
          do
          {
            int v267 = v266 + 10 * v267 - 48;
            int v282 = *++v265;
            LODWORD(v266) = v282;
          }
          while ((digitab[v282] & 4) != 0);
          int v384 = v265;
          if (v267 < 256) {
            goto LABEL_590;
          }
          *a6 = "number after (?C is > 255";
          int v213 = 9;
          int v371 = 1;
          goto LABEL_650;
        case 'P':
          int v268 = v48[3];
          int v384 = v48 + 3;
          if ((v268 - 61) >= 2)
          {
            if (v268 != 60)
            {
              uint64_t v172 = 0;
              uint64_t v194 = a1;
              __int16 v169 = a3;
LABEL_605:
              int v173 = v356;
              goto LABEL_613;
            }
            uint64_t v283 = a1;
            int v284 = *(unsigned char **)(a12 + 48);
            int v285 = v48 + 4;
            uint64_t v286 = 0x100000000;
            uint64_t v287 = 0xFFFFFFFF00000000;
            unsigned int v288 = v285;
            do
            {
              int v289 = *v288++;
              v286 += 0x100000000;
              v287 += 0x100000000;
            }
            while (v289 != 62);
            unsigned int v363 = v17;
            int v384 = v288;
            size_t v290 = v287 >> 32;
            uint64_t v291 = v286 >> 32;
            if (*(int *)(a12 + 56) < 1) {
              goto LABEL_656;
            }
            unsigned int v354 = v21;
            int v292 = 0;
            while (1)
            {
              int v293 = cstdlib_memcmp(v285, v284 + 2, v290);
              if (!v293) {
                break;
              }
              if (v293 < 0) {
                goto LABEL_655;
              }
              v284 += *(int *)(a12 + 60);
              if (++v292 >= *(_DWORD *)(a12 + 56)) {
                goto LABEL_656;
              }
            }
            if (v284[v291])
            {
LABEL_655:
              cstdlib_memmove(&v284[*(int *)(a12 + 60)], v284, *(int *)(a12 + 60) * (uint64_t)(*(_DWORD *)(a12 + 56) - v292));
LABEL_656:
              __int16 v169 = a3;
              *int v284 = (unsigned __int16)(*(_WORD *)a3 + 1) >> 8;
              v284[1] = *(unsigned char *)a3 + 1;
              cstdlib_memcpy(v284 + 2, v285, v290);
              v284[v291] = 0;
              ++*(_DWORD *)(a12 + 56);
              a1 = v283;
              int v15 = v388;
              uint64_t v17 = v363;
LABEL_313:
              int v170 = (*v169)++;
              if (v170 >= 100)
              {
                uint64_t v171 = v17;
                *(unsigned char *)(v28 + 3) = 79;
                *(unsigned char *)(v28 + 4) = BYTE1(*v169);
                *(unsigned char *)(v28 + 5) = *v169;
                uint64_t v172 = 3;
                int v173 = 181;
                goto LABEL_383;
              }
              uint64_t v172 = 0;
              int v173 = v170 + 81;
LABEL_432:
              uint64_t v194 = a1;
LABEL_613:
              uint64_t v171 = v17;
              if (v173 < 74)
              {
                unint64_t v296 = 0;
                goto LABEL_616;
              }
LABEL_614:
              unint64_t v296 = v28;
LABEL_616:
              *(unsigned char *)unint64_t v28 = v173;
              unsigned int v385 = (char *)v28;
              int v297 = *(_DWORD *)(a12 + 72);
              int v356 = v173;
              int v298 = compile_regex_0(v194, a1 & 7, v169, &v385, &v384, a6, (v173 - 71) < 2, v172, &v381, (char *)&v381 + 4, &v377, a12);
              int v19 = v372;
              if (!v298)
              {
LABEL_698:
                uint64_t result = 0;
                *a5 = v384;
                return result;
              }
              uint64_t v17 = v171;
              if (v356 != 75) {
                goto LABEL_623;
              }
              int v299 = 1;
              do
              {
                v28 += __rev16(*(unsigned __int16 *)(v28 + 1));
                --v299;
              }
              while (*(unsigned char *)v28 != 66);
              if (-v299 == 1 || v299 == 0)
              {
                if (!v299) {
                  uint64_t v381 = -1;
                }
LABEL_623:
                if (v356 > 79 || (v356 & 0xFFFFFFFE) == 0x4A)
                {
                  int v193 = v381;
                  if (v376 == -2)
                  {
                    BOOL v347 = (int)v381 >= 0;
                    if ((int)v381 < 0) {
                      int v193 = -1;
                    }
                    unsigned int v376 = -1;
                    int v301 = HIDWORD(v381);
                  }
                  else
                  {
                    BOOL v347 = 0;
                    int v301 = HIDWORD(v381);
                    if ((v381 & 0x80000000) == 0 && v381 < 0)
                    {
                      BOOL v347 = 0;
                      int v301 = v381 | v297;
                      HIDWORD(v381) = v381 | v297;
                    }
                    int v193 = v376;
                  }
                  if (v301 < 0) {
                    int v301 = v374;
                  }
                }
                else
                {
                  BOOL v347 = 0;
                  BOOL v300 = SHIDWORD(v381) > -1 && v356 == 69;
                  int v301 = v374;
                  if (v300) {
                    int v301 = HIDWORD(v381);
                  }
                  int v193 = v376;
                }
                if (*v384 == 41)
                {
                  unint64_t v28 = v296;
                  int v14 = (unsigned __int8 *)v385;
                  uint64_t v20 = v376;
                  uint64_t v21 = v374;
                  unsigned int v374 = v301;
LABEL_643:
                  unsigned int v376 = v193;
                  goto LABEL_644;
                }
                uint64_t v321 = "missing)";
                goto LABEL_697;
              }
              uint64_t v321 = "conditional group contains more than two branches";
LABEL_697:
              *a6 = v321;
              goto LABEL_698;
            }
            *a6 = "two named groups have the same name";
            int v213 = 9;
            int v14 = (unsigned __int8 *)v28;
            unint64_t v28 = (unint64_t)v18;
            a1 = v283;
            int v15 = v388;
            int v19 = v372;
            unint64_t v53 = (unint64_t)v375;
            uint64_t v17 = v363;
            uint64_t v21 = v354;
          }
          else
          {
            unsigned int v366 = a1;
            uint64_t v269 = (const char *)(v48 + 4);
            unsigned int v270 = *(const char **)(a12 + 48);
            unint64_t v271 = v48 + 3;
            uint64_t v272 = 0xFFFFFFFF00000000;
            do
            {
              int v273 = *++v271;
              v272 += 0x100000000;
            }
            while (v273 != 41);
            unsigned int v353 = v21;
            unsigned int v336 = v20;
            unsigned int v362 = v17;
            int v384 = v271;
            int v274 = *(_DWORD *)(a12 + 56);
            if (v274 < 1)
            {
              int v275 = 0;
            }
            else
            {
              int v275 = 0;
              size_t v276 = v272 >> 32;
              do
              {
                int v277 = cstdlib_strncmp(v269, v270 + 2, v276);
                int v274 = *(_DWORD *)(a12 + 56);
                if (!v277) {
                  break;
                }
                v270 += *(int *)(a12 + 60);
                ++v275;
              }
              while (v275 < v274);
            }
            if (v275 >= v274)
            {
              *a6 = "reference to non-existent subpattern";
              int v213 = 9;
              int v14 = (unsigned __int8 *)v28;
              unint64_t v28 = (unint64_t)v375;
              a1 = v366;
              int v15 = v388;
              int v19 = v372;
              uint64_t v17 = v362;
              uint64_t v20 = v336;
              uint64_t v21 = v353;
LABEL_650:
              unint64_t v304 = v28;
              unint64_t v28 = (unint64_t)v18;
              unint64_t v53 = v304;
              goto LABEL_651;
            }
            int v294 = *(unsigned __int8 *)v270;
            int v295 = *((unsigned __int8 *)v270 + 1);
            int v52 = v295 | (v294 << 8);
            int v15 = v388;
            int v19 = v372;
            uint64_t v17 = v362;
            uint64_t v20 = v336;
            uint64_t v21 = v353;
            if (v268 != 62)
            {
              *(unsigned char *)unint64_t v28 = 62;
              *(unsigned char *)(v28 + 1) = v294;
              *(unsigned char *)(v28 + 2) = v295;
              int v14 = (unsigned __int8 *)(v28 + 3);
              int v302 = 1 << v295;
              if (v52 >= 0x20) {
                int v302 = 1;
              }
              int v303 = *(_DWORD *)(a12 + 64);
              *(_DWORD *)(a12 + 68) |= v302;
              a1 = v366;
              if (v52 > v303) {
                *(_DWORD *)(a12 + 64) = v52;
              }
              int v213 = 4;
              uint64_t v18 = (char *)v28;
              unint64_t v28 = (unint64_t)v375;
              goto LABEL_650;
            }
            a1 = v366;
            unint64_t v53 = (unint64_t)v375;
LABEL_412:
            *(unsigned char *)unint64_t v28 = 0;
            uint64_t v206 = *(unsigned __int8 **)(a12 + 32);
            if (v52)
            {
              for (unsigned int i = *v206; i; v206 = v210)
              {
                if (i < 0x51)
                {
                  uint64_t v209 = OP_lengths[i];
                  unsigned int v210 = &v206[v209];
                  if (v19)
                  {
                    if (i - 24 < 9 || i - 21 < 2)
                    {
                      unsigned int v210 = &v206[v209 - 1];
                      do
                      {
                        unsigned int v211 = *++v210;
                        unsigned int i = v211;
                      }
                      while ((v211 & 0xC0) == 0x80);
                      continue;
                    }
                    if (i == 61) {
                      v210 += __rev16(*(unsigned __int16 *)(v210 + 1)) + 1;
                    }
                  }
                }
                else
                {
                  if (i < 0xB5) {
                    unsigned int v208 = i - 80;
                  }
                  else {
                    unsigned int v208 = __rev16(*((unsigned __int16 *)v206 + 2));
                  }
                  if (v208 == v52) {
                    goto LABEL_442;
                  }
                  unsigned int v210 = v206 + 3;
                }
                unsigned int i = *v210;
              }
LABEL_444:
              *a6 = "reference to non-existent subpattern";
              int v213 = 9;
              int v14 = (unsigned __int8 *)v28;
              goto LABEL_651;
            }
            if (!v206) {
              goto LABEL_444;
            }
LABEL_442:
            uint64_t v212 = v21;
            if (__rev16(*(unsigned __int16 *)(v206 + 1)))
            {
LABEL_443:
              *(unsigned char *)unint64_t v28 = 63;
              *(unsigned char *)(v28 + 1) = (unsigned __int16)((_WORD)v206 - *(_WORD *)(a12 + 32)) >> 8;
              *(unsigned char *)(v28 + 2) = (_BYTE)v206 - *(_DWORD *)(a12 + 32);
              int v14 = (unsigned __int8 *)(v28 + 3);
              int v213 = 4;
            }
            else
            {
              signed int v245 = &v377;
              do
              {
                unint64_t v246 = v245[1];
                if (v246 < (unint64_t)v206) {
                  break;
                }
                uint64_t v247 = v20;
                uint64_t v248 = v17;
                int v249 = could_be_empty_branch(v246, v28, v344);
                uint64_t v17 = v248;
                uint64_t v20 = v247;
                int v19 = v372;
                if (!v249) {
                  goto LABEL_443;
                }
                signed int v245 = (uint64_t *)*v245;
              }
              while (v245);
              *a6 = "recursive call could loop indefinitely";
              int v213 = 9;
              int v14 = (unsigned __int8 *)v28;
            }
            uint64_t v21 = v212;
          }
LABEL_651:
          if (v213 != 4) {
            goto LABEL_698;
          }
          int v375 = (unsigned char *)v53;
LABEL_644:
          int v16 = ++v384;
          uint64_t v18 = (char *)v28;
          break;
        case 'R':
          uint64_t v50 = v48[3];
          int v51 = v48 + 3;
LABEL_74:
          if ((digitab[v50] & 4) != 0)
          {
            int v52 = 0;
            unint64_t v53 = (unint64_t)v375;
            do
            {
              int v204 = 10 * v52 + v50;
              int v205 = *++v51;
              LOBYTE(v50) = v205;
              int v52 = v204 - 48;
            }
            while ((digitab[v205] & 4) != 0);
          }
          else
          {
            int v52 = 0;
            unint64_t v53 = (unint64_t)v375;
          }
          int v384 = v51;
          goto LABEL_412;
        default:
          HIDWORD(v380) = 0;
          int v256 = v48 + 3;
          int v257 = (int *)&v380 + 1;
          __int16 v169 = a3;
          while (2)
          {
            if (v50 != 41 && v50 != 58)
            {
              if (v50 <= 104)
              {
                switch(v50)
                {
                  case '-':
                    int v257 = (int *)&v380;
                    goto LABEL_548;
                  case 'U':
                    int v258 = *v257 | 0x200;
                    break;
                  case 'X':
                    int v258 = *v257 | 0x40;
                    break;
                  default:
                    goto LABEL_548;
                }
              }
              else if (v50 > 114)
              {
                if (v50 == 115)
                {
                  int v258 = *v257 | 4;
                }
                else
                {
                  if (v50 != 120) {
                    goto LABEL_548;
                  }
                  int v258 = *v257 | 8;
                }
              }
              else
              {
                if (v50 != 105)
                {
                  if (v50 == 109)
                  {
                    int v258 = *v257 | 2;
                    goto LABEL_547;
                  }
LABEL_548:
                  unsigned int v259 = *v256++;
                  uint64_t v50 = v259;
                  continue;
                }
                int v258 = *v257 | 1;
              }
LABEL_547:
              *int v257 = v258;
              goto LABEL_548;
            }
            break;
          }
          uint64_t v278 = v21;
          int v384 = v256 - 1;
          uint64_t v194 = (HIDWORD(v380) | a1) & ~v380;
          if (v50 != 41)
          {
            uint64_t v172 = 0;
            int v384 = v256;
            int v173 = 80;
            goto LABEL_613;
          }
          if ((a1 & 7) != ((BYTE4(v380) | a1) & ~(_BYTE)v380 & 7))
          {
            *(unsigned char *)unint64_t v28 = 18;
            *(unsigned char *)(v28 + 1) = v194 & 7;
            v28 += 2;
          }
          unint64_t v53 = (unint64_t)v375;
          unsigned int v355 = (v194 >> 9) & 1;
          BOOL v348 = (v194 & 0x200) == 0;
          int v373 = (v194 & 1) << 8;
          int v213 = 4;
          a1 = v194;
          int v14 = (unsigned __int8 *)v28;
          unint64_t v28 = 0;
          uint64_t v21 = v278;
          goto LABEL_651;
      }
    }
    if ((int)v22 <= 93)
    {
      if (v22 != 63)
      {
        if (v22 != 91)
        {
          if (v22 != 92) {
            goto LABEL_25;
          }
          uint64_t v38 = v21;
          uint64_t v39 = v17;
          unsigned int v40 = check_escape(&v384, a6, *a3, a1, 0);
          unsigned int v41 = v40;
          if ((v40 & 0x80000000) == 0)
          {
            int v19 = v372;
            if (v372 && v40 >= 0x80)
            {
              int v33 = ord2utf8(v40, (uint64_t)&v387);
              int v19 = v372;
              uint64_t v17 = v39;
              goto LABEL_33;
            }
            unsigned __int8 v387 = v40;
            uint64_t v17 = v39;
            goto LABEL_355;
          }
          int v19 = v372;
          if (v40 == -19)
          {
            if (v384[1] == 92)
            {
              uint64_t v21 = v38;
              if (v384[2] == 69)
              {
                uint64_t v17 = v39;
                v384 += 2;
              }
              else
              {
                uint64_t v17 = 1;
              }
              int v14 = (unsigned __int8 *)v28;
              goto LABEL_87;
            }
            uint64_t v17 = 1;
            int v14 = (unsigned __int8 *)v28;
            unint64_t v28 = (unint64_t)v18;
            uint64_t v21 = v38;
            goto LABEL_644;
          }
          if (v40 + 15 >= 0xB) {
            unsigned int v201 = -2;
          }
          else {
            unsigned int v201 = -1;
          }
          if (v376 == -2) {
            uint64_t v20 = v201;
          }
          else {
            uint64_t v20 = v376;
          }
          uint64_t v17 = v39;
          if (v40 > 0xFFFFFFEC)
          {
            if ((v40 & 0xFFFFFFFE) == 0xFFFFFFF2)
            {
              HIDWORD(v380) = 0;
              char ucp_0 = get_ucp_0(&v384, (_DWORD *)&v380 + 1, a6);
              uint64_t v17 = v39;
              int v19 = v372;
              if (HIDWORD(v380) == (v41 == -14)) {
                char v215 = 13;
              }
              else {
                char v215 = 14;
              }
              *(unsigned char *)unint64_t v28 = v215;
              int v14 = (unsigned __int8 *)(v28 + 2);
              *(unsigned char *)(v28 + 1) = ucp_0;
            }
            else
            {
              if (v40 + 15 >= 0xB) {
                unint64_t v235 = 0;
              }
              else {
                unint64_t v235 = v28;
              }
              *(unsigned char *)unint64_t v28 = -(char)v40;
              int v14 = (unsigned __int8 *)(v28 + 1);
              unint64_t v28 = v235;
            }
          }
          else
          {
            *(unsigned char *)unint64_t v28 = 62;
            *(unsigned char *)(v28 + 1) = (unsigned __int16)(-20 - v40) >> 8;
            *(unsigned char *)(v28 + 2) = -20 - v40;
            int v14 = (unsigned __int8 *)(v28 + 3);
          }
          goto LABEL_85;
        }
        uint64_t v80 = v384;
        unsigned int v83 = v384[1];
        int v82 = v384 + 1;
        unsigned int v81 = v83;
        uint64_t v84 = (1 << v83) & 0x2400400000000000;
        BOOL v85 = v83 > 0x3D || v84 == 0;
        if (!v85)
        {
          BOOL v86 = v384 + 2;
          if (v384[2] == 94) {
            BOOL v86 = v384 + 3;
          }
          do
          {
            unsigned int v88 = *v86++;
            unsigned int v87 = v88;
          }
          while ((*(unsigned char *)(*(void *)(a12 + 24) + v88) & 2) != 0);
          if (v87 == v81 && *v86 == 93)
          {
            uint64_t v321 = "POSIX collating elements are not supported";
            if (v81 == 58) {
              uint64_t v321 = "POSIX named classes are supported only within a class";
            }
            goto LABEL_697;
          }
        }
        uint64_t v89 = v17;
        ++v384;
        LODWORD(v90) = v81;
        unsigned int v349 = v81;
        if (v81 == 94)
        {
          LODWORD(v90) = v80[2];
          int v384 = v80 + 2;
          int v82 = v80 + 2;
        }
        int v14 = (unsigned __int8 *)(v28 + 2);
        uint64_t v91 = (char *)(v28 + 36);
        cstdlib_memset(&__b, 0, 0x20uLL);
        int v368 = 0;
        int v92 = 0;
        int v93 = -1;
        int __src = (void *)(v28 + 36);
        int v19 = v372;
        uint64_t v94 = v89;
        unsigned int v364 = a1;
        while (2)
        {
          if (v19)
          {
            if ((char)v90 < 0)
            {
              LODWORD(v90) = *v82;
              if ((~v90 & 0xC0) == 0)
              {
                unint64_t v95 = utf8_table4[v90 & 0x3F];
                LODWORD(v90) = (utf8_table3[v95] & v90) << (6 * v95);
                int v96 = (char *)(v82 + 1);
                if (v95 <= 1) {
                  uint64_t v97 = 1;
                }
                else {
                  uint64_t v97 = v95;
                }
                int v98 = 6 * v95 - 6;
                do
                {
                  char v99 = *v96++;
                  LODWORD(v90) = ((v99 & 0x3F) << v98) | v90;
                  v98 -= 6;
                  --v97;
                }
                while (v97);
                v82 += v95;
                int v384 = v82;
              }
            }
          }
          if (v94)
          {
            if (v90 == 92)
            {
              int v101 = v82[1];
              unint64_t v100 = v82 + 1;
              if (v101 == 69)
              {
                uint64_t v94 = 0;
                int v384 = v100;
                goto LABEL_179;
              }
              LODWORD(v90) = 92;
LABEL_176:
              *(&__b + (int)v90 / 8) |= 1 << (v90 & 7);
              if (a1)
              {
                unint64_t v90 = *(unsigned __int8 *)(*(void *)(a12 + 8) + (int)v90);
                *(&__b + (v90 >> 3)) |= 1 << (v90 & 7);
              }
              ++v92;
              int v93 = v90;
              goto LABEL_179;
            }
LABEL_173:
            if (!v19 || (int)v90 <= 255 && (a1 & ((int)v90 > 127)) == 0) {
              goto LABEL_176;
            }
            uint64_t v128 = v94;
            *uint64_t v91 = 1;
            v91 += (int)ord2utf8(v90, (uint64_t)(v91 + 1)) + 1;
            if (a1)
            {
              LODWORD(v380) = 0;
              if ((ucp_findchar(v90, (int *)&v380 + 1, (unsigned int *)&v380) & 0x80000000) == 0 && (int)v380 >= 1)
              {
                *uint64_t v91 = 1;
                v91 += (int)ord2utf8(v380, (uint64_t)(v91 + 1)) + 1;
              }
              uint64_t v94 = v128;
              int v368 = 1;
LABEL_242:
              int v19 = v372;
            }
            else
            {
              int v368 = 1;
              int v19 = v372;
              uint64_t v94 = v128;
            }
LABEL_179:
            int v126 = v384[1];
            int v82 = v384 + 1;
            LODWORD(v90) = v126;
            ++v384;
            if (v126 == 93 && v94 == 0)
            {
              if (v92 == 1)
              {
                if (!v19
                  || (v349 == 94 ? (BOOL v167 = v93 <= 127) : (BOOL v167 = 1),
                      v167 ? (char v168 = 0) : (char v168 = 1),
                      !v368 && (v168 & 1) == 0))
                {
                  if (v349 != 94)
                  {
                    if (v19 && v93 >= 128)
                    {
                      int v33 = ord2utf8(v93, (uint64_t)&v387);
                      int v19 = v372;
                      uint64_t v17 = 0;
                      int v15 = v388;
                      goto LABEL_33;
                    }
                    uint64_t v17 = 0;
                    unsigned __int8 v387 = v93;
                    int v15 = v388;
LABEL_355:
                    if (a1) {
                      char v186 = 22;
                    }
                    else {
                      char v186 = 21;
                    }
                    *(unsigned char *)unint64_t v28 = v186;
                    int v14 = (unsigned __int8 *)(v28 + 1);
                    int v33 = 1;
LABEL_359:
                    uint64_t v187 = v33;
                    int v188 = &v387;
                    do
                    {
                      unsigned __int8 v189 = *v188++;
                      unsigned __int8 v34 = v189;
                      *v14++ = v189;
                      --v187;
                    }
                    while (v187);
LABEL_361:
                    BOOL v191 = v33 == 1 || v373 == 0;
                    if (v376 != -2)
                    {
                      if (v191)
                      {
                        uint64_t v21 = v374;
                        int v192 = *(_DWORD *)(a12 + 72) | v373 | v34;
                        uint64_t v20 = v376;
LABEL_370:
                        unsigned int v374 = v192;
                        goto LABEL_644;
                      }
                      uint64_t v20 = v376;
LABEL_372:
                      uint64_t v21 = v374;
                      goto LABEL_644;
                    }
                    if (v191)
                    {
                      unsigned int v376 = v373 | v387;
                      if (v33 != 1)
                      {
                        uint64_t v21 = v374;
                        int v192 = *(_DWORD *)(a12 + 72) | v34;
                        uint64_t v20 = 0xFFFFFFFFLL;
                        goto LABEL_370;
                      }
                      uint64_t v20 = 0xFFFFFFFFLL;
                      goto LABEL_372;
                    }
                    uint64_t v20 = 0xFFFFFFFFLL;
                    uint64_t v21 = v374;
                    int v193 = -1;
                    unsigned int v374 = -1;
                    goto LABEL_643;
                  }
                  uint64_t v17 = 0;
                  if (v376 == -2) {
                    uint64_t v20 = 0xFFFFFFFFLL;
                  }
                  else {
                    uint64_t v20 = v376;
                  }
                  *(unsigned char *)unint64_t v28 = 23;
                  *(unsigned char *)(v28 + 1) = v93;
                  uint64_t v21 = v374;
                  unsigned int v376 = v20;
                  int v15 = v388;
                  goto LABEL_644;
                }
              }
              if (v376 == -2) {
                uint64_t v20 = 0xFFFFFFFFLL;
              }
              else {
                uint64_t v20 = v376;
              }
              if (v368)
              {
                *uint64_t v91 = 0;
                uint64_t v185 = (unsigned __int8 *)(v91 + 1);
                *(unsigned char *)unint64_t v28 = 61;
                *(unsigned char *)(v28 + 3) = v349 == 94;
                int v15 = v388;
                if (v92 < 1)
                {
                  cstdlib_memmove((void *)(v28 + 4), __src, (v185 - __src));
                  int v14 = (unsigned __int8 *)(v28 + 3 + (int)v185 - (int)__src + 1);
                }
                else
                {
                  *(unsigned char *)(v28 + 3) = (v349 == 94) | 2;
                  cstdlib_memcpy((void *)(v28 + 4), &__b, 0x20uLL);
                  int v14 = v185;
                }
                uint64_t v17 = 0;
                *(_WORD *)(v28 + 1) = bswap32(v14 - v28) >> 16;
                uint64_t v21 = v374;
                unsigned int v376 = v20;
                int v19 = v372;
                goto LABEL_644;
              }
              int v202 = (unsigned char *)(v28 + 1);
              int v15 = v388;
              if (v349 == 94)
              {
                uint64_t v203 = 0;
                *(unsigned char *)unint64_t v28 = 60;
                do
                {
                  v202[v203] = ~*(&__b + v203);
                  ++v203;
                }
                while (v203 != 32);
              }
              else
              {
                *(unsigned char *)unint64_t v28 = 59;
                cstdlib_memcpy(v202, &__b, 0x20uLL);
                int v19 = v372;
              }
              uint64_t v17 = 0;
              int v14 = (unsigned __int8 *)(v28 + 33);
LABEL_85:
              uint64_t v21 = v374;
              unsigned int v376 = v20;
              goto LABEL_644;
            }
            continue;
          }
          break;
        }
        if (v90 == 92)
        {
          uint64_t v112 = v94;
          int v113 = check_escape(&v384, a6, *a3, a1, 1);
          if (v113 == -19)
          {
            if (v384[1] != 92)
            {
              uint64_t v94 = 1;
              goto LABEL_242;
            }
            int v19 = v372;
            if (v384[2] == 69)
            {
              uint64_t v94 = 0;
              v384 += 2;
            }
            else
            {
              uint64_t v94 = 1;
            }
            goto LABEL_179;
          }
          LODWORD(v90) = v113;
          if (v113 == -4)
          {
            LODWORD(v90) = 8;
            int v19 = v372;
            uint64_t v94 = v112;
          }
          else
          {
            int v19 = v372;
            uint64_t v94 = v112;
            if (v113 == -15)
            {
              LODWORD(v90) = 88;
            }
            else if (v113 < 0)
            {
              uint64_t v137 = *(void *)(a12 + 16);
              switch(-5 - v113)
              {
                case 0:
                  uint64_t v154 = 0;
                  uint64_t v155 = v137 + 64;
                  do
                  {
                    *(&__b + v154) |= ~*(unsigned char *)(v155 + v154);
                    ++v154;
                  }
                  while (v154 != 32);
                  goto LABEL_282;
                case 1:
                  uint64_t v156 = 0;
                  uint64_t v157 = v137 + 64;
                  do
                  {
                    *(&__b + v156) |= *(unsigned char *)(v157 + v156);
                    ++v156;
                  }
                  while (v156 != 32);
                  goto LABEL_282;
                case 2:
                  for (uint64_t j = 0; j != 32; ++j)
                    *(&__b + j) |= ~*(unsigned char *)(v137 + j);
                  uint64_t v94 = 0;
                  char v159 = v390 | 8;
                  goto LABEL_276;
                case 3:
                  for (uint64_t k = 0; k != 32; ++k)
                    *(&__b + k) |= *(unsigned char *)(v137 + k);
                  uint64_t v94 = 0;
                  char v159 = v390 & 0xF7;
LABEL_276:
                  char v390 = v159;
                  goto LABEL_283;
                case 4:
                  uint64_t v161 = 0;
                  uint64_t v162 = v137 + 160;
                  do
                  {
                    *(&__b + v161) |= ~*(unsigned char *)(v162 + v161);
                    ++v161;
                  }
                  while (v161 != 32);
                  goto LABEL_282;
                case 5:
                  uint64_t v163 = 0;
                  uint64_t v164 = v137 + 160;
                  do
                  {
                    *(&__b + v163) |= *(unsigned char *)(v164 + v163);
                    ++v163;
                  }
                  while (v163 != 32);
LABEL_282:
                  uint64_t v94 = 0;
LABEL_283:
                  v92 += 2;
                  goto LABEL_179;
                case 8:
                case 9:
                  HIDWORD(v380) = 0;
                  int v138 = get_ucp_0(&v384, (_DWORD *)&v380 + 1, a6);
                  if (v138 < 0) {
                    goto LABEL_698;
                  }
                  uint64_t v94 = 0;
                  if (HIDWORD(v380) == (v90 == -14)) {
                    char v139 = 4;
                  }
                  else {
                    char v139 = 3;
                  }
                  *uint64_t v91 = v139;
                  v91[1] = v138;
                  v91 += 2;
                  int v368 = 1;
                  goto LABEL_242;
                default:
                  if ((a1 & 0x40) != 0)
                  {
                    uint64_t v321 = "invalid escape sequence in character class";
                    goto LABEL_697;
                  }
                  LODWORD(v90) = *v384;
                  break;
              }
            }
          }
        }
        else if (v90 == 91)
        {
          unsigned int v102 = v82[1];
          LODWORD(v90) = 91;
          if (v102 <= 0x3D && ((1 << v102) & 0x2400400000000000) != 0)
          {
            uint64_t v103 = 0;
            int v106 = v82[2];
            int v104 = v82 + 2;
            int v105 = v106;
            if (v106 == 94) {
              unsigned int v107 = v104 + 1;
            }
            else {
              unsigned int v107 = v104;
            }
            do
            {
              int v108 = v107[v103];
              char v109 = *(unsigned char *)(*(void *)(a12 + 24) + v107[v103++]);
            }
            while ((v109 & 2) != 0);
            if (v108 == v102 && v107[v103] == 93)
            {
              if (v102 != 58)
              {
                uint64_t v321 = "POSIX collating elements are not supported";
                goto LABEL_697;
              }
              unint64_t v334 = v91;
              uint64_t v110 = 0;
              uint64_t v111 = 0;
              uint64_t v358 = *(void *)(a12 + 16);
              int v384 = v107;
              while (posix_name_lengths_0[v111] + 1 != v103
                   || cstdlib_strncmp((const char *)v107, posix_names_0[v111], (v103 - 1)))
              {
                ++v111;
                v110 += 0x300000000;
                if (v111 == 14) {
                  goto LABEL_695;
                }
              }
              if ((v111 & 0x80000000) != 0)
              {
LABEL_695:
                uint64_t v321 = "unknown POSIX class name";
                goto LABEL_697;
              }
              uint64_t v140 = 0;
              if ((v364 & (v111 < 3)) != 0) {
                uint64_t v141 = 0;
              }
              else {
                uint64_t v141 = v110 >> 32;
              }
              uint64_t v91 = v334;
              while (2)
              {
                int v142 = cstdlib_strncmp((const char *)v107, "blank", 5uLL);
                if ((0x36DB6DB41B4uLL >> (v140 + v141)))
                {
LABEL_241:
                  uint64_t v94 = 0;
                  int v384 = &v107[v103];
                  int v92 = 10;
                  a1 = v364;
                  goto LABEL_242;
                }
                uint64_t v143 = posix_class_maps_0[v140 + v141];
                if (v105 == 94)
                {
                  uint64_t v144 = 0;
                  if (v140)
                  {
                    uint64_t v145 = v358 + v143;
                    do
                    {
                      *(&__b + v144) &= ~*(unsigned char *)(v145 + v144);
                      ++v144;
                    }
                    while (v144 != 32);
                  }
                  else
                  {
                    uint64_t v149 = v358 + v143;
                    do
                    {
                      *(&__b + v144) |= ~*(unsigned char *)(v149 + v144);
                      ++v144;
                    }
                    while (v144 != 32);
                  }
                  if (!v142)
                  {
                    char v148 = v390 | 0x3C;
LABEL_239:
                    char v390 = v148;
                  }
                }
                else
                {
                  uint64_t v146 = 0;
                  uint64_t v147 = v358 + v143;
                  do
                  {
                    *(&__b + v146) |= *(unsigned char *)(v147 + v146);
                    ++v146;
                  }
                  while (v146 != 32);
                  if (!v142)
                  {
                    char v148 = v390 & 0xC3;
                    goto LABEL_239;
                  }
                }
                if (++v140 == 3) {
                  goto LABEL_241;
                }
                continue;
              }
            }
            LODWORD(v90) = 91;
            a1 = v364;
          }
        }
        uint64_t v114 = v384;
        if (v384[1] != 45) {
          goto LABEL_173;
        }
        BOOL v115 = v91;
        uint64_t v116 = a1;
        unsigned __int8 v118 = v384 + 2;
        uint64_t v117 = v384[2];
        if (v117 != 93)
        {
          v384 += 2;
          if (v19 && (v117 & 0xC0) == 0xC0)
          {
            unint64_t v119 = utf8_table4[v117 & 0x3F];
            LODWORD(v117) = (utf8_table3[v119] & v117) << (6 * v119);
            int v120 = (char *)(v114 + 3);
            if (v119 <= 1) {
              uint64_t v121 = 1;
            }
            else {
              uint64_t v121 = v119;
            }
            int v122 = 6 * v119 - 6;
            do
            {
              char v123 = *v120++;
              uint64_t v117 = ((v123 & 0x3F) << v122) | v117;
              v122 -= 6;
              --v121;
            }
            while (v121);
            v118 += v119;
            int v384 = v118;
          }
          if (v117 != 92) {
            goto LABEL_171;
          }
          uint64_t v124 = v94;
          uint64_t v125 = check_escape(&v384, a6, *a3, v116, 1);
          uint64_t v94 = v124;
          int v19 = v372;
          uint64_t v117 = v125;
          if ((v125 & 0x80000000) == 0) {
            goto LABEL_171;
          }
          if (v125 == -4)
          {
            uint64_t v117 = 8;
            goto LABEL_171;
          }
          if (v125 == -15)
          {
            uint64_t v117 = 88;
LABEL_171:
            if (v117 != v90)
            {
              a1 = v116;
              if (v19)
              {
                if ((int)v117 > 255 || (v116 & ((int)v117 > 127)) != 0)
                {
                  if ((v116 & 1) == 0)
                  {
                    LODWORD(v130) = v117;
LABEL_197:
                    *BOOL v115 = 2;
                    uint64_t v131 = (uint64_t)&v115[(int)ord2utf8(v90, (uint64_t)(v115 + 1)) + 1];
                    int v132 = ord2utf8(v130, v131);
                    uint64_t v94 = 0;
                    int v368 = 1;
                    a1 = v116;
                    uint64_t v91 = (char *)(v131 + v132);
                    goto LABEL_242;
                  }
                  uint64_t v380 = 0;
                  uint64_t v130 = v117;
                  int v379 = v90;
                  while (1)
                  {
LABEL_246:
                    uint64_t v150 = v130;
                    do
                    {
                      uint64_t v130 = v150;
                      do
                      {
                        if (!get_othercase_range(&v379, v117, (_DWORD *)&v380 + 1, &v380)) {
                          goto LABEL_197;
                        }
                        uint64_t v150 = v380;
                      }
                      while (SHIDWORD(v380) >= (int)v90 && (int)v380 <= (int)v130);
                      if (SHIDWORD(v380) < (int)v90 && (int)v380 >= (int)v90 - 1)
                      {
                        LODWORD(v90) = HIDWORD(v380);
                        goto LABEL_246;
                      }
                    }
                    while ((int)v380 > (int)v130 && SHIDWORD(v380) <= (int)v130 + 1);
                    uint64_t v153 = (uint64_t)(v115 + 1);
                    if (HIDWORD(v380) == v380)
                    {
                      *BOOL v115 = 1;
                    }
                    else
                    {
                      *BOOL v115 = 2;
                      uint64_t v153 = (uint64_t)&v115[(int)ord2utf8(SHIDWORD(v380), (uint64_t)(v115 + 1)) + 1];
                    }
                    BOOL v115 = (char *)(v153 + (int)ord2utf8(v380, v153));
                  }
                }
              }
              if ((int)v90 <= (int)v117)
              {
                uint64_t v133 = (int)v90;
                int v93 = v90 - 1;
                uint64_t v91 = v115;
                do
                {
                  int v134 = v93++;
                  if (v93 >= 0) {
                    int v135 = v134 + 1;
                  }
                  else {
                    int v135 = v134 + 8;
                  }
                  *(&__b + (v135 >> 3)) |= 1 << (v93 & 7);
                  if (a1)
                  {
                    unint64_t v136 = *(unsigned __int8 *)(*(void *)(a12 + 8) + v133);
                    *(&__b + (v136 >> 3)) |= 1 << (v136 & 7);
                  }
                  ++v133;
                }
                while (v117 != v93);
                uint64_t v94 = 0;
                int v92 = v117 + v92 + 1 - v90;
              }
              else
              {
                uint64_t v94 = 0;
                uint64_t v91 = v115;
              }
              goto LABEL_179;
            }
          }
          else
          {
            int v384 = v118 - 2;
          }
        }
        a1 = v116;
        uint64_t v91 = v115;
        goto LABEL_173;
      }
      uint64_t v386 = 1;
      if (!v18) {
        goto LABEL_696;
      }
LABEL_89:
      int v54 = HIDWORD(v386) != v386;
      unsigned int v55 = v374;
      if (!HIDWORD(v386)) {
        unsigned int v55 = v21;
      }
      unsigned int v374 = v55;
      unsigned int v56 = v376;
      if (!HIDWORD(v386)) {
        unsigned int v56 = v20;
      }
      unsigned int v376 = v56;
      unsigned int v385 = v18;
      int v57 = v384[1];
      if (v57 == 43)
      {
        char v58 = 0;
        ++v384;
      }
      else
      {
        char v58 = v355;
        if (v57 == 63)
        {
          ++v384;
          char v58 = v348;
        }
      }
      unsigned int v59 = *v18;
      if (v59 == 63)
      {
        uint64_t v60 = v21;
        uint64_t v61 = v17;
        int v62 = v15;
        int v63 = v57;
        uint64_t v64 = a1;
        BOOL v65 = HIDWORD(v386) != v386;
        uint64_t v66 = v20;
        char v67 = v58;
        cstdlib_memmove(v18 + 3, v18, 3uLL);
        char v58 = v67;
        uint64_t v20 = v66;
        int v54 = v65;
        a1 = v64;
        int v57 = v63;
        int v15 = v62;
        uint64_t v21 = v60;
        uint64_t v17 = v61;
        int v19 = v372;
        char *v18 = 80;
        __int16 v68 = v28 + 3 - (_WORD)v18;
        v18[1] = HIBYTE(v68);
        v18[2] = v68;
        *(unsigned char *)(v28 + 3) = 66;
        *(unsigned char *)(v28 + 4) = HIBYTE(v68);
        *(unsigned char *)(v28 + 5) = v68;
        v28 += 6;
        unsigned int v59 = *v18;
      }
      int v367 = v57;
      if (v59 - 21 < 2)
      {
        if (v19 && *(char *)(v28 - 1) < 0)
        {
          char v357 = v58;
          int v69 = v54;
          uint64_t v70 = v20;
          uint64_t v71 = v21;
          uint64_t v72 = v17;
          uint64_t v73 = 0;
          do
            int v74 = *(unsigned char *)(v28 + v73-- - 1) & 0xC0;
          while (v74 == 128);
          uint64_t v75 = -v73;
          cstdlib_memcpy(&__dst, (const void *)(v28 + v73), -(int)v73);
          char v76 = 0;
          int v77 = v75 | 0x80;
          unsigned int v59 = *v18;
          int v19 = v372;
          uint64_t v17 = v72;
          uint64_t v21 = v71;
          uint64_t v20 = v70;
          int v54 = v69;
          char v58 = v357;
        }
        else
        {
          int v77 = *(unsigned __int8 *)(v28 - 1);
          char v76 = 0;
          if (SHIDWORD(v386) >= 2) {
            unsigned int v374 = *(_DWORD *)(a12 + 72) | v77 | v373;
          }
        }
LABEL_316:
        uint64_t v78 = a1;
        if (v59 - 13 > 1) {
          int v79 = -1;
        }
        else {
          int v79 = v18[1];
        }
LABEL_319:
        int v174 = v386;
        if (!v386)
        {
          a1 = v78;
          goto LABEL_503;
        }
        if (v386 != 1) {
          *(_DWORD *)(a12 + 76) = 1;
        }
        char v175 = v76 + v58;
        if (HIDWORD(v386) != 1)
        {
          if (!HIDWORD(v386))
          {
            if (v174 != 1)
            {
              if (v174 == -1)
              {
                unsigned __int8 v176 = v175 + 24;
                goto LABEL_388;
              }
              char *v18 = v175 + 30;
              v18[1] = BYTE1(v386);
              v18[2] = v386;
              int v177 = (unsigned __int8 *)(v18 + 3);
LABEL_493:
              int v15 = v388;
              if (v19 && v77 >= 128)
              {
                uint64_t v236 = v17;
                uint64_t v237 = v20;
                uint64_t v238 = v21;
                cstdlib_memcpy(v177, &__dst, v77 & 7);
                uint64_t v21 = v238;
                uint64_t v20 = v237;
                uint64_t v17 = v236;
                int v19 = v372;
                uint64_t v184 = &v177[v77 & 7];
              }
              else
              {
                *int v177 = v77;
                uint64_t v184 = v177 + 1;
              }
              if ((v79 & 0x80000000) == 0) {
                *v184++ = v79;
              }
              a1 = v78;
              int v57 = v367;
LABEL_500:
              if (v57 == 43)
              {
                int v239 = v54;
                char v240 = v385;
                int v241 = v184 - v385;
                uint64_t v242 = v21;
                uint64_t v243 = v20;
                uint64_t v244 = v17;
                cstdlib_memmove(v385 + 3, v385, (int)v184 - (int)v385);
                uint64_t v21 = v242;
                uint64_t v17 = v244;
                uint64_t v20 = v243;
                int v19 = v372;
                *char v240 = 74;
                int v54 = v239;
                v184[3] = 66;
                v184[4] = (unsigned __int16)(v241 + 3) >> 8;
                v184[5] = v241 + 3;
                uint64_t v18 = (char *)(v184 + 6);
                *(_WORD *)(v385 + 1) = bswap32(v241 + 3) >> 16;
              }
              else
              {
                uint64_t v18 = (char *)v184;
              }
LABEL_503:
              unint64_t v28 = 0;
              *(_DWORD *)(a12 + 72) |= v54 << 9;
              int v14 = (unsigned __int8 *)v18;
              goto LABEL_644;
            }
            unsigned __int8 v176 = v175 + 28;
LABEL_388:
            char *v18 = v176;
            int v177 = (unsigned __int8 *)(v18 + 1);
            goto LABEL_493;
          }
          char *v18 = v76 | 0x20;
          v18[1] = BYTE5(v386);
          v18[2] = BYTE4(v386);
          int v177 = (unsigned __int8 *)(v18 + 3);
          if ((v386 & 0x80000000) != 0)
          {
            if (v19 && v77 >= 128)
            {
              uint64_t v195 = v20;
              uint64_t v196 = v17;
              uint64_t v197 = v21;
              cstdlib_memcpy(v177, &__dst, v77 & 7);
              uint64_t v21 = v197;
              uint64_t v17 = v196;
              uint64_t v20 = v195;
              int v19 = v372;
              long long v198 = &v177[v77 & 7];
            }
            else
            {
              v18[3] = v77;
              if (v79 < 0)
              {
                long long v198 = (unsigned __int8 *)(v18 + 4);
              }
              else
              {
                long long v198 = (unsigned __int8 *)(v18 + 5);
                v18[4] = v79;
              }
            }
            *long long v198 = v175 + 24;
            int v177 = v198 + 1;
            goto LABEL_493;
          }
          if (v386 == HIDWORD(v386)) {
            goto LABEL_493;
          }
          if (v19 && v77 >= 128)
          {
            uint64_t v178 = v20;
            uint64_t v179 = v17;
            uint64_t v180 = v21;
            cstdlib_memcpy(v177, &__dst, v77 & 7);
            uint64_t v21 = v180;
            uint64_t v17 = v179;
            uint64_t v20 = v178;
            int v19 = v372;
            int v181 = &v177[v77 & 7];
            if (v79 < 0) {
              goto LABEL_440;
            }
LABEL_439:
            *v181++ = v79;
          }
          else
          {
            int v181 = (unsigned __int8 *)(v18 + 4);
            v18[3] = v77;
            if ((v79 & 0x80000000) == 0) {
              goto LABEL_439;
            }
          }
LABEL_440:
          LODWORD(v386) = v386 - HIDWORD(v386);
          *int v181 = v175 + 30;
          v181[1] = BYTE1(v386);
          v181[2] = v386;
          int v177 = v181 + 3;
          goto LABEL_493;
        }
        if (v174 != 1)
        {
          if (v174 != -1)
          {
            *(unsigned char *)unint64_t v28 = v175 + 30;
            *(unsigned char *)(v28 + 1) = (unsigned __int16)(v386 - 1) >> 8;
            *(unsigned char *)(v28 + 2) = v386 - 1;
            int v177 = (unsigned __int8 *)(v28 + 3);
            goto LABEL_493;
          }
          unsigned __int8 v176 = v175 + 26;
          goto LABEL_388;
        }
        uint64_t v18 = (char *)v28;
        a1 = v78;
LABEL_391:
        int v15 = v388;
        goto LABEL_503;
      }
      if (v59 == 23)
      {
        uint64_t v78 = a1;
        int v77 = v18[1];
        int v79 = -1;
        char v76 = 9;
        goto LABEL_319;
      }
      if (v59 <= 0xF)
      {
        char v76 = 18;
        int v77 = v59;
        goto LABEL_316;
      }
      if (v59 - 59 <= 3)
      {
        int v182 = v386;
        if (!v386) {
          goto LABEL_503;
        }
        if (v386 == 1)
        {
          if (HIDWORD(v386))
          {
LABEL_341:
            *(unsigned char *)unint64_t v28 = v58 + 57;
            *(unsigned char *)(v28 + 1) = BYTE5(v386);
            *(unsigned char *)(v28 + 2) = BYTE4(v386);
            int v183 = v386;
            if (v386 == -1) {
              int v183 = 0;
            }
            LODWORD(v386) = v183;
            *(unsigned char *)(v28 + 3) = BYTE1(v183);
            *(unsigned char *)(v28 + 4) = v386;
            uint64_t v184 = (unsigned __int8 *)(v28 + 5);
            goto LABEL_500;
          }
          char v226 = v58 + 55;
        }
        else
        {
          *(_DWORD *)(a12 + 76) = 1;
          if (v182 != -1 || HIDWORD(v386))
          {
            if (v182 != -1 || HIDWORD(v386) != 1) {
              goto LABEL_341;
            }
            char v226 = v58 + 53;
          }
          else
          {
            char v226 = v58 + 51;
          }
        }
        *(unsigned char *)unint64_t v28 = v226;
        uint64_t v184 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_500;
      }
      if (v59 <= 0x4F && (v59 & 0xFE) != 0x4A)
      {
        uint64_t v321 = "internal error: unexpected repeat";
        goto LABEL_697;
      }
      int v199 = v386;
      unsigned int v365 = a1;
      if (v386 == -1)
      {
        unsigned int v216 = v18;
        do
          v216 += __rev16(*(unsigned __int16 *)(v216 + 1));
        while (*v216 != 66);
        int v200 = v216 - v28;
      }
      else
      {
        int v200 = 0;
      }
      int v217 = v28 - v18;
      int v218 = HIDWORD(v386);
      if (HIDWORD(v386))
      {
        uint64_t v184 = (unsigned __int8 *)v28;
        if (SHIDWORD(v386) > 1)
        {
          char v359 = v58;
          unsigned int v350 = v21;
          uint64_t v219 = v20;
          uint64_t v220 = v17;
          unsigned int v221 = v374;
          if ((v374 & 0x80000000) != 0 && v347) {
            unsigned int v221 = v376;
          }
          unsigned int v374 = v221;
          int v223 = 1;
          uint64_t v184 = (unsigned __int8 *)v28;
          do
          {
            cstdlib_memcpy(v184, v18, v217);
            v184 += v217;
            ++v223;
            int v218 = HIDWORD(v386);
          }
          while (v223 < SHIDWORD(v386));
          int v199 = v386;
          int v19 = v372;
          uint64_t v17 = v220;
          uint64_t v20 = v219;
          uint64_t v21 = v350;
          int v57 = v367;
          char v58 = v359;
        }
        uint64_t v224 = 0;
        if (v199 >= 1)
        {
          v199 -= v218;
          LODWORD(v386) = v199;
        }
        int __srca = v18;
        if ((v199 & 0x80000000) == 0) {
          goto LABEL_478;
        }
      }
      else
      {
        if (!v386)
        {
          a1 = a1;
          goto LABEL_391;
        }
        char v225 = v58;
        unsigned int v351 = v21;
        unsigned int v360 = v17;
        *(unsigned char *)unint64_t v28 = 0;
        if (v199 > 1)
        {
          adjust_recurse((unsigned __int8 *)v18, 4, v344, a12);
          int __srca = v18 + 4;
          cstdlib_memmove(v18 + 4, v18, v217);
          uint64_t v184 = (unsigned __int8 *)(v28 + 4);
          uint64_t v224 = (uint64_t)(v18 + 2);
          *(_WORD *)(v18 + 1) = 80;
          v18[3] = 0;
        }
        else
        {
          adjust_recurse((unsigned __int8 *)v18, 1, v344, a12);
          int __srca = v18 + 1;
          cstdlib_memmove(v18 + 1, v18, v217);
          uint64_t v224 = 0;
          uint64_t v184 = (unsigned __int8 *)(v28 + 1);
        }
        char v58 = v225;
        char *v18 = v225 + 77;
        int v199 = v386 - 1;
        LODWORD(v386) = v199;
        int v19 = v372;
        uint64_t v17 = v360;
        uint64_t v21 = v351;
        if ((v199 & 0x80000000) == 0)
        {
LABEL_478:
          if (v199)
          {
            int v331 = v54;
            unsigned int v352 = v21;
            unsigned int v335 = v20;
            unsigned int v361 = v17;
            char v227 = v58 + 77;
            *uint64_t v184 = v58 + 77;
            int v228 = v184 + 1;
            int v229 = v199 - 1;
            if (v199 == 1)
            {
              size_t v234 = v217;
              unsigned int v232 = __srca;
            }
            else
            {
              __int16 v230 = (_WORD)v184 + 2;
              __int16 v231 = v28 - (_WORD)v18 + 4;
              unsigned int v232 = __srca;
              do
              {
                __int16 v233 = v230 - v224;
                if (!v224) {
                  __int16 v233 = 0;
                }
                v228[1] = HIBYTE(v233);
                uint64_t v224 = (uint64_t)(v228 + 1);
                *int v228 = 80;
                v228[2] = v233;
                cstdlib_memcpy(v228 + 3, __srca, v217);
                v228 += v217 + 4;
                *(v228 - 1) = v227;
                v230 += v231;
                --v229;
              }
              while (v229);
              uint64_t v224 = (uint64_t)&v228[-v217 - 3];
              size_t v234 = v217;
              int v57 = v367;
            }
            cstdlib_memcpy(v228, v232, v234);
            uint64_t v184 = &v228[v234];
            int v15 = v388;
            int v19 = v372;
            uint64_t v17 = v361;
            uint64_t v20 = v335;
            uint64_t v21 = v352;
            int v54 = v331;
          }
          else
          {
            int v15 = v388;
          }
          a1 = v365;
          if (v224)
          {
            int v250 = v184 + 1;
            do
            {
              unsigned __int8 v251 = v250 - v224;
              BOOL v252 = &v184[-(v250 - (int)v224)];
              uint64_t v253 = __rev16(*(unsigned __int16 *)(v252 + 1));
              *uint64_t v184 = 66;
              unsigned int v254 = (v250 - v224) >> 8;
              v184[1] = (unsigned __int16)(v250 - v224) >> 8;
              v184[2] = v250 - v224;
              if (v253) {
                BOOL v255 = v224 == 0;
              }
              else {
                BOOL v255 = 1;
              }
              v224 -= v253;
              v184 += 3;
              v252[1] = v254;
              v252[2] = v251;
              v250 += 3;
            }
            while (!v255);
          }
          goto LABEL_500;
        }
      }
      v184[v200] = v58 + 67;
      a1 = v365;
      int v15 = v388;
      goto LABEL_500;
    }
    if (v22 == 94)
    {
      unsigned int v165 = v376;
      if (v376 == -2) {
        int v166 = -1;
      }
      else {
        int v166 = v376;
      }
      if ((a1 & 2) != 0) {
        unsigned int v165 = v166;
      }
      unsigned int v376 = v165;
      char v37 = 19;
LABEL_292:
      *(unsigned char *)unint64_t v28 = v37;
      int v14 = (unsigned __int8 *)(v28 + 1);
      unint64_t v28 = 0;
      goto LABEL_644;
    }
    if (v22 == 123)
    {
      if ((v23 & 1) == 0)
      {
        unsigned __int8 v387 = 123;
        goto LABEL_355;
      }
      uint64_t v42 = v21;
      uint64_t v43 = v17;
      repeat_counts_0 = read_repeat_counts_0(v384 + 1, (int *)&v386 + 1, (int *)&v386, a6);
      uint64_t v17 = v43;
      int v19 = v372;
      int v384 = repeat_counts_0;
      uint64_t v21 = v42;
      if (*a6) {
        goto LABEL_698;
      }
LABEL_79:
      if (!v18)
      {
LABEL_696:
        uint64_t v321 = "nothing to repeat";
        goto LABEL_697;
      }
      goto LABEL_89;
    }
    if (v22 != 124) {
      goto LABEL_25;
    }
LABEL_658:
    int v305 = v384;
    int v306 = *v340;
    BOOL v308 = v338 < 0 || v338 == v376;
    if (v339 >= 0) {
      int v309 = v339;
    }
    else {
      int v309 = v338;
    }
    BOOL v310 = !v308;
    if (v308) {
      int v311 = v338;
    }
    else {
      int v311 = -1;
    }
    if (!v310) {
      int v309 = v339;
    }
    if ((v374 & 0x80000000) != 0 && (int)v376 > -1 && v311 < 0) {
      unsigned int v314 = v376;
    }
    else {
      unsigned int v314 = v374;
    }
    int v315 = v314 ^ v309;
    int v316 = v314 | v309;
    if ((v315 & 0xFFFFFDFF) != 0) {
      int v316 = -1;
    }
    if (v306 == 65) {
      int v317 = v311;
    }
    else {
      int v317 = v376;
    }
    if (v306 == 65) {
      int v318 = v316;
    }
    else {
      int v318 = v374;
    }
    int v338 = v317;
    int v339 = v318;
    if (a7)
    {
      *(unsigned char *)unint64_t v28 = 0;
      unsigned int fixedlength = find_fixedlength((uint64_t)v340, a1);
      unsigned int v320 = fixedlength;
      if ((fixedlength & 0x80000000) == 0)
      {
        *int v341 = bswap32(fixedlength) >> 16;
        goto LABEL_692;
      }
      uint64_t result = 0;
      if (v320 == -2) {
        unsigned int v330 = "\\C not allowed in lookbehind assertion";
      }
      else {
        unsigned int v330 = "lookbehind assertion is not fixed length";
      }
      *a6 = v330;
      *a5 = v305;
    }
    else
    {
LABEL_692:
      if (*v305 == 124)
      {
        *(unsigned char *)unint64_t v28 = 65;
        *(unsigned char *)(v28 + 1) = (unsigned __int16)(v28 - (_WORD)v340) >> 8;
        *(unsigned char *)(v28 + 2) = v28 - (_BYTE)v340;
        unint64_t v378 = v28;
        int v14 = (unsigned __int8 *)(v28 + 3);
        int v16 = v305 + 1;
        int v340 = (unsigned __int8 *)v28;
        a2 = v337;
        continue;
      }
      int v323 = v340;
      unsigned int v324 = v28 - v340;
      do
      {
        uint64_t v325 = __rev16(*(unsigned __int16 *)(v323 + 1));
        *(_WORD *)(v323 + 1) = bswap32(v324) >> 16;
        v323 -= v325;
        unsigned int v324 = v325;
      }
      while (v325);
      *(unsigned char *)unint64_t v28 = 66;
      *(unsigned char *)(v28 + 1) = (unsigned __int16)(v28 - v333) >> 8;
      *(unsigned char *)(v28 + 2) = v28 - v333;
      unint64_t v326 = v28 + 3;
      if ((a1 & 7) == v337)
      {
        int v327 = a4;
        int v329 = v338;
        int v328 = v339;
      }
      else
      {
        int v327 = a4;
        int v329 = v338;
        int v328 = v339;
        if (*v305 == 41)
        {
          *(unsigned char *)(v28 + 3) = 18;
          unint64_t v326 = v28 + 5;
          *(unsigned char *)(v28 + 4) = v337;
        }
      }
      unint64_t *v327 = v326;
      *a5 = v305;
      *a9 = v329;
      uint64_t result = 1;
      *a10 = v328;
    }
    return result;
  }
}

uint64_t is_anchored_0(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  int v6 = a4 & a3;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 2, 0);
    unsigned int v8 = *significant_code_0;
    if (v8 < 0x51 && (v8 - 69 > 0xB || ((1 << (v8 - 69)) & 0x861) == 0)) {
      break;
    }
    if (!is_anchored_0()) {
      return 0;
    }
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(unsigned char *)a1 != 65) {
      return 1;
    }
  }
  if ((v8 & 0xFE) != 0x2A)
  {
    if (v8 - 3 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      if (v8 != 19 || (*a2 & 2) != 0) {
        return v10;
      }
    }
    goto LABEL_8;
  }
  if ((*(unsigned char *)a2 & 4) != 0)
  {
    uint64_t v10 = 0;
    if (v6 || significant_code_0[1] != 11) {
      return v10;
    }
    goto LABEL_8;
  }
  return 0;
}

uint64_t find_firstassertedchar(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), a2, 1, 1);
    unsigned int v8 = *significant_code_0;
    if (v8 >= 0x50) {
      unsigned int v8 = 80;
    }
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v10 = v8 - 21;
    if (v10 > 0x3B) {
      break;
    }
    if (((1 << (v8 - 21)) & 0x63) != 0) {
      goto LABEL_14;
    }
    if (((1 << (v8 - 21)) & 0x861000000000000) == 0)
    {
      if (v10 != 11) {
        return result;
      }
      significant_code_0 += 2;
LABEL_14:
      if (!a3) {
        return result;
      }
      int v12 = significant_code_0[1];
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v6 = v12 & 0xFFFFFEFF | ((*a2 & 1) << 8);
      }
      else if (v6 != v12)
      {
        return result;
      }
      goto LABEL_19;
    }
    uint64_t firstassertedchar = find_firstassertedchar(significant_code_0, a2, v8 == 69);
    if ((firstassertedchar & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v6 = firstassertedchar;
    }
    else if (v6 != firstassertedchar)
    {
      return 0xFFFFFFFFLL;
    }
LABEL_19:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    uint64_t result = v6;
  }
  while (*(unsigned char *)a1 == 65);
  return result;
}

uint64_t is_startline_0(uint64_t a1, int a2, int a3)
{
  int v4 = a3 & a2;
  while (1)
  {
    significant_code_0 = first_significant_code_0((unsigned __int8 *)(a1 + 3), 0, 0, 0);
    unsigned int v6 = *significant_code_0;
    if (v6 >= 0x51 || (v6 - 69 <= 0xB ? (BOOL v7 = ((1 << (v6 - 69)) & 0x861) == 0) : (BOOL v7 = 1), !v7))
    {
      if (!is_startline_0()) {
        return 0;
      }
      goto LABEL_8;
    }
    if ((v6 & 0xFE) == 0x2A)
    {
      uint64_t v8 = 0;
      if (v4 || significant_code_0[1] != 11) {
        return v8;
      }
      goto LABEL_8;
    }
    if (v6 != 19) {
      return 0;
    }
LABEL_8:
    a1 += __rev16(*(unsigned __int16 *)(a1 + 1));
    if (*(unsigned char *)a1 != 65) {
      return 1;
    }
  }
}

uint64_t nuance_pcre_exec(void *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10)
{
  return nuance_pcre_exec2(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t nuance_pcre_exec2(void *a1, int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, unsigned int a8, _DWORD *a9, int a10, uint64_t a11)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if ((safeh_HandleCheck((uint64_t)a1, a2, 56663, 32) & 0x80000000) != 0) {
    return 4294967280;
  }
  pcre_clearMem(a1);
  if ((a8 & 0xFFFF5A6F) != 0) {
    return 4294967293;
  }
  uint64_t result = 4294967294;
  if (a3 && a5 && (a9 || a10 <= 0))
  {
    if (a10 < 0) {
      return 4294967281;
    }
    int32x4_t v21 = 0uLL;
    long long v89 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v86 = 0u;
    long long v84 = 0u;
    memset(v85, 0, sizeof(v85));
    uint64_t v81 = 0;
    *(_OWORD *)char __b = 0u;
    uint64_t v82 = 10000000;
    long long v90 = 0uLL;
    uint64_t v22 = *(char **)(a3 + 32);
    if (!a4)
    {
      uint64_t v24 = 0;
      goto LABEL_21;
    }
    int v23 = *a4;
    if (*a4) {
      uint64_t v24 = (long long *)*((void *)a4 + 1);
    }
    else {
      uint64_t v24 = 0;
    }
    if ((v23 & 2) != 0)
    {
      uint64_t v82 = *((void *)a4 + 2);
      if ((v23 & 4) == 0)
      {
LABEL_19:
        if ((v23 & 8) == 0) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else if ((v23 & 4) == 0)
    {
      goto LABEL_19;
    }
    *(void *)&long long v90 = *((void *)a4 + 3);
    if ((v23 & 8) == 0)
    {
LABEL_21:
      uint64_t v92 = 0;
      memset(v91, 0, sizeof(v91));
      memset(v80, 0, sizeof(v80));
      if (v22) {
        uint64_t v25 = v22;
      }
      else {
        uint64_t v25 = (char *)&pcre_default_tables;
      }
      if (*(_DWORD *)a3 == 1346589253)
      {
        uint64_t v26 = a3;
      }
      else
      {
        char v76 = v25;
        int v27 = v24;
        uint64_t v28 = try_flipped((long long *)a3, (uint64_t)v80, v24, (uint64_t)v91);
        if (!v28) {
          return 4294967292;
        }
        uint64_t v26 = v28;
        if (v27) {
          uint64_t v24 = v91;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = v76;
      }
      unsigned int v29 = *(_DWORD *)(v26 + 8);
      *(void *)&long long v86 = a3
                      + *(unsigned __int16 *)(v26 + 24)
                      + *(unsigned __int16 *)(v26 + 26) * (unint64_t)*(unsigned __int16 *)(v26 + 28);
      *((void *)&v86 + 1) = a5;
      LODWORD(v89) = a7;
      uint64_t v30 = &a5[a6];
      v21.i64[0] = __PAIR64__(v29, a8);
      *(void *)&long long v87 = v30;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      int8x16_t v32 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v21, v21), (uint32x4_t)xmmword_22073C560), v31);
      *(int8x16_t *)((char *)v85 + 4) = v32;
      DWORD1(v85[1]) = (a8 >> 10) & 1;
      *((void *)&v85[1] + 1) = a8 >> 15;
      *((void *)&v89 + 1) = 0;
      *(void *)&long long v84 = v25;
      *((void *)&v84 + 1) = v25 + 832;
      if (a8 >= 0x8000 && (v29 & 0x4000000) != 0) {
        return 4294967283;
      }
      unsigned int v72 = v29;
      int v33 = &a5[a7];
      if ((a8 & 0x2000) == 0 && v32.i32[2])
      {
        uint64_t v73 = v24;
        int v77 = v25;
        if ((valid_utf8(a5, a6) & 0x80000000) == 0) {
          return 4294967286;
        }
        uint64_t v24 = v73;
        uint64_t v25 = v77;
        if (a7 >= 1 && a7 < a6 && *v33 < -64) {
          return 4294967285;
        }
      }
      uint64_t v34 = *(unsigned __int16 *)(v26 + 18);
      unsigned int v35 = a10 / 3u;
      if (*(_WORD *)(v26 + 18)) {
        BOOL v36 = v35 > v34;
      }
      else {
        BOOL v36 = 1;
      }
      char v37 = v36;
      char v66 = v37;
      if (v36)
      {
        LODWORD(v38) = 3 * v35;
        __b[0] = a9;
        uint64_t v39 = (char *)a9;
      }
      else
      {
        int v74 = v24;
        uint64_t v78 = v25;
        uint64_t v38 = 3 * v34 + 3;
        uint64_t v39 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, 4 * v38);
        __b[0] = v39;
        if (!v39) {
          return 4294967290;
        }
        uint64_t v24 = v74;
        uint64_t v25 = v78;
      }
      char v75 = v72 | a8;
      LODWORD(__b[1]) = v38;
      HIDWORD(__b[1]) = 2 * (int)v38 / 3u;
      LODWORD(v85[0]) = 0;
      HIDWORD(v88) = -1;
      unsigned int v40 = 2 * *(unsigned __int16 *)(v26 + 16) + 2;
      if (v40 > a10) {
        unsigned int v40 = v38;
      }
      int v79 = v40;
      if (v39 && v40 >= 4)
      {
        unsigned int v41 = &v39[4 * v38];
        unint64_t v42 = (unint64_t)&v41[-4 * (v40 >> 1) + 4];
        uint64_t v43 = v41 - 4;
        do
        {
          *(_DWORD *)uint64_t v43 = -1;
          v43 -= 4;
        }
        while ((unint64_t)v43 >= v42);
      }
      int v44 = *(_DWORD *)(v26 + 8);
      if (((v72 | a8) & 0x10) == 0)
      {
        if ((v44 & 0x40000000) != 0)
        {
          uint64_t v46 = *(_WORD *)(v26 + 20);
          if ((*(_WORD *)(v26 + 20) & 0x100) != 0)
          {
            uint64_t v45 = 0;
            LODWORD(v46) = *(unsigned __int8 *)(v84 + v46);
            char v71 = 1;
          }
          else
          {
            char v71 = 0;
            uint64_t v45 = 0;
          }
        }
        else
        {
          uint64_t v45 = 0;
          char v71 = 0;
          LODWORD(v46) = -1;
          if ((v72 & 0x10000000) == 0 && v24)
          {
            char v71 = 0;
            if (*((unsigned char *)v24 + 4)) {
              uint64_t v45 = (char *)v24 + 8;
            }
            else {
              uint64_t v45 = 0;
            }
            goto LABEL_71;
          }
        }
LABEL_72:
        int v47 = v33 - 1;
        uint64_t v48 = a6;
        if ((v44 & 0x20000000) != 0)
        {
          __int16 v51 = *(_WORD *)(v26 + 22);
          int v49 = v51;
          int v50 = v25[v51 + 256];
          BOOL v67 = (v51 & 0x100) == 0;
        }
        else
        {
          BOOL v67 = 1;
          int v49 = -1;
          int v50 = -1;
        }
        uint64_t v68 = a7;
        BOOL v69 = (int)v46 >= 0;
        int v52 = &a5[v48];
        uint64_t v70 = 4 * v79;
        while (1)
        {
          if (__b[0]) {
            BOOL v53 = v79 < 1;
          }
          else {
            BOOL v53 = 1;
          }
          if (!v53)
          {
            int v54 = (char *)__b[0] + v70;
            if ((char *)__b[0] + v70 <= (char *)__b[0] + 4) {
              int v54 = (char *)__b[0] + 4;
            }
            memset(__b[0], 255, ((unint64_t)&v54[~(uint64_t)__b[0]] & 0xFFFFFFFFFFFFFFFCLL) + 4);
          }
          if ((v46 & 0x80000000) == 0) {
            break;
          }
          if ((v72 & 0x10000000) != 0)
          {
            if ((unint64_t)v33 > *((void *)&v86 + 1) + v68 && v33 < v30)
            {
              int64_t v62 = v52 - v33;
              while (*(v33 - 1) != 10)
              {
                ++v33;
                if (!--v62)
                {
LABEL_124:
                  unsigned int v56 = v52;
                  if ((v49 & 0x80000000) == 0) {
                    goto LABEL_107;
                  }
                  goto LABEL_125;
                }
              }
            }
            goto LABEL_105;
          }
          if (!v45) {
            goto LABEL_105;
          }
          do
          {
            unsigned int v56 = v33;
            if (v33 >= v30) {
              break;
            }
            ++v33;
          }
          while (((v45[(unint64_t)*v56 >> 3] >> (*v56 & 7)) & 1) == 0);
LABEL_106:
          if ((v49 & 0x80000000) == 0)
          {
LABEL_107:
            if (v30 - v56 <= 999 && !DWORD2(v85[1]))
            {
              unsigned int v59 = (unsigned __int8 *)&v56[v69];
              if (&v56[v69] > v47)
              {
                if (v67)
                {
                  do
                  {
                    int v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30) {
                      break;
                    }
                    ++v59;
                  }
                  while (v49 != *v47);
                }
                else
                {
                  do
                  {
                    int v47 = (char *)v59;
                    if (v59 >= (unsigned __int8 *)v30) {
                      break;
                    }
                    ++v59;
                    int v60 = *v47;
                  }
                  while (v49 != v60 && v50 != v60);
                }
                if (v47 >= v30) {
                  goto LABEL_134;
                }
              }
            }
          }
LABEL_125:
          *((void *)&v87 + 1) = v56;
          uint64_t v81 = 0;
          uint64_t result = match_2((uint64_t)a1, (uint64_t)v56, v86, (uint64_t)&v81, v72 & 7, a11, v18, v19);
          if (result)
          {
            if (result == 1)
            {
              if ((v66 & 1) == 0)
              {
                if (a10 >= 4) {
                  cstdlib_memcpy(a9 + 2, (char *)__b[0] + 8, 4 * (a10 - 2));
                }
                if (SDWORD2(v88) > a10) {
                  LODWORD(v85[0]) = 1;
                }
                heap_Free(*(void **)(*a1 + 8), (uint64_t)__b[0]);
              }
              if (LODWORD(v85[0])) {
                uint64_t result = 0;
              }
              else {
                uint64_t result = (SDWORD2(v88) / 2);
              }
              if (a10 >= 2)
              {
                int v65 = v88 - DWORD2(v86);
                *a9 = v56 - DWORD2(v86);
                a9[1] = v65;
              }
              else
              {
                return 0;
              }
            }
            return result;
          }
          int v33 = v56 + 1;
          if (HIDWORD(v85[0]) && v33 < v30)
          {
            uint64_t v63 = v52 - 1 - v56;
            while ((*v33 & 0xC0) == 0x80)
            {
              ++v33;
              if (!--v63)
              {
                int v33 = v30;
                break;
              }
            }
          }
          if ((v75 & 0x10) != 0 || v33 > v30)
          {
LABEL_134:
            if ((v66 & 1) == 0) {
              heap_Free(*(void **)(*a1 + 8), (uint64_t)__b[0]);
            }
            if (HIDWORD(v85[1])) {
              BOOL v64 = DWORD2(v85[1]) == 0;
            }
            else {
              BOOL v64 = 1;
            }
            if (v64) {
              return 0xFFFFFFFFLL;
            }
            else {
              return 4294967284;
            }
          }
        }
        if (v71)
        {
          if (v33 < v30)
          {
            int64_t v55 = v52 - v33;
            while (v46 != *(unsigned __int8 *)(v84 + *v33))
            {
              ++v33;
              if (!--v55) {
                goto LABEL_124;
              }
            }
          }
        }
        else if (v33 < v30)
        {
          int64_t v57 = v52 - v33;
          while (v46 != *v33)
          {
            ++v33;
            if (!--v57) {
              goto LABEL_124;
            }
          }
        }
LABEL_105:
        unsigned int v56 = v33;
        goto LABEL_106;
      }
      char v71 = 0;
      uint64_t v45 = 0;
LABEL_71:
      LODWORD(v46) = -1;
      goto LABEL_72;
    }
LABEL_20:
    uint64_t v22 = (char *)*((void *)a4 + 4);
    goto LABEL_21;
  }
  return result;
}

void *pcre_clearMem(void *result)
{
  uint64_t v1 = result;
  if (*((unsigned __int16 *)result + 8) >= 2u)
  {
    unint64_t v2 = 1;
    do
    {
      int v3 = *(uint64_t **)(v1[1] + 8 * v2);
      if (v3)
      {
        heap_Free(*(void **)(*v1 + 8), *v3);
        uint64_t v5 = *v1;
        uint64_t v4 = v1[1];
        **(void **)(v4 + 8 * v2) = 0;
        heap_Free(*(void **)(v5 + 8), *(void *)(*(void *)(v4 + 8 * v2) + 16));
        uint64_t v6 = v1[1];
        *(void *)(*(void *)(v6 + 8 * v2) + 16) = 0;
        uint64_t v7 = *(void *)(v6 + 8 * v2);
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t result = heap_Free(*(void **)(*v1 + 8), v7);
      *(void *)(v1[1] + 8 * v2++) = 0;
    }
    while (v2 < *((unsigned __int16 *)v1 + 8));
  }
  *((_WORD *)v1 + 8) = 1;
  *((_DWORD *)v1 + 6) = 0;
  *((_WORD *)v1 + 14) = 0;
  return result;
}

uint64_t match_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (uint64_t (*)(void))a6;
  uint64_t v9 = a5;
  uint64_t v772 = a3;
  int v774 = 0;
  unsigned int __n = 0;
  uint64_t v12 = 0;
  __s2[1] = *MEMORY[0x263EF8340];
  int v13 = 99;
  int v783 = 99;
  unsigned int v782 = 0;
  int v14 = (void *)(a4 + 152);
  uint64_t v773 = (void *)(a4 + 152);
  while (2)
  {
    switch(v13)
    {
      case 0:
        goto LABEL_248;
      case 1:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        *(_DWORD *)(a4 + 124) = *((_DWORD *)v782 + 63);
        uint64_t v16 = v15[2];
        uint64_t v17 = __rev16(*(unsigned __int16 *)(v16 + 1));
        _OWORD v15[2] = v16 + v17;
        if (*(unsigned char *)(v16 + v17) == 65) {
          goto LABEL_7;
        }
        uint64_t v206 = *(void *)(a4 + 16);
        *(_DWORD *)(v206 + 4 * *((int *)v15 + 61)) = *((_DWORD *)v15 + 64);
        *(_DWORD *)(v206 + 4 * *((int *)v15 + 61) + 4) = *((_DWORD *)v15 + 65);
        *(_DWORD *)(v206 + 4 * (*(_DWORD *)(a4 + 24) - *((_DWORD *)v15 + 60))) = *((_DWORD *)v15 + 66);
        goto LABEL_328;
      case 2:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        uint64_t v20 = v782[2];
        uint64_t v21 = __rev16(*(unsigned __int16 *)(v20 + 1));
        v782[2] = v20 + v21;
        if (*(unsigned char *)(v20 + v21) == 65) {
          goto LABEL_10;
        }
        goto LABEL_328;
      case 3:
      case 5:
        goto LABEL_48;
      case 4:
        if (!v12)
        {
          v782[2] += __rev16(*(unsigned __int16 *)(v782[2] + 1));
LABEL_273:
          *(void *)&long long v778 = 0;
          Meunsigned int m = pcre_getMem(a1, 5, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if (!(void)v778 || Mem < 0) {
            goto LABEL_1164;
          }
          char v25 = 0;
          uint64_t v26 = v782[1];
          *(void *)(v778 + 8) = v26;
          uint64_t v194 = v24[2];
LABEL_276:
          uint64_t v42 = v194 + 3;
LABEL_1044:
          v23[2] = v42;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
          uint64_t v174 = v24[4];
          v23[4] = v174;
          uint64_t v173 = v24[5];
          *((_DWORD *)v23 + 12) = 2;
          v23[5] = v173;
LABEL_1045:
          *int v23 = (uint64_t)v24;
          goto LABEL_1046;
        }
        if (v12 == 1)
        {
          uint64_t v28 = v782;
          unsigned int v29 = (unsigned __int8 *)(__rev16(*(unsigned __int16 *)(v782[2] + 4)) + v782[2] + 3);
          v782[2] = (uint64_t)v29;
          for (int i = *v29; i == 65; int i = *v29)
          {
            v29 += __rev16(*(unsigned __int16 *)(v29 + 1));
            v28[2] = (uint64_t)v29;
          }
          goto LABEL_273;
        }
        goto LABEL_48;
      case 6:
        if (v12)
        {
          if (v12 == 1)
          {
            int v15 = v782;
            int8x16_t v31 = (unsigned __int8 *)v782[2];
            int v32 = *v31;
            goto LABEL_279;
          }
          goto LABEL_48;
        }
        int v15 = v782;
        int8x16_t v31 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
        v782[2] = (uint64_t)v31;
        int v32 = *v31;
        if (v32 != 65)
        {
LABEL_279:
          if (v32 != 66)
          {
            if ((v15[6] & 1) == 0)
            {
              do
              {
                v31 += __rev16(*(unsigned __int16 *)(v31 + 1));
                _OWORD v15[2] = (uint64_t)v31;
              }
              while (*v31 == 65);
              _OWORD v15[2] = (uint64_t)(v31 + 3);
              *((_DWORD *)v15 + 6) = *(_DWORD *)(a4 + 120);
              goto LABEL_377;
            }
            goto LABEL_322;
          }
LABEL_328:
          unsigned int v210 = (uint64_t *)*v15;
          goto LABEL_988;
        }
LABEL_278:
        *(void *)&long long v778 = 0;
        uint64_t v195 = a1;
        char v196 = 6;
        goto LABEL_285;
      case 7:
        if (v12)
        {
          if (v12 != 1)
          {
LABEL_48:
            int v15 = v782;
LABEL_49:
            uint64_t v43 = (uint64_t *)*v15;
            goto LABEL_244;
          }
LABEL_327:
          int v15 = v782;
          goto LABEL_328;
        }
        int v15 = v782;
        uint64_t v34 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
        v782[2] = (uint64_t)v34;
        if (*v34 == 65)
        {
LABEL_284:
          *(void *)&long long v778 = 0;
          uint64_t v195 = a1;
          char v196 = 7;
LABEL_285:
          int v197 = pcre_getMem(v195, v196, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if (!(void)v778 || v197 < 0) {
            goto LABEL_1164;
          }
          uint64_t v173 = 0;
          char v25 = 0;
          uint64_t v26 = v782[1];
          *(void *)(v778 + 8) = v26;
          v23[2] = v24[2] + 3;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
          uint64_t v174 = v24[4];
          *int v23 = (uint64_t)v24;
          v23[4] = v174;
          v23[5] = 0;
          goto LABEL_293;
        }
        if (v15[6]) {
          goto LABEL_322;
        }
LABEL_320:
        uint64_t v40 = (uint64_t)(v34 + 3);
LABEL_321:
        _OWORD v15[2] = v40;
LABEL_377:
        int v47 = v782;
        unsigned int v211 = (unsigned __int8 *)v782[2];
        unsigned int v212 = *v211;
        *((_DWORD *)v782 + 62) = v212;
        *((_DWORD *)v47 + 42) = 0;
        if (*(_DWORD *)(a4 + 72))
        {
          unint64_t v213 = v47[1];
          if (v213 >= *(void *)(a4 + 96) && v213 > *(void *)(a4 + 104)) {
            *(_DWORD *)(a4 + 76) = 1;
          }
        }
        if (v212 >= 0x51)
        {
          unsigned int v571 = v212 - 80;
          *((_DWORD *)v47 + 60) = v212 - 80;
          int v14 = v773;
          if (v212 - 80 >= 0x65)
          {
            unsigned int v571 = __rev16(*((unsigned __int16 *)v211 + 2));
            *((_DWORD *)v47 + 60) = v571;
          }
          unsigned int v572 = 2 * v571;
          *((_DWORD *)v47 + 61) = 2 * v571;
          if ((signed int)(2 * v571) >= *(_DWORD *)(a4 + 28))
          {
            *((_DWORD *)v47 + 62) = 80;
LABEL_10:
            *(void *)&long long v778 = 0;
            uint64_t v18 = a1;
            char v19 = 2;
          }
          else
          {
            uint64_t v573 = *(void *)(a4 + 16);
            *((_DWORD *)v47 + 64) = *(_DWORD *)(v573 + 4 * v572);
            *((_DWORD *)v47 + 65) = *(_DWORD *)(v573 + 4 * (v572 | 1));
            signed int v574 = *(_DWORD *)(a4 + 24) - v571;
            *((_DWORD *)v47 + 66) = *(_DWORD *)(v573 + 4 * v574);
            *((_DWORD *)v47 + 63) = *(_DWORD *)(a4 + 124);
            *(_DWORD *)(v573 + 4 * v574) = *((_DWORD *)v47 + 2) - *(_DWORD *)(a4 + 88);
LABEL_7:
            *(void *)&long long v778 = 0;
            uint64_t v18 = a1;
            char v19 = 1;
          }
LABEL_11:
          int v22 = pcre_getMem(v18, v19, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if (!(void)v778 || v22 < 0) {
            goto LABEL_1164;
          }
          char v25 = 0;
          uint64_t v26 = v782[1];
          *(void *)(v778 + 8) = v26;
          uint64_t v27 = v24[2];
LABEL_292:
          v23[2] = v27 + 3;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
          uint64_t v174 = v24[4];
          v23[4] = v174;
          uint64_t v173 = v24[5];
          *int v23 = (uint64_t)v24;
          v23[5] = v173;
LABEL_293:
          *((_DWORD *)v23 + 12) = 2;
LABEL_1046:
          unsigned int v782 = v23;
          goto LABEL_1352;
        }
        break;
      case 8:
        if (v12)
        {
          if (v12 == 1)
          {
            int v15 = v782;
            *(void *)(a4 + 136) = v782[14];
            uint64_t v33 = v15[18];
            if ((uint64_t *)v33 != (uint64_t *)((char *)v15 + 268))
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v33);
              int v15 = v782;
            }
LABEL_322:
            unsigned int v208 = (uint64_t *)*v15;
            goto LABEL_323;
          }
          goto LABEL_48;
        }
        long long v198 = v782;
        *(void *)(a4 + 136) = v782 + 14;
        cstdlib_memcpy(*(void **)(a4 + 16), (const void *)v198[18], 4 * *((unsigned int *)v198 + 38));
        int v15 = v782;
        uint64_t v199 = v782[7];
        uint64_t v200 = __rev16(*(unsigned __int16 *)(v199 + 1));
        v782[7] = v199 + v200;
        if (*(unsigned char *)(v199 + v200) == 65)
        {
LABEL_289:
          *(void *)&long long v778 = 0;
          int v201 = pcre_getMem(a1, 8, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if (!(void)v778 || v201 < 0) {
            goto LABEL_1164;
          }
          char v25 = 0;
          uint64_t v26 = v782[1];
          *(void *)(v778 + 8) = v26;
          uint64_t v27 = v24[7];
          goto LABEL_292;
        }
        *(void *)(a4 + 136) = v15[14];
        uint64_t v209 = v15[18];
        if ((uint64_t *)v209 == (uint64_t *)((char *)v15 + 268)) {
          goto LABEL_328;
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v209);
        goto LABEL_327;
      case 9:
        if (v12)
        {
          if (v12 != 1) {
            goto LABEL_48;
          }
          int v15 = v782;
          uint64_t v34 = (unsigned __int8 *)v782[2];
          int v35 = *v34;
        }
        else
        {
          int v15 = v782;
          uint64_t v34 = (unsigned __int8 *)(v782[2] + __rev16(*(unsigned __int16 *)(v782[2] + 1)));
          v782[2] = (uint64_t)v34;
          int v35 = *v34;
          if (v35 == 65)
          {
LABEL_295:
            *(void *)&long long v778 = 0;
            uint64_t v18 = a1;
            char v19 = 9;
            goto LABEL_11;
          }
        }
        if (v35 != 74 && v35 != 65) {
          goto LABEL_328;
        }
        do
        {
          v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          _OWORD v15[2] = (uint64_t)v34;
        }
        while (*v34 == 65);
        *((_DWORD *)v15 + 6) = *(_DWORD *)(a4 + 120);
        uint64_t v202 = *(void *)(a4 + 112);
        v15[1] = v202;
        int v203 = *v34;
        if (v203 != 66 && v202 != v15[13])
        {
          if (v34[3] == 18)
          {
            v15[4] = v15[4] & 0xFFFFFFFFFFFFFFF8 | v34[4];
            int v203 = *v34;
          }
          if (v203 == 68)
          {
            *(void *)&long long v778 = 0;
            uint64_t v38 = a1;
            char v39 = 10;
LABEL_252:
            int v175 = pcre_getMem(v38, v39, &v778, a4, a5, a6, a7, a8);
            int v23 = (uint64_t *)v778;
            unsigned __int8 v176 = v782;
            if ((void)v778 && (v175 & 0x80000000) == 0) {
              goto LABEL_254;
            }
            goto LABEL_997;
          }
          *(void *)&long long v778 = 0;
          uint64_t v36 = a1;
          char v37 = 12;
LABEL_44:
          int v41 = pcre_getMem(v36, v37, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if ((void)v778 && (v41 & 0x80000000) == 0)
          {
LABEL_46:
            char v25 = 0;
            uint64_t v26 = v24[1];
            v23[1] = v26;
            uint64_t v42 = v24[12];
            goto LABEL_1044;
          }
LABEL_1164:
          v588 = (uint64_t *)*v24;
          goto LABEL_1356;
        }
        goto LABEL_320;
      case 10:
        if (v12) {
          goto LABEL_48;
        }
        *(void *)&long long v778 = 0;
        uint64_t v36 = a1;
        char v37 = 11;
        goto LABEL_44;
      case 11:
      case 13:
      case 17:
      case 19:
        int v15 = v782;
        if (!v12) {
          goto LABEL_328;
        }
        goto LABEL_49;
      case 12:
        if (v12) {
          goto LABEL_48;
        }
        *(void *)&long long v778 = 0;
        uint64_t v38 = a1;
        char v39 = 13;
        goto LABEL_252;
      case 14:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        uint64_t v34 = (unsigned __int8 *)v782[10];
        do
        {
          v34 += __rev16(*(unsigned __int16 *)(v34 + 1));
          v15[10] = (uint64_t)v34;
        }
        while (*v34 == 65);
        goto LABEL_320;
      case 15:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        uint64_t v40 = v782[2] + 1;
        goto LABEL_321;
      case 16:
        if (v12) {
          goto LABEL_48;
        }
        *(void *)&long long v778 = 0;
        uint64_t v36 = a1;
        char v37 = 17;
        goto LABEL_44;
      case 18:
        if (v12) {
          goto LABEL_48;
        }
        *(void *)&long long v778 = 0;
        uint64_t v38 = a1;
        char v39 = 19;
        goto LABEL_252;
      case 20:
        uint64_t v44 = v9;
        uint64_t v45 = (uint64_t **)v782;
        if (v12)
        {
          unsigned int v782 = (uint64_t *)*v782;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
          uint64_t v46 = v782;
          if (!v782) {
            return v12;
          }
LABEL_52:
          *((_DWORD *)v46 + 102) = v12;
          goto LABEL_308;
        }
        int v177 = v8;
        int v178 = *((_DWORD *)v782 + 56);
        if (v178 < *((_DWORD *)v782 + 58))
        {
          uint64_t v179 = (unsigned __int8 *)v782[1];
          int v180 = *((_DWORD *)v782 + 57);
          if (match_ref_0(*((_DWORD *)v782 + 61), v179, v180, (void *)a4, v782[4]))
          {
            v45[1] = (uint64_t *)&v179[v180];
            *((_DWORD *)v45 + 56) = v178 + 1;
            goto LABEL_258;
          }
        }
        unsigned int v782 = *v45;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
        int v205 = v782;
        if (!v782) {
          return 0;
        }
        uint64_t v12 = 0;
        *((_DWORD *)v782 + 102) = 0;
        *uint64_t v773 = v205;
        uint64_t v8 = v177;
        int v14 = v773;
        goto LABEL_311;
      case 21:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v48 = (unsigned __int8 *)(v782[1] - *((int *)v782 + 57));
        v782[1] = (uint64_t)v48;
        int v49 = (unsigned __int8 *)v47[11];
        goto LABEL_55;
      case 22:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v50 = *((_DWORD *)v782 + 56);
        if (v50 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        __int16 v51 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v51 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        v782[1] = (uint64_t)(v51 + 1);
        int v52 = *v51;
        if ((~v52 & 0xC0) != 0) {
          goto LABEL_329;
        }
        int v53 = utf8_table4[v52 & 0x3F];
        int v54 = 6 * v53;
        int v52 = (utf8_table3[utf8_table4[v52 & 0x3F]] & v52) << (6 * v53);
        int64_t v55 = v51 + 2;
        unsigned int v56 = v53 + 1;
        int v57 = v54 - 6;
        do
        {
          v15[1] = (uint64_t)v55;
          v52 |= (*(v55++ - 1) & 0x3F) << v57;
          --v56;
          v57 -= 6;
        }
        while (v56 > 1);
        if (v52 < 256)
        {
LABEL_329:
          if (((*(unsigned __int8 *)(v15[9] + v52 / 8) >> (v52 & 7)) & 1) == 0) {
            goto LABEL_328;
          }
        }
        else if (*((_DWORD *)v15 + 62) == 59)
        {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v50 + 1;
        goto LABEL_331;
      case 23:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v58 = *((_DWORD *)v782 + 56);
        if (v58 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        unsigned int v59 = (unsigned char *)v782[1];
        if ((unint64_t)v59 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        v782[1] = (uint64_t)(v59 + 1);
        if (((*(unsigned __int8 *)(v15[9] + ((unint64_t)*v59 >> 3)) >> (*v59 & 7)) & 1) == 0) {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v58 + 1;
        goto LABEL_71;
      case 24:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v62 = v782[1];
        v782[1] = v62 - 1;
        if (v62 == v47[11]) {
          goto LABEL_987;
        }
        if ((*(unsigned char *)(v62 - 1) & 0xC0) == 0x80)
        {
          uint64_t v63 = (char *)(v62 - 2);
          do
          {
            v47[1] = (uint64_t)v63;
            char v64 = *v63--;
          }
          while ((v64 & 0xC0) == 0x80);
        }
        goto LABEL_77;
      case 25:
        int v47 = v782;
        unint64_t v65 = v782[1] - 1;
        v782[1] = v65;
        if (v12) {
          goto LABEL_243;
        }
        char v66 = (unsigned __int8 *)v47[11];
        goto LABEL_80;
      case 26:
        BOOL v67 = (uint64_t **)v782;
        if (v12)
        {
          uint64_t v43 = (uint64_t *)*v782;
          goto LABEL_244;
        }
        uint64_t v44 = v9;
        int v183 = *((_DWORD *)v782 + 56);
        if (v183 >= *((_DWORD *)v782 + 58)
          || (uint64_t v184 = (unsigned __int8 *)v782[1], (unint64_t)v184 >= *(void *)(a4 + 96)))
        {
          int v204 = (uint64_t *)*v782;
          goto LABEL_306;
        }
        v782[1] = (uint64_t)(v184 + 1);
        int v185 = *v184;
        if ((~v185 & 0xC0) == 0)
        {
          int v186 = utf8_table4[v185 & 0x3F];
          int v187 = 6 * v186;
          int v185 = (utf8_table3[utf8_table4[v185 & 0x3F]] & v185) << (6 * v186);
          int v188 = v184 + 2;
          unsigned int v189 = v186 + 1;
          int v190 = v187 - 6;
          do
          {
            v67[1] = (uint64_t *)v188;
            v185 |= (*(v188++ - 1) & 0x3F) << v190;
            --v189;
            v190 -= 6;
          }
          while (v189 > 1);
        }
        if (match_xclass(v185, v67[9]))
        {
          *((_DWORD *)v67 + 56) = v183 + 1;
          goto LABEL_267;
        }
        unsigned int v782 = *v67;
        pcre_freeMem(a1, &v783, v191, a4, a5, a6, a7, a8, v761);
        uint64_t v172 = v782;
        if (!v782) {
          return 0;
        }
        uint64_t v9 = v44;
        goto LABEL_989;
      case 27:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        uint64_t v68 = v782[1];
        v782[1] = v68 - 1;
        if (v68 == v15[11]) {
          goto LABEL_328;
        }
        if ((*(unsigned char *)(v68 - 1) & 0xC0) == 0x80)
        {
          BOOL v69 = (char *)(v68 - 2);
          do
          {
            v15[1] = (uint64_t)v69;
            char v70 = *v69--;
          }
          while ((v70 & 0xC0) == 0x80);
        }
        goto LABEL_89;
      case 28:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        if (*((_DWORD *)v782 + 56) >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        char v71 = (const void *)v782[1];
        if ((unint64_t)v71 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        if (cstdlib_memcmp(v71, (const void *)v782[8], *((unsigned int *)v782 + 57)))
        {
          if (!__n)
          {
            unsigned int v782 = (uint64_t *)*v782;
            pcre_freeMem(a1, &v783, v72, a4, a5, a6, a7, a8, v761);
            uint64_t v172 = v782;
            if (!v782) {
              return 0;
            }
            unsigned int __n = 0;
            goto LABEL_989;
          }
          int v73 = cstdlib_memcmp((const void *)v782[1], __s2, __n);
          int v15 = v782;
          if (v73) {
            goto LABEL_328;
          }
          unsigned int v74 = __n;
        }
        else
        {
          int v15 = v782;
          unsigned int v74 = *((_DWORD *)v782 + 57);
        }
        v15[1] += (int)v74;
        ++*((_DWORD *)v15 + 56);
        goto LABEL_337;
      case 29:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        unint64_t v75 = v782[1] - *((int *)v782 + 57);
        v782[1] = v75;
        goto LABEL_99;
      case 30:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v76 = *((_DWORD *)v782 + 56);
        if (v76 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        int v77 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v77 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        int v78 = *((_DWORD *)v782 + 55);
        uint64_t v79 = *(void *)(a4 + 32);
        v782[1] = (uint64_t)(v77 + 1);
        if (v78 != *(unsigned __int8 *)(v79 + *v77)) {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v76 + 1;
        goto LABEL_106;
      case 31:
        int v47 = v782;
        unint64_t v80 = v782[1] - 1;
        v782[1] = v80;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v81 = (unsigned __int8 *)v47[11];
        goto LABEL_109;
      case 32:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v82 = *((_DWORD *)v782 + 56);
        if (v82 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        unsigned int v83 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v83 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        int v84 = *((_DWORD *)v782 + 55);
        v782[1] = (uint64_t)(v83 + 1);
        if (v84 != *v83) {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v82 + 1;
        goto LABEL_116;
      case 33:
        int v47 = v782;
        unint64_t v85 = v782[1] - 1;
        v782[1] = v85;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v81 = (unsigned __int8 *)v47[11];
        goto LABEL_119;
      case 34:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        long long v86 = (unsigned __int8 *)v782[1];
        long long v87 = v86 + 1;
        v782[1] = (uint64_t)(v86 + 1);
        int v88 = *v86;
        if ((~v88 & 0xC0) != 0) {
          goto LABEL_126;
        }
        int v89 = utf8_table4[v88 & 0x3F];
        int v90 = 6 * v89;
        int v88 = (utf8_table3[utf8_table4[v88 & 0x3F]] & v88) << (6 * v89);
        unsigned int v91 = v89 + 1;
        int v92 = v90 - 6;
        do
        {
          uint64_t v93 = v87++;
          v15[1] = (uint64_t)v87;
          v88 |= (*v93 & 0x3F) << v92;
          --v91;
          v92 -= 6;
        }
        while (v91 > 1);
        if (v88 <= 255) {
LABEL_126:
        }
          int v88 = *(unsigned __int8 *)(*(void *)(a4 + 32) + v88);
        int v94 = *((_DWORD *)v15 + 56);
        if (v94 >= *((_DWORD *)v15 + 58)
          || (unint64_t)v87 >= *(void *)(a4 + 96)
          || *((_DWORD *)v15 + 55) == v88)
        {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v94 + 1;
        goto LABEL_131;
      case 35:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v95 = *((_DWORD *)v782 + 56);
        if (v95 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        int v96 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v96 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        int v97 = *((_DWORD *)v782 + 55);
        uint64_t v98 = *(void *)(a4 + 32);
        v782[1] = (uint64_t)(v96 + 1);
        if (v97 == *(unsigned __int8 *)(v98 + *v96)) {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v95 + 1;
        goto LABEL_137;
      case 36:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v99 = v782[1];
        v782[1] = v99 - 1;
        if (v99 == v47[11]) {
          goto LABEL_987;
        }
        if ((*(unsigned char *)(v99 - 1) & 0xC0) == 0x80)
        {
          unint64_t v100 = (char *)(v99 - 2);
          do
          {
            v47[1] = (uint64_t)v100;
            char v101 = *v100--;
          }
          while ((v101 & 0xC0) == 0x80);
        }
        goto LABEL_143;
      case 37:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        unint64_t v102 = v782[1] - 1;
        v782[1] = v102;
        uint64_t v103 = (unsigned __int8 *)v47[11];
        goto LABEL_146;
      case 38:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v104 = (unsigned __int8 *)v782[1];
        int v105 = v104 + 1;
        v782[1] = (uint64_t)(v104 + 1);
        int v106 = *v104;
        if ((~v106 & 0xC0) != 0)
        {
          uint64_t v110 = v105;
        }
        else
        {
          int v107 = utf8_table4[v106 & 0x3F];
          int v106 = (utf8_table3[utf8_table4[v106 & 0x3F]] & v106) << (6 * v107);
          int v108 = 6 * v107 - 6;
          unsigned int v109 = v107 + 1;
          do
          {
            uint64_t v110 = v105 + 1;
            v15[1] = (uint64_t)(v105 + 1);
            v106 |= (*v105 & 0x3F) << v108;
            v108 -= 6;
            --v109;
            ++v105;
          }
          while (v109 > 1);
        }
        int v207 = *((_DWORD *)v15 + 56);
        if (v207 >= *((_DWORD *)v15 + 58)
          || (unint64_t)v110 >= *(void *)(a4 + 96)
          || *((_DWORD *)v15 + 55) == v106)
        {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v207 + 1;
        goto LABEL_318;
      case 39:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v111 = *((_DWORD *)v782 + 56);
        if (v111 >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        uint64_t v112 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v112 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        int v113 = *((_DWORD *)v782 + 55);
        v782[1] = (uint64_t)(v112 + 1);
        if (v113 == *v112) {
          goto LABEL_328;
        }
        *((_DWORD *)v15 + 56) = v111 + 1;
        goto LABEL_158;
      case 40:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v114 = v782[1];
        v782[1] = v114 - 1;
        if (v114 == v47[11]) {
          goto LABEL_987;
        }
        if ((*(unsigned char *)(v114 - 1) & 0xC0) == 0x80)
        {
          BOOL v115 = (char *)(v114 - 2);
          do
          {
            v47[1] = (uint64_t)v115;
            char v116 = *v115--;
          }
          while ((v116 & 0xC0) == 0x80);
        }
        goto LABEL_164;
      case 41:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        unint64_t v117 = v782[1] - 1;
        v782[1] = v117;
        unsigned __int8 v118 = (unsigned __int8 *)v47[11];
        goto LABEL_167;
      case 42:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        if (*((_DWORD *)v782 + 56) >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        unint64_t v119 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v119 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        v782[1] = (uint64_t)(v119 + 1);
        int v120 = *v119;
        if ((~v120 & 0xC0) == 0)
        {
          int v121 = utf8_table4[v120 & 0x3F];
          int v120 = (utf8_table3[utf8_table4[v120 & 0x3F]] & v120) << (6 * v121);
          int v122 = v119 + 2;
          int v123 = 6 * v121 - 6;
          unsigned int v124 = v121 + 1;
          do
          {
            v15[1] = (uint64_t)v122;
            v120 |= (*(v122++ - 1) & 0x3F) << v123;
            v123 -= 6;
            --v124;
          }
          while (v124 > 1);
        }
        int v125 = ucp_findchar(v120, (int *)v15 + 49, (unsigned int *)v15 + 50);
        int v15 = v782;
        *((_DWORD *)v782 + 48) = v125;
        if (*((_DWORD *)v15 + 47) == (*(_DWORD *)v15[26] == *((_DWORD *)v15 + 51))) {
          goto LABEL_328;
        }
        ++*((_DWORD *)v15 + 56);
        goto LABEL_177;
      case 43:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        if (*((_DWORD *)v782 + 56) >= *((_DWORD *)v782 + 58)) {
          goto LABEL_328;
        }
        int v126 = (unsigned __int8 *)v782[1];
        if ((unint64_t)v126 >= *(void *)(a4 + 96)) {
          goto LABEL_328;
        }
        v782[1] = (uint64_t)(v126 + 1);
        int v127 = *v126;
        if (*(_DWORD *)(a4 + 60) && (v127 & 0xC0) == 0xC0)
        {
          int v128 = utf8_table4[v127 & 0x3F];
          int v127 = (utf8_table3[utf8_table4[v127 & 0x3F]] & v127) << (6 * v128);
          int v129 = v126 + 2;
          int v130 = 6 * v128 - 6;
          unsigned int v131 = v128 + 1;
          do
          {
            v15[1] = (uint64_t)v129;
            v127 |= (*(v129++ - 1) & 0x3F) << v130;
            v130 -= 6;
            --v131;
          }
          while (v131 > 1);
        }
        int v132 = ucp_findchar(v127, (int *)v15 + 49, (unsigned int *)v15 + 50);
        int v15 = v782;
        *((_DWORD *)v782 + 48) = v132;
        if (v132 == 2) {
          goto LABEL_328;
        }
        for (uint64_t j = (unsigned __int8 *)v15[1]; (unint64_t)j < *(void *)(a4 + 96); v15[1] = (uint64_t)j)
        {
          int v134 = *j;
          unsigned int v135 = 1;
          if (*(_DWORD *)(a4 + 60) && (v134 & 0xC0) == 0xC0)
          {
            unint64_t v136 = utf8_table4[v134 & 0x3F];
            int v134 = (utf8_table3[v136] & v134) << (6 * v136);
            uint64_t v137 = (char *)(j + 1);
            if (v136 <= 1) {
              uint64_t v138 = 1;
            }
            else {
              uint64_t v138 = v136;
            }
            int v139 = 6 * v136 - 6;
            do
            {
              char v140 = *v137++;
              v134 |= (v140 & 0x3F) << v139;
              v139 -= 6;
              --v138;
            }
            while (v138);
            unsigned int v135 = v136 + 1;
          }
          int v141 = ucp_findchar(v134, (int *)v15 + 49, (unsigned int *)v15 + 50);
          int v15 = v782;
          *((_DWORD *)v782 + 48) = v141;
          if (v141 != 2) {
            break;
          }
          uint64_t j = (unsigned __int8 *)(v15[1] + v135);
        }
        ++*((_DWORD *)v15 + 56);
        goto LABEL_334;
      case 44:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v142 = *((_DWORD *)v782 + 56);
        if (v142 < *((_DWORD *)v782 + 58))
        {
          uint64_t v143 = (unsigned __int8 *)v782[1];
          if ((unint64_t)v143 < *(void *)(a4 + 96))
          {
            v782[1] = (uint64_t)(v143 + 1);
            int v144 = *v143;
            if ((~v144 & 0xC0) == 0)
            {
              int v145 = utf8_table4[v144 & 0x3F];
              int v144 = (utf8_table3[utf8_table4[v144 & 0x3F]] & v144) << (6 * v145);
              uint64_t v146 = v143 + 2;
              int v147 = 6 * v145 - 6;
              unsigned int v148 = v145 + 1;
              do
              {
                v15[1] = (uint64_t)v146;
                v144 |= (*(v146++ - 1) & 0x3F) << v147;
                v147 -= 6;
                --v148;
              }
              while (v148 > 1);
            }
            switch(*((_DWORD *)v15 + 54))
            {
              case 5:
                if (v144 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 4) == 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 6:
                if (v144 <= 255 && (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 4) != 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 7:
                if (v144 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 1) == 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 8:
                if (v144 <= 255 && (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 1) != 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 9:
                if (v144 > 255 || (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 0x10) == 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 0xA:
                if (v144 < 256 || (*(unsigned char *)(*(void *)(a4 + 40) + v144) & 0x10) != 0) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 0xB:
                if ((v15[4] & 4) != 0 || v144 != 10) {
                  goto LABEL_361;
                }
                goto LABEL_328;
              case 0xC:
LABEL_361:
                *((_DWORD *)v15 + 56) = v142 + 1;
                goto LABEL_362;
              default:
                goto LABEL_342;
            }
          }
        }
        goto LABEL_328;
      case 45:
        int v15 = v782;
        if (v12) {
          goto LABEL_49;
        }
        int v149 = *((_DWORD *)v782 + 56);
        if (v149 < *((_DWORD *)v782 + 58))
        {
          uint64_t v150 = (unsigned __int8 *)v782[1];
          if ((unint64_t)v150 < *(void *)(a4 + 96))
          {
            v782[1] = (uint64_t)(v150 + 1);
            uint64_t v151 = *v150;
            switch(*((_DWORD *)v15 + 54))
            {
              case 5:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v151) & 4) == 0) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 6:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v151) & 4) != 0) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 7:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v151) & 1) == 0) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 8:
                if (*(unsigned char *)(*(void *)(a4 + 40) + v151)) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 9:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v151) & 0x10) == 0) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 0xA:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v151) & 0x10) != 0) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 0xB:
                if ((v15[4] & 4) != 0 || v151 != 10) {
                  goto LABEL_375;
                }
                goto LABEL_328;
              case 0xC:
LABEL_375:
                *((_DWORD *)v15 + 56) = v149 + 1;
                goto LABEL_376;
              default:
LABEL_342:
                unsigned int v782 = (uint64_t *)*v15;
                pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
                uint64_t v172 = v782;
                uint64_t v12 = 4294967282;
                if (!v782) {
                  return v12;
                }
                goto LABEL_1358;
            }
          }
        }
        goto LABEL_328;
      case 46:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v152 = v782[1];
        v782[1] = v152 - 1;
        if (v152 == v47[11]) {
          goto LABEL_987;
        }
        if ((*(unsigned char *)(v152 - 1) & 0xC0) == 0x80)
        {
          uint64_t v153 = (char *)(v152 - 2);
          do
          {
            v47[1] = (uint64_t)v153;
            char v154 = *v153--;
          }
          while ((v154 & 0xC0) == 0x80);
        }
        goto LABEL_219;
      case 47:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v155 = v782[1];
        uint64_t v156 = (unsigned __int8 *)(v155 - 1);
        v782[1] = v155 - 1;
        if (v155 == v47[11]) {
          goto LABEL_987;
        }
        while (1)
        {
          int v157 = *v156;
          int v158 = v157 & 0xC0;
          if (v158 == 128)
          {
            char v159 = v156 - 1;
            do
            {
              v47[1] = (uint64_t)v159;
              int v160 = *v159--;
              int v157 = v160;
              int v158 = v160 & 0xC0;
            }
            while (v158 == 128);
            uint64_t v156 = v159 + 1;
          }
          BOOL v161 = v158 != 192 || *(_DWORD *)(a4 + 60) == 0;
          if (!v161)
          {
            unint64_t v162 = utf8_table4[v157 & 0x3F];
            int v163 = 6 * v162;
            int v157 = (utf8_table3[v162] & v157) << (6 * v162);
            uint64_t v164 = (char *)(v156 + 1);
            if (v162 <= 1) {
              unint64_t v162 = 1;
            }
            int v165 = v163 - 6;
            do
            {
              char v166 = *v164++;
              v157 |= (v166 & 0x3F) << v165;
              v165 -= 6;
              --v162;
            }
            while (v162);
          }
          int v167 = ucp_findchar(v157, (int *)v47 + 49, (unsigned int *)v47 + 50);
          int v47 = v782;
          *((_DWORD *)v782 + 48) = v167;
          if (v167 != 2) {
            break;
          }
          uint64_t v156 = (unsigned __int8 *)(v47[1] - 1);
          v47[1] = (uint64_t)v156;
        }
        goto LABEL_1073;
      case 48:
        int v47 = v782;
        if (v12) {
          goto LABEL_243;
        }
        uint64_t v168 = v782[1];
        v782[1] = v168 - 1;
        if (v168 == v47[11]) {
          goto LABEL_987;
        }
        if ((*(unsigned char *)(v168 - 1) & 0xC0) == 0x80)
        {
          __int16 v169 = (char *)(v168 - 2);
          do
          {
            v47[1] = (uint64_t)v169;
            char v170 = *v169--;
          }
          while ((v170 & 0xC0) == 0x80);
        }
        goto LABEL_241;
      case 49:
        int v47 = v782;
        unint64_t v171 = v782[1] - 1;
        v782[1] = v171;
        if (v12)
        {
LABEL_243:
          uint64_t v43 = (uint64_t *)*v47;
LABEL_244:
          unsigned int v782 = v43;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
          goto LABEL_245;
        }
        int v192 = (unsigned char *)v47[11];
        goto LABEL_270;
      default:
        int v774 = pcre_getMem(a1, v13, &v782, a4, a5, a6, a7, a8);
LABEL_248:
        uint64_t v12 = 4294967290;
        if (!v782 || v774 < 0) {
          return v12;
        }
        uint64_t v173 = 0;
        char v25 = 0;
        *unsigned int v782 = 0;
        int v23 = v782;
        uint64_t v26 = a2;
        v782[1] = a2;
        v23[2] = v772;
        *((_DWORD *)v23 + 6) = 2;
        v23[4] = v9;
        v23[5] = 0;
        *((_DWORD *)v23 + 12) = 2;
        uint64_t v174 = v9;
        goto LABEL_1352;
    }
    int v14 = v773;
    switch(v212)
    {
      case 0u:
        uint64_t v575 = *(void *)(a4 + 136);
        if (!v575 || *(_DWORD *)(v575 + 8))
        {
          uint64_t v586 = v47[1];
          if (*(_DWORD *)(a4 + 68) && v586 == *(void *)(a4 + 104)) {
            goto LABEL_987;
          }
          *(void *)(a4 + 112) = v586;
          *(_DWORD *)(a4 + 120) = *((_DWORD *)v47 + 6);
          unsigned int v208 = (uint64_t *)*v47;
LABEL_323:
          unsigned int v782 = v208;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
          uint64_t v172 = v782;
          uint64_t v12 = 1;
          if (!v782) {
            return v12;
          }
          goto LABEL_1358;
        }
        *(void *)(a4 + 136) = *(void *)v575;
        cstdlib_memmove(*(void **)(a4 + 16), *(const void **)(v575 + 32), 4 * *(unsigned int *)(v575 + 40));
        *(void *)(a4 + 104) = *(void *)(v575 + 24);
        int v15 = v782;
        v782[4] = v782[22];
        uint64_t v40 = *(void *)(v575 + 16);
        goto LABEL_321;
      case 1u:
        uint64_t v266 = *(void *)(a4 + 88);
        goto LABEL_507;
      case 2u:
        if (v47[1] != *(void *)(a4 + 88) + *(int *)(a4 + 128)) {
          goto LABEL_987;
        }
        goto LABEL_862;
      case 3u:
      case 4u:
        uint64_t v236 = (unsigned __int8 *)v47[1];
        uint64_t v237 = *(unsigned __int8 **)(a4 + 88);
        if (*(_DWORD *)(a4 + 60))
        {
          if (v236 == v237) {
            goto LABEL_753;
          }
          uint64_t v238 = v47[1];
          do
          {
            int v240 = *(unsigned __int8 *)--v238;
            int v239 = v240;
            int v241 = v240 & 0xC0;
          }
          while (v241 == 128);
          if (v241 != 192) {
            goto LABEL_414;
          }
          uint64_t v242 = 0;
          unint64_t v243 = utf8_table4[v239 & 0x3F];
          int v244 = 6 * v243;
          int v239 = (utf8_table3[v243] & v239) << (6 * v243);
          if (v243 <= 1) {
            unint64_t v243 = 1;
          }
          int v245 = v244 - 6;
          do
          {
            v239 |= (*(unsigned char *)(v238 + v242++ + 1) & 0x3F) << v245;
            v245 -= 6;
          }
          while (v243 != v242);
          if (v239 >= 256) {
LABEL_753:
          }
            int v246 = 0;
          else {
LABEL_414:
          }
            int v246 = (*(unsigned __int8 *)(*(void *)(a4 + 40) + v239) >> 4) & 1;
          *((_DWORD *)v47 + 43) = v246;
          if ((unint64_t)v236 < *(void *)(a4 + 96))
          {
            int v489 = *v236;
            if ((~v489 & 0xC0) != 0) {
              goto LABEL_761;
            }
            unint64_t v490 = utf8_table4[v489 & 0x3F];
            int v491 = 6 * v490;
            int v489 = (utf8_table3[v490] & v489) << (6 * v490);
            v492 = (char *)(v236 + 1);
            if (v490 <= 1) {
              unint64_t v490 = 1;
            }
            int v493 = v491 - 6;
            do
            {
              char v494 = *v492++;
              v489 |= (v494 & 0x3F) << v493;
              v493 -= 6;
              --v490;
            }
            while (v490);
            if (v489 <= 255)
            {
LABEL_761:
              unsigned int v495 = (unsigned __int8 *)(*(void *)(a4 + 40) + v489);
LABEL_849:
              int v352 = (*v495 >> 4) & 1;
              goto LABEL_851;
            }
          }
        }
        else
        {
          if (v236 == v237) {
            int v246 = 0;
          }
          else {
            int v246 = (*(unsigned __int8 *)(*(void *)(a4 + 40) + *(v236 - 1)) >> 4) & 1;
          }
          *((_DWORD *)v47 + 43) = v246;
          if ((unint64_t)v236 < *(void *)(a4 + 96))
          {
            unsigned int v495 = (unsigned __int8 *)(*(void *)(a4 + 40) + *v236);
            goto LABEL_849;
          }
        }
        int v352 = 0;
LABEL_851:
        *((_DWORD *)v47 + 40) = v352;
        v47[2] = (uint64_t)(v211 + 1);
        if (*v211 == 4)
        {
          if (v246 == v352) {
            goto LABEL_956;
          }
        }
        else
        {
LABEL_854:
          if (v246 != v352) {
            goto LABEL_956;
          }
        }
        goto LABEL_377;
      case 5u:
        int v267 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v267 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v267 + 1);
        int v268 = *v267;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_439;
        }
        if ((v268 & 0xC0) != 0xC0) {
          goto LABEL_439;
        }
        int v269 = utf8_table4[v268 & 0x3F];
        int v270 = 6 * v269;
        int v268 = (utf8_table3[utf8_table4[v268 & 0x3F]] & v268) << (6 * v269);
        unint64_t v271 = v267 + 2;
        unsigned int v272 = v269 + 1;
        int v273 = v270 - 6;
        do
        {
          v47[1] = (uint64_t)v271;
          v268 |= (*(v271++ - 1) & 0x3F) << v273;
          --v272;
          v273 -= 6;
        }
        while (v272 > 1);
        if (v268 <= 255)
        {
LABEL_439:
          if ((*(unsigned char *)(*(void *)(a4 + 40) + v268) & 4) != 0) {
            goto LABEL_987;
          }
        }
        goto LABEL_862;
      case 6u:
        int v274 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v274 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v274 + 1);
        int v275 = *v274;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v275 & 0xC0) == 0xC0)
          {
            int v276 = utf8_table4[v275 & 0x3F];
            int v277 = 6 * v276;
            int v275 = (utf8_table3[utf8_table4[v275 & 0x3F]] & v275) << (6 * v276);
            uint64_t v278 = v274 + 2;
            unsigned int v279 = v276 + 1;
            int v280 = v277 - 6;
            do
            {
              v47[1] = (uint64_t)v278;
              v275 |= (*(v278++ - 1) & 0x3F) << v280;
              --v279;
              v280 -= 6;
            }
            while (v279 > 1);
            if (v275 > 255) {
              goto LABEL_987;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v275) & 4) == 0) {
          goto LABEL_987;
        }
        goto LABEL_862;
      case 7u:
        unsigned int v281 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v281 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v281 + 1);
        int v282 = *v281;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_455;
        }
        if ((v282 & 0xC0) != 0xC0) {
          goto LABEL_455;
        }
        int v283 = utf8_table4[v282 & 0x3F];
        int v284 = 6 * v283;
        int v282 = (utf8_table3[utf8_table4[v282 & 0x3F]] & v282) << (6 * v283);
        int v285 = v281 + 2;
        unsigned int v286 = v283 + 1;
        int v287 = v284 - 6;
        do
        {
          v47[1] = (uint64_t)v285;
          v282 |= (*(v285++ - 1) & 0x3F) << v287;
          --v286;
          v287 -= 6;
        }
        while (v286 > 1);
        if (v282 <= 255)
        {
LABEL_455:
          if (*(unsigned char *)(*(void *)(a4 + 40) + v282)) {
            goto LABEL_987;
          }
        }
        goto LABEL_862;
      case 8u:
        unsigned int v288 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v288 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v288 + 1);
        int v289 = *v288;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v289 & 0xC0) == 0xC0)
          {
            int v290 = utf8_table4[v289 & 0x3F];
            int v291 = 6 * v290;
            int v289 = (utf8_table3[utf8_table4[v289 & 0x3F]] & v289) << (6 * v290);
            int v292 = v288 + 2;
            unsigned int v293 = v290 + 1;
            int v294 = v291 - 6;
            do
            {
              v47[1] = (uint64_t)v292;
              v289 |= (*(v292++ - 1) & 0x3F) << v294;
              --v293;
              v294 -= 6;
            }
            while (v293 > 1);
            if (v289 > 255) {
              goto LABEL_987;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v289) & 1) == 0) {
          goto LABEL_987;
        }
        goto LABEL_862;
      case 9u:
        int v295 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v295 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v295 + 1);
        int v296 = *v295;
        if (!*(_DWORD *)(a4 + 60)) {
          goto LABEL_471;
        }
        if ((v296 & 0xC0) != 0xC0) {
          goto LABEL_471;
        }
        int v297 = utf8_table4[v296 & 0x3F];
        int v298 = 6 * v297;
        int v296 = (utf8_table3[utf8_table4[v296 & 0x3F]] & v296) << (6 * v297);
        int v299 = v295 + 2;
        unsigned int v300 = v297 + 1;
        int v301 = v298 - 6;
        do
        {
          v47[1] = (uint64_t)v299;
          v296 |= (*(v299++ - 1) & 0x3F) << v301;
          --v300;
          v301 -= 6;
        }
        while (v300 > 1);
        if (v296 <= 255)
        {
LABEL_471:
          if ((*(unsigned char *)(*(void *)(a4 + 40) + v296) & 0x10) != 0) {
            goto LABEL_987;
          }
        }
        goto LABEL_862;
      case 0xAu:
        int v302 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v302 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v302 + 1);
        int v303 = *v302;
        if (*(_DWORD *)(a4 + 60))
        {
          if ((v303 & 0xC0) == 0xC0)
          {
            int v304 = utf8_table4[v303 & 0x3F];
            int v305 = 6 * v304;
            int v303 = (utf8_table3[utf8_table4[v303 & 0x3F]] & v303) << (6 * v304);
            int v306 = v302 + 2;
            unsigned int v307 = v304 + 1;
            int v308 = v305 - 6;
            do
            {
              v47[1] = (uint64_t)v306;
              v303 |= (*(v306++ - 1) & 0x3F) << v308;
              --v307;
              v308 -= 6;
            }
            while (v307 > 1);
            if (v303 > 255) {
              goto LABEL_987;
            }
          }
        }
        if ((*(unsigned char *)(*(void *)(a4 + 40) + v303) & 0x10) == 0) {
          goto LABEL_987;
        }
        goto LABEL_862;
      case 0xBu:
        int v309 = (unsigned char *)v47[1];
        unint64_t v310 = *(void *)(a4 + 96);
        if ((v47[4] & 4) == 0 && (unint64_t)v309 < v310 && *v309 == 10) {
          goto LABEL_987;
        }
        int v311 = v309 + 1;
        v47[1] = (uint64_t)(v309 + 1);
        if ((unint64_t)v309 >= v310) {
          goto LABEL_987;
        }
        if (*(_DWORD *)(a4 + 60) && (unint64_t)v311 < v310)
        {
          unint64_t v312 = v310 - (void)v311;
          uint64_t v313 = v309 + 2;
          do
          {
            if ((*(v313 - 1) & 0xC0) != 0x80) {
              break;
            }
            v47[1] = (uint64_t)v313++;
            --v312;
          }
          while (v312);
        }
        goto LABEL_862;
      case 0xCu:
        unint64_t v314 = v47[1];
        v47[1] = v314 + 1;
        if (v314 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        goto LABEL_862;
      case 0xDu:
      case 0xEu:
        uint64_t v247 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v247 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v247 + 1);
        int v248 = *v247;
        if (*(_DWORD *)(a4 + 60) && (v248 & 0xC0) == 0xC0)
        {
          int v249 = utf8_table4[v248 & 0x3F];
          int v250 = 6 * v249;
          int v248 = (utf8_table3[utf8_table4[v248 & 0x3F]] & v248) << (6 * v249);
          unsigned __int8 v251 = v247 + 2;
          unsigned int v252 = v249 + 1;
          int v253 = v250 - 6;
          do
          {
            v47[1] = (uint64_t)v251;
            v248 |= (*(v251++ - 1) & 0x3F) << v253;
            --v252;
            v253 -= 6;
          }
          while (v252 > 1);
        }
        LODWORD(v778) = 0;
        int v254 = ucp_findchar(v248, (int *)&v778, &v777);
        v47[2] = (uint64_t)(v211 + 1);
        int v255 = (char)v211[1];
        int v256 = v211[1];
        v47[2] = (uint64_t)(v211 + 2);
        if (v255 < 0)
        {
          int v257 = v212 == 14;
          BOOL v258 = v256 - 128 == v254;
        }
        else
        {
          int v257 = v212 == 14;
          BOOL v258 = v778 == v256;
        }
        int v467 = v258;
        if (v257 != v467) {
          goto LABEL_987;
        }
        goto LABEL_377;
      case 0xFu:
        int v315 = (unsigned __int8 *)v47[1];
        unint64_t v316 = *(void *)(a4 + 96);
        if ((unint64_t)v315 >= v316) {
          goto LABEL_987;
        }
        int v317 = v315 + 1;
        v47[1] = (uint64_t)(v315 + 1);
        int v318 = *v315;
        int v319 = *(_DWORD *)(a4 + 60);
        if (v319 && (v318 & 0xC0) == 0xC0)
        {
          int v320 = utf8_table4[v318 & 0x3F];
          int v321 = 6 * v320;
          int v318 = (utf8_table3[utf8_table4[v318 & 0x3F]] & v318) << (6 * v320);
          unsigned int v322 = v320 + 1;
          int v323 = v321 - 6;
          do
          {
            unsigned int v324 = v317 + 1;
            v47[1] = (uint64_t)(v317 + 1);
            v318 |= (*v317 & 0x3F) << v323;
            --v322;
            v323 -= 6;
            ++v317;
          }
          while (v322 > 1);
        }
        else
        {
          unsigned int v324 = v315 + 1;
        }
        unsigned int v777 = 0;
        LODWORD(v778) = 0;
        if (ucp_findchar(v318, (int *)&v778, &v777) == 2) {
          goto LABEL_956;
        }
        uint64_t v44 = v9;
        while ((unint64_t)v324 < v316)
        {
          int v498 = *v324;
          unsigned int v499 = 1;
          if (v319 && (v498 & 0xC0) == 0xC0)
          {
            unint64_t v500 = utf8_table4[v498 & 0x3F];
            int v498 = (utf8_table3[v500] & v498) << (6 * v500);
            unsigned int v501 = (char *)(v324 + 1);
            if (v500 <= 1) {
              uint64_t v502 = 1;
            }
            else {
              uint64_t v502 = v500;
            }
            int v503 = 6 * v500 - 6;
            do
            {
              char v504 = *v501++;
              v498 |= (v504 & 0x3F) << v503;
              v503 -= 6;
              --v502;
            }
            while (v502);
            unsigned int v499 = v500 + 1;
          }
          if (ucp_findchar(v498, (int *)&v778, &v777) != 2) {
            break;
          }
          v324 += v499;
          v47[1] = (uint64_t)v324;
        }
        unsigned int v505 = v211 + 1;
        goto LABEL_795;
      case 0x10u:
        uint64_t v325 = (unsigned __int8 *)v47[1];
        unint64_t v326 = *(void *)(a4 + 96) - 1;
        if ((unint64_t)v325 < v326) {
          goto LABEL_987;
        }
        if (v325 == (unsigned __int8 *)v326) {
          goto LABEL_763;
        }
        goto LABEL_862;
      case 0x11u:
        unint64_t v327 = *(void *)(a4 + 96);
        goto LABEL_512;
      case 0x12u:
        v47[4] = v211[1];
        goto LABEL_806;
      case 0x13u:
        uint64_t v266 = *(void *)(a4 + 88);
        if (*(_DWORD *)(a4 + 52) && v47[1] == v266) {
          goto LABEL_987;
        }
        if ((v47[4] & 2) == 0)
        {
LABEL_507:
          if (v47[1] != v266) {
            goto LABEL_987;
          }
          goto LABEL_862;
        }
        uint64_t v497 = v47[1];
        if (v497 == v266) {
          goto LABEL_862;
        }
        int v496 = *(unsigned __int8 *)(v497 - 1);
        goto LABEL_766;
      case 0x14u:
        if ((v47[4] & 2) != 0)
        {
          uint64_t v325 = (unsigned __int8 *)v47[1];
          if ((unint64_t)v325 < *(void *)(a4 + 96))
          {
LABEL_763:
            int v496 = *v325;
            goto LABEL_766;
          }
          if (*(_DWORD *)(a4 + 56)) {
            goto LABEL_987;
          }
        }
        else
        {
          if (*(_DWORD *)(a4 + 56)) {
            goto LABEL_987;
          }
          unint64_t v327 = *(void *)(a4 + 96);
          if (*(_DWORD *)(a4 + 64))
          {
LABEL_512:
            if (v47[1] < v327) {
              goto LABEL_987;
            }
            goto LABEL_862;
          }
          int v542 = (unsigned __int8 *)v47[1];
          unsigned int v543 = (unsigned __int8 *)(v327 - 1);
          if (v542 < v543) {
            goto LABEL_987;
          }
          if (v542 == v543)
          {
            int v496 = *v542;
LABEL_766:
            if (v496 != 10) {
              goto LABEL_987;
            }
          }
        }
LABEL_862:
        v47[2] = (uint64_t)(v211 + 1);
        goto LABEL_377;
      case 0x15u:
        if (!*(_DWORD *)(a4 + 60))
        {
          int v512 = (unsigned __int8 *)v47[1];
          if ((uint64_t)(*(void *)(a4 + 96) - (void)v512) <= 0) {
            goto LABEL_987;
          }
          int v513 = v211[1];
          v47[1] = (uint64_t)(v512 + 1);
          if (v513 != *v512) {
            goto LABEL_987;
          }
          goto LABEL_806;
        }
        int v328 = 1;
        *((_DWORD *)v47 + 57) = 1;
        v47[2] = (uint64_t)(v211 + 1);
        int v329 = v211[1];
        *((_DWORD *)v47 + 55) = v329;
        if ((~v329 & 0xC0) == 0)
        {
          unint64_t v330 = utf8_table4[v329 & 0x3F];
          int v331 = (utf8_table3[v330] & v329) << (6 * v330);
          *((_DWORD *)v47 + 55) = v331;
          unsigned int v332 = (char *)(v211 + 2);
          if (v330 <= 1) {
            uint64_t v333 = 1;
          }
          else {
            uint64_t v333 = v330;
          }
          int v334 = 6 * v330 - 6;
          do
          {
            char v335 = *v332++;
            v331 |= (v335 & 0x3F) << v334;
            *((_DWORD *)v47 + 55) = v331;
            v334 -= 6;
            --v333;
          }
          while (v333);
          int v328 = v330 + 1;
          *((_DWORD *)v47 + 57) = v328;
        }
        uint64_t v336 = v47[1];
        if (*(void *)(a4 + 96) - v336 < v328) {
          goto LABEL_987;
        }
        uint64_t v337 = v336 + 1;
        int v338 = v211 + 2;
        while (1)
        {
          BOOL v339 = __OFSUB__(v328--, 1);
          *((_DWORD *)v47 + 57) = v328;
          if (v328 < 0 != v339) {
            goto LABEL_377;
          }
          v47[2] = (uint64_t)v338;
          int v340 = *(v338 - 1);
          v47[1] = v337;
          int v341 = *(unsigned __int8 *)(v337++ - 1);
          ++v338;
          if (v340 != v341) {
            goto LABEL_987;
          }
        }
      case 0x16u:
        if (*(_DWORD *)(a4 + 60))
        {
          unsigned int v342 = 1;
          *((_DWORD *)v47 + 57) = 1;
          uint64_t v343 = v211 + 1;
          v47[2] = (uint64_t)(v211 + 1);
          int v344 = v211[1];
          *((_DWORD *)v47 + 55) = v344;
          if ((~v344 & 0xC0) == 0)
          {
            unint64_t v345 = utf8_table4[v344 & 0x3F];
            int v344 = (utf8_table3[v345] & v344) << (6 * v345);
            *((_DWORD *)v47 + 55) = v344;
            int v346 = (char *)(v211 + 2);
            if (v345 <= 1) {
              uint64_t v347 = 1;
            }
            else {
              uint64_t v347 = v345;
            }
            int v348 = 6 * v345 - 6;
            do
            {
              char v349 = *v346++;
              v344 |= (v349 & 0x3F) << v348;
              *((_DWORD *)v47 + 55) = v344;
              v348 -= 6;
              --v347;
            }
            while (v347);
            unsigned int v342 = v345 + 1;
            *((_DWORD *)v47 + 57) = v342;
          }
          unsigned int v350 = (unsigned __int8 *)v47[1];
          if (*(void *)(a4 + 96) - (void)v350 < (uint64_t)v342) {
            goto LABEL_987;
          }
          if (v344 <= 127)
          {
            uint64_t v351 = *(void *)(a4 + 32);
            v47[2] = (uint64_t)(v211 + 2);
            int v246 = *(unsigned __int8 *)(v351 + v211[1]);
            v47[1] = (uint64_t)(v350 + 1);
            int v352 = *(unsigned __int8 *)(v351 + *v350);
            goto LABEL_854;
          }
          v47[1] = (uint64_t)(v350 + 1);
          int v536 = *v350;
          if ((~v536 & 0xC0) == 0)
          {
            int v537 = utf8_table4[v536 & 0x3F];
            int v538 = 6 * v537;
            int v536 = (utf8_table3[utf8_table4[v536 & 0x3F]] & v536) << (6 * v537);
            int v539 = v350 + 2;
            unsigned int v540 = v537 + 1;
            int v541 = v538 - 6;
            do
            {
              v47[1] = (uint64_t)v539;
              v536 |= (*(v539++ - 1) & 0x3F) << v541;
              --v540;
              v541 -= 6;
            }
            while (v540 > 1);
          }
          v47[2] = (uint64_t)&v343[v342];
          if (v344 != v536)
          {
            unsigned int v777 = 0;
            if ((ucp_findchar(v344, (int *)&v778, &v777) & 0x80000000) != 0 || v536 != v777)
            {
LABEL_956:
              unsigned int v782 = (uint64_t *)*v47;
              pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
              uint64_t v172 = v782;
              if (!v782) {
                return 0;
              }
              uint64_t v12 = 0;
              *((_DWORD *)v782 + 102) = 0;
LABEL_958:
              int v14 = v773;
              goto LABEL_1359;
            }
          }
        }
        else
        {
          unsigned int v514 = (unsigned __int8 *)v47[1];
          if ((uint64_t)(*(void *)(a4 + 96) - (void)v514) <= 0) {
            goto LABEL_987;
          }
          uint64_t v515 = *(void *)(a4 + 32);
          int v516 = *(unsigned __int8 *)(v515 + v211[1]);
          v47[1] = (uint64_t)(v514 + 1);
          if (v516 != *(unsigned __int8 *)(v515 + *v514)) {
            goto LABEL_987;
          }
LABEL_806:
          v47[2] = (uint64_t)(v211 + 2);
        }
        goto LABEL_377;
      case 0x17u:
        unsigned int v353 = (unsigned __int8 *)v47[1];
        if ((unint64_t)v353 >= *(void *)(a4 + 96)) {
          goto LABEL_987;
        }
        v47[1] = (uint64_t)(v353 + 1);
        v47[2] = (uint64_t)(v211 + 1);
        int v354 = *v353;
        if (*(_DWORD *)(a4 + 60) && (v354 & 0xC0) == 0xC0)
        {
          int v355 = utf8_table4[v354 & 0x3F];
          int v356 = 6 * v355;
          int v354 = (utf8_table3[utf8_table4[v354 & 0x3F]] & v354) << (6 * v355);
          char v357 = v353 + 2;
          unsigned int v358 = v355 + 1;
          int v359 = v356 - 6;
          do
          {
            v47[1] = (uint64_t)v357;
            v354 |= (*(v357++ - 1) & 0x3F) << v359;
            --v358;
            v359 -= 6;
          }
          while (v358 > 1);
        }
        if (v47[4])
        {
          uint64_t v506 = *(void *)(a4 + 32);
          if (v354 <= 255) {
            int v354 = *(unsigned __int8 *)(v506 + v354);
          }
          v47[2] = (uint64_t)(v211 + 2);
          int v360 = *(unsigned __int8 *)(v506 + v211[1]);
        }
        else
        {
          v47[2] = (uint64_t)(v211 + 2);
          int v360 = v211[1];
        }
        if (v354 == v360) {
          goto LABEL_956;
        }
        goto LABEL_377;
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
        int v214 = v211 + 1;
        v47[2] = (uint64_t)(v211 + 1);
        uint64_t v215 = *v211;
        BOOL v216 = v215 & 1;
        *((_DWORD *)v47 + 42) = v216;
        int v217 = rep_min_0[v215 - 24];
        *((_DWORD *)v47 + 59) = v217;
        unsigned int v218 = rep_max_0[v215 - 24];
        if ((v215 - 30) < 0xFFFFFFFE) {
          unsigned int v218 = 0x7FFFFFFF;
        }
        *((_DWORD *)v47 + 58) = v218;
        goto LABEL_547;
      case 0x1Eu:
      case 0x1Fu:
        int v217 = 0;
        *((_DWORD *)v47 + 59) = 0;
        unsigned int v218 = __rev16(*(unsigned __int16 *)(v211 + 1));
        *((_DWORD *)v47 + 58) = v218;
        BOOL v216 = *v211 == 31;
        *((_DWORD *)v47 + 42) = v216;
        goto LABEL_546;
      case 0x20u:
        BOOL v216 = 0;
        unsigned int v218 = __rev16(*(unsigned __int16 *)(v211 + 1));
        *((_DWORD *)v47 + 58) = v218;
        *((_DWORD *)v47 + 59) = v218;
        int v217 = v218;
LABEL_546:
        int v214 = v211 + 3;
        v47[2] = (uint64_t)(v211 + 3);
LABEL_547:
        if (!*(_DWORD *)(a4 + 60))
        {
          unint64_t v368 = *(void *)(a4 + 96);
          uint64_t v81 = (unsigned __int8 *)v47[1];
          if ((uint64_t)(v368 - (void)v81) < v217) {
            goto LABEL_987;
          }
          v47[2] = (uint64_t)(v214 + 1);
          int v362 = *v214;
          *((_DWORD *)v47 + 55) = v362;
          goto LABEL_561;
        }
        int v361 = 1;
        *((_DWORD *)v47 + 57) = 1;
        v47[8] = (uint64_t)v214;
        int v362 = *v214;
        *((_DWORD *)v47 + 55) = v362;
        if ((~v362 & 0xC0) == 0)
        {
          unint64_t v363 = utf8_table4[v362 & 0x3F];
          int v362 = (utf8_table3[v363] & v362) << (6 * v363);
          *((_DWORD *)v47 + 55) = v362;
          unsigned int v364 = (char *)(v214 + 1);
          if (v363 <= 1) {
            uint64_t v365 = 1;
          }
          else {
            uint64_t v365 = v363;
          }
          int v366 = 6 * v363 - 6;
          do
          {
            char v367 = *v364++;
            v362 |= (v367 & 0x3F) << v366;
            *((_DWORD *)v47 + 55) = v362;
            v366 -= 6;
            --v365;
          }
          while (v365);
          int v361 = v363 + 1;
          *((_DWORD *)v47 + 57) = v363 + 1;
        }
        unint64_t v368 = *(void *)(a4 + 96);
        uint64_t v81 = (unsigned __int8 *)v47[1];
        if ((uint64_t)(v368 - (void)v81) < v361 * v217) {
          goto LABEL_987;
        }
        v47[2] = (uint64_t)&v214[v361];
        if (v361 < 2)
        {
LABEL_561:
          if (v47[4])
          {
            uint64_t v371 = *(void *)(a4 + 32);
            int v372 = *(unsigned __int8 *)(v371 + v362);
            *((_DWORD *)v47 + 55) = v372;
            int v373 = v217;
            if (v217 >= 1)
            {
              do
              {
                v47[1] = (uint64_t)(v81 + 1);
                if (v372 != *(unsigned __int8 *)(v371 + *v81)) {
                  goto LABEL_987;
                }
                ++v81;
              }
              while (--v373);
            }
            if (v218 != v217)
            {
              if (v216)
              {
                *((_DWORD *)v47 + 56) = v217;
                int v14 = v773;
LABEL_106:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 30;
                goto LABEL_1348;
              }
              v47[11] = (uint64_t)v81;
              BOOL v339 = __OFSUB__(v218, v217);
              int v633 = v218 - v217;
              if ((v633 < 0) ^ v339 | (v633 == 0))
              {
                int v14 = v773;
              }
              else
              {
                uint64_t v634 = 0;
                unint64_t v80 = (unint64_t)v81;
                while ((unint64_t)&v81[v634] < v368)
                {
                  if (v372 == *(unsigned __int8 *)(v371 + v81[v634]))
                  {
                    ++v80;
                    v47[1] = (uint64_t)&v81[++v634];
                    if (v633 != v634) {
                      continue;
                    }
                  }
                  unint64_t v80 = (unint64_t)&v81[v634];
                  break;
                }
                int v14 = v773;
LABEL_109:
                if (v80 < (unint64_t)v81) {
                  goto LABEL_987;
                }
              }
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 31;
              goto LABEL_1348;
            }
          }
          else
          {
            int v370 = v217;
            if (v217 >= 1)
            {
              do
              {
                v47[1] = (uint64_t)(v81 + 1);
                if (v362 != *v81) {
                  goto LABEL_987;
                }
                ++v81;
              }
              while (--v370);
            }
            if (v218 != v217)
            {
              if (v216)
              {
                *((_DWORD *)v47 + 56) = v217;
                int v14 = v773;
LABEL_116:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 32;
                goto LABEL_1348;
              }
              v47[11] = (uint64_t)v81;
              BOOL v339 = __OFSUB__(v218, v217);
              int v631 = v218 - v217;
              if ((v631 < 0) ^ v339 | (v631 == 0))
              {
                int v14 = v773;
              }
              else
              {
                uint64_t v632 = 0;
                unint64_t v85 = (unint64_t)v81;
                while ((unint64_t)&v81[v632] < v368)
                {
                  if (v362 == v81[v632])
                  {
                    ++v85;
                    v47[1] = (uint64_t)&v81[++v632];
                    if (v631 != v632) {
                      continue;
                    }
                  }
                  unint64_t v85 = (unint64_t)&v81[v632];
                  break;
                }
                int v14 = v773;
LABEL_119:
                if (v85 < (unint64_t)v81) {
                  goto LABEL_987;
                }
              }
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 33;
              goto LABEL_1348;
            }
          }
          goto LABEL_377;
        }
        __s2[0] = 0;
        int v775 = 0;
        int v776 = 0;
        if (v47[4])
        {
          int v374 = ucp_findchar(v362, &v775, (unsigned int *)&v776);
          unsigned int v369 = 0;
          uint64_t v44 = v9;
          if ((v374 & 0x80000000) == 0 && v776 >= 1)
          {
            unsigned int v369 = ord2utf8(v776, (uint64_t)__s2);
            int v47 = v782;
            int v217 = *((_DWORD *)v782 + 59);
          }
        }
        else
        {
          uint64_t v44 = v9;
          unsigned int v369 = 0;
        }
        unsigned int __n = v369;
        if (v217 < 1)
        {
LABEL_583:
          int v381 = *((_DWORD *)v47 + 58);
          uint64_t v9 = v44;
          if (v217 != v381)
          {
            if (!*((_DWORD *)v47 + 42))
            {
              unint64_t v75 = v47[1];
              v47[11] = v75;
              if (v217 >= v381)
              {
                int v14 = v773;
              }
              else
              {
                do
                {
                  v636 = (const void *)v47[1];
                  if ((unint64_t)v636 > *(void *)(a4 + 96) - *((int *)v47 + 57)) {
                    break;
                  }
                  int v637 = cstdlib_memcmp(v636, (const void *)v47[8], *((unsigned int *)v47 + 57));
                  int v47 = v782;
                  if (v637)
                  {
                    if (!__n)
                    {
                      unsigned int __n = 0;
                      break;
                    }
                    int v638 = cstdlib_memcmp((const void *)v782[1], __s2, __n);
                    int v47 = v782;
                    if (v638) {
                      break;
                    }
                    uint64_t v639 = v782[1] + (int)__n;
                  }
                  else
                  {
                    uint64_t v639 = v782[1] + *((int *)v782 + 57);
                  }
                  v47[1] = v639;
                  ++v217;
                }
                while (v217 < *((_DWORD *)v47 + 58));
                int v14 = v773;
                unint64_t v75 = v47[1];
              }
LABEL_99:
              if (v75 >= v47[11])
              {
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 29;
                goto LABEL_1348;
              }
              goto LABEL_987;
            }
            *((_DWORD *)v47 + 56) = v217;
            int v14 = v773;
LABEL_337:
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 28;
            goto LABEL_1348;
          }
          goto LABEL_377;
        }
        int v375 = 0;
        uint64_t v376 = (int)v369;
        size_t v377 = v369;
        while (1)
        {
          int v378 = cstdlib_memcmp((const void *)v47[1], (const void *)v47[8], *((unsigned int *)v47 + 57));
          int v47 = v782;
          if (!v378)
          {
            uint64_t v380 = v782[1] + *((int *)v782 + 57);
            goto LABEL_582;
          }
          if (!__n)
          {
            unsigned int v782 = (uint64_t *)*v782;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
            uint64_t v46 = v782;
            if (v782)
            {
              unsigned int __n = 0;
              goto LABEL_307;
            }
            return 0;
          }
          int v379 = cstdlib_memcmp((const void *)v782[1], __s2, v377);
          int v47 = v782;
          if (v379) {
            break;
          }
          uint64_t v380 = v782[1] + v376;
LABEL_582:
          v47[1] = v380;
          int v217 = *((_DWORD *)v47 + 59);
          if (++v375 >= v217) {
            goto LABEL_583;
          }
        }
        int v204 = (uint64_t *)*v782;
LABEL_306:
        unsigned int v782 = v204;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
        uint64_t v46 = v782;
        if (v782)
        {
LABEL_307:
          uint64_t v12 = 0;
          *((_DWORD *)v46 + 102) = 0;
          goto LABEL_308;
        }
        return 0;
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
        uint64_t v219 = v211 + 1;
        v47[2] = (uint64_t)(v211 + 1);
        uint64_t v220 = *v211;
        BOOL v221 = (v220 - 33) & 1;
        *((_DWORD *)v47 + 42) = v221;
        int v222 = rep_min_0[v220 - 33];
        *((_DWORD *)v47 + 59) = v222;
        signed int v223 = rep_max_0[v220 - 33];
        if ((v220 - 39) < 0xFFFFFFFE) {
          signed int v223 = 0x7FFFFFFF;
        }
        *((_DWORD *)v47 + 58) = v223;
        goto LABEL_587;
      case 0x27u:
      case 0x28u:
        int v222 = 0;
        *((_DWORD *)v47 + 59) = 0;
        signed int v223 = __rev16(*(unsigned __int16 *)(v211 + 1));
        *((_DWORD *)v47 + 58) = v223;
        BOOL v221 = *v211 == 40;
        *((_DWORD *)v47 + 42) = v221;
        goto LABEL_586;
      case 0x29u:
        BOOL v221 = 0;
        signed int v223 = __rev16(*(unsigned __int16 *)(v211 + 1));
        *((_DWORD *)v47 + 58) = v223;
        *((_DWORD *)v47 + 59) = v223;
        int v222 = v223;
LABEL_586:
        uint64_t v219 = v211 + 3;
        v47[2] = (uint64_t)(v211 + 3);
LABEL_587:
        unint64_t v382 = *(void *)(a4 + 96);
        __int16 v383 = (unsigned __int8 *)v47[1];
        if ((uint64_t)(v382 - (void)v383) < v222) {
          goto LABEL_987;
        }
        v47[2] = (uint64_t)(v219 + 1);
        uint64_t v384 = *v219;
        *((_DWORD *)v47 + 55) = v384;
        if (v47[4])
        {
          uint64_t v392 = *(void *)(a4 + 32);
          int v393 = *(unsigned __int8 *)(v392 + v384);
          *((_DWORD *)v47 + 55) = v393;
          int v394 = *(_DWORD *)(a4 + 60);
          if (v394)
          {
            if (v222 >= 1)
            {
              int v395 = 1;
              uint64_t v103 = v383;
              while (1)
              {
                uint64_t v396 = v103++;
                v47[1] = (uint64_t)v103;
                int v397 = *v396;
                if ((~v397 & 0xC0) != 0) {
                  goto LABEL_608;
                }
                int v398 = utf8_table4[v397 & 0x3F];
                int v399 = 6 * v398;
                int v397 = (utf8_table3[utf8_table4[v397 & 0x3F]] & v397) << (6 * v398);
                unsigned int v400 = v398 + 1;
                int v401 = v399 - 6;
                do
                {
                  int v402 = v103++;
                  v47[1] = (uint64_t)v103;
                  a3 = (*v402 & 0x3F) << v401;
                  v397 |= a3;
                  --v400;
                  v401 -= 6;
                }
                while (v400 > 1);
                if (v397 <= 255) {
LABEL_608:
                }
                  int v397 = *(unsigned __int8 *)(v392 + v397);
                if (v397 == v393) {
                  goto LABEL_987;
                }
                BOOL v161 = v395++ == v222;
                if (v161) {
                  goto LABEL_625;
                }
              }
            }
            uint64_t v103 = v383;
          }
          else
          {
            int v404 = v222;
            uint64_t v103 = v383;
            if (v222 >= 1)
            {
              do
              {
                uint64_t v103 = v383 + 1;
                v47[1] = (uint64_t)(v383 + 1);
                if (v393 == *(unsigned __int8 *)(v392 + *v383)) {
                  goto LABEL_987;
                }
                ++v383;
              }
              while (--v404);
            }
          }
LABEL_625:
          if (v223 != v222)
          {
            if (v221)
            {
              *((_DWORD *)v47 + 56) = v222;
              int v14 = v773;
              if (v394)
              {
LABEL_131:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 34;
              }
              else
              {
LABEL_137:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 35;
              }
              goto LABEL_1348;
            }
            v47[11] = (uint64_t)v103;
            if (v394)
            {
              if (v223 <= v222)
              {
LABEL_1027:
                int v14 = v773;
LABEL_143:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 36;
                goto LABEL_1348;
              }
              while (2)
              {
                if ((unint64_t)v103 >= v382) {
                  goto LABEL_1027;
                }
                int v596 = *v103;
                if ((~v596 & 0xC0) != 0)
                {
                  unsigned int v602 = 1;
                }
                else
                {
                  unint64_t v597 = utf8_table4[v596 & 0x3F];
                  int v596 = (utf8_table3[v597] & v596) << (6 * v597);
                  v598 = (char *)(v103 + 1);
                  if (v597 <= 1) {
                    uint64_t v599 = 1;
                  }
                  else {
                    uint64_t v599 = v597;
                  }
                  int v600 = 6 * v597 - 6;
                  do
                  {
                    char v601 = *v598++;
                    v596 |= (v601 & 0x3F) << v600;
                    v600 -= 6;
                    --v599;
                  }
                  while (v599);
                  unsigned int v602 = v597 + 1;
                  if (v596 > 255)
                  {
LABEL_1025:
                    if (v596 == v393) {
                      goto LABEL_1027;
                    }
                    v103 += v602;
                    v47[1] = (uint64_t)v103;
                    if (++v222 == v223) {
                      goto LABEL_1027;
                    }
                    continue;
                  }
                }
                break;
              }
              int v596 = *(unsigned __int8 *)(v392 + v596);
              goto LABEL_1025;
            }
            BOOL v339 = __OFSUB__(v223, v222);
            int v652 = v223 - v222;
            int v14 = v773;
            if ((v652 < 0) ^ v339 | (v652 == 0)) {
              goto LABEL_1125;
            }
            uint64_t v653 = 0;
            unint64_t v102 = (unint64_t)v103;
            while ((unint64_t)&v103[v653] < v382)
            {
              if (v393 != *(unsigned __int8 *)(v392 + v103[v653]))
              {
                ++v102;
                v47[1] = (uint64_t)&v103[++v653];
                if (v652 != v653) {
                  continue;
                }
              }
              unint64_t v102 = (unint64_t)&v103[v653];
              break;
            }
LABEL_146:
            if (v102 >= (unint64_t)v103)
            {
LABEL_1125:
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 37;
              goto LABEL_1348;
            }
LABEL_987:
            unsigned int v210 = (uint64_t *)*v47;
LABEL_988:
            unsigned int v782 = v210;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
            uint64_t v172 = v782;
            if (!v782) {
              return 0;
            }
LABEL_989:
            uint64_t v12 = 0;
            *((_DWORD *)v172 + 102) = 0;
            goto LABEL_1359;
          }
        }
        else
        {
          int v385 = *(_DWORD *)(a4 + 60);
          if (v385)
          {
            if (v222 >= 1)
            {
              int v386 = 1;
              unsigned __int8 v118 = v383;
              while (1)
              {
                unsigned __int8 v387 = v118 + 1;
                v47[1] = (uint64_t)(v118 + 1);
                int v388 = *v118;
                if ((~v388 & 0xC0) != 0)
                {
                  ++v118;
                }
                else
                {
                  int v389 = utf8_table4[v388 & 0x3F];
                  int v388 = (utf8_table3[utf8_table4[v388 & 0x3F]] & v388) << (6 * v389);
                  unsigned int v390 = v389 + 1;
                  int v391 = 6 * v389 - 6;
                  do
                  {
                    unsigned __int8 v118 = v387 + 1;
                    v47[1] = (uint64_t)(v387 + 1);
                    v388 |= (*v387 & 0x3F) << v391;
                    --v390;
                    v391 -= 6;
                    ++v387;
                  }
                  while (v390 > 1);
                }
                if (v388 == v384) {
                  goto LABEL_987;
                }
                BOOL v161 = v386++ == v222;
                if (v161) {
                  goto LABEL_622;
                }
              }
            }
            unsigned __int8 v118 = v383;
          }
          else
          {
            int v403 = v222;
            unsigned __int8 v118 = v383;
            if (v222 >= 1)
            {
              do
              {
                unsigned __int8 v118 = v383 + 1;
                v47[1] = (uint64_t)(v383 + 1);
                if (v384 == *v383) {
                  goto LABEL_987;
                }
                ++v383;
              }
              while (--v403);
            }
          }
LABEL_622:
          if (v223 != v222)
          {
            if (v221)
            {
              *((_DWORD *)v47 + 56) = v222;
              int v14 = v773;
              if (v385)
              {
LABEL_318:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 38;
              }
              else
              {
LABEL_158:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 39;
              }
              goto LABEL_1348;
            }
            v47[11] = (uint64_t)v118;
            if (v385)
            {
              if (v223 > v222)
              {
                do
                {
                  if ((unint64_t)v118 >= v382) {
                    break;
                  }
                  int v589 = *v118;
                  if ((~v589 & 0xC0) != 0)
                  {
                    unsigned int v595 = 1;
                  }
                  else
                  {
                    unint64_t v590 = utf8_table4[v589 & 0x3F];
                    int v589 = (utf8_table3[v590] & v589) << (6 * v590);
                    v591 = (char *)(v118 + 1);
                    uint64_t v592 = v590 <= 1 ? 1 : v590;
                    int v593 = 6 * v590 - 6;
                    do
                    {
                      char v594 = *v591++;
                      v589 |= (v594 & 0x3F) << v593;
                      v593 -= 6;
                      --v592;
                    }
                    while (v592);
                    unsigned int v595 = v590 + 1;
                  }
                  if (v589 == v384) {
                    break;
                  }
                  v118 += v595;
                  v47[1] = (uint64_t)v118;
                  ++v222;
                }
                while (v222 != v223);
              }
              int v14 = v773;
LABEL_164:
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 40;
              goto LABEL_1348;
            }
            BOOL v339 = __OFSUB__(v223, v222);
            int v650 = v223 - v222;
            int v14 = v773;
            if ((v650 < 0) ^ v339 | (v650 == 0)) {
              goto LABEL_1118;
            }
            uint64_t v651 = 0;
            unint64_t v117 = (unint64_t)v118;
            while ((unint64_t)&v118[v651] < v382)
            {
              if (v384 != v118[v651])
              {
                ++v117;
                v47[1] = (uint64_t)&v118[++v651];
                if (v650 != v651) {
                  continue;
                }
              }
              unint64_t v117 = (unint64_t)&v118[v651];
              break;
            }
LABEL_167:
            if (v117 >= (unint64_t)v118)
            {
LABEL_1118:
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 41;
              goto LABEL_1348;
            }
            goto LABEL_987;
          }
        }
        goto LABEL_377;
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
        uint64_t v224 = v211 + 1;
        v47[2] = (uint64_t)(v211 + 1);
        uint64_t v225 = *v211;
        *((_DWORD *)v47 + 42) = v225 & 1;
        int v226 = rep_min_0[v225 - 42];
        *((_DWORD *)v47 + 59) = v226;
        if ((v225 - 48) >= 0xFFFFFFFE) {
          int v227 = rep_max_0[v225 - 42];
        }
        else {
          int v227 = 0x7FFFFFFF;
        }
        *((_DWORD *)v47 + 58) = v227;
        goto LABEL_629;
      case 0x30u:
      case 0x31u:
        int v226 = 0;
        *((_DWORD *)v47 + 59) = 0;
        *((_DWORD *)v47 + 58) = __rev16(*(unsigned __int16 *)(v211 + 1));
        BOOL v259 = *v211 == 49;
        goto LABEL_628;
      case 0x32u:
        int v226 = __rev16(*(unsigned __int16 *)(v211 + 1));
        *((_DWORD *)v47 + 58) = v226;
        *((_DWORD *)v47 + 59) = v226;
        BOOL v259 = 1;
LABEL_628:
        *((_DWORD *)v47 + 42) = v259;
        uint64_t v224 = v211 + 3;
        v47[2] = (uint64_t)(v211 + 3);
LABEL_629:
        v47[2] = (uint64_t)(v224 + 1);
        int v405 = *v224;
        *((_DWORD *)v47 + 54) = v405;
        if ((v405 - 13) > 1)
        {
          int v407 = -1;
          *((_DWORD *)v47 + 46) = -1;
        }
        else
        {
          *((_DWORD *)v47 + 47) = v405 == 13;
          v47[2] = (uint64_t)(v224 + 2);
          int v406 = (char)v224[1];
          int v407 = v406;
          *((_DWORD *)v47 + 46) = v406;
          if (v406 < 0)
          {
            *((_DWORD *)v47 + 51) = v406 - 128;
            unint64_t v408 = v47 + 24;
          }
          else
          {
            *((_DWORD *)v47 + 51) = v406;
            unint64_t v408 = (uint64_t *)((char *)v47 + 196);
          }
          v47[26] = (uint64_t)v408;
        }
        unsigned int v409 = *(unsigned char **)(a4 + 96);
        unint64_t v410 = (unsigned char *)v47[1];
        if (v409 - v410 < v226) {
          goto LABEL_987;
        }
        int v411 = v226;
        if (v226 <= 0) {
          goto LABEL_935;
        }
        if (v407 >= 1)
        {
          int v412 = 1;
          while (1)
          {
            unsigned int v413 = (unsigned __int8 *)v47[1];
            v47[1] = (uint64_t)(v413 + 1);
            int v414 = *v413;
            if ((~v414 & 0xC0) == 0)
            {
              int v415 = utf8_table4[v414 & 0x3F];
              int v414 = (utf8_table3[utf8_table4[v414 & 0x3F]] & v414) << (6 * v415);
              int v416 = v413 + 2;
              int v417 = 6 * v415 - 6;
              unsigned int v418 = v415 + 1;
              do
              {
                v47[1] = (uint64_t)v416;
                v414 |= (*(v416++ - 1) & 0x3F) << v417;
                v417 -= 6;
                --v418;
              }
              while (v418 > 1);
            }
            int v419 = ucp_findchar(v414, (int *)v47 + 49, (unsigned int *)v47 + 50);
            int v47 = v782;
            *((_DWORD *)v782 + 48) = v419;
            if (*((_DWORD *)v47 + 47) == (*(_DWORD *)v47[26] == *((_DWORD *)v47 + 51))) {
              goto LABEL_987;
            }
            int v411 = *((_DWORD *)v47 + 59);
            BOOL v420 = v412++ < v411;
            if (!v420) {
              goto LABEL_935;
            }
          }
        }
        if (v405 == 15)
        {
          int v421 = 1;
          while (1)
          {
            int v422 = (unsigned __int8 *)v47[1];
            v47[1] = (uint64_t)(v422 + 1);
            int v423 = *v422;
            if (*(_DWORD *)(a4 + 60) && (v423 & 0xC0) == 0xC0)
            {
              int v424 = utf8_table4[v423 & 0x3F];
              int v423 = (utf8_table3[utf8_table4[v423 & 0x3F]] & v423) << (6 * v424);
              int v425 = v422 + 2;
              int v426 = 6 * v424 - 6;
              unsigned int v427 = v424 + 1;
              do
              {
                v47[1] = (uint64_t)v425;
                v423 |= (*(v425++ - 1) & 0x3F) << v426;
                v426 -= 6;
                --v427;
              }
              while (v427 > 1);
            }
            int v428 = ucp_findchar(v423, (int *)v47 + 49, (unsigned int *)v47 + 50);
            int v47 = v782;
            *((_DWORD *)v782 + 48) = v428;
            if (v428 == 2) {
              goto LABEL_987;
            }
            for (uint64_t k = (unsigned __int8 *)v47[1]; (unint64_t)k < *(void *)(a4 + 96); v47[1] = (uint64_t)k)
            {
              int v430 = *k;
              unsigned int v431 = 1;
              if (*(_DWORD *)(a4 + 60) && (v430 & 0xC0) == 0xC0)
              {
                unint64_t v432 = utf8_table4[v430 & 0x3F];
                int v430 = (utf8_table3[v432] & v430) << (6 * v432);
                int v433 = (char *)(k + 1);
                if (v432 <= 1) {
                  uint64_t v434 = 1;
                }
                else {
                  uint64_t v434 = v432;
                }
                int v435 = 6 * v432 - 6;
                do
                {
                  char v436 = *v433++;
                  v430 |= (v436 & 0x3F) << v435;
                  v435 -= 6;
                  --v434;
                }
                while (v434);
                unsigned int v431 = v432 + 1;
              }
              int v437 = ucp_findchar(v430, (int *)v47 + 49, (unsigned int *)v47 + 50);
              int v47 = v782;
              *((_DWORD *)v782 + 48) = v437;
              if (v437 != 2) {
                break;
              }
              uint64_t k = (unsigned __int8 *)(v47[1] + v431);
            }
            int v411 = *((_DWORD *)v47 + 59);
            BOOL v420 = v421++ < v411;
            if (!v420) {
              goto LABEL_935;
            }
          }
        }
        if (*(_DWORD *)(a4 + 60))
        {
          switch(v405)
          {
            case 5:
              int v438 = 1;
              while (v410 < v409)
              {
                int v439 = v410 + 1;
                v47[1] = (uint64_t)(v410 + 1);
                int v440 = *v410;
                if ((~v440 & 0xC0) != 0)
                {
                  ++v410;
                }
                else
                {
                  int v441 = utf8_table4[v440 & 0x3F];
                  int v440 = (utf8_table3[utf8_table4[v440 & 0x3F]] & v440) << (6 * v441);
                  int v442 = 6 * v441 - 6;
                  unsigned int v443 = v441 + 1;
                  do
                  {
                    unint64_t v410 = v439 + 1;
                    v47[1] = (uint64_t)(v439 + 1);
                    v440 |= (*v439 & 0x3F) << v442;
                    v442 -= 6;
                    --v443;
                    ++v439;
                  }
                  while (v443 > 1);
                }
                if (v440 <= 127 && (*(unsigned char *)(*(void *)(a4 + 40) + v440) & 4) != 0) {
                  break;
                }
                BOOL v161 = v438++ == v226;
                if (v161) {
                  goto LABEL_935;
                }
              }
              goto LABEL_987;
            case 6:
              while (v410 < v409)
              {
                if ((char)*v410 < 0) {
                  break;
                }
                uint64_t v487 = *(void *)(a4 + 40);
                v47[1] = (uint64_t)(v410 + 1);
                if ((*(unsigned char *)(v487 + *v410) & 4) == 0) {
                  break;
                }
                ++v410;
                if (!--v226) {
                  goto LABEL_935;
                }
              }
              goto LABEL_987;
            case 7:
              int v546 = 1;
              while (v410 < v409)
              {
                if (((char)*v410 & 0x80000000) == 0)
                {
                  uint64_t v547 = *(void *)(a4 + 40);
                  v47[1] = (uint64_t)(v410 + 1);
                  LOBYTE(v547) = *(unsigned char *)(v547 + *v410++);
                  if (v547) {
                    break;
                  }
                }
                if (v410 < v409)
                {
                  uint64_t v548 = v409 - v410;
                  while ((*v410 & 0xC0) == 0x80)
                  {
                    v47[1] = (uint64_t)++v410;
                    if (!--v548)
                    {
                      unint64_t v410 = v409;
                      break;
                    }
                  }
                }
                BOOL v161 = v546++ == v226;
                if (v161) {
                  goto LABEL_935;
                }
              }
              goto LABEL_987;
            case 8:
              while (v410 < v409)
              {
                if ((char)*v410 < 0) {
                  break;
                }
                uint64_t v488 = *(void *)(a4 + 40);
                v47[1] = (uint64_t)(v410 + 1);
                if ((*(unsigned char *)(v488 + *v410) & 1) == 0) {
                  break;
                }
                ++v410;
                if (!--v226) {
                  goto LABEL_935;
                }
              }
              goto LABEL_987;
            case 9:
              int v549 = 1;
              while (v410 < v409)
              {
                if (((char)*v410 & 0x80000000) == 0)
                {
                  uint64_t v550 = *(void *)(a4 + 40);
                  v47[1] = (uint64_t)(v410 + 1);
                  LOBYTE(v550) = *(unsigned char *)(v550 + *v410++);
                  if ((v550 & 0x10) != 0) {
                    break;
                  }
                }
                if (v410 < v409)
                {
                  uint64_t v551 = v409 - v410;
                  while ((*v410 & 0xC0) == 0x80)
                  {
                    v47[1] = (uint64_t)++v410;
                    if (!--v551)
                    {
                      unint64_t v410 = v409;
                      break;
                    }
                  }
                }
                BOOL v161 = v549++ == v226;
                if (v161) {
                  goto LABEL_935;
                }
              }
              goto LABEL_987;
            case 10:
              uint64_t v552 = 0;
              while (1)
              {
                int v553 = &v410[v552];
                if (&v410[v552] >= v409) {
                  goto LABEL_987;
                }
                if ((char)*v553 < 0) {
                  goto LABEL_987;
                }
                uint64_t v554 = *(void *)(a4 + 40);
                v47[1] = (uint64_t)(v553 + 1);
                if ((*(unsigned char *)(v554 + *v553) & 0x10) == 0) {
                  goto LABEL_987;
                }
                if (v411 == ++v552) {
                  goto LABEL_935;
                }
              }
            case 11:
              int v555 = 1;
              break;
            case 12:
              goto LABEL_934;
            default:
              goto LABEL_1199;
          }
          while (v410 < v409)
          {
            v556 = v410 + 1;
            v47[1] = (uint64_t)(v410 + 1);
            if (*v410 == 10 && (v47[4] & 4) == 0) {
              break;
            }
            if (v556 < v409)
            {
              uint64_t v557 = v409 - v556;
              while ((*v556 & 0xC0) == 0x80)
              {
                v47[1] = (uint64_t)++v556;
                if (!--v557)
                {
                  v556 = v409;
                  break;
                }
              }
            }
            unint64_t v410 = v556;
            BOOL v161 = v555++ == v226;
            if (v161) {
              goto LABEL_935;
            }
          }
          goto LABEL_987;
        }
        switch(v405)
        {
          case 5:
            uint64_t v510 = *(void *)(a4 + 40);
            v511 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v511;
              if ((*(unsigned char *)(v510 + *(v511 - 1)) & 4) != 0) {
                goto LABEL_987;
              }
              ++v511;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 6:
            uint64_t v558 = *(void *)(a4 + 40);
            int v559 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v559;
              if ((*(unsigned char *)(v558 + *(v559 - 1)) & 4) == 0) {
                goto LABEL_987;
              }
              ++v559;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 7:
            uint64_t v560 = *(void *)(a4 + 40);
            int v561 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v561;
              if (*(unsigned char *)(v560 + *(v561 - 1))) {
                goto LABEL_987;
              }
              ++v561;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 8:
            uint64_t v562 = *(void *)(a4 + 40);
            int v563 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v563;
              if ((*(unsigned char *)(v562 + *(v563 - 1)) & 1) == 0) {
                goto LABEL_987;
              }
              ++v563;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 9:
            uint64_t v564 = *(void *)(a4 + 40);
            v565 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v565;
              if ((*(unsigned char *)(v564 + *(v565 - 1)) & 0x10) != 0) {
                goto LABEL_987;
              }
              ++v565;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 10:
            uint64_t v566 = *(void *)(a4 + 40);
            v567 = v410 + 1;
            while (1)
            {
              v47[1] = (uint64_t)v567;
              if ((*(unsigned char *)(v566 + *(v567 - 1)) & 0x10) == 0) {
                goto LABEL_987;
              }
              ++v567;
              if (!--v226) {
                goto LABEL_935;
              }
            }
          case 11:
            if ((v47[4] & 4) != 0) {
              goto LABEL_934;
            }
            int v568 = v410 + 1;
            break;
          case 12:
LABEL_934:
            v47[1] = (uint64_t)&v410[v226];
            goto LABEL_935;
          default:
LABEL_1199:
            unsigned int v782 = (uint64_t *)*v47;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
            v685 = v782;
            uint64_t v12 = 4294967282;
            if (!v782) {
              return v12;
            }
            *((_DWORD *)v782 + 102) = -14;
            int v14 = v773;
            *uint64_t v773 = v685;
            goto LABEL_1360;
        }
        do
        {
          v47[1] = (uint64_t)v568;
          if (*(v568 - 1) == 10) {
            goto LABEL_987;
          }
          ++v568;
          --v226;
        }
        while (v226);
LABEL_935:
        int v569 = *((_DWORD *)v47 + 58);
        int v570 = v569 - v411;
        if (v569 == v411) {
          goto LABEL_377;
        }
        if (*((_DWORD *)v47 + 42))
        {
          if (*((int *)v47 + 46) < 1)
          {
            if (*((_DWORD *)v47 + 54) == 15)
            {
              *((_DWORD *)v47 + 56) = v411;
              int v14 = v773;
LABEL_334:
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 43;
            }
            else
            {
              int v635 = *(_DWORD *)(a4 + 60);
              *((_DWORD *)v47 + 56) = v411;
              int v14 = v773;
              if (v635)
              {
LABEL_362:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 44;
              }
              else
              {
LABEL_376:
                *(void *)&long long v778 = 0;
                uint64_t v60 = a1;
                char v61 = 45;
              }
            }
          }
          else
          {
            *((_DWORD *)v47 + 56) = v411;
            int v14 = v773;
LABEL_177:
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 42;
          }
          goto LABEL_1348;
        }
        int v192 = (unsigned char *)v47[1];
        v47[11] = (uint64_t)v192;
        if (*((int *)v47 + 46) >= 1)
        {
          if (v569 <= v411)
          {
            int v14 = v773;
          }
          else
          {
            int v14 = v773;
            while ((unint64_t)v192 < *(void *)(a4 + 96))
            {
              int v577 = *v192;
              uint64_t v578 = v9;
              if ((~v577 & 0xC0) != 0)
              {
                unsigned int v584 = 1;
              }
              else
              {
                unint64_t v579 = utf8_table4[v577 & 0x3F];
                int v577 = (utf8_table3[v579] & v577) << (6 * v579);
                uint64_t v580 = v192 + 1;
                if (v579 <= 1) {
                  uint64_t v581 = 1;
                }
                else {
                  uint64_t v581 = v579;
                }
                int v582 = 6 * v579 - 6;
                do
                {
                  char v583 = *v580++;
                  v577 |= (v583 & 0x3F) << v582;
                  v582 -= 6;
                  --v581;
                }
                while (v581);
                unsigned int v584 = v579 + 1;
              }
              int v585 = ucp_findchar(v577, (int *)v47 + 49, (unsigned int *)v47 + 50);
              int v47 = v782;
              *((_DWORD *)v782 + 48) = v585;
              if (*((_DWORD *)v47 + 47) == (*(_DWORD *)v47[26] == *((_DWORD *)v47 + 51)))
              {
                uint64_t v9 = v578;
                break;
              }
              int v192 = (unsigned char *)(v47[1] + v584);
              v47[1] = (uint64_t)v192;
              ++v411;
              uint64_t v9 = v578;
              if (v411 >= *((_DWORD *)v47 + 58)) {
                break;
              }
            }
          }
LABEL_219:
          *(void *)&long long v778 = 0;
          uint64_t v60 = a1;
          char v61 = 46;
          goto LABEL_1348;
        }
        int v613 = *((_DWORD *)v47 + 54);
        if (v613 == 15)
        {
          int v14 = v773;
          if (v569 > v411)
          {
            do
            {
              unint64_t v614 = (unsigned __int8 *)v47[1];
              if ((unint64_t)v614 >= *(void *)(a4 + 96)) {
                break;
              }
              v47[1] = (uint64_t)(v614 + 1);
              int v615 = *v614;
              if (*(_DWORD *)(a4 + 60) && (v615 & 0xC0) == 0xC0)
              {
                int v616 = utf8_table4[v615 & 0x3F];
                int v615 = (utf8_table3[utf8_table4[v615 & 0x3F]] & v615) << (6 * v616);
                uint64_t v617 = v614 + 2;
                int v618 = 6 * v616 - 6;
                unsigned int v619 = v616 + 1;
                do
                {
                  v47[1] = (uint64_t)v617;
                  v615 |= (*(v617++ - 1) & 0x3F) << v618;
                  v618 -= 6;
                  --v619;
                }
                while (v619 > 1);
              }
              int v620 = ucp_findchar(v615, (int *)v47 + 49, (unsigned int *)v47 + 50);
              int v47 = v782;
              *((_DWORD *)v782 + 48) = v620;
              if (v620 == 2) {
                break;
              }
              uint64_t v621 = v9;
              for (unsigned int m = (unsigned __int8 *)v47[1]; (unint64_t)m < *(void *)(a4 + 96); v47[1] = (uint64_t)m)
              {
                int v623 = *m;
                unsigned int v624 = 1;
                if (*(_DWORD *)(a4 + 60) && (v623 & 0xC0) == 0xC0)
                {
                  unint64_t v625 = utf8_table4[v623 & 0x3F];
                  int v623 = (utf8_table3[v625] & v623) << (6 * v625);
                  unint64_t v626 = (char *)(m + 1);
                  if (v625 <= 1) {
                    uint64_t v627 = 1;
                  }
                  else {
                    uint64_t v627 = v625;
                  }
                  int v628 = 6 * v625 - 6;
                  do
                  {
                    char v629 = *v626++;
                    v623 |= (v629 & 0x3F) << v628;
                    v628 -= 6;
                    --v627;
                  }
                  while (v627);
                  unsigned int v624 = v625 + 1;
                }
                int v630 = ucp_findchar(v623, (int *)v47 + 49, (unsigned int *)v47 + 50);
                int v47 = v782;
                *((_DWORD *)v782 + 48) = v630;
                if (v630 != 2) {
                  break;
                }
                unsigned int m = (unsigned __int8 *)(v47[1] + v624);
              }
              ++v411;
              uint64_t v9 = v621;
            }
            while (v411 < *((_DWORD *)v47 + 58));
          }
LABEL_1073:
          *(void *)&long long v778 = 0;
          uint64_t v60 = a1;
          char v61 = 47;
          goto LABEL_1348;
        }
        if (!*(_DWORD *)(a4 + 60))
        {
          switch(v613)
          {
            case 5:
              int v686 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v688 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v688) {
                  goto LABEL_1366;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v689) & 4) != 0) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v686 == v687) {
                  goto LABEL_1345;
                }
              }
            case 6:
              int v739 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v740 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v740) {
                  goto LABEL_1366;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v689) & 4) == 0) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v739 == v687) {
                  goto LABEL_1345;
                }
              }
            case 7:
              int v741 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v742 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v742) {
                  goto LABEL_1366;
                }
                if (*(unsigned char *)(*(void *)(a4 + 40) + *v689)) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v741 == v687) {
                  goto LABEL_1345;
                }
              }
            case 8:
              int v743 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v744 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v744) {
                  goto LABEL_1366;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v689) & 1) == 0) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v743 == v687) {
                  goto LABEL_1345;
                }
              }
            case 9:
              int v745 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v746 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v746) {
                  goto LABEL_1366;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v689) & 0x10) != 0) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v745 == v687) {
                  goto LABEL_1345;
                }
              }
            case 10:
              int v747 = v569 - v411;
              if (v569 <= v411) {
                goto LABEL_1346;
              }
              uint64_t v687 = 0;
              unint64_t v748 = *(void *)(a4 + 96);
              unint64_t v171 = (unint64_t)v192;
              while (1)
              {
                int v689 = &v192[v687];
                if ((unint64_t)&v192[v687] >= v748) {
                  goto LABEL_1366;
                }
                if ((*(unsigned char *)(*(void *)(a4 + 40) + *v689) & 0x10) == 0) {
                  goto LABEL_1367;
                }
                ++v171;
                v47[1] = (uint64_t)&v192[++v687];
                if (v747 == v687) {
                  goto LABEL_1345;
                }
              }
            case 11:
              if ((v47[4] & 4) != 0) {
                goto LABEL_1363;
              }
              int v749 = v569 - v411;
              if (v569 <= v411)
              {
LABEL_1346:
                int v14 = v773;
              }
              else
              {
                uint64_t v687 = 0;
                unint64_t v750 = *(void *)(a4 + 96);
                unint64_t v171 = (unint64_t)v192;
                while (1)
                {
                  int v689 = &v192[v687];
                  if ((unint64_t)&v192[v687] >= v750) {
                    break;
                  }
                  if (*v689 == 10) {
                    goto LABEL_1367;
                  }
                  ++v171;
                  v47[1] = (uint64_t)&v192[++v687];
                  if (v749 == v687)
                  {
LABEL_1345:
                    unint64_t v171 = (unint64_t)&v192[v687];
                    goto LABEL_1367;
                  }
                }
LABEL_1366:
                unint64_t v171 = (unint64_t)v689;
LABEL_1367:
                int v14 = v773;
LABEL_270:
                if (v171 < (unint64_t)v192) {
                  goto LABEL_987;
                }
              }
              *(void *)&long long v778 = 0;
              uint64_t v60 = a1;
              char v61 = 49;
              goto LABEL_1348;
            case 12:
LABEL_1363:
              uint64_t v754 = *(void *)(a4 + 96) - (void)v192;
              if (v754 >= v570) {
                LODWORD(v754) = v570;
              }
              unint64_t v171 = (unint64_t)&v192[(int)v754];
              v47[1] = v171;
              goto LABEL_1367;
            default:
              unsigned int v782 = (uint64_t *)*v47;
              pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
              uint64_t v172 = v782;
              uint64_t v12 = 4294967282;
              if (!v782) {
                return v12;
              }
              *((_DWORD *)v782 + 102) = -14;
              goto LABEL_958;
          }
        }
        switch(v613)
        {
          case 5:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v654 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v654) {
                goto LABEL_1383;
              }
              int v655 = *v192;
              if ((~v655 & 0xC0) != 0)
              {
                unsigned int v661 = 1;
              }
              else
              {
                unint64_t v656 = utf8_table4[v655 & 0x3F];
                int v655 = (utf8_table3[v656] & v655) << (6 * v656);
                v657 = v192 + 1;
                if (v656 <= 1) {
                  uint64_t v658 = 1;
                }
                else {
                  uint64_t v658 = v656;
                }
                int v659 = 6 * v656 - 6;
                do
                {
                  char v660 = *v657++;
                  v655 |= (v660 & 0x3F) << v659;
                  v659 -= 6;
                  --v658;
                }
                while (v658);
                unsigned int v661 = v656 + 1;
                if (v655 > 255) {
                  goto LABEL_1141;
                }
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v655) & 4) != 0) {
                goto LABEL_1383;
              }
LABEL_1141:
              v192 += v661;
              v47[1] = (uint64_t)v192;
              if (++v411 == v569) {
                goto LABEL_1383;
              }
              continue;
            }
          case 6:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v694 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v694) {
                goto LABEL_1383;
              }
              int v695 = *v192;
              if ((~v695 & 0xC0) != 0)
              {
                unsigned int v701 = 1;
                goto LABEL_1233;
              }
              unint64_t v696 = utf8_table4[v695 & 0x3F];
              int v695 = (utf8_table3[v696] & v695) << (6 * v696);
              uint64_t v697 = v192 + 1;
              if (v696 <= 1) {
                uint64_t v698 = 1;
              }
              else {
                uint64_t v698 = v696;
              }
              int v699 = 6 * v696 - 6;
              do
              {
                char v700 = *v697++;
                v695 |= (v700 & 0x3F) << v699;
                v699 -= 6;
                --v698;
              }
              while (v698);
              if (v695 <= 255)
              {
                unsigned int v701 = v696 + 1;
LABEL_1233:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v695) & 4) == 0) {
                  goto LABEL_1383;
                }
                v192 += v701;
                v47[1] = (uint64_t)v192;
                if (++v411 == v569) {
                  goto LABEL_1383;
                }
                continue;
              }
              goto LABEL_1383;
            }
          case 7:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v702 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v702) {
                goto LABEL_1383;
              }
              int v703 = *v192;
              if ((~v703 & 0xC0) != 0)
              {
                unsigned int v709 = 1;
              }
              else
              {
                unint64_t v704 = utf8_table4[v703 & 0x3F];
                int v703 = (utf8_table3[v704] & v703) << (6 * v704);
                uint64_t v705 = v192 + 1;
                if (v704 <= 1) {
                  uint64_t v706 = 1;
                }
                else {
                  uint64_t v706 = v704;
                }
                int v707 = 6 * v704 - 6;
                do
                {
                  char v708 = *v705++;
                  v703 |= (v708 & 0x3F) << v707;
                  v707 -= 6;
                  --v706;
                }
                while (v706);
                unsigned int v709 = v704 + 1;
                if (v703 > 255) {
                  goto LABEL_1249;
                }
              }
              if (*(unsigned char *)(*(void *)(a4 + 40) + v703)) {
                goto LABEL_1383;
              }
LABEL_1249:
              v192 += v709;
              v47[1] = (uint64_t)v192;
              if (++v411 == v569) {
                goto LABEL_1383;
              }
              continue;
            }
          case 8:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v710 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v710) {
                goto LABEL_1383;
              }
              int v711 = *v192;
              if ((~v711 & 0xC0) != 0)
              {
                unsigned int v717 = 1;
                goto LABEL_1263;
              }
              unint64_t v712 = utf8_table4[v711 & 0x3F];
              int v711 = (utf8_table3[v712] & v711) << (6 * v712);
              uint64_t v713 = v192 + 1;
              if (v712 <= 1) {
                uint64_t v714 = 1;
              }
              else {
                uint64_t v714 = v712;
              }
              int v715 = 6 * v712 - 6;
              do
              {
                char v716 = *v713++;
                v711 |= (v716 & 0x3F) << v715;
                v715 -= 6;
                --v714;
              }
              while (v714);
              if (v711 <= 255)
              {
                unsigned int v717 = v712 + 1;
LABEL_1263:
                if ((*(unsigned char *)(*(void *)(a4 + 40) + v711) & 1) == 0) {
                  goto LABEL_1383;
                }
                v192 += v717;
                v47[1] = (uint64_t)v192;
                if (++v411 == v569) {
                  goto LABEL_1383;
                }
                continue;
              }
              goto LABEL_1383;
            }
          case 9:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v718 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v718) {
                goto LABEL_1383;
              }
              int v719 = *v192;
              if ((~v719 & 0xC0) != 0)
              {
                unsigned int v725 = 1;
              }
              else
              {
                unint64_t v720 = utf8_table4[v719 & 0x3F];
                int v719 = (utf8_table3[v720] & v719) << (6 * v720);
                unsigned int v721 = v192 + 1;
                if (v720 <= 1) {
                  uint64_t v722 = 1;
                }
                else {
                  uint64_t v722 = v720;
                }
                int v723 = 6 * v720 - 6;
                do
                {
                  char v724 = *v721++;
                  v719 |= (v724 & 0x3F) << v723;
                  v723 -= 6;
                  --v722;
                }
                while (v722);
                unsigned int v725 = v720 + 1;
                if (v719 > 255) {
                  goto LABEL_1279;
                }
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v719) & 0x10) != 0) {
                goto LABEL_1383;
              }
LABEL_1279:
              v192 += v725;
              v47[1] = (uint64_t)v192;
              if (++v411 == v569) {
                goto LABEL_1383;
              }
              continue;
            }
          case 10:
            if (v569 <= v411) {
              goto LABEL_1383;
            }
            unint64_t v726 = *(void *)(a4 + 96);
            while (2)
            {
              if ((unint64_t)v192 >= v726) {
                goto LABEL_1383;
              }
              int v727 = *v192;
              if ((~v727 & 0xC0) != 0)
              {
                unsigned int v733 = 1;
              }
              else
              {
                unint64_t v728 = utf8_table4[v727 & 0x3F];
                int v727 = (utf8_table3[v728] & v727) << (6 * v728);
                unsigned int v729 = v192 + 1;
                if (v728 <= 1) {
                  uint64_t v730 = 1;
                }
                else {
                  uint64_t v730 = v728;
                }
                int v731 = 6 * v728 - 6;
                do
                {
                  char v732 = *v729++;
                  v727 |= (v732 & 0x3F) << v731;
                  v731 -= 6;
                  --v730;
                }
                while (v730);
                if (v727 > 255)
                {
LABEL_1383:
                  int v14 = v773;
LABEL_241:
                  *(void *)&long long v778 = 0;
                  uint64_t v60 = a1;
                  char v61 = 48;
                  goto LABEL_1348;
                }
                unsigned int v733 = v728 + 1;
              }
              if ((*(unsigned char *)(*(void *)(a4 + 40) + v727) & 0x10) == 0) {
                goto LABEL_1383;
              }
              v192 += v733;
              v47[1] = (uint64_t)v192;
              if (++v411 == v569) {
                goto LABEL_1383;
              }
              continue;
            }
          case 11:
            uint64_t v734 = v47[4];
            if (v569 == 0x7FFFFFFF)
            {
              if ((v734 & 4) != 0)
              {
                uint64_t v738 = v411 ^ 0x7FFFFFFFu;
                if (*(void *)(a4 + 96) - (void)v192 < v738) {
                  LODWORD(v738) = *(_DWORD *)(a4 + 96) - v192;
                }
LABEL_1382:
                v47[1] = (uint64_t)&v192[(int)v738];
              }
              else if (v411 != 0x7FFFFFFF)
              {
                unint64_t v735 = *(void *)(a4 + 96);
                int v736 = v411 - 0x7FFFFFFF;
                do
                {
                  if ((unint64_t)v192 >= v735) {
                    break;
                  }
                  if (*v192 == 10) {
                    break;
                  }
                  v47[1] = (uint64_t)++v192;
                }
                while (!__CFADD__(v736++, 1));
              }
            }
            else
            {
              if ((v734 & 4) != 0)
              {
                if (v569 <= v411) {
                  goto LABEL_1383;
                }
                unint64_t v757 = *(void *)(a4 + 96);
                while (1)
                {
                  int v758 = v192 + 1;
                  v47[1] = (uint64_t)(v192 + 1);
                  if ((unint64_t)(v192 + 1) < v757)
                  {
                    unint64_t v759 = v757 - 1 - (void)v192;
                    do
                    {
                      if ((*v758 & 0xC0) != 0x80) {
                        goto LABEL_1391;
                      }
                      v47[1] = (uint64_t)++v758;
                      --v759;
                    }
                    while (v759);
                    int v758 = (unsigned char *)v757;
                  }
LABEL_1391:
                  ++v411;
                  int v192 = v758;
                  if (v411 == v569) {
                    goto LABEL_1383;
                  }
                }
              }
              if (v569 <= v411) {
                goto LABEL_1383;
              }
              int v755 = *(unsigned char **)(a4 + 96);
              while (v192 < v755 && *v192 != 10)
              {
                v47[1] = (uint64_t)++v192;
                if (v192 < v755)
                {
                  uint64_t v756 = v755 - v192;
                  while ((*v192 & 0xC0) == 0x80)
                  {
                    v47[1] = (uint64_t)++v192;
                    if (!--v756)
                    {
                      int v192 = v755;
                      break;
                    }
                  }
                }
                if (++v411 == v569) {
                  goto LABEL_1383;
                }
              }
            }
            goto LABEL_1383;
          case 12:
            uint64_t v738 = *(void *)(a4 + 96) - (void)v192;
            if (v738 >= v570) {
              LODWORD(v738) = v570;
            }
            goto LABEL_1382;
          default:
            goto LABEL_1199;
        }
      case 0x3Bu:
      case 0x3Cu:
        uint64_t v260 = v211 + 1;
        v47[9] = (uint64_t)(v211 + 1);
        v47[2] = (uint64_t)(v211 + 33);
        int v261 = v211[33];
        if ((v261 - 51) >= 6)
        {
          if ((v261 - 57) >= 2)
          {
            BOOL v263 = 0;
            v47[29] = 0x100000001;
            signed int v265 = 1;
            int v264 = 1;
            if (*(_DWORD *)(a4 + 60))
            {
LABEL_723:
              unint64_t v472 = *(void *)(a4 + 96);
              v473 = (unsigned __int8 *)v47[1];
              int v474 = 1;
              while ((unint64_t)v473 < v472)
              {
                int v475 = v473 + 1;
                v47[1] = (uint64_t)(v473 + 1);
                int v476 = *v473;
                if ((~v476 & 0xC0) != 0) {
                  goto LABEL_731;
                }
                int v477 = utf8_table4[v476 & 0x3F];
                int v478 = 6 * v477;
                int v476 = (utf8_table3[utf8_table4[v476 & 0x3F]] & v476) << (6 * v477);
                unsigned int v479 = v477 + 1;
                int v480 = v478 - 6;
                do
                {
                  unsigned int v481 = v475++;
                  v47[1] = (uint64_t)v475;
                  v476 |= (*v481 & 0x3F) << v480;
                  --v479;
                  v480 -= 6;
                }
                while (v479 > 1);
                if (v476 < 256)
                {
LABEL_731:
                  if (((v260[v476 / 8] >> (v476 & 7)) & 1) == 0) {
                    goto LABEL_987;
                  }
                }
                else if (v212 == 59)
                {
                  goto LABEL_987;
                }
                v473 = v475;
                BOOL v161 = v474++ == v264;
                if (v161) {
                  goto LABEL_734;
                }
              }
            }
            else
            {
LABEL_736:
              uint64_t v483 = 0;
              unint64_t v484 = *(void *)(a4 + 96);
              uint64_t v485 = v47[1];
              while (1)
              {
                v486 = (unsigned char *)(v485 + v483);
                if (v485 + v483 >= v484) {
                  break;
                }
                v47[1] = (uint64_t)(v486 + 1);
                if (((v260[(unint64_t)*v486 >> 3] >> (*v486 & 7)) & 1) == 0) {
                  break;
                }
                if (v264 == ++v483) {
                  goto LABEL_740;
                }
              }
            }
            goto LABEL_987;
          }
          BOOL v263 = v261 == 58;
          *((_DWORD *)v47 + 42) = v263;
          int v264 = __rev16(*((unsigned __int16 *)v211 + 17));
          *((_DWORD *)v47 + 59) = v264;
          signed int v265 = __rev16(*((unsigned __int16 *)v211 + 18));
          if (!v265) {
            signed int v265 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v265;
          v47[2] = (uint64_t)(v211 + 38);
        }
        else
        {
          v47[2] = (uint64_t)(v211 + 34);
          uint64_t v262 = v211[33];
          BOOL v263 = (v262 - 51) & 1;
          *((_DWORD *)v47 + 42) = v263;
          int v264 = rep_min_0[v262 - 51];
          *((_DWORD *)v47 + 59) = v264;
          if ((v262 - 57) >= 0xFFFFFFFE) {
            signed int v265 = rep_max_0[v262 - 51];
          }
          else {
            signed int v265 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v265;
        }
        if (*(_DWORD *)(a4 + 60))
        {
          if (v264 >= 1) {
            goto LABEL_723;
          }
LABEL_734:
          char v482 = 0;
        }
        else
        {
          if (v264 >= 1) {
            goto LABEL_736;
          }
LABEL_740:
          char v482 = 1;
        }
        if (v265 == v264) {
          goto LABEL_377;
        }
        if (v263)
        {
          *((_DWORD *)v47 + 56) = v264;
          int v14 = v773;
          if (v482)
          {
LABEL_71:
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 23;
          }
          else
          {
LABEL_331:
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 22;
          }
LABEL_1348:
          int v181 = pcre_getMem(v60, v61, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          int v182 = v782;
          if (!(void)v778) {
            goto LABEL_1355;
          }
LABEL_1349:
          if (v181 < 0) {
            goto LABEL_1355;
          }
          long long v751 = *(_OWORD *)(v182 + 1);
          *(_OWORD *)(v23 + 1) = v751;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v182 + 6);
          uint64_t v174 = v182[4];
          v23[4] = v174;
          uint64_t v173 = v182[5];
          v23[5] = v173;
          *((_DWORD *)v23 + 12) = 0;
          *int v23 = (uint64_t)v182;
          unsigned int v782 = v23;
          uint64_t v26 = v751;
LABEL_1351:
          char v25 = 1;
LABEL_1352:
          *((_DWORD *)v23 + 47) = 0;
          *((_DWORD *)v23 + 51) = 0;
          v23[26] = 0;
          unint64_t v752 = *(void *)a4;
          unint64_t v753 = *(void *)(a4 + 8);
          ++*(void *)a4;
          if (v752 >= v753)
          {
            unsigned int v782 = (uint64_t *)*v23;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
            uint64_t v172 = v782;
            uint64_t v12 = 4294967288;
            if (!v782) {
              return v12;
            }
            goto LABEL_1358;
          }
          v23[22] = v174;
          if ((v25 & 1) == 0)
          {
            v23[49] = v173;
            v23[50] = v26;
            v23[5] = (uint64_t)(v23 + 49);
          }
          goto LABEL_377;
        }
        char v66 = (unsigned __int8 *)v47[1];
        v47[11] = (uint64_t)v66;
        if (v482)
        {
          BOOL v339 = __OFSUB__(v265, v264);
          int v662 = v265 - v264;
          if ((v662 < 0) ^ v339 | (v662 == 0))
          {
            int v14 = v773;
LABEL_1214:
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 25;
            goto LABEL_1348;
          }
          uint64_t v663 = 0;
          unint64_t v664 = *(void *)(a4 + 96);
          unint64_t v65 = (unint64_t)v66;
          while ((unint64_t)&v66[v663] < v664)
          {
            if (((v260[(unint64_t)v66[v663] >> 3] >> (v66[v663] & 7)) & 1) == 0) {
              goto LABEL_1220;
            }
            ++v65;
            v47[1] = (uint64_t)&v66[++v663];
            if (v662 == v663)
            {
              unint64_t v65 = (unint64_t)&v66[v663];
              goto LABEL_1220;
            }
          }
          unint64_t v65 = (unint64_t)&v66[v663];
LABEL_1220:
          int v14 = v773;
LABEL_80:
          if (v65 >= (unint64_t)v66) {
            goto LABEL_1214;
          }
          goto LABEL_987;
        }
        if (v265 <= v264)
        {
LABEL_1196:
          int v14 = v773;
LABEL_77:
          *(void *)&long long v778 = 0;
          uint64_t v60 = a1;
          char v61 = 24;
          goto LABEL_1348;
        }
        unint64_t v677 = *(void *)(a4 + 96);
        break;
      case 0x3Du:
        int v444 = v211 + 3;
        v47[9] = (uint64_t)(v211 + 3);
        unsigned int v445 = &v211[__rev16(*(unsigned __int16 *)(v211 + 1))];
        v47[2] = (uint64_t)v445;
        int v446 = *v445;
        if ((v446 - 51) >= 6)
        {
          if ((v446 - 57) >= 2)
          {
            BOOL v448 = 0;
            v47[29] = 0x100000001;
            int v449 = 1;
            int v450 = 1;
            goto LABEL_815;
          }
          BOOL v448 = v446 == 58;
          *((_DWORD *)v47 + 42) = v448;
          int v449 = __rev16(*(unsigned __int16 *)(v445 + 1));
          *((_DWORD *)v47 + 59) = v449;
          unsigned int v518 = __rev16(*(unsigned __int16 *)(v445 + 3));
          if (v518) {
            int v450 = v518;
          }
          else {
            int v450 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v450;
          v47[2] = (uint64_t)(v445 + 5);
        }
        else
        {
          v47[2] = (uint64_t)(v445 + 1);
          uint64_t v447 = *v445;
          BOOL v448 = (v447 - 51) & 1;
          *((_DWORD *)v47 + 42) = v448;
          int v449 = rep_min_0[v447 - 51];
          *((_DWORD *)v47 + 59) = v449;
          if ((v447 - 57) >= 0xFFFFFFFE) {
            int v450 = rep_max_0[v447 - 51];
          }
          else {
            int v450 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v450;
        }
        if (v449 < 1) {
          goto LABEL_826;
        }
LABEL_815:
        int v764 = v450;
        uint64_t v44 = v9;
        int v766 = v8;
        unint64_t v519 = *(void *)(a4 + 96);
        v520 = (unsigned __int8 *)v47[1];
        int v521 = 1;
        do
        {
          if ((unint64_t)v520 >= v519) {
            goto LABEL_950;
          }
          int v522 = v520 + 1;
          v47[1] = (uint64_t)(v520 + 1);
          int v523 = *v520;
          if ((~v523 & 0xC0) != 0)
          {
            ++v520;
          }
          else
          {
            int v524 = utf8_table4[v523 & 0x3F];
            int v525 = 6 * v524;
            int v523 = (utf8_table3[utf8_table4[v523 & 0x3F]] & v523) << (6 * v524);
            unsigned int v526 = v524 + 1;
            int v527 = v525 - 6;
            do
            {
              v520 = v522 + 1;
              v47[1] = (uint64_t)(v522 + 1);
              v523 |= (*v522 & 0x3F) << v527;
              --v526;
              v527 -= 6;
              ++v522;
            }
            while (v526 > 1);
          }
          if (!match_xclass(v523, v444))
          {
LABEL_950:
            unsigned int v782 = (uint64_t *)*v47;
            pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
            v576 = v782;
            if (!v782) {
              return 0;
            }
            uint64_t v12 = 0;
            *((_DWORD *)v782 + 102) = 0;
            int v14 = v773;
            *uint64_t v773 = v576;
            uint64_t v8 = v766;
            goto LABEL_311;
          }
          BOOL v161 = v521++ == v449;
        }
        while (!v161);
        uint64_t v8 = v766;
        uint64_t v9 = v44;
        int v450 = v764;
LABEL_826:
        if (v449 == v450) {
          goto LABEL_377;
        }
        if (!v448)
        {
          int v668 = (unsigned __int8 *)v47[1];
          v47[11] = (uint64_t)v668;
          if (v449 < v450)
          {
            uint64_t v669 = v9;
            unint64_t v768 = *(void *)(a4 + 96);
            do
            {
              if ((unint64_t)v668 >= v768) {
                break;
              }
              int v670 = *v668;
              if ((~v670 & 0xC0) != 0)
              {
                unsigned int v676 = 1;
              }
              else
              {
                unint64_t v671 = utf8_table4[v670 & 0x3F];
                int v670 = (utf8_table3[v671] & v670) << (6 * v671);
                v672 = (char *)(v668 + 1);
                uint64_t v673 = v671 <= 1 ? 1 : v671;
                int v674 = 6 * v671 - 6;
                do
                {
                  char v675 = *v672++;
                  v670 |= (v675 & 0x3F) << v674;
                  v674 -= 6;
                  --v673;
                }
                while (v673);
                unsigned int v676 = v671 + 1;
              }
              if (!match_xclass(v670, v444)) {
                break;
              }
              v668 += v676;
              v47[1] = (uint64_t)v668;
              ++v449;
            }
            while (v449 != v450);
            uint64_t v9 = v669;
          }
          int v14 = v773;
LABEL_89:
          *(void *)&long long v778 = 0;
          uint64_t v60 = a1;
          char v61 = 27;
          goto LABEL_1348;
        }
        uint64_t v44 = v9;
        *((_DWORD *)v47 + 56) = v449;
        int v14 = v773;
LABEL_267:
        *(void *)&long long v778 = 0;
        int v181 = pcre_getMem(a1, 26, &v778, a4, a5, a6, a7, a8);
        int v23 = (uint64_t *)v778;
        int v182 = v782;
        uint64_t v9 = v44;
        if ((void)v778) {
          goto LABEL_1349;
        }
LABEL_1355:
        v588 = (uint64_t *)*v182;
LABEL_1356:
        unsigned int v782 = v588;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
        uint64_t v172 = v782;
        if (!v782) {
          return 4294967290;
        }
        uint64_t v12 = 4294967290;
LABEL_1358:
        *((_DWORD *)v172 + 102) = v12;
LABEL_1359:
        *int v14 = v172;
LABEL_1360:
        int v13 = v783;
        continue;
      case 0x3Eu:
        uint64_t v451 = (v211[1] << 9) | (2 * v211[2]);
        *((_DWORD *)v47 + 61) = v451;
        v47[2] = (uint64_t)(v211 + 3);
        if ((int)v451 >= *((_DWORD *)v47 + 6)
          || (uint64_t v452 = *(void *)(a4 + 16), v453 = *(_DWORD *)(v452 + 4 * v451), v453 < 0))
        {
          a3 = *(void *)(a4 + 96) - v47[1] + 1;
        }
        else
        {
          a3 = (*(_DWORD *)(v452 + 4 * (v451 | 1)) - v453);
        }
        *((_DWORD *)v47 + 57) = a3;
        int v468 = v211[3];
        if ((v468 - 51) >= 6)
        {
          if ((v468 - 57) >= 2)
          {
            int v544 = (unsigned __int8 *)v47[1];
            int v545 = a3;
            if (!match_ref_0(v451, v544, a3, (void *)a4, v47[4])) {
              goto LABEL_956;
            }
            v47[1] = (uint64_t)&v544[v545];
            goto LABEL_377;
          }
          BOOL v762 = v468 == 58;
          *((_DWORD *)v47 + 42) = v762;
          int v470 = __rev16(*((unsigned __int16 *)v211 + 2));
          *((_DWORD *)v47 + 59) = v470;
          unsigned int v528 = __rev16(*((unsigned __int16 *)v211 + 3));
          if (v528) {
            int v471 = v528;
          }
          else {
            int v471 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v471;
          v47[2] = (uint64_t)(v211 + 8);
          if (!a3) {
            goto LABEL_377;
          }
        }
        else
        {
          v47[2] = (uint64_t)(v211 + 4);
          uint64_t v469 = v211[3];
          BOOL v762 = (v469 - 51) & 1;
          *((_DWORD *)v47 + 42) = v762;
          int v470 = rep_min_0[v469 - 51];
          *((_DWORD *)v47 + 59) = v470;
          int v471 = rep_max_0[v469 - 51];
          if ((v469 - 57) < 0xFFFFFFFE) {
            int v471 = 0x7FFFFFFF;
          }
          *((_DWORD *)v47 + 58) = v471;
          if (!a3) {
            goto LABEL_377;
          }
        }
        int v763 = v471;
        uint64_t v765 = a1;
        uint64_t v44 = v9;
        int v177 = v8;
        int v767 = v470;
        if (v470 >= 1)
        {
          uint64_t v529 = v47[4];
          uint64_t v530 = (int)a3;
          v531 = (unsigned __int8 *)v47[1];
          int v532 = v470;
          while (1)
          {
            uint64_t v533 = v451;
            uint64_t v534 = a3;
            if (!match_ref_0(v451, v531, a3, (void *)a4, v529)) {
              break;
            }
            v531 += v530;
            v47[1] = (uint64_t)v531;
            --v532;
            uint64_t v451 = v533;
            a3 = v534;
            if (!v532) {
              goto LABEL_837;
            }
          }
          unsigned int v782 = (uint64_t *)*v47;
          a1 = v765;
          pcre_freeMem(v765, &v783, v535, a4, a5, a6, a7, a8, v761);
          uint64_t v46 = v782;
          if (!v782) {
            return 0;
          }
          uint64_t v8 = v177;
          uint64_t v12 = 0;
          *((_DWORD *)v782 + 102) = 0;
          int v14 = v773;
LABEL_308:
          *int v14 = v46;
LABEL_311:
          uint64_t v9 = v44;
          goto LABEL_1360;
        }
LABEL_837:
        uint64_t v8 = v177;
        uint64_t v9 = v44;
        a1 = v765;
        if (v763 != v767)
        {
          if (!v762)
          {
            int v49 = (unsigned __int8 *)v47[1];
            v47[11] = (uint64_t)v49;
            int v690 = v763 - v767;
            if (v763 <= v767)
            {
              uint64_t v8 = v177;
              uint64_t v9 = v44;
              int v14 = v773;
            }
            else
            {
              uint64_t v769 = v47[4];
              uint64_t v691 = (int)a3;
              uint64_t v48 = v49;
              do
              {
                uint64_t v692 = v451;
                uint64_t v693 = a3;
                if (!match_ref_0(v451, v48, a3, (void *)a4, v769)) {
                  break;
                }
                v48 += v691;
                v47[1] = (uint64_t)v48;
                --v690;
                uint64_t v451 = v692;
                a3 = v693;
              }
              while (v690);
              uint64_t v8 = v177;
              uint64_t v9 = v44;
              int v14 = v773;
              a1 = v765;
LABEL_55:
              if (v48 < v49) {
                goto LABEL_987;
              }
            }
            *(void *)&long long v778 = 0;
            uint64_t v60 = a1;
            char v61 = 21;
            goto LABEL_1348;
          }
          *((_DWORD *)v47 + 56) = v767;
LABEL_258:
          *(void *)&long long v778 = 0;
          int v181 = pcre_getMem(a1, 20, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          int v182 = v782;
          uint64_t v8 = v177;
          uint64_t v9 = v44;
          int v14 = v773;
          if (!(void)v778) {
            goto LABEL_1355;
          }
          goto LABEL_1349;
        }
        goto LABEL_377;
      case 0x3Fu:
        v603 = (unsigned __int8 *)(*(void *)(a4 + 80) + __rev16(*(unsigned __int16 *)(v211 + 1)));
        v47[7] = (uint64_t)v603;
        unsigned int v604 = *v603;
        *((_DWORD *)v47 + 30) = v604 - 80;
        if (v604 >= 0xB5) {
          *((_DWORD *)v47 + 30) = __rev16(*((unsigned __int16 *)v603 + 2));
        }
        v47[14] = *(void *)(a4 + 136);
        *(void *)(a4 + 136) = v47 + 14;
        v47[2] = (uint64_t)(v211 + 3);
        v47[16] = (uint64_t)(v211 + 3);
        uint64_t v605 = *(unsigned int *)(a4 + 24);
        *((_DWORD *)v47 + 38) = v605;
        if ((int)v605 > 30)
        {
          uint64_t v606 = (void *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 4 * v605);
          int v647 = (uint64_t **)v782;
          v782[18] = (uint64_t)v606;
          if (!v606)
          {
            unsigned int v782 = *v647;
            pcre_freeMem(a1, &v783, v641, v642, v643, v644, v645, v646, v761);
            uint64_t v172 = v782;
            uint64_t v12 = 4294967290;
            if (!v782) {
              return v12;
            }
            goto LABEL_1358;
          }
          uint64_t v605 = *((unsigned int *)v647 + 38);
        }
        else
        {
          uint64_t v606 = (char *)v47 + 268;
          v47[18] = (uint64_t)v47 + 268;
        }
        cstdlib_memcpy(v606, *(const void **)(a4 + 16), 4 * v605);
        uint64_t v648 = v782;
        v782[17] = *(void *)(a4 + 104);
        *(void *)(a4 + 104) = v648[1];
        goto LABEL_289;
      case 0x40u:
        if (!v8) {
          goto LABEL_692;
        }
        long long v780 = 0u;
        long long v781 = 0u;
        long long v778 = 0u;
        long long v779 = 0u;
        LODWORD(v778) = 1;
        uint64_t v454 = v47[2];
        DWORD1(v778) = *(unsigned __int8 *)(v454 + 1);
        unint64_t v455 = *(void *)(a4 + 88);
        *((void *)&v778 + 1) = *(void *)(a4 + 16);
        *(void *)&long long v779 = v455;
        *((int32x2_t *)&v779 + 1) = vmovn_s64(vsubq_s64(*(int64x2_t *)(a4 + 96), vdupq_n_s64(v455)));
        LODWORD(v780) = *((_DWORD *)v47 + 2) - v455;
        DWORD2(v781) = __rev16(*(unsigned __int16 *)(v454 + 2));
        HIDWORD(v781) = __rev16(*(unsigned __int16 *)(v454 + 4));
        int v456 = *(_DWORD *)(a4 + 124);
        DWORD1(v780) = *((_DWORD *)v47 + 6) / 2;
        DWORD2(v780) = v456;
        *(void *)&long long v781 = *(void *)(a4 + 144);
        uint64_t v457 = v8(&v778);
        if ((int)v457 >= 1)
        {
          unsigned int v782 = (uint64_t *)*v782;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
          uint64_t v12 = 0;
LABEL_245:
          uint64_t v172 = v782;
          if (!v782) {
            return v12;
          }
          goto LABEL_1358;
        }
        uint64_t v12 = v457;
        if ((v457 & 0x80000000) != 0) {
          goto LABEL_48;
        }
        int v47 = v782;
        unsigned int v211 = (unsigned __int8 *)v782[2];
LABEL_692:
        v47[2] = (uint64_t)(v211 + 6);
        goto LABEL_377;
      case 0x41u:
        do
        {
          v211 += __rev16(*(unsigned __int16 *)(v211 + 1));
          v47[2] = (uint64_t)v211;
        }
        while (*v211 == 65);
        goto LABEL_377;
      case 0x42u:
      case 0x43u:
      case 0x44u:
        uint64_t v44 = v9;
        int v228 = &v211[-__rev16(*(unsigned __int16 *)(v211 + 1))];
        v47[12] = (uint64_t)v228;
        int v229 = (uint64_t *)v47[5];
        uint64_t v230 = v229[1];
        v47[13] = v230;
        v47[5] = *v229;
        unsigned int v231 = *v228;
        if (v231 == 75) {
          goto LABEL_792;
        }
        if (v231 - 69 < 4 || v231 == 74)
        {
          *(void *)(a4 + 112) = v47[1];
          *(_DWORD *)(a4 + 120) = *((_DWORD *)v47 + 6);
          unsigned int v782 = (uint64_t *)*v47;
          pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
          uint64_t v46 = v782;
          uint64_t v12 = 1;
          if (!v782) {
            return v12;
          }
          goto LABEL_52;
        }
        int v232 = v231 - 80;
        *((_DWORD *)v47 + 60) = v231 - 80;
        if (v231 >= 0xB5)
        {
          int v232 = __rev16(*((unsigned __int16 *)v228 + 2));
          *((_DWORD *)v47 + 60) = v232;
        }
        int v233 = 2 * v232;
        *((_DWORD *)v47 + 61) = 2 * v232;
        if (v232 < 1) {
          goto LABEL_792;
        }
        *(_DWORD *)(a4 + 124) = v232;
        if (v233 >= *(_DWORD *)(a4 + 28))
        {
          *(_DWORD *)(a4 + 48) = 1;
        }
        else
        {
          uint64_t v234 = *(void *)(a4 + 16);
          *(_DWORD *)(v234 + 4 * v233) = *(_DWORD *)(v234 + 4 * (*(_DWORD *)(a4 + 24) - v232));
          *(_DWORD *)(v234 + 4 * *((int *)v47 + 61) + 4) = *((_DWORD *)v47 + 2) - *(_DWORD *)(a4 + 88);
          int v235 = *((_DWORD *)v47 + 61);
          if (*((_DWORD *)v47 + 6) <= v235) {
            *((_DWORD *)v47 + 6) = v235 + 2;
          }
        }
        uint64_t v507 = *(void *)(a4 + 136);
        if (v507 && *(_DWORD *)(v507 + 8) == *((_DWORD *)v47 + 60))
        {
          *(void *)(a4 + 136) = *(void *)v507;
          *(void *)(a4 + 104) = *(void *)(v507 + 24);
          cstdlib_memcpy(*(void **)(a4 + 16), *(const void **)(v507 + 32), 4 * *(unsigned int *)(v507 + 40));
          v508 = v782;
          v782[2] = *(void *)(v507 + 16);
          v508[4] = v508[22];
          uint64_t v9 = v44;
        }
        else
        {
LABEL_792:
          v47[4] = v47[22];
          int v509 = *v211;
          if (v509 != 66 && v47[1] != v230)
          {
            uint64_t v9 = v44;
            if (v509 == 68)
            {
              *(void *)&long long v778 = 0;
              int v587 = pcre_getMem(a1, 16, &v778, a4, a5, a6, a7, a8);
              int v23 = (uint64_t *)v778;
              unsigned __int8 v176 = v782;
              if ((void)v778 && (v587 & 0x80000000) == 0)
              {
LABEL_254:
                uint64_t v26 = v176[1];
                v23[1] = v26;
                v23[2] = v176[2] + 3;
                *((_DWORD *)v23 + 6) = *((_DWORD *)v176 + 6);
                uint64_t v174 = v176[4];
                v23[4] = v174;
                uint64_t v173 = v176[5];
                v23[5] = v173;
                *((_DWORD *)v23 + 12) = 0;
                *int v23 = (uint64_t)v176;
                unsigned int v782 = v23;
                goto LABEL_1351;
              }
LABEL_997:
              v588 = (uint64_t *)*v176;
              goto LABEL_1356;
            }
            *(void *)&long long v778 = 0;
            int v640 = pcre_getMem(a1, 18, &v778, a4, a5, a6, a7, a8);
            int v23 = (uint64_t *)v778;
            uint64_t v24 = v782;
            if ((void)v778 && (v640 & 0x80000000) == 0) {
              goto LABEL_46;
            }
            goto LABEL_1164;
          }
          unsigned int v505 = v211 + 3;
LABEL_795:
          v47[2] = (uint64_t)v505;
          uint64_t v9 = v44;
        }
        goto LABEL_377;
      case 0x45u:
      case 0x47u:
        goto LABEL_278;
      case 0x46u:
      case 0x48u:
        goto LABEL_284;
      case 0x49u:
        uint64_t v458 = v211[1];
        uint64_t v459 = v211[2];
        if (*(_DWORD *)(a4 + 60))
        {
          int v460 = v459 | (v458 << 8);
          if (v460)
          {
            int v461 = 0;
            unint64_t v462 = *(void *)(a4 + 88);
            unsigned int v463 = (unsigned char *)v47[1];
            do
            {
              unint64_t v464 = v463 - 1;
              v47[1] = (uint64_t)(v463 - 1);
              if ((unint64_t)(v463 - 1) < v462) {
                goto LABEL_987;
              }
              if ((*v464 & 0xC0) == 0x80)
              {
                v465 = v463 - 2;
                do
                {
                  v47[1] = (uint64_t)v465;
                  char v466 = *v465--;
                }
                while ((v466 & 0xC0) == 0x80);
                unint64_t v464 = v465 + 1;
              }
              ++v461;
              unsigned int v463 = v464;
            }
            while (v461 != v460);
          }
        }
        else
        {
          unint64_t v517 = v47[1] - (v459 | (v458 << 8));
          v47[1] = v517;
          if (v517 < *(void *)(a4 + 88)) {
            goto LABEL_987;
          }
        }
LABEL_808:
        v47[2] = (uint64_t)(v211 + 3);
        goto LABEL_377;
      case 0x4Au:
        uint64_t v607 = v47[1];
        v47[12] = (uint64_t)v211;
        v47[13] = v607;
        goto LABEL_295;
      case 0x4Bu:
        if (v211[3] != 76)
        {
          *(void *)&long long v778 = 0;
          int v649 = pcre_getMem(a1, 4, &v778, a4, a5, a6, a7, a8);
          int v23 = (uint64_t *)v778;
          uint64_t v24 = v782;
          if (!(void)v778 || v649 < 0) {
            goto LABEL_1164;
          }
          uint64_t v173 = 0;
          char v25 = 0;
          uint64_t v26 = v782[1];
          *(void *)(v778 + 8) = v26;
          v23[2] = v24[2] + 3;
          *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
          uint64_t v174 = v24[4];
          *((_DWORD *)v23 + 12) = 3;
          *int v23 = (uint64_t)v24;
          v23[4] = v174;
          v23[5] = 0;
          goto LABEL_1046;
        }
        int v608 = (v211[4] << 9) | (2 * v211[5]);
        *((_DWORD *)v47 + 61) = v608;
        if (v608 == 131070)
        {
          BOOL v609 = *(void *)(a4 + 136) != 0;
        }
        else
        {
          BOOL v609 = 0;
          if (v608 < *((_DWORD *)v47 + 6)) {
            BOOL v609 = *(_DWORD *)(*(void *)(a4 + 16) + 4 * v608) >= 0;
          }
        }
        *((_DWORD *)v47 + 41) = v609;
        *(void *)&long long v778 = 0;
        int v665 = pcre_getMem(a1, 3, &v778, a4, a5, a6, a7, a8);
        int v23 = (uint64_t *)v778;
        uint64_t v24 = v782;
        if (!(void)v778 || v665 < 0) {
          goto LABEL_1164;
        }
        uint64_t v26 = v782[1];
        *(void *)(v778 + 8) = v26;
        uint64_t v666 = v24[2];
        uint64_t v667 = 6;
        if (!*((_DWORD *)v24 + 41)) {
          uint64_t v667 = __rev16(*(unsigned __int16 *)(v666 + 1)) + 3;
        }
        char v25 = 0;
        v23[2] = v666 + v667;
        *((_DWORD *)v23 + 6) = *((_DWORD *)v24 + 6);
        uint64_t v174 = v24[4];
        v23[4] = v174;
        uint64_t v173 = v24[5];
        v23[5] = v173;
        *((_DWORD *)v23 + 12) = 2;
        goto LABEL_1045;
      case 0x4Cu:
      case 0x4Fu:
        goto LABEL_808;
      case 0x4Du:
        v47[10] = (uint64_t)(v211 + 1);
        *(void *)&long long v778 = 0;
        int v610 = pcre_getMem(a1, 14, &v778, a4, a5, a6, a7, a8);
        int v23 = (uint64_t *)v778;
        uint64_t v24 = v782;
        if (!(void)v778 || v610 < 0) {
          goto LABEL_1164;
        }
        char v25 = 0;
        uint64_t v26 = v782[1];
        *(void *)(v778 + 8) = v26;
        uint64_t v42 = v24[10];
        goto LABEL_1044;
      case 0x4Eu:
        v611 = v211 + 1;
        v47[10] = (uint64_t)(v211 + 1);
        do
        {
          v611 += __rev16(*(unsigned __int16 *)(v611 + 1));
          v47[10] = (uint64_t)v611;
        }
        while (*v611 == 65);
        *(void *)&long long v778 = 0;
        int v612 = pcre_getMem(a1, 15, &v778, a4, a5, a6, a7, a8);
        int v23 = (uint64_t *)v778;
        uint64_t v24 = v782;
        if (!(void)v778 || v612 < 0) {
          goto LABEL_1164;
        }
        char v25 = 0;
        uint64_t v26 = v782[1];
        *(void *)(v778 + 8) = v26;
        uint64_t v194 = v24[10];
        goto LABEL_276;
      case 0x50u:
        goto LABEL_10;
      default:
        unsigned int v782 = (uint64_t *)*v47;
        pcre_freeMem(a1, &v783, a3, a4, a5, a6, a7, a8, v761);
        uint64_t v172 = v782;
        uint64_t v12 = 4294967291;
        if (!v782) {
          return v12;
        }
        goto LABEL_1358;
    }
    break;
  }
  while (1)
  {
    if ((unint64_t)v66 >= v677) {
      goto LABEL_1196;
    }
    int v678 = *v66;
    if ((~v678 & 0xC0) != 0) {
      break;
    }
    unint64_t v679 = utf8_table4[v678 & 0x3F];
    int v678 = (utf8_table3[v679] & v678) << (6 * v679);
    int v680 = (char *)(v66 + 1);
    if (v679 <= 1) {
      uint64_t v681 = 1;
    }
    else {
      uint64_t v681 = v679;
    }
    int v682 = 6 * v679 - 6;
    do
    {
      char v683 = *v680++;
      v678 |= (v683 & 0x3F) << v682;
      v682 -= 6;
      --v681;
    }
    while (v681);
    unsigned int v684 = v679 + 1;
    if (v678 < 256) {
      goto LABEL_1194;
    }
    if (v212 == 59) {
      goto LABEL_1196;
    }
LABEL_1195:
    v66 += v684;
    v47[1] = (uint64_t)v66;
    if (++v264 == v265) {
      goto LABEL_1196;
    }
  }
  unsigned int v684 = 1;
LABEL_1194:
  if (((v260[v678 / 8] >> (v678 & 7)) & 1) == 0) {
    goto LABEL_1196;
  }
  goto LABEL_1195;
}