char *checkremoveNormalSym(char *a1, unsigned __int16 *a2, unsigned __int8 a3)
{
  int v5;
  char *result;
  unsigned int v7;
  unint64_t v8;
  unsigned __int16 v9;
  int v10;

  v5 = a3;
  result = cstdlib_strchr(a1, a3);
  if (result)
  {
    v7 = *a2;
    if (*a2)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = a1[v8];
        if (v10 != v5)
        {
          if (v8 != v9)
          {
            a1[v9] = v10;
            v7 = *a2;
          }
          ++v9;
        }
        ++v8;
      }
      while (v8 < v7);
    }
    else
    {
      v9 = 0;
    }
    a1[v9] = 0;
    *a2 = v9;
  }
  return result;
}

uint64_t pw_copy_pw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copying PW ... ", a6, a7, a8, v19);
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"pPWIn and pPWOut is: ", v11, v12, v13, v20);
  uint64_t v17 = pw_show_pw(a1, a2);
  if ((v17 & 0x80000000) == 0)
  {
    *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
    *(void *)a3 = *(void *)a2;
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Copy PW done!", v14, v15, v16, v21);
  }
  return v17;
}

uint64_t pw_show_pw(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), 1, 1000);
  if (!v4) {
    return 2315264010;
  }
  v8 = (const char *)v4;
  if (*(_WORD *)(a2 + 8))
  {
    unint64_t v9 = 0;
    int v10 = 0;
    do
    {
      sprintf((char *)&v8[v10], "%d-", *(unsigned __int16 *)(*(void *)a2 + 2 * v9));
      int v10 = cstdlib_strlen(v8);
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(a2 + 8));
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"\tPW [tids:%s, ntok:%d]", v5, v6, v7, (uint64_t)v8);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v8);
  return 0;
}

uint64_t hlp_getKeyIdx(uint64_t a1, unsigned int a2, char *__s2, size_t __n)
{
  if (a2)
  {
    uint64_t v6 = 0;
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      unint64_t v9 = *(const char **)(a1 + 8 * v6);
      if (!v9) {
        break;
      }
      if (!cstdlib_strncmp(v9, __s2, v7)) {
        return (__int16)v6;
      }
      ++v6;
    }
    while (v8 != v6);
  }
  LOWORD(v6) = -1;
  return (__int16)v6;
}

char *hlp_checkValExist(char *result, unsigned int a2, const char *a3, unsigned int a4)
{
  if (result)
  {
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = " ";
    }
    if (a2)
    {
      uint64_t v5 = (const char **)result;
      if (a3) {
        size_t v6 = a4;
      }
      else {
        size_t v6 = 1;
      }
      uint64_t v7 = a2;
      while (1)
      {
        result = (char *)*v5;
        if (!*v5) {
          break;
        }
        if (cstdlib_strlen(result) == v6 && !cstdlib_strncmp(*v5, v4, v6)) {
          return (char *)1;
        }
        ++v5;
        if (!--v7) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pw_check_if_word_in_prompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10 = 0;
  *a5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, a4, 1, 1, &v10, (char *)&v10 + 2);
  if ((result & 0x80000000) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *))(a1 + 312))(a2, a3, (unsigned __int16)v10, a5);
  }
  return result;
}

uint64_t getphraseCfg(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, char **a6, char **a7)
{
  uint64_t v19 = 0;
  __int16 v18 = -1;
  char v17 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", "fephrase_slience", &v19, &v18, &v17);
  if ((result & 0x80000000) == 0)
  {
    if (v19) {
      BOOL v15 = v18 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      unsigned int v16 = 300;
    }
    else {
      unsigned int v16 = LH_atou(*v19);
    }
    *a5 = v16;
    uint64_t result = getPunc(a1, a2, a3, a4, a6, (uint64_t)"fephrase_strongphrasepunc");
    if ((result & 0x80000000) == 0) {
      return getPunc(a1, a2, a3, a4, a7, (uint64_t)"fephrase_weakphrasepunc");
    }
  }
  return result;
}

uint64_t getPunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  __int16 v18 = 0;
  __int16 v17 = 0;
  char v16 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, const char ***, __int16 *, char *))(a2 + 96))(a3, a4, "fecfg", a6, &v18, &v17, &v16);
  if ((v8 & 0x80000000) == 0)
  {
    if (v18) {
      BOOL v9 = v17 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = (char *)heap_Alloc(*(void *)(a1 + 8), 10);
      if (v10)
      {
        uint64_t v11 = v10;
        cstdlib_strcpy(v10, ",;:.?!_~|");
        uint64_t v12 = v11 + 9;
LABEL_11:
        *uint64_t v12 = 0;
        *a5 = v11;
        return v8;
      }
    }
    else
    {
      unsigned int v13 = cstdlib_strlen(*v18);
      uint64_t v14 = (char *)heap_Alloc(*(void *)(a1 + 8), v13 + 1);
      if (v14)
      {
        uint64_t v11 = v14;
        cstdlib_strcpy(v14, *v18);
        uint64_t v12 = &v11[v13 - 1];
        goto LABEL_11;
      }
    }
    return 2315264010;
  }
  return v8;
}

uint64_t com_crf_GetCfgParamValNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char **a6)
{
  *a6 = a5;
  __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  int v10 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v7 & 0x80000000) == 0 && __c_1)
  {
    uint64_t v8 = cstdlib_strchr(*v10, __c);
    if (v8) {
      char *v8 = 0;
    }
    *a6 = *v10;
  }
  return v7;
}

uint64_t ruleNNInit(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  *(_OWORD *)v73 = 0u;
  long long v74 = 0u;
  char v70 = 0;
  int v68 = 0;
  *(_DWORD *)__s1 = 0;
  *(void *)unsigned __int8 __c = 0;
  uint64_t v67 = 0;
  unsigned int v65 = 0;
  v63 = 0;
  *(void *)v64 = 0;
  if ((com_crf_GetCfgParamValNN(a5, a6, a4, (uint64_t)"fephrase_max_rule", "1024", &v63) & 0x80000000) != 0) {
    uint64_t v15 = 1024;
  }
  else {
    uint64_t v15 = cstdlib_atoi((unsigned __int8 *)v63);
  }
  uint64_t v20 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, v15);
  if (v20)
  {
    v71 = 0;
    __s2 = 0;
    int v95 = 0;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    *(_OWORD *)__dst = 0u;
    long long v90 = 0u;
    int Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &__s2);
    if (Str < 0
      || (int Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v71), Str < 0)
      || (cstdlib_strcpy((char *)__dst, "sprules"),
          cstdlib_strcat((char *)__dst, "_"),
          cstdlib_strcat((char *)__dst, __s2),
          cstdlib_strcat((char *)__dst, "_"),
          cstdlib_strcat((char *)__dst, v71),
          int Str = brokeraux_ComposeBrokerString(a3, (const char *)__dst, 1, 1, __s2, 0, 0, v73, 0x100uLL),
          Str < 0))
    {
      int v48 = Str;
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for SP rules %s", v22, v23, v24, (uint64_t)"sprules");
      int v37 = v48 | 0x8A002000;
    }
    else
    {
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"looking for SP rules %s at %s", v22, v23, v24, (uint64_t)"sprules");
      int v25 = ssftriff_reader_ObjOpen(a1, a2, 2, v73, "SPDT", 1031, (uint64_t *)v64);
      if (v25 < 0)
      {
        int v37 = v25;
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no sp rules", v26, v27, v28, v60);
        *(_WORD *)(a7 + 10) = 0;
        *(void *)a7 = 0;
      }
      else
      {
        while (1)
        {
          int v29 = ssftriff_reader_OpenChunk(*(uint64_t *)v64, (__int32 *)__s1, (unsigned int *)&v68, &v67);
          if (v29 < 0) {
            break;
          }
          if (!cstdlib_strcmp(__s1, "DSTR"))
          {
            int ChunkData = ssftriff_reader_GetChunkData(*(uint64_t *)v64, v68, __c);
            if (ChunkData < 0) {
              goto LABEL_77;
            }
            unsigned int v65 = 0;
            ssftriff_reader_ReadStringZ(*(uint64_t *)v64, *(uint64_t *)__c, v68, 0, 0, &v65);
            ssftriff_reader_ReadStringZ(*(uint64_t *)v64, *(uint64_t *)__c, v68, 0, v20, &v65);
            v39 = cstdlib_strchr(v20, 10);
            if (v39) {
              char *v39 = 0;
            }
            v40 = cstdlib_strchr(v20, 58);
            unsigned __int16 v41 = v40 ? cstdlib_atoi((unsigned __int8 *)v40 + 2) : 0;
            unsigned int v42 = v65;
            int ChunkData = initPhrasingRuleStructNN(a3, a7, v41);
            if (ChunkData < 0) {
              goto LABEL_77;
            }
            unsigned __int16 v61 = v41;
            if (v41)
            {
              int v43 = 0;
              while (1)
              {
                do
                {
                  unsigned int v65 = 0;
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v64, *(uint64_t *)__c, v68, v42, 0, &v65);
                  ssftriff_reader_ReadStringZ(*(uint64_t *)v64, *(uint64_t *)__c, v68, v42, v20, &v65);
                  v42 += v65;
                  v44 = v20 + 1;
                  for (i = v20; ; ++i)
                  {
                    unsigned int v46 = *i;
                    if (v46 > 0x23) {
                      goto LABEL_29;
                    }
                    if (((1 << v46) & 0x100000200) == 0) {
                      break;
                    }
                    ++v44;
                  }
                }
                while (((1 << v46) & 0x800002401) != 0);
LABEL_29:
                while ((_BYTE)v46)
                {
                  if (v46 == 35)
                  {
                    *(v44 - 1) = 0;
                    break;
                  }
                  char v47 = *v44++;
                  LOBYTE(v46) = v47;
                }
                int ChunkData = addPhrasingRuleNN(a3, (uint64_t *)a7, v20);
                if (ChunkData < 0) {
                  break;
                }
                if ((unsigned __int16)++v43 >= v61) {
                  goto LABEL_11;
                }
              }
LABEL_77:
              int v37 = ChunkData;
              goto LABEL_37;
            }
          }
LABEL_11:
          int v37 = ssftriff_reader_CloseChunk(*(uint64_t *)v64);
          if (v37 < 0) {
            goto LABEL_37;
          }
        }
        if ((v29 & 0x1FFF) == 0x14) {
          int v37 = 0;
        }
        else {
          int v37 = v29;
        }
      }
    }
  }
  else
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v59);
    int v37 = -1979703286;
  }
LABEL_37:
  if (*(void *)v64)
  {
    int v49 = ssftriff_reader_ObjClose(*(void **)v64, v30, v31, v32, v33, v34, v35, v36);
    if (v49 < 0 && v37 > -1) {
      int v37 = v49;
    }
  }
  if (v20) {
    heap_Free(*(void **)(a3 + 8), (uint64_t)v20);
  }
  if (a7 && v37 < 0) {
    releasePhrasingRuleStructNN(a3, a7);
  }
  uint64_t v51 = 0;
  v71 = 0;
  __s2 = 0;
  LOWORD(v67) = -1;
  LOBYTE(__c[0]) = 0;
  *(_OWORD *)(a8 + 2) = 0u;
  *(_OWORD *)(a8 + 18) = 0u;
  *(_OWORD *)(a8 + 34) = 0u;
  *(_OWORD *)(a8 + 50) = 0u;
  __dst[0] = "JOY_KEYS";
  __dst[1] = "DID_KEYS";
  *(void *)&long long v90 = "NEU_KEYS";
  *((void *)&v90 + 1) = "COM_KEYS";
  *(_OWORD *)(a8 + 66) = 0u;
  while (1)
  {
    cstdlib_strcpy(v73, "statbnd_");
    cstdlib_strcat(v73, (const char *)__dst[v51]);
    LOWORD(v67) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, char **, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v73, &__s2, &v67, __c) & 0x80000000) != 0|| !(_WORD)v67)
    {
      break;
    }
    v52 = cstdlib_strchr(*(char **)__s2, LOBYTE(__c[0]));
    if (v52) {
      char *v52 = 0;
    }
    v53 = *(const char **)__s2;
    int v54 = **(unsigned __int8 **)__s2;
    if (**(unsigned char **)__s2)
    {
      unsigned __int16 v55 = 0;
      do
      {
        for (j = 0; v54; int v54 = v53[++j])
        {
          if (v54 == 44) {
            break;
          }
        }
        cstdlib_strcpy(v73, "statbnd_");
        cstdlib_strncat(v73, v53, (unsigned __int16)j);
        LOWORD(v67) = 0;
        (*(void (**)(uint64_t, uint64_t, const char *, char *, char **, uint64_t *, int *))(a4 + 96))(a5, a6, "fecfg", v73, &v71, &v67, __c);
        if ((_WORD)v67)
        {
          v57 = cstdlib_strchr(*(char **)v71, LOBYTE(__c[0]));
          if (v57) {
            char *v57 = 0;
          }
          if ((unsigned __int16)v51 == 2)
          {
            *(_WORD *)(a8 + 2 * v55 + 42) = cstdlib_atoi(*(unsigned __int8 **)v71);
          }
          else if ((unsigned __int16)v51 == 1)
          {
            *(_WORD *)(a8 + 2 * v55 + 22) = cstdlib_atoi(*(unsigned __int8 **)v71);
          }
          else if ((_WORD)v51)
          {
            *(_WORD *)(a8 + 2 * v55 + 62) = cstdlib_atoi(*(unsigned __int8 **)v71);
          }
          else
          {
            *(_WORD *)(a8 + 2 * v55 + 2) = cstdlib_atoi(*(unsigned __int8 **)v71);
          }
        }
        if (v53[j] == 44) {
          v53 += j + 1;
        }
        else {
          v53 += j;
        }
        ++v55;
        int v54 = *(unsigned __int8 *)v53;
      }
      while (*v53);
    }
    else
    {
      unsigned __int16 v55 = 0;
    }
    if (++v51 == 4)
    {
      *(_WORD *)a8 = v55;
      return 0;
    }
  }
  return 0;
}

uint64_t doesNNCustermizedFE(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  char v27 = 0;
  *(_WORD *)__s2 = -22590;
  if (result)
  {
    uint64_t v5 = result;
    size_t v6 = *(const char **)(a2 + 1088);
    uint64_t v7 = *(void *)(result + 8);
    size_t v8 = cstdlib_strlen(v6);
    uint64_t v9 = heap_Alloc(v7, v8 + 2);
    if (v9)
    {
      int v10 = (void *)v9;
      if (*(_WORD *)(a2 + 1072))
      {
        uint64_t v25 = v5;
        unint64_t v11 = 0;
        unsigned __int16 v12 = 0;
        do
        {
          uint64_t v13 = *(void *)(a2 + 1064);
          unsigned int v14 = *(_DWORD *)(v13 + 184 * v11 + 36);
          BOOL v15 = v14 > 0xA;
          int v16 = (1 << v14) & 0x610;
          if (!v15 && v16 != 0)
          {
            uint64_t v18 = v13 + 184 * v11;
            uint64_t v19 = *(unsigned __int16 *)(v18 + 16);
            uint64_t v20 = *(unsigned __int16 *)(v18 + 18);
            if (v19 != v20)
            {
              uint64_t v21 = v20 - v19;
              cstdlib_memcpy(v10, &v6[v19], v20 - v19);
              *((unsigned char *)v10 + v21) = 0;
              __int16 v22 = cstdlib_strlen((const char *)v10);
              int v23 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v10, v22);
              if (v23)
              {
                unsigned __int16 v24 = 0;
                do
                {
                  utf8_getUTF8Char((uint64_t)v10, v24, __s1);
                  if (!cstdlib_strcmp(__s1, __s2)) {
                    ++v12;
                  }
                  v24 += utf8_determineUTF8CharLength(__s1[0]);
                  --v23;
                }
                while (v23);
              }
            }
          }
          ++v11;
        }
        while (v11 < *(unsigned __int16 *)(a2 + 1072));
        uint64_t v5 = v25;
        if (v12 >= 3u) {
          *a3 = 1;
        }
      }
      heap_Free(*(void **)(v5 + 8), (uint64_t)v10);
      return 0;
    }
    else
    {
      return 2315264010;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t addPOS(uint64_t a1, unsigned int a2, char *__s, uint64_t a4)
{
  size_t v8 = *(void **)(a1 + 8);
  int v9 = cstdlib_strlen(__s);
  int v10 = (char *)heap_Calloc(v8, 1, (v9 + 1));
  *(void *)(*(void *)(a4 + 1064) + 184 * a2 + 48) = v10;
  if (v10)
  {
    cstdlib_strcpy(v10, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v11, v12, v13, v14, v16);
    return 2315264010;
  }
}

uint64_t checkMSPOSForCompoundNN(uint64_t a1, unsigned int a2, char *__s2, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = 0;
  uint64_t CompoundAccent = 0;
  int v42 = 0;
  int v43 = 0;
  do
  {
    unint64_t v12 = v10;
    if (v10 >= *(unsigned __int16 *)(a4 + 360)) {
      return CompoundAccent;
    }
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v10) == 1)
    {
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v10) + 2);
      unsigned __int16 v14 = cstdlib_strlen(__s2);
      uint64_t CompoundAccent = do_pcre_exec(a4, v13, __s2, v14, 0, (uint64_t)&v43, v15, v16);
      if ((CompoundAccent & 0x80000000) != 0) {
        return CompoundAccent;
      }
    }
    else if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * **(unsigned int **)(*(void *)(a4 + 344) + 8 * v10))), __s2))
    {
      int v43 = 1;
    }
    unint64_t v10 = v12 + 1;
  }
  while (!v43);
  if (v43 != 1) {
    return CompoundAccent;
  }
  uint64_t v17 = (unsigned __int16)v12;
  uint64_t v18 = 4;
  if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * (unsigned __int16)v12) == 1) {
    uint64_t v18 = 8;
  }
  uint64_t v19 = (const char *)(*(void *)(a4 + 528)
                     + *(unsigned int *)(*(void *)(a4 + 536)
                                       + 4
                                       * *(unsigned int *)(*(void *)(*(void *)(a4 + 344)
                                                                     + 8 * (unsigned __int16)v12)
                                                         + v18)));
  if (cstdlib_strcmp(v19, *(const char **)(a4 + 640)))
  {
    unsigned int v20 = a2;
    uint64_t v21 = *(void *)(*(void *)(a5 + 1064) + 184 * a2 + 120);
    if (v21)
    {
      heap_Free(*(void **)(a1 + 8), v21);
      *(void *)(*(void *)(a5 + 1064) + 184 * a2 + 120) = 0;
    }
    __int16 v22 = *(void **)(a1 + 8);
    int v23 = cstdlib_strlen(v19);
    unsigned __int16 v24 = (char *)heap_Calloc(v22, 1, (v23 + 52));
    *(void *)(*(void *)(a5 + 1064) + 184 * v20 + 120) = v24;
    if (v24)
    {
      cstdlib_strcpy(v24, v19);
      goto LABEL_17;
    }
LABEL_24:
    uint64_t CompoundAccent = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v41);
    return CompoundAccent;
  }
  int v42 = 0;
  int v43 = 0;
  uint64_t CompoundAccent = getCompoundAccent(a4, __s2, &v43, (_WORD *)&v42 + 1, &v42);
  if ((CompoundAccent & 0x80000000) != 0) {
    return CompoundAccent;
  }
  if (!v43)
  {
    unsigned int v20 = a2;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no stress information on first word of compound word : word index=%d pos=%s", v33, v34, v35, a2);
    uint64_t v40 = *(void *)(*(void *)(a5 + 1064) + 184 * a2 + 120);
    if (v40)
    {
      heap_Free(*(void **)(a1 + 8), v40);
      *(void *)(*(void *)(a5 + 1064) + 184 * a2 + 120) = 0;
    }
    goto LABEL_17;
  }
  uint64_t v36 = *(void **)(a1 + 8);
  int v37 = cstdlib_strlen(v19);
  v38 = (char *)heap_Calloc(v36, 1, v37 + (unsigned __int16)v42 - HIWORD(v42) + 2);
  *(void *)(*(void *)(a5 + 1064) + 184 * a2 + 120) = v38;
  if (!v38) {
    goto LABEL_24;
  }
  unsigned int v20 = a2;
  cstdlib_strcpy(v38, v19);
  cstdlib_strcat(*(char **)(*(void *)(a5 + 1064) + 184 * a2 + 120), "-");
  cstdlib_strncat(*(char **)(*(void *)(a5 + 1064) + 184 * a2 + 120), &__s2[HIWORD(v42)], (unsigned __int16)v42 - (unint64_t)HIWORD(v42));
LABEL_17:
  if (*(void *)(*(void *)(a5 + 1064) + 184 * v20 + 120))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v17) == 1) {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND regex rule %d FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v17) + 2));
    }
    else {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND normal rule FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, (uint64_t)__s2);
    }
  }
  return CompoundAccent;
}

uint64_t expandAndValidateCompoundsNN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a2 + 1072))
  {
    for (unint64_t i = 0; i < *(unsigned __int16 *)(a2 + 1072); ++i)
    {
      uint64_t v7 = *(const char **)(*(void *)(a2 + 1064) + 184 * i + 120);
      if (v7)
      {
        int v8 = *(_DWORD *)(a3 + 656);
        if (!v8)
        {
          if (!cstdlib_strncmp(v7, "B-", 2uLL)
            || !cstdlib_strncmp(*(const char **)(*(void *)(a2 + 1064) + 184 * i + 120), "I-", 2uLL))
          {
            continue;
          }
          int v8 = *(_DWORD *)(a3 + 656);
        }
        if (v8 != 1)
        {
          int v9 = *(const char **)(*(void *)(a2 + 1064) + 184 * i + 120);
          unint64_t v10 = *(const char **)(a3 + 640);
          size_t v11 = cstdlib_strlen(v10);
          if (cstdlib_strncmp(v9, v10, v11))
          {
            if (i)
            {
              unsigned __int16 v15 = i;
              while (1)
              {
                uint64_t v16 = *(const char **)(*(void *)(a2 + 1064) + 184 * v15 + 120);
                if (!v16) {
                  break;
                }
                uint64_t v17 = *(const char **)(a3 + 640);
                size_t v18 = cstdlib_strlen(v17);
                if (!cstdlib_strncmp(v16, v17, v18)) {
                  break;
                }
                if (!--v15) {
                  goto LABEL_12;
                }
              }
            }
            else
            {
LABEL_12:
              unsigned __int16 v15 = 0;
            }
            uint64_t v19 = *(const char **)(*(void *)(a2 + 1064) + 184 * v15 + 120);
            if (!v19)
            {
LABEL_24:
              uint64_t v24 = 184 * i;
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no start word for internal compound word : word index=%d compound tag=%s", v12, v13, v14, i);
LABEL_25:
              uint64_t v34 = *(void *)(*(void *)(a2 + 1064) + v24 + 120);
              if (v34)
              {
                heap_Free(*(void **)(a1 + 8), v34);
                *(void *)(*(void *)(a2 + 1064) + 184 * i + 120) = 0;
              }
              continue;
            }
            unsigned int v20 = *(const char **)(a3 + 640);
            size_t v21 = cstdlib_strlen(v20);
            int v22 = cstdlib_strncmp(v19, v20, v21);
            uint64_t v23 = *(void *)(a2 + 1064);
            if (v22)
            {
              uint64_t v24 = 184 * i;
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"compound word has no beginning tag : word index=%d compound tag=%s", v12, v13, v14, i);
              goto LABEL_25;
            }
            uint64_t v33 = *(void *)(v23 + 184 * v15 + 120);
            if (!v33) {
              goto LABEL_24;
            }
            cstdlib_strcat(*(char **)(v23 + 184 * i + 120), (const char *)(v33 + 1));
          }
          else
          {
            uint64_t v25 = *(const char **)(*(void *)(a2 + 1064) + 184 * i + 120);
            uint64_t v26 = *(const char **)(a3 + 640);
            size_t v27 = cstdlib_strlen(v26);
            if (!cstdlib_strncmp(v25, v26, v27))
            {
              unint64_t v31 = i + 1;
              unint64_t v32 = *(unsigned __int16 *)(a2 + 1072);
              if (i + 1 == v32
                || i + 1 < v32
                && ((uint64_t v35 = *(const char **)(*(void *)(a2 + 1064) + 184 * v31 + 120)) == 0
                 || (uint64_t v36 = *(const char **)(a3 + 640), v37 = cstdlib_strlen(v36), !cstdlib_strncmp(v35, v36, v37))
                 || !*(void *)(*(void *)(a2 + 1064) + 184 * v31 + 120)))
              {
                uint64_t v24 = 184 * i;
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"single word cannot be a compound word : word index=%d compound tag=%s", v28, v29, v30, i);
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t getWordIdxForMSPhrNN(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _WORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a2 + 1072))
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a2 + 1064);
    unint64_t v10 = (unsigned __int16 *)(v9 + 18);
    unint64_t v11 = 1;
    while (*(unsigned __int16 *)(v9 + 184 * v8 + 16) != a3)
    {
      ++v8;
      ++v11;
      v10 += 92;
      if (v8 >= *(unsigned __int16 *)(a2 + 1072)) {
        goto LABEL_5;
      }
    }
    *a5 = v8;
    *a6 = v8;
    LODWORD(v13) = *(unsigned __int16 *)(a2 + 1072);
    if (v8 >= v13)
    {
LABEL_12:
      uint64_t v12 = 2315264000;
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with end word : start position=%d start word=%d unknown end=%d", (uint64_t)a6, a7, a8, a3);
    }
    else
    {
      while (1)
      {
        int v15 = *v10;
        v10 += 92;
        int v14 = v15;
        if (a4 - 1 == v15 || v11 == v13 && v14 == a4) {
          return 0;
        }
        *a6 = v11;
        unint64_t v13 = *(unsigned __int16 *)(a2 + 1072);
        if (v11++ >= v13) {
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v12 = 2315264000;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with start word : start position=%d", (uint64_t)a6, a7, a8, a3);
  }
  return v12;
}

uint64_t addPHRRangeNN(uint64_t a1, unsigned int a2, unsigned int a3, char *__s, uint64_t a5)
{
  if (a2 > a3) {
    return 0;
  }
  unsigned __int16 v12 = a2;
  while (1)
  {
    unint64_t v13 = *(void **)(a1 + 8);
    int v14 = cstdlib_strlen(__s);
    uint64_t v15 = heap_Calloc(v13, 1, (v14 + 3));
    unsigned __int16 v20 = v12;
    *(void *)(*(void *)(a5 + 1064) + 184 * v12 + 88) = v15;
    if (!v15) {
      break;
    }
    if (cstdlib_strcmp(__s, "O"))
    {
      if (v12 == a2) {
        size_t v21 = "B-";
      }
      else {
        size_t v21 = "I-";
      }
      cstdlib_strcpy(*(char **)(*(void *)(a5 + 1064) + 184 * v12 + 88), v21);
      cstdlib_strcat(*(char **)(*(void *)(a5 + 1064) + 184 * v12 + 88), __s);
    }
    else
    {
      cstdlib_strcpy(*(char **)(*(void *)(a5 + 1064) + 184 * v12 + 88), __s);
    }
    *(_WORD *)(*(void *)(a5 + 1064) + 184 * v12++ + 96) = a2;
    if (a3 < (unsigned __int16)(v20 + 1)) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v5);
  return 2315264010;
}

uint64_t addTokenNN(uint64_t a1, unsigned __int16 *a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(unsigned __int16 *)(a4 + 1072);
  int v12 = *a2;
  if (!*(_WORD *)(a4 + 1072)) {
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  unsigned __int16 v14 = v11 + 1;
  unsigned int v15 = a2[1];
  uint64_t v16 = (unsigned __int16 *)(*(void *)(a4 + 1064) + 18);
  while (1)
  {
    unsigned int v17 = *(v16 - 1);
    if (v12 == v17) {
      unsigned __int16 v14 = v13;
    }
    unsigned int v18 = *v16;
    if (v15 == v18) {
      break;
    }
    if (v15 >= v17 && v15 < v18) {
      break;
    }
    v16 += 92;
    ++v13;
    int v12 = *a2;
    if (v11 == v13) {
      goto LABEL_14;
    }
  }
  if (v11 + 1 != v14)
  {
    uint64_t v26 = *(void **)(a1 + 8);
    int v27 = cstdlib_strlen(__s);
    uint64_t v28 = heap_Calloc(v26, 1, (v27 - 1));
    *(void *)(*(void *)(a4 + 1064) + 184 * v14 + 128) = v28;
    if (v28)
    {
      uint64_t v33 = (char *)v28;
      size_t v34 = cstdlib_strlen(__s + 1);
      cstdlib_strncpy(v33, __s + 1, v34 - 1);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v36);
      return 2315264010;
    }
  }
  else
  {
LABEL_14:
    uint64_t v20 = 2315264000;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)__s);
    if (*(_WORD *)(a4 + 1072))
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word[%d] %d,%d", v21, v22, v23, v25++);
        v24 += 184;
      }
      while (v25 < *(unsigned __int16 *)(a4 + 1072));
    }
  }
  return v20;
}

uint64_t doMapStrNN(uint64_t a1, const char **a2, char *__s)
{
  size_t v6 = cstdlib_strlen(__s);
  size_t v7 = cstdlib_strlen(*a2);
  unsigned int v8 = (char *)*a2;
  if (v6 <= v7) {
    goto LABEL_4;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  int v10 = cstdlib_strlen(__s);
  uint64_t v11 = heap_Realloc(v9, (uint64_t)v8, (v10 + 1));
  if (v11)
  {
    unsigned int v8 = (char *)v11;
    *a2 = (const char *)v11;
LABEL_4:
    cstdlib_strcpy(v8, __s);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v17);
  return 2315264010;
}

uint64_t doRetaggingnn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&v30[2] = 0;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d retagging rules", a6, a7, a8, *(unsigned __int16 *)(a2 + 88));
  if (!*(_WORD *)(a3 + 1072)) {
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t result = 0;
  while (1)
  {
    int v31 = 0;
    if (*(_WORD *)(a2 + 88)) {
      break;
    }
LABEL_12:
    if (++v11 >= (unint64_t)*(unsigned __int16 *)(a3 + 1072)) {
      return result;
    }
  }
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  while (1)
  {
    __int16 v29 = v11;
    unsigned int v28 = 3;
    *(_DWORD *)uint64_t v30 = 0;
    uint64_t result = matchMAPRULE2STR_TRuleNN(0, 0, 0, 0, a2, a3, *(void *)(a2 + 80) + v13, &v28, &v31);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v18 = v31;
    if (v31 == 1)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v15, v16, v17, v14);
      uint64_t result = doMapStrNN(a1, (const char **)(*(void *)(a3 + 1064) + 184 * v11 + 48), (char *)(*(void *)(a2 + 528)+ *(unsigned int *)(*(void *)(a2 + 536) + 4 * *(unsigned int *)(*(void *)(a2 + 80) + v13))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v19 = *(void **)(a1 + 8);
      unsigned __int16 v20 = cstdlib_strlen(*(const char **)(*(void *)(a3 + 1064) + 184 * v11 + 48));
      uint64_t v21 = (char *)heap_Calloc(v19, 1, v20 + 1);
      uint64_t v26 = *(void *)(a3 + 1064);
      *(void *)(v26 + 184 * v11 + 80) = v21;
      if (!v21)
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v27);
        return 2315264010;
      }
      cstdlib_strcpy(v21, *(const char **)(v26 + 184 * v11 + 48));
      uint64_t result = 0;
      int v18 = v31;
    }
    if (!v18)
    {
      ++v14;
      v13 += 32;
      if (v14 < *(unsigned __int16 *)(a2 + 88)) {
        continue;
      }
    }
    goto LABEL_12;
  }
}

uint64_t doSubtaggingNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 0;
}

uint64_t insert_NLU_infoNN(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v7 = a3;
  __int16 v8 = a2;
  if (a2 == a3)
  {
    if (a2 + 1 == *(unsigned __int16 *)(a5 + 1072)) {
      unsigned __int16 v7 = a2 + 1;
    }
    else {
      unsigned __int16 v7 = a2;
    }
  }
  if (a2 >= v7) {
    return 0;
  }
  uint64_t v10 = 184 * a2 + 88;
  uint64_t v11 = a2 + 1;
  while (1)
  {
    uint64_t v12 = *(const char **)(a4 + 8);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v13 = *(void *)(*(void *)(a5 + 1064) + v10);
    if (v13)
    {
      heap_Free(*(void **)(a1 + 8), v13);
      *(void *)(*(void *)(a5 + 1064) + v10) = 0;
      uint64_t v12 = *(const char **)(a4 + 8);
    }
    unint64_t v14 = *(void **)(a1 + 8);
    int v15 = cstdlib_strlen(v12);
    uint64_t v16 = (char *)heap_Calloc(v14, 1, (v15 + 1));
    *(void *)(*(void *)(a5 + 1064) + v10) = v16;
    if (!v16) {
      break;
    }
    cstdlib_strcpy(v16, *(const char **)(a4 + 8));
    *(_WORD *)(*(void *)(a5 + 1064) + v10 + 8) = v8;
LABEL_12:
    uint64_t v21 = *(const char **)(a4 + 56);
    if (v21)
    {
      uint64_t v22 = *(void *)(*(void *)(a5 + 1064) + v10 + 32);
      if (v22)
      {
        heap_Free(*(void **)(a1 + 8), v22);
        *(void *)(*(void *)(a5 + 1064) + v10 + 32) = 0;
        uint64_t v21 = *(const char **)(a4 + 56);
      }
      uint64_t v23 = *(void **)(a1 + 8);
      int v24 = cstdlib_strlen(v21);
      uint64_t v25 = (char *)heap_Calloc(v23, 1, (v24 + 1));
      *(void *)(*(void *)(a5 + 1064) + v10 + 32) = v25;
      if (!v25) {
        break;
      }
      cstdlib_strcpy(v25, *(const char **)(a4 + 56));
    }
    uint64_t v26 = *(const char **)(a4 + 40);
    if (v26)
    {
      int v27 = cstdlib_strlen(v26);
      unsigned int v28 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*(void *)(a5 + 1064) + v10 + 56), (v27 + 32) & 0xFFFFFFE0);
      if (!v28) {
        break;
      }
      __int16 v29 = v28;
      cstdlib_strcpy(v28, *(const char **)(a4 + 40));
      *(void *)(*(void *)(a5 + 1064) + v10 + 56) = v29;
    }
    uint64_t v30 = *(void *)(a4 + 72);
    if (v30)
    {
      *(void *)(*(void *)(a5 + 1064) + v10 + 64) = v30;
      int v31 = *(const char **)(a4 + 64);
      if (v31)
      {
        uint64_t v32 = *(void *)(a1 + 8);
        size_t v33 = cstdlib_strlen(v31);
        size_t v34 = (char *)heap_Alloc(v32, v33 + 1);
        *(void *)(*(void *)(a5 + 1064) + v10 + 72) = v34;
        if (!v34) {
          break;
        }
        cstdlib_strcpy(v34, *(const char **)(a4 + 64));
      }
    }
    v10 += 184;
    if (v7 == (unsigned __int16)v11++) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v37);
  return 2315264010;
}

uint64_t addSynChunkNN(uint64_t a1, char *__s, const char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a4;
  unsigned int v10 = *(unsigned __int16 *)(a6 + 1072);
  if (a4 <= a5 && v10 > a4 && v10 > a5)
  {
    uint64_t v17 = *(void **)(a1 + 8);
    int v18 = cstdlib_strlen(__s);
    int v19 = v18;
    if (a3)
    {
      int v20 = cstdlib_strlen(a3);
      uint64_t v21 = (char *)heap_Calloc(v17, 1, (v19 + v20 + 1));
      *(void *)(*(void *)(a6 + 1064) + 184 * v8 + 128) = v21;
      if (v21)
      {
        cstdlib_strcpy(v21, __s);
        cstdlib_strcat(*(char **)(*(void *)(a6 + 1064) + 184 * v8 + 128), a3);
        return 0;
      }
    }
    else
    {
      uint64_t v26 = (char *)heap_Calloc(v17, 1, (v18 + 1));
      *(void *)(*(void *)(a6 + 1064) + 184 * v8 + 128) = v26;
      if (v26)
      {
        cstdlib_strcpy(v26, __s);
        return 0;
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v27);
    return 2315264010;
  }
  uint64_t v12 = 2315264000;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"syntactic chunks out of order : fromWordIdx=%d toWordIdx=%d numWords=%d", a6, a7, a8, a4);
  return v12;
}

uint64_t resolvePHRNN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  if (*(_WORD *)(a3 + 1072))
  {
    unint64_t v11 = 0;
    uint64_t v12 = 88;
    do
    {
      if (v12 != 88)
      {
        uint64_t v13 = *(void *)(a3 + 1064);
        if (!*(void *)(v13 + v12))
        {
          unsigned int v14 = v11 - 1;
          int v15 = *(const char **)(v13 + 184 * (v11 - 1) + 88);
          if (v15)
          {
            unint64_t v16 = *(unsigned __int16 *)(v13 + v12 - 72);
            if (v16 >= 2 && *(unsigned char *)(a1 + (v16 - 1)) == 95)
            {
              uint64_t v17 = *(void **)(a2 + 8);
              int v18 = cstdlib_strlen(v15);
              int v19 = (char *)heap_Calloc(v17, 1, (v18 + 3));
              uint64_t v24 = *(void *)(a3 + 1064);
              *(void *)(v24 + v12) = v19;
              if (!v19) {
                goto LABEL_72;
              }
              cstdlib_strcpy(v19, *(const char **)(v24 + 184 * v14 + 88));
              if (cstdlib_strcmp(*(const char **)(*(void *)(a3 + 1064) + v12), "O")) {
                **(unsigned char **)(*(void *)(a3 + 1064) + v12) = 73;
              }
              uint64_t v25 = *(void **)(a2 + 8);
              int v26 = cstdlib_strlen(*(const char **)(*(void *)(a3 + 1064) + 184 * v14 + 48));
              unsigned int v27 = (char *)heap_Calloc(v25, 1, (v26 + 3));
              uint64_t v28 = *(void *)(a3 + 1064);
              *(void *)(v28 + v12 - 40) = v27;
              if (!v27)
              {
LABEL_72:
                uint64_t v91 = 2315264010;
                log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v98);
                goto LABEL_76;
              }
              cstdlib_strcpy(v27, *(const char **)(v28 + 184 * v14 + 48));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v29, v30, v31, v11);
            }
            else
            {
              int v32 = *(unsigned __int8 *)v15;
              if (v32 == 66)
              {
                v44 = *(void **)(a2 + 8);
                int v45 = cstdlib_strlen(v15);
                unsigned int v46 = (char *)heap_Calloc(v44, 1, (v45 + 3));
                uint64_t v47 = *(void *)(a3 + 1064);
                *(void *)(v47 + v12) = v46;
                if (!v46) {
                  goto LABEL_72;
                }
                cstdlib_strcpy(v46, *(const char **)(v47 + 184 * v14 + 88));
                **(unsigned char **)(*(void *)(a3 + 1064) + v12) = 73;
                int v48 = *(void **)(a2 + 8);
                int v49 = cstdlib_strlen(*(const char **)(*(void *)(a3 + 1064) + 184 * v14 + 48));
                v50 = (char *)heap_Calloc(v48, 1, (v49 + 3));
                uint64_t v51 = *(void *)(a3 + 1064);
                *(void *)(v51 + v12 - 40) = v50;
                if (!v50) {
                  goto LABEL_72;
                }
                cstdlib_strcpy(v50, *(const char **)(v51 + 184 * v14 + 48));
                log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v52, v53, v54, v11);
              }
              else if (v32 == 79 || v32 == 73)
              {
                size_t v33 = *(void **)(a2 + 8);
                int v34 = cstdlib_strlen(v15);
                uint64_t v35 = (char *)heap_Calloc(v33, 1, (v34 + 3));
                uint64_t v36 = *(void *)(a3 + 1064);
                *(void *)(v36 + v12) = v35;
                if (!v35) {
                  goto LABEL_72;
                }
                cstdlib_strcpy(v35, *(const char **)(v36 + 184 * v14 + 88));
                unsigned int v37 = *(void **)(a2 + 8);
                int v38 = cstdlib_strlen(*(const char **)(*(void *)(a3 + 1064) + 184 * v14 + 48));
                v39 = (char *)heap_Calloc(v37, 1, (v38 + 3));
                uint64_t v40 = *(void *)(a3 + 1064);
                *(void *)(v40 + v12 - 40) = v39;
                if (!v39) {
                  goto LABEL_72;
                }
                cstdlib_strcpy(v39, *(const char **)(v40 + 184 * v14 + 48));
                log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v41, v42, v43, v11);
              }
            }
          }
        }
      }
      ++v11;
      unint64_t v55 = *(unsigned __int16 *)(a3 + 1072);
      v12 += 184;
    }
    while (v11 < v55);
    if (!*(_WORD *)(a3 + 1072)) {
      goto LABEL_71;
    }
    unint64_t v56 = 0;
    uint64_t v57 = 88;
    do
    {
      if (!*(void *)(*(void *)(a3 + 1064) + v57))
      {
        if ((insert_NLU_infoNN(a2, (unsigned __int16)v56, (unsigned __int16)(v56 + 1), (uint64_t)&unk_264560D98, a3) & 0x80000000) != 0)
        {
          log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Failed to fill out PHR=B-NIL on word : word index=%d", a6, a7, a8, v56);
          goto LABEL_75;
        }
        LODWORD(v55) = *(unsigned __int16 *)(a3 + 1072);
      }
      ++v56;
      v57 += 184;
    }
    while (v56 < v55);
    if (!v55) {
      goto LABEL_71;
    }
    uint64_t v58 = 0;
    unsigned int v59 = (void *)(*(void *)(a3 + 1064) + 88);
    while (*v59)
    {
      ++v58;
      v59 += 23;
      if (v55 == v58)
      {
        unint64_t v60 = 0;
        uint64_t v61 = 88;
        do
        {
          if (!cstdlib_strncmp(*(const char **)(*(void *)(a3 + 1064) + v61), "I-", 2uLL))
          {
            uint64_t v65 = *(void *)(a3 + 1064);
            if (v60)
            {
              if (cstdlib_strcmp(*(const char **)(v65 + 184 * (v60 - 1) + 88), *(const char **)(v65 + v61)))
              {
                cstdlib_strcpy(__dst, *(const char **)(*(void *)(a3 + 1064) + v61));
                __dst[0] = 66;
                if (cstdlib_strcmp(*(const char **)(*(void *)(a3 + 1064) + 184 * (v60 - 1) + 88), __dst))
                {
                  **(unsigned char **)(*(void *)(a3 + 1064) + v61) = 66;
                  log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v66, v67, v68, v60);
                }
              }
            }
            else
            {
              **(unsigned char **)(v65 + 88) = 66;
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v62, v63, v64, 0);
            }
          }
          ++v60;
          v61 += 184;
        }
        while (v60 < *(unsigned __int16 *)(a3 + 1072));
        if (!*(_WORD *)(a3 + 1072)) {
          return 0;
        }
        int v69 = 0;
        uint64_t v70 = *(void *)(a3 + 1064);
        while (2)
        {
          cstdlib_strcpy(__dst, *(const char **)(v70 + 184 * (unsigned __int16)v69 + 88));
          if (!cstdlib_strncmp(__dst, "B-", 2uLL)) {
            cstdlib_strcpy(__dst, (const char *)(*(void *)(*(void *)(a3 + 1064) + 184 * (unsigned __int16)v69 + 88) + 2));
          }
          LODWORD(v74) = v69;
          if (*(unsigned __int16 *)(a3 + 1072) > (unsigned __int16)v69)
          {
            uint64_t v75 = 184 * (unsigned __int16)v69 + 88;
            unint64_t v74 = (unsigned __int16)v69;
            do
            {
              long long v76 = *(const char **)(*(void *)(a3 + 1064) + v75);
              if (!v76
                || cstdlib_strcmp(v76, __dst)
                && (cstdlib_strlen(*(const char **)(*(void *)(a3 + 1064) + v75)) < 3
                 || cstdlib_strcmp((const char *)(*(void *)(*(void *)(a3 + 1064) + v75) + 2), __dst)
                 || cstdlib_strncmp(*(const char **)(*(void *)(a3 + 1064) + v75), "I-", 2uLL))
                && *(unsigned __int16 *)(*(void *)(a3 + 1064) + v75 + 8) != *(unsigned __int16 *)(*(void *)(a3 + 1064)
                                                                                                  + 184 * (unsigned __int16)v69
                                                                                                  + 96))
              {
                break;
              }
              ++v74;
              v75 += 184;
            }
            while (v74 < *(unsigned __int16 *)(a3 + 1072));
          }
          int v77 = (unsigned __int16)v74 - 1;
          uint64_t v78 = (unsigned __int16)v69;
          if (v77 > (unsigned __int16)v69)
          {
            int v79 = 0;
            int v80 = v69;
            unsigned __int16 v81 = v69;
            do
            {
              if (*(_DWORD *)(*(void *)(a3 + 1064) + 184 * (unsigned __int16)v80 + 100) == 1)
              {
                uint64_t v82 = v81;
                log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] add syn chunk %s%s from %d to %d", v71, v72, v73, (uint64_t)__dst);
                uint64_t v85 = addSynChunkNN(a2, __dst, "-P", v82, (unsigned __int16)v80, a3, v83, v84);
                if ((v85 & 0x80000000) != 0) {
                  return v85;
                }
                ++v80;
                int v79 = 1;
                unsigned __int16 v81 = v80;
              }
              else
              {
                ++v80;
              }
            }
            while (v77 > (unsigned __int16)v80);
            uint64_t v78 = (unsigned __int16)v69;
            if (v79)
            {
              if ((unsigned __int16)v74 > v81)
              {
                uint64_t v78 = v81;
                log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] add syn chunk %s%s from %d to %d", v71, v72, v73, (uint64_t)__dst);
                unsigned int v88 = (unsigned __int16)(v74 - 1);
                uint64_t v89 = a2;
                long long v90 = "-P";
LABEL_65:
                uint64_t v85 = addSynChunkNN(v89, __dst, v90, v78, v88, a3, v86, v87);
                if ((v85 & 0x80000000) != 0) {
                  return v85;
                }
              }
              uint64_t v91 = 0;
              uint64_t v70 = *(void *)(a3 + 1064);
              *(_DWORD *)(v70 + 184 * (unsigned __int16)v69 + 136) = 1;
              *(_DWORD *)(v70 + 184 * v77 + 140) = 1;
              if ((unsigned __int16)v69 == (unsigned __int16)v74) {
                int v69 = v74 + 1;
              }
              else {
                int v69 = v74;
              }
              unsigned int v92 = *(unsigned __int16 *)(a3 + 1072);
              if ((unsigned __int16)v69 >= v92) {
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v71, v72, v73, (uint64_t)__dst);
        unsigned int v88 = (unsigned __int16)(v74 - 1);
        uint64_t v89 = a2;
        long long v90 = 0;
        goto LABEL_65;
      }
    }
    log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v58);
LABEL_75:
    uint64_t v91 = 2315264000;
  }
  else
  {
LABEL_71:
    uint64_t v91 = 0;
  }
LABEL_76:
  unsigned int v92 = *(unsigned __int16 *)(a3 + 1072);
LABEL_77:
  if (v92)
  {
    unint64_t v93 = 0;
    uint64_t v94 = *(void *)(a3 + 1064);
    uint64_t v95 = 88;
    do
    {
      uint64_t v96 = *(void *)(v94 + v95);
      if (v96)
      {
        heap_Free(*(void **)(a2 + 8), v96);
        uint64_t v94 = *(void *)(a3 + 1064);
        *(void *)(v94 + v95) = 0;
        LOWORD(v92) = *(_WORD *)(a3 + 1072);
      }
      ++v93;
      v95 += 184;
    }
    while (v93 < (unsigned __int16)v92);
  }
  return v91;
}

uint64_t addMarkerTypeNN(uint64_t a1, char *__s2, const char *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14 = *(unsigned __int16 *)(a5 + 74);
  uint64_t v15 = 8 * v14;
  do
  {
    if (v14 >= *(unsigned __int16 *)(a5 + 72) || (uint64_t v16 = *(void *)(a5 + 528)) == 0)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Ignoring marker :%s, as not in DEFMAPPING list", a6, a7, a8, (uint64_t)__s2);
      return 0;
    }
    int v17 = cstdlib_strcmp((const char *)(v16+ *(unsigned int *)(*(void *)(a5 + 536) + 4 * *(unsigned int *)(*(void *)(a5 + 64) + v15))), __s2);
    ++v14;
    v15 += 8;
  }
  while (v17);
  if ((_WORD)v14 != 1) {
    return 0;
  }
  int v18 = *(void **)(a1 + 8);
  int v19 = cstdlib_strlen(a3);
  uint64_t v20 = (char *)heap_Calloc(v18, 1, (v19 + 1));
  *(void *)(*(void *)(a6 + 1064) + 184 * a4 + 128) = v20;
  if (v20)
  {
    cstdlib_strcpy(v20, a3);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v26);
  return 2315264010;
}

uint64_t getNNSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v115 = 0;
  unsigned __int16 v114 = 0;
  uint64_t inserted = *(void *)(a5 + 1088);
  if (!inserted) {
    return inserted;
  }
  uint64_t v6 = a5;
  unsigned int v11 = *(unsigned __int16 *)(a5 + 1096);
  if (!cstdlib_strcmp(*(const char **)(a5 + 1088), "")) {
    return 0;
  }
  __int16 v12 = cstdlib_strlen(*(const char **)(v6 + 1088));
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)(v12 + 2));
  if (!v13)
  {
    uint64_t inserted = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v90);
    return inserted;
  }
  int v18 = (char *)v13;
  unsigned int v93 = v11;
  uint64_t v91 = a3;
  uint64_t v92 = a4;
  unsigned __int16 v116 = 0;
  __int16 v113 = 0;
  int v112 = 0;
  v111 = 0;
  unsigned int v110 = 0;
  __int16 v109 = 0;
  if (!*(_WORD *)(v6 + 1072))
  {
LABEL_79:
    uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 104))(v91, v92, 2, v93, &v116);
    if ((v73 & 0x80000000) != 0)
    {
LABEL_91:
      uint64_t inserted = v73;
    }
    else
    {
      while (v116)
      {
        uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(v91, v92);
        if ((v73 & 0x80000000) != 0) {
          goto LABEL_91;
        }
        if (v112 == 6)
        {
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, __int16 *))(a2 + 168))(v91, v92, v116, 1, 1, &v110, &v113);
          if ((v73 & 0x80000000) != 0) {
            goto LABEL_91;
          }
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a2 + 168))(v91, v92, v116, 2, 1, (char *)&v110 + 2, &v113);
          if ((v73 & 0x80000000) != 0) {
            goto LABEL_91;
          }
          if ((unsigned __int16)v110 > HIWORD(v110))
          {
            uint64_t inserted = 2315271857;
            goto LABEL_92;
          }
          uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a2 + 176))(v91, v92, v116, 4, &v111, &v113);
          if ((v73 & 0x80000000) != 0) {
            goto LABEL_91;
          }
          if (cstdlib_strcmp(v111, "_PR_"))
          {
            uint64_t v81 = addTokenNN(a1, (unsigned __int16 *)&v110, v111, v6, v77, v78, v79, v80);
            if ((v81 & 0x80000000) != 0)
            {
              uint64_t inserted = v81;
              if (v81 != -1979703296) {
                goto LABEL_92;
              }
            }
          }
        }
        uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a2 + 120))(v91, v92, v116, &v116);
        if ((v73 & 0x80000000) != 0) {
          goto LABEL_91;
        }
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Added words information", v74, v75, v76, 0);
      uint64_t inserted = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(a2 + 176))(v91, v92, v93, 1, &v115, &v114);
      if ((inserted & 0x80000000) == 0)
      {
        unsigned __int16 v83 = v114;
        if (v114)
        {
          int v84 = 0;
          unsigned __int16 v85 = 0;
          do
          {
            if (*(_DWORD *)(v115 + 32 * v85) == 21)
            {
              int DomainFromPausingDefs = getDomainFromPausingDefs(v6 + 1104, *(char **)(v115 + 32 * v85 + 24), &v109);
              unsigned __int16 v83 = v114;
              if (DomainFromPausingDefs == 1)
              {
                unsigned __int16 v87 = v85 + 1;
                if (v114 > (unsigned __int16)(v85 + 1))
                {
                  uint64_t v88 = a1;
                  while (1)
                  {
                    int v89 = v87;
                    if (*(_DWORD *)(v115 + 32 * v87) == 21)
                    {
                      if (cstdlib_strcmp(*(const char **)(v115 + 32 * v85 + 24), *(const char **)(v115 + 32 * v87 + 24)))
                      {
                        break;
                      }
                    }
                    unsigned __int16 v87 = v89 + 1;
                    unsigned __int16 v83 = v114;
                    if (v114 <= (unsigned __int16)(v89 + 1)) {
                      goto LABEL_108;
                    }
                  }
                  unsigned __int16 v83 = v114;
                  unsigned __int16 v85 = v89 - (v89 + 1 != v84);
LABEL_108:
                  a1 = v88;
                }
              }
            }
            int v84 = ++v85;
          }
          while (v85 < v83);
        }
      }
    }
    goto LABEL_92;
  }
  unint64_t v19 = 0;
  uint64_t v94 = v6 + 1104;
  uint64_t v95 = a2;
  uint64_t v104 = v6;
  uint64_t v105 = inserted;
  uint64_t v97 = a1;
  uint64_t v96 = (char *)v13;
  while (1)
  {
    uint64_t v20 = *(void *)(v6 + 1064) + 184 * v19;
    *(void *)(v20 + 80) = 0;
    *(void *)(v20 + 88) = 0;
    *(void *)(v20 + 120) = 0;
    *(void *)(v20 + 128) = 0;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    unsigned int v110 = *(_DWORD *)(v20 + 16);
    unint64_t v21 = v110;
    unint64_t v22 = (unint64_t)v110 >> 16;
    cstdlib_strncpy(v18, (const char *)(inserted + (unsigned __int16)v21), (v21 >> 16) - (unsigned __int16)v21);
    v18[v22 - (unsigned __int16)v110] = 0;
    if (v22 == (unsigned __int16)v21)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v23, v24, v25, (unsigned __int16)v21);
      goto LABEL_75;
    }
    BOOL v26 = doesWordEndInComma(v18);
    uint64_t v27 = *(void *)(v6 + 1064);
    if (v26) {
      *(_DWORD *)(v27 + 184 * *(unsigned __int16 *)(v6 + 1072) - 84) = 1;
    }
    uint64_t v28 = *(const char **)(v27 + 184 * v19 + 40);
    if (v28) {
      break;
    }
LABEL_75:
    ++v19;
    uint64_t inserted = v105;
    if (v19 >= *(unsigned __int16 *)(v6 + 1072)) {
      goto LABEL_79;
    }
  }
  long long v120 = 0u;
  long long v121 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v117 = 0u;
  uint64_t v29 = *(void **)(a1 + 8);
  int v30 = cstdlib_strlen(v28);
  uint64_t v31 = (char *)heap_Calloc(v29, 1, (v30 + 1));
  if (!v31)
  {
LABEL_95:
    uint64_t inserted = 2315264010;
    a1 = v97;
    log_OutPublic(*(void *)(v97 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v32, v33, v34, v35, v90);
    int v18 = v96;
    goto LABEL_92;
  }
  uint64_t v36 = v31;
  unsigned int v98 = v28;
  cstdlib_strcpy(v31, v28);
  for (unint64_t i = (unsigned __int8 *)&v36[cstdlib_strlen(v36) - 1]; i >= (unsigned __int8 *)v36; --i)
  {
    unsigned int v38 = *i;
    BOOL v39 = v38 > 0x3B;
    uint64_t v40 = (1 << v38) & 0x800000100002600;
    if (v39 || v40 == 0) {
      break;
    }
    unsigned __int8 *i = 0;
  }
  uint64_t v42 = 0;
  v108 = 0;
  v106 = 0;
  long long v107 = 0uLL;
  v102 = 0;
  v103 = 0;
  v99 = 0;
  uint64_t v100 = 0;
  uint64_t v43 = 0;
  uint64_t v101 = 0;
  v44 = (char *)v36;
  do
  {
    int v45 = cstdlib_strchr(v44, 59);
    unsigned int v46 = v45;
    if (v45) {
      *int v45 = 0;
    }
    uint64_t v47 = cstdlib_strchr(v44, 58);
    int v48 = v47;
    if (v47)
    {
      *uint64_t v47 = 0;
      int v49 = v47 + 1;
    }
    else
    {
      int v49 = "null";
    }
    if (cstdlib_strcmp(v44, "POS"))
    {
      if (cstdlib_strcmp(v44, "PHR"))
      {
        if (cstdlib_strcmp(v44, "BND"))
        {
          if (!cstdlib_strcmp(v44, "BNDSHAPE"))
          {
            uint64_t inserted = 0;
            v106 = v49;
            goto LABEL_51;
          }
          if (!cstdlib_strcmp(v44, "S_POI"))
          {
            uint64_t inserted = 0;
            uint64_t v54 = "B";
LABEL_50:
            *((void *)&v107 + 1) = v54;
            *(void *)&long long v107 = v49;
            goto LABEL_51;
          }
          if (!cstdlib_strcmp(v44, "I_POI"))
          {
            uint64_t inserted = 0;
            uint64_t v54 = "I";
            goto LABEL_50;
          }
          if (!cstdlib_strcmp(v44, "E_POI"))
          {
            uint64_t inserted = 0;
            uint64_t v54 = "S";
            if (!*((void *)&v107 + 1)) {
              uint64_t v54 = "E";
            }
            goto LABEL_50;
          }
          if (cstdlib_strcmp(v44, "PRM"))
          {
            int v53 = *(_DWORD *)(v104 + 1760);
            if (!v53)
            {
              if (!cstdlib_strcmp(v44, "COMP"))
              {
                uint64_t inserted = 0;
                v102 = v49;
                goto LABEL_51;
              }
              int v53 = *(_DWORD *)(v104 + 1760);
            }
            if (v53 == 1 && !cstdlib_strcmp(v44 + 1, "_COMP"))
            {
              unint64_t v55 = *(void **)(v97 + 8);
              int v56 = cstdlib_strlen(v49);
              uint64_t v57 = heap_Calloc(v55, 1, (v56 + 3));
              if (!v57) {
                goto LABEL_95;
              }
              uint64_t v58 = (char *)v57;
              if (cstdlib_strcmp(v44, "S_COMP")) {
                unsigned int v59 = "I-";
              }
              else {
                unsigned int v59 = "B-";
              }
              cstdlib_strcpy(v58, v59);
              cstdlib_strcat(v58, v49);
              unint64_t v60 = v58;
              uint64_t inserted = 0;
              uint64_t v101 = (uint64_t)v60;
              v102 = v60;
            }
            else
            {
              if (!v48 || v48 <= v44 + 1) {
                goto LABEL_41;
              }
              if (!cstdlib_strcmp(v44 + 1, "_CLASS"))
              {
                uint64_t inserted = 0;
                v99 = v49;
                goto LABEL_51;
              }
              if (!cstdlib_strcmp(v44 + 1, "_PUNC"))
              {
                uint64_t v61 = v100;
                if (!v100)
                {
                  uint64_t v62 = *(void **)(v97 + 8);
                  int v63 = cstdlib_strlen(v98);
                  uint64_t v64 = (char *)heap_Calloc(v62, 1, (v63 + 1));
                  if (!v64)
                  {
                    uint64_t inserted = 2315264010;
                    a1 = v97;
                    log_OutPublic(*(void *)(v97 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v65, v66, v67, v68, v90);
                    uint64_t v69 = (uint64_t)v36;
                    a2 = v95;
LABEL_71:
                    heap_Free(*(void **)(a1 + 8), v69);
                    goto LABEL_72;
                  }
                  uint64_t v61 = v64;
                  cstdlib_strcpy(v64, "");
                }
                *int v48 = 58;
                uint64_t v100 = v61;
                hlp_NLUStrJoin(v61, v44);
                uint64_t inserted = 0;
              }
              else
              {
LABEL_41:
                uint64_t inserted = addMarkerTypeNN(v97, v44, v49, (unsigned __int16)v19, v94, v104, v51, v52);
              }
            }
          }
          else
          {
            uint64_t inserted = 0;
            v103 = v49;
          }
        }
        else
        {
          uint64_t inserted = 0;
          v108 = v49;
        }
      }
      else
      {
        uint64_t inserted = 0;
        uint64_t v42 = v49;
      }
    }
    else
    {
      uint64_t inserted = 0;
      uint64_t v43 = v49;
    }
LABEL_51:
    if (!v46) {
      break;
    }
    v44 = v46 + 1;
  }
  while ((inserted & 0x80000000) == 0);
  uint64_t v69 = (uint64_t)v100;
  *(void *)&long long v120 = v100;
  *((void *)&v120 + 1) = v102;
  *(void *)&long long v119 = v103;
  *((void *)&v119 + 1) = v99;
  long long v121 = v107;
  *(void *)&long long v118 = v108;
  *((void *)&v118 + 1) = v106;
  *(void *)&long long v117 = v43;
  *((void *)&v117 + 1) = v42;
  a1 = v97;
  log_OutText(*(void *)(v97 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"parsed NLU %s[%d,%d] -> POS=%s, PHR=%s, BND=%s, BNDSHAPE=%s, PRM=%s, CLASS=%s, PUNC=%s, COMP=%s, POIClass=%s, POIPosi=%s", v50, v51, v52, (uint64_t)v98);
  a2 = v95;
  if ((inserted & 0x80000000) == 0)
  {
    if (!v43) {
      log_OutText(*(void *)(v97 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"missing POS in NLU string: arg=%s", v70, v71, v72, (uint64_t)v36);
    }
    uint64_t inserted = insert_NLU_infoNN(v97, (unsigned __int16)v19, (unsigned __int16)(v19 + 1), (uint64_t)&v117, v104);
  }
  heap_Free(*(void **)(v97 + 8), (uint64_t)v36);
  if (v100) {
    goto LABEL_71;
  }
LABEL_72:
  int v18 = v96;
  uint64_t v6 = v104;
  if (v101) {
    heap_Free(*(void **)(a1 + 8), v101);
  }
  if ((inserted & 0x80000000) == 0) {
    goto LABEL_75;
  }
LABEL_92:
  heap_Free(*(void **)(a1 + 8), (uint64_t)v18);
  return inserted;
}

uint64_t recursiveFindSplitNN(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, unsigned int a7)
{
  uint64_t v9 = result;
  if (a2 <= a3)
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
    do
    {
      v10 += *(_WORD *)(result + 2 * v11);
      if (a4 >> 1 <= v10) {
        break;
      }
      ++v11;
    }
    while (a3 >= v11);
  }
  else
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
  }
  if (a7 <= v10 && (int)(a4 - v10) >= (int)a7)
  {
    recursiveFindSplitNN(result);
    uint64_t result = recursiveFindSplitNN(v9);
    *(_WORD *)(a5 + 2 * (unsigned __int16)(*a6)++) = v11;
  }
  return result;
}

uint64_t getDocumentClassNN(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 1072)) {
    return 0;
  }
  __int16 v2 = 0;
  while (1)
  {
    int v3 = v2;
    uint64_t v4 = *(char **)(*(void *)(a1 + 1064) + 184 * v2 + 144);
    if (v4)
    {
      if (cstdlib_strstr(v4, "joyfulstyle")) {
        return 1;
      }
      unsigned int v5 = *(char **)(*(void *)(a1 + 1064) + 184 * v3 + 144);
      if (v5)
      {
        if (cstdlib_strstr(v5, "didacticstyle")) {
          return 2;
        }
        uint64_t v6 = *(char **)(*(void *)(a1 + 1064) + 184 * v3 + 144);
        if (v6)
        {
          if (cstdlib_strstr(v6, "neutralstyle")) {
            break;
          }
        }
      }
    }
    __int16 v2 = v3 + 1;
    if (*(unsigned __int16 *)(a1 + 1072) <= (__int16)(v3 + 1)) {
      return 0;
    }
  }
  return 3;
}

uint64_t nnpuncPhrasing(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int16 *a5, const char *a6, char *__s)
{
  unsigned __int16 v7 = __s;
  if (cstdlib_strchr(__s, 44)) {
  int DocumentClassNN = getDocumentClassNN(a2);
  }
  unint64_t v19 = a5 + 25;
  uint64_t v20 = a5 + 15;
  unint64_t v21 = a5 + 35;
  if (DocumentClassNN == 1) {
    unint64_t v21 = a5 + 5;
  }
  if (DocumentClassNN != 2) {
    uint64_t v20 = v21;
  }
  if (DocumentClassNN != 3) {
    unint64_t v19 = v20;
  }
  unsigned int v22 = *v19;
  if (v22) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = 9;
  }
  if (!*(void *)(a2 + 1088))
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"%s\n", v16, v17, v18, (uint64_t)"input parameter: sent is NULL");
    return 0;
  }
  if (*(_WORD *)(a2 + 1072))
  {
    unint64_t v24 = 0;
    uint64_t v25 = 100;
    while (1)
    {
      int v26 = doesWordEndInCommaNN(*(void *)(*(void *)(a2 + 1064) + v25 - 36), a6);
      uint64_t v27 = *(void *)(a2 + 1064);
      if ((v26 || *(_DWORD *)(v27 + v25) == 1 && *(unsigned char *)(v27 + v25 + 4))
        && *(_DWORD *)(v27 + v25 + 8)
        && *(_WORD *)(a2 + 1072))
      {
        *(unsigned char *)(v27 + v25 - 24) = 4;
      }
      if (*(_DWORD *)(v27 + v25) == 1)
      {
        uint64_t v28 = cstdlib_strchr(v7, *(char *)(v27 + v25 + 4));
        uint64_t v27 = *(void *)(a2 + 1064);
        if (v28)
        {
          if (*(unsigned char *)(v27 + v25 + 4) && !*(_DWORD *)(v27 + v25 + 8)) {
            *(unsigned char *)(v27 + v25 - 24) = 3;
          }
        }
      }
      uint64_t v29 = *(const char **)(v27 + v25 + 52);
      if (!v29) {
        goto LABEL_35;
      }
      if (cstdlib_strcmp(v29, "B") && cstdlib_strcmp(*(const char **)(*(void *)(a2 + 1064) + v25 + 52), "S")) {
        break;
      }
      if (v25 != 100)
      {
        uint64_t v31 = (unsigned char *)(*(void *)(a2 + 1064) + 184 * (v24 - 1) + 76);
LABEL_34:
        *uint64_t v31 = 4;
      }
LABEL_35:
      ++v24;
      v25 += 184;
      if (v24 >= *(unsigned __int16 *)(a2 + 1072)) {
        goto LABEL_36;
      }
    }
    if (cstdlib_strcmp(*(const char **)(*(void *)(a2 + 1064) + v25 + 52), "E")) {
      goto LABEL_35;
    }
    uint64_t v30 = *(void *)(a2 + 1064) + v25;
    if (*(_DWORD *)(v30 + 76) < v23) {
      goto LABEL_35;
    }
    uint64_t v31 = (unsigned char *)(v30 - 24);
    goto LABEL_34;
  }
LABEL_36:
  printPhrasesNN(a1, a2, v13, v14, v15, v16, v17, v18);
  uint64_t v32 = heap_Calloc(*(void **)(a1 + 8), 1024, 2);
  if (v32)
  {
    uint64_t v39 = v32;
    printPhrasesNN(a1, a2, v33, v34, v35, v36, v37, v38);
    heap_Free(*(void **)(a1 + 8), v39);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v35, v36, v37, v38, v41);
  return 2315264010;
}

size_t doesWordEndInCommaNN(size_t result, const char *a2)
{
  *(_DWORD *)__s = 0;
  if (result)
  {
    int v3 = (char *)result;
    uint64_t result = cstdlib_strlen((const char *)result);
    if (result)
    {
      __int16 v4 = Utf8_Utf8NbrOfSymbols(a2);
      int v5 = (unsigned __int16)(v4 - 1);
      if (v4 != 1)
      {
        unsigned __int16 v6 = 0;
        do
        {
          unsigned __int16 v7 = v6;
          if ((utf8_getUTF8Char((uint64_t)a2, v6, __s) & 0x80000000) != 0) {
            break;
          }
          __int16 v8 = cstdlib_strlen(__s);
          if (cstdlib_strstr(v3, __s)) {
            return 1;
          }
          unsigned __int16 v6 = v7 + v8;
          --v5;
        }
        while (v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t printPhrasesNN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a2 + 1072))
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = log_OutText(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\t\t%c\n", a6, a7, a8, *(void *)(*(void *)(a2 + 1064) + v10 + 56));
      ++v11;
      v10 += 184;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 1072));
  }
  return result;
}

uint64_t updateLingdbNNPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, const char *a7, int a8)
{
  LODWORD(v8) = a8;
  uint64_t v122 = *MEMORY[0x263EF8340];
  __s1 = 0;
  uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 32, 1);
  if (v16)
  {
    unint64_t v21 = (char *)v16;
    int v116 = 0;
    int v115 = 0;
    unsigned int v114 = 0;
    __int16 v113 = 0;
    int v111 = 0;
    unsigned int v112 = 0;
    uint64_t v110 = 0;
    __int16 v109 = 0;
    uint64_t v22 = *(unsigned __int16 *)(a5 + 1096);
    uint64_t v105 = a5;
    uint64_t v104 = *(char **)(a5 + 1088);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, __int16 *))(a2 + 176))(a3, a4, v22, 1, &v110, &v109);
    if ((v23 & 0x80000000) != 0)
    {
      return v23;
    }
    else
    {
      cstdlib_strcpy(__dst, "");
      uint64_t v101 = a2;
      uint64_t v107 = a3;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 104))(a3, a4, 2, v22, (char *)&v116 + 2);
      if ((v24 & 0x80000000) != 0)
      {
        uint64_t v28 = a1;
      }
      else
      {
        unsigned __int16 v25 = HIWORD(v116);
        if (HIWORD(v116))
        {
          uint64_t v97 = a7;
          int v99 = v8;
          unsigned __int16 v26 = 0;
          LOWORD(v8) = 0;
          int v98 = a6;
          uint64_t v106 = a4;
          uint64_t v27 = a3;
          uint64_t v28 = a1;
          uint64_t v29 = v101;
          uint64_t v103 = v28;
          while (1)
          {
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(v29 + 168))(v27, a4, v25, 0, 1, &v114, (char *)&v115 + 2);
            if ((v24 & 0x80000000) != 0) {
              goto LABEL_136;
            }
            if (v114 <= 0xA && ((1 << v114) & 0x610) != 0) {
              break;
            }
LABEL_119:
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(v29 + 120))(v27, a4, HIWORD(v116), (char *)&v116 + 2);
            if ((v24 & 0x80000000) != 0) {
              goto LABEL_136;
            }
            unsigned __int16 v25 = HIWORD(v116);
            if (!HIWORD(v116)) {
              goto LABEL_129;
            }
          }
          uint64_t v31 = *(void *)(a5 + 1064);
          unsigned int v112 = *(_DWORD *)(v31 + 184 * v26 + 16);
          if ((unsigned __int16)v112 == HIWORD(v112))
          {
            uint64_t v32 = v21;
            goto LABEL_118;
          }
          HIWORD(v111) = 0;
          if (v26 | (unsigned __int16)v8 && (unsigned __int16)v8 >= v26)
          {
            __dst[0] = 0;
          }
          else
          {
            uint64_t v33 = *(unsigned __int16 *)(a5 + 1072);
            LOWORD(v8) = v26;
            if (v33 > v26)
            {
              uint64_t v34 = (_DWORD *)(v31 + 184 * v26 + 112);
              uint64_t v8 = v26;
              while (*((unsigned __int8 *)v34 - 36) - 3 >= 2 && !*v34)
              {
                ++v8;
                v34 += 46;
                if (v33 == v8) {
                  goto LABEL_23;
                }
              }
            }
            if (v33 == (unsigned __int16)v8)
            {
LABEL_23:
              __int16 v113 = *(_WORD *)(v31 + 184 * *(unsigned __int16 *)(a5 + 1072) - 166);
              if (*(void *)(a5 + 1768)) {
                uint64_t v35 = *(const char **)(a5 + 1768);
              }
              else {
                uint64_t v35 = "T";
              }
              LOWORD(v8) = v33;
            }
            else
            {
              __int16 v113 = *(_WORD *)(v31 + 184 * (unsigned __int16)v8 + 18);
              if ((unsigned __int16)v8 + 1 == v33)
              {
                if (*(void *)(a5 + 1768)) {
                  uint64_t v35 = *(const char **)(a5 + 1768);
                }
                else {
                  uint64_t v35 = "T";
                }
              }
              else
              {
                uint64_t v35 = "P";
              }
            }
            cstdlib_strcpy(__dst, v35);
            if (v26)
            {
              if (*(unsigned char *)(*(void *)(a5 + 1064) + 184 * (v26 - 1) + 76) == 3) {
                __int16 v36 = 2;
              }
              else {
                __int16 v36 = 1;
              }
            }
            else
            {
              __int16 v36 = 0;
            }
            HIWORD(v111) = v36;
            uint64_t v27 = v107;
            if (__dst[0])
            {
              LOWORD(v111) = 0;
              uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v29 + 88))(v107, a4, HIWORD(v116), &v116);
              if ((v37 & 0x80000000) != 0
                || (unsigned int v114 = 15,
                    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 0, 1, &v114, &v115), (v37 & 0x80000000) != 0)|| (uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 1, 1, &v112, &v115), (v37 & 0x80000000) != 0)|| (uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(v29 + 160))(v107,
                            a4,
                            (unsigned __int16)v116,
                            2,
                            1,
                            &v113,
                            &v115),
                    (v37 & 0x80000000) != 0))
              {
LABEL_135:
                uint64_t v24 = v37;
                goto LABEL_136;
              }
              uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(v29 + 160);
              uint64_t v39 = (unsigned __int16)v116;
              __int16 v40 = cstdlib_strlen(__dst);
              uint64_t v41 = v38(v107, a4, v39, 4, (unsigned __int16)(v40 + 1), __dst, &v115);
              if ((v41 & 0x80000000) != 0
                || (uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 7, 1, (char *)&v111 + 2, &v115), (v41 & 0x80000000) != 0))
              {
                uint64_t v24 = v41;
                uint64_t v32 = v21;
                goto LABEL_137;
              }
              uint64_t v27 = v107;
              uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(v29 + 160))(v107, a4, (unsigned __int16)v116, 8, 1, &v111, &v115);
              a5 = v105;
              if ((v37 & 0x80000000) != 0) {
                goto LABEL_135;
              }
            }
          }
          LOWORD(v111) = 0;
          uint64_t v42 = *(void *)(a5 + 1064);
          if (*(unsigned char *)(v42 + 184 * v26 + 76) == 4)
          {
            if (*(unsigned __int16 *)(a5 + 1072) - 1 != v26)
            {
              int v43 = cstdlib_strlen(*(const char **)(v42 + 184 * v26 + 56));
              LOWORD(v111) = 100;
              if (doesWordEndInCommaNN(*(void *)(*(void *)(a5 + 1064) + 184 * v26 + 56), v97)
                || (uint64_t v44 = *(void *)(a5 + 1064), *(_DWORD *)(v44 + 184 * v26 + 100))
                || *(unsigned char *)(*(void *)(v44 + 184 * v26 + 56) + (v43 - 1)) == 46)
              {
                int v45 = v98;
                LOWORD(v111) = v98;
              }
              else
              {
                int v45 = (unsigned __int16)v111;
              }
              uint64_t v27 = v107;
              if (v45) {
                goto LABEL_55;
              }
            }
            uint64_t v42 = *(void *)(a5 + 1064);
          }
          if (*(_DWORD *)(v42 + 184 * v26 + 112)) {
            LOWORD(v111) = v98;
          }
LABEL_55:
          uint64_t v46 = v27;
          uint64_t v47 = HIWORD(v116);
          __int16 v119 = 0;
          long long v118 = 0;
          __int16 v117 = 0;
          uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(v29 + 184))(v46, a4, HIWORD(v116), 18, &v119);
          uint64_t v24 = v48;
          if ((v48 & 0x80000000) != 0 || !v119)
          {
            uint64_t v49 = v107;
            if ((v48 & 0x80000000) != 0) {
              goto LABEL_136;
            }
          }
          else
          {
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char **, __int16 *))(v29 + 176))(v107, a4, v47, 18, &v118, &v117);
            if ((v37 & 0x80000000) != 0) {
              goto LABEL_135;
            }
            uint64_t v49 = v107;
            if (!cstdlib_strcmp(v118, "external")) {
              goto LABEL_62;
            }
          }
          uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(v29 + 160))(v49, a4, HIWORD(v116), 8, 1, &v111, &v115);
          if ((v37 & 0x80000000) != 0) {
            goto LABEL_135;
          }
LABEL_62:
          uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(v29 + 176))(v49, a4, HIWORD(v116), 9, &__s1, (char *)&v115 + 2);
          if ((v37 & 0x80000000) != 0) {
            goto LABEL_135;
          }
          if (cstdlib_strcmp(__s1, "normal"))
          {
            int v50 = cstdlib_strcmp(__s1, "mnx");
            uint64_t v51 = *(void *)(a5 + 1064);
            if (v50) {
              unsigned int v102 = *(unsigned __int8 *)(v51 + 184 * v26 + 77);
            }
            else {
              unsigned int v102 = 0;
            }
          }
          else
          {
            unsigned int v102 = 0;
            uint64_t v51 = *(void *)(a5 + 1064);
          }
          uint64_t v52 = *(const char **)(v51 + 184 * v26 + 128);
          if (v52)
          {
            if (cstdlib_strlen(v52) - 32 > 0xFFFFFFFFFFFFFFDELL)
            {
              uint64_t v32 = v21;
            }
            else
            {
              int v53 = *(uint64_t **)(v28 + 8);
              size_t v54 = cstdlib_strlen(*(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 128));
              uint64_t v32 = (char *)heap_Realloc(v53, (uint64_t)v21, v54 + 1);
              if (!v32)
              {
                uint64_t v24 = 2315264010;
                log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v55, v56, v57, v58, v96);
                goto LABEL_136;
              }
            }
            if (cstdlib_strcmp(*(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 128), "O")
              && cstdlib_strcmp(*(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 128), "O-P"))
            {
              cstdlib_strcpy(v32, "B-");
              cstdlib_strcat(v32, *(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 128));
            }
            else
            {
              cstdlib_strcpy(v32, *(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 128));
            }
            if (cstdlib_strlen(v32) >= 2)
            {
              size_t v59 = cstdlib_strlen(v32);
              if (!cstdlib_strcmp(&v32[v59 - 2], "-P")) {
                v32[cstdlib_strlen(v32) - 2] = 0;
              }
            }
          }
          else
          {
            if (*v21 && cstdlib_strcmp(v21, "O")) {
              *unint64_t v21 = 73;
            }
            uint64_t v32 = v21;
          }
          uint64_t v60 = *(void *)(a5 + 1064);
          uint64_t v61 = *(const char **)(v60 + 184 * v26 + 80);
          if (v61)
          {
            uint64_t v62 = *(void *)(v28 + 8);
            size_t v63 = cstdlib_strlen(v61);
            uint64_t v64 = (char *)heap_Alloc(v62, v63 + 1);
            if (!v64) {
              goto LABEL_141;
            }
            uint64_t v69 = v64;
            cstdlib_strcpy(v64, *(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 80));
          }
          else
          {
            uint64_t v70 = *(char **)(v60 + 184 * v26 + 48);
            if (v70)
            {
              size_t v71 = hlp_NLUStrValueLen(v70);
              uint64_t v72 = (char *)heap_Alloc(*(void *)(v28 + 8), v71 + 1);
              if (!v72)
              {
LABEL_141:
                uint64_t v24 = 2315264010;
                log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v65, v66, v67, v68, v96);
                goto LABEL_137;
              }
              uint64_t v69 = v72;
              cstdlib_strncpy(v72, *(const char **)(*(void *)(a5 + 1064) + 184 * v26 + 48), v71);
              v69[v71] = 0;
            }
            else
            {
              uint64_t v69 = 0;
            }
          }
          uint64_t v73 = HIWORD(v116);
          uint64_t v74 = *(void *)(a5 + 1064);
          uint64_t v75 = *(char **)(v74 + 184 * v26 + 168);
          if (v99 && !*(void *)(v74 + 184 * v26 + 40))
          {
            if (!cstdlib_strcmp(v32, ""))
            {
              uint64_t v28 = v103;
              if (!v69)
              {
LABEL_117:
                log_OutText(*(void *)(v28 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v76, v77, v78, HIWORD(v116));
                LH_itoa(v102, __s, 0xAu);
                unsigned int v93 = *(uint64_t (**)(void))(v29 + 160);
                cstdlib_strlen(__s);
                uint64_t v27 = v107;
                uint64_t v24 = v93();
                if ((v24 & 0x80000000) != 0) {
                  goto LABEL_137;
                }
LABEL_118:
                ++v26;
                unint64_t v21 = v32;
                a4 = v106;
                if (*(unsigned __int16 *)(a5 + 1072) <= v26) {
                  goto LABEL_129;
                }
                goto LABEL_119;
              }
LABEL_116:
              heap_Free(*(void **)(v28 + 8), (uint64_t)v69);
              goto LABEL_117;
            }
            uint64_t v74 = *(void *)(a5 + 1064);
          }
          uint64_t v100 = v73;
          uint64_t v79 = v74 + 184 * v26;
          uint64_t v80 = *(const char **)(v79 + 40);
          if (v80)
          {
            size_t v81 = cstdlib_strlen(*(const char **)(v79 + 40)) + 1;
            if (!v69) {
              goto LABEL_98;
            }
          }
          else
          {
            size_t v81 = 1;
            if (!v69)
            {
LABEL_98:
              size_t v83 = cstdlib_strlen(";PHR:");
              uint64_t v84 = v83 + v81 + cstdlib_strlen(v32);
              if (v75)
              {
                size_t v85 = cstdlib_strlen(";BNDSHAPE:");
                v84 += v85 + cstdlib_strlen(v75);
              }
              uint64_t v86 = (char *)heap_Alloc(*(void *)(v103 + 8), v84);
              if (!v86)
              {
                uint64_t v24 = 2315264010;
                uint64_t v28 = v103;
                goto LABEL_137;
              }
              unsigned int v90 = v86;
              LOWORD(v118) = 0;
              if (v80)
              {
                cstdlib_strcpy(v86, v80);
                if (!v69) {
                  goto LABEL_109;
                }
              }
              else
              {
                *uint64_t v86 = 0;
                if (!v69) {
                  goto LABEL_109;
                }
              }
              if (*v69) {
                hlp_NLUStrSet(v90, "POS", v69);
              }
LABEL_109:
              if (*v32) {
                hlp_NLUStrSet(v90, "PHR", v32);
              }
              if (v75 && *v75) {
                hlp_NLUStrSet(v90, "BNDSHAPE", v75);
              }
              uint64_t v28 = v103;
              log_OutText(*(void *)(v103 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v87, v88, v89, v100);
              uint64_t v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, const char **))(v29 + 160);
              __int16 v92 = cstdlib_strlen(v90);
              uint64_t v24 = v91(v107, v106, v100, 14, (unsigned __int16)(v92 + 1), v90, &v118);
              heap_Free(*(void **)(v103 + 8), (uint64_t)v90);
              if ((v24 & 0x80000000) != 0) {
                goto LABEL_137;
              }
              if (!v69) {
                goto LABEL_117;
              }
              goto LABEL_116;
            }
          }
          size_t v82 = cstdlib_strlen(";POS:");
          v81 += v82 + cstdlib_strlen(v69);
          goto LABEL_98;
        }
        uint64_t v28 = a1;
LABEL_129:
        if (!cstdlib_strcmp(__dst, "W") || !cstdlib_strcmp(__dst, "AF"))
        {
          uint64_t v94 = cstdlib_strrchr(v104, 63);
          if (v94 && v94 != v104 && *(v94 - 1) != 32) {
            *uint64_t v94 = 46;
          }
        }
LABEL_136:
        uint64_t v32 = v21;
LABEL_137:
        unint64_t v21 = v32;
      }
      heap_Free(*(void **)(v28 + 8), (uint64_t)v21);
    }
  }
  else
  {
    uint64_t v24 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v96);
  }
  return v24;
}

void *freeRules(void *result, void *a2)
{
  int v3 = result;
  uint64_t v4 = a2[80];
  if (v4) {
    uint64_t result = heap_Free((void *)result[1], v4);
  }
  uint64_t v5 = a2[56];
  if (v5) {
    uint64_t result = heap_Free((void *)v3[1], v5);
  }
  uint64_t v6 = a2[57];
  if (v6) {
    uint64_t result = heap_Free((void *)v3[1], v6);
  }
  uint64_t v7 = a2[61];
  if (v7) {
    uint64_t result = heap_Free((void *)v3[1], v7);
  }
  uint64_t v8 = a2[62];
  if (v8) {
    uint64_t result = heap_Free((void *)v3[1], v8);
  }
  uint64_t v9 = a2[66];
  if (v9) {
    uint64_t result = heap_Free((void *)v3[1], v9);
  }
  uint64_t v10 = a2[67];
  if (v10)
  {
    unint64_t v11 = (void *)v3[1];
    return heap_Free(v11, v10);
  }
  return result;
}

void *freePwInObjClose(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    unsigned int v5 = *a2;
    if (*a2)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(*((void *)a2 + 1) + 8 * v6);
        if (v7)
        {
          heap_Free(*(void **)(a1 + 8), v7);
          *(void *)(*((void *)a2 + 1) + 8 * v6) = 0;
          unsigned int v5 = *a2;
        }
        ++v6;
      }
      while (v6 < v5);
      uint64_t v4 = *((void *)a2 + 1);
    }
    heap_Free(*(void **)(a1 + 8), v4);
    *((void *)a2 + 1) = 0;
    *a2 = 0;
  }
  uint64_t v8 = *((void *)a2 + 3);
  if (v8)
  {
    unsigned int v9 = a2[16];
    if (a2[16])
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(void *)(*((void *)a2 + 3) + 8 * v10);
        if (v11)
        {
          heap_Free(*(void **)(a1 + 8), v11);
          *(void *)(*((void *)a2 + 3) + 8 * v10) = 0;
          unsigned int v9 = a2[16];
        }
        ++v10;
      }
      while (v10 < v9);
      uint64_t v8 = *((void *)a2 + 3);
    }
    heap_Free(*(void **)(a1 + 8), v8);
    *((void *)a2 + 3) = 0;
    a2[16] = 0;
  }
  freePandPRules((void *)a2 + 138);
  __int16 v12 = *(void **)(a1 + 8);

  return heap_Free(v12, (uint64_t)a2);
}

void *freeSPPunc(void *result, uint64_t a2)
{
  if (a2) {
    return heap_Free((void *)result[1], a2);
  }
  return result;
}

void *freeSentenceDataNN(void *result, uint64_t a2)
{
  int v3 = result;
  uint64_t v4 = *(void *)(a2 + 1768);
  if (v4)
  {
    uint64_t result = heap_Free((void *)result[1], v4);
    *(void *)(a2 + 1768) = 0;
  }
  uint64_t v5 = *(void *)(a2 + 1080);
  if (v5)
  {
    uint64_t result = heap_Free((void *)v3[1], v5);
    *(void *)(a2 + 1080) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 1064);
  if (v6)
  {
    if (*(_WORD *)(a2 + 1072))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        if (*(void *)(v6 + v7 + 40))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 40));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 40) = 0;
        }
        if (*(void *)(v6 + v7 + 24))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 24));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 24) = 0;
        }
        if (*(void *)(v6 + v7 + 128))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 128));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 128) = 0;
        }
        if (*(void *)(v6 + v7 + 144))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 144));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 144) = 0;
        }
        if (*(void *)(v6 + v7 + 160))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 160));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 160) = 0;
        }
        if (*(void *)(v6 + v7 + 168))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7 + 168));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7 + 168) = 0;
        }
        if (*(void *)(v6 + v7))
        {
          heap_Free((void *)v3[1], *(void *)(v6 + v7));
          uint64_t v6 = *(void *)(a2 + 1064);
          *(void *)(v6 + v7) = 0;
        }
        ++v8;
        v7 += 184;
      }
      while (v8 < *(unsigned __int16 *)(a2 + 1072));
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    *(void *)(a2 + 1064) = 0;
  }
  *(_DWORD *)(a2 + 1072) = 0;
  *(_DWORD *)(a2 + 1096) = 0;
  return result;
}

uint64_t nn_model_getBrokerString(uint64_t a1, unsigned char *a2, const char *a3, size_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v10 = 0;
  __s2 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v13 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v10);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, a3);
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v10);
      int v9 = brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, a2, a4);
      return v9 & (v9 >> 31);
    }
  }
  return result;
}

uint64_t initFiModel(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, void *a10)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  char v35 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  memset(v38, 0, sizeof(v38));
  __int16 v36 = -1;
  uint64_t BrokerString = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_phrase_nn_type_joint", &v37, &v36, &v35);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v16 = 2315264010;
  if (v36)
  {
    long long v17 = *v37;
    v17[cstdlib_strlen(*v37) - 1] = 0;
    if (cstdlib_strcmp(*v37, "yes"))
    {
      *a9 = 0;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = 16;
    }
    else
    {
      *a9 = 1;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = 8;
    }
    uint64_t v24 = (void *)heap_Alloc(v18, v19);
    if (!v24)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v31);
      return v16;
    }
    uint64_t BrokerString = nn_model_getBrokerString(a1, v38, "nnphrase_", 0x100uLL);
    if ((BrokerString & 0x80000000) == 0)
    {
      uint64_t v16 = fi_init(a2, a3, a4, a5, &v34, 0, (uint64_t)v38, "FINN", 1031, 0);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t v28 = *(void *)(a1 + 32);
        uint64_t v29 = "load FI model failed";
        goto LABEL_14;
      }
      *uint64_t v24 = v34;
      if (*a9)
      {
LABEL_11:
        *a10 = v24;
        return v16;
      }
      uint64_t BrokerString = nn_model_getBrokerString(a1, v38, "nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        uint64_t v16 = fi_init(a2, a3, a4, a5, &v33, 0, (uint64_t)v38, "FINN", 1031, 0);
        if ((v16 & 0x80000000) == 0)
        {
          v24[1] = v33;
          goto LABEL_11;
        }
        uint64_t v28 = *(void *)(a1 + 32);
        uint64_t v29 = "load FI pw model failed";
LABEL_14:
        log_OutText(v28, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v29, v25, v26, v27, v32);
        return v16;
      }
    }
    return BrokerString;
  }
  return 2315264020;
}

uint64_t loadEmbedding(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  __s1 = 0;
  __int16 v24 = -1;
  char v23 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a8 + 96))(a6, a7, "fecfg", "statbnd_embed_type", &v26, &v24, &v23);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 2315264020;
    if (v24)
    {
      if (v26)
      {
        long long v15 = *v26;
        v15[cstdlib_strlen(*v26) - 1] = 0;
        uint64_t v16 = extstdlib_strtok_r((char *)*v26, "|", (const char **)&__s1);
        BOOL v17 = !cstdlib_strcmp(v16, "joint_char") && !cstdlib_strcmp(__s1, "joint_word");
        *a9 = v17;
        uint64_t result = nn_word_lkp_GetInterface(1u, &v27);
        if ((result & 0x80000000) == 0)
        {
          *a5 = safeh_GetNullHandle();
          a5[1] = v18;
          a5[2] = safeh_GetNullHandle();
          a5[3] = v19;
          uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t, uint64_t *))(v27 + 16);
          uint64_t v21 = *a4;
          uint64_t v22 = a4[1];
          if (*a9)
          {
            uint64_t result = v20(v21, v22, "joint_char", a1, a2, a5);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t, uint64_t *))(v27 + 16))(*a4, a4[1], "joint_word", a1, a2, a5 + 2);
          }
          else
          {
            uint64_t result = v20(v21, v22, "albert", a1, a2, a5);
          }
          if ((result & 0x80000000) == 0) {
            *a3 = v27;
          }
        }
      }
    }
  }
  return result;
}

void *freeSpRules(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
      if (*(_WORD *)(a2 + 10))
      {
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = *(void *)(v3 + 16 * v6);
          if (v7)
          {
            if (*(_WORD *)(v3 + 16 * v6 + 8))
            {
              uint64_t v8 = 0;
              unint64_t v9 = 0;
              do
              {
                if (*(void *)(v7 + v8 + 24))
                {
                  heap_Free((void *)v4[1], *(void *)(v7 + v8 + 24));
                  uint64_t v3 = *(void *)a2;
                  uint64_t v7 = *(void *)(*(void *)a2 + 16 * v6);
                  *(void *)(v7 + v8 + 24) = 0;
                }
                if (*(void *)(v7 + v8 + 16))
                {
                  heap_Free((void *)v4[1], *(void *)(v7 + v8 + 16));
                  uint64_t v3 = *(void *)a2;
                  uint64_t v7 = *(void *)(*(void *)a2 + 16 * v6);
                  *(void *)(v7 + v8 + 16) = 0;
                }
                ++v9;
                v8 += 40;
              }
              while (v9 < *(unsigned __int16 *)(v3 + 16 * v6 + 8));
            }
            heap_Free((void *)v4[1], v7);
            uint64_t v3 = *(void *)a2;
            uint64_t v10 = *(void *)a2 + 16 * v6;
            *(void *)uint64_t v10 = 0;
            *(_WORD *)(v10 + 8) = 0;
            unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
          }
          ++v6;
        }
        while (v6 < v5);
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
      *(_WORD *)(a2 + 10) = 0;
    }
  }
  return result;
}

uint64_t nnEmbeddingReLoad(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  if (*a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(*a5, a5[1]);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (*a9)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*a3 + 24))(a5[2], a5[3]);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    *a3 = 0;
  }
  *a4 = safeh_GetNullHandle();
  a4[1] = v18;
  *a9 = 1;

  return loadEmbedding(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t nnModelReload(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t ***a11)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v41 = 0;
  char v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  memset(v42, 0, sizeof(v42));
  BOOL v17 = *a11;
  __int16 v40 = -1;
  (*(void (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a9 + 96))(a7, a8, "fecfg", "statbnd_phrase_nn_type_joint", &v41, &v40, &v39);
  uint64_t v18 = *v41;
  v18[cstdlib_strlen(*v41) - 1] = 0;
  int v19 = cstdlib_strcmp(*v41, "yes");
  uint64_t BrokerString = nn_model_getBrokerString(a1, v42, "nnphrase_", 0x100uLL);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v24 = fi_init(a2, a3, a5, a6, &v38, 0, (uint64_t)v42, "FINN", 1031, 0);
  if ((v24 & 0x80000000) != 0)
  {
    uint64_t v25 = *(void *)(a1 + 32);
    uint64_t v26 = "load FI model failed";
    goto LABEL_10;
  }
  if (!v17)
  {
    uint64_t v27 = *(void *)(a1 + 8);
    if (v19)
    {
      uint64_t v28 = (uint64_t **)heap_Alloc(v27, 16);
      if (v28)
      {
        BOOL v17 = v28;
        *uint64_t v28 = v38;
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v34 = (uint64_t **)heap_Alloc(v27, 8);
      if (v34)
      {
        BOOL v17 = v34;
        *uint64_t v34 = v38;
        goto LABEL_23;
      }
    }
    uint64_t v24 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v36);
    return v24;
  }
  if (!*v17 || (uint64_t v24 = fi_deinit(a1, a4, *v17), (v24 & 0x80000000) == 0))
  {
    if (*a10 || (v33 = v17[1]) == 0 || (uint64_t v24 = fi_deinit(a1, a4, v33), (v24 & 0x80000000) == 0))
    {
      *BOOL v17 = v38;
      if (!v19) {
        goto LABEL_23;
      }
LABEL_14:
      uint64_t BrokerString = nn_model_getBrokerString(a1, v42, "nnword_", 0x100uLL);
      if ((BrokerString & 0x80000000) == 0)
      {
        uint64_t v24 = fi_init(a2, a3, a5, a6, &v37, 0, (uint64_t)v42, "FINN", 1031, 0);
        if ((v24 & 0x80000000) == 0)
        {
          v17[1] = v37;
LABEL_23:
          *a10 = v19 == 0;
          *a11 = v17;
          return v24;
        }
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v26 = "load FI pw model failed";
LABEL_10:
        log_OutText(v25, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v26, v21, v22, v23, v36);
        return v24;
      }
      return BrokerString;
    }
  }
  return v24;
}

uint64_t releaseEmbedding(uint64_t a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  if (!*(void *)a1)
  {
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(*(void *)a1 + 24))(*a3, a3[1]);
  if ((v8 & 0x80000000) == 0)
  {
    if (!*a4
      || (uint64_t v8 = (*(uint64_t (**)(void, void))(*(void *)a1 + 24))(a3[2], a3[3]), (v8 & 0x80000000) == 0))
    {
      *(void *)a1 = 0;
LABEL_7:
      *a2 = safeh_GetNullHandle();
      a2[1] = v9;
      *a4 = 1;
    }
  }
  return v8;
}

uint64_t releaseFIModel(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  if (!*a4)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  if (!*(void *)v5)
  {
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_8;
    }
LABEL_10:
    heap_Free(*(void **)(a1 + 8), v5);
    return v8;
  }
  uint64_t v8 = fi_deinit(a1, a2, *(uint64_t **)v5);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  if (a3) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v9 = *(uint64_t **)(v5 + 8);
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v8 = fi_deinit(a1, a2, v9);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  return v8;
}

void *setbndfromTN(void *result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)a2)
    {
      uint64_t v5 = *(unsigned __int16 *)(a3 + 1072);
      if (*(_WORD *)(a3 + 1072))
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        unsigned int v8 = *(unsigned __int16 *)(a2 + 4);
        uint64_t v9 = *(void *)(a3 + 1064);
        uint64_t v10 = (_DWORD *)(v9 + 112);
        do
        {
          if (v7 < v8 && *(_DWORD *)(*(void *)(a2 + 8) + 4 * v7) == *((unsigned __int16 *)v10 - 48))
          {
            if (v6)
            {
              unsigned int v11 = *(unsigned __int16 *)(*(void *)(a2 + 16) + 2 * v7);
              *(_DWORD *)(v9 + 184 * (v6 - 1) + 112) = v11 > 2;
              if (v11 == 4) {
                *(_DWORD *)(v9 + 184 * (v6 - 1) + 100) = 1;
              }
            }
            ++v7;
          }
          else
          {
            *uint64_t v10 = 0;
          }
          ++v6;
          v10 += 46;
        }
        while (v5 != v6);
      }
      uint64_t v12 = *(void *)(a2 + 8);
      if (v12) {
        heap_Free((void *)result[1], v12);
      }
      uint64_t v13 = *(void *)(a2 + 16);
      if (v13) {
        heap_Free((void *)v4[1], v13);
      }
    }
    long long v14 = (void *)v4[1];
    return heap_Free(v14, a2);
  }
  return result;
}

uint64_t last_POS(uint64_t result, void *a2, unsigned int a3, const char **a4, unsigned int a5)
{
  if (!result) {
    return result;
  }
  uint64_t v6 = 0;
  for (uint64_t i = *(void *)(*(void *)(*a2 + 224 * a3 + 16) + 8) + 1; *(unsigned char *)(i - 1) == 45; ++i)
  {
    uint64_t v6 = (const char *)i;
LABEL_7:
    ;
  }
  if (*(unsigned char *)(i - 1)) {
    goto LABEL_7;
  }
  if (v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(const char **)(*(void *)(*a2 + 224 * a3 + 16) + 8);
  }
  if (!a5) {
    return 0;
  }
  uint64_t v9 = a5;
  while (cstdlib_strcmp(*a4, v8))
  {
    ++a4;
    if (!--v9) {
      return 0;
    }
  }
  return 1;
}

uint64_t first_POS(uint64_t a1, void *a2, unsigned int a3, const char **a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = cstdlib_strlen(*(const char **)(*(void *)(*a2 + 224 * a3 + 16) + 8));
  uint64_t v12 = heap_Alloc(v10, (v11 + 1));
  if (!v12) {
    return 0;
  }
  uint64_t v13 = (const char *)v12;
  unsigned __int16 v14 = 0;
  for (uint64_t i = *(unsigned char **)(*(void *)(*a2 + 224 * a3 + 16) + 8); ; ++i)
  {
    int v16 = *i;
    if (!*i || v16 == 45) {
      break;
    }
    uint64_t v17 = v14++;
    *(unsigned char *)(v12 + v17) = v16;
  }
  *(unsigned char *)(v12 + v14) = 0;
  if (v5)
  {
    uint64_t v5 = v5;
    while (cstdlib_strcmp(v13, *a4))
    {
      ++a4;
      if (!--v5) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v18 = 0;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  return v18;
}

uint64_t has_POS(uint64_t a1, void *a2, unsigned int a3, const char **a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a1 && a5)
  {
    uint64_t v10 = a5;
    while (!cstdlib_strstr(*(char **)(*(void *)(*a2 + 224 * a3 + 16) + 8), *a4))
    {
      ++a4;
      if (!--v10) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t first_character(uint64_t result, void *a2, unsigned int a3, const char **a4, int a5)
{
  if (result)
  {
    LODWORD(v5) = a5;
    utf8_getUTF8Char(**(void **)(*a2 + 224 * a3 + 16), 0, __s2);
    if (v5)
    {
      uint64_t v5 = v5;
      while (cstdlib_strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t last_character(uint64_t result, void *a2, unsigned int a3, const char **a4, int a5)
{
  __int16 v16 = 0;
  *(_DWORD *)__s2 = 0;
  if (result)
  {
    LODWORD(v5) = a5;
    unsigned int v7 = **(const char ***)(*a2 + 224 * a3 + 16);
    int v8 = cstdlib_strlen(v7);
    int v9 = cstdlib_strlen(v7);
    int v10 = v8 - utf8_GetCurrentUtf8Offset((unint64_t)v7, v9 - 1);
    int v11 = cstdlib_strlen(v7);
    int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v7, v11 - 1);
    if (v10 >= (int)Utf8_LengthInBytes((unsigned __int8 *)&v7[CurrentUtf8Offset], 1))
    {
      int v13 = cstdlib_strlen(v7);
      unsigned int v14 = utf8_GetCurrentUtf8Offset((unint64_t)v7, v13 - 1);
      utf8_getUTF8Char((uint64_t)v7, v14, __s2);
    }
    if (v5)
    {
      uint64_t v5 = v5;
      while (cstdlib_strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t initPhrasingRuleStruct(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_WORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 10) = a3;
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), a3, 16);
  *(void *)a2 = v4;
  if (v4) {
    return 0;
  }
  else {
    return 2315264010;
  }
}

uint64_t addPhrasingRule(uint64_t a1, uint64_t *a2, const char *a3)
{
  unsigned __int16 v6 = 1;
  for (uint64_t i = a3; *i == 94; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (*i) {
    goto LABEL_6;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), v6, 40);
  uint64_t v9 = *a2;
  uint64_t v10 = *((unsigned __int16 *)a2 + 4);
  *(void *)(*a2 + 16 * v10) = v8;
  if (!v8) {
    return 2315264010;
  }
  *(_WORD *)(v9 + 16 * v10 + 8) = v6;
  uint64_t result = parseOneRule(a1, v8, v6, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    ++*((_WORD *)a2 + 4);
  }
  return result;
}

uint64_t parseOneRule(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  for (unsigned __int16 i = 0; a4[i] != 45 || a4[i + 1] != 45 || a4[i + 2] != 62; ++i)
    ;
  a4[i] = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3;
  while (2)
  {
    uint64_t v9 = (unsigned __int8 *)(a4 - 1);
    do
    {
      int v11 = *++v9;
      int v10 = v11;
    }
    while (v11 == 32);
    uint64_t v12 = (const char *)v9;
    while (v10 != 95)
    {
      int v13 = *(unsigned __int8 *)++v12;
      int v10 = v13;
    }
    *uint64_t v12 = 0;
    *(_WORD *)(a2 + 40 * v7 + 8) = cstdlib_atoi(v9);
    do
    {
      int v15 = *(unsigned __int8 *)++v12;
      int v14 = v15;
    }
    while (v15 == 32);
    __int16 v16 = v12;
    if (v14 != 40)
    {
      __int16 v16 = v12;
      do
        int v17 = *(unsigned __int8 *)++v16;
      while (v17 != 40);
    }
    uint64_t v18 = (void *)(a2 + 40 * v7);
    *__int16 v16 = 0;
    if (!cstdlib_strcmp(v12, "last-pos")) {
      *uint64_t v18 = last_POS;
    }
    if (!cstdlib_strcmp(v12, "first-pos")) {
      *uint64_t v18 = first_POS;
    }
    if (!cstdlib_strcmp(v12, "has-pos")) {
      *uint64_t v18 = has_POS;
    }
    if (!cstdlib_strcmp(v12, "first-character")) {
      *uint64_t v18 = first_character;
    }
    if (!cstdlib_strcmp(v12, "last-character")) {
      *uint64_t v18 = last_character;
    }
    uint64_t v19 = a2 + 40 * v7;
    *(_WORD *)(v19 + 32) = 1;
    uint64_t v20 = (_WORD *)(v19 + 32);
    uint64_t v21 = v16;
    do
    {
      int v23 = *(unsigned __int8 *)++v16;
      int v22 = v23;
      ++v21;
    }
    while (v23 == 32);
    uint64_t v24 = 0;
    int v25 = 1;
    while (v22 == 124)
    {
      *uint64_t v20 = ++v25;
LABEL_35:
      int v22 = v16[++v24];
    }
    if (v22 != 41) {
      goto LABEL_35;
    }
    v16[v24] = 0;
    uint64_t v26 = &v16[v24 + 1];
    uint64_t v27 = (char *)heap_Alloc(*(void *)(a1 + 8), (unsigned __int16)(v24 + 2));
    uint64_t v28 = a2 + 40 * v7;
    *(void *)(v28 + 16) = v27;
    uint64_t v29 = (void *)(v28 + 16);
    if (v27)
    {
      cstdlib_strcpy(v27, v16);
      uint64_t v30 = (void *)heap_Alloc(*(void *)(a1 + 8), 8 * (unsigned __int16)*v20);
      uint64_t v31 = a2 + 40 * v7;
      *(void *)(v31 + 24) = v30;
      uint64_t v32 = (void *)(v31 + 24);
      if (v30)
      {
        *uint64_t v30 = *v29;
        if ((unsigned __int16)*v20 >= 2u)
        {
          unint64_t v33 = 1;
          do
          {
            uint64_t v34 = (void *)(*v32 + 8 * v33);
            for (uint64_t j = (unsigned char *)*(v34 - 1); ; uint64_t j = v36 + 1)
            {
              *uint64_t v34 = j;
              uint64_t v34 = (void *)(*v32 + 8 * v33);
              uint64_t v36 = (unsigned char *)*v34;
              if (*(unsigned char *)*v34 == 124) {
                break;
              }
            }
            *uint64_t v34 = v36 + 1;
            *uint64_t v36 = 0;
            ++v33;
          }
          while (v33 < (unsigned __int16)*v20);
        }
        while (1)
        {
          int v37 = *(unsigned __int8 *)v26;
          if (!*v26 || v37 == 94) {
            break;
          }
          ++v26;
        }
        if (v37 == 94) {
          a4 = v26 + 1;
        }
        else {
          a4 = v26;
        }
        if (++v7 == v8) {
          return 0;
        }
        continue;
      }
    }
    return 2315264010;
  }
}

uint64_t releasePhrasingRuleStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void *)a2 + 16 * v6;
        uint64_t v9 = *(void *)v8;
        if (*(void *)v8)
        {
          if (*(_WORD *)(v8 + 8))
          {
            uint64_t v10 = 0;
            unint64_t v11 = 0;
            do
            {
              uint64_t v12 = *(void *)(*(void *)v8 + v10 + 16);
              if (v12)
              {
                heap_Free(*(void **)(a1 + 8), v12);
                uint64_t v7 = *(void *)a2;
              }
              uint64_t v13 = *(void *)(*(void *)(v7 + 16 * v6) + v10 + 24);
              if (v13)
              {
                heap_Free(*(void **)(a1 + 8), v13);
                uint64_t v7 = *(void *)a2;
              }
              ++v11;
              uint64_t v8 = v7 + 16 * v6;
              v10 += 40;
            }
            while (v11 < *(unsigned __int16 *)(v8 + 8));
            uint64_t v9 = *(void *)v8;
          }
          heap_Free(*(void **)(a1 + 8), v9);
          unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
        }
        ++v6;
      }
      while (v6 < v5);
      uint64_t v3 = *(void *)a2;
    }
    heap_Free(*(void **)(a1 + 8), v3);
  }
  *(_WORD *)(a2 + 10) = 0;
  *(void *)a2 = 0;
  return 0;
}

uint64_t applyRules(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!*((_WORD *)a4 + 5)) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a4;
  while (*(_WORD *)(v9 + 16 * v8 + 8))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = 1;
    do
    {
      uint64_t v13 = *(void *)(v9 + 16 * v8) + v10;
      if (*(unsigned __int16 *)(v13 + 8) + a3 >= *(unsigned __int16 *)(a2 + 8))
      {
        int v12 = 0;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void))v13)(a1, a2, (unsigned __int16)(*(_WORD *)(v13 + 8) + a3), *(void *)(v13 + 24), *(unsigned __int16 *)(v13 + 32)) != 1)int v12 = 0; {
        uint64_t v9 = *a4;
        }
      }
      ++v11;
      v10 += 40;
    }
    while (v11 < *(unsigned __int16 *)(v9 + 16 * v8 + 8));
    if (v12 == 1) {
      break;
    }
    if (++v8 >= (unint64_t)*((unsigned __int16 *)a4 + 5)) {
      return 0;
    }
  }
  return 1;
}

uint64_t setPhraseProminences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setPhraseProminences()", a6, a7, a8, 0);
  uint64_t v28 = (uint64_t *)(a1 + 736);
  unsigned __int16 v12 = *(_WORD *)(a1 + 744) - 1;
  if ((v12 & 0x8000) != 0)
  {
LABEL_19:
    uint64_t v26 = *(unsigned int *)(a1 + 1108);
    uint64_t v27 = *(char **)(a1 + 1096);
    return printLevel(v26, (const char **)(a1 + 1088), v27, (unsigned __int16 *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (uint64_t)v28, (uint64_t)"AFTER SET PHRASE PROMINENCE");
  }
  else
  {
    while (1)
    {
      int v13 = v12;
      uint64_t v14 = v12;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing (phrase) node %d", v9, v10, v11, v12);
      uint64_t result = printNode(*(_DWORD *)(a1 + 1108), (const char **)(a1 + 1088), *(char **)(a1 + 1096), (unsigned __int16 *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v14), v13);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t v16 = *v28;
      int v17 = (__int16 *)(*v28 + 32 * v14);
      int v18 = (__int16)(v17[1] - 1);
      if (v18 >= *v17)
      {
        int v19 = 0;
        int v20 = *(unsigned __int16 *)(a1 + 304);
        do
        {
          uint64_t v21 = (__int16)v18;
          if (v20)
          {
            for (__int16 i = 0; i < v20; ++i)
            {
              if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * *(unsigned int *)(*(void *)(a1 + 296) + 4 * i))), *(const char **)(*(void *)(*(void *)(a1 + 672) + 224 * (int)v21 + 16)+ 8 * *(unsigned __int16 *)(a1 + 26))))
              {
                BOOL v23 = v19 == 0;
                int v19 = 1;
                if (v23) {
                  char v24 = 2;
                }
                else {
                  char v24 = 1;
                }
                if (v23) {
                  int v25 = "set word[%d] %s to _MAINACCENT";
                }
                else {
                  int v25 = "set word[%d] %s to _ACCENTED";
                }
                *(unsigned char *)(*(void *)(a1 + 672) + 224 * (int)v21 + 72) = v24;
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v25, v9, v10, v11, v21);
              }
              int v20 = *(unsigned __int16 *)(a1 + 304);
            }
            uint64_t v16 = *v28;
          }
          int v18 = (__int16)(v21 - 1);
        }
        while (v18 >= *(__int16 *)(v16 + 32 * v14));
      }
      unsigned __int16 v12 = v14 - 1;
      if ((__int16)v14 < 1) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t setCompoundProminences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = 0;
  int v46 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"DO setCompoundProminences()", a6, a7, a8, 0);
  unsigned __int16 v12 = *(_WORD *)(a1 + 744) - 1;
  if ((v12 & 0x8000) == 0)
  {
    uint64_t v42 = (unsigned __int16 *)(a1 + 1104);
    uint64_t v43 = (const char **)(a1 + 1088);
    int v13 = (void *)(a1 + 672);
    uint64_t v41 = a1 + 8;
    memset(v45, 0, sizeof(v45));
    __int16 v44 = 0;
    while (1)
    {
      int v14 = v12;
      uint64_t v15 = v12;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"processing (phrase) node %d", v9, v10, v11, v12);
      uint64_t matched = printNode(*(_DWORD *)(a1 + 1108), v43, *(char **)(a1 + 1096), v42, (void *)(a1 + 672), v41, (unsigned __int16 *)(*(void *)(a1 + 736) + 32 * v15), v14);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      int v17 = (__int16 *)(*(void *)(a1 + 736) + 32 * v15);
      int v18 = (__int16)(v17[1] - 1);
      int v19 = *v17;
      if (v18 >= v19) {
        break;
      }
LABEL_5:
      unsigned __int16 v12 = v15 - 1;
      if ((__int16)v15 < 1) {
        return matched;
      }
    }
    while (1)
    {
      uint64_t v20 = *(void *)(*v13 + 224 * (__int16)v18 + 56);
      if (v20)
      {
        uint64_t v21 = *(unsigned __int16 *)(a1 + 32);
        uint64_t v22 = v20 + 32 * v21;
        if (*(_DWORD *)(v22 + 4) == 1)
        {
          uint64_t v23 = *(unsigned __int16 *)(v22 + 8);
          if (v23 >= (unsigned __int16)v19
            && !cstdlib_strcmp(*(const char **)(*(void *)(*v13 + 224 * *(unsigned __int16 *)(v22 + 8) + 56) + 32 * v21 + 16), "NP"))
          {
            break;
          }
        }
      }
LABEL_13:
      int v18 = (__int16)(v18 - 1);
      int v19 = *(__int16 *)(*(void *)(a1 + 736) + 32 * v15);
      if (v18 < v19) {
        goto LABEL_5;
      }
    }
    int v24 = (__int16)v18;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  processing (NP phrase) node %d,%d", v9, v10, v11, v23);
    uint64_t v47 = 0;
    int v46 = 0;
    if ((__int16)v18 < (int)v23)
    {
LABEL_12:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    no rules fire", v25, v26, v27, 0);
      goto LABEL_13;
    }
    int v28 = v18;
    while (1)
    {
      unsigned int v29 = (unsigned __int16)v28;
      int v30 = v28 - 1;
      BOOL v31 = *(unsigned char *)(*v13 + 224 * (unsigned __int16)v28 + 72) != 2 || (__int16)v28 < 1;
      if (!v31 && v24 > (int)v23 && *(unsigned char *)(*v13 + 224 * (unsigned __int16)(v28 - 1) + 72) == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    found PRM pattern word[%d]=%s PRM=%d word[%d]=%s PRM=%d : apply rules", v25, v26, v27, (unsigned __int16)(v28 - 1));
        *(_WORD *)&v45[4] = v28;
        *(_DWORD *)int v45 = 1;
        *(_DWORD *)&v45[6] = 0;
        if (*(_WORD *)(a1 + 320)) {
          break;
        }
      }
LABEL_24:
      int v24 = (__int16)v30;
      int v28 = v30;
      if ((__int16)v30 < (int)v23) {
        goto LABEL_12;
      }
    }
    uint64_t v33 = 0;
    __int16 v34 = 0;
    while (1)
    {
      uint64_t v35 = *(void *)(a1 + 312);
      int v36 = v34;
      uint64_t v37 = *(void *)(v35 + 24 * v34);
      if (v37)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"LEFT", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v37, (uint64_t)v45, (int *)&v47 + 1, (uint64_t)&v44, 1u);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
        if (HIDWORD(v47) != 1) {
          goto LABEL_43;
        }
        uint64_t v35 = *(void *)(a1 + 312);
      }
      else
      {
        HIDWORD(v47) = 1;
      }
      uint64_t v38 = *(void *)(v35 + 24 * v36 + 8);
      if (v38)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"CUR", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v38, (uint64_t)v45, (int *)&v47, (uint64_t)&v44, 0);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
        if (v47 != 1) {
          goto LABEL_43;
        }
        uint64_t v35 = *(void *)(a1 + 312);
      }
      else
      {
        LODWORD(v47) = 1;
      }
      uint64_t v26 = *(void *)(v35 + 24 * v36 + 16);
      if (v26)
      {
        uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"RIGHT", v43, v42, *(char **)(a1 + 1096), v41, a1 + 672, v26, (uint64_t)v45, &v46, (uint64_t)&v44, 2u);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
      }
      else
      {
        int v46 = 1;
      }
LABEL_43:
      if (v47 == 0x100000001 && v46 == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  stress shift rule %d FIRED", v25, v26, v27, v33);
        uint64_t v39 = *(void *)(a1 + 672);
        *(unsigned char *)(v39 + 224 * v29 + 72) = 1;
        *(unsigned char *)(v39 + 224 * (unsigned __int16)v30 + 72) = 2;
        goto LABEL_13;
      }
      __int16 v34 = v36 + 1;
      uint64_t v33 = (__int16)(v36 + 1);
      if ((int)v33 >= *(unsigned __int16 *)(a1 + 320)) {
        goto LABEL_24;
      }
    }
  }
  return 0;
}

uint64_t getProminence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = setPhraseProminences(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = setCompoundProminences(a1, v10, v11, v12, v13, v14, v15, v16);
    if ((result & 0x80000000) == 0)
    {
      int v17 = *(_DWORD *)(a1 + 1108);
      int v18 = *(char **)(a1 + 1096);
      return printAsString(v17, (char **)(a1 + 1088), v18, (unsigned __int16 *)(a1 + 1104), (void *)(a1 + 672), a1 + 8, (uint64_t *)(a1 + 736), (uint64_t)"FEPHRRES: ");
    }
  }
  return result;
}

uint64_t logPANDPRULE_TRule(uint64_t result, const char **a2, unsigned __int16 *a3, char *__s, uint64_t *a5, uint64_t **a6)
{
  if (result)
  {
    if (!*a6 || (uint64_t result = logPANDPCONTEXT_TRule(a2, a3, __s, a5, *a6), (result & 0x80000000) == 0))
    {
      *(_DWORD *)__s = 2121504;
      uint64_t result = add2Str(*a5, a2, a3, __s);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = a6[1];
        if (!v11 || (uint64_t result = logPANDPCONTEXT_TRule(a2, a3, __s, a5, v11), (result & 0x80000000) == 0))
        {
          *(_DWORD *)__s = 2121504;
          uint64_t result = add2Str(*a5, a2, a3, __s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t v12 = a6[2];
            if (v12)
            {
              return logPANDPCONTEXT_TRule(a2, a3, __s, a5, v12);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t logPANDPCONTEXT_TRule(const char **a1, unsigned __int16 *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (unsigned __int16 *)(*a5 + v10);
      if (!*((unsigned char *)v13 + 4)) {
        goto LABEL_13;
      }
      uint64_t v14 = "!";
      if ((v13[2] & 1) != 0
        || (uint64_t v14 = "HASCOMMA ", (v13[2] & 2) != 0)
        || (uint64_t v14 = "DIRECTIVE_MOVE2NEXT ", (v13[2] & 4) != 0)
        || (uint64_t v14 = "ISLASTINPHR ", (v13[2] & 8) != 0)
        || (uint64_t v14 = "ISFIRSTINPHR ", (v13[2] & 0x10) != 0))
      {
        int v15 = v13[2] & 1;
        cstdlib_strcpy(__s, v14);
      }
      else
      {
        int v15 = 1;
      }
      uint64_t result = add2Str(*a4, a1, a2, __s);
      if (v15)
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_13:
          uint64_t result = add2Str(*a4, a1, a2, "[");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*a4, a1, a2, (char *)(a4[66] + *(unsigned int *)(a4[67] + 4 * *(unsigned int *)(a4[8] + 8 * *v13 + 4))));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
          uint64_t result = add2Str(*a4, a1, a2, __s);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*a4, a1, a2, (char *)(a4[61] + *(unsigned int *)(a4[62] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*a4, a1, a2, ")] ");
        }
      }
      if ((result & 0x80000000) == 0)
      {
        ++v11;
        v10 += 6;
        if (v11 < *((unsigned __int16 *)a5 + 4)) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t freeMAPRULE2STR_TRule(void *a1, uint64_t a2)
{
  return 0;
}

void *freePANDPRULE_TRule(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  if (*a2)
  {
    if (*(_WORD *)(v4 + 8))
    {
      heap_Free((void *)result[1], *(void *)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v4 = *a2;
    }
    uint64_t result = heap_Free((void *)v3[1], v4);
    *a2 = 0;
  }
  uint64_t v5 = a2[1];
  if (v5)
  {
    if (*(_WORD *)(v5 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v5);
      *(void *)uint64_t v5 = 0;
      uint64_t v5 = a2[1];
    }
    uint64_t result = heap_Free((void *)v3[1], v5);
    a2[1] = 0;
  }
  uint64_t v6 = a2[2];
  if (v6)
  {
    if (*(_WORD *)(v6 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v6);
      *(void *)uint64_t v6 = 0;
      uint64_t v6 = a2[2];
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    a2[2] = 0;
  }
  return result;
}

uint64_t freeMAPRULE2NUM_TRule(void *a1, uint64_t a2)
{
  return 0;
}

uint64_t freePandPRules(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[62];
  if (v3)
  {
    heap_Free(*(void **)(v2 + 8), v3);
    a1[62] = 0;
  }
  uint64_t v4 = (void *)a1[64];
  if (v4)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v4);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[64] = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[67];
  if (v6)
  {
    heap_Free(*(void **)(v2 + 8), v6);
    a1[67] = 0;
  }
  uint64_t v7 = (void *)a1[69];
  if (v7)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v7);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[69] = 0;
  }
  uint64_t v8 = a1[57];
  if (v8)
  {
    heap_Free(*(void **)(v2 + 8), v8);
    a1[57] = 0;
  }
  uint64_t v9 = (void *)a1[59];
  if (v9)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v9);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[59] = 0;
  }
  uint64_t v10 = a1[8];
  if (v10)
  {
    heap_Free(*(void **)(v2 + 8), v10);
    a1[8] = 0;
    *((_WORD *)a1 + 36) = 0;
  }
  if (*((_WORD *)a1 + 44))
  {
    unint64_t v11 = 0;
    uint64_t v12 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[10] + v12));
      ++v11;
      v12 += 32;
    }
    while (v11 < *((unsigned __int16 *)a1 + 44));
  }
  uint64_t v13 = a1[10];
  if (v13)
  {
    heap_Free(*(void **)(v2 + 8), v13);
    a1[10] = 0;
  }
  *((_WORD *)a1 + 44) = 0;
  if (*((_WORD *)a1 + 52))
  {
    unint64_t v14 = 0;
    uint64_t v15 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[12] + v15));
      ++v14;
      v15 += 32;
    }
    while (v14 < *((unsigned __int16 *)a1 + 52));
  }
  uint64_t v16 = a1[12];
  if (v16)
  {
    heap_Free(*(void **)(v2 + 8), v16);
    a1[12] = 0;
  }
  *((_WORD *)a1 + 52) = 0;
  if (*((_WORD *)a1 + 60))
  {
    unint64_t v17 = 0;
    uint64_t v18 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[14] + v18));
      ++v17;
      v18 += 32;
    }
    while (v17 < *((unsigned __int16 *)a1 + 60));
  }
  uint64_t v19 = a1[14];
  if (v19)
  {
    heap_Free(*(void **)(v2 + 8), v19);
    a1[14] = 0;
  }
  *((_WORD *)a1 + 60) = 0;
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v20 = 0;
    do
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1[16] + 8 * v20));
      *(void *)(a1[16] + 8 * v20++) = 0;
    }
    while (v20 < *((unsigned __int16 *)a1 + 72));
  }
  *((_WORD *)a1 + 72) = 0;
  uint64_t v21 = a1[17];
  if (v21)
  {
    heap_Free(*(void **)(v2 + 8), v21);
    a1[17] = 0;
  }
  uint64_t v22 = a1[16];
  if (v22)
  {
    heap_Free(*(void **)(v2 + 8), v22);
    a1[16] = 0;
  }
  if (*((_WORD *)a1 + 80))
  {
    unint64_t v23 = 0;
    uint64_t v24 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[19] + v24));
      ++v23;
      v24 += 32;
    }
    while (v23 < *((unsigned __int16 *)a1 + 80));
  }
  uint64_t v25 = a1[19];
  if (v25)
  {
    heap_Free(*(void **)(v2 + 8), v25);
    a1[19] = 0;
  }
  *((_WORD *)a1 + 80) = 0;
  if (*((_WORD *)a1 + 92))
  {
    unint64_t v26 = 0;
    uint64_t v27 = a1[22];
    do
    {
      freePANDPRULE_TRule((void *)v2, *(uint64_t **)(v27 + 40 * v26));
      uint64_t v28 = a1[22];
      uint64_t v29 = *(void *)(v28 + 40 * v26);
      if (v29)
      {
        heap_Free(*(void **)(v2 + 8), v29);
        uint64_t v28 = a1[22];
        *(void *)(v28 + 40 * v26) = 0;
      }
      if (*(_WORD *)(v28 + 40 * v26 + 16))
      {
        unint64_t v30 = 0;
        uint64_t v31 = 8;
        do
        {
          freePANDPRULE_TRule((void *)v2, (uint64_t *)(*(void *)(v28 + 40 * v26 + 8) + v31));
          ++v30;
          uint64_t v28 = a1[22];
          v31 += 32;
        }
        while (v30 < *(unsigned __int16 *)(v28 + 40 * v26 + 16));
      }
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(*(void *)(v28 + 40 * v26 + 8) + 8));
      uint64_t v27 = a1[22];
      if (*(void *)(v27 + 40 * v26 + 8))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v27 + 40 * v26 + 8));
        uint64_t v27 = a1[22];
        *(void *)(v27 + 40 * v26 + 8) = 0;
      }
      unint64_t v32 = v27 + 40 * v26;
      *(_WORD *)(v32 + 16) = 0;
      if (*(_WORD *)(v32 + 32))
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          freePANDPRULE_TRule((void *)v2, (uint64_t *)(*(void *)(v27 + 40 * v26 + 24) + v33));
          ++v34;
          uint64_t v27 = a1[22];
          v33 += 32;
        }
        while (v34 < *(unsigned __int16 *)(v27 + 40 * v26 + 32));
      }
      if (*(void *)(v27 + 40 * v26 + 24))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v27 + 40 * v26 + 24));
        uint64_t v27 = a1[22];
        *(void *)(v27 + 40 * v26 + 24) = 0;
      }
      *(_WORD *)(v27 + 40 * v26++ + 32) = 0;
    }
    while (v26 < *((unsigned __int16 *)a1 + 92));
  }
  else
  {
    uint64_t v27 = a1[22];
    if (!v27) {
      goto LABEL_64;
    }
  }
  heap_Free(*(void **)(v2 + 8), v27);
  a1[22] = 0;
LABEL_64:
  *((_WORD *)a1 + 92) = 0;
  uint64_t v35 = a1[25];
  if (v35)
  {
    heap_Free(*(void **)(v2 + 8), v35);
    a1[25] = 0;
  }
  *((_WORD *)a1 + 104) = 0;
  uint64_t v36 = a1[28];
  if (v36)
  {
    heap_Free(*(void **)(v2 + 8), v36);
    a1[28] = 0;
  }
  *((_WORD *)a1 + 116) = 0;
  uint64_t v37 = a1[30];
  if (v37)
  {
    heap_Free(*(void **)(v2 + 8), v37);
    a1[30] = 0;
  }
  *((_WORD *)a1 + 124) = 0;
  if (*((_WORD *)a1 + 132))
  {
    unint64_t v38 = 0;
    uint64_t v39 = 8;
    do
    {
      freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[32] + v39));
      ++v38;
      v39 += 32;
    }
    while (v38 < *((unsigned __int16 *)a1 + 132));
  }
  *((_WORD *)a1 + 132) = 0;
  uint64_t v40 = a1[32];
  if (v40)
  {
    heap_Free(*(void **)(v2 + 8), v40);
    a1[32] = 0;
  }
  uint64_t v41 = a1[34];
  if (v41)
  {
    heap_Free(*(void **)(v2 + 8), v41);
    a1[34] = 0;
  }
  *((_WORD *)a1 + 140) = 0;
  uint64_t v42 = a1[4];
  if (v42)
  {
    heap_Free(*(void **)(v2 + 8), v42);
    a1[4] = 0;
  }
  *((_WORD *)a1 + 20) = 0;
  uint64_t v43 = a1[6];
  if (v43)
  {
    heap_Free(*(void **)(v2 + 8), v43);
    a1[6] = 0;
  }
  *((_WORD *)a1 + 28) = 0;
  uint64_t v44 = a1[36];
  if (v44)
  {
    heap_Free(*(void **)(v2 + 8), v44);
    a1[36] = 0;
  }
  uint64_t v45 = a1[38];
  if (v45)
  {
    if (*((_WORD *)a1 + 156))
    {
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      do
      {
        freePANDPRULE_TRule((void *)v2, (uint64_t *)(a1[38] + v46));
        ++v47;
        v46 += 24;
      }
      while (v47 < *((unsigned __int16 *)a1 + 156));
      uint64_t v45 = a1[38];
    }
    *((_WORD *)a1 + 156) = 0;
    heap_Free(*(void **)(v2 + 8), v45);
    a1[38] = 0;
  }
  if (*((_WORD *)a1 + 160))
  {
    unint64_t v48 = 0;
    uint64_t v49 = a1[42];
    do
    {
      if (*(_WORD *)(v49 + 16 * v48))
      {
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        do
        {
          freePANDPRULE_TRule((void *)v2, (uint64_t *)(*(void *)(v49 + 16 * v48 + 8) + v50));
          ++v51;
          uint64_t v49 = a1[42];
          v50 += 24;
        }
        while (v51 < *(unsigned __int16 *)(v49 + 16 * v48));
      }
      unint64_t v52 = v49 + 16 * v48;
      *(_WORD *)unint64_t v52 = 0;
      heap_Free(*(void **)(v2 + 8), *(void *)(v52 + 8));
      uint64_t v49 = a1[42];
      *(void *)(v49 + 16 * v48++ + 8) = 0;
    }
    while (v48 < *((unsigned __int16 *)a1 + 160));
    goto LABEL_97;
  }
  uint64_t v49 = a1[42];
  if (v49)
  {
LABEL_97:
    heap_Free(*(void **)(v2 + 8), v49);
    a1[42] = 0;
  }
  uint64_t v53 = a1[41];
  if (v53)
  {
    heap_Free(*(void **)(v2 + 8), v53);
    a1[41] = 0;
  }
  *((_WORD *)a1 + 160) = 0;
  if (*((_WORD *)a1 + 292))
  {
    unint64_t v54 = 0;
    do
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1[71] + 8 * v54));
      *(void *)(a1[71] + 8 * v54++) = 0;
    }
    while (v54 < *((unsigned __int16 *)a1 + 292));
  }
  uint64_t v55 = a1[72];
  if (v55)
  {
    heap_Free(*(void **)(v2 + 8), v55);
    a1[72] = 0;
  }
  uint64_t v56 = a1[71];
  if (v56)
  {
    heap_Free(*(void **)(v2 + 8), v56);
    a1[71] = 0;
  }
  *((_WORD *)a1 + 292) = 0;
  if (*((_WORD *)a1 + 304))
  {
    unint64_t v57 = 0;
    do
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1[74] + 8 * v57));
      *(void *)(a1[74] + 8 * v57++) = 0;
    }
    while (v57 < *((unsigned __int16 *)a1 + 304));
  }
  uint64_t v58 = a1[75];
  if (v58)
  {
    heap_Free(*(void **)(v2 + 8), v58);
    a1[75] = 0;
  }
  uint64_t v59 = a1[74];
  if (v59)
  {
    heap_Free(*(void **)(v2 + 8), v59);
    a1[74] = 0;
  }
  *((_WORD *)a1 + 304) = 0;
  if (*((_WORD *)a1 + 316))
  {
    unint64_t v60 = 0;
    do
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1[77] + 8 * v60));
      *(void *)(a1[77] + 8 * v60++) = 0;
    }
    while (v60 < *((unsigned __int16 *)a1 + 316));
  }
  uint64_t v61 = a1[78];
  if (v61)
  {
    heap_Free(*(void **)(v2 + 8), v61);
    a1[78] = 0;
  }
  uint64_t v62 = a1[77];
  if (v62)
  {
    heap_Free(*(void **)(v2 + 8), v62);
    a1[77] = 0;
  }
  *((_WORD *)a1 + 316) = 0;
  if (*((_WORD *)a1 + 180))
  {
    unint64_t v63 = 0;
    do
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1[43] + 8 * v63));
      *(void *)(a1[43] + 8 * v63++) = 0;
    }
    while (v63 < *((unsigned __int16 *)a1 + 180));
  }
  uint64_t v64 = a1[44];
  if (v64)
  {
    heap_Free(*(void **)(v2 + 8), v64);
    a1[44] = 0;
  }
  uint64_t v65 = a1[43];
  if (v65)
  {
    heap_Free(*(void **)(v2 + 8), v65);
    a1[43] = 0;
  }
  *((_WORD *)a1 + 180) = 0;
  uint64_t v66 = a1[81];
  if (v66)
  {
    heap_Free(*(void **)(v2 + 8), v66);
    a1[81] = 0;
  }
  uint64_t NullHandle = safeh_GetNullHandle();
  if (!safeh_HandlesEqual(a1[53], a1[54], NullHandle, v68))
  {
    nuance_pcre_DeInit((void *)a1[53], a1[54]);
    nuance_pcre_ObjClose(a1[53], a1[54]);
  }
  cstdlib_memset(a1, 0, 0x298uLL);
  return v5;
}

uint64_t do_pcre_exec(uint64_t a1, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a3 || (uint64_t v9 = (_DWORD *)a6, a7 = a5, a6 = a4, a5 >= a4))
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"invalid arg for regex", a6, a7, a8, 0);
    return 2315264007;
  }
  *uint64_t v9 = 0;
  unsigned int v10 = nuance_pcre_exec(*(void **)(a1 + 424), *(void *)(a1 + 432), *(void *)(a1 + 448) + *(unsigned int *)(*(void *)(a1 + 456) + 4 * a2), 0, a3, a4, a5, 0, v22, 30);
  if ((v10 & 0x80000000) == 0)
  {
    if (v10)
    {
      uint64_t v11 = 0;
      *uint64_t v9 = 1;
      return v11;
    }
    return 0;
  }
  uint64_t v12 = nuance_pcre_ErrorToLhError(v10);
  uint64_t v11 = v12;
  if (v12 >> 20 != 2213) {
    return v11;
  }
  if ((v12 & 0x1FFF) == 0x14) {
    return 0;
  }
  if ((v12 & 0x1FFF) == 0xA)
  {
    uint64_t v17 = *(void *)(*(void *)a1 + 32);
    uint64_t v18 = 11002;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)a1 + 32);
    uint64_t v21 = "lhError";
    uint64_t v19 = "%s%x";
    uint64_t v18 = 11027;
  }
  log_OutPublic(v17, (uint64_t)"FE_PHRASING", v18, (uint64_t)v19, v13, v14, v15, v16, v21);
  return v11;
}

uint64_t getCompoundAccent(uint64_t a1, char *__s, _DWORD *a3, _WORD *a4, _WORD *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!__s) {
    return 2315264007;
  }
  *a3 = 0;
  uint64_t v10 = *(void *)(a1 + 648);
  int v11 = cstdlib_strlen(__s);
  unsigned int v12 = nuance_pcre_exec(*(void **)(a1 + 424), *(void *)(a1 + 432), v10, 0, __s, v11, 0, 0, &v24, 30);
  if ((v12 & 0x80000000) == 0)
  {
    if (v12)
    {
      uint64_t v13 = 0;
      *a3 = 1;
      *a4 = v24 + 1;
      *a5 = v25 - 1;
      return v13;
    }
    return 0;
  }
  uint64_t v14 = nuance_pcre_ErrorToLhError(v12);
  uint64_t v13 = v14;
  if (v14 >> 20 != 2213) {
    return v13;
  }
  if ((v14 & 0x1FFF) == 0x14) {
    return 0;
  }
  if ((v14 & 0x1FFF) == 0xA)
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v20 = 11002;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v23 = "lhError";
    uint64_t v21 = "%s%x";
    uint64_t v20 = 11027;
  }
  log_OutPublic(v19, (uint64_t)"FE_PHRASING", v20, (uint64_t)v21, v15, v16, v17, v18, v23);
  return v13;
}

uint64_t matchPANDPCONTEXT_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, unsigned int a11)
{
  int v25 = 1;
  *a9 = 0;
  *(_DWORD *)(a8 + 6) = 0;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t matched = logPANDPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, (uint64_t *)a7);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    cstdlib_strcpy((char *)*a2, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  if (*(_WORD *)(a7 + 8))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t matched = matchREGEX_TRule((unsigned __int16 *)a5, a6, (unsigned __int16 *)(*(void *)a7 + v21), (unsigned __int16 *)a8, &v25, a10, a11, a8);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v23 = v25;
      if (v25 != 1) {
        goto LABEL_11;
      }
      ++v22;
      v21 += 6;
      if (v22 >= *(unsigned __int16 *)(a7 + 8)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    int v23 = 1;
LABEL_11:
    *a9 = v23;
  }
  return matched;
}

uint64_t matchREGEX_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v10 = a5;
  int v52 = 0;
  int v15 = a4[2];
  unsigned __int16 v51 = a4[2];
  *a5 = 0;
  if (a1[4]) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           regex %d", a6, a7, a8, a3[1]);
  }
  unsigned int v16 = *((unsigned __int8 *)a3 + 4);
  if (*((unsigned char *)a3 + 4))
  {
    if ((v16 & 4) != 0)
    {
      if (v8 == 2)
      {
        ++a4[4];
      }
      else if (v8 == 1)
      {
        ++a4[3];
      }
      if (a1[4]) {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           DIRECTIVE_MOVE2NEXT - window increased (ruleDef->left_window=%d ruleDef->right_window=%d)", a6, a7, a8, a4[3]);
      }
      uint64_t v24 = 0;
      goto LABEL_29;
    }
    uint64_t v49 = (_WORD *)a6;
    uint64_t v50 = v10;
    int v17 = (v16 >> 1) & 1;
    int v18 = (v16 >> 3) & 1;
    int v19 = v16 & 1;
    int v20 = (v16 >> 4) & 1;
  }
  else
  {
    uint64_t v49 = (_WORD *)a6;
    uint64_t v50 = v10;
    int v19 = 0;
    int v17 = 0;
    int v18 = 0;
    int v20 = 0;
  }
  if (a1[4] >= 2u)
  {
    int v21 = v19;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d bHasComma=%d", a6, a7, a8, (uint64_t)DOMAIN2STRING[*(unsigned int *)a4]);
    int v19 = v21;
  }
  if (v17)
  {
    unsigned int v22 = a4[2];
    if (a1[4])
    {
      int v23 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bHasComma = %d", a6, a7, a8, a4[2]);
      int v19 = v23;
      unsigned int v22 = a4[2];
    }
    uint64_t v10 = v50;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v22 + 28);
LABEL_24:
    int v30 = v19 ^ (v25 == 1);
    goto LABEL_30;
  }
  if (v18)
  {
    unsigned int v26 = a4[2];
    if (a1[4])
    {
      int v27 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsLastInPhr = %d", a6, a7, a8, a4[2]);
      int v19 = v27;
      unsigned int v26 = a4[2];
    }
    uint64_t v10 = v50;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v26 + 40);
    goto LABEL_24;
  }
  if (v20)
  {
    unsigned int v28 = a4[2];
    if (a1[4])
    {
      int v29 = v19;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsFirstInPhr = %d", a6, a7, a8, a4[2]);
      int v19 = v29;
      unsigned int v28 = a4[2];
    }
    uint64_t v10 = v50;
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(*(void *)a2 + 224 * v28 + 44);
    goto LABEL_24;
  }
  unsigned int v32 = *(_DWORD *)a4 - 1;
  if (v32 > 2)
  {
    uint64_t v10 = v50;
    goto LABEL_39;
  }
  uint64_t v10 = v50;
  switch(v8)
  {
    case 0:
LABEL_39:
      switch(v32)
      {
        case 0u:
          uint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 16) + 8 * *a3);
          goto LABEL_59;
        case 1u:
          uint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 56) + 32 * *a3 + 16);
          goto LABEL_59;
        case 2u:
          uint64_t v35 = *a3;
          if (v35 == a1[9]) {
            uint64_t v33 = (char *)(*(void *)(a2 + 16)
          }
                         + *(unsigned __int16 *)(*(void *)(a2 + 24) + 2 * (unsigned __int16)v15));
          else {
            uint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * (unsigned __int16)v15 + 16) + 8 * v35);
          }
          goto LABEL_59;
        case 3u:
          int v36 = v19;
          uint64_t v37 = adjustWordIdxByWindow(a1, (uint64_t *)a2, a4, v8, &v52, &v51, a7, a8);
          if ((v37 & 0x80000000) != 0) {
            return v37;
          }
          int v30 = v52;
          if (!v52) {
            goto LABEL_56;
          }
          int v19 = v36;
          uint64_t v33 = *(char **)(*(void *)(*(void *)a2 + 224 * v51 + 64) + 8 * *a3);
          int v34 = a1[4];
          if (!v33)
          {
            if (a1[4])
            {
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, 0);
              int v19 = v36;
              int v34 = a1[4];
            }
            unint64_t v38 = v49;
            uint64_t v24 = 0;
            *uint64_t v10 = 0;
            goto LABEL_73;
          }
LABEL_60:
          int v39 = v19;
          if (v34) {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           STR=\"%s\"", a6, a7, a8, (uint64_t)v33);
          }
          unsigned int v40 = a3[1];
          unsigned __int16 v41 = cstdlib_strlen(v33);
          uint64_t v24 = do_pcre_exec((uint64_t)a1, v40, v33, v41, 0, (uint64_t)v10, v42, v43);
          unint64_t v38 = v49;
          if ((v24 & 0x80000000) == 0) {
            goto LABEL_66;
          }
          return v24;
        case 4u:
          if (*a3 == a1[9]) {
            uint64_t v33 = *(char **)(a2 + 16);
          }
          else {
            uint64_t v33 = *(char **)(a2 + 32);
          }
LABEL_59:
          int v34 = a1[4];
          if (v33) {
            goto LABEL_60;
          }
          goto LABEL_64;
        default:
          int v34 = a1[4];
LABEL_64:
          *uint64_t v10 = 0;
          if (v34)
          {
            int v39 = v19;
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, 0);
            uint64_t v24 = 0;
            unint64_t v38 = v49;
LABEL_66:
            int v34 = a1[4];
            if (*v10 == 1)
            {
              if (a1[4]) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           REGEX FIRED", a6, a7, a8, 0);
              }
              if (v39)
              {
                int v30 = a1[4];
                if (!a1[4]) {
                  goto LABEL_30;
                }
                uint64_t v44 = *(void *)(*(void *)a1 + 32);
                uint64_t v45 = "           negate match - return LH_FALSE";
LABEL_81:
                log_OutText(v44, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v45, a6, a7, a8, 0);
                int v30 = 0;
                goto LABEL_30;
              }
              _WORD *v38 = a3[1];
              if (!a1[4])
              {
LABEL_29:
                int v30 = 1;
                goto LABEL_30;
              }
              uint64_t v47 = *(void *)(*(void *)a1 + 32);
              unint64_t v48 = "           return LH_TRUE";
LABEL_84:
              log_OutText(v47, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v48, a6, a7, a8, 0);
              goto LABEL_29;
            }
            int v19 = v39;
LABEL_73:
            if (v34)
            {
              int v46 = v19;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           REGEX FAILED", a6, a7, a8, 0);
              int v19 = v46;
            }
          }
          else
          {
            uint64_t v24 = 0;
            unint64_t v38 = v49;
          }
          if (!v19)
          {
            int v30 = a1[4];
            if (!a1[4]) {
              goto LABEL_30;
            }
            uint64_t v44 = *(void *)(*(void *)a1 + 32);
            uint64_t v45 = "           return LH_FALSE";
            goto LABEL_81;
          }
          _WORD *v38 = a3[1];
          if (!a1[4]) {
            goto LABEL_29;
          }
          uint64_t v47 = *(void *)(*(void *)a1 + 32);
          unint64_t v48 = "           negate match - return LH_TRUE";
          goto LABEL_84;
      }
    case 2:
      v15 += a4[4] + 1;
      if (v15 < *(unsigned __int16 *)(a2 + 8))
      {
LABEL_37:
        unsigned __int16 v51 = v15;
        goto LABEL_39;
      }
      break;
    case 1:
      v15 += ~a4[3];
      if (v15 >= 0) {
        goto LABEL_37;
      }
      break;
  }
  int v30 = a1[4];
  if (a1[4])
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           context not found. rule not applicable. RETURN LH_FALSE", a6, a7, a8, 0);
    int v30 = 0;
  }
LABEL_56:
  uint64_t v24 = 0;
LABEL_30:
  *uint64_t v10 = v30;
  return v24;
}

uint64_t matchPANDPRULE_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  int v25 = 1;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t matched = logPANDPRULE_TRule(a1, a2, a3, __s, (uint64_t *)a5, (uint64_t **)a7);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"       <%s>", v16, v17, v18, (uint64_t)*a2);
    cstdlib_strcpy((char *)*a2, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  *a9 = 0;
  if (*(void *)a7)
  {
    uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"LEFT", a2, a3, __s, a5, a6, *(void *)a7, a8, &v25, (uint64_t)v24, 1u);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1) {
      goto LABEL_15;
    }
  }
  uint64_t v21 = *(void *)(a7 + 8);
  if (v21)
  {
    int v25 = 0;
    uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"CUR", a2, a3, __s, a5, a6, v21, a8, &v25, (uint64_t)v24, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1)
    {
LABEL_15:
      *a9 = v20;
      return matched;
    }
  }
  uint64_t v22 = *(void *)(a7 + 16);
  if (!v22)
  {
    int v20 = 1;
    goto LABEL_15;
  }
  int v25 = 0;
  uint64_t matched = matchPANDPCONTEXT_TRule((uint64_t)"RIGHT", a2, a3, __s, a5, a6, v22, a8, &v25, (uint64_t)v24, 2u);
  if ((matched & 0x80000000) == 0)
  {
    int v20 = v25;
    goto LABEL_15;
  }
  return matched;
}

uint64_t matchMAPRULE2STR_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9)
{
  *a9 = 0;
  return matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, a7 + 8, a8, a9);
}

uint64_t matchMAPSTRSTR_TRule(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  if (*(_WORD *)(a1 + 8)) {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           compare \"%s\" \"%s\"", a6, a7, a8, *(void *)(a1 + 528) + *(unsigned int *)(*(void *)(a1 + 536) + 4 * *a3));
  }
  if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 528) + *(unsigned int *)(*(void *)(a1 + 536) + 4 * *a3)), *(const char **)(*(void *)(*a2 + 224 * *(unsigned __int16 *)(a4 + 4) + 16)+ 8 * *(unsigned __int16 *)(a1 + 16))))
  {
    if (*(_WORD *)(a1 + 8)) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           FOUND", v13, v14, v15, 0);
    }
    *a5 = 1;
  }
  return 0;
}

uint64_t matchMMAPREGEX2STR_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  return matchREGEX_TRule(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t matchMMAPREGEX2NUM_TRule(unsigned __int16 *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4, int *a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  uint64_t matched = matchREGEX_TRule(a1, a2, a3, a4, a5, (uint64_t)v13, 0, a8);
  if ((matched & 0x80000000) == 0 && *a5 == 1) {
    FLOATSUR_PLUS(a6, a6, a3 + 3);
  }
  return matched;
}

uint64_t matchMAPRULE2NUMANDOPERATOR_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, unsigned __int16 *a10)
{
  *a9 = 0;
  uint64_t matched = matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if ((matched & 0x80000000) == 0 && *a9 == 1) {
    getVal(a10, (_DWORD *)(a7 + 24), (unsigned __int16 *)(a7 + 28));
  }
  return matched;
}

unsigned __int16 *getVal(unsigned __int16 *result, _DWORD *a2, unsigned __int16 *a3)
{
  switch(*a2)
  {
    case 0:
      uint64_t result = (unsigned __int16 *)FLOATSUR_PLUS_INT(result, result, 1u, 0);
      break;
    case 1:
      uint64_t result = (unsigned __int16 *)FLOATSUR_PLUS(result, result, a3);
      break;
    case 2:
      uint64_t result = (unsigned __int16 *)FLOATSUR_MINUS_INT(result, result, 1u, 0);
      break;
    case 3:
      uint64_t result = (unsigned __int16 *)FLOATSUR_MINUS(result, result, a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t matchMAPRULE2NUM_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, int *a9, _DWORD *a10)
{
  *a9 = 0;
  uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 2), a8, a9);
  if ((result & 0x80000000) == 0 && *a9 == 1) {
    *a10 = *a7;
  }
  return result;
}

unsigned __int16 *matchMAPNUMNUM_TRule(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  *a3 = 0;
  uint64_t result = (unsigned __int16 *)FLOATSUR_EQUAL((unsigned __int16 *)(a1 + 4), a2);
  if (result)
  {
    *a3 = 1;
    return getVal(a2, (_DWORD *)a1, (unsigned __int16 *)(a1 + 8));
  }
  return result;
}

uint64_t setParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v16 = 0;
  __s1 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpdetailtrace", &v16) & 0x80000000) == 0) {
    *(_WORD *)(a5 + 8) = v16;
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdweakbnd", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 368), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdbndvalweak", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 372), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdbndvalstrong", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 376), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpthresholdweakfrag", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 380), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpprevfactor", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 384), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpnextfactor", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 388), v16, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"pandpbndfactor", &v16) & 0x80000000) == 0) {
    FLOATSUR_SET_INT((_WORD *)(a5 + 392), v16, 0);
  }
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"pandpphrasesize", &__s1) & 0x80000000) == 0)
  {
    if (cstdlib_strcmp(__s1, "min"))
    {
      if (!cstdlib_strcmp(__s1, "default"))
      {
        FLOATSUR_SET((_DWORD *)(a5 + 368), (_DWORD *)(a5 + 396));
        FLOATSUR_SET((_DWORD *)(a5 + 372), (_DWORD *)(a5 + 400));
        FLOATSUR_SET((_DWORD *)(a5 + 376), (_DWORD *)(a5 + 404));
        FLOATSUR_SET((_DWORD *)(a5 + 380), (_DWORD *)(a5 + 408));
        FLOATSUR_SET((_DWORD *)(a5 + 384), (_DWORD *)(a5 + 412));
        FLOATSUR_SET((_DWORD *)(a5 + 388), (_DWORD *)(a5 + 416));
        FLOATSUR_SET((_DWORD *)(a5 + 392), (_DWORD *)(a5 + 420));
      }
    }
    else
    {
      FLOATSUR_SET_INT((_WORD *)(a5 + 372), 0, 0);
      FLOATSUR_SET_INT((_WORD *)(a5 + 380), 0, 0);
    }
  }
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || !*(void *)&__c[3]) {
      goto LABEL_29;
    }
    int v11 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v11) {
      *int v11 = 0;
    }
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3]))
    {
      if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v16) & 0x80000000) != 0)
      {
        *(_DWORD *)(a5 + 656) = 1;
        uint64_t v12 = *(void *)(a1 + 40);
        unsigned int v13 = 1;
        goto LABEL_36;
      }
    }
    else
    {
LABEL_29:
      if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v16) & 0x80000000) != 0)
      {
        *(_DWORD *)(a5 + 656) = 0;
        uint64_t v12 = *(void *)(a1 + 40);
        unsigned int v13 = 0;
LABEL_36:
        paramc_ParamSetInt(v12, (uint64_t)"statcompwidescope", v13);
        return v10;
      }
    }
    if (v16) {
      *(_DWORD *)(a5 + 656) = 1;
    }
    else {
      *(_DWORD *)(a5 + 656) = 0;
    }
  }
  return v10;
}

uint64_t readPandPRules(_WORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  v142 = 0;
  char v141 = 0;
  unsigned int v139 = 0;
  *(_DWORD *)__s2 = 0;
  uint64_t v137 = 0;
  __src = 0;
  memset(v143, 0, sizeof(v143));
  __s1 = 0;
  *(void *)a4 = a3;
  if ((paramc_ParamGetStr(a3[5], (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0
    && __s1
    && !cstdlib_strcmp(__s1, "yes"))
  {
    goto LABEL_182;
  }
  log_OutText(a3[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load voice-dependent PandP rules", v8, v9, v10, 0);
  uint64_t BrokerString = getBrokerString((uint64_t)a3, 1, v143);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  if ((brk_DataOpenEx(a3[3], (uint64_t)v143, 1, (uint64_t)&v137) & 0x80000000) != 0)
  {
    log_OutText(a3[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load legacy voice-dependent PandP MS rules", v12, v13, v14, 0);
    uint64_t BrokerString = getLegacyBrokerString((uint64_t)a3, v143);
    if ((BrokerString & 0x80000000) != 0) {
      return BrokerString;
    }
    if ((brk_DataOpenEx(a3[3], (uint64_t)v143, 1, (uint64_t)&v137) & 0x80000000) != 0)
    {
LABEL_182:
      log_OutText(a3[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"trying to load voice-independent PandP rules", v8, v9, v10, 0);
      uint64_t BrokerString = getBrokerString((uint64_t)a3, 0, v143);
      if ((BrokerString & 0x80000000) != 0) {
        return BrokerString;
      }
      uint64_t BrokerString = brk_DataOpenEx(a3[3], (uint64_t)v143, 1, (uint64_t)&v137);
      if ((BrokerString & 0x80000000) != 0) {
        return BrokerString;
      }
    }
  }
  uint64_t BrokerString = brk_DataClose(a3[3], v137);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t BrokerString = ssftriff_reader_ObjOpen(a1, a2, 0, (const char *)v143, "PANP", 1031, (uint64_t *)&v142);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  v128 = a3;
  uint64_t v15 = (_WORD *)(a4 + 144);
  int v16 = (_WORD *)(a4 + 120);
  uint64_t v17 = (_WORD *)(a4 + 104);
  uint64_t v18 = (_WORD *)(a4 + 88);
  int v19 = (_WORD *)(a4 + 74);
  int v20 = (_WORD *)(a4 + 56);
  uint64_t v21 = (_WORD *)(a4 + 40);
  v129 = (unsigned __int16 *)(a4 + 72);
  do
  {
    LODWORD(v29) = ssftriff_reader_OpenChunk((uint64_t)v142, (__int32 *)__s2, &v139, &__src);
    if ((v29 & 0x80000000) != 0) {
      break;
    }
    if (!cstdlib_strcmp("CFIG", __s2))
    {
      uint64_t v31 = (char *)__src;
      cstdlib_memcpy((void *)(a4 + 10), __src, 2uLL);
      cstdlib_memcpy((void *)(a4 + 12), v31 + 2, 2uLL);
      cstdlib_memcpy((void *)(a4 + 14), v31 + 4, 2uLL);
LABEL_35:
      LODWORD(v29) = 0;
      goto LABEL_48;
    }
    if (!cstdlib_strcmp("STSE", __s2))
    {
      unsigned int v32 = (char *)__src;
      cstdlib_memcpy(v21, __src, 2uLL);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(a4 + 40)) | 1);
      *(void *)(a4 + 32) = v33;
      if (!v33) {
        goto LABEL_157;
      }
      if (*v21)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 4;
        unsigned int v40 = 2;
        do
        {
          cstdlib_memcpy((void *)(*(void *)(a4 + 32) + v39 - 4), &v32[v40], 4uLL);
          uint64_t v41 = v40 + 4;
          cstdlib_memcpy((void *)(*(void *)(a4 + 32) + v39), &v32[v41], 4uLL);
          unsigned int v40 = v41 + 4;
          ++v38;
          v39 += 8;
        }
        while (v38 < *(unsigned __int16 *)(a4 + 40));
        goto LABEL_40;
      }
      goto LABEL_35;
    }
    if (!cstdlib_strcmp("PAUD", __s2))
    {
      uint64_t v42 = (char *)__src;
      cstdlib_memcpy(v20, __src, 2uLL);
      LODWORD(v135) = 2;
      uint64_t v43 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(a4 + 56)) | 1);
      *(void *)(a4 + 48) = v43;
      if (!v43) {
        goto LABEL_157;
      }
      uint64_t v44 = v19;
      uint64_t v45 = v17;
      int v46 = v16;
      uint64_t v47 = v15;
      if (*v20)
      {
        unint64_t v48 = 0;
        uint64_t v49 = 4;
        do
        {
          uint64_t v50 = (_WORD *)(*(void *)(a4 + 48) + v49);
          int v51 = (int)v135;
          cstdlib_memcpy(v50 - 2, &v42[v135], 4uLL);
          LODWORD(v135) = v51 + 4;
          readTWOPARTNUM((uint64_t)v42, &v135, v50);
          ++v48;
          v49 += 8;
        }
        while (v48 < *(unsigned __int16 *)(a4 + 56));
      }
      LODWORD(v29) = 0;
      uint64_t v15 = v47;
      int v16 = v46;
      uint64_t v17 = v45;
      int v19 = v44;
      uint64_t v18 = (_WORD *)(a4 + 88);
      goto LABEL_46;
    }
    if (!cstdlib_strcmp("DEFM", __s2))
    {
      uint64_t v53 = (char *)__src;
      cstdlib_memcpy(v129, __src, 2uLL);
      cstdlib_memcpy(v19, v53 + 2, 2uLL);
      uint64_t v54 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(a4 + 72)) | 1);
      *(void *)(a4 + 64) = v54;
      if (!v54) {
        goto LABEL_157;
      }
      LODWORD(v55) = (unsigned __int16)*v19;
      if (*v19)
      {
        unint64_t v56 = 0;
        uint64_t v57 = 4;
        uint64_t v58 = 4;
        do
        {
          cstdlib_memcpy((void *)(*(void *)(a4 + 64) + v57), &v53[v58], 4uLL);
          v58 += 4;
          ++v56;
          unint64_t v55 = *(unsigned __int16 *)(a4 + 74);
          v57 += 8;
        }
        while (v56 < v55);
        int v20 = (_WORD *)(a4 + 56);
      }
      else
      {
        uint64_t v58 = 4;
      }
      if (v55 >= *v129)
      {
        LODWORD(v29) = 0;
        uint64_t v21 = (_WORD *)(a4 + 40);
        goto LABEL_48;
      }
      uint64_t v69 = &v53[v58];
      uint64_t v70 = 8 * v55;
      unint64_t v71 = v55;
      do
      {
        cstdlib_memcpy((void *)(*(void *)(a4 + 64) + v70), v69, 4uLL);
        cstdlib_memcpy((void *)(*(void *)(a4 + 64) + v70 + 4), v69 + 4, 4uLL);
        ++v71;
        v69 += 8;
        v70 += 8;
      }
      while (v71 < *(unsigned __int16 *)(a4 + 72));
      LODWORD(v29) = 0;
      goto LABEL_47;
    }
    if (!cstdlib_strcmp("RTAG", __s2))
    {
      uint64_t v59 = (char *)__src;
      cstdlib_memcpy(v18, __src, 2uLL);
      LODWORD(v135) = 2;
      uint64_t v60 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * *(unsigned __int16 *)(a4 + 88)) | 1);
      *(void *)(a4 + 80) = v60;
      if (!v60) {
        goto LABEL_157;
      }
      if (*v18)
      {
        unint64_t v61 = 0;
        uint64_t v62 = 8;
        do
        {
          int v63 = (int)v135;
          cstdlib_memcpy((void *)(*(void *)(a4 + 80) + v62 - 8), &v59[v135], 4uLL);
          LODWORD(v135) = v63 + 4;
          uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v59, (unsigned int *)&v135, (uint64_t *)(*(void *)(a4 + 80) + v62));
          if ((BrokerString & 0x80000000) != 0) {
            return BrokerString;
          }
          ++v61;
          v62 += 32;
        }
        while (v61 < (unsigned __int16)*v18);
      }
LABEL_40:
      LODWORD(v29) = 0;
LABEL_46:
      int v20 = (_WORD *)(a4 + 56);
LABEL_47:
      uint64_t v21 = (_WORD *)(a4 + 40);
      goto LABEL_48;
    }
    if (!cstdlib_strcmp("STAG", __s2))
    {
      uint64_t v64 = (char *)__src;
      cstdlib_memcpy(v17, __src, 2uLL);
      LODWORD(v135) = 2;
      uint64_t v65 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * *(unsigned __int16 *)(a4 + 104)) | 1);
      *(void *)(a4 + 96) = v65;
      if (!v65) {
        goto LABEL_157;
      }
      if (*v17)
      {
        unint64_t v66 = 0;
        uint64_t v67 = 8;
        while (1)
        {
          int v68 = (int)v135;
          cstdlib_memcpy((void *)(*(void *)(a4 + 96) + v67 - 8), &v64[v135], 4uLL);
          LODWORD(v135) = v68 + 4;
          uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v64, (unsigned int *)&v135, (uint64_t *)(*(void *)(a4 + 96) + v67));
          if ((BrokerString & 0x80000000) != 0) {
            return BrokerString;
          }
          ++v66;
          v67 += 32;
          if (v66 >= (unsigned __int16)*v17) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    if (!cstdlib_strcmp("TPOS", __s2))
    {
      uint64_t v72 = (char *)__src;
      cstdlib_memcpy(v16, __src, 2uLL);
      LODWORD(v135) = 2;
      uint64_t v73 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (32 * *(unsigned __int16 *)(a4 + 120)) | 1);
      *(void *)(a4 + 112) = v73;
      if (!v73) {
        goto LABEL_157;
      }
      if (*v16)
      {
        unint64_t v74 = 0;
        uint64_t v75 = 8;
        while (1)
        {
          int v76 = (int)v135;
          cstdlib_memcpy((void *)(*(void *)(a4 + 112) + v75 - 8), &v72[v135], 4uLL);
          LODWORD(v135) = v76 + 4;
          uint64_t BrokerString = readRULE(*(void *)a4, (uint64_t)v72, (unsigned int *)&v135, (uint64_t *)(*(void *)(a4 + 112) + v75));
          if ((BrokerString & 0x80000000) != 0) {
            return BrokerString;
          }
          ++v74;
          v75 += 32;
          if (v74 >= (unsigned __int16)*v16) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_40;
    }
    if (cstdlib_strcmp("TDEF", __s2))
    {
      if (!cstdlib_strcmp("GENR", __s2))
      {
        uint64_t BrokerString = readGeneralRulesCHUNK(__src, (uint64_t *)a4);
        if ((BrokerString & 0x80000000) != 0) {
          return BrokerString;
        }
        goto LABEL_35;
      }
      if (!cstdlib_strcmp("TOKR", __s2))
      {
        uint64_t TokenRulesCHUNK = readTokenRulesCHUNK((char *)__src, (uint64_t *)a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("PWGT", __s2))
      {
        uint64_t TokenRulesCHUNK = readPhraseWeightsCHUNK((char *)__src, (unsigned __int16 *)a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("NUMS", __s2))
      {
        uint64_t TokenRulesCHUNK = readNumSettingsCHUNK((char *)__src, (unsigned __int16 *)a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("PROM", __s2))
      {
        uint64_t TokenRulesCHUNK = readProminenceCHUNK((char *)__src, (uint64_t *)a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("REGX", __s2))
      {
        uint64_t TokenRulesCHUNK = readRegexCHUNK((uint64_t)v142, (uint64_t)__src, a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("STRS", __s2))
      {
        uint64_t TokenRulesCHUNK = readStringCHUNK((uint64_t)v142, (uint64_t)__src, a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("REST", __s2))
      {
        uint64_t TokenRulesCHUNK = readRegexStringCHUNK((uint64_t)v142, (uint64_t)__src, a4);
        goto LABEL_109;
      }
      if (!cstdlib_strcmp("MSDF", __s2))
      {
        uint64_t BrokerString = readMSCHUNK((char *)__src, a4);
        if ((BrokerString & 0x80000000) != 0) {
          return BrokerString;
        }
        goto LABEL_35;
      }
      if (!cstdlib_strcmp("PHRT", __s2))
      {
        uint64_t TokenRulesCHUNK = readPhraseTypeCHUNK((char *)__src, (uint64_t *)a4);
LABEL_109:
        uint64_t v29 = TokenRulesCHUNK;
        if ((TokenRulesCHUNK & 0x80000000) != 0) {
          return v29;
        }
        goto LABEL_48;
      }
      if (!cstdlib_strcmp("CMPD", __s2))
      {
        uint64_t TokenRulesCHUNK = readMSCOMPOUNDDEFCHUNK((char *)__src, (void *)a4);
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v77 = (char *)__src;
      cstdlib_memcpy(v15, __src, 2uLL);
      uint64_t v78 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(a4 + 144)) | 1);
      *(void *)(a4 + 136) = v78;
      if (!v78) {
        goto LABEL_157;
      }
      LOWORD(v134) = 0;
      if (*v15)
      {
        unint64_t v79 = 0;
        uint64_t v80 = 2;
        do
        {
          cstdlib_memcpy(&v134, &v77[v80], 2uLL);
          v80 += 2;
          *(_DWORD *)(*(void *)(a4 + 136) + 4 * v79++) = (unsigned __int16)v134;
          unint64_t v81 = *(unsigned __int16 *)(a4 + 144);
        }
        while (v79 < v81);
        uint64_t v82 = (8 * v81) | 1;
      }
      else
      {
        LODWORD(v80) = 2;
        uint64_t v82 = 1;
      }
      LODWORD(v135) = v80;
      uint64_t v83 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, v82);
      *(void *)(a4 + 128) = v83;
      if (!v83)
      {
LABEL_157:
        uint64_t v29 = 2315264010;
        uint64_t v113 = *(void *)(*(void *)a4 + 32);
LABEL_158:
        log_OutPublic(v113, (uint64_t)"FE_PHRASING", 37000, 0, v34, v35, v36, v37, v127);
        return v29;
      }
      if (*v15)
      {
        unint64_t v84 = 0;
        do
        {
          size_t v85 = *(void **)(*(void *)a4 + 8);
          if (*(_DWORD *)(*(void *)(a4 + 136) + 4 * v84) == 1)
          {
            *(void *)(*(void *)(a4 + 128) + 8 * v84) = heap_Calloc(v85, 1, 13);
            uint64_t v86 = *(char **)(*(void *)(a4 + 128) + 8 * v84);
            if (!v86) {
              goto LABEL_157;
            }
            readREGEX((uint64_t)v77, &v135, v86);
            uint64_t v87 = (void *)(*(void *)(*(void *)(a4 + 128) + 8 * v84) + 8);
            int v88 = (int)v135;
          }
          else
          {
            *(void *)(*(void *)(a4 + 128) + 8 * v84) = heap_Calloc(v85, 1, 9);
            uint64_t v89 = *(void **)(*(void *)(a4 + 128) + 8 * v84);
            if (!v89) {
              goto LABEL_157;
            }
            cstdlib_memcpy(v89, &v77[v80], 4uLL);
            int v88 = v80 + 4;
            uint64_t v87 = (void *)(*(void *)(*(void *)(a4 + 128) + 8 * v84) + 4);
          }
          cstdlib_memcpy(v87, &v77[v88], 4uLL);
          LODWORD(v80) = v88 + 4;
          LODWORD(v135) = v80;
          ++v84;
        }
        while (v84 < (unsigned __int16)*v15);
      }
      LODWORD(v29) = 0;
      int v20 = (_WORD *)(a4 + 56);
      uint64_t v21 = (_WORD *)(a4 + 40);
    }
LABEL_48:
    int v52 = ssftriff_reader_CloseChunk((uint64_t)v142);
    if (v52 < 0) {
      LODWORD(v29) = v52;
    }
  }
  while ((v29 & 0x80000000) == 0);
  if ((v29 & 0x1FFF) == 0x14) {
    int v91 = 0;
  }
  else {
    int v91 = v29;
  }
  uint64_t v29 = 2315264010;
  if ((v91 & 0x1FFF) != 0xA)
  {
    int v92 = ssftriff_reader_ObjClose(v142, v22, v23, v24, v25, v26, v27, v28);
    v142 = 0;
    if (v92 >= 0 || v91 <= -1) {
      uint64_t v94 = v91;
    }
    else {
      uint64_t v94 = v92;
    }
    if (*v19)
    {
      unint64_t v95 = 0;
      uint64_t v96 = 4;
      do
      {
        if (cstdlib_strcmp("ORT", (const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v96)))))
        {
          if (cstdlib_strcmp("POS", (const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v96)))))
          {
            if (cstdlib_strcmp("TOK", (const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v96)))))
            {
              if (cstdlib_strcmp("TOKT", (const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v96)))))
              {
                if (!cstdlib_strcmp("PHR", (const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v96)))))*(_WORD *)(a4 + 24) = v95; {
              }
                }
              else
              {
                *(_WORD *)(a4 + 22) = v95;
              }
            }
            else
            {
              *(_WORD *)(a4 + 20) = v95;
            }
          }
          else
          {
            *(_WORD *)(a4 + 18) = v95;
          }
        }
        else
        {
          *(_WORD *)(a4 + 16) = v95;
        }
        ++v95;
        v96 += 8;
      }
      while (v95 < (unsigned __int16)*v19);
    }
    FLOATSUR_SET_INT((_WORD *)(a4 + 368), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 372), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 376), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 380), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 384), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 388), 0, 0);
    FLOATSUR_SET_INT((_WORD *)(a4 + 392), 0, 0);
    if (*(_WORD *)(a4 + 280))
    {
      uint64_t v101 = 0;
      unint64_t v102 = 0;
      int v130 = 0;
      int __dst = 0;
      int v132 = 0;
      int v133 = 0;
      int v103 = 0;
      int v104 = 0;
      int v105 = 0;
      do
      {
        if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "threshold_weak_bnd"))
        {
          if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "threshold_bnd_val_weak"))
          {
            if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "threshold_bnd_val_strong"))
            {
              if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "threshold_weak_frag"))
              {
                if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "prevFactor"))
                {
                  if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "nextFactor"))
                  {
                    if (cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "bndFactor"))
                    {
                      if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * *(unsigned int *)(*(void *)(a4 + 272) + v101))), "mapfromBIO")&& !FLOATSUR_EQUAL_INT((unsigned __int16 *)(*(void *)(a4 + 272) + v101 + 4), 0, 0))
                      {
                        log_OutText(v128[4], (uint64_t)"FE_PHRASING", 1, 0, (uint64_t)"mapfromBIO PandP setting is no longer honored", v98, v99, v100, v127);
                      }
                    }
                    else
                    {
                      int v112 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
                      *(_DWORD *)(a4 + 392) = v112;
                      *(_DWORD *)(a4 + 420) = v112;
                      int v130 = 1;
                    }
                  }
                  else
                  {
                    int v111 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
                    *(_DWORD *)(a4 + 388) = v111;
                    *(_DWORD *)(a4 + 416) = v111;
                    int __dst = 1;
                  }
                }
                else
                {
                  int v110 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
                  *(_DWORD *)(a4 + 384) = v110;
                  *(_DWORD *)(a4 + 412) = v110;
                  int v132 = 1;
                }
              }
              else
              {
                int v109 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
                *(_DWORD *)(a4 + 380) = v109;
                *(_DWORD *)(a4 + 408) = v109;
                int v133 = 1;
              }
            }
            else
            {
              int v108 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
              *(_DWORD *)(a4 + 376) = v108;
              *(_DWORD *)(a4 + 404) = v108;
              int v103 = 1;
            }
          }
          else
          {
            int v107 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
            *(_DWORD *)(a4 + 372) = v107;
            *(_DWORD *)(a4 + 400) = v107;
            int v104 = 1;
          }
        }
        else
        {
          int v106 = *(_DWORD *)(*(void *)(a4 + 272) + v101 + 4);
          *(_DWORD *)(a4 + 368) = v106;
          *(_DWORD *)(a4 + 396) = v106;
          int v105 = 1;
        }
        ++v102;
        v101 += 8;
      }
      while (v102 < *(unsigned __int16 *)(a4 + 280));
    }
    else
    {
      int v105 = 0;
      int v104 = 0;
      int v103 = 0;
      int v133 = 0;
      int v132 = 0;
      int __dst = 0;
      int v130 = 0;
    }
    if (v105 && v104 && v103 && v133 && v132 && __dst && v130)
    {
      v135 = 0;
      int v134 = 0;
      uint64_t StrSetting = getStrSetting(a4, "COMPOUND_FEATURE_STR");
      if (StrSetting)
      {
        int v115 = (const char *)StrSetting;
        uint64_t v116 = getStrSetting(a4, "COMPOUND_START_TAG");
        *(void *)(a4 + 640) = v116;
        if (v116)
        {
          __int16 v117 = (void *)v128[1];
          unsigned __int16 v118 = cstdlib_strlen(v115);
          __int16 v119 = (char *)heap_Calloc(v117, 1, v118 + 3);
          if (!v119)
          {
            uint64_t v113 = v128[4];
            goto LABEL_158;
          }
          long long v120 = v119;
          cstdlib_strcpy(v119, ",");
          cstdlib_strcat(v120, v115);
          cstdlib_strcat(v120, ",");
          *(void *)(a4 + 648) = nuance_pcre_compile(*(void *)(a4 + 424), *(void *)(a4 + 432), v120, 0, &v135, &v134, 0);
          heap_Free((void *)v128[1], (uint64_t)v120);
          if (*(void *)(a4 + 648)) {
            return v94;
          }
          log_OutPublic(v128[4], (uint64_t)"FE_PHRASING", 11006, (uint64_t)"%s%s%s%s%s%d", v121, v122, v123, v124, "regularExpression");
          return 2315264000;
        }
        uint64_t v125 = v128[4];
      }
      else
      {
        uint64_t v125 = v128[4];
      }
      uint64_t v126 = 62000;
    }
    else
    {
      uint64_t v125 = v128[4];
      uint64_t v126 = 62004;
    }
    log_OutPublic(v125, (uint64_t)"FE_PHRASING", v126, 0, v97, v98, v99, v100, v127);
    return 2315264000;
  }
  return v29;
}

uint64_t getBrokerString(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  __s = 0;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)__s1 = 0u;
  *(_DWORD *)__s2 = 0;
  *a3 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    size_t v7 = 0;
    if (cstdlib_strlen(__s))
    {
      do
      {
        unint64_t v8 = v7;
        __s2[v7] = cstdlib_tolower(__s[v7]);
        ++v7;
        size_t v9 = cstdlib_strlen(__s);
      }
      while (v8 <= 1 && v7 < v9);
    }
    __s2[v7] = 0;
    if (cstdlib_strcmp(__s, __s2))
    {
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      __s = __s2;
    }
    cstdlib_strcat(__s1, "pandp");
    cstdlib_strcat(__s1, "/");
    cstdlib_strcat(__s1, __s);
    if (a2 == 1)
    {
      uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v12);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_strcat(__s1, "/");
      cstdlib_strcat(__s1, v12);
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 0;
    }
    return brokeraux_ComposeBrokerString(a1, __s1, 0, 1, __s, v10, 0, a3, 0x80uLL);
  }
  return result;
}

uint64_t getLegacyBrokerString(uint64_t a1, unsigned char *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  size_t v9 = 0;
  __s = 0;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__s1 = 0u;
  *(_DWORD *)__s2 = 0;
  *a2 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    size_t v5 = 0;
    if (cstdlib_strlen(__s))
    {
      do
      {
        unint64_t v6 = v5;
        __s2[v5] = cstdlib_tolower(__s[v5]);
        ++v5;
        size_t v7 = cstdlib_strlen(__s);
      }
      while (v6 <= 1 && v5 < v7);
    }
    __s2[v5] = 0;
    if (cstdlib_strcmp(__s, __s2))
    {
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      __s = __s2;
    }
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"voice", &v9);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "pandp");
      cstdlib_strcat(__s1, "/ms/");
      cstdlib_strcat(__s1, __s);
      cstdlib_strcat(__s1, "/");
      cstdlib_strcat(__s1, v9);
      return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s, v9, 0, a2, 0x80uLL);
    }
  }
  return result;
}

uint64_t readGeneralRulesCHUNK(void *__src, uint64_t *a2)
{
  uint64_t v4 = a2 + 20;
  cstdlib_memcpy(a2 + 20, __src, 2uLL);
  unsigned int v14 = 2;
  uint64_t v5 = heap_Calloc(*(void **)(*a2 + 8), 1, (32 * *((unsigned __int16 *)a2 + 80)) | 1);
  a2[19] = v5;
  if (v5)
  {
    if (*v4)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        uint64_t result = readRULE(*a2, (uint64_t)__src, &v14, (uint64_t *)(a2[19] + v10 + 8));
        if ((result & 0x80000000) != 0) {
          break;
        }
        readTWOPARTNUM((uint64_t)__src, &v14, (_WORD *)(a2[19] + v10));
        ++v11;
        v10 += 32;
        if (v11 >= *((unsigned __int16 *)a2 + 80)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    log_OutPublic(*(void *)(*a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v13);
    return 2315264010;
  }
  return result;
}

uint64_t readTokenRulesCHUNK(char *__src, uint64_t *a2)
{
  cstdlib_memcpy(a2 + 21, __src, 2uLL);
  uint64_t v4 = a2 + 23;
  cstdlib_memcpy(a2 + 23, __src + 2, 2uLL);
  unsigned int v31 = 4;
  uint64_t v5 = heap_Calloc(*(void **)(*a2 + 8), 1, (40 * *((unsigned __int16 *)a2 + 92)) | 1);
  a2[22] = v5;
  if (v5)
  {
    if (!*v4) {
      return 0;
    }
    uint64_t v10 = 0;
    unsigned __int16 __dst = 0;
    while (1)
    {
      unint64_t v11 = (uint64_t *)heap_Calloc(*(void **)(*a2 + 8), 1, 25);
      *(void *)(a2[22] + 40 * v10) = v11;
      uint64_t v12 = *a2;
      if (!v11) {
        break;
      }
      uint64_t v13 = readRULE(v12, (uint64_t)__src, &v31, v11);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
      unsigned int v14 = v31;
      cstdlib_memcpy((void *)(a2[22] + 40 * v10 + 16), &__src[v31], 2uLL);
      unsigned int v15 = v14 + 2;
      unsigned int v31 = v15;
      uint64_t v16 = heap_Calloc(*(void **)(*a2 + 8), 1, (32 * *(unsigned __int16 *)(a2[22] + 40 * v10 + 16)) | 1);
      uint64_t v17 = a2[22];
      *(void *)(v17 + 40 * v10 + 8) = v16;
      if (!v16) {
        goto LABEL_19;
      }
      if (*(_WORD *)(v17 + 40 * v10 + 16))
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        while (1)
        {
          uint64_t v13 = readRULE(*a2, (uint64_t)__src, &v31, (uint64_t *)(*(void *)(v17 + 40 * v10 + 8) + v18 + 8));
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          readTWOPARTNUM((uint64_t)__src, &v31, (_WORD *)(*(void *)(a2[22] + 40 * v10 + 8) + v18));
          ++v19;
          uint64_t v17 = a2[22];
          v18 += 32;
          if (v19 >= *(unsigned __int16 *)(v17 + 40 * v10 + 16))
          {
            unsigned int v15 = v31;
            break;
          }
        }
      }
      cstdlib_memcpy((void *)(v17 + 40 * v10 + 32), &__src[v15], 2uLL);
      unsigned int v31 = v15 + 2;
      uint64_t v20 = heap_Calloc(*(void **)(*a2 + 8), 1, (32 * *(unsigned __int16 *)(a2[22] + 40 * v10 + 32)) | 1);
      uint64_t v21 = a2[22];
      *(void *)(v21 + 40 * v10 + 24) = v20;
      if (!v20) {
        goto LABEL_19;
      }
      if (*(_WORD *)(v21 + 40 * v10 + 32))
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        do
        {
          uint64_t v13 = readRULE(*a2, (uint64_t)__src, &v31, (uint64_t *)(*(void *)(v21 + 40 * v10 + 24) + v22));
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
          unsigned int v24 = v31;
          cstdlib_memcpy(&__dst, &__src[v31], 2uLL);
          unsigned int v31 = v24 + 2;
          uint64_t v25 = *(void *)(a2[22] + 40 * v10 + 24) + v22;
          *(_DWORD *)(v25 + 24) = __dst;
          readTWOPARTNUM((uint64_t)__src, &v31, (_WORD *)(v25 + 28));
          ++v23;
          uint64_t v21 = a2[22];
          v22 += 32;
        }
        while (v23 < *(unsigned __int16 *)(v21 + 40 * v10 + 32));
      }
      uint64_t v26 = 0;
      if (++v10 >= (unint64_t)(unsigned __int16)*v4) {
        return v26;
      }
    }
    uint64_t v26 = 2315264010;
    uint64_t v27 = *(void *)(v12 + 32);
  }
  else
  {
LABEL_19:
    uint64_t v26 = 2315264010;
    uint64_t v27 = *(void *)(*a2 + 32);
  }
  log_OutPublic(v27, (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v29);
  return v26;
}

uint64_t readPhraseWeightsCHUNK(char *__src, unsigned __int16 *a2)
{
  uint64_t v4 = a2 + 124;
  cstdlib_memcpy(a2 + 124, __src, 2uLL);
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (12 * a2[124]) | 1);
  *((void *)a2 + 30) = v5;
  if (!v5) {
    goto LABEL_21;
  }
  if (*v4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unsigned int v12 = 2;
    do
    {
      cstdlib_memcpy((void *)(*((void *)a2 + 30) + v10), &__src[v12], 4uLL);
      unsigned int v29 = v12 + 4;
      readTWOPARTNUM((uint64_t)__src, &v29, (_WORD *)(*((void *)a2 + 30) + v10 + 4));
      unsigned int v13 = v29;
      cstdlib_memcpy((void *)(*((void *)a2 + 30) + v10 + 8), &__src[v29], 2uLL);
      cstdlib_memcpy((void *)(*((void *)a2 + 30) + v10 + 10), &__src[v13 + 2], 2uLL);
      unsigned int v12 = v13 + 4;
      unsigned int v29 = v12;
      ++v11;
      v10 += 12;
    }
    while (v11 < a2[124]);
  }
  else
  {
    unsigned int v12 = 2;
  }
  cstdlib_memcpy(a2 + 132, &__src[v12], 2uLL);
  unsigned int v29 = v12 + 2;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (32 * a2[132]) | 1);
  *((void *)a2 + 32) = v14;
  if (!v14) {
    goto LABEL_21;
  }
  if (!a2[132])
  {
LABEL_12:
    readTWOPARTNUM((uint64_t)__src, &v29, a2 + 96);
    unsigned int v18 = v29;
    cstdlib_memcpy(a2 + 104, &__src[v29], 2uLL);
    unsigned int v29 = v18 + 2;
    uint64_t v19 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (10 * a2[104]) | 1);
    *((void *)a2 + 25) = v19;
    if (v19)
    {
      if (a2[104])
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        do
        {
          readREGEX((uint64_t)__src, &v29, (char *)(*((void *)a2 + 25) + v20));
          readTWOPARTNUM((uint64_t)__src, &v29, (_WORD *)(*((void *)a2 + 25) + v20 + 6));
          ++v21;
          v20 += 10;
        }
        while (v21 < a2[104]);
      }
      readTWOPARTNUM((uint64_t)__src, &v29, a2 + 108);
      unsigned int v22 = v29;
      cstdlib_memcpy(a2 + 116, &__src[v29], 2uLL);
      unsigned int v29 = v22 + 2;
      uint64_t v23 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (12 * a2[116]) | 1);
      *((void *)a2 + 28) = v23;
      if (v23)
      {
        if (a2[116])
        {
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          do
          {
            uint64_t v26 = *((void *)a2 + 28) + v24;
            unsigned __int16 __dst = 0;
            readTWOPARTNUM((uint64_t)__src, &v29, (_WORD *)(v26 + 4));
            readTWOPARTNUM((uint64_t)__src, &v29, (_WORD *)(v26 + 8));
            unsigned int v27 = v29;
            cstdlib_memcpy(&__dst, &__src[v29], 2uLL);
            unsigned int v29 = v27 + 2;
            *(_DWORD *)uint64_t v26 = __dst;
            ++v25;
            v24 += 12;
          }
          while (v25 < a2[116]);
        }
        return 0;
      }
    }
LABEL_21:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v28);
    return 2315264010;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  while (1)
  {
    uint64_t result = readRULE(*(void *)a2, (uint64_t)__src, &v29, (uint64_t *)(*((void *)a2 + 32) + v15 + 8));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    readTWOPARTNUM((uint64_t)__src, &v29, (_WORD *)(*((void *)a2 + 32) + v15));
    ++v16;
    v15 += 32;
    if (v16 >= a2[132]) {
      goto LABEL_12;
    }
  }
}

uint64_t readNumSettingsCHUNK(char *__src, unsigned __int16 *a2)
{
  uint64_t v4 = a2 + 140;
  cstdlib_memcpy(a2 + 140, __src, 2uLL);
  unsigned int v16 = 2;
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (8 * a2[140]) | 1);
  *((void *)a2 + 34) = v5;
  if (v5)
  {
    if (*v4)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        unsigned int v12 = (_WORD *)(*((void *)a2 + 34) + v10);
        unsigned int v13 = v16;
        cstdlib_memcpy(v12, &__src[v16], 4uLL);
        unsigned int v16 = v13 + 4;
        readTWOPARTNUM((uint64_t)__src, &v16, v12 + 2);
        ++v11;
        v10 += 8;
      }
      while (v11 < a2[140]);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v15);
    return 2315264010;
  }
}

uint64_t readProminenceCHUNK(char *__src, uint64_t *a2)
{
  uint64_t v4 = a2 + 37;
  cstdlib_memcpy(a2 + 37, __src, 2uLL);
  uint64_t v5 = heap_Calloc(*(void **)(*a2 + 8), 1, (4 * *((unsigned __int16 *)a2 + 148)) | 1);
  a2[36] = v5;
  if (!v5) {
    goto LABEL_13;
  }
  if (*v4)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2;
    do
    {
      cstdlib_memcpy((void *)(a2[36] + v11 - 2), &__src[v11], 4uLL);
      ++v10;
      v11 += 4;
    }
    while (v10 < *((unsigned __int16 *)a2 + 148));
  }
  else
  {
    LODWORD(v11) = 2;
  }
  unsigned int v12 = a2 + 39;
  cstdlib_memcpy(a2 + 39, &__src[v11], 2uLL);
  unsigned int v18 = v11 + 2;
  uint64_t v13 = heap_Calloc(*(void **)(*a2 + 8), 1, (24 * *((unsigned __int16 *)a2 + 156)) | 1);
  a2[38] = v13;
  if (v13)
  {
    if (*v12)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t result = readRULE(*a2, (uint64_t)__src, &v18, (uint64_t *)(a2[38] + v14));
        if ((result & 0x80000000) != 0) {
          break;
        }
        ++v15;
        v14 += 24;
        if (v15 >= (unsigned __int16)*v12) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_13:
    log_OutPublic(*(void *)(*a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v17);
    return 2315264010;
  }
  return result;
}

uint64_t readRegexCHUNK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  int __dst = 0;
  uint64_t v6 = 4;
  cstdlib_memcpy((void *)(a3 + 440), (const void *)a2, 4uLL);
  if (*(_DWORD *)(a3 + 440))
  {
    cstdlib_memcpy(&__dst, (const void *)(a2 + 4), 4uLL);
    uint64_t v7 = (__dst + 8);
    *(void *)(a3 + 448) = a2 + v7;
    uint64_t v6 = (*(_DWORD *)(a3 + 440) + v7);
  }
  cstdlib_memcpy((void *)(a3 + 464), (const void *)(a2 + v6), 2uLL);
  uint64_t v8 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * *(unsigned __int16 *)(a3 + 464)) | 1);
  *(void *)(a3 + 456) = v8;
  if (v8)
  {
    if (*(_WORD *)(a3 + 464))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unsigned int v15 = v6 + 2;
      do
      {
        unsigned int v16 = v15;
        cstdlib_memcpy((void *)(*(void *)(a3 + 456) + v13), (const void *)(a2 + v15), 4uLL);
        unsigned int v15 = v16 + 4;
        ++v14;
        v13 += 4;
      }
      while (v14 < *(unsigned __int16 *)(a3 + 464));
    }
    return ssftriff_reader_DetachChunkData(a1, (void **)(a3 + 472), &v20);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v18);
    return 2315264010;
  }
}

uint64_t readStringCHUNK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  int __dst = 0;
  uint64_t v6 = 4;
  cstdlib_memcpy((void *)(a3 + 520), (const void *)a2, 4uLL);
  if (*(_DWORD *)(a3 + 520))
  {
    cstdlib_memcpy(&__dst, (const void *)(a2 + 4), 4uLL);
    uint64_t v7 = (__dst + 8);
    *(void *)(a3 + 528) = a2 + v7;
    uint64_t v6 = (*(_DWORD *)(a3 + 520) + v7);
  }
  cstdlib_memcpy((void *)(a3 + 544), (const void *)(a2 + v6), 2uLL);
  uint64_t v8 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * *(unsigned __int16 *)(a3 + 544)) | 1);
  *(void *)(a3 + 536) = v8;
  if (v8)
  {
    if (*(_WORD *)(a3 + 544))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unsigned int v15 = v6 + 2;
      do
      {
        unsigned int v16 = v15;
        cstdlib_memcpy((void *)(*(void *)(a3 + 536) + v13), (const void *)(a2 + v15), 4uLL);
        unsigned int v15 = v16 + 4;
        ++v14;
        v13 += 4;
      }
      while (v14 < *(unsigned __int16 *)(a3 + 544));
    }
    return ssftriff_reader_DetachChunkData(a1, (void **)(a3 + 552), &v20);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v18);
    return 2315264010;
  }
}

uint64_t readRegexStringCHUNK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  int __dst = 0;
  uint64_t v6 = 4;
  cstdlib_memcpy((void *)(a3 + 480), (const void *)a2, 4uLL);
  if (*(_DWORD *)(a3 + 480))
  {
    cstdlib_memcpy(&__dst, (const void *)(a2 + 4), 4uLL);
    uint64_t v7 = (__dst + 8);
    *(void *)(a3 + 488) = a2 + v7;
    uint64_t v6 = (*(_DWORD *)(a3 + 480) + v7);
  }
  cstdlib_memcpy((void *)(a3 + 504), (const void *)(a2 + v6), 2uLL);
  uint64_t v8 = heap_Calloc(*(void **)(*(void *)a3 + 8), 1, (4 * *(unsigned __int16 *)(a3 + 504)) | 1);
  *(void *)(a3 + 496) = v8;
  if (v8)
  {
    if (*(_WORD *)(a3 + 504))
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      unsigned int v15 = v6 + 2;
      do
      {
        unsigned int v16 = v15;
        cstdlib_memcpy((void *)(*(void *)(a3 + 496) + v13), (const void *)(a2 + v15), 4uLL);
        unsigned int v15 = v16 + 4;
        ++v14;
        v13 += 4;
      }
      while (v14 < *(unsigned __int16 *)(a3 + 504));
    }
    return ssftriff_reader_DetachChunkData(a1, (void **)(a3 + 512), &v20);
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v18);
    return 2315264010;
  }
}

uint64_t readMSCHUNK(char *__src, uint64_t a2)
{
  unsigned __int16 __dst = 0;
  cstdlib_memcpy(&__dst, __src, 2uLL);
  *(_DWORD *)(a2 + 560) = __dst;
  uint64_t v4 = (_WORD *)(a2 + 584);
  cstdlib_memcpy((void *)(a2 + 584), __src + 2, 2uLL);
  uint64_t v5 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * *(unsigned __int16 *)(a2 + 584)) | 1);
  *(void *)(a2 + 576) = v5;
  if (!v5) {
    goto LABEL_47;
  }
  if (*v4)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 4;
    do
    {
      cstdlib_memcpy(&__dst, &__src[v11], 2uLL);
      *(_DWORD *)(*(void *)(a2 + 576) + 4 * v10++) = __dst;
      unint64_t v12 = *(unsigned __int16 *)(a2 + 584);
      v11 += 2;
    }
    while (v10 < v12);
    uint64_t v13 = (8 * v12) | 1;
  }
  else
  {
    LODWORD(v11) = 4;
    uint64_t v13 = 1;
  }
  int v50 = v11;
  uint64_t v14 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v13);
  *(void *)(a2 + 568) = v14;
  if (!v14) {
    goto LABEL_47;
  }
  if (*v4)
  {
    unint64_t v15 = 0;
    do
    {
      unsigned int v16 = *(void **)(*(void *)a2 + 8);
      if (*(_DWORD *)(*(void *)(a2 + 576) + 4 * v15) == 1)
      {
        *(void *)(*(void *)(a2 + 568) + 8 * v15) = heap_Calloc(v16, 1, 13);
        unsigned int v17 = *(char **)(*(void *)(a2 + 568) + 8 * v15);
        if (!v17) {
          goto LABEL_47;
        }
        readREGEX((uint64_t)__src, &v50, v17);
        unsigned int v18 = (void *)(*(void *)(*(void *)(a2 + 568) + 8 * v15) + 8);
        int v19 = v50;
      }
      else
      {
        *(void *)(*(void *)(a2 + 568) + 8 * v15) = heap_Calloc(v16, 1, 9);
        uint64_t v20 = *(void **)(*(void *)(a2 + 568) + 8 * v15);
        if (!v20) {
          goto LABEL_47;
        }
        cstdlib_memcpy(v20, &__src[v11], 4uLL);
        int v19 = v11 + 4;
        unsigned int v18 = (void *)(*(void *)(*(void *)(a2 + 568) + 8 * v15) + 4);
      }
      cstdlib_memcpy(v18, &__src[v19], 4uLL);
      LODWORD(v11) = v19 + 4;
      int v50 = v11;
      ++v15;
    }
    while (v15 < (unsigned __int16)*v4);
  }
  unint64_t v21 = (_WORD *)(a2 + 608);
  cstdlib_memcpy((void *)(a2 + 608), &__src[v11], 2uLL);
  uint64_t v22 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * *(unsigned __int16 *)(a2 + 608)) | 1);
  *(void *)(a2 + 600) = v22;
  if (!v22) {
    goto LABEL_47;
  }
  int v23 = v11 + 2;
  if (*v21)
  {
    unint64_t v24 = 0;
    do
    {
      cstdlib_memcpy(&__dst, &__src[v23], 2uLL);
      v23 += 2;
      *(_DWORD *)(*(void *)(a2 + 600) + 4 * v24++) = __dst;
      unint64_t v25 = *(unsigned __int16 *)(a2 + 608);
    }
    while (v24 < v25);
    uint64_t v26 = (8 * v25) | 1;
  }
  else
  {
    uint64_t v26 = 1;
  }
  int v50 = v23;
  uint64_t v27 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v26);
  *(void *)(a2 + 592) = v27;
  if (!v27) {
    goto LABEL_47;
  }
  if (*v21)
  {
    unint64_t v28 = 0;
    do
    {
      unsigned int v29 = *(void **)(*(void *)a2 + 8);
      if (*(_DWORD *)(*(void *)(a2 + 600) + 4 * v28) == 1)
      {
        *(void *)(*(void *)(a2 + 592) + 8 * v28) = heap_Calloc(v29, 1, 13);
        int v30 = *(char **)(*(void *)(a2 + 592) + 8 * v28);
        if (!v30) {
          goto LABEL_47;
        }
        readREGEX((uint64_t)__src, &v50, v30);
        unsigned int v31 = (void *)(*(void *)(*(void *)(a2 + 592) + 8 * v28) + 8);
        int v32 = v50;
      }
      else
      {
        *(void *)(*(void *)(a2 + 592) + 8 * v28) = heap_Calloc(v29, 1, 9);
        uint64_t v33 = *(void **)(*(void *)(a2 + 592) + 8 * v28);
        if (!v33) {
          goto LABEL_47;
        }
        cstdlib_memcpy(v33, &__src[v23], 4uLL);
        int v32 = v23 + 4;
        unsigned int v31 = (void *)(*(void *)(*(void *)(a2 + 592) + 8 * v28) + 4);
      }
      cstdlib_memcpy(v31, &__src[v32], 4uLL);
      int v23 = v32 + 4;
      int v50 = v23;
      ++v28;
    }
    while (v28 < (unsigned __int16)*v21);
  }
  uint64_t v34 = (_WORD *)(a2 + 632);
  cstdlib_memcpy((void *)(a2 + 632), &__src[v23], 2uLL);
  uint64_t v35 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (4 * *(unsigned __int16 *)(a2 + 632)) | 1);
  *(void *)(a2 + 624) = v35;
  if (!v35) {
    goto LABEL_47;
  }
  int v36 = v23 + 2;
  if (*v34)
  {
    unint64_t v37 = 0;
    do
    {
      cstdlib_memcpy(&__dst, &__src[v36], 2uLL);
      v36 += 2;
      *(_DWORD *)(*(void *)(a2 + 624) + 4 * v37++) = __dst;
      unint64_t v38 = *(unsigned __int16 *)(a2 + 632);
    }
    while (v37 < v38);
    uint64_t v39 = (8 * v38) | 1;
  }
  else
  {
    uint64_t v39 = 1;
  }
  int v50 = v36;
  uint64_t v40 = heap_Calloc(*(void **)(*(void *)a2 + 8), 1, v39);
  *(void *)(a2 + 616) = v40;
  if (v40)
  {
    if (*v34)
    {
      unint64_t v41 = 0;
      do
      {
        uint64_t v42 = *(void **)(*(void *)a2 + 8);
        if (*(_DWORD *)(*(void *)(a2 + 624) + 4 * v41) == 1)
        {
          *(void *)(*(void *)(a2 + 616) + 8 * v41) = heap_Calloc(v42, 1, 13);
          uint64_t v43 = *(char **)(*(void *)(a2 + 616) + 8 * v41);
          if (!v43) {
            goto LABEL_47;
          }
          readREGEX((uint64_t)__src, &v50, v43);
          uint64_t v44 = (void *)(*(void *)(*(void *)(a2 + 616) + 8 * v41) + 8);
          int v45 = v50;
        }
        else
        {
          *(void *)(*(void *)(a2 + 616) + 8 * v41) = heap_Calloc(v42, 1, 9);
          int v46 = *(void **)(*(void *)(a2 + 616) + 8 * v41);
          if (!v46) {
            goto LABEL_47;
          }
          cstdlib_memcpy(v46, &__src[v36], 4uLL);
          int v45 = v36 + 4;
          uint64_t v44 = (void *)(*(void *)(*(void *)(a2 + 616) + 8 * v41) + 4);
        }
        cstdlib_memcpy(v44, &__src[v45], 4uLL);
        uint64_t result = 0;
        int v36 = v45 + 4;
        int v50 = v36;
        ++v41;
      }
      while (v41 < (unsigned __int16)*v34);
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_47:
    log_OutPublic(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v48);
    return 2315264010;
  }
  return result;
}

uint64_t readPhraseTypeCHUNK(char *__src, uint64_t *a2)
{
  uint64_t v4 = a2 + 40;
  cstdlib_memcpy(a2 + 40, __src, 2uLL);
  uint64_t v5 = heap_Calloc(*(void **)(*a2 + 8), 1, (16 * *((unsigned __int16 *)a2 + 160)) | 1);
  a2[42] = v5;
  uint64_t v10 = *a2;
  if (v5)
  {
    uint64_t v11 = heap_Calloc(*(void **)(v10 + 8), 1, (4 * *((unsigned __int16 *)a2 + 160)) | 1);
    a2[41] = v11;
    if (v11)
    {
      if (!*v4) {
        return 0;
      }
      unint64_t v12 = 0;
      uint64_t v13 = 2;
      do
      {
        cstdlib_memcpy((void *)(a2[41] + v13 - 2), &__src[v13], 4uLL);
        ++v12;
        unint64_t v14 = *((unsigned __int16 *)a2 + 160);
        v13 += 4;
      }
      while (v12 < v14);
      unsigned int v23 = v13;
      if (!v14) {
        return 0;
      }
      uint64_t v15 = 0;
      uint64_t v16 = a2[42];
      while (1)
      {
        unsigned int v17 = v23;
        cstdlib_memcpy((void *)(v16 + 16 * v15), &__src[v23], 2uLL);
        unsigned int v23 = v17 + 2;
        uint64_t v18 = heap_Calloc(*(void **)(*a2 + 8), 1, (24 * *(unsigned __int16 *)(a2[42] + 16 * v15)) | 1);
        uint64_t v16 = a2[42];
        *(void *)(v16 + 16 * v15 + 8) = v18;
        if (!v18) {
          break;
        }
        if (*(_WORD *)(v16 + 16 * v15))
        {
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          do
          {
            uint64_t result = readRULE(*a2, (uint64_t)__src, &v23, (uint64_t *)(*(void *)(v16 + 16 * v15 + 8) + v19));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            ++v20;
            uint64_t v16 = a2[42];
            v19 += 24;
          }
          while (v20 < *(unsigned __int16 *)(v16 + 16 * v15));
        }
        uint64_t result = 0;
        if (++v15 >= (unint64_t)(unsigned __int16)*v4) {
          return result;
        }
      }
    }
    uint64_t v10 = *a2;
  }
  log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v22);
  return 2315264010;
}

uint64_t readMSCOMPOUNDDEFCHUNK(char *__src, void *a2)
{
  uint64_t v4 = a2 + 45;
  cstdlib_memcpy(a2 + 45, __src, 2uLL);
  uint64_t v5 = heap_Calloc(*(void **)(*a2 + 8), 1, (4 * *((unsigned __int16 *)a2 + 180)) | 1);
  a2[44] = v5;
  if (!v5) {
    goto LABEL_17;
  }
  unsigned __int16 __dst = 0;
  if (*v4)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 2;
    do
    {
      cstdlib_memcpy(&__dst, &__src[v11], 2uLL);
      *(_DWORD *)(a2[44] + 4 * v10++) = __dst;
      unint64_t v12 = *((unsigned __int16 *)a2 + 180);
      v11 += 2;
    }
    while (v10 < v12);
    uint64_t v13 = (8 * v12) | 1;
  }
  else
  {
    LODWORD(v11) = 2;
    uint64_t v13 = 1;
  }
  int v25 = v11;
  uint64_t v14 = heap_Calloc(*(void **)(*a2 + 8), 1, v13);
  a2[43] = v14;
  if (v14)
  {
    if (*v4)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void **)(*a2 + 8);
        if (*(_DWORD *)(a2[44] + 4 * v15) == 1)
        {
          *(void *)(a2[43] + 8 * v15) = heap_Calloc(v16, 1, 13);
          unsigned int v17 = *(char **)(a2[43] + 8 * v15);
          if (!v17) {
            goto LABEL_17;
          }
          readREGEX((uint64_t)__src, &v25, v17);
          uint64_t v18 = (void *)(*(void *)(a2[43] + 8 * v15) + 8);
          int v19 = v25;
        }
        else
        {
          *(void *)(a2[43] + 8 * v15) = heap_Calloc(v16, 1, 9);
          unint64_t v20 = *(void **)(a2[43] + 8 * v15);
          if (!v20) {
            goto LABEL_17;
          }
          cstdlib_memcpy(v20, &__src[v11], 4uLL);
          int v19 = v11 + 4;
          uint64_t v18 = (void *)(*(void *)(a2[43] + 8 * v15) + 4);
        }
        cstdlib_memcpy(v18, &__src[v19], 4uLL);
        LODWORD(v11) = v19 + 4;
        int v25 = v11;
        ++v15;
      }
      while (v15 < (unsigned __int16)*v4);
    }
    return 0;
  }
  else
  {
LABEL_17:
    uint64_t v21 = 2315264010;
    log_OutPublic(*(void *)(*a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v23);
  }
  return v21;
}

uint64_t getStrSetting(uint64_t a1, char *__s1)
{
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 528)+ *(unsigned int *)(*(void *)(a1 + 536) + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v4)))))
  {
    ++v5;
    v4 += 8;
    if (v5 >= *(unsigned __int16 *)(a1 + 40)) {
      return 0;
    }
  }
  return *(void *)(a1 + 528)
       + *(unsigned int *)(*(void *)(a1 + 536) + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v4 + 4));
}

uint64_t usePandP(uint64_t *a1, _DWORD *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __s1 = 0;
  uint64_t v25 = 0;
  memset(v26, 0, sizeof(v26));
  *a2 = 0;
  char v4 = 0;
  if ((paramc_ParamGetStr(a1[5], (uint64_t)"basicclcprosody", &__s1) & 0x80000000) == 0 && __s1)
  {
    if (cstdlib_strcmp(__s1, "yes"))
    {
      char v4 = 0;
    }
    else
    {
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent pandp rules", v5, v6, v7, (uint64_t)"basicclcprosody");
      char v4 = 1;
    }
  }
  uint64_t result = getBrokerString((uint64_t)a1, 1, v26);
  if ((result & 0x80000000) == 0)
  {
    int v9 = brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25);
    if (v9 < 0) {
      char v13 = 1;
    }
    else {
      char v13 = v4;
    }
    if ((v13 & 1) == 0) {
      goto LABEL_23;
    }
    int v14 = v9;
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-dependent PandP rules not found or disabled", v10, v11, v12, 0);
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t result = brk_DataClose(a1[3], v25);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    uint64_t result = getLegacyBrokerString((uint64_t)a1, v26);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    int v15 = brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25);
    char v19 = v15 < 0 ? 1 : v4;
    if ((v19 & 1) == 0)
    {
LABEL_23:
      *a2 = 1;
      goto LABEL_24;
    }
    int v20 = v15;
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-dependent legacy PandP MS rules not found or disabled", v16, v17, v18, 0);
    if (v20 < 0 || (uint64_t result = brk_DataClose(a1[3], v25), (result & 0x80000000) == 0))
    {
      uint64_t result = getBrokerString((uint64_t)a1, 0, v26);
      if ((result & 0x80000000) == 0)
      {
        if ((brk_DataOpenEx(a1[3], (uint64_t)v26, 1, (uint64_t)&v25) & 0x80000000) != 0)
        {
          log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Voice-independent PandP rules not found", v21, v22, v23, 0);
          return 0;
        }
        *a2 = 1;
LABEL_24:
        uint64_t result = brk_DataClose(a1[3], v25);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t doMapStr(uint64_t a1, const char **a2, char *__s)
{
  size_t v6 = cstdlib_strlen(__s);
  size_t v7 = cstdlib_strlen(*a2);
  uint64_t v8 = (char *)*a2;
  if (v6 <= v7) {
    goto LABEL_4;
  }
  int v9 = *(uint64_t **)(a1 + 8);
  int v10 = cstdlib_strlen(__s);
  uint64_t v11 = heap_Realloc(v9, (uint64_t)v8, (v10 + 1));
  if (v11)
  {
    uint64_t v8 = (char *)v11;
    *a2 = (const char *)v11;
LABEL_4:
    cstdlib_strcpy(v8, __s);
    return 0;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v17);
  return 2315264010;
}

uint64_t doRetagging(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&v35[2] = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d retagging rules", a6, a7, a8, *(unsigned __int16 *)(a6 + 88));
  if (!*(_WORD *)(a7 + 8)) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t result = 0;
  while (!*(_WORD *)(a6 + 88))
  {
LABEL_13:
    if (++v15 >= (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
      return result;
    }
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    __int16 v34 = v15;
    int v33 = 3;
    *(_DWORD *)uint64_t v35 = 0;
    uint64_t v19 = *(void *)(a6 + 80);
    int v36 = 0;
    uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, a7, v19 + v17 + 8, (uint64_t)&v33, &v36);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v36)
    {
      if (v36 != 1) {
        goto LABEL_13;
      }
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v18);
      uint64_t v23 = 224 * v15;
      uint64_t result = doMapStr(a5, (const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)), (char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536) + 4 * *(unsigned int *)(*(void *)(a6 + 80) + v17))));
      if ((result & 0x80000000) == 0)
      {
        int v32 = *(void **)(a5 + 8);
        unsigned __int16 v24 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)a7 + v23 + 16)
                                            + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v25 = (char *)heap_Calloc(v32, 1, v24 + 1);
        uint64_t v30 = *(void *)a7;
        *(void *)(*(void *)a7 + v23 + 88) = v25;
        if (v25)
        {
          cstdlib_strcpy(v25, *(const char **)(*(void *)(v30 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
          uint64_t result = 0;
          goto LABEL_13;
        }
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v26, v27, v28, v29, v31);
        return 2315264010;
      }
      return result;
    }
    ++v18;
    v17 += 32;
    if (v18 >= *(unsigned __int16 *)(a6 + 88)) {
      goto LABEL_13;
    }
  }
}

uint64_t doSubtagging(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)&v39[2] = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"applying %d subtagging rules", a6, a7, a8, *(unsigned __int16 *)(a6 + 104));
  if (!*(_WORD *)(a7 + 8)) {
    return 0;
  }
  uint64_t v36 = a5;
  uint64_t v15 = 0;
  uint64_t result = 0;
  while (!*(_WORD *)(a6 + 104))
  {
LABEL_15:
    if (++v15 >= (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
      return result;
    }
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    __int16 v38 = v15;
    int v37 = 3;
    *(_DWORD *)uint64_t v39 = 0;
    uint64_t v19 = *(void *)(a6 + 96);
    int v40 = 0;
    uint64_t result = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, a7, v19 + v17 + 8, (uint64_t)&v37, &v40);
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v40)
    {
      if (v40 != 1) {
        goto LABEL_15;
      }
      uint64_t v34 = v18;
      uint64_t v23 = v36;
      log_OutText(*(void *)(v36 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FIRED SUBTAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v34);
      uint64_t v24 = *(void *)a7;
      uint64_t v25 = *(void *)a7 + 224 * v15;
      if (!*(void *)(v25 + 88))
      {
        uint64_t v26 = *(void **)(v36 + 8);
        unsigned __int16 v27 = cstdlib_strlen(*(const char **)(*(void *)(v25 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v28 = (char *)heap_Calloc(v26, 1, v27 + 1);
        uint64_t v33 = *(void *)a7;
        *(void *)(*(void *)a7 + 224 * v15 + 88) = v28;
        if (!v28)
        {
          log_OutPublic(*(void *)(v36 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v35);
          return 2315264010;
        }
        cstdlib_strcpy(v28, *(const char **)(*(void *)(v33 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)));
        uint64_t v24 = *(void *)a7;
        uint64_t v23 = v36;
      }
      uint64_t result = doMapStr(v23, (const char **)(*(void *)(v24 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18)), (char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536) + 4 * *(unsigned int *)(*(void *)(a6 + 96) + v17))));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = 0;
      goto LABEL_15;
    }
    ++v18;
    v17 += 32;
    if (v18 >= *(unsigned __int16 *)(a6 + 104)) {
      goto LABEL_15;
    }
  }
}

uint64_t setPhraseType(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a7 + 32) = a8;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  Using ORT \"%s\"", a6, a7, a8, a8);
  uint64_t v40 = a7;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  Using POS \"%s\"", v15, v16, v17, *(void *)(a7 + 16));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  applying %d phrase type rules", v18, v19, v20, *(unsigned __int16 *)(a6 + 320));
  if (!*(_WORD *)(a6 + 320)) {
    return 0;
  }
  uint64_t v39 = a5;
  uint64_t v24 = 0;
  uint64_t matched = 0;
  int v42 = 0;
  while (1)
  {
    uint64_t v41 = 5;
    LOWORD(v42) = 0;
    int v43 = 1;
    uint64_t v26 = *(void *)(a6 + 336);
    unint64_t v27 = *(unsigned __int16 *)(v26 + 16 * v24);
    if (*(_WORD *)(v26 + 16 * v24)) {
      break;
    }
    LOWORD(v29) = 0;
LABEL_10:
    if (v27 == (unsigned __int16)v29)
    {
      log_OutText(*(void *)(v39 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ALL %d RULES FIRE -> SET Phrase type %s", v21, v22, v23, v27);
      uint64_t v31 = *(void **)(v39 + 8);
      int v32 = cstdlib_strlen((const char *)(*(void *)(a6 + 528)
                                        + *(unsigned int *)(*(void *)(a6 + 536)
                                                          + 4 * *(unsigned int *)(*(void *)(a6 + 328) + 4 * v24))));
      uint64_t v33 = (char *)heap_Calloc(v31, 1, (v32 + 1));
      *(void *)(v40 + 40) = v33;
      if (v33)
      {
        cstdlib_strcpy(v33, (const char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 328) + 4 * v24))));
      }
      else
      {
        log_OutPublic(*(void *)(v39 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v34, v35, v36, v37, v38);
        return 2315264010;
      }
      return matched;
    }
LABEL_12:
    if (++v24 >= (unint64_t)*(unsigned __int16 *)(a6 + 320)) {
      return matched;
    }
  }
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  while (1)
  {
    uint64_t matched = matchPANDPRULE_TRule(a1, a2, a3, a4, a6, v40, *(void *)(v26 + 16 * v24 + 8) + v28, (uint64_t)&v41, &v43);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    if (v43 != 1) {
      goto LABEL_12;
    }
    ++v29;
    uint64_t v26 = *(void *)(a6 + 336);
    unint64_t v27 = *(unsigned __int16 *)(v26 + 16 * v24);
    v28 += 24;
    if (v29 >= v27) {
      goto LABEL_10;
    }
  }
}

uint64_t getDomainFromPausingDefs(uint64_t a1, char *__s1, _WORD *a3)
{
  if (!*(_WORD *)(a1 + 56)) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 528)+ *(unsigned int *)(*(void *)(a1 + 536) + 4 * *(unsigned int *)(*(void *)(a1 + 48) + v6)))))
  {
    ++v7;
    v6 += 8;
    if (v7 >= *(unsigned __int16 *)(a1 + 56)) {
      return 0;
    }
  }
  *a3 = v7;
  return 1;
}

uint64_t createLists(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int16 v3 = *((_WORD *)a3 + 4);
  if (!v3) {
    return 0;
  }
  unsigned __int16 v7 = 0;
  uint64_t v8 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v9 = *a3;
  uint64_t v10 = 32 * v8;
  while (1)
  {
    uint64_t v11 = v7;
    uint64_t v12 = *(void *)(v9 + 224 * v7 + 56);
    if (!v12 || *(_DWORD *)(v12 + v10) != 1) {
      goto LABEL_35;
    }
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(a2 + 72)) | 1);
    uint64_t v9 = *a3;
    *(void *)(*a3 + 224 * v11 + 64) = v13;
    if (!v13) {
      break;
    }
    if (*(_WORD *)(a2 + 72))
    {
      unint64_t v18 = 0;
      uint64_t v19 = v9;
      do
      {
        uint64_t v20 = *(void *)(v19 + 224 * v11 + 56) + 32 * v8;
        unsigned int v21 = *(unsigned __int16 *)(v20 + 8);
        if (v21 <= *(unsigned __int16 *)(v20 + 10))
        {
          int v23 = 0;
          uint64_t v22 = v9;
          do
          {
            unsigned int v24 = (unsigned __int16)v21;
            uint64_t v25 = *(void *)(v19 + 224 * (unsigned __int16)v21 + 16);
            if (v25)
            {
              uint64_t v26 = *(const char **)(v25 + 8 * v18);
              if (v26)
              {
                v23 += cstdlib_strlen(v26) + 1;
                uint64_t v22 = *a3;
                uint64_t v19 = *a3;
              }
            }
            uint64_t v27 = *(void *)(v19 + 224 * v24 + 56);
            if (v27)
            {
              uint64_t v28 = *(const char **)(v27 + 32 * v18 + 16);
              if (v28)
              {
                if (*(_DWORD *)(v27 + 32 * v18) == 1)
                {
                  v23 += cstdlib_strlen(v28) + 1;
                  uint64_t v22 = *a3;
                }
              }
            }
            LOWORD(v21) = v24 + 1;
            uint64_t v19 = v22;
          }
          while (*(unsigned __int16 *)(*(void *)(v22 + 224 * v11 + 56) + 32 * v8 + 10) >= (unsigned __int16)(v24 + 1));
          uint64_t v9 = v22;
          if ((_WORD)v23)
          {
            unint64_t v29 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v23 + 2);
            *(void *)(*(void *)(*a3 + 224 * v11 + 64) + 8 * v18) = v29;
            if (!v29) {
              goto LABEL_37;
            }
            cstdlib_strcpy(v29, "");
            uint64_t v9 = *a3;
            uint64_t v30 = *(void *)(*a3 + 224 * v11 + 56) + 32 * v8;
            unsigned int v31 = *(unsigned __int16 *)(v30 + 8);
            if (v31 <= *(unsigned __int16 *)(v30 + 10))
            {
              do
              {
                unsigned int v32 = (unsigned __int16)v31;
                uint64_t v33 = *(void *)(v9 + 224 * (unsigned __int16)v31 + 16);
                if (v33)
                {
                  uint64_t v34 = *(const char **)(v33 + 8 * v18);
                  if (v34)
                  {
                    cstdlib_strcat(*(char **)(*(void *)(v9 + 224 * v11 + 64) + 8 * v18), v34);
                    cstdlib_strcat(*(char **)(*(void *)(*a3 + 224 * v11 + 64) + 8 * v18), " ");
                    uint64_t v9 = *a3;
                  }
                }
                uint64_t v35 = *(void *)(v9 + 224 * v32 + 56);
                if (v35)
                {
                  uint64_t v36 = *(const char **)(v35 + 32 * v18 + 16);
                  if (v36)
                  {
                    if (*(_DWORD *)(v35 + 32 * v18) == 1)
                    {
                      cstdlib_strcat(*(char **)(*(void *)(v9 + 224 * v11 + 64) + 8 * v18), v36);
                      cstdlib_strcat(*(char **)(*(void *)(*a3 + 224 * v11 + 64) + 8 * v18), " ");
                      uint64_t v9 = *a3;
                    }
                  }
                }
                LOWORD(v31) = v32 + 1;
                uint64_t v19 = v9;
              }
              while (*(unsigned __int16 *)(*(void *)(v9 + 224 * v11 + 56) + 32 * v8 + 10) >= (unsigned __int16)(v32 + 1));
            }
            else
            {
              uint64_t v19 = *a3;
            }
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v22 = v19;
        }
        *(void *)(*(void *)(v22 + 224 * v11 + 64) + 8 * v18) = 0;
        uint64_t v19 = v22;
LABEL_33:
        ++v18;
      }
      while (v18 < *(unsigned __int16 *)(a2 + 72));
    }
    unsigned __int16 v7 = *(_WORD *)(*(void *)(v9 + 224 * v11 + 56) + 32 * v8 + 10);
    unsigned __int16 v3 = *((_WORD *)a3 + 4);
    uint64_t v10 = 32 * v8;
LABEL_35:
    if (++v7 >= v3) {
      return 0;
    }
  }
LABEL_37:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v38);
  return 2315264010;
}

BOOL isStrSetting(uint64_t a1, char *__s1, const char *a3)
{
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 528)+ *(unsigned int *)(*(void *)(a1 + 536) + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v6)))))
  {
    ++v7;
    v6 += 8;
    if (v7 >= *(unsigned __int16 *)(a1 + 40)) {
      return 0;
    }
  }
  return cstdlib_strcmp(a3, (const char *)(*(void *)(a1 + 528)+ *(unsigned int *)(*(void *)(a1 + 536)+ 4 * *(unsigned int *)(*(void *)(a1 + 32) + v6 + 4)))) == 0;
}

uint64_t adjustWordIdxByWindow(unsigned __int16 *a1, uint64_t *a2, unsigned __int16 *a3, int a4, _DWORD *a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  *a5 = 1;
  uint64_t v8 = *a2;
  int v9 = a3[2];
  uint64_t v10 = *(void *)(*a2 + 224 * a3[2] + 56);
  if (!v10 || (uint64_t v11 = a1[12], !*(_DWORD *)(v10 + 32 * v11)))
  {
    uint64_t result = 0;
    *a5 = 0;
    return result;
  }
  if (a4 == 2)
  {
    unsigned int v15 = *((unsigned __int16 *)a2 + 4);
    if (v9 + 1 == v15)
    {
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        uint64_t v17 = "           [1] _RIGHT doesnt exist, return LH_FALSE";
LABEL_38:
        log_OutText(v16, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v17, (uint64_t)a6, a7, a8, 0);
LABEL_39:
        LOWORD(v9) = a3[2];
      }
    }
    else
    {
      int v23 = a3[4] + 1;
      unsigned __int16 v24 = a3[2];
      if ((v23 & 0x10000) != 0)
      {
LABEL_21:
        if (v15 > v24)
        {
          *a6 = v24;
          if (a1[4] >= 2u)
          {
            uint64_t v20 = *(void *)(*(void *)a1 + 32);
            uint64_t v21 = a3[2];
            uint64_t v22 = "           [3] _RIGHT wordIdx=%d";
            goto LABEL_24;
          }
          return 0;
        }
      }
      else
      {
        unsigned __int16 v24 = a3[2];
        while (v15 > v24)
        {
          unsigned __int16 v24 = *(_WORD *)(*(void *)(v8 + 224 * v24 + 56) + 32 * v11 + 10) + 1;
          if (!(_WORD)--v23) {
            goto LABEL_21;
          }
        }
      }
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        uint64_t v17 = "           [2] _RIGHT doesnt exist, return LH_FALSE";
        goto LABEL_38;
      }
    }
LABEL_40:
    uint64_t result = 0;
    *a6 = v9;
    return result;
  }
  if (a4 != 1)
  {
    if (a4 || a1[4] < 2u) {
      goto LABEL_40;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           _CUR wordIdx=%d", (uint64_t)a6, a7, a8, a3[2]);
    goto LABEL_39;
  }
  if (a3[2])
  {
    int v18 = a3[3] + 1;
    if ((v18 & 0x10000) == 0)
    {
      unsigned __int16 v19 = a3[2];
      do
      {
        unsigned __int16 v25 = v19 - 1;
        uint64_t v26 = *(void *)(v8 + 224 * v25 + 56) + 32 * v11;
        if (!*(_DWORD *)(v26 + 4))
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"wordindex=%d does not end previous phrase", (uint64_t)a6, a7, a8, v25);
          return 2315264000;
        }
        unsigned __int16 v19 = *(_WORD *)(v26 + 8);
        --v18;
      }
      while ((_WORD)v18 && *(_WORD *)(v26 + 8));
      if (!(_WORD)v18) {
        goto LABEL_15;
      }
      *a5 = 0;
      if (a1[4] >= 2u)
      {
        uint64_t v16 = *(void *)(*(void *)a1 + 32);
        uint64_t v17 = "           [2] _LEFT doesnt exist, return LH_FALSE";
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    unsigned __int16 v19 = a3[2];
LABEL_15:
    *a6 = v19;
    if (a1[4] >= 2u)
    {
      uint64_t v20 = *(void *)(*(void *)a1 + 32);
      uint64_t v21 = a3[2];
      uint64_t v22 = "           [3] _LEFT wordIdx=%d";
LABEL_24:
      log_OutText(v20, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v22, (uint64_t)a6, a7, a8, v21);
      return 0;
    }
    return 0;
  }
  *a5 = 0;
  if (a1[4] >= 2u)
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           [1] _LEFT doesnt exist, return LH_FALSE", (uint64_t)a6, a7, a8, 0);
    LOWORD(v9) = a3[2];
  }
  uint64_t result = 0;
  *a6 = v9;
  return result;
}

_WORD *readTWOPARTNUM(uint64_t a1, _DWORD *a2, _WORD *a3)
{
  int __dst = 0;
  cstdlib_memcpy((char *)&__dst + 2, (const void *)(a1 + *a2), 2uLL);
  uint64_t v6 = (*a2 + 2);
  *a2 = v6;
  cstdlib_memcpy(&__dst, (const void *)(a1 + v6), 2uLL);
  *a2 += 2;
  return FLOATSUR_SET_INT(a3, SHIWORD(__dst), __dst);
}

uint64_t readRULE(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = readCONTEXT(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = readCONTEXT(a1, a2, a3, a4 + 1);
    if ((result & 0x80000000) == 0)
    {
      return readCONTEXT(a1, a2, a3, a4 + 2);
    }
  }
  return result;
}

uint64_t readCONTEXT(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  int __dst = 0;
  cstdlib_memcpy(&__dst, (const void *)(a2 + *a3), 2uLL);
  *a3 += 2;
  if (!(_WORD)__dst) {
    return 0;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (v8
    && (uint64_t v13 = v8,
        uint64_t v14 = (unsigned __int16)__dst,
        *(_WORD *)(v8 + 8) = __dst,
        uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v14) | 1),
        (*(void *)uint64_t v13 = v15) != 0))
  {
    if (*(_WORD *)(v13 + 8))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unsigned int v18 = *a3;
      do
      {
        cstdlib_memcpy((void *)(v15 + v16), (const void *)(a2 + v18), 2uLL);
        uint64_t v19 = *a3 + 2;
        *a3 = v19;
        cstdlib_memcpy((void *)(*(void *)v13 + v16 + 2), (const void *)(a2 + v19), 2uLL);
        uint64_t v20 = *a3 + 2;
        *a3 = v20;
        cstdlib_memcpy((char *)&__dst + 2, (const void *)(a2 + v20), 2uLL);
        unsigned int v18 = *a3 + 2;
        *a3 = v18;
        uint64_t v15 = *(void *)v13;
        *(unsigned char *)(*(void *)v13 + v16 + 4) = BYTE2(__dst);
        ++v17;
        v16 += 6;
      }
      while (v17 < *(unsigned __int16 *)(v13 + 8));
    }
    uint64_t v21 = 0;
    *a4 = v13;
  }
  else
  {
    uint64_t v21 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v23);
  }
  return v21;
}

void *readREGEX(uint64_t a1, _DWORD *a2, char *__dst)
{
  __int16 __dsta = 0;
  cstdlib_memcpy(__dst, (const void *)(a1 + *a2), 2uLL);
  uint64_t v6 = (*a2 + 2);
  *a2 = v6;
  cstdlib_memcpy(__dst + 2, (const void *)(a1 + v6), 2uLL);
  uint64_t v7 = (*a2 + 2);
  *a2 = v7;
  uint64_t result = cstdlib_memcpy(&__dsta, (const void *)(a1 + v7), 2uLL);
  *a2 += 2;
  __dst[4] = __dsta;
  return result;
}

uint64_t nn_phrasing_checkIfActive(_WORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  *a4 = 0;
  uint64_t BrokerString = nn_phrasing_getBrokerString(a3, &v20);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v9 = v20;
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v20, "FINN", 1, (uint64_t *)&v19) & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
    if (!v9) {
      return v17;
    }
LABEL_9:
    heap_Free(*(void **)(a3 + 8), (uint64_t)v9);
    return v17;
  }
  uint64_t v17 = ssftriff_reader_ObjClose(v19, v10, v11, v12, v13, v14, v15, v16);
  if ((v17 & 0x80000000) == 0) {
    *a4 = 1;
  }
  if (v9) {
    goto LABEL_9;
  }
  return v17;
}

uint64_t nn_phrasing_getBrokerString(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v11 = "";
  __s2 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v14 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v11);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "nn_pausing_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v11);
      uint64_t v5 = (unsigned char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *a2 = v5;
      if (v5)
      {
        return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, v5, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v6, v7, v8, v9, v10);
        return 2315264010;
      }
    }
  }
  return result;
}

uint64_t nn_phrasing_Load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *__b)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v139 = 0;
  cstdlib_memset(__b, 0, 0x90uLL);
  v149 = 0;
  __int16 v148 = -1;
  unsigned __int8 v147 = 0;
  v142 = 0;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_puncpause", __b);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_resppause", (_WORD *)__b + 1);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v137 = (unsigned __int16 *)__b + 2;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_numadditionalfields", (_WORD *)__b + 2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  v136 = (unsigned __int16 *)__b + 3;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_maxwordsinsent", (_WORD *)__b + 3);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_thresholdpercent", (_WORD *)__b + 4);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  v135 = (_WORD *)__b + 5;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_numfeats", (_WORD *)__b + 5);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_dolenverification", (_WORD *)__b + 8);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_dophrverification", (_WORD *)__b + 7);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_docompverification", (_WORD *)__b + 6);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a6, a7, a8, (uint64_t)"nnpausing_usedynamicstep", (_WORD *)__b + 9);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v138 = 0;
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_puncpause %d", v18, v19, v20, *(unsigned __int16 *)__b);
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_resppause %d", v21, v22, v23, *((unsigned __int16 *)__b + 1));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_numadditionalfields %d", v24, v25, v26, *((unsigned __int16 *)__b + 2));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_maxwordsinsent %d", v27, v28, v29, *((unsigned __int16 *)__b + 3));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_thresholdpercent %d", v30, v31, v32, *((unsigned __int16 *)__b + 4));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_numfeats %d", v33, v34, v35, *((unsigned __int16 *)__b + 5));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_dolenverification %d", v36, v37, v38, *((unsigned __int16 *)__b + 8));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_dophrverification %d", v39, v40, v41, *((unsigned __int16 *)__b + 7));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_docompverification %d", v42, v43, v44, *((unsigned __int16 *)__b + 6));
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"nnpausing_usedynamicstep %d", v45, v46, v47, *((unsigned __int16 *)__b + 9));
  if (*((_WORD *)__b + 5))
  {
    uint64_t v48 = heap_Calloc(*(void **)(a5 + 8), 1, 32 * *((unsigned __int16 *)__b + 5));
    __b[4] = v48;
    if (!v48)
    {
      uint64_t v87 = 2315264010;
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v49, v50, v51, v52, v124);
      return v87;
    }
    v145 = 0;
    long long v143 = 0u;
    long long v144 = 0u;
    if (*v135)
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      int v130 = 0;
      uint64_t v131 = a5;
      while (1)
      {
        uint64_t v133 = v53;
        cstdlib_memset(__dst, 0, 0x20uLL);
        cstdlib_strcpy(__dst, "nnpausing_feat");
        uint64_t v132 = v54;
        unint64_t v55 = LH_itoa(v54, v146, 0xAu);
        cstdlib_strcat(v152, v55);
        __int16 v148 = -1;
        uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, char ***, __int16 *, unsigned __int8 *))(a6 + 96))(a7, a8, "fecfg", __dst, &v149, &v148, &v147);
        if ((NumericFeatureValue & 0x80000000) != 0) {
          return NumericFeatureValue;
        }
        if (v148) {
          break;
        }
        uint64_t v66 = v133;
LABEL_34:
        uint64_t v54 = v132 + 1;
        uint64_t v53 = v66 + 32;
        if (v132 + 1 >= (unint64_t)(unsigned __int16)*v135) {
          goto LABEL_35;
        }
      }
      unint64_t v56 = *v149;
      uint64_t v57 = cstdlib_strchr(*v149, 124);
      if (v57)
      {
        char *v57 = 0;
        v129 = v57 + 1;
        int v63 = cstdlib_strchr(v57 + 1, 124);
        if (v63)
        {
          char *v63 = 0;
          __s = v63 + 1;
          uint64_t v64 = cstdlib_strchr(v63 + 1, 124);
          if (v64)
          {
            *uint64_t v64 = 0;
            uint64_t v127 = (unsigned __int8 *)(v64 + 1);
            uint64_t v65 = cstdlib_strchr(v64 + 1, v147);
            if (v65) {
              *uint64_t v65 = 0;
            }
LABEL_26:
            uint64_t NumericFeatureValue = setStr(a5, (char **)(__b[4] + v133), v56, v58, v59, v60, v61, v62);
            if ((NumericFeatureValue & 0x80000000) != 0) {
              return NumericFeatureValue;
            }
            if (v129)
            {
              int v72 = cstdlib_strcmp(v129, "NUMERIC");
              uint64_t v73 = __b[4];
              if (!v72)
              {
                uint64_t v74 = v133;
                *(_DWORD *)(v73 + v133 + 8) = 1;
LABEL_32:
                uint64_t NumericFeatureValue = setStr(v131, (char **)(v73 + v74 + 16), __s, v67, v68, v69, v70, v71);
                if ((NumericFeatureValue & 0x80000000) != 0) {
                  return NumericFeatureValue;
                }
                int v75 = cstdlib_atoi(v127);
                uint64_t v76 = __b[4] + v74;
                *(_WORD *)(v76 + 26) = v75;
                *(_WORD *)(v76 + 28) = v130;
                v130 += v75;
                uint64_t v66 = v74;
                a5 = v131;
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v73 = __b[4];
            }
            uint64_t v74 = v133;
            goto LABEL_32;
          }
LABEL_25:
          uint64_t v127 = 0;
          goto LABEL_26;
        }
      }
      else
      {
        v129 = 0;
      }
      __s = 0;
      goto LABEL_25;
    }
LABEL_35:
    cstdlib_memset(&v143, 0, 0x28uLL);
    *(void *)&long long v143 = ssftmap_ElemCopyString;
    *((void *)&v144 + 1) = ssftmap_ElemCopyString;
    *((void *)&v143 + 1) = ssftmap_ElemFreeString;
    v145 = ssftmap_ElemFreeString;
    *(void *)&long long v144 = ssftmap_ElemCompareKeysString;
    uint64_t v77 = *(void **)(a5 + 8);
    v140[0] = v143;
    v140[1] = v144;
    char v141 = ssftmap_ElemFreeString;
    int v134 = __b + 3;
    uint64_t NumericFeatureValue = ssftmap_ObjOpen(v77, 0, v140, __b + 3);
    if ((NumericFeatureValue & 0x80000000) != 0) {
      return NumericFeatureValue;
    }
    __int16 v148 = -1;
    uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a6 + 96))(a7, a8, "fecfg", "nnpausing_cols", &v149, &v148, &v147);
    if ((NumericFeatureValue & 0x80000000) != 0) {
      return NumericFeatureValue;
    }
    if (v148)
    {
      uint64_t v78 = cstdlib_strchr(*v149, v147);
      if (v78) {
        *uint64_t v78 = 0;
      }
      unint64_t v79 = *v149;
      uint64_t v80 = cstdlib_strchr(*v149, 124);
      if (v80)
      {
        unint64_t v81 = v80;
        unsigned __int16 v82 = 0;
        while (1)
        {
          *unint64_t v81 = 0;
          LH_itoa(v82, v150, 0xAu);
          log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Feature to index mappings %s -> %s", v83, v84, v85, (uint64_t)v79);
          uint64_t NumericFeatureValue = ssftmap_Insert(*v134, (uint64_t)v79, (uint64_t)v150);
          if ((NumericFeatureValue & 0x80000000) != 0) {
            return NumericFeatureValue;
          }
          ++v82;
          unint64_t v79 = v81 + 1;
          unint64_t v81 = cstdlib_strchr(v81 + 1, 124);
          if (!v81)
          {
            unsigned int v86 = v82;
            goto LABEL_48;
          }
        }
      }
      if (v79)
      {
        unsigned int v86 = 0;
LABEL_48:
        LH_itoa(v86, v150, 0xAu);
        uint64_t NumericFeatureValue = ssftmap_Insert(*v134, (uint64_t)v79, (uint64_t)v150);
        if ((NumericFeatureValue & 0x80000000) != 0) {
          return NumericFeatureValue;
        }
      }
    }
    if (*v135)
    {
      uint64_t v88 = 0;
      unint64_t v89 = 0;
      uint64_t v90 = __b[4];
      do
      {
        uint64_t v91 = ssftmap_Find(*v134, *(void *)(v90 + v88 + 16), &v142);
        if ((v91 & 0x1FFF) == 0x14)
        {
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37005, (uint64_t)"%s%s", v92, v93, v94, v95, "expected default value for");
          return 2315264000;
        }
        uint64_t v87 = v91;
        __int16 v96 = cstdlib_atoi(v142);
        uint64_t v90 = __b[4];
        *(_WORD *)(v90 + v88 + 24) = v96;
        ++v89;
        v88 += 32;
      }
      while (v89 < *((unsigned __int16 *)__b + 5));
      if ((v87 & 0x80000000) != 0) {
        return v87;
      }
    }
  }
  uint64_t NumericFeatureValue = nn_word_lkp_GetInterface(1u, __b + 9);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  __b[10] = safeh_GetNullHandle();
  __b[11] = v97;
  __b[12] = safeh_GetNullHandle();
  __b[13] = v98;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, _WORD *, uint64_t))(__b[9] + 16))(__b[10], __b[11], "word", a1, a2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v99 = __b + 14;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, char *))(__b[9] + 40))(__b[12], __b[13], (char *)__b + 112);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word2vec length %d", v100, v101, v102, *((unsigned int *)__b + 28));
  uint64_t v103 = heap_Alloc(*(void *)(a5 + 8), 4 * *((unsigned int *)__b + 28));
  __b[15] = v103;
  if (v103)
  {
    uint64_t BrokerString = nn_phrasing_getBrokerString(a5, &v139);
    uint64_t v109 = v139;
    if ((BrokerString & 0x80000000) != 0)
    {
      uint64_t v87 = BrokerString;
    }
    else
    {
      uint64_t v110 = fi_init(a1, a2, a3, a4, &v138, 0, v139, "FINN", 1, 0);
      if ((v110 & 0x80000000) != 0)
      {
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37006, 0, v111, v112, v113, v114, v126);
        uint64_t v87 = 2315264000;
      }
      else
      {
        uint64_t v87 = v110;
        uint64_t v115 = *(void *)v138;
        int v116 = *(_DWORD *)(*(void *)v138 + 52);
        if (*((_WORD *)__b + 9))
        {
          if (v116 == 2 && *(_DWORD *)(v115 + 60) == *v99 + *v137)
          {
            unsigned int v117 = *v136;
            goto LABEL_64;
          }
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37003, (uint64_t)"%s%d%s%d", v111, v112, v113, v114, "expected");
        }
        else
        {
          unsigned int v117 = *v136;
          if (v116 == 2 && *(_DWORD *)(v115 + 56) == v117 && *(_DWORD *)(v115 + 60) == *v99 + *v137)
          {
LABEL_64:
            __b[6] = v138;
            uint64_t v118 = heap_Calloc(*(void **)(a5 + 8), 1, (12 * v117) | 1);
            __b[16] = v118;
            if (!v118)
            {
              uint64_t v87 = 2315264010;
              log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v119, v120, v121, v122, v126);
            }
            goto LABEL_79;
          }
          log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37003, (uint64_t)"%s%d%d%s%d%d", v111, v112, v113, v114, "expected");
        }
        uint64_t v87 = 2315264025;
      }
    }
  }
  else
  {
    uint64_t v87 = 2315264010;
    log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v104, v105, v106, v107, v125);
    uint64_t v109 = v139;
  }
LABEL_79:
  if (v109) {
    heap_Free(*(void **)(a5 + 8), v109);
  }
  return v87;
}

uint64_t nn_phrasing_UnLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ssftmap_ObjClose(*(void *)(a3 + 24));
  uint64_t v6 = *(void *)(a3 + 32);
  if (v6)
  {
    if (*(_WORD *)(a3 + 10))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        if (*(void *)(v6 + v7))
        {
          heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v7));
          uint64_t v6 = *(void *)(a3 + 32);
          *(void *)(v6 + v7) = 0;
        }
        if (*(void *)(v6 + v7 + 16))
        {
          heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v7 + 16));
          uint64_t v6 = *(void *)(a3 + 32);
          *(void *)(v6 + v7 + 16) = 0;
        }
        ++v8;
        v7 += 32;
      }
      while (v8 < *(unsigned __int16 *)(a3 + 10));
    }
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a3 + 32) = 0;
  }
  uint64_t v9 = *(void *)(a3 + 120);
  if (v9)
  {
    heap_Free(*(void **)(a1 + 8), v9);
    *(void *)(a3 + 120) = 0;
  }
  uint64_t v10 = *(void *)(a3 + 72);
  if (v10)
  {
    (*(void (**)(void, void))(v10 + 24))(*(void *)(a3 + 96), *(void *)(a3 + 104));
    *(void *)(a3 + 72) = 0;
  }
  uint64_t v11 = fi_deinit(a1, a2, *(uint64_t **)(a3 + 48));
  uint64_t v12 = *(void *)(a3 + 128);
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    *(void *)(a3 + 128) = 0;
  }
  cstdlib_memset((void *)a3, 0, 0x90uLL);
  return v11;
}

uint64_t NNPausing_cleanLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int16 v20 = 0;
  if (!*(_WORD *)(a5 + 136)) {
    return 0;
  }
  int v24 = 0;
  int v25 = 0;
  __int16 v23 = 0;
  int v21 = 0;
  unsigned int v22 = 0;
  uint64_t v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v25);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v25, 0, (char *)&v25 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v25) == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v25, 0, &v19, &v24);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v24 >= 2u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v25, (char *)&v24 + 2);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v11 = HIWORD(v24);
          if (HIWORD(v24))
          {
            int v12 = 0;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v11, 0, 1, &v22, &v24);
              if ((result & 0x80000000) != 0) {
                break;
              }
              if (v22 <= 0xA && ((1 << v22) & 0x610) != 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v24), 1, 1, &v21, &v24);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v24), 2, 1, (char *)&v21 + 2, &v24);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v21 != HIWORD(v21))
                {
                  if (v12 + 1 >= *(unsigned __int16 *)(a5 + 6)) {
                    return result;
                  }
                  uint64_t result = getWordIdx(a1, *(void *)(a5 + 128), *(unsigned __int16 *)(a5 + 136), (unsigned __int16)v21, HIWORD(v21), &v20, v14, v15);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  int v12 = v20;
                  if (*(_DWORD *)(*(void *)(a5 + 128) + 12 * v20) == 1)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v24), 18, 1, "", &v23);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : remove temp external label from  WordRecord[%d] word[%d] by setting to \"\"", v16, v17, v18, HIWORD(v24));
                  }
                }
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v24), (char *)&v24 + 2);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v11 = HIWORD(v24);
                if (HIWORD(v24)) {
                  continue;
                }
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getWordIdx(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (_DWORD *)(a2 + 8);
    while (*(v9 - 1) != a4 || *v9 != a5)
    {
      v9 += 3;
      if (a3 == ++v8) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    *a6 = v8;
  }
  else
  {
LABEL_6:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant align lingdb word : no word found with at %d,%d", (uint64_t)a6, a7, a8, a4);
    return 2315264000;
  }
  return result;
}

uint64_t NNPausing_UpdateLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v36 = 0;
  int v37 = 0;
  __int16 v35 = 0;
  int v33 = 0;
  unsigned int v34 = 0;
  unsigned __int16 v32 = 0;
  uint64_t v31 = 0;
  int v30 = 0;
  __int16 v29 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v37);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v37, 0, (char *)&v37 + 2);
    if ((result & 0x80000000) == 0 && HIWORD(v37) == 1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v37, 0, &v31, &v36);
      if ((result & 0x80000000) == 0 && (unsigned __int16)v36 >= 2u)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v37, (char *)&v36 + 2);
        if ((result & 0x80000000) == 0)
        {
          unsigned __int16 v13 = HIWORD(v36);
          if (HIWORD(v36))
          {
            unsigned int v14 = 0;
            while (1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v13, 0, 1, &v34, &v36);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if (v34 <= 0xA && ((1 << v34) & 0x610) != 0)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v36), 1, 1, &v33, &v36);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v36), 2, 1, (char *)&v33 + 2, &v36);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                if ((unsigned __int16)v33 != HIWORD(v33))
                {
                  if (v14 + 1 >= *(unsigned __int16 *)(a5 + 6)) {
                    return result;
                  }
                  uint64_t result = getWordIdx(a1, *(void *)(a5 + 128), *(unsigned __int16 *)(a5 + 136), (unsigned __int16)v33, HIWORD(v33), &v32, v16, v17);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                  __int16 v29 = 0;
                  unsigned int v14 = v32;
                  int v18 = *(_DWORD *)(*a6 + 224 * v32 + 216);
                  uint64_t v19 = (__int16 *)a5;
                  if (v18 != 1)
                  {
                    if (v18 != 2) {
                      goto LABEL_29;
                    }
                    uint64_t v19 = (__int16 *)(a5 + 2);
                  }
                  __int16 v29 = *v19;
                  if (v29)
                  {
                    uint64_t result = checkForExternalSildur(a2, a3, a4, HIWORD(v36), &v30);
                    if ((result & 0x80000000) != 0) {
                      return result;
                    }
                    if (v30)
                    {
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : clash with WordRecord[%d] word[%d] external pause has priority", v20, v21, v22, HIWORD(v36));
                    }
                    else
                    {
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a2 + 160))(a3, a4, HIWORD(v36), 8, 1, &v29, &v35);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a2 + 160);
                      uint64_t v23 = HIWORD(v36);
                      __int16 v24 = cstdlib_strlen("external");
                      uint64_t result = v28(a3, a4, v23, 18, (unsigned __int16)(v24 + 1), "external", &v35);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing : updating WordRecord[%d] word[%d] set as ext pause with duration=%d", v25, v26, v27, HIWORD(v36));
                      *(_DWORD *)(*(void *)(a5 + 128) + 12 * v14) = 1;
                    }
                  }
                }
              }
LABEL_29:
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v36), (char *)&v36 + 2);
              if ((result & 0x80000000) == 0)
              {
                unsigned __int16 v13 = HIWORD(v36);
                if (HIWORD(v36)) {
                  continue;
                }
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t nn_phrasing_ProcessSent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10 = a9;
  unsigned __int16 v168 = 0;
  LODWORD(v11) = *(unsigned __int16 *)(a5 + 8);
  uint64_t v167 = 0;
  uint64_t v164 = 0;
  __s2 = 0;
  int v162 = 0;
  *(_WORD *)(a7 + 136) = 0;
  *a9 = 1;
  if (!v11)
  {
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip NN pausing, no words found", a6, a7, a8, 0);
    uint64_t Str = 0;
    goto LABEL_34;
  }
  int v161 = a8;
  int v165 = 0;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v165 + 2);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a2 + 176))(a3, a4, HIWORD(v165), 1, &v164, &v165);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t Str = paramc_ParamGetStr(a1[5], (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) == 0)
  {
    uint64_t v159 = a2;
    uint64_t v157 = a3;
    if ((_WORD)v165)
    {
      unint64_t v22 = 0;
      uint64_t v23 = 24;
      while (1)
      {
        if (*(_DWORD *)(v164 + v23 - 24) == 36)
        {
          if (cstdlib_strcmp(*(const char **)(v164 + v23), __s2))
          {
            __int16 v24 = *(const char **)(v164 + v23);
            MarkerArguint64_t Str = marker_getMarkerArgStr(1u);
            if (cstdlib_strcmp(v24, MarkerArgStr))
            {
              uint64_t v26 = *(const char **)(v164 + v23);
              uint64_t v27 = marker_getMarkerArgStr(9u);
              if (cstdlib_strcmp(v26, v27))
              {
                uint64_t v28 = *(const char **)(v164 + v23);
                __int16 v29 = marker_getMarkerArgStr(2u);
                if (cstdlib_strcmp(v28, v29)) {
                  break;
                }
              }
            }
          }
        }
        ++v22;
        v23 += 32;
        if (v22 >= (unsigned __int16)v165) {
          goto LABEL_13;
        }
      }
      uint64_t v39 = a1[4];
      uint64_t v30 = *(void *)(v164 + v23);
      uint64_t v40 = "skip NN pausing, as language tag \"%s\" found";
      goto LABEL_31;
    }
LABEL_13:
    LODWORD(v30) = *(unsigned __int16 *)(a7 + 16);
    if (v161 == -1) {
      unsigned __int16 v31 = *(_WORD *)(a7 + 16);
    }
    else {
      unsigned __int16 v31 = v161;
    }
    int v32 = v31;
    if (!v31 || (LODWORD(v33) = *(unsigned __int16 *)(a5 + 8), !*(_WORD *)(a5 + 8)))
    {
LABEL_30:
      uint64_t v39 = a1[4];
      uint64_t v30 = v30;
      uint64_t v40 = "skip NN pausing, no valid predictive range found (doLenVerification setting is %d, minWordSpan parameter is %d)";
LABEL_31:
      log_OutText(v39, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v40, v18, v19, v20, v30);
LABEL_34:
      *uint64_t v10 = 0;
      return Str;
    }
    uint64_t v156 = a4;
    unint64_t v34 = 0;
    __int16 v35 = -1;
    uint64_t v36 = 208;
    while (1)
    {
      if (**(unsigned char **)(*(void *)a5 + v36) == 88 && v34 + 1 != v33) {
        goto LABEL_28;
      }
      if (!v34)
      {
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip 1 word phrase at word %d", v18, v19, v20, 0);
        __int16 v35 = 0;
        goto LABEL_28;
      }
      uint64_t v38 = a1[4];
      if ((int)v34 - v35 >= v32) {
        break;
      }
      log_OutText(v38, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip %d word phrase ending at word %d", v18, v19, v20, v34 + -v35);
      __int16 v35 = v34;
LABEL_28:
      ++v34;
      unint64_t v33 = *(unsigned __int16 *)(a5 + 8);
      v36 += 224;
      if (v34 >= v33)
      {
        LODWORD(v30) = *(unsigned __int16 *)(a7 + 16);
        uint64_t v10 = a9;
        goto LABEL_30;
      }
    }
    log_OutText(v38, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"found valid predictive range of length %d (minimum setting is %d) ending on word %d - continue with NN pausing", v18, v19, v20, -v35 + v34);
    if (*(unsigned __int16 *)(a5 + 8) <= *(unsigned __int16 *)(a7 + 6)) {
      unint64_t v11 = v11;
    }
    else {
      unint64_t v11 = *(unsigned __int16 *)(a7 + 6);
    }
    if (*(_WORD *)(a7 + 18)) {
      int v42 = v11;
    }
    else {
      int v42 = *(unsigned __int16 *)(a7 + 6);
    }
    unsigned int v43 = (*(_DWORD *)(a7 + 112) + *(unsigned __int16 *)(a7 + 4)) * v42;
    *(_DWORD *)(a7 + 56) = v43;
    uint64_t v44 = (float *)heap_Alloc(a1[1], 4 * v43);
    v166 = v44;
    if (!v44)
    {
      uint64_t Str = 2315264010;
      log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v45, v46, v47, v48, v149);
      return Str;
    }
    unint64_t v154 = v11;
    unsigned int v49 = *(_DWORD *)(a7 + 56);
    if (v49)
    {
      int v50 = 0;
      do
        v44[(unsigned __int16)v50++] = -1.0;
      while (v49 > (unsigned __int16)v50);
    }
    log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Dimensions:\nmaxWordsInSent=%d\nword2vecVecLength=%dnumAdditionalFields=%d", v46, v47, v48, *(unsigned __int16 *)(a7 + 6));
    uint64_t v52 = v159;
    unsigned int v151 = v11;
    if (!v11)
    {
      uint64_t v115 = 0;
LABEL_106:
      uint64_t v116 = (uint64_t)v115;
      LOWORD(v51) = *(_WORD *)(a7 + 8);
      *(float *)(**(void **)(a7 + 48) + 196) = (float)v51 / 100.0;
      if ((paramc_ParamGetInt(a1[5], (uint64_t)"nnpausingthresholdpercent", &v162) & 0x80000000) == 0)
      {
        float v121 = (float)v162 / 100.0;
        *(float *)(**(void **)(a7 + 48) + 196) = v121;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing threshold set to %f", v118, v119, v120, COERCE__INT64(v121));
      }
      uint64_t v123 = v156;
      uint64_t v122 = a9;
      uint64_t v124 = v151;
      uint64_t v54 = v116;
      if (!*(_WORD *)(a7 + 18)) {
        uint64_t v124 = *(unsigned __int16 *)(a7 + 6);
      }
      uint64_t Str = fi_predict(*(uint64_t ****)(a7 + 48), (const void **)&v166, v124, &v167, v117, v118, v119, v120);
      if ((Str & 0x80000000) == 0)
      {
        unsigned int v125 = *(unsigned __int16 *)(a5 + 8);
        *(_WORD *)(a7 + 136) = v125;
        if (*(_WORD *)(a7 + 6))
        {
          uint64_t v126 = 0;
          uint64_t v127 = 0;
          unint64_t v128 = 0;
          int v129 = v161;
          unint64_t v130 = v154;
          do
          {
            uint64_t v131 = *(void *)(a7 + 128);
            *(_DWORD *)(v131 + v126) = 0;
            if (v128 < v130)
            {
              uint64_t v132 = (unsigned __int16 *)(*(void *)a5 + v127);
              uint64_t v133 = v131 + v126;
              *(_DWORD *)(v133 + 4) = *v132;
              *(_DWORD *)(v133 + 8) = v132[1];
              uint64_t v134 = a1[4];
              if (*(void *)(v167 + 8 * v128)) {
                log_OutText(v134, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Prediction [%d,%s]: %s", v66, v67, v68, v128);
              }
              else {
                log_OutText(v134, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Prediction via thresholding [%d,%s]: 0", v66, v67, v68, v128);
              }
              v135 = *(const char **)(v167 + 8 * v128);
              if (v135 && !cstdlib_strcmp(v135, "1"))
              {
                uint64_t v136 = *(void *)a5 + v127;
                if (**(unsigned char **)(v136 + 208) == 88)
                {
                  *(_DWORD *)(v136 + 216) = 2;
                  log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"_RESPPAUSE", v66, v67, v68, 0);
                }
                else
                {
                  *(_DWORD *)(v136 + 216) = 1;
                  log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"_PUNCPAUSE", v66, v67, v68, 0);
                }
              }
              else
              {
                *(_DWORD *)(*(void *)a5 + v127 + 216) = 0;
              }
              int v129 = v161;
              unint64_t v130 = v154;
            }
            ++v128;
            v127 += 224;
            v126 += 12;
          }
          while (v128 < *(unsigned __int16 *)(a7 + 6));
          unsigned int v125 = *(unsigned __int16 *)(a5 + 8);
          uint64_t v123 = v156;
          uint64_t v122 = a9;
          uint64_t v54 = v116;
        }
        else
        {
          int v129 = v161;
          LODWORD(v130) = v154;
        }
        if (v130 < v125)
        {
          uint64_t v137 = v125;
          uint64_t v138 = (_DWORD *)(*(void *)a5 + 224 * v130 + 216);
          uint64_t v139 = v137 - v130;
          do
          {
            *uint64_t v138 = 0;
            v138 += 56;
            --v139;
          }
          while (v139);
        }
        validatePauseLocations((uint64_t)a1, (unsigned __int16 *)a7, (uint64_t *)a5, a6, v129, v66, v67, v68);
        *uint64_t v122 = 0;
        uint64_t v143 = *(unsigned __int16 *)(a5 + 8);
        if (!*(_WORD *)(a5 + 8)) {
          goto LABEL_139;
        }
        int v144 = 0;
        v145 = (int *)(*(void *)a5 + 216);
        do
        {
          int v146 = *v145;
          v145 += 56;
          if (v146)
          {
            int v144 = 1;
            *uint64_t v122 = 1;
          }
          --v143;
        }
        while (v143);
        if (v144 == 1)
        {
          log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN_PAUSING has prediction(s)", v140, v141, v142, 0);
          uint64_t Str = NNPausing_UpdateLingdb((uint64_t)a1, v52, v157, v123, a7, (void *)a5);
        }
        else
        {
LABEL_139:
          log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN_PAUSING has no prediction(s)", v140, v141, v142, 0);
        }
        goto LABEL_140;
      }
      uint64_t v147 = a1[4];
      uint64_t v148 = 37002;
LABEL_127:
      log_OutPublic(v147, (uint64_t)"FE_PHRASING", v148, 0, v65, v66, v67, v68, v150);
LABEL_140:
      if (v166)
      {
        heap_Free((void *)a1[1], (uint64_t)v166);
        v166 = 0;
      }
      if (v54) {
        heap_Free((void *)a1[1], v54);
      }
      return Str;
    }
    uint64_t v53 = 0;
    uint64_t v158 = 0;
    unsigned __int16 v152 = 0;
    uint64_t v54 = 0;
    while (1)
    {
      unsigned int v55 = *(_DWORD *)(a7 + 112) + *(unsigned __int16 *)(a7 + 4);
      if (v55)
      {
        int v56 = 0;
        uint64_t v57 = v166;
        int v58 = v53 * v55;
        do
        {
          v57[v58] = 0.0;
          ++v56;
          ++v58;
        }
        while (v55 > (unsigned __int16)v56);
      }
      uint64_t v153 = v53;
      uint64_t v59 = (void *)(*(void *)a5 + 224 * v158);
      uint64_t v60 = *(const char **)(v59[2] + 8 * *(unsigned __int16 *)(a6 + 16));
      uint64_t v61 = (const char *)v59[21];
      uint64_t v62 = (const char *)v59[26];
      __int16 v63 = cstdlib_strlen(v60);
      unsigned __int16 v64 = (v63 & 0xFFC0) != 0 ? v63 : 64;
      if (v54)
      {
        if (v64 <= v152)
        {
          int __dst = (char *)v54;
        }
        else
        {
          unsigned __int16 v152 = v64;
          int __dst = (char *)heap_Realloc((uint64_t *)a1[1], v54, v64 + 1);
          if (!__dst)
          {
            uint64_t Str = 2315264010;
            uint64_t v147 = a1[4];
            uint64_t v148 = 37000;
            goto LABEL_127;
          }
        }
      }
      else
      {
        unsigned __int16 v152 = v64;
        int __dst = (char *)heap_Calloc((void *)a1[1], 1, v64 + 1);
        if (!__dst)
        {
          uint64_t Str = 2315264010;
          log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37000, 0, v69, v70, v71, v72, v150);
          uint64_t v54 = 0;
          goto LABEL_140;
        }
      }
      if (v61 && cstdlib_strcmp(v61, "-"))
      {
        uint64_t v54 = (uint64_t)__dst;
        cstdlib_strcpy(__dst, v61);
        uint64_t v76 = v153;
      }
      else
      {
        uint64_t v76 = v153;
        uint64_t v54 = (uint64_t)__dst;
        if (cstdlib_strcmp(v62, "X"))
        {
          v169[0] = 0;
          unsigned int StartOfOrthPunc = getStartOfOrthPunc(v60, v169);
          unsigned __int16 v78 = v152;
          if (StartOfOrthPunc < v152) {
            unsigned __int16 v78 = StartOfOrthPunc;
          }
          unsigned __int16 v79 = v169[0] == 1 ? v78 : v152;
        }
        else
        {
          unsigned __int16 v79 = v152;
        }
        uint64_t v80 = v79;
        cstdlib_strncpy(__dst, v60, v79);
        __dst[v80] = 0;
      }
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word [%d] %s lookup \"%s\"", v73, v74, v75, v76);
      uint64_t v81 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a7 + 72) + 56))(*(void *)(a7 + 96), *(void *)(a7 + 104), v54, *(void *)(a7 + 120));
      if ((v81 & 0x1FFF) == 0x14)
      {
        if (((*(uint64_t (**)(void, void, const char *, void))(*(void *)(a7 + 72) + 56))(*(void *)(a7 + 96), *(void *)(a7 + 104), "$MEANW2V$", *(void *)(a7 + 120)) & 0x1FFF) == 0x14)
        {
          log_OutPublic(a1[4], (uint64_t)"FE_PHRASING", 37004, (uint64_t)"%s%s", v82, v83, v84, v85, "expected");
          uint64_t Str = 2315264000;
          goto LABEL_140;
        }
      }
      else
      {
        uint64_t Str = v81;
        if ((v81 & 0x80000000) != 0) {
          goto LABEL_140;
        }
      }
      int v86 = v55 * v76;
      cstdlib_memcpy(&v166[v55 * v76], *(const void **)(a7 + 120), 4 * *(unsigned int *)(a7 + 112));
      if (*(_WORD *)(a7 + 10)) {
        break;
      }
LABEL_100:
      uint64_t v53 = (v153 + 1);
      uint64_t v115 = __dst;
      uint64_t v54 = (uint64_t)__dst;
      if (++v158 == v154) {
        goto LABEL_106;
      }
    }
    uint64_t v87 = 0;
    unint64_t v88 = 0;
    __int16 v89 = 0;
    unsigned __int16 v90 = 0;
    while (1)
    {
      uint64_t v91 = "POS";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "POS")) {
        break;
      }
      uint64_t v91 = "PHR";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "PHR"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 80);
        goto LABEL_94;
      }
      uint64_t v91 = "TOK";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "TOK"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 168);
        goto LABEL_94;
      }
      uint64_t v91 = "COMP";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "COMP"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 176);
        goto LABEL_94;
      }
      uint64_t v91 = "SPUNC";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "SPUNC"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 184);
        goto LABEL_94;
      }
      uint64_t v91 = "EPUNC";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "EPUNC"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 192);
        goto LABEL_94;
      }
      uint64_t v91 = "PUNC";
      if (!cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "PUNC"))
      {
        uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 200);
        goto LABEL_94;
      }
      if (cstdlib_strcmp(*(const char **)(*(void *)(a7 + 32) + v87), "ORTHPUNC")) {
        goto LABEL_96;
      }
      uint64_t v95 = *(const char **)(*(void *)a5 + 224 * v158 + 208);
      unsigned int v96 = (unsigned __int16)v88;
      uint64_t v97 = (uint64_t)a1;
      uint64_t v98 = a7;
      uint64_t v99 = "ORTHPUNC";
LABEL_95:
      uint64_t IndexValue = getIndexValue(v97, v98, v96, v99, v95, &v168);
      if ((IndexValue & 0x80000000) != 0)
      {
        uint64_t Str = IndexValue;
        uint64_t v54 = (uint64_t)__dst;
        goto LABEL_140;
      }
LABEL_96:
      v168 -= v89;
      unsigned int v101 = v168;
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"translated thisFeatureIdx=%d", v92, v93, v94, v168);
      int v105 = v86 + v90;
      if (*(_DWORD *)(*(void *)(a7 + 32) + v87 + 8))
      {
        float v106 = (double)v101 + 1.0;
        uint64_t v107 = (v105 + *(_DWORD *)(a7 + 112));
        v166[v107] = v106;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NUMERIC SET [%d] (%d + %d + %d) = %3.1lf + 1.0", v102, v103, v104, v107);
        uint64_t v111 = *(void *)(a7 + 32);
        __int16 v112 = *(_WORD *)(v111 + v87 + 26);
        __int16 v113 = 1;
      }
      else
      {
        uint64_t v114 = v105 + v101 + *(_DWORD *)(a7 + 112);
        v166[v114] = 1.0;
        log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"ONEHOT SET [%d] (%d + %d + %d + %d) = 1.0", v102, v103, v104, v114);
        uint64_t v111 = *(void *)(a7 + 32);
        __int16 v112 = *(_WORD *)(v111 + v87 + 26);
        __int16 v113 = v112;
      }
      v90 += v113;
      v89 += v112;
      log_OutText(a1[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"increase featureValOffset by %s %d", v108, v109, v110, *(void *)(v111 + v87));
      ++v88;
      v87 += 32;
      uint64_t v52 = v159;
      if (v88 >= *(unsigned __int16 *)(a7 + 10)) {
        goto LABEL_100;
      }
    }
    uint64_t v95 = *(const char **)(*(void *)(*(void *)a5 + 224 * v158 + 16) + 8 * *(unsigned __int16 *)(a6 + 18));
LABEL_94:
    unsigned int v96 = (unsigned __int16)v88;
    uint64_t v97 = (uint64_t)a1;
    uint64_t v98 = a7;
    uint64_t v99 = (char *)v91;
    goto LABEL_95;
  }
  return Str;
}

uint64_t getIndexValue(uint64_t a1, uint64_t a2, unsigned int a3, char *__src, const char *a5, _WORD *a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v23 = 0;
  cstdlib_strcpy(__dst, __src);
  cstdlib_strncat(__dst, a5, 0x36uLL);
  uint64_t v11 = ssftmap_Find(*(void *)(a2 + 24), (uint64_t)__dst, &v23);
  if ((v11 & 0x1FFF) == 0x14)
  {
    uint64_t v15 = *(void *)(a2 + 32) + 32 * a3;
    *a6 = *(_WORD *)(v15 + 24);
    if (*(_DWORD *)(v15 + 8)) {
      uint64_t v16 = "NUMERIC";
    }
    else {
      uint64_t v16 = "ONEHOT";
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s [%s] (default) convert %s to vector col %d", v12, v13, v14, (uint64_t)v16);
    return 0;
  }
  else
  {
    uint64_t v17 = v11;
    *a6 = cstdlib_atoi(v23);
    if (*(_DWORD *)(*(void *)(a2 + 32) + 32 * a3 + 8)) {
      uint64_t v21 = "NUMERIC";
    }
    else {
      uint64_t v21 = "ONEHOT";
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s [%s] convert %s to vector col %d", v18, v19, v20, (uint64_t)v21);
  }
  return v17;
}

uint64_t validatePauseLocations(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5 == -1) {
    unsigned __int16 v12 = a2[8];
  }
  else {
    unsigned __int16 v12 = a5;
  }
  uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"validatePauseLocations doCompVerification=%d doPHRVerification=%d doLenVerification=%d minWordSpan=%d", a6, a7, a8, a2[6]);
  LODWORD(v17) = *((unsigned __int16 *)a3 + 4);
  if (!*((_WORD *)a3 + 4)) {
    return result;
  }
  unsigned __int16 v43 = v12;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 208;
  do
  {
    unint64_t v21 = v18 + 1;
    BOOL v23 = 1;
    if (v18 + 1 < (unint64_t)v17)
    {
      unint64_t v22 = *(const char **)(*a3 + v20 + 96);
      if (v22)
      {
        if (!cstdlib_strncmp(v22, "B-", 2uLL) || !cstdlib_strcmp(*(const char **)(*a3 + v20 + 96), "O")) {
          BOOL v23 = 0;
        }
      }
    }
    __int16 v24 = *(const char **)(*a3 + v20 - 32);
    if (v24 && !cstdlib_strcmp(v24, "[COMP")) {
      int v19 = 1;
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[%d] %s bInCompoundWord=%d bPHRBnd=%d pause=%d orthPunc=%s    (%s %s)", v14, v15, v16, v18);
    uint64_t v25 = *a3;
    if (!*(_DWORD *)(*a3 + v20 + 8)) {
      goto LABEL_41;
    }
    if (v19 == 1 && a2[6] == 1 && cstdlib_strcmp(*(const char **)(v25 + v20 - 32), "COMP]"))
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside compound word", v14, v15, v16, v18);
LABEL_40:
      uint64_t v25 = *a3;
      *(_DWORD *)(*a3 + v20 + 8) = 0;
      goto LABEL_41;
    }
    char v26 = !v23;
    if (a2[7] != 1) {
      char v26 = 1;
    }
    if ((v26 & 1) == 0)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside PHR", v14, v15, v16, v18);
      goto LABEL_40;
    }
    if (cstdlib_strcmp(*(const char **)(*a3 + v20 - 40), "-"))
    {
      uint64_t v27 = *a3;
      if (v21 < *((unsigned __int16 *)a3 + 4))
      {
        int v28 = cstdlib_strcmp(*(const char **)(v27 + v20 + 184), "-");
        uint64_t v27 = *a3;
        if (v28)
        {
          uint64_t v32 = v27 + v20;
          int v33 = **(unsigned __int8 **)(v27 + v20 - 40);
          if (v33 == 73) {
            goto LABEL_29;
          }
          if (v33 == 66)
          {
            uint64_t v32 = v27 + v20;
LABEL_29:
            if (**(unsigned char **)(v32 + 184) == 73)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside TOK", v29, v30, v31, v18);
              goto LABEL_40;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v27 = *a3;
    }
    int v34 = cstdlib_strcmp(*(const char **)(*(void *)(v27 + v20 - 192) + 8 * *(unsigned __int16 *)(a4 + 16)), "§");
    unint64_t v35 = *((unsigned __int16 *)a3 + 4);
    if (!v34 && v21 < v35)
    {
      if (!cstdlib_strcmp(*(const char **)(*(void *)(*a3 + v20 + 32) + 8 * *(unsigned __int16 *)(a4 + 16)), "§"))
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block inside DUMMYWORD sequence", v14, v15, v16, v18);
        goto LABEL_40;
      }
      unint64_t v35 = *((unsigned __int16 *)a3 + 4);
    }
    uint64_t v25 = *a3;
    if (v18 + 3 > v35)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : block on last 2 words", v14, v15, v16, v18);
      goto LABEL_40;
    }
LABEL_41:
    uint64_t result = *(void *)(v25 + v20 - 32);
    if (result)
    {
      uint64_t result = cstdlib_strcmp((const char *)result, "COMP]");
      if (!result) {
        int v19 = 0;
      }
    }
    unint64_t v17 = *((unsigned __int16 *)a3 + 4);
    v20 += 224;
    ++v18;
  }
  while (v21 < v17);
  if (v43 && *((_WORD *)a3 + 4))
  {
    unint64_t v36 = 0;
    int v37 = 0;
    uint64_t v38 = *a3;
    unsigned __int16 v39 = -1;
    do
    {
      if (**(unsigned char **)(v38 + 224 * v36 + 208) != 88 || v37 + 1 == v17)
      {
        if (v36)
        {
          if (v37 - (__int16)v39 >= v43) {
            goto LABEL_63;
          }
          if (v39 == 0xFFFF) {
            unsigned __int16 v39 = 0;
          }
          if (v36 <= v39)
          {
LABEL_63:
            unsigned __int16 v39 = v36;
          }
          else
          {
            uint64_t v41 = v39;
            uint64_t v42 = 224 * v39;
            do
            {
              if (*(_DWORD *)(v38 + v42 + 216) == 2)
              {
                uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK PAUSE : word[%d] %s : blocked via len constraints, span word %d to word %d < %d", v14, v15, v16, v41);
                uint64_t v38 = *a3;
                *(_DWORD *)(*a3 + v42 + 216) = 0;
              }
              ++v41;
              v42 += 224;
            }
            while (v36 != (unsigned __int16)v41);
            LODWORD(v17) = *((unsigned __int16 *)a3 + 4);
            unsigned __int16 v39 = v36;
          }
        }
        else
        {
          unsigned __int16 v39 = 0;
        }
      }
      int v37 = ++v36;
    }
    while (v36 < v17);
  }
  return result;
}

uint64_t getNumericFeatureValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a5 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", a4, &__c[3], &__c[1], __c);
  if ((v6 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v8 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v8) {
      char *v8 = 0;
    }
    *a5 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  return v6;
}

uint64_t setStr(uint64_t a1, char **a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (__s)
  {
    uint64_t v11 = *(void **)(a1 + 8);
    int v12 = cstdlib_strlen(__s);
    uint64_t v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
    *a2 = v13;
    if (v13)
    {
      cstdlib_strcpy(v13, __s);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v20);
      return 2315264010;
    }
  }
  else
  {
    uint64_t v18 = 2315264007;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, a5, a6, a7, a8, v20);
  }
  return v18;
}

uint64_t getNumDigits(unsigned int a1)
{
  if (a1 >= 0xA)
  {
    int v2 = 0;
    do
    {
      __int16 v3 = v2++;
      BOOL v4 = a1 > 0x63;
      a1 /= 0xAu;
    }
    while (v4);
    return (unsigned __int16)(v3 + 2);
  }
  else
  {
    return 1;
  }
}

uint64_t getAsFactOf10(int a1)
{
  if (!a1) {
    return 1;
  }
  int v1 = 0;
  uint32x4_t v2 = (uint32x4_t)vdupq_n_s32(a1 - 1);
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  v4.i64[0] = 0xA0000000ALL;
  v4.i64[1] = 0xA0000000ALL;
  do
  {
    int8x16_t v5 = (int8x16_t)v3;
    int32x4_t v3 = vmulq_s32(v3, v4);
    v1 += 4;
  }
  while (((a1 + 3) & 0x1FFFC) != v1);
  int8x16_t v6 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v1 - 4), (int8x16_t)xmmword_2206E2AF0), v2), v5, (int8x16_t)v3);
  *(int32x2_t *)v6.i8 = vmul_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  return (v6.i32[0] * v6.i32[1]);
}

uint64_t getPrecisionFactor(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 >= 0xA)
  {
    int v4 = 0;
    do
    {
      __int16 v5 = v4++;
      BOOL v6 = v2 > 0x63;
      v2 /= 0xAu;
    }
    while (v6);
    unsigned __int16 v3 = v5 + 2;
  }
  else
  {
    unsigned __int16 v3 = 1;
  }
  unsigned int v7 = *(unsigned __int16 *)(a2 + 2);
  if (v7 >= 0xA)
  {
    int v9 = 0;
    do
    {
      __int16 v10 = v9++;
      BOOL v6 = v7 > 0x63;
      v7 /= 0xAu;
    }
    while (v6);
    unsigned __int16 v8 = v10 + 2;
  }
  else
  {
    unsigned __int16 v8 = 1;
  }
  int v11 = v3;
  if (v3 > v8)
  {
    int v12 = 0;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v11 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v15.i64[0] = 0xA0000000ALL;
    v15.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v15);
      v12 += 4;
    }
    while (((v11 + 3) & 0x1FFFC) != v12);
LABEL_18:
    unsigned int v18 = v12 - 4;
LABEL_19:
    int8x16_t v19 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_2206E2AF0), v13), v16, (int8x16_t)v14);
    *(int32x2_t *)v19.i8 = vmul_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    return (v19.i32[0] * v19.i32[1]);
  }
  if (v8 > v3)
  {
    int v12 = 0;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v8 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v17.i64[0] = 0xA0000000ALL;
    v17.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v17);
      v12 += 4;
    }
    while (((v8 + 3) & 0x1FFFC) != v12);
    goto LABEL_18;
  }
  if (v3)
  {
    int v21 = 0;
    int v22 = v3;
    int v23 = (v3 + 3) & 0x1FFFC;
    uint32x4_t v13 = (uint32x4_t)vdupq_n_s32(v22 - 1);
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    v24.i64[0] = 0xA0000000ALL;
    v24.i64[1] = 0xA0000000ALL;
    do
    {
      int8x16_t v16 = (int8x16_t)v14;
      int32x4_t v14 = vmulq_s32(v14, v24);
      v21 += 4;
    }
    while (v23 != v21);
    unsigned int v18 = v21 - 4;
    goto LABEL_19;
  }
  return 1;
}

BOOL FLOATSUR_EQUAL_INT(unsigned __int16 *a1, int a2, int a3)
{
  return *a1 == a2 && a1[1] == a3;
}

BOOL FLOATSUR_EQUAL(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL FLOATSUR_GT_INT(unsigned __int16 *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *a1;
  if (v3 > a2) {
    return 1;
  }
  if (v3 >= a2) {
    return a1[1] > a3;
  }
  return 0;
}

BOOL FLOATSUR_GT(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v3 > v2) {
    return 1;
  }
  if (v3 >= v2) {
    return a1[1] > a2[1];
  }
  return 0;
}

BOOL FLOATSUR_GTOREQUAL(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  unsigned int v4 = a2[1];
  if (v3 == v2)
  {
    if (a1[1] == v4) {
      return 1;
    }
  }
  else if (v3 > v2)
  {
    return 1;
  }
  return v3 >= v2 && a1[1] > v4;
}

BOOL FLOATSUR_LT_INT(unsigned __int16 *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *a1;
  if (v3 < a2) {
    return 1;
  }
  if (v3 > a2) {
    return 0;
  }
  return a1[1] < a3;
}

BOOL FLOATSUR_LT(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *a1;
  if (v3 < v2) {
    return 1;
  }
  if (v3 > v2) {
    return 0;
  }
  return a1[1] < a2[1];
}

_WORD *FLOATSUR_SET_INT(_WORD *result, __int16 a2, __int16 a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

_DWORD *FLOATSUR_SET(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t FLOATSUR_PLUS(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v14 + 1, (uint64_t)&v14, &v13);
  int v5 = v13 + v14;
  int v6 = HIDWORD(v14);
  unsigned int v7 = (v13 + v14) / HIDWORD(v14);
  *a1 = v7;
  unsigned int v8 = v5 - (unsigned __int16)v7 * v6;
  if (v8) {
    BOOL v9 = v8 % 0xA == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    do
    {
      unsigned int v10 = v8;
      v8 /= 0xAu;
    }
    while (v10 >= 0xA && v8 == 10 * ((429496730 * (unint64_t)v8) >> 32));
  }
  if (v8 < 0x10000)
  {
    LOWORD(v11) = v8;
  }
  else
  {
    do
    {
      unsigned int v11 = v8 / 0xA;
      unsigned int v12 = v8 >> 17;
      v8 /= 0xAu;
    }
    while (v12 > 4);
  }
  a1[1] = v11;
  return result;
}

uint64_t getVals(unsigned __int16 *a1, unsigned __int16 *a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  roundUpAndNormalize((uint64_t)a1);
  roundUpAndNormalize((uint64_t)a2);
  uint64_t result = getPrecisionFactor((uint64_t)a1, (uint64_t)a2);
  *a3 = result;
  int v11 = *a1;
  unsigned int v12 = a1[1];
  *(_DWORD *)a4 = v12 + result * v11;
  int v13 = *a2;
  unsigned int v14 = a2[1];
  unsigned int v15 = v14 + *a3 * v13;
  *a5 = v15;
  if (*(_DWORD *)a4 >= 0x10000u && v15 >= 0x10000)
  {
    __int16 v16 = 1;
    do
    {
      if (v15 < 0x10000) {
        break;
      }
      v16 *= 10;
      unsigned int v17 = *a3 / 0xA;
      *a3 = v17;
      *(_DWORD *)a4 = v12 / (v16 & 0xFFFEu) + v17 * v11;
      unsigned int v15 = v14 / (v16 & 0xFFFEu) + *a3 * v13;
      *a5 = v15;
    }
    while (*(_WORD *)(a4 + 2));
  }
  return result;
}

uint64_t FLOATSUR_PLUS_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_PLUS(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_MINUS(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v15 = 0;
  unsigned int v14 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v15 + 1, (uint64_t)&v15, &v14);
  unsigned int v5 = v14;
  int v6 = v15;
  if (v15 >= v14)
  {
    int v7 = HIDWORD(v15);
    unsigned int v8 = (v15 - v14) / HIDWORD(v15);
    *a1 = v8;
    unsigned int v9 = v6 - (v5 + (unsigned __int16)v8 * v7);
    if (v9) {
      BOOL v10 = v9 % 0xA == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      do
      {
        unsigned int v11 = v9;
        v9 /= 0xAu;
      }
      while (v11 >= 0xA && v9 == 10 * ((429496730 * (unint64_t)v9) >> 32));
    }
    if (v9 < 0x10000)
    {
      LOWORD(v12) = v9;
    }
    else
    {
      do
      {
        unsigned int v12 = v9 / 0xA;
        unsigned int v13 = v9 >> 17;
        v9 /= 0xAu;
      }
      while (v13 > 4);
    }
    a1[1] = v12;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t roundUpAndNormalize(uint64_t result)
{
  unsigned int v1 = *(unsigned __int16 *)(result + 2);
  if (v1 >= 0x64)
  {
    do
    {
      unsigned int v2 = v1;
      v1 /= 0xAu;
    }
    while (v2 >= 0x3E8);
    *(_WORD *)(result + 2) = v1;
    if (v2 >= 0xA && v1 == 10 * ((429496730 * (unint64_t)v1) >> 32))
    {
      do
      {
        unsigned int v3 = v1;
        v1 /= 0xAu;
      }
      while (v3 >= 0xA && v1 == 10 * ((429496730 * (unint64_t)v1) >> 32));
      *(_WORD *)(result + 2) = v1;
    }
  }
  if (v1 <= 9) {
    *(_WORD *)(result + 2) = 10 * v1;
  }
  return result;
}

uint64_t FLOATSUR_MINUS_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_MINUS(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_TIMES(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v14 + 1, (uint64_t)&v14, &v13);
  int v5 = v13 * v14;
  unsigned int v6 = HIDWORD(v14) * HIDWORD(v14);
  unsigned int v7 = v13 * v14 / (HIDWORD(v14) * HIDWORD(v14));
  if (v7 < 0x10000)
  {
    *a1 = v7;
    unsigned int v8 = v5 - v7 * v6;
    if (v8)
    {
      unsigned int v9 = v6 / 0xA;
      if (v8 >= v9)
      {
        HIDWORD(v10) = -858993459 * v8;
        LODWORD(v10) = -858993459 * v8;
        if ((v10 >> 1) <= 0x19999999)
        {
          do
          {
            unsigned int v11 = v8;
            v8 /= 0xAu;
          }
          while (v11 >= 0xA && v8 == 10 * ((429496730 * (unint64_t)v8) >> 32));
        }
        if (v8 < 0x10000)
        {
          LOWORD(v9) = v8;
        }
        else
        {
          do
          {
            unsigned int v9 = v8 / 0xA;
            unsigned int v12 = v8 >> 17;
            v8 /= 0xAu;
          }
          while (v12 > 4);
        }
      }
      else
      {
        LOWORD(v9) = 10 * v8 / v9 > 5;
      }
    }
    else
    {
      LOWORD(v9) = 0;
    }
    a1[1] = v9;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0xFFFF;
  }
  return result;
}

uint64_t FLOATSUR_TIMES_INT(_DWORD *a1, unsigned __int16 *a2, unsigned __int16 a3, unsigned __int16 a4)
{
  int v6 = 0;
  v7[0] = a3;
  v7[1] = a4;
  uint64_t result = FLOATSUR_TIMES(&v6, a2, v7);
  *a1 = v6;
  return result;
}

uint64_t FLOATSUR_DIV(_WORD *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v15 = 0;
  unsigned int v14 = 0;
  uint64_t result = getVals(a2, a3, (unsigned int *)&v15 + 1, (uint64_t)&v15, &v14);
  unsigned int v5 = v14;
  if (v14)
  {
    int v6 = v15;
    unsigned int v7 = v15 / v14;
    *a1 = v15 / v14;
    int v8 = v6 - v7 * v5;
    if (v8)
    {
      unsigned int v9 = HIDWORD(v15) * v8 * HIDWORD(v15);
      unsigned int v10 = v9 / v5;
      if (v5 <= v9 && !(v10 % 0xA))
      {
        do
        {
          unsigned int v11 = v10;
          v10 /= 0xAu;
        }
        while (v11 >= 0xA && v10 == 10 * ((429496730 * (unint64_t)v10) >> 32));
      }
      if (v10 < 0x10000)
      {
        LOWORD(v12) = v10;
      }
      else
      {
        do
        {
          unsigned int v12 = v10 / 0xA;
          unsigned int v13 = v10 >> 17;
          v10 /= 0xAu;
        }
        while (v13 > 4);
      }
    }
    else
    {
      LOWORD(v12) = 0;
    }
    a1[1] = v12;
    return roundUpAndNormalize((uint64_t)a1);
  }
  else
  {
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t load_stress_models(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _WORD *a7, uint64_t a8, _DWORD *a9, void *a10, void *a11, uint64_t a12, void *a13, _OWORD *a14, _WORD *a15, BOOL *a16)
{
  *(void *)&__c[3] = 0;
  uint64_t v40 = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  *(void *)&long long v36 = safeh_GetNullHandle();
  *((void *)&v36 + 1) = v23;
  *a10 = 0;
  *a11 = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_stress", &v40, &__c[1], __c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t v34 = a8;
  BOOL v25 = 0;
  if (*(unsigned __int16 *)&__c[1] == 1 && v40)
  {
    char v26 = *v40;
    v26[cstdlib_strlen(*v40) - 1] = 0;
    BOOL v25 = cstdlib_strcmp(*v40, "yes") == 0;
  }
  *(_WORD *)&__c[1] = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_stress_albert", &v40, &__c[1], __c);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  BOOL v27 = 0;
  if (*(unsigned __int16 *)&__c[1] == 1 && v40)
  {
    int v28 = *v40;
    v28[cstdlib_strlen(*v40) - 1] = 0;
    BOOL v27 = cstdlib_strcmp(*v40, "yes") == 0;
  }
  if (!v25) {
    goto LABEL_17;
  }
  BOOL v29 = v27;
  uint64_t inited = fe_stress_tryLoading_STRESS_igModel(a1, a2, a3, &v38);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a10 = v38;
  uint64_t inited = Init_stress_nn_model(a3, a1, a2, a7, v34, &v37);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a11 = v37;
  uint64_t v30 = v29 ? "albert" : "char";
  uint64_t inited = (*(uint64_t (**)(void, void, char *, _WORD *, uint64_t, long long *))(a12 + 16))(*a13, a13[1], v30, a1, a2, &v36);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  *a14 = v36;
  *a9 = 1;
  *a16 = v29;
LABEL_17:
  *a15 = 20;
  __c[0] = 0;
  *(_WORD *)&__c[1] = -1;
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a6 + 96))(a4, a5, "fecfg", "statbnd_pos_dimension", &__c[3], &__c[1], __c);
  if ((v31 & 0x80000000) == 0 && *(_WORD *)&__c[1])
  {
    uint64_t v32 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v32) {
      *uint64_t v32 = 0;
    }
    *a15 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
  }
  return v31;
}

uint64_t fe_stress_tryLoading_STRESS_igModel(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(v29, 0, 240);
  *(void *)char v26 = 0;
  BOOL v27 = 0;
  *a4 = 0;
  __s2 = 0;
  memset(__s1, 0, sizeof(__s1));
  v29[15] = 0u;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &__s2);
  if ((Str & 0x80000000) != 0
    || (uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"fecfg", &v27), (Str & 0x80000000) != 0)
    || (cstdlib_strcat((char *)__s1, "nnstressigrules_"),
        cstdlib_strcat((char *)__s1, __s2),
        cstdlib_strcat((char *)__s1, "_"),
        cstdlib_strcat((char *)__s1, v27),
        uint64_t Str = brokeraux_ComposeBrokerString(a3, (const char *)__s1, 1, 1, __s2, 0, 0, v29, 0x100uLL),
        (Str & 0x80000000) != 0)
    || (uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v29, "IGTR", 1031, (uint64_t *)v26),
        (Str & 0x80000000) != 0))
  {
    uint64_t v21 = Str;
  }
  else
  {
    __int16 v16 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = (uint64_t)v16;
    if (v16)
    {
      uint64_t v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        uint64_t v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v25);
      uint64_t v21 = 2315264010;
    }
  }
  if (*(void *)v26)
  {
    uint64_t v22 = ssftriff_reader_ObjClose(*(void **)v26, v9, v10, v11, v12, v13, v14, v15);
    if ((v21 & 0x80000000) == 0)
    {
      uint64_t v23 = v22;
      if ((v22 & 0x80000000) != 0)
      {
        if (*a4)
        {
          heap_Free(*(void **)(a3 + 8), *a4);
          *a4 = 0;
        }
        return v23;
      }
    }
  }
  return v21;
}

uint64_t Init_stress_nn_model(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, uint64_t a5, void *a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  memset(v21, 0, 240);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  *a6 = 0;
  __s2 = 0;
  memset(__s1, 0, sizeof(__s1));
  v21[15] = 0u;
  if ((paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2) & 0x80000000) == 0
    && (paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v19) & 0x80000000) == 0)
  {
    cstdlib_strcat((char *)__s1, "nnstress_");
    cstdlib_strcat((char *)__s1, __s2);
    cstdlib_strcat((char *)__s1, "_");
    cstdlib_strcat((char *)__s1, v19);
    brokeraux_ComposeBrokerString(a1, (const char *)__s1, 1, 1, __s2, 0, 0, v21, 0x100uLL);
  }
  uint64_t v15 = fi_init(a2, a3, a4, a5, &v18, 0, (uint64_t)v21, "FINN", 1, 0);
  if ((v15 & 0x80000000) != 0) {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Init Stress FI model failed", v12, v13, v14, v17);
  }
  else {
    *a6 = v18;
  }
  return v15;
}

uint64_t *free_stress_model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    igtree_Deinit(a1, a3);
    heap_Free(*(void **)(a1 + 8), a3);
  }
  if (a4) {
    a4 = (uint64_t *)fi_deinit(a1, a2, a4);
  }
  if (a5) {
    (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a6, a7);
  }
  return a4;
}

uint64_t fe_stress_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t ***a9, unsigned __int16 a10, int a11)
{
  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
  if (!v18)
  {
    uint64_t inited = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v441);
    return inited;
  }
  uint64_t v23 = v18;
  int v529 = 0;
  int v530 = 0;
  v531 = 0;
  v532 = 0;
  unsigned __int16 v528 = 0;
  int v526 = 0;
  unsigned int v527 = 0;
  int v525 = 0;
  v523 = 0;
  *(void *)v524 = 0;
  v522 = 0;
  *(_WORD *)(v18 + 12) = 0;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a4 + 104))(a2, a3, 1, 0, (char *)&v530 + 2);
  if ((v24 & 0x80000000) != 0) {
    goto LABEL_415;
  }
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, void, int *))(a4 + 184))(a2, a3, HIWORD(v530), 0, &v529);
  int v26 = 0;
  uint64_t v504 = a2;
  if ((inited & 0x80000000) != 0) {
    goto LABEL_281;
  }
  if ((unsigned __int16)v529 != 1) {
    goto LABEL_281;
  }
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a4 + 176))(a2, a3, HIWORD(v530), 0, &v532, (char *)&v529 + 2);
  int v26 = 0;
  if ((inited & 0x80000000) != 0 || HIWORD(v529) < 2u) {
    goto LABEL_281;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Stress: processing=\"%s\"", v27, v28, v29, (uint64_t)v532);
  uint64_t v30 = heap_Calloc(*(void **)(a1 + 8), 1, 1024);
  if (!v30) {
    goto LABEL_608;
  }
  uint64_t v35 = v30;
  uint64_t v510 = a6;
  __int16 v36 = cstdlib_strlen(v532);
  uint64_t v37 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)(v36 + 1));
  if (!v37)
  {
    uint64_t inited = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v38, v39, v40, v41, v441);
    v252 = *(void **)(a1 + 8);
    v253 = (char *)v35;
LABEL_373:
    heap_Free(v252, (uint64_t)v253);
    goto LABEL_609;
  }
  uint64_t v42 = (char *)v37;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a4 + 104))(a2, a3, 2, HIWORD(v530), &v530);
  if ((inited & 0x80000000) != 0 || (unsigned __int16 v43 = v530) == 0)
  {
    heap_Free(*(void **)(a1 + 8), v35);
    int v26 = 0;
    uint64_t v254 = (uint64_t)v42;
    a6 = v510;
    goto LABEL_280;
  }
  uint64_t v476 = v35;
  v499 = v42;
  uint64_t v501 = 0;
  unsigned __int16 v487 = 0;
  uint64_t v493 = a8;
  int v496 = 0;
  uint64_t v459 = a4;
  uint64_t v470 = a3;
  do
  {
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a4 + 168))(a2, a3, v43, 0, 1, &v527, (char *)&v529 + 2);
    if ((v44 & 0x80000000) != 0)
    {
LABEL_258:
      uint64_t inited = v44;
      goto LABEL_259;
    }
    unsigned int v45 = v527;
    if (v527 == 15)
    {
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v530, 1, 1, (char *)&v526 + 2, (char *)&v529 + 2);
      if ((v44 & 0x80000000) != 0) {
        goto LABEL_258;
      }
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v530, 2, 1, &v526, (char *)&v529 + 2);
      if ((v44 & 0x80000000) != 0) {
        goto LABEL_258;
      }
      if (HIWORD(v526) > (unsigned __int16)v526) {
        goto LABEL_262;
      }
      unsigned int v45 = v527;
    }
    BOOL v46 = v45 > 0xA;
    int v47 = (1 << v45) & 0x610;
    if (v46 || v47 == 0) {
      goto LABEL_164;
    }
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v530, 1, 1, (char *)&v525 + 2, (char *)&v529 + 2);
    if ((v49 & 0x80000000) != 0
      || (uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v530, 2, 1, &v525, (char *)&v529 + 2), (v49 & 0x80000000) != 0))
    {
LABEL_257:
      uint64_t inited = v49;
      int v496 = 0;
LABEL_259:
      unsigned __int16 v168 = 0;
      v169 = 0;
      break;
    }
    if (HIWORD(v525) > (unsigned __int16)v525)
    {
      int v496 = 0;
LABEL_262:
      unsigned __int16 v168 = 0;
      v169 = 0;
      unsigned __int16 v255 = 16049;
LABEL_263:
      uint64_t inited = v255 | 0x8A000000;
      break;
    }
    cstdlib_strncpy(v42, &v532[HIWORD(v525)], (unsigned __int16)v525 - (unint64_t)HIWORD(v525));
    v42[(unsigned __int16)v525 - HIWORD(v525)] = 0;
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(a4 + 184))(a2, a3, (unsigned __int16)v530, 14, &v529);
    if ((v49 & 0x80000000) != 0) {
      goto LABEL_257;
    }
    if ((unsigned __int16)v529 == 1)
    {
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a4 + 176))(a2, a3, (unsigned __int16)v530, 14, &v531, (char *)&v529 + 2);
      if ((v49 & 0x80000000) != 0) {
        goto LABEL_257;
      }
      hlp_NLUStrFind(v531, "POS", &v523, &v528);
    }
    int v50 = v523;
    if (v523)
    {
      int v496 = 0;
      goto LABEL_33;
    }
    unsigned int v51 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 2);
    v523 = v51;
    if (!v51)
    {
      int v496 = 1;
      unsigned __int16 v168 = 0;
      v169 = 0;
      unsigned __int16 v255 = 8202;
      goto LABEL_263;
    }
    *unsigned int v51 = 61;
    v523[1] = 0;
    int v496 = 1;
LABEL_33:
    v484 = v50;
    v505 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v528 + 1);
    if (!v505) {
      goto LABEL_260;
    }
    cstdlib_strncpy(v505, v523, v528);
    v505[v528] = 0;
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *, char *))(a4 + 176))(a2, a3, (unsigned __int16)v530, 9, v524, (char *)&v529 + 2);
    if ((v56 & 0x80000000) != 0)
    {
      uint64_t inited = v56;
      unsigned __int16 v168 = 0;
      goto LABEL_266;
    }
    uint64_t v57 = heap_Calloc(*(void **)(a1 + 8), 1, 16);
    if (!v57)
    {
LABEL_260:
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v52, v53, v54, v55, v441);
      unsigned __int16 v168 = 0;
      uint64_t inited = 2315264010;
LABEL_266:
      v169 = v505;
      break;
    }
    int v58 = (void *)v57;
    *(_DWORD *)(v57 + 8) = 655360;
    uint64_t v59 = heap_Calloc(*(void **)(a1 + 8), 10, 16);
    *int v58 = v59;
    uint64_t v513 = (uint64_t)v58;
    if (!v59)
    {
      v507 = 0;
      goto LABEL_273;
    }
    uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a4 + 176))(a2, a3, (unsigned __int16)v530, 3, &v522, (char *)&v529 + 2);
    if ((v64 & 0x80000000) != 0)
    {
      v507 = 0;
      uint64_t inited = v64;
      goto LABEL_274;
    }
    uint64_t v65 = cstdlib_strstr(v522, "[SVOX]");
    uint64_t v66 = v522;
    uint64_t v67 = a4;
    if (v65)
    {
      uint64_t v66 = v522 + 6;
      v522 += 6;
    }
    uint64_t v68 = (char *)v501;
    uint64_t v69 = *(void *)(a1 + 8);
    size_t v70 = cstdlib_strlen(v66);
    uint64_t v71 = (char *)heap_Alloc(v69, v70 + 1);
    if (!v71)
    {
      v507 = 0;
LABEL_270:
      a4 = v67;
LABEL_271:
      a8 = v493;
      goto LABEL_273;
    }
    v507 = v71;
    cstdlib_strcpy(v71, v522);
    if ((unsigned __int16)cstdlib_strlen(v522) >= v487)
    {
      unsigned int v72 = (unsigned __int16)(cstdlib_strlen(v522) + 1);
      if (v72 <= 4) {
        uint64_t v73 = 4;
      }
      else {
        uint64_t v73 = v72;
      }
      unsigned __int16 v487 = v73;
      uint64_t v74 = heap_Realloc(*(uint64_t **)(a1 + 8), v501, v73);
      if (!v74) {
        goto LABEL_270;
      }
      uint64_t v68 = (char *)v74;
    }
    else if (!v501)
    {
      a8 = v493;
      goto LABEL_50;
    }
    a8 = v493;
    *uint64_t v68 = 0;
LABEL_50:
    uint64_t v501 = (uint64_t)v68;
    unsigned int v75 = 0;
    if (cstdlib_strlen(v42))
    {
      unsigned int v76 = 0;
      do
      {
        if ((utf8_getUTF8Char((uint64_t)v42, v76, &v521) & 0x80000000) != 0) {
          break;
        }
        uint64_t v77 = *(unsigned __int16 *)(v513 + 10);
        if (*(unsigned __int16 *)(v513 + 8) >= v77)
        {
          uint64_t v78 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v513, 16 * v77 + 160);
          if (!v78)
          {
            a4 = v459;
            a3 = v470;
            uint64_t v42 = v499;
LABEL_273:
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v60, v61, v62, v63, v441);
            uint64_t inited = 2315264010;
LABEL_274:
            stat_stress_freeCandidatePhons((void *)a1, v513);
            heap_Free(*(void **)(a1 + 8), v513);
            v169 = v505;
            unsigned __int16 v168 = v507;
            goto LABEL_275;
          }
          *(void *)uint64_t v513 = v78;
          cstdlib_memset((void *)(v78 + 16 * *(unsigned __int16 *)(v513 + 8)), 0, 0xA0uLL);
          *(_WORD *)(v513 + 10) += 10;
        }
        *(_DWORD *)__s2 = v76;
        if (!v68)
        {
          unsigned int v75 = 0;
          uint64_t v42 = v499;
          break;
        }
        *(_WORD *)v535 = 0;
        uint64_t v42 = v499;
        if (utf8_Utf8CharTo16bit((unsigned __int8 *)v499, (uint64_t)v535)
          && (unsigned __int16)((unsigned __int16)(*(_WORD *)v535 + 24576) >> 9) <= 0x56u
          && (*(unsigned __int16 *)v535 > 0x3Eu || ((1 << v535[0]) & 0x5000040000000000) == 0))
        {
          cstdlib_strcpy(v68, v507);
          char v84 = 1;
        }
        else
        {
          utf8_GetPreviousValidUtf8Offset((uint64_t)v499, (unsigned int *)__s2);
          unsigned __int16 v79 = (char *)v507;
          if (*(_DWORD *)__s2)
          {
            unsigned int NextUtf8Offset = 0;
            unsigned __int16 v79 = (char *)v507;
            while (1)
            {
              unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v499, NextUtf8Offset);
              uint64_t v81 = cstdlib_strstr(v79, ".");
              if (!v81) {
                break;
              }
              if (*v81 == 46) {
                unsigned __int16 v79 = v81 + 1;
              }
              else {
                unsigned __int16 v79 = v81;
              }
              if (NextUtf8Offset == *(_DWORD *)__s2) {
                goto LABEL_68;
              }
            }
            v68[NextUtf8Offset] = 0;
            a2 = v504;
            a8 = v493;
            break;
          }
LABEL_68:
          for (LODWORD(v82) = 0; ; LODWORD(v82) = v82 + 1)
          {
            int v83 = v79[v82];
            uint64_t v82 = v82;
            if (!v79[v82] || v83 == 46) {
              break;
            }
            v68[v82] = v83;
            if (v82 && v83 == 125 && v68[(v82 - 1)] - 48 <= 9)
            {
              v79[v82] = 46;
              uint64_t v82 = (v82 + 1);
              break;
            }
          }
          char v84 = 0;
          v68[v82] = 0;
        }
        uint64_t v85 = *(void *)(a1 + 8);
        int v86 = cstdlib_strlen(v68);
        uint64_t v87 = (char *)heap_Alloc(v85, (v86 + 1));
        *(void *)(*(void *)v513 + 16 * *(unsigned __int16 *)(v513 + 8)) = v87;
        if (!v87) {
          goto LABEL_264;
        }
        cstdlib_strcpy(v87, v68);
        v75 += cstdlib_strlen(v68) + 1;
        __int16 v88 = *(_WORD *)(v513 + 8) + 1;
        *(_WORD *)(v513 + 8) = v88;
        a8 = v493;
        if (v84)
        {
          a2 = v504;
          uint64_t v89 = v513;
          goto LABEL_84;
        }
        unsigned int v76 = utf8_GetNextUtf8Offset(v499, v76);
        a2 = v504;
      }
      while (v76 < cstdlib_strlen(v499));
    }
    uint64_t v89 = v513;
    __int16 v88 = *(_WORD *)(v513 + 8);
LABEL_84:
    if (!v88 || v75 >= cstdlib_strlen(v522) + 1) {
      goto LABEL_88;
    }
    int v90 = cstdlib_strlen(*(const char **)(*(void *)v89 + 16 * *(unsigned __int16 *)(v89 + 8) - 16));
    uint64_t v91 = *(uint64_t **)(a1 + 8);
    uint64_t v92 = *(void *)(*(void *)v89 + 16 * *(unsigned __int16 *)(v89 + 8) - 16);
    int v93 = cstdlib_strlen(v522);
    uint64_t v94 = (char *)heap_Realloc(v91, v92, v90 - v75 + v93 + 2);
    if (!v94)
    {
LABEL_264:
      a4 = v459;
      a3 = v470;
      goto LABEL_271;
    }
    *(void *)(*(void *)v89 + 16 * *(unsigned __int16 *)(v89 + 8) - 16) = v94;
    cstdlib_strcat(v94, &v522[v75 - 1]);
    a2 = v504;
    a8 = v493;
LABEL_88:
    __int16 v469 = HIWORD(v525);
    int v95 = (unsigned __int16)v525;
    int v467 = (unsigned __int16)v526;
    __s = *(char **)v524;
    uint64_t v96 = *(unsigned __int16 *)(v23 + 10);
    if (*(_WORD *)(v23 + 10))
    {
      a4 = v459;
      a3 = v470;
      if (*(unsigned __int16 *)(v23 + 8) >= v96)
      {
        uint64_t v102 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v23, (v96 << 6) + 1280);
        if (!v102)
        {
LABEL_124:
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v98, v99, v100, v101, v441);
          uint64_t inited = 2315264010;
          goto LABEL_160;
        }
        int v466 = v95;
        *(void *)uint64_t v23 = v102;
        cstdlib_memset((void *)(v102 + ((unint64_t)*(unsigned __int16 *)(v23 + 8) << 6)), 0, 0x500uLL);
        *(_WORD *)(v23 + 10) += 20;
        uint64_t v486 = *(void *)v23;
      }
      else
      {
        int v466 = (unsigned __int16)v525;
        uint64_t v486 = *(void *)v23;
      }
    }
    else
    {
      uint64_t v97 = heap_Calloc(*(void **)(a1 + 8), 1, 3201);
      *(void *)uint64_t v23 = v97;
      a4 = v459;
      a3 = v470;
      uint64_t v486 = v97;
      if (!v97) {
        goto LABEL_124;
      }
      int v466 = v95;
      *(_WORD *)(v23 + 10) = 50;
    }
    uint64_t v490 = *(unsigned __int16 *)(v23 + 8);
    uint64_t v103 = (const char **)(v486 + (v490 << 6));
    uint64_t v104 = *(void **)(a1 + 8);
    int v105 = cstdlib_strlen(v42);
    float v106 = (char *)heap_Calloc(v104, 1, (v105 + 4));
    const char *v103 = v106;
    v478 = v103;
    if (!v106
      || (cstdlib_strcpy(v106, v42),
          uint64_t v111 = *(void **)(a1 + 8),
          int v112 = cstdlib_strlen(v505),
          __int16 v113 = (char *)heap_Calloc(v111, 1, (v112 + 1)),
          v103[2] = v113,
          uint64_t v114 = v103 + 2,
          !v113))
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v107, v108, v109, v110, v441);
      uint64_t inited = 2315264010;
      uint64_t v122 = v486;
      goto LABEL_127;
    }
    cstdlib_strcpy(v113, v505);
    uint64_t v115 = *(void **)(a1 + 8);
    int v116 = cstdlib_strlen(__s);
    uint64_t v117 = (char *)heap_Calloc(v115, 1, (v116 + 1));
    uint64_t v122 = v486;
    uint64_t v123 = v486 + (v490 << 6);
    *(void *)(v123 + 24) = v117;
    if (!v117
      || (v451 = (const char **)(v123 + 24),
          cstdlib_strcpy(v117, __s),
          uint64_t v124 = *(unsigned __int16 *)(v89 + 8),
          *(_WORD *)(v123 + 54) = v124,
          uint64_t v125 = heap_Calloc(*(void **)(a1 + 8), v124, 32),
          *(void *)(v123 + 56) = v125,
          uint64_t v126 = (void *)(v123 + 56),
          !v125))
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v118, v119, v120, v121, v441);
      uint64_t inited = 2315264010;
      goto LABEL_126;
    }
    uint64_t v461 = a5;
    v465 = v114;
    if (*(_WORD *)(v89 + 8))
    {
      unint64_t v127 = 0;
      do
      {
        unint64_t v128 = *(void **)(a1 + 8);
        int v129 = cstdlib_strlen(*(const char **)(*(void *)v89 + 16 * v127));
        unint64_t v130 = (char *)heap_Calloc(v128, 1, (v129 + 1));
        *(void *)(*v126 + 32 * v127) = v130;
        if (!v130) {
          goto LABEL_229;
        }
        cstdlib_strcpy(v130, *(const char **)(*(void *)v89 + 16 * v127));
        v135 = *(void **)(a1 + 8);
        int v136 = cstdlib_strlen(__s);
        uint64_t v137 = (char *)heap_Calloc(v135, 1, (v136 + 1));
        *(void *)(*v126 + 32 * v127 + 16) = v137;
        if (!v137
          || (cstdlib_strcpy(v137, __s),
              uint64_t v138 = heap_Calloc(*(void **)(a1 + 8), 1, 4),
              uint64_t v139 = *v126 + 32 * v127,
              (*(void *)(v139 + 8) = v138) == 0))
        {
LABEL_229:
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v131, v132, v133, v134, v441);
          uint64_t inited = 2315264010;
          a2 = v504;
          a5 = v461;
          goto LABEL_127;
        }
        if (cstdlib_strcmp(*(const char **)(v139 + 16), "normal")
          && cstdlib_strcmp(*(const char **)(*v126 + 32 * v127 + 16), "mnx"))
        {
          cstdlib_strcpy(*(char **)(*v126 + 32 * v127 + 8), "=");
        }
        else
        {
          uint64_t v140 = v122;
          uint64_t v141 = (const char **)(*v126 + 32 * v127);
          char v538 = 0;
          *(_DWORD *)__s2 = 0;
          uint64_t v142 = (char **)(v141 + 1);
          if (!cstdlib_strlen(v141[1]))
          {
            __int16 v143 = Utf8_Utf8NbrOfSymbols(*v141);
            int v144 = (unsigned __int16)(v143 - 1);
            if (v143 != 1)
            {
              unsigned __int16 v145 = 0;
              do
              {
                unsigned __int16 v146 = v145;
                uint64_t UTF8Char = utf8_getUTF8Char((uint64_t)*v141, v145, __s2);
                if ((UTF8Char & 0x80000000) != 0)
                {
                  uint64_t inited = UTF8Char;
                  a3 = v470;
                  a2 = v504;
                  a5 = v461;
                  uint64_t v122 = v140;
                  goto LABEL_127;
                }
                uint64_t v89 = v513;
                if (__s2[0] == 46) {
                  break;
                }
                if (cstdlib_strlen(__s2) <= 1
                  && __s2[0] - 54 >= 0xFFFFFFFA
                  && cstdlib_strlen(*v142) <= 2)
                {
                  cstdlib_strcat(*v142, __s2);
                }
                unsigned __int16 v145 = v146 + cstdlib_strlen(__s2);
                --v144;
              }
              while (v144);
            }
          }
          if (!cstdlib_strlen(*v142)) {
            cstdlib_strcpy(*v142, "=");
          }
          a3 = v470;
          uint64_t v122 = v140;
          uint64_t v114 = v465;
        }
        *(_DWORD *)(*v126 + 32 * v127++ + 24) = 0;
      }
      while (v127 < *(unsigned __int16 *)(v89 + 8));
    }
    char v536 = 0;
    *(_DWORD *)v535 = 0;
    char v534 = 0;
    *(_DWORD *)v533 = 0;
    uint64_t v170 = heap_Calloc(*(void **)(a1 + 8), 5, 40);
    uint64_t v175 = v122 + (v490 << 6);
    *(void *)(v175 + 40) = v170;
    v455 = (uint64_t *)(v175 + 40);
    if (!v170)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v171, v172, v173, v174, v441);
      uint64_t inited = 2315264010;
LABEL_233:
      a2 = v504;
      a5 = v461;
      v187 = v455;
      goto LABEL_234;
    }
    v176 = (uint64_t *)(v486 + (v490 << 6));
    __int16 v177 = Utf8_Utf8NbrOfSymbols(*v478);
    int v178 = 0;
    LOWORD(v179) = 0;
    int __sa = 0;
    int v452 = 0;
    uint64_t v180 = 0;
    __int16 v448 = 0;
    unsigned __int16 v449 = v177 - 1;
    int v450 = (unsigned __int16)(v177 - 1);
    unsigned __int16 v442 = 5;
    while (1)
    {
      int v456 = (unsigned __int16)v179;
      uint64_t v181 = utf8_getUTF8Char(*v176, (unsigned __int16)v179, v535);
      if ((v181 & 0x80000000) != 0)
      {
        uint64_t inited = v181;
        goto LABEL_233;
      }
      if (v450 != v178 && v535[0] != 45) {
        goto LABEL_209;
      }
      v182 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)(v456 - __sa + 1));
      v187 = v455;
      uint64_t v447 = v180;
      *(void *)(*v455 + 40 * (unsigned __int16)v180) = v182;
      if (!v182) {
        goto LABEL_248;
      }
      cstdlib_strncpy(v182, (const char *)(*v176 + (unsigned __int16)__sa), (unsigned __int16)(v456 - __sa));
      uint64_t v188 = 5 * (unsigned __int16)v180;
      *(unsigned char *)(*(void *)(*v455 + 40 * (unsigned __int16)v180) + (unsigned __int16)(v456 - __sa)) = 0;
      v189 = (const char **)(*v455 + 40 * (unsigned __int16)v180);
      char v538 = 0;
      *(_DWORD *)__s2 = 0;
      v190 = v189;
      __int16 v191 = Utf8_Utf8NbrOfSymbols(*v189);
      unsigned __int16 v192 = v191 - 1;
      uint64_t v193 = (unsigned __int16)v180;
      if (v191 != 1)
      {
        uint64_t v443 = (unsigned __int16)v180;
        uint64_t v445 = 5 * (unsigned __int16)v180;
        unsigned __int16 v194 = 0;
        __int16 v195 = 0;
        __int16 v196 = 0;
        while (1)
        {
          unsigned __int16 v197 = v194;
          uint64_t v198 = utf8_getUTF8Char((uint64_t)*v190, v194, __s2);
          if ((v198 & 0x80000000) != 0) {
            goto LABEL_231;
          }
          BOOL IsChineseLetter = utf8_IsChineseLetter(__s2);
          int v200 = isPunc(__s2);
          if (!v195 && !IsChineseLetter && !v200)
          {
            unsigned __int16 v192 = 1;
LABEL_183:
            uint64_t v193 = v443;
            uint64_t v188 = v445;
            __int16 v201 = v192 - v196;
            v176 = (uint64_t *)(v486 + (v490 << 6));
            goto LABEL_184;
          }
          v196 += v200;
          unsigned __int16 v194 = v197 + cstdlib_strlen(__s2);
          if ((unsigned __int16)++v195 >= v192) {
            goto LABEL_183;
          }
        }
      }
      __int16 v201 = 0;
LABEL_184:
      *((_WORD *)v190 + 16) = v201;
      uint64_t v202 = *v455 + 8 * v188;
      v203 = *(const char **)v202;
      __int16 v446 = *(_WORD *)(v202 + 32);
      BOOL v205 = 0;
      if (*(void *)v202)
      {
        if (cstdlib_strlen(v203))
        {
          size_t v204 = cstdlib_strlen(v203);
          if (cstdlib_strstr("'\",.:?!;()<>[]#$+-=^_|", &v203[v204 - 1])
            || cstdlib_strstr("'\",.:?!;()<>[]#$+-=^_|", v203))
          {
            BOOL v205 = 1;
          }
        }
      }
      v187 = v455;
      uint64_t v206 = *v455 + 40 * v193;
      *(_DWORD *)(v206 + 16) = v205;
      v207 = *(void **)(a1 + 8);
      int v208 = cstdlib_strlen(*(const char **)v206);
      v209 = (unsigned char *)heap_Calloc(v207, 1, (v208 + 4));
      *(void *)(*v455 + 40 * v193 + 24) = v209;
      if (!v209) {
        break;
      }
      unsigned char *v209 = 0;
      uint64_t v214 = *v455;
      uint64_t v215 = *v455 + 40 * v193;
      if (*(_DWORD *)(v215 + 16) == 1)
      {
        char v538 = 0;
        *(_DWORD *)__s2 = 0;
        __int16 v216 = Utf8_Utf8NbrOfSymbols(*(const char **)v215);
        int v217 = (unsigned __int16)(v216 - 1);
        uint64_t v114 = v465;
        if (v216 != 1)
        {
          int v218 = 0;
          unsigned __int16 v219 = 0;
          v444 = (char **)(v214 + 40 * v193 + 24);
          while (1)
          {
            unsigned __int16 v220 = v219;
            uint64_t v198 = utf8_getUTF8Char(*(void *)v215, v219, __s2);
            if ((v198 & 0x80000000) != 0) {
              break;
            }
            BOOL v221 = isPunc(__s2);
            BOOL v222 = utf8_IsChineseLetter(__s2);
            if (!v218 && !v222 && !v221)
            {
              v223 = *v444;
              v224 = *(const char **)v215;
              int v225 = cstdlib_strlen(*(const char **)v215);
              cstdlib_strncpy(v223, v224, (v225 - 1));
              goto LABEL_204;
            }
            if (!v221) {
              cstdlib_strcat(*v444, __s2);
            }
            unsigned __int16 v219 = v220 + cstdlib_strlen(__s2);
            if (v217 == ++v218) {
              goto LABEL_204;
            }
          }
LABEL_231:
          uint64_t inited = v198;
          a3 = v470;
          goto LABEL_233;
        }
LABEL_204:
        v176 = (uint64_t *)(v486 + (v490 << 6));
      }
      else
      {
        cstdlib_strcpy(*(char **)(v214 + 40 * v193 + 24), *(const char **)v215);
        uint64_t v114 = v465;
      }
      a3 = v470;
      uint64_t v180 = v447;
      v448 += v446;
      if (v535[0] == 45)
      {
        uint64_t v180 = (v447 + 1);
        if (v442 <= (unsigned __int16)(v447 + 1))
        {
          v187 = v455;
          v442 += 3;
          uint64_t v226 = heap_Realloc(*(uint64_t **)(a1 + 8), *v455, 40 * v442);
          if (!v226)
          {
LABEL_248:
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v183, v184, v185, v186, v441);
            uint64_t inited = 2315264010;
            goto LABEL_250;
          }
          uint64_t *v455 = v226;
          cstdlib_memset((void *)(v226 + 40 * (unsigned __int16)(v447 + 1)), 0, 0x78uLL);
          uint64_t v114 = v465;
        }
      }
LABEL_209:
      int v179 = v456 + (unsigned __int16)cstdlib_strlen(v535);
      if (v535[0] == 45) {
        int v227 = v179;
      }
      else {
        int v227 = __sa;
      }
      int __sa = v227;
      int v178 = (unsigned __int16)++v452;
      if ((unsigned __int16)v452 > v449)
      {
        uint64_t v474 = v23;
        v228 = (_WORD *)(v122 + (v490 << 6));
        v228[26] = v448;
        v228 += 26;
        *(v228 - 1) = v442;
        v453 = v228;
        *(v228 - 2) = v180 + 1;
        __int16 v229 = Utf8_Utf8NbrOfSymbols(*v114);
        int v230 = 0;
        unsigned __int16 v231 = 0;
        unsigned __int16 v232 = 0;
        int v233 = 0;
        unsigned __int16 v234 = 0;
        unsigned __int16 v235 = v229 - 1;
        int v236 = (unsigned __int16)(v229 - 1);
        unsigned __int16 __sb = v229 - 1;
        int v457 = v236;
        while (1)
        {
          unsigned __int16 v237 = v231;
          uint64_t inited = utf8_getUTF8Char((uint64_t)*v114, v231, v533);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          if (v236 == v230 || v533[0] == 45)
          {
            v238 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)(v237 - v232 + 1));
            v187 = v455;
            *(void *)(*v455 + 40 * v234 + 8) = v238;
            if (!v238)
            {
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v239, v240, v241, v242, v441);
              uint64_t inited = 2315264010;
              a3 = v470;
              a2 = v504;
              a5 = v461;
              uint64_t v122 = v486;
              goto LABEL_253;
            }
            size_t v243 = (unsigned __int16)(v237 - v232);
            cstdlib_strncpy(v238, &(*v465)[v232], v243);
            uint64_t v114 = v465;
            *(unsigned char *)(*(void *)(*v455 + 40 * v234 + 8) + v243) = 0;
            if (v533[0] == 45) {
              ++v234;
            }
            unsigned __int16 v235 = __sb;
            int v236 = v457;
          }
          unsigned __int16 v231 = v237 + cstdlib_strlen(v533);
          if (v533[0] == 45) {
            unsigned __int16 v232 = v231;
          }
          int v230 = (unsigned __int16)++v233;
          if ((unsigned __int16)v233 > v235)
          {
            if (!cstdlib_strcmp(*v451, "normal") || !cstdlib_strcmp(*v451, "mnx")) {
              *(_WORD *)(v474 + 12) += *v453;
            }
            uint64_t v244 = v486 + (v490 << 6);
            *(_WORD *)(v244 + 8) = v469;
            *(_WORD *)(v244 + 10) = v466;
            *(_DWORD *)(v244 + 32) = v466 == v467;
            a3 = v470;
            uint64_t v23 = v474;
            ++*(_WORD *)(v474 + 8);
            a4 = v459;
            a5 = v461;
            goto LABEL_157;
          }
        }
        a3 = v470;
        a2 = v504;
        a5 = v461;
        uint64_t v122 = v486;
        v187 = v455;
LABEL_253:
        uint64_t v23 = v474;
        goto LABEL_234;
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v210, v211, v212, v213, v441);
    uint64_t inited = 2315264010;
    a3 = v470;
LABEL_250:
    a2 = v504;
    a5 = v461;
LABEL_234:
    uint64_t v245 = *v187;
    if (*v187)
    {
      uint64_t v246 = v122 + (v490 << 6);
      int v248 = *(unsigned __int16 *)(v246 + 50);
      v247 = (unsigned __int16 *)(v246 + 50);
      if (v248)
      {
        uint64_t v249 = 0;
        unint64_t v250 = 0;
        uint64_t v251 = *v187;
        do
        {
          if (v251)
          {
            if (*(void *)(v251 + v249))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v251 + v249));
              uint64_t v245 = *v187;
              *(void *)(*v187 + v249) = 0;
            }
            if (*(void *)(v245 + v249 + 8))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v245 + v249 + 8));
              uint64_t v245 = *v187;
              *(void *)(*v187 + v249 + 8) = 0;
            }
            uint64_t v251 = v245;
            if (*(void *)(v245 + v249 + 24))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v245 + v249 + 24));
              uint64_t v245 = *v187;
              *(void *)(*v187 + v249 + 24) = 0;
              uint64_t v251 = v245;
            }
          }
          ++v250;
          v249 += 40;
        }
        while (v250 < *v247);
      }
      heap_Free(*(void **)(a1 + 8), v245);
      uint64_t *v187 = 0;
LABEL_126:
      a2 = v504;
    }
LABEL_127:
    if (*v478)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)*v478);
      *v478 = 0;
    }
    uint64_t v148 = v122 + (v490 << 6);
    uint64_t v149 = *(void *)(v148 + 16);
    if (v149)
    {
      heap_Free(*(void **)(a1 + 8), v149);
      *(void *)(v148 + 16) = 0;
    }
    uint64_t v152 = *(void *)(v148 + 24);
    unsigned int v151 = (void *)(v148 + 24);
    uint64_t v150 = v152;
    if (v152)
    {
      heap_Free(*(void **)(a1 + 8), v150);
      *unsigned int v151 = 0;
    }
    uint64_t v153 = v122 + (v490 << 6);
    v155 = (uint64_t *)(v153 + 56);
    uint64_t v154 = *(void *)(v153 + 56);
    if (v154)
    {
      uint64_t v462 = a5;
      if (*(_WORD *)(v153 + 54))
      {
        uint64_t v156 = 0;
        unint64_t v157 = 0;
        uint64_t v158 = *(void *)(v153 + 56);
        do
        {
          if (v158)
          {
            if (*(void *)(v158 + v156))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v158 + v156));
              uint64_t v154 = *v155;
              *(void *)(*v155 + v156) = 0;
            }
            if (*(void *)(v154 + v156 + 16))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v154 + v156 + 16));
              uint64_t v154 = *v155;
              *(void *)(*v155 + v156 + 16) = 0;
            }
            uint64_t v158 = v154;
            if (*(void *)(v154 + v156 + 8))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v154 + v156 + 8));
              uint64_t v154 = *v155;
              *(void *)(*v155 + v156 + 8) = 0;
              uint64_t v158 = v154;
            }
          }
          ++v157;
          v156 += 32;
        }
        while (v157 < *(unsigned __int16 *)(v153 + 54));
      }
      heap_Free(*(void **)(a1 + 8), v154);
      uint64_t *v155 = 0;
      a3 = v470;
      a2 = v504;
      a5 = v462;
    }
    uint64_t v161 = *(void *)(v153 + 40);
    v160 = (uint64_t *)(v153 + 40);
    uint64_t v159 = v161;
    if (v161)
    {
      uint64_t v162 = v122 + (v490 << 6);
      int v164 = *(unsigned __int16 *)(v162 + 50);
      v163 = (unsigned __int16 *)(v162 + 50);
      if (v164)
      {
        uint64_t v165 = 0;
        unint64_t v166 = 0;
        uint64_t v167 = v159;
        do
        {
          if (v167)
          {
            if (*(void *)(v167 + v165))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v167 + v165));
              uint64_t v159 = *v160;
              *(void *)(*v160 + v165) = 0;
            }
            if (*(void *)(v159 + v165 + 8))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v159 + v165 + 8));
              uint64_t v159 = *v160;
              *(void *)(*v160 + v165 + 8) = 0;
            }
            uint64_t v167 = v159;
            if (*(void *)(v159 + v165 + 24))
            {
              heap_Free(*(void **)(a1 + 8), *(void *)(v159 + v165 + 24));
              uint64_t v159 = *v160;
              *(void *)(*v160 + v165 + 24) = 0;
              uint64_t v167 = v159;
            }
          }
          ++v166;
          v165 += 40;
        }
        while (v166 < *v163);
      }
      heap_Free(*(void **)(a1 + 8), v159);
      uint64_t *v160 = 0;
      a4 = v459;
      a3 = v470;
LABEL_157:
      a2 = v504;
    }
    else
    {
      a4 = v459;
    }
    a8 = v493;
LABEL_160:
    stat_stress_freeCandidatePhons((void *)a1, v513);
    heap_Free(*(void **)(a1 + 8), v513);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v507);
    heap_Free(*(void **)(a1 + 8), (uint64_t)v505);
    if (!v484 && v523)
    {
      heap_Free(*(void **)(a1 + 8), (uint64_t)v523);
      v523 = 0;
    }
    uint64_t v42 = v499;
    if ((inited & 0x80000000) != 0) {
      goto LABEL_259;
    }
LABEL_164:
    uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a4 + 120))(a2, a3, (unsigned __int16)v530, &v530);
    unsigned __int16 v168 = 0;
    if ((inited & 0x80000000) != 0)
    {
      v169 = 0;
      break;
    }
    unsigned __int16 v43 = v530;
    v169 = 0;
  }
  while ((_WORD)v530);
LABEL_275:
  uint64_t v256 = (uint64_t)v169;
  if (v501) {
    heap_Free(*(void **)(a1 + 8), v501);
  }
  heap_Free(*(void **)(a1 + 8), v476);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v42);
  if (v256) {
    heap_Free(*(void **)(a1 + 8), v256);
  }
  a6 = v510;
  uint64_t v254 = (uint64_t)v168;
  int v26 = v496;
  if (v254) {
LABEL_280:
  }
    heap_Free(*(void **)(a1 + 8), v254);
LABEL_281:
  if ((inited & 0x80000000) != 0)
  {
    if (v26 != 1) {
      goto LABEL_609;
    }
    v253 = v523;
    if (!v523) {
      goto LABEL_609;
    }
    goto LABEL_372;
  }
  if (!*(_WORD *)(v23 + 12)) {
    goto LABEL_609;
  }
  v531 = 0;
  v532 = 0;
  v524[4] = 0;
  *(_DWORD *)v524 = 0;
  LODWORD(v523) = 0;
  uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, char **))(a6 + 40))(a7, a8, &v523);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_609;
  }
  uint64_t v511 = a6;
  if (a11)
  {
    v257 = (unsigned __int32 *)heap_Calloc(*(void **)(a1 + 8), (*(unsigned __int16 *)(v23 + 12) + 2) * v523, 4);
    if (v257)
    {
      unsigned __int32 *v257 = 1120534528;
      v258 = &v257[v523];
      goto LABEL_291;
    }
LABEL_608:
    uint64_t inited = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v31, v32, v33, v34, v441);
    goto LABEL_609;
  }
  v257 = (unsigned __int32 *)heap_Calloc(*(void **)(a1 + 8), *(unsigned __int16 *)(v23 + 12)* (unint64_t)(unsigned __int16)(a10 + (_WORD)v523 + 14), 4);
  v258 = v257;
  if (!v257) {
    goto LABEL_608;
  }
LABEL_291:
  v454 = (char *)v257;
  uint64_t v460 = a4;
  if (*(_WORD *)(v23 + 8))
  {
    v259 = 0;
    uint64_t v494 = a8;
    while (1)
    {
      uint64_t v260 = *(void *)v23 + ((void)v259 << 6);
      v261 = *(const char **)(v260 + 24);
      uint64_t v468 = *(void *)(v260 + 40);
      uint64_t v488 = *(unsigned __int16 *)(v260 + 48);
      unsigned int v262 = *(unsigned __int16 *)(v260 + 52);
      unsigned int v263 = *(unsigned __int16 *)(v260 + 54);
      uint64_t v485 = *(void *)(v260 + 56);
      if ((!cstdlib_strcmp(v261, "normal") || !cstdlib_strcmp(v261, "mnx")) && v262 >= v263 && v488 != 0) {
        break;
      }
LABEL_300:
      if ((unint64_t)++v259 >= *(unsigned __int16 *)(v23 + 8)) {
        goto LABEL_368;
      }
    }
    uint64_t v265 = 0;
    int v497 = 0;
    uint64_t v266 = v494;
    uint64_t v267 = a7;
    uint64_t v471 = a3;
    uint64_t v475 = v23;
    uint64_t v463 = a5;
    __sc = v259;
    while (1)
    {
      uint64_t v491 = v265;
      uint64_t v268 = v468 + 40 * v265;
      v269 = *(char **)(v268 + 8);
      v508 = *(const char **)(v268 + 24);
      __int16 v270 = Utf8_Utf8NbrOfSymbols(v508);
      if (v270 != 1) {
        break;
      }
LABEL_365:
      uint64_t v265 = v491 + 1;
      a3 = v471;
      uint64_t v23 = v475;
      a5 = v463;
      v259 = __sc;
      if (v491 + 1 == v488) {
        goto LABEL_300;
      }
    }
    int v271 = 0;
    unsigned __int16 v272 = 0;
    BOOL v273 = v488 == 1;
    int v514 = (unsigned __int16)(v270 - 1);
    if (v514 == 1) {
      int v274 = 3;
    }
    else {
      int v274 = 0;
    }
    unsigned int v479 = v274;
    if ((unsigned __int16)(v270 - 1) != 1) {
      BOOL v273 = 0;
    }
    BOOL v458 = v273;
    v477 = v269;
    while (1)
    {
      unsigned __int16 v275 = v272;
      uint64_t inited = utf8_getUTF8Char((uint64_t)v508, v272, v524);
      if ((inited & 0x80000000) != 0) {
        break;
      }
      __int16 v276 = cstdlib_strlen(v524);
      if (utf8_IsChineseLetter(v524))
      {
        if (a11)
        {
          uint64_t v277 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int32 *))(v511 + 72))(v267, v266, v524, v258);
          uint64_t inited = v277;
          if (*(float *)v258 == 0.0 && v277 != 0)
          {
            v278.n128_u32[0] = *v258;
            uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned __int32 *, __n128))(v511 + 72))(v267, v266, "</s>", v258, v278);
          }
          v258 += v523;
        }
        else
        {
          int v280 = (*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int32 *))(v511 + 56))(v267, v266, v524, v258);
          LODWORD(inited) = v280;
          if (*(float *)v258 == 0.0 && v280 != 0)
          {
            v284.n128_u32[0] = *v258;
            LODWORD(inited) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, unsigned __int32 *, __n128))(v511 + 56))(v267, v266, "</s>", v258, v284);
          }
          uint64_t v502 = v485 + 32 * (unsigned __int16)v497;
          v286 = *(unsigned char **)(v502 + 8);
          unsigned int v287 = 2;
          switch(*v286)
          {
            case '1':
              unsigned int v287 = 4;
              break;
            case '2':
              break;
            case '3':
              if (v286[1] == 53) {
                unsigned int v287 = 1;
              }
              else {
                unsigned int v287 = 5;
              }
              break;
            case '5':
              if (v286[1] == 53) {
                unsigned int v287 = 0;
              }
              else {
                unsigned int v287 = 3;
              }
              break;
            default:
              unsigned int v287 = 0;
              break;
          }
          v288 = &v258[v523];
          v288[v287] = 1065353216;
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get tune %d", v281, v282, v283, (uint64_t)v524);
          if (v269)
          {
            utf8_ToLower(v269, 0, (uint64_t)&v522);
            unsigned int v292 = v522 - 99;
            if (v292 > 0x16) {
              uint64_t v293 = 0;
            }
            else {
              uint64_t v293 = word_2206E2B00[(char)v292];
            }
          }
          else
          {
            uint64_t v293 = 2;
          }
          int v294 = v514 + v271;
          v288[v293 + 6] = 1065353216;
          uint64_t v295 = (uint64_t)&v288[a10 + 6];
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get pos %d", v289, v290, v291, (uint64_t)v524);
          if (v514 + v271 == 1) {
            unsigned int v299 = 2;
          }
          else {
            unsigned int v299 = 1;
          }
          if (!v271) {
            unsigned int v299 = v479;
          }
          *(_DWORD *)(v295 + 4 * v299) = 1065353216;
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get word bmes tag %d", v296, v297, v298, (uint64_t)v524);
          if (v491)
          {
            if (v491 == v488 - 1 && v294 == 1) {
              unsigned __int16 v304 = 2;
            }
            else {
              unsigned __int16 v304 = 1;
            }
          }
          else
          {
            if (v458 && v271 == 0) {
              unsigned __int16 v304 = 3;
            }
            else {
              unsigned __int16 v304 = 0;
            }
            if (v271)
            {
              if (v294 == 1 && v488 == 1) {
                unsigned __int16 v304 = 2;
              }
              else {
                unsigned __int16 v304 = 1;
              }
            }
          }
          uint64_t inited = inited;
          v269 = v477;
          *(_DWORD *)(v295 + 16 + 4 * v304) = 1065353216;
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get pw bmes tag %d", v300, v301, v302, (uint64_t)v524);
          uint64_t v266 = v494;
          uint64_t v267 = a7;
          v258 = (unsigned __int32 *)(v295 + 32);
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"NN STRESS: %s get phrase bmes tag %c", v306, v307, v308, (uint64_t)v524);
          if (!isERphon((unsigned __int8 *)v524, *(char **)v502))
          {
            if ((int)(v263 - 1) <= (unsigned __int16)v497) {
              int v309 = v497;
            }
            else {
              int v309 = v497 + 1;
            }
            int v497 = v309;
          }
        }
      }
      unsigned __int16 v272 = v275 + v276;
      --v271;
      if (!(v514 + v271)) {
        goto LABEL_365;
      }
    }
    a3 = v471;
    uint64_t v23 = v475;
    a5 = v463;
    v253 = v454;
  }
  else
  {
LABEL_368:
    v253 = v454;
    if (a11) {
      *(_DWORD *)&v454[4 * *(unsigned __int16 *)(v23 + 12) + 4] = 1120665600;
    }
    v532 = v454;
  }
  if ((inited & 0x80000000) != 0)
  {
LABEL_372:
    v252 = *(void **)(a1 + 8);
    goto LABEL_373;
  }
  uint64_t v310 = *(unsigned __int16 *)(v23 + 12);
  if (a11)
  {
    uint64_t v24 = fi_predict(a9, (const void **)&v532, (v310 + 2), &v531, v31, v32, v33, v34);
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v472 = a3;
      v518 = v531 + 8;
      v531 += 8;
      goto LABEL_379;
    }
LABEL_415:
    uint64_t inited = v24;
    goto LABEL_609;
  }
  uint64_t v24 = fi_predict(a9, (const void **)&v532, v310, &v531, v31, v32, v33, v34);
  if ((v24 & 0x80000000) != 0) {
    goto LABEL_415;
  }
  uint64_t v472 = a3;
  v518 = v531;
LABEL_379:
  if (*(_WORD *)(v23 + 8))
  {
    uint64_t v314 = 0;
    int v315 = 0;
    while (1)
    {
      if (!cstdlib_strcmp(*(const char **)(*(void *)v23 + (v314 << 6) + 24), "normal")
        || !cstdlib_strcmp(*(const char **)(*(void *)v23 + (v314 << 6) + 24), "mnx"))
      {
        uint64_t v316 = *(void *)v23;
        if (*(unsigned __int16 *)(*(void *)v23 + (v314 << 6) + 52) > (unsigned __int16)(*(_WORD *)(*(void *)v23 + (v314 << 6) + 54) - 1)) {
          break;
        }
      }
LABEL_413:
      if (++v314 >= (unint64_t)*(unsigned __int16 *)(v23 + 8)) {
        goto LABEL_417;
      }
    }
    unint64_t v317 = 0;
    while (2)
    {
      if (*(unsigned __int16 *)(v23 + 12) <= (unsigned __int16)v315)
      {
        uint64_t v320 = a5;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 4, 0, (uint64_t)"Not Severe Error: Stress label out of range. Skip some stress tag.", v311, v312, v313, v441);
        uint64_t v318 = *(void *)(*(void *)v23 + (v314 << 6) + 56);
      }
      else
      {
        uint64_t v318 = *(void *)(v316 + (v314 << 6) + 56);
        v319 = (_DWORD *)(v318 + 32 * v317 + 24);
        uint64_t v320 = a5;
        _DWORD *v319 = **(unsigned __int8 **)&v518[8 * (unsigned __int16)v315] == 49;
      }
      v321 = *(const char **)(v318 + 32 * v317);
      unint64_t v322 = *(unsigned __int8 *)v321;
      unsigned int v323 = cstdlib_strlen(v321);
      unsigned int v324 = v323;
      if (v323 >= 2)
      {
        unsigned __int8 v325 = (v322 > 0x3E) | (0x2FFFFBFFFFFFFFFFuLL >> v322);
        if (v323 < 5 || cstdlib_strcmp(&v321[v323 - 5], "%\"~r\""))
        {
          if ((v325 & (cstdlib_strcmp(&v321[v324 - 2], "%r") == 0)) != 0) {
            goto LABEL_394;
          }
        }
        else if (v325)
        {
LABEL_394:
          int v326 = *(unsigned __int8 *)v321;
          if (v326 != 36 && v326 != 97)
          {
            unsigned __int16 v327 = 0;
            unsigned int v328 = 0;
            v524[4] = 0;
            *(_DWORD *)v524 = 0;
            do
            {
              if ((utf8_getUTF8Char(*(void *)(*(void *)v23 + (v314 << 6)), v328, v524) & 0x80000000) != 0)
              {
                a5 = v320;
                goto LABEL_417;
              }
              unsigned int v329 = utf8_GetNextUtf8Offset(*(char **)(*(void *)v23 + (v314 << 6)), v328);
              if (v329 == v328) {
                break;
              }
              unsigned int v330 = v329;
              if (utf8_IsChineseLetter(v524)) {
                ++v327;
              }
              unsigned int v328 = v330;
            }
            while ((unsigned __int16)(v317 + 1) >= v327);
            if (v524[0] == 229 && v524[1] == 132 && v524[2] == 191) {
              ++v315;
            }
          }
        }
      }
      a5 = v320;
      ++v317;
      ++v315;
      uint64_t v316 = *(void *)v23;
      if (v317 >= *(unsigned __int16 *)(*(void *)v23 + (v314 << 6) + 54)) {
        goto LABEL_413;
      }
      continue;
    }
  }
LABEL_417:
  BYTE4(v531) = 0;
  LODWORD(v531) = 0;
  v532 = 0;
  if (!a5)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"IGTree model for stress does not exist. Skip processing IGTree.", v311, v312, v313, v441);
    uint64_t v334 = v472;
    uint64_t v335 = v504;
    goto LABEL_574;
  }
  v333 = (char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(a5 + 1296) - 8);
  uint64_t v334 = v472;
  uint64_t v335 = v504;
  if (!v333)
  {
    uint64_t inited = 2315264010;
    goto LABEL_609;
  }
  v336 = (uint64_t *)v333;
  uint64_t inited = hlp_igtree_initFeatureVector(a1, v333, (unsigned __int16)(*(unsigned __int8 *)(a5 + 1296) - 1));
  if ((inited & 0x80000000) == 0 && *(_WORD *)(v23 + 8))
  {
    for (unint64_t i = 0; i < *(unsigned __int16 *)(v23 + 8); ++i)
    {
      uint64_t v338 = *(void *)v23;
      unint64_t v339 = *(void *)v23 + (i << 6);
      if (cstdlib_strcmp(*(const char **)(v339 + 24), "normal") && cstdlib_strcmp(*(const char **)(v339 + 24), "mnx")
        || ((int v341 = *(unsigned __int16 *)(v339 + 54),
             v340 = (unsigned __int16 *)(v339 + 54),
             int v342 = *(v340 - 1),
             v500 = v340 - 1,
             int v343 = v341 + 1,
             v341 != v342)
          ? (BOOL v344 = v343 == v342)
          : (BOOL v344 = 1),
            !v344))
      {
        uint64_t v335 = v504;
      }
      else
      {
        unint64_t v345 = v338 + (i << 6);
        unsigned __int16 v346 = *(_WORD *)(v345 + 48);
        uint64_t v335 = v504;
        if (v346)
        {
          unint64_t v347 = 0;
          int v512 = 0;
          v348 = (void *)(v345 + 40);
          v495 = (void *)(v345 + 56);
          uint64_t v473 = v334;
          uint64_t v464 = a5;
          uint64_t v515 = (uint64_t)v336;
          v498 = v340;
          v489 = (void *)(v345 + 40);
          v492 = (unsigned __int16 *)(v345 + 48);
          while (1)
          {
            v503 = (_WORD *)(*v348 + 40 * v347 + 32);
            if (*v503) {
              break;
            }
LABEL_561:
            if (++v347 >= v346) {
              goto LABEL_564;
            }
          }
          int v349 = 0;
          unsigned int v519 = 0;
          v506 = (uint64_t *)(*v348 + 40 * v347 + 24);
          unint64_t v509 = v347;
LABEL_433:
          uint64_t inited = utf8_getUTF8Char(*v506, v519, &v531);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          if (utf8_IsChineseLetter((const char *)&v531))
          {
            uint64_t v350 = *(void *)(a5 + 1312);
            unsigned int v351 = *(unsigned __int8 *)(a5 + 1296);
            uint64_t v352 = heap_Calloc(*(void **)(a1 + 8), 1, 2048);
            if (!v352)
            {
              uint64_t inited = 2315264010;
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v353, v354, v355, v356, v441);
              uint64_t v334 = v473;
LABEL_572:
              a5 = v464;
              v336 = (uint64_t *)v515;
              break;
            }
            v357 = (char *)v352;
            if (v351 > 1)
            {
              uint64_t v358 = 0;
              uint64_t v359 = v351 - 1;
              while (cstdlib_strcmp(*(const char **)(v350 + v358), "char0"))
              {
                v358 += 8;
                if (8 * (v351 - 1) == v358)
                {
                  uint64_t inited = 0;
                  goto LABEL_444;
                }
              }
              uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, 0, v357);
              if ((v361 & 0x80000000) != 0)
              {
LABEL_570:
                uint64_t inited = v361;
                goto LABEL_571;
              }
              uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 0, v515, v357);
              if ((inited & 0x80000000) != 0) {
                goto LABEL_571;
              }
LABEL_444:
              uint64_t v362 = 0;
              while (cstdlib_strcmp(*(const char **)(v350 + 8 * v362), "lchar"))
              {
                if (v359 == ++v362) {
                  goto LABEL_450;
                }
              }
              uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, -1, v357);
              if ((v361 & 0x80000000) != 0) {
                goto LABEL_570;
              }
              uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 1, v515, v357);
              if ((inited & 0x80000000) == 0)
              {
LABEL_450:
                uint64_t v363 = 0;
                while (cstdlib_strcmp(*(const char **)(v350 + 8 * v363), "llchar"))
                {
                  if (v359 == ++v363) {
                    goto LABEL_456;
                  }
                }
                uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, -2, v357);
                if ((v361 & 0x80000000) != 0) {
                  goto LABEL_570;
                }
                uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 2, v515, v357);
                if ((inited & 0x80000000) == 0)
                {
LABEL_456:
                  uint64_t v364 = 0;
                  while (cstdlib_strcmp(*(const char **)(v350 + 8 * v364), "l3char"))
                  {
                    if (v359 == ++v364) {
                      goto LABEL_462;
                    }
                  }
                  uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, -3, v357);
                  if ((v361 & 0x80000000) != 0) {
                    goto LABEL_570;
                  }
                  uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 3, v515, v357);
                  if ((inited & 0x80000000) == 0)
                  {
LABEL_462:
                    uint64_t v365 = 0;
                    while (cstdlib_strcmp(*(const char **)(v350 + 8 * v365), "rchar"))
                    {
                      if (v359 == ++v365) {
                        goto LABEL_468;
                      }
                    }
                    uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, 1, v357);
                    if ((v361 & 0x80000000) != 0) {
                      goto LABEL_570;
                    }
                    uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 4, v515, v357);
                    if ((inited & 0x80000000) == 0)
                    {
LABEL_468:
                      uint64_t v366 = 0;
                      while (cstdlib_strcmp(*(const char **)(v350 + 8 * v366), "rrchar"))
                      {
                        if (v359 == ++v366) {
                          goto LABEL_474;
                        }
                      }
                      uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, 2, v357);
                      if ((v361 & 0x80000000) != 0) {
                        goto LABEL_570;
                      }
                      uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 5, v515, v357);
                      if ((inited & 0x80000000) == 0)
                      {
LABEL_474:
                        uint64_t v367 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v367), "r3char"))
                        {
                          if (v359 == ++v367) {
                            goto LABEL_480;
                          }
                        }
                        uint64_t v361 = fe_stress_feat_character(a1, (uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, v519, 3, v357);
                        if ((v361 & 0x80000000) != 0) {
                          goto LABEL_570;
                        }
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 6, v515, v357);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_480:
                        uint64_t v368 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v368), "phon0"))
                        {
                          if (v359 == ++v368) {
                            goto LABEL_485;
                          }
                        }
                        v369 = (char *)fe_stress_feat_phon((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, 0);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 7, v515, v369);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_485:
                        uint64_t v370 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v370), "lphon"))
                        {
                          if (v359 == ++v370) {
                            goto LABEL_490;
                          }
                        }
                        v371 = (char *)fe_stress_feat_phon((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, -1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 8, v515, v371);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_490:
                        uint64_t v372 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v372), "rphon"))
                        {
                          if (v359 == ++v372) {
                            goto LABEL_495;
                          }
                        }
                        v373 = (char *)fe_stress_feat_phon((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, 1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 9, v515, v373);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_495:
                        uint64_t v374 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v374), "tone0"))
                        {
                          if (v359 == ++v374) {
                            goto LABEL_500;
                          }
                        }
                        v375 = (char *)fe_stress_feat_tone((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, 0);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 10, v515, v375);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_500:
                        uint64_t v376 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v376), "ltone"))
                        {
                          if (v359 == ++v376) {
                            goto LABEL_505;
                          }
                        }
                        v377 = (char *)fe_stress_feat_tone((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, -1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 11, v515, v377);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_505:
                        uint64_t v378 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v378), "rtone"))
                        {
                          if (v359 == ++v378) {
                            goto LABEL_510;
                          }
                        }
                        v379 = (char *)fe_stress_feat_tone((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v512, 1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 12, v515, v379);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_510:
                        uint64_t v380 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v380), "word0"))
                        {
                          if (v359 == ++v380) {
                            goto LABEL_515;
                          }
                        }
                        v381 = (char *)fe_stress_feat_word((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, 0);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 13, v515, v381);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_515:
                        uint64_t v382 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v382), "lword"))
                        {
                          if (v359 == ++v382) {
                            goto LABEL_520;
                          }
                        }
                        v383 = (char *)fe_stress_feat_word((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, -1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 14, v515, v383);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_520:
                        uint64_t v384 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v384), "rword"))
                        {
                          if (v359 == ++v384) {
                            goto LABEL_525;
                          }
                        }
                        v385 = (char *)fe_stress_feat_word((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, 1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 15, v515, v385);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_525:
                        uint64_t v386 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v386), "wordlen"))
                        {
                          if (v359 == ++v386) {
                            goto LABEL_533;
                          }
                        }
                        char *v357 = 0;
                        unint64_t v387 = *(void *)v23 + (i << 6);
                        if (v509 >= *(unsigned __int16 *)(v387 + 48)) {
                          cstdlib_strcpy(v357, "=");
                        }
                        else {
                          sprintf(v357, "%d", *(unsigned __int16 *)(*(void *)(v387 + 40) + 40 * v509 + 32));
                        }
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 16, v515, v357);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_533:
                        uint64_t v388 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v388), "pos0"))
                        {
                          if (v359 == ++v388) {
                            goto LABEL_538;
                          }
                        }
                        v389 = (char *)fe_stress_feat_pos((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, 0);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 17, v515, v389);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_538:
                        uint64_t v390 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v390), "lpos"))
                        {
                          if (v359 == ++v390) {
                            goto LABEL_543;
                          }
                        }
                        v391 = (char *)fe_stress_feat_pos((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, -1);
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v351, 18, v515, v391);
                        if ((inited & 0x80000000) != 0) {
                          goto LABEL_571;
                        }
LABEL_543:
                        uint64_t v392 = 0;
                        while (cstdlib_strcmp(*(const char **)(v350 + 8 * v392), "rpos"))
                        {
                          if (v359 == ++v392)
                          {
                            v336 = (uint64_t *)v515;
                            goto LABEL_548;
                          }
                        }
                        v393 = (char *)fe_stress_feat_pos((uint64_t *)v23, (unsigned __int16)i, (unsigned __int16)v509, 1);
                        unsigned int v394 = v351;
                        v336 = (uint64_t *)v515;
                        uint64_t inited = fe_stress_igtr_setFeature(a1, v350, v394, 19, v515, v393);
LABEL_548:
                        heap_Free(*(void **)(a1 + 8), (uint64_t)v357);
                        uint64_t v334 = v473;
                        uint64_t v335 = v504;
                        a5 = v464;
                        v360 = v498;
                        if ((inited & 0x80000000) != 0) {
                          break;
                        }
                        goto LABEL_549;
                      }
                    }
                  }
                }
              }
LABEL_571:
              heap_Free(*(void **)(a1 + 8), (uint64_t)v357);
              uint64_t v334 = v473;
              uint64_t v335 = v504;
              goto LABEL_572;
            }
            heap_Free(*(void **)(a1 + 8), v352);
            uint64_t inited = 0;
            uint64_t v334 = v473;
            a5 = v464;
            v336 = (uint64_t *)v515;
            v360 = v498;
LABEL_549:
            igtree_Process(a5, (uint64_t)v336, &v532);
            if (cstdlib_strcmp(v532, "NOMATCH"))
            {
              unsigned int v395 = cstdlib_atoi((unsigned __int8 *)v532);
              if (v395 <= 1) {
                *(_DWORD *)(*v495 + 32 * (unsigned __int16)v512 + 24) = v395;
              }
            }
            unsigned int v519 = utf8_GetNextUtf8Offset((char *)*v506, v519);
            unsigned int v396 = *v360;
            if (v396 + 1 == *v500)
            {
              if (!isERphon((unsigned __int8 *)&v531, *(char **)(*v495 + 32 * (unsigned __int16)v512)))
              {
                unsigned int v396 = *v360;
                goto LABEL_555;
              }
            }
            else
            {
LABEL_555:
              if (v396 <= (unsigned __int16)(v512 + 1)) {
                int v397 = v512;
              }
              else {
                int v397 = v512 + 1;
              }
              int v512 = v397;
            }
          }
          if (++v349 >= (unsigned __int16)*v503)
          {
            v348 = v489;
            unsigned __int16 v346 = *v492;
            unint64_t v347 = v509;
            goto LABEL_561;
          }
          goto LABEL_433;
        }
      }
LABEL_564:
      ;
    }
  }
  hlp_igtree_freeFeatureVector(a1, v336, (unsigned __int16)(*(unsigned __int8 *)(a5 + 1296) - 1));
  heap_Free(*(void **)(a1 + 8), (uint64_t)v336);
  if ((inited & 0x80000000) == 0)
  {
LABEL_574:
    LOWORD(v523) = 0;
    LOWORD(v522) = 0;
    __int16 v521 = 0;
    *(_WORD *)__s2 = 0;
    v531 = 0;
    v532 = 0;
    v398 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 2048);
    if (!v398) {
      goto LABEL_608;
    }
    v399 = v398;
    *(_DWORD *)v524 = 0;
    cstdlib_strcpy(v398, "");
    uint64_t v400 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **))(v460 + 104))(v335, v334, 1, 0, &v523);
    if ((v400 & 0x80000000) != 0)
    {
LABEL_647:
      uint64_t inited = v400;
    }
    else
    {
      uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **))(v460 + 104))(v335, v334, 2, (unsigned __int16)v523, &v522);
      if ((inited & 0x80000000) == 0)
      {
        unsigned __int16 v401 = (unsigned __int16)v522;
        if ((_WORD)v522)
        {
          int v402 = 0;
          unsigned __int16 v516 = 2048;
          while (1)
          {
            uint64_t v400 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, __int16 *))(v460 + 168))(v504, v334, v401, 0, 1, v524, &v521);
            if ((v400 & 0x80000000) != 0) {
              goto LABEL_647;
            }
            if (*(_DWORD *)v524 <= 0xAu && ((1 << v524[0]) & 0x610) != 0) {
              break;
            }
LABEL_605:
            uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, void, char **))(v460 + 120))(v504, v334, (unsigned __int16)v522, &v522);
            if ((inited & 0x80000000) == 0)
            {
              unsigned __int16 v401 = (unsigned __int16)v522;
              if ((_WORD)v522) {
                continue;
              }
            }
            goto LABEL_648;
          }
          int v520 = v402;
          uint64_t v400 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(v460 + 176))(v504, v334, (unsigned __int16)v522, 9, &v532, &v521);
          if ((v400 & 0x80000000) != 0) {
            goto LABEL_647;
          }
          uint64_t v400 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(v460 + 176))(v504, v334, (unsigned __int16)v522, 3, &v531, &v521);
          if ((v400 & 0x80000000) != 0) {
            goto LABEL_647;
          }
          if (cstdlib_strcmp(v532, "normal") && cstdlib_strcmp(v532, "mnx"))
          {
LABEL_603:
            int v402 = v520;
          }
          else if (*(unsigned __int16 *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v402 << 6) + 54) <= *(unsigned __int16 *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v402 << 6) + 52))
          {
            unsigned __int16 v404 = cstdlib_strlen(v531);
            int v405 = *(unsigned __int16 *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v402 << 6) + 54);
            if (v405 + v404 >= v516)
            {
              unsigned __int16 v516 = cstdlib_strlen(v531)
                   + *(_WORD *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v402 << 6) + 54)
                   + 1;
              uint64_t v406 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v399, v516);
              if (!v406)
              {
                uint64_t inited = 2315264010;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v407, v408, v409, v410, v441);
                goto LABEL_648;
              }
              int v405 = *(unsigned __int16 *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v402 << 6) + 54);
              v399 = (char *)v406;
            }
            if (v405)
            {
              uint64_t v411 = 0;
              unint64_t v412 = 0;
              do
              {
                if (v411)
                {
                  cstdlib_strcat(v399, ".");
                }
                else if (cstdlib_strstr(v531, "[SVOX]"))
                {
                  cstdlib_strcpy(v399, "[SVOX]");
                }
                uint64_t v413 = *(void *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v520 << 6) + 56);
                if (*(_DWORD *)(v413 + v411 + 24) == 1)
                {
                  cstdlib_strcat(v399, "'");
                  uint64_t v413 = *(void *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v520 << 6) + 56);
                }
                cstdlib_strcat(v399, *(const char **)(v413 + v411));
                ++v412;
                v411 += 32;
              }
              while (v412 < *(unsigned __int16 *)(*(void *)v23 + ((unint64_t)(unsigned __int16)v520 << 6) + 54));
            }
            v414 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(v460 + 160);
            uint64_t v415 = (unsigned __int16)v522;
            __int16 v416 = cstdlib_strlen(v399);
            uint64_t v400 = v414(v504, v334, v415, 3, (unsigned __int16)(v416 + 1), v399, __s2);
            if ((v400 & 0x80000000) != 0) {
              goto LABEL_647;
            }
            char *v399 = 0;
            goto LABEL_603;
          }
          ++v402;
          goto LABEL_605;
        }
      }
    }
LABEL_648:
    v252 = *(void **)(a1 + 8);
    v253 = v399;
    goto LABEL_373;
  }
LABEL_609:
  if (*(_WORD *)(v23 + 8))
  {
    unint64_t v417 = 0;
    do
    {
      uint64_t v418 = *(void *)v23;
      if (*(void *)v23)
      {
        v419 = (uint64_t *)(v418 + (v417 << 6));
        if (*v419)
        {
          heap_Free(*(void **)(a1 + 8), *v419);
          uint64_t *v419 = 0;
        }
        unint64_t v420 = v418 + (v417 << 6);
        uint64_t v421 = *(void *)(v420 + 16);
        if (v421)
        {
          heap_Free(*(void **)(a1 + 8), v421);
          *(void *)(v420 + 16) = 0;
        }
        uint64_t v424 = *(void *)(v420 + 24);
        v423 = (void *)(v420 + 24);
        uint64_t v422 = v424;
        if (v424)
        {
          heap_Free(*(void **)(a1 + 8), v422);
          void *v423 = 0;
        }
        unint64_t v425 = v418 + (v417 << 6);
        v427 = (uint64_t *)(v425 + 56);
        uint64_t v426 = *(void *)(v425 + 56);
        if (v426)
        {
          if (*(_WORD *)(v425 + 54))
          {
            uint64_t v428 = 0;
            unint64_t v429 = 0;
            uint64_t v430 = *(void *)(v425 + 56);
            do
            {
              if (v430)
              {
                if (*(void *)(v430 + v428))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v430 + v428));
                  uint64_t v426 = *v427;
                  *(void *)(*v427 + v428) = 0;
                }
                if (*(void *)(v426 + v428 + 16))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v426 + v428 + 16));
                  uint64_t v426 = *v427;
                  *(void *)(*v427 + v428 + 16) = 0;
                }
                uint64_t v430 = v426;
                if (*(void *)(v426 + v428 + 8))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v426 + v428 + 8));
                  uint64_t v426 = *v427;
                  *(void *)(*v427 + v428 + 8) = 0;
                  uint64_t v430 = v426;
                }
              }
              ++v429;
              v428 += 32;
            }
            while (v429 < *(unsigned __int16 *)(v425 + 54));
          }
          heap_Free(*(void **)(a1 + 8), v426);
          uint64_t *v427 = 0;
        }
        uint64_t v433 = *(void *)(v425 + 40);
        v432 = (uint64_t *)(v425 + 40);
        uint64_t v431 = v433;
        if (v433)
        {
          unint64_t v434 = v418 + (v417 << 6);
          int v436 = *(unsigned __int16 *)(v434 + 50);
          v435 = (unsigned __int16 *)(v434 + 50);
          if (v436)
          {
            uint64_t v437 = 0;
            unint64_t v438 = 0;
            uint64_t v439 = v431;
            do
            {
              if (v439)
              {
                if (*(void *)(v439 + v437))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v439 + v437));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v437) = 0;
                }
                if (*(void *)(v431 + v437 + 8))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v431 + v437 + 8));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v437 + 8) = 0;
                }
                uint64_t v439 = v431;
                if (*(void *)(v431 + v437 + 24))
                {
                  heap_Free(*(void **)(a1 + 8), *(void *)(v431 + v437 + 24));
                  uint64_t v431 = *v432;
                  *(void *)(*v432 + v437 + 24) = 0;
                  uint64_t v439 = v431;
                }
              }
              ++v438;
              v437 += 40;
            }
            while (v438 < *v435);
          }
          heap_Free(*(void **)(a1 + 8), v431);
          uint64_t *v432 = 0;
        }
      }
      ++v417;
    }
    while (v417 < *(unsigned __int16 *)(v23 + 8));
  }
  if (*(void *)v23)
  {
    heap_Free(*(void **)(a1 + 8), *(void *)v23);
    *(void *)uint64_t v23 = 0;
  }
  cstdlib_memset((void *)v23, 0, 0x10uLL);
  heap_Free(*(void **)(a1 + 8), v23);
  return inited;
}

void *stat_stress_freeCandidatePhons(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v4 = result;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if (*(_WORD *)(a2 + 8))
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = v3;
      do
      {
        if (v8)
        {
          if (*(void *)(v8 + v6))
          {
            heap_Free((void *)v4[1], *(void *)(v8 + v6));
            uint64_t v3 = *(void *)a2;
            *(void *)(v3 + v6) = 0;
            unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
            uint64_t v8 = v3;
          }
        }
        ++v7;
        v6 += 16;
      }
      while (v7 < v5);
    }
    uint64_t result = heap_Free((void *)v4[1], v3);
    *(void *)a2 = 0;
  }
  return result;
}

BOOL isPunc(const char *a1)
{
  if (cstdlib_strlen(a1) > 1) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)a1;
  BOOL result = 1;
  if ((v3 - 33) > 0x3E || ((1 << (v3 - 33)) & 0x740000007E003FCFLL) == 0) {
    return v3 == 124;
  }
  return result;
}

BOOL isERphon(unsigned __int8 *a1, char *__s)
{
  unsigned int v4 = cstdlib_strlen(__s);
  unsigned int v5 = v4;
  if (v4 < 2 || (v4 < 5 || cstdlib_strcmp(&__s[v4 - 5], "%\"~r\"")) && cstdlib_strcmp(&__s[v5 - 2], "%r"))
  {
    BOOL v6 = 0;
  }
  else
  {
    int v7 = *__s;
    BOOL v6 = v7 != 97 && v7 != 36;
  }
  __int16 v10 = 0;
  utf8_Utf8CharTo16bit(a1, (uint64_t)&v10);
  return v10 != 20799 && v6;
}

uint64_t fe_stress_igtr_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  uint64_t v8 = g_featureNames_1[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_stress_feat_character(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, char *a7)
{
  uint64_t v11 = a3;
  uint64_t v48 = a4;
  int v12 = cstdlib_strlen(*(const char **)(*(void *)(*a2 + ((unint64_t)a3 << 6) + 40) + 40 * a4));
  if (!a3)
  {
    int v14 = 0;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = *a2;
  do
  {
    if (*(_WORD *)(v15 + (v13 << 6) + 48))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        v14 += cstdlib_strlen(*(const char **)(*(void *)(v15 + (v13 << 6) + 40) + v16));
        ++v17;
        uint64_t v15 = *a2;
        v16 += 40;
      }
      while (v17 < *(unsigned __int16 *)(*a2 + (v13 << 6) + 48));
    }
    ++v13;
  }
  while (v13 != v11);
  if (a4)
  {
LABEL_10:
    uint64_t v18 = 0;
    do
    {
      v14 += cstdlib_strlen(*(const char **)(*(void *)(*a2 + (v11 << 6) + 40) + v18));
      v18 += 40;
    }
    while (40 * v48 != v18);
  }
LABEL_12:
  unsigned __int16 v19 = a3 + 1;
  unsigned int v20 = *((unsigned __int16 *)a2 + 4);
  uint64_t v21 = *a2;
  if (v20 <= (unsigned __int16)(a3 + 1))
  {
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    unint64_t v23 = v19;
    do
    {
      if (*(_WORD *)(v21 + (v23 << 6) + 48))
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          v22 += cstdlib_strlen(*(const char **)(*(void *)(v21 + (v23 << 6) + 40) + v24));
          ++v25;
          uint64_t v21 = *a2;
          v24 += 40;
        }
        while (v25 < *(unsigned __int16 *)(*a2 + (v23 << 6) + 48));
        LOWORD(v20) = *((_WORD *)a2 + 4);
      }
      ++v23;
    }
    while (v23 < (unsigned __int16)v20);
  }
  if (*(unsigned __int16 *)(v21 + (v11 << 6) + 48) > (unsigned __int16)(a4 + 1))
  {
    unint64_t v26 = (unsigned __int16)(a4 + 1);
    uint64_t v27 = 40 * v26;
    do
    {
      v22 += cstdlib_strlen(*(const char **)(*(void *)(v21 + (v11 << 6) + 40) + v27));
      ++v26;
      uint64_t v21 = *a2;
      v27 += 40;
    }
    while (v26 < *(unsigned __int16 *)(*a2 + (v11 << 6) + 48));
  }
  uint64_t v28 = heap_Calloc(*(void **)(a1 + 8), 1, (v12 + v14 + v22 + 1));
  if (!v28)
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v45);
    return 2315264010;
  }
  uint64_t v33 = (char *)v28;
  unsigned int v34 = *((unsigned __int16 *)a2 + 4);
  uint64_t v35 = *a2;
  if (*((_WORD *)a2 + 4))
  {
    unint64_t v36 = 0;
    do
    {
      if (*(_WORD *)(v35 + (v36 << 6) + 48))
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        do
        {
          cstdlib_strcat(v33, *(const char **)(*(void *)(v35 + (v36 << 6) + 40) + v37));
          ++v38;
          uint64_t v35 = *a2;
          v37 += 40;
        }
        while (v38 < *(unsigned __int16 *)(*a2 + (v36 << 6) + 48));
        unsigned int v34 = *((unsigned __int16 *)a2 + 4);
      }
      ++v36;
    }
    while (v36 < v34);
  }
  uint64_t v39 = v35 + (v11 << 6);
  if (*(unsigned __int16 *)(v39 + 48) <= a4
    || cstdlib_strlen(*(const char **)(*(void *)(v39 + 40) + 40 * v48)) <= a5)
  {
    goto LABEL_45;
  }
  unsigned int NextUtf8Offset = v14 + a5;
  if (a6 < 0)
  {
    if (!NextUtf8Offset) {
      goto LABEL_45;
    }
    do
    {
      unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v33, NextUtf8Offset);
      unsigned int NextUtf8Offset = PreviousUtf8Offset;
      BOOL v44 = (unsigned __int16)~(_WORD)a6 == 0;
      LOWORD(a6) = a6 + 1;
    }
    while (!v44 && PreviousUtf8Offset);
    if ((_WORD)a6) {
      goto LABEL_45;
    }
  }
  else if (a6)
  {
    while (NextUtf8Offset != cstdlib_strlen(v33))
    {
      unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(v33, NextUtf8Offset);
      int v41 = (__int16)a6--;
      if (v41 <= 1) {
        goto LABEL_44;
      }
    }
    goto LABEL_45;
  }
LABEL_44:
  if ((utf8_getUTF8Char((uint64_t)v33, NextUtf8Offset, a7) & 0x80000000) != 0) {
LABEL_45:
  }
    cstdlib_strcpy(a7, "=");
  heap_Free(*(void **)(a1 + 8), (uint64_t)v33);
  return 0;
}

uint64_t fe_stress_igtr_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, char *a6)
{
  unsigned __int16 v13 = -1;
  if (!fe_stress_igtr_isFeatureRequired(a2, a3, a4, &v13)) {
    return 0;
  }
  if (!cstdlib_strcmp(a6, ""))
  {
    cstdlib_strcpy(*(char **)(a5 + 8 * v13), "=");
    return 0;
  }
  size_t v9 = cstdlib_strlen(a6);
  uint64_t v10 = v13;
  if (v9 < 0x41)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = hlp_resizeFeature(a1, (uint64_t *)(a5 + 8 * v13), a6);
    if ((v11 & 0x80000000) != 0) {
      return v11;
    }
  }
  cstdlib_strcpy(*(char **)(a5 + 8 * v10), a6);
  return v11;
}

const char *fe_stress_feat_phon(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 54);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 54);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 10);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 54)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 56) + 32 * v5);
  }
}

const char *fe_stress_feat_tone(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 54);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 54);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 10);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 54)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 56) + 32 * v5 + 8);
  }
}

const char *fe_stress_feat_word(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 48);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 48);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 16);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  if (v5 >= *(unsigned __int16 *)(v9 + 48)) {
    return "=";
  }
  else {
    return *(const char **)(*(void *)(v9 + 40) + 40 * v5 + 24);
  }
}

const char *fe_stress_feat_pos(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *a1;
  unsigned int v5 = a4 + a3;
  signed int v6 = *(unsigned __int16 *)(*a1 + ((unint64_t)a2 << 6) + 48);
  if (a4 + a3 >= v6)
  {
    while (*((unsigned __int16 *)a1 + 4) - 1 > (unsigned __int16)a2)
    {
      a4 -= v6;
      LOWORD(a2) = a2 + 1;
      unsigned int v5 = a3 + (__int16)a4;
      signed int v6 = *(unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) + 48);
      if ((int)v5 < v6) {
        goto LABEL_6;
      }
    }
    unsigned int v5 = a3 + (__int16)a4;
  }
LABEL_6:
  if ((_WORD)a2 && (v5 & 0x80000000) != 0)
  {
    a2 = (unsigned __int16)a2;
    uint64_t v7 = (unsigned __int16 *)(v4 + ((unint64_t)(unsigned __int16)a2 << 6) - 16);
    do
    {
      int v8 = *v7;
      v7 -= 32;
      a4 += v8;
      unsigned int v5 = a3 + (__int16)a4;
      --a2;
    }
    while (a2 && (v5 & 0x80000000) != 0);
  }
  if ((v5 & 0x80000000) != 0) {
    return "=";
  }
  uint64_t v9 = v4 + ((unint64_t)(unsigned __int16)a2 << 6);
  BOOL result = "=";
  if (v5 < *(unsigned __int16 *)(v9 + 48))
  {
    uint64_t v11 = *(void *)(*(void *)(v9 + 40) + 40 * v5 + 8);
    if (v11) {
      return (const char *)v11;
    }
  }
  return result;
}

uint64_t heapAdjustDownNN(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (2 * a2) | 1;
  if (v3 < a3)
  {
    uint64_t v4 = *(void *)(result + 8 * a2);
    uint64_t v5 = a2;
    do
    {
      unsigned int v6 = (unsigned __int16)v3;
      if ((unsigned __int16)v3 < a3 - 1)
      {
        if (*(__int16 *)(*(void *)(result + 8 * (unsigned __int16)v3) + 2) < *(__int16 *)(*(void *)(result + 8 * ((unsigned __int16)v3 + 1))
                                                                                               + 2))
          LOWORD(v3) = v3 + 1;
        unsigned int v6 = (unsigned __int16)v3;
      }
      uint64_t v7 = *(void *)(result + 8 * v6);
      if (*(__int16 *)(*(void *)(result + 8 * v5) + 2) >= *(__int16 *)(v7 + 2)) {
        break;
      }
      *(void *)(result + 8 * v5) = v7;
      *(void *)(result + 8 * v6) = v4;
      uint64_t v5 = (unsigned __int16)v3;
      unsigned int v3 = (2 * (unsigned __int16)v3) | 1;
    }
    while (v3 < a3);
  }
  return result;
}

uint64_t heapPopNN(uint64_t **a1)
{
  uint64_t v1 = *((unsigned __int16 *)a1 + 4);
  if (!*((_WORD *)a1 + 4)) {
    return 0;
  }
  if (v1 == 2)
  {
    uint64_t result = **a1;
    **a1 = (*a1)[1];
    *((_WORD *)a1 + 4) = 1;
  }
  else if (v1 == 1)
  {
    *((_WORD *)a1 + 4) = 0;
    return **a1;
  }
  else
  {
    uint64_t v4 = **a1;
    **a1 = (*a1)[(v1 - 1)];
    (*a1)[v1 - 1] = v4;
    heapAdjustDownNN((uint64_t)*a1, 0, (unsigned __int16)(v1 - 1));
    unsigned __int16 v5 = *((_WORD *)a1 + 4) - 1;
    *((_WORD *)a1 + 4) = v5;
    return (*a1)[v5];
  }
  return result;
}

uint64_t heapAddNN(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(result + 8);
  *(void *)(*(void *)result + 8 * *(unsigned __int16 *)(result + 8)) = a2;
  *(_WORD *)(result + 8) = v2 + 1;
  if (v2) {
    BOOL v3 = v2 == 0xFFFF;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    int v5 = (unsigned __int16)(v2 + 1) >> 1;
    do
    {
      unsigned int v6 = (unsigned __int16)v5--;
      uint64_t result = heapAdjustDownNN(*(void *)v4, (unsigned __int16)v5, *(unsigned __int16 *)(v4 + 8));
    }
    while (v6 > 1);
  }
  return result;
}

uint64_t astar_searchNN(uint64_t a1, uint64_t a2, __int16 a3, int a4, unsigned __int16 *a5, uint64_t *a6)
{
  v44[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 8);
  unsigned __int16 v12 = a5[1] + 2;
  if (a5[1] == 0xFFFE)
  {
    uint64_t v17 = 16;
  }
  else
  {
    __int16 v13 = 2;
    unsigned __int16 v14 = 1;
    do
    {
      unsigned int v15 = v12;
      if (v12) {
        __int16 v16 = v13;
      }
      else {
        __int16 v16 = 1;
      }
      v14 *= v16;
      v12 >>= 1;
      v13 *= v13;
    }
    while (v15 > 1);
    uint64_t v17 = 16 * v14;
  }
  uint64_t v18 = 2315264010;
  uint64_t v19 = heap_Alloc(v11, v17);
  if (v19)
  {
    uint64_t v20 = v19;
    unsigned __int16 v21 = a5[1] + 2;
    if (a5[1] == 0xFFFE)
    {
      uint64_t v26 = 8;
    }
    else
    {
      __int16 v22 = 2;
      unsigned __int16 v23 = 1;
      do
      {
        unsigned int v24 = v21;
        if (v21) {
          __int16 v25 = v22;
        }
        else {
          __int16 v25 = 1;
        }
        v23 *= v25;
        v21 >>= 1;
        v22 *= v22;
      }
      while (v24 > 1);
      uint64_t v26 = 8 * v23;
    }
    uint64_t v27 = (uint64_t *)heap_Alloc(*(void *)(a1 + 8), v26);
    uint64_t v42 = v27;
    if (!v27) {
      goto LABEL_36;
    }
    uint64_t v28 = 0;
    *(_DWORD *)uint64_t v20 = 0xFFFF;
    uint64_t v43 = 0;
    *(_WORD *)(v20 + 4) = a3 - 1;
    *(_WORD *)(v20 + 6) = 0;
    *(_WORD *)(v20 + 12) = 0;
    *(_WORD *)(v20 + 14) = *a5;
    *(_DWORD *)(v20 + 8) = 0;
    v44[0] = 0x100000000;
    *uint64_t v27 = v20;
    unsigned int v29 = 1;
    LOWORD(v43) = 1;
    do
    {
      uint64_t v30 = heapPopNN(&v42);
      uint64_t v31 = v30;
      if (*(__int16 *)(v30 + 4) == a4 && (!v28 || *(__int16 *)(v30 + 2) > *(__int16 *)(v28 + 2))) {
        uint64_t v28 = v30;
      }
      uint64_t v40 = v28;
      uint64_t v32 = 0;
      char v33 = 1;
      do
      {
        char v34 = v33;
        if (generateNewStateNN(a1, v31, v20 + 16 * v29, *((_DWORD *)v44 + v32), a2, a4, a5, a6))
        {
          *(_WORD *)(v20 + 16 * v29 + 6) = v29;
          heapAddNN((uint64_t)&v42, v20 + 16 * v29++);
        }
        char v33 = 0;
        uint64_t v32 = 1;
      }
      while ((v34 & 1) != 0);
      uint64_t v28 = v40;
    }
    while ((_WORD)v43);
    if (v40 && *(__int16 *)(v40 + 6) >= 1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v40 + 6);
      do
      {
        unint64_t v36 = (__int16 *)(v20 + 16 * v35);
        if (!*((_DWORD *)v36 + 2)) {
          *(unsigned char *)(*(void *)(a2 + 1064) + 184 * v36[2] + 76) = 4;
        }
        int v37 = *v36;
        uint64_t v35 = (unsigned __int16)*v36;
      }
      while (v37 > 0);
    }
    unint64_t v38 = v42;
    heap_Free(*(void **)(a1 + 8), v20);
    uint64_t v18 = 0;
    uint64_t v20 = (uint64_t)v38;
    if (v38) {
LABEL_36:
    }
      heap_Free(*(void **)(a1 + 8), v20);
  }
  return v18;
}

uint64_t ipowNN(__int16 a1, unsigned int a2)
{
  unsigned __int16 v2 = 1;
  if (a2)
  {
    do
    {
      if (a2) {
        __int16 v3 = a1;
      }
      else {
        __int16 v3 = 1;
      }
      v2 *= v3;
      a1 *= a1;
      BOOL v4 = a2 > 1;
      a2 >>= 1;
    }
    while (v4);
  }
  return v2;
}

BOOL isTerminateStateNN(uint64_t a1, int a2)
{
  return *(__int16 *)(a1 + 4) == a2;
}

_WORD *generateNewStateNN(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, unsigned __int16 *a7, uint64_t *a8)
{
  *(_WORD *)a3 = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a3 + 8) = a4;
  __int16 v8 = *(_WORD *)(a2 + 4) + 1;
  *(_WORD *)(a3 + 4) = v8;
  if (a6 >= v8)
  {
    uint64_t v9 = (_WORD *)a3;
    int v16 = 0;
    uint64_t v17 = *(void *)(a5 + 1064);
    do
    {
      uint64_t v18 = *(const char **)(v17 + 184 * v8 + 56);
      __int16 v19 = cstdlib_strlen(v18);
      v16 += Utf8_LengthInUtf8chars((unint64_t)v18, v19);
      uint64_t v17 = *(void *)(a5 + 1064);
      int v20 = (__int16)v9[2];
      if (*(unsigned char *)(v17 + 184 * (__int16)v9[2] + 76) == 3) {
        break;
      }
      __int16 v8 = v20 + 1;
      v9[2] = v20 + 1;
      int v20 = (__int16)(v20 + 1);
    }
    while (v20 <= a6);
    if (v20 > a6) {
      v9[2] = a6;
    }
    v9[7] = *(_WORD *)(a2 + 14) - v16;
    __int16 v21 = *(_WORD *)(a2 + 2);
    v9[1] = calculateScoreNN(a1, a4, (uint64_t)v9, (unsigned __int16)(*(_WORD *)(a2 + 12) + v16), *a7, *(_DWORD *)(a2 + 8), a8, a5)+ v21;
    if (a4)
    {
      if (a4 != 1) {
        return v9;
      }
      __int16 v22 = *(_WORD *)(a2 + 12) + v16;
    }
    else
    {
      __int16 v22 = 0;
    }
    v9[6] = v22;
    return v9;
  }
  return 0;
}

uint64_t calculateScoreNN(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t *a7, uint64_t a8)
{
  if (a2 == 1 && a4 < 6) {
    __int16 v10 = 5;
  }
  else {
    __int16 v10 = 0;
  }
  if (a2 == 0 && a4 > 7) {
    v10 += 5;
  }
  unsigned int v11 = *(unsigned __int16 *)(a3 + 14);
  if (a2 == 1 && v11 < 6) {
    v10 += 10;
  }
  if (a2 == 0 && 1000 * v11 / a5 - 400 < 0xC9) {
    __int16 v12 = v10 + 5;
  }
  else {
    __int16 v12 = v10;
  }
  if (a2 == 1 && applyRulesNN(a1, a8, *(unsigned __int16 *)(a3 + 4), a7) == 1) {
    v12 += 20;
  }
  if (a6 | a2) {
    return v12;
  }
  else {
    return (__int16)(v12 - 10);
  }
}

uint64_t matchPANDPCONTEXT_TRuleNN(_WORD *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, int *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  int v35 = a7;
  __int16 v8 = a5;
  *a5 = 0;
  *(unsigned int *)((char *)a4 + 6) = 0;
  if (!*((_WORD *)a3 + 4))
  {
    int v30 = 1;
    goto LABEL_50;
  }
  __int16 v10 = a3;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = *v10;
    int v15 = *((unsigned __int16 *)a4 + 2);
    if (a1[4]) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           regex %d", (uint64_t)a6, a7, a8, *(unsigned __int16 *)(v14 + v12 + 2));
    }
    unsigned int v16 = *(unsigned __int8 *)(v14 + v12 + 4);
    if (*(unsigned char *)(v14 + v12 + 4))
    {
      if ((v16 & 4) != 0)
      {
        if (v35 == 2)
        {
          ++*((_WORD *)a4 + 4);
        }
        else if (v35 == 1)
        {
          ++*((_WORD *)a4 + 3);
        }
        if (a1[4]) {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           DIRECTIVE_MOVE2NEXT - window increased (ruleDef->left_window=%d ruleDef->right_window=%d)", (uint64_t)a6, a7, a8, *((unsigned __int16 *)a4 + 3));
        }
        goto LABEL_39;
      }
      int v17 = (v16 >> 1) & 1;
      int v18 = (v16 >> 3) & 1;
      int v19 = v16 & 1;
      int v20 = (v16 >> 4) & 1;
    }
    else
    {
      int v19 = 0;
      int v17 = 0;
      int v18 = 0;
      int v20 = 0;
    }
    if ((unsigned __int16)a1[4] >= 2u) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d bHasComma=%d", (uint64_t)a6, a7, a8, (uint64_t)DOMAIN2STRING_0[*a4]);
    }
    if (v17)
    {
      unsigned int v21 = *((unsigned __int16 *)a4 + 2);
      uint64_t v22 = *(void *)(a2 + 1064);
      if (a1[4])
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bHasComma = %d", (uint64_t)a6, a7, a8, *((unsigned __int16 *)a4 + 2));
        unsigned int v21 = *((unsigned __int16 *)a4 + 2);
        uint64_t v22 = *(void *)(a2 + 1064);
      }
      BOOL v25 = v19 == (*(_DWORD *)(v22 + 184 * v21 + 100) == 1);
      __int16 v10 = a3;
      if (v25)
      {
LABEL_48:
        int v30 = 0;
        goto LABEL_49;
      }
      goto LABEL_39;
    }
    if (v18)
    {
      unsigned int v23 = *((unsigned __int16 *)a4 + 2);
      uint64_t v24 = *(void *)(a2 + 1064);
      if (a1[4])
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsLastInPhr = %d", (uint64_t)a6, a7, a8, *((unsigned __int16 *)a4 + 2));
        unsigned int v23 = *((unsigned __int16 *)a4 + 2);
        uint64_t v24 = *(void *)(a2 + 1064);
      }
      int v28 = *(_DWORD *)(v24 + 184 * v23 + 140);
      goto LABEL_38;
    }
    if (v20)
    {
      unsigned int v26 = *((unsigned __int16 *)a4 + 2);
      uint64_t v27 = *(void *)(a2 + 1064);
      if (a1[4])
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           pSent->words[%d].bIsFirstInPhr = %d", (uint64_t)a6, a7, a8, *((unsigned __int16 *)a4 + 2));
        unsigned int v26 = *((unsigned __int16 *)a4 + 2);
        uint64_t v27 = *(void *)(a2 + 1064);
      }
      int v28 = *(_DWORD *)(v27 + 184 * v26 + 136);
LABEL_38:
      char v29 = v19 ^ (v28 == 1);
      __int16 v10 = a3;
      if ((v29 & 1) == 0) {
        goto LABEL_48;
      }
      goto LABEL_39;
    }
    if (*a4 - 1 <= 2 && v35)
    {
      if (v35 == 2)
      {
        if (v15 + *((unsigned __int16 *)a4 + 4) + 1 >= *(unsigned __int16 *)(a2 + 1072)) {
          goto LABEL_53;
        }
      }
      else if (v35 != 1 || ~*((unsigned __int16 *)a4 + 3) + v15 < 0)
      {
LABEL_53:
        int v30 = (unsigned __int16)a1[4];
        if (a1[4])
        {
          uint64_t v32 = "           context not found. rule not applicable. RETURN LH_FALSE";
          __int16 v8 = a5;
LABEL_55:
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)v32, (uint64_t)a6, a7, a8, 0);
          int v30 = 0;
          goto LABEL_50;
        }
LABEL_49:
        __int16 v8 = a5;
        goto LABEL_50;
      }
    }
    if (a1[4]) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           REGEX FAILED", (uint64_t)a6, a7, a8, 0);
    }
    if (!v19) {
      break;
    }
    *a6 = *(_WORD *)(v14 + v12 + 2);
    __int16 v10 = a3;
    if (a1[4]) {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           negate match - return LH_TRUE", (uint64_t)a6, a7, a8, 0);
    }
LABEL_39:
    ++v13;
    v12 += 6;
    if (v13 >= *((unsigned __int16 *)v10 + 4))
    {
      int v30 = 1;
      goto LABEL_49;
    }
  }
  int v30 = (unsigned __int16)a1[4];
  __int16 v8 = a5;
  if (a1[4])
  {
    uint64_t v32 = "           return LH_FALSE";
    goto LABEL_55;
  }
LABEL_50:
  int *v8 = v30;
  return 0;
}

uint64_t matchPANDPRULE_TRuleNN(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t **a7, unsigned int *a8, int *a9)
{
  int v23 = 1;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t matched = logPANDPRULE_TRule(a1, a2, a3, a4, (uint64_t *)a5, a7);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"       <%s>", v14, v15, v16, (uint64_t)*a2);
    cstdlib_strcpy((char *)*a2, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  *a9 = 0;
  if (!*a7
    || (matched = matchPANDPCONTEXT_TRuleNN((_WORD *)a5, a6, *a7, a8, &v23, &v22, 1, (uint64_t)a8), int v18 = v23, v23 == 1))
  {
    int v19 = a7[1];
    if (!v19
      || (int v23 = 0,
          uint64_t matched = matchPANDPCONTEXT_TRuleNN((_WORD *)a5, a6, v19, a8, &v23, &v22, 0, (uint64_t)a8),
          int v18 = v23,
          v23 == 1))
    {
      int v20 = a7[2];
      if (v20)
      {
        int v23 = 0;
        uint64_t matched = matchPANDPCONTEXT_TRuleNN((_WORD *)a5, a6, v20, a8, &v23, &v22, 2, (uint64_t)a8);
        int v18 = v23;
      }
      else
      {
        int v18 = 1;
      }
    }
  }
  *a9 = v18;
  return matched;
}

uint64_t matchMAPRULE2STR_TRuleNN(uint64_t a1, const char **a2, unsigned __int16 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, int *a9)
{
  *a9 = 0;
  return matchPANDPRULE_TRuleNN(a1, a2, a3, a4, a5, a6, (uint64_t **)(a7 + 8), a8, a9);
}

uint64_t last_POSNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, unsigned int a5)
{
  if (!result) {
    return result;
  }
  unsigned int v6 = 0;
  for (uint64_t i = *(void *)(*(void *)(a2 + 1064) + 184 * a3 + 48) + 1; *(unsigned char *)(i - 1) == 45; ++i)
  {
    unsigned int v6 = (const char *)i;
LABEL_7:
    ;
  }
  if (*(unsigned char *)(i - 1)) {
    goto LABEL_7;
  }
  if (v6) {
    __int16 v8 = v6;
  }
  else {
    __int16 v8 = *(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48);
  }
  if (!a5) {
    return 0;
  }
  uint64_t v9 = a5;
  while (cstdlib_strcmp(*a4, v8))
  {
    ++a4;
    if (!--v9) {
      return 0;
    }
  }
  return 1;
}

uint64_t first_POSNN(uint64_t a1, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = cstdlib_strlen(*(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48));
  uint64_t v12 = heap_Alloc(v10, (v11 + 1));
  if (!v12) {
    return 0;
  }
  unint64_t v13 = (const char *)v12;
  unsigned __int16 v14 = 0;
  for (uint64_t i = *(unsigned char **)(*(void *)(a2 + 1064) + 184 * a3 + 48); ; ++i)
  {
    int v16 = *i;
    if (!*i || v16 == 45) {
      break;
    }
    uint64_t v17 = v14++;
    *(unsigned char *)(v12 + v17) = v16;
  }
  *(unsigned char *)(v12 + v14) = 0;
  if (v5)
  {
    uint64_t v5 = v5;
    while (cstdlib_strcmp(v13, *a4))
    {
      ++a4;
      if (!--v5) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v18 = 0;
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  return v18;
}

uint64_t has_POSNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, unsigned int a5)
{
  if (result)
  {
    if (a5)
    {
      uint64_t v8 = a5;
      while (!cstdlib_strstr(*(char **)(*(void *)(a2 + 1064) + 184 * a3 + 48), *a4))
      {
        ++a4;
        if (!--v8) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t first_characterNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  if (result)
  {
    LODWORD(v5) = a5;
    utf8_getUTF8Char(*(void *)(*(void *)(a2 + 1064) + 184 * a3 + 48), 0, __s2);
    if (v5)
    {
      uint64_t v5 = v5;
      while (cstdlib_strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t last_characterNN(uint64_t result, uint64_t a2, unsigned int a3, const char **a4, int a5)
{
  __int16 v16 = 0;
  *(_DWORD *)__s2 = 0;
  if (result)
  {
    LODWORD(v5) = a5;
    uint64_t v7 = *(const char **)(*(void *)(a2 + 1064) + 184 * a3 + 48);
    int v8 = cstdlib_strlen(v7);
    int v9 = cstdlib_strlen(v7);
    int v10 = v8 - utf8_GetCurrentUtf8Offset((unint64_t)v7, v9 - 1);
    int v11 = cstdlib_strlen(v7);
    int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v7, v11 - 1);
    if (v10 >= (int)Utf8_LengthInBytes((unsigned __int8 *)&v7[CurrentUtf8Offset], 1))
    {
      int v13 = cstdlib_strlen(v7);
      unsigned int v14 = utf8_GetCurrentUtf8Offset((unint64_t)v7, v13 - 1);
      utf8_getUTF8Char((uint64_t)v7, v14, __s2);
    }
    if (v5)
    {
      uint64_t v5 = v5;
      while (cstdlib_strcmp(*a4, __s2))
      {
        ++a4;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t initPhrasingRuleStructNN(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_WORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 10) = a3;
  uint64_t v4 = heap_Calloc(*(void **)(a1 + 8), a3, 16);
  *(void *)a2 = v4;
  if (v4) {
    return 0;
  }
  else {
    return 2315264010;
  }
}

uint64_t addPhrasingRuleNN(uint64_t a1, uint64_t *a2, const char *a3)
{
  unsigned __int16 v6 = 1;
  for (uint64_t i = a3; *i == 94; ++i)
  {
    ++v6;
LABEL_6:
    ;
  }
  if (*i) {
    goto LABEL_6;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), v6, 40);
  uint64_t v9 = *a2;
  uint64_t v10 = *((unsigned __int16 *)a2 + 4);
  *(void *)(*a2 + 16 * v10) = v8;
  if (!v8) {
    return 2315264010;
  }
  *(_WORD *)(v9 + 16 * v10 + 8) = v6;
  uint64_t result = parseOneRuleNN(a1, v8, v6, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = 0;
    ++*((_WORD *)a2 + 4);
  }
  return result;
}

uint64_t parseOneRuleNN(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  for (unsigned __int16 i = 0; a4[i] != 45 || a4[i + 1] != 45 || a4[i + 2] != 62; ++i)
    ;
  a4[i] = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a3;
  while (2)
  {
    uint64_t v9 = (unsigned __int8 *)(a4 - 1);
    do
    {
      int v11 = *++v9;
      int v10 = v11;
    }
    while (v11 == 32);
    uint64_t v12 = (const char *)v9;
    while (v10 != 95)
    {
      int v13 = *(unsigned __int8 *)++v12;
      int v10 = v13;
    }
    *uint64_t v12 = 0;
    *(_WORD *)(a2 + 40 * v7 + 8) = cstdlib_atoi(v9);
    do
    {
      int v15 = *(unsigned __int8 *)++v12;
      int v14 = v15;
    }
    while (v15 == 32);
    __int16 v16 = v12;
    if (v14 != 40)
    {
      __int16 v16 = v12;
      do
        int v17 = *(unsigned __int8 *)++v16;
      while (v17 != 40);
    }
    uint64_t v18 = (void *)(a2 + 40 * v7);
    *__int16 v16 = 0;
    if (!cstdlib_strcmp(v12, "last-pos")) {
      *uint64_t v18 = last_POSNN;
    }
    if (!cstdlib_strcmp(v12, "first-pos")) {
      *uint64_t v18 = first_POSNN;
    }
    if (!cstdlib_strcmp(v12, "has-pos")) {
      *uint64_t v18 = has_POSNN;
    }
    if (!cstdlib_strcmp(v12, "first-character")) {
      *uint64_t v18 = first_characterNN;
    }
    if (!cstdlib_strcmp(v12, "last-character")) {
      *uint64_t v18 = last_characterNN;
    }
    uint64_t v19 = a2 + 40 * v7;
    *(_WORD *)(v19 + 32) = 1;
    int v20 = (_WORD *)(v19 + 32);
    unsigned int v21 = v16;
    do
    {
      int v23 = *(unsigned __int8 *)++v16;
      int v22 = v23;
      ++v21;
    }
    while (v23 == 32);
    uint64_t v24 = 0;
    int v25 = 1;
    while (v22 == 124)
    {
      *int v20 = ++v25;
LABEL_35:
      int v22 = v16[++v24];
    }
    if (v22 != 41) {
      goto LABEL_35;
    }
    v16[v24] = 0;
    unsigned int v26 = &v16[v24 + 1];
    uint64_t v27 = (char *)heap_Alloc(*(void *)(a1 + 8), (unsigned __int16)(v24 + 2));
    uint64_t v28 = a2 + 40 * v7;
    *(void *)(v28 + 16) = v27;
    char v29 = (void *)(v28 + 16);
    if (v27)
    {
      cstdlib_strcpy(v27, v16);
      int v30 = (void *)heap_Alloc(*(void *)(a1 + 8), 8 * (unsigned __int16)*v20);
      uint64_t v31 = a2 + 40 * v7;
      *(void *)(v31 + 24) = v30;
      uint64_t v32 = (void *)(v31 + 24);
      if (v30)
      {
        *int v30 = *v29;
        if ((unsigned __int16)*v20 >= 2u)
        {
          unint64_t v33 = 1;
          do
          {
            char v34 = (void *)(*v32 + 8 * v33);
            for (uint64_t j = (unsigned char *)*(v34 - 1); ; uint64_t j = v36 + 1)
            {
              *char v34 = j;
              char v34 = (void *)(*v32 + 8 * v33);
              unint64_t v36 = (unsigned char *)*v34;
              if (*(unsigned char *)*v34 == 124) {
                break;
              }
            }
            *char v34 = v36 + 1;
            *unint64_t v36 = 0;
            ++v33;
          }
          while (v33 < (unsigned __int16)*v20);
        }
        while (1)
        {
          int v37 = *(unsigned __int8 *)v26;
          if (!*v26 || v37 == 94) {
            break;
          }
          ++v26;
        }
        if (v37 == 94) {
          a4 = v26 + 1;
        }
        else {
          a4 = v26;
        }
        if (++v7 == v8) {
          return 0;
        }
        continue;
      }
    }
    return 2315264010;
  }
}

uint64_t releasePhrasingRuleStructNN(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  if (v3)
  {
    unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v3 + 16 * v6;
        uint64_t v8 = *(void *)v7;
        if (*(void *)v7)
        {
          if (*(_WORD *)(v7 + 8))
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            do
            {
              if (*(void *)(*(void *)v7 + v9 + 16))
              {
                heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)v7 + v9 + 16));
                uint64_t v3 = *(void *)a2;
              }
              if (*(void *)(*(void *)(v3 + 16 * v6) + v9 + 24))
              {
                heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(v3 + 16 * v6) + v9 + 24));
                uint64_t v3 = *(void *)a2;
              }
              ++v10;
              unint64_t v7 = v3 + 16 * v6;
              v9 += 40;
            }
            while (v10 < *(unsigned __int16 *)(v7 + 8));
            uint64_t v8 = *(void *)v7;
          }
          heap_Free(*(void **)(a1 + 8), v8);
          uint64_t v3 = *(void *)a2;
          *(void *)(*(void *)a2 + 16 * v6) = 0;
          unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    heap_Free(*(void **)(a1 + 8), v3);
  }
  *(_WORD *)(a2 + 10) = 0;
  *(void *)a2 = 0;
  return 0;
}

uint64_t applyRulesNN(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!*((_WORD *)a4 + 5)) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *a4;
  while (*(_WORD *)(v9 + 16 * v8 + 8))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = 1;
    do
    {
      uint64_t v13 = *(void *)(v9 + 16 * v8) + v10;
      if (*(unsigned __int16 *)(v13 + 8) + a3 >= *(unsigned __int16 *)(a2 + 1072))
      {
        int v12 = 0;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void))v13)(a1, a2, (unsigned __int16)(*(_WORD *)(v13 + 8) + a3), *(void *)(v13 + 24), *(unsigned __int16 *)(v13 + 32)) != 1)int v12 = 0; {
        uint64_t v9 = *a4;
        }
      }
      ++v11;
      v10 += 40;
    }
    while (v11 < *(unsigned __int16 *)(v9 + 16 * v8 + 8));
    if (v12 == 1) {
      break;
    }
    if (++v8 >= (unint64_t)*((unsigned __int16 *)a4 + 5)) {
      return 0;
    }
  }
  return 1;
}

uint64_t com_crf_GetCfgParamVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char **a6)
{
  *a6 = a5;
  __int16 __c_1 = -1;
  unsigned __int8 __c = 0;
  uint64_t v10 = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a1, a2, "fecfg", a4, &v10, &__c_1, &__c);
  if ((v7 & 0x80000000) == 0 && __c_1)
  {
    uint64_t v8 = cstdlib_strchr(*v10, __c);
    if (v8) {
      char *v8 = 0;
    }
    *a6 = *v10;
  }
  return v7;
}

uint64_t com_IncludeCRF(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  __s1 = 0;
  uint64_t CfgParamVal = com_crf_GetCfgParamVal(a1, a2, a3, (uint64_t)"statbnd_include", "NO", &__s1);
  if ((CfgParamVal & 0x80000000) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    unint64_t v6 = __s1;
    if (cstdlib_strcmp(__s1, "CRF")) {
      BOOL v7 = cstdlib_strcmp(v6, "crf") == 0;
    }
    else {
      BOOL v7 = 1;
    }
  }
  *a4 = v7;
  return CfgParamVal;
}

uint64_t pandpCrfInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v103[4] = *MEMORY[0x263EF8340];
  *(void *)(a11 + 224) = 0;
  int v17 = (uint64_t *)(a11 + 224);
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v88 = 0u;
  int v18 = hlp_BrokerString(a5, __dst, "crfphrase");
  if (v18 < 0)
  {
    int v28 = v18;
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for CRF phrasing model %s", v19, v20, v21, (uint64_t)"crfphrase");
    uint64_t v29 = a5;
    goto LABEL_7;
  }
  int Only_ReferenceCnt = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, v17, 2, (uint64_t)__dst, "CRPH", 1031, 0, 0);
  if (Only_ReferenceCnt < 0)
  {
    int v28 = Only_ReferenceCnt;
    uint64_t v29 = a5;
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no CRF Phrasing model found", v23, v24, v25, (uint64_t)__dst);
LABEL_7:
    uint64_t v30 = v28 | 0x8A002000;
    if (*v17)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(v29, a6, *v17);
      *int v17 = 0;
    }
    return v30;
  }
  uint64_t v80 = (uint64_t *)(a11 + 232);
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v88 = 0u;
  char v84 = 0;
  *(_DWORD *)__s1 = 0;
  uint64_t v81 = 0;
  *(void *)uint64_t v82 = 0;
  v103[0] = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  uint64_t v26 = a5;
  if ((com_crf_GetCfgParamVal(a9, a10, a7, (uint64_t)"fephrase_max_rule", "1024", &v81) & 0x80000000) != 0) {
    uint64_t v27 = 1024;
  }
  else {
    uint64_t v27 = cstdlib_atoi((unsigned __int8 *)v81);
  }
  uint64_t v31 = heap_Calloc(*(void **)(a5 + 8), 1, v27);
  if (v31)
  {
    unint64_t v36 = (char *)v31;
    int v40 = hlp_BrokerString(a5, __dst, "sprules");
    uint64_t v41 = *(void *)(a5 + 32);
    if (v40 < 0)
    {
      log_OutText(v41, (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Could not assemble broker string for SP rules %s", v37, v38, v39, (uint64_t)"sprules");
      signed int v64 = v40 | 0x8A002000;
    }
    else
    {
      log_OutText(v41, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"looking for SP rules %s at %s", v37, v38, v39, (uint64_t)"sprules");
      signed int v42 = ssftriff_reader_ObjOpen(a1, a2, 2, __dst, "SPDT", 1031, (uint64_t *)&v85);
      if (v42 < 0)
      {
        signed int v64 = v42;
        log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no sp rules", v43, v44, v45, v77);
        *(_WORD *)(a11 + 242) = 0;
        *(void *)(a11 + 232) = 0;
      }
      else
      {
        while (1)
        {
          signed int v46 = ssftriff_reader_OpenChunk((uint64_t)v85, (__int32 *)__s1, (unsigned int *)&v82[1], v103);
          if (v46 < 0) {
            break;
          }
          if (!cstdlib_strcmp(__s1, "DSTR"))
          {
            signed int ChunkData = ssftriff_reader_GetChunkData((uint64_t)v85, v82[1], &v86);
            if (ChunkData < 0) {
              goto LABEL_41;
            }
            v82[0] = 0;
            ssftriff_reader_ReadStringZ((uint64_t)v85, (uint64_t)v86, v82[1], 0, 0, (unsigned int *)v82);
            ssftriff_reader_ReadStringZ((uint64_t)v85, (uint64_t)v86, v82[1], 0, v36, (unsigned int *)v82);
            uint64_t v55 = cstdlib_strchr(v36, 10);
            if (v55) {
              *uint64_t v55 = 0;
            }
            uint64_t v56 = cstdlib_strchr(v36, 58);
            unsigned __int16 v57 = v56 ? cstdlib_atoi((unsigned __int8 *)v56 + 2) : 0;
            unsigned int v58 = v82[0];
            signed int ChunkData = initPhrasingRuleStruct(a5, (uint64_t)v80, v57);
            if (ChunkData < 0) {
              goto LABEL_41;
            }
            unsigned __int16 v78 = v57;
            if (v57)
            {
              int v59 = 0;
              while (1)
              {
                do
                {
                  v82[0] = 0;
                  ssftriff_reader_ReadStringZ((uint64_t)v85, (uint64_t)v86, v82[1], v58, 0, (unsigned int *)v82);
                  ssftriff_reader_ReadStringZ((uint64_t)v85, (uint64_t)v86, v82[1], v58, v36, (unsigned int *)v82);
                  v58 += v82[0];
                  uint64_t v60 = v36 + 1;
                  for (unsigned __int16 i = v36; ; ++i)
                  {
                    unsigned int v62 = *i;
                    if (v62 > 0x23) {
                      goto LABEL_33;
                    }
                    if (((1 << v62) & 0x100000200) == 0) {
                      break;
                    }
                    ++v60;
                  }
                }
                while (((1 << v62) & 0x800002401) != 0);
LABEL_33:
                while ((_BYTE)v62)
                {
                  if (v62 == 35)
                  {
                    *(v60 - 1) = 0;
                    break;
                  }
                  char v63 = *v60++;
                  LOBYTE(v62) = v63;
                }
                signed int ChunkData = addPhrasingRule(a5, v80, v36);
                if (ChunkData < 0) {
                  break;
                }
                if ((unsigned __int16)++v59 >= v78) {
                  goto LABEL_15;
                }
              }
LABEL_41:
              signed int v64 = ChunkData;
              goto LABEL_42;
            }
          }
LABEL_15:
          signed int ChunkData = ssftriff_reader_CloseChunk((uint64_t)v85);
          if (ChunkData < 0) {
            goto LABEL_41;
          }
        }
        if ((v46 & 0x1FFF) == 0x14) {
          signed int v64 = 0;
        }
        else {
          signed int v64 = v46;
        }
LABEL_42:
        uint64_t v26 = a5;
      }
    }
    if (v85)
    {
      int v65 = ssftriff_reader_ObjClose(v85, v47, v48, v49, v50, v51, v52, v53);
      if (v65 < 0 && v64 > -1) {
        signed int v64 = v65;
      }
    }
    heap_Free(*(void **)(v26 + 8), (uint64_t)v36);
    if ((v64 & 0x80000000) == 0) {
      goto LABEL_52;
    }
  }
  else
  {
    log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v32, v33, v34, v35, v76);
  }
  releasePhrasingRuleStruct(v26, (uint64_t)v80);
LABEL_52:
  uint64_t v67 = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  LOWORD(v81) = -1;
  __s1[0] = 0;
  *(_OWORD *)(a11 + 266) = 0u;
  *(_OWORD *)(a11 + 282) = 0u;
  *(_OWORD *)(a11 + 298) = 0u;
  *(_OWORD *)(a11 + 314) = 0u;
  v103[0] = "JOY_KEYS";
  v103[1] = "DID_KEYS";
  v103[2] = "NEU_KEYS";
  v103[3] = "COM_KEYS";
  *(_OWORD *)(a11 + 250) = 0u;
  while (1)
  {
    cstdlib_strcpy(__dst, "statbnd_");
    cstdlib_strcat(__dst, (const char *)v103[v67]);
    LOWORD(v81) = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, char ***, char **, char *))(a7 + 96))(a9, a10, "fecfg", __dst, &v86, &v81, __s1) & 0x80000000) != 0|| !(_WORD)v81)
    {
      return 0;
    }
    uint64_t v68 = cstdlib_strchr(*v86, __s1[0]);
    if (v68) {
      *uint64_t v68 = 0;
    }
    uint64_t v69 = *v86;
    int v70 = **v86;
    if (**v86) {
      break;
    }
    unsigned __int16 v71 = 0;
LABEL_79:
    if (++v67 == 4)
    {
      *(_WORD *)(a11 + 248) = v71;
      return 0;
    }
  }
  unsigned __int16 v71 = 0;
  while (1)
  {
    for (uint64_t j = 0; v70; v70 = v69[++j])
    {
      if (v70 == 44) {
        break;
      }
    }
    cstdlib_strcpy(__dst, "statbnd_");
    cstdlib_strncat(__dst, v69, (unsigned __int16)j);
    LOWORD(v81) = 0;
    uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, char ***, char **, char *))(a7 + 96))(a9, a10, "fecfg", __dst, &v85, &v81, __s1);
    if ((v73 & 0x80000000) != 0) {
      return v73;
    }
    if ((_WORD)v81)
    {
      uint64_t v74 = cstdlib_strchr(*v85, __s1[0]);
      if (v74) {
        *uint64_t v74 = 0;
      }
      if ((unsigned __int16)v67 == 2)
      {
        *(_WORD *)(a11 + 2 * v71 + 290) = cstdlib_atoi((unsigned __int8 *)*v85);
      }
      else if ((unsigned __int16)v67 == 1)
      {
        *(_WORD *)(a11 + 2 * v71 + 270) = cstdlib_atoi((unsigned __int8 *)*v85);
      }
      else if ((_WORD)v67)
      {
        *(_WORD *)(a11 + 2 * v71 + 310) = cstdlib_atoi((unsigned __int8 *)*v85);
      }
      else
      {
        *(_WORD *)(a11 + 2 * v71 + 250) = cstdlib_atoi((unsigned __int8 *)*v85);
      }
    }
    if (v69[j] == 44) {
      v69 += j + 1;
    }
    else {
      v69 += j;
    }
    ++v71;
    int v70 = *(unsigned __int8 *)v69;
    if (!*v69) {
      goto LABEL_79;
    }
  }
}

uint64_t pandpCrfDeinit(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a3 + 224);
    if (v5)
    {
      crf_Deinit_ReadOnly_DereferenceCnt(result, a2, v5);
      *(void *)(a3 + 224) = 0;
    }
    return releasePhrasingRuleStruct(v4, a3 + 232);
  }
  return result;
}

uint64_t crfWeakPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v205 = 0;
  unsigned int v204 = 0;
  v203 = 0;
  if ((com_crf_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_char", "6", &v203) & 0x80000000) != 0) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = cstdlib_atoi((unsigned __int8 *)v203);
  }
  if ((com_crf_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_pos", "6", &v203) & 0x80000000) != 0) {
    unsigned int v16 = 6;
  }
  else {
    unsigned int v16 = cstdlib_atoi((unsigned __int8 *)v203);
  }
  uint64_t v188 = a6;
  if ((com_crf_GetCfgParamVal(a2, a3, a1, (uint64_t)"fephrase_max_obs", "1024", &v203) & 0x80000000) != 0) {
    unsigned int v194 = 1024;
  }
  else {
    unsigned int v194 = cstdlib_atoi((unsigned __int8 *)v203);
  }
  uint64_t v17 = v15;
  int v18 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v15);
  uint64_t v19 = heap_Calloc(*(void **)(a4 + 8), 1, v15);
  uint64_t v20 = (char *)heap_Calloc(*(void **)(a4 + 8), 2, v15);
  uint64_t v21 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v15);
  int v22 = (char *)heap_Calloc(*(void **)(a4 + 8), 1, v17);
  uint64_t v198 = (char *)heap_Calloc(*(void **)(a4 + 8), 2, v17);
  uint64_t v23 = heap_Calloc(*(void **)(a4 + 8), 1, v16);
  uint64_t v24 = heap_Calloc(*(void **)(a4 + 8), 1, v16);
  uint64_t v29 = (char *)v19;
  uint64_t v30 = v24;
  __int16 v196 = v18;
  __int16 v191 = v29;
  unsigned __int16 v192 = v20;
  uint64_t v193 = v21;
  if (!v18 || !v29 || !v20 || !v21 || !v22 || !v198 || !v23 || !v24)
  {
    uint64_t v147 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v172);
    uint64_t v148 = (uint64_t)v18;
    uint64_t v31 = (uint64_t)v198;
    goto LABEL_195;
  }
  *int v18 = 0;
  *uint64_t v29 = 0;
  *uint64_t v20 = 0;
  *uint64_t v21 = 0;
  v190 = v22;
  *int v22 = 0;
  uint64_t v31 = (uint64_t)v198;
  *uint64_t v198 = 0;
  if (a5 | a7) {
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Parameter errors: %s %s\n", v26, v27, v28, (uint64_t)"level0");
  }
  uint64_t v32 = v188;
  uint64_t v33 = heap_Calloc(*(void **)(a4 + 8), v188[4], 8);
  if (!v33)
  {
    uint64_t v147 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v34, v35, v36, v37, v172);
    goto LABEL_194;
  }
  uint64_t v38 = v33;
  uint64_t v43 = heap_Calloc(*(void **)(a4 + 8), v188[4], 8);
  if (!v43)
  {
    uint64_t v149 = v23;
    uint64_t v147 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v39, v40, v41, v42, v172);
    uint64_t v48 = 0;
    goto LABEL_174;
  }
  uint64_t v48 = heap_Calloc(*(void **)(a4 + 8), v188[4], 4);
  if (!v48)
  {
    uint64_t v149 = v23;
    uint64_t v147 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v44, v45, v46, v47, v172);
    goto LABEL_174;
  }
  unsigned __int16 v197 = (char *)v30;
  uint64_t v181 = (void *)v38;
  if (!v188[4])
  {
    unsigned __int16 v57 = 0;
    uint64_t v77 = 0;
    LODWORD(v143) = 0;
    goto LABEL_139;
  }
  __int16 v201 = 0;
  uint64_t v202 = 0;
  int v200 = 0;
  uint64_t v49 = *(void *)(a4 + 8);
  int v50 = cstdlib_strlen(*(const char **)(*(void *)v188 + 8));
  uint64_t v51 = heap_Alloc(v49, (v50 + 2));
  if (!v51)
  {
    int v144 = 0;
    unsigned __int16 v57 = 0;
LABEL_152:
    uint64_t v147 = 2315264010;
    log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v52, v53, v54, v55, v172);
    uint64_t v156 = 0;
    uint64_t v77 = v144;
    uint64_t v30 = (uint64_t)v197;
    goto LABEL_167;
  }
  uint64_t v56 = (const char *)v51;
  unsigned __int16 v57 = 0;
  int v173 = 0;
  unint64_t v58 = 0;
  uint64_t v182 = v194;
  int __dst = (char *)v23;
  while (1)
  {
    int v59 = *(unsigned char **)(*(void *)v32 + 224 * v58 + 8);
    v187 = (char *)v56;
    if (v59)
    {
      *uint64_t v56 = 0;
      __int16 v60 = *v59;
      if (*v59)
      {
        do
        {
          uint64_t v61 = v59 + 1;
          if ((unsigned __int16)(v60 - 48) - 1 <= 8)
          {
            int v62 = *v61;
            if (v62 == 125)
            {
              uint64_t v61 = v59 + 2;
            }
            else
            {
              __s1[0] = v60;
              if (v62)
              {
                uint64_t v63 = 0;
                uint64_t v64 = 1;
                while (1)
                {
                  if ((unsigned __int16)(v62 - 48) - 1 > 4)
                  {
                    uint64_t v64 = (unsigned __int16)(v63 + 1);
                    uint64_t v61 = &v59[v63 + 1];
                    goto LABEL_41;
                  }
                  int v65 = &v59[v63];
                  __s1[v63 + 1] = v62;
                  if (v63 == 1) {
                    break;
                  }
                  ++v64;
                  LOWORD(v62) = v65[2];
                  ++v63;
                  if (!v65[2]) {
                    goto LABEL_40;
                  }
                }
                uint64_t v64 = 3;
LABEL_40:
                uint64_t v61 = v65 + 2;
              }
              else
              {
                uint64_t v64 = 1;
              }
LABEL_41:
              __s1[v64] = 0;
              if (!cstdlib_strcmp(__s1, "55"))
              {
                uint64_t v69 = v187;
                int v70 = "1-";
LABEL_58:
                cstdlib_strcat(v69, v70);
                goto LABEL_59;
              }
              if (!cstdlib_strcmp(__s1, "35"))
              {
                uint64_t v69 = v187;
                int v70 = "2-";
                goto LABEL_58;
              }
              if (!cstdlib_strcmp(__s1, "214") || !cstdlib_strcmp(__s1, "33"))
              {
                uint64_t v69 = v187;
                int v70 = "3-";
                goto LABEL_58;
              }
              if (!cstdlib_strcmp(__s1, "51") || !cstdlib_strcmp(__s1, "21"))
              {
                uint64_t v69 = v187;
                int v70 = "4-";
                goto LABEL_58;
              }
              if (!cstdlib_strcmp(__s1, "11") || !cstdlib_strcmp(__s1, "13"))
              {
                uint64_t v69 = v187;
                int v70 = "5-";
                goto LABEL_58;
              }
              if (!cstdlib_strcmp(__s1, "34") || !cstdlib_strcmp(__s1, "22"))
              {
                uint64_t v69 = v187;
                int v70 = "6-";
                goto LABEL_58;
              }
              log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"invalid input prone: %s\n", v66, v67, v68, (uint64_t)__s1);
            }
          }
LABEL_59:
          __int16 v60 = *v61;
          int v59 = v61;
        }
        while (*v61);
      }
      uint64_t v56 = v187;
      int v71 = (unsigned __int16)cstdlib_strlen(v187);
      uint64_t v30 = (uint64_t)v197;
      if (v71) {
        v187[v71 - 1] = 0;
      }
      else {
        cstdlib_strcpy(v187, "0");
      }
    }
    else
    {
      log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"invalid input parameter: %s\n", v53, v54, v55, (uint64_t)"szSourcePron");
      uint64_t v30 = (uint64_t)v197;
    }
    int v72 = (unsigned __int16)cstdlib_strlen(v56);
    if (v72)
    {
      uint64_t v177 = v56[v72 - 1];
      uint64_t v178 = *(unsigned __int8 *)v56;
    }
    else
    {
      uint64_t v177 = 48;
      uint64_t v178 = 48;
    }
    v189 = v57;
    if (!cstdlib_strcmp(*(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), "{T:comma}")) {
      cstdlib_strcpy(*(char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), "g");
    }
    uint64_t v77 = (char *)heap_Alloc(*(void *)(a4 + 8), v182);
    if (!v77) {
      goto LABEL_165;
    }
    uint64_t v78 = heap_Alloc(*(void *)(a4 + 8), v182);
    if (!v78)
    {
      v189 = 0;
      goto LABEL_165;
    }
    unsigned __int16 v57 = (char *)v78;
    __src = v77;
    if (!cstdlib_strcmp(**(const char ***)(*(void *)v32 + 224 * v58 + 16), "-"))
    {
      if (*(void *)(*(void *)(a8 + 224) + 32))
      {
        sprintf(v77, "%s %d %s %s %s %s %s %s %s %s %s %s %s %s %d %d %s %s %d", "-", 1, *(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), v56, "-", "-", "-", "-", "NULL", "NULL", "-", "-", *(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), *(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), 1, 1, v56,
          v56,
          1);
        float v106 = extstdlib_strtok_r(v77, " ", &v200);
        char *v57 = 0;
        if (v106)
        {
          uint64_t v107 = v106;
          unsigned __int16 v108 = 0;
          do
          {
            uint64_t v109 = *(const char **)(*(void *)(*(void *)(a8 + 224) + 32) + 8);
            if (v109[v108] == 49)
            {
              int v110 = cstdlib_strlen(v109) - 1;
              cstdlib_strcat(v57, " ");
              cstdlib_strcat(v57, v107);
              BOOL v111 = v110 == v108;
              uint64_t v30 = (uint64_t)v197;
              if (!v111) {
                cstdlib_strcat(v57, " ");
              }
            }
            ++v108;
            uint64_t v107 = extstdlib_strtok_r(0, " ", &v200);
          }
          while (v107);
        }
        cstdlib_strcpy(v77, v57);
        uint64_t v23 = (uint64_t)__dst;
      }
      else
      {
        cstdlib_strcpy(v77, "- 1 ");
        cstdlib_strcat(v77, *(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8));
        cstdlib_strcat(v77, " ");
        cstdlib_strcat(v77, v56);
        cstdlib_strcat(v77, " 1 - - NULL NULL");
      }
      uint64_t v114 = *(void *)(a4 + 8);
      int v115 = cstdlib_strlen(v77);
      int v116 = (char *)heap_Alloc(v114, (v115 + 1));
      v181[v58] = v116;
      if (v116)
      {
        cstdlib_strcpy(v116, v77);
        heap_Free(*(void **)(a4 + 8), (uint64_t)v187);
        goto LABEL_131;
      }
      v189 = v57;
      uint64_t v56 = v187;
LABEL_165:
      uint64_t v158 = (uint64_t)v56;
      uint64_t v147 = 2315264010;
      log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v73, v74, v75, v76, v172);
      heap_Free(*(void **)(a4 + 8), v158);
      uint64_t v156 = 0;
      goto LABEL_166;
    }
    uint64_t v79 = heap_Alloc(*(void *)(a4 + 8), v182);
    v189 = v57;
    if (!v79) {
      goto LABEL_165;
    }
    uint64_t v80 = (char *)v79;
    uint64_t v81 = *(void *)(a4 + 8);
    int v82 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8));
    int v83 = (char *)heap_Alloc(v81, (v82 + 2));
    if (!v83) {
      break;
    }
    *uint64_t v80 = 0;
    uint64_t v180 = v83;
    cstdlib_strcpy(v83, *(const char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8));
    long long v88 = extstdlib_strtok_r(**(char ***)(*(void *)v32 + 224 * v58 + 16), "-", &v202);
    long long v89 = extstdlib_strtok_r(*(char **)(*(void *)(*(void *)v32 + 224 * v58 + 16) + 8), "-", &v201);
    uint64_t v90 = *(void *)(a4 + 8);
    int v91 = cstdlib_strlen(v88);
    long long v92 = (char *)heap_Alloc(v90, (v91 + 2));
    if (!v92 || (__int16 v195 = (char *)heap_Alloc(*(void *)(a4 + 8), v182)) == 0)
    {
      uint64_t v23 = (uint64_t)__dst;
      uint64_t v157 = (uint64_t)v187;
      uint64_t v156 = (uint64_t)v180;
      goto LABEL_159;
    }
    cstdlib_strcpy(v92, v88);
    if (v89) {
      long long v93 = v89;
    }
    else {
      long long v93 = "NULL";
    }
    cstdlib_strcpy(__dst, v93);
    __int16 v94 = cstdlib_strlen(v92);
    uint64_t v179 = (uint64_t)v92;
    unsigned __int16 v176 = Utf8_LengthInUtf8chars((unint64_t)v92, v94);
    for (unsigned __int16 i = 0; v88; ++i)
    {
      cstdlib_strcat(v80, v88);
      cstdlib_strcpy(v195, v88);
      long long v88 = extstdlib_strtok_r(0, "-", &v202);
      if (v89) {
        long long v96 = v89;
      }
      else {
        long long v96 = "NULL";
      }
      cstdlib_strcpy(v197, v96);
      if (v201) {
        long long v89 = extstdlib_strtok_r(0, "-", &v201);
      }
    }
    __int16 v97 = cstdlib_strlen(v195);
    unsigned __int16 v98 = Utf8_LengthInUtf8chars((unint64_t)v195, v97);
    cstdlib_strcpy(**(char ***)(*(void *)v32 + 224 * v58 + 16), v80);
    __int16 v99 = cstdlib_strlen(v80);
    unsigned __int16 v100 = Utf8_LengthInUtf8chars((unint64_t)v80, v99);
    utf8_getUTF8Char((uint64_t)v80, 0, v196);
    int v101 = cstdlib_strlen(v80);
    unsigned int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v80, v101 - 1);
    utf8_getUTF8Char((uint64_t)v80, CurrentUtf8Offset, v193);
    unsigned __int16 v175 = v98;
    if (v100 < 3u)
    {
      if (v100 == 2)
      {
        cstdlib_strcpy(v192, v80);
        int v112 = v198;
        __int16 v113 = v80;
      }
      else
      {
        cstdlib_strcpy(v192, "NULL");
        int v112 = v198;
        __int16 v113 = "NULL";
      }
      cstdlib_strcpy(v112, v113);
    }
    else
    {
      unsigned int v103 = cstdlib_strlen(v196);
      utf8_getUTF8Char((uint64_t)v80, v103, v191);
      int v104 = cstdlib_strlen(v80);
      unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v80, v104 - 1);
      utf8_getUTF8Char((uint64_t)v80, PreviousUtf8Offset, v190);
      cstdlib_strcpy(v192, v196);
      cstdlib_strcat(v192, v191);
      cstdlib_strcpy(v198, v190);
      cstdlib_strcat(v198, v193);
    }
    uint64_t v23 = (uint64_t)__dst;
    int v174 = v100;
    if (*(void *)(*(void *)(a8 + 224) + 32))
    {
      sprintf(__src, "%s %d %s %s %s %s %s %s %s %s %s %s %s %s %d %d %c %c %d", v80, v100, v180, v187, v196, v193, v191, v190, v192, v198, v92, v195, __dst, v197, v176, v175, v178,
        v177,
        i);
      uint64_t v117 = extstdlib_strtok_r(__src, " ", &v200);
      uint64_t v32 = v188;
      char *v189 = 0;
      if (v117)
      {
        uint64_t v118 = v117;
        unsigned __int16 v119 = 0;
        do
        {
          uint64_t v120 = *(const char **)(*(void *)(*(void *)(a8 + 224) + 32) + 8);
          if (v120[v119] == 49)
          {
            int v121 = cstdlib_strlen(v120) - 1;
            cstdlib_strcat(v189, " ");
            cstdlib_strcat(v189, v118);
            BOOL v111 = v121 == v119;
            uint64_t v23 = (uint64_t)__dst;
            if (!v111) {
              cstdlib_strcat(v189, " ");
            }
          }
          ++v119;
          uint64_t v118 = extstdlib_strtok_r(0, " ", &v200);
        }
        while (v118);
      }
      uint64_t v122 = __src;
      cstdlib_strcpy(__src, v189);
      uint64_t v30 = (uint64_t)v197;
    }
    else
    {
      uint64_t v122 = __src;
      sprintf(__src, "%s %d %s %s %d %s %s %s %s", v80, v100, v180, v187, i, v196, v193, v192, v198);
      uint64_t v30 = (uint64_t)v197;
      uint64_t v32 = v188;
    }
    log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Crf Phrasing Obversation: %s", v123, v124, v125, (uint64_t)v122);
    uint64_t v126 = *(void *)(a4 + 8);
    int v127 = cstdlib_strlen(v122);
    unint64_t v128 = (char *)heap_Alloc(v126, (v127 + 1));
    v181[v58] = v128;
    long long v92 = (char *)v179;
    if (!v128)
    {
LABEL_155:
      log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v129, v130, v131, v132, v172);
      uint64_t v157 = (uint64_t)v187;
      uint64_t v156 = (uint64_t)v180;
      goto LABEL_160;
    }
    cstdlib_strcpy(v128, __src);
    uint64_t v133 = *(const char **)(*(void *)v32 + 224 * v58 + 136);
    if (v133)
    {
      if (cstdlib_strcmp(v133, "B"))
      {
        if (!cstdlib_strcmp(*(const char **)(*(void *)v32 + 224 * v58 + 136), "E"))
        {
          *(_DWORD *)(v48 + 4 * v58) = 1;
          uint64_t v140 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
          *(void *)(v43 + 8 * v58) = v140;
          if (!v140) {
            goto LABEL_155;
          }
          **(void **)(v43 + 8 * v58) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
          uint64_t v141 = **(unsigned char ***)(v43 + 8 * v58);
          if (!v141) {
            goto LABEL_155;
          }
          int v136 = v174 + v173;
          *uint64_t v141 = 69;
          uint64_t v135 = (uint64_t)v187;
          goto LABEL_129;
        }
        int v134 = cstdlib_strcmp(*(const char **)(*(void *)v32 + 224 * v58 + 136), "S");
        uint64_t v135 = (uint64_t)v187;
        if (v134)
        {
          int v136 = v174 + v173;
          *(_DWORD *)(v48 + 4 * v58) = 0;
          *(void *)(v43 + 8 * v58) = 0;
LABEL_129:
          *(_DWORD *)(*(void *)v32 + 224 * v58 + 144) = v136;
          int v173 = v136;
          goto LABEL_130;
        }
        *(_DWORD *)(v48 + 4 * v58) = 1;
        uint64_t v142 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
        *(void *)(v43 + 8 * v58) = v142;
        if (!v142) {
          goto LABEL_155;
        }
        **(void **)(v43 + 8 * v58) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
        uint64_t v138 = **(char ***)(v43 + 8 * v58);
        if (!v138) {
          goto LABEL_155;
        }
        char v139 = 83;
      }
      else
      {
        *(_DWORD *)(v48 + 4 * v58) = 1;
        uint64_t v137 = heap_Calloc(*(void **)(a4 + 8), 1, 8);
        *(void *)(v43 + 8 * v58) = v137;
        if (!v137) {
          goto LABEL_155;
        }
        **(void **)(v43 + 8 * v58) = heap_Calloc(*(void **)(a4 + 8), 2, 1);
        uint64_t v138 = **(char ***)(v43 + 8 * v58);
        if (!v138) {
          goto LABEL_155;
        }
        char v139 = 66;
      }
      *uint64_t v138 = v139;
      uint64_t v135 = (uint64_t)v187;
      int v136 = v174;
      goto LABEL_129;
    }
    *(_DWORD *)(v48 + 4 * v58) = 0;
    *(void *)(v43 + 8 * v58) = 0;
    uint64_t v135 = (uint64_t)v187;
LABEL_130:
    heap_Free(*(void **)(a4 + 8), v135);
    heap_Free(*(void **)(a4 + 8), (uint64_t)v80);
    heap_Free(*(void **)(a4 + 8), v179);
    heap_Free(*(void **)(a4 + 8), (uint64_t)v195);
    heap_Free(*(void **)(a4 + 8), (uint64_t)__src);
    heap_Free(*(void **)(a4 + 8), (uint64_t)v189);
    heap_Free(*(void **)(a4 + 8), (uint64_t)v180);
    unsigned __int16 v57 = 0;
    uint64_t v77 = 0;
LABEL_131:
    ++v58;
    unint64_t v143 = v32[4];
    if (v58 >= v143)
    {
      uint64_t v30 = (uint64_t)v197;
LABEL_139:
      uint64_t v147 = crf_Process_Constrained(*(void *)(a8 + 224), v181, v143, &v205, &v204, v43, v48);
      if ((v147 & 0x80000000) != 0 || !v32[4])
      {
LABEL_150:
        uint64_t v156 = 0;
        goto LABEL_167;
      }
      __srca = v77;
      __int16 __dsta = (char *)v23;
      unint64_t v153 = 0;
      uint64_t v154 = 73;
      while (1)
      {
        log_OutText(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"returned labels: %s\n", v150, v151, v152, *(void *)(v205 + 8 * v153));
        char v155 = 1;
        if (cstdlib_strncmp("B", *(const char **)(v205 + 8 * v153), 1uLL))
        {
          char v155 = 1;
          if (cstdlib_strncmp("M", *(const char **)(v205 + 8 * v153), 1uLL))
          {
            if (cstdlib_strncmp("E", *(const char **)(v205 + 8 * v153), 1uLL)
              && cstdlib_strncmp("S", *(const char **)(v205 + 8 * v153), 1uLL))
            {
              goto LABEL_148;
            }
            char v155 = 3;
          }
        }
        *(unsigned char *)(*(void *)v32 + v154) = v155;
LABEL_148:
        ++v153;
        v154 += 224;
        if (v153 >= v32[4])
        {
          uint64_t v30 = (uint64_t)v197;
          uint64_t v77 = __srca;
          uint64_t v23 = (uint64_t)__dsta;
          goto LABEL_150;
        }
      }
    }
    int v144 = v77;
    __int16 v201 = 0;
    uint64_t v202 = 0;
    int v200 = 0;
    uint64_t v145 = *(void *)(a4 + 8);
    int v146 = cstdlib_strlen(*(const char **)(*(void *)v32 + 224 * v58 + 8));
    uint64_t v56 = (const char *)heap_Alloc(v145, (v146 + 2));
    if (!v56) {
      goto LABEL_152;
    }
  }
  long long v92 = 0;
  uint64_t v157 = (uint64_t)v187;
  uint64_t v156 = 0;
LABEL_159:
  log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v84, v85, v86, v87, v172);
  __int16 v195 = 0;
LABEL_160:
  heap_Free(*(void **)(a4 + 8), v157);
  heap_Free(*(void **)(a4 + 8), (uint64_t)v80);
  if (v92) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v92);
  }
  uint64_t v147 = 2315264010;
  uint64_t v77 = __src;
  if (v195) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v195);
  }
LABEL_166:
  unsigned __int16 v57 = v189;
LABEL_167:
  if (v77) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v77);
  }
  uint64_t v149 = v23;
  if (v57) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v57);
  }
  if (v156) {
    heap_Free(*(void **)(a4 + 8), v156);
  }
  uint64_t v38 = (uint64_t)v181;
  uint64_t v31 = (uint64_t)v198;
LABEL_174:
  unsigned int v159 = v32[4];
  if (v32[4])
  {
    unint64_t v160 = 0;
    do
    {
      uint64_t v161 = *(void *)(v38 + 8 * v160);
      if (v161)
      {
        heap_Free(*(void **)(a4 + 8), v161);
        unsigned int v159 = v32[4];
      }
      ++v160;
    }
    while (v160 < v159);
  }
  heap_Free(*(void **)(a4 + 8), v38);
  int v22 = v190;
  if (v43)
  {
    unsigned int v162 = v32[4];
    if (v32[4])
    {
      unint64_t v163 = 0;
      do
      {
        uint64_t v164 = *(void *)(v43 + 8 * v163);
        if (v164)
        {
          if (v48 && *(_DWORD *)(v48 + 4 * v163))
          {
            int v165 = 0;
            do
              heap_Free(*(void **)(a4 + 8), *(void *)(*(void *)(v43 + 8 * v163) + 8 * (unsigned __int16)v165++));
            while (*(_DWORD *)(v48 + 4 * v163) > (unsigned __int16)v165);
            uint64_t v164 = *(void *)(v43 + 8 * v163);
            int v22 = v190;
          }
          heap_Free(*(void **)(a4 + 8), v164);
          unsigned int v162 = v32[4];
        }
        ++v163;
      }
      while (v163 < v162);
    }
    heap_Free(*(void **)(a4 + 8), v43);
  }
  if (v48) {
    heap_Free(*(void **)(a4 + 8), v48);
  }
  uint64_t v23 = v149;
LABEL_194:
  uint64_t v148 = (uint64_t)v196;
LABEL_195:
  uint64_t v166 = v205;
  if (v205)
  {
    unsigned int v167 = v204;
    if (v204)
    {
      uint64_t v168 = v23;
      unsigned __int16 v169 = 0;
      do
      {
        uint64_t v170 = *(void *)(v205 + 8 * v169);
        if (v170)
        {
          heap_Free(*(void **)(a4 + 8), v170);
          unsigned int v167 = v204;
        }
        ++v169;
      }
      while (v167 > v169);
      uint64_t v166 = v205;
      uint64_t v23 = v168;
    }
    heap_Free(*(void **)(a4 + 8), v166);
  }
  if (v148) {
    heap_Free(*(void **)(a4 + 8), v148);
  }
  if (v191) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v191);
  }
  if (v192) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v192);
  }
  if (v193) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v193);
  }
  if (v22) {
    heap_Free(*(void **)(a4 + 8), (uint64_t)v22);
  }
  if (v31) {
    heap_Free(*(void **)(a4 + 8), v31);
  }
  if (v23) {
    heap_Free(*(void **)(a4 + 8), v23);
  }
  if (v30) {
    heap_Free(*(void **)(a4 + 8), v30);
  }
  return v147;
}

BOOL doesWordEndInCommaCrf(const char *a1)
{
  return a1
      && cstdlib_strlen(a1)
      && (a1[cstdlib_strlen(a1) - 1] == 44
       || a1[cstdlib_strlen(a1) - 1] == 58
       || a1[cstdlib_strlen(a1) - 1] == 59
       || a1[cstdlib_strlen(a1) - 1] == 46);
}

uint64_t recursiveFindSplit(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, _WORD *a6, unsigned int a7)
{
  uint64_t v9 = result;
  if (a2 <= a3)
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
    do
    {
      v10 += *(_WORD *)(result + 2 * v11);
      if (a4 >> 1 <= v10) {
        break;
      }
      ++v11;
    }
    while (a3 >= v11);
  }
  else
  {
    unsigned __int16 v10 = 0;
    unsigned __int16 v11 = a2;
  }
  if (a7 <= v10 && (int)(a4 - v10) >= (int)a7)
  {
    recursiveFindSplit(result);
    uint64_t result = recursiveFindSplit(v9);
    *(_WORD *)(a5 + 2 * (unsigned __int16)(*a6)++) = v11;
  }
  return result;
}

uint64_t getDocumentClass(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  __int16 v2 = 0;
  while (1)
  {
    int v3 = v2;
    uint64_t v4 = *(char **)(*(void *)a1 + 224 * v2 + 152);
    if (v4)
    {
      if (cstdlib_strstr(v4, "joyfulstyle")) {
        return 1;
      }
      uint64_t v5 = *(char **)(*(void *)a1 + 224 * v3 + 152);
      if (v5)
      {
        if (cstdlib_strstr(v5, "didacticstyle")) {
          return 2;
        }
        unint64_t v6 = *(char **)(*(void *)a1 + 224 * v3 + 152);
        if (v6)
        {
          if (cstdlib_strstr(v6, "neutralstyle")) {
            break;
          }
        }
      }
    }
    __int16 v2 = v3 + 1;
    if (*(unsigned __int16 *)(a1 + 8) <= (__int16)(v3 + 1)) {
      return 0;
    }
  }
  return 3;
}

BOOL respectPOIMarker(int a1)
{
  return a1 != 0;
}

uint64_t puncPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  if (!a2)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"%s\n", a6, a7, a8, (uint64_t)"input parameter: sent is NULL");
    return v8;
  }
  if (!a3)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\n", a6, a7, a8, (uint64_t)"input parameter: rules is NULL, but it is ok");
    return 0;
  }
  unsigned __int16 v11 = (int16x4_t *)(a3 + 270);
  __int16 v12 = *(_WORD *)(a3 + 242);
  int DocumentClass = getDocumentClass(a2);
  __int16 v150 = v12;
  switch(DocumentClass)
  {
    case 3:
      int8x8_t v147 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 290)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 290));
      int v24 = *(unsigned __int16 *)(a3 + 298);
      if (!*(_WORD *)(a3 + 298)) {
        int v24 = 9;
      }
      unsigned int v153 = v24;
      int v25 = *(unsigned __int16 *)(a3 + 300);
      if (!*(_WORD *)(a3 + 300)) {
        int v25 = 21;
      }
      unsigned int v148 = v25;
      int v26 = *(unsigned __int16 *)(a3 + 302);
      if (!*(_WORD *)(a3 + 302)) {
        int v26 = 6;
      }
      unsigned int v152 = v26;
      __int16 v23 = *(_WORD *)(a3 + 304);
      if (!v23) {
        goto LABEL_24;
      }
      break;
    case 2:
      int8x8_t v147 = vbsl_s8((int8x8_t)vceqz_s16(*v11), (int8x8_t)0x6001400030009, (int8x8_t)*v11);
      int v126 = *(unsigned __int16 *)(a3 + 278);
      if (!*(_WORD *)(a3 + 278)) {
        int v126 = 9;
      }
      unsigned int v153 = v126;
      int v127 = *(unsigned __int16 *)(a3 + 280);
      if (!*(_WORD *)(a3 + 280)) {
        int v127 = 21;
      }
      unsigned int v148 = v127;
      int v128 = *(unsigned __int16 *)(a3 + 282);
      if (!*(_WORD *)(a3 + 282)) {
        int v128 = 6;
      }
      unsigned int v152 = v128;
      __int16 v23 = *(_WORD *)(a3 + 284);
      if (!v23) {
        goto LABEL_24;
      }
      break;
    case 1:
      int8x8_t v147 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 250)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 250));
      int v20 = *(unsigned __int16 *)(a3 + 258);
      if (!*(_WORD *)(a3 + 258)) {
        int v20 = 9;
      }
      unsigned int v153 = v20;
      int v21 = *(unsigned __int16 *)(a3 + 260);
      if (!*(_WORD *)(a3 + 260)) {
        int v21 = 21;
      }
      unsigned int v148 = v21;
      int v22 = *(unsigned __int16 *)(a3 + 262);
      if (!*(_WORD *)(a3 + 262)) {
        int v22 = 6;
      }
      unsigned int v152 = v22;
      __int16 v23 = *(_WORD *)(a3 + 264);
      if (!v23) {
        goto LABEL_24;
      }
      break;
    default:
      int8x8_t v147 = vbsl_s8((int8x8_t)vceqz_s16(*(int16x4_t *)(a3 + 310)), (int8x8_t)0x6001400030009, *(int8x8_t *)(a3 + 310));
      int v129 = *(unsigned __int16 *)(a3 + 318);
      if (!*(_WORD *)(a3 + 318)) {
        int v129 = 9;
      }
      unsigned int v153 = v129;
      int v130 = *(unsigned __int16 *)(a3 + 320);
      if (!*(_WORD *)(a3 + 320)) {
        int v130 = 21;
      }
      unsigned int v148 = v130;
      int v131 = *(unsigned __int16 *)(a3 + 322);
      if (!*(_WORD *)(a3 + 322)) {
        int v131 = 6;
      }
      unsigned int v152 = v131;
      __int16 v23 = *(_WORD *)(a3 + 324);
      if (!v23) {
        goto LABEL_24;
      }
      break;
  }
  *(_WORD *)(a3 + 242) = v23;
LABEL_24:
  uint64_t v151 = a3;
  unsigned __int16 v161 = 0;
  int v160 = 0;
  if (*(_WORD *)(v8 + 8))
  {
    unint64_t v27 = 0;
    uint64_t v28 = 144;
    while (1)
    {
      if (doesWordEndInCommaCrf(**(const char ***)(*(void *)v8 + v28 - 128)))
      {
        uint64_t v29 = *(void *)v8;
        if (v27 + 1 < *(unsigned __int16 *)(v8 + 8)) {
          *(unsigned char *)(v29 + v28 - 71) = 4;
        }
      }
      else
      {
        uint64_t v29 = *(void *)v8;
      }
      uint64_t v30 = *(const char **)(v29 + v28 - 8);
      if (!v30) {
        goto LABEL_39;
      }
      if (cstdlib_strcmp(v30, "B") && cstdlib_strcmp(*(const char **)(*(void *)v8 + v28 - 8), "S")) {
        break;
      }
      if (v28 != 144)
      {
        uint64_t v31 = (unsigned char *)(*(void *)v8 + 224 * (v27 - 1) + 73);
LABEL_38:
        *uint64_t v31 = 4;
      }
LABEL_39:
      ++v27;
      v28 += 224;
      if (v27 >= *(unsigned __int16 *)(v8 + 8)) {
        goto LABEL_40;
      }
    }
    if (cstdlib_strcmp(*(const char **)(*(void *)v8 + v28 - 8), "E") || *(_DWORD *)(*(void *)v8 + v28) < v153) {
      goto LABEL_39;
    }
    uint64_t v31 = (unsigned char *)(*(void *)v8 + v28 - 71);
    goto LABEL_38;
  }
LABEL_40:
  printPhrases(v9, v8, v14, v15, v16, v17, v18, v19);
  uint64_t v32 = heap_Calloc(*(void **)(v9 + 8), 1024, 2);
  if (!v32)
  {
    uint64_t v8 = 2315264010;
    log_OutPublic(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v35, v36, v37, v38, v145);
    uint64_t v124 = v151;
    __int16 v125 = v12;
    goto LABEL_181;
  }
  unsigned int v159 = (_WORD *)v32;
  char v155 = (uint64_t *)(v151 + 232);
  uint64_t v157 = v9;
  if (!*(_WORD *)(v8 + 8))
  {
LABEL_97:
    printPhrases(v9, v8, v33, v34, v35, v36, v37, v38);
    int v91 = *(unsigned __int16 *)(v8 + 8);
    if (*(_WORD *)(v8 + 8))
    {
      int v92 = 0;
      do
      {
        uint64_t v93 = *(void *)v8;
        if (*(unsigned char *)(*(void *)v8 + 224 * (unsigned __int16)v92 + 73) != 3) {
          goto LABEL_137;
        }
        int v94 = v92 + 1;
        if ((unsigned __int16)(v92 + 1) < (unsigned __int16)v91)
        {
          unsigned __int16 v95 = 1;
          LODWORD(v96) = v92 + 1;
          while (1)
          {
            int v97 = *(unsigned __int8 *)(v93 + 224 * (unsigned __int16)v96 + 73);
            if (v97 == 3)
            {
              ++v95;
            }
            else if (v97 == 4)
            {
              goto LABEL_108;
            }
            LODWORD(v96) = v96 + 1;
            if ((unsigned __int16)v96 >= (unsigned __int16)v91)
            {
              LODWORD(v96) = v91;
LABEL_108:
              if (v95 == 1)
              {
                int v94 = v96;
                break;
              }
              unsigned __int16 v98 = v92 + 1;
              if ((v92 & 0x8000) == 0)
              {
                do
                {
                  if (*(unsigned char *)(v93 + 224 * (unsigned __int16)v92 + 73) == 4) {
                    goto LABEL_114;
                  }
                  int v99 = (__int16)v92;
                  LOWORD(v92) = v92 - 1;
                }
                while (v99 > 0);
                LOWORD(v92) = -1;
LABEL_114:
                unsigned __int16 v98 = v92 + 1;
              }
              if (v95 < 9u)
              {
                __int16 v100 = v95;
              }
              else
              {
                LODWORD(v96) = v94;
                __int16 v100 = 8;
              }
              if (v95 < 9u || (unsigned __int16)v94 >= (unsigned __int16)v91) {
                goto LABEL_129;
              }
              int v101 = 0;
              uint64_t v96 = (unsigned __int16)v94;
              long long v102 = (unsigned char *)(v93 + 224 * (unsigned __int16)v94 + 73);
              while (1)
              {
                int v103 = *v102;
                if (v103 == 3)
                {
                  if ((unsigned __int16)++v101 >= 8u)
                  {
                    unsigned char *v102 = 4;
LABEL_128:
                    __int16 v100 = 8;
LABEL_129:
                    BOOL v104 = (unsigned __int16)v96 == (unsigned __int16)v91;
                    int v92 = v96 - v104;
                    if (v98 > (unsigned __int16)(v96 - v104)) {
                      goto LABEL_135;
                    }
                    int v105 = 0;
                    unsigned __int16 v106 = v98;
                    do
                    {
                      unsigned int v107 = v106;
                      if (!cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * v106 + 16), "comma"))
                      {
                        unsigned __int16 v108 = **(const char ***)(*(void *)v8 + 224 * v107 + 16);
                        __int16 v109 = cstdlib_strlen(v108);
                        v105 += Utf8_LengthInUtf8chars((unint64_t)v108, v109);
                      }
                      unsigned __int16 v106 = v107 + 1;
                    }
                    while ((unsigned __int16)(v107 + 1) <= (unsigned __int16)v92);
                    if (v148 <= (unsigned __int16)v105)
                    {
                      LOWORD(v160) = v105;
                      HIWORD(v160) = v100;
                      uint64_t v9 = v157;
                      astar_search(v157, (uint64_t *)v8, v98, (unsigned __int16)v92, (unsigned __int16 *)&v160, v155);
                    }
                    else
                    {
LABEL_135:
                      uint64_t v9 = v157;
                    }
LABEL_137:
                    int v94 = v92 + 1;
                    int v91 = *(unsigned __int16 *)(v8 + 8);
                    goto LABEL_138;
                  }
                }
                else if (v103 == 4)
                {
                  goto LABEL_128;
                }
                ++v96;
                v102 += 224;
                if ((unsigned __int16)v91 == v96)
                {
                  __int16 v100 = 8;
                  LODWORD(v96) = v91;
                  goto LABEL_129;
                }
              }
            }
          }
        }
LABEL_138:
        int v92 = v94;
      }
      while ((unsigned __int16)v94 < (unsigned __int16)v91);
    }
    printPhrases(v9, v8, v85, v86, v87, v88, v89, v90);
    int v116 = *(unsigned __int16 *)(v8 + 8);
    int v117 = v116 - 2;
    LOWORD(v118) = *(_WORD *)(v8 + 8);
    while (1)
    {
      int v118 = (__int16)(v118 - 1);
      if (v118 < 1) {
        break;
      }
      LOWORD(v119) = v117;
      uint64_t v120 = *(void *)v8;
      --v117;
      if (*(void *)(*(void *)v8 + 224 * (unsigned __int16)v118 + 136))
      {
        *(unsigned char *)(v120 + 224 * (unsigned __int16)v118 + 73) = 4;
        uint64_t v119 = (unsigned __int16)v119;
        int v121 = (unsigned __int16)(v116 - 1) - (__int16)(v116 - 2);
        uint64_t v122 = v120 + 224 * (unsigned __int16)v119 + 73;
        while (!*(void *)(v122 + 63) || *(unsigned char *)v122 != 4)
        {
          int v123 = (__int16)v119--;
          ++v121;
          v122 -= 224;
          if (v123 <= 0) {
            goto LABEL_166;
          }
        }
        if (v121 <= v147.u16[1]) {
          *(unsigned char *)uint64_t v122 = 3;
        }
        break;
      }
    }
LABEL_166:
    printPhrases(v9, v8, v110, v111, v112, v113, v114, v115);
    if (*(_WORD *)(v8 + 8))
    {
      int v138 = 0;
      do
      {
        unsigned int v139 = (unsigned __int16)v138;
        if (*(unsigned char *)(*(void *)v8 + 224 * (unsigned __int16)v138 + 73) == 4
          && !doesWordEndInCommaCrf(**(const char ***)(*(void *)v8 + 224 * (unsigned __int16)v138 + 16)))
        {
          int v140 = 0;
          do
          {
            if (*(unsigned __int16 *)(v8 + 8) <= (unsigned __int16)++v138) {
              break;
            }
            uint64_t v141 = 224 * (unsigned __int16)v138;
            uint64_t v142 = **(const char ***)(*(void *)v8 + v141 + 16);
            __int16 v143 = cstdlib_strlen(v142);
            v140 += Utf8_LengthInUtf8chars((unint64_t)v142, v143);
          }
          while (*(unsigned char *)(*(void *)v8 + v141 + 73) != 4);
          if (v152 > (unsigned __int16)v140) {
            *(unsigned char *)(*(void *)v8 + 224 * v139 + 73) = 3;
          }
        }
        else
        {
          ++v138;
        }
      }
      while (*(unsigned __int16 *)(v8 + 8) > (unsigned __int16)v138);
    }
    printPhrases(v9, v8, v132, v133, v134, v135, v136, v137);
    uint64_t v8 = 0;
    goto LABEL_179;
  }
  int v39 = 0;
  unsigned __int16 v154 = 0;
  uint64_t v40 = 0;
  int v41 = 0;
  int v156 = 1024;
  int v149 = 0;
  while (1)
  {
    int v42 = *(unsigned __int8 *)(*(void *)v8 + 224 * (unsigned __int16)v41 + 73);
    if (v42 == 4) {
      goto LABEL_93;
    }
    if (v42 == 3) {
      break;
    }
LABEL_94:
    int v39 = (unsigned __int16)++v41;
    if ((unsigned __int16)v41 >= *(unsigned __int16 *)(v8 + 8)) {
      goto LABEL_97;
    }
  }
  uint64_t v158 = v40;
  uint64_t v43 = (unsigned __int16)v40;
  if (cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * (unsigned __int16)v40 + 16), "comma"))
  {
    int v44 = 0;
  }
  else
  {
    uint64_t v45 = **(const char ***)(*(void *)v8 + 224 * v43 + 16);
    __int16 v46 = cstdlib_strlen(v45);
    int v44 = Utf8_LengthInUtf8chars((unint64_t)v45, v46);
  }
  unsigned __int16 v47 = v158 + 1;
  if ((unsigned __int16)(v158 + 1) <= (unsigned __int16)v41)
  {
    unsigned __int16 v48 = v158 + 1;
    do
    {
      unsigned int v49 = v48;
      if (!cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * v48 + 16), "comma"))
      {
        int v50 = **(const char ***)(*(void *)v8 + 224 * v49 + 16);
        __int16 v51 = cstdlib_strlen(v50);
        v44 += Utf8_LengthInUtf8chars((unint64_t)v50, v51);
      }
      unsigned __int16 v48 = v49 + 1;
    }
    while ((unsigned __int16)(v49 + 1) <= (unsigned __int16)v41);
  }
  uint64_t v52 = heap_Alloc(*(void *)(v157 + 8), (4 * (unsigned __int16)v44) | 2);
  if (!v52)
  {
    uint64_t v8 = 2315264010;
    uint64_t v124 = v151;
    __int16 v125 = v150;
    uint64_t v9 = v157;
    goto LABEL_180;
  }
  uint64_t v53 = (char *)v52;
  if (cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * v43 + 16), "comma"))
  {
    int v57 = 0;
    char *v53 = 0;
  }
  else
  {
    unint64_t v58 = **(const char ***)(*(void *)v8 + 224 * v43 + 16);
    __int16 v59 = cstdlib_strlen(v58);
    *unsigned int v159 = Utf8_LengthInUtf8chars((unint64_t)v58, v59);
    cstdlib_strcpy(v53, **(const char ***)(*(void *)v8 + 224 * v43 + 16));
    int v57 = 1;
  }
  if (v39 - (unsigned __int16)v158 + v57 > v156)
  {
    uint64_t v60 = 2 * (unsigned __int16)(v39 - v158 + v57);
    if (v60 > 0x1000)
    {
      uint64_t v9 = v157;
      log_OutText(*(void *)(v157 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Memory exceeds upper boundary: %d/%d", v54, v55, v56, 2 * (unsigned __int16)(v39 - v158 + v57));
      uint64_t v8 = 2315264015;
    }
    else
    {
      uint64_t v61 = heap_Realloc(*(uint64_t **)(v157 + 8), (uint64_t)v159, v60);
      if (v61)
      {
        int v156 = (unsigned __int16)(v39 - v158 + v57);
        unsigned int v159 = (_WORD *)v61;
        goto LABEL_64;
      }
      uint64_t v8 = 2315264010;
      uint64_t v9 = v157;
    }
    heap_Free(*(void **)(v9 + 8), (uint64_t)v53);
    goto LABEL_179;
  }
LABEL_64:
  while (v47 <= (unsigned __int16)v41)
  {
    if (!cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * v47 + 16), "comma"))
    {
      cstdlib_strcat(v53, **(const char ***)(*(void *)v8 + 224 * v47 + 16));
      int v62 = **(const char ***)(*(void *)v8 + 224 * v47 + 16);
      __int16 v63 = cstdlib_strlen(v62);
      v159[(unsigned __int16)v57] = Utf8_LengthInUtf8chars((unint64_t)v62, v63);
      LOWORD(v57) = v57 + 1;
    }
    ++v47;
  }
  __int16 v64 = cstdlib_strlen(v53);
  unsigned __int16 v65 = Utf8_LengthInUtf8chars((unint64_t)v53, v64);
  uint64_t v9 = v157;
  log_OutText(*(void *)(v157 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WEAK PHRASE:%s %d\n", v66, v67, v68, (uint64_t)v53);
  int v69 = cstdlib_strlen(v53);
  unsigned int CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)v53, v69 - 1);
  utf8_getUTF8Char((uint64_t)v53, CurrentUtf8Offset, v162);
  heap_Free(*(void **)(v157 + 8), (uint64_t)v53);
  if (v65 && applyRules(v157, v8, (unsigned __int16)v41, v155) == 1)
  {
    v154 += v65;
    int v149 = v41;
    uint64_t v40 = v158;
    goto LABEL_94;
  }
  if (v65 < v147.u16[0])
  {
LABEL_93:
    uint64_t v40 = (v41 + 1);
    goto LABEL_94;
  }
  if (v65 - v154 <= v147.u16[3] && v154)
  {
    unsigned __int16 v154 = 0;
    int v149 = 0;
    goto LABEL_72;
  }
  if (v154)
  {
    unsigned __int16 v154 = 0;
    int v41 = v149 + 1;
    uint64_t v40 = (v149 + 1);
    int v149 = 0;
    goto LABEL_94;
  }
  if (v65 < v147.u16[2] && applyRules(v157, v8, (unsigned __int16)v41, v155) != 1)
  {
LABEL_72:
    *(unsigned char *)(*(void *)v8 + 224 * (unsigned __int16)v41 + 73) = 4;
    goto LABEL_93;
  }
  if ((unsigned __int16)v57 < 0x801u)
  {
    uint64_t v71 = heap_Calloc(*(void **)(v157 + 8), 1, 2 * (unsigned __int16)v57);
    if (!v71)
    {
      uint64_t v8 = 2315264010;
      log_OutPublic(*(void *)(v157 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v72, v73, v74, v75, v146);
      goto LABEL_179;
    }
    uint64_t v76 = v71;
    unsigned __int16 v161 = 0;
    recursiveFindSplit((uint64_t)v159, 0, (unsigned __int16)v57, v65, v71, &v161, v153);
    if ((unsigned __int16)v158 <= (unsigned __int16)v41)
    {
      unsigned __int16 v77 = 0;
      unsigned __int16 v78 = v158;
      do
      {
        unsigned int v79 = v78;
        int v80 = v78;
        if (cstdlib_strstr(**(char ***)(*(void *)v8 + 224 * v78 + 16), "comma")) {
          BOOL v81 = 1;
        }
        else {
          BOOL v81 = v80 == (unsigned __int16)v158;
        }
        if (!v81) {
          ++v77;
        }
        uint64_t v82 = v161;
        int v83 = (unsigned __int16 *)v76;
        if (v161)
        {
          while (1)
          {
            int v84 = *v83++;
            if (v84 == v77) {
              break;
            }
            if (!--v82) {
              goto LABEL_91;
            }
          }
          if (applyRules(v157, v8, v79, v155) != 1) {
            *(unsigned char *)(*(void *)v8 + 224 * v79 + 73) = 4;
          }
        }
LABEL_91:
        unsigned __int16 v78 = v79 + 1;
      }
      while ((unsigned __int16)(v79 + 1) <= (unsigned __int16)v41);
    }
    heap_Free(*(void **)(v157 + 8), v76);
    goto LABEL_93;
  }
  log_OutText(*(void *)(v157 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"Memory exceeds upper boundary: %d/%d", v36, v37, v38, 2 * (unsigned __int16)v57);
  uint64_t v8 = 2315264015;
LABEL_179:
  uint64_t v124 = v151;
  __int16 v125 = v150;
LABEL_180:
  heap_Free(*(void **)(v9 + 8), (uint64_t)v159);
LABEL_181:
  *(_WORD *)(v124 + 242) = v125;
  return v8;
}

uint64_t printPhrases(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a2 + 8))
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = log_OutText(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s\t\t%s\n", a6, a7, a8, **(void **)(*(void *)a2 + v10 + 16));
      ++v11;
      v10 += 224;
    }
    while (v11 < *(unsigned __int16 *)(a2 + 8));
  }
  return result;
}

uint64_t hlp_BrokerString(uint64_t a1, unsigned char *a2, const char *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v7 = 0;
  __s2 = 0;
  int v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v10 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v7);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcpy(__dst, a3);
      cstdlib_strcat(__dst, "_");
      cstdlib_strcat(__dst, __s2);
      cstdlib_strcat(__dst, "_");
      cstdlib_strcat(__dst, v7);
      return brokeraux_ComposeBrokerString(a1, __dst, 1, 1, __s2, 0, 0, a2, 0x100uLL);
    }
  }
  return result;
}

uint64_t getTokenRuleset(uint64_t a1, __int16 a2, _DWORD *a3, _WORD *a4)
{
  __int16 v19 = 0;
  *a3 = 0;
  __int16 v16 = a2;
  int v14 = 0;
  int v15 = 2;
  __int16 v17 = 0;
  __int16 v18 = 0;
  if (!*(_WORD *)(a1 + 192)) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = a1 + 8;
  long long v10 = (const char **)(a1 + 1088);
  long long v11 = (unsigned __int16 *)(a1 + 1104);
  uint64_t v12 = a1 + 672;
  do
  {
    uint64_t result = matchPANDPRULE_TRule(*(unsigned int *)(a1 + 1108), v10, v11, *(char **)(a1 + 1096), v9, v12, *(void *)(*(void *)(a1 + 184) + v7), (uint64_t)&v15, &v14);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if (v14)
    {
      if (v14 == 1)
      {
        *a3 = 1;
        *a4 = v8;
      }
      return result;
    }
    ++v8;
    v7 += 40;
  }
  while (v8 < *(unsigned __int16 *)(a1 + 192));
  return result;
}

uint64_t handleTokenWord(uint64_t a1, unsigned int a2, int a3, unsigned __int16 *a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)&v53[2] = 0;
  int v49 = 0;
  int v47 = 0;
  int v48 = 0;
  FLOATSUR_SET_INT(&v49, 0, 0);
  FLOATSUR_SET_INT(&v48, *(_WORD *)(*(void *)(a1 + 672) + 224 * a2 + 24), 0);
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    [1] apply word weight rules", v11, v12, v13, 0);
  unsigned int v44 = a2;
  __int16 v52 = a2;
  int v50 = 0;
  int v51 = 1;
  *(_DWORD *)uint64_t v53 = 0;
  unsigned int v14 = a6;
  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v45 = a6;
  int v42 = a3;
  uint64_t v43 = a4;
  if (*(_WORD *)(v15 + 40 * a6 + 32))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    while (1)
    {
      uint64_t matched = matchMAPRULE2NUMANDOPERATOR_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (unsigned __int16 *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, *(void *)(v15 + 40 * v14 + 24) + v16, (uint64_t)&v51, &v50, (unsigned __int16 *)&v49);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v22 = v50;
      if (v50 == 1)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    wordwweight : rulset %d, idx %d FIRED wordWeight=%d.%d", v18, v19, v20, v45);
        int v22 = v50;
      }
      if (!v22)
      {
        ++v17;
        uint64_t v15 = *(void *)(a1 + 184);
        v16 += 32;
        if (v17 < *(unsigned __int16 *)(v15 + 40 * v14 + 32)) {
          continue;
        }
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t matched = 0;
LABEL_10:
    FLOATSUR_PLUS(&v47, (unsigned __int16 *)&v49, (unsigned __int16 *)&v48);
    FLOATSUR_PLUS(v43, v43, (unsigned __int16 *)&v47);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    runningPhraseWeight=%d.%d (wordWeight=%d.%d pronWeight=%d.%d)", v23, v24, v25, *v43);
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    [2] apply token rules", v26, v27, v28, 0);
    __int16 v52 = v44;
    int v50 = 0;
    int v51 = 1;
    *(_DWORD *)uint64_t v53 = 0;
    uint64_t v32 = *(void *)(a1 + 184);
    if (*(_WORD *)(v32 + 40 * v14 + 16))
    {
      unint64_t v33 = 0;
      uint64_t v34 = 8;
      while (1)
      {
        uint64_t matched = matchMAPRULE2NUM_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (unsigned __int16 *)(a1 + 1104), *(char **)(a1 + 1096), a1 + 8, a1 + 672, (_DWORD *)(*(void *)(v32 + 40 * v14 + 8) + v34 - 8), (uint64_t)&v51, &v50, a5);
        if ((matched & 0x80000000) != 0) {
          break;
        }
        if (v50 == 1)
        {
          uint64_t matched = logPANDPRULE_TRule(*(unsigned int *)(a1 + 1108), (const char **)(a1 + 1088), (unsigned __int16 *)(a1 + 1104), *(char **)(a1 + 1096), (uint64_t *)(a1 + 8), (uint64_t **)(*(void *)(*(void *)(a1 + 184) + 40 * v14 + 8) + v34));
          if ((matched & 0x80000000) == 0)
          {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    FIRED : ruleset %d, idx %d <%s> bndWeight=%d.%d", v38, v39, v40, v45);
            cstdlib_strcpy(*(char **)(a1 + 1088), "");
          }
          return matched;
        }
        ++v33;
        uint64_t v32 = *(void *)(a1 + 184);
        v34 += 32;
        if (v33 >= *(unsigned __int16 *)(v32 + 40 * v14 + 16))
        {
          if (v50) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    no token rules fire.", v29, v30, v31, 0);
LABEL_17:
      if (v44 + 1 == v42)
      {
        FLOATSUR_SET_INT(a5, *(_WORD *)(a1 + 176), 0);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"    END token word; set TOKENENDWORDBNDWEIGHT bndWeight=%d.%d",
          v35,
          v36,
          v37,
          *(unsigned __int16 *)a5);
      }
      else
      {
        FLOATSUR_SET_INT(a5, 0, 0);
      }
    }
  }
  return matched;
}

uint64_t getPhrasingForToken(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  uint64_t v27 = 0;
  int v26 = 0;
  unsigned __int16 v25 = 0;
  uint64_t v6 = *(void *)(a1[84] + 224 * a3 + 56) + 32 * *((unsigned __int16 *)a1 + 15);
  uint64_t v7 = *(void *)(v6 + 16);
  __int16 v8 = *(_WORD *)(v6 + 10);
  FLOATSUR_SET_INT((_WORD *)&v27 + 2, 0, 0);
  FLOATSUR_SET_INT(&v27, 0, 0);
  uint64_t TokenRuleset = getTokenRuleset((uint64_t)a1, v3, &v26, &v25);
  if ((TokenRuleset & 0x80000000) != 0) {
    return TokenRuleset;
  }
  uint64_t v13 = *(void *)(*a1 + 32);
  if (v26 == 1)
  {
    unsigned __int16 v14 = v8 + 1;
    uint64_t v15 = v25;
    log_OutText(v13, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  using token rule set %d (for \"%s\")", v10, v11, v12, v25);
    unsigned int v24 = (unsigned __int16)(v14 - v3);
    unsigned __int16 v19 = v3;
    do
    {
      unsigned __int16 v20 = v3;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  doing token word[%d]=%s", v16, v17, v18, v3);
      uint64_t v21 = handleTokenWord((uint64_t)a1, v3, v14, (unsigned __int16 *)&v27 + 2, &v27, v15);
      if ((v21 & 0x80000000) != 0) {
        break;
      }
      if (FLOATSUR_GT_INT((unsigned __int16 *)&v27, 0, 0))
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  add token node %d,%d", v16, v17, v18, v19);
        uint64_t v21 = addNode(*a1, a2, v19, v3 + 1, 2, v24);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        *(_DWORD *)(*(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8) - 24) = HIDWORD(v27);
        uint64_t v22 = *(void *)a2 + 32 * *(unsigned __int16 *)(a2 + 8);
        *(_DWORD *)(v22 - 12) = 1;
        *(_DWORD *)(v22 - 20) = v27;
        FLOATSUR_SET_INT((_WORD *)&v27 + 2, 0, 0);
        FLOATSUR_SET_INT(&v27, 0, 0);
        unsigned __int16 v19 = v3 + 1;
      }
      ++v3;
    }
    while ((unsigned __int16)(v20 + 1) < v14);
  }
  else
  {
    log_OutText(v13, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"  no rules match for token type =%s", v10, v11, v12, v7);
    return 2315264000;
  }
  return v21;
}

uint64_t assignTokenPOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v42 = 0;
  unsigned __int16 v8 = *(_WORD *)(a1 + 680);
  if (!v8) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  uint64_t matched = 0;
  uint64_t v12 = a1 + 672;
  memset(v41, 0, sizeof(v41));
  uint64_t v13 = a1 + 8;
  unsigned __int16 v14 = (const char **)(a1 + 1088);
  uint64_t v15 = (unsigned __int16 *)(a1 + 1104);
  uint64_t v16 = *(void *)(a1 + 672);
  uint64_t v40 = (unsigned __int16 *)(a1 + 1104);
  while (1)
  {
    uint64_t v17 = *(void *)(v16 + 224 * v10 + 56);
    if (!v17) {
      goto LABEL_7;
    }
    uint64_t v18 = *(unsigned __int16 *)(a1 + 30);
    if (*(_DWORD *)(v17 + 32 * v18) != 1) {
      goto LABEL_7;
    }
    unsigned int v19 = *(unsigned __int16 *)(*(void *)(v16 + 224 * v10 + 56) + 32 * v18 + 10);
    if (v19 >= v10) {
      break;
    }
LABEL_6:
    unsigned __int16 v10 = v19;
LABEL_7:
    if (++v10 >= v8) {
      return matched;
    }
  }
  unsigned int v39 = v10;
  while (1)
  {
    int v42 = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get token POS for \"%s\"", a6, a7, a8, *(void *)(*(void *)(v16 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 24)));
    if (!v42)
    {
      if (*(_WORD *)(a1 + 128)) {
        break;
      }
    }
LABEL_11:
    ++v10;
    uint64_t v16 = *(void *)(a1 + 672);
    unsigned int v19 = *(unsigned __int16 *)(*(void *)(v16 + 224 * v39 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 10);
    if (v19 < v10)
    {
      unsigned __int16 v8 = *(_WORD *)(a1 + 680);
      goto LABEL_6;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  while (1)
  {
    *(_WORD *)&v41[4] = v10;
    *(_DWORD *)int v41 = 1;
    *(_DWORD *)&v41[6] = 0;
    uint64_t matched = matchMAPRULE2STR_TRule(*(unsigned int *)(a1 + 1108), v14, v15, *(char **)(a1 + 1096), v13, v12, *(void *)(a1 + 120) + v20, (uint64_t)v41, &v42);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v22 = v42;
    if (v42 == 1)
    {
      uint64_t v23 = v14;
      uint64_t v24 = v13;
      uint64_t v25 = v12;
      uint64_t v26 = 224 * v10;
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"POS tagging rule %d FIRED (word %d) \"%s\" -> \"%s\"", a6, a7, a8, v21);
      uint64_t v27 = *(void *)(a1 + 672);
      if (!*(void *)(v27 + v26 + 88))
      {
        int v28 = cstdlib_strcmp("UNK", (const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * *(unsigned int *)(*(void *)(a1 + 120) + v20))));
        uint64_t v27 = *(void *)(a1 + 672);
        if (!v28)
        {
          uint64_t v29 = *(void **)(*(void *)a1 + 8);
          unsigned __int16 v30 = cstdlib_strlen(*(const char **)(*(void *)(v27 + v26 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)));
          uint64_t v31 = (char *)heap_Calloc(v29, 1, v30 + 1);
          uint64_t v36 = *(void *)(a1 + 672);
          *(void *)(v36 + v26 + 88) = v31;
          if (!v31)
          {
            log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v32, v33, v34, v35, v38);
            return 2315264010;
          }
          cstdlib_strcpy(v31, *(const char **)(*(void *)(v36 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)));
          uint64_t v27 = *(void *)(a1 + 672);
        }
      }
      uint64_t matched = doMapStr(*(void *)a1, (const char **)(*(void *)(v27 + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)), (char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544) + 4* *(unsigned int *)(*(void *)(a1 + 120) + v20))));
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      int v22 = v42;
      uint64_t v12 = v25;
      uint64_t v13 = v24;
      unsigned __int16 v14 = v23;
      uint64_t v15 = v40;
    }
    if (!v22)
    {
      ++v21;
      v20 += 32;
      if (v21 < *(unsigned __int16 *)(a1 + 128)) {
        continue;
      }
    }
    goto LABEL_11;
  }
}

uint64_t assignTokenTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v31 = 0;
  unsigned __int16 v30 = 0;
  unsigned __int16 v8 = *(_WORD *)(a1 + 680);
  if (!v8) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (uint64_t *)(a1 + 672);
  memset(v29, 0, 12);
  uint64_t v13 = (unsigned __int16 *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 672);
  while (1)
  {
    unsigned int v15 = v10;
    uint64_t v16 = *(void *)(v14 + 224 * v10 + 56);
    if (!v16) {
      goto LABEL_7;
    }
    uint64_t v17 = *(unsigned __int16 *)(a1 + 30);
    if (*(_DWORD *)(v16 + 32 * v17) != 1) {
      goto LABEL_7;
    }
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(v14 + 224 * v10 + 56) + 32 * v17 + 10);
    if (v18 >= v10) {
      break;
    }
LABEL_6:
    unsigned __int16 v10 = v18;
LABEL_7:
    if (++v10 >= v8) {
      return v11;
    }
  }
  while (1)
  {
    int v31 = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get token tag for word %d \"%s\"", a6, a7, a8, v10);
    if (!v31)
    {
      unint64_t v19 = 0;
      while (v19 < *(unsigned __int16 *)(a1 + 152))
      {
        if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v19) == 1)
        {
          WORD2(v29[0]) = v10;
          LODWORD(v29[0]) = 1;
          *(_DWORD *)((char *)v29 + 6) = 0;
          uint64_t matched = matchMMAPREGEX2STR_TRule(v13, (uint64_t)v12, *(unsigned __int16 **)(*(void *)(a1 + 136) + 8 * v19), (unsigned __int16 *)v29, &v31, (uint64_t)&v30, a7, a8);
        }
        else
        {
          uint64_t matched = matchMAPSTRSTR_TRule((uint64_t)v13, v12, *(unsigned int **)(*(void *)(a1 + 136) + 8 * v19), (uint64_t)v29, &v31, a6, a7, a8);
        }
        uint64_t v11 = matched;
        if ((matched & 0x80000000) != 0) {
          return v11;
        }
        int v21 = v31;
        if (v31 == 1)
        {
          uint64_t v22 = *(void *)(*(void *)a1 + 32);
          if (*(_DWORD *)(*(void *)(a1 + 144) + 4 * v19) == 1)
          {
            log_OutText(v22, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"regex rule %d FIRED \"%s\" -> \"%s\"", a6, a7, a8, v30);
            uint64_t v23 = *(void *)a1;
            uint64_t v24 = *(void *)(a1 + 536);
            uint64_t v25 = *(void *)(a1 + 544);
            uint64_t v26 = *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 8);
          }
          else
          {
            log_OutText(v22, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"normal rule FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v10 + 16) + 8 * *(unsigned __int16 *)(a1 + 24)));
            uint64_t v23 = *(void *)a1;
            uint64_t v24 = *(void *)(a1 + 536);
            uint64_t v25 = *(void *)(a1 + 544);
            uint64_t v26 = *(unsigned int *)(*(void *)(*(void *)(a1 + 136) + 8 * v19) + 4);
          }
          uint64_t v11 = addTokenTag(v23, v10, (char *)(v24 + *(unsigned int *)(v25 + 4 * v26)), (uint64_t)v13, v12);
          if ((v11 & 0x80000000) != 0) {
            return v11;
          }
          int v21 = v31;
        }
        ++v19;
        if (v21) {
          goto LABEL_10;
        }
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no matches found", a6, a7, a8, v28);
      uint64_t v11 = addTokenTag(*(void *)a1, v10, "UNK", (uint64_t)v13, v12);
      if ((v11 & 0x80000000) != 0) {
        return v11;
      }
    }
LABEL_10:
    ++v10;
    uint64_t v14 = *(void *)(a1 + 672);
    unsigned int v18 = *(unsigned __int16 *)(*(void *)(v14 + 224 * v15 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 10);
    if (v18 < v10)
    {
      unsigned __int16 v8 = *(_WORD *)(a1 + 680);
      goto LABEL_6;
    }
  }
}

uint64_t extendPHRContainingTokenTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_WORD *)(a1 + 680)) {
    return 0;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 0;
  LODWORD(v13) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 672);
  while (1)
  {
    uint64_t v16 = *(void *)(v15 + 224 * v9 + 56);
    if (!v16) {
      goto LABEL_46;
    }
    uint64_t v17 = *(unsigned __int16 *)(a1 + 32);
    if (*(_DWORD *)(v16 + 32 * v17) == 1)
    {
      uint64_t v18 = v16 + 32 * v17;
      uint64_t v13 = *(unsigned __int16 *)(v18 + 10);
      uint64_t v19 = *(unsigned __int16 *)(v18 + 8);
      uint64_t v14 = (unsigned __int16)v9;
      if (v19 >= v13)
      {
        int v11 = 0;
        int v12 = 0;
      }
      else
      {
        int v12 = 0;
        uint64_t v20 = (void *)(v15 + 224 * *(unsigned __int16 *)(v18 + 8) + 56);
        uint64_t v21 = v13 - v19;
        do
        {
          if (*v20 && *(_DWORD *)(*v20 + 32 * *(unsigned __int16 *)(a1 + 30)) == 1) {
            ++v12;
          }
          v20 += 28;
          --v21;
        }
        while (v21);
        int v11 = 0;
      }
    }
    uint64_t v22 = *(unsigned __int16 *)(a1 + 30);
    uint64_t v23 = v16 + 32 * v22;
    if (!*(void *)(v23 + 16)) {
      goto LABEL_46;
    }
    int v24 = v11 + 1;
    BOOL v25 = (_WORD)v11 || v9 == v14;
    BOOL v26 = !v25;
    unsigned int v27 = *(unsigned __int16 *)(v23 + 10);
    uint64_t v28 = *(void *)(v15 + 224 * *(unsigned __int16 *)(v23 + 10) + 56);
    if (!v28) {
      break;
    }
    BOOL v30 = *(_DWORD *)(v28 + 32 * v22 + 4) == 1
       && v27 < v13
       && (unsigned __int16)v24 == (unsigned __int16)v12;
    int v31 = v30;
    if (v30 && v26)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Left and Right", a6, a7, a8, v10);
      uint64_t v33 = *(void *)(a1 + 672);
      uint64_t v34 = *(unsigned __int16 *)(a1 + 30);
      uint64_t v35 = *(void *)(v33 + 224 * v9 + 56) + 32 * v34;
      *(_DWORD *)uint64_t v35 = 0;
      *(_DWORD *)(*(void *)(v33 + 224 * v27 + 56) + 32 * v34 + 4) = 0;
      uint64_t v36 = *(void *)(v33 + 224 * v14 + 56) + 32 * v34;
      *(_DWORD *)uint64_t v36 = 1;
      *(_WORD *)(v36 + 8) = v14;
      *(_WORD *)(v36 + 10) = v13;
      *(_DWORD *)(v36 + 24) = 1;
      uint64_t v37 = *(void **)(*(void *)a1 + 8);
      int v38 = cstdlib_strlen(*(const char **)(v35 + 16));
      unsigned int v39 = (char *)heap_Calloc(v37, 1, (v38 + 1));
      uint64_t v44 = *(void *)(a1 + 672);
      uint64_t v45 = *(unsigned __int16 *)(a1 + 30);
      *(void *)(*(void *)(v44 + 224 * v14 + 56) + 32 * v45 + 16) = v39;
      if (!v39) {
        goto LABEL_48;
      }
      cstdlib_strcpy(v39, *(const char **)(*(void *)(v44 + 224 * v9 + 56) + 32 * v45 + 16));
      heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v9 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 16));
      uint64_t v15 = *(void *)(a1 + 672);
      uint64_t v46 = *(unsigned __int16 *)(a1 + 30);
      *(void *)(*(void *)(v15 + 224 * v9 + 56) + 32 * v46 + 16) = 0;
      uint64_t v47 = *(void *)(v15 + 224 * v13 + 56) + 32 * v46;
      int v11 = 1;
      *(_DWORD *)(v47 + 4) = 1;
      *(_WORD *)(v47 + 8) = v14;
    }
    else
    {
      if (v26) {
        goto LABEL_39;
      }
      if (!v31)
      {
LABEL_45:
        int v11 = v24;
        goto LABEL_46;
      }
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Right", a6, a7, a8, v10);
      uint64_t v15 = *(void *)(a1 + 672);
      uint64_t v58 = *(unsigned __int16 *)(a1 + 30);
      *(_DWORD *)(*(void *)(v15 + 224 * v27 + 56) + 32 * v58 + 4) = 0;
      uint64_t v59 = *(void *)(v15 + 224 * v9 + 56) + 32 * v58;
      *(_WORD *)(v59 + 10) = v13;
      *(_DWORD *)(v59 + 24) = 1;
      uint64_t v60 = *(void *)(v15 + 224 * v13 + 56) + 32 * v58;
      *(_DWORD *)(v60 + 4) = 1;
      *(_WORD *)(v60 + 8) = *(_WORD *)(v59 + 8);
      int v11 = v12;
    }
LABEL_46:
    uint64_t v10 = ++v9;
    if (v9 >= *(unsigned __int16 *)(a1 + 680)) {
      return 0;
    }
  }
  if (!v26) {
    goto LABEL_45;
  }
LABEL_39:
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Extend token at %d to Left", a6, a7, a8, v10);
  uint64_t v15 = *(void *)(a1 + 672);
  uint64_t v48 = *(void *)(v15 + 224 * v9 + 56);
  uint64_t v49 = *(unsigned __int16 *)(a1 + 30);
  *(_DWORD *)(v48 + 32 * v49) = 0;
  uint64_t v50 = *(void *)(v15 + 224 * v14 + 56);
  if (!v50)
  {
LABEL_42:
    *(_WORD *)(*(void *)(v15 + 224 * *(unsigned __int16 *)(v48 + 32 * v49 + 10) + 56) + 32 * v49 + 8) = v14;
    int v11 = 1;
    goto LABEL_46;
  }
  uint64_t v51 = v50 + 32 * v49;
  *(_DWORD *)uint64_t v51 = 1;
  *(_WORD *)(v51 + 8) = v14;
  uint64_t v52 = v48 + 32 * v49;
  *(_WORD *)(v51 + 10) = *(_WORD *)(v52 + 10);
  *(_DWORD *)(v51 + 24) = 1;
  uint64_t v53 = *(void **)(*(void *)a1 + 8);
  int v54 = cstdlib_strlen(*(const char **)(v52 + 16));
  uint64_t v55 = (char *)heap_Calloc(v53, 1, (v54 + 1));
  uint64_t v56 = *(void *)(a1 + 672);
  uint64_t v57 = *(unsigned __int16 *)(a1 + 30);
  *(void *)(*(void *)(v56 + 224 * v14 + 56) + 32 * v57 + 16) = v55;
  if (v55)
  {
    cstdlib_strcpy(v55, *(const char **)(*(void *)(v56 + 224 * v9 + 56) + 32 * v57 + 16));
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(*(void *)(*(void *)(a1 + 672) + 224 * v9 + 56) + 32 * *(unsigned __int16 *)(a1 + 30) + 16));
    uint64_t v15 = *(void *)(a1 + 672);
    uint64_t v48 = *(void *)(v15 + 224 * v9 + 56);
    uint64_t v49 = *(unsigned __int16 *)(a1 + 30);
    *(void *)(v48 + 32 * v49 + 16) = 0;
    goto LABEL_42;
  }
LABEL_48:
  log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v40, v41, v42, v43, v62);
  return 2315264010;
}

uint64_t annotateTokenTypeOnEachWord(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 680);
  if (*(_WORD *)(a1 + 680))
  {
    uint64_t v2 = 0;
    unsigned __int16 v3 = (void *)(*(void *)(a1 + 672) + 104);
    do
    {
      uint64_t v4 = *(v3 - 6);
      if (v4)
      {
        uint64_t v5 = *(unsigned __int16 *)(a1 + 30);
        if (*(_DWORD *)(v4 + 32 * v5) == 1) {
          uint64_t v2 = *(void *)(v4 + 32 * v5 + 16);
        }
        *unsigned __int16 v3 = v2;
        if (*(_DWORD *)(v4 + 32 * v5 + 4) == 1) {
          uint64_t v2 = 0;
        }
      }
      else
      {
        *unsigned __int16 v3 = v2;
      }
      v3 += 28;
      --v1;
    }
    while (v1);
  }
  return 0;
}

uint64_t load_pw_igtree_cfg(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  __int16 v9 = -1;
  char v8 = 0;
  *a4 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, const char ***, __int16 *, char *))(a3 + 96))(a1, a2, "fecfg", "statbnd_pw_igtree", &v10, &v9, &v8);
  if ((v5 & 0x80000000) == 0 && v9 == 1)
  {
    uint64_t v6 = *v10;
    v6[cstdlib_strlen(*v10) - 1] = 0;
    if (!cstdlib_strcmp(*v10, "yes")) {
      *a4 = 1;
    }
  }
  return v5;
}

uint64_t load_pw_igtree(_WORD *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v27, 0, sizeof(v27));
  *(void *)BOOL v26 = 0;
  *a4 = 0;
  uint64_t BrokerString = nn_model_getBrokerString(a3, v27, "pwigtree_", 0x100uLL);
  if ((BrokerString & 0x80000000) != 0
    || (uint64_t BrokerString = ssftriff_reader_ObjOpen(a1, a2, 2, (const char *)v27, "IGTR", 1031, (uint64_t *)v26),
        (BrokerString & 0x80000000) != 0))
  {
    uint64_t v21 = BrokerString;
  }
  else
  {
    uint64_t v16 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *a4 = v16;
    if (v16)
    {
      uint64_t v21 = igtree_Init(a1, a2, *(uint64_t *)v26, v16);
      ssftriff_reader_CloseChunk(*(uint64_t *)v26);
      if ((v21 & 0x80001FFF) == 0x14)
      {
        ssftriff_reader_CloseChunk(*(uint64_t *)v26);
        uint64_t v21 = 0;
      }
    }
    else
    {
      log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v25);
      uint64_t v21 = 2315264010;
    }
  }
  if (*(void *)v26)
  {
    int v22 = ssftriff_reader_ObjClose(*(void **)v26, v9, v10, v11, v12, v13, v14, v15);
    if (v22 >= 0 || (int)v21 <= -1) {
      return v21;
    }
    else {
      return v22;
    }
  }
  return v21;
}

uint64_t hlp_igtree_initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v12);
  return 2315264010;
}

uint64_t hlp_igtree_freeFeatureVector(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      if (*a2)
      {
        heap_Free(*(void **)(a1 + 8), *a2);
        *a2 = 0;
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t hlp_resizeFeature(uint64_t a1, uint64_t *a2, char *__s)
{
  int v5 = cstdlib_strlen(__s);
  uint64_t v6 = heap_Realloc(*(uint64_t **)(a1 + 8), *a2, (v5 + 1));
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a2 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v13);
    return 2315264010;
  }
  return result;
}

uint64_t hlp_igtree_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, char *a6)
{
  unsigned __int16 v14 = -1;
  uint64_t result = hlp_igtree_isFeatureRequired(a2, a3, a4, &v14);
  if (result)
  {
    if (!cstdlib_strcmp(a6, ""))
    {
      unsigned int v12 = *(char **)(a5 + 8 * v14);
      unsigned int v13 = "=";
      goto LABEL_7;
    }
    size_t v10 = cstdlib_strlen(a6);
    uint64_t v11 = v14;
    if (v10 < 0x41 || (uint64_t result = hlp_resizeFeature(a1, (uint64_t *)(a5 + 8 * v14), a6), (result & 0x80000000) == 0))
    {
      unsigned int v12 = *(char **)(a5 + 8 * v11);
      unsigned int v13 = a6;
LABEL_7:
      cstdlib_strcpy(v12, v13);
      return 0;
    }
  }
  return result;
}

uint64_t hlp_igtree_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  uint64_t v8 = g_featureNames_2[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

char *feat_wordlength(uint64_t a1, unsigned int a2, int a3, int a4, char *__src, char *a6)
{
  *a6 = 0;
  if (a4 + a3 < a2) {
    return (char *)sprintf(a6, "%d", *(unsigned __int16 *)(a1 + 40 * (a4 + a3) + 26));
  }

  return cstdlib_strcpy(a6, __src);
}

uint64_t hlp_igtree_setFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned __int16 v75 = 0;
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, 2048);
  if (v14)
  {
    uint64_t v19 = (char *)v14;
    unsigned int v74 = a7;
    if (a4 < 2) {
      goto LABEL_99;
    }
    uint64_t v20 = 0;
    uint64_t v21 = a4 - 1;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v20), "word"))
    {
      if (v21 == ++v20) {
        goto LABEL_12;
      }
    }
    unsigned __int16 v75 = v20;
    if (v74 >= a6) {
      uint64_t v23 = "=";
    }
    else {
      uint64_t v23 = *(char **)(a5 + 40 * v74);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 0, a2, v23);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_12:
    uint64_t v25 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v25), "lword"))
    {
      if (v21 == ++v25) {
        goto LABEL_20;
      }
    }
    unsigned __int16 v75 = v25;
    if (v74 - 1 >= a6) {
      BOOL v26 = "=";
    }
    else {
      BOOL v26 = *(char **)(a5 + 40 * (v74 - 1));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 1, a2, v26);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_20:
    uint64_t v27 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v27), "llword"))
    {
      if (v21 == ++v27) {
        goto LABEL_28;
      }
    }
    unsigned __int16 v75 = v27;
    if (v74 - 2 >= a6) {
      uint64_t v28 = "=";
    }
    else {
      uint64_t v28 = *(char **)(a5 + 40 * (v74 - 2));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 2, a2, v28);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_28:
    uint64_t v29 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v29), "rword"))
    {
      if (v21 == ++v29) {
        goto LABEL_36;
      }
    }
    unsigned __int16 v75 = v29;
    if (v74 + 1 >= a6) {
      BOOL v30 = "=";
    }
    else {
      BOOL v30 = *(char **)(a5 + 40 * (v74 + 1));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 3, a2, v30);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_36:
    uint64_t v31 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v31), "rrword"))
    {
      if (v21 == ++v31) {
        goto LABEL_44;
      }
    }
    unsigned __int16 v75 = v31;
    if (v74 + 2 >= a6) {
      uint64_t v32 = "=";
    }
    else {
      uint64_t v32 = *(char **)(a5 + 40 * (v74 + 2));
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 4, a2, v32);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_44:
    uint64_t v33 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v33), "wordlen"))
    {
      if (v21 == ++v33) {
        goto LABEL_49;
      }
    }
    unsigned __int16 v75 = v33;
    feat_wordlength(a5, a6, v74, 0, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 5, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_49:
    uint64_t v34 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v34), "lwordlen"))
    {
      if (v21 == ++v34) {
        goto LABEL_54;
      }
    }
    unsigned __int16 v75 = v34;
    feat_wordlength(a5, a6, v74, -1, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 6, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_54:
    uint64_t v35 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v35), "rwordlen"))
    {
      if (v21 == ++v35) {
        goto LABEL_59;
      }
    }
    unsigned __int16 v75 = v35;
    feat_wordlength(a5, a6, v74, 1, "=", v19);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 7, a2, v19);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_59:
    uint64_t v36 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v36), "pos"))
    {
      if (v21 == ++v36) {
        goto LABEL_67;
      }
    }
    unsigned __int16 v75 = v36;
    if (v74 >= a6) {
      uint64_t v37 = "=";
    }
    else {
      uint64_t v37 = *(char **)(a5 + 40 * v74 + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 8, a2, v37);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_67:
    uint64_t v38 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v38), "lpos"))
    {
      if (v21 == ++v38) {
        goto LABEL_75;
      }
    }
    unsigned __int16 v75 = v38;
    if (v74 - 1 >= a6) {
      unsigned int v39 = "=";
    }
    else {
      unsigned int v39 = *(char **)(a5 + 40 * (v74 - 1) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 9, a2, v39);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_75:
    uint64_t v40 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v40), "llpos"))
    {
      if (v21 == ++v40) {
        goto LABEL_83;
      }
    }
    unsigned __int16 v75 = v40;
    if (v74 - 2 >= a6) {
      uint64_t v41 = "=";
    }
    else {
      uint64_t v41 = *(char **)(a5 + 40 * (v74 - 2) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 10, a2, v41);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_83:
    uint64_t v42 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v42), "rpos"))
    {
      if (v21 == ++v42) {
        goto LABEL_91;
      }
    }
    unsigned __int16 v75 = v42;
    if (v74 + 1 >= a6) {
      uint64_t v43 = "=";
    }
    else {
      uint64_t v43 = *(char **)(a5 + 40 * (v74 + 1) + 8);
    }
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 11, a2, v43);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_174;
    }
LABEL_91:
    uint64_t v44 = 0;
    while (cstdlib_strcmp(*(const char **)(a3 + 8 * v44), "rrpos"))
    {
      if (v21 == ++v44) {
        goto LABEL_99;
      }
    }
    unsigned __int16 v75 = v44;
    uint64_t v45 = v74 + 2 >= a6 ? "=" : *(char **)(a5 + 40 * (v74 + 2) + 8);
    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 12, a2, v45);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_99:
      unsigned int v46 = v74;
      if (!hlp_igtree_isFeatureRequired(a3, a4, 13, &v75)
        || (uint64_t v47 = (char *)feat_char(a5, v74, 0, v19),
            uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 13, a2, v47),
            (v24 & 0x80000000) == 0))
      {
        if (!hlp_igtree_isFeatureRequired(a3, a4, 15, &v75)
          || (uint64_t v48 = (char *)feat_char(a5, v74, 1, v19),
              uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 15, a2, v48),
              (v24 & 0x80000000) == 0))
        {
          if (!hlp_igtree_isFeatureRequired(a3, a4, 14, &v75)
            || (uint64_t v49 = (char *)feat_char(a5, v74, -1, v19),
                uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 14, a2, v49),
                (v24 & 0x80000000) == 0))
          {
            if (!hlp_igtree_isFeatureRequired(a3, a4, 16, &v75)
              || (uint64_t v50 = (char *)feat_char(a5, v74, -2, v19),
                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 16, a2, v50),
                  (v24 & 0x80000000) == 0))
            {
              if (!hlp_igtree_isFeatureRequired(a3, a4, 17, &v75)
                || (uint64_t v51 = (char *)feat_matchprevpos_0(a5, v74, "n"),
                    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 17, a2, v51),
                    (v24 & 0x80000000) == 0))
              {
                if (!hlp_igtree_isFeatureRequired(a3, a4, 18, &v75)
                  || (uint64_t v52 = (char *)feat_matchprevpos_0(a5, v74, "v"),
                      uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 18, a2, v52),
                      (v24 & 0x80000000) == 0))
                {
                  if (!hlp_igtree_isFeatureRequired(a3, a4, 19, &v75)) {
                    goto LABEL_180;
                  }
                  while (1)
                  {
                    LOWORD(v46) = v46 + 1;
                    if (a6 <= (unsigned __int16)v46) {
                      break;
                    }
                    if (!cstdlib_strncmp(*(const char **)(a5 + 40 * (unsigned __int16)v46 + 8), "n", 1uLL))
                    {
                      uint64_t v53 = *(char **)(a5 + 40 * (unsigned __int16)v46);
                      goto LABEL_116;
                    }
                  }
                  uint64_t v53 = "=";
LABEL_116:
                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 19, a2, v53);
                  unsigned int v46 = v74;
                  if ((v24 & 0x80000000) == 0)
                  {
LABEL_180:
                    if (!hlp_igtree_isFeatureRequired(a3, a4, 19, &v75)) {
                      goto LABEL_179;
                    }
                    while (1)
                    {
                      LOWORD(v46) = v46 + 1;
                      if (a6 <= (unsigned __int16)v46) {
                        break;
                      }
                      if (!cstdlib_strncmp(*(const char **)(a5 + 40 * (unsigned __int16)v46 + 8), "v", 1uLL))
                      {
                        int v54 = *(char **)(a5 + 40 * (unsigned __int16)v46);
                        goto LABEL_122;
                      }
                    }
                    int v54 = "=";
LABEL_122:
                    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 20, a2, v54);
                    unsigned int v46 = v74;
                    if ((v24 & 0x80000000) == 0)
                    {
LABEL_179:
                      if (!hlp_igtree_isFeatureRequired(a3, a4, 21, &v75)
                        || (v46 >= a6
                          ? (uint64_t v56 = "=")
                          : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * v46 + 26) > 5u) ? (char v55 = 48) : (char v55 = 49),
                             *uint64_t v19 = v55,
                             uint64_t v56 = v19),
                            uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 21, a2, v56),
                            (v24 & 0x80000000) == 0))
                      {
                        if (!hlp_igtree_isFeatureRequired(a3, a4, 22, &v75)
                          || (v46 >= a6
                            ? (uint64_t v58 = "=")
                            : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * v46 + 26) < 2u) ? (char v57 = 48) : (char v57 = 49),
                               *uint64_t v19 = v57,
                               uint64_t v58 = v19),
                              uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 22, a2, v58),
                              (v24 & 0x80000000) == 0))
                        {
                          if (!hlp_igtree_isFeatureRequired(a3, a4, 23, &v75)
                            || (v46 - 1 >= a6
                              ? (uint64_t v60 = "=")
                              : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (v46 - 1) + 26) > 5u)
                               ? (char v59 = 48)
                               : (char v59 = 49),
                                 *uint64_t v19 = v59,
                                 uint64_t v60 = v19),
                                uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 23, a2, v60),
                                (v24 & 0x80000000) == 0))
                          {
                            if (!hlp_igtree_isFeatureRequired(a3, a4, 24, &v75)
                              || (v46 - 1 >= a6
                                ? (unsigned int v62 = "=")
                                : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (v46 - 1) + 26) < 2u)
                                 ? (char v61 = 48)
                                 : (char v61 = 49),
                                   *uint64_t v19 = v61,
                                   unsigned int v62 = v19),
                                  uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 24, a2, v62),
                                  (v24 & 0x80000000) == 0))
                            {
                              if (!hlp_igtree_isFeatureRequired(a3, a4, 25, &v75)
                                || (v46 + 1 >= a6
                                  ? (__int16 v64 = "=")
                                  : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (v46 + 1) + 26) > 5u)
                                   ? (char v63 = 48)
                                   : (char v63 = 49),
                                     *uint64_t v19 = v63,
                                     __int16 v64 = v19),
                                    uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 25, a2, v64),
                                    (v24 & 0x80000000) == 0))
                              {
                                if (!hlp_igtree_isFeatureRequired(a3, a4, 26, &v75)
                                  || (v46 + 1 >= a6
                                    ? (int v69 = "=")
                                    : ((v19[1] = 0, *(unsigned __int16 *)(a5 + 40 * (v46 + 1) + 26) < 2u)
                                     ? (char v68 = 48)
                                     : (char v68 = 49),
                                       *uint64_t v19 = v68,
                                       int v69 = v19),
                                      uint64_t v24 = hlp_igtree_setFeature(a1, a3, a4, 26, a2, v69),
                                      (v24 & 0x80000000) == 0))
                                {
                                  int v70 = 0;
                                  unsigned int v71 = v75;
                                  do
                                  {
                                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"igtree feature %s", v65, v66, v67, *(void *)(a2 + 8 * (unsigned __int16)v70));
                                    uint64_t v22 = 0;
                                    ++v70;
                                  }
                                  while (v71 >= (unsigned __int16)v70);
                                  goto LABEL_175;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_174:
    uint64_t v22 = v24;
LABEL_175:
    heap_Free(*(void **)(a1 + 8), (uint64_t)v19);
    return v22;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v73);
  return 2315264010;
}

const char *feat_char(uint64_t a1, unsigned int a2, int a3, char *a4)
{
  int v5 = a3;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 40 * a2 + 26);
  if (a3 < 0)
  {
    if ((((_WORD)v6 + (_WORD)a3) & 0x8000) != 0) {
      return "=";
    }
    int v5 = (__int16)(v6 + a3);
  }
  if (v6 <= (unsigned __int16)v5) {
    return "=";
  }
  unsigned __int16 v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 40 * a2);
  do
  {
    utf8_getUTF8Char(*v8, v7, a4);
    v7 += cstdlib_strlen(a4);
  }
  while ((unsigned __int16)v5-- != 0);
  return a4;
}

const char *feat_matchprevpos_0(uint64_t a1, int a2, char *__s2)
{
  if (!a2) {
    return "=";
  }
  unsigned __int16 v5 = a2 - 1;
  unsigned int v6 = "=";
  while (1)
  {
    int v7 = v5;
    if (!v5) {
      break;
    }
    unsigned int v8 = --v5;
    if (!cstdlib_strncmp(*(const char **)(a1 + 40 * (v7 - 1) + 8), __s2, 1uLL)) {
      return *(const char **)(a1 + 40 * v8);
    }
  }
  return v6;
}

uint64_t pandpIgtreeInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  int v14 = IgtreeContextInit(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 7), "igtree2ps");
  if (v14 < 0) {
    goto LABEL_5;
  }
  if (a7[8])
  {
    int v14 = IgtreeContextInit(a1, a2, a3, a4, a5, a6, (uint64_t)(a7 + 14), "igtree2pw");
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v15 = (uint64_t)(a7 + 21);
      uint64_t v16 = "igtreexsh";
      uint64_t v17 = a1;
      uint64_t v18 = a2;
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      uint64_t v21 = a5;
      uint64_t v22 = a6;
      goto LABEL_7;
    }
LABEL_5:
    int v23 = v14;
    pandpIgtreeDeinit(a5, a6, a7);
    return v23 | 0x8A002000;
  }
  uint64_t v16 = "igtree1p";
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v15 = (uint64_t)a7;
LABEL_7:
  uint64_t v24 = IgtreeContextInit(v17, v18, v19, v20, v21, v22, v15, v16);
  if ((v24 & 0x80000000) != 0)
  {
    pandpIgtreeDeinit(a5, a6, a7);
    return v24 | 0x8A002000;
  }
  return v24;
}

uint64_t IgtreeContextInit(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *__s1)
{
  __s1a = 0;
  *(void *)a7 = __s1;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 40) = 0;
  *(void *)(a7 + 48) = 0;
  if (cstdlib_strcmp(__s1, "igtree2ps"))
  {
    int v16 = 1;
  }
  else
  {
    int v16 = 1;
    if ((paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"compatstrongbnd", &__s1a) & 0x80000000) == 0
      && __s1a
      && !cstdlib_strcmp(__s1a, "yes"))
    {
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent strong BND model", v21, v22, v23, (uint64_t)"compatstrongbnd");
      int v16 = 0;
    }
  }
  if ((paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"basicclcprosody", &__s1a) & 0x80000000) != 0
    || !__s1a
    || cstdlib_strcmp(__s1a, "yes"))
  {
    if (v16)
    {
      int v20 = tryLoadingIgtreeModel(a1, a2, a3, a4, a5, a7, __s1, 1);
      if (v20 < 0) {
        return v20 | 0x8A002000;
      }
    }
  }
  else
  {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"<%s> disables voice-dependent %s", v17, v18, v19, (uint64_t)"basicclcprosody");
  }
  uint64_t v24 = *(void *)(a7 + 8);
  if (v24) {
    goto LABEL_15;
  }
  int v20 = tryLoadingIgtreeModel(a1, a2, a3, a4, a5, a7, __s1, 0);
  if (v20 < 0) {
    return v20 | 0x8A002000;
  }
  uint64_t v24 = *(void *)(a7 + 8);
  if (v24)
  {
LABEL_15:
    *(void *)(a7 + 16) = 0;
    uint64_t v25 = *(void *)(v24 + 1312);
    int v26 = *(unsigned __int8 *)(v24 + 1296);
    int v27 = v26 - 1;
    uint64_t v28 = heap_Calloc(*(void **)(a5 + 8), (unsigned __int16)(v26 - 1), 8);
    *(void *)(a7 + 16) = v28;
    if (v28)
    {
      uint64_t v58 = a6;
      if (!v27)
      {
LABEL_25:
        *(void *)(a7 + 24) = "";
        *(_DWORD *)(a7 + 32) = 1;
        uint64_t v41 = *(void *)(a7 + 8);
        if (v41 && *(void *)(v41 + 1328) && *(_DWORD *)(v41 + 1336))
        {
          unsigned __int16 v42 = 0;
          do
          {
            uint64_t v43 = v42;
            uint64_t v44 = 16 * v42;
            int v45 = cstdlib_strcmp("orth_top200", *(const char **)(*(void *)(v41 + 1328) + v44));
            uint64_t v46 = *(void *)(*(void *)(a7 + 8) + 1328);
            if (v45)
            {
              if (!cstdlib_strcmp("bnd1_dist_min", *(const char **)(v46 + v44)))
              {
                int v47 = cstdlib_strtol(*(unsigned __int8 **)(*(void *)(*(void *)(a7 + 8) + 1328) + 16 * v43 + 8), 0, 0xAu);
                if (v47 < 1) {
                  log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 1, 0, (uint64_t)"readIgtreeParams: ignore invalid bnd1_dist_min value %s", v48, v49, v50, *(void *)(*(void *)(*(void *)(a7 + 8) + 1328) + 16 * v43 + 8));
                }
                else {
                  *(_DWORD *)(a7 + 32) = v47;
                }
              }
            }
            else
            {
              *(void *)(a7 + 24) = *(void *)(v46 + 16 * v43 + 8);
            }
            unsigned __int16 v42 = v43 + 1;
            uint64_t v41 = *(void *)(a7 + 8);
          }
          while (*(_DWORD *)(v41 + 1336) > (unsigned __int16)(v43 + 1));
        }
        return 0;
      }
      unsigned int v33 = 0;
      while (1)
      {
        *(void *)(v28 + 8 * v33) = 0;
        uint64_t v34 = &off_26D2104E0;
        uint64_t v35 = "pos_current";
        uint64_t v36 = v33;
        while (cstdlib_strcmp(v35, *(const char **)(v25 + 8 * v36)))
        {
          uint64_t v40 = *v34;
          v34 += 2;
          uint64_t v35 = v40;
          if (!v40) {
            goto LABEL_23;
          }
        }
        log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"traceFeatureMap %s [%d] => %s", v37, v38, v39, *(void *)a7);
        *(void *)(*(void *)(a7 + 16) + 8 * v36) = *(v34 - 1);
LABEL_23:
        uint64_t v28 = *(void *)(a7 + 16);
        if (!*(void *)(v28 + 8 * v36)) {
          break;
        }
        unsigned int v33 = (unsigned __int16)(v36 + 1);
        if (v33 >= (unsigned __int16)v27) {
          goto LABEL_25;
        }
      }
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"no implementation for feature[%d] => %s", v37, v38, v39, v36);
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37001, (uint64_t)"%s%s", v52, v53, v54, v55, "unimplemented feature");
      heap_Free(*(void **)(a5 + 8), *(void *)(a7 + 16));
      *(void *)(a7 + 16) = 0;
      uint64_t v51 = 2315264025;
      a6 = v58;
    }
    else
    {
      log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v57);
      uint64_t v51 = 2315264010;
    }
    IgtreeContextDeinit(a5, a6, (void *)a7);
    return v51;
  }
  return 0;
}

uint64_t pandpIgtreeDeinit(uint64_t a1, uint64_t a2, void *a3)
{
  IgtreeContextDeinit(a1, a2, a3);
  IgtreeContextDeinit(a1, a2, a3 + 7);
  IgtreeContextDeinit(a1, a2, a3 + 14);

  return IgtreeContextDeinit(a1, a2, a3 + 21);
}

uint64_t IgtreeContextDeinit(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v4 = result;
  *a3 = 0;
  a3[3] = 0;
  uint64_t v5 = a3[1];
  if (v5)
  {
    uint64_t result = igtree_Deinit_ReadOnly_DereferenceCnt(result, a2, v5);
    a3[1] = 0;
  }
  uint64_t v6 = a3[2];
  if (v6)
  {
    uint64_t result = (uint64_t)heap_Free(*(void **)(v4 + 8), v6);
    a3[2] = 0;
  }
  a3[3] = 0;
  a3[5] = 0;
  a3[6] = 0;
  return result;
}

uint64_t singlePassIgtreePhrasing(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  int v5 = *(unsigned __int8 *)(a5[1] + 1296);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (*(unsigned __int16 *)(a2 + 8) < 2u) {
    return 0;
  }
  uint64_t v29 = 0;
  int v26 = v5 - 1;
  int v12 = allocateFeatureVector(a1, (unsigned __int16)(v5 - 1), (uint64_t *)&v29, &v28);
  if (v12 < 0) {
    return v12 | 0x8A002000;
  }
  a5[5] = (uint64_t)a3;
  a5[6] = a4;
  unsigned int v13 = v29;
  if (*(unsigned __int16 *)(a2 + 8) >= 2u)
  {
    int v14 = 0;
    unsigned int v25 = 0;
    while (1)
    {
      uint64_t v15 = *(void *)a2 + 32 * (unsigned __int16)v14;
      if (*(_DWORD *)(v15 + 4) == 2 && *(_DWORD *)(*(void *)a2 + 32 * (v14 + 1) + 4) == 2) {
        goto LABEL_24;
      }
      unsigned __int16 v16 = *(_WORD *)(v15 + 2) - 1;
      if (v26)
      {
        uint64_t v17 = 0;
        do
        {
          (*(void (**)(uint64_t *, void, char *, uint64_t))(a5[2] + v17 * 8))(a5, v16, v13[v17], 128);
          ++v17;
        }
        while ((unsigned __int16)v26 != v17);
      }
      unsigned int v25 = igtree_Process(a5[1], (uint64_t)v13, &v27);
      if ((v25 & 0x80000000) != 0) {
        goto LABEL_24;
      }
      int v20 = "?";
      uint64_t v21 = a3;
      if ((*(unsigned char *)(*a3 + 224 * v16 + 75) - 1) <= 3u) {
        int v20 = off_264560FE8[(char)(*(unsigned char *)(*a3 + 224 * v16 + 75) - 1)];
      }
      uint64_t v22 = v27;
      traceFeatureVector(a1, a5, v16, v13, v27, (uint64_t)v20, v18, v19);
      if (!*(unsigned char *)(*v21 + 224 * v16 + 75)) {
        int v20 = (const char *)v22;
      }
      if (!cstdlib_strcmp("1", v20)) {
        break;
      }
      if (!cstdlib_strcmp("2", v20))
      {
        char v23 = 3;
        goto LABEL_22;
      }
      a3 = v21;
      if (cstdlib_strcmp(".", v20)) {
        goto LABEL_24;
      }
      char v23 = 2;
LABEL_23:
      *(unsigned char *)(*a3 + 224 * v16 + 73) = v23;
LABEL_24:
      unsigned __int16 v24 = v14 + 1;
      int v14 = (unsigned __int16)(v14 + 1);
      if (*(unsigned __int16 *)(a2 + 8) - 1 <= v24) {
        goto LABEL_29;
      }
    }
    char v23 = 4;
LABEL_22:
    a3 = v21;
    goto LABEL_23;
  }
  unsigned int v25 = 0;
LABEL_29:
  heap_Free(*(void **)(a1 + 8), (uint64_t)v13);
  heap_Free(*(void **)(a1 + 8), v28);
  return v25;
}

uint64_t allocateFeatureVector(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a2;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), a2, 128);
  *a4 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), v8, 8);
  *a3 = v14;
  if (!v14)
  {
    heap_Free(*(void **)(a1 + 8), *a4);
    *a4 = 0;
LABEL_8:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v10, v11, v12, v13, v17);
    return 2315264010;
  }
  if (a2)
  {
    uint64_t v15 = 0;
    do
    {
      *(void *)(*a3 + 8 * v15) = *a4 + (v15 << 7);
      ++v15;
    }
    while (v15 != v8);
  }
  return 0;
}

uint64_t traceFeatureVector(uint64_t a1, uint64_t *a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (unsigned __int16)(*(unsigned __int8 *)(a2[1] + 1296) - 1);
  if (v11 >= 2)
  {
    uint64_t v12 = 8 * v11;
    uint64_t v13 = 8;
    do
    {
      cstdlib_strcat(*a4, " ");
      cstdlib_strcat(*a4, a4[(unint64_t)v13 / 8]);
      v13 += 8;
    }
    while (v12 != v13);
  }
  return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"traceFeatureVector %s [%02d] %-16s | %-44s | %s %s", a6, a7, a8, *a2);
}

uint64_t twoPassIgtreePhrasing(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (*(unsigned __int16 *)(a2 + 8) < 2u) {
    return 0;
  }
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  unsigned __int16 v11 = *(unsigned __int8 *)(a5[8] + 1296) - 1;
  uint64_t v12 = a5[15];
  if (v12)
  {
    int v13 = *(unsigned __int8 *)(v12 + 1296) - 1;
    if (v13 > v11) {
      unsigned __int16 v11 = v13;
    }
  }
  uint64_t v58 = 0;
  int v14 = allocateFeatureVector(a1, v11, (uint64_t *)&v58, &v57);
  if (v14 < 0) {
    return v14 | 0x8A002000;
  }
  __int16 v15 = *(unsigned __int8 *)(a5[8] + 1296);
  a5[12] = (uint64_t)a3;
  a5[13] = a4;
  unsigned int v16 = *(unsigned __int16 *)(v9 + 8);
  uint64_t v50 = v9;
  if (v16 < 2)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v49 = a4;
    uint64_t v53 = v10;
    int v17 = 0;
    uint64_t v5 = 0;
    uint64_t v18 = v58;
    uint64_t v51 = (unsigned __int16)(v15 - 1);
    do
    {
      uint64_t v19 = *(void *)v9 + 32 * (unsigned __int16)v17;
      if (*(_DWORD *)(v19 + 4) != 2 || *(_DWORD *)(*(void *)v9 + 32 * (v17 + 1) + 4) != 2)
      {
        unsigned __int16 v20 = *(_WORD *)(v19 + 2) - 1;
        if (v51)
        {
          for (uint64_t i = 0; i != v51; ++i)
            (*(void (**)(uint64_t *, void, char *, uint64_t))(a5[9] + i * 8))(a5 + 7, v20, v18[i], 128);
        }
        uint64_t v22 = igtree_Process(a5[8], (uint64_t)v18, &v56);
        uint64_t v5 = v22;
        if ((v22 & 0x80000000) == 0)
        {
          unsigned int v55 = v22;
          unsigned __int8 v25 = *(unsigned char *)(*a3 + 224 * v20 + 75) - 1;
          int v26 = a3;
          uint64_t v27 = "?";
          if (v25 <= 3u) {
            uint64_t v27 = off_264561008[(char)v25];
          }
          uint64_t v28 = v56;
          traceFeatureVector(v53, a5 + 7, v20, v18, v56, (uint64_t)v27, v23, v24);
          if (*(unsigned char *)(*v26 + 224 * v20 + 75)) {
            uint64_t v29 = v27;
          }
          else {
            uint64_t v29 = (const char *)v28;
          }
          if (cstdlib_strcmp("+", v29)) {
            char v30 = 2;
          }
          else {
            char v30 = 4;
          }
          *(unsigned char *)(*v26 + 224 * v20 + 73) = v30;
          a3 = v26;
          uint64_t v9 = v50;
          uint64_t v5 = v55;
        }
      }
      unsigned __int16 v31 = v17 + 1;
      int v17 = (unsigned __int16)(v17 + 1);
      unsigned int v16 = *(unsigned __int16 *)(v9 + 8);
    }
    while ((int)(v16 - 1) > v31);
    uint64_t v10 = v53;
    a4 = v49;
  }
  uint64_t v32 = a5[15];
  if (v32)
  {
    __int16 v33 = *(unsigned __int8 *)(v32 + 1296);
    a5[19] = (uint64_t)a3;
    a5[20] = a4;
    uint64_t v34 = v58;
    if (v16 >= 2)
    {
      uint64_t v54 = v10;
      int v35 = 0;
      uint64_t v52 = (unsigned __int16)(v33 - 1);
      do
      {
        uint64_t v36 = *(void *)v9 + 32 * (unsigned __int16)v35;
        if (*(_DWORD *)(v36 + 4) != 2 || *(_DWORD *)(*(void *)v9 + 32 * (v35 + 1) + 4) != 2)
        {
          uint64_t v37 = (unsigned __int16)(*(_WORD *)(v36 + 2) - 1);
          if (*(unsigned char *)(*a3 + 224 * v37 + 73) != 4 || *(unsigned char *)(*a3 + 224 * v37 + 75) != 4)
          {
            if (v52)
            {
              for (uint64_t j = 0; j != v52; ++j)
                (*(void (**)(uint64_t *, uint64_t, char *, uint64_t))(a5[16] + j * 8))(a5 + 14, v37, v34[j], 128);
            }
            uint64_t v5 = igtree_Process(a5[15], (uint64_t)v34, &v56);
            if ((v5 & 0x80000000) == 0)
            {
              unsigned __int8 v41 = *(unsigned char *)(*a3 + 224 * v37 + 75) - 1;
              unsigned __int16 v42 = a3;
              uint64_t v43 = "?";
              if (v41 <= 3u) {
                uint64_t v43 = off_264561028[(char)v41];
              }
              uint64_t v44 = v56;
              traceFeatureVector(v54, a5 + 14, v37, v34, v56, (uint64_t)v43, v39, v40);
              if (*(unsigned char *)(*v42 + 224 * v37 + 73) != 4)
              {
                if (*(unsigned char *)(*v42 + 224 * v37 + 75)) {
                  int v45 = v43;
                }
                else {
                  int v45 = (const char *)v44;
                }
                uint64_t v5 = v5;
                if (cstdlib_strcmp("+", v45)) {
                  char v46 = 2;
                }
                else {
                  char v46 = 3;
                }
                *(unsigned char *)(*v42 + 224 * v37 + 73) = v46;
              }
              a3 = v42;
              uint64_t v9 = v50;
            }
          }
        }
        unsigned __int16 v47 = v35 + 1;
        int v35 = (unsigned __int16)(v35 + 1);
      }
      while (*(unsigned __int16 *)(v9 + 8) - 1 > v47);
      uint64_t v10 = v54;
    }
  }
  else
  {
    uint64_t v34 = v58;
  }
  heap_Free(*(void **)(v10 + 8), (uint64_t)v34);
  heap_Free(*(void **)(v10 + 8), v57);
  return v5;
}

uint64_t threePassIgtreePhrasing(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v10 = twoPassIgtreePhrasing(a1, a2, a3, a4, a5);
  if (v10 < 0) {
    return v10 | 0x8A002000;
  }
  uint64_t v39 = 0;
  int v10 = allocateFeatureVector(a1, (unsigned __int16)(*(unsigned __int8 *)(a5[22] + 1296) - 1), (uint64_t *)&v39, &v38);
  if (v10 < 0) {
    return v10 | 0x8A002000;
  }
  __int16 v11 = *(unsigned __int8 *)(a5[22] + 1296);
  a5[26] = (uint64_t)a3;
  a5[27] = a4;
  LODWORD(v12) = *(unsigned __int16 *)(v8 + 8);
  int v13 = v39;
  uint64_t v33 = a1;
  if (*(_WORD *)(v8 + 8))
  {
    unint64_t v14 = 0;
    int v15 = 0;
    unsigned int v35 = 0;
    uint64_t v34 = (unsigned __int16)(v11 - 1);
    uint64_t v32 = v8;
    while (1)
    {
      uint64_t v16 = *a3;
      uint64_t v17 = (unsigned __int16)(*(_WORD *)(*(void *)v8 + 32 * v14 + 2) - 1);
      if (*(_DWORD *)(*a3 + 224 * v17 + 216) == 2) {
        *(unsigned char *)(v16 + 224 * v17 + 73) = 4;
      }
      if (v12 - 1 == v15 || *(unsigned __int8 *)(v16 + 224 * v17 + 73) - 3 <= 1)
      {
        if (v34)
        {
          for (uint64_t i = 0; i != v34; ++i)
            (*(void (**)(uint64_t *, uint64_t, char *, uint64_t))(a5[23] + i * 8))(a5 + 21, v17, v13[i], 128);
        }
        unsigned int v35 = igtree_Process(a5[22], (uint64_t)v13, &v37);
        if ((v35 & 0x80000000) == 0)
        {
          uint64_t v36 = v37;
          if (*(void *)(*a3 + 224 * v17 + 120)) {
            uint64_t v21 = *(const char **)(*a3 + 224 * v17 + 120);
          }
          else {
            uint64_t v21 = "?";
          }
          traceFeatureVector(v33, a5 + 21, v17, v13, v37, (uint64_t)v21, v19, v20);
          uint64_t v22 = *a3 + 224 * v17;
          uint64_t v23 = *(void *)(v22 + 112);
          if (!*(void *)(v22 + 120)) {
            uint64_t v21 = (const char *)v36;
          }
          uint64_t v24 = *(uint64_t **)(v33 + 8);
          int v25 = cstdlib_strlen(v21);
          int v26 = (char *)heap_Realloc(v24, v23, (v25 + 1));
          if (!v26)
          {
            log_OutPublic(*(void *)(v33 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v27, v28, v29, v30, v32);
            return 2315264010;
          }
          *(void *)(*a3 + 224 * v17 + 112) = v26;
          cstdlib_strcpy(v26, v21);
          uint64_t v8 = v32;
        }
      }
      ++v14;
      unint64_t v12 = *(unsigned __int16 *)(v8 + 8);
      int v15 = v14;
      if (v14 >= v12) {
        goto LABEL_24;
      }
    }
  }
  unsigned int v35 = 0;
LABEL_24:
  heap_Free(*(void **)(v33 + 8), (uint64_t)v13);
  heap_Free(*(void **)(v33 + 8), v38);
  return v35;
}

uint64_t simplifiedTokenPhrasing(uint64_t a1, void *a2, void *a3, unsigned __int16 *a4)
{
  if (*((unsigned __int16 *)a2 + 4) >= 2u)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v20 = a4 + 186;
    uint64_t v18 = a4 + 188;
    uint64_t v19 = a2;
    uint64_t v6 = *a2;
    int v7 = a4 + 196;
    uint64_t v8 = a4 + 194;
    uint64_t v9 = a4 + 192;
    do
    {
      *(_DWORD *)int v26 = 0;
      if (*(_DWORD *)(v6 + 32 * (unsigned __int16)v5 + 4) == 2)
      {
        uint64_t v10 = v6 + v4;
        if (*(_DWORD *)(v6 + v4 + 36) == 2)
        {
          uint64_t v25 = 0;
          uint64_t v24 = 0;
          int v23 = 0;
          uint64_t v11 = v6 + 32 * (unsigned __int16)v5;
          FLOATSUR_PLUS((_WORD *)&v25 + 2, v8, v7);
          FLOATSUR_PLUS(&v23, v9, (unsigned __int16 *)&v25 + 2);
          FLOATSUR_TIMES((_WORD *)&v25 + 2, (unsigned __int16 *)(v11 + 8), v9);
          FLOATSUR_TIMES(&v25, (unsigned __int16 *)(v10 + 40), v8);
          FLOATSUR_TIMES((_WORD *)&v24 + 2, (unsigned __int16 *)(v11 + 12), v7);
          FLOATSUR_PLUS(&v24, (unsigned __int16 *)&v25 + 2, (unsigned __int16 *)&v25);
          FLOATSUR_PLUS(&v24, (unsigned __int16 *)&v24, (unsigned __int16 *)&v24 + 2);
          FLOATSUR_DIV((_WORD *)&v25 + 2, (unsigned __int16 *)&v24, (unsigned __int16 *)&v23);
          FLOATSUR_TIMES_INT(v26, (unsigned __int16 *)&v25 + 2, 0xAu, 0);
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"bndVal[%d] = %d.%d (thisphraseWeight=%d.%d thisBndWeight=%d.%d nextphraseWeight=%d.%d)", v12, v13, v14, v5);
          if (FLOATSUR_LT(v26, v20))
          {
            a2 = v19;
            uint64_t v6 = *v19;
            *(unsigned char *)(*a3 + 224 * *(unsigned __int16 *)(*v19 + 32 * (unsigned __int16)v5 + 2) - 151) = 2;
          }
          else
          {
            BOOL v15 = FLOATSUR_LT(v26, v18);
            a2 = v19;
            uint64_t v6 = *v19;
            if (v15) {
              char v16 = 3;
            }
            else {
              char v16 = 4;
            }
            *(unsigned char *)(*a3 + 224 * *(unsigned __int16 *)(*v19 + 32 * (unsigned __int16)v5 + 2) - 151) = v16;
          }
        }
      }
      uint64_t v5 = (v5 + 1);
      v4 += 32;
    }
    while (*((unsigned __int16 *)a2 + 4) - 1 > (unsigned __int16)v5);
  }
  return 0;
}

uint64_t tryLoadingIgtreeModel(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7, int a8)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v31, 0, sizeof(v31));
  *(void *)(a6 + 8) = 0;
  uint64_t v29 = 0;
  __s2 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = "";
  memset(v39, 0, sizeof(v39));
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"langcode", &__s2);
  if (Str < 0) {
    goto LABEL_11;
  }
  int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"fecfg", &v28);
  if (Str < 0) {
    goto LABEL_11;
  }
  char __s1 = 0;
  cstdlib_strcat(&__s1, "igtree/bnd/");
  cstdlib_strcat(&__s1, __s2);
  cstdlib_strcat(&__s1, "/");
  if (a8 == 1)
  {
    int Str = paramc_ParamGetStr(*(void *)(a5 + 40), (uint64_t)"voice", &v29);
    if (Str < 0)
    {
LABEL_11:
      int v24 = Str;
      log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"Could not assemble broker string for IGtree phrasing model %s", v17, v18, v19, (uint64_t)a7);
      return v24 | 0x8A002000;
    }
    if (cstdlib_strstr(v29, "uni"))
    {
      uint64_t v29 = 0;
    }
    else
    {
      cstdlib_strcat(&__s1, v29);
      cstdlib_strcat(&__s1, "/");
    }
  }
  cstdlib_strcat(&__s1, v28);
  cstdlib_strcat(&__s1, "/");
  cstdlib_strcat(&__s1, a7);
  int Str = brokeraux_ComposeBrokerString(a5, &__s1, 1, 1, __s2, v29, 0, v31, 0x80uLL);
  if (Str < 0) {
    goto LABEL_11;
  }
  if ((igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, &v27, 2, (uint64_t)v31, "IGTR", 1031, 0) & 0x80000000) != 0)
  {
    log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"failed to read IGtree phrasing model data - going on without", v20, v21, v22, v26);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v27;
  }
  uint64_t result = 0;
  *(void *)(a6 + 8) = v23;
  return result;
}

char *BND_pos_current(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  uint64_t v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    size_t v11 = a4 - 1;
    uint64_t v14 = "%";
LABEL_8:
    uint64_t v13 = __s1;
    size_t v12 = v11;
    goto LABEL_9;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (!v10)
  {
    uint64_t v14 = *(const char **)(v7 + 224 * a2 + 88);
    if (!v14) {
      uint64_t v14 = *(const char **)(*(void *)(v7 + 224 * a2 + 16) + 8
    }
                                                               * *(unsigned __int16 *)(*(void *)(a1 + 48) + 18));
    size_t v11 = a4 - 1;
    goto LABEL_8;
  }
  size_t v11 = a4 - 1;
  cstdlib_strncat(__s1, "_", v11);
  cstdlib_strncat(__s1, *v9, (int)(a4 - 2));
  size_t v12 = (int)(a4 - 2) - cstdlib_strlen(*v9);
  uint64_t v13 = __s1;
  uint64_t v14 = "_";
LABEL_9:
  uint64_t result = cstdlib_strncat(v13, v14, v12);
  __s1[v11] = 0;
  return result;
}

char *BND_pos_prev(uint64_t a1, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    return cstdlib_strcpy(a3, "%");
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 40) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_pos_current(a1, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6) {
    return cstdlib_strcpy(a3, "%");
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_pos_current(a1, v7, a3, a4);
}

char *BND_pos_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_pos_current(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_syn_boundary_current(uint64_t a1, unsigned int a2, char *__dst, unsigned int a4)
{
  uint64_t v6 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 24);
  *int __dst = 0;
  unsigned __int16 v7 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v7 + 4) <= a2)
  {
    return cstdlib_strncat(__dst, "%", a4 - 1);
  }
  uint64_t v9 = *v7;
  for (unsigned __int16 i = a2; ; --i)
  {
    uint64_t v11 = *(void *)(v9 + 224 * i + 56);
    if (!v11)
    {
LABEL_9:
      if (!i) {
        goto LABEL_23;
      }
      continue;
    }
    if (*(_DWORD *)(v11 + 32 * v6) == 1) {
      break;
    }
    if (a2 <= i) {
      goto LABEL_9;
    }
    if (!i || *(_DWORD *)(v11 + 32 * v6 + 4) == 1) {
      goto LABEL_23;
    }
  }
  uint64_t v13 = *(const char **)(v11 + 32 * v6 + 16);
  if (!cstdlib_strcmp(v13, "O"))
  {
LABEL_23:
    return cstdlib_strcpy(__dst, "O");
  }
  if (a2 == i) {
    char v14 = 66;
  }
  else {
    char v14 = 73;
  }
  *int __dst = v14;
  *(_WORD *)(__dst + 1) = 45;
  cstdlib_strncat(__dst, v13, (int)(a4 - 3));
  __dst[a4 - 1] = 0;
  uint64_t result = (char *)cstdlib_strlen(__dst);
  if ((unint64_t)result >= 5 && result[(void)__dst - 2] == 45 && __dst[(void)result - 1] == 80) {
    result[(void)__dst - 2] = 0;
  }
  return result;
}

char *BND_syn_boundary_prev(uint64_t a1, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    return cstdlib_strcpy(a3, "%");
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 40) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_syn_boundary_current(a1, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6) {
    return cstdlib_strcpy(a3, "%");
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_syn_boundary_current(a1, v7, a3, a4);
}

char *BND_syn_boundary_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_syn_boundary_current(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_orth_uni200(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  int v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    uint64_t v11 = a4;
    size_t v12 = a4 - 1;
    char v14 = "%";
LABEL_5:
    uint64_t v13 = __s1;
    goto LABEL_6;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (v10)
  {
    uint64_t v11 = a4;
    cstdlib_strncat(__s1, "_", a4 - 1);
    cstdlib_strncat(__s1, *v9, (int)(a4 - 2));
    size_t v12 = (int)(a4 - 2) - cstdlib_strlen(*v9);
    uint64_t v13 = __s1;
    char v14 = "_";
LABEL_6:
    uint64_t result = cstdlib_strncat(v13, v14, v12);
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(v7 + 224 * a2 + 16);
  uint64_t v18 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  uint64_t v19 = *(const char **)(v17 + 8 * v18);
  if (!v19)
  {
    uint64_t v11 = a4;
    size_t v12 = a4 - 1;
    char v14 = "?";
    goto LABEL_5;
  }
  size_t v20 = cstdlib_strlen(*(const char **)(v17 + 8 * v18));
  uint64_t v11 = a4;
  cstdlib_strncat(__s1, " ", a4 - 1);
  cstdlib_strncat(__s1, v19, (int)(a4 - 2));
  cstdlib_strncat(__s1, " ", a4 - v20 - 2);
  if (v20 >= 2)
  {
    int v21 = __s1[1];
    if (v21 != 32)
    {
      uint64_t v22 = __s1 + 2;
      do
      {
        if ((v21 - 91) >= 0xFFFFFFE6) {
          *(v22 - 1) = v21 | 0x60;
        }
        int v23 = *v22++;
        int v21 = v23;
      }
      while (v23 != 32);
    }
  }
  uint64_t result = cstdlib_strstr(*(char **)(a1 + 24), __s1);
  if (!result)
  {
    char *__s1 = 0;
    char v14 = "?";
    uint64_t v13 = __s1;
    size_t v12 = a4 - 1;
    goto LABEL_6;
  }
  if (v20)
  {
    int v24 = 0;
    uint64_t v25 = __s1 + 1;
    do
    {
      *(v25 - 1) = *v25;
      ++v24;
      ++v25;
    }
    while (v20 > (unsigned __int16)v24);
  }
  __s1[v20] = 0;
LABEL_7:
  __s1[v11 - 1] = 0;
  return result;
}

char *BND_orth_uni200_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_orth_uni200(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_punct_current(char *result, unsigned int a2, char *__s1, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v6 = *(unsigned char **)(*(void *)(**((void **)result + 5) + 224 * a2 + 16)
                 + 8 * *(unsigned __int16 *)(*((void *)result + 6) + 16));
  char *__s1 = 0;
  if (v6)
  {
    LOBYTE(v7) = *v6;
    if (*v6)
    {
      uint64_t v8 = 0;
      int v9 = 0;
      do
      {
        uint64_t result = cstdlib_strchr(__s, (char)v7);
        if (result)
        {
          int v9 = 1;
          uint64_t result = cstdlib_strncat(__s1, &v6[v8], 1uLL);
          --v4;
        }
        else
        {
          if (v9 == 1 || !v8) {
            uint64_t result = cstdlib_strncat(__s1, "_", (unsigned __int16)--v4);
          }
          int v9 = 0;
        }
        int v7 = v6[++v8];
      }
      while (v7);
    }
  }
  else
  {
    return cstdlib_strncat(__s1, "?", a4 - 1);
  }
  return result;
}

uint64_t BND_phr1_dist(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 4);
    if (result >= 2) {
      char v5 = 2;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_phr1_dist3(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 4);
    if (result >= 3) {
      char v5 = 3;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_phr1_dist3_fwd(uint64_t result, unsigned int a2, unsigned char *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    unsigned int v4 = *(uint64_t **)(result + 40);
    unsigned int v5 = *((unsigned __int16 *)v4 + 4);
    if (v5 <= a2)
    {
      char v12 = 0;
    }
    else
    {
      unsigned int v6 = 0;
      uint64_t v7 = *v4;
      while (1)
      {
        uint64_t v8 = v7 + 224 * (unsigned __int16)a2;
        uint64_t v9 = *(void *)(v8 + 56);
        if (v9)
        {
          uint64_t v10 = *(unsigned __int16 *)(*(void *)(result + 48) + 22);
          if (*(_DWORD *)(v9 + 32 * v10) == 1)
          {
            LOWORD(a2) = *(_WORD *)(v9 + 32 * v10 + 10);
            uint64_t v8 = v7 + 224 * (unsigned __int16)a2;
          }
        }
        if (*(unsigned char *)(v8 + 73) == 4 || v5 - 1 == (unsigned __int16)a2) {
          break;
        }
        char v12 = v6 + 1;
        LOWORD(a2) = a2 + 1;
        if (v5 > (unsigned __int16)a2 && v6++ < 2) {
          continue;
        }
        goto LABEL_17;
      }
      char v12 = v6;
    }
LABEL_17:
    *a3 = v12 + 48;
    a3[1] = 0;
  }
  return result;
}

uint64_t BND_phr2_dist(uint64_t result, int a2, _WORD *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t result = bnd_dist(result, a2, 3);
    if (result >= 2) {
      char v5 = 2;
    }
    else {
      char v5 = result;
    }
    *a3 = v5 | 0x30;
  }
  return result;
}

uint64_t BND_bnd1_dist_min_passed(uint64_t result, int a2, char *a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    uint64_t result = bnd_dist(result, a2, 4);
    if (*(_DWORD *)(v5 + 32) >= result) {
      char v6 = 45;
    }
    else {
      char v6 = 43;
    }
    *a3 = v6;
    a3[1] = 0;
  }
  return result;
}

char *BND_trailpunct(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = *(const char **)(*(void *)(**(void **)(a1 + 40) + 224 * a2 + 16)
                      + 8 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 16));
  char *__s1 = 0;
  if (v6 && (size_t v7 = cstdlib_strlen(v6), *v6))
  {
    uint64_t v8 = &v6[v7 - 1];
    cstdlib_strncat(__s1, "_", 1uLL);
    uint64_t result = cstdlib_strchr(__s, *v8);
    if (result) {
      return cstdlib_strncat(__s1, v8, 1uLL);
    }
  }
  else
  {
    return cstdlib_strncat(__s1, "?", a4 - 1);
  }
  return result;
}

char *BND_doc_class(char *result, unsigned int a2, char *__s1, unsigned int a4)
{
  uint64_t v4 = **((void **)result + 5);
  char *__s1 = 0;
  if (a4 >= 2)
  {
    uint64_t v5 = *(const char **)(v4 + 224 * a2 + 152);
    if (v5) {
      char v6 = v5;
    }
    else {
      char v6 = "%";
    }
    return cstdlib_strncat(__s1, v6, a4 - 1);
  }
  return result;
}

char *BND_doc_punc(char *result, unsigned int a2, char *__dst, unsigned int a4)
{
  if (a4 >= 2)
  {
    if (*(unsigned __int16 *)(*((void *)result + 5) + 8) <= a2)
    {
      return cstdlib_strcpy(__dst, "%");
    }
    else
    {
      int v6 = 0;
      memset(__n, 0, sizeof(__n));
      *int __dst = 0;
      size_t v7 = (uint64_t *)*((void *)result + 5);
      uint64_t v8 = *v7;
      if (*((unsigned __int16 *)v7 + 4) - 1 > (int)a2)
      {
        int v6 = 0;
        if (hlp_NLUStrFind(*(char **)(v8 + 224 * a2 + 384), "S_PUNC", (char **)&__n[1], __n))
        {
          do
          {
            if (v6)
            {
              unsigned __int16 v10 = cstdlib_strlen(";");
              unsigned int v11 = v6 + v10;
              if (v11 < a4)
              {
                cstdlib_strncat(__dst, ";", v10);
                int v6 = (unsigned __int16)v11;
              }
            }
            unsigned __int16 v12 = cstdlib_strlen("S_PUNC:");
            unsigned int v13 = v6 + v12;
            if (v13 < a4)
            {
              cstdlib_strncat(__dst, "S_PUNC:", v12);
              int v6 = (unsigned __int16)v13;
            }
            uint64_t v14 = __n[0];
            unsigned int v15 = v6 + __n[0];
            if (v15 < a4)
            {
              cstdlib_strncat(__dst, *(const char **)&__n[1], __n[0]);
              int v6 = (unsigned __int16)v15;
              uint64_t v14 = __n[0];
            }
          }
          while (hlp_NLUStrFind((char *)(*(void *)&__n[1] + v14), "S_PUNC", (char **)&__n[1], __n));
        }
      }
      uint64_t v16 = v8 + 224 * a2;
      uint64_t v18 = *(char **)(v16 + 160);
      uint64_t v17 = (char **)(v16 + 160);
      if (hlp_NLUStrFind(v18, "I_PUNC", (char **)&__n[1], __n))
      {
        do
        {
          if (v6)
          {
            unsigned __int16 v19 = cstdlib_strlen(";");
            unsigned int v20 = v6 + v19;
            if (v20 < a4)
            {
              cstdlib_strncat(__dst, ";", v19);
              int v6 = (unsigned __int16)v20;
            }
          }
          unsigned __int16 v21 = cstdlib_strlen("I_PUNC:");
          unsigned int v22 = v6 + v21;
          if (v22 < a4)
          {
            cstdlib_strncat(__dst, "I_PUNC:", v21);
            int v6 = (unsigned __int16)v22;
          }
          uint64_t v23 = __n[0];
          unsigned int v24 = v6 + __n[0];
          if (v24 < a4)
          {
            cstdlib_strncat(__dst, *(const char **)&__n[1], __n[0]);
            int v6 = (unsigned __int16)v24;
            uint64_t v23 = __n[0];
          }
        }
        while (hlp_NLUStrFind((char *)(*(void *)&__n[1] + v23), "I_PUNC", (char **)&__n[1], __n));
      }
      if (hlp_NLUStrFind(*v17, "S_PUNC", (char **)&__n[1], __n))
      {
        do
        {
          if (v6)
          {
            unsigned __int16 v25 = cstdlib_strlen(";");
            unsigned int v26 = v6 + v25;
            if (v26 < a4)
            {
              cstdlib_strncat(__dst, ";", v25);
              int v6 = (unsigned __int16)v26;
            }
          }
          unsigned __int16 v27 = cstdlib_strlen("I_PUNC:");
          unsigned int v28 = v6 + v27;
          if (v28 < a4)
          {
            cstdlib_strncat(__dst, "I_PUNC:", v27);
            int v6 = (unsigned __int16)v28;
          }
          uint64_t v29 = __n[0];
          unsigned int v30 = v6 + __n[0];
          if (v30 < a4)
          {
            cstdlib_strncat(__dst, *(const char **)&__n[1], __n[0]);
            int v6 = (unsigned __int16)v30;
            uint64_t v29 = __n[0];
          }
        }
        while (hlp_NLUStrFind((char *)(*(void *)&__n[1] + v29), "S_PUNC", (char **)&__n[1], __n));
      }
      for (uint64_t result = hlp_NLUStrFind(*v17, "E_PUNC", (char **)&__n[1], __n);
            result;
            uint64_t result = hlp_NLUStrFind((char *)(*(void *)&__n[1] + v35), "E_PUNC", (char **)&__n[1], __n))
      {
        if (v6)
        {
          unsigned __int16 v31 = cstdlib_strlen(";");
          unsigned int v32 = v6 + v31;
          if (v32 < a4)
          {
            cstdlib_strncat(__dst, ";", v31);
            int v6 = (unsigned __int16)v32;
          }
        }
        unsigned __int16 v33 = cstdlib_strlen("E_PUNC:");
        unsigned int v34 = v6 + v33;
        if (v34 < a4)
        {
          cstdlib_strncat(__dst, "E_PUNC:", v33);
          int v6 = (unsigned __int16)v34;
        }
        uint64_t v35 = __n[0];
        unsigned int v36 = v6 + __n[0];
        if (v36 < a4)
        {
          cstdlib_strncat(__dst, *(const char **)&__n[1], __n[0]);
          int v6 = (unsigned __int16)v36;
          uint64_t v35 = __n[0];
        }
      }
      if (!v6) {
        return cstdlib_strcat(__dst, "%");
      }
    }
  }
  return result;
}

char *BND_orth(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  int v6 = *(uint64_t **)(a1 + 40);
  if (*((unsigned __int16 *)v6 + 4) <= a2)
  {
    size_t v11 = a4 - 1;
    uint64_t v14 = "%";
LABEL_5:
    unsigned int v13 = __s1;
    size_t v12 = v11;
    goto LABEL_6;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 224 * a2;
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v9 = (const char **)(v8 + 104);
  if (v10)
  {
    size_t v11 = a4 - 1;
    cstdlib_strncat(__s1, "_", v11);
    cstdlib_strncat(__s1, *v9, (int)(a4 - 2));
    size_t v12 = (int)(a4 - 2) - cstdlib_strlen(*v9);
    unsigned int v13 = __s1;
    uint64_t v14 = "_";
LABEL_6:
    uint64_t result = cstdlib_strncat(v13, v14, v12);
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(v7 + 224 * a2 + 16);
  uint64_t v18 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  unsigned __int16 v19 = *(unsigned __int8 **)(v17 + 8 * v18);
  if (!v19)
  {
    size_t v11 = a4 - 1;
LABEL_25:
    uint64_t v14 = "?";
    goto LABEL_5;
  }
  int64_t v20 = cstdlib_strlen(*(const char **)(v17 + 8 * v18));
  uint64_t v21 = a4;
  size_t v11 = a4 - 1;
  cstdlib_strncat(__s1, " ", v11);
  if (v20 >= 1)
  {
    unsigned int v22 = &v19[v20];
    do
    {
      unsigned int v23 = Utf8_LengthInBytes(v19, 1);
      if (!utf8_BelongsToSet(0xAu, v19, 0, v23))
      {
        if (utf8_ToLower((char *)v19, 0, (uint64_t)v30))
        {
          size_t v24 = v11 - cstdlib_strlen(__s1);
          unsigned __int16 v25 = v30;
          unsigned int v26 = __s1;
LABEL_16:
          cstdlib_strncat(v26, v25, v24);
          goto LABEL_17;
        }
        if (v21 - cstdlib_strlen(__s1) > v23)
        {
          size_t v24 = v23;
          unsigned int v26 = __s1;
          unsigned __int16 v25 = (const char *)v19;
          goto LABEL_16;
        }
      }
LABEL_17:
      v19 += v23;
    }
    while (v19 < v22);
  }
  size_t v27 = cstdlib_strlen(__s1);
  cstdlib_strncat(__s1, " ", v11 - v27);
  uint64_t result = cstdlib_strstr(*(char **)(a1 + 24), __s1);
  if (!result)
  {
    char *__s1 = 0;
    goto LABEL_25;
  }
  if (v20)
  {
    int v28 = 0;
    uint64_t v29 = __s1 + 1;
    do
    {
      *(v29 - 1) = *v29;
      ++v28;
      ++v29;
    }
    while (v20 > (unint64_t)(unsigned __int16)v28);
  }
  __s1[v20] = 0;
LABEL_7:
  __s1[v11] = 0;
  return result;
}

char *BND_orth_next(uint64_t a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_orth(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

char *BND_dummy(int a1, int a2, char *__s1)
{
  return cstdlib_strcat(__s1, "?");
}

uint64_t BND_bnd_type(uint64_t result, unsigned int a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(result + 40);
  if (*(unsigned __int16 *)(v3 + 8) <= a2)
  {
    LOBYTE(v5) = 37;
  }
  else
  {
    unsigned int v4 = *(unsigned __int8 *)(*(void *)v3 + 224 * a2 + 73);
    if (v4 > 4) {
      LOBYTE(v5) = 63;
    }
    else {
      unint64_t v5 = 0x53574E3F3FuLL >> (8 * v4);
    }
  }
  *a3 = v5;
  a3[1] = 0;
  return result;
}

char *BND_phrase_type(uint64_t a1, unsigned int a2, char *__s1, unsigned int a4)
{
  char *__s1 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned __int16 *)(v4 + 8) > a2 && (unint64_t v5 = *(const char **)(v4 + 40)) != 0 && *v5) {
    return cstdlib_strncat(__s1, v5, a4 - 1);
  }
  else {
    return cstdlib_strcat(__s1, "%");
  }
}

char *BND_tn(char *result, unsigned int a2, char *__s1, unsigned int a4)
{
  if (a4 >= 2)
  {
    if (*(unsigned __int16 *)(*((void *)result + 5) + 8) <= a2)
    {
      return cstdlib_strcpy(__s1, "%");
    }
    else
    {
      uint64_t v4 = 0;
      unsigned __int16 v5 = 0;
      char *__s1 = 0;
      do
      {
        uint64_t v6 = *(void *)(**((void **)result + 5) + 224 * v5 + 56);
        if (v6)
        {
          uint64_t v7 = *(unsigned __int16 *)(*((void *)result + 6) + 22);
          uint64_t v8 = *(const char **)(v6 + 32 * v7 + 16);
          if (v8)
          {
            if (*(_DWORD *)(v6 + 32 * v7) == 1)
            {
              uint64_t v9 = v6 + 32 * v7;
              if (*(unsigned __int16 *)(v9 + 10) >= a2 && *(unsigned __int16 *)(v9 + 8) <= a2)
              {
                unsigned __int16 v5 = a2;
                uint64_t v4 = v8;
              }
            }
          }
        }
        ++v5;
      }
      while (a2 >= v5);
      if (v4) {
        return cstdlib_strncat(__s1, v4, a4 - 1);
      }
      else {
        return cstdlib_strcat(__s1, "%");
      }
    }
  }
  return result;
}

char *BND_doc_punc_prev(uint64_t a1, unsigned int a2, char *a3, unsigned int a4)
{
  if (!a2) {
    return cstdlib_strcpy(a3, "%");
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 40) + 224 * a2 + 56);
  if (!v4 || (uint64_t v5 = v4 + 32 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 22), *(_DWORD *)(v5 + 4) != 1))
  {
    unsigned __int16 v7 = a2 - 1;
    return BND_doc_punc((char *)a1, v7, a3, a4);
  }
  int v6 = *(unsigned __int16 *)(v5 + 8);
  if (!v6) {
    return cstdlib_strcpy(a3, "%");
  }
  unsigned __int16 v7 = v6 - 1;
  return BND_doc_punc((char *)a1, v7, a3, a4);
}

char *BND_doc_punc_next(char *a1, __int16 a2, char *a3, unsigned int a4)
{
  return BND_doc_punc(a1, (unsigned __int16)(a2 + 1), a3, a4);
}

uint64_t bnd_dist(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = **(void **)(a1 + 40);
    unsigned __int16 v4 = 1;
    do
    {
      LOWORD(a2) = a2 - 1;
      if (*(unsigned __int8 *)(v3 + 224 * (unsigned __int16)a2 + 73) == a3) {
        break;
      }
      uint64_t v5 = *(void *)(v3 + 224 * (unsigned __int16)a2 + 56);
      if (v5)
      {
        uint64_t v6 = v5 + 32 * *(unsigned __int16 *)(*(void *)(a1 + 48) + 22);
        if (*(_DWORD *)(v6 + 4) == 1) {
          LOWORD(a2) = *(_WORD *)(v6 + 8);
        }
      }
      ++v4;
    }
    while ((_WORD)a2);
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t checkForExternalSildur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v14 = 0;
  char __s1 = 0;
  __int16 v12 = 0;
  *a5 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1 + 184))(a2, a3, a4, 18, &v14);
  if ((v10 & 0x80000000) == 0)
  {
    if (v14)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, a4, 18, &__s1, &v12);
      if ((v10 & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "external")) {
        *a5 = 1;
      }
    }
  }
  return v10;
}

BOOL doesWordEndInComma(const char *a1)
{
  return a1
      && cstdlib_strlen(a1)
      && (a1[cstdlib_strlen(a1) - 1] == 44 || a1[cstdlib_strlen(a1) - 1] == 58 || a1[cstdlib_strlen(a1) - 1] == 59);
}

uint64_t addWord(uint64_t a1, const char *a2, _DWORD *a3, const char *a4, uint64_t a5, uint64_t a6)
{
  if (!*(_WORD *)(a6 + 10))
  {
    uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), 1, 11200);
    *(void *)a6 = v18;
    if (v18)
    {
      uint64_t v12 = v18;
      *(_WORD *)(a6 + 10) = 50;
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)a6;
  if (*(unsigned __int16 *)(a6 + 8) >= *(unsigned __int16 *)(a6 + 10))
  {
    uint64_t v13 = heap_Realloc(*(uint64_t **)(a1 + 8), v12, 224 * *(unsigned __int16 *)(a6 + 10) + 11200);
    if (v13)
    {
      *(void *)a6 = v13;
      cstdlib_memset((void *)(v13 + 224 * *(unsigned __int16 *)(a6 + 8)), 0, 0x2BC0uLL);
      *(_WORD *)(a6 + 10) += 50;
      uint64_t v12 = *(void *)a6;
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v26 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v28);
    return v26;
  }
LABEL_7:
  *(_DWORD *)(v12 + 224 * *(unsigned __int16 *)(a6 + 8)) = *a3;
  uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(a5 + 72)) | 1);
  *(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 16) = v19;
  if (!v19) {
    goto LABEL_11;
  }
  int64_t v20 = *(void **)(a1 + 8);
  int v21 = cstdlib_strlen(a2);
  unsigned int v22 = (char *)heap_Calloc(v20, 1, (v21 + 1));
  *(void *)(*(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 16)
            + 8 * *(unsigned __int16 *)(a5 + 16)) = v22;
  if (!v22) {
    goto LABEL_11;
  }
  cstdlib_strcpy(v22, a2);
  unsigned int v23 = *(void **)(a1 + 8);
  int v24 = cstdlib_strlen(a4);
  unsigned __int16 v25 = (char *)heap_Calloc(v23, 1, (v24 + 1));
  *(void *)(*(void *)a6 + 224 * *(unsigned __int16 *)(a6 + 8) + 8) = v25;
  if (!v25) {
    goto LABEL_11;
  }
  cstdlib_strcpy(v25, a4);
  uint64_t v26 = 0;
  ++*(_WORD *)(a6 + 8);
  return v26;
}

uint64_t addToken(uint64_t a1, unsigned __int16 *a2, const char *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = *a2;
  if (*((_WORD *)a5 + 4))
  {
    int v13 = a6;
    uint64_t v15 = 0;
    unsigned __int16 v16 = 0;
    unsigned __int16 v17 = v11 + 1;
    uint64_t v18 = *a5;
    unsigned int v19 = a2[1];
    while (1)
    {
      unsigned int v20 = *(unsigned __int16 *)(v18 + v15);
      if (v12 == v20) {
        unsigned __int16 v17 = v16;
      }
      unsigned int v21 = *(unsigned __int16 *)(v18 + v15 + 2);
      if (v19 == v21) {
        break;
      }
      if (v19 >= v20 && v19 < v21) {
        break;
      }
      ++v16;
      int v12 = *a2;
      v15 += 224;
      if (224 * v11 == v15) {
        goto LABEL_14;
      }
    }
    if (v11 + 1 != v17)
    {
      uint64_t v29 = checkSpan(a1, a4, (uint64_t *)(v18 + 224 * v17 + 56));
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      uint64_t v29 = checkSpan(a1, a4, (uint64_t *)(*a5 + v15 + 56));
      if ((v29 & 0x80000000) != 0) {
        return v29;
      }
      uint64_t v30 = *a5;
      uint64_t v31 = 224 * v17;
      uint64_t v32 = *(unsigned __int16 *)(a4 + 22);
      uint64_t v33 = *(void *)(*a5 + v31 + 56) + 32 * v32;
      *(_DWORD *)uint64_t v33 = 1;
      *(_WORD *)(v33 + 8) = v17;
      *(_WORD *)(v33 + 10) = v16;
      uint64_t v34 = *(void *)(v30 + v15 + 56) + 32 * v32;
      *(_DWORD *)(v34 + 4) = 1;
      *(_WORD *)(v34 + 8) = v17;
      uint64_t v35 = *(void **)(a1 + 8);
      int v36 = cstdlib_strlen(a3);
      uint64_t v37 = heap_Calloc(v35, 1, (v36 - 1));
      uint64_t v42 = *a5 + v31;
      unsigned int v43 = v17;
      *(void *)(*(void *)(v42 + 56) + 32 * *(unsigned __int16 *)(a4 + 22) + 16) = v37;
      if (v37)
      {
        uint64_t v44 = (char *)v37;
        int v45 = a3 + 1;
        size_t v46 = cstdlib_strlen(a3 + 1);
        cstdlib_strncpy(v44, a3 + 1, v46 - 1);
        if (v13 != 1) {
          return 0;
        }
        uint64_t v47 = *(void *)(*a5 + 224 * v17 + 168);
        if (v47) {
          heap_Free(*(void **)(a1 + 8), v47);
        }
        uint64_t v48 = *(void **)(a1 + 8);
        int v49 = cstdlib_strlen(a3);
        uint64_t v50 = (char *)heap_Calloc(v48, 1, (v49 + 1));
        *(void *)(*a5 + 224 * v17 + 168) = v50;
        if (v50)
        {
          cstdlib_strcpy(v50, "B-");
          uint64_t v51 = (char *)(*(void *)(*a5 + 224 * v17 + 168) + 2);
          size_t v52 = cstdlib_strlen(v45);
          cstdlib_strncpy(v51, v45, v52 - 1);
          unsigned __int16 v53 = v17 + 1;
          if (v53 > v16) {
            return 0;
          }
          while (1)
          {
            uint64_t v54 = *(void **)(a1 + 8);
            int v55 = cstdlib_strlen(*(const char **)(*a5 + 224 * v43 + 168));
            uint64_t v56 = (char *)heap_Calloc(v54, 1, (v55 + 1));
            uint64_t v57 = *a5;
            unsigned __int16 v58 = v53;
            *(void *)(*a5 + 224 * v53 + 168) = v56;
            if (!v56) {
              break;
            }
            cstdlib_strcpy(v56, *(const char **)(v57 + 224 * v43 + 168));
            uint64_t v23 = 0;
            **(unsigned char **)(*a5 + 224 * v53++ + 168) = 73;
            if ((unsigned __int16)(v58 + 1) > v16) {
              return v23;
            }
          }
        }
      }
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v38, v39, v40, v41, v60);
      return 2315264010;
    }
  }
LABEL_14:
  uint64_t v23 = 2315264000;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)a3);
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    do
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"word[%d] %d,%d", v24, v25, v26, v28++);
      v27 += 224;
    }
    while (v28 < *((unsigned __int16 *)a5 + 4));
  }
  return v23;
}

uint64_t checkSpan(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3) {
    return 0;
  }
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (32 * *(unsigned __int16 *)(a2 + 72)) | 1);
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a3 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v12);
    return 2315264010;
  }
  return result;
}

uint64_t addTokenTag(uint64_t a1, unsigned int a2, char *__s, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = a2;
  if (!*(void *)(*a5 + 224 * a2 + 88) && !cstdlib_strcmp("UNK", __s))
  {
    uint64_t v10 = *(void **)(a1 + 8);
    unsigned __int16 v11 = cstdlib_strlen(*(const char **)(*(void *)(*a5 + 224 * v9 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
    unsigned int v12 = (char *)heap_Calloc(v10, 1, v11 + 1);
    uint64_t v17 = *a5;
    *(void *)(*a5 + 224 * v9 + 88) = v12;
    if (!v12)
    {
LABEL_7:
      uint64_t v21 = 2315264010;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v23);
      return v21;
    }
    cstdlib_strcpy(v12, *(const char **)(*(void *)(v17 + 224 * v9 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
  }
  uint64_t v18 = *(void **)(a1 + 8);
  int v19 = cstdlib_strlen(__s);
  unsigned int v20 = (char *)heap_Calloc(v18, 1, (v19 + 1));
  *(void *)(*(void *)(*a5 + 224 * v9 + 16) + 8 * *(unsigned __int16 *)(a4 + 20)) = v20;
  if (!v20) {
    goto LABEL_7;
  }
  cstdlib_strcpy(v20, __s);
  return 0;
}

uint64_t addSynChunk(uint64_t a1, const char *a2, const char *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a4;
  unsigned int v11 = *(unsigned __int16 *)(a7 + 8);
  if (a4 <= a5 && v11 > a4 && v11 > a5)
  {
    uint64_t v19 = checkSpan(a1, a6, (uint64_t *)(*(void *)a7 + 224 * a4 + 56));
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
    uint64_t v19 = checkSpan(a1, a6, (uint64_t *)(*(void *)a7 + 224 * a5 + 56));
    if ((v19 & 0x80000000) != 0) {
      return v19;
    }
    unsigned int v20 = v9;
    uint64_t v21 = *(void *)a7;
    uint64_t v22 = *(unsigned __int16 *)(a6 + 24);
    uint64_t v23 = *(void *)(*(void *)a7 + 224 * v9 + 56) + 32 * v22;
    *(_DWORD *)uint64_t v23 = 1;
    *(_WORD *)(v23 + 8) = v9;
    *(_WORD *)(v23 + 10) = a5;
    uint64_t v24 = *(void *)(v21 + 224 * a5 + 56) + 32 * v22;
    *(_DWORD *)(v24 + 4) = 1;
    *(_WORD *)(v24 + 8) = v9;
    uint64_t v25 = *(void **)(a1 + 8);
    int v26 = cstdlib_strlen(a2);
    int v27 = v26;
    if (a3)
    {
      int v28 = cstdlib_strlen(a3);
      uint64_t v29 = (char *)heap_Calloc(v25, 1, (v27 + v28 + 1));
      *(void *)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16) = v29;
      if (v29)
      {
        cstdlib_strcpy(v29, a2);
        cstdlib_strcat(*(char **)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16), a3);
        return 0;
      }
    }
    else
    {
      uint64_t v34 = (char *)heap_Calloc(v25, 1, (v26 + 1));
      *(void *)(*(void *)(*(void *)a7 + 224 * v20 + 56) + 32 * *(unsigned __int16 *)(a6 + 24) + 16) = v34;
      if (v34)
      {
        cstdlib_strcpy(v34, a2);
        return 0;
      }
    }
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v30, v31, v32, v33, v35);
    return 2315264010;
  }
  uint64_t v13 = 2315264000;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"syntactic chunks out of order : fromWordIdx=%d toWordIdx=%d numWords=%d", a6, a7, a8, a4);
  return v13;
}

uint64_t addPHRRange(uint64_t a1, unsigned int a2, unsigned int a3, char *__s, void *a5)
{
  if (a2 > a3) {
    return 0;
  }
  unsigned __int16 v12 = a2;
  while (1)
  {
    uint64_t v13 = *(void **)(a1 + 8);
    int v14 = cstdlib_strlen(__s);
    uint64_t v15 = heap_Calloc(v13, 1, (v14 + 3));
    unsigned __int16 v20 = v12;
    *(void *)(*a5 + 224 * v12 + 80) = v15;
    if (!v15) {
      break;
    }
    if (cstdlib_strcmp(__s, "O"))
    {
      if (v12 == a2) {
        uint64_t v21 = "B-";
      }
      else {
        uint64_t v21 = "I-";
      }
      cstdlib_strcpy(*(char **)(*a5 + 224 * v12 + 80), v21);
      cstdlib_strcat(*(char **)(*a5 + 224 * v12 + 80), __s);
    }
    else
    {
      cstdlib_strcpy(*(char **)(*a5 + 224 * v12 + 80), __s);
    }
    *(_WORD *)(*a5 + 224 * v12++ + 4) = a2;
    if (a3 < (unsigned __int16)(v20 + 1)) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v16, v17, v18, v19, v5);
  return 2315264010;
}

uint64_t addMSPOS(uint64_t a1, unsigned int a2, char *__s, uint64_t a4, void *a5)
{
  uint64_t v10 = *(void **)(a1 + 8);
  int v11 = cstdlib_strlen(__s);
  unsigned __int16 v12 = (char *)heap_Calloc(v10, 1, (v11 + 1));
  *(void *)(*(void *)(*a5 + 224 * a2 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)) = v12;
  if (v12)
  {
    cstdlib_strcpy(v12, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v18);
    return 2315264010;
  }
}

uint64_t expandAndValidateCompounds(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*((_WORD *)a2 + 4))
  {
    for (unint64_t i = 0; i < *((unsigned __int16 *)a2 + 4); ++i)
    {
      uint64_t v7 = *(const char **)(*a2 + 224 * i + 96);
      if (v7)
      {
        int v8 = *(_DWORD *)(a3 + 656);
        if (!v8)
        {
          if (!cstdlib_strncmp(v7, "B-", 2uLL) || !cstdlib_strncmp(*(const char **)(*a2 + 224 * i + 96), "I-", 2uLL)) {
            continue;
          }
          int v8 = *(_DWORD *)(a3 + 656);
        }
        if (v8 != 1)
        {
          unsigned int v9 = *(const char **)(*a2 + 224 * i + 96);
          uint64_t v10 = *(const char **)(a3 + 640);
          size_t v11 = cstdlib_strlen(v10);
          if (!cstdlib_strncmp(v9, v10, v11))
          {
            uint64_t v25 = *(const char **)(*a2 + 224 * i + 96);
            int v26 = *(const char **)(a3 + 640);
            size_t v27 = cstdlib_strlen(v26);
            if (cstdlib_strncmp(v25, v26, v27)) {
              continue;
            }
            unint64_t v31 = i + 1;
            unint64_t v32 = *((unsigned __int16 *)a2 + 4);
            if (i + 1 != v32)
            {
              if (i + 1 >= v32) {
                continue;
              }
              uint64_t v34 = *(const char **)(*a2 + 224 * v31 + 96);
              if (v34)
              {
                unsigned int v35 = *(const char **)(a3 + 640);
                size_t v36 = cstdlib_strlen(v35);
                if (cstdlib_strncmp(v34, v35, v36))
                {
                  if (*(void *)(*a2 + 224 * v31 + 96)) {
                    continue;
                  }
                }
              }
            }
            uint64_t v24 = 224 * i;
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"single word cannot be a compound word : word index=%d compound tag=%s", v28, v29, v30, i);
            goto LABEL_25;
          }
          if (i)
          {
            unsigned __int16 v15 = i;
            while (1)
            {
              uint64_t v16 = *(const char **)(*a2 + 224 * v15 + 96);
              if (!v16) {
                break;
              }
              uint64_t v17 = *(const char **)(a3 + 640);
              size_t v18 = cstdlib_strlen(v17);
              if (!cstdlib_strncmp(v16, v17, v18)) {
                break;
              }
              if (!--v15) {
                goto LABEL_12;
              }
            }
          }
          else
          {
LABEL_12:
            unsigned __int16 v15 = 0;
          }
          uint64_t v19 = *(const char **)(*a2 + 224 * v15 + 96);
          if (!v19)
          {
LABEL_24:
            uint64_t v24 = 224 * i;
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no start word for internal compound word : word index=%d compound tag=%s", v12, v13, v14, i);
            goto LABEL_25;
          }
          unsigned __int16 v20 = *(const char **)(a3 + 640);
          size_t v21 = cstdlib_strlen(v20);
          int v22 = cstdlib_strncmp(v19, v20, v21);
          uint64_t v23 = *a2;
          if (v22)
          {
            uint64_t v24 = 224 * i;
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"compound word has no beginning tag : word index=%d compound tag=%s", v12, v13, v14, i);
LABEL_25:
            heap_Free(*(void **)(a1 + 8), *(void *)(*a2 + v24 + 96));
            *(void *)(*a2 + v24 + 96) = 0;
            continue;
          }
          uint64_t v33 = *(void *)(v23 + 224 * v15 + 96);
          if (!v33) {
            goto LABEL_24;
          }
          cstdlib_strcat(*(char **)(v23 + 224 * i + 96), (const char *)(v33 + 1));
        }
      }
    }
  }
  return 0;
}

uint64_t checkMSPOSForCompound(uint64_t a1, unsigned int a2, char *__s2, uint64_t a4, void *a5)
{
  unint64_t v10 = 0;
  uint64_t CompoundAccent = 0;
  int v42 = 0;
  int v43 = 0;
  do
  {
    unint64_t v12 = v10;
    if (v10 >= *(unsigned __int16 *)(a4 + 360)) {
      return CompoundAccent;
    }
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v10) == 1)
    {
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v10) + 2);
      unsigned __int16 v14 = cstdlib_strlen(__s2);
      uint64_t CompoundAccent = do_pcre_exec(a4, v13, __s2, v14, 0, (uint64_t)&v43, v15, v16);
      if ((CompoundAccent & 0x80000000) != 0) {
        return CompoundAccent;
      }
    }
    else if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 528)+ *(unsigned int *)(*(void *)(a4 + 536)+ 4 * **(unsigned int **)(*(void *)(a4 + 344) + 8 * v10))), __s2))
    {
      int v43 = 1;
    }
    unint64_t v10 = v12 + 1;
  }
  while (!v43);
  if (v43 != 1) {
    return CompoundAccent;
  }
  uint64_t v17 = (unsigned __int16)v12;
  uint64_t v18 = 4;
  if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * (unsigned __int16)v12) == 1) {
    uint64_t v18 = 8;
  }
  uint64_t v19 = (const char *)(*(void *)(a4 + 528)
                     + *(unsigned int *)(*(void *)(a4 + 536)
                                       + 4
                                       * *(unsigned int *)(*(void *)(*(void *)(a4 + 344)
                                                                     + 8 * (unsigned __int16)v12)
                                                         + v18)));
  if (cstdlib_strcmp(v19, *(const char **)(a4 + 640)))
  {
    unsigned int v20 = a2;
    uint64_t v21 = *(void *)(*a5 + 224 * a2 + 96);
    if (v21)
    {
      heap_Free(*(void **)(a1 + 8), v21);
      *(void *)(*a5 + 224 * a2 + 96) = 0;
    }
    int v22 = *(void **)(a1 + 8);
    int v23 = cstdlib_strlen(v19);
    uint64_t v24 = (char *)heap_Calloc(v22, 1, (v23 + 52));
    *(void *)(*a5 + 224 * v20 + 96) = v24;
    if (v24)
    {
      cstdlib_strcpy(v24, v19);
      goto LABEL_17;
    }
LABEL_24:
    uint64_t CompoundAccent = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v41);
    return CompoundAccent;
  }
  int v42 = 0;
  int v43 = 0;
  uint64_t CompoundAccent = getCompoundAccent(a4, __s2, &v43, (_WORD *)&v42 + 1, &v42);
  if ((CompoundAccent & 0x80000000) != 0) {
    return CompoundAccent;
  }
  if (v43)
  {
    size_t v36 = *(void **)(a1 + 8);
    int v37 = cstdlib_strlen(v19);
    uint64_t v38 = (char *)heap_Calloc(v36, 1, v37 + (unsigned __int16)v42 - HIWORD(v42) + 2);
    *(void *)(*a5 + 224 * a2 + 96) = v38;
    if (!v38) {
      goto LABEL_24;
    }
    unsigned int v20 = a2;
    cstdlib_strcpy(v38, v19);
    cstdlib_strcat(*(char **)(*a5 + 224 * a2 + 96), "-");
    cstdlib_strncat(*(char **)(*a5 + 224 * a2 + 96), &__s2[HIWORD(v42)], (unsigned __int16)v42 - (unint64_t)HIWORD(v42));
  }
  else
  {
    unsigned int v20 = a2;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no stress information on first word of compound word : word index=%d pos=%s", v33, v34, v35, a2);
    uint64_t v40 = 224 * a2;
    heap_Free(*(void **)(a1 + 8), *(void *)(*a5 + v40 + 96));
    *(void *)(*a5 + v40 + 96) = 0;
  }
LABEL_17:
  if (*(void *)(*a5 + 224 * v20 + 96))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    if (*(_DWORD *)(*(void *)(a4 + 352) + 4 * v17) == 1) {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND regex rule %d FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, *(unsigned __int16 *)(*(void *)(*(void *)(a4 + 344) + 8 * v17) + 2));
    }
    else {
      log_OutText(v32, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"COMPOUND normal rule FIRED : SET \"%s\" -> \"%s\"", v29, v30, v31, (uint64_t)__s2);
    }
  }
  return CompoundAccent;
}

uint64_t insert_NLU_info(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned __int16 v10 = a3;
  __int16 v11 = a2;
  if (a2 == a3)
  {
    if (a2 + 1 == *(unsigned __int16 *)(a6 + 8)) {
      unsigned __int16 v10 = a2 + 1;
    }
    else {
      unsigned __int16 v10 = a2;
    }
  }
  if (a2 >= v10) {
    return 0;
  }
  unsigned int v13 = a2;
  int v84 = v10 - 1;
  for (uint64_t i = 224 * a2 + 120; ; i += 224)
  {
    uint64_t v15 = *(const char **)a4;
    if (!*(void *)a4) {
      goto LABEL_12;
    }
    uint64_t v16 = *(void *)(*(void *)(*(void *)a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18));
    if (v16)
    {
      heap_Free(*(void **)(a1 + 8), v16);
      *(void *)(*(void *)(*(void *)a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18)) = 0;
      uint64_t v15 = *(const char **)a4;
    }
    uint64_t v17 = *(void **)(a1 + 8);
    int v18 = cstdlib_strlen(v15);
    uint64_t v19 = (char *)heap_Calloc(v17, 1, (v18 + 1));
    *(void *)(*(void *)(*(void *)a6 + i - 104) + 8 * *(unsigned __int16 *)(a5 + 18)) = v19;
    if (!v19) {
      break;
    }
    cstdlib_strcpy(v19, *(const char **)a4);
LABEL_12:
    uint64_t v24 = *(const char **)(a4 + 8);
    if (v24)
    {
      uint64_t v25 = *(void *)(*(void *)a6 + i - 40);
      if (v25)
      {
        heap_Free(*(void **)(a1 + 8), v25);
        *(void *)(*(void *)a6 + i - 40) = 0;
        uint64_t v24 = *(const char **)(a4 + 8);
      }
      uint64_t v26 = *(void **)(a1 + 8);
      int v27 = cstdlib_strlen(v24);
      uint64_t v28 = (char *)heap_Calloc(v26, 1, (v27 + 1));
      *(void *)(*(void *)a6 + i - 40) = v28;
      if (!v28) {
        break;
      }
      cstdlib_strcpy(v28, *(const char **)(a4 + 8));
      *(_WORD *)(*(void *)a6 + i - 116) = v11;
    }
    uint64_t v29 = *(const char **)(a4 + 16);
    if (v29) {
      BOOL v30 = v84 == v13;
    }
    else {
      BOOL v30 = 0;
    }
    if (v30)
    {
      if (cstdlib_strcmp(v29, "W"))
      {
        if (cstdlib_strcmp(*(const char **)(a4 + 16), "S"))
        {
          if (cstdlib_strcmp(*(const char **)(a4 + 16), "N")) {
            char v31 = 1;
          }
          else {
            char v31 = 2;
          }
          *(unsigned char *)(*(void *)a6 + i - 45) = v31;
          goto LABEL_31;
        }
        uint64_t v32 = *(void *)a6 + i;
        char v33 = 4;
      }
      else
      {
        uint64_t v32 = *(void *)a6 + i;
        char v33 = 3;
      }
      *(unsigned char *)(v32 - 45) = v33;
    }
LABEL_31:
    uint64_t v34 = *(const char **)(a4 + 32);
    if (!v34) {
      goto LABEL_40;
    }
    if (!cstdlib_strcmp(v34, "0"))
    {
      uint64_t v36 = *(void *)a6 + i;
LABEL_37:
      *(unsigned char *)(v36 - 46) = 0;
      goto LABEL_40;
    }
    if (cstdlib_strcmp(*(const char **)(a4 + 32), "1"))
    {
      int v35 = cstdlib_strcmp(*(const char **)(a4 + 32), "2");
      uint64_t v36 = *(void *)a6 + i;
      if (v35) {
        goto LABEL_37;
      }
      char v37 = 2;
    }
    else
    {
      uint64_t v36 = *(void *)a6 + i;
      char v37 = 1;
    }
    *(unsigned char *)(v36 - 46) = v37;
LABEL_40:
    uint64_t v38 = *(const char **)(a4 + 56);
    if (v38)
    {
      uint64_t v39 = *(void *)(*(void *)a6 + i - 24);
      if (v39)
      {
        heap_Free(*(void **)(a1 + 8), v39);
        *(void *)(*(void *)a6 + i - 24) = 0;
        uint64_t v38 = *(const char **)(a4 + 56);
      }
      uint64_t v40 = *(void **)(a1 + 8);
      int v41 = cstdlib_strlen(v38);
      int v42 = (char *)heap_Calloc(v40, 1, (v41 + 1));
      *(void *)(*(void *)a6 + i - 24) = v42;
      if (!v42) {
        break;
      }
      cstdlib_strcpy(v42, *(const char **)(a4 + 56));
      int v43 = *(void **)(a1 + 8);
      int v44 = cstdlib_strlen("[COMP");
      uint64_t v45 = heap_Calloc(v43, 1, (v44 + 1));
      *(void *)(*(void *)a6 + i + 56) = v45;
      if (!v45) {
        break;
      }
      if (cstdlib_strncmp(*(const char **)(a4 + 56), "B-", 2uLL)) {
        size_t v46 = "COMP]";
      }
      else {
        size_t v46 = "[COMP";
      }
      cstdlib_strcpy(*(char **)(*(void *)a6 + i + 56), v46);
    }
    uint64_t v47 = *(const char **)(a4 + 24);
    if (v47 && v84 == v13)
    {
      uint64_t v48 = *(uint64_t **)(a1 + 8);
      uint64_t v49 = *(void *)(*(void *)a6 + i);
      int v50 = cstdlib_strlen(v47);
      uint64_t v51 = (char *)heap_Realloc(v48, v49, (v50 + 1));
      if (!v51) {
        break;
      }
      *(void *)(*(void *)a6 + i) = v51;
      cstdlib_strcpy(v51, *(const char **)(a4 + 24));
    }
    size_t v52 = *(const char **)(a4 + 40);
    if (v52)
    {
      int v53 = cstdlib_strlen(v52);
      uint64_t v54 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*(void *)a6 + i + 32), (v53 + 32) & 0xFFFFFFE0);
      if (!v54) {
        break;
      }
      int v55 = v54;
      cstdlib_strcpy(v54, *(const char **)(a4 + 40));
      *(void *)(*(void *)a6 + i + 32) = v55;
    }
    uint64_t v56 = *(const char **)(a4 + 48);
    if (v56)
    {
      int v57 = cstdlib_strlen(v56);
      unsigned __int16 v58 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(*(void *)a6 + i + 40), (v57 + 32) & 0xFFFFFFE0);
      if (!v58) {
        break;
      }
      char v59 = v58;
      cstdlib_strcpy(v58, *(const char **)(a4 + 48));
      *(void *)(*(void *)a6 + i + 40) = v59;
      if (i != 120 && cstdlib_strstr(v59, "S_PUNC")) {
        *(_DWORD *)(*(void *)a6 + 224 * (v13 - 1) + 28) = 1;
      }
      if (cstdlib_strstr(v59, "E_PUNC")) {
        *(_DWORD *)(*(void *)a6 + i - 92) = 1;
      }
      if (a7 == 1)
      {
        unsigned int v60 = cstdlib_strstr(*(char **)(a4 + 48), "S_PUNC:");
        if (v60)
        {
          char v61 = &v60[cstdlib_strlen("S_PUNC:")];
          unsigned int v62 = cstdlib_strstr(v61, ";");
          if (v62) {
            unsigned __int16 v63 = (_WORD)v62 - (_WORD)v61;
          }
          else {
            unsigned __int16 v63 = cstdlib_strlen(v61);
          }
          size_t v64 = v63;
          uint64_t v65 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v63 + 1);
          *(void *)(*(void *)a6 + i + 64) = v65;
          if (!v65) {
            break;
          }
          cstdlib_strncpy(v65, v61, v64);
        }
        uint64_t v66 = cstdlib_strstr(*(char **)(a4 + 48), "E_PUNC:");
        if (v66)
        {
          uint64_t v67 = &v66[cstdlib_strlen("E_PUNC:")];
          char v68 = *(void **)(a1 + 8);
          size_t v69 = cstdlib_strlen(v67);
          int v70 = (char *)heap_Calloc(v68, 1, v69 + 1);
          *(void *)(*(void *)a6 + i + 72) = v70;
          if (!v70) {
            break;
          }
          cstdlib_strcpy(v70, v67);
        }
        unsigned int v71 = cstdlib_strstr(*(char **)(a4 + 48), "X_PUNC:");
        if (v71)
        {
          uint64_t v72 = &v71[cstdlib_strlen("X_PUNC:")];
          unsigned int v73 = *(void **)(a1 + 8);
          size_t v74 = cstdlib_strlen(v72);
          unsigned __int16 v75 = (char *)heap_Calloc(v73, 1, v74 + 1);
          *(void *)(*(void *)a6 + i + 80) = v75;
          if (!v75) {
            break;
          }
          cstdlib_strcpy(v75, v72);
        }
      }
    }
    uint64_t v76 = *(void *)(a4 + 72);
    if (v76)
    {
      *(void *)(*(void *)a6 + i + 16) = v76;
      unsigned __int16 v77 = *(const char **)(a4 + 64);
      if (v77)
      {
        uint64_t v78 = *(void *)(a1 + 8);
        size_t v79 = cstdlib_strlen(v77);
        int v80 = (char *)heap_Alloc(v78, v79 + 1);
        *(void *)(*(void *)a6 + i + 8) = v80;
        if (!v80) {
          break;
        }
        cstdlib_strcpy(v80, *(const char **)(a4 + 64));
      }
    }
    if (v10 == (unsigned __int16)++v13) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v82);
  return 2315264010;
}

uint64_t resolvePHR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if (v12)
    {
      unsigned __int16 v14 = (unsigned __int16 *)(*(void *)a4 + v12);
      if (!*((void *)v14 + 10))
      {
        uint64_t v15 = (v13 - 1);
        uint64_t v16 = *(const char **)(*(void *)a4 + 224 * v15 + 80);
        if (v16)
        {
          unint64_t v17 = *v14;
          if (v17 >= 2 && *(unsigned char *)(a1 + (v17 - 1)) == 95)
          {
            int v18 = *(void **)(a2 + 8);
            int v19 = cstdlib_strlen(v16);
            uint64_t v20 = (char *)heap_Calloc(v18, 1, (v19 + 3));
            uint64_t v25 = *(void *)a4;
            *(void *)(*(void *)a4 + v12 + 80) = v20;
            if (!v20) {
              goto LABEL_83;
            }
            cstdlib_strcpy(v20, *(const char **)(v25 + 224 * v15 + 80));
            if (cstdlib_strcmp(*(const char **)(*(void *)a4 + v12 + 80), "O")) {
              **(unsigned char **)(*(void *)a4 + v12 + 80) = 73;
            }
            uint64_t v26 = *(void **)(a2 + 8);
            int v27 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)a4 + 224 * v15 + 16)
                                                + 8 * *(unsigned __int16 *)(a3 + 18)));
            uint64_t v28 = (char *)heap_Calloc(v26, 1, (v27 + 3));
            uint64_t v29 = *(void *)a4;
            uint64_t v30 = *(unsigned __int16 *)(a3 + 18);
            *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v30) = v28;
            if (!v28)
            {
LABEL_83:
              uint64_t v104 = 2315264010;
              log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v106);
              return v104;
            }
            cstdlib_strcpy(v28, *(const char **)(*(void *)(v29 + 224 * v15 + 16) + 8 * v30));
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v31, v32, v33, v13);
          }
          else
          {
            int v34 = *(unsigned __int8 *)v16;
            if (v34 == 66)
            {
              uint64_t v47 = *(void **)(a2 + 8);
              int v48 = cstdlib_strlen(v16);
              uint64_t v49 = (char *)heap_Calloc(v47, 1, (v48 + 3));
              uint64_t v50 = *(void *)a4;
              *(void *)(*(void *)a4 + v12 + 80) = v49;
              if (!v49) {
                goto LABEL_83;
              }
              cstdlib_strcpy(v49, *(const char **)(v50 + 224 * v15 + 80));
              **(unsigned char **)(*(void *)a4 + v12 + 80) = 73;
              uint64_t v51 = *(void **)(a2 + 8);
              int v52 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)a4 + 224 * v15 + 16)
                                                  + 8 * *(unsigned __int16 *)(a3 + 18)));
              int v53 = (char *)heap_Calloc(v51, 1, (v52 + 3));
              uint64_t v54 = *(void *)a4;
              uint64_t v55 = *(unsigned __int16 *)(a3 + 18);
              *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v55) = v53;
              if (!v53) {
                goto LABEL_83;
              }
              cstdlib_strcpy(v53, *(const char **)(*(void *)(v54 + 224 * v15 + 16) + 8 * v55));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v56, v57, v58, v13);
            }
            else if (v34 == 79 || v34 == 73)
            {
              int v35 = *(void **)(a2 + 8);
              int v36 = cstdlib_strlen(v16);
              char v37 = (char *)heap_Calloc(v35, 1, (v36 + 3));
              uint64_t v38 = *(void *)a4;
              *(void *)(*(void *)a4 + v12 + 80) = v37;
              if (!v37) {
                goto LABEL_83;
              }
              cstdlib_strcpy(v37, *(const char **)(v38 + 224 * v15 + 80));
              uint64_t v39 = *(void **)(a2 + 8);
              int v40 = cstdlib_strlen(*(const char **)(*(void *)(*(void *)a4 + 224 * v15 + 16)
                                                  + 8 * *(unsigned __int16 *)(a3 + 18)));
              int v41 = (char *)heap_Calloc(v39, 1, (v40 + 3));
              uint64_t v42 = *(void *)a4;
              uint64_t v43 = *(unsigned __int16 *)(a3 + 18);
              *(void *)(*(void *)(*(void *)a4 + v12 + 16) + 8 * v43) = v41;
              if (!v41) {
                goto LABEL_83;
              }
              cstdlib_strcpy(v41, *(const char **)(*(void *)(v42 + 224 * v15 + 16) + 8 * v43));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v44, v45, v46, v13);
            }
          }
        }
      }
    }
    ++v13;
    unint64_t v59 = *(unsigned __int16 *)(a4 + 8);
    v12 += 224;
  }
  while (v13 < v59);
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  unint64_t v60 = 0;
  uint64_t v61 = 80;
  do
  {
    if (!*(void *)(*(void *)a4 + v61))
    {
      if ((insert_NLU_info(a2, (unsigned __int16)v60, (unsigned __int16)(v60 + 1), (uint64_t)&unk_264561048, a3, a4, a5) & 0x80000000) != 0)
      {
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Failed to fill out PHR=B-NIL on word : word index=%d", a6, a7, a8, v60);
        return 2315264000;
      }
      LODWORD(v59) = *(unsigned __int16 *)(a4 + 8);
    }
    ++v60;
    v61 += 224;
  }
  while (v60 < v59);
  if (!v59) {
    return 0;
  }
  uint64_t v62 = 0;
  unsigned __int16 v63 = (void *)(*(void *)a4 + 80);
  do
  {
    if (!*v63)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v62);
      return 2315264000;
    }
    ++v62;
    v63 += 28;
  }
  while (v59 != v62);
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  do
  {
    if (!cstdlib_strncmp(*(const char **)(*(void *)a4 + v64 + 80), "I-", 2uLL))
    {
      uint64_t v69 = *(void *)a4;
      if (v64)
      {
        if (cstdlib_strcmp(*(const char **)(v69 + 224 * (v65 - 1) + 80), *(const char **)(v69 + v64 + 80)))
        {
          cstdlib_strcpy(__dst, *(const char **)(*(void *)a4 + v64 + 80));
          __dst[0] = 66;
          if (cstdlib_strcmp(*(const char **)(*(void *)a4 + 224 * (v65 - 1) + 80), __dst))
          {
            **(unsigned char **)(*(void *)a4 + v64 + 80) = 66;
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v70, v71, v72, v65);
          }
        }
      }
      else
      {
        **(unsigned char **)(v69 + 80) = 66;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v66, v67, v68, 0);
      }
    }
    unsigned int v73 = *(const char **)(*(void *)a4 + v64 + 176);
    if (v73)
    {
      int v74 = cstdlib_strcmp(v73, "COMP]");
      if (v64)
      {
        if (!v74)
        {
          uint64_t v75 = (v65 - 1);
          uint64_t v76 = *(const char **)(*(void *)a4 + 224 * v75 + 176);
          if (v76)
          {
            if (!cstdlib_strcmp(v76, "COMP]"))
            {
              uint64_t v77 = 224 * v75;
              heap_Free(*(void **)(a2 + 8), *(void *)(*(void *)a4 + v77 + 176));
              *(void *)(*(void *)a4 + v77 + 176) = 0;
            }
          }
        }
      }
    }
    ++v65;
    v64 += 224;
  }
  while (v65 < *(unsigned __int16 *)(a4 + 8));
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  int v78 = 0;
  uint64_t v79 = *(void *)a4;
  while (2)
  {
    cstdlib_strcpy(__dst, *(const char **)(v79 + 224 * (unsigned __int16)v78 + 80));
    if (!cstdlib_strncmp(__dst, "B-", 2uLL)) {
      cstdlib_strcpy(__dst, (const char *)(*(void *)(*(void *)a4 + 224 * (unsigned __int16)v78 + 80) + 2));
    }
    LODWORD(v83) = v78;
    if (*(unsigned __int16 *)(a4 + 8) > (unsigned __int16)v78)
    {
      unint64_t v83 = (unsigned __int16)v78;
      uint64_t v84 = 224 * (unsigned __int16)v78 + 80;
      do
      {
        uint64_t v85 = *(const char **)(*(void *)a4 + v84);
        if (!v85
          || cstdlib_strcmp(v85, __dst)
          && (cstdlib_strlen(*(const char **)(*(void *)a4 + v84)) < 3
           || cstdlib_strcmp((const char *)(*(void *)(*(void *)a4 + v84) + 2), __dst)
           || cstdlib_strncmp(*(const char **)(*(void *)a4 + v84), "I-", 2uLL))
          && *(unsigned __int16 *)(*(void *)a4 + v84 - 76) != *(unsigned __int16 *)(*(void *)a4
                                                                                    + 224 * (unsigned __int16)v78
                                                                                    + 4))
        {
          break;
        }
        ++v83;
        v84 += 224;
      }
      while (v83 < *(unsigned __int16 *)(a4 + 8));
    }
    int v86 = (unsigned __int16)v83 - 1;
    uint64_t v87 = (unsigned __int16)v78;
    if (v86 <= (unsigned __int16)v78) {
      goto LABEL_70;
    }
    int v88 = 0;
    int v89 = v78;
    unsigned __int16 v90 = v78;
    do
    {
      if (*(_DWORD *)(*(void *)a4 + 224 * (unsigned __int16)v89 + 28) == 1)
      {
        uint64_t v91 = v90;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[1] add syn chunk %s%s from %d to %d", v80, v81, v82, (uint64_t)__dst);
        uint64_t v93 = addSynChunk(a2, __dst, "-P", v91, (unsigned __int16)v89, a3, a4, v92);
        if ((v93 & 0x80000000) != 0) {
          return v93;
        }
        ++v89;
        int v88 = 1;
        unsigned __int16 v90 = v89;
      }
      else
      {
        ++v89;
      }
    }
    while (v86 > (unsigned __int16)v89);
    uint64_t v87 = (unsigned __int16)v78;
    if (!v88)
    {
LABEL_70:
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v80, v81, v82, (uint64_t)__dst);
      unsigned int v96 = (unsigned __int16)(v83 - 1);
      uint64_t v97 = a2;
      unsigned __int16 v98 = 0;
      uint64_t v99 = v87;
      goto LABEL_71;
    }
    if ((unsigned __int16)v83 > v90)
    {
      uint64_t v94 = v90;
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"[2] add syn chunk %s%s from %d to %d", v80, v81, v82, (uint64_t)__dst);
      unsigned int v96 = (unsigned __int16)(v83 - 1);
      uint64_t v97 = a2;
      unsigned __int16 v98 = "-P";
      uint64_t v99 = v94;
LABEL_71:
      uint64_t v93 = addSynChunk(v97, __dst, v98, v99, v96, a3, a4, v95);
      if ((v93 & 0x80000000) != 0) {
        return v93;
      }
    }
    uint64_t v79 = *(void *)a4;
    *(_DWORD *)(*(void *)a4 + 224 * (unsigned __int16)v78 + 44) = 1;
    uint64_t v100 = v79 + 224 * v86;
    *(_DWORD *)(v100 + 40) = 1;
    if (*(_DWORD *)(v100 + 28) == 1) {
      *(_DWORD *)(v79 + 224 * (unsigned __int16)v78 + 32) = 1;
    }
    if ((unsigned __int16)v78 == (unsigned __int16)v83) {
      int v78 = v83 + 1;
    }
    else {
      int v78 = v83;
    }
    if ((unsigned __int16)v78 < *(unsigned __int16 *)(a4 + 8)) {
      continue;
    }
    break;
  }
  if (!*(_WORD *)(a4 + 8)) {
    return 0;
  }
  unint64_t v101 = 0;
  uint64_t v102 = *(void *)a4;
  uint64_t v103 = 80;
  do
  {
    heap_Free(*(void **)(a2 + 8), *(void *)(v102 + v103));
    uint64_t v104 = 0;
    uint64_t v102 = *(void *)a4;
    *(void *)(*(void *)a4 + v103) = 0;
    ++v101;
    v103 += 224;
  }
  while (v101 < *(unsigned __int16 *)(a4 + 8));
  return v104;
}

uint64_t addMarkerType(uint64_t a1, const char *a2, const char *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t result = checkSpan(a1, a6, (uint64_t *)(*a7 + 224 * a4 + 56));
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = checkSpan(a1, a6, (uint64_t *)(*a7 + 224 * a5 + 56));
    if ((result & 0x80000000) == 0)
    {
      uint64_t v18 = a4;
      unint64_t v19 = *(unsigned __int16 *)(a6 + 74);
      uint64_t v20 = 8 * v19;
      do
      {
        if (v19 >= *(unsigned __int16 *)(a6 + 72) || (uint64_t v21 = *(void *)(a6 + 528)) == 0)
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Ignoring marker :%s, as not in DEFMAPPING list", v15, v16, v17, (uint64_t)a2);
          return 0;
        }
        int v22 = cstdlib_strcmp((const char *)(v21+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 64) + v20))), a2);
        ++v19;
        v20 += 8;
      }
      while (v22);
      uint64_t v23 = *a7;
      uint64_t v24 = (unsigned __int16)(v19 - 1);
      uint64_t v25 = *(void *)(*a7 + 224 * a4 + 56) + 32 * v24;
      *(_DWORD *)uint64_t v25 = 1;
      *(_WORD *)(v25 + 8) = a4;
      *(_WORD *)(v25 + 10) = a5;
      uint64_t v26 = *(void *)(v23 + 224 * a5 + 56) + 32 * v24;
      *(_DWORD *)(v26 + 4) = 1;
      *(_WORD *)(v26 + 8) = a4;
      int v27 = *(void **)(a1 + 8);
      int v28 = cstdlib_strlen(a3);
      uint64_t v29 = (char *)heap_Calloc(v27, 1, (v28 + 1));
      *(void *)(*(void *)(*a7 + 224 * v18 + 56) + 32 * v24 + 16) = v29;
      if (v29)
      {
        cstdlib_strcpy(v29, a3);
        return 0;
      }
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v30, v31, v32, v33, v34);
      return 2315264010;
    }
  }
  return result;
}

uint64_t createPOSString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (2 * *(unsigned __int16 *)(a3 + 8)) | 1);
  *(void *)(a3 + 24) = v6;
  if (!v6) {
    goto LABEL_14;
  }
  if (*(_WORD *)(a3 + 8))
  {
    unint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 16;
    do
    {
      v12 += cstdlib_strlen(*(const char **)(*(void *)(*(void *)a3 + v13) + 8 * *(unsigned __int16 *)(a2 + 18)))
           + 1;
      ++v11;
      v13 += 224;
    }
    while (v11 < *(unsigned __int16 *)(a3 + 8));
    uint64_t v14 = (unsigned __int16)v12 + 1;
  }
  else
  {
    uint64_t v14 = 1;
  }
  uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, v14);
  *(void *)(a3 + 16) = v15;
  if (v15)
  {
    if (*(_WORD *)(a3 + 8))
    {
      unint64_t v16 = 0;
      int v17 = 0;
      uint64_t v18 = 16;
      do
      {
        uint64_t v19 = *(void *)(a3 + 16);
        *(_WORD *)(*(void *)(a3 + 24) + 2 * v16) = v17;
        uint64_t v20 = (void *)(v19 + (unsigned __int16)v17);
        uint64_t v21 = *(const char **)(*(void *)(*(void *)a3 + v18) + 8 * *(unsigned __int16 *)(a2 + 18));
        size_t v22 = cstdlib_strlen(v21);
        cstdlib_memcpy(v20, v21, v22);
        int v23 = v17
            + cstdlib_strlen(*(const char **)(*(void *)(*(void *)a3 + v18) + 8 * *(unsigned __int16 *)(a2 + 18)));
        unint64_t v24 = *(unsigned __int16 *)(a3 + 8);
        if ((int)v16 + 1 < v24)
        {
          cstdlib_strcat((char *)(*(void *)(a3 + 16) + (unsigned __int16)v23), " ");
          unint64_t v24 = *(unsigned __int16 *)(a3 + 8);
        }
        int v17 = v23 + 1;
        ++v16;
        v18 += 224;
      }
      while (v16 < v24);
    }
    return 0;
  }
  else
  {
LABEL_14:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v7, v8, v9, v10, v26);
    return 2315264010;
  }
}

uint64_t getSyllCount(const char *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (cstdlib_strlen(a1) && cstdlib_strcmp(v1, "."))
    {
      unsigned __int16 v2 = cstdlib_strlen(v1);
      unsigned __int16 v3 = 1;
      uint64_t v4 = v2;
      if (v2)
      {
        do
        {
          int v5 = *(unsigned __int8 *)v1++;
          if (v5 == 46) {
            ++v3;
          }
          --v4;
        }
        while (v4);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t getPhonWeights(uint64_t *a1)
{
  if (*((_WORD *)a1 + 4))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    uint64_t v4 = *a1;
    do
    {
      __int16 SyllCount = getSyllCount(*(const char **)(v4 + v2 + 8));
      uint64_t v4 = *a1;
      *(_WORD *)(*a1 + v2 + 24) = SyllCount;
      ++v3;
      v2 += 224;
    }
    while (v3 < *((unsigned __int16 *)a1 + 4));
  }
  return 0;
}

uint64_t add2Str(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s)
{
  size_t v8 = cstdlib_strlen(__s);
  uint64_t v9 = *a3;
  if (v8 >= v9 - cstdlib_strlen(*a2))
  {
    __int16 v11 = cstdlib_strlen(__s);
    __int16 v12 = *a3;
    unsigned int v13 = (unsigned __int16)(v11 - v12 + cstdlib_strlen(*a2));
    if (v13 <= 0x80) {
      uint64_t v14 = 128;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v10 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a3 + v14 + 1);
    if (!v10)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v22);
      return 2315264010;
    }
    *a2 = v10;
    *a3 += v14;
  }
  else
  {
    uint64_t v10 = *a2;
  }
  size_t v19 = cstdlib_strlen(v10);
  uint64_t v20 = (char *)*a2;
  if (v19) {
    cstdlib_strcat(v20, __s);
  }
  else {
    cstdlib_strcpy(v20, __s);
  }
  return 0;
}

unsigned __int16 **setDomainOnWord(unsigned __int16 **result, unsigned int a2, unsigned int a3, int a4)
{
  if (*((_WORD *)result + 4))
  {
    uint64_t v4 = *result;
    uint64_t v5 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v6 = *v4;
      if (v6 >= a2 && v4[1] <= a3) {
        *((_DWORD *)v4 + 13) = a4;
      }
      BOOL v7 = v6 > a3 || v5-- == 0;
      v4 += 112;
    }
    while (!v7);
  }
  return result;
}

unsigned __int16 **setPhoneticRange(unsigned __int16 **result, unsigned int a2, unsigned int a3)
{
  if (*((_WORD *)result + 4))
  {
    unint64_t v3 = *result;
    uint64_t v4 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v5 = *v3;
      if (v5 >= a2 && v3[1] <= a3) {
        *((_DWORD *)v3 + 12) = 1;
      }
      BOOL v6 = v5 > a3 || v4-- == 0;
      v3 += 112;
    }
    while (!v6);
  }
  return result;
}

uint64_t printAsChunks(uint64_t result, const char **a2, unsigned __int16 *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"CHUNKS", a6, a7, a8, 0);
    if (*((_WORD *)a5 + 4))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *a5;
        uint64_t v18 = *(void *)(*a5 + v15 + 56);
        if (v18 && *(_DWORD *)(v18 + 32 * *(unsigned __int16 *)(a4 + 24)) == 1)
        {
          uint64_t result = add2Str(*(void *)a4, a2, a3, "[");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(*a5 + v15 + 56) + 32 * *(unsigned __int16 *)(a4 + 24) + 16));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = add2Str(*(void *)a4, a2, a3, " ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v17 = *a5;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(v17 + v15 + 16) + 8 * *(unsigned __int16 *)(a4 + 16)));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, "_");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, *(char **)(*(void *)(*a5 + v15 + 16) + 8 * *(unsigned __int16 *)(a4 + 18)));
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = add2Str(*(void *)a4, a2, a3, " ");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v19 = *(void *)(*a5 + v15 + 56);
        if (v19 && *(_DWORD *)(v19 + 32 * *(unsigned __int16 *)(a4 + 24) + 4) == 1)
        {
          uint64_t result = add2Str(*(void *)a4, a2, a3, "] ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v20, v21, v22, (uint64_t)*a2);
          cstdlib_strcpy((char *)*a2, "");
        }
        ++v16;
        v15 += 224;
      }
      while (v16 < *((unsigned __int16 *)a5 + 4));
    }
    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v12, v13, v14, (uint64_t)*a2);
    cstdlib_strcpy((char *)*a2, "");
    return 0;
  }
  return result;
}

uint64_t printSent(uint64_t a1, int a2, const char **a3, char *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (!a2) {
    return 0;
  }
  uint64_t v14 = a1;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a8);
  if (*(_WORD *)(a7 + 8))
  {
    uint64_t v15 = 0;
    unint64_t v16 = "tmphr=%4s ";
    if (a9 == 1) {
      unint64_t v16 = "%4s ";
    }
    uint64_t v43 = (char *)v16;
    while (1)
    {
      sprintf(a4, "[%2d] ", v15);
      uint64_t result = add2Str(v14, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v18 = 224 * v15;
      cstdlib_strncpy(a4, *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 16)), 0x14uLL);
      unsigned int v19 = (unsigned __int16)cstdlib_strlen(*(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16)
                                                            + 8 * *(unsigned __int16 *)(a6 + 16)));
      if (v19 <= 0x13)
      {
        do
        {
          cstdlib_strcat(a4, " ");
          BOOL v20 = v19++ >= 0x13;
        }
        while (!v20);
      }
      uint64_t result = add2Str(v14, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(v14, a3, a5, " ");
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v21 = *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 18));
      if (!v21) {
        uint64_t v21 = " ";
      }
      sprintf(a4, "%6s ", v21);
      uint64_t result = add2Str(v14, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t v22 = *(void *)a7;
      if (*(void *)(*(void *)a7 + 224 * v15 + 80))
      {
        sprintf(a4, v43, *(void *)(*(void *)a7 + 224 * v15 + 80));
        uint64_t result = add2Str(v14, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v22 = *(void *)a7;
      }
      if (*(void *)(v22 + 224 * v15 + 88))
      {
        sprintf(a4, "retag=%4s ", *(const char **)(v22 + 224 * v15 + 88));
        uint64_t result = add2Str(v14, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v22 = *(void *)a7;
      }
      int v23 = *(const char **)(*(void *)(v22 + 224 * v15 + 16) + 8 * *(unsigned __int16 *)(a6 + 20));
      if (!v23) {
        int v23 = " ";
      }
      sprintf(a4, "%6s ", v23);
      uint64_t result = add2Str(v14, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      cstdlib_strncpy(a4, *(const char **)(*(void *)a7 + v18 + 8), 0x14uLL);
      unsigned int v24 = (unsigned __int16)cstdlib_strlen(*(const char **)(*(void *)a7 + v18 + 8));
      if (v24 <= 0x13)
      {
        do
        {
          cstdlib_strcat(a4, " ");
          BOOL v20 = v24++ >= 0x13;
        }
        while (!v20);
      }
      uint64_t result = add2Str(v14, a3, a5, a4);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      if (*(_WORD *)(*(void *)a7 + 224 * v15 + 24))
      {
        sprintf(a4, "(nsyll=%d) ", *(unsigned __int16 *)(*(void *)a7 + 224 * v15 + 24));
        uint64_t result = add2Str(v14, a3, a5, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      if (a9 == 1)
      {
        uint64_t v28 = *(void *)a7;
        if (*(void *)(*(void *)a7 + 224 * v15 + 184))
        {
          sprintf(a4, "startDocPunc=%s ", *(const char **)(*(void *)a7 + 224 * v15 + 184));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 192))
        {
          sprintf(a4, "endDocPunc=%s ", *(const char **)(v28 + 224 * v15 + 192));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 200))
        {
          sprintf(a4, "singleDocPunc=%s ", *(const char **)(v28 + 224 * v15 + 200));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 208))
        {
          sprintf(a4, "orthPunc=%s ", *(const char **)(v28 + 224 * v15 + 208));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 168))
        {
          sprintf(a4, "tokTag=%s ", *(const char **)(v28 + 224 * v15 + 168));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v28 = *(void *)a7;
        }
        if (*(void *)(v28 + 224 * v15 + 176))
        {
          sprintf(a4, "compoundInfo=%s ");
          goto LABEL_72;
        }
      }
      else if (!a9)
      {
        uint64_t v29 = *(void *)a7;
        if (*(_DWORD *)(*(void *)a7 + 224 * v15 + 220))
        {
          uint64_t result = add2Str(v14, a3, a5, "DUMMYWORD ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 28))
        {
          uint64_t result = add2Str(v14, a3, a5, "_HASCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 36))
        {
          uint64_t result = add2Str(v14, a3, a5, "_HASBNDBEFORESET ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 44))
        {
          uint64_t result = add2Str(v14, a3, a5, "_ISFIRSTINPHR ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 40))
        {
          uint64_t result = add2Str(v14, a3, a5, "_ISLASTINPHR ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 32))
        {
          uint64_t result = add2Str(v14, a3, a5, "_PHRENDSINCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(void *)(v29 + 224 * v15 + 96))
        {
          sprintf(a4, "compoundTag=%s ", *(const char **)(v29 + 224 * v15 + 96));
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)a7;
        }
        if (*(_DWORD *)(v29 + 224 * v15 + 52))
        {
          sprintf(a4, "domain=%s ");
LABEL_72:
          uint64_t result = add2Str(v14, a3, a5, a4);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
      }
      if (!*(_DWORD *)(*(void *)a7 + 224 * v15 + 48)
        || (uint64_t result = add2Str(v14, a3, a5, " bPHONETIC "), (result & 0x80000000) == 0))
      {
        if (a9 == 1 && *(_WORD *)(a6 + 72))
        {
          uint64_t v44 = v14;
          uint64_t v30 = a3;
          uint64_t v31 = a5;
          uint64_t v32 = 0;
          unint64_t v33 = 0;
          uint64_t v34 = 4;
          do
          {
            uint64_t v35 = *(void *)a7;
            uint64_t v36 = *(void *)(*(void *)a7 + 224 * v15 + 56);
            if (v36)
            {
              if (*(_DWORD *)(v36 + v32) != 1) {
                goto LABEL_85;
              }
              if (*(_DWORD *)(v36 + v32 + 24) == 1) {
                sprintf(a4, "<%s_%s_ext ");
              }
              else {
                sprintf(a4, "<%s_%s ");
              }
              uint64_t result = add2Str(v44, v30, v31, a4);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v35 = *(void *)a7;
              uint64_t v36 = *(void *)(*(void *)a7 + 224 * v15 + 56);
              if (v36)
              {
LABEL_85:
                uint64_t v37 = v36 + v32;
                if (*(_DWORD *)(v37 + 4) == 1)
                {
                  if (*(_DWORD *)(*(void *)(v35 + 224 * *(unsigned __int16 *)(v37 + 8) + 56) + v32 + 24) == 1) {
                    sprintf(a4, "%s_ext_%s> ");
                  }
                  else {
                    sprintf(a4, "%s_%s> ");
                  }
                  uint64_t result = add2Str(v44, v30, v31, a4);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
            }
            ++v33;
            unint64_t v38 = *(unsigned __int16 *)(a6 + 72);
            v32 += 32;
            v34 += 8;
          }
          while (v33 < v38);
          if (*(void *)(*(void *)a7 + 224 * v15 + 64)) {
            BOOL v39 = v38 == 0;
          }
          else {
            BOOL v39 = 1;
          }
          a5 = v31;
          a3 = v30;
          uint64_t v14 = v44;
          if (!v39)
          {
            unint64_t v40 = 0;
            uint64_t v41 = 4;
            do
            {
              uint64_t v42 = *(const char **)(*(void *)(*(void *)a7 + 224 * v15 + 64) + 8 * v40);
              if (v42)
              {
                snprintf(a4, 0x400uLL, "[%s %s] ", (const char *)(*(void *)(a6 + 528)+ *(unsigned int *)(*(void *)(a6 + 536)+ 4 * *(unsigned int *)(*(void *)(a6 + 64) + v41))), v42);
                uint64_t result = add2Str(v44, a3, a5, a4);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                LOWORD(v38) = *(_WORD *)(a6 + 72);
              }
              ++v40;
              v41 += 8;
            }
            while (v40 < (unsigned __int16)v38);
          }
        }
        log_OutText(*(void *)(v14 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v25, v26, v27, (uint64_t)*a3);
        cstdlib_strcpy((char *)*a3, "");
        uint64_t result = 0;
        if (++v15 < (unint64_t)*(unsigned __int16 *)(a7 + 8)) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t printMSTree(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, const char *a5, unsigned int a6, const char **a7, char *a8, unsigned __int16 *a9, char *a10, unsigned __int16 a11)
{
  if (!a4) {
    return 0;
  }
  unint64_t v16 = a3;
  kbsymtab_ConsSymString(a3, *(__int16 *)(a4 + 16), a10, a11);
  uint64_t v42 = a5;
  if (a6)
  {
    cstdlib_strcpy(a8, "");
    int v18 = 0;
    do
    {
      cstdlib_strcat(a8, "  ");
      ++v18;
    }
    while (a6 > (unsigned __int16)v18);
    uint64_t result = add2Str(a1, a7, a9, a8);
    if ((result & 0x80000000) != 0) {
      return result;
    }
  }
  uint64_t result = add2Str(a1, a7, a9, a10);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t result = add2Str(a1, a7, a9, "(");
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (*(__int16 *)(a4 + 24) < 1)
  {
LABEL_18:
    uint64_t result = add2Str(a1, a7, a9, ")");
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!*(void *)(a4 + 8))
    {
      unsigned __int16 v25 = cstdlib_strlen(a5);
      int v26 = *(_DWORD *)(a4 + 56);
      if (v26 > v25)
      {
        *(_DWORD *)(a4 + 56) = v25;
        int v26 = v25;
      }
      uint64_t v27 = *(int *)(a4 + 52);
      if ((int)v27 > v25
        || v26 > v25
        || (BOOL v28 = __OFSUB__(v26, v27), v29 = v26 - v27, (v29 < 0) ^ v28 | (v29 == 0)))
      {
        unint64_t v33 = "<ERROR>";
        uint64_t v30 = a1;
        uint64_t v31 = a7;
        uint64_t v32 = a9;
      }
      else
      {
        cstdlib_strncpy(a10, &a5[v27], (unsigned __int16)(v29 - 1));
        a10[(unsigned __int16)(*(_DWORD *)(a4 + 56) + ~*(_WORD *)(a4 + 52))] = 0;
        a5 = v42;
        sprintf(a8, " <%s>", a10);
        uint64_t v30 = a1;
        uint64_t v31 = a7;
        uint64_t v32 = a9;
        unint64_t v33 = a8;
      }
      uint64_t result = add2Str(v30, v31, v32, v33);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", v22, v23, v24, (uint64_t)*a7);
    cstdlib_strcpy((char *)*a7, "");
    uint64_t v34 = *(void **)(a4 + 8);
    if (v34)
    {
      uint64_t v41 = v16;
      do
      {
        if (a6 && v34 != *(void **)(a4 + 8))
        {
          uint64_t v35 = a5;
          cstdlib_strcpy(a8, "");
          int v36 = 0;
          do
          {
            cstdlib_strcat(a8, "  ");
            ++v36;
          }
          while (a6 > (unsigned __int16)v36);
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s,", v37, v38, v39, (uint64_t)a8);
          cstdlib_strcpy((char *)*a7, "");
          a5 = v35;
          unint64_t v16 = v41;
        }
        LOWORD(v40) = a11;
        uint64_t result = printMSTree(a1, a2, v16, v34, a5, (unsigned __int16)(a6 + 1), a7, a8, a9, a10, v40);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = 0;
        uint64_t v34 = (void *)*v34;
      }
      while (v34);
      return result;
    }
    return 0;
  }
  unsigned int v20 = 0;
  while (1)
  {
    if (v20)
    {
      uint64_t result = add2Str(a1, a7, a9, ",");
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    int v21 = *(__int16 *)(a4 + 26 + 2 * v20);
    if (v21 < 0)
    {
      uint64_t result = mosyntkbsymtab_AtomSymString(a2, v16, -v21, a10, a11);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = add2Str(a1, a7, a9, a10);
      a5 = v42;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else
    {
      sprintf(a8, "?%d", *(__int16 *)(a4 + 26 + 2 * v20));
      uint64_t result = add2Str(a1, a7, a9, a8);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    if (*(__int16 *)(a4 + 24) <= (__int16)++v20) {
      goto LABEL_18;
    }
  }
}

uint64_t getStartAndEndFromMSTree(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4)
{
  if (a1)
  {
    BOOL v7 = *(void **)(a1 + 8);
    if (v7)
    {
      do
      {
        getStartAndEndFromMSTree(v7, a2, a3, a4);
        BOOL v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      if (!*a4)
      {
        *a2 = *(_DWORD *)(a1 + 52);
        *a4 = 1;
      }
      *a3 = *(_DWORD *)(a1 + 56);
    }
  }
  return 0;
}

uint64_t addMSNode(uint64_t a1, char *__s, __int16 a3, __int16 a4, uint64_t a5)
{
  if (!*(_WORD *)(a5 + 8))
  {
    uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), 1, 513);
    *(void *)a5 = v17;
    if (v17)
    {
      __int16 v16 = 32;
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v21 = 2315264010;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v12, v13, v14, v15, v25);
    return v21;
  }
  uint64_t v10 = *(unsigned __int16 *)(a5 + 10);
  if (*(unsigned __int16 *)(a5 + 8) + 1 < v10) {
    goto LABEL_8;
  }
  uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)a5, 16 * v10 + 257);
  if (!v11) {
    goto LABEL_10;
  }
  *(void *)a5 = v11;
  __int16 v16 = *(_WORD *)(a5 + 10) + 16;
LABEL_7:
  *(_WORD *)(a5 + 10) = v16;
LABEL_8:
  int v18 = *(void **)(a1 + 8);
  int v19 = cstdlib_strlen(__s);
  unsigned int v20 = (char *)heap_Calloc(v18, 1, (v19 + 1));
  *(void *)(*(void *)a5 + 16 * *(unsigned __int16 *)(a5 + 8)) = v20;
  if (!v20) {
    goto LABEL_10;
  }
  cstdlib_strcpy(v20, __s);
  uint64_t v21 = 0;
  uint64_t v22 = *(unsigned __int16 *)(a5 + 8);
  uint64_t v23 = *(void *)a5 + 16 * v22;
  *(_WORD *)(v23 + 8) = a3;
  *(_WORD *)(v23 + 10) = a4;
  *(_DWORD *)(v23 + 12) = 1;
  *(_WORD *)(a5 + 8) = v22 + 1;
  return v21;
}

uint64_t printMSNodes(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t result = log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s", a6, a7, a8, a5);
  if (*(_WORD *)(a4 + 8))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    while (1)
    {
      uint64_t v16 = *(void *)a4 + v14;
      __int16 v17 = *(_WORD *)(v16 + 10);
      uint64_t v18 = *(unsigned __int16 *)(v16 + 8);
      unsigned int v19 = (unsigned __int16)(v17 - v18);
      size_t v20 = v19 >= 0x3FF ? 1023 : v19;
      uint64_t result = (uint64_t)cstdlib_strncpy(a2, (const char *)(a3 + v18), v20);
      a2[v20] = 0;
      if (v8 == 1) {
        break;
      }
      if (*(_DWORD *)(*(void *)a4 + v14 + 12) == 1)
      {
        uint64_t v24 = *(void *)(a1 + 32);
        goto LABEL_10;
      }
LABEL_11:
      ++v15;
      v14 += 16;
      if (v15 >= *(unsigned __int16 *)(a4 + 8)) {
        return result;
      }
    }
    uint64_t v24 = *(void *)(a1 + 32);
LABEL_10:
    uint64_t result = log_OutText(v24, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%d [%d] %s : <%d - %d> <%s>", v21, v22, v23, v15);
    goto LABEL_11;
  }
  return result;
}

uint64_t validateMSNodes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    unsigned __int16 v9 = 0;
    uint64_t v10 = *a2;
    while (2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = (int *)(*a2 + 12 + 16 * v9);
      while (1)
      {
        int v13 = *v12;
        v12 += 4;
        if (v13) {
          break;
        }
        if (++v11 >= v8) {
          goto LABEL_12;
        }
      }
      unsigned __int16 v14 = v11;
      do
        ++v14;
      while (v8 > v14 && !*(_DWORD *)(v10 + 16 * v14 + 12));
      if (v14 + 1 < v8
        && *(unsigned __int16 *)(v10 + 16 * (unsigned __int16)v11 + 10) != *(unsigned __int16 *)(v10 + 16 * v14 + 8))
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"could not extract from MS tree : node=%d", a6, a7, a8, (unsigned __int16)v11);
        return 2315264000;
      }
LABEL_12:
      unsigned __int16 v9 = v11 + 1;
      if (v8 > (unsigned __int16)(v11 + 1)) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t getWordIdxForMSPhr(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, _WORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  if (a2[4])
  {
    unsigned int v8 = 0;
    unsigned __int16 v9 = (unsigned __int16 *)(*(void *)a2 + 2);
    unint64_t v10 = 1;
    while (*(unsigned __int16 *)(*(void *)a2 + 224 * v8) != a3)
    {
      ++v8;
      ++v10;
      v9 += 112;
      if (v8 >= a2[4]) {
        goto LABEL_5;
      }
    }
    *a5 = v8;
    *a6 = v8;
    LODWORD(v12) = a2[4];
    if (v8 >= v12)
    {
LABEL_12:
      uint64_t v11 = 2315264000;
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with end word : start position=%d start word=%d unknown end=%d", (uint64_t)a6, a7, a8, a3);
    }
    else
    {
      while (1)
      {
        int v14 = *v9;
        v9 += 112;
        int v13 = v14;
        if (a4 - 1 == v14 || v10 == v12 && v13 == a4) {
          return 0;
        }
        *a6 = v10;
        unint64_t v12 = a2[4];
        if (v10++ >= v12) {
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v11 = 2315264000;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant match MS terminal node with start word : start position=%d", (uint64_t)a6, a7, a8, a3);
  }
  return v11;
}

uint64_t mapMSNodes2PHR(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v32 = 0;
  int v33 = 0;
  unsigned __int16 v8 = *(_WORD *)(a2 + 8);
  if (v8)
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = (uint64_t)(a1 + 1);
    int v13 = (unsigned __int16 *)(a1 + 84);
    while (2)
    {
      uint64_t v14 = v11;
      unint64_t v15 = (int *)(*(void *)a2 + 16 * v11 + 12);
      while (1)
      {
        int v16 = *v15;
        v15 += 4;
        if (v16) {
          break;
        }
        if (++v14 >= (unint64_t)v8) {
          goto LABEL_23;
        }
      }
      unint64_t v17 = 0;
      int v33 = 0;
      do
      {
        if (v17 >= *((unsigned __int16 *)a1 + 320)) {
          goto LABEL_18;
        }
        if (*(_DWORD *)(a1[79] + 4 * v17) == 1)
        {
          unsigned int v18 = *(unsigned __int16 *)(*(void *)(a1[78] + 8 * v17) + 2);
          unsigned int v19 = *(char **)(*(void *)a2 + 16 * (unsigned __int16)v14);
          unsigned __int16 v20 = cstdlib_strlen(v19);
          uint64_t result = do_pcre_exec(v12, v18, v19, v20, 0, (uint64_t)&v33, v21, v22);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        else if (!cstdlib_strcmp((const char *)(a1[67] + *(unsigned int *)(a1[68] + 4 * **(unsigned int **)(a1[78] + 8 * v17))), *(const char **)(*(void *)a2 + 16 * (unsigned __int16)v14)))
        {
          int v33 = 1;
        }
        uint64_t v24 = (unsigned __int16)v17++;
      }
      while (!v33);
      if (v33 != 1)
      {
LABEL_18:
        int v29 = "O";
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"no rules FIRE on \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)a2 + 16 * (unsigned __int16)v14));
        goto LABEL_20;
      }
      uint64_t v25 = a1[67];
      uint64_t v26 = a1[68];
      uint64_t v27 = *(void *)(a1[78] + 8 * v24);
      uint64_t v28 = *(void *)(*a1 + 32);
      if (*(_DWORD *)(a1[79] + 4 * v24) == 1)
      {
        int v29 = (char *)(v25 + *(unsigned int *)(v26 + 4 * *(unsigned int *)(v27 + 8)));
        log_OutText(v28, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"regex rule %d FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(unsigned __int16 *)(v27 + 2));
      }
      else
      {
        int v29 = (char *)(v25 + *(unsigned int *)(v26 + 4 * *(unsigned int *)(v27 + 4)));
        log_OutText(v28, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"normal rule FIRED \"%s\" -> \"%s\"", a6, a7, a8, *(void *)(*(void *)a2 + 16 * (unsigned __int16)v14));
      }
LABEL_20:
      uint64_t result = getWordIdxForMSPhr(*a1, v13, *(unsigned __int16 *)(*(void *)a2 + 16 * (unsigned __int16)v14 + 8), *(unsigned __int16 *)(*(void *)a2 + 16 * (unsigned __int16)v14 + 10), (_WORD *)&v32 + 1, &v32, v30, v31);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = addPHRRange(*a1, HIWORD(v32), (unsigned __int16)v32, v29, v13);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v8 = *(_WORD *)(a2 + 8);
LABEL_23:
      unsigned __int16 v11 = v14 + 1;
      if ((unsigned __int16)(v14 + 1) < v8) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t sortMSNodes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v52 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sort MS Nodes Pass 1 : constrain nodes containing primitives", a6, a7, a8, 0);
  LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *a2 + 16 * v14;
      if (*(_DWORD *)(v17 + 12) == 1)
      {
        unsigned int v18 = *(unsigned __int16 *)(v17 + 8);
        unsigned int v19 = *(unsigned __int16 *)(v17 + 10);
        if (*(unsigned __int16 *)(a1 + 16) >= 2u)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"doing node %d", v10, v11, v12, v15);
          LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
        }
        if (v13)
        {
          unint64_t v20 = 0;
          unsigned int v51 = v19;
          while (1)
          {
            if (v14 != v20)
            {
              uint64_t v21 = *a2 + 16 * v20;
              if (*(_DWORD *)(v21 + 12) == 1
                && *(unsigned __int16 *)(v21 + 8) >= v18
                && *(unsigned __int16 *)(*a2 + 16 * v20 + 10) <= v19)
              {
                break;
              }
            }
LABEL_32:
            ++v20;
            unint64_t v13 = *((unsigned __int16 *)a2 + 4);
            if (v20 >= v13) {
              goto LABEL_33;
            }
          }
          if (*(unsigned __int16 *)(a1 + 16) >= 2u) {
            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"checking node %d apply %d basicdef rules", v10, v11, v12, v20);
          }
          unint64_t v22 = 0;
          int v52 = 0;
          do
          {
            if (v22 >= *(unsigned __int16 *)(a1 + 616))
            {
              unsigned int v19 = v51;
              goto LABEL_32;
            }
            if (*(_DWORD *)(*(void *)(a1 + 608) + 4 * v22) == 1)
            {
              unsigned int v23 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 600) + 8 * v22) + 2);
              uint64_t v24 = *(char **)(*a2 + 16 * v20);
              unsigned __int16 v25 = cstdlib_strlen(v24);
              uint64_t v16 = do_pcre_exec(a1 + 8, v23, v24, v25, 0, (uint64_t)&v52, v26, v27);
              if ((v16 & 0x80000000) != 0) {
                return v16;
              }
              if (*(unsigned __int16 *)(a1 + 16) >= 2u)
              {
                uint64_t v28 = "NOMATCH ";
                if (v52 == 1) {
                  uint64_t v28 = "FIRED ";
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           %sbasicDef: rule %d : regexNum %d [%s] target %s", v10, v11, v12, (uint64_t)v28);
              }
            }
            else if (cstdlib_strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * **(unsigned int **)(*(void *)(a1 + 600) + 8 * v22))), *(const char **)(*a2 + 16 * v20)))
            {
              if (*(unsigned __int16 *)(a1 + 16) >= 2u) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           basicDef: rule %d %s does not match string %s", v10, v11, v12, v22);
              }
            }
            else
            {
              int v52 = 1;
              if (*(unsigned __int16 *)(a1 + 16) >= 2u) {
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"           basicDef: rule %d %s matched string with rule %s", v10, v11, v12, v22);
              }
            }
            ++v22;
          }
          while (!v52);
          unsigned int v19 = v51;
          if (v52 != 1) {
            goto LABEL_32;
          }
          uint64_t v29 = *(void *)(*(void *)a1 + 32);
          if (*(unsigned __int16 *)(*a2 + 16 * v14 + 8) == *(unsigned __int16 *)(*a2 + 16 * v20 + 8))
          {
            log_OutText(v29, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"BLOCK decrease node %d from %d to %d, since matches entire node", v10, v11, v12, v15);
            goto LABEL_32;
          }
          log_OutText(v29, (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"decrease node %d from %d to %d", v10, v11, v12, v15);
          *(_WORD *)(*a2 + 16 * v14 + 10) = *(_WORD *)(*a2 + 16 * v20 + 8);
          LODWORD(v13) = *((unsigned __int16 *)a2 + 4);
        }
      }
LABEL_33:
      uint64_t v15 = ++v14;
    }
    while (v14 < v13);
  }
  else
  {
    uint64_t v16 = 0;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Sort MS Nodes Pass 2 : delete consumed nodes", v10, v11, v12, 0);
  uint64_t v30 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v31 = 0;
    uint64_t v32 = *a2;
    uint64_t v33 = *a2 + 12;
    do
    {
      uint64_t v34 = v32 + 16 * v31;
      if (*(_DWORD *)(v34 + 12) == 1)
      {
        uint64_t v35 = 0;
        unsigned int v36 = *(unsigned __int16 *)(v34 + 8);
        unsigned __int16 v37 = *(_WORD *)(v34 + 10);
        uint64_t v38 = (_DWORD *)v33;
        unsigned __int16 v39 = v31;
        int v40 = (_DWORD *)v33;
        do
        {
          int v41 = *v40;
          v40 += 4;
          if (v41 == 1 && *((unsigned __int16 *)v38 - 2) == v36)
          {
            unsigned int v42 = *((unsigned __int16 *)v38 - 1);
            if (v42 > v37)
            {
              unsigned __int16 v37 = v42;
              unsigned __int16 v39 = v35;
            }
          }
          ++v35;
          uint64_t v38 = v40;
        }
        while (v30 != v35);
        uint64_t v43 = v39;
        uint64_t v44 = (unsigned __int16 *)(v32 + 16 * v39 + 10);
        uint64_t v45 = v30;
        uint64_t v46 = (_DWORD *)v33;
        do
        {
          unsigned int v47 = *((unsigned __int16 *)v46 - 2);
          if (v47 == v36 && *v46 == 1 && v43 != 0) {
            *uint64_t v46 = 0;
          }
          if (v47 > v36 && *v46 == 1 && *((unsigned __int16 *)v46 - 1) <= *v44 && v43 != 0) {
            *uint64_t v46 = 0;
          }
          v46 += 4;
          --v43;
          --v45;
        }
        while (v45);
      }
      ++v31;
    }
    while (v31 != v30);
  }
  return v16;
}

void *freeMSNodes(void *result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v5 = *(void *)a2;
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      heap_Free((void *)v3[1], *(void *)(v5 + v6));
      uint64_t v5 = *(void *)a2;
      *(void *)(*(void *)a2 + v6) = 0;
      ++v7;
      v6 += 16;
    }
    while (v7 < *(unsigned __int16 *)(a2 + 8));
    goto LABEL_6;
  }
  if (v5)
  {
LABEL_6:
    uint64_t result = heap_Free((void *)v3[1], v5);
    *(void *)a2 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t extractFromMSTree(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, unsigned __int16 a12)
{
  if (!a4) {
    return 0;
  }
  HIDWORD(v33) = a6;
  kbsymtab_ConsSymString(a3, *(__int16 *)(a4 + 16), a11, a12);
  unint64_t v17 = 0;
  int v38 = 0;
  while (v17 < *(unsigned __int16 *)(a1 + 592))
  {
    if (*(_DWORD *)(*(void *)(a1 + 584) + 4 * v17) == 1)
    {
      unsigned int v18 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 576) + 8 * v17) + 2);
      unsigned __int16 v19 = cstdlib_strlen(a11);
      uint64_t result = do_pcre_exec(a1 + 8, v18, a11, v19, 0, (uint64_t)&v38, v20, v21);
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    else if (!cstdlib_strcmp((const char *)(*(void *)(a1 + 536)+ *(unsigned int *)(*(void *)(a1 + 544)+ 4 * **(unsigned int **)(*(void *)(a1 + 576) + 8 * v17))), a11))
    {
      int v38 = 1;
    }
    ++v17;
    if (v38)
    {
      if (v38 == 1)
      {
        int v36 = 0;
        int v37 = 0;
        getStartAndEndFromMSTree(a4, (_WORD *)&v37 + 1, &v37, &v36);
        uint64_t result = addMSNode(*(void *)a1, a11, SHIWORD(v37), v37, a10);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      break;
    }
  }
  unsigned int v23 = *(void **)(a4 + 8);
  if (v23)
  {
    uint64_t v24 = (unsigned __int16)(WORD2(v33) + 1);
    do
    {
      LOWORD(v33) = a12;
      uint64_t result = extractFromMSTree(a1, a2, a3, v23, a5, v24, a7, a8, a9, a10, a11, v33);
      if ((result & 0x80000000) != 0) {
        break;
      }
      unsigned int v23 = (void *)*v23;
    }
    while (v23);
  }
  else
  {
    unsigned __int16 v25 = cstdlib_strlen(a5);
    int v29 = *(_DWORD *)(a4 + 56);
    if (v29 > v25)
    {
      *(_DWORD *)(a4 + 56) = v25;
      int v29 = v25;
    }
    uint64_t v30 = *(unsigned int *)(a4 + 52);
    if ((int)v30 > v25 || v29 > v25 || v29 <= (int)v30)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"error extracting from MS tree : OUTOFRANGE s32StartPos=%d s32EndPos=%d len=%d", v26, v27, v28, v30);
      return 2315264000;
    }
    else
    {
      if (v29 - v30 == 1)
      {
        int v31 = 0;
      }
      else
      {
        if (utf8_BelongsToSet(0, a5, v29 - 1, v25)) {
          int v31 = -1;
        }
        else {
          int v31 = 0;
        }
        LODWORD(v30) = *(_DWORD *)(a4 + 52);
        int v29 = *(_DWORD *)(a4 + 56);
      }
      cstdlib_strncpy(a11, &a5[(int)v30], (unsigned __int16)(v31 - v30 + v29));
      a11[*(_DWORD *)(a4 + 56) + v31 - *(_DWORD *)(a4 + 52)] = 0;
      uint64_t v32 = addMSNode(*(void *)a1, a11, *(_WORD *)(a4 + 52), *(_WORD *)(a4 + 56), a10);
      uint64_t result = 0;
      if ((v32 & 0x80000000) != 0) {
        return v32;
      }
    }
  }
  return result;
}

uint64_t setNNPausingDefault(uint64_t a1, char **a2, char *__s)
{
  uint64_t v6 = *(void **)(a1 + 8);
  int v7 = cstdlib_strlen(__s);
  unsigned __int16 v8 = (char *)heap_Calloc(v6, 1, (v7 + 1));
  *a2 = v8;
  if (v8)
  {
    cstdlib_strcpy(v8, __s);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v9, v10, v11, v12, v14);
    return 2315264010;
  }
}

uint64_t getStartOfOrthPunc(const char *a1, _DWORD *a2)
{
  unsigned __int16 v4 = cstdlib_strlen(a1);
  *a2 = 0;
  if (v4)
  {
    unsigned __int16 v5 = 0;
    while (1)
    {
      __int16 v6 = utf8_determineUTF8CharLength(a1[v5]);
      unsigned int v7 = a1[v5];
      if (v6 == 1 && v7 == 44) {
        break;
      }
      BOOL v8 = v7 > 0x3F;
      unint64_t v9 = (1 << v7) & 0x8C00430200000000;
      if (!v8 && v9 != 0) {
        break;
      }
      v5 += v6;
      if (v5 >= v4) {
        return v4;
      }
    }
    *a2 = 1;
  }
  else
  {
    return v4;
  }
  return v5;
}

uint64_t getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  *(_DWORD *)v209 = 0;
  __int16 v208 = 0;
  uint64_t v206 = 0;
  v207 = 0;
  unsigned int v204 = 0;
  int v205 = 0;
  uint64_t v202 = 0;
  v203 = 0;
  __int16 v201 = 0;
  int v200 = 0;
  uint64_t v198 = 0;
  v199 = 0;
  __b[0] = 0;
  __b[1] = 0;
  unsigned __int16 v196 = 0;
  int v195 = 0;
  cstdlib_memset(__b, 0, 0x10uLL);
  *(_DWORD *)(a6 + 1108) = log_GetLogLevel(*(void *)(a1 + 32)) > 4;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 1, 0, &v209[1]);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a3 + 184))(a4, a5, v209[1], 0, &v208);
  if ((v17 & 0x80000000) == 0 && v208 == 1)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a3 + 176))(a4, a5, v209[1], 0, &v207, &v205);
    if ((v17 & 0x80000000) == 0 && (unsigned __int16)v205 >= 2u)
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Method PandP : processing=\"%s\"", v18, v19, v20, (uint64_t)v207);
      uint64_t v21 = heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *(void *)(a6 + 1088) = v21;
      if (v21
        && (*(_WORD *)(a6 + 1104) = 1024,
            uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), 1, 1024),
            (*(void *)(a6 + 1096) = v26) != 0))
      {
        unsigned __int16 v27 = cstdlib_strlen(v207) + 1;
        uint64_t v32 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v27);
        if (v32)
        {
          unsigned __int16 v186 = v27;
          uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 2, v209[1], v209);
          if ((v33 & 0x80000000) != 0)
          {
            uint64_t v17 = v33;
          }
          else
          {
            uint64_t v187 = a2;
            unsigned int v188 = a8;
            int v189 = 0;
            uint64_t v184 = (const char **)(a6 + 1088);
            uint64_t v185 = (unsigned __int16 *)(a6 + 1104);
            uint64_t v17 = 2315271857;
            uint64_t v34 = (char *)&v200 + 2;
            __int16 v191 = (void *)(a6 + 8);
            unsigned __int16 v192 = (uint64_t *)(a6 + 672);
            while (v209[0])
            {
              uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_72;
              }
              if (v204 <= 0xA && ((1 << v204) & 0x610) != 0)
              {
                uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a3 + 168))(a4, a5, v209[0], 1, 1, &v200, &v205);
                if ((v35 & 0x80000000) != 0) {
                  goto LABEL_72;
                }
                uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a3 + 168))(a4, a5, v209[0], 2, 1, v34, &v205);
                if ((v35 & 0x80000000) != 0) {
                  goto LABEL_72;
                }
                if ((unsigned __int16)v200 > HIWORD(v200)) {
                  goto LABEL_73;
                }
                uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a3 + 176))(a4, a5, v209[0], 3, &v202, &v205);
                if ((v35 & 0x80000000) != 0) {
                  goto LABEL_72;
                }
                cstdlib_strncpy(v32, &v207[(unsigned __int16)v200], HIWORD(v200) - (unint64_t)(unsigned __int16)v200);
                v32[HIWORD(v200) - (unsigned __int16)v200] = 0;
                if (HIWORD(v200) == (unsigned __int16)v200)
                {
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v37, v38, v39, HIWORD(v200));
                }
                else
                {
                  int v40 = v34;
                  __s = 0;
                  __int16 v193 = 0;
                  BOOL v41 = doesWordEndInComma(v32);
                  unsigned int v42 = v32;
                  BOOL v43 = v41;
                  uint64_t v44 = (char *)v42;
                  uint64_t v45 = addWord(a1, v42, &v200, v202, (uint64_t)v191, (uint64_t)v192);
                  if ((v45 & 0x80000000) != 0) {
                    goto LABEL_56;
                  }
                  int v190 = *(unsigned __int16 *)(a6 + 680);
                  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, v209[0], 8, &v208) & 0x80000000) == 0&& v208 == 1)
                  {
                    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a3 + 168))(a4, a5, v209[0], 8, 1, &v193, &v205);
                    if ((v16 & 0x80000000) != 0) {
                      return v16;
                    }
                  }
                  if (v193) {
                    *(_DWORD *)(*(void *)(a6 + 672) + 224 * *(unsigned __int16 *)(a6 + 680) - 8) = 2;
                  }
                  if (v43) {
                    *(_DWORD *)(*(void *)(a6 + 672) + 224 * *(unsigned __int16 *)(a6 + 680) - 196) = 1;
                  }
                  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a3 + 184))(a4, a5, v209[0], 14, &v208);
                  if ((v45 & 0x80000000) != 0
                    || (unsigned __int16 v46 = v190 - 1, v208)
                    && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v209[0], 14, &__s, &v205) & 0x80000000) == 0&& (v195 = 1, uint64_t v45 = parse_NLU_string((uint64_t *)a6, __s, (unsigned __int16)(v190 - 1), v190, &v195, v188), (v45 & 0x80000000) != 0)|| (uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v209[0], 5, &v201, &v205), (v45 & 0x80000000) != 0)|| (v189 = v195) == 0&& (uint64_t v45 = addMSPOS(a1, v46, v201, (uint64_t)v191, v192), (v45 & 0x80000000) != 0)
                    || (uint64_t v45 = checkMSPOSForCompound(a1, v46, v201, (uint64_t)v191, v192), (v45 & 0x80000000) != 0))
                  {
LABEL_56:
                    uint64_t v17 = v45;
                    uint64_t v32 = v44;
                    goto LABEL_73;
                  }
                  uint64_t v32 = v44;
                  uint64_t v34 = v40;
                  a8 = v188;
                }
              }
              uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 120))(a4, a5, v209[0], v209);
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_72;
              }
            }
            expandAndValidateCompounds(a1, v192, (uint64_t)v191);
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 104))(a4, a5, 2, v209[1], v209);
            if ((v35 & 0x80000000) == 0)
            {
              uint64_t v183 = (uint64_t)v32;
              while (v209[0])
              {
                uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a4, a5);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                if (v204 != 6) {
                  goto LABEL_174;
                }
                uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a3 + 168))(a4, a5, v209[0], 1, 1, &v200, &v205);
                if ((POSString & 0x80000000) == 0)
                {
                  uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a3 + 168))(a4, a5, v209[0], 2, 1, v34, &v205);
                  if ((POSString & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v200 > HIWORD(v200)) {
                      goto LABEL_71;
                    }
                    uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a3 + 176))(a4, a5, v209[0], 4, &v203, &v205);
                    if ((POSString & 0x80000000) == 0)
                    {
                      if (!cstdlib_strcmp(v203, "_PR_")
                        || (uint64_t POSString = addToken(a1, (unsigned __int16 *)&v200, v203, (uint64_t)v191, v192, a8, v53, v54),
                            (POSString & 0x80000000) == 0)
                        || POSString == -1979703296)
                      {
LABEL_174:
                        uint64_t POSString = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a3 + 120))(a4, a5, v209[0], v209);
                        if ((POSString & 0x80000000) == 0) {
                          continue;
                        }
                      }
                    }
                  }
                }
                goto LABEL_70;
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Added words from lingdb", v49, v50, v51, 0);
              uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a3 + 176))(a4, a5, v209[1], 1, &v206, (char *)&v205 + 2);
              if ((v17 & 0x80000000) != 0)
              {
LABEL_71:
                a2 = v187;
                uint64_t v32 = (char *)v183;
                goto LABEL_43;
              }
              if (v189 || *(_DWORD *)(a6 + 568) != 1) {
                goto LABEL_86;
              }
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"USE MS - get PHR from MS tree", v55, v56, v57, 0);
              uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a3 + 176))(a4, a5, v209[1], 2, &v199, &v205);
              if ((v16 & 0x80000000) == 0)
              {
                if (!a7)
                {
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"empty symbol table for MS rules", v58, v59, v60, 0);
                  return 2315264000;
                }
                mosynt_StringToSyntTree(v187, a7, v199, &v198);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                uint64_t POSString = printMSTree(a1, v187, a7, v198, v207, 0, v184, *(char **)(a6 + 1096), v185, v32, v186);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                uint64_t POSString = extractFromMSTree(a6, v187, a7, v198, v207, 0, (uint64_t)v184, *(void *)(a6 + 1096), (uint64_t)v185, (uint64_t)__b, v32, v186);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                printMSNodes(a1, *(char **)(a6 + 1096), (uint64_t)v207, (uint64_t)__b, (uint64_t)"START", 1, v61, v62);
                uint64_t POSString = sortMSNodes(a6, __b, v63, v64, v65, v66, v67, v68);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                printMSNodes(a1, *(char **)(a6 + 1096), (uint64_t)v207, (uint64_t)__b, (uint64_t)"END", 0, v69, v70);
                uint64_t POSString = validateMSNodes(a1, __b, v71, v72, v73, v74, v75, v76);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                uint64_t POSString = mapMSNodes2PHR((uint64_t *)a6, (uint64_t)__b, v77, v78, v79, v80, v81, v82);
                if ((POSString & 0x80000000) != 0) {
                  goto LABEL_70;
                }
                freeMSNodes((void *)a1, (uint64_t)__b);
                uint64_t v17 = 0;
                LODWORD(a8) = v188;
LABEL_86:
                if (HIWORD(v205))
                {
                  int v83 = 0;
                  unsigned __int16 v84 = 0;
                  do
                  {
                    if (*(_DWORD *)(v206 + 32 * v84) == 21
                      && getDomainFromPausingDefs((uint64_t)v191, *(char **)(v206 + 32 * v84 + 24), &v196) == 1)
                    {
                      for (unsigned __int16 i = v84 + 1; ; unsigned __int16 i = v86 + 1)
                      {
                        if (HIWORD(v205) <= i)
                        {
                          setDomainOnWord((unsigned __int16 **)v192, (unsigned __int16)(*(_WORD *)(v206 + 32 * v84 + 12) - *(_DWORD *)(v206 + 12)), *(unsigned __int16 *)(v206 + 16), v196);
                          goto LABEL_96;
                        }
                        uint64_t v86 = i;
                        if (*(_DWORD *)(v206 + 32 * i) == 21)
                        {
                          if (cstdlib_strcmp(*(const char **)(v206 + 32 * v84 + 24), *(const char **)(v206 + 32 * i + 24)))
                          {
                            break;
                          }
                        }
                      }
                      setDomainOnWord((unsigned __int16 **)v192, (unsigned __int16)(*(_WORD *)(v206 + 32 * v84 + 12) - *(_DWORD *)(v206 + 12)), (unsigned __int16)(*(_WORD *)(v206 + 32 * v86 + 12) - *(_DWORD *)(v206 + 12)), v196);
                      unsigned __int16 v84 = v86 - (v86 + 1 != v83);
                    }
LABEL_96:
                    int v83 = ++v84;
                    unsigned __int16 v87 = HIWORD(v205);
                  }
                  while (v84 < HIWORD(v205));
                  if (HIWORD(v205))
                  {
                    int v89 = 0;
                    do
                    {
                      uint64_t v90 = (unsigned __int16)v89;
                      if (*(_DWORD *)(v206 + 32 * (unsigned __int16)v89) == 34)
                      {
                        if ((unsigned __int16)++v89 >= v87) {
                          goto LABEL_113;
                        }
                        do
                        {
                          int v91 = *(_DWORD *)(v206 + 32 * (unsigned __int16)v89);
                          if (v91 != 21) {
                            ++v89;
                          }
                        }
                        while ((unsigned __int16)v89 < v87 && v91 != 21);
                        if (v91 == 21)
                        {
                          int v95 = *(_DWORD *)(v206 + 32 * v90 + 12);
                          int v96 = *(_DWORD *)(v206 + 12);
                          unsigned __int16 v94 = v95 - v96;
                          int v93 = *(_DWORD *)(v206 + 32 * (unsigned __int16)v89 + 12) - v96;
                        }
                        else
                        {
LABEL_113:
                          int v93 = *(_DWORD *)(v206 + 16);
                          unsigned __int16 v94 = *(_DWORD *)(v206 + 32 * v90 + 12) - *(_DWORD *)(v206 + 12);
                        }
                        setPhoneticRange((unsigned __int16 **)v192, v94, (unsigned __int16)v93);
                      }
                      ++v89;
                      unsigned __int16 v87 = HIWORD(v205);
                    }
                    while (HIWORD(v205) > (unsigned __int16)v89);
                  }
                }
                if (a8 == 1)
                {
                  uint64_t v97 = (uint64_t *)(a6 + 672);
                  if (*(_WORD *)(a6 + 680))
                  {
                    unint64_t v98 = 0;
                    uint64_t v99 = 168;
                    do
                    {
                      uint64_t v100 = *v97;
                      unint64_t v101 = *(const char **)(*v97 + v99 + 8);
                      if (v101)
                      {
                        int v102 = cstdlib_strcmp(v101, "COMP]");
                        uint64_t v100 = *v97;
                        if (v99 != 168 && !v102)
                        {
                          uint64_t v103 = (v98 - 1);
                          uint64_t v104 = *(const char **)(v100 + 224 * v103 + 176);
                          if (v104)
                          {
                            int v105 = cstdlib_strcmp(v104, "COMP]");
                            uint64_t v100 = *v192;
                            if (!v105)
                            {
                              uint64_t v106 = 224 * v103;
                              heap_Free(*(void **)(a1 + 8), *(void *)(v100 + v106 + 176));
                              uint64_t v107 = *v192 + v106;
                              *(void *)(v107 + 176) = 0;
                              setNNPausingDefault(a1, (char **)(v107 + 176), "-");
                              uint64_t v100 = *v192;
                            }
                          }
                        }
                      }
                      if (!*(void *)(v100 + v99 + 8))
                      {
                        setNNPausingDefault(a1, (char **)(v100 + v99 + 8), "-");
                        uint64_t v100 = *v192;
                      }
                      if (!*(void *)(v100 + v99))
                      {
                        setNNPausingDefault(a1, (char **)(v100 + v99), "-");
                        uint64_t v100 = *v192;
                      }
                      LODWORD(__s) = 0;
                      unsigned int StartOfOrthPunc = getStartOfOrthPunc(*(const char **)(*(void *)(v100 + v99 - 152)+ 8 * *(unsigned __int16 *)(a6 + 24)), &__s);
                      cstdlib_strlen(*(const char **)(*(void *)(*(void *)(a6 + 672) + v99 - 152)
                                                    + 8 * *(unsigned __int16 *)(a6 + 24)));
                      uint64_t v109 = *(void **)(a1 + 8);
                      if (__s == 1)
                      {
                        int v110 = cstdlib_strlen((const char *)(*(void *)(*(void *)(*(void *)(a6 + 672) + v99 - 152)
                                                                       + 8 * *(unsigned __int16 *)(a6 + 24))
                                                           + StartOfOrthPunc));
                        uint64_t v111 = (char *)heap_Calloc(v109, 1, (v110 + 1));
                        uint64_t v116 = *(void *)(a6 + 672) + v99;
                        *(void *)(v116 + 40) = v111;
                        if (!v111) {
                          goto LABEL_166;
                        }
                        cstdlib_strcpy(v111, (const char *)(*(void *)(*(void *)(v116 - 152) + 8 * *(unsigned __int16 *)(a6 + 24))+ StartOfOrthPunc));
                        uint64_t v97 = (uint64_t *)(a6 + 672);
                      }
                      else
                      {
                        int v117 = cstdlib_strlen("X");
                        int v118 = (char *)heap_Calloc(v109, 1, (v117 + 1));
                        uint64_t v97 = (uint64_t *)(a6 + 672);
                        *(void *)(*v192 + v99 + 40) = v118;
                        if (!v118)
                        {
LABEL_166:
                          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v112, v113, v114, v115, v182);
                          return 2315264010;
                        }
                        cstdlib_strcpy(v118, "X");
                      }
                      uint64_t v119 = *v97;
                      uint64_t v120 = *v97 + v99;
                      uint64_t v122 = *(void *)(v120 + 16);
                      int v121 = (char **)(v120 + 16);
                      if (!v122)
                      {
                        setNNPausingDefault(a1, v121, "X");
                        uint64_t v119 = *v97;
                      }
                      if (!*(void *)(v119 + v99 + 24))
                      {
                        setNNPausingDefault(a1, (char **)(v119 + v99 + 24), "X");
                        uint64_t v119 = *v97;
                      }
                      if (!*(void *)(v119 + v99 + 32)) {
                        setNNPausingDefault(a1, (char **)(v119 + v99 + 32), "X");
                      }
                      ++v98;
                      v99 += 224;
                    }
                    while (v98 < *(unsigned __int16 *)(a6 + 680));
                  }
                  uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v184, *(char **)(a6 + 1096), v185, (uint64_t)v191, (uint64_t)v97, (uint64_t)"At Start of NN Phrasing", 1);
                  if ((POSString & 0x80000000) == 0)
                  {
                    heap_Free(*(void **)(a1 + 8), v183);
                    return 0;
                  }
                  goto LABEL_70;
                }
                if (!*v191)
                {
                  heap_Free(*(void **)(a1 + 8), v183);
                  return v17;
                }
                uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v184, *(char **)(a6 + 1096), v185, (uint64_t)v191, (uint64_t)v192, (uint64_t)"At Start", a8);
                if ((POSString & 0x80000000) == 0)
                {
                  uint64_t POSString = resolvePHR((uint64_t)v207, a1, (uint64_t)v191, (uint64_t)v192, v188, v123, v124, v125);
                  if ((POSString & 0x80000000) == 0)
                  {
                    uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v184, *(char **)(a6 + 1096), v185, (uint64_t)v191, (uint64_t)v192, (uint64_t)"Initialized data", v188);
                    if ((POSString & 0x80000000) == 0)
                    {
                      uint64_t POSString = createPOSString(a1, (uint64_t)v191, (uint64_t)v192);
                      if ((POSString & 0x80000000) == 0)
                      {
                        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Created POS string for retagging : \"%s\"", v126, v127, v128, *(void *)(a6 + 688));
                        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"do retagging", v129, v130, v131, 0);
                        uint64_t POSString = doRetagging(*(unsigned int *)(a6 + 1108), v184, v185, *(char **)(a6 + 1096), a1, (uint64_t)v191, (uint64_t)v192, v132);
                        if ((POSString & 0x80000000) == 0)
                        {
                          uint64_t POSString = printAsChunks(*(unsigned int *)(a6 + 1108), v184, v185, (uint64_t)v191, v192, v133, v134, v135);
                          if ((POSString & 0x80000000) == 0)
                          {
                            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"do subtagging", v136, v137, v138, 0);
                            uint64_t POSString = doSubtagging(*(unsigned int *)(a6 + 1108), v184, v185, *(char **)(a6 + 1096), a1, (uint64_t)v191, (uint64_t)v192, v139);
                            if ((POSString & 0x80000000) == 0)
                            {
                              uint64_t v140 = *(void *)(a6 + 688);
                              if (v140)
                              {
                                heap_Free(*(void **)(a1 + 8), v140);
                                *(void *)(a6 + 688) = 0;
                                heap_Free(*(void **)(a1 + 8), *(void *)(a6 + 696));
                                *(void *)(a6 + 696) = 0;
                              }
                              uint64_t POSString = createPOSString(a1, (uint64_t)v191, (uint64_t)v192);
                              if ((POSString & 0x80000000) == 0)
                              {
                                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"set phrase type", v141, v142, v143, 0);
                                uint64_t POSString = setPhraseType(*(unsigned int *)(a6 + 1108), v184, v185, *(char **)(a6 + 1096), a1, (uint64_t)v191, (uint64_t)v192, (uint64_t)v207);
                                if ((POSString & 0x80000000) == 0)
                                {
                                  uint64_t v147 = *(void *)(a6 + 688);
                                  if (v147)
                                  {
                                    heap_Free(*(void **)(a1 + 8), v147);
                                    *(void *)(a6 + 688) = 0;
                                    heap_Free(*(void **)(a1 + 8), *(void *)(a6 + 696));
                                    *(void *)(a6 + 696) = 0;
                                  }
                                  if (*(void *)(a6 + 816) || *(void *)(a6 + 760))
                                  {
                                    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"skip extending PHR containing token tags", v144, v145, v146, 0);
                                    goto LABEL_161;
                                  }
                                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"extend PHR containing token tags", v144, v145, v146, 0);
                                  uint64_t POSString = extendPHRContainingTokenTags(a6, v174, v175, v176, v177, v178, v179, v180);
                                  if ((POSString & 0x80000000) == 0)
                                  {
                                    uint64_t POSString = annotateTokenTypeOnEachWord(a6);
                                    if ((POSString & 0x80000000) == 0)
                                    {
                                      uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v184, *(char **)(a6 + 1096), v185, (uint64_t)v191, (uint64_t)v192, (uint64_t)"After token tag extension", v188);
                                      if ((POSString & 0x80000000) == 0)
                                      {
LABEL_161:
                                        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"assign token tags", v148, v149, v150, 0);
                                        uint64_t POSString = assignTokenTags(a6, v151, v152, v153, v154, v155, v156, v157);
                                        if ((POSString & 0x80000000) == 0)
                                        {
                                          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"assign token POS", v158, v159, v160, 0);
                                          uint64_t POSString = assignTokenPOS(a6, v161, v162, v163, v164, v165, v166, v167);
                                          if ((POSString & 0x80000000) == 0)
                                          {
                                            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"creating working lists (regex domains)", v168, v169, v170, 0);
                                            uint64_t POSString = createLists(a1, (uint64_t)v191, v192);
                                            if ((POSString & 0x80000000) == 0)
                                            {
                                              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"get phon weights (nsyll)", v171, v172, v173, 0);
                                              getPhonWeights(v192);
                                              uint64_t POSString = printSent(a1, *(_DWORD *)(a6 + 1108), v184, *(char **)(a6 + 1096), v185, (uint64_t)v191, (uint64_t)v192, (uint64_t)"AFTER GET PHON WEIGHTS", v188);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_70:
                uint64_t v17 = POSString;
                goto LABEL_71;
              }
              return v16;
            }
LABEL_72:
            uint64_t v17 = v35;
LABEL_73:
            a2 = v187;
          }
        }
        else
        {
          uint64_t v17 = 2315264010;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v28, v29, v30, v31, v181);
        }
      }
      else
      {
        uint64_t v17 = 2315264010;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v181);
        uint64_t v32 = 0;
      }
LABEL_43:
      if (*(_DWORD *)(a6 + 568) == 1) {
        freeMSNodes((void *)a1, (uint64_t)__b);
      }
      if (v32) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v32);
      }
      if (v198)
      {
        int v47 = mosyntdata_DisposeSyntTree(a2, &v198);
        if ((int)v17 >= 0 && v47 <= -1) {
          return v47;
        }
        else {
          return v17;
        }
      }
    }
  }
  return v17;
}

uint64_t parse_NLU_string(uint64_t *a1, char *__s, unsigned int a3, int a4, _DWORD *a5, int a6)
{
  uint64_t v11 = a1;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v75 = 0u;
  uint64_t v12 = *(void **)(*a1 + 8);
  int v13 = cstdlib_strlen(__s);
  unsigned int v14 = (char *)heap_Calloc(v12, 1, (v13 + 1));
  if (v14)
  {
    uint64_t v19 = v14;
    int v62 = a6;
    int __sa = __s;
    cstdlib_strcpy(v14, __s);
    for (unsigned __int16 i = (unsigned __int8 *)&v19[cstdlib_strlen(v19) - 1]; i >= (unsigned __int8 *)v19; --i)
    {
      unsigned int v21 = *i;
      BOOL v22 = v21 > 0x3B;
      uint64_t v23 = (1 << v21) & 0x800000100002600;
      if (v22 || v23 == 0) {
        break;
      }
      unsigned __int8 *i = 0;
    }
    uint64_t v60 = a5;
    uint64_t v25 = 0;
    uint64_t v74 = 0;
    uint64_t v72 = 0;
    long long v73 = 0uLL;
    uint64_t v71 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v26 = 0;
    int v63 = a4;
    uint64_t v65 = v11 + 84;
    uint64_t v66 = (uint64_t)(v11 + 1);
    unsigned int v61 = (unsigned __int16)(a4 - 1);
    unsigned __int16 v27 = (char *)v19;
    while (1)
    {
      uint64_t v28 = cstdlib_strchr(v27, 59);
      uint64_t v29 = v28;
      if (v28) {
        *uint64_t v28 = 0;
      }
      uint64_t v30 = cstdlib_strchr(v27, 58);
      uint64_t v31 = v30;
      if (v30)
      {
        *uint64_t v30 = 0;
        uint64_t v32 = v30 + 1;
      }
      else
      {
        uint64_t v32 = "null";
      }
      if (!cstdlib_strcmp(v27, "POS"))
      {
        uint64_t inserted = 0;
        uint64_t v26 = v32;
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27, "PHR"))
      {
        uint64_t inserted = 0;
        uint64_t v25 = v32;
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27, "BND"))
      {
        uint64_t inserted = 0;
        uint64_t v74 = v32;
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27, "BNDSHAPE"))
      {
        uint64_t inserted = 0;
        uint64_t v72 = v32;
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27, "S_POI"))
      {
        uint64_t inserted = 0;
        uint64_t v38 = "B";
LABEL_42:
        *(void *)&long long v73 = v32;
        *((void *)&v73 + 1) = v38;
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27, "I_POI"))
      {
        uint64_t inserted = 0;
        uint64_t v38 = "I";
        goto LABEL_42;
      }
      if (!cstdlib_strcmp(v27, "E_POI"))
      {
        uint64_t inserted = 0;
        uint64_t v38 = "S";
        if (!*((void *)&v73 + 1)) {
          uint64_t v38 = "E";
        }
        goto LABEL_42;
      }
      if (!cstdlib_strcmp(v27, "PRM"))
      {
        uint64_t inserted = 0;
        uint64_t v71 = v32;
        goto LABEL_43;
      }
      int v36 = *((_DWORD *)v11 + 166);
      if (!v36)
      {
        if (!cstdlib_strcmp(v27, "COMP"))
        {
          uint64_t inserted = 0;
          uint64_t v70 = v32;
          goto LABEL_43;
        }
        int v36 = *((_DWORD *)v11 + 166);
      }
      if (v36 == 1 && !cstdlib_strcmp(v27 + 1, "_COMP"))
      {
        uint64_t v39 = *(void **)(*v11 + 8);
        int v40 = cstdlib_strlen(v32);
        uint64_t v41 = heap_Calloc(v39, 1, (v40 + 3));
        if (!v41) {
          goto LABEL_71;
        }
        unsigned int v42 = (char *)v41;
        if (cstdlib_strcmp(v27, "S_COMP")) {
          BOOL v43 = "I-";
        }
        else {
          BOOL v43 = "B-";
        }
        cstdlib_strcpy(v42, v43);
        cstdlib_strcat(v42, v32);
        uint64_t v44 = v42;
        uint64_t inserted = 0;
        uint64_t v69 = (uint64_t)v44;
        uint64_t v70 = v44;
        goto LABEL_43;
      }
      uint64_t v59 = v11;
      if (!v31 || v31 <= v27 + 1)
      {
LABEL_33:
        uint64_t inserted = addMarkerType(*v11, v27, v32, a3, v61, v66, v65);
        goto LABEL_43;
      }
      if (!cstdlib_strcmp(v27 + 1, "_CLASS"))
      {
        uint64_t inserted = 0;
        uint64_t v67 = v32;
        goto LABEL_43;
      }
      if (v62 != 1 || cstdlib_strcmp(v27, "PUNC")) {
        break;
      }
      if (!v68)
      {
        uint64_t v49 = *(void **)(*v11 + 8);
        int v50 = cstdlib_strlen(__sa);
        uint64_t v51 = (char *)heap_Calloc(v49, 1, (v50 + 4));
        if (!v51) {
          goto LABEL_71;
        }
        int v52 = v51;
        cstdlib_strcpy(v51, "X_");
        cstdlib_strcat(v52, v27);
        cstdlib_strcat(v52, ":");
        uint64_t v68 = (uint64_t)v52;
        cstdlib_strcat(v52, v32);
LABEL_58:
        uint64_t inserted = 0;
        goto LABEL_43;
      }
      uint64_t inserted = 0;
LABEL_43:
      if (v29)
      {
        unsigned __int16 v27 = v29 + 1;
        if ((inserted & 0x80000000) == 0) {
          continue;
        }
      }
      *(void *)&long long v78 = v68;
      *((void *)&v78 + 1) = v70;
      *(void *)&long long v77 = v71;
      *((void *)&v77 + 1) = v67;
      long long v79 = v73;
      *(void *)&long long v76 = v74;
      *((void *)&v76 + 1) = v72;
      *(void *)&long long v75 = v26;
      *((void *)&v75 + 1) = v25;
      log_OutText(*(void *)(*v11 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"parsed NLU %s[%d,%d] -> POS=%s, PHR=%s, BND=%s, BNDSHAPE=%s, PRM=%s, CLASS=%s, PUNC=%s, COMP=%s, POIClass=%s, POIPosi=%s", v33, v34, v35, (uint64_t)__sa);
      if ((inserted & 0x80000000) == 0)
      {
        if (!v26)
        {
          log_OutText(*(void *)(*v11 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"missing POS in NLU string: arg=%s", v53, v54, v55, (uint64_t)v19);
          *uint64_t v60 = 0;
        }
        uint64_t inserted = insert_NLU_info(*v11, a3, v63, (uint64_t)&v75, v66, (uint64_t)v65, v62);
      }
      heap_Free(*(void **)(*v11 + 8), (uint64_t)v19);
      if (v68) {
        heap_Free(*(void **)(*v11 + 8), v68);
      }
      if (v69) {
        heap_Free(*(void **)(*v11 + 8), v69);
      }
      return inserted;
    }
    if (cstdlib_strcmp(v27 + 1, "_PUNC")) {
      goto LABEL_33;
    }
    uint64_t v45 = (const char *)v68;
    if (!v68)
    {
      unsigned __int16 v46 = *(void **)(*v11 + 8);
      int v47 = cstdlib_strlen(__sa);
      int v48 = (char *)heap_Calloc(v46, 1, (v47 + 1));
      if (!v48)
      {
        uint64_t inserted = 2315264010;
        uint64_t v56 = *v59;
        goto LABEL_72;
      }
      uint64_t v45 = v48;
      cstdlib_strcpy(v48, "");
      uint64_t v11 = v59;
    }
    *uint64_t v31 = 58;
    uint64_t v68 = (uint64_t)v45;
    hlp_NLUStrJoin(v45, v27);
    goto LABEL_58;
  }
LABEL_71:
  uint64_t inserted = 2315264010;
  uint64_t v56 = *v11;
LABEL_72:
  log_OutPublic(*(void *)(v56 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v15, v16, v17, v18, v58);
  return inserted;
}

void *freeSentenceData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1088);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 1088) = 0;
    *(_WORD *)(a1 + 1104) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 1096);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v3);
    *(void *)(a1 + 1096) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 672);
  if (*(_WORD *)(a1 + 680))
  {
    unint64_t v5 = 0;
    do
    {
      if (*(void *)(v4 + 224 * v5 + 80))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 80));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 80) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 112))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 112));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 112) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 120))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 120));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 120) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 152))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 152));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 152) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 160))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 160));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 160) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 184))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 184));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 184) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 192))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 192));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 192) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 200))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 200));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 200) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 208))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 208));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 208) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 168))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 168));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 168) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 88))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 88));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 88) = 0;
      }
      uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
      if (v6)
      {
        unsigned __int16 v7 = *(_WORD *)(a1 + 80);
        if (v7)
        {
          for (unint64_t i = 0; i < v7; ++i)
          {
            uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
            uint64_t v9 = *(void *)(v6 + 8 * i);
            if (v9)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v9);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v6 = *(void *)(v4 + 224 * v5 + 16);
              *(void *)(v6 + 8 * i) = 0;
              unsigned __int16 v7 = *(_WORD *)(a1 + 80);
            }
          }
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v6);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 16) = 0;
      }
      uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
      if (v10)
      {
        unsigned __int16 v11 = *(_WORD *)(a1 + 80);
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = 16;
          do
          {
            uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
            uint64_t v14 = *(void *)(v10 + v13);
            if (v14)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v14);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v10 = *(void *)(v4 + 224 * v5 + 56);
              *(void *)(v10 + v13) = 0;
              unsigned __int16 v11 = *(_WORD *)(a1 + 80);
            }
            ++v12;
            v13 += 32;
          }
          while (v12 < v11);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v10);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 56) = 0;
      }
      uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
      if (v15)
      {
        unsigned __int16 v16 = *(_WORD *)(a1 + 80);
        if (v16)
        {
          for (unint64_t j = 0; j < v16; ++j)
          {
            uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
            uint64_t v18 = *(void *)(v15 + 8 * j);
            if (v18)
            {
              heap_Free(*(void **)(*(void *)a1 + 8), v18);
              uint64_t v4 = *(void *)(a1 + 672);
              uint64_t v15 = *(void *)(v4 + 224 * v5 + 64);
              *(void *)(v15 + 8 * j) = 0;
              unsigned __int16 v16 = *(_WORD *)(a1 + 80);
            }
          }
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v15);
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 64) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 8))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 8));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 8) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 96))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 96));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 96) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 176))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 176));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 176) = 0;
      }
      if (*(void *)(v4 + 224 * v5 + 128))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + 224 * v5 + 128));
        uint64_t v4 = *(void *)(a1 + 672);
        *(void *)(v4 + 224 * v5 + 128) = 0;
      }
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 680));
  }
  else if (!v4)
  {
    goto LABEL_62;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v4);
  *(void *)(a1 + 672) = 0;
LABEL_62:
  uint64_t v19 = *(void *)(a1 + 688);
  if (v19)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v19);
    *(void *)(a1 + 688) = 0;
  }
  uint64_t v20 = *(void *)(a1 + 696);
  if (v20)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v20);
    *(void *)(a1 + 696) = 0;
  }
  uint64_t v21 = *(void *)(a1 + 712);
  if (v21)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v21);
    *(void *)(a1 + 712) = 0;
  }

  return cstdlib_memset((void *)(a1 + 672), 0, 0x30uLL);
}

uint64_t updateLingdb(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  __int16 v36 = 0;
  int v34 = 0;
  int v35 = 0;
  __int16 v33 = 0;
  unsigned int v32 = 0;
  uint64_t v31 = 0;
  __int16 v30 = 0;
  int v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  int v25 = 0;
  cstdlib_memset(__b, 0, 0x20uLL);
  uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v35 + 2);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v35), 0, &v36);
  if ((v9 & 0x80000000) == 0 && v36 == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v35), 0, &v26, &v34);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v34 >= 2u)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v35), &v35);
      if ((v9 & 0x80000000) == 0)
      {
        int v27 = 0;
        cstdlib_strcpy(__dst, "");
        cstdlib_strcpy(__s1, "");
        cstdlib_strcpy(*(char **)(a4 + 1088), "");
        for (unsigned __int16 i = v35; (_WORD)v35; unsigned __int16 i = v35)
        {
          uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, i, 0, 1, &v32, &v34);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          if (v32 <= 0xA && ((1 << v32) & 0x610) != 0)
          {
            uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v35, 1, 1, &v29, &v34);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v35, 2, 1, (char *)&v29 + 2, &v34);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1 + 176))(a2, a3, (unsigned __int16)v35, 3, &v31, &v34);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if ((unsigned __int16)v29 != HIWORD(v29))
            {
              uint64_t PhraseStartingAtThisWord = getPhraseStartingAtThisWord((uint64_t *)(a4 + 672), a4 + 8, (unsigned __int16)v29, (__int16 *)&v28 + 1, __dst, &v30, (__int16 *)&v27 + 1, &v27);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              if (__dst[0])
              {
                cstdlib_strcpy(__s1, __dst);
                LOWORD(v28) = 0;
                if (HIWORD(v28) <= 1u)
                {
                  if (HIWORD(v27)) {
                    setSilDurOnWord(a4 + 672, (void *)(a4 + 8), (unsigned __int16)(HIWORD(v27) - 1), &v28);
                  }
                  else {
                    LOWORD(v28) = 200;
                  }
                }
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 88))(a2, a3, (unsigned __int16)v35, (char *)&v34 + 2);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                unsigned int v32 = 15;
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v34), 0, 1, &v32, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v34), 1, 1, &v29, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v34), 2, 1, &v30, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1 + 160);
                uint64_t v13 = HIWORD(v34);
                __int16 v14 = cstdlib_strlen(__dst);
                uint64_t PhraseStartingAtThisWord = v12(a2, a3, v13, 4, (unsigned __int16)(v14 + 1), __dst, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v34), 7, 1, (char *)&v28 + 2, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, HIWORD(v34), 8, 1, &v28, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
              }
              uint64_t v15 = HIWORD(v27);
              setSilDurOnWord(a4 + 672, (void *)(a4 + 8), HIWORD(v27), &v28);
              uint64_t PhraseStartingAtThisWord = checkForExternalSildur(a1, a2, a3, (unsigned __int16)v35, &v25);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              if (!v25)
              {
                uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1 + 160))(a2, a3, (unsigned __int16)v35, 8, 1, &v28, &v33);
                if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                  return PhraseStartingAtThisWord;
                }
              }
              unsigned int v16 = *(unsigned __int8 *)(*(void *)(a4 + 672) + 224 * v15 + 72);
              get_phr_for_nlu_output(a4, v15, __b);
              get_pos_for_nlu_output(a4, v15, v38);
              uint64_t PhraseStartingAtThisWord = updateNLUField(a1, a2, a3, (unsigned __int16)v35, a4, v15, v38, __b, *(char **)(*(void *)(a4 + 672) + 224 * v15 + 96), *(char **)(*(void *)(a4 + 672) + 224 * v15 + 112));
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v17, v18, v19, (unsigned __int16)v35);
              LH_itoa(v16, __s, 0xAu);
              uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1 + 160);
              uint64_t v21 = (unsigned __int16)v35;
              __int16 v22 = cstdlib_strlen(__s);
              uint64_t PhraseStartingAtThisWord = v20(a2, a3, v21, 13, (unsigned __int16)(v22 + 1), __s, &v33);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
          }
          uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v35, &v35);
          if ((v9 & 0x80000000) != 0) {
            return v9;
          }
        }
        cstdlib_strcpy(*(char **)(a4 + 1088), "");
        if (cstdlib_strcmp(__s1, "Y"))
        {
          uint64_t v23 = cstdlib_strrchr(v26, 63);
          if (v23)
          {
            if (v23 != v26 && *(v23 - 1) != 32) {
              *uint64_t v23 = 46;
            }
          }
        }
      }
    }
  }
  return v9;
}

uint64_t getPhraseStartingAtThisWord(uint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, char *__dst, _WORD *a6, __int16 *a7, _WORD *a8)
{
  *a4 = 0;
  if (!*((_WORD *)a1 + 4))
  {
LABEL_5:
    uint64_t v16 = 2315264000;
    if (a2) {
      log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"cant align lingdb word : no word found with fromPos=%d", (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, a3);
    }
    return v16;
  }
  unsigned int v13 = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = (unsigned __int8 *)(*a1 + 73);
  while (*(unsigned __int16 *)(v14 + 224 * v13) != a3)
  {
    ++v13;
    v15 += 224;
    if (v13 >= *((unsigned __int16 *)a1 + 4)) {
      goto LABEL_5;
    }
  }
  unsigned int v17 = (unsigned __int16)*a8;
  *a7 = v13;
  if (v13 | v17) {
    BOOL v18 = v13 > v17;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v16 = 0;
    *int __dst = 0;
    return v16;
  }
  unsigned int v19 = *((unsigned __int16 *)a1 + 4);
  unsigned int v20 = v13;
  if (v13 < v19)
  {
    LOWORD(v20) = v13;
    while (1)
    {
      int v21 = *v15;
      v15 += 224;
      if ((v21 - 3) < 2) {
        break;
      }
      LOWORD(v20) = v20 + 1;
      if (v19 == (unsigned __int16)v20) {
        goto LABEL_19;
      }
    }
    unsigned int v20 = (unsigned __int16)v20;
  }
  if (v20 == v19)
  {
LABEL_19:
    *a6 = *(_WORD *)(v14 + 224 * *((unsigned __int16 *)a1 + 4) - 222);
    *a8 = *((_WORD *)a1 + 4);
    goto LABEL_21;
  }
  *a8 = v20;
  *a6 = *(_WORD *)(v14 + 224 * v20 + 2);
  if (v20 + 1 == *((unsigned __int16 *)a1 + 4))
  {
LABEL_21:
    if (a1[5]) {
      __int16 v22 = (const char *)a1[5];
    }
    else {
      __int16 v22 = "T";
    }
    goto LABEL_25;
  }
  *a6 = *(_WORD *)(v14 + 224 * (v20 + 1));
  __int16 v22 = "P";
LABEL_25:
  cstdlib_strcpy(__dst, v22);
  __int16 v26 = *a7;
  if (*a7)
  {
    *a4 = 1;
    if (*(unsigned char *)(*a1 + 224 * (unsigned __int16)*a7 - 151) == 3) {
      __int16 v26 = 2;
    }
    else {
      __int16 v26 = 1;
    }
  }
  *a4 = v26;
  if (a2) {
    log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"Phrase lingdb=%d,%d PHRTYPE=%s BNDTYPE=%d internal word %d,%d", v23, v24, v25, a3);
  }
  return 0;
}

size_t setSilDurOnWord(size_t result, void *a2, int a3, _WORD *a4)
{
  uint64_t v6 = (void *)result;
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v15 = 0;
  *a4 = 0;
  unsigned int v7 = *(unsigned __int16 *)(result + 8);
  uint64_t v8 = *(void *)result;
  if (a3 + 1 < v7 && *(_DWORD *)(v8 + 224 * (a3 + 1) + 220) == 1)
  {
    do
    {
      LOWORD(a3) = a3 + 1;
      int v9 = (unsigned __int16)a3;
      unsigned int v10 = (unsigned __int16)a3 + 1;
    }
    while (v10 < v7 && *(_DWORD *)(v8 + 224 * v10 + 220) == 1);
  }
  else
  {
    int v9 = a3;
  }
  uint64_t v11 = (unsigned __int16)a3;
  unsigned int v12 = v7 - 1;
  if (*(unsigned char *)(v8 + 224 * (unsigned __int16)a3 + 73) == 4 && v12 != v9)
  {
    *a4 = *(_WORD *)(a2[6] + 8 * *(unsigned int *)(v8 + 224 * (unsigned __int16)a3 + 52) + 4);
    cstdlib_strcpy(__dst, "tnpausedur");
    size_t v14 = cstdlib_strlen((const char *)(a2[66]
                                      + *(unsigned int *)(a2[67]
                                                        + 4
                                                        * *(unsigned int *)(a2[6]
                                                                          + 8
                                                                          * *(unsigned int *)(*v6 + 224 * v11 + 52)))));
    uint64_t result = cstdlib_strlen(__dst);
    if (v14 < 255 - result)
    {
      cstdlib_strcat(__dst, (const char *)(a2[66]+ *(unsigned int *)(a2[67]+ 4* *(unsigned int *)(a2[6]+ 8 * *(unsigned int *)(*v6 + 224 * v11 + 52)))));
      uint64_t result = paramc_ParamGetUInt(*(void *)(*a2 + 40), (uint64_t)__dst, &v15);
      if ((result & 0x80000000) == 0) {
        *a4 = v15;
      }
    }
  }
  return result;
}

unint64_t get_phr_for_nlu_output(unint64_t result, unsigned int a2, char *__s1)
{
  uint64_t v4 = *(void *)(*(void *)(result + 672) + 224 * a2 + 56);
  if (v4 && (unint64_t v5 = result, (result = *(void *)(v4 + 32 * *(unsigned __int16 *)(result + 32) + 16)) != 0))
  {
    if (cstdlib_strcmp((const char *)result, "O")
      && cstdlib_strcmp(*(const char **)(*(void *)(*(void *)(v5 + 672) + 224 * a2 + 56)+ 32 * *(unsigned __int16 *)(v5 + 32)+ 16), "O-P"))
    {
      cstdlib_strcpy(__s1, "B-");
      cstdlib_strcat(__s1, *(const char **)(*(void *)(*(void *)(v5 + 672) + 224 * a2 + 56)+ 32 * *(unsigned __int16 *)(v5 + 32)+ 16));
    }
    else
    {
      cstdlib_strcpy(__s1, *(const char **)(*(void *)(*(void *)(v5 + 672) + 224 * a2 + 56)+ 32 * *(unsigned __int16 *)(v5 + 32)+ 16));
    }
    uint64_t result = cstdlib_strlen(__s1);
    if (result >= 2)
    {
      size_t v7 = cstdlib_strlen(__s1);
      uint64_t result = cstdlib_strcmp(&__s1[v7 - 2], "-P");
      if (!result)
      {
        uint64_t result = cstdlib_strlen(__s1);
        __s1[result - 2] = 0;
      }
    }
  }
  else if (*__s1)
  {
    uint64_t result = cstdlib_strcmp(__s1, "O");
    if (result) {
      char *__s1 = 73;
    }
  }
  return result;
}

char *get_pos_for_nlu_output(uint64_t a1, unsigned int a2, char *__dst)
{
  uint64_t v3 = *(void *)(a1 + 672);
  if (*(void *)(v3 + 224 * a2 + 88)) {
    return cstdlib_strcpy(__dst, *(const char **)(v3 + 224 * a2 + 88));
  }
  else {
    return cstdlib_strcpy(__dst, *(const char **)(*(void *)(v3 + 224 * a2 + 16) + 8 * *(unsigned __int16 *)(a1 + 26)));
  }
}

uint64_t updateNLUField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char *a8, char *a9, char *a10)
{
  int v38 = 0;
  __int16 v37 = 0;
  __src = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a4, 14, (char *)&v38 + 2);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!HIWORD(v38))
  {
    uint64_t v35 = a3;
LABEL_7:
    BOOL v18 = "";
    __src = "";
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a1 + 176))(a2, a3, a4, 14, &__src, &v38);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v35 = a3;
  if ((unsigned __int16)v38 < 2u) {
    goto LABEL_7;
  }
  BOOL v18 = __src;
LABEL_8:
  size_t v19 = cstdlib_strlen(v18) + 1;
  if (a7)
  {
    size_t v20 = cstdlib_strlen(";POS:");
    v19 += v20 + cstdlib_strlen(a7);
  }
  if (a8)
  {
    size_t v21 = cstdlib_strlen(";PHR:");
    v19 += v21 + cstdlib_strlen(a8);
  }
  if (a9 && !*(_DWORD *)(a5 + 664))
  {
    size_t v22 = cstdlib_strlen(";COMP:");
    v19 += v22 + cstdlib_strlen(a9);
  }
  if (a10)
  {
    size_t v23 = cstdlib_strlen(";BNDSHAPE:");
    v19 += v23 + cstdlib_strlen(a10);
  }
  if (v19 <= *(unsigned __int16 *)(a5 + 1104))
  {
    uint64_t v24 = *(char **)(a5 + 1088);
  }
  else
  {
    uint64_t v24 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a5 + 8), *(void *)(a5 + 1088), v19);
    if (!v24)
    {
      log_OutPublic(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v25, v26, v27, v28, v34);
      return 2315264010;
    }
    *(void *)(a5 + 1088) = v24;
    *(_WORD *)(a5 + 1104) = v19;
  }
  cstdlib_strcpy(v24, __src);
  if (a7 && *a7) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "POS", a7);
  }
  if (a8 && *a8) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "PHR", a8);
  }
  if (a9 && !*(_DWORD *)(a5 + 664) && *a9) {
    hlp_NLUStrSet(*(char **)(a5 + 1088), "COMP", a9);
  }
  if (a10)
  {
    if (*a10) {
      hlp_NLUStrSet(*(char **)(a5 + 1088), "BNDSHAPE", a10);
    }
  }
  log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v29, v30, v31, a4);
  unsigned int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
  __int16 v33 = cstdlib_strlen(*(const char **)(a5 + 1088));
  return v32(a2, v35, a4, 14, (unsigned __int16)(v33 + 1), *(void *)(a5 + 1088), &v37);
}

uint64_t updateLingdbCrfPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  int v41 = 0;
  int v42 = 0;
  unsigned int v39 = 0;
  int v40 = 0;
  uint64_t v38 = 0;
  __int16 v37 = 0;
  int v35 = 0;
  int v36 = 0;
  uint64_t v32 = 0;
  __int16 v33 = 0;
  __int16 v31 = 0;
  int v30 = 0;
  cstdlib_memset(__b, 0, 0x20uLL);
  uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 1, 0, &v42);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, (unsigned __int16)v42, 0, (char *)&v42 + 2);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (HIWORD(v42) != 1) {
    return v9;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a1 + 176))(a2, a3, (unsigned __int16)v42, 0, &v33, (char *)&v40 + 2);
  if ((v9 & 0x80000000) != 0 || HIWORD(v40) < 2u) {
    return v9;
  }
  uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v42, 1, &v32, &v31);
  if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
    return PhraseStartingAtThisWord;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v42, (char *)&v41 + 2);
  if ((v9 & 0x80000000) == 0)
  {
    int v34 = 0;
    cstdlib_strcpy(__dst, "");
    cstdlib_strcpy(*(char **)(a4 + 1088), "");
    unsigned __int16 v10 = HIWORD(v41);
    if (HIWORD(v41))
    {
      uint64_t v29 = a4 + 8;
      do
      {
        uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, v10, 0, 1, &v39, (char *)&v40 + 2);
        if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
          return PhraseStartingAtThisWord;
        }
        if (v39 <= 0xA && ((1 << v39) & 0x610) != 0)
        {
          uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, HIWORD(v41), 1, 1, &v36, (char *)&v40 + 2);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, HIWORD(v41), 2, 1, (char *)&v36 + 2, (char *)&v40 + 2);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v41), 3, &v38, (char *)&v40 + 2);
          if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
            return PhraseStartingAtThisWord;
          }
          if ((unsigned __int16)v36 != HIWORD(v36))
          {
            uint64_t PhraseStartingAtThisWord = getPhraseStartingAtThisWord((uint64_t *)(a4 + 672), 0, (unsigned __int16)v36, (__int16 *)&v35 + 1, __dst, &v37, (__int16 *)&v34 + 1, &v34);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if (__dst[0])
            {
              LOWORD(v35) = 0;
              if (HIWORD(v35) <= 1u)
              {
                if (HIWORD(v34)) {
                  setSilDurOnWordCrf(a4 + 672, v29, (unsigned __int16)(HIWORD(v34) - 1), (__int16 *)&v35, v12, v13, v14, v15);
                }
                else {
                  LOWORD(v35) = 200;
                }
              }
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 88))(a2, a3, HIWORD(v41), &v41);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              unsigned int v39 = 15;
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 160))(a2, a3, (unsigned __int16)v41, 0, 1, &v39, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 160))(a2, a3, (unsigned __int16)v41, 1, 1, &v36, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1 + 160))(a2, a3, (unsigned __int16)v41, 2, 1, &v37, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1 + 160);
              uint64_t v17 = (unsigned __int16)v41;
              __int16 v18 = cstdlib_strlen(__dst);
              uint64_t PhraseStartingAtThisWord = v16(a2, a3, v17, 4, (unsigned __int16)(v18 + 1), __dst, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 160))(a2, a3, (unsigned __int16)v41, 7, 1, (char *)&v35 + 2, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 160))(a2, a3, (unsigned __int16)v41, 8, 1, &v35, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
            uint64_t v19 = HIWORD(v34);
            setSilDurOnWordCrf(a4 + 672, v29, HIWORD(v34), (__int16 *)&v35, v12, v13, v14, v15);
            uint64_t PhraseStartingAtThisWord = checkForExternalSildur(a1, a2, a3, HIWORD(v41), &v30);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            if (!v30)
            {
              uint64_t PhraseStartingAtThisWord = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 160))(a2, a3, HIWORD(v41), 8, 1, &v35, &v40);
              if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
                return PhraseStartingAtThisWord;
              }
            }
            unsigned int v20 = *(unsigned __int8 *)(*(void *)(a4 + 672) + 224 * v19 + 72);
            get_phr_for_nlu_output(a4, v19, __b);
            get_pos_for_nlu_output(a4, v19, v44);
            uint64_t PhraseStartingAtThisWord = updateNLUField(a1, a2, a3, HIWORD(v41), a4, v19, v44, __b, *(char **)(*(void *)(a4 + 672) + 224 * v19 + 96), *(char **)(*(void *)(a4 + 672) + 224 * v19 + 112));
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
            log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_PRM -> %d dur=%d", v21, v22, v23, HIWORD(v41));
            LH_itoa(v20, __s, 0xAu);
            uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1 + 160);
            uint64_t v25 = HIWORD(v41);
            __int16 v26 = cstdlib_strlen(__s);
            uint64_t PhraseStartingAtThisWord = v24(a2, a3, v25, 13, (unsigned __int16)(v26 + 1), __s, &v40);
            if ((PhraseStartingAtThisWord & 0x80000000) != 0) {
              return PhraseStartingAtThisWord;
            }
          }
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 120))(a2, a3, HIWORD(v41), (char *)&v41 + 2);
        if ((v9 & 0x80000000) != 0) {
          return v9;
        }
        unsigned __int16 v10 = HIWORD(v41);
      }
      while (HIWORD(v41));
    }
    cstdlib_strcpy(*(char **)(a4 + 1088), "");
    if (!cstdlib_strcmp(__dst, "W") || !cstdlib_strcmp(__dst, "AF"))
    {
      uint64_t v27 = cstdlib_strrchr(v33, 63);
      if (v27 && v27 != v33 && *(v27 - 1) != 32) {
        *uint64_t v27 = 46;
      }
    }
  }
  return v9;
}

uint64_t setSilDurOnWordCrf(uint64_t result, uint64_t a2, int a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = result;
  if (a2) {
    uint64_t result = log_OutText(*(void *)(*(void *)a2 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"the parameter %s is ready", a6, a7, a8, (uint64_t)"pandpRules");
  }
  *a4 = 0;
  unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
  uint64_t v12 = *(void *)v10;
  if (a3 + 1 < v11 && *(_DWORD *)(v12 + 224 * (a3 + 1) + 220) == 1)
  {
    do
    {
      LOWORD(a3) = a3 + 1;
      int v13 = (unsigned __int16)a3;
      unsigned int v14 = (unsigned __int16)a3 + 1;
    }
    while (v14 < v11 && *(_DWORD *)(v12 + 224 * v14 + 220) == 1);
  }
  else
  {
    int v13 = a3;
  }
  uint64_t v15 = (unsigned __int16)a3;
  unsigned int v16 = v11 - 1;
  if (*(unsigned char *)(v12 + 224 * (unsigned __int16)a3 + 73) == 4 && v16 != v13)
  {
    int v18 = cstdlib_strlen(**(const char ***)(v12 + 224 * (unsigned __int16)a3 + 16));
    *a4 = 100;
    uint64_t result = doesWordEndInComma(**(const char ***)(*(void *)v10 + 224 * v15 + 16));
    if (result)
    {
      __int16 v19 = 300;
    }
    else
    {
      if (*(unsigned char *)(**(void **)(*(void *)v10 + 224 * v15 + 16) + (v18 - 1)) != 46) {
        return result;
      }
      __int16 v19 = 600;
    }
    *a4 = v19;
  }
  return result;
}

uint64_t doesCustermizedFE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = 2315264010;
  char v40 = 0;
  *(_WORD *)__s2 = -22590;
  *a6 = 0;
  if (!a1) {
    return 2315264007;
  }
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 256, 1);
  if (v13)
  {
    int v18 = (char *)v13;
    __int16 v46 = 0;
    int v45 = 0;
    unsigned __int16 v44 = 0;
    unsigned int v43 = 0;
    uint64_t v42 = 0;
    int v41 = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 1, 0, (char *)&v45 + 2);
    if ((v19 & 0x80000000) != 0)
    {
      uint64_t v20 = v19;
      goto LABEL_35;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a2 + 184))(a3, a4, HIWORD(v45), 0, &v46);
    if ((v20 & 0x80000000) == 0 && v46 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a2 + 176))(a3, a4, HIWORD(v45), 0, &v42, &v44);
      if (v44 >= 2u)
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 2, HIWORD(v45), &v45);
        if ((v20 & 0x80000000) == 0)
        {
          cstdlib_strcpy(__dst, "");
          cstdlib_strcpy(*(char **)(a5 + 1088), "");
          unsigned __int16 v21 = v45;
          if ((_WORD)v45)
          {
            unsigned __int16 v22 = 0;
            unsigned int v38 = 256;
            while (1)
            {
              uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, unsigned __int16 *))(a2 + 168))(a3, a4, v21, 0, 1, &v43, &v44);
              if ((v23 & 0x80000000) != 0) {
                goto LABEL_30;
              }
              if (v43 <= 0xA && ((1 << v43) & 0x610) != 0)
              {
                uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a2 + 168))(a3, a4, (unsigned __int16)v45, 1, 1, &v41, &v44);
                if ((v23 & 0x80000000) != 0) {
                  goto LABEL_30;
                }
                uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a2 + 168))(a3, a4, (unsigned __int16)v45, 2, 1, (char *)&v41 + 2, &v44);
                if ((v23 & 0x80000000) != 0) {
                  goto LABEL_30;
                }
                unsigned int v25 = (unsigned __int16)v41;
                unsigned int v26 = HIWORD(v41);
                if ((unsigned __int16)v41 != HIWORD(v41))
                {
                  unsigned int v27 = HIWORD(v41) - (unsigned __int16)v41 + 1;
                  if (v38 < v27)
                  {
                    uint64_t v28 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v18, HIWORD(v41) - (unsigned __int16)v41 + 1);
                    if (!v28)
                    {
                      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v37);
LABEL_31:
                      uint64_t v20 = v6;
                      break;
                    }
                    unsigned int v25 = (unsigned __int16)v41;
                    unsigned int v26 = HIWORD(v41);
                    unsigned int v38 = v27;
                    int v18 = (char *)v28;
                  }
                  cstdlib_memcpy(v18, (const void *)(v42 + v25), v26 - (unint64_t)v25);
                  v18[HIWORD(v41) - (unsigned __int16)v41] = 0;
                  __int16 v33 = cstdlib_strlen(v18);
                  int v34 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v18, v33);
                  if (v34)
                  {
                    unsigned __int16 v35 = 0;
                    do
                    {
                      utf8_getUTF8Char((uint64_t)v18, v35, __s1);
                      if (!cstdlib_strcmp(__s1, __s2)) {
                        ++v22;
                      }
                      v35 += utf8_determineUTF8CharLength(__s1[0]);
                      --v34;
                    }
                    while (v34);
                  }
                }
              }
              uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a2 + 120))(a3, a4, (unsigned __int16)v45, &v45);
              if ((v23 & 0x80000000) != 0) {
                goto LABEL_30;
              }
              unsigned __int16 v21 = v45;
              if (!(_WORD)v45)
              {
                if (v22 >= 3u) {
                  *a6 = 1;
                }
LABEL_30:
                uint64_t v6 = v23;
                goto LABEL_31;
              }
            }
          }
        }
      }
    }
LABEL_35:
    heap_Free(*(void **)(a1 + 8), (uint64_t)v18);
    return v20;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v37);
  }
  return v6;
}

uint64_t heapAdjustDown(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (2 * a2) | 1;
  if (v3 < a3)
  {
    uint64_t v4 = *(void *)(result + 8 * a2);
    uint64_t v5 = a2;
    do
    {
      unsigned int v6 = (unsigned __int16)v3;
      if ((unsigned __int16)v3 < a3 - 1)
      {
        if (*(__int16 *)(*(void *)(result + 8 * (unsigned __int16)v3) + 2) < *(__int16 *)(*(void *)(result + 8 * ((unsigned __int16)v3 + 1))
                                                                                               + 2))
          LOWORD(v3) = v3 + 1;
        unsigned int v6 = (unsigned __int16)v3;
      }
      uint64_t v7 = *(void *)(result + 8 * v6);
      if (*(__int16 *)(*(void *)(result + 8 * v5) + 2) >= *(__int16 *)(v7 + 2)) {
        break;
      }
      *(void *)(result + 8 * v5) = v7;
      *(void *)(result + 8 * v6) = v4;
      uint64_t v5 = (unsigned __int16)v3;
      unsigned int v3 = (2 * (unsigned __int16)v3) | 1;
    }
    while (v3 < a3);
  }
  return result;
}

uint64_t heapPop(uint64_t **a1)
{
  uint64_t v1 = *((unsigned __int16 *)a1 + 4);
  if (!*((_WORD *)a1 + 4)) {
    return 0;
  }
  if (v1 == 2)
  {
    uint64_t result = **a1;
    **a1 = (*a1)[1];
    *((_WORD *)a1 + 4) = 1;
  }
  else if (v1 == 1)
  {
    *((_WORD *)a1 + 4) = 0;
    return **a1;
  }
  else
  {
    uint64_t v4 = **a1;
    **a1 = (*a1)[(v1 - 1)];
    (*a1)[v1 - 1] = v4;
    heapAdjustDown((uint64_t)*a1, 0, (unsigned __int16)(v1 - 1));
    unsigned __int16 v5 = *((_WORD *)a1 + 4) - 1;
    *((_WORD *)a1 + 4) = v5;
    return (*a1)[v5];
  }
  return result;
}

uint64_t heapAdd(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(result + 8);
  *(void *)(*(void *)result + 8 * *(unsigned __int16 *)(result + 8)) = a2;
  *(_WORD *)(result + 8) = v2 + 1;
  if (v2) {
    BOOL v3 = v2 == 0xFFFF;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = result;
    int v5 = (unsigned __int16)(v2 + 1) >> 1;
    do
    {
      unsigned int v6 = (unsigned __int16)v5--;
      uint64_t result = heapAdjustDown(*(void *)v4, (unsigned __int16)v5, *(unsigned __int16 *)(v4 + 8));
    }
    while (v6 > 1);
  }
  return result;
}

uint64_t astar_search(uint64_t a1, uint64_t *a2, __int16 a3, int a4, unsigned __int16 *a5, uint64_t *a6)
{
  v44[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 8);
  unsigned __int16 v12 = a5[1] + 2;
  if (a5[1] == 0xFFFE)
  {
    uint64_t v17 = 16;
  }
  else
  {
    __int16 v13 = 2;
    unsigned __int16 v14 = 1;
    do
    {
      unsigned int v15 = v12;
      if (v12) {
        __int16 v16 = v13;
      }
      else {
        __int16 v16 = 1;
      }
      v14 *= v16;
      v12 >>= 1;
      v13 *= v13;
    }
    while (v15 > 1);
    uint64_t v17 = 16 * v14;
  }
  uint64_t v18 = 2315264010;
  uint64_t v19 = heap_Alloc(v11, v17);
  if (v19)
  {
    uint64_t v20 = v19;
    unsigned __int16 v21 = a5[1] + 2;
    if (a5[1] == 0xFFFE)
    {
      uint64_t v26 = 8;
    }
    else
    {
      __int16 v22 = 2;
      unsigned __int16 v23 = 1;
      do
      {
        unsigned int v24 = v21;
        if (v21) {
          __int16 v25 = v22;
        }
        else {
          __int16 v25 = 1;
        }
        v23 *= v25;
        v21 >>= 1;
        v22 *= v22;
      }
      while (v24 > 1);
      uint64_t v26 = 8 * v23;
    }
    unsigned int v27 = (uint64_t *)heap_Alloc(*(void *)(a1 + 8), v26);
    uint64_t v42 = v27;
    if (!v27) {
      goto LABEL_36;
    }
    uint64_t v28 = 0;
    *(_DWORD *)uint64_t v20 = 0xFFFF;
    uint64_t v43 = 0;
    *(_WORD *)(v20 + 4) = a3 - 1;
    *(_WORD *)(v20 + 6) = 0;
    *(_WORD *)(v20 + 12) = 0;
    *(_WORD *)(v20 + 14) = *a5;
    *(_DWORD *)(v20 + 8) = 0;
    v44[0] = 0x100000000;
    *unsigned int v27 = v20;
    unsigned int v29 = 1;
    LOWORD(v43) = 1;
    do
    {
      uint64_t v30 = heapPop(&v42);
      uint64_t v31 = v30;
      if (*(__int16 *)(v30 + 4) == a4 && (!v28 || *(__int16 *)(v30 + 2) > *(__int16 *)(v28 + 2))) {
        uint64_t v28 = v30;
      }
      uint64_t v40 = v28;
      uint64_t v32 = 0;
      char v33 = 1;
      do
      {
        char v34 = v33;
        if (generateNewState(a1, v31, v20 + 16 * v29, *((_DWORD *)v44 + v32), a2, a4, a5, a6))
        {
          *(_WORD *)(v20 + 16 * v29 + 6) = v29;
          heapAdd((uint64_t)&v42, v20 + 16 * v29++);
        }
        char v33 = 0;
        uint64_t v32 = 1;
      }
      while ((v34 & 1) != 0);
      uint64_t v28 = v40;
    }
    while ((_WORD)v43);
    if (v40 && *(__int16 *)(v40 + 6) >= 1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v40 + 6);
      do
      {
        int v36 = (__int16 *)(v20 + 16 * v35);
        if (!*((_DWORD *)v36 + 2)) {
          *(unsigned char *)(*a2 + 224 * v36[2] + 73) = 4;
        }
        int v37 = *v36;
        uint64_t v35 = (unsigned __int16)*v36;
      }
      while (v37 > 0);
    }
    unsigned int v38 = v42;
    heap_Free(*(void **)(a1 + 8), v20);
    uint64_t v18 = 0;
    uint64_t v20 = (uint64_t)v38;
    if (v38) {
LABEL_36:
    }
      heap_Free(*(void **)(a1 + 8), v20);
  }
  return v18;
}

uint64_t ipow(__int16 a1, unsigned int a2)
{
  unsigned __int16 v2 = 1;
  if (a2)
  {
    do
    {
      if (a2) {
        __int16 v3 = a1;
      }
      else {
        __int16 v3 = 1;
      }
      v2 *= v3;
      a1 *= a1;
      BOOL v4 = a2 > 1;
      a2 >>= 1;
    }
    while (v4);
  }
  return v2;
}

BOOL isTerminateState(uint64_t a1, int a2)
{
  return *(__int16 *)(a1 + 4) == a2;
}

_WORD *generateNewState(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6, unsigned __int16 *a7, uint64_t *a8)
{
  *(_WORD *)a3 = *(_WORD *)(a2 + 6);
  *(_DWORD *)(a3 + 8) = a4;
  __int16 v8 = *(_WORD *)(a2 + 4) + 1;
  *(_WORD *)(a3 + 4) = v8;
  if (a6 >= v8)
  {
    uint64_t v9 = (_WORD *)a3;
    int v16 = 0;
    uint64_t v17 = *a5;
    do
    {
      uint64_t v18 = **(const char ***)(v17 + 224 * v8 + 16);
      __int16 v19 = cstdlib_strlen(v18);
      v16 += Utf8_LengthInUtf8chars((unint64_t)v18, v19);
      uint64_t v17 = *a5;
      int v20 = (__int16)v9[2];
      if (*(unsigned char *)(*a5 + 224 * (__int16)v9[2] + 73) == 3) {
        break;
      }
      __int16 v8 = v20 + 1;
      v9[2] = v20 + 1;
      int v20 = (__int16)(v20 + 1);
    }
    while (v20 <= a6);
    if (v20 > a6) {
      v9[2] = a6;
    }
    v9[7] = *(_WORD *)(a2 + 14) - v16;
    __int16 v21 = *(_WORD *)(a2 + 2);
    v9[1] = calculateScore(a1, a4, (uint64_t)v9, (unsigned __int16)(*(_WORD *)(a2 + 12) + v16), *a7, *(_DWORD *)(a2 + 8), a8, (uint64_t)a5)+ v21;
    if (a4)
    {
      if (a4 != 1) {
        return v9;
      }
      __int16 v22 = *(_WORD *)(a2 + 12) + v16;
    }
    else
    {
      __int16 v22 = 0;
    }
    v9[6] = v22;
    return v9;
  }
  return 0;
}

uint64_t calculateScore(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t *a7, uint64_t a8)
{
  if (a2 == 1 && a4 < 6) {
    __int16 v10 = 5;
  }
  else {
    __int16 v10 = 0;
  }
  if (a2 == 0 && a4 > 7) {
    v10 += 5;
  }
  unsigned int v11 = *(unsigned __int16 *)(a3 + 14);
  if (a2 == 1 && v11 < 6) {
    v10 += 10;
  }
  if (a2 == 0 && 1000 * v11 / a5 - 400 < 0xC9) {
    __int16 v12 = v10 + 5;
  }
  else {
    __int16 v12 = v10;
  }
  if (a2 == 1 && applyRules(a1, a8, *(unsigned __int16 *)(a3 + 4), a7) == 1) {
    v12 += 20;
  }
  if (a6 | a2) {
    return v12;
  }
  else {
    return (__int16)(v12 - 10);
  }
}

uint64_t fe_phrasing_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t stress_models = 2315264010;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  int v38 = 0;
  int v37 = 0;
  __int16 v36 = -1;
  char v35 = 0;
  if (!a5) {
    return 2315264007;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v43);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v42);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v12 = heap_Calloc((void *)v43[1], 1, 1728);
      uint64_t v17 = v43;
      if (!v12
        || (uint64_t v18 = v12,
            __int16 v19 = (void *)heap_Calloc((void *)v43[1], 1, 1040),
            *(void *)(v18 + 48) = v19,
            uint64_t v17 = v43,
            !v19))
      {
        log_OutPublic(v17[4], (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, __b);
        goto LABEL_46;
      }
      *(void *)uint64_t v18 = v43;
      *(void *)(v18 + 8) = a3;
      uint64_t v20 = v42;
      *(void *)(v18 + 16) = a4;
      *(void *)(v18 + 24) = v20;
      *(void *)(v18 + 32) = a1;
      *(void *)(v18 + 40) = a2;
      *__int16 v19 = a3;
      v19[1] = a4;
      *(_DWORD *)(*(void *)(v18 + 48) + 1020) = 0;
      *(_DWORD *)(v18 + 1456) = 0;
      *(_DWORD *)(v18 + 1520) = 0;
      *(void *)(v18 + 1448) = 0;
      *(void *)(v18 + 1464) = 0;
      *(_OWORD *)(v18 + 144) = 0u;
      *(void *)(v18 + 136) = 0;
      *(_DWORD *)(v18 + 1680) = 0;
      *(_OWORD *)(v18 + 1664) = 0u;
      *(_OWORD *)(v18 + 1688) = 0u;
      *(void *)(v18 + 1704) = safeh_GetNullHandle();
      *(void *)(v18 + 1712) = v21;
      *(void *)(v18 + 1536) = 0;
      uint64_t Object = objc_GetObject(v43[6], (uint64_t)"LINGDB", &v41);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      *(void *)(v18 + 56) = *(void *)(v41 + 8);
      uint64_t Object = objc_GetObject(v43[6], (uint64_t)"FE_DEPES", &v40);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v23 = v40;
      *(void *)(v18 + 80) = *(void *)(v40 + 8);
      *(_OWORD *)(v18 + 64) = *(_OWORD *)(v23 + 16);
      uint64_t Object = objc_GetObject(v43[6], (uint64_t)"FE_DCTLKP", &v39);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      uint64_t v24 = v39;
      *(void *)(v18 + 104) = *(void *)(v39 + 8);
      *(_OWORD *)(v18 + 88) = *(_OWORD *)(v24 + 16);
      *(_DWORD *)(v18 + 1296) = 0;
      uint64_t Object = nn_phrasing_checkIfActive(a3, a4, (uint64_t)v43, (_DWORD *)(v18 + 1296));
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      if (*(_DWORD *)(v18 + 1296) == 1)
      {
        uint64_t Object = nn_phrasing_Load(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (uint64_t)v43, *(void *)(v18 + 104), *(void *)(v18 + 88), *(void *)(v18 + 96), (uint64_t *)(v18 + 1304));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
      }
      uint64_t Object = isCorpusAlignmentEnabled((uint64_t)v43, &v38);
      if ((Object & 0x80000000) != 0)
      {
LABEL_45:
        uint64_t stress_models = Object;
        goto LABEL_46;
      }
      if (v38 == 1)
      {
        *(_DWORD *)(v18 + 160) = 0;
        *(_DWORD *)(v18 + 116) = 0;
      }
      else
      {
        uint64_t Object = usePandP(v43, (_DWORD *)(v18 + 160));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
        if (*(_DWORD *)(v18 + 160))
        {
          uint64_t Object = paramc_ParamSetUInt(v43[5], (uint64_t)"prmigactive", 1u);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = pandpIgtreeInit(a3, a4, a1, a2, (uint64_t)v43, v42, (void *)(v18 + 920));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          *(void *)(v18 + 600) = 0;
          *(_DWORD *)(v18 + 608) = 0;
          uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v18 + 600);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = nuance_pcre_Init(*(void **)(v18 + 600), *(void *)(v18 + 608), 0x1Eu, 50);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          __int16 v25 = v43;
          *(void *)(v18 + 168) = v43;
          uint64_t Object = readPandPRules(a3, a4, v25, v18 + 176);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
        }
        uint64_t Object = com_mosynt_UseMosynt(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (BOOL *)(v18 + 116));
        if ((Object & 0x80000000) != 0) {
          goto LABEL_45;
        }
        if (*(_DWORD *)(v18 + 116))
        {
LABEL_30:
          char __s1 = 0;
          uint64_t Object = com_mosynt_GetCfgParamVal(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          BOOL v26 = cstdlib_strcmp(__s1, "yes") == 0;
          uint64_t Object = kbsymtab_LoadData(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (uint64_t *)(v18 + 120), v26);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t Object = accphr_LoadData(a3, a4, (uint64_t *)(v18 + 128));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_45;
          }
LABEL_33:
          uint64_t Object = com_IncludeCRF(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (BOOL *)(v18 + 112));
          if ((Object & 0x80000000) == 0)
          {
            if (!*(_DWORD *)(v18 + 112)
              || (uint64_t v29 = v42,
                  uint64_t v28 = v43,
                  *(void *)(v18 + 168) = v43,
                  uint64_t Object = pandpCrfInit(a3, a4, a1, a2, (uint64_t)v28, v29, *(void *)(v18 + 104), v27, *(void *)(v18 + 88), *(void *)(v18 + 96), v18 + 920), (Object & 0x80000000) == 0))
            {
              (*(void (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(*(void *)(v18 + 104) + 96))(*(void *)(v18 + 88), *(void *)(v18 + 96), "fecfg", "statbnd_enable_nnets", &v37, &v36, &v35);
              if (v36 && v37)
              {
                uint64_t v30 = *v37;
                v30[cstdlib_strlen(*v37) - 1] = 0;
                *(_DWORD *)(v18 + 1456) = cstdlib_strcmp(*v37, "yes") == 0;
              }
              uint64_t Object = fe_phrasing_InitNNPhrasing(v18);
              if ((Object & 0x80000000) == 0)
              {
                uint64_t Object = hlp_useNLUPOSMap(*(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), (_DWORD *)(v18 + 1280));
                if ((Object & 0x80000000) == 0)
                {
                  if (*(_DWORD *)(v18 + 1280) != 1
                    || (uint64_t Object = hlp_loadNLUPOSMap((uint64_t)v43, *(void *)(v18 + 104), *(void *)(v18 + 88), *(void *)(v18 + 96), (uint64_t *)(v18 + 1288)), (Object & 0x80000000) == 0))
                  {
                    fe_phraseing_tryLoadingIGTree(*(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), *(void *)v18, (void *)(v18 + 1648));
                    uint64_t stress_models = load_stress_models(*(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(void *)v18, *(void *)(v18 + 88), *(void *)(v18 + 96), *(void *)(v18 + 104), a1, a2, (_DWORD *)(v18 + 1680), (void *)(v18 + 1696), (void *)(v18 + 1688), *(void *)(v18 + 1464), (void *)(v18 + 1472), (_OWORD *)(v18 + 1704), (_WORD *)(v18 + 1720), (BOOL *)(v18 + 1684));
                    if ((stress_models & 0x80000000) == 0)
                    {
                      int v31 = 62343;
LABEL_47:
                      *(void *)a5 = v18;
                      *(_DWORD *)(a5 + 8) = v31;
                      return stress_models;
                    }
LABEL_46:
                    fe_phrasing_ObjClose(*(void ***)a5, *(void *)(a5 + 8));
                    uint64_t v18 = 0;
                    int v31 = 0;
                    goto LABEL_47;
                  }
                }
              }
            }
          }
          goto LABEL_45;
        }
      }
      uint64_t Object = paramc_ParamSetUInt(v43[5], (uint64_t)"prmigactive", 1u);
      if ((Object & 0x80000000) != 0) {
        goto LABEL_45;
      }
      if (!*(_DWORD *)(v18 + 116)) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
  }
  return inited;
}

uint64_t isCorpusAlignmentEnabled(uint64_t a1, _DWORD *a2)
{
  unsigned int v5 = 0;
  *a2 = 0;
  uint64_t UInt = paramc_ParamGetUInt(*(void *)(a1 + 40), (uint64_t)"statpos_do_corpus_alignment", &v5);
  uint64_t result = 0;
  if ((UInt & 0x1FFF) != 0x14)
  {
    uint64_t result = UInt;
    if ((UInt & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v5 == 1) {
        *a2 = 1;
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_InitNNPhrasing(uint64_t a1)
{
  uint64_t result = 0;
  __int16 v10 = 0;
  __int16 v9 = -1;
  char v8 = 0;
  if (*(_DWORD *)(a1 + 1456) == 1)
  {
    uint64_t result = ruleNNInit(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, *(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), a1 + 1544, a1 + 1560);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = initFiModel(*(void *)a1, *(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), (_DWORD *)(a1 + 1460), (void *)(a1 + 1448));
      if ((result & 0x80000000) == 0)
      {
        *(void *)(a1 + 1464) = 0;
        *(void *)(a1 + 1472) = safeh_GetNullHandle();
        *(void *)(a1 + 1480) = v3;
        *(_DWORD *)(a1 + 1520) = 1;
        uint64_t result = loadEmbedding(*(void *)(a1 + 8), *(void *)(a1 + 16), (void *)(a1 + 1464), (void *)(a1 + 1472), (uint64_t *)(a1 + 1488), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), (BOOL *)(a1 + 1520));
        if ((result & 0x80000000) == 0)
        {
          BOOL v4 = (unsigned __int8 *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1776);
          *(void *)(a1 + 1528) = v4;
          if (v4)
          {
            uint64_t result = load_pw_cfg(*(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), v4, *(void *)a1);
            if ((result & 0x80000000) == 0)
            {
              uint64_t result = getphraseCfg(*(void *)a1, *(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), (unsigned int *)(a1 + 1656), (char **)(a1 + 1664), (char **)(a1 + 1672));
              if ((result & 0x80000000) == 0)
              {
                int v7 = 0;
                *(_DWORD *)(a1 + 1524) = 0;
                uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, __int16 *, char *))(*(void *)(a1 + 104) + 96))(*(void *)(a1 + 88), *(void *)(a1 + 96), "fecfg", "statbnd_nopos", &v10, &v9, &v8);
                if ((result & 0x80000000) == 0)
                {
                  if (v9 == 1)
                  {
                    unsigned int v5 = *v10;
                    v5[cstdlib_strlen(*v10) - 1] = 0;
                    if (!cstdlib_strcmp(*v10, "yes")) {
                      *(_DWORD *)(a1 + 1524) = 1;
                    }
                  }
                  uint64_t result = load_pw_igtree_cfg(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), &v7);
                  if ((result & 0x80000000) == 0)
                  {
                    if (v7)
                    {
                      unsigned int v6 = (uint64_t *)(a1 + 1536);
                      uint64_t result = load_pw_igtree(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, (char **)(a1 + 1536));
                      if ((result & 0x80000000) != 0)
                      {
                        if (*v6)
                        {
                          igtree_Deinit(*(void *)a1, *v6);
                          uint64_t result = 0;
                          *(void *)(a1 + 1536) = 0;
                        }
                        else
                        {
                          return 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            return 2315264010;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_useNLUPOSMap(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "nluposmap", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || *(void *)&__c[3] == 0) {
      return 0;
    }
    int v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7) {
      *int v7 = 0;
    }
    if (cstdlib_strcmp(**(const char ***)&__c[3], "YES") && cstdlib_strcmp(**(const char ***)&__c[3], "yes"))
    {
      return 0;
    }
    else
    {
      uint64_t result = 0;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t hlp_loadNLUPOSMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v28 = 0;
  long long __b = 0u;
  long long v27 = 0u;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, "fecfg", "nluposmapcounter", &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12) {
      *uint64_t v12 = 0;
    }
    unsigned __int16 v13 = cstdlib_atoi(**(unsigned __int8 ***)&__c[3]);
    uint64_t v14 = v13;
    if (v13)
    {
      cstdlib_memset(&__b, 0, 0x28uLL);
      *(void *)&long long __b = ssftmap_ElemCopyString;
      *((void *)&v27 + 1) = ssftmap_ElemCopyString;
      *((void *)&__b + 1) = ssftmap_ElemFreeString;
      uint64_t v28 = ssftmap_ElemFreeString;
      *(void *)&long long v27 = ssftmap_ElemCompareKeysString;
      uint64_t v15 = *(void **)(a1 + 8);
      *(_OWORD *)int __dst = __b;
      long long v32 = v27;
      char v33 = ssftmap_ElemFreeString;
      uint64_t v16 = ssftmap_ObjOpen(v15, 0, (long long *)__dst, a5);
      if ((v16 & 0x80000000) != 0)
      {
        return v16;
      }
      else
      {
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        do
        {
          cstdlib_memset(__dst, 0, 0x20uLL);
          cstdlib_strcpy(__dst, "nluposmap");
          __int16 v19 = LH_itoa(v17, v29, 0xAu);
          cstdlib_strcat(&__dst[9], v19);
          *(_WORD *)&__c[1] = -1;
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(a2 + 96))(a3, a4, "fecfg", __dst, &__c[3], &__c[1], __c);
          if ((v10 & 0x80000000) != 0) {
            break;
          }
          if (*(_WORD *)&__c[1])
          {
            uint64_t v20 = **(char ***)&__c[3];
            uint64_t v21 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
            if (v21)
            {
              *uint64_t v21 = 0;
              uint64_t v18 = (uint64_t)(v21 + 1);
            }
            if (v20)
            {
              uint64_t v22 = v14;
              while (1)
              {
                uint64_t v23 = cstdlib_strchr(v20, 124);
                uint64_t v24 = v23;
                if (v23) {
                  *uint64_t v23 = 0;
                }
                uint64_t v10 = ssftmap_Insert(*a5, (uint64_t)v20, v18);
                if ((v10 & 0x80000000) != 0) {
                  return v10;
                }
                uint64_t v20 = v24 + 1;
                if (!v24)
                {
                  uint64_t v14 = v22;
                  break;
                }
              }
            }
          }
          ++v17;
        }
        while (v17 != v14);
      }
    }
  }
  return v10;
}

uint64_t fe_phraseing_tryLoadingIGTree(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(v19, 0, sizeof(v19));
  uint64_t v18 = 0;
  *a6 = 0;
  uint64_t result = nn_model_getBrokerString(a5, v19, "wprules_", 0x100uLL);
  if ((result & 0x80000000) != 0) {
    goto LABEL_5;
  }
  uint64_t result = igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, &v18, 2, (uint64_t)v19, "IGTR", 1031, 0);
  if ((result & 0x80000000) != 0)
  {
    uint64_t result = log_OutText(*(void *)(a5 + 32), (uint64_t)"FE_PHRASING", 3, 0, (uint64_t)"failed to read IGtree phrasing model data - going on without", v13, v14, v15, v17);
LABEL_5:
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v16 = v18;
LABEL_6:
  *a6 = v16;
  return result;
}

uint64_t fe_phrasing_ObjClose(void **a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728);
  if ((result & 0x80000000) != 0) {
    return 2315264008;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 40))
    {
      pandpIgtreeDeinit((uint64_t)a1[21], (uint64_t)a1[3], a1 + 115);
      freePandPRules(a1 + 22);
    }
    if (*((_DWORD *)a1 + 364) == 1)
    {
      BOOL v4 = (uint64_t **)a1[181];
      if (v4)
      {
        if (*v4)
        {
          fi_deinit((uint64_t)*a1, (uint64_t)a1[3], *v4);
          BOOL v4 = (uint64_t **)a1[181];
        }
        if (!*((_DWORD *)a1 + 365))
        {
          fi_deinit((uint64_t)*a1, (uint64_t)a1[3], v4[1]);
          BOOL v4 = (uint64_t **)a1[181];
        }
        heap_Free((void *)(*a1)[1], (uint64_t)v4);
        a1[181] = 0;
      }
      unsigned int v5 = a1[183];
      if (v5)
      {
        ((void (*)(void *, void *))v5[3])(a1[186], a1[187]);
        if (*((_DWORD *)a1 + 380)) {
          ((void (*)(void *, void *))a1[183][3])(a1[188], a1[189]);
        }
        if (!*((_DWORD *)a1 + 420))
        {
          a1[183] = 0;
          objc_UnregisterObject((*a1)[6], (uint64_t)"NNWRDLKP");
        }
      }
      uint64_t v6 = (uint64_t)a1[192];
      if (v6)
      {
        igtree_Deinit((uint64_t)*a1, v6);
        heap_Free((void *)(*a1)[1], (uint64_t)a1[192]);
        a1[192] = 0;
      }
      freeSpRules(*a1, (uint64_t)(a1 + 193));
      freePwInObjClose((uint64_t)*a1, (unsigned __int8 *)a1[191]);
      freeSPPunc(*a1, (uint64_t)a1[208]);
      freeSPPunc(*a1, (uint64_t)a1[209]);
    }
    if (a1[15]) {
      kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
    }
    if (a1[16]) {
      accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
    }
    if (a1[7]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"LINGDB");
    }
    if (a1[10]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DEPES");
    }
    if (a1[13]) {
      objc_ReleaseObject((*a1)[6], (uint64_t)"FE_DCTLKP");
    }
    uint64_t v7 = (uint64_t)a1[6];
    if (v7) {
      heap_Free((void *)(*a1)[1], v7);
    }
    if (*((_DWORD *)a1 + 28)) {
      pandpCrfDeinit((uint64_t)a1[21], (uint64_t)a1[3], (uint64_t)(a1 + 115));
    }
    if (*((_DWORD *)a1 + 324) != 1
      || (uint64_t result = nn_phrasing_UnLoad((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)(a1 + 163)), (result & 0x80000000) == 0))
    {
      if (*((_DWORD *)a1 + 320) == 1) {
        ssftmap_ObjClose((uint64_t)a1[161]);
      }
      uint64_t v8 = (uint64_t)a1[206];
      if (v8)
      {
        igtree_Deinit_ReadOnly_DereferenceCnt((uint64_t)*a1, (uint64_t)a1[3], v8);
        a1[206] = 0;
      }
      if (*((_DWORD *)a1 + 420))
      {
        free_stress_model((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[212], a1[211], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214]);
        a1[212] = 0;
        a1[183] = 0;
        objc_UnregisterObject((*a1)[6], (uint64_t)"NNWRDLKP");
      }
      heap_Free((void *)(*a1)[1], (uint64_t)a1);
      return 0;
    }
  }
  return result;
}

uint64_t fe_phrasing_ObjReopen(void **a1, int a2)
{
  uint64_t v3 = 2315264006;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 324) == 1)
    {
      uint64_t nn_option = nn_phrasing_UnLoad((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)(a1 + 163));
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
    }
    *((_DWORD *)a1 + 324) = 0;
    uint64_t nn_option = nn_phrasing_checkIfActive(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (_DWORD *)a1 + 324);
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
    if (*((_DWORD *)a1 + 324) == 1)
    {
      uint64_t nn_option = nn_phrasing_Load(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t *)a1 + 163);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
    }
    if (*((_DWORD *)a1 + 28)) {
      pandpCrfDeinit((uint64_t)a1[21], (uint64_t)a1[3], (uint64_t)(a1 + 115));
    }
    unsigned int v5 = a1 + 182;
    if (*((_DWORD *)a1 + 364))
    {
      freeSpRules(*a1, (uint64_t)(a1 + 193));
      uint64_t v6 = (uint64_t)*a1;
      uint64_t v7 = (unsigned __int8 *)a1[191];
      *((void *)v7 + 138) = *a1;
      freePwInObjClose(v6, v7);
      freeSPPunc(*a1, (uint64_t)a1[208]);
      freeSPPunc(*a1, (uint64_t)a1[209]);
      uint64_t v8 = (uint64_t)a1[192];
      if (v8)
      {
        igtree_Deinit((uint64_t)*a1, v8);
        heap_Free((void *)(*a1)[1], (uint64_t)a1[192]);
        a1[192] = 0;
      }
      uint64_t v9 = (uint64_t)a1[206];
      if (v9)
      {
        igtree_Deinit_ReadOnly_DereferenceCnt((uint64_t)*a1, (uint64_t)a1[3], v9);
        a1[206] = 0;
      }
      if (*((_DWORD *)a1 + 420))
      {
        free_stress_model((uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[212], a1[211], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214]);
        *(_OWORD *)(a1 + 211) = 0u;
      }
      uint64_t nn_option = load_nn_option(a1, (int *)a1 + 364);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      if (*v5)
      {
        uint64_t nn_option = nnEmbeddingReLoad((uint64_t)a1[1], (uint64_t)a1[2], a1 + 183, (uint64_t *)a1 + 184, (uint64_t *)a1 + 186, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 380);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = nnModelReload((uint64_t)*a1, a1[1], (uint64_t)a1[2], (uint64_t)a1[3], a1[4], (uint64_t)a1[5], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (_DWORD *)a1 + 365, (uint64_t ***)a1 + 181);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = ruleNNInit(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)(a1 + 193), (uint64_t)(a1 + 195));
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t v10 = (unsigned __int8 *)heap_Calloc((void *)(*a1)[1], 1, 1776);
        a1[191] = v10;
        uint64_t nn_option = load_pw_cfg((uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], v10, (uint64_t)*a1);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = getphraseCfg((uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (unsigned int *)a1 + 414, (char **)a1 + 208, (char **)a1 + 209);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        int v26 = 0;
        uint64_t nn_option = load_pw_igtree_cfg((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], &v26);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        if (v26)
        {
          unsigned int v11 = (uint64_t *)(a1 + 192);
          if ((load_pw_igtree(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (char **)a1 + 192) & 0x80000000) != 0)
          {
            if (*v11)
            {
              igtree_Deinit((uint64_t)*a1, *v11);
              a1[192] = 0;
            }
          }
        }
        fe_phraseing_tryLoadingIGTree(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, a1 + 206);
      }
      else
      {
        uint64_t nn_option = releaseEmbedding((uint64_t)(a1 + 183), (uint64_t *)a1 + 184, a1 + 186, (_DWORD *)a1 + 380);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
        uint64_t nn_option = releaseFIModel((uint64_t)*a1, (uint64_t)a1[3], *((_DWORD *)a1 + 365), (uint64_t *)a1 + 181);
        if ((nn_option & 0x80000000) != 0) {
          return nn_option;
        }
      }
      a1[213] = (void *)safeh_GetNullHandle();
      a1[214] = v13;
      *((_DWORD *)a1 + 420) = 0;
      uint64_t nn_option = load_stress_models(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], a1[4], (uint64_t)a1[5], (_DWORD *)a1 + 420, a1 + 212, a1 + 211, (uint64_t)a1[183], a1 + 184, a1 + 213, (_WORD *)a1 + 860, (BOOL *)a1 + 421);
    }
    else
    {
      uint64_t nn_option = load_nn_option(a1, (int *)a1 + 364);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      if (!*v5) {
        goto LABEL_39;
      }
      uint64_t nn_option = fe_phrasing_InitNNPhrasing((uint64_t)a1);
      if ((nn_option & 0x80000000) != 0) {
        return nn_option;
      }
      fe_phraseing_tryLoadingIGTree(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, a1 + 206);
      a1[213] = (void *)safeh_GetNullHandle();
      a1[214] = v12;
      *((_DWORD *)a1 + 420) = 0;
      uint64_t nn_option = load_stress_models(a1[1], (uint64_t)a1[2], (uint64_t)*a1, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], a1[4], (uint64_t)a1[5], (_DWORD *)a1 + 420, a1 + 212, a1 + 211, (uint64_t)a1[183], a1 + 184, a1 + 213, (_WORD *)a1 + 860, (BOOL *)a1 + 421);
    }
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
LABEL_39:
    uint64_t v14 = a1 + 20;
    if (*((_DWORD *)a1 + 40) == 1)
    {
      pandpIgtreeDeinit((uint64_t)a1[21], (uint64_t)a1[3], a1 + 115);
      freePandPRules(a1 + 22);
    }
    cstdlib_memset(a1 + 22, 0, 0x298uLL);
    uint64_t nn_option = usePandP(*a1, (_DWORD *)a1 + 40);
    if ((nn_option & 0x80000000) != 0) {
      return nn_option;
    }
    if (*v14 != 1) {
      goto LABEL_48;
    }
    uint64_t PandPRules = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
    if ((PandPRules & 0x80000000) == 0)
    {
      uint64_t PandPRules = pandpIgtreeInit(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[3], a1 + 115);
      if ((PandPRules & 0x80000000) == 0)
      {
        a1[75] = 0;
        *((_DWORD *)a1 + 152) = 0;
        uint64_t PandPRules = nuance_pcre_ObjOpen(a1[1], (int)a1[2], (uint64_t)(a1 + 75));
        if ((PandPRules & 0x80000000) == 0)
        {
          uint64_t PandPRules = nuance_pcre_Init(a1[75], (int)a1[76], 0x1Eu, 50);
          if ((PandPRules & 0x80000000) == 0)
          {
            uint64_t v17 = *a1;
            uint64_t v16 = a1[1];
            a1[21] = *a1;
            uint64_t PandPRules = readPandPRules(v16, (uint64_t)a1[2], v17, (uint64_t)(a1 + 22));
            if ((PandPRules & 0x80000000) == 0)
            {
LABEL_48:
              uint64_t v18 = (int *)a1 + 29;
              int v19 = *((_DWORD *)a1 + 29);
              uint64_t nn_option = com_mosynt_UseMosynt((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 29);
              if ((nn_option & 0x80000000) != 0) {
                return nn_option;
              }
              int v20 = *v18;
              if (v19 == 1)
              {
                if (v20 == 1) {
                  goto LABEL_58;
                }
                if (!v20)
                {
                  uint64_t nn_option = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
                  if ((nn_option & 0x80000000) != 0) {
                    return nn_option;
                  }
                  if (a1[15])
                  {
                    uint64_t nn_option = kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
                    a1[15] = 0;
                    if ((nn_option & 0x80000000) != 0) {
                      return nn_option;
                    }
                  }
                  if (a1[16])
                  {
                    uint64_t nn_option = accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
                    a1[16] = 0;
                    if ((nn_option & 0x80000000) != 0) {
                      return nn_option;
                    }
                  }
                  if (*v18 == 1)
                  {
LABEL_58:
                    char __s1 = 0;
                    if (a1[15])
                    {
                      uint64_t nn_option = kbsymtab_UnloadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15);
                      a1[15] = 0;
                      if ((nn_option & 0x80000000) != 0) {
                        return nn_option;
                      }
                    }
                    if (a1[16])
                    {
                      uint64_t nn_option = accphr_UnloadData(a1[1], (int)a1[2], (uint64_t *)a1 + 16);
                      a1[16] = 0;
                      if ((nn_option & 0x80000000) != 0) {
                        return nn_option;
                      }
                    }
LABEL_66:
                    uint64_t nn_option = com_mosynt_GetCfgParamVal((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
                    if ((nn_option & 0x80000000) == 0)
                    {
                      BOOL v21 = cstdlib_strcmp(__s1, "yes") == 0;
                      uint64_t nn_option = kbsymtab_LoadData(a1[1], (int)a1[2], a1[4], (int)a1[5], (uint64_t *)a1 + 15, v21);
                      if ((nn_option & 0x80000000) == 0)
                      {
                        uint64_t nn_option = accphr_LoadData(a1[1], (uint64_t)a1[2], (uint64_t *)a1 + 16);
                        if ((nn_option & 0x80000000) == 0) {
                          goto LABEL_69;
                        }
                      }
                    }
                    return nn_option;
                  }
                }
              }
              else if (v20 == 1)
              {
                char __s1 = 0;
                goto LABEL_66;
              }
LABEL_69:
              uint64_t nn_option = com_IncludeCRF((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (BOOL *)a1 + 28);
              if ((nn_option & 0x80000000) == 0)
              {
                if (!*((_DWORD *)a1 + 28)
                  || (uint64_t v22 = (uint64_t)*a1,
                      a1[21] = *a1,
                      pandpCrfDeinit(v22, (uint64_t)a1[3], (uint64_t)(a1 + 115)),
                      uint64_t nn_option = pandpCrfInit(a1[1], (uint64_t)a1[2], a1[4], (uint64_t)a1[5], (uint64_t)*a1, (uint64_t)a1[3], (uint64_t)a1[13], v23, (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)(a1 + 115)), (nn_option & 0x80000000) == 0))
                {
                  if (*((_DWORD *)a1 + 320) == 1) {
                    ssftmap_ObjClose((uint64_t)a1[161]);
                  }
                  uint64_t nn_option = hlp_useNLUPOSMap((uint64_t)a1[11], (uint64_t)a1[12], (uint64_t)a1[13], (_DWORD *)a1 + 320);
                  if ((nn_option & 0x80000000) == 0)
                  {
                    if (*((_DWORD *)a1 + 320) != 1) {
                      return 0;
                    }
                    return hlp_loadNLUPOSMap((uint64_t)*a1, (uint64_t)a1[13], (uint64_t)a1[11], (uint64_t)a1[12], (uint64_t *)a1 + 161);
                  }
                }
              }
              return nn_option;
            }
          }
        }
      }
    }
    uint64_t v3 = PandPRules;
    *uint64_t v14 = 0;
  }
  return v3;
}

uint64_t load_nn_option(void *a1, int *a2)
{
  uint64_t v9 = 0;
  unsigned __int16 v8 = -1;
  char v7 = 0;
  *a2 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, unsigned __int16 *, char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", "statbnd_enable_nnets", &v9, &v8, &v7);
  if ((v3 & 0x80000000) == 0)
  {
    int v4 = v8;
    if (v8)
    {
      unsigned int v5 = *v9;
      v5[cstdlib_strlen(*v9) - 1] = 0;
      int v4 = cstdlib_strcmp(*v9, "yes") == 0;
    }
    *a2 = v4;
  }
  return v3;
}

uint64_t fe_phrasing_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62343, 1728);
  if ((result & 0x80000000) != 0) {
    return 2315264008;
  }
  if (*(_DWORD *)(a1 + 160))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 88);
    return setParams(v4, v7, v5, v6, a1 + 176);
  }
  return result;
}

uint64_t fe_phrasing_Process_PandP(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if ((safeh_HandleCheck(a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  *a5 = 1;
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, a1 + 168, *(uint64_t **)(a1 + 120), 0);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a1 + 848))
  {
    uint64_t ProsodicStructure = getProsodicStructure(a1 + 168);
    if ((ProsodicStructure & 0x80000000) == 0)
    {
      uint64_t ProsodicStructure = getProminence(a1 + 168, v11, v12, v13, v14, v15, v16, v17);
      if ((ProsodicStructure & 0x80000000) == 0) {
        uint64_t ProsodicStructure = updateLingdb(*(void *)(a1 + 56), a3, a4, a1 + 168);
      }
    }
    uint64_t SentenceData = ProsodicStructure;
  }
  freeSentenceData(a1 + 168);
  freeProsodicStructure((void *)(a1 + 168));
  return SentenceData;
}

uint64_t fe_phrasing_Process_Mosynt(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v31 = 0;
  uint64_t PhrasingOutput = 2315264010;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  char v33 = 0;
  __s = 0;
  int v32 = 0;
  *a5 = 1;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v32 + 2);
  if ((v10 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v32), 0, &v31) & 0x80000000) == 0&& v31 == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1[7] + 176))(a3, a4, HIWORD(v32), 0, &__s, &v32);
    if ((v10 & 0x80000000) == 0 && (unsigned __int16)v32 >= 2u)
    {
      unsigned __int16 v11 = cstdlib_strlen(__s);
      uint64_t v12 = (void *)heap_Alloc(*(void *)(*a1 + 8), v11 + 1);
      if (v12)
      {
        uint64_t v17 = (uint64_t)v12;
        cstdlib_memset(v12, 32, v11);
        *(unsigned char *)(v17 + v11) = 0;
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a3, a4, HIWORD(v32), 2, &v33, &v32);
        if ((v18 & 0x80000000) != 0)
        {
          uint64_t PhrasingOutput = v18;
          goto LABEL_29;
        }
        int v19 = (void *)heap_Alloc(*(void *)(*a1 + 8), 32);
        if (!v19)
        {
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v20, v21, v22, v23, v27);
          goto LABEL_29;
        }
        uint64_t v24 = (uint64_t)v19;
        cstdlib_memset(v19, 0, 0x20uLL);
        uint64_t started = mosynt_StartAccentPhrasing(a1[6], a1[11], a1[12], a1[13], (uint64_t *)a1[15], a1[16], v24);
        if ((started & 0x80000000) == 0)
        {
          uint64_t started = fe_phrasing_mosynt_SetupInput((uint64_t)a1, a3, a4, HIWORD(v32), v24);
          if ((started & 0x80000000) == 0)
          {
            mosynt_DoAccentPhrasing(a1[6], v24, v33);
            if ((started & 0x80000000) == 0)
            {
              uint64_t started = fe_phrasing_mosynt_SetProminenceValues((uint64_t)a1, a3, a4, HIWORD(v32), v24);
              if ((started & 0x80000000) == 0)
              {
                __int16 v30 = 0;
                uint64_t started = fe_phrasing_mosynt_DeleteAuxWords(a1, a3, a4, HIWORD(v32), v17, &v30);
                if ((started & 0x80000000) == 0)
                {
                  __int16 v28 = 0;
                  uint64_t started = fe_phrasing_mosynt_SplitWords(a1, a3, a4, HIWORD(v32), v17, &v28);
                  if ((started & 0x80000000) == 0)
                  {
                    __int16 v29 = 0;
                    uint64_t started = fe_phrasing_mosynt_MeltClitics(a1, a3, a4, HIWORD(v32), v17, &v29);
                    if ((started & 0x80000000) == 0)
                    {
                      uint64_t PhrasingOutput = fe_phrasing_mosynt_CreatePhrasingOutput((uint64_t)a1, a3, a4, HIWORD(v32), v24);
                      if ((PhrasingOutput & 0x80000000) != 0 || !v28 && !v30 && !v29) {
                        goto LABEL_23;
                      }
                      uint64_t started = fe_phrasing_mosynt_AdjustSentenceAndMarkers(a1, a3, a4, HIWORD(v32), v11, (unsigned __int16)(v28 + v11 - (v30 + v29)), v17);
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t PhrasingOutput = started;
LABEL_23:
        mosynt_FinishAccentPhrasing(a1[6], v24);
        heap_Free(*(void **)(*a1 + 8), v24);
LABEL_29:
        heap_Free(*(void **)(*a1 + 8), v17);
        return PhrasingOutput;
      }
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v13, v14, v15, v16, v27);
      return 2315264010;
    }
  }
  return v10;
}

uint64_t fe_phrasing_mosynt_SetupInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v24 = 0;
  memset(v23, 0, sizeof(v23));
  __int16 v21 = 0;
  uint64_t v18 = 0;
  __s = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(*(void *)(a1 + 56) + 176))(a2, a3, a4, 0, &v18, &v24);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, (char *)&v24 + 2);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v22 = 0;
      unsigned __int16 v11 = HIWORD(v24);
      if (HIWORD(v24))
      {
        unsigned __int16 v12 = 0;
        int v13 = 0;
        int v20 = 0;
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, _WORD *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v11, 0, 1, &v23[1], &v24);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (*(_DWORD *)&v23[1] > 0xAu || ((1 << SLOBYTE(v23[1])) & 0x610) == 0)
          {
            uint64_t v17 = HIWORD(v24);
          }
          else
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v24), 1, 1, v23, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v24), 2, 1, &v22, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(*(void *)(a1 + 56)
                                                                                                  + 176))(a2, a3, HIWORD(v24), 3, &__s, &v24);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (v12)
            {
              uint64_t result = hlp_ReadSildur(a1, a2, a3, v12, &v21, &v20);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              if (v20 && v21) {
                mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v13 + 1, 44);
              }
            }
            mosynt_InsertAccPhrTermWord(*(void *)(a1 + 48), a5, v23[0], v22 + 1, HIWORD(v24), __s);
            if (v22)
            {
              char v15 = *(unsigned char *)(v18 + v22 - 1);
              if (mosynt_IsPunctChar(*(void *)(a1 + 48), a5, v15)) {
                mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v22 + 1, v15);
              }
              int v13 = v22;
              if (v22)
              {
                if (!*(unsigned char *)(v18 + v22))
                {
                  BOOL IsPunctChar = mosynt_IsPunctChar(*(void *)(a1 + 48), a5, *(char *)(v18 + v22 - 1));
                  int v13 = v22;
                  if (!IsPunctChar)
                  {
                    mosynt_InsertAccPhrPunct(*(void *)(a1 + 48), a5, v22 + 1, 46);
                    int v13 = v22;
                  }
                }
              }
            }
            else
            {
              int v13 = 0;
            }
            uint64_t v17 = HIWORD(v24);
            unsigned __int16 v12 = HIWORD(v24);
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 120))(a2, a3, v17, (char *)&v24 + 2);
          if ((result & 0x80000000) == 0)
          {
            unsigned __int16 v11 = HIWORD(v24);
            if (HIWORD(v24)) {
              continue;
            }
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_mosynt_SetProminenceValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned __int16 v19 = 0;
  __int16 v18 = 0;
  int v16 = 0;
  unsigned int v17 = 0;
  __int16 v15 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56)
                                                                                             + 104))(a2, a3, 2, a4, &v19);
  if ((result & 0x80000000) == 0)
  {
    for (unsigned __int16 i = v19; v19; unsigned __int16 i = v19)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, i, 0, 1, &v17, &v18);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (v17 <= 0xA && ((1 << v17) & 0x610) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v19, 1, 1, (char *)&v16 + 2, &v18);
        if ((result & 0x80000000) != 0) {
          break;
        }
        uint64_t result = mosynt_GetWordProminence(*(void *)(a1 + 48), a5, HIWORD(v16), &v16);
        if ((result & 0x80000000) != 0) {
          break;
        }
        LH_itoa((unsigned __int16)v16, __s, 0xAu);
        unsigned __int16 v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(*(void *)(a1 + 56) + 160);
        uint64_t v13 = v19;
        __int16 v14 = cstdlib_strlen(__s);
        uint64_t result = v12(a2, a3, v13, 13, (unsigned __int16)(v14 + 1), __s, &v15);
        if ((result & 0x80000000) != 0) {
          break;
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a2, a3, v19, &v19);
      if ((result & 0x80000000) != 0) {
        break;
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_mosynt_DeleteAuxWords(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  int v41 = 0;
  __int16 v40 = 0;
  int v38 = 0;
  unsigned int v39 = 0;
  uint64_t v36 = 0;
  char __s1 = 0;
  int v35 = 0;
  *a6 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v36, &v41);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v41 + 2);
  if ((v13 & 0x80000000) == 0 && HIWORD(v41))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
    if ((v12 & 0x80000000) == 0)
    {
      __int16 v14 = 0;
      while (1)
      {
        if (v39 > 0xA || ((1 << v39) & 0x610) == 0) {
          goto LABEL_18;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v41), 1, 1, (char *)&v38 + 2, &v41);
        if ((v16 & 0x80000000) != 0
          || (uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v41), 2, 1, &v38, &v41), (v16 & 0x80000000) != 0)|| (uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v41), 3, &__s1, &v41), (v16 & 0x80000000) != 0))
        {
LABEL_37:
          uint64_t v13 = v16;
LABEL_38:
          if (!v14) {
            return v13;
          }
LABEL_39:
          heap_Free(*(void **)(*a1 + 8), (uint64_t)v14);
          return v13;
        }
        if (!cstdlib_strstr(__s1, "{DEL}")) {
          goto LABEL_18;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 312))(a2, a3, HIWORD(v38), &v35);
        if ((v16 & 0x80000000) != 0) {
          goto LABEL_37;
        }
        if (v35) {
          break;
        }
        uint64_t v27 = HIWORD(v38);
        uint64_t v28 = (unsigned __int16)v38;
        if (HIWORD(v38) < (unsigned __int16)v38)
        {
          __int16 v29 = (unsigned char *)(a5 + HIWORD(v38));
          unint64_t v30 = (unsigned __int16)v38 - (unint64_t)HIWORD(v38);
          do
          {
            *v29++ = 100;
            ++*a6;
            --v30;
          }
          while (v30);
        }
        uint64_t v26 = HIWORD(v41);
        int v31 = *(unsigned __int8 *)(v36 + v28);
        if (v31 != 32 && v31 != 95)
        {
          if (!v27) {
            goto LABEL_19;
          }
          int v32 = *(unsigned __int8 *)(v36 + (v27 - 1));
          if (v32 != 95 && v32 != 32) {
            goto LABEL_19;
          }
          uint64_t v28 = v27 - 1;
        }
        *(unsigned char *)(a5 + v28) = 100;
        ++*a6;
LABEL_19:
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, HIWORD(v41), (char *)&v41 + 2);
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_38;
        }
        if (v26)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v26);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_38;
          }
        }
        if (!HIWORD(v41)) {
          goto LABEL_38;
        }
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
        if ((v16 & 0x80000000) != 0) {
          goto LABEL_37;
        }
      }
      unsigned int v17 = (char *)heap_Alloc(*(void *)(*a1 + 8), 5000);
      if (!v17)
      {
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v34);
        return 2315264010;
      }
      __int16 v14 = v17;
      cstdlib_strcpy(v17, __s1);
      mosynt_RemoveAllSubstrOcc(v14, "{DEL}");
      unsigned __int16 v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1[7] + 160);
      uint64_t v23 = HIWORD(v41);
      __int16 v24 = cstdlib_strlen(v14);
      uint64_t v25 = v22(a2, a3, v23, 3, (unsigned __int16)(v24 + 1), v14, &v40);
      if ((v25 & 0x80000000) != 0)
      {
        uint64_t v13 = v25;
        goto LABEL_39;
      }
LABEL_18:
      uint64_t v26 = 0;
      goto LABEL_19;
    }
    return v12;
  }
  return v13;
}

uint64_t fe_phrasing_mosynt_SplitWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  uint64_t v6 = a6;
  int v101 = 0;
  __int16 v100 = 0;
  int v98 = 0;
  unsigned int v99 = 0;
  uint64_t v97 = 0;
  uint64_t v96 = 0;
  unsigned __int16 v95 = 0;
  unsigned int v93 = 0;
  int v94 = 0;
  int v91 = 0;
  int v92 = 0;
  __int16 v90 = 0;
  __s = 0;
  int v89 = 0;
  *a6 = 0;
  if ((com_crf_GetCfgParamVal(a1[11], a1[12], a1[13], (uint64_t)"fephrase_max_utf8_sym", "5", &v89) & 0x80000000) != 0) {
    uint64_t v12 = 5;
  }
  else {
    uint64_t v12 = cstdlib_atoi((unsigned __int8 *)v89);
  }
  uint64_t v13 = heap_Alloc(*(void *)(*a1 + 8), v12);
  uint64_t v18 = *a1;
  if (v13)
  {
    uint64_t v19 = (char *)v13;
    uint64_t v20 = heap_Alloc(*(void *)(v18 + 8), 5000);
    if (!v20)
    {
      uint64_t v27 = 2315264010;
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v21, v22, v23, v24, v75);
LABEL_108:
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v19);
      return v27;
    }
    uint64_t v25 = (const char *)v20;
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v96, &v101);
    if ((v26 & 0x80000000) == 0)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v101 + 2);
      if ((v27 & 0x80000000) != 0) {
        goto LABEL_107;
      }
      unsigned __int16 v28 = HIWORD(v101);
      if (!HIWORD(v101)) {
        goto LABEL_107;
      }
      uint64_t v76 = a5;
      while (1)
      {
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[7] + 168))(a2, a3, v28, 0, 1, &v99, &v101);
        if ((v26 & 0x80000000) != 0) {
          break;
        }
        if (v99 <= 0xA && ((1 << v99) & 0x610) != 0)
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1[7] + 168))(a2, a3, HIWORD(v101), 1, 1, (char *)&v98 + 2, &v101);
          if ((v26 & 0x80000000) != 0) {
            break;
          }
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a2, a3, HIWORD(v101), 2, 1, &v98, &v101);
          if ((v26 & 0x80000000) != 0) {
            break;
          }
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v101), 3, &v97, &v101);
          if ((v26 & 0x80000000) != 0) {
            break;
          }
          int v91 = 0;
          unint64_t v30 = (unsigned __int8 *)cstdlib_strstr(v97, "{SEP");
          if (v30)
          {
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 312))(a2, a3, HIWORD(v98), &v91);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            long long v79 = v25;
            unsigned int v31 = v30[4] - 48;
            if (v31 <= 9 && v30[5] == 125 && v30[6])
            {
              unsigned int v32 = (unsigned __int16)((_WORD)v30 - (_WORD)v97);
            }
            else
            {
              LOWORD(v31) = 0;
              unsigned int v32 = 0;
            }
            unsigned int v33 = HIWORD(v98);
            uint64_t UTF8Char = utf8_getUTF8Char(v96, HIWORD(v98), v19);
            if ((UTF8Char & 0x80000000) != 0)
            {
LABEL_106:
              uint64_t v27 = UTF8Char;
              uint64_t v25 = v79;
              goto LABEL_107;
            }
            unsigned int v81 = v32;
            long long v77 = v6;
            if (v33 >= (unsigned __int16)v98)
            {
              unsigned __int16 v35 = 0;
              char v37 = 0;
              __int16 v38 = v33;
            }
            else
            {
              unsigned __int16 v35 = 0;
              do
              {
                if (*v19) {
                  BOOL v36 = v35 >= (unsigned __int16)v31;
                }
                else {
                  BOOL v36 = 1;
                }
                char v37 = v36;
                if (v36) {
                  break;
                }
                v33 += cstdlib_strlen(v19);
                uint64_t UTF8Char = utf8_getUTF8Char(v96, (unsigned __int16)v33, v19);
                if ((UTF8Char & 0x80000000) != 0) {
                  goto LABEL_106;
                }
                ++v35;
                while (!cstdlib_strcmp(v19, "-"))
                {
                  v33 += cstdlib_strlen(v19);
                  uint64_t UTF8Char = utf8_getUTF8Char(v96, (unsigned __int16)v33, v19);
                  if ((UTF8Char & 0x80000000) != 0) {
                    goto LABEL_106;
                  }
                }
              }
              while ((unsigned __int16)v98 > (unsigned __int16)v33);
              __int16 v38 = v33;
            }
            if (v35 == (unsigned __int16)v31)
            {
              char v41 = v37 ^ 1;
              if (HIWORD(v98) >= (unsigned __int16)v33) {
                char v41 = 1;
              }
              __int16 v42 = v38 - HIWORD(v98);
              if (v41) {
                __int16 v39 = 0;
              }
              else {
                __int16 v39 = v42;
              }
            }
            else
            {
              __int16 v39 = 0;
            }
            uint64_t v6 = v77;
            uint64_t v25 = v79;
            unsigned int v40 = v81;
          }
          else
          {
            __int16 v39 = 0;
            unsigned int v40 = 0;
          }
          if (!v91 && v39 && v40)
          {
            uint64_t v86 = 0;
            unsigned __int16 v87 = 0;
            unsigned __int16 v85 = 0;
            BOOL v43 = (*(int (**)(uint64_t, uint64_t, void, uint64_t, int *))(a1[7] + 184))(a2, a3, HIWORD(v101), 14, &v101) >= 0&& (unsigned __int16)v101 == 1;
            int v44 = v43;
            if (v43)
            {
              uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v101), 14, &v87, &v101);
              if ((v26 & 0x80000000) != 0) {
                break;
              }
              hlp_NLUStrFind(v87, "POS", &v86, &v85);
            }
            unsigned int v82 = v40;
            HIWORD(v92) = HIWORD(v101);
            unsigned __int16 v45 = HIWORD(v101);
            LOWORD(v92) = HIWORD(v98);
            if (HIWORD(v101))
            {
              while (1)
              {
                unsigned __int16 v46 = v45;
                uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, v45, (char *)&v92 + 2);
                if ((v26 & 0x80000000) != 0) {
                  goto LABEL_105;
                }
                if (!HIWORD(v92)) {
                  goto LABEL_76;
                }
                uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
                if ((v26 & 0x80000000) != 0) {
                  goto LABEL_105;
                }
                unsigned __int16 v45 = HIWORD(v92);
                if (!HIWORD(v92) || (unsigned __int16)v92 != HIWORD(v98)) {
                  goto LABEL_76;
                }
              }
            }
            unsigned __int16 v46 = 0;
LABEL_76:
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 80))(a2, a3, v46, &v95);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            hlp_CopyWordRec((uint64_t)a1, a2, a3, HIWORD(v101), v95);
            unsigned int v51 = (unsigned __int16)v98;
            LOWORD(v98) = HIWORD(v98) + v39;
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v101), 2, 1, &v98, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 160))(a2, a3, v95, 1, 1, &v98, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            unsigned int v80 = v51;
            if (v85) {
              int v52 = v44;
            }
            else {
              int v52 = 0;
            }
            unsigned int v53 = v82;
            if (v52 == 1)
            {
              *(void *)int v83 = 0;
              *(void *)unsigned __int16 v84 = 0;
              uint64_t v26 = hlp_splitNLURangeTags(a1, v87, (unsigned __int8 **)v84, (unsigned __int8 **)v83);
              if ((v26 & 0x80000000) != 0) {
                break;
              }
              uint64_t SubPosForSEPX = hlp_GetSubPosForSEPX((uint64_t)a1, HIWORD(v98), (unsigned __int16)v98, v96, v86, v85, 0, &__s);
              uint64_t v55 = __s;
              if ((SubPosForSEPX & 0x80000000) != 0) {
                goto LABEL_110;
              }
              uint64_t v56 = *(const char **)v84;
              hlp_NLUStrSet(*(char **)v84, "POS", __s);
              uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160);
              uint64_t v58 = HIWORD(v101);
              __int16 v59 = cstdlib_strlen(v56);
              uint64_t v78 = (uint64_t)v56;
              uint64_t SubPosForSEPX = v57(a2, a3, v58, 14, (unsigned __int16)(v59 + 1), v56, &v100);
              if ((SubPosForSEPX & 0x80000000) != 0) {
                goto LABEL_110;
              }
              if (v55)
              {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v55);
                __s = 0;
              }
              uint64_t SubPosForSEPX = hlp_GetSubPosForSEPX((uint64_t)a1, (unsigned __int16)v98, v80, v96, v86, v85, 1, &__s);
              uint64_t v55 = __s;
              if ((SubPosForSEPX & 0x80000000) != 0
                || (uint64_t v60 = *(const char **)v83,
                    hlp_NLUStrSet(*(char **)v83, "POS", __s),
                    unsigned int v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160),
                    uint64_t v62 = v95,
                    __int16 v63 = cstdlib_strlen(v60),
                    uint64_t SubPosForSEPX = v61(a2, a3, v62, 14, (unsigned __int16)(v63 + 1), v60, &v100),
                    (SubPosForSEPX & 0x80000000) != 0))
              {
LABEL_110:
                uint64_t v27 = SubPosForSEPX;
                if (v55) {
                  heap_Free(*(void **)(*a1 + 8), (uint64_t)v55);
                }
                goto LABEL_107;
              }
              if (v55)
              {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v55);
                __s = 0;
              }
              unsigned int v53 = v82;
              if (v78) {
                heap_Free(*(void **)(*a1 + 8), v78);
              }
              if (v60) {
                heap_Free(*(void **)(*a1 + 8), (uint64_t)v60);
              }
            }
            unsigned int v93 = 0;
            mosynt_App((uint64_t)v25, 5000, &v93, v97, &v94);
            v25[v53] = 0;
            unsigned int v64 = v53;
            uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160);
            uint64_t v66 = HIWORD(v101);
            __int16 v67 = cstdlib_strlen(v25);
            uint64_t v26 = v65(a2, a3, v66, 3, (unsigned __int16)(v67 + 1), v25, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            uint64_t v68 = v6;
            uint64_t v69 = v97;
            uint64_t v70 = &v69[v64 + 2 + cstdlib_strlen("{SEP")];
            uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160);
            uint64_t v72 = v95;
            __int16 v73 = cstdlib_strlen(v70);
            uint64_t v26 = v71(a2, a3, v72, 3, (unsigned __int16)(v73 + 1), v70, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a2, a3, HIWORD(v101), 8, 1, &v90, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
            *(unsigned char *)(v76 + (unsigned __int16)v98) = 105;
            uint64_t v6 = v68;
            ++*v68;
          }
          else if (v30)
          {
            unsigned int v93 = 0;
            mosynt_App((uint64_t)v25, 5000, &v93, v97, &v94);
            unsigned int v93 = v40;
            size_t v47 = cstdlib_strlen("{SEP");
            mosynt_App((uint64_t)v25, 5000, &v93, &v30[v47 + 2], &v94);
            int v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160);
            uint64_t v49 = HIWORD(v101);
            __int16 v50 = cstdlib_strlen(v25);
            uint64_t v26 = v48(a2, a3, v49, 3, (unsigned __int16)(v50 + 1), v25, &v100);
            if ((v26 & 0x80000000) != 0) {
              break;
            }
          }
        }
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a2, a3, HIWORD(v101), (char *)&v101 + 2);
        if ((v27 & 0x80000000) == 0)
        {
          unsigned __int16 v28 = HIWORD(v101);
          if (HIWORD(v101)) {
            continue;
          }
        }
        goto LABEL_107;
      }
    }
LABEL_105:
    uint64_t v27 = v26;
LABEL_107:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v25);
    goto LABEL_108;
  }
  uint64_t v27 = 2315264010;
  log_OutPublic(*(void *)(v18 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v75);
  return v27;
}

uint64_t fe_phrasing_mosynt_MeltClitics(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6)
{
  int v52 = 0;
  __int16 v51 = 0;
  unsigned int v50 = 0;
  unsigned __int16 v49 = 0;
  unsigned __int16 v48 = 0;
  unsigned __int16 v45 = 0;
  char __s1 = 0;
  uint64_t v44 = 0;
  int v43 = 0;
  uint64_t v42 = 0;
  *a6 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, int *))(a1[7] + 176))(a2, a3, a4, 0, &v42, &v52);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v40 = a5;
  uint64_t v13 = heap_Alloc(*(void *)(*a1 + 8), 5000);
  if (v13)
  {
    uint64_t v18 = (char *)v13;
    __int16 v47 = 0;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v52 + 2);
    if ((v19 & 0x80000000) == 0)
    {
      __int16 v38 = a6;
      if (HIWORD(v52))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
        if ((v20 & 0x80000000) == 0)
        {
          uint64_t v41 = 0;
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          do
          {
            if (v50 > 0xA || ((1 << v50) & 0x610) == 0)
            {
              uint64_t v28 = 0;
              uint64_t v29 = HIWORD(v52);
              uint64_t v26 = v22;
              uint64_t v27 = v21;
            }
            else
            {
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a2, a3, HIWORD(v52), 1, 1, &v49, &v52);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a2, a3, HIWORD(v52), 2, 1, &v48, &v52);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a2, a3, HIWORD(v52), 3, &__s1, &v52);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1[7] + 312))(a2, a3, v49, &v44);
              if ((v20 & 0x80000000) != 0) {
                break;
              }
              if (cstdlib_strstr(__s1, "{"))
              {
                BOOL v24 = cstdlib_strstr(__s1, "{LPC}") != 0;
                BOOL v25 = cstdlib_strstr(__s1, "{LEC}") != 0;
                uint64_t v26 = cstdlib_strstr(__s1, "{RPC}") != 0;
                uint64_t v27 = cstdlib_strstr(__s1, "{REC}") != 0;
                if (cstdlib_strstr(__s1, "{LPCC}") && v49 && *(unsigned char *)(v42 + v49 - 1) == 95) {
                  BOOL v24 = 1;
                }
                if (cstdlib_strstr(__s1, "{LECC}") && v49 && *(unsigned char *)(v42 + v49 - 1) == 95) {
                  BOOL v25 = 1;
                }
                if (cstdlib_strstr(__s1, "{RPCC}"))
                {
                  if (*(unsigned char *)(v42 + v48) == 95) {
                    uint64_t v26 = 1;
                  }
                  else {
                    uint64_t v26 = v26;
                  }
                }
                if (cstdlib_strstr(__s1, "{RECC}"))
                {
                  if (*(unsigned char *)(v42 + v48) == 95) {
                    uint64_t v27 = 1;
                  }
                  else {
                    uint64_t v27 = v27;
                  }
                }
              }
              else
              {
                BOOL v24 = 0;
                BOOL v25 = 0;
                uint64_t v26 = 0;
                uint64_t v27 = 0;
              }
              BOOL v39 = v25;
              if (WORD2(v41) && (int v30 = v24 | v22, v30 | v25 | v21))
              {
                uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[7] + 168))(a2, a3, WORD2(v41), 1, 1, &v47, &v52);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned char **, int *))(a1[7] + 176))(a2, a3, WORD2(v41), 3, &v45, &v52);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                if (v30 && !v41 && !v44) {
                  hlp_CopyWordRec((uint64_t)a1, a2, a3, HIWORD(v52), WORD2(v41));
                }
                HIDWORD(v44) = 0;
                mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v44 + 1, v45, &v43);
                if (!(v41 | v44)) {
                  mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v44 + 1, __s1, &v43);
                }
                mosynt_RemoveAllSubstrOcc(v18, "{LEC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LPC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RPC}");
                mosynt_RemoveAllSubstrOcc(v18, "{REC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LECC}");
                mosynt_RemoveAllSubstrOcc(v18, "{LPCC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RPCC}");
                mosynt_RemoveAllSubstrOcc(v18, "{RECC}");
                unsigned int v31 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, __int16 *))(a1[7] + 160);
                __int16 v32 = cstdlib_strlen(v18);
                uint64_t v20 = v31(a2, a3, WORD2(v41), 3, (unsigned __int16)(v32 + 1), v18, &v51);
                if ((v20 & 0x80000000) != 0) {
                  break;
                }
                if (v41 | v44)
                {
                  uint64_t v28 = 0;
                }
                else
                {
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(a1[7] + 160))(a2, a3, WORD2(v41), 1, 1, &v47, &v51);
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[7] + 160))(a2, a3, WORD2(v41), 2, 1, &v48, &v51);
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  *(unsigned char *)(v49 + v40 - 1) = 100;
                  ++*v38;
                  uint64_t v28 = HIWORD(v52);
                }
              }
              else
              {
                uint64_t v28 = 0;
              }
              uint64_t v29 = v28;
              if (v28 != HIWORD(v52))
              {
                if ((v39 || v24) | v26 | v27)
                {
                  HIDWORD(v44) = 0;
                  mosynt_App((uint64_t)v18, 5000, (unsigned int *)&v44 + 1, __s1, &v43);
                  mosynt_RemoveAllSubstrOcc(v18, "{LEC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LPC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RPC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{REC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LECC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{LPCC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RPCC}");
                  mosynt_RemoveAllSubstrOcc(v18, "{RECC}");
                  unsigned int v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a1[7] + 160);
                  uint64_t v34 = HIWORD(v52);
                  __int16 v35 = cstdlib_strlen(v18);
                  uint64_t v20 = v33(a2, a3, v34, 3, (unsigned __int16)(v35 + 1), v18, &v51);
                  if ((v20 & 0x80000000) != 0) {
                    break;
                  }
                  uint64_t v29 = HIWORD(v52);
                  WORD2(v41) = HIWORD(v52);
                }
                else
                {
                  uint64_t v29 = HIWORD(v52);
                  WORD2(v41) = HIWORD(v52);
                }
              }
              LODWORD(v41) = v44;
            }
            uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(a1[7] + 120))(a2, a3, v29, (char *)&v52 + 2);
            if ((v19 & 0x80000000) != 0) {
              goto LABEL_63;
            }
            if (v28)
            {
              uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v28);
              if ((v19 & 0x80000000) != 0) {
                goto LABEL_63;
              }
            }
            if (!HIWORD(v52)) {
              goto LABEL_63;
            }
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
            uint64_t v21 = v27;
            uint64_t v22 = v26;
          }
          while ((v20 & 0x80000000) == 0);
        }
        uint64_t v19 = v20;
      }
    }
LABEL_63:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v18);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v37);
    return 2315264010;
  }
  return v19;
}

uint64_t fe_phrasing_mosynt_CreatePhrasingOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v27 = 0;
  int v28 = 0;
  int v24 = 0;
  int v25 = 0;
  __s = 0;
  uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char **, int *))(*(void *)(a1 + 56)
                                                                                            + 176))(a2, a3, a4, 0, &__s, &v28);
  if ((PhraseInfo & 0x80000000) != 0) {
    return PhraseInfo;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, (char *)&v28 + 2);
  if ((v11 & 0x80000000) == 0)
  {
    int v26 = 0;
    cstdlib_strcpy(__dst, "");
    unsigned __int16 v23 = 0;
    unsigned __int16 v12 = HIWORD(v28);
    if (HIWORD(v28))
    {
      unsigned __int16 v13 = 0;
      unsigned __int16 v14 = 0;
      while (1)
      {
        uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v12, 0, 1, &v27, &v28);
        if ((PhraseInfo & 0x80000000) != 0) {
          return PhraseInfo;
        }
        if (v27 <= 0xA && ((1 << v27) & 0x610) != 0)
        {
          uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v28), 1, 1, (char *)&v26 + 2, &v28);
          if ((PhraseInfo & 0x80000000) != 0) {
            return PhraseInfo;
          }
          uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v28), 2, 1, &v26, &v28);
          if ((PhraseInfo & 0x80000000) != 0) {
            return PhraseInfo;
          }
          unsigned __int16 v23 = 0;
          if (v14)
          {
            uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 168))(a2, a3, v14, 2, 1, &v23, &v28);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
          }
          HIWORD(v25) = 0;
          cstdlib_strcpy(__dst, "");
          unsigned __int16 v16 = v23;
          if (v23 <= HIWORD(v26))
          {
            do
            {
              uint64_t PhraseInfo = mosynt_GetPhraseInfo(*(void *)(a1 + 48), a5, v16, &v25, __s1, 10);
              if ((PhraseInfo & 0x80000000) != 0) {
                return PhraseInfo;
              }
              if (cstdlib_strcmp(__s1, ""))
              {
                cstdlib_strcpy(__dst, __s1);
                if ((unsigned __int16)(HIWORD(v25) - 1) >= (unsigned __int16)v25) {
                  HIWORD(v25) = v25;
                }
              }
            }
            while (HIWORD(v26) >= ++v16);
          }
          if (cstdlib_strcmp(__dst, ""))
          {
            if (v13)
            {
              uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v13, 2, 1, (char *)&v26 + 2, &v24);
              if ((PhraseInfo & 0x80000000) != 0) {
                return PhraseInfo;
              }
            }
            uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 88))(a2, a3, HIWORD(v28), (char *)&v24 + 2);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
            unsigned __int16 v13 = HIWORD(v24);
            unsigned int v27 = 15;
            uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v24), 0, 1, &v27, &v24);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
            uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v24), 1, 1, (char *)&v26 + 2, &v24);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
            uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160);
            uint64_t v18 = HIWORD(v24);
            __int16 v19 = cstdlib_strlen(__dst);
            uint64_t PhraseInfo = v17(a2, a3, v18, 4, (unsigned __int16)(v19 + 1), __dst, &v24);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
            uint64_t PhraseInfo = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v24), 7, 1, (char *)&v25 + 2, &v24);
            if ((PhraseInfo & 0x80000000) != 0) {
              return PhraseInfo;
            }
          }
          unsigned __int16 v14 = HIWORD(v28);
        }
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3);
        if ((v11 & 0x80000000) != 0) {
          return v11;
        }
        unsigned __int16 v12 = HIWORD(v28);
        if (!HIWORD(v28))
        {
          if (v13)
          {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v13, 2, 1, &v26, &v24);
            if ((v11 & 0x80000000) != 0) {
              return v11;
            }
          }
          break;
        }
      }
    }
    if (!cstdlib_strcmp(__dst, "W") || !cstdlib_strcmp(__dst, "AF"))
    {
      uint64_t v20 = cstdlib_strrchr(__s, 63);
      if (v20 && v20 != __s && *(v20 - 1) != 32) {
        *uint64_t v20 = 46;
      }
    }
  }
  return v11;
}

uint64_t fe_phrasing_mosynt_AdjustSentenceAndMarkers(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  uint64_t v51 = 0;
  int v49 = 0;
  int v50 = 0;
  unsigned __int16 v48 = 0;
  uint64_t v47 = 0;
  unsigned __int16 v46 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t *, char *))(a1[7] + 176))(a2, a3, a4, 0, &v51, (char *)&v50 + 2);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(a1[7] + 176))(a2, a3, a4, 1, &v47, &v46);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  int v45 = a6;
  int v15 = *(_DWORD *)(v47 + 12);
  uint64_t v16 = heap_Alloc(*(void *)(*a1 + 8), 2 * a5 + 2);
  uint64_t v21 = *a1;
  if (!v16)
  {
    uint64_t v41 = 2315264010;
    log_OutPublic(*(void *)(v21 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v17, v18, v19, v20, v44);
    return v41;
  }
  uint64_t v22 = v16;
  uint64_t v27 = heap_Alloc(*(void *)(v21 + 8), 2 * a5 + 2);
  uint64_t v28 = *a1;
  if (v27)
  {
    unsigned int v44 = a5;
    uint64_t v29 = (const char *)heap_Alloc(*(void *)(v28 + 8), (v45 + 1));
    if (v29)
    {
      uint64_t v30 = (uint64_t)v29;
      LOWORD(v31) = v44;
      if (v44)
      {
        uint64_t v32 = 0;
        int v31 = 0;
        do
        {
          int v33 = *(unsigned __int8 *)(a7 + v32);
          if (v33 == 105)
          {
            v29[(unsigned __int16)v31] = 32;
            *(_WORD *)(v22 + 2 * v32) = v31 + 1;
            *(_WORD *)(v27 + 2 * v32) = v31;
            v29[(unsigned __int16)(v31 + 1)] = *(unsigned char *)(v51 + v32);
            v31 += 2;
          }
          else
          {
            *(_WORD *)(v22 + 2 * v32) = v31;
            *(_WORD *)(v27 + 2 * v32) = v31;
            if (v33 != 100) {
              v29[(unsigned __int16)v31++] = *(unsigned char *)(v51 + v32);
            }
          }
          ++v32;
        }
        while (v44 != v32);
      }
      v29[(unsigned __int16)v31] = 0;
      *(_WORD *)(v22 + 2 * v44) = v31;
      *(_WORD *)(v27 + 2 * v44) = v31;
      uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, int *))(a1[7] + 160);
      __int16 v35 = cstdlib_strlen(v29);
      uint64_t v36 = v34(a2, a3, a4, 0, (unsigned __int16)(v35 + 1), v30, &v50);
      if ((v36 & 0x80000000) != 0)
      {
LABEL_39:
        uint64_t v41 = v36;
      }
      else
      {
        uint64_t v37 = v46;
        uint64_t v38 = v47;
        if (v46)
        {
          BOOL v39 = (_DWORD *)(v47 + 12);
          do
          {
            _DWORD *v39 = v15 + *(unsigned __int16 *)(v22 + 2 * (unsigned __int16)(*v39 - v15));
            v39 += 8;
            --v37;
          }
          while (v37);
        }
        *(_DWORD *)(v38 + 16) = v45;
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[7] + 104))(a2, a3, 2, a4, (char *)&v49 + 2);
LABEL_19:
        uint64_t v41 = v40;
        if ((v40 & 0x80000000) == 0)
        {
          while (HIWORD(v49))
          {
            uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a2, a3);
            if ((v36 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a2, a3, HIWORD(v49), 2, 1, &v48, (char *)&v50 + 2);
            if ((v36 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            LOWORD(v49) = *(_WORD *)(v22 + 2 * (unsigned __int16)v49);
            uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 160))(a2, a3, HIWORD(v49), 1, 1, &v49, &v50);
            if ((v36 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            unsigned __int16 v48 = v48 <= v44 ? *(_WORD *)(v27 + 2 * v48) : v44;
            uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 160))(a2, a3, HIWORD(v49), 2, 1, &v48, &v50);
            if ((v36 & 0x80000000) != 0) {
              goto LABEL_39;
            }
            if (v48 == (unsigned __int16)v49) {
              uint64_t v42 = HIWORD(v49);
            }
            else {
              uint64_t v42 = 0;
            }
            uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 120))(a2, a3);
            if ((v41 & 0x80000000) != 0) {
              goto LABEL_40;
            }
            if (v42)
            {
              uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v42);
              goto LABEL_19;
            }
          }
        }
      }
      goto LABEL_40;
    }
    uint64_t v28 = *a1;
  }
  uint64_t v41 = 2315264010;
  log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v23, v24, v25, v26, v44);
  uint64_t v30 = 0;
LABEL_40:
  heap_Free(*(void **)(*a1 + 8), v22);
  if (v27) {
    heap_Free(*(void **)(*a1 + 8), v27);
  }
  if (v30) {
    heap_Free(*(void **)(*a1 + 8), v30);
  }
  return v41;
}

uint64_t fe_phrasing_Process_NN_Phrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7)
{
  *a5 = 1;
  unsigned __int16 v12 = (void *)(a1 + 168);
  uint64_t v13 = a1 + 176;
  if (!*(void *)(a1 + 176))
  {
    *(_WORD *)(a1 + 248) = 2;
    *(_DWORD *)(a1 + 192) = 0x10000;
  }
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, (uint64_t)v12, *(uint64_t **)(a1 + 120), 1);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a1 + 848)) {
    uint64_t SentenceData = nn_phrasing_ProcessSent(*(uint64_t **)a1, *(void *)(a1 + 56), a3, a4, a1 + 840, v13, a1 + 1304, a6, a7);
  }
  freeSentenceData((uint64_t)v12);
  freeProsodicStructure(v12);
  return SentenceData;
}

uint64_t fe_phrasing_Process_CRFPhrasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v25 = 0;
  int v26 = 0;
  int v28 = 0;
  *a5 = 1;
  unint64_t v8 = a1 + 168;
  if (!*(void *)(a1 + 176))
  {
    *(_WORD *)(a1 + 248) = 2;
    *(_DWORD *)(a1 + 192) = 0x10000;
  }
  __s = 0;
  *(void *)(a1 + 176) = 0;
  uint64_t SentenceData = getSentenceData(*(void *)a1, *(void *)(a1 + 48), *(void *)(a1 + 56), a3, a4, v8, *(uint64_t **)(a1 + 120), 0);
  if ((SentenceData & 0x80000000) != 0) {
    goto LABEL_20;
  }
  uint64_t v15 = doesCustermizedFE(*(void *)a1, *(void *)(a1 + 56), a3, a4, v8, &v28);
  if ((v15 & 0x80000000) != 0 || !*(_WORD *)(a1 + 848)) {
    goto LABEL_21;
  }
  if (!v28
    && (uint64_t SentenceData = crfWeakPhrasing(*(void *)(a1 + 104), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)a1, 0, (unsigned __int16 *)(a1 + 840), 0, a1 + 920), (SentenceData & 0x80000000) != 0)|| (uint64_t SentenceData = puncPhrasing(*(void *)a1, a1 + 840, a1 + 920, v10, v11, v12, v13, v14), (SentenceData & 0x80000000) != 0)|| (*(void *)(a1 + 176) = *(void *)a1, uint64_t SentenceData = updateLingdbCrfPhrasing(*(void *)(a1 + 56), a3, a4, v8), (SentenceData & 0x80000000) != 0))
  {
LABEL_20:
    uint64_t v15 = SentenceData;
    goto LABEL_21;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 1, 0, &v26);
  if ((v15 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a3, a4, (unsigned __int16)v26, 0, (char *)&v25 + 2) & 0x80000000) == 0&& HIWORD(v25) == 1)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v26, 0, &__s, &v25);
    if ((v15 & 0x80000000) == 0 && (unsigned __int16)v25 >= 2u)
    {
      unsigned __int16 v16 = cstdlib_strlen(__s);
      uint64_t v17 = (void *)heap_Alloc(*(void *)(*(void *)a1 + 8), v16 + 1);
      if (v17)
      {
        uint64_t v22 = (uint64_t)v17;
        cstdlib_memset(v17, 32, v16);
        *(unsigned char *)(v22 + v16) = 0;
        uint64_t v15 = fe_phrasing_mosynt_SplitWords((uint64_t *)a1, a3, a4, (unsigned __int16)v26, v22, (_WORD *)&v26 + 1);
        if ((v15 & 0x80000000) == 0 && HIWORD(v26)) {
          uint64_t v15 = fe_phrasing_mosynt_AdjustSentenceAndMarkers((void *)a1, a3, a4, (unsigned __int16)v26, v16, (unsigned __int16)(HIWORD(v26) + v16), v22);
        }
        heap_Free(*(void **)(*(void *)a1 + 8), v22);
      }
      else
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v24);
        uint64_t v15 = 2315264010;
      }
    }
  }
LABEL_21:
  freeSentenceData(v8);
  return v15;
}

uint64_t fe_phrasing_Process_NNPhrasing(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v6 = a1;
  v115[0] = 0;
  __int16 v114 = 0;
  uint64_t v113 = 0;
  *a6 = 1;
  uint64_t v7 = *(unsigned __int16 *)(a1[191] + 1072);
  if (*(_WORD *)(a1[191] + 1072))
  {
    uint64_t v8 = 0;
    uint64_t v107 = *(unsigned __int16 *)(a1[191] + 1072);
    do
    {
      uint64_t v9 = *(void *)(v6[191] + 1064);
      uint64_t v10 = *(const char **)(v9 + 184 * v8 + 56);
      unsigned __int16 v11 = cstdlib_strlen(v10);
      if (!v11) {
        break;
      }
      if (doesWordEndWithComma((size_t)v10, ",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#"))
      {
        uint64_t v109 = v11 - 1;
        if (cstdlib_strchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", v10[v109]))
        {
          unsigned __int16 v12 = 0;
          while (1)
          {
            unsigned __int8 v13 = Utf8_LengthInBytes((unsigned __int8 *)&v10[v12], 1);
            if (!utf8_IsChineseLetter(&v10[v12]))
            {
              if (cstdlib_strlen(",:;.?!|_~")) {
                break;
              }
            }
LABEL_8:
            v12 += v13;
            if (v12 >= v11)
            {
              int v18 = 0;
              LOBYTE(v19) = v10[v109];
              goto LABEL_16;
            }
          }
          uint64_t v14 = 0;
          int v15 = 0;
          while (1)
          {
            int v19 = v10[v12];
            if (v19 == asc_2207CAC4B[v14]) {
              break;
            }
            uint64_t v14 = (unsigned __int16)++v15;
            if (cstdlib_strlen(",:;.?!|_~") <= (unsigned __int16)v15) {
              goto LABEL_8;
            }
          }
          int v18 = 1;
LABEL_16:
          uint64_t v16 = v9 + 184 * v8;
          *(unsigned char *)(v16 + 104) = v19;
          *(_DWORD *)(v16 + 108) = v18;
          *(_DWORD *)(v16 + 100) = 1;
          uint64_t v7 = v107;
          uint64_t v6 = a1;
        }
      }
      if (v11 == 1)
      {
        uint64_t v17 = cstdlib_strchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", *v10);
        if (v8)
        {
          if (v17 && *(_DWORD *)(*(void *)(v6[191] + 1064) + 184 * (v8 - 1) + 108)) {
            *(_DWORD *)(v9 + 184 * v8 + 108) = 1;
          }
        }
      }
      ++v8;
    }
    while (v8 != v7);
  }
  uint64_t v20 = a5;
  if (!*(void *)(a5 + 1104))
  {
    *(_WORD *)(a5 + 1176) = 2;
    *(_DWORD *)(a5 + 1120) = 0x10000;
  }
  *(void *)(a5 + 1104) = 0;
  NNuint64_t SentenceData = getNNSentenceData(*v6, v6[7], a3, a4, v6[191]);
  if ((NNSentenceData & 0x80000000) == 0)
  {
    if (*(void *)(a5 + 1088))
    {
      NNuint64_t SentenceData = doesNNCustermizedFE(*v6, v6[191], v115);
      if ((NNSentenceData & 0x80000000) == 0)
      {
        if (*(_WORD *)(a5 + 1072))
        {
          unsigned __int16 v112 = 0;
          if (v6[206])
          {
            uint64_t v22 = heap_Calloc(*(void **)(*v6 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            uint64_t v27 = *v6;
            if (!v22)
            {
              NNuint64_t SentenceData = 2315264010;
              log_OutPublic(*(void *)(v27 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v23, v24, v25, v26, v103);
              goto LABEL_108;
            }
            uint64_t v28 = v22;
            uint64_t v33 = heap_Calloc(*(void **)(v27 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            uint64_t v34 = *v6;
            if (!v33)
            {
              uint64_t v35 = 0;
              goto LABEL_85;
            }
            uint64_t v35 = heap_Calloc(*(void **)(v34 + 8), *(unsigned __int16 *)(v6[191] + 1072), 8);
            if (!v35)
            {
LABEL_33:
              uint64_t v34 = *v6;
LABEL_85:
              NNuint64_t SentenceData = 2315264010;
              log_OutPublic(*(void *)(v34 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v29, v30, v31, v32, v103);
              uint64_t v71 = 0;
LABEL_86:
              unsigned int v93 = *(unsigned __int16 *)(v20 + 1072);
              if (*(_WORD *)(v20 + 1072))
              {
                unint64_t v94 = 0;
                do
                {
                  uint64_t v95 = *(void *)(v28 + 8 * v94);
                  if (v95)
                  {
                    heap_Free(*(void **)(*v6 + 8), v95);
                    unsigned int v93 = *(unsigned __int16 *)(v20 + 1072);
                  }
                  ++v94;
                }
                while (v94 < v93);
              }
              heap_Free(*(void **)(*v6 + 8), v28);
LABEL_92:
              if (v33)
              {
                unsigned int v96 = *(unsigned __int16 *)(v20 + 1072);
                if (*(_WORD *)(v20 + 1072))
                {
                  unint64_t v97 = 0;
                  do
                  {
                    uint64_t v98 = *(void *)(v33 + 8 * v97);
                    if (v98)
                    {
                      heap_Free(*(void **)(*v6 + 8), v98);
                      unsigned int v96 = *(unsigned __int16 *)(v20 + 1072);
                    }
                    ++v97;
                  }
                  while (v97 < v96);
                }
                heap_Free(*(void **)(*v6 + 8), v33);
              }
              if (v35)
              {
                unsigned int v99 = *(unsigned __int16 *)(v20 + 1072);
                if (*(_WORD *)(v20 + 1072))
                {
                  unint64_t v100 = 0;
                  do
                  {
                    uint64_t v101 = *(void *)(v35 + 8 * v100);
                    if (v101)
                    {
                      heap_Free(*(void **)(*v6 + 8), v101);
                      unsigned int v99 = *(unsigned __int16 *)(v20 + 1072);
                    }
                    ++v100;
                  }
                  while (v100 < v99);
                }
                heap_Free(*(void **)(*v6 + 8), v35);
              }
              if (v71) {
                heap_Free(*(void **)(*v6 + 8), v71);
              }
              goto LABEL_108;
            }
          }
          else
          {
            uint64_t v28 = 0;
            uint64_t v33 = 0;
            uint64_t v35 = 0;
          }
          uint64_t v36 = v6[191];
          if (*(_WORD *)(v36 + 1072))
          {
            uint64_t v37 = 0;
            unint64_t v38 = 0;
            int v39 = 0;
            uint64_t v40 = *(void *)(v36 + 1064);
            do
            {
              uint64_t v41 = *(const char **)(v40 + v37 + 152);
              if (v41)
              {
                int v42 = cstdlib_strcmp(v41, "B");
                uint64_t v43 = *(void *)(v36 + 1064) + v37;
                if (v42)
                {
                  int v44 = cstdlib_strcmp(*(const char **)(v43 + 152), "E");
                  uint64_t v45 = *(void *)(v36 + 1064) + v37;
                  if (v44)
                  {
                    int v46 = cstdlib_strcmp(*(const char **)(v45 + 152), "S");
                    int v47 = cstdlib_strlen(*(const char **)(*(void *)(v36 + 1064) + v37 + 56));
                    BOOL v48 = v46 == 0;
                    uint64_t v20 = a5;
                    if (v48) {
                      int v49 = 0;
                    }
                    else {
                      int v49 = v39;
                    }
                    int v39 = v49 + v47;
                  }
                  else
                  {
                    v39 += cstdlib_strlen(*(const char **)(v45 + 56));
                  }
                }
                else
                {
                  int v39 = cstdlib_strlen(*(const char **)(v43 + 56));
                }
              }
              uint64_t v40 = *(void *)(v36 + 1064);
              *(_DWORD *)(v40 + v37 + 176) = v39;
              ++v38;
              v37 += 184;
            }
            while (v38 < *(unsigned __int16 *)(v36 + 1072));
          }
          uint64_t v6 = a1;
          if (v115[0] || !*(_WORD *)(v20 + 1072))
          {
LABEL_48:
            if (v33 && v28 && v35)
            {
              uint64_t v50 = heap_Calloc(*(void **)(*a1 + 8), *(unsigned __int16 *)(a1[191] + 1072), 24);
              uint64_t v113 = v50;
              uint64_t v34 = *a1;
              if (!v50) {
                goto LABEL_85;
              }
              if ((fe_phrasing_genLW(v34, a1[191], v33, v35, v28, &v113) & 0x80000000) == 0) {
                fe_phrasing_ProcessIGTree(a1, v50, v51, v52, v53, v54, v55, v56, v103);
              }
              freeIwInfo(a1, v50);
            }
            uint64_t v57 = *a1;
            uint64_t v58 = (const char *)a1[208];
            __int16 v59 = (char *)a1[209];
            uint64_t v60 = a1[193];
            uint64_t v61 = a1[194];
            long long v62 = *(_OWORD *)(a1 + 201);
            v110[2] = *(_OWORD *)(a1 + 199);
            v110[3] = v62;
            v110[4] = *(_OWORD *)(a1 + 203);
            __int16 v111 = *((_WORD *)a1 + 820);
            long long v63 = *(_OWORD *)(a1 + 197);
            v110[0] = *(_OWORD *)(a1 + 195);
            v110[1] = v63;
            uint64_t updated = nnpuncPhrasing(v57, v20, v60, v61, (unsigned __int16 *)v110, v58, v59);
            if ((updated & 0x80000000) != 0
              || (uint64_t updated = updateLingdbNNPhrasing(*a1, a1[7], a3, a4, a1[191], *((_DWORD *)a1 + 414), (const char *)a1[208], *((_DWORD *)a1 + 381)), (updated & 0x80000000) != 0))
            {
              NNuint64_t SentenceData = updated;
LABEL_63:
              uint64_t v71 = 0;
            }
            else
            {
              unsigned __int16 v65 = cstdlib_strlen(*(const char **)(a1[191] + 1088));
              uint64_t v66 = (void *)heap_Alloc(*(void *)(*a1 + 8), v65 + 1);
              uint64_t v71 = (uint64_t)v66;
              if (v66)
              {
                cstdlib_memset(v66, 32, v65);
                *(unsigned char *)(v71 + v65) = 0;
                NNuint64_t SentenceData = fe_phrasing_mosynt_SplitWords(a1, a3, a4, *(unsigned __int16 *)(v20 + 1096), v71, &v114);
                if ((NNSentenceData & 0x80000000) != 0 || !v114)
                {
                  uint64_t v6 = a1;
                }
                else
                {
                  int v72 = (unsigned __int16)(v114 + v65);
                  unsigned int v73 = v65;
                  uint64_t v6 = a1;
                  NNuint64_t SentenceData = fe_phrasing_mosynt_AdjustSentenceAndMarkers(a1, a3, a4, *(unsigned __int16 *)(v20 + 1096), v73, v72, v71);
                }
              }
              else
              {
                NNuint64_t SentenceData = 2315264010;
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v67, v68, v69, v70, v103);
                uint64_t v6 = a1;
              }
            }
LABEL_64:
            if (!v28) {
              goto LABEL_92;
            }
            goto LABEL_86;
          }
          unint64_t v74 = 0;
          uint64_t v75 = 76;
          while (1)
          {
            uint64_t v76 = *(void *)(v20 + 1064);
            int v77 = *(_DWORD *)(v76 + v75 - 4);
            if (v77 == 1)
            {
              char v78 = 3;
            }
            else
            {
              if (v77) {
                goto LABEL_73;
              }
              char v78 = 1;
            }
            *(unsigned char *)(v76 + v75) = v78;
LABEL_73:
            *(void *)(v76 + v75 - 28) = 0;
            hlp_NLUStrFind(*(char **)(v76 + v75 - 36), "POS", (char **)(v76 + v75 - 28), &v112);
            if (v28)
            {
              long long v79 = (char *)heap_Alloc(*(void *)(*a1 + 8), v112 + 1);
              *(void *)(v28 + 8 * v74) = v79;
              if (!v79) {
                goto LABEL_33;
              }
              cstdlib_strncpy(v79, *(const char **)(*(void *)(v20 + 1064) + v75 - 28), v112);
              *(unsigned char *)(*(void *)(v28 + 8 * v74) + v112) = 0;
            }
            if (v33)
            {
              unsigned int v80 = (char *)heap_Alloc(*(void *)(*a1 + 8), v112 + 1);
              *(void *)(v33 + 8 * v74) = v80;
              if (!v80)
              {
                NNuint64_t SentenceData = 2315264010;
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v81, v82, v83, v84, v103);
                goto LABEL_63;
              }
              cstdlib_strncpy(v80, *(const char **)(*(void *)(v20 + 1064) + v75 - 28), v112);
              *(unsigned char *)(*(void *)(v33 + 8 * v74) + v112) = 0;
            }
            if (v35)
            {
              uint64_t v85 = v20;
              uint64_t v86 = *(void *)(*a1 + 8);
              unsigned __int16 v87 = cstdlib_strlen(*(const char **)(*(void *)(v85 + 1064) + v75 - 20));
              int v88 = (char *)heap_Alloc(v86, v87 + 1);
              *(void *)(v35 + 8 * v74) = v88;
              if (!v88)
              {
                NNuint64_t SentenceData = 2315264010;
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v89, v90, v91, v92, v103);
                uint64_t v71 = 0;
                uint64_t v20 = v85;
                goto LABEL_64;
              }
              cstdlib_strcpy(v88, *(const char **)(*(void *)(v85 + 1064) + v75 - 20));
              uint64_t v20 = v85;
            }
            ++v74;
            v75 += 184;
            if (v74 >= *(unsigned __int16 *)(v20 + 1072)) {
              goto LABEL_48;
            }
          }
        }
      }
    }
  }
LABEL_108:
  freeSentenceDataNN((void *)*v6, v6[191]);
  return NNSentenceData;
}

uint64_t fe_phrasing_genLW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v38 = *(unsigned __int16 *)(a2 + 1072);
  if (!*(_WORD *)(a2 + 1072)) {
    return 0;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a1;
  unsigned int v8 = 0;
  uint64_t v9 = *a6;
  uint64_t v37 = a5;
  uint64_t v40 = a4;
  uint64_t v34 = *a6;
  while (1)
  {
    uint64_t v43 = 0;
    int v44 = 0;
    int v42 = 0;
    uint64_t v10 = *(char **)(a5 + 8 * v8);
    if (!v10) {
      return 2315264007;
    }
    uint64_t v11 = v8;
    if (!*(void *)(a4 + 8 * v8) || !*(void *)(v6 + 8 * v8)) {
      return 2315264007;
    }
    unsigned __int16 v12 = 0;
    if (extstdlib_strtok_r(v10, "-", &v44))
    {
      do
        ++v12;
      while (extstdlib_strtok_r(0, "-", &v44));
    }
    uint64_t v13 = heap_Calloc(*(void **)(v7 + 8), 1, 8 * v12);
    uint64_t v41 = (unsigned __int16 *)(v9 + 24 * v11);
    *((void *)v41 + 2) = v13;
    if (!v13) {
      break;
    }
    int v18 = cstdlib_strlen(*(const char **)(a2 + 1088));
    uint64_t v19 = v9 + 24 * v11;
    *(_DWORD *)(v19 + 4) = v18 + 1;
    uint64_t v20 = (_DWORD *)(v19 + 4);
    uint64_t v21 = heap_Calloc(*(void **)(v7 + 8), 1, (v18 + 1) * v12);
    *(void *)(v19 + 8) = v21;
    uint64_t v22 = (void *)(v19 + 8);
    if (!v21) {
      break;
    }
    uint64_t v23 = *(char **)(v6 + 8 * v11);
    uint64_t v24 = *(char **)(v40 + 8 * v11);
    *uint64_t v41 = v12;
    uint64_t v25 = extstdlib_strtok_r(v23, "-", &v43);
    uint64_t v26 = extstdlib_strtok_r(v24, "-", &v42);
    unsigned __int16 v27 = 0;
    BOOL v28 = v25 != 0;
    BOOL v29 = v26 != 0;
    if (v25)
    {
      uint64_t v30 = v26;
      if (v26)
      {
        unsigned __int16 v27 = 0;
        while (v27 <= v12)
        {
          cstdlib_strcpy((char *)(*((void *)v41 + 2) + 8 * v27), v25);
          cstdlib_strcpy((char *)(*v22 + *v20 * v27), v30);
          uint64_t v25 = extstdlib_strtok_r(0, "-", &v43);
          uint64_t v31 = extstdlib_strtok_r(0, "-", &v42);
          ++v27;
          BOOL v28 = v25 != 0;
          BOOL v29 = v31 != 0;
          if (v25)
          {
            uint64_t v30 = v31;
            if (v31) {
              continue;
            }
          }
          goto LABEL_16;
        }
        return 2315264015;
      }
    }
LABEL_16:
    if (v28 || v29) {
      return 2315264007;
    }
    if (*v41 != v27) {
      return 2315264015;
    }
    unsigned int v8 = v11 + 1;
    uint64_t v6 = a3;
    a5 = v37;
    a4 = v40;
    uint64_t v9 = v34;
    uint64_t v7 = a1;
    if ((int)v11 + 1 >= v38) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(v7 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v33);
  return 2315264010;
}

char **fe_phrasing_ProcessIGTree(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(unsigned __int16 *)(a1[191] + 1072);
  char __s1 = 0;
  uint64_t v11 = a1[206];
  if (v11)
  {
    uint64_t v13 = a1;
    uint64_t result = (char **)heap_Alloc(*(void *)(v9 + 8), 8 * *(unsigned __int8 *)(v11 + 1296) - 8);
    if (!result) {
      return result;
    }
    uint64_t v15 = (uint64_t)result;
    if (*(unsigned char *)(v11 + 1296) == 1)
    {
LABEL_7:
      uint64_t v95 = a2;
      if (!v10)
      {
LABEL_226:
        if (*(unsigned char *)(v11 + 1296) != 1)
        {
          uint64_t v88 = (unsigned __int16)(*(unsigned __int8 *)(v11 + 1296) - 1);
          uint64_t v89 = (uint64_t *)v15;
          do
          {
            uint64_t v90 = *v89++;
            heap_Free(*(void **)(v9 + 8), v90);
            --v88;
          }
          while (v88);
        }
        return (char **)heap_Free(*(void **)(v9 + 8), v15);
      }
      unint64_t v23 = 0;
      uint64_t v92 = v10;
      unsigned int v93 = v13;
      uint64_t v94 = v11;
      while (1)
      {
        uint64_t v24 = *(void *)(v11 + 1312);
        unsigned int v25 = *(unsigned __int8 *)(v11 + 1296);
        uint64_t v26 = v13[191];
        __int16 v97 = 0;
        uint64_t v27 = heap_Calloc(*(void **)(v9 + 8), 1, 2048);
        if (!v27) {
          break;
        }
        BOOL v28 = (char *)v27;
        if (v25 < 2)
        {
          int v31 = 0;
        }
        else
        {
          uint64_t v29 = 0;
          uint64_t v30 = v25 - 1;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v29), "pw"))
          {
            if (v30 == ++v29)
            {
              int v31 = 0;
              goto LABEL_17;
            }
          }
          __int16 v97 = v29;
          uint64_t v32 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, 0);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 0, v15, v32);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_17:
          uint64_t v33 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v33), "pwlen"))
          {
            if (v30 == ++v33) {
              goto LABEL_22;
            }
          }
          __int16 v97 = v33;
          *BOOL v28 = 0;
          size_t v34 = cstdlib_strlen(v28);
          fe_phrasing_feat_wordlen(v26, (unsigned __int16)v23, 0, &v28[v34]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 1, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_22:
          uint64_t v35 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v35), "lpwlen"))
          {
            if (v30 == ++v35) {
              goto LABEL_27;
            }
          }
          __int16 v97 = v35;
          *BOOL v28 = 0;
          size_t v36 = cstdlib_strlen(v28);
          fe_phrasing_feat_wordlen(v26, (unsigned __int16)v23, -1, &v28[v36]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 2, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_27:
          uint64_t v37 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v37), "llpwlen"))
          {
            if (v30 == ++v37) {
              goto LABEL_32;
            }
          }
          __int16 v97 = v37;
          *BOOL v28 = 0;
          size_t v38 = cstdlib_strlen(v28);
          fe_phrasing_feat_wordlen(v26, (unsigned __int16)v23, -2, &v28[v38]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 3, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_32:
          uint64_t v39 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v39), "rpwlen"))
          {
            if (v30 == ++v39) {
              goto LABEL_37;
            }
          }
          __int16 v97 = v39;
          *BOOL v28 = 0;
          size_t v40 = cstdlib_strlen(v28);
          fe_phrasing_feat_wordlen(v26, (unsigned __int16)v23, 1, &v28[v40]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 4, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_37:
          uint64_t v41 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v41), "rrpwlen"))
          {
            if (v30 == ++v41) {
              goto LABEL_42;
            }
          }
          __int16 v97 = v41;
          *BOOL v28 = 0;
          size_t v42 = cstdlib_strlen(v28);
          fe_phrasing_feat_wordlen(v26, (unsigned __int16)v23, 2, &v28[v42]);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 5, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_42:
          uint64_t v43 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v43), "pos"))
          {
            if (v30 == ++v43) {
              goto LABEL_49;
            }
          }
          __int16 v97 = v43;
          int v44 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            int v44 = *(const char **)(*(void *)(v26 + 1064) + 184 * v23 + 48);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 6, v15, v44);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_49:
          uint64_t v45 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v45), "lpos"))
          {
            if (v30 == ++v45) {
              goto LABEL_58;
            }
          }
          if (v23)
          {
            int v46 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              int v46 = *(const char **)(*(void *)(v26 + 1064) + 184 * (v23 - 1) + 48);
            }
          }
          else
          {
            int v46 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 7, v15, v46);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_58:
          uint64_t v47 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v47), "rpos"))
          {
            if (v30 == ++v47) {
              goto LABEL_65;
            }
          }
          __int16 v97 = v47;
          BOOL v48 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            BOOL v48 = *(const char **)(*(void *)(v26 + 1064) + 184 * (v23 + 1) + 48);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 8, v15, v48);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_65:
          uint64_t v49 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v49), "bpos"))
          {
            if (v30 == ++v49) {
              goto LABEL_72;
            }
          }
          uint64_t v50 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v50 = *(const char **)(v95 + 24 * v23 + 16);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 9, v15, v50);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_72:
          uint64_t v51 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v51), "blpos"))
          {
            if (v30 == ++v51) {
              goto LABEL_81;
            }
          }
          __int16 v97 = v51;
          if (v23)
          {
            uint64_t v52 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              uint64_t v52 = *(const char **)(v95 + 24 * (v23 - 1) + 16);
            }
          }
          else
          {
            uint64_t v52 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 10, v15, v52);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_81:
          uint64_t v53 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v53), "brpos"))
          {
            if (v30 == ++v53) {
              goto LABEL_88;
            }
          }
          uint64_t v54 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v54 = *(const char **)(v95 + 24 * (v23 + 1) + 16);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 11, v15, v54);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_88:
          uint64_t v55 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v55), "epos"))
          {
            if (v30 == ++v55) {
              goto LABEL_95;
            }
          }
          uint64_t v56 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v56 = (const char *)(*(void *)(v95 + 24 * v23 + 16) + 8 * *(unsigned __int16 *)(v95 + 24 * v23) - 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 12, v15, v56);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_95:
          uint64_t v57 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v57), "elpos"))
          {
            if (v30 == ++v57) {
              goto LABEL_104;
            }
          }
          if (v23)
          {
            uint64_t v58 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              uint64_t v58 = (const char *)(*(void *)(v95 + 24 * (v23 - 1) + 16)
            }
                                 + 8 * *(unsigned __int16 *)(v95 + 24 * (v23 - 1))
                                 - 8);
          }
          else
          {
            uint64_t v58 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 13, v15, v58);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_104:
          uint64_t v59 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v59), "erpos"))
          {
            if (v30 == ++v59) {
              goto LABEL_111;
            }
          }
          __int16 v97 = v59;
          uint64_t v60 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v60 = (const char *)(*(void *)(v95 + 24 * (v23 + 1) + 16)
          }
                               + 8 * *(unsigned __int16 *)(v95 + 24 * (v23 + 1))
                               - 8);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 14, v15, v60);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_111:
          uint64_t v61 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v61), "bchar"))
          {
            if (v30 == ++v61) {
              goto LABEL_116;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, 0, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 15, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_116:
          uint64_t v62 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v62), "echar"))
          {
            if (v30 == ++v62) {
              goto LABEL_121;
            }
          }
          __int16 v97 = v62;
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, 0, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 16, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_121:
          uint64_t v63 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v63), "elchar"))
          {
            if (v30 == ++v63) {
              goto LABEL_126;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, -1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 17, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_126:
          uint64_t v64 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v64), "erchar"))
          {
            if (v30 == ++v64) {
              goto LABEL_131;
            }
          }
          __int16 v97 = v64;
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, -1, 1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 18, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_131:
          uint64_t v65 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v65), "blwword"))
          {
            if (v30 == ++v65) {
              goto LABEL_138;
            }
          }
          uint64_t v66 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v66 = *(const char **)(v95 + 24 * v23 + 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 19, v15, v66);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_138:
          uint64_t v67 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v67), "elwword"))
          {
            if (v30 == ++v67) {
              goto LABEL_145;
            }
          }
          __int16 v97 = v67;
          uint64_t v68 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v68 = (const char *)(*(void *)(v95 + 24 * v23 + 8)
          }
                               + (*(unsigned __int16 *)(v95 + 24 * v23) - 1)
                               * *(_DWORD *)(v95 + 24 * v23 + 4));
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 20, v15, v68);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_145:
          uint64_t v69 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v69), "lpw"))
          {
            if (v30 == ++v69) {
              goto LABEL_150;
            }
          }
          uint64_t v70 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, -1);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 21, v15, v70);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_150:
          uint64_t v71 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v71), "rpw"))
          {
            if (v30 == ++v71) {
              goto LABEL_155;
            }
          }
          __int16 v97 = v71;
          int v72 = fe_phrasing_feat_word(v26, (unsigned __int16)v23, 1);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 22, v15, v72);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_155:
          uint64_t v73 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v73), "blchar"))
          {
            if (v30 == ++v73) {
              goto LABEL_160;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, -1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 23, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_160:
          uint64_t v74 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v74), "brchar"))
          {
            if (v30 == ++v74) {
              goto LABEL_165;
            }
          }
          fe_phrasing_feat_character(v26, (unsigned __int16)v23, 0, 1, v28);
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 24, v15, v28);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_165:
          uint64_t v75 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v75), "blpwword"))
          {
            if (v30 == ++v75) {
              goto LABEL_174;
            }
          }
          __int16 v97 = v75;
          if (v23)
          {
            uint64_t v76 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              uint64_t v76 = *(const char **)(v95 + 24 * (v23 - 1) + 8);
            }
          }
          else
          {
            uint64_t v76 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 25, v15, v76);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_174:
          uint64_t v77 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v77), "brpwword"))
          {
            if (v30 == ++v77) {
              goto LABEL_181;
            }
          }
          char v78 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            char v78 = *(const char **)(v95 + 24 * (v23 + 1) + 8);
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 26, v15, v78);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_181:
          uint64_t v79 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v79), "elpwword"))
          {
            if (v30 == ++v79) {
              goto LABEL_190;
            }
          }
          if (v23)
          {
            unsigned int v80 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072)) {
              unsigned int v80 = (const char *)(*(void *)(v95 + 24 * (v23 - 1) + 8)
            }
                                 + (*(unsigned __int16 *)(v95 + 24 * (v23 - 1)) - 1)
                                 * *(_DWORD *)(v95 + 24 * (v23 - 1) + 4));
          }
          else
          {
            unsigned int v80 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 27, v15, v80);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_190:
          uint64_t v81 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v81), "erpwword"))
          {
            if (v30 == ++v81) {
              goto LABEL_197;
            }
          }
          uint64_t v82 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072)) {
            uint64_t v82 = (const char *)(*(void *)(v95 + 24 * (v23 + 1) + 8)
          }
                               + (*(unsigned __int16 *)(v95 + 24 * (v23 + 1)) - 1)
                               * *(_DWORD *)(v95 + 24 * (v23 + 1) + 4));
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 28, v15, v82);
          if (v31 < 0) {
            goto LABEL_234;
          }
LABEL_197:
          uint64_t v83 = 0;
          while (cstdlib_strcmp(*(const char **)(v24 + 8 * v83), "isnum"))
          {
            if (v30 == ++v83) {
              goto LABEL_206;
            }
          }
          __int16 v97 = v83;
          uint64_t v84 = "=";
          if (v23 < *(unsigned __int16 *)(v26 + 1072))
          {
            if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * v23 + 56) - 48 >= 0xA) {
              uint64_t v84 = "0";
            }
            else {
              uint64_t v84 = "1";
            }
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 29, v15, v84);
          if (v31 < 0)
          {
LABEL_234:
            heap_Free(*(void **)(v9 + 8), (uint64_t)v28);
            return (char **)heap_Free(*(void **)(v9 + 8), v15);
          }
        }
LABEL_206:
        if (fe_phrasing_isFeatureRequired(v24, v25, 30, &v97))
        {
          if (v23)
          {
            uint64_t v85 = "=";
            if ((int)v23 - 1 < *(unsigned __int16 *)(v26 + 1072))
            {
              if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * (v23 - 1) + 56)
                 - 48 >= 0xA)
                uint64_t v85 = "0";
              else {
                uint64_t v85 = "1";
              }
            }
          }
          else
          {
            uint64_t v85 = "=";
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 30, v15, v85);
          if (v31 < 0) {
            goto LABEL_234;
          }
        }
        if (fe_phrasing_isFeatureRequired(v24, v25, 31, &v97))
        {
          uint64_t v86 = "=";
          if ((int)v23 + 1 < *(unsigned __int16 *)(v26 + 1072))
          {
            if (**(unsigned __int8 **)(*(void *)(v26 + 1064) + 184 * (v23 + 1) + 56)
               - 48 >= 0xA)
              uint64_t v86 = "0";
            else {
              uint64_t v86 = "1";
            }
          }
          int v31 = fe_phrasing_setFeature(v9, v24, v25, 31, v15, v86);
        }
        heap_Free(*(void **)(v9 + 8), (uint64_t)v28);
        uint64_t v11 = v94;
        if (v31 < 0 || (igtree_Process(v94, v15, &__s1) & 0x80000000) != 0) {
          return (char **)heap_Free(*(void **)(v9 + 8), v15);
        }
        uint64_t v13 = v93;
        if (cstdlib_strcmp(__s1, "NOMATCH"))
        {
          unsigned int v87 = cstdlib_atoi((unsigned __int8 *)__s1);
          if (v87 <= 3) {
            *(unsigned char *)(*(void *)(v93[191] + 1064) + 184 * v23 + 76) = v87;
          }
        }
        if (++v23 == v92) {
          goto LABEL_226;
        }
      }
    }
    else
    {
      uint64_t v16 = (unsigned __int16)(*(unsigned __int8 *)(v11 + 1296) - 1);
      uint64_t v17 = result;
      while (1)
      {
        int v18 = (char *)heap_Calloc(*(void **)(v9 + 8), 1, 65);
        *uint64_t v17 = v18;
        if (!v18) {
          break;
        }
        cstdlib_strcpy(v18, "=");
        ++v17;
        if (!--v16) {
          goto LABEL_7;
        }
      }
    }
    log_OutPublic(*(void *)(v9 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v19, v20, v21, v22, v92);
    return (char **)heap_Free(*(void **)(v9 + 8), v15);
  }
  uint64_t v91 = *(void *)(v9 + 32);

  return (char **)log_OutText(v91, (uint64_t)"FE_PHRASING", 0, 0, (uint64_t)"IGTree model for phrasing does not exist. Skip processing IGTree.", a6, a7, a8, a9);
}

void *freeIwInfo(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    if (*(_WORD *)(result[191] + 1072))
    {
      unint64_t v4 = 0;
      uint64_t v5 = (uint64_t *)(a2 + 16);
      do
      {
        heap_Free(*(void **)(*v3 + 8), *(v5 - 1));
        *(v5 - 1) = 0;
        heap_Free(*(void **)(*v3 + 8), *v5);
        *uint64_t v5 = 0;
        v5 += 3;
        ++v4;
      }
      while (v4 < *(unsigned __int16 *)(v3[191] + 1072));
    }
    uint64_t v6 = *(void **)(*v3 + 8);
    return heap_Free(v6, a2);
  }
  return result;
}

uint64_t fe_phrasing_Process(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v41 = 0;
  unsigned int v42 = 0;
  uint64_t v40 = 0;
  unsigned __int16 v39 = 0;
  uint64_t v38 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62343, 1728) & 0x80000000) != 0) {
    return 2315264008;
  }
  *(_DWORD *)&__c[1] = 0;
  uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unsigned char *))a1[7][13])(a3, a4, 1, 0, &__c[3]);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t, void, void, unsigned char *))a1[7][23])(a3, a4, *(unsigned __int16 *)&__c[3], 0, &__c[1]) & 0x80000000) != 0|| *(unsigned __int16 *)&__c[1] != 1)
  {
    uint64_t inserted = 0;
    *a5 = 1;
    return inserted;
  }
  if (*((_DWORD *)a1 + 364))
  {
    uint64_t v11 = a1[191];
    *((_WORD *)v11 + 548) = *(_WORD *)&__c[3];
    *((_WORD *)v11 + 549) = 1;
  }
  unsigned __int16 v12 = a1[12];
  uint64_t v13 = a1[13];
  uint64_t v14 = a1[11];
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v10 = ((uint64_t (*)(void *, void *, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))v13[12])(v14, v12, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  char v15 = 1;
  if (*(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3])
  {
    uint64_t v16 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v16) {
      *uint64_t v16 = 0;
    }
    if (!cstdlib_strcmp("yes", **(const char ***)&__c[3]) || !cstdlib_strcmp("YES", **(const char ***)&__c[3])) {
      char v15 = 0;
    }
  }
  BOOL v20 = (int)paramc_ParamGetInt((*a1)[5], (uint64_t)"nnpausingoverride", &v42) >= 0 && v42 == 1;
  int v21 = !v20;
  if (v20) {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing Override enabled - NN pausing will skipped even if data loaded", v17, v18, v19, 0);
  }
  if ((paramc_ParamGetInt((*a1)[5], (uint64_t)"nnpausingminwordspan", &v42) & 0x80000000) != 0
    || (uint64_t v25 = v42, v42 > 0x270E))
  {
    uint64_t v25 = 0xFFFFFFFFLL;
    if (!v21) {
      goto LABEL_37;
    }
  }
  else
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN pausing min word span set to %d", v22, v23, v24, v42);
    if (!v21) {
      goto LABEL_37;
    }
  }
  if (*((_DWORD *)a1 + 324) == 1)
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN Phrasing Enabled", v22, v23, v24, 0);
    uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_Markup((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = fe_phrasing_Process_NN_Phrasing((uint64_t)a1, a2, a3, a4, a5, v25, &v41);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
  }
LABEL_37:
  if (!*((_DWORD *)a1 + 40))
  {
LABEL_56:
    if (*((_DWORD *)a1 + 364))
    {
      uint64_t v35 = pw_Process(a3, a4, (uint64_t)a1[7], (uint64_t)*a1, (uint64_t)a1[191], (uint64_t ****)a1[181], (uint64_t)a1[183], a1 + 186, *((_DWORD *)a1 + 365), &v38, (uint64_t)a1[192], *((_DWORD *)a1 + 381), *((_DWORD *)a1 + 380));
      if ((v35 & 0x80000000) != 0)
      {
        uint64_t inserted = v35;
        freeSentenceDataNN(*a1, (uint64_t)a1[191]);
        return inserted;
      }
      uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
      if ((v10 & 0x80000000) == 0)
      {
        setbndfromTN(*a1, v38, (uint64_t)a1[191]);
        uint64_t v10 = fe_phrasing_Process_NNPhrasing(a1, a2, a3, a4, (uint64_t)a1[191], a5);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
            if ((v10 & 0x80000000) == 0)
            {
              uint64_t inserted = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, a1[206] != 0, 0, 0);
              if ((inserted & 0x80000000) != 0) {
                return inserted;
              }
              if (*((_DWORD *)a1 + 320) == 1)
              {
                uint64_t inserted = hlp_setNLUPOSMappings(a1, a3, a4);
                if ((inserted & 0x80000000) != 0) {
                  return inserted;
                }
              }
              if (!*((_DWORD *)a1 + 420)) {
                return inserted;
              }
              return fe_stress_process((uint64_t)*a1, a3, a4, (uint64_t)a1[7], (uint64_t)a1[212], (uint64_t)a1[183], (uint64_t)a1[213], (uint64_t)a1[214], (uint64_t ***)a1[211], *((_WORD *)a1 + 860), *((_DWORD *)a1 + 421));
            }
          }
        }
      }
    }
    else if (*((_DWORD *)a1 + 28))
    {
      log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FEPHRRES: CRF Phrasing Enabled", v22, v23, v24, 0);
      uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v10 = fe_phrasing_Process_CRFPhrasing((uint64_t)a1, a2, a3, a4, a5);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 1);
            if ((v10 & 0x80000000) == 0)
            {
              uint64_t inserted = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 0, 0, 0);
              if ((inserted & 0x80000000) != 0 || *((_DWORD *)a1 + 320) != 1) {
                return inserted;
              }
              return hlp_setNLUPOSMappings(a1, a3, a4);
            }
          }
        }
      }
    }
    else
    {
      char v36 = v15 ^ 1;
      if (!*((_DWORD *)a1 + 29)) {
        char v36 = 1;
      }
      if (v36)
      {
        return fe_phrasing_Process_Depes(a1, a2, a3, a4, a5);
      }
      else
      {
        uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
        if ((v10 & 0x80000000) == 0)
        {
          uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
          if ((v10 & 0x80000000) == 0)
          {
            uint64_t v10 = fe_phrasing_Process_Mosynt((uint64_t *)a1, a2, a3, a4, a5);
            if ((v10 & 0x80000000) == 0) {
              return hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 0);
            }
          }
        }
      }
    }
    return v10;
  }
  uint64_t v10 = hlp_MarkSildursExternal((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if ((fe_phrasing_Process_PandP((uint64_t)a1, a2, a3, a4, a5) & 0x80000000) != 0)
  {
    log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"FEPHRRES: processing failed, fall back to alternative method", v27, v28, v29, 0);
    uint64_t v10 = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 0);
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
    goto LABEL_56;
  }
  uint64_t v10 = hlp_Markup((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = hlp_SetExternalSildurs((uint64_t)a1, a3, a4);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t v10 = hlp_SetInternalSildurs((uint64_t)a1, a3, a4, 0);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  uint64_t inserted = paramc_ParamSetUInt((*a1)[5], (uint64_t)"prmigactive", 1u);
  if ((inserted & 0x80000000) == 0)
  {
    if (*((_DWORD *)a1 + 320) != 1 || (uint64_t inserted = hlp_setNLUPOSMappings(a1, a3, a4), (inserted & 0x80000000) == 0))
    {
      if (v21 && *((_DWORD *)a1 + 324) == 1 && *((_WORD *)a1 + 720) && v41 == 1)
      {
        uint64_t v30 = hlp_RemoveWordPhraseBoundaries(a1, a3, a4, *((unsigned __int16 *)a1 + 720), &v40, &v39);
        uint64_t v31 = v40;
        if ((v30 & 0x80000000) == 0)
        {
          uint64_t v30 = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 1, v40, v39);
          if ((v30 & 0x80000000) == 0)
          {
            log_OutText((*a1)[4], (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NN Phrasing : cleanup lingdb (numwords=%d)", v32, v33, v34, *((unsigned __int16 *)a1 + 720));
            uint64_t v30 = NNPausing_cleanLingdb((uint64_t)*a1, (uint64_t)a1[7], a3, a4, (uint64_t)(a1 + 163));
          }
        }
        uint64_t inserted = v30;
        if (v31) {
          heap_Free((void *)(*a1)[1], v31);
        }
      }
    }
  }
  return inserted;
}

uint64_t hlp_MarkSildursExternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v17 = 0;
  int v18 = 0;
  unsigned int v15 = 0;
  int v16 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v17 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v17), 0, (char *)&v18 + 2) & 0x80000000) == 0&& HIWORD(v18) == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v17), 0, &v14, (char *)&v16 + 2);
    if ((v6 & 0x80000000) == 0 && HIWORD(v16) >= 2u)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v17), &v17);
      if ((v6 & 0x80000000) == 0)
      {
        unsigned __int16 v7 = v17;
        if ((_WORD)v17)
        {
          while (1)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v7, 0, 1, &v15, (char *)&v16 + 2);
            if ((v8 & 0x80000000) != 0) {
              break;
            }
            if (v15 <= 0xA && ((1 << v15) & 0x610) != 0)
            {
              uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, (unsigned __int16)v17, 8, (char *)&v18 + 2);
              if ((v8 & 0x80000000) != 0) {
                break;
              }
              if (HIWORD(v18))
              {
                uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v17, 8, 1, &v18, (char *)&v16 + 2);
                if ((v8 & 0x80000000) != 0) {
                  break;
                }
                if ((_WORD)v18)
                {
                  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                  uint64_t v11 = (unsigned __int16)v17;
                  __int16 v12 = cstdlib_strlen("external");
                  uint64_t v8 = v10(a2, a3, v11, 18, (unsigned __int16)(v12 + 1), "external", &v16);
                  if ((v8 & 0x80000000) != 0) {
                    break;
                  }
                }
              }
            }
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v17, &v17);
            if ((v6 & 0x80000000) == 0)
            {
              unsigned __int16 v7 = v17;
              if ((_WORD)v17) {
                continue;
              }
            }
            return v6;
          }
          return v8;
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_Markup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v35 = 0;
  int v36 = 0;
  int v34 = 0;
  uint64_t v33 = 0;
  int v31 = 0;
  int v32 = 0;
  __int16 v30 = 1;
  __s = 0;
  __int16 v28 = 0;
  uint64_t v27 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v34 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v34), 0, &v28) & 0x80000000) == 0&& v28 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v34), 0, &v27, (char *)&v36 + 2);
    if ((v6 & 0x80000000) == 0 && HIWORD(v36) >= 2u)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v34), &v34);
      if ((v7 & 0x80000000) != 0) {
        return v7;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v34), 1, &v33, (char *)&v32 + 2);
      if ((v6 & 0x80000000) == 0)
      {
        unsigned __int16 v8 = v34;
        if ((_WORD)v34)
        {
          uint64_t v9 = 0;
          unsigned __int16 v10 = 0;
          int v11 = 0;
          unsigned __int16 v12 = 0;
          int v13 = *(_DWORD *)(v33 + 12);
          while (1)
          {
            uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v8, 0, 1, &v35, (char *)&v36 + 2);
            if ((v7 & 0x80000000) != 0) {
              return v7;
            }
            if ((v35 - 9) < 2 || v35 == 4)
            {
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v34, 1, 1, &v32, (char *)&v36 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v34, 2, 1, (char *)&v31 + 2, (char *)&v36 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              LOWORD(v31) = 0;
              uint64_t v15 = HIWORD(v32);
              if (v9 >= HIWORD(v32))
              {
                uint64_t v15 = v9;
              }
              else
              {
                __int16 v16 = 0;
                uint64_t v17 = v9;
                int v18 = (_WORD *)(v33 + 32 * v9 + 12);
                while ((__int16)(HIWORD(v31) - ((__int16)(HIWORD(v31) - v32) > 1)) > (__int16)(*v18 - v13))
                {
                  if (*((_DWORD *)v18 - 3) == 8)
                  {
                    v16 += v18[6];
                    LOWORD(v31) = v16;
                  }
                  ++v17;
                  v18 += 16;
                  if (HIWORD(v32) == v17) {
                    goto LABEL_34;
                  }
                }
                uint64_t v15 = (unsigned __int16)v17;
LABEL_34:
                if (v16 && v10)
                {
                  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v10, 8, 1, &v31, &v36);
                  if ((v7 & 0x80000000) != 0) {
                    return v7;
                  }
                  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                  __int16 v20 = cstdlib_strlen("external");
                  uint64_t v7 = v19(a2, a3, v10, 18, (unsigned __int16)(v20 + 1), "external", &v36);
                  if ((v7 & 0x80000000) != 0) {
                    return v7;
                  }
                  __int16 v16 = v31;
                }
                if (v16 && v12)
                {
                  if (v11 && (unsigned __int16)v32 == v11)
                  {
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 7, 1, &v30, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 8, 1, &v31, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                  }
                  else if ((unsigned __int16)v32 != v11)
                  {
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 88))(a2, a3, (unsigned __int16)v34, &v34);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    int v35 = 15;
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v34, 0, 1, &v35, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v34, 1, 1, &v32, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v12, 2, 1, (char *)&v31 + 2, (char *)&v36 + 2);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v34, 2, 1, (char *)&v31 + 2, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v12, 2, 1, &v32, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, v12, 4, &__s, (char *)&v36 + 2);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    int v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(*(void *)(a1 + 56) + 160);
                    uint64_t v22 = (unsigned __int16)v34;
                    __int16 v23 = cstdlib_strlen(__s);
                    uint64_t v7 = v21(a2, a3, v22, 4, (unsigned __int16)(v23 + 1), __s, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                    __int16 v25 = cstdlib_strlen("P");
                    uint64_t v7 = v24(a2, a3, v12, 4, (unsigned __int16)(v25 + 1), "P", &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v34, 7, 1, &v30, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v34, 8, 1, &v31, &v36);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                    unsigned __int16 v12 = v34;
                    int v11 = (unsigned __int16)v32;
                    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v34, &v34);
                    if ((v7 & 0x80000000) != 0) {
                      return v7;
                    }
                  }
                }
              }
              unsigned __int16 v10 = v34;
              uint64_t v9 = v15;
            }
            else if (v35 == 15)
            {
              unsigned __int16 v12 = v34;
              uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v34, 1, 1, &v32, (char *)&v36 + 2);
              if ((v7 & 0x80000000) != 0) {
                return v7;
              }
              int v11 = (unsigned __int16)v32;
            }
            uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v34, &v34);
            if ((v6 & 0x80000000) == 0)
            {
              unsigned __int16 v8 = v34;
              if ((_WORD)v34) {
                continue;
              }
            }
            return v6;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_SetExternalSildurs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  __int16 v52 = 0;
  int v51 = 0;
  unsigned __int16 v50 = 0;
  int v48 = 0;
  unsigned int v49 = 0;
  int v47 = 0;
  HIWORD(v46) = 0;
  uint64_t v45 = 0;
  unsigned __int16 v44 = 0;
  int v40 = 0;
  uint64_t v39 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v51 + 2);
  if ((v6 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v51), 0, &v52) & 0x80000000) == 0&& v52 == 1)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v51), 0, &v39, &v50);
    if ((v6 & 0x80000000) == 0 && v50 >= 2u)
    {
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v51), 1, &v45, &v44);
      if ((updated & 0x80000000) != 0)
      {
        return updated;
      }
      else
      {
        int v8 = *(_DWORD *)(v45 + 12);
        uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v51), &v51);
        if ((v6 & 0x80000000) == 0)
        {
          int v48 = 0;
          HIWORD(v47) = 0;
          unsigned __int16 v43 = 0;
          unsigned __int16 v42 = 0;
          cstdlib_strcpy(__dst, "normal");
          cstdlib_strcpy(__src, "normal");
          int v41 = 0;
          int v46 = 0;
          unsigned __int16 v9 = v51;
          if ((_WORD)v51)
          {
            unsigned int v10 = 0;
            unsigned int v11 = 0;
            uint64_t v12 = 0;
            unsigned __int16 v13 = 0;
            while (1)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v9, 0, 1, &v49, &v50);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              if (v49 > 0xA || ((1 << v49) & 0x610) == 0)
              {
                uint64_t v27 = (unsigned __int16)v51;
                uint64_t v19 = v12;
                goto LABEL_76;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v51, 1, 1, (char *)&v48 + 2, &v50);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v51, 2, 1, &v48, &v50);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              HIWORD(v46) = 0;
              if (v13)
              {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v13, 2, 1, (char *)&v46 + 2, &v50);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
              }
              cstdlib_strcpy(__dst, __src);
              uint64_t updated = hlp_UpdateDomain(a1, a2, a3, HIWORD(v51), &v43, HIWORD(v48), (unsigned __int16)v48, &v42, __src);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              if (v42)
              {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                int v15 = HIWORD(v47);
              }
              else
              {
                int v15 = (unsigned __int16)v48;
                HIWORD(v47) = v48;
              }
              if (v15 && v11 < v44)
              {
                int v16 = (__int16)(v15 - 1);
                uint64_t v17 = v11;
                uint64_t v18 = v45 + 32 * v11;
                uint64_t v19 = v12;
                if (v16 >= (__int16)(*(_WORD *)(v18 + 12) - v8))
                {
                  __int16 v20 = (unsigned int *)(v18 + 24);
                  uint64_t v19 = v12;
                  while (1)
                  {
                    if (*(v20 - 6) == 31) {
                      uint64_t v19 = *v20;
                    }
                    if (v44 - 1 == v17) {
                      break;
                    }
                    int v21 = v20[5] - v8;
                    v20 += 8;
                    ++v17;
                    if (v16 < (__int16)v21)
                    {
                      unsigned int v11 = (unsigned __int16)v17;
                      goto LABEL_34;
                    }
                  }
                  unsigned int v11 = v44;
                }
              }
              else
              {
                uint64_t v19 = v12;
              }
LABEL_34:
              hlp_GetDomainPauseDur(a1, "spell", &v41, &v40);
              if (cstdlib_strstr(__dst, "spell"))
              {
                if (cstdlib_strstr(__src, "spell")) {
                  break;
                }
              }
              if (cstdlib_strstr(__src, "spell"))
              {
                if (!v19) {
                  goto LABEL_52;
                }
                int v26 = 0;
                LOWORD(v12) = v19;
              }
              else
              {
                if (!cstdlib_strstr(__dst, "spell")) {
                  goto LABEL_51;
                }
                if (!v12)
                {
LABEL_52:
                  int v26 = 0;
                  if (v40) {
                    LOWORD(v12) = v41;
                  }
                  else {
                    LOWORD(v12) = 200;
                  }
                  goto LABEL_55;
                }
                int v26 = 0;
              }
LABEL_55:
              if (v10 >= v44)
              {
                __int16 v28 = 0;
              }
              else
              {
                __int16 v28 = 0;
                uint64_t v29 = v10;
                uint64_t v30 = v45 + 32 * v10 + 12;
                int v31 = (int *)v30;
                while (1)
                {
                  int v32 = *v31;
                  v31 += 8;
                  if ((__int16)(v48 - ((__int16)(v48 - HIWORD(v48)) > 1)) <= (__int16)(v32 - v8)) {
                    break;
                  }
                  if (*(_DWORD *)(v30 - 12) == 8) {
                    v28 += *(_WORD *)(v30 + 12);
                  }
                  ++v29;
                  uint64_t v30 = (uint64_t)v31;
                  if (v44 == v29)
                  {
                    unsigned int v10 = v44;
                    goto LABEL_64;
                  }
                }
                unsigned int v10 = (unsigned __int16)v29;
              }
LABEL_64:
              if (v26) {
                __int16 v33 = 0;
              }
              else {
                __int16 v33 = v12;
              }
              int v34 = v26 ^ 1;
              BOOL v35 = v28 == 0;
              if (!v28) {
                __int16 v28 = v33;
              }
              LOWORD(v46) = v28;
              if (!v35) {
                int v34 = 1;
              }
              if (v13)
              {
                if (v34)
                {
                  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, v13, 8, 1, &v46, &v47);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                  int v36 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                  __int16 v37 = cstdlib_strlen("external");
                  uint64_t updated = v36(a2, a3, v13, 18, (unsigned __int16)(v37 + 1), "external", &v47);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                }
              }
              uint64_t v27 = (unsigned __int16)v51;
              unsigned __int16 v13 = v51;
LABEL_76:
              uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)(a1 + 56) + 120))(a2, a3, v27, &v51);
              if ((v6 & 0x80000000) == 0)
              {
                unsigned __int16 v9 = v51;
                uint64_t v12 = v19;
                if ((_WORD)v51) {
                  continue;
                }
              }
              return v6;
            }
            if (HIWORD(v46))
            {
              unsigned int v22 = *(unsigned __int8 *)(v39 + HIWORD(v46) - 1);
              BOOL v23 = v22 > 0x3F;
              unint64_t v24 = (1 << v22) & 0x8C00500200000000;
              if (!v23 && v24 != 0)
              {
                int v26 = 0;
                if (!v12) {
                  LOWORD(v12) = v41;
                }
                goto LABEL_55;
              }
            }
LABEL_51:
            LOWORD(v12) = 0;
            int v26 = 1;
            goto LABEL_55;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t hlp_SetInternalSildurs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  __int16 v33 = 0;
  int v32 = 0;
  unsigned __int16 v31 = 0;
  int v29 = 0;
  int v30 = 0;
  int v28 = 0;
  unsigned __int16 v27 = 0;
  int v22 = 0;
  uint64_t v19 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, (char *)&v32 + 2);
  if ((v8 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v32), 0, &v33) & 0x80000000) == 0&& v33 == 1)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v32), 0, &v19, &v31);
    if ((v8 & 0x80000000) == 0 && v31 >= 2u)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, HIWORD(v32), &v32);
      if ((v8 & 0x80000000) == 0)
      {
        LOWORD(v28) = 0;
        unsigned __int16 v27 = 0;
        int v29 = 0;
        int v23 = 0;
        cstdlib_strcpy(__dst, "normal");
        cstdlib_strcpy(__src, "normal");
        int v25 = 0;
        __int16 v26 = 0;
        unsigned __int16 v9 = v32;
        if ((_WORD)v32)
        {
          LOWORD(v10) = 0;
          unsigned __int16 v11 = 0;
          while (1)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v9, 0, 1, &v30, &v31);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if ((v30 - 9) < 2 || v30 == 4) {
              break;
            }
            if (v30 == 15)
            {
              uint64_t v10 = (unsigned __int16)v32;
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v32, 1, 1, &v28, &v31);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v10, 7, 1, &v27, &v31);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
LABEL_43:
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a2, a3, (unsigned __int16)v32, &v32);
            if ((v8 & 0x80000000) != 0) {
              return v8;
            }
            unsigned __int16 v9 = v32;
            if (!(_WORD)v32)
            {
              if (!v11) {
                return v8;
              }
              HIWORD(v25) = 0;
              return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, v11, 8, 1, (char *)&v25 + 2, (char *)&v28 + 2);
            }
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v32, 1, 1, (char *)&v29 + 2, &v31);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, (unsigned __int16)v32, 2, 1, &v29, &v31);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          __int16 v26 = 0;
          if (v11)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, unsigned __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v11, 2, 1, &v26, &v31);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            LOWORD(v25) = 0;
            int v24 = 0;
            uint64_t updated = hlp_ReadSildur(a1, a2, a3, v11, &v25, &v24);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if (v24)
            {
              int v14 = 1;
            }
            else
            {
              if (a4) {
                BOOL v15 = (unsigned __int16)v25 == 0;
              }
              else {
                BOOL v15 = 1;
              }
              int v14 = !v15;
            }
          }
          else
          {
            int v14 = 0;
            LOWORD(v25) = 0;
            int v24 = 0;
          }
          cstdlib_strcpy(__dst, __src);
          uint64_t updated = hlp_UpdateDomain(a1, a2, a3, HIWORD(v32), (unsigned __int16 *)&v23 + 1, HIWORD(v29), (unsigned __int16)v29, (unsigned __int16 *)&v23, __src);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          hlp_GetDomainPauseDur(a1, __dst, &v22, &v20);
          hlp_GetDomainPauseDur(a1, __src, &v21, &v20);
          __int16 v16 = v22;
          HIWORD(v25) = 0;
          BOOL v17 = (unsigned __int16)v10 != 0;
          if (v14)
          {
            __int16 v16 = v25;
          }
          else if (!HIWORD(v29) || !(_WORD)v10 || (BOOL v17 = 1, (unsigned __int16)v28 != HIWORD(v29)) || v27 > 1u)
          {
LABEL_37:
            if (v11)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, v11, 8, 1, (char *)&v25 + 2, (char *)&v28 + 2);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
            if (v17 && (unsigned __int16)v28 == HIWORD(v29))
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v10, 8, 1, (char *)&v25 + 2, (char *)&v28 + 2);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
            unsigned __int16 v11 = v32;
            goto LABEL_43;
          }
          HIWORD(v25) = v16;
          goto LABEL_37;
        }
      }
    }
  }
  return v8;
}

uint64_t hlp_setNLUPOSMappings(void *a1, uint64_t a2, uint64_t a3)
{
  int v42 = 0;
  int v43 = 0;
  unsigned int v41 = 0;
  *(void *)int v40 = 0;
  __int16 v39 = 0;
  *(void *)&__n[1] = 0;
  __n[0] = 0;
  uint64_t v36 = 0;
  __s = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  if ((com_crf_GetCfgParamVal(a1[11], a1[12], a1[13], (uint64_t)"fephrase_max_search_key", "64", &v34) & 0x80000000) != 0) {
    uint64_t v6 = 64;
  }
  else {
    uint64_t v6 = cstdlib_atoi((unsigned __int8 *)v34);
  }
  uint64_t v7 = heap_Calloc(*(void **)(*a1 + 8), 1, v6);
  if (v7)
  {
    uint64_t v12 = (char *)v7;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v43 + 2);
    if ((v13 & 0x80000000) != 0)
    {
LABEL_33:
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a2, a3, HIWORD(v43), 0, &v39);
      if ((v14 & 0x80000000) == 0 && v39 == 1)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(a1[7] + 176))(a2, a3, HIWORD(v43), 0, &v35, (char *)&v42 + 2);
        if ((v14 & 0x80000000) == 0 && HIWORD(v42) >= 2u)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v43), &v43);
          if ((v14 & 0x80000000) == 0)
          {
            unsigned __int16 v15 = v43;
            if ((_WORD)v43)
            {
              while (1)
              {
                uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a2, a3, v15, 0, 1, &v41, (char *)&v42 + 2);
                if ((v13 & 0x80000000) != 0) {
                  goto LABEL_33;
                }
                if (v41 <= 0xA && ((1 << v41) & 0x610) != 0)
                {
                  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v43, 5, &__s, (char *)&v42 + 2);
                  if ((v13 & 0x80000000) != 0) {
                    goto LABEL_33;
                  }
                  if (cstdlib_strlen(__s) != 1)
                  {
                    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a2, a3, (unsigned __int16)v43, 14, &v39);
                    if ((v13 & 0x80000000) != 0) {
                      goto LABEL_33;
                    }
                    if (v39) {
                      break;
                    }
                  }
                }
LABEL_29:
                uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v43, &v43);
                if ((v14 & 0x80000000) == 0)
                {
                  unsigned __int16 v15 = v43;
                  if ((_WORD)v43) {
                    continue;
                  }
                }
                goto LABEL_34;
              }
              uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *, char *))(a1[7] + 176))(a2, a3, (unsigned __int16)v43, 14, v40, (char *)&v42 + 2);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_33;
              }
              if (HIWORD(v42))
              {
                hlp_NLUStrFind(*(char **)v40, "POS", (char **)&__n[1], __n);
                cstdlib_strncpy(v12, *(const char **)&__n[1], __n[0]);
                v12[__n[0]] = 0;
                if ((ssftmap_Find(a1[161], (uint64_t)v12, &v36) & 0x1FFF) != 0x14)
                {
                  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s (NLU %s) to %s", v17, v18, v19, (uint64_t)__s);
                  int v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[7] + 160);
                  uint64_t v30 = (unsigned __int16)v43;
                  __int16 v31 = cstdlib_strlen(v36);
                  int v29 = v36;
                  uint64_t v25 = (unsigned __int16)(v31 + 1);
                  uint64_t v26 = a2;
                  uint64_t v27 = a3;
                  uint64_t v28 = v30;
LABEL_28:
                  uint64_t v13 = v23(v26, v27, v28, 5, v25, v29, &v42);
                  if ((v13 & 0x80000000) != 0) {
                    goto LABEL_33;
                  }
                  goto LABEL_29;
                }
                v12[1] = 0;
                log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s (NLU %s) to %s", v17, v18, v19, (uint64_t)__s);
              }
              else
              {
                cstdlib_strncpy(v12, __s, 1uLL);
                v12[1] = 0;
                log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"NLUPOSMAP from %s to %s (default in lieu of NLU field)", v20, v21, v22, (uint64_t)__s);
              }
              int v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, int *))(a1[7] + 160);
              uint64_t v24 = (unsigned __int16)v43;
              uint64_t v25 = (unsigned __int16)(cstdlib_strlen(v12) + 1);
              uint64_t v26 = a2;
              uint64_t v27 = a3;
              uint64_t v28 = v24;
              int v29 = v12;
              goto LABEL_28;
            }
          }
        }
      }
    }
LABEL_34:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v12);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v8, v9, v10, v11, v33);
    return 2315264010;
  }
  return v14;
}

uint64_t hlp_RemoveWordPhraseBoundaries(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t *a5, _WORD *a6)
{
  unsigned int v26 = 0;
  int v27 = 0;
  int v24 = 0;
  int v25 = 0;
  int v23 = 0;
  *a6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a2, a3, 1, 0, (char *)&v27 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 152))(a2, a3, 2, HIWORD(v27), &v23);
    if ((result & 0x80000000) == 0)
    {
      if (!(_WORD)v23) {
        goto LABEL_26;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a2, a3, 2, HIWORD(v27), &v27);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned __int16 v13 = v27;
      if ((_WORD)v27)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 4 * a4;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a2, a3, v13, 0, 1, &v26, (char *)&v25 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          uint64_t v16 = (unsigned __int16)v27;
          if (v26 <= 0xA && ((1 << v26) & 0x610) != 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v27, 1, 1, &v24, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, (unsigned __int16)v27, 2, 1, (char *)&v23 + 2, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if (*a6 && v14) {
              *(_WORD *)(v14 + 4 * ((unsigned __int16)*a6 - 1) + 2) = HIWORD(v23);
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a2, a3, (unsigned __int16)v27, &v27);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (v26 == 15)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a2, a3, v16, 1, 1, &v25, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(a1[7] + 168))(a2, a3, v16, 2, 1, (char *)&v24 + 2, (char *)&v25 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if (!v14)
            {
              uint64_t v14 = heap_Calloc(*(void **)(*a1 + 8), 1, v15);
              if (!v14)
              {
                log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v18, v19, v20, v21, v22);
                uint64_t result = 2315264010;
                break;
              }
            }
            *(_WORD *)(v14 + 4 * (unsigned __int16)*a6) = v25;
            *(_WORD *)(v14 + 4 * (unsigned __int16)(*a6)++ + 2) = HIWORD(v24);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1[7] + 192))(a2, a3, v16);
          }
          unsigned __int16 v13 = v27;
        }
        while ((_WORD)v27);
      }
      else
      {
LABEL_26:
        uint64_t v14 = 0;
      }
      *a5 = v14;
    }
  }
  return result;
}

uint64_t hlp_InsertWordPhraseBoundaries(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  v45[0] = 0;
  int v43 = 0;
  int v44 = 0;
  int v41 = 0;
  int v42 = 0;
  unsigned __int16 v40 = 0;
  uint64_t v38 = 0;
  __s = 0;
  char __s1 = 0;
  int v36 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, _WORD *))(*(void *)(a1 + 56) + 104))(a2, a3, 1, 0, v45);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 152))(a2, a3, 2, v45[0], &v36);
    if ((result & 0x80000000) == 0)
    {
      if (!(_WORD)v36
        || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, v45[0], (char *)&v44 + 2), (result & 0x80000000) == 0))
      {
        unsigned __int16 v13 = HIWORD(v44);
        if (HIWORD(v44))
        {
          int v14 = 0;
          BOOL v35 = 0;
          if (a4 == 1) {
            __int16 v15 = 0;
          }
          else {
            __int16 v15 = 200;
          }
          __int16 v34 = v15;
          int v16 = -1;
          uint64_t v17 = "*?";
          while (1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, v13, 0, 1, &v43, (char *)&v42 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if ((v43 - 9) < 2 || v43 == 4) {
              break;
            }
            if (v43 == 15) {
              LOWORD(v44) = HIWORD(v44);
            }
LABEL_71:
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 120))(a2, a3, HIWORD(v44), (char *)&v44 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            unsigned __int16 v13 = HIWORD(v44);
            if (!HIWORD(v44)) {
              goto LABEL_83;
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v44), 1, 1, (char *)&v41 + 2, (char *)&v42 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v44), 2, 1, &v41, (char *)&v42 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, HIWORD(v44), 8, 1, &v40, (char *)&v42 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, HIWORD(v44), 18, (char *)&v36 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          LOWORD(v36) = 0;
          if (a6)
          {
            uint64_t v20 = (unsigned __int16 *)(a5 + 2);
            uint64_t v19 = a6;
            do
            {
              int v21 = *v20;
              v20 += 2;
              if (v21 == (unsigned __int16)v41) {
                LOWORD(v36) = 1;
              }
              --v19;
            }
            while (v19);
          }
          if (HIWORD(v36))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a2, a3, HIWORD(v44), 18, &__s1, (char *)&v42 + 2);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            BOOL v35 = cstdlib_strcmp(__s1, "external") == 0;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                                 + 176))(a2, a3, HIWORD(v44), 3, &v38, (char *)&v42 + 2);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (cstdlib_strstr(v38, v17)) {
            int v14 = 1;
          }
          __int16 v22 = HIWORD(v41);
          __int16 v23 = v41;
          if (HIWORD(v41) > (unsigned __int16)v41) {
            return 2315271857;
          }
          if (!(_WORD)v44)
          {
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v44), SHIWORD(v41), v41, 0, v34, (unsigned __int16 *)&v44);
            if ((result & 0x80000000) != 0) {
              return result;
            }
LABEL_48:
            if (v40)
            {
              int v24 = v17;
              unsigned __int16 v47 = HIWORD(v44);
              int v46 = 0;
              v45[1] = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 120))(a2, a3) & 0x80000000) == 0)
              {
                int v25 = 0;
                while (v47
                     && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3) & 0x80000000) == 0)
                {
                  if (v46 == 15)
                  {
                    int v25 = 1;
                  }
                  else if ((v46 - 9) < 2 || v46 == 4)
                  {
                    if (v25) {
                      break;
                    }
                    int v16 = v40;
                    uint64_t v17 = v24;
                    if (v40 <= 0x1Du && !v35)
                    {
                      unsigned __int16 v40 = 0;
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, HIWORD(v44), 8, 1, &v40, &v42);
                      if ((result & 0x80000000) != 0) {
                        return result;
                      }
                      int v16 = v40;
                    }
                    goto LABEL_71;
                  }
                  if (((*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56)
                                                                                                + 120))(a2, a3, v47, &v47) & 0x80000000) != 0)break;
                }
              }
              uint64_t v17 = v24;
            }
            else if ((unsigned __int16)v36 == 1 && a4 == 1)
            {
              int v16 = 0;
            }
            goto LABEL_71;
          }
          if (v16 < 1)
          {
            if (v16)
            {
LABEL_45:
              if (!a4)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v44, 2, 1, &v41, &v42);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
              }
              int v16 = -1;
              goto LABEL_48;
            }
            if (a4 == 1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a2, a3);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v22 = HIWORD(v41);
              __int16 v23 = v41;
            }
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v44), v22, v23, 2, 0, (unsigned __int16 *)&v44);
          }
          else
          {
            if (a4 == 1)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a2, a3);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              __int16 v22 = HIWORD(v41);
              __int16 v23 = v41;
            }
            uint64_t result = hlp_InsertWordPhrase(a1, a2, a3, HIWORD(v44), v22, v23, 1, v16, (unsigned __int16 *)&v44);
          }
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_45;
        }
        int v14 = 0;
LABEL_83:
        if (a4 == 1 && (_WORD)v44)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, (unsigned __int16)v44, 2, 1, &v41, &v42);
          if ((result & 0x80000000) != 0 || !(_WORD)v44) {
            return result;
          }
        }
        else if (!(_WORD)v44)
        {
          return result;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(*(void *)(a1 + 56)
                                                                                              + 176))(a2, a3, v45[0], 0, &__s, (char *)&v42 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v28 = __s;
        if (__s && *__s)
        {
          if (v28[cstdlib_strlen(__s) - 1] == 63 || v14 != 0) {
            goto LABEL_99;
          }
        }
        else if (v14)
        {
LABEL_99:
          uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
          uint64_t v31 = (unsigned __int16)v44;
          int v32 = "Y";
          goto LABEL_100;
        }
        uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
        uint64_t v31 = (unsigned __int16)v44;
        int v32 = "T";
LABEL_100:
        __int16 v33 = cstdlib_strlen(v32);
        return v30(a2, a3, v31, 4, (unsigned __int16)(v33 + 1), v32, &v42);
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_Process_Depes(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v61 = 0;
  int v59 = 0;
  int v60 = 0;
  int v58 = 0;
  unsigned __int16 v57 = 0;
  unsigned int v56 = 0;
  uint64_t v54 = 0;
  __s = 0;
  int v53 = 0;
  __int16 v52 = 0;
  char __s1 = 0;
  int v50 = 0;
  *a5 = 1;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v60 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v60), 0, &v52) & 0x80000000) != 0)return v8; {
  if (v52 != 1)
  }
    return v8;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a1[7] + 176))(a3, a4, HIWORD(v60), 0, &v61, (char *)&v58 + 2);
  if ((v8 & 0x80000000) != 0 || HIWORD(v58) < 2u) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1[7] + 176))(a3, a4, HIWORD(v60), 1, &v54, (char *)&v53 + 2);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  int v10 = *(_DWORD *)(v54 + 12);
  uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v60), &v60);
  if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
    goto LABEL_25;
  }
  int v12 = 1;
  int v13 = 1;
  while (1)
  {
    if (!(_WORD)v60)
    {
      int v21 = (char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12 + 128);
      a1[17] = v21;
      if (!v21
        || (cstdlib_strcpy(v21, ""),
            unsigned int v26 = (char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12),
            (a1[18] = v26) == 0)
        || (cstdlib_strcpy(v26, ""),
            int v27 = (char *)heap_Alloc(*(void *)(*a1 + 8), (unsigned __int16)v12),
            (a1[19] = v27) == 0))
      {
        uint64_t v8 = 2315264010;
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v22, v23, v24, v25, v45);
        goto LABEL_26;
      }
      cstdlib_strcpy(v27, "");
      uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v60), &v60);
      if ((LastTnMarkerUpToPos & 0x80000000) == 0)
      {
        LOWORD(v28) = v60;
        HIWORD(v59) = v60;
        if ((_WORD)v60)
        {
          int v29 = 0;
          __int16 v47 = v10;
          do
          {
            uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v28, 0, 1, &v56, (char *)&v58 + 2);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              goto LABEL_25;
            }
            if (v56 - 9 < 2 || v56 == 4)
            {
              *(_WORD *)int __dst = 0;
              __int16 v49 = 0;
              __int16 v52 = 0;
              uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, HIWORD(v59), 1, 1, &v58, (char *)&v58 + 2);
              if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                goto LABEL_25;
              }
              uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, HIWORD(v59), 2, 1, &v57, (char *)&v58 + 2);
              if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                goto LABEL_25;
              }
              if ((__int16)(v57 - v58) <= 1) {
                __int16 v31 = 0;
              }
              else {
                __int16 v31 = -1;
              }
              *(_WORD *)int __dst = 0;
              unint64_t v32 = (unsigned __int16)v53;
              unsigned __int16 v33 = HIWORD(v53);
              if ((unsigned __int16)v53 < HIWORD(v53))
              {
                int v46 = v29;
                uint64_t v34 = (unsigned __int16)v59;
                uint64_t v35 = 32 * (unsigned __int16)v53;
                do
                {
                  if ((__int16)(*(_DWORD *)(v54 + v35 + 12) - v10) >= (__int16)(v57 + v31)) {
                    break;
                  }
                  if (*(_DWORD *)(v54 + v35) == 8 && v34 != 0)
                  {
                    *(_WORD *)__dst += *(_WORD *)(v54 + v35 + 24);
                    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 160))(a3, a4, v34, 8, 1, __dst, &v49);
                    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                      goto LABEL_25;
                    }
                    int v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(a1[7] + 160);
                    __int16 v37 = cstdlib_strlen("external");
                    uint64_t LastTnMarkerUpToPos = v48(a3, a4, v34, 18, (unsigned __int16)(v37 + 1), "external", &v49);
                    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                      goto LABEL_25;
                    }
                    unsigned __int16 v33 = HIWORD(v53);
                    LOWORD(v10) = v47;
                  }
                  ++v32;
                  v35 += 32;
                }
                while (v32 < v33);
                int v29 = v46;
              }
              LOWORD(v53) = v32;
              *(_WORD *)int __dst = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v59), 8, &v52) & 0x80000000) != 0|| !v52)
              {
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 160))(a3, a4, HIWORD(v59), 8, 1, __dst, &v49);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
              }
              unsigned __int16 v38 = HIWORD(v59);
              LOWORD(v59) = HIWORD(v59);
            }
            else if (v56 == 5)
            {
              int v39 = HIWORD(v59);
              unsigned __int16 v38 = v29;
              if (HIWORD(v59) != (unsigned __int16)v29)
              {
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a3, a4, HIWORD(v59), 4, &__s1, (char *)&v58 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, HIWORD(v59), 1, 1, &v58, (char *)&v58 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, HIWORD(v59), 2, 1, &v57, (char *)&v58 + 2);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                uint64_t LastTnMarkerUpToPos = hlp_GetLastTnMarkerUpToPos((uint64_t)a1, a3, a4, HIWORD(v60), v58, v63);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                if (cstdlib_strcmp(__s1, "phon"))
                {
                  unsigned __int16 v40 = __s1;
                }
                else
                {
                  unsigned __int16 v40 = v63;
                  char __s1 = v63;
                }
                uint64_t LastTnMarkerUpToPos = hlp_Remap(a1, a3, a4, HIWORD(v60), HIWORD(v59), v40, &v57);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                int v50 = 0;
                cstdlib_strcpy(__dst, "tnpausedur");
                size_t v41 = cstdlib_strlen(__s1);
                if (v41 < 255 - cstdlib_strlen(__dst))
                {
                  cstdlib_strcat(__dst, __s1);
                  if ((paramc_ParamGetUInt(*(void *)(*a1 + 40), (uint64_t)__dst, (unsigned int *)&v50) & 0x80000000) != 0) {
                    int v50 = 0;
                  }
                }
                if (cstdlib_strstr(__s1, "spell"))
                {
                  unsigned int v42 = v57;
                  uint64_t v43 = v54;
                  if (HIWORD(v53))
                  {
                    uint64_t v44 = 0;
                    do
                    {
                      if ((__int16)v57 <= (__int16)(*(_WORD *)(v54 + v44 + 12) - v10)) {
                        break;
                      }
                      if (*(_DWORD *)(v54 + v44) == 31) {
                        int v50 = *(_DWORD *)(v54 + v44 + 24);
                      }
                      v44 += 32;
                    }
                    while (32 * HIWORD(v53) != v44);
                  }
                }
                else
                {
                  unsigned int v42 = v57;
                  uint64_t v43 = v54;
                }
                uint64_t LastTnMarkerUpToPos = hlp_Phrasing((uint64_t)a1, v61, v42, __s1, a3, a4, (unsigned __int16 *)&v60, v43, &v53, (unsigned __int16 *)&v53 + 1, v10, v50, (unsigned __int16 *)&v59, v12);
                if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
                  goto LABEL_25;
                }
                int v28 = (unsigned __int16)v60;
                HIWORD(v59) = v60;
                int v29 = v39;
                if (!(_WORD)v60) {
                  break;
                }
                continue;
              }
            }
            else
            {
              unsigned __int16 v38 = HIWORD(v59);
            }
            uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a3, a4, v38, (char *)&v59 + 2);
            if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
              goto LABEL_25;
            }
            int v28 = HIWORD(v59);
            if (!(_WORD)v60) {
              break;
            }
          }
          while (v28);
        }
        uint64_t LastTnMarkerUpToPos = hlp_InsertWordPhraseBoundaries((uint64_t)a1, a3, a4, 0, 0, 0);
      }
LABEL_25:
      uint64_t v8 = LastTnMarkerUpToPos;
      goto LABEL_26;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a3, a4);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    if (v56 > 0xA || ((1 << v56) & 0x610) == 0) {
      goto LABEL_24;
    }
    if (!v13) {
      ++v12;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v60, 1, 1, &v58, (char *)&v58 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1[7] + 168))(a3, a4, (unsigned __int16)v60, 2, 1, &v57, (char *)&v58 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1[7] + 176))(a3, a4, (unsigned __int16)v60, 5, &__s, (char *)&v58 + 2);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
    if ((unsigned __int16)v58 > v57) {
      break;
    }
    int v15 = (__int16)cstdlib_strlen(__s);
    int v16 = v57 - (unsigned __int16)v58;
    if (v15 > (__int16)(v57 - v58)) {
      int v16 = cstdlib_strlen(__s);
    }
    int v13 = 0;
    v12 += v16;
LABEL_24:
    uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a3, a4, (unsigned __int16)v60, &v60);
    if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
      goto LABEL_25;
    }
  }
  uint64_t v8 = 2315271857;
LABEL_26:
  uint64_t v17 = a1[17];
  if (v17) {
    heap_Free(*(void **)(*a1 + 8), v17);
  }
  a1[17] = 0;
  uint64_t v18 = a1[18];
  if (v18) {
    heap_Free(*(void **)(*a1 + 8), v18);
  }
  a1[18] = 0;
  uint64_t v19 = a1[19];
  if (v19) {
    heap_Free(*(void **)(*a1 + 8), v19);
  }
  a1[19] = 0;
  return v8;
}

uint64_t fe_phrasing_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62343, 1728);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2315264008;
  }
}

size_t doesWordEndWithComma(size_t result, const char *a2)
{
  *(_DWORD *)__s = 0;
  if (result)
  {
    uint64_t v3 = (char *)result;
    uint64_t result = cstdlib_strlen((const char *)result);
    if (result)
    {
      __int16 v4 = Utf8_Utf8NbrOfSymbols(a2);
      int v5 = (unsigned __int16)(v4 - 1);
      if (v4 != 1)
      {
        unsigned __int16 v6 = 0;
        do
        {
          unsigned __int16 v7 = v6;
          if ((utf8_getUTF8Char((uint64_t)a2, v6, __s) & 0x80000000) != 0) {
            break;
          }
          __int16 v8 = cstdlib_strlen(__s);
          if (cstdlib_strstr(v3, __s)) {
            return 1;
          }
          unsigned __int16 v6 = v7 + v8;
          --v5;
        }
        while (v5);
      }
      return 0;
    }
  }
  return result;
}

uint64_t fe_phrasing_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2315264001;
  }
  uint64_t result = 0;
  *a2 = &IFePhrasing;
  return result;
}

uint64_t hlp_ReadSildur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _WORD *a5, _DWORD *a6)
{
  *a5 = 0;
  *a6 = 0;
  if (!a4) {
    return 0;
  }
  __int16 v17 = 0;
  char __s1 = 0;
  __int16 v15 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 8, &v17);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (v17)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, a4, 8, 1, a5, &v15);
    if ((v12 & 0x80000000) != 0) {
      return v12;
    }
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 18, &v17);
  if ((v13 & 0x80000000) == 0)
  {
    if (v17)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, __int16 *))(*(void *)(a1 + 56)
                                                                                              + 176))(a2, a3, a4, 18, &__s1, &v15);
      if ((v13 & 0x80000000) == 0 && !cstdlib_strcmp(__s1, "external")) {
        *a6 = 1;
      }
    }
  }
  return v13;
}

uint64_t hlp_CopyWordRec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = 0;
  unsigned __int8 v11 = 0;
  int v19 = 0;
  __s = 0;
  int v17 = 0;
  __int16 v16 = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, v11, (char *)&v19 + 2);
    if ((result & 0x80000000) != 0) {
      break;
    }
    if (HIWORD(v19))
    {
      if (v11 <= 0x11u && ((1 << v11) & 0x20186) != 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a2, a3, a4, v11, 1, &v19, (char *)&v17 + 2);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v11 == 8 && *(_DWORD *)(a1 + 112) && (_WORD)v19)
        {
          __int16 v16 = 0;
          int v10 = 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56)
                                                                                                + 160))(a2, a3, a4, 8, 1, &v16, &v17);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, a5, v11, 1, &v19, &v17);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 176))(a2, a3, a4);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, char *, int *))(*(void *)(a1 + 56)
                                                                                                 + 160);
        __int16 v15 = cstdlib_strlen(__s);
        uint64_t result = v14(a2, a3, a5, v11, (unsigned __int16)(v15 + 1), __s, &v17);
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
    }
    unsigned int v13 = v11++;
    if (v13 >= 0x15)
    {
      if (v10 == 1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(a1 + 56) + 184))(a2, a3, a4, 7, (char *)&v19 + 2);
        if ((result & 0x80000000) == 0)
        {
          __int16 v16 = 3;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))(*(void *)(a1 + 56) + 160))(a2, a3, a4, 7, 1, &v16, &v17);
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t hlp_splitNLURangeTags(uint64_t *a1, char *__s, unsigned __int8 **a3, unsigned __int8 **a4)
{
  uint64_t v4 = 2315264010;
  if (!__s) {
    return 2315264007;
  }
  uint64_t v7 = *a1;
  __int16 v8 = *(void **)(*a1 + 8);
  size_t v9 = cstdlib_strlen(__s);
  int v10 = (char *)heap_Calloc(v8, 1, v9 + 1);
  if (v10)
  {
    unsigned __int8 v11 = (unsigned __int8 *)v10;
    cstdlib_strcpy(v10, __s);
    uint64_t v12 = *(void **)(v7 + 8);
    size_t v13 = cstdlib_strlen(__s);
    int v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
    if (!v14)
    {
      unsigned __int16 v112 = *(void **)(v7 + 8);
      uint64_t v113 = (uint64_t)v11;
LABEL_234:
      heap_Free(v112, v113);
      return v4;
    }
    __int16 v15 = (unsigned __int8 *)v14;
    uint64_t v128 = a4;
    cstdlib_strcpy(v14, __s);
    unsigned __int16 v16 = 0;
    int v17 = __s;
    do
    {
      if (hlp_NLUStrKeyLen(v17) >= 3)
      {
        unsigned int v18 = *v17 - 69;
        BOOL v19 = v18 > 0xE;
        int v20 = (1 << v18) & 0x4011;
        BOOL v21 = v19 || v20 == 0;
        if (!v21 && v17[1] == 95) {
          ++v16;
        }
      }
      int v17 = hlp_NLUStrNext(v17);
    }
    while (v17);
    if (!v16) {
      goto LABEL_235;
    }
    uint64_t v22 = heap_Calloc(*(void **)(v7 + 8), 8, v16);
    if (!v22)
    {
LABEL_233:
      heap_Free(*(void **)(v7 + 8), (uint64_t)v11);
      unsigned __int16 v112 = *(void **)(v7 + 8);
      uint64_t v113 = (uint64_t)v15;
      goto LABEL_234;
    }
    uint64_t v23 = v22;
    uint64_t v133 = __s;
    int v134 = 0;
    uint64_t v24 = __s;
    uint64_t v135 = v11;
    uint64_t v136 = v15;
    do
    {
      unsigned int v25 = hlp_NLUStrKeyLen(v24);
      if (v25 >= 3)
      {
        unsigned int v26 = *v24 - 69;
        BOOL v19 = v26 > 0xE;
        int v27 = (1 << v26) & 0x4011;
        BOOL v28 = v19 || v27 == 0;
        if (!v28 && v24[1] == 95)
        {
          unsigned int v29 = v25;
          uint64_t v30 = (char *)heap_Calloc(*(void **)(v7 + 8), 1, v25 - 1);
          if (!v30) {
            goto LABEL_227;
          }
          __int16 v31 = v30;
          cstdlib_strncpy(v30, v24 + 2, v29 - 2);
          int v32 = v134;
          if ((_WORD)v134)
          {
            uint64_t v33 = (unsigned __int16)v134;
            uint64_t v34 = (const char **)v23;
            uint64_t v35 = (unsigned __int16)v134;
            while (1)
            {
              if (!*v34)
              {
LABEL_28:
                unsigned __int8 v11 = v135;
                __int16 v15 = v136;
                int v32 = v134;
                goto LABEL_30;
              }
              if (!cstdlib_strcmp(*v34, v31)) {
                break;
              }
              ++v34;
              if (!--v35) {
                goto LABEL_28;
              }
            }
            heap_Free(*(void **)(v7 + 8), (uint64_t)v31);
            unsigned __int8 v11 = v135;
            __int16 v15 = v136;
          }
          else
          {
            uint64_t v33 = 0;
LABEL_30:
            *(void *)(v23 + 8 * v33) = v31;
            int v134 = v32 + 1;
          }
        }
      }
      uint64_t v24 = hlp_NLUStrNext(v24);
    }
    while (v24);
    int v36 = *(uint64_t **)(v7 + 8);
    if (!(_WORD)v134)
    {
      heap_Free(v36, v23);
      goto LABEL_235;
    }
    uint64_t v137 = heap_Realloc(v36, v23, 8 * (unsigned __int16)v134);
    if (v137)
    {
      uint64_t v37 = heap_Calloc(*(void **)(v7 + 8), 2, (unsigned __int16)v134);
      if (v37)
      {
        uint64_t v127 = v37;
        unsigned __int16 v38 = v133;
        do
        {
          unsigned int v39 = hlp_NLUStrKeyLen(v38);
          if (v39 >= 3)
          {
            unsigned int v40 = *v38 - 69;
            BOOL v19 = v40 > 0xE;
            int v41 = (1 << v40) & 0x4011;
            BOOL v42 = v19 || v41 == 0;
            if (!v42 && v38[1] == 95)
            {
              uint64_t v43 = 0;
              size_t v44 = (unsigned __int16)(v39 - 2);
              do
              {
                unsigned int v45 = *(const char **)(v137 + 8 * v43);
                if (!v45) {
                  break;
                }
                if (!cstdlib_strncmp(v45, v38 + 2, v44))
                {
                  if ((v43 & 0x8000) == 0) {
                    ++*(_WORD *)(v127 + 2 * v43);
                  }
                  break;
                }
                ++v43;
              }
              while ((unsigned __int16)v134 != v43);
            }
          }
          unsigned __int16 v38 = hlp_NLUStrNext(v38);
        }
        while (v38);
        uint64_t v46 = heap_Calloc(*(void **)(v7 + 8), 8, (unsigned __int16)v134);
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = 0;
          __int16 v49 = v133;
          while (1)
          {
            uint64_t v50 = heap_Calloc(*(void **)(v7 + 8), 8, *(unsigned __int16 *)(v127 + 2 * v48));
            *(void *)(v47 + 8 * v48) = v50;
            if (!v50) {
              break;
            }
            if ((unsigned __int16)v134 == ++v48)
            {
              uint64_t v51 = heap_Calloc(*(void **)(v7 + 8), 2, (unsigned __int16)v134);
              if (v51)
              {
                uint64_t v131 = v51;
                uint64_t v129 = v47;
                __int16 v52 = v133;
                while (1)
                {
                  unsigned int v53 = hlp_NLUStrKeyLen(v52);
                  if (v53 >= 3)
                  {
                    unsigned int v54 = *v52 - 69;
                    BOOL v19 = v54 > 0xE;
                    int v55 = (1 << v54) & 0x4011;
                    if (!v19 && v55 != 0 && v52[1] == 95)
                    {
                      int KeyIdx = hlp_getKeyIdx(v137, (unsigned __int16)v134, v52 + 2, (unsigned __int16)(v53 - 2));
                      if ((KeyIdx & 0x80000000) == 0)
                      {
                        uint64_t v58 = (unsigned __int16)KeyIdx;
                        int v59 = *(char **)(v129 + 8 * (unsigned __int16)KeyIdx);
                        int v60 = hlp_NLUStrKeyValue(v52);
                        uint64_t v61 = (const char *)v60;
                        unsigned int v62 = v60 ? hlp_NLUStrLength((char *)v60) : 0;
                        if (!hlp_checkValExist(v59, *(unsigned __int16 *)(v131 + 2 * v58), v61, v62))
                        {
                          uint64_t v63 = (char *)heap_Calloc(*(void **)(v7 + 8), 1, v62 + 1);
                          if (!v63)
                          {
                            unsigned __int8 v11 = v135;
                            __int16 v15 = v136;
                            unsigned __int16 v115 = v134;
                            uint64_t v47 = v129;
                            uint64_t v66 = v131;
                            goto LABEL_210;
                          }
                          uint64_t v64 = v63;
                          if (v61) {
                            cstdlib_strncpy(v63, v61, v62);
                          }
                          uint64_t v65 = *(unsigned __int16 *)(v131 + 2 * v58);
                          *(void *)&v59[8 * v65] = v64;
                          *(_WORD *)(v131 + 2 * v58) = v65 + 1;
                          __int16 v49 = v133;
                        }
                      }
                    }
                  }
                  __int16 v52 = hlp_NLUStrNext(v52);
                  if (!v52)
                  {
                    unsigned __int8 v11 = v135;
                    __int16 v15 = v136;
                    uint64_t v47 = v129;
                    uint64_t v66 = v131;
                    do
                    {
                      uint64_t v67 = heap_Realloc(*(uint64_t **)(v7 + 8), *(void *)(v129 + 8 * (void)v52), 8 * *(unsigned __int16 *)(v131 + 2 * (void)v52));
                      if (!v67) {
                        goto LABEL_209;
                      }
                      *(void *)(v129 + 8 * (void)v52++) = v67;
                    }
                    while ((char *)(unsigned __int16)v134 != v52);
                    uint64_t v68 = 0;
                    while (!*(_WORD *)(v66 + 2 * v68))
                    {
LABEL_201:
                      if (++v68 == (unsigned __int16)v134)
                      {
                        uint64_t v4 = 0;
                        goto LABEL_209;
                      }
                    }
                    unint64_t v69 = 0;
                    uint64_t v132 = v68;
                    while (2)
                    {
                      uint64_t v70 = *(const char **)(v137 + 8 * v68);
                      uint64_t v71 = *(const char **)(*(void *)(v47 + 8 * v68) + 8 * v69);
                      unsigned __int16 v139 = 0;
                      __s2 = 0;
                      if (v71) {
                        unsigned int v72 = (unsigned __int16)cstdlib_strlen(v71);
                      }
                      else {
                        unsigned int v72 = 0;
                      }
                      uint64_t v73 = *(void **)(v7 + 8);
                      size_t v74 = cstdlib_strlen(v70);
                      uint64_t v75 = (char *)heap_Calloc(v73, 1, v74 + 3);
                      if (!v75)
                      {
                        uint64_t v90 = 0;
                        uint64_t v94 = 0;
                        unsigned __int8 v11 = v135;
                        uint64_t v68 = v132;
                        goto LABEL_158;
                      }
                      uint64_t v76 = v75;
                      cstdlib_strcpy(v75, "S_");
                      cstdlib_strcat(v76, v70);
                      uint64_t v77 = *(void **)(v7 + 8);
                      size_t v78 = cstdlib_strlen(v70);
                      uint64_t v79 = (char *)heap_Calloc(v77, 1, v78 + 3);
                      unsigned int v80 = v79;
                      if (v79)
                      {
                        cstdlib_strcpy(v79, "I_");
                        cstdlib_strcat(v80, v70);
                        uint64_t v81 = *(void **)(v7 + 8);
                        size_t v82 = cstdlib_strlen(v70);
                        uint64_t v83 = (char *)heap_Calloc(v81, 1, v82 + 3);
                        uint64_t v84 = v83;
                        if (!v83)
                        {
                          uint64_t v90 = 0;
                          uint64_t v94 = 0;
                          goto LABEL_152;
                        }
                        cstdlib_strcpy(v83, "E_");
                        cstdlib_strcat(v84, v70);
                        if (hlp_NLUStrFind(v49, v76, &__s2, &v139))
                        {
                          int v85 = v139;
                          if (v71 && !v139)
                          {
                            if (cstdlib_strcmp(v71, " "))
                            {
                              int v85 = v139;
                              goto LABEL_90;
                            }
LABEL_94:
                            if (hlp_NLUStrFind(v49, v80, &__s2, &v139))
                            {
                              int v86 = v139;
                              if (v71 && !v139)
                              {
                                if (cstdlib_strcmp(v71, " "))
                                {
                                  int v86 = v139;
                                  goto LABEL_99;
                                }
LABEL_103:
                                if (hlp_NLUStrFind(v49, v84, &__s2, &v139))
                                {
                                  int v87 = v139;
                                  if (v71 && !v139)
                                  {
                                    if (cstdlib_strcmp(v71, " "))
                                    {
                                      int v87 = v139;
                                      goto LABEL_108;
                                    }
LABEL_112:
                                    uint64_t v88 = *(void **)(v7 + 8);
                                    size_t v89 = cstdlib_strlen(v49);
                                    uint64_t v90 = (char *)heap_Calloc(v88, 1, v89 + 1);
                                    if (v90)
                                    {
                                      uint64_t v91 = v49;
                                      uint64_t v92 = *(void **)(v7 + 8);
                                      size_t v93 = cstdlib_strlen(v91);
                                      uint64_t v94 = (char *)heap_Calloc(v92, 1, v93 + 1);
                                      if (v94)
                                      {
                                        if (v76 && !v80 && !v84)
                                        {
                                          cstdlib_strcpy(v90, "S_");
                                          cstdlib_strcat(v90, v70);
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              uint64_t v95 = v94;
                                              unsigned int v96 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              uint64_t v95 = v94;
                                              unsigned int v96 = ":";
                                            }
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "I_");
                                            uint64_t v95 = v94;
                                            unsigned int v96 = v70;
                                          }
                                          cstdlib_strcat(v95, v96);
                                          uint64_t v84 = 0;
                                          unsigned int v80 = 0;
                                          goto LABEL_152;
                                        }
                                        if (v76) {
                                          BOOL v97 = 1;
                                        }
                                        else {
                                          BOOL v97 = v80 == 0;
                                        }
                                        char v98 = !v97;
                                        if (!v97 && !v84)
                                        {
                                          cstdlib_strcpy(v90, "I_");
                                          cstdlib_strcat(v90, v70);
                                          uint64_t v68 = v132;
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              unsigned int v99 = v94;
                                              unint64_t v100 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              unsigned int v99 = v94;
                                              unint64_t v100 = ":";
                                            }
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "I_");
                                            unsigned int v99 = v94;
                                            unint64_t v100 = v70;
                                          }
                                          cstdlib_strcat(v99, v100);
                                          uint64_t v84 = 0;
                                          goto LABEL_182;
                                        }
                                        if (!v76 && !v80 && v84)
                                        {
                                          cstdlib_strcpy(v90, "I_");
                                          cstdlib_strcat(v90, v70);
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            uint64_t v47 = v129;
                                            uint64_t v68 = v132;
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              uint64_t v101 = v94;
                                              int v102 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              uint64_t v101 = v94;
                                              int v102 = ":";
                                            }
                                            cstdlib_strcat(v101, v102);
                                            unsigned __int8 v11 = v135;
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "E_");
                                            cstdlib_strcat(v94, v70);
                                            unsigned __int8 v11 = v135;
                                            uint64_t v47 = v129;
                                            uint64_t v68 = v132;
                                          }
LABEL_157:
                                          heap_Free(*(void **)(v7 + 8), (uint64_t)v84);
LABEL_158:
                                          if (v71 && !cstdlib_strcmp(v71, " ")) {
                                            uint64_t v71 = 0;
                                          }
                                          __int16 v15 = v136;
                                          hlp_NLUStrRemoveRangeKey(v11, v70, v71);
                                          hlp_NLUStrRemoveRangeKey(v136, v70, v71);
                                          int v105 = (unsigned __int16)cstdlib_strlen((const char *)v11);
                                          if (v105 && v11[v105 - 1] != 59) {
                                            cstdlib_strcat((char *)v11, ";");
                                          }
                                          cstdlib_strcat((char *)v11, v90);
                                          int v106 = (unsigned __int16)cstdlib_strlen((const char *)v136);
                                          uint64_t v66 = v131;
                                          if (v106 && v136[v106 - 1] != 59) {
                                            cstdlib_strcat((char *)v136, ";");
                                          }
                                          cstdlib_strcat((char *)v136, v94);
                                          if (v90) {
                                            heap_Free(*(void **)(v7 + 8), (uint64_t)v90);
                                          }
                                          if (v94) {
                                            heap_Free(*(void **)(v7 + 8), (uint64_t)v94);
                                          }
                                          ++v69;
                                          __int16 v49 = v133;
                                          if (v69 >= *(unsigned __int16 *)(v131 + 2 * v68)) {
                                            goto LABEL_201;
                                          }
                                          continue;
                                        }
                                        if (v76 && v84)
                                        {
                                          cstdlib_strcpy(v90, "S_");
                                          cstdlib_strcat(v90, v70);
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              uint64_t v103 = v94;
                                              uint64_t v104 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              uint64_t v103 = v94;
                                              uint64_t v104 = ":";
                                            }
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "E_");
                                            uint64_t v103 = v94;
                                            uint64_t v104 = v70;
                                          }
                                          cstdlib_strcat(v103, v104);
LABEL_152:
                                          unsigned __int8 v11 = v135;
LABEL_153:
                                          heap_Free(*(void **)(v7 + 8), (uint64_t)v76);
LABEL_154:
                                          uint64_t v68 = v132;
                                          if (v80) {
LABEL_155:
                                          }
                                            heap_Free(*(void **)(v7 + 8), (uint64_t)v80);
                                          uint64_t v47 = v129;
                                          if (v84) {
                                            goto LABEL_157;
                                          }
                                          goto LABEL_158;
                                        }
                                        if (v76 && v80 && !v84)
                                        {
                                          cstdlib_strcpy(v90, "S_");
                                          cstdlib_strcat(v90, v70);
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              uint64_t v107 = v94;
                                              unsigned __int16 v108 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "I_");
                                              cstdlib_strcat(v94, v70);
                                              uint64_t v107 = v94;
                                              unsigned __int16 v108 = ":";
                                            }
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "I_");
                                            uint64_t v107 = v94;
                                            unsigned __int16 v108 = v70;
                                          }
                                          cstdlib_strcat(v107, v108);
                                          goto LABEL_122;
                                        }
                                        char v109 = v98 ^ 1;
                                        if (!v84) {
                                          char v109 = 1;
                                        }
                                        if ((v109 & 1) == 0)
                                        {
                                          cstdlib_strcpy(v90, "I_");
                                          cstdlib_strcat(v90, v70);
                                          if (v72)
                                          {
                                            cstdlib_strcat(v90, ":");
                                            uint64_t v68 = v132;
                                            if (v71)
                                            {
                                              cstdlib_strcat(v90, v71);
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              cstdlib_strcat(v94, ":");
                                              int v110 = v94;
                                              __int16 v111 = v71;
                                            }
                                            else
                                            {
                                              cstdlib_strcpy(v94, "E_");
                                              cstdlib_strcat(v94, v70);
                                              int v110 = v94;
                                              __int16 v111 = ":";
                                            }
                                            cstdlib_strcat(v110, v111);
LABEL_182:
                                            unsigned __int8 v11 = v135;
                                          }
                                          else
                                          {
                                            cstdlib_strcpy(v94, "E_");
                                            cstdlib_strcat(v94, v70);
                                            unsigned __int8 v11 = v135;
                                            uint64_t v68 = v132;
                                          }
                                          goto LABEL_155;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v94 = 0;
                                    }
                                    unsigned __int8 v11 = v135;
                                    if (v76) {
                                      goto LABEL_153;
                                    }
                                    goto LABEL_154;
                                  }
LABEL_108:
                                  if (v71 && v87 == v72 && !cstdlib_strncmp(v71, __s2, v72)) {
                                    goto LABEL_112;
                                  }
                                }
                                heap_Free(*(void **)(v7 + 8), (uint64_t)v84);
                                uint64_t v84 = 0;
                                goto LABEL_112;
                              }
LABEL_99:
                              if (v71 && v86 == v72 && !cstdlib_strncmp(v71, __s2, v72)) {
                                goto LABEL_103;
                              }
                            }
                            heap_Free(*(void **)(v7 + 8), (uint64_t)v80);
                            unsigned int v80 = 0;
                            goto LABEL_103;
                          }
LABEL_90:
                          if (v71 && v85 == v72 && !cstdlib_strncmp(v71, __s2, v72)) {
                            goto LABEL_94;
                          }
                        }
                        heap_Free(*(void **)(v7 + 8), (uint64_t)v76);
                        uint64_t v76 = 0;
                        goto LABEL_94;
                      }
                      break;
                    }
                    uint64_t v90 = 0;
                    uint64_t v94 = 0;
LABEL_122:
                    uint64_t v84 = 0;
                    goto LABEL_152;
                  }
                }
              }
              break;
            }
          }
          uint64_t v66 = 0;
LABEL_209:
          unsigned __int16 v115 = v134;
LABEL_210:
          uint64_t v116 = 0;
          if ((v115 & 0xFFFE) != 0) {
            uint64_t v117 = v115;
          }
          else {
            uint64_t v117 = 1;
          }
          do
          {
            uint64_t v118 = *(void *)(v47 + 8 * v116);
            if (v118)
            {
              if (v66)
              {
                unsigned __int16 v119 = *(_WORD *)(v66 + 2 * v116);
                if (v119)
                {
                  for (unint64_t i = 0; i < v119; ++i)
                  {
                    uint64_t v121 = *(void *)(*(void *)(v47 + 8 * v116) + 8 * i);
                    if (v121)
                    {
                      heap_Free(*(void **)(v7 + 8), v121);
                      unsigned __int16 v119 = *(_WORD *)(v66 + 2 * v116);
                    }
                  }
                  uint64_t v118 = *(void *)(v47 + 8 * v116);
                }
              }
              heap_Free(*(void **)(v7 + 8), v118);
            }
            ++v116;
          }
          while (v116 != v117);
          heap_Free(*(void **)(v7 + 8), v47);
          uint64_t v122 = v127;
          if (v66) {
            heap_Free(*(void **)(v7 + 8), v66);
          }
        }
        else
        {
          uint64_t v122 = v127;
        }
        heap_Free(*(void **)(v7 + 8), v122);
        uint64_t v23 = v137;
LABEL_227:
        unsigned __int16 v114 = v134;
        if (!(_WORD)v134) {
          goto LABEL_232;
        }
LABEL_228:
        uint64_t v123 = 0;
        uint64_t v124 = v114;
        do
        {
          uint64_t v125 = *(void *)(v23 + 8 * v123);
          if (v125) {
            heap_Free(*(void **)(v7 + 8), v125);
          }
          ++v123;
        }
        while (v124 != v123);
LABEL_232:
        heap_Free(*(void **)(v7 + 8), v23);
        if (v4) {
          goto LABEL_233;
        }
LABEL_235:
        uint64_t v4 = 0;
        *a3 = v11;
        char *v128 = v15;
        return v4;
      }
      uint64_t v23 = v137;
    }
    unsigned __int16 v114 = v134;
    goto LABEL_228;
  }
  return v4;
}

uint64_t hlp_GetSubPosForSEPX(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5, unsigned int a6, int a7, char **a8)
{
  __int16 v15 = (char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, a6 + 1);
  *a8 = v15;
  if (!v15) {
    return 2315264010;
  }
  if (a2 >= a3)
  {
    __int16 v18 = 1;
    if (a7) {
      goto LABEL_8;
    }
LABEL_17:
    LOWORD(v22) = 0;
    if (a6 && v18)
    {
      uint64_t v22 = 0;
      while (a5[v22] != 45 || --v18)
      {
        if (++v22 >= (unint64_t)a6) {
          goto LABEL_27;
        }
      }
      __int16 v18 = 0;
    }
LABEL_27:
    if ((a6 - 1 == (unsigned __int16)v22) == v18)
    {
      size_t v24 = (unsigned __int16)v22;
LABEL_30:
      uint64_t v23 = a5;
      goto LABEL_31;
    }
LABEL_29:
    size_t v24 = a6;
    goto LABEL_30;
  }
  unsigned __int16 v16 = (unsigned __int8 *)(a4 + a2);
  unint64_t v17 = a3 - (unint64_t)a2;
  __int16 v18 = 1;
  do
  {
    int v19 = *v16++;
    if (v19 == 45) {
      ++v18;
    }
    --v17;
  }
  while (v17);
  if (!a7) {
    goto LABEL_17;
  }
LABEL_8:
  LOWORD(v20) = a6 - 1;
  if ((_WORD)a6 != 1 && v18)
  {
    uint64_t v20 = (unsigned __int16)(a6 - 1);
    while (a5[v20] != 45 || --v18)
    {
      if (!(_WORD)--v20) {
        goto LABEL_24;
      }
    }
    goto LABEL_25;
  }
LABEL_24:
  if (v18) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v23 = &a5[(unsigned __int16)v20 + 1];
  size_t v24 = (int)((~(_WORD)v20 | 0xFFFF0000) + a6);
LABEL_31:
  cstdlib_strncpy(v15, v23, v24);
  return 0;
}

uint64_t hlp_UpdateDomain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, unsigned int a6, unsigned int a7, unsigned __int16 *a8, char *a9)
{
  unsigned int v13 = a4;
  unsigned __int16 v30 = 0;
  int v29 = 0;
  __int16 v28 = 0;
  __src = 0;
  *a8 = 0;
  unsigned __int16 v17 = *a5;
  if (*a5)
  {
    unsigned int v24 = a4;
    unsigned __int16 v30 = *a5;
    unsigned __int16 v27 = 0;
    unsigned __int16 v26 = 0;
    goto LABEL_3;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 104))(a2, a3, 2, a4, &v30);
  if ((v21 & 0x80000000) == 0)
  {
    unsigned int v24 = v13;
    unsigned __int16 v17 = v30;
    unsigned __int16 v27 = 0;
    unsigned __int16 v26 = 0;
    if (v30)
    {
      do
      {
LABEL_3:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v17, 0, 1, &v29, &v28);
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
        uint64_t v19 = v30;
        if (v29 == 5)
        {
          *a5 = v30;
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a2, a3);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 56) + 168))(a2, a3, v30, 2, 1, &v26, &v28);
          if ((v18 & 0x80000000) != 0) {
            return v18;
          }
          char v20 = 0;
          uint64_t v19 = v30;
          if (v27 <= a6 && v26 >= a7)
          {
            *a8 = v30;
            char v20 = 1;
          }
        }
        else
        {
          char v20 = 0;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a2, a3, v19, &v30);
        if ((v21 & 0x80000000) != 0) {
          return v21;
        }
        unsigned __int16 v17 = v30;
        if (v30) {
          char v22 = v20;
        }
        else {
          char v22 = 1;
        }
      }
      while ((v22 & 1) == 0 && v27 <= a6);
      if ((v20 & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(*(void *)(a1 + 56)
                                                                                             + 176))(a2, a3, *a8, 4, &__src, &v28);
      if ((v21 & 0x80000000) == 0)
      {
        cstdlib_strncpy(a9, __src, 0x100uLL);
        a9[256] = 0;
        if (!cstdlib_strcmp(a9, "phon")) {
          return hlp_GetLastTnMarkerUpToPos(a1, a2, a3, v24, v27, a9);
        }
      }
    }
    else
    {
LABEL_24:
      cstdlib_strncpy(a9, "normal", 0x100uLL);
      a9[256] = 0;
    }
  }
  return v21;
}

size_t hlp_GetDomainPauseDur(uint64_t a1, char *a2, int *a3, _DWORD *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v11 = 0;
  *a3 = 0;
  *a4 = 0;
  cstdlib_strcpy(__dst, "tnpausedur");
  size_t v8 = cstdlib_strlen(a2);
  size_t result = cstdlib_strlen(__dst);
  if (v8 < 255 - result)
  {
    cstdlib_strcat(__dst, a2);
    size_t result = paramc_ParamGetUInt(*(void *)(*(void *)a1 + 40), (uint64_t)__dst, (unsigned int *)&v11);
    if ((result & 0x80000000) != 0 || !v11)
    {
      size_t result = (size_t)cstdlib_strstr(a2, "spell");
      if (result) {
        int v10 = 100;
      }
      else {
        int v10 = 200;
      }
      *a3 = v10;
    }
    else
    {
      *a3 = v11;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t hlp_GetLastTnMarkerUpToPos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char *a6)
{
  uint64_t v15 = 0;
  unsigned __int16 v14 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 56) + 176))(a2, a3, a4, 1, &v15, &v14);
  if ((result & 0x80000000) == 0)
  {
    int v9 = *(_DWORD *)(v15 + 12);
    cstdlib_strncpy(a6, "normal", 0xFFuLL);
    a6[255] = 0;
    uint64_t v10 = v14;
    if (v14)
    {
      int v11 = (_DWORD *)(v15 + 12);
      uint64_t v12 = (_DWORD *)(v15 + 12);
      do
      {
        int v13 = *v12;
        v12 += 8;
        if (a5 < (__int16)(v13 - v9)) {
          break;
        }
        if (*(v11 - 3) == 21)
        {
          cstdlib_strncpy(a6, *(const char **)(v11 + 3), 0xFFuLL);
          a6[255] = 0;
        }
        int v11 = v12;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  return result;
}

uint64_t hlp_Remap(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, _WORD *a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned __int16 v31 = a5;
  __int16 v30 = 0;
  int v29 = 0;
  char __s1 = 0;
  int v27 = 0;
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  unsigned int v25 = 0;
  unsigned __int16 v24 = -1;
  cstdlib_strcpy(__dst, "");
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(a1[7] + 120))(a2, a3, a5, &v31);
  if ((v14 & 0x80000000) == 0)
  {
    unsigned __int16 v15 = v31;
    if (v31)
    {
      while (1)
      {
        uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(a1[7] + 168))(a2, a3, v15, 0, 1, &v29, &v30);
        if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
          return LastTnMarkerUpToPos;
        }
        if (v29 == 5) {
          break;
        }
LABEL_38:
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(a1[7] + 120))(a2, a3, v31, &v31);
        if ((v14 & 0x80000000) == 0)
        {
          unsigned __int16 v15 = v31;
          if (v31) {
            continue;
          }
        }
        return v14;
      }
      uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1[7] + 176))(a2, a3, v31, 4, &__s1, &v30);
      if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
        return LastTnMarkerUpToPos;
      }
      if (!cstdlib_strcmp(__s1, "phon"))
      {
        uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1[7] + 168))(a2, a3, v31, 1, 1, (char *)&v27 + 2, &v30);
        if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
          return LastTnMarkerUpToPos;
        }
        uint64_t LastTnMarkerUpToPos = hlp_GetLastTnMarkerUpToPos((uint64_t)a1, a2, a3, a4, SHIWORD(v27), v32);
        if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
          return LastTnMarkerUpToPos;
        }
        char __s1 = v32;
      }
      cstdlib_strcpy(__dst, "phrasing_");
      if (cstdlib_strlen(__s1) + 11 > 0xFF) {
        unsigned __int16 v17 = "normal";
      }
      else {
        unsigned __int16 v17 = __s1;
      }
      cstdlib_strcat(__dst, v17);
      uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(void, void, const char *, char *, unsigned char *, unsigned char *, unsigned char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", __dst, &__c[3], &__c[1], __c);
      if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
        return LastTnMarkerUpToPos;
      }
      cstdlib_strcpy(__dst, "phrasing_");
      if (cstdlib_strlen(a6) + 11 > 0xFF) {
        uint64_t v18 = "normal";
      }
      else {
        uint64_t v18 = a6;
      }
      cstdlib_strcat(__dst, v18);
      uint64_t v14 = (*(uint64_t (**)(void, void, const char *, char *, char ***, unsigned __int16 *, unsigned char *))(a1[13] + 96))(a1[11], a1[12], "fecfg", __dst, &v25, &v24, __c);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      if (*(_WORD *)&__c[1])
      {
        uint64_t v19 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
        if (v19) {
          *uint64_t v19 = 0;
        }
      }
      if (v24)
      {
        char v20 = cstdlib_strchr(*v25, __c[0]);
        if (v20) {
          *char v20 = 0;
        }
      }
      if (cstdlib_strcmp(a6, __s1))
      {
        int v21 = *(unsigned __int16 *)&__c[1];
        int v22 = v24;
        if (*(unsigned __int16 *)&__c[1] == 1 && !v24)
        {
          if (!cstdlib_strcmp(a6, **(const char ***)&__c[3])) {
            goto LABEL_36;
          }
          int v22 = v24;
          int v21 = *(unsigned __int16 *)&__c[1];
        }
        if (v22 != 1 || v21)
        {
LABEL_33:
          if (v21 != 1 || v22 != 1 || cstdlib_strcmp(**(const char ***)&__c[3], *v25)) {
            return v14;
          }
          goto LABEL_36;
        }
        if (cstdlib_strcmp(__s1, *v25))
        {
          int v21 = *(unsigned __int16 *)&__c[1];
          int v22 = v24;
          goto LABEL_33;
        }
      }
LABEL_36:
      uint64_t LastTnMarkerUpToPos = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[7] + 168))(a2, a3, v31, 2, 1, &v27, &v30);
      if ((LastTnMarkerUpToPos & 0x80000000) != 0) {
        return LastTnMarkerUpToPos;
      }
      *a7 = v27;
      goto LABEL_38;
    }
  }
  return v14;
}

uint64_t hlp_Phrasing(uint64_t a1, char *a2, unsigned int a3, const char *a4, uint64_t a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, _WORD *a9, unsigned __int16 *a10, __int16 a11, int a12, unsigned __int16 *a13, unsigned __int16 a14)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  int v113 = 0;
  int v114 = 0;
  unsigned int v112 = 0;
  int v110 = 0;
  __s2 = 0;
  __s = 0;
  char v109 = 0;
  int v107 = 0;
  __int16 v106 = 0;
  int v105 = 0;
  unsigned __int16 v104 = 0;
  unsigned __int16 v103 = *a7;
  unsigned __int16 v21 = v103;
  cstdlib_strcpy(__dst, "phrasing");
  unsigned __int16 v100 = cstdlib_strlen(__dst);
  cstdlib_strcpy(*(char **)(a1 + 136), "");
  cstdlib_strcpy(*(char **)(a1 + 144), "");
  cstdlib_strcpy(*(char **)(a1 + 152), "");
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                              + 168))(a5, a6, v103, 1, 1, (char *)&v113 + 2, (char *)&v114 + 2);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  uint64_t v99 = a8;
  int v101 = HIWORD(v113);
  if (v103 && HIWORD(v113) < a3)
  {
    int v23 = 1;
    do
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v21, 0, 1, &v112, (char *)&v114 + 2);
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      if (v112 <= 0xA && ((1 << v112) & 0x610) != 0)
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v103, 2, 1, &v113, (char *)&v114 + 2);
        if ((v22 & 0x80000000) != 0) {
          return v22;
        }
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                            + 176))(a5, a6, v103, 5, &__s2, (char *)&v114 + 2);
        if ((v22 & 0x80000000) != 0) {
          return v22;
        }
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56)
                                                                                            + 176))(a5, a6, v103, 9, &v110, (char *)&v114 + 2);
        if ((v22 & 0x80000000) != 0) {
          return v22;
        }
        if (!v23)
        {
          __int16 v25 = HIWORD(v113);
          __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a2, HIWORD(v113));
          cstdlib_strncat(*(char **)(a1 + 136), &a2[HIWORD(v113) - (unsigned __int16)(v25 - PreviousUtf8Offset)], (unsigned __int16)(v25 - PreviousUtf8Offset));
          cstdlib_strcat(*(char **)(a1 + 144), " ");
          cstdlib_strcat(*(char **)(a1 + 152), " ");
        }
        if (HIWORD(v113) > (unsigned __int16)v113) {
          return 2315271857;
        }
        cstdlib_strncat(*(char **)(a1 + 136), &a2[HIWORD(v113)], (unsigned __int16)v113 - (unint64_t)HIWORD(v113));
        cstdlib_strcat(*(char **)(a1 + 144), __s2);
        cstdlib_strncat(*(char **)(a1 + 152), v110, 1uLL);
        __int16 v27 = cstdlib_strlen(__s2);
        int v28 = (__int16)(v113 - HIWORD(v113));
        size_t v29 = cstdlib_strlen(__s2);
        if (v28 >= v27)
        {
          if (v28 > (__int16)v29)
          {
            int v33 = Utf8_LengthInUtf8chars((unint64_t)&a2[HIWORD(v113)], (unsigned __int16)v113 - HIWORD(v113));
            int v34 = v33 - cstdlib_strlen(__s2);
            if (v34 >= 1)
            {
              int v35 = (unsigned __int16)v34;
              if ((_WORD)v34)
              {
                do
                {
                  cstdlib_strcat(*(char **)(a1 + 144), "~");
                  --v35;
                }
                while (v35);
              }
            }
            int v36 = Utf8_LengthInUtf8chars((unint64_t)&a2[HIWORD(v113)], (unsigned __int16)v113 - HIWORD(v113));
            if (v36 > 1)
            {
              int v37 = (unsigned __int16)(v36 - 1);
              if ((_WORD)v36 != 1)
              {
                do
                {
                  cstdlib_strncat(*(char **)(a1 + 152), v110, 1uLL);
                  --v37;
                }
                while (v37);
              }
            }
          }
        }
        else
        {
          if (v29 - (unsigned __int16)v113 + HIWORD(v113))
          {
            int v30 = 0;
            do
            {
              cstdlib_strcat(*(char **)(a1 + 136), "~");
              ++v30;
              size_t v31 = cstdlib_strlen(__s2);
            }
            while (v31 - (unsigned __int16)v113 + HIWORD(v113) > (unsigned __int16)v30);
          }
          if (cstdlib_strlen(__s2) != 1)
          {
            int v32 = 0;
            do
            {
              cstdlib_strncat(*(char **)(a1 + 152), v110, 1uLL);
              ++v32;
            }
            while (cstdlib_strlen(__s2) - 1 > (unsigned __int16)v32);
          }
        }
        int v23 = 0;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 120))(a5, a6, v103, &v103);
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      if (!v103) {
        break;
      }
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      unsigned __int16 v21 = v103;
      if (!v103) {
        break;
      }
    }
    while (HIWORD(v113) < a3);
  }
  uint64_t v22 = (*(uint64_t (**)(void, void, const char *, void, void))(*(void *)(a1 + 104) + 104))(*(void *)(a1 + 88), *(void *)(a1 + 96), a4, *(void *)(a1 + 136), a14);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L1: %s", v38, v39, v40, (uint64_t)__dst);
  int v41 = *(uint64_t (**)(void, void, void, const char *, void))(*(void *)(a1 + 80) + 120);
  BOOL v42 = *(const char **)(a1 + 136);
  unsigned __int16 v43 = cstdlib_strlen(v42);
  uint64_t v22 = v41(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, v42, v43);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L2: %s", v44, v45, v46, (uint64_t)__dst);
  uint64_t v47 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 80) + 120);
  uint64_t v48 = *(const char **)(a1 + 144);
  unsigned __int16 v49 = cstdlib_strlen(v48);
  uint64_t v22 = v47(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, v48, v49);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s L5: %s", v50, v51, v52, (uint64_t)__dst);
  unsigned int v53 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 80) + 120);
  unsigned int v54 = *(const char **)(a1 + 152);
  unsigned __int16 v55 = cstdlib_strlen(v54);
  uint64_t v22 = v53(*(void *)(a1 + 64), *(void *)(a1 + 72), 4, v54, v55);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  if (cstdlib_strcmp(a4, "normal") && cstdlib_strlen(a4) + v100 + 2 <= 0xFF)
  {
    cstdlib_strcat(__dst, "_");
    cstdlib_strcat(__dst, a4);
  }
  if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), __dst) & 0x80000000) != 0)
  {
    __dst[v100] = 0;
    (*(void (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), __dst);
  }
  uint64_t v22 = (*(uint64_t (**)(void, void, void, unsigned char **, char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, &v109, (char *)&v107 + 2);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  v109[HIWORD(v107)] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s O1: %s", v56, v57, v58, (uint64_t)__dst);
  uint64_t v22 = (*(uint64_t (**)(void, void, uint64_t, char **, char *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, &__s, (char *)&v107 + 2);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  __s[HIWORD(v107)] = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PHRASING", 5, 0, (uint64_t)"%s O3: %s", v59, v60, v61, (uint64_t)__dst);
  if (!v101)
  {
    if (cstdlib_strchr(__s, 87))
    {
      uint64_t v70 = cstdlib_strrchr(a2, 63);
      if (v70)
      {
        if (v70 != a2 && *(v70 - 1) != 32) {
          *uint64_t v70 = 46;
        }
      }
    }
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56)
                                                                                              + 168))(a5, a6, *a7, 1, 1, (char *)&v113 + 2, (char *)&v114 + 2);
  if ((v22 & 0x80000000) != 0) {
    return v22;
  }
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a5, a6, *a7, &v104);
  if ((v62 & 0x80000000) == 0)
  {
    if (!v104) {
      goto LABEL_63;
    }
    uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
    if ((v62 & 0x80000000) != 0) {
      return v62;
    }
    unsigned __int16 v63 = v104;
    if (v104)
    {
      while (v112 > 0xA || ((1 << v112) & 0x610) == 0)
      {
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 56) + 136))(a5, a6, v63, &v104);
        if ((v62 & 0x80000000) != 0) {
          return v62;
        }
        if (v104)
        {
          uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
          if ((v62 & 0x80000000) != 0) {
            return v62;
          }
          unsigned __int16 v63 = v104;
          if (v104) {
            continue;
          }
        }
        goto LABEL_63;
      }
    }
    else
    {
LABEL_63:
      unsigned __int16 v63 = 0;
    }
    uint64_t v65 = v109;
    if (*v109 == 35)
    {
      memset(v115, 0, 11);
      LOWORD(v107) = 200;
      ++v109;
      if (v65[1] == 91)
      {
        char v109 = v65 + 2;
        int v66 = v65[2];
        if (v65[2])
        {
          unint64_t v67 = 0;
          unsigned __int16 v68 = 0;
          unint64_t v69 = v65 + 3;
          while (v66 != 93 && v67 <= 9)
          {
            *((unsigned char *)v115 + v67) = v66;
            char v109 = &v69[v67];
            int v66 = v69[v67++];
            ++v68;
            if (!v66) {
              goto LABEL_80;
            }
          }
          unsigned __int16 v68 = v67;
        }
        else
        {
          unsigned __int16 v68 = 0;
        }
LABEL_80:
        *((unsigned char *)v115 + v68) = 0;
      }
      __int16 v71 = a12;
      if (!a12)
      {
        __int16 v71 = cstdlib_atoi((unsigned __int8 *)v115);
        unsigned __int16 v63 = v104;
      }
      LOWORD(v107) = v71;
      if (v63)
      {
        uint64_t v62 = hlp_ReadSildur(a1, a5, a6, v63, &v106, &v105);
        if ((v62 & 0x80000000) != 0) {
          return v62;
        }
        if (!v105)
        {
          uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, v104, 8, 1, &v107, &v114);
          if ((v62 & 0x80000000) != 0) {
            return v62;
          }
        }
      }
    }
    unsigned __int16 v72 = *a7;
    if (*a7) {
      BOOL v73 = HIWORD(v113) >= a3;
    }
    else {
      BOOL v73 = 1;
    }
    if (!v73)
    {
      do
      {
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, v72, 0, 1, &v112, (char *)&v114 + 2);
        if ((v22 & 0x80000000) != 0) {
          return v22;
        }
        if (v112 <= 0xA && ((1 << v112) & 0x610) != 0)
        {
          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *a7, 1, 1, (char *)&v113 + 2, (char *)&v114 + 2);
          if ((v22 & 0x80000000) != 0) {
            return v22;
          }
          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *a7, 2, 1, &v113, (char *)&v114 + 2);
          if ((v22 & 0x80000000) != 0) {
            return v22;
          }
          uint64_t v75 = v109 + 1;
          for (unint64_t i = v109 + 3; ; ++i)
          {
            unsigned int v77 = *(v75 - 1);
            if (v77 <= 0x22)
            {
              if (!*(v75 - 1) || v77 == 32)
              {
LABEL_109:
                LOWORD(v115[0]) = 0;
                LOWORD(v107) = 0;
                if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void *))(*(void *)(a1 + 56)
                                                                                             + 184))(a5, a6, *a7, 8, v115) & 0x80000000) == 0&& LOWORD(v115[0]) == 1)
                {
                  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a5, a6, *a7, 8, 1, &v107, (char *)&v114 + 2);
                  if ((v22 & 0x80000000) != 0) {
                    return v22;
                  }
                }
                if (!(_WORD)v107)
                {
LABEL_113:
                  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(*(void *)(a1 + 56) + 160))(a5, a6, *a7, 8, 1, &v107, &v114);
                  if ((v22 & 0x80000000) != 0) {
                    return v22;
                  }
                }
LABEL_130:
                int v85 = v109;
                int v86 = *v109;
                int v87 = a9;
                while (1)
                {
                  uint64_t v88 = v85;
                  if (((v86 - 93) > 0x21 || ((1 << (v86 - 93)) & 0x200000005) == 0)
                    && v86 != 32)
                  {
                    break;
                  }
                  ++v85;
                  char v109 = v88 + 1;
                  int v86 = v88[1];
                  if (v86 == 35)
                  {
                    size_t v89 = v88 + 2;
                    do
                    {
                      if (v86 == 32) {
                        break;
                      }
                      if (v86 == 95) {
                        break;
                      }
                      char v109 = v89;
                      int v90 = *v89++;
                      int v86 = v90;
                    }
                    while (v90);
                    int v85 = v89 - 1;
                  }
                }
                if ((__int16)(v113 - HIWORD(v113)) <= 1) {
                  __int16 v91 = 0;
                }
                else {
                  __int16 v91 = -1;
                }
                LOWORD(v107) = 0;
                unsigned int v92 = (unsigned __int16)*a9;
                uint64_t v93 = v99;
                if (v92 < *a10)
                {
                  while ((__int16)(*(_DWORD *)(v93 + 32 * (unsigned __int16)v92 + 12) - a11) < (__int16)(v113 + v91))
                  {
                    if (*(_DWORD *)(v93 + 32 * (unsigned __int16)v92) == 8 && v104 != 0)
                    {
                      LOWORD(v107) = v107 + *(_WORD *)(v99 + 32 * (unsigned __int16)v92 + 24);
                      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 160))(a5, a6);
                      if ((v22 & 0x80000000) != 0) {
                        return v22;
                      }
                      uint64_t v95 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                      uint64_t v96 = v104;
                      __int16 v97 = cstdlib_strlen("external");
                      uint64_t v22 = v95(a5, a6, v96, 18, (unsigned __int16)(v97 + 1), "external", &v114);
                      if ((v22 & 0x80000000) != 0) {
                        return v22;
                      }
                      int v87 = a9;
                      LOWORD(v92) = *a9;
                    }
                    LOWORD(v92) = v92 + 1;
                    *int v87 = v92;
                    uint64_t v93 = v99;
                    if (*a10 <= (unsigned __int16)v92) {
                      break;
                    }
                  }
                }
                size_t v78 = a7;
                uint64_t v79 = *a7;
                unsigned __int16 v104 = *a7;
                goto LABEL_154;
              }
            }
            else
            {
              if (v77 == 35)
              {
                memset(v115, 0, 11);
                LOWORD(v107) = 200;
                char v109 = v75;
                if (*v75 == 91)
                {
                  char v109 = v75 + 1;
                  int v80 = v75[1];
                  if (v75[1])
                  {
                    unint64_t v81 = 0;
                    uint64_t v82 = 0;
                    while (v80 != 93 && v81 <= 9)
                    {
                      *((unsigned char *)v115 + v81++) = v80;
                      ++v82;
                      char v109 = i;
                      int v83 = *i++;
                      int v80 = v83;
                      if (!v83) {
                        goto LABEL_125;
                      }
                    }
                    uint64_t v82 = (unsigned __int16)v81;
                  }
                  else
                  {
                    uint64_t v82 = 0;
                  }
LABEL_125:
                  *((unsigned char *)v115 + v82) = 0;
                }
                __int16 v84 = a12;
                if (!a12) {
                  __int16 v84 = cstdlib_atoi((unsigned __int8 *)v115);
                }
                LOWORD(v107) = v84;
                uint64_t v22 = hlp_ReadSildur(a1, a5, a6, *a7, &v106, &v105);
                if ((v22 & 0x80000000) == 0)
                {
                  if (!v105) {
                    goto LABEL_113;
                  }
                  goto LABEL_130;
                }
                return v22;
              }
              if (v77 == 95 || v77 == 126) {
                goto LABEL_109;
              }
            }
            char v109 = v75++;
          }
        }
        size_t v78 = a7;
        uint64_t v79 = *a7;
LABEL_154:
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _WORD *))(*(void *)(a1 + 56) + 120))(a5, a6, v79, v78);
        if ((v62 & 0x80000000) != 0) {
          return v62;
        }
        if (!*v78) {
          break;
        }
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a5, a6);
        if ((v62 & 0x80000000) != 0) {
          return v62;
        }
        unsigned __int16 v72 = *a7;
        if (!*a7) {
          break;
        }
      }
      while (HIWORD(v113) < a3);
    }
    *a13 = v104;
  }
  return v62;
}

uint64_t hlp_InsertWordPhrase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, unsigned __int16 *a9)
{
  __int16 v21 = a5;
  __int16 v20 = a6;
  __int16 v19 = a7;
  __int16 v18 = a8;
  int v17 = 15;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))(*(void *)(a1 + 56) + 88))(a2, a3, a4, a9);
  if ((result & 0x80000000) == 0)
  {
    __int16 v16 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 0, 1, &v17, &v16);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 1, 1, &v21, &v16);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 2, 1, &v20, &v16);
        if ((result & 0x80000000) == 0)
        {
          int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, __int16 *))(*(void *)(a1 + 56) + 160);
          uint64_t v14 = *a9;
          __int16 v15 = cstdlib_strlen("P");
          uint64_t result = v13(a2, a3, v14, 4, (unsigned __int16)(v15 + 1), "P", &v16);
          if ((result & 0x80000000) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 7, 1, &v19, &v16);
            if ((result & 0x80000000) == 0) {
              return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, __int16 *))(*(void *)(a1 + 56) + 160))(a2, a3, *a9, 8, 1, &v18, &v16);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fe_phrasing_isFeatureRequired(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a2 - 1;
  size_t v8 = g_featureNames_3[a3];
  while (cstdlib_strcmp(*(const char **)(a1 + 8 * v6), v8))
  {
    if (v7 == ++v6) {
      return 0;
    }
  }
  *a4 = v6;
  return 1;
}

uint64_t fe_phrasing_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, const char *a6)
{
  unsigned __int16 v20 = -1;
  uint64_t result = fe_phrasing_isFeatureRequired(a2, a3, a4, &v20);
  if (result)
  {
    if (cstdlib_strcmp(a6, ""))
    {
      size_t v10 = cstdlib_strlen(a6);
      uint64_t v11 = v20;
      if (v10 <= 0x40)
      {
        int v13 = *(char **)(a5 + 8 * v20);
      }
      else
      {
        unsigned __int16 v12 = cstdlib_strlen(a6);
        int v13 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a5 + 8 * v11), v12 + 1);
        if (!v13)
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PHRASING", 37000, 0, v14, v15, v16, v17, v19);
          return 2315264010;
        }
        *(void *)(a5 + 8 * v11) = v13;
      }
      __int16 v18 = a6;
    }
    else
    {
      int v13 = *(char **)(a5 + 8 * v20);
      __int16 v18 = "=";
    }
    cstdlib_strcpy(v13, v18);
    return 0;
  }
  return result;
}

const char *fe_phrasing_feat_word(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a3 + a2;
  if (a3 + a2 < 0 || v3 >= *(unsigned __int16 *)(a1 + 1072)) {
    return "=";
  }
  uint64_t v4 = *(const char **)(*(void *)(a1 + 1064) + 184 * v3 + 56);
  int v5 = (unsigned __int16)cstdlib_strlen(v4);
  if (v5)
  {
    if (doesWordEndWithComma((size_t)v4, ",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#"))
    {
      uint64_t v6 = (v5 - 1);
      if (cstdlib_strchr(",:;.?!|_~'\"<>{}#()[]^\\=@/&$*#", v4[v6])) {
        v4[v6] = 0;
      }
    }
  }
  return v4;
}

char *fe_phrasing_feat_wordlen(uint64_t a1, int a2, int a3, char *__dst)
{
  *int __dst = 0;
  unsigned int v5 = a3 + a2;
  if (a3 + a2 < 0 || v5 >= *(unsigned __int16 *)(a1 + 1072))
  {
    return cstdlib_strcpy(__dst, "=");
  }
  else
  {
    unsigned int v6 = Utf8_Utf8NbrOfSymbols(*(const char **)(*(void *)(a1 + 1064) + 184 * v5 + 56)) - 1;
    return LH_itoa(v6, __dst, 0xAu);
  }
}

char *fe_phrasing_feat_character(uint64_t a1, int a2, int a3, int a4, void *__b)
{
  cstdlib_memset(__b, 0, 0x800uLL);
  size_t v10 = (char *)fe_phrasing_feat_word(a1, a2, a4);
  if (!cstdlib_strcmp(v10, "=") || (unsigned __int16 v11 = cstdlib_strlen(v10)) == 0)
  {
LABEL_5:
    return cstdlib_strcpy((char *)__b, "=");
  }
  if (a3)
  {
    unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v10, v11);
    if (PreviousUtf8Offset > v11) {
      goto LABEL_5;
    }
    uint64_t v16 = &v10[PreviousUtf8Offset];
    size_t NextUtf8Offset = (unsigned __int16)(v11 - PreviousUtf8Offset);
    uint64_t v15 = (char *)__b;
  }
  else
  {
    size_t NextUtf8Offset = (unsigned __int16)utf8_GetNextUtf8Offset(v10, 0);
    uint64_t v15 = (char *)__b;
    uint64_t v16 = v10;
  }

  return cstdlib_strncpy(v15, v16, NextUtf8Offset);
}

uint64_t fe_phrasing_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2315264007;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_phrasing_ClassClose()
{
  return 0;
}

uint64_t statcomp_isDctFeature(char *__s1, _WORD *a2, uint64_t a3)
{
  if (!*(_WORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v6 = 0;
  while (cstdlib_strcmp(__s1, *(const char **)(*(void *)a3 + 8 * v6)))
  {
    if (++v6 >= (unint64_t)*(unsigned __int16 *)(a3 + 8)) {
      return 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t statcomp_isDctMappedFeature(char *__s1, _WORD *a2, uint64_t a3)
{
  if (!*(_WORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v6 = 0;
  for (uint64_t i = 8; cstdlib_strcmp(__s1, *(const char **)(*(void *)a3 + i)); i += 16)
  {
    if (++v6 >= (unint64_t)*(unsigned __int16 *)(a3 + 8)) {
      return 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t statcomp_isDynamicFeature(char *__s, _WORD *a2)
{
  uint64_t v4 = 0;
  while (1)
  {
    unsigned __int16 v5 = cstdlib_strlen(__s);
    uint64_t v6 = g_statcomp_FeatureNames[v4];
    unsigned __int16 v7 = cstdlib_strlen(v6);
    if (!cstdlib_strcmp(__s, v6) || v5 > v7 && !cstdlib_strcmp(&__s[v5 - v7], v6)) {
      break;
    }
    if (++v4 == 7) {
      return 0;
    }
  }
  *a2 = v4;
  return 1;
}

uint64_t statcomp_setFeature(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char *__s)
{
  if (cstdlib_strlen(__s) <= 0x20)
  {
    unsigned __int16 v11 = *(char **)(a4 + 8 * a3);
  }
  else
  {
    unsigned __int16 v10 = cstdlib_strlen(__s);
    unsigned __int16 v11 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(void *)(a4 + 8 * a3), v10 + 1);
    if (!v11)
    {
      log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v30);
      return 2313166858;
    }
    *(void *)(a4 + 8 * a3) = v11;
  }
  cstdlib_strcpy(v11, __s);
  uint64_t v16 = *(char **)(a4 + 8 * a3);
  unsigned __int16 v17 = cstdlib_strlen(*(const char **)(*(void *)(a1 + 1312) + 8 * a3));
  uint64_t v18 = *(unsigned int *)(a1 + 1336);
  if (v18)
  {
    unsigned __int16 v19 = 0;
    size_t v20 = v17;
    while (1)
    {
      uint64_t v21 = v19;
      if (!cstdlib_strncmp(*(const char **)(*(void *)(a1 + 1328) + 16 * v19), *(const char **)(*(void *)(a1 + 1312) + 8 * a3), v20))break; {
      unsigned __int16 v19 = v21 + 1;
      }
      if (*(_DWORD *)(a1 + 1336) <= (unsigned __int16)(v21 + 1)) {
        return 0;
      }
    }
    unsigned __int16 v22 = cstdlib_strlen(*(const char **)(*(void *)(a1 + 1328) + 16 * v21 + 8));
    unsigned __int16 v23 = cstdlib_strlen(v16);
    unsigned __int16 v24 = *(char **)(*(void *)(a1 + 1328) + 16 * v21 + 8);
    __int16 v25 = cstdlib_strstr(v24, v16);
    if (v25)
    {
      unsigned int v26 = v22;
      unint64_t v27 = (unint64_t)&v24[v22];
      while (v25 != v24 || v26 != v23 && (v26 <= v23 + 1 || v24[v23] != 32))
      {
        if (v25 > v24)
        {
          int v28 = &v25[v23];
          if (v27 > (unint64_t)(v28 + 1) && *v28 == 32)
          {
            uint64_t v18 = 0;
            if ((char *)v27 == v28 || *(v25 - 1) == 32) {
              return v18;
            }
          }
          else if ((char *)v27 == v28)
          {
            return 0;
          }
        }
        __int16 v25 = cstdlib_strstr(&v25[v23], v16);
        if (!v25) {
          goto LABEL_24;
        }
      }
    }
    else
    {
LABEL_24:
      cstdlib_strcpy(v16, "=");
    }
    return 0;
  }
  return v18;
}

uint64_t statcomp_setDynamicFeature(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, const char **a6, const char **a7, int a8, unsigned __int16 a9)
{
  LODWORD(v9) = a8;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v16 = g_statcomp_FeatureNames[a3];
  if (cstdlib_strcmp(v16, "CW_SYLLABLE_LEN") && cstdlib_strcmp(v16, "SYLLABLE_LEN_AS_FRACTION"))
  {
    if (cstdlib_strcmp(v16, "CW_ORTH_LEN"))
    {
      if (cstdlib_strcmp(v16, "ORTH_LEN_AS_FRACTION")) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v9 == 0;
      }
      if (!v17) {
        goto LABEL_15;
      }
    }
    else if (v9)
    {
LABEL_15:
      int v21 = 0;
      uint64_t v9 = v9;
      unsigned __int16 v22 = a6;
      do
      {
        unsigned __int16 v23 = *v22++;
        v21 += cstdlib_strlen(v23);
        --v9;
      }
      while (v9);
      goto LABEL_19;
    }
LABEL_18:
    LOWORD(v21) = 0;
LABEL_19:
    LOWORD(v18) = 0;
    goto LABEL_20;
  }
  if (!v9) {
    goto LABEL_18;
  }
  int v18 = 0;
  uint64_t v9 = v9;
  unsigned __int16 v19 = a7;
  do
  {
    size_t v20 = *v19++;
    v18 += cstdlib_strlen(v20);
    --v9;
  }
  while (v9);
  LOWORD(v21) = 0;
LABEL_20:
  int v24 = cstdlib_strcmp(v16, "CW_SYLLABLE_LEN");
  unsigned __int16 v25 = v18;
  if (!v24 || (v26 = cstdlib_strcmp(v16, "CW_ORTH_LEN"), unsigned __int16 v25 = v21, !v26)) {
    LH_itoa(v25, __dst, 0xAu);
  }
  if (!cstdlib_strcmp(v16, "SYLLABLE_LEN"))
  {
    unsigned int v30 = a7[a9];
LABEL_34:
    unsigned int v32 = (unsigned __int16)cstdlib_strlen(v30);
    goto LABEL_35;
  }
  if (!cstdlib_strcmp(v16, "SYLLABLE_LEN_AS_FRACTION"))
  {
    unsigned __int16 v31 = cstdlib_strlen(a7[a9]);
    if ((_WORD)v18)
    {
      unsigned int v28 = v31;
      unsigned int v29 = (unsigned __int16)v18;
      goto LABEL_32;
    }
LABEL_39:
    unsigned int v32 = 0;
    goto LABEL_35;
  }
  if (!cstdlib_strcmp(v16, "ORTH_LEN"))
  {
    unsigned int v30 = a6[a9];
    goto LABEL_34;
  }
  if (cstdlib_strcmp(v16, "ORTH_LEN_AS_FRACTION")) {
    goto LABEL_36;
  }
  unsigned __int16 v27 = cstdlib_strlen(a6[a9]);
  if (!(_WORD)v21) {
    goto LABEL_39;
  }
  unsigned int v28 = v27;
  unsigned int v29 = (unsigned __int16)v21;
LABEL_32:
  unsigned int v32 = v28 / v29;
LABEL_35:
  LH_itoa(v32, __dst, 0xAu);
LABEL_36:
  if (!cstdlib_strcmp(v16, "ORTH")) {
    cstdlib_strcpy(__dst, a6[a9]);
  }
  return statcomp_setFeature(a2, a1, a4, a5, __dst);
}

uint64_t statcomp_initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 33);
    *a2 = v6;
    if (!v6) {
      break;
    }
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
  return 2313166858;
}

void *statcomp_freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *a2++;
      uint64_t result = heap_Free((void *)v4[1], v6);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statcomp_dumpFeatureVectorAndResult(uint64_t a1, int a2, const char **a3, unsigned __int16 *a4, char *__s, char *a6, uint64_t a7, uint64_t a8, char *__sa)
{
  if (!a2) {
    return 0;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __s);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, a6);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(*(void *)(a7 + 1312) + 8 * v16));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, "=");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(a8 + 8 * v16));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v16);
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, "PRED=");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __sa);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v17, v18, v19, (uint64_t)*a3);
  cstdlib_strcpy((char *)*a3, "");
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, *(char **)(a8 + 8 * v20));
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
      uint64_t v15 = statcomp_add2Str(a1, a3, a4, " ");
      if ((v15 & 0x80000000) != 0) {
        return v15;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v20);
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, "PRED=");
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = statcomp_add2Str(a1, a3, a4, __sa);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v24 = statcomp_add2Str(a1, a3, a4, " ");
  if ((v24 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a3);
    cstdlib_strcpy((char *)*a3, "");
  }
  return v24;
}

uint64_t statpos_checkIfActive(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7, _DWORD *a8, int *a9, _DWORD *a10, _DWORD *a11)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v60 = 0;
  memset(v63, 0, sizeof(v63));
  unsigned int v59 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  uint64_t v17 = a7 + 354;
  *(_OWORD *)(a7 + 354) = 0u;
  a7[358] = 0;
  uint64_t result = paramc_ParamGetUInt(*(void *)(a6 + 40), (uint64_t)"statpos_do_corpus_alignment", &v59);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v59 == 1) {
      *uint64_t v17 = 1;
    }
  }
  uint64_t result = paramc_ParamGetUInt(*(void *)(a6 + 40), (uint64_t)"nluactive", &v59);
  if ((result & 0x1FFF) != 0x14)
  {
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (v59 == 1) {
      a7[358] = 1;
    }
  }
  uint64_t result = statpos_igtrees_getBrkStrs(a6, v62, v61, 0x100uLL);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = ssftriff_reader_ObjOpen(a4, a5, 2, v62, "IGTR", 1031, (uint64_t *)&v57);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xA) {
        return result;
      }
      log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s tree not found", v23, v24, v25, (uint64_t)v62);
    }
    else
    {
      uint64_t result = ssftriff_reader_ObjClose(v57, v19, v20, v21, v22, v23, v24, v25);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      a7[356] = 1;
    }
    uint64_t result = ssftriff_reader_ObjOpen(a4, a5, 2, v61, "IGTR", 1031, (uint64_t *)&v57);
    if ((result & 0x80000000) != 0)
    {
      if ((result & 0x1FFF) == 0xA) {
        return result;
      }
      log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s tree not found", v30, v31, v32, (uint64_t)v61);
    }
    else
    {
      uint64_t result = ssftriff_reader_ObjClose(v57, v26, v27, v28, v29, v30, v31, v32);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      a7[356] = 1;
    }
    uint64_t result = statpos_get_broker_string(a6, &v58);
    if ((result & 0x80000000) == 0)
    {
      unsigned int v33 = ssftriff_reader_ObjOpen(a4, a5, 2, v58, "CRPH", 1031, (uint64_t *)&v57);
      if ((v33 & 0x80000000) != 0)
      {
        unsigned int v42 = v33;
        if ((v33 & 0x1FFF) == 0xA)
        {
LABEL_47:
          if (v58) {
            heap_Free(*(void **)(a6 + 8), (uint64_t)v58);
          }
          if ((v42 & 0x1FFF) == 0xA) {
            return v42;
          }
          else {
            return 0;
          }
        }
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPOS %s CRF not found", v38, v39, v40, (uint64_t)v58);
      }
      else
      {
        unsigned int info_from_dct = ssftriff_reader_ObjClose(v57, v34, v35, v36, v37, v38, v39, v40);
        if ((info_from_dct & 0x80000000) != 0)
        {
LABEL_46:
          unsigned int v42 = info_from_dct;
          goto LABEL_47;
        }
        a7[357] = 1;
      }
      if (!a7[356] && !a7[357] && !*v17)
      {
        unsigned int v42 = 0;
        goto LABEL_47;
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"mdesegpos_morpheme_processing", 0, a9, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"statphr_kok_force_igtree", 0, a10, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      if (*a10 == 1) {
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Key statphr_kok_force_igtree is set, use statphr IGTree data instead of hardcoded values", v43, v44, v45, 0);
      }
      unsigned int info_from_dct = statpos_get_info_from_dct(a6, a1, a2, a3, "fecfg", (uint64_t)"statphr_kok_remove_unaligned_phrase_boundaries", 0, a11, "BOOL");
      if ((info_from_dct & 0x80000000) != 0) {
        goto LABEL_46;
      }
      if (*a11 == 1) {
        log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Key statphr_kok_remove_unaligned_phrase_boundaries is set, IGTree prediction overridden if phrase boundary is inside eojeol", v46, v47, v48, 0);
      }
      if (*v17 == 1)
      {
        int v49 = a7[356];
        if (v49 != 1) {
          int v49 = a7[357] == 1;
        }
      }
      else if (a7[357] != 1 || (int v49 = *a9, *a9 != 1))
      {
LABEL_42:
        unsigned int info_from_dct = getBrokerString_0(a6, v63, 0x80uLL);
        if ((info_from_dct & 0x80000000) == 0)
        {
          unsigned int v50 = brk_DataOpenEx(*(void *)(a6 + 24), (uint64_t)v63, 1, (uint64_t)&v60);
          if ((v50 & 0x80000000) != 0)
          {
            unsigned int v42 = v50;
            if (a7[358] == 1) {
              unsigned int v54 = "openNLP statPOS rules not found";
            }
            else {
              unsigned int v54 = "MS statPOS rules not found";
            }
            log_OutText(*(void *)(a6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v54, v51, v52, v53, 0);
          }
          else
          {
            a7[355] = 1;
            unsigned int v42 = brk_DataClose(*(void *)(a6 + 24), v60);
            if ((v42 & 0x80000000) == 0) {
              *a8 = 1;
            }
          }
          goto LABEL_47;
        }
        goto LABEL_46;
      }
      *a8 = v49;
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t statpos_load_resources(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11, uint64_t a12, int a13, _DWORD *a14, int a15)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  *(void *)a12 = a8;
  *(_OWORD *)(a12 + 1448) = a10;
  *(void *)(a12 + 1464) = a11;
  *(void *)(a12 + 1472) = a1;
  *(void *)(a12 + 1480) = a2;
  *(void *)(a12 + 1488) = a3;
  if (!a13)
  {
    *(void *)(a12 + 200) = 0;
    *(_DWORD *)(a12 + 208) = 0;
    uint64_t inited = nuance_pcre_ObjOpen(a4, a5, a12 + 200);
    if ((inited & 0x80000000) == 0)
    {
      AddRefCounteduint64_t Object = nuance_pcre_Init(*(void **)(a12 + 200), *(void *)(a12 + 208), 0x1Eu, 50);
      if ((AddRefCountedObject & 0x80000000) != 0) {
        return AddRefCountedObject;
      }
      if (*(_DWORD *)(a12 + 1424) == 1)
      {
        uint64_t v31 = 0;
        uint64_t inited = InitRsrcFunction(a6, a7, &v31);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        uint64_t inited = statpos_igtrees_getBrkStrs(a8, __src, __s2, 0x100uLL);
        if ((inited & 0x80000000) != 0) {
          return inited;
        }
        cstdlib_strcpy(__dst, __src);
        cstdlib_strcat(__dst, __s2);
        ObjcForThisApuint64_t i = getObjcForThisApi(a8, v31);
        AddRefCounteduint64_t Object = objc_GetAddRefCountedObject(ObjcForThisApi, (uint64_t)__dst, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))statpos_igtrees_ObjcLoad, (void (*)(void, void, _OWORD *))statpos_igtrees_ObjcClose, a8, &v32);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
        memcpy((void *)(a12 + 784), *(const void **)(v32 + 32), 0x218uLL);
      }
      if (*(_DWORD *)(a12 + 1428) == 1)
      {
        AddRefCounteduint64_t Object = statpos_crf_load(a4, a5, a6, a7, a8, a9, *(void *)(a12 + 1448), *(void *)(a12 + 1456), *(void *)(a12 + 1464), a12 + 1320, a12 + 8, (uint64_t *)(a12 + 1384), a15);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
      }
      if (a15)
      {
        *(void *)(a12 + 8) = a8;
        *(_WORD *)(a12 + 384) = 5;
      }
      else
      {
        AddRefCounteduint64_t Object = statpos_rules_load(a4, a5, a8, *(void *)(a12 + 1448), *(void *)(a12 + 1456), *(void *)(a12 + 1464), (unsigned __int16 *)(a12 + 8), v29);
        if ((AddRefCountedObject & 0x80000000) != 0) {
          return AddRefCountedObject;
        }
      }
      if (*(_DWORD *)(a12 + 1424) == 1 && *(_DWORD *)(a12 + 800) != *(_DWORD *)(a12 + 160))
      {
        *a14 = 0;
        log_OutText(*(void *)(a8 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set UseStatPOS to FALSE; OOV model differs in igtrees(%d) versus rules(%d)",
          v27,
          v28,
          v29,
          *(unsigned int *)(a12 + 800));
      }
      return AddRefCountedObject;
    }
    return inited;
  }
  if (*(_DWORD *)(a12 + 1420) != 1)
  {
    AddRefCounteduint64_t Object = 0;
    goto LABEL_21;
  }
  *(void *)(a12 + 200) = 0;
  *(_DWORD *)(a12 + 208) = 0;
  uint64_t inited = nuance_pcre_ObjOpen(a4, a5, a12 + 200);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  AddRefCounteduint64_t Object = nuance_pcre_Init(*(void **)(a12 + 200), *(void *)(a12 + 208), 0x1Eu, 50);
  if ((AddRefCountedObject & 0x80000000) != 0) {
    return AddRefCountedObject;
  }
  if (a15)
  {
LABEL_21:
    *(void *)(a12 + 8) = a8;
    *(_WORD *)(a12 + 384) = 5;
    return AddRefCountedObject;
  }
  uint64_t v21 = *(void *)(a12 + 1464);
  uint64_t v22 = *(void *)(a12 + 1448);
  uint64_t v23 = *(void *)(a12 + 1456);

  return statpos_rules_load(a4, a5, a8, v22, v23, v21, (unsigned __int16 *)(a12 + 8), v19);
}

uint64_t statpos_unload_resources(_WORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v16 = 0;
  if (a5)
  {
    if (*(_DWORD *)(a4 + 1420) == 1)
    {
      statpos_rules_unload((uint64_t *)(a4 + 8));
      uint64_t NullHandle = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(void *)(a4 + 200), *(void *)(a4 + 208), NullHandle, v8))
      {
        nuance_pcre_DeInit(*(void **)(a4 + 200), *(void *)(a4 + 208));
        nuance_pcre_ObjClose(*(void *)(a4 + 200), *(void *)(a4 + 208));
      }
    }
    return 0;
  }
  else
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v16);
    if ((inited & 0x80000000) == 0)
    {
      statpos_crf_unload(a3, v16, a4 + 1320, a4 + 8, (uint64_t *)(a4 + 1384), a6);
      if (*(_DWORD *)(a4 + 1424))
      {
        ObjcForThisApuint64_t i = getObjcForThisApi(a3, v16);
        objc_ReleaseObject(ObjcForThisApi, a4 + 808);
      }
      statpos_rules_unload((uint64_t *)(a4 + 8));
      uint64_t v14 = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(void *)(a4 + 200), *(void *)(a4 + 208), v14, v15))
      {
        nuance_pcre_DeInit(*(void **)(a4 + 200), *(void *)(a4 + 208));
        nuance_pcre_ObjClose(*(void *)(a4 + 200), *(void *)(a4 + 208));
      }
    }
  }
  return inited;
}

uint64_t statpos_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, int a14, unsigned int a15)
{
  BOOL v23 = a12 == 1 && (*(_DWORD *)(a10 + 1436) | a13) == 0 && a14 == 1;
  *(void *)(a10 + 752) = a7;
  *(void *)(a10 + 760) = a8;
  *(void *)(a10 + 768) = a9;
  uint64_t SentenceData = statpos_getSentenceData(a6, a4, a5, a10, a15);
  if ((SentenceData & 0x80000000) == 0 && *(_WORD *)(a10 + 656))
  {
    if (a11 || (uint64_t updated = statpos_disambiguatePOSTags(a10), (updated & 0x80000000) == 0))
    {
      if (*(_DWORD *)(a10 + 1416) == 1)
      {
        uint64_t updated = statpos_updateNLULingdbField(a6, a4, a5, a10);
      }
      else if (a15 != 1 || (uint64_t updated = statpos_setMorphemePRON(a1, a2, a3, a10), (updated & 0x80000000) == 0))
      {
        uint64_t updated = statpos_alignDisambiguatedPOSToLingdb(a10, a15, v24, v25, v26, v27, v28, v29);
        if ((updated & 0x80000000) == 0) {
          uint64_t updated = statpos_updatePOSLingdbWithDisambiguatedPOS(a6, a4, a5, (uint64_t *)a10, v23, a15);
        }
      }
    }
    uint64_t SentenceData = updated;
  }
  statpos_freeSentenceData((uint64_t *)a10);
  return SentenceData;
}

uint64_t statPOS_call_one_word(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char **a5, const char **a6, char **a7)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  unsigned __int16 v57 = 0;
  unsigned __int16 v55 = 0;
  __s = 0;
  cstdlib_strcpy(__dst, "one_word");
  cstdlib_strlen(__dst);
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L1: %s", v14, v15, v16, (uint64_t)__dst);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void, const char *, void))(a4 + 120);
  uint64_t v18 = *a5;
  unsigned __int16 v19 = cstdlib_strlen(v18);
  uint64_t v20 = v17(a2, a3, 0, v18, v19);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L2: %s", v21, v22, v23, (uint64_t)__dst);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void))(a4 + 120);
  uint64_t v25 = *a6;
  unsigned __int16 v26 = cstdlib_strlen(*a6);
  uint64_t v20 = v24(a2, a3, 1, v25, v26);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 80))(a2, a3, __dst);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a4 + 128))(a2, a3, 0, &__s, &v57);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  __s[v57] = 0;
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void, char **, unsigned __int16 *))(a4 + 128))(a2, a3, 0, &v55, &v57);
  if ((v27 & 0x80000000) == 0)
  {
    v55[v57] = 0;
    if (cstdlib_strlen(__s))
    {
      uint64_t v28 = 0;
      unsigned __int16 v29 = 0;
      do
      {
        uint64_t v30 = __s;
        if (__s[v28] == 126)
        {
          uint64_t v31 = &__s[v29 + 1];
          uint64_t v32 = &__s[v29 + 2];
          size_t v33 = cstdlib_strlen(v32);
          cstdlib_memmove(v31, v32, v33 + 1);
          __s[v28] = 126;
          uint64_t v30 = __s;
        }
        uint64_t v28 = ++v29;
      }
      while (cstdlib_strlen(v30) > v29);
    }
    uint64_t v34 = *(void **)(a1 + 8);
    size_t v35 = cstdlib_strlen(__s);
    uint64_t v36 = (char *)heap_Calloc(v34, 1, v35 + 1);
    *a7 = v36;
    if (v36)
    {
      cstdlib_strcpy(v36, __s);
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O1 (phonetics) : %s", v41, v42, v43, (uint64_t)__dst);
      if (cstdlib_strlen(v55))
      {
        uint64_t v47 = 0;
        unsigned __int16 v48 = 0;
        do
        {
          int v49 = v55;
          if (v55[v47] == 126)
          {
            unsigned int v50 = &v55[v48 + 1];
            uint64_t v51 = &v55[v48 + 2];
            size_t v52 = cstdlib_strlen(v51);
            cstdlib_memmove(v50, v51, v52 + 1);
            v55[v47] = 126;
            int v49 = v55;
          }
          uint64_t v47 = ++v48;
        }
        while (cstdlib_strlen(v49) > v48);
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O3 (POS code): %s (ignored)", v44, v45, v46, (uint64_t)__dst);
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v37, v38, v39, v40, v54);
      return 2313166858;
    }
  }
  return v27;
}

uint64_t statphr_getFeature(char *__s1, uint64_t a2)
{
  uint64_t v4 = 0;
  while (cstdlib_strcmp(__s1, g_statphr_FeatureNames[v4]))
  {
    if (++v4 == 8) {
      return 0;
    }
  }
  return *(void *)(a2 + v4 * 8);
}

uint64_t statphr_setFeature(uint64_t a1, char *__s1, uint64_t a3, const char *a4)
{
  uint64_t v8 = 0;
  while (cstdlib_strcmp(__s1, g_statphr_FeatureNames[v8]))
  {
    if (++v8 == 8) {
      return 0;
    }
  }
  if (!cstdlib_strcmp(a4, ""))
  {
    unsigned __int16 v11 = *(char **)(a3 + v8 * 8);
    unsigned int v12 = "_";
    goto LABEL_10;
  }
  if (cstdlib_strlen(a4) < 0x41
    || (__int16 v9 = cstdlib_strlen(a4),
        uint64_t result = resizeNFeature(a1, (uint64_t *)(a3 + v8 * 8), (unsigned __int16)(v9 + 1)),
        (result & 0x80000000) == 0))
  {
    unsigned __int16 v11 = *(char **)(a3 + v8 * 8);
    unsigned int v12 = a4;
LABEL_10:
    cstdlib_strcpy(v11, v12);
    return 0;
  }
  return result;
}

uint64_t statphr_setNFeature(uint64_t a1, char *__s1, uint64_t a3, const char *a4, unsigned int a5)
{
  unint64_t v10 = 0;
  while (cstdlib_strcmp(__s1, g_statphr_FeatureNames[v10 / 8]))
  {
    v10 += 8;
    if (v10 == 64) {
      return 0;
    }
  }
  int v11 = cstdlib_strcmp(a4, "");
  if (a5 && !v11)
  {
    cstdlib_strcpy(*(char **)(a3 + v10), "_");
    return 0;
  }
  if (a5 < 0x41
    || (uint64_t result = resizeNFeature(a1, (uint64_t *)(a3 + v10), (unsigned __int16)(a5 + 1)), (result & 0x80000000) == 0))
  {
    cstdlib_strncpy(*(char **)(a3 + v10), a4, a5);
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a3 + v10) + a5) = 0;
  }
  return result;
}

uint64_t resizeNFeature(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = heap_Realloc(*(uint64_t **)(a1 + 8), *a2, a3);
  if (v5)
  {
    uint64_t v10 = v5;
    uint64_t result = 0;
    *a2 = v10;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v6, v7, v8, v9, v12);
    return 2313166858;
  }
  return result;
}

uint64_t statphr_initFeatureVector(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 8 * a3 - 8;
  while (1)
  {
    uint64_t v7 = heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *(void *)(a2 + v5) = v7;
    if (!v7) {
      break;
    }
    uint64_t result = statphr_setFeature(a1, g_statphr_FeatureNames[v5 / 8], a2, "_");
    if ((result & 0x80000000) == 0)
    {
      BOOL v13 = v6 == v5;
      v5 += 8;
      if (!v13) {
        continue;
      }
    }
    return result;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v8, v9, v10, v11, v14);
  return 2313166858;
}

void *statphr_freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      if (*a2) {
        uint64_t result = heap_Free((void *)v4[1], *a2);
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statphr_dumpFeatureVectorAndResult(uint64_t a1, uint64_t a2, char *__src)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  cstdlib_strncpy(__dst, __src, 0x100uLL);
  uint64_t v5 = 0;
  __dst[255] = 0;
  do
  {
    size_t v6 = cstdlib_strlen(*(const char **)(a2 + v5));
    if (v6 + cstdlib_strlen(__dst) + 2 > 0xFF) {
      break;
    }
    cstdlib_strcat(__dst, " ");
    cstdlib_strcat(__dst, *(const char **)(a2 + v5));
    v5 += 8;
  }
  while (v5 != 64);
  return log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v7, v8, v9, (uint64_t)__dst);
}

uint64_t statphr_getIgtreeBrkStr(uint64_t a1, unsigned char *a2, size_t a3)
{
  uint64_t v7 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v7);
  if ((result & 0x80000000) == 0) {
    return brokeraux_ComposeBrokerString(a1, "statphr_igtree", 1, 1, v7, 0, 0, a2, a3);
  }
  return result;
}

uint64_t statphr_readIGTree(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, void *a6, _DWORD *a7)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *a7 = 0;
  uint64_t result = statphr_getIgtreeBrkStr(a5, v14, 0x100uLL);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = igtree_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, a6, 2, (uint64_t)v14, "IGTR", 1031, 0);
    if ((result & 0x80000000) != 0)
    {
      uint64_t result = 0;
      *a6 = 0;
    }
    else
    {
      *a7 = 1;
    }
  }
  return result;
}

uint64_t statphr_searchInIGTreeParamDefs(uint64_t a1, char *__s2, const char *a3)
{
  if (!*(_DWORD *)(a1 + 1336)) {
    return 0;
  }
  unsigned __int16 v6 = 0;
  while (1)
  {
    uint64_t v7 = v6;
    if (!cstdlib_strcmp(*(const char **)(*(void *)(a1 + 1328) + 16 * v6), __s2))
    {
      uint64_t v8 = cstdlib_strstr(*(char **)(*(void *)(a1 + 1328) + 16 * v7 + 8), a3);
      if (v8) {
        break;
      }
    }
LABEL_4:
    unsigned __int16 v6 = v7 + 1;
    if (*(_DWORD *)(a1 + 1336) <= (unsigned __int16)(v7 + 1)) {
      return 0;
    }
  }
  uint64_t v9 = v8;
  while (*(v9 - 1) != 32 || v9[cstdlib_strlen(a3)] != 32)
  {
    uint64_t v9 = cstdlib_strstr(v9 + 1, a3);
    if (!v9) {
      goto LABEL_4;
    }
  }
  return 1;
}

uint64_t statphr_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  int v218 = 0;
  int v219 = 0;
  __int16 v217 = 0;
  unsigned int v216 = 0;
  uint64_t v214 = 0;
  uint64_t v215 = 0;
  int v213 = 0;
  memset(v220, 0, sizeof(v220));
  uint64_t v212 = 0;
  unsigned __int16 v211 = -1;
  __s = 0;
  __int16 v208 = 0;
  int v207 = 0;
  BOOL v15 = (int)paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v207) >= 0 && v207 == 0;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v219);
  if ((v16 & 0x80000000) != 0) {
    return v16;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v219, 0, (char *)&v219 + 2);
  if ((v17 & 0x80000000) == 0 && HIWORD(v219) == 1)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a2 + 176))(a3, a4, (unsigned __int16)v219, 0, &v215, &v218);
    if ((v17 & 0x80000000) == 0 && (unsigned __int16)v218 >= 2u)
    {
      int __dst = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 32);
      if (!__dst
        || (int v202 = a6,
            cstdlib_strcpy(__dst, ""),
            uint64_t v22 = *(void **)(a1 + 8),
            unsigned __int16 v23 = cstdlib_strlen(v215),
            (uint64_t v24 = (char *)heap_Calloc(v22, 1, v23 + 1)) == 0))
      {
        uint64_t v17 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v178);
        return v17;
      }
      uint64_t v25 = v24;
      cstdlib_strcpy(v24, v215);
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v219, (char *)&v218 + 2);
      if ((v26 & 0x80000000) != 0)
      {
        uint64_t v17 = v26;
        uint64_t v31 = 0;
        unsigned __int16 v36 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        goto LABEL_31;
      }
      int v196 = a7;
      uint64_t v200 = (uint64_t)v25;
      int v204 = 0;
      unsigned __int16 v27 = -1;
      while (HIWORD(v218))
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
        if ((v28 & 0x80000000) != 0) {
          goto LABEL_27;
        }
        if (v216 <= 0xA && ((1 << v216) & 0x610) != 0)
        {
          uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 1, 1, (char *)&v213 + 2, &v218);
          if ((v28 & 0x80000000) != 0) {
            goto LABEL_27;
          }
          int v30 = v204;
          if (HIWORD(v213) != v27) {
            int v30 = v204 + 1;
          }
          int v204 = v30;
          unsigned __int16 v27 = HIWORD(v213);
        }
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v218), (char *)&v218 + 2);
        if ((v28 & 0x80000000) != 0)
        {
LABEL_27:
          uint64_t v17 = v28;
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          unsigned __int16 v36 = v204;
          goto LABEL_32;
        }
      }
      unsigned __int16 v36 = v204;
      uint64_t v201 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v204 << 6);
      if (!v201)
      {
        uint64_t v17 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v41, v42, v43, v44, v178);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        goto LABEL_32;
      }
      unsigned int v45 = 8 * (unsigned __int16)v204;
      if ((_WORD)v204)
      {
        unsigned __int16 v46 = 0;
        do
        {
          uint64_t inited = statphr_initFeatureVector(a1, v201 + 8 * v46, 8u);
          if ((inited & 0x80000000) != 0) {
            goto LABEL_125;
          }
          v46 += 8;
        }
        while (v45 > v46);
      }
      uint64_t inited = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v219, (char *)&v218 + 2);
      if ((inited & 0x80000000) != 0)
      {
LABEL_125:
        uint64_t v17 = inited;
        uint64_t v31 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v25 = (char *)v200;
        uint64_t v32 = v201;
        goto LABEL_126;
      }
      int v195 = 0;
      unsigned __int16 __s1 = 0;
      int v197 = 0;
      unsigned __int16 v51 = -1;
      while (HIWORD(v218))
      {
        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a3, a4);
        if ((v52 & 0x80000000) != 0) {
          goto LABEL_121;
        }
        if (v216 - 9 < 2) {
          goto LABEL_62;
        }
        if (v216 != 6)
        {
          if (v216 != 4) {
            goto LABEL_120;
          }
LABEL_62:
          uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 1, 1, (char *)&v213 + 2, &v218);
          if ((v52 & 0x80000000) != 0) {
            goto LABEL_121;
          }
          if (HIWORD(v213) != v51)
          {
            uint64_t v206 = 0;
            unsigned __int16 v205 = 0;
            HIWORD(v219) = 0;
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a2 + 184))(a3, a4, HIWORD(v218), 14, (char *)&v219 + 2);
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_128;
            }
            if (HIWORD(v219) != 1) {
              goto LABEL_128;
            }
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v218), 14, &v214, &v218);
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_128;
            }
            if (!hlp_NLUStrFind(v214, "POS", &v206, &v205))
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statPHR: internal ERROR - found a WordRecord %d without POS (NLU=%s), bailing out", v53, v54, v55, HIWORD(v218));
LABEL_128:
              uint64_t v25 = (char *)v200;
              uint64_t v32 = v201;
              uint64_t v33 = (uint64_t)v195;
              goto LABEL_129;
            }
            if (__s1 && !v197)
            {
              uint64_t v56 = 0;
              uint64_t v57 = v201 + 8 * __s1 - 64;
              while (cstdlib_strcmp("pos", g_statphr_FeatureNames[v56]))
              {
                if (++v56 == 8)
                {
                  uint64_t v58 = 0;
                  goto LABEL_80;
                }
              }
              uint64_t v58 = *(char **)(v57 + v56 * 8);
LABEL_80:
              uint64_t v59 = cstdlib_strstr(v58, "_BVB");
              if (v59) {
                *uint64_t v59 = 0;
              }
              uint64_t v60 = statphr_setFeature(a1, "Lpos", v201 + 8 * __s1, v58);
              if ((v60 & 0x80000000) != 0) {
                goto LABEL_127;
              }
              uint64_t v60 = statphr_setNFeature(a1, "Rpos", v57, v206, v205);
              if ((v60 & 0x80000000) != 0) {
                goto LABEL_127;
              }
            }
            if (__s1 >= 9u && !v197)
            {
              uint64_t v60 = statphr_setNFeature(a1, "RRpos", v201 + 8 * __s1 - 128, v206, v205);
              if ((v60 & 0x80000000) != 0) {
                goto LABEL_127;
              }
            }
            uint64_t v61 = v201 + 8 * __s1;
            uint64_t v60 = statphr_setNFeature(a1, "pos", v61, v206, v205);
            if ((v60 & 0x80000000) != 0) {
              goto LABEL_127;
            }
            if (HIWORD(v213) > v211 && __s)
            {
              uint64_t v62 = v201 + 8 * __s1;
              char v63 = __s[3];
              __s[3] = 0;
              statphr_setFeature(a1, "Lpos", v62, __s + 1);
              uint64_t v60 = statphr_setFeature(a1, "Lchunk", v62, __s + 1);
              if ((v60 & 0x80000000) != 0) {
                goto LABEL_127;
              }
              __s[3] = v63;
              if (__s1 >= 9u)
              {
                char v64 = __s[3];
                __s[3] = 0;
                uint64_t v60 = statphr_setFeature(a1, "Rpos", v201 + 8 * __s1 - 128, __s + 1);
                if ((v60 & 0x80000000) != 0) {
                  goto LABEL_127;
                }
                __s[3] = v64;
                if (__s1 >= 0x11u)
                {
                  char v65 = __s[3];
                  __s[3] = 0;
                  uint64_t v60 = statphr_setFeature(a1, "RRpos", v201 + 8 * __s1 - 192, __s + 1);
                  if ((v60 & 0x80000000) != 0) {
                    goto LABEL_127;
                  }
                  __s[3] = v65;
                }
              }
              unsigned __int16 v211 = -1;
              __s = 0;
              uint64_t v61 = v201 + 8 * __s1;
            }
            uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 2, 1, &v213, &v218);
            if ((v60 & 0x80000000) != 0
              || (uint64_t v60 = statphr_set_WBND_feature(a1, v61, v215, HIWORD(v213), 1), (v60 & 0x80000000) != 0)
              || (uint64_t v60 = statphr_set_WBND_feature(a1, v61, v215, (unsigned __int16)v213, 0), (v60 & 0x80000000) != 0))
            {
LABEL_127:
              uint64_t v17 = v60;
              goto LABEL_128;
            }
            int v66 = (unsigned __int16)v213 - HIWORD(v213);
            unint64_t v67 = v195;
            uint64_t v68 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v195, (unsigned __int16)(v213 - HIWORD(v213)) + 1);
            if (!v68)
            {
              uint64_t v17 = 2313166858;
              log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v69, v70, v71, v72, v178);
              goto LABEL_304;
            }
            unsigned __int16 v73 = HIWORD(v213);
            if (HIWORD(v213) < (unsigned __int16)v213)
            {
              int v197 = 0;
              unsigned __int16 v191 = 0;
              int v195 = (const char *)v68;
              int v187 = v66;
              while (1)
              {
                uint64_t v74 = v73;
                if (cstdlib_strchr(",:;.?!'\"", v215[v73]))
                {
                  uint64_t v75 = cstdlib_strchr(",:;.?!", v215[v74]);
                  int v76 = v197;
                  if (v75) {
                    int v76 = 1;
                  }
                  int v197 = v76;
                  unsigned __int16 NextUtf8Offset = 1;
                }
                else
                {
                  unsigned __int16 NextUtf8Offset = utf8_GetNextUtf8Offset(&v215[v74], 0);
                  if (utf8_ToLower(v215, v74, (uint64_t)__src))
                  {
                    if (cstdlib_strlen(__src) <= NextUtf8Offset)
                    {
                      cstdlib_strcpy((char *)&v195[v191], __src);
                      unsigned __int16 v191 = cstdlib_strlen(v195);
                    }
                    else
                    {
                      v187 += 5;
                      uint64_t v78 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v195, (unsigned __int16)v187 + 1);
                      if (!v78)
                      {
                        uint64_t v17 = 2313166858;
                        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v79, v80, v81, v82, v178);
                        uint64_t v25 = (char *)v200;
                        uint64_t v32 = v201;
                        uint64_t v33 = (uint64_t)v195;
                        unsigned __int16 v36 = v204;
LABEL_130:
                        uint64_t v31 = 0;
LABEL_31:
                        uint64_t v34 = 0;
                        uint64_t v35 = 0;
LABEL_32:
                        heap_Free(*(void **)(a1 + 8), (uint64_t)__dst);
                        heap_Free(*(void **)(a1 + 8), (uint64_t)v25);
                        if (v31) {
                          heap_Free(*(void **)(a1 + 8), v31);
                        }
                        if (v35) {
                          heap_Free(*(void **)(a1 + 8), v35);
                        }
                        if (v34) {
                          heap_Free(*(void **)(a1 + 8), v34);
                        }
                        if (v33) {
                          heap_Free(*(void **)(a1 + 8), v33);
                        }
                        if (v32)
                        {
                          if (v36)
                          {
                            unsigned __int16 v37 = 0;
                            do
                            {
                              for (uint64_t i = 0; i != 64; i += 8)
                              {
                                uint64_t v39 = *(void *)(v32 + 8 * v37 + i);
                                if (v39) {
                                  heap_Free(*(void **)(a1 + 8), v39);
                                }
                              }
                              v37 += 8;
                            }
                            while (8 * v36 > v37);
                          }
                          heap_Free(*(void **)(a1 + 8), v32);
                        }
                        return v17;
                      }
                      int v195 = (const char *)v78;
                    }
                  }
                  else
                  {
                    cstdlib_strncpy((char *)&v195[v191], &v215[v74], NextUtf8Offset);
                    v191 += NextUtf8Offset;
                  }
                }
                unsigned __int16 v73 = v74 + NextUtf8Offset;
                if ((unsigned __int16)v213 <= (unsigned __int16)(v74 + NextUtf8Offset)) {
                  goto LABEL_116;
                }
              }
            }
            unsigned __int16 v191 = 0;
            int v195 = (const char *)v68;
            int v197 = 0;
LABEL_116:
            unint64_t v67 = v195;
            v195[v191] = 0;
            if (*v195)
            {
              if (statphr_searchInIGTreeParamDefs(a5, "orthtokeep", v195))
              {
                uint64_t v83 = statphr_setFeature(a1, "orth", v201 + 8 * __s1, v195);
                if ((v83 & 0x80000000) != 0)
                {
                  uint64_t v17 = v83;
LABEL_304:
                  uint64_t v25 = (char *)v200;
                  uint64_t v32 = v201;
                  uint64_t v33 = (uint64_t)v67;
LABEL_129:
                  unsigned __int16 v36 = v204;
                  goto LABEL_130;
                }
              }
            }
            __s1 += 8;
            unsigned __int16 v51 = HIWORD(v213);
            unsigned int v45 = 8 * (unsigned __int16)v204;
          }
          goto LABEL_120;
        }
        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 2, 1, &v211, &v218);
        if ((v52 & 0x80000000) != 0
          || (uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v218), 4, &__s, &v218), (v52 & 0x80000000) != 0))
        {
LABEL_121:
          uint64_t v17 = v52;
          uint64_t v31 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          goto LABEL_122;
        }
        if (cstdlib_strlen(__s) < 4 || !cstdlib_strcmp(__s, "_PR_"))
        {
          __s = 0;
          unsigned __int16 v211 = -1;
        }
LABEL_120:
        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v218), (char *)&v218 + 2);
        if ((v52 & 0x80000000) != 0) {
          goto LABEL_121;
        }
      }
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Predicting PHR with IGtree", v48, v49, v50, v178);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v219, (char *)&v218 + 2);
      if ((v17 & 0x80000000) != 0)
      {
        uint64_t v31 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
LABEL_122:
        uint64_t v25 = (char *)v200;
      }
      else
      {
        unsigned __int16 v84 = HIWORD(v218);
        uint64_t v25 = (char *)v200;
        if (HIWORD(v218))
        {
          uint64_t v188 = 0;
          __s1a = 0;
          uint64_t v183 = 0;
          unsigned __int16 v184 = 0;
          BOOL v185 = 0;
          int v192 = 0;
          BOOL v182 = 0;
          __s2 = 0;
          uint64_t v181 = 0;
          unsigned __int16 v198 = -1;
          while (1)
          {
            uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v84, 0, 1, &v216, &v218);
            if ((v85 & 0x80000000) != 0)
            {
LABEL_302:
              uint64_t v17 = v85;
              goto LABEL_307;
            }
            if (v216 > 0xA || ((1 << v216) & 0x610) == 0) {
              goto LABEL_294;
            }
            uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 1, 1, (char *)&v213 + 2, &v218);
            if ((v85 & 0x80000000) != 0) {
              goto LABEL_302;
            }
            uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v218), 2, 1, &v213, &v218);
            if ((v85 & 0x80000000) != 0) {
              goto LABEL_302;
            }
            cstdlib_strncpy(v25, &v215[HIWORD(v213)], (unsigned __int16)v213 - (unint64_t)HIWORD(v213));
            v25[(unsigned __int16)v213 - HIWORD(v213)] = 0;
            if (HIWORD(v213) != v198) {
              break;
            }
LABEL_278:
            if (!v212) {
              goto LABEL_294;
            }
            uint64_t v155 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v218), 14, &v214, &v218);
            if ((v155 & 0x80000000) != 0) {
              goto LABEL_306;
            }
            uint64_t v156 = *(uint64_t **)(a1 + 8);
            if (v192)
            {
              int v157 = cstdlib_strlen(__dst);
              int v158 = cstdlib_strlen(v214);
              uint64_t v35 = (uint64_t)__s1a;
              uint64_t v159 = (char *)heap_Realloc(v156, (uint64_t)__s1a, (v157 + v158 + 8));
              if (!v159) {
                goto LABEL_313;
              }
              uint64_t v164 = v159;
              cstdlib_strcpy(v159, v214);
              uint64_t v165 = v164;
              uint64_t v166 = __dst;
            }
            else
            {
              int v167 = cstdlib_strlen(v212);
              int v168 = cstdlib_strlen(v214);
              uint64_t v35 = (uint64_t)__s1a;
              uint64_t v169 = (char *)heap_Realloc(v156, (uint64_t)__s1a, (v167 + v168 + 8));
              if (!v169)
              {
LABEL_313:
                uint64_t v17 = 2313166858;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v160, v161, v162, v163, v179);
                uint64_t v25 = (char *)v200;
                uint64_t v32 = v201;
                uint64_t v33 = (uint64_t)v195;
                unsigned __int16 v36 = v204;
                uint64_t v31 = v181;
                uint64_t v34 = v188;
                goto LABEL_32;
              }
              uint64_t v164 = v169;
              cstdlib_strcpy(v169, v214);
              uint64_t v166 = v212;
              uint64_t v165 = v164;
            }
            uint64_t v170 = hlp_NLUStrSet(v165, "PHR", v166);
            __s1a = v164;
            if (v185)
            {
              char v174 = 66;
LABEL_289:
              v170[4] = v174;
              goto LABEL_290;
            }
            if (HIDWORD(v183))
            {
              char v174 = 73;
              goto LABEL_289;
            }
LABEL_290:
            if (!v192) {
              cstdlib_strcpy(__dst, v212);
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : word=%s NLU=%s", v171, v172, v173, v200);
            uint64_t v175 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, __int16 *))(a2 + 160);
            uint64_t v176 = HIWORD(v218);
            __int16 v177 = cstdlib_strlen(__s1a);
            uint64_t v155 = v175(a3, a4, v176, 14, (unsigned __int16)(v177 + 1), __s1a, &v217);
            if ((v155 & 0x80000000) != 0)
            {
LABEL_306:
              uint64_t v17 = v155;
              uint64_t v25 = (char *)v200;
LABEL_307:
              uint64_t v32 = v201;
              uint64_t v33 = (uint64_t)v195;
              unsigned __int16 v36 = v204;
LABEL_308:
              uint64_t v31 = v181;
              uint64_t v34 = v188;
              goto LABEL_309;
            }
            uint64_t v25 = (char *)v200;
LABEL_294:
            uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v218), (char *)&v218 + 2);
            if ((v17 & 0x80000000) == 0)
            {
              unsigned __int16 v84 = HIWORD(v218);
              if (HIWORD(v218)) {
                continue;
              }
            }
            goto LABEL_307;
          }
          uint64_t v87 = 0;
          uint64_t v199 = v201 + 8 * v184;
          do
          {
            if (!cstdlib_strcmp("pos", g_statphr_FeatureNames[v87]))
            {
              uint64_t v88 = *(const char **)(v199 + v87 * 8);
              goto LABEL_147;
            }
            ++v87;
          }
          while (v87 != 8);
          uint64_t v88 = 0;
LABEL_147:
          if (statphr_searchInIGTreeParamDefs(a5, "preppos", v88))
          {
            unsigned __int16 v89 = v184 + 8;
            unsigned int v90 = v184 + 40;
            if (v90 > (unsigned __int16)(v184 + 8))
            {
              unsigned __int16 v91 = v184 + 8;
              if (v45 > (unsigned __int16)(v184 + 8))
              {
                unsigned __int16 v186 = (char *)v88;
                if (v90 >= v45) {
                  unsigned int v90 = v45;
                }
                unsigned int v193 = v90;
                while (1)
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = v201 + 8 * v89;
                  while (cstdlib_strcmp("Lpos", g_statphr_FeatureNames[v92]))
                  {
                    if (++v92 == 8)
                    {
                      uint64_t v94 = 0;
                      goto LABEL_158;
                    }
                  }
                  uint64_t v94 = *(const char **)(v93 + v92 * 8);
LABEL_158:
                  if (cstdlib_strcmp(v94, "_"))
                  {
                    uint64_t v95 = 0;
                    while (cstdlib_strcmp("pos", g_statphr_FeatureNames[v95]))
                    {
                      if (++v95 == 8)
                      {
                        uint64_t v96 = 0;
                        goto LABEL_165;
                      }
                    }
                    uint64_t v96 = *(const char **)(v93 + v95 * 8);
LABEL_165:
                    if (statphr_searchInIGTreeParamDefs(a5, "verbpos", v96))
                    {
                      __int16 v97 = *(uint64_t **)(a1 + 8);
                      int v98 = cstdlib_strlen(v186);
                      uint64_t v99 = (char *)heap_Realloc(v97, v188, (v98 + 5));
                      if (!v99)
                      {
                        uint64_t v17 = 2313166858;
                        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v100, v101, v102, v103, v179);
                        uint64_t v25 = (char *)v200;
                        uint64_t v32 = v201;
                        uint64_t v33 = (uint64_t)v195;
                        unsigned __int16 v36 = v204;
                        uint64_t v31 = v181;
                        uint64_t v34 = v188;
LABEL_309:
                        uint64_t v35 = (uint64_t)__s1a;
                        goto LABEL_32;
                      }
                      unsigned __int16 v104 = v99;
                      cstdlib_strcpy(v99, v186);
                      cstdlib_strcat(v104, "_BVB");
                      uint64_t v105 = statphr_setFeature(a1, "pos", v199, v104);
                      if ((v105 & 0x80000000) != 0)
                      {
                        uint64_t v17 = v105;
                        uint64_t v34 = (uint64_t)v104;
                        uint64_t v25 = (char *)v200;
                        uint64_t v32 = v201;
                        uint64_t v33 = (uint64_t)v195;
                        unsigned __int16 v36 = v204;
                        uint64_t v31 = v181;
                        goto LABEL_309;
                      }
                      uint64_t v188 = (uint64_t)v104;
                      unsigned __int16 v89 = 8 * v204;
                    }
                    else
                    {
                      unsigned __int16 v89 = v91 + 8;
                    }
                  }
                  else
                  {
                    unsigned __int16 v89 = 8 * v204;
                  }
                  unsigned __int16 v36 = v204;
                  unsigned __int16 v91 = v89;
                  if (v89 >= v193) {
                    goto LABEL_173;
                  }
                }
              }
            }
          }
          unsigned __int16 v36 = v204;
LABEL_173:
          if (v212)
          {
            for (uint64_t j = 0; j != 8; ++j)
            {
              if (!cstdlib_strcmp("Lchunk", g_statphr_FeatureNames[j]))
              {
                int v107 = *(const char **)(v199 + j * 8);
                goto LABEL_179;
              }
            }
            int v107 = 0;
LABEL_179:
            if (!cstdlib_strcmp(v107, "_"))
            {
              for (uint64_t k = 0; k != 8; ++k)
              {
                if (!cstdlib_strcmp("Lpos", g_statphr_FeatureNames[k]))
                {
                  char v109 = *(const char **)(v199 + k * 8);
                  goto LABEL_185;
                }
              }
              char v109 = 0;
LABEL_185:
              unsigned __int16 v36 = v204;
              if (cstdlib_strcmp(v109, "_")) {
                statphr_setFeature(a1, "Lchunk", v199, v212);
              }
            }
          }
          if (v202 != 1) {
            goto LABEL_218;
          }
          uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v218), 14, &v214, &v218);
          if ((v110 & 0x80000000) != 0)
          {
            uint64_t v17 = v110;
LABEL_315:
            uint64_t v25 = (char *)v200;
            uint64_t v32 = v201;
            uint64_t v33 = (uint64_t)v195;
            goto LABEL_308;
          }
          if (v214) {
            BOOL v111 = v15;
          }
          else {
            BOOL v111 = 0;
          }
          if (v111)
          {
            unsigned int v112 = cstdlib_strstr(v214, "COMP:");
            if (v112)
            {
              int v113 = v183;
              if (v112[5] == 66) {
                int v113 = 1;
              }
              BOOL v182 = v112[5] == 66;
              LODWORD(v183) = v113;
              int v114 = 1;
LABEL_217:
              BOOL v194 = v114;
              goto LABEL_219;
            }
          }
          if (!v15 && v214)
          {
            unsigned __int16 v115 = cstdlib_strstr(v214, "S_COMP:");
            BOOL v194 = v115 != 0;
            if (v115) {
              int v116 = 1;
            }
            else {
              int v116 = v183;
            }
            int v117 = v182;
            if (v115) {
              int v117 = 1;
            }
            BOOL v182 = v117;
            LODWORD(v183) = v116;
            if (v214)
            {
              uint64_t v118 = cstdlib_strstr(v214, "I_COMP:");
              if (v118) {
                int v119 = 1;
              }
              else {
                int v119 = v183;
              }
              BOOL v120 = v182;
              if (v118) {
                BOOL v120 = 0;
              }
              BOOL v182 = v120;
              LODWORD(v183) = v119;
              int v121 = v194;
              if (v118) {
                int v121 = 1;
              }
              BOOL v194 = v121;
              if (v214)
              {
                uint64_t v122 = cstdlib_strstr(v214, "E_COMP:");
                BOOL v123 = v182;
                if (v122) {
                  BOOL v123 = 0;
                }
                BOOL v182 = v123;
                int v114 = v194;
                if (v122) {
                  int v114 = 1;
                }
                goto LABEL_217;
              }
            }
          }
          else
          {
LABEL_218:
            BOOL v194 = 0;
          }
LABEL_219:
          if (*(unsigned __int8 *)(a5 + 1296) >= 2u)
          {
            uint64_t v124 = 0;
            do
            {
              uint64_t v125 = 0;
              uint64_t v126 = *(const char **)(*(void *)(a5 + 1312) + 8 * v124);
              while (cstdlib_strcmp(v126, g_statphr_FeatureNames[v125]))
              {
                if (++v125 == 8)
                {
                  uint64_t v130 = 0;
                  goto LABEL_226;
                }
              }
              uint64_t v130 = *(void *)(v199 + v125 * 8);
LABEL_226:
              *((void *)v220 + v124) = v130;
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Feature %s is %s", v127, v128, v129, *(void *)(*(void *)(a5 + 1312) + 8 * v124++));
            }
            while (*(unsigned __int8 *)(a5 + 1296) - 1 > (unsigned __int16)v124);
          }
          uint64_t v131 = igtree_Process(a5, (uint64_t)v220, &v212);
          if ((v131 & 0x80000000) != 0)
          {
LABEL_311:
            uint64_t v17 = v131;
            goto LABEL_312;
          }
          statphr_dumpFeatureVectorAndResult(a1, v199, v212);
          int v135 = *v212;
          if (__s1a)
          {
            int v136 = v202;
            if (v135 != 73 || cstdlib_strstr(__s1a, v212 + 1)) {
              goto LABEL_231;
            }
          }
          else
          {
            int v136 = v202;
            if (v135 != 73)
            {
LABEL_231:
              BOOL v185 = 0;
              int v137 = 1;
              goto LABEL_234;
            }
          }
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Forcing consistency of IOB tags", v132, v133, v134, v179);
          int v137 = 0;
          BOOL v185 = 1;
LABEL_234:
          if (v136)
          {
            if (v194)
            {
              int v138 = *v212;
              if (v138 == 66)
              {
                if (v183 != 1)
                {
                  uint64_t v183 = 0;
                  goto LABEL_256;
                }
              }
              else
              {
                if (!v185)
                {
                  int v192 = 0;
                  BOOL v185 = 0;
                  HIDWORD(v183) = 0;
                  goto LABEL_276;
                }
                if (v138 != 73 || v183 != 1)
                {
                  HIDWORD(v183) = 0;
                  int v192 = 0;
                  BOOL v185 = 1;
                  uint64_t v25 = (char *)v200;
                  unsigned int v45 = 8 * (unsigned __int16)v204;
                  if (!v196) {
                    goto LABEL_277;
                  }
                  goto LABEL_263;
                }
              }
              if (v182)
              {
                HIDWORD(v183) = 0;
              }
              else
              {
                if (cstdlib_strcmp("O", __dst))
                {
                  *int __dst = 73;
                  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : Force PHR to %s as bisects compound", v152, v153, v154, (uint64_t)__dst);
                  BOOL v182 = 0;
                  if (v185)
                  {
                    HIDWORD(v183) = 0;
                    BOOL v185 = *v212 != 73;
                  }
                  else
                  {
                    BOOL v185 = 0;
                    HIDWORD(v183) = 0;
                  }
                  LODWORD(v183) = 1;
                  int v192 = 1;
                  goto LABEL_276;
                }
                HIDWORD(v183) = 0;
                BOOL v182 = 0;
              }
              LODWORD(v183) = 1;
              goto LABEL_256;
            }
            uint64_t v183 = 0;
            BOOL v182 = 0;
          }
          else
          {
            uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v218), 5, &v208, &v218);
            if ((v131 & 0x80000000) != 0) {
              goto LABEL_311;
            }
            HIDWORD(v183) = 0;
            if (__s1a && __s2)
            {
              if (cstdlib_strstr(v208, __s2)
                && *v212 != 73
                && (unsigned __int16 v139 = cstdlib_strstr(__s1a, "PHR:"), (v212 = v139) != 0))
              {
                uint64_t v212 = v139 + 4;
                int v140 = v139[4];
                uint64_t v141 = *(uint64_t **)(a1 + 8);
                int v142 = cstdlib_strlen(v139 + 4);
                uint64_t v143 = (char *)heap_Realloc(v141, v181, (v142 + 1));
                if (!v143)
                {
                  uint64_t v17 = 2313166858;
                  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v144, v145, v146, v147, v179);
LABEL_312:
                  unsigned __int16 v36 = v204;
                  goto LABEL_315;
                }
                uint64_t v148 = v143;
                HIDWORD(v183) = v140 == 66;
                cstdlib_strcpy(v143, v212);
                uint64_t v212 = v148;
                uint64_t v181 = (uint64_t)v148;
              }
              else
              {
                HIDWORD(v183) = 0;
              }
            }
            __s2 = cstdlib_strstr(v208, ",COMP");
          }
LABEL_256:
          if (v196)
          {
            if (!v137)
            {
              BOOL v185 = 1;
              uint64_t v25 = (char *)v200;
              unsigned int v45 = 8 * (unsigned __int16)v204;
              goto LABEL_263;
            }
            if (v212)
            {
              BOOL v185 = 0;
              int v192 = 0;
              uint64_t v25 = (char *)v200;
              unsigned int v45 = 8 * (unsigned __int16)v204;
              if (*v212 != 66) {
                goto LABEL_277;
              }
LABEL_263:
              if (statphr_isWBND(v199))
              {
                int v192 = 0;
              }
              else
              {
                log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"STATPHR : Force PHR from %s to I-* as it bisects eojeol", v149, v150, v151, (uint64_t)v212);
                int v192 = 0;
                BOOL v185 = 0;
                HIDWORD(v183) = 1;
              }
              goto LABEL_277;
            }
            int v192 = 0;
            BOOL v185 = 0;
          }
          else
          {
            int v192 = 0;
          }
LABEL_276:
          uint64_t v25 = (char *)v200;
          unsigned int v45 = 8 * (unsigned __int16)v204;
LABEL_277:
          v184 += 8;
          unsigned __int16 v198 = HIWORD(v213);
          goto LABEL_278;
        }
        uint64_t v31 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
      uint64_t v32 = v201;
      uint64_t v33 = (uint64_t)v195;
LABEL_126:
      unsigned __int16 v36 = v204;
      goto LABEL_32;
    }
  }
  return v17;
}

uint64_t statphr_set_WBND_feature(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  if (a4) {
    BOOL v8 = a5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  __int16 v9 = !v8;
  if (a4 && (__int16 v10 = a4, cstdlib_strlen(__s) > a4) && __s[(unsigned __int16)(v10 - v9)] != 32) {
    uint64_t v12 = "0";
  }
  else {
    uint64_t v12 = "1";
  }
  if (a5) {
    BOOL v13 = "Lwbnd";
  }
  else {
    BOOL v13 = "Rwbnd";
  }

  return statphr_setFeature(a1, v13, a2, v12);
}

BOOL statphr_isWBND(uint64_t a1)
{
  uint64_t v2 = 0;
  while (cstdlib_strcmp("Lwbnd", g_statphr_FeatureNames[v2]))
  {
    if (++v2 == 8) {
      return 0;
    }
  }
  unsigned int v3 = *(const char **)(a1 + v2 * 8);
  return v3 && !cstdlib_strcmp(v3, "1");
}

uint64_t statphr_MorphemeProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v32 = 0;
  int v33 = 0;
  unsigned int v30 = 0;
  int v31 = 0;
  __s = 0;
  uint64_t v29 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v33);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(a3, a4, (unsigned __int16)v33, 0, (char *)&v33 + 2);
  if ((v9 & 0x80000000) == 0 && HIWORD(v33) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a2 + 176))(a3, a4, (unsigned __int16)v33, 0, &v29, &v32);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v32 >= 2u)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(a3, a4, 2, (unsigned __int16)v33, (char *)&v32 + 2);
      if ((v9 & 0x80000000) == 0)
      {
        unsigned __int16 v10 = HIWORD(v32);
        if (HIWORD(v32))
        {
          uint64_t v11 = 0;
          while (1)
          {
            uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a2 + 168))(a3, a4, v10, 0, 1, &v30, &v32);
            if ((v12 & 0x80000000) != 0)
            {
LABEL_31:
              uint64_t v9 = v12;
              goto LABEL_34;
            }
            if (v30 <= 0xA && ((1 << v30) & 0x610) != 0)
            {
              uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a2 + 184))(a3, a4, HIWORD(v32), 14, (char *)&v33 + 2);
              if ((v9 & 0x80000000) != 0 || HIWORD(v33) != 1) {
                goto LABEL_34;
              }
              uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a2 + 176))(a3, a4, HIWORD(v32), 14, &__s, &v32);
              if ((v12 & 0x80000000) != 0) {
                goto LABEL_31;
              }
              unsigned int v14 = *(uint64_t **)(a1 + 8);
              size_t v15 = cstdlib_strlen(__s);
              uint64_t v16 = (char *)heap_Realloc(v14, v11, v15 + 10);
              if (!v16)
              {
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v17, v18, v19, v20, __s);
                uint64_t v9 = 2313166858;
LABEL_34:
                uint64_t v21 = (const char *)v11;
                if (!v11) {
                  return v9;
                }
LABEL_35:
                heap_Free(*(void **)(a1 + 8), (uint64_t)v21);
                return v9;
              }
              uint64_t v21 = v16;
              cstdlib_strcpy(v16, __s);
              uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(a3, a4, HIWORD(v32), 1, 1, &v31, &v32);
              if ((v22 & 0x80000000) != 0
                || (!(_WORD)v31
                  ? (unsigned __int16 v23 = "PHR:B-WP")
                  : *(unsigned char *)(v29 + (unsigned __int16)v31 - 1) != 95
                  ? (unsigned __int16 v23 = "PHR:B-WP")
                  : (unsigned __int16 v23 = "PHR:I-WP"),
                    hlp_NLUStrJoin(v21, v23),
                    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, char *))(a2 + 160),
                    uint64_t v25 = HIWORD(v32),
                    __int16 v26 = cstdlib_strlen(v21),
                    uint64_t v22 = v24(a3, a4, v25, 14, (unsigned __int16)(v26 + 1), v21, (char *)&v31 + 2),
                    (v22 & 0x80000000) != 0))
              {
                uint64_t v9 = v22;
                goto LABEL_35;
              }
              uint64_t v11 = (uint64_t)v21;
            }
            uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(a3, a4, HIWORD(v32), (char *)&v32 + 2);
            if ((v9 & 0x80000000) == 0)
            {
              unsigned __int16 v10 = HIWORD(v32);
              if (HIWORD(v32)) {
                continue;
              }
            }
            goto LABEL_34;
          }
        }
      }
    }
  }
  return v9;
}

uint64_t statcomp_setParams(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompdetailtrace", &v5) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 8) = v5;
  }
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompsrctrace", &v5) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 10) = v5;
  }
  *(_DWORD *)(a2 + 12) = 1;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statcompwidescope", &v5) & 0x80000000) == 0 && !v5) {
    *(_DWORD *)(a2 + 12) = 0;
  }
  return 0;
}

uint64_t statcomp_rules_unload(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 272);
  if (v3)
  {
    heap_Free(*(void **)(v2 + 8), v3);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 288);
  if (v4)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v4);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    *(void *)(a1 + 288) = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 312);
  if (v6)
  {
    heap_Free(*(void **)(v2 + 8), v6);
    *(void *)(a1 + 312) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 328);
  if (v7)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v7);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 232);
  if (v8)
  {
    heap_Free(*(void **)(v2 + 8), v8);
    *(void *)(a1 + 232) = 0;
  }
  uint64_t v9 = *(void **)(a1 + 248);
  if (v9)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v9);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    *(void *)(a1 + 248) = 0;
  }
  if (*(_WORD *)(a1 + 72))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 104;
    do
    {
      uint64_t v12 = *(void *)(a1 + 64);
      if (v12)
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v12 + v11 - 96));
        uint64_t v13 = *(void *)(a1 + 64) + v11;
        *(void *)(v13 - 96) = 0;
        freeRULEREGEXES((void *)v2, v13 - 80);
        freeRULEREGEXES((void *)v2, *(void *)(a1 + 64) + v11 - 64);
        uint64_t v14 = *(void *)(a1 + 64);
        uint64_t v15 = *(void *)(v14 + v11 - 48);
        if (v15 && *(_WORD *)(v14 + v11 - 40))
        {
          heap_Free(*(void **)(v2 + 8), v15);
          uint64_t v14 = *(void *)(a1 + 64);
          *(void *)(v14 + v11 - 48) = 0;
        }
        freeRULEREGEXES((void *)v2, v14 + v11 - 32);
        heap_Free(*(void **)(v2 + 8), *(void *)(*(void *)(a1 + 64) + v11 - 16));
        uint64_t v16 = (uint64_t *)(*(void *)(a1 + 64) + v11);
        *(v16 - 2) = 0;
        heap_Free(*(void **)(v2 + 8), *v16);
        *(void *)(*(void *)(a1 + 64) + v11) = 0;
      }
      if (*(_WORD *)(a1 + 88))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 80));
        *(void *)(a1 + 80) = 0;
        *(_WORD *)(a1 + 88) = 0;
      }
      if (*(_WORD *)(a1 + 104))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 96));
        *(void *)(a1 + 96) = 0;
        *(_WORD *)(a1 + 104) = 0;
      }
      ++v10;
      v11 += 120;
    }
    while (v10 < *(unsigned __int16 *)(a1 + 72));
    if (*(_WORD *)(a1 + 72))
    {
      heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 64));
      *(void *)(a1 + 64) = 0;
      *(_WORD *)(a1 + 72) = 0;
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    heap_Free(*(void **)(v2 + 8), v17);
    *(void *)(a1 + 32) = 0;
  }
  *(_WORD *)(a1 + 40) = 0;
  uint64_t v18 = *(void *)(a1 + 48);
  if (v18)
  {
    if (*(_WORD *)(a1 + 56))
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v18 + v19));
        uint64_t v18 = *(void *)(a1 + 48);
        uint64_t v21 = v18 + v19;
        *(void *)uint64_t v21 = 0;
        *(_WORD *)(v21 + 8) = 0;
        ++v20;
        v19 += 16;
      }
      while (v20 < *(unsigned __int16 *)(a1 + 56));
    }
    heap_Free(*(void **)(v2 + 8), v18);
    *(void *)(a1 + 48) = 0;
  }
  *(_WORD *)(a1 + 56) = 0;
  unsigned int v22 = *(unsigned __int16 *)(a1 + 340);
  if (*(_WORD *)(a1 + 340))
  {
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void *)(a1 + 344);
      if (v24)
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v24 + 8 * v23));
        *(void *)(*(void *)(a1 + 344) + 8 * v23) = 0;
        unsigned int v22 = *(unsigned __int16 *)(a1 + 340);
      }
      ++v23;
    }
    while (v23 < v22);
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 344));
    *(void *)(a1 + 344) = 0;
    *(_WORD *)(a1 + 340) = 0;
  }
  uint64_t v25 = *(void *)(a1 + 352);
  if (v25)
  {
    heap_Free(*(void **)(v2 + 8), v25);
    *(void *)(a1 + 352) = 0;
  }
  uint64_t v26 = *(void *)(a1 + 360);
  if (v26)
  {
    heap_Free(*(void **)(v2 + 8), v26);
    *(void *)(a1 + 360) = 0;
  }
  if (*(_WORD *)(a1 + 136))
  {
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(void *)(a1 + 152);
      if (v28)
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v28 + 8 * v27));
        *(void *)(*(void *)(a1 + 152) + 8 * v27) = 0;
      }
      uint64_t v29 = *(void *)(a1 + 160);
      if (v29)
      {
        uint64_t v30 = *(void *)(v29 + 8 * v27);
        if (v30)
        {
          uint64_t v5 = igtree_Deinit(v2, v30);
          if ((v5 & 0x80000000) != 0) {
            return v5;
          }
          heap_Free(*(void **)(v2 + 8), *(void *)(*(void *)(a1 + 160) + 8 * v27));
          *(void *)(*(void *)(a1 + 160) + 8 * v27) = 0;
        }
      }
      uint64_t v31 = *(void *)(a1 + 168);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 8 * v27);
        if (v32)
        {
          if (*(_WORD *)(v32 + 8))
          {
            unint64_t v33 = 0;
            do
            {
              uint64_t v34 = *(void *)v32;
              if (v34)
              {
                heap_Free(*(void **)(v2 + 8), *(void *)(v34 + 8 * v33));
                *(void *)(**(void **)(*(void *)(a1 + 168) + 8 * v27) + 8 * v33) = 0;
                uint64_t v31 = *(void *)(a1 + 168);
              }
              ++v33;
              uint64_t v32 = *(void *)(v31 + 8 * v27);
            }
            while (v33 < *(unsigned __int16 *)(v32 + 8));
          }
          heap_Free(*(void **)(v2 + 8), *(void *)v32);
          uint64_t v35 = *(void *)(a1 + 168);
          **(void **)(v35 + 8 * v27) = 0;
          heap_Free(*(void **)(v2 + 8), *(void *)(v35 + 8 * v27));
          *(void *)(*(void *)(a1 + 168) + 8 * v27) = 0;
        }
      }
      uint64_t v36 = *(void *)(a1 + 176);
      if (v36)
      {
        uint64_t v37 = *(void *)(v36 + 8 * v27);
        if (v37)
        {
          heap_Free(*(void **)(v2 + 8), v37);
          *(void *)(*(void *)(a1 + 176) + 8 * v27) = 0;
        }
      }
      uint64_t v38 = *(void *)(a1 + 184);
      if (v38)
      {
        uint64_t v39 = *(uint64_t **)(v38 + 8 * v27);
        if (v39)
        {
          heap_Free(*(void **)(v2 + 8), *v39);
          uint64_t v40 = *(void *)(a1 + 184);
          **(void **)(v40 + 8 * v27) = 0;
          heap_Free(*(void **)(v2 + 8), *(void *)(v40 + 8 * v27));
          *(void *)(*(void *)(a1 + 184) + 8 * v27) = 0;
        }
      }
      ++v27;
    }
    while (v27 < *(unsigned __int16 *)(a1 + 136));
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 144));
    *(void *)(a1 + 144) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    heap_Free(*(void **)(v2 + 8), *(void *)(a1 + 184));
    *(void *)(a1 + 184) = 0;
    *(_WORD *)(a1 + 136) = 0;
  }
  unsigned int v41 = *(unsigned __int16 *)(a1 + 128);
  if (*(_WORD *)(a1 + 128))
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = *(void *)(a1 + 120);
    uint64_t v45 = v44;
    do
    {
      if (v45)
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v45 + v42));
        unsigned __int16 v46 = (void *)(*(void *)(a1 + 120) + v42);
        *unsigned __int16 v46 = 0;
        heap_Free(*(void **)(v2 + 8), v46[1]);
        uint64_t v44 = *(void *)(a1 + 120);
        *(void *)(v44 + v42 + 8) = 0;
        unsigned int v41 = *(unsigned __int16 *)(a1 + 128);
        uint64_t v45 = v44;
      }
      ++v43;
      v42 += 16;
    }
    while (v43 < v41);
    *(_WORD *)(a1 + 128) = 0;
    heap_Free(*(void **)(v2 + 8), v44);
    *(void *)(a1 + 120) = 0;
  }
  return v5;
}

void *freeRULEREGEXES(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      if (*(_WORD *)(a2 + 8))
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = *(void *)a2;
          uint64_t v8 = *(void *)(*(void *)a2 + v5);
          if (v8)
          {
            if (*(_WORD *)(v8 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v8);
              *(void *)uint64_t v8 = 0;
              uint64_t v8 = *(void *)(v7 + v5);
            }
            heap_Free((void *)v4[1], v8);
            *(void *)(v7 + v5) = 0;
          }
          uint64_t v9 = v7 + v5;
          uint64_t v10 = *(void *)(v9 + 8);
          if (v10)
          {
            if (*(_WORD *)(v10 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v10);
              *(void *)uint64_t v10 = 0;
              uint64_t v10 = *(void *)(v9 + 8);
            }
            heap_Free((void *)v4[1], v10);
            *(void *)(v9 + 8) = 0;
          }
          uint64_t v11 = *(void *)(v9 + 16);
          if (v11)
          {
            if (*(_WORD *)(v11 + 8))
            {
              heap_Free((void *)v4[1], *(void *)v11);
              *(void *)uint64_t v11 = 0;
              uint64_t v11 = *(void *)(v9 + 16);
            }
            heap_Free((void *)v4[1], v11);
            *(void *)(v9 + 16) = 0;
          }
          ++v6;
          v5 += 24;
        }
        while (v6 < *(unsigned __int16 *)(a2 + 8));
        uint64_t v3 = *(void *)a2;
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t statcomp_rules_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a7;
  uint64_t v210 = *MEMORY[0x263EF8340];
  unsigned __int16 v205 = 0;
  char v204 = 0;
  unsigned int v202 = 0;
  *(_DWORD *)v203 = 0;
  uint64_t v200 = 0;
  __src = 0;
  memset(v208, 0, sizeof(v208));
  *(void *)a4 = a3;
  *(_WORD *)(a4 + 338) = 5;
  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"loading StatCOMP rules", a6, a7, a8, 0);
  __s = 0;
  memset(__dst, 0, sizeof(__dst));
  *(_DWORD *)__s2 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v197 = a5;
  uint64_t v198 = a6;
  size_t v16 = 0;
  if (cstdlib_strlen(__s))
  {
    do
    {
      unint64_t v17 = v16;
      __s2[v16] = cstdlib_tolower(__s[v16]);
      ++v16;
      size_t v18 = cstdlib_strlen(__s);
    }
    while (v17 <= 1 && v16 < v18);
  }
  __s2[v16] = 0;
  if (cstdlib_strcmp(__s, __s2))
  {
    uint64_t v19 = __s2;
    uint64_t Str = paramc_ParamSetStr(*(void *)(a3 + 40), (uint64_t)"langcode", __s2);
    if ((Str & 0x80000000) != 0) {
      return Str;
    }
    __s = __s2;
  }
  else
  {
    uint64_t v19 = __s;
  }
  cstdlib_strcpy((char *)__dst, v19);
  cstdlib_strcat((char *)__dst, "/");
  cstdlib_strcat((char *)__dst, "statcomp");
  uint64_t Str = brokeraux_ComposeBrokerString(a3, (const char *)__dst, 0, 1, __s, 0, 0, v208, 0x80uLL);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v208, 1, (uint64_t)&v200);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = brk_DataClose(*(void *)(a3 + 24), v200);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 0, (const char *)v208, "SCMP", 1031, (uint64_t *)&v205);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  unint64_t v20 = (_WORD *)(a4 + 280);
  int v192 = (_DWORD *)(a4 + 256);
  unsigned int v193 = (_DWORD *)(a4 + 296);
  BOOL v194 = (_DWORD *)(a4 + 216);
  int v196 = (_WORD *)(a4 + 72);
  uint64_t v199 = (_WORD *)(a4 + 56);
  uint64_t v195 = v8;
  int v190 = a1;
  uint64_t v191 = a2;
  do
  {
    LODWORD(v28) = ssftriff_reader_OpenChunk((uint64_t)v205, (__int32 *)v203, &v202, &__src);
    if ((v28 & 0x80000000) != 0) {
      break;
    }
    if (!cstdlib_strcmp("CFIG", v203))
    {
      uint64_t v44 = (char *)__src;
      cstdlib_memcpy((void *)(a4 + 16), __src, 2uLL);
      cstdlib_memcpy((void *)(a4 + 18), v44 + 2, 2uLL);
      cstdlib_memcpy((void *)(a4 + 20), v44 + 4, 2uLL);
LABEL_30:
      LODWORD(v28) = 0;
      goto LABEL_93;
    }
    if (!cstdlib_strcmp("SSET", v203))
    {
      uint64_t v45 = (char *)__src;
      cstdlib_memcpy((void *)(a4 + 40), __src, 2uLL);
      uint64_t v46 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(a4 + 40)) | 1);
      *(void *)(a4 + 32) = v46;
      if (!v46) {
        goto LABEL_122;
      }
      if (*(_WORD *)(a4 + 40))
      {
        unint64_t v47 = 0;
        uint64_t v48 = 4;
        unsigned int v49 = 2;
        do
        {
          cstdlib_memcpy((void *)(*(void *)(a4 + 32) + v48 - 4), &v45[v49], 4uLL);
          uint64_t v50 = v49 + 4;
          cstdlib_memcpy((void *)(*(void *)(a4 + 32) + v48), &v45[v50], 4uLL);
          unsigned int v49 = v50 + 4;
          ++v47;
          v48 += 8;
        }
        while (v47 < *(unsigned __int16 *)(a4 + 40));
        LODWORD(v28) = 0;
        goto LABEL_77;
      }
      goto LABEL_30;
    }
    if (!cstdlib_strcmp("SMAP", v203))
    {
      unsigned __int16 v51 = (char *)__src;
      cstdlib_memcpy(v199, __src, 2uLL);
      uint64_t v52 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (16 * *(unsigned __int16 *)(a4 + 56)) | 1);
      *(void *)(a4 + 48) = v52;
      if (!v52) {
        goto LABEL_122;
      }
      if (*v199)
      {
        uint64_t v53 = 0;
        unsigned int v54 = 2;
        while (1)
        {
          cstdlib_memcpy((void *)(v52 + 16 * v53 + 8), &v51[v54], 2uLL);
          uint64_t v55 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 48) + 16 * v53 + 8)) | 1);
          uint64_t v52 = *(void *)(a4 + 48);
          *(void *)(v52 + 16 * v53) = v55;
          if (!v55) {
            break;
          }
          if (*(_WORD *)(v52 + 16 * v53 + 8))
          {
            unint64_t v56 = 0;
            uint64_t v57 = 4;
            do
            {
              cstdlib_memcpy((void *)(*(void *)(v52 + 16 * v53) + v57 - 4), &v51[v54 - 2 + v57], 4uLL);
              cstdlib_memcpy((void *)(*(void *)(*(void *)(a4 + 48) + 16 * v53) + v57), &v51[v54 + 2 + v57], 4uLL);
              ++v56;
              uint64_t v52 = *(void *)(a4 + 48);
              v57 += 8;
            }
            while (v56 < *(unsigned __int16 *)(v52 + 16 * v53 + 8));
            unsigned int v54 = v54 + v57 - 2;
          }
          else
          {
            v54 += 2;
          }
          if (++v53 >= (unint64_t)(unsigned __int16)*v199) {
            goto LABEL_76;
          }
        }
LABEL_122:
        uint64_t v28 = 2313166858;
LABEL_123:
        uint64_t v122 = *(void *)a4;
LABEL_124:
        uint64_t v123 = *(void *)(v122 + 32);
LABEL_125:
        log_OutPublic(v123, (uint64_t)"FE_POS", 35000, 0, v34, v35, v36, v37, v189);
        return v28;
      }
      goto LABEL_76;
    }
    if (!cstdlib_strcmp("CRUL", v203))
    {
      uint64_t v58 = (char *)__src;
      cstdlib_memcpy(v196, __src, 2uLL);
      LODWORD(__dst[0]) = 2;
      uint64_t v59 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (120 * *(unsigned __int16 *)(a4 + 72)) | 1);
      *(void *)(a4 + 64) = v59;
      if (!v59) {
        goto LABEL_122;
      }
      if (*v196)
      {
        uint64_t v60 = 0;
        LOWORD(__s) = 0;
        unsigned int v61 = 2;
        do
        {
          uint64_t v62 = 120 * v60;
          cstdlib_memcpy((void *)(v59 + 120 * v60), &v58[v61], 4uLL);
          cstdlib_memcpy((void *)(*(void *)(a4 + 64) + 120 * v60 + 4), &v58[v61 + 4], 4uLL);
          cstdlib_memcpy((void *)(*(void *)(a4 + 64) + 120 * v60 + 16), &v58[v61 + 8], 2uLL);
          uint64_t v63 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(*(void *)(a4 + 64) + 120 * v60 + 16)) | 1);
          uint64_t v64 = *(void *)(a4 + 64);
          *(void *)(v64 + 120 * v60 + 8) = v63;
          if (!v63) {
            goto LABEL_122;
          }
          unsigned int v65 = v61 + 10;
          if (*(_WORD *)(v64 + 120 * v60 + 16))
          {
            unint64_t v66 = 0;
            do
            {
              cstdlib_memcpy(&__s, &v58[v65], 2uLL);
              *(_DWORD *)(*(void *)(*(void *)(a4 + 64) + v62 + 8) + 4 * v66) = (unsigned __int16)__s;
              v65 += 2;
              ++v66;
              uint64_t v64 = *(void *)(a4 + 64);
            }
            while (v66 < *(unsigned __int16 *)(v64 + v62 + 16));
          }
          LODWORD(__dst[0]) = v65;
          uint64_t Str = readRULEREGEXES(*(void *)a4, (uint64_t)v58, (unsigned int *)__dst, (uint64_t *)(v64 + 120 * v60 + 24));
          if ((Str & 0x80000000) != 0) {
            return Str;
          }
          uint64_t Str = readRULEREGEXES(*(void *)a4, (uint64_t)v58, (unsigned int *)__dst, (uint64_t *)(*(void *)(a4 + 64) + 120 * v60 + 40));
          if ((Str & 0x80000000) != 0) {
            return Str;
          }
          int v67 = __dst[0];
          cstdlib_memcpy((void *)(*(void *)(a4 + 64) + v62 + 64), &v58[LODWORD(__dst[0])], 2uLL);
          uint64_t v68 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v62 + 64)) | 1);
          uint64_t v69 = *(void *)(a4 + 64);
          *(void *)(v69 + v62 + 56) = v68;
          if (!v68) {
            goto LABEL_122;
          }
          if (*(_WORD *)(v69 + 120 * v60 + 64))
          {
            unint64_t v70 = 0;
            uint64_t v71 = 4;
            do
            {
              cstdlib_memcpy((void *)(*(void *)(v69 + v62 + 56) + v71 - 4), &v58[(v67 + v71 - 2)], 4uLL);
              cstdlib_memcpy((void *)(*(void *)(*(void *)(a4 + 64) + v62 + 56) + v71), &v58[(v67 + v71 + 2)], 4uLL);
              ++v70;
              uint64_t v69 = *(void *)(a4 + 64);
              v71 += 8;
            }
            while (v70 < *(unsigned __int16 *)(v69 + v62 + 64));
            int v72 = v67 + v71 - 2;
          }
          else
          {
            int v72 = v67 + 2;
          }
          LODWORD(__dst[0]) = v72;
          uint64_t Str = readRULEREGEXES(*(void *)a4, (uint64_t)v58, (unsigned int *)__dst, (uint64_t *)(v69 + 120 * v60 + 72));
          if ((Str & 0x80000000) != 0) {
            return Str;
          }
          int v73 = __dst[0];
          cstdlib_memcpy((void *)(*(void *)(a4 + 64) + v62 + 96), &v58[LODWORD(__dst[0])], 2uLL);
          uint64_t v74 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v62 + 96)) | 1);
          uint64_t v75 = *(void *)(a4 + 64);
          *(void *)(v75 + v62 + 88) = v74;
          if (!v74) {
            goto LABEL_122;
          }
          if (*(_WORD *)(v75 + 120 * v60 + 96))
          {
            unint64_t v76 = 0;
            uint64_t v77 = 4;
            do
            {
              cstdlib_memcpy((void *)(*(void *)(v75 + v62 + 88) + v77 - 4), &v58[(v73 + v77 - 2)], 4uLL);
              cstdlib_memcpy((void *)(*(void *)(*(void *)(a4 + 64) + v62 + 88) + v77), &v58[(v73 + v77 + 2)], 4uLL);
              ++v76;
              uint64_t v75 = *(void *)(a4 + 64);
              v77 += 8;
            }
            while (v76 < *(unsigned __int16 *)(v75 + v62 + 96));
            int v78 = v73 + v77 - 2;
          }
          else
          {
            int v78 = v73 + 2;
          }
          LODWORD(__dst[0]) = v78;
          cstdlib_memcpy((void *)(v75 + v62 + 112), &v58[v78], 2uLL);
          uint64_t v79 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * *(unsigned __int16 *)(*(void *)(a4 + 64) + v62 + 112)) | 1);
          uint64_t v59 = *(void *)(a4 + 64);
          *(void *)(v59 + v62 + 104) = v79;
          if (!v79) {
            goto LABEL_122;
          }
          if (*(_WORD *)(v59 + 120 * v60 + 112))
          {
            unint64_t v80 = 0;
            uint64_t v81 = 4;
            do
            {
              cstdlib_memcpy((void *)(*(void *)(v59 + v62 + 104) + v81 - 4), &v58[(v78 + v81 - 2)], 4uLL);
              cstdlib_memcpy((void *)(*(void *)(*(void *)(a4 + 64) + v62 + 104) + v81), &v58[(v78 + v81 + 2)], 4uLL);
              ++v80;
              uint64_t v59 = *(void *)(a4 + 64);
              v81 += 8;
            }
            while (v80 < *(unsigned __int16 *)(v59 + v62 + 112));
            unsigned int v61 = v78 + v81 - 2;
          }
          else
          {
            unsigned int v61 = v78 + 2;
          }
          LODWORD(__dst[0]) = v61;
        }
        while (++v60 < (unint64_t)(unsigned __int16)*v196);
      }
LABEL_76:
      LODWORD(v28) = 0;
      uint64_t v8 = v195;
LABEL_77:
      unint64_t v20 = (_WORD *)(a4 + 280);
      goto LABEL_93;
    }
    if (!cstdlib_strcmp("REGX", v203))
    {
      uint64_t v82 = v205;
      uint64_t v83 = (char *)__src;
      *(void *)&__dst[0] = __src;
      LODWORD(__s) = 0;
      cstdlib_memcpy(v194, __src, 4uLL);
      uint64_t v84 = 4;
      if (*v194)
      {
        cstdlib_memcpy(&__s, v83 + 4, 4uLL);
        uint64_t v85 = (__s + 8);
        *(void *)(a4 + 224) = &v83[v85];
        uint64_t v84 = (*(_DWORD *)(a4 + 216) + v85);
      }
      cstdlib_memcpy((void *)(a4 + 240), &v83[v84], 2uLL);
      uint64_t v86 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(a4 + 240)) | 1);
      *(void *)(a4 + 232) = v86;
      if (!v86) {
        goto LABEL_122;
      }
      if (*(_WORD *)(a4 + 240))
      {
        uint64_t v87 = 0;
        unint64_t v88 = 0;
        int v89 = v84 + 2;
        do
        {
          int v90 = v89;
          cstdlib_memcpy((void *)(*(void *)(a4 + 232) + v87), &v83[v89], 4uLL);
          int v89 = v90 + 4;
          ++v88;
          v87 += 4;
        }
        while (v88 < *(unsigned __int16 *)(a4 + 240));
      }
      uint64_t v42 = (uint64_t)v82;
      unint64_t v43 = (void **)(a4 + 248);
      goto LABEL_92;
    }
    if (!cstdlib_strcmp("STRS", v203))
    {
      unsigned __int16 v91 = v205;
      uint64_t v92 = (char *)__src;
      *(void *)&__dst[0] = __src;
      LODWORD(__s) = 0;
      cstdlib_memcpy(v193, __src, 4uLL);
      uint64_t v93 = 4;
      if (*v193)
      {
        cstdlib_memcpy(&__s, v92 + 4, 4uLL);
        uint64_t v94 = (__s + 8);
        *(void *)(a4 + 304) = &v92[v94];
        uint64_t v93 = (*(_DWORD *)(a4 + 296) + v94);
      }
      cstdlib_memcpy((void *)(a4 + 320), &v92[v93], 2uLL);
      uint64_t v95 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(a4 + 320)) | 1);
      *(void *)(a4 + 312) = v95;
      if (!v95) {
        goto LABEL_122;
      }
      if (*(_WORD *)(a4 + 320))
      {
        uint64_t v96 = 0;
        unint64_t v97 = 0;
        int v98 = v93 + 2;
        do
        {
          int v99 = v98;
          cstdlib_memcpy((void *)(*(void *)(a4 + 312) + v96), &v92[v98], 4uLL);
          int v98 = v99 + 4;
          ++v97;
          v96 += 4;
        }
        while (v97 < *(unsigned __int16 *)(a4 + 320));
      }
      uint64_t v42 = (uint64_t)v91;
      unint64_t v43 = (void **)(a4 + 328);
      goto LABEL_92;
    }
    if (!cstdlib_strcmp("REST", v203))
    {
      uint64_t v29 = v205;
      uint64_t v30 = (char *)__src;
      *(void *)&__dst[0] = __src;
      LODWORD(__s) = 0;
      cstdlib_memcpy(v192, __src, 4uLL);
      uint64_t v31 = 4;
      if (*v192)
      {
        cstdlib_memcpy(&__s, v30 + 4, 4uLL);
        uint64_t v32 = (__s + 8);
        *(void *)(a4 + 264) = &v30[v32];
        uint64_t v31 = (*(_DWORD *)(a4 + 256) + v32);
      }
      cstdlib_memcpy(v20, &v30[v31], 2uLL);
      uint64_t v33 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (4 * *(unsigned __int16 *)(a4 + 280)) | 1);
      *(void *)(a4 + 272) = v33;
      if (!v33) {
        goto LABEL_122;
      }
      if (*v20)
      {
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        int v40 = v31 + 2;
        do
        {
          int v41 = v40;
          cstdlib_memcpy((void *)(*(void *)(a4 + 272) + v38), &v30[v40], 4uLL);
          int v40 = v41 + 4;
          ++v39;
          v38 += 4;
        }
        while (v39 < *(unsigned __int16 *)(a4 + 280));
      }
      uint64_t v42 = (uint64_t)v29;
      unint64_t v43 = (void **)(a4 + 288);
LABEL_92:
      uint64_t v28 = ssftriff_reader_DetachChunkData(v42, v43, __dst);
      unint64_t v20 = (_WORD *)(a4 + 280);
      if ((v28 & 0x80000000) != 0) {
        return v28;
      }
    }
LABEL_93:
    int v100 = ssftriff_reader_CloseChunk((uint64_t)v205);
    if (v100 < 0) {
      LODWORD(v28) = v100;
    }
  }
  while ((v28 & 0x80000000) == 0);
  int v101 = v28 & 0x1FFF;
  uint64_t v28 = 2313166858;
  if (v101 == 10) {
    return v28;
  }
  ssftriff_reader_ObjClose(v205, v21, v22, v23, v24, v25, v26, v27);
  unsigned __int16 v205 = 0;
  *(_WORD *)(a4 + 104) = 0;
  uint64_t v102 = (_WORD *)(a4 + 104);
  *(_DWORD *)(a4 + 22) = 0x10000;
  *(_WORD *)(a4 + 26) = 2;
  *(_WORD *)(a4 + 336) = 0;
  *(_WORD *)(a4 + 88) = 0;
  uint64_t v103 = (_WORD *)(a4 + 88);
  unsigned int v104 = *(unsigned __int16 *)(a4 + 72);
  if (*(_WORD *)(a4 + 72))
  {
    uint64_t v105 = 0;
    unint64_t v106 = 0;
    size_t v107 = 0;
    uint64_t v108 = *(void *)(a4 + 64);
    do
    {
      if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                       + *(unsigned int *)(*(void *)(a4 + 312)
                                                         + 4 * *(unsigned int *)(v108 + v105 + 4)))) > v107)
        size_t v107 = (unsigned __int16)cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                                             + *(unsigned int *)(*(void *)(a4 + 312)
                                                                               + 4
                                                                               * *(unsigned int *)(*(void *)(a4 + 64)
                                                                                                 + v105
                                                                                                 + 4))));
      if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                       + *(unsigned int *)(*(void *)(a4 + 312)
                                                         + 4 * *(unsigned int *)(*(void *)(a4 + 64) + v105)))) >= 7
        && (int v109 = cstdlib_strncmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v105))), "HYPHEN", 6uLL), v111 = (_WORD *)(a4 + 88), !v109)|| cstdlib_strlen((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v105)))) >= 9&& (v112 = cstdlib_strncmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v105))), "COMPOUND", 8uLL), v111 = (_WORD *)(a4 + 104), !v112))
      {
        ++*v111;
      }
      uint64_t v108 = *(void *)(a4 + 64);
      unsigned int v113 = *(unsigned __int16 *)(v108 + v105 + 16);
      if (v113 > *(unsigned __int16 *)(a4 + 336))
      {
        *(_WORD *)(a4 + 336) = v113;
        if (v113 >= 0x11)
        {
          log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35007, (uint64_t)"%s%s", v110, v35, v36, v37, "maximum words");
          return 2313166848;
        }
      }
      ++v106;
      v105 += 120;
    }
    while (v106 < (unsigned __int16)*v196);
    if (*v103)
    {
      uint64_t v114 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (2 * (unsigned __int16)*v103) | 1);
      *(void *)(a4 + 80) = v114;
      if (!v114) {
        goto LABEL_123;
      }
    }
    if (*v102)
    {
      uint64_t v115 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (2 * (unsigned __int16)*v102) | 1);
      *(void *)(a4 + 96) = v115;
      if (!v115) {
        goto LABEL_123;
      }
    }
    unsigned int v104 = (unsigned __int16)*v196;
    _WORD *v103 = 0;
    _WORD *v102 = 0;
    if (v104)
    {
      uint64_t v116 = 0;
      unint64_t v117 = 0;
      do
      {
        if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                         + *(unsigned int *)(*(void *)(a4 + 312)
                                                           + 4 * *(unsigned int *)(*(void *)(a4 + 64) + v116)))) >= 7
          && (int v118 = cstdlib_strncmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v116))), "HYPHEN", 6uLL), v119 = (void *)(a4 + 80), v120 = (_WORD *)(a4 + 88), !v118)|| cstdlib_strlen((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v116)))) >= 9&& (v121 = cstdlib_strncmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(a4 + 64) + v116))), "COMPOUND", 8uLL), v119 = (void *)(a4 + 96), v120 = (_WORD *)(a4 + 104),
              !v121))
        {
          *(_WORD *)(*v119 + 2 * (unsigned __int16)(*v120)++) = v117;
        }
        ++v117;
        v116 += 120;
      }
      while (v117 < (unsigned __int16)*v196);
      unsigned int v104 = (unsigned __int16)*v102;
    }
  }
  else
  {
    size_t v107 = 0;
  }
  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%d OPEN RULES", v35, v36, v37, v104);
  if (*(_WORD *)(a4 + 104))
  {
    unint64_t v127 = 0;
    do
      log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"label=%s (%d words)", v124, v125, v126, *(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(a4 + 64)+ 120 * *(unsigned __int16 *)(*(void *)(a4 + 96) + 2 * v127++))));
    while (v127 < *(unsigned __int16 *)(a4 + 104));
  }
  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%d HYPHENATED RULES", v124, v125, v126, *(unsigned __int16 *)(a4 + 88));
  if (*(_WORD *)(a4 + 88))
  {
    unint64_t v131 = 0;
    do
      log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"label=%s (%d words)", v128, v129, v130, *(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(a4 + 64)+ 120 * *(unsigned __int16 *)(*(void *)(a4 + 80) + 2 * v131++))));
    while (v131 < *(unsigned __int16 *)(a4 + 88));
  }
  *(void *)&__dst[0] = 0;
  LOWORD(__s) = -1;
  __s2[0] = 0;
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, _OWORD *, char **, char *))(v8 + 96))(v197, v198, "fecfg", "compoundabbrendingstrip", __dst, &__s, __s2);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  *(_WORD *)(a4 + 340) = 0;
  *(void *)(a4 + 344) = 0;
  if ((unsigned __int16)__s == 1 && *(void *)&__dst[0])
  {
    uint64_t v132 = **(char ***)&__dst[0];
    while (1)
    {
      uint64_t v133 = cstdlib_strchr(v132, 44);
      if (!v133) {
        break;
      }
      uint64_t v132 = v133 + 1;
      ++*(_WORD *)(a4 + 340);
    }
    unsigned __int16 v134 = *(_WORD *)(a4 + 340) + 1;
    *(_WORD *)(a4 + 340) = v134;
    uint64_t v135 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, (8 * v134) | 1);
    *(void *)(a4 + 344) = v135;
    if (!v135) {
      goto LABEL_123;
    }
    *(_WORD *)(a4 + 340) = 0;
    int v136 = cstdlib_strchr(**(char ***)&__dst[0], __s2[0]);
    if (v136) {
      char *v136 = 0;
    }
    int v137 = **(const char ***)&__dst[0];
    if (**(void **)&__dst[0])
    {
      int v138 = cstdlib_strchr(**(char ***)&__dst[0], 44);
      if (v138)
      {
        unsigned __int16 v139 = v138;
        do
        {
          *unsigned __int16 v139 = 0;
          int v140 = *(void **)(*(void *)a4 + 8);
          int v141 = cstdlib_strlen(v137);
          uint64_t v142 = heap_Calloc(v140, 1, (v141 + 1));
          uint64_t v143 = *(unsigned __int16 *)(a4 + 340);
          *(void *)(*(void *)(a4 + 344) + 8 * v143) = v142;
          uint64_t v144 = *(char **)(*(void *)(a4 + 344) + 8 * v143);
          if (!v144) {
            goto LABEL_123;
          }
          cstdlib_strcpy(v144, v137);
          int v137 = v139 + 1;
          ++*(_WORD *)(a4 + 340);
          unsigned __int16 v139 = cstdlib_strchr(v139 + 1, 44);
        }
        while (v139);
      }
      uint64_t v145 = *(void **)(*(void *)a4 + 8);
      int v146 = cstdlib_strlen(v137);
      uint64_t v147 = heap_Calloc(v145, 1, (v146 + 1));
      uint64_t v148 = *(unsigned __int16 *)(a4 + 340);
      *(void *)(*(void *)(a4 + 344) + 8 * v148) = v147;
      uint64_t v149 = *(char **)(*(void *)(a4 + 344) + 8 * v148);
      if (!v149) {
        goto LABEL_123;
      }
      cstdlib_strcpy(v149, v137);
      ++*(_WORD *)(a4 + 340);
    }
  }
  if (v107)
  {
    uint64_t v150 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, v107 + 11);
    *(void *)(a4 + 352) = v150;
    uint64_t v122 = *(void *)a4;
    if (!v150) {
      goto LABEL_124;
    }
    uint64_t v151 = heap_Calloc(*(void **)(v122 + 8), 1, v107 + 11);
    *(void *)(a4 + 360) = v151;
    if (!v151) {
      goto LABEL_123;
    }
  }
  *(_WORD *)(a4 + 136) = 0;
  *(_DWORD *)(a4 + 368) = 0;
  if (!*(_WORD *)(a4 + 72)) {
    return 0;
  }
  unint64_t v152 = 0;
  size_t v153 = 0;
  uint64_t v154 = *(void *)(a4 + 64);
  do
  {
    if (*(_WORD *)(v154 + 120 * v152 + 64))
    {
      uint64_t v155 = 0;
      unint64_t v156 = 0;
      do
      {
        if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(v154 + 120 * v152 + 56) + v155))), "IGTREE"))
        {
          ++*(_WORD *)(a4 + 136);
          if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                           + *(unsigned int *)(*(void *)(a4 + 312)
                                                             + 4
                                                             * *(unsigned int *)(*(void *)(*(void *)(a4 + 64)
                                                                                           + 120 * v152
                                                                                           + 56)
                                                                               + v155
                                                                               + 4)))) > v153)
            size_t v153 = (unsigned __int16)cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                                                 + *(unsigned int *)(*(void *)(a4 + 312)
                                                                                   + 4
                                                                                   * *(unsigned int *)(*(void *)(*(void *)(a4 + 64) + 120 * v152 + 56) + v155 + 4))));
        }
        ++v156;
        uint64_t v154 = *(void *)(a4 + 64);
        v155 += 8;
      }
      while (v156 < *(unsigned __int16 *)(v154 + 120 * v152 + 64));
    }
    if (*(_WORD *)(v154 + 120 * v152 + 96))
    {
      uint64_t v157 = 0;
      unint64_t v158 = 0;
      do
      {
        if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(v154 + 120 * v152 + 88) + v157))), "IGTREE"))
        {
          ++*(_WORD *)(a4 + 136);
          if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                           + *(unsigned int *)(*(void *)(a4 + 312)
                                                             + 4
                                                             * *(unsigned int *)(*(void *)(*(void *)(a4 + 64)
                                                                                           + 120 * v152
                                                                                           + 88)
                                                                               + v157
                                                                               + 4)))) > v153)
            size_t v153 = (unsigned __int16)cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                                                 + *(unsigned int *)(*(void *)(a4 + 312)
                                                                                   + 4
                                                                                   * *(unsigned int *)(*(void *)(*(void *)(a4 + 64) + 120 * v152 + 88) + v157 + 4))));
        }
        ++v158;
        uint64_t v154 = *(void *)(a4 + 64);
        v157 += 8;
      }
      while (v158 < *(unsigned __int16 *)(v154 + 120 * v152 + 96));
    }
    if (*(_WORD *)(v154 + 120 * v152 + 112))
    {
      uint64_t v159 = 0;
      unint64_t v160 = 0;
      do
      {
        if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(v154 + 120 * v152 + 104) + v159))), "IGTREE"))
        {
          ++*(_WORD *)(a4 + 136);
          if (cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                           + *(unsigned int *)(*(void *)(a4 + 312)
                                                             + 4
                                                             * *(unsigned int *)(*(void *)(*(void *)(a4 + 64)
                                                                                           + 120 * v152
                                                                                           + 104)
                                                                               + v159
                                                                               + 4)))) > v153)
            size_t v153 = (unsigned __int16)cstdlib_strlen((const char *)(*(void *)(a4 + 304)
                                                                 + *(unsigned int *)(*(void *)(a4 + 312)
                                                                                   + 4
                                                                                   * *(unsigned int *)(*(void *)(*(void *)(a4 + 64) + 120 * v152 + 104) + v159 + 4))));
        }
        ++v160;
        uint64_t v154 = *(void *)(a4 + 64);
        v159 += 8;
      }
      while (v160 < *(unsigned __int16 *)(v154 + 120 * v152 + 112));
    }
    ++v152;
  }
  while (v152 < (unsigned __int16)*v196);
  if (!*(_WORD *)(a4 + 136)) {
    return 0;
  }
  *(_DWORD *)(a4 + 116) = 0;
  *(_DWORD *)(a4 + 112) = 0;
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *))(v195 + 72))(v197, v198, "compounds_feature_map");
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t))(v195 + 72))(v197, v198, "compounds_feature_key", a4 + 112);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t DctIgtreeMappings = getDctIgtreeMappings((_DWORD *)a4, v197, v198, v195, a4 + 120);
  if ((DctIgtreeMappings & 0x80000000) == 0)
  {
    uint64_t v162 = heap_Calloc(*(void **)(a3 + 8), 1, 20 * *(unsigned __int16 *)(a4 + 136));
    *(void *)(a4 + 144) = v162;
    if (!v162) {
      goto LABEL_233;
    }
    uint64_t v163 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * *(unsigned __int16 *)(a4 + 136));
    *(void *)(a4 + 152) = v163;
    if (!v163) {
      goto LABEL_233;
    }
    LODWORD(v164) = *(unsigned __int16 *)(a4 + 136);
    if (*(_WORD *)(a4 + 136))
    {
      unint64_t v165 = 0;
      do
      {
        *(void *)(*(void *)(a4 + 152) + 8 * v165) = heap_Calloc(*(void **)(a3 + 8), 1, v153 + 1);
        if (!*(void *)(*(void *)(a4 + 152) + 8 * v165)) {
          goto LABEL_233;
        }
        ++v165;
        unint64_t v164 = *(unsigned __int16 *)(a4 + 136);
      }
      while (v165 < v164);
    }
    uint64_t v166 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * v164);
    *(void *)(a4 + 160) = v166;
    if (!v166)
    {
LABEL_233:
      uint64_t v123 = *(void *)(a3 + 32);
      goto LABEL_125;
    }
    if (*(_WORD *)(a4 + 136))
    {
      unint64_t v167 = 0;
      while (1)
      {
        *(void *)(*(void *)(a4 + 160) + 8 * v167) = heap_Calloc(*(void **)(a3 + 8), 1, 1600);
        if (!*(void *)(*(void *)(a4 + 160) + 8 * v167)) {
          goto LABEL_233;
        }
        ++v167;
        unint64_t v168 = *(unsigned __int16 *)(a4 + 136);
        if (v167 >= v168)
        {
          uint64_t v169 = 8 * v168;
          goto LABEL_194;
        }
      }
    }
    uint64_t v169 = 0;
LABEL_194:
    uint64_t v171 = heap_Calloc(*(void **)(a3 + 8), 1, v169);
    *(void *)(a4 + 168) = v171;
    if (!v171) {
      goto LABEL_233;
    }
    if (*(_WORD *)(a4 + 136))
    {
      unint64_t v172 = 0;
      while (1)
      {
        *(void *)(*(void *)(a4 + 168) + 8 * v172) = heap_Calloc(*(void **)(a3 + 8), 1, 16);
        if (!*(void *)(*(void *)(a4 + 168) + 8 * v172)) {
          goto LABEL_233;
        }
        ++v172;
        unint64_t v173 = *(unsigned __int16 *)(a4 + 136);
        if (v172 >= v173)
        {
          uint64_t v174 = 8 * v173;
          goto LABEL_201;
        }
      }
    }
    uint64_t v174 = 0;
LABEL_201:
    uint64_t v175 = heap_Calloc(*(void **)(a3 + 8), 1, v174);
    *(void *)(a4 + 176) = v175;
    if (!v175) {
      goto LABEL_233;
    }
    uint64_t v176 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * *(unsigned __int16 *)(a4 + 136));
    *(void *)(a4 + 184) = v176;
    if (!v176) {
      goto LABEL_233;
    }
    LODWORD(v177) = *(unsigned __int16 *)(a4 + 136);
    if (*(_WORD *)(a4 + 136))
    {
      unint64_t v178 = 0;
      do
      {
        *(void *)(*(void *)(a4 + 184) + 8 * v178) = heap_Calloc(*(void **)(a3 + 8), 1, 8);
        if (!*(void *)(*(void *)(a4 + 184) + 8 * v178)) {
          goto LABEL_233;
        }
        ++v178;
        unint64_t v177 = *(unsigned __int16 *)(a4 + 136);
      }
      while (v178 < v177);
    }
    if (*v196)
    {
      unint64_t v179 = 0;
      int v180 = 0;
      uint64_t v181 = *(void *)(a4 + 64);
      do
      {
        if (*(_WORD *)(v181 + 120 * v179 + 64))
        {
          uint64_t v182 = 0;
          unint64_t v183 = 0;
          do
          {
            if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(v181 + 120 * v179 + 56) + v182))), "IGTREE"))
            {
              uint64_t DctIgtreeMappings = setIGTreeInfo(v190, v191, (uint64_t *)a4, (unsigned __int16)v180, (char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(*(void *)(a4 + 64)+ 120 * v179+ 56)+ v182+ 4))), v197, v198, v195);
              if ((DctIgtreeMappings & 0x80000000) != 0) {
                return DctIgtreeMappings;
              }
              ++v180;
            }
            ++v183;
            uint64_t v181 = *(void *)(a4 + 64);
            v182 += 8;
          }
          while (v183 < *(unsigned __int16 *)(v181 + 120 * v179 + 64));
        }
        if (*(_WORD *)(v181 + 120 * v179 + 96))
        {
          uint64_t v184 = 0;
          unint64_t v185 = 0;
          do
          {
            if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4 * *(unsigned int *)(*(void *)(v181 + 120 * v179 + 88) + v184))), "IGTREE"))
            {
              uint64_t DctIgtreeMappings = setIGTreeInfo(v190, v191, (uint64_t *)a4, (unsigned __int16)v180, (char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(*(void *)(a4 + 64)+ 120 * v179+ 88)+ v184+ 4))), v197, v198, v195);
              if ((DctIgtreeMappings & 0x80000000) != 0) {
                return DctIgtreeMappings;
              }
              ++v180;
            }
            ++v185;
            uint64_t v181 = *(void *)(a4 + 64);
            v184 += 8;
          }
          while (v185 < *(unsigned __int16 *)(v181 + 120 * v179 + 96));
        }
        if (*(_WORD *)(v181 + 120 * v179 + 112))
        {
          uint64_t v186 = 0;
          unint64_t v187 = 0;
          do
          {
            if (!cstdlib_strcmp((const char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(v181 + 120 * v179 + 104) + v186))), "IGTREE"))
            {
              uint64_t DctIgtreeMappings = setIGTreeInfo(v190, v191, (uint64_t *)a4, (unsigned __int16)v180, (char *)(*(void *)(a4 + 304)+ *(unsigned int *)(*(void *)(a4 + 312)+ 4* *(unsigned int *)(*(void *)(*(void *)(a4 + 64)+ 120 * v179+ 104)+ v186+ 4))), v197, v198, v195);
              if ((DctIgtreeMappings & 0x80000000) != 0) {
                return DctIgtreeMappings;
              }
              ++v180;
            }
            ++v187;
            uint64_t v181 = *(void *)(a4 + 64);
            v186 += 8;
          }
          while (v187 < *(unsigned __int16 *)(v181 + 120 * v179 + 112));
        }
        ++v179;
      }
      while (v179 < (unsigned __int16)*v196);
      LODWORD(v177) = *(unsigned __int16 *)(a4 + 136);
    }
    if (v177)
    {
      int v188 = 0;
      do
        setIGTreeWord2Nindex(a4, (unsigned __int16)v188++);
      while (*(unsigned __int16 *)(a4 + 136) > (unsigned __int16)v188);
    }
  }
  return DctIgtreeMappings;
}

uint64_t getDctIgtreeMappings(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v39 = 0;
  __int16 v38 = -1;
  if (a1[92] == 1 || !a1[29]) {
    return 0;
  }
  char v37 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned __int8 ***, __int16 *, char *))(a4 + 96))(a2, a3, "compounds_feature_map", "numMappings", &v39, &v38, &v37);
  if ((v10 & 0x80000000) != 0) {
    return v10;
  }
  if (v38 != 1 || v39 == 0)
  {
    unsigned __int16 v14 = *(_WORD *)(a5 + 8);
  }
  else
  {
    unsigned __int16 v14 = cstdlib_atoi(*v39);
    *(_WORD *)(a5 + 8) = v14;
  }
  uint64_t v15 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, (16 * v14) | 1);
  *(void *)a5 = v15;
  if (!v15)
  {
LABEL_26:
    uint64_t v12 = 2313166858;
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v36);
    return v12;
  }
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      LH_itoa(v21, (char *)&v36 + 1, 0xAu);
      __int16 v38 = -1;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, unsigned __int8 ***, __int16 *, char *))(a4 + 96))(a2, a3, "compounds_feature_map", (char *)&v36 + 1, &v39, &v38, &v37);
      if ((v10 & 0x80000000) != 0) {
        return v10;
      }
      BOOL v26 = v38 != 1 || v39 == 0;
      if (v26 || (uint64_t v27 = *v39, (v28 = cstdlib_strchr((char *)*v39, 43)) == 0))
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35005, 0, v22, v23, v24, v25, v36);
        return 2313166848;
      }
      uint64_t v29 = v28;
      *uint64_t v28 = 0;
      uint64_t v30 = *(void **)(*(void *)a1 + 8);
      int v31 = cstdlib_strlen((const char *)v27);
      uint64_t v32 = (char *)heap_Calloc(v30, 1, (v31 + 1));
      *(void *)(*(void *)a5 + v20 + 8) = v32;
      if (!v32) {
        goto LABEL_26;
      }
      cstdlib_strcpy(v32, (const char *)v27);
      uint64_t v33 = *(void **)(*(void *)a1 + 8);
      int v34 = cstdlib_strlen(v29 + 1);
      uint64_t v35 = (char *)heap_Calloc(v33, 1, (v34 + 1));
      *(void *)(*(void *)a5 + v20) = v35;
      if (!v35) {
        goto LABEL_26;
      }
      cstdlib_strcpy(v35, v29 + 1);
      ++v21;
      v20 += 16;
    }
    while (v21 < *(unsigned __int16 *)(a5 + 8));
  }
  uint64_t v12 = 0;
  a1[92] = 1;
  return v12;
}

uint64_t setIGTreeInfo(_WORD *a1, uint64_t a2, uint64_t *a3, unsigned int a4, char *__src, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v8 = 2313166855;
  memset(&__c[1], 0, 256);
  if (a3)
  {
    uint64_t v10 = a3[19];
    if (v10)
    {
      *(void *)uint64_t v52 = 0;
      uint64_t v12 = *(char **)(v10 + 8 * a4);
      if (v12)
      {
        cstdlib_strcpy(v12, __src);
        uint64_t v18 = *a3;
        uint64_t v53 = 0;
        memset(__s1, 0, sizeof(__s1));
        uint64_t Str = paramc_ParamGetStr(*(void *)(v18 + 40), (uint64_t)"langcode", &v53);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        cstdlib_strcat((char *)__s1, __src);
        cstdlib_strcat((char *)__s1, "_igtree");
        uint64_t Str = brokeraux_ComposeBrokerString(v18, (const char *)__s1, 1, 1, v53, 0, 0, &__c[1], 0x100uLL);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        if ((ssftriff_reader_ObjOpen(a1, a2, 2, &__c[1], "IGTR", 1031, (uint64_t *)v52) & 0x80000000) != 0)
        {
          log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"FE_POS", 35004, 0, v20, v21, v22, v23, v50);
          return 2313166848;
        }
        uint64_t Str = igtree_Init(a1, a2, *(uint64_t *)v52, *(char **)(a3[20] + 8 * a4));
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t Str = ssftriff_reader_ObjClose(*(void **)v52, v24, v25, v26, v27, v28, v29, v30);
        if ((Str & 0x80000000) != 0) {
          return Str;
        }
        uint64_t v31 = *(void *)(a3[21] + 8 * a4);
        *(void *)&__s1[0] = 0;
        LOWORD(v53) = -1;
        if (*((_DWORD *)a3 + 28))
        {
          __c[0] = 0;
          uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, const char *, char *, _OWORD *, char **, unsigned char *))(a8 + 96))(a6, a7, "compounds_feature_key", __src, __s1, &v53, __c);
          if ((Str & 0x80000000) != 0) {
            return Str;
          }
          if ((unsigned __int16)v53 == 1 && *(void *)&__s1[0])
          {
            uint64_t v32 = **(unsigned __int8 ***)&__s1[0];
            uint64_t v33 = cstdlib_strchr(**(char ***)&__s1[0], __c[0]);
            int v34 = v33;
            if (v33) {
              *uint64_t v33 = 0;
            }
            unsigned __int16 v35 = cstdlib_atoi(v32);
            *(_WORD *)(v31 + 8) = v35;
            uint64_t v36 = heap_Calloc(*(void **)(*a3 + 8), 1, (8 * v35) | 1u);
            *(void *)uint64_t v31 = v36;
            if (!v36)
            {
LABEL_33:
              log_OutPublic(*(void *)(*a3 + 32), (uint64_t)"FE_POS", 35000, 0, v37, v38, v39, v40, v50);
              return 2313166858;
            }
            if (*(_WORD *)(v31 + 8))
            {
              unint64_t v41 = 0;
              if (v34) {
                uint64_t v32 = (unsigned __int8 *)(v34 + 1);
              }
              do
              {
                uint64_t v42 = cstdlib_strchr((char *)v32, __c[0]);
                unint64_t v43 = v42;
                if (v42) {
                  *uint64_t v42 = 0;
                }
                uint64_t v44 = *(void **)(*a3 + 8);
                int v45 = cstdlib_strlen((const char *)v32);
                *(void *)(*(void *)v31 + 8 * v41) = heap_Calloc(v44, 1, (v45 + 1));
                uint64_t v46 = *(char **)(*(void *)v31 + 8 * v41);
                if (!v46) {
                  goto LABEL_33;
                }
                cstdlib_strcpy(v46, (const char *)v32);
                ++v41;
                unint64_t v47 = *(unsigned __int16 *)(v31 + 8);
                if (v41 != v47 && v43 != 0) {
                  uint64_t v32 = (unsigned __int8 *)(v43 + 1);
                }
              }
              while (v41 < v47);
            }
          }
        }
        *(void *)(a3[22] + 8 * a4) = heap_Calloc(*(void **)(*a3 + 8), 1, (2 * *(unsigned __int16 *)(*(void *)(a3[21] + 8 * a4) + 8)) | 1);
        if (!*(void *)(a3[22] + 8 * a4)) {
          return 2313166858;
        }
        return setIgtreeFVLookups(a3, *(uint64_t **)(a3[23] + 8 * a4), a4);
      }
    }
  }
  return v8;
}

uint64_t setIGTreeWord2Nindex(uint64_t result, unsigned int a2)
{
  if (*(_WORD *)(result + 40))
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    while (1)
    {
      uint64_t result = cstdlib_strncmp((const char *)(*(void *)(v2 + 304)+ *(unsigned int *)(*(void *)(v2 + 312)+ 4 * *(unsigned int *)(*(void *)(v2 + 32) + v3))), "IGTREE_", 7uLL);
      if (!result)
      {
        uint64_t result = cstdlib_strcmp((const char *)(*(void *)(v2 + 304)+ *(unsigned int *)(*(void *)(v2 + 312)+ 4 * *(unsigned int *)(*(void *)(v2 + 32) + v3))+ 7), *(const char **)(*(void *)(v2 + 152) + 8 * v5));
        if (!result) {
          break;
        }
      }
      ++v4;
      v3 += 8;
      if (v4 >= *(unsigned __int16 *)(v2 + 40)) {
        return result;
      }
    }
    unint64_t v6 = (char *)(*(void *)(v2 + 304)
                + *(unsigned int *)(*(void *)(v2 + 312) + 4 * *(unsigned int *)(*(void *)(v2 + 32) + v3 + 4)));
    uint64_t result = (uint64_t)cstdlib_strchr(v6, 95);
    uint64_t v7 = result;
    if (result)
    {
      int v8 = 0;
      do
      {
        *(unsigned char *)uint64_t v7 = 0;
        unsigned __int16 v9 = v8 + 1;
        *(_WORD *)(*(void *)(v2 + 144) + 20 * v5 + 2 * (unsigned __int16)v8) = cstdlib_atoi((unsigned __int8 *)v6);
        unint64_t v6 = (char *)(v7 + 1);
        uint64_t result = (uint64_t)cstdlib_strchr((char *)(v7 + 1), 95);
        uint64_t v7 = result;
        ++v8;
      }
      while (result);
      uint64_t v7 = v9;
    }
    if (*v6)
    {
      uint64_t result = cstdlib_atoi((unsigned __int8 *)v6);
      *(_WORD *)(*(void *)(v2 + 144) + 20 * v5 + 2 * v7) = result;
    }
  }
  return result;
}

uint64_t statcomp_add2Str(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s)
{
  size_t v8 = cstdlib_strlen(__s);
  uint64_t v9 = *a3;
  if (v8 >= v9 - cstdlib_strlen(*a2))
  {
    __int16 v11 = cstdlib_strlen(__s);
    __int16 v12 = *a3;
    unsigned int v13 = (unsigned __int16)(v11 - v12 + cstdlib_strlen(*a2));
    if (v13 <= 0x80) {
      uint64_t v14 = 128;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v10 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a3 + v14 + 1);
    if (!v10)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v15, v16, v17, v18, v22);
      return 2313166858;
    }
    *a2 = v10;
    *a3 += v14;
  }
  else
  {
    uint64_t v10 = *a2;
  }
  size_t v19 = cstdlib_strlen(v10);
  uint64_t v20 = (char *)*a2;
  if (v19) {
    cstdlib_strcat(v20, __s);
  }
  else {
    cstdlib_strcpy(v20, __s);
  }
  return 0;
}

uint64_t matchSTATCOMPCONTEXT_TRule(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int *a8, int *a9, _WORD *a10, unsigned int a11)
{
  __int16 v11 = a7;
  uint64_t v12 = a6;
  uint64_t v14 = a9;
  uint64_t v56 = *MEMORY[0x263EF8340];
  *a9 = 0;
  *(unsigned int *)((char *)a8 + 6) = 0;
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t v20 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, a7);
    if ((v20 & 0x80000000) != 0) {
      return v20;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    cstdlib_strcpy((char *)*a2, "");
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (!*((_WORD *)v11 + 4))
  {
    int v45 = 1;
    goto LABEL_75;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = a11;
  uint64_t v24 = a8;
  uint64_t v52 = v12;
  uint64_t v53 = v11;
  while (1)
  {
    uint64_t v25 = *v11;
    int v26 = *((unsigned __int16 *)v24 + 2);
    if (*(_WORD *)(a5 + 8))
    {
      uint64_t v27 = v12;
      uint64_t v28 = v23;
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           regex %d", a6, (uint64_t)a7, (uint64_t)a8, *(unsigned __int16 *)(v25 + v21 + 2));
      int v29 = *(unsigned char *)(v25 + v21 + 4) & 1;
      if (*(unsigned __int16 *)(a5 + 8) >= 2u)
      {
        int v30 = *(unsigned char *)(v25 + v21 + 4) & 1;
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d", a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)STATCOMPDOMAIN2STRING[*a8]);
        int v29 = v30;
      }
      uint64_t v23 = v28;
      uint64_t v12 = v27;
      uint64_t v24 = a8;
    }
    else
    {
      int v29 = *(unsigned char *)(v25 + v21 + 4) & 1;
    }
    if (*v24 == 2)
    {
      int v31 = *(unsigned __int16 *)(v25 + v21);
      if (v31 == 2)
      {
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 40);
        if (!v33)
        {
          int v34 = "           ERROR : no TOK string to match";
          goto LABEL_48;
        }
      }
      else if (v31 == 1)
      {
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 32);
        if (!v33) {
          goto LABEL_47;
        }
      }
      else
      {
        if (*(_WORD *)(v25 + v21))
        {
LABEL_25:
          if (!*(_WORD *)(a5 + 8))
          {
            uint64_t v20 = 0;
            if (!v29) {
              goto LABEL_66;
            }
            goto LABEL_54;
          }
          int v32 = v29;
          log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, (uint64_t)a7, (uint64_t)a8, 0);
          goto LABEL_49;
        }
        int v32 = v29;
        uint64_t v33 = *(char **)(v12 + 24);
        if (!v33)
        {
          int v34 = "           ERROR : no ORT string to match";
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (*v24 != 1) {
        goto LABEL_25;
      }
      if (v23)
      {
        if (v23 == 2)
        {
          if (v26 + *((unsigned __int16 *)v24 + 4) + 1 >= *(unsigned __int16 *)(v12 + 8)) {
            goto LABEL_67;
          }
        }
        else if (v23 != 1 || ~*((unsigned __int16 *)v24 + 3) + v26 < 0)
        {
LABEL_67:
          uint64_t v20 = 0;
          if (!*(_WORD *)(a5 + 8)) {
            goto LABEL_73;
          }
          uint64_t v46 = "           context not found. rule not applicable. RETURN LH_FALSE";
          goto LABEL_72;
        }
      }
      uint64_t v33 = *(char **)(*(void *)v12 + 96 * *((unsigned __int16 *)v24 + 2) + 32);
      if (!v33)
      {
        int v32 = v29;
LABEL_47:
        int v34 = "           ERROR : no POS string to match";
LABEL_48:
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v34, a6, (uint64_t)a7, (uint64_t)a8, 0);
LABEL_49:
        uint64_t v20 = 0;
        goto LABEL_50;
      }
      int v32 = v29;
      int v34 = "           ERROR : expected POS(idx) rule";
      if (*(unsigned __int16 *)(v25 + v21) != *(unsigned __int16 *)(a5 + 24)) {
        goto LABEL_48;
      }
    }
    uint64_t v35 = v23;
    if (*(_WORD *)(a5 + 8)) {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           STR=\"%s\"", a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)v33);
    }
    uint64_t v36 = *(unsigned __int16 *)(v25 + v21 + 2);
    unsigned __int16 v37 = cstdlib_strlen(v33);
    if (!v37)
    {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"invalid arg for regex", v38, v39, v40, 0);
      return 2313166855;
    }
    unsigned int v41 = nuance_pcre_exec(*(void **)(a5 + 200), *(void *)(a5 + 208), *(void *)(a5 + 224) + *(unsigned int *)(*(void *)(a5 + 232) + 4 * v36), 0, v33, v37, 0, 0, v55, 30);
    if ((v41 & 0x80000000) == 0) {
      break;
    }
    uint64_t v43 = nuance_pcre_ErrorToLhError(v41);
    uint64_t v20 = v43;
    uint64_t v23 = v35;
    if (v43 >> 20 == 2213)
    {
      if ((v43 & 0x1FFF) != 0x14)
      {
        if ((v43 & 0x1FFF) == 0xA)
        {
          uint64_t v48 = *(void *)(*(void *)a5 + 32);
          uint64_t v49 = 11002;
          unsigned int v50 = 0;
        }
        else
        {
          uint64_t v48 = *(void *)(*(void *)a5 + 32);
          unsigned __int16 v51 = "lhError";
          unsigned int v50 = "%s%x";
          uint64_t v49 = 11027;
        }
        log_OutPublic(v48, (uint64_t)"FE_POS", v49, (uint64_t)v50, v44, a6, (uint64_t)a7, (uint64_t)a8, v51);
        return v20;
      }
      goto LABEL_60;
    }
    uint64_t v12 = v52;
    __int16 v11 = v53;
    if ((v43 & 0x80000000) != 0) {
      return v20;
    }
LABEL_50:
    if (*(_WORD *)(a5 + 8))
    {
      log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FAILED", a6, (uint64_t)a7, (uint64_t)a8, 0);
      if (!v32)
      {
        int v45 = *(unsigned __int16 *)(a5 + 8);
        if (!*(_WORD *)(a5 + 8)) {
          goto LABEL_74;
        }
        uint64_t v46 = "           return LH_FALSE";
LABEL_72:
        uint64_t v14 = a9;
        log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v46, a6, (uint64_t)a7, (uint64_t)a8, 0);
        int v45 = 0;
        goto LABEL_75;
      }
    }
    else if (!v32)
    {
LABEL_66:
      int v45 = 0;
      goto LABEL_74;
    }
LABEL_54:
    *a10 = *(_WORD *)(v25 + v21 + 2);
    uint64_t v42 = "           negate match - return LH_TRUE";
    if (*(_WORD *)(a5 + 8)) {
      goto LABEL_55;
    }
LABEL_56:
    ++v22;
    v21 += 6;
    if (v22 >= *((unsigned __int16 *)v11 + 4))
    {
      int v45 = 1;
      goto LABEL_74;
    }
  }
  uint64_t v23 = v35;
  if (!v41)
  {
LABEL_60:
    uint64_t v20 = 0;
    uint64_t v12 = v52;
    __int16 v11 = v53;
    goto LABEL_50;
  }
  if (*(_WORD *)(a5 + 8)) {
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FIRED", a6, (uint64_t)a7, (uint64_t)a8, 0);
  }
  __int16 v11 = v53;
  uint64_t v20 = 0;
  if (!v32)
  {
    *a10 = *(_WORD *)(v25 + v21 + 2);
    uint64_t v42 = "           return LH_TRUE";
    uint64_t v12 = v52;
    if (!*(_WORD *)(a5 + 8)) {
      goto LABEL_56;
    }
LABEL_55:
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v42, a6, (uint64_t)a7, (uint64_t)a8, 0);
    goto LABEL_56;
  }
  if (*(_WORD *)(a5 + 8))
  {
    uint64_t v46 = "           negate match - return LH_FALSE";
    goto LABEL_72;
  }
LABEL_73:
  int v45 = 0;
LABEL_74:
  uint64_t v14 = a9;
LABEL_75:
  *uint64_t v14 = v45;
  return v20;
}

uint64_t logSTATCOMPCONTEXT_TRule(const char **a1, unsigned __int16 *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (!*((_WORD *)a5 + 4)) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *a5;
    unsigned int v13 = (unsigned __int16 *)(*a5 + v10);
    if (*((unsigned char *)v13 + 4))
    {
      if (v13[2]) {
        cstdlib_strcpy(__s, "!");
      }
      uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
      if ((result & 0x80000000) != 0) {
        break;
      }
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, "[");
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[38] + *(unsigned int *)(a4[39] + 4 * *v13)));
    if ((result & 0x80000000) != 0) {
      break;
    }
    sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
    uint64_t result = statcomp_add2Str(*a4, a1, a2, __s);
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, (char *)(a4[33] + *(unsigned int *)(a4[34] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t result = statcomp_add2Str(*a4, a1, a2, ")] ");
    if ((result & 0x80000000) != 0) {
      break;
    }
    ++v11;
    v10 += 6;
    if (v11 >= *((unsigned __int16 *)a5 + 4)) {
      return 0;
    }
  }
  return result;
}

uint64_t statcomp_matchRule(int a1, const char **a2, unsigned __int16 *a3, char *__s, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, int *a9)
{
  int v25 = 1;
  if (*(_WORD *)(a5 + 8))
  {
    if (!a1) {
      goto LABEL_14;
    }
    if (*(void *)a8)
    {
      uint64_t v16 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, *(uint64_t **)a8);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
    }
    *(_DWORD *)__s = 2121504;
    uint64_t v16 = statcomp_add2Str(*(void *)a5, a2, a3, __s);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    uint64_t v17 = *(uint64_t **)(a8 + 8);
    if (v17)
    {
      uint64_t v16 = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, v17);
      if ((v16 & 0x80000000) != 0) {
        return v16;
      }
    }
    *(_DWORD *)__s = 2121504;
    uint64_t v16 = statcomp_add2Str(*(void *)a5, a2, a3, __s);
    if ((v16 & 0x80000000) != 0) {
      return v16;
    }
    uint64_t v18 = *(uint64_t **)(a8 + 16);
    if (v18)
    {
      uint64_t matched = logSTATCOMPCONTEXT_TRule(a2, a3, __s, (uint64_t *)a5, v18);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
    }
    else
    {
LABEL_14:
      uint64_t matched = 0;
    }
    log_OutText(*(void *)(*(void *)a5 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"       <%s>", a6, (uint64_t)a7, a8, (uint64_t)*a2);
    cstdlib_strcpy((char *)*a2, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  *a9 = 0;
  if (*(void *)a8)
  {
    uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"LEFT", a2, a3, __s, a5, a6, *(uint64_t **)a8, a7, &v25, &v24, 1u);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1) {
      goto LABEL_26;
    }
  }
  uint64_t v21 = *(uint64_t **)(a8 + 8);
  if (v21)
  {
    int v25 = 0;
    uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"CUR", a2, a3, __s, a5, a6, v21, a7, &v25, &v24, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v20 = v25;
    if (v25 != 1)
    {
LABEL_26:
      *a9 = v20;
      return matched;
    }
  }
  unint64_t v22 = *(uint64_t **)(a8 + 16);
  if (!v22)
  {
    int v20 = 1;
    goto LABEL_26;
  }
  int v25 = 0;
  uint64_t matched = matchSTATCOMPCONTEXT_TRule((uint64_t)"RIGHT", a2, a3, __s, a5, a6, v22, a7, &v25, &v24, 2u);
  if ((matched & 0x80000000) == 0)
  {
    int v20 = v25;
    goto LABEL_26;
  }
  return matched;
}

uint64_t readRULEREGEXES(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  size_t v8 = (unsigned __int16 *)(a4 + 1);
  cstdlib_memcpy(a4 + 1, (const void *)(a2 + *a3), 2uLL);
  *a3 += 2;
  uint64_t v9 = heap_Calloc(*(void **)(a1 + 8), 1, (24 * *((unsigned __int16 *)a4 + 4)) | 1);
  *a4 = v9;
  if (v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = -1;
    while (++v15 < (unint64_t)*v8)
    {
      uint64_t v16 = *a4;
      uint64_t v17 = (uint64_t *)(*a4 + v14);
      uint64_t result = readCONTEXT_0(a1, a2, a3, v17);
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = readCONTEXT_0(a1, a2, a3, v17 + 1);
        if ((result & 0x80000000) == 0)
        {
          uint64_t result = readCONTEXT_0(a1, a2, a3, (uint64_t *)(v16 + v14 + 16));
          v14 += 24;
          if ((result & 0x80000000) == 0) {
            continue;
          }
        }
      }
      return result;
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v10, v11, v12, v13, v19);
    return 2313166858;
  }
}

uint64_t readCONTEXT_0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  int __dst = 0;
  cstdlib_memcpy(&__dst, (const void *)(a2 + *a3), 2uLL);
  *a3 += 2;
  if (!(_WORD)__dst) {
    return 0;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (!v8)
  {
    uint64_t v21 = 2313166858;
LABEL_11:
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v9, v10, v11, v12, v23);
    return v21;
  }
  uint64_t v13 = v8;
  uint64_t v14 = (unsigned __int16)__dst;
  *(_WORD *)(v8 + 8) = __dst;
  uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v14) | 1);
  *(void *)uint64_t v13 = v15;
  if (!v15)
  {
    uint64_t v21 = 2313166858;
    heap_Free(*(void **)(a1 + 8), v13);
    goto LABEL_11;
  }
  if (*(_WORD *)(v13 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = *a3;
    do
    {
      cstdlib_memcpy((void *)(v15 + v16), (const void *)(a2 + v18), 2uLL);
      uint64_t v19 = *a3 + 2;
      *a3 = v19;
      cstdlib_memcpy((void *)(*(void *)v13 + v16 + 2), (const void *)(a2 + v19), 2uLL);
      uint64_t v20 = *a3 + 2;
      *a3 = v20;
      cstdlib_memcpy((char *)&__dst + 2, (const void *)(a2 + v20), 2uLL);
      unsigned int v18 = *a3 + 2;
      *a3 = v18;
      uint64_t v15 = *(void *)v13;
      *(unsigned char *)(*(void *)v13 + v16 + 4) = BYTE2(__dst);
      ++v17;
      v16 += 6;
    }
    while (v17 < *(unsigned __int16 *)(v13 + 8));
  }
  uint64_t v21 = 0;
  *a4 = v13;
  return v21;
}

uint64_t setIgtreeFVLookups(void *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1[20] + 8 * a3);
  uint64_t v7 = heap_Calloc(*(void **)(*a1 + 8), 1, 12 * *(unsigned __int8 *)(v6 + 1296) - 11);
  *a2 = v7;
  if (!v7)
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 35000, 0, v8, v9, v10, v11, v23);
    return 2313166858;
  }
  if (*(unsigned __int8 *)(v6 + 1296) < 2u) {
    return 0;
  }
  uint64_t v12 = 0;
  int v24 = 0;
  while (1)
  {
    if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N1_", 3uLL))
    {
      if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N2_", 3uLL))
      {
        __int16 v13 = 3;
        if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N3_", 3uLL))
        {
          if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N4_", 3uLL))
          {
            if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N5_", 3uLL))
            {
              if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N6_", 3uLL))
              {
                if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N7_", 3uLL))
                {
                  if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N8_", 3uLL))
                  {
                    if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N9_", 3uLL))
                    {
                      if (cstdlib_strncmp(*(const char **)(*(void *)(v6 + 1312) + 8 * v12), "N10_", 4uLL)) {
                        goto LABEL_24;
                      }
                      __int16 v13 = 10;
                    }
                    else
                    {
                      __int16 v13 = 9;
                    }
                  }
                  else
                  {
                    __int16 v13 = 8;
                  }
                }
                else
                {
                  __int16 v13 = 7;
                }
              }
              else
              {
                __int16 v13 = 6;
              }
            }
            else
            {
              __int16 v13 = 5;
            }
          }
          else
          {
            __int16 v13 = 4;
          }
        }
      }
      else
      {
        __int16 v13 = 2;
      }
    }
    else
    {
      __int16 v13 = 1;
    }
    *(_WORD *)(*a2 + 12 * v12) = v13;
LABEL_24:
    if (statcomp_isDynamicFeature(*(char **)(*(void *)(v6 + 1312) + 8 * v12), (_WORD *)&v24 + 1) != 1) {
      break;
    }
    uint64_t v14 = *a2;
    *(_DWORD *)(*a2 + 12 * v12 + 4) = 0;
LABEL_31:
    *(_WORD *)(v14 + 12 * v12++ + 8) = HIWORD(v24);
    if (*(unsigned __int8 *)(v6 + 1296) - 1 <= (unsigned __int16)v12) {
      return 0;
    }
  }
  if (statcomp_isDctFeature(*(char **)(*(void *)(v6 + 1312) + 8 * v12), (_WORD *)&v24 + 1, *(void *)(a1[21] + 8 * a3)) == 1)
  {
    uint64_t v14 = *a2;
    *(_DWORD *)(*a2 + 12 * v12 + 4) = 1;
    goto LABEL_31;
  }
  if (statcomp_isDctMappedFeature(*(char **)(*(void *)(v6 + 1312) + 8 * v12), &v24, (uint64_t)(a1 + 15)) != 1)
  {
    uint64_t v19 = 2313166848;
    uint64_t v20 = *(void *)(*a1 + 32);
    uint64_t v21 = "featurename";
    goto LABEL_36;
  }
  *(_DWORD *)(*a2 + 12 * v12 + 4) = 2;
  if (statcomp_isDctFeature(*(char **)(a1[15] + 16 * (unsigned __int16)v24), (_WORD *)&v24 + 1, *(void *)(a1[21] + 8 * a3)) == 1)
  {
    uint64_t v14 = *a2;
    goto LABEL_31;
  }
  uint64_t v19 = 2313166848;
  uint64_t v20 = *(void *)(*a1 + 32);
  uint64_t v21 = "featurename (mapped)";
LABEL_36:
  log_OutPublic(v20, (uint64_t)"FE_POS", 35006, (uint64_t)"%s%s", v15, v16, v17, v18, v21);
  return v19;
}

uint64_t statpos_igtrees_getBrkStrs(uint64_t a1, unsigned char *a2, unsigned char *a3, size_t a4)
{
  uint64_t v9 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v9);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = brokeraux_ComposeBrokerString(a1, "OOVigtree", 1, 1, v9, 0, 0, a2, a4);
    if ((result & 0x80000000) == 0) {
      return brokeraux_ComposeBrokerString(a1, "KNOWNigtree", 1, 1, v9, 0, 0, a3, a4);
    }
  }
  return result;
}

uint64_t statpos_igtrees_load(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t *a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v40 = 0;
  uint64_t BrkStrs = statpos_igtrees_getBrkStrs(a3, v42, v41, 0x100uLL);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  *a5 = 0;
  uint64_t v11 = heap_Calloc(*(void **)(a3 + 8), 1, 536);
  if (!v11)
  {
    uint64_t v36 = 2313166858;
    uint64_t v37 = *(void *)(a3 + 32);
    uint64_t v21 = 0;
LABEL_16:
    log_OutPublic(v37, (uint64_t)"FE_POS", 35000, (uint64_t)v21, v12, v13, v14, v15, v39);
    return v36;
  }
  uint64_t v16 = v11;
  cstdlib_strcpy((char *)(v11 + 24), a4);
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v41, "IGTR", 1031, (uint64_t *)v40) & 0x80000000) != 0)
  {
    *(void *)(v16 + 8) = 0;
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_POS", 63000, (uint64_t)"%s%x", v17, v18, v19, v20, "treename:");
    return 2313166848;
  }
  uint64_t v21 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
  *(void *)(v16 + 8) = v21;
  if (!v21)
  {
LABEL_15:
    uint64_t v36 = 2313166858;
    uint64_t v37 = *(void *)(a3 + 32);
    goto LABEL_16;
  }
  uint64_t BrkStrs = igtree_Init(a1, a2, *(uint64_t *)v40, v21);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  uint64_t BrkStrs = ssftriff_reader_ObjClose(*(void **)v40, v22, v23, v24, v25, v26, v27, v28);
  if ((BrkStrs & 0x80000000) != 0) {
    return BrkStrs;
  }
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v42, "IGTR", 1031, (uint64_t *)v40) & 0x80000000) == 0)
  {
    uint64_t v21 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
    *(void *)uint64_t v16 = v21;
    if (v21)
    {
      uint64_t BrkStrs = igtree_Init(a1, a2, *(uint64_t *)v40, v21);
      if ((BrkStrs & 0x80000000) == 0)
      {
        uint64_t v36 = ssftriff_reader_ObjClose(*(void **)v40, v29, v30, v31, v32, v33, v34, v35);
        if ((v36 & 0x80000000) != 0) {
          return v36;
        }
        goto LABEL_19;
      }
      return BrkStrs;
    }
    goto LABEL_15;
  }
  uint64_t v36 = 0;
  *(void *)uint64_t v16 = 0;
  *(_DWORD *)(v16 + 16) = 1;
LABEL_19:
  if (*(void *)(v16 + 8) || *(void *)v16) {
    *(_DWORD *)(v16 + 20) = 1;
  }
  *a5 = v16;
  return v36;
}

uint64_t statpos_igtrees_ObjcClose(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v5);
  if ((result & 0x80000000) == 0) {
    return statpos_igtrees_unload(v5, *(uint64_t **)(a3 + 32));
  }
  return result;
}

uint64_t statpos_igtrees_unload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (v4)
  {
    uint64_t v5 = igtree_Deinit(a1, v4);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    heap_Free(*(void **)(a1 + 8), *a2);
    *a2 = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a2[1];
  if (!v6)
  {
LABEL_8:
    heap_Free(*(void **)(a1 + 8), (uint64_t)a2);
    return v5;
  }
  uint64_t v5 = igtree_Deinit(a1, v6);
  if ((v5 & 0x80000000) == 0)
  {
    heap_Free(*(void **)(a1 + 8), a2[1]);
    a2[1] = 0;
    goto LABEL_8;
  }
  return v5;
}

uint64_t statpos_igtrees_ObjcLoad(_WORD *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  uint64_t result = InitRsrcFunction(a1, a2, &v36);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_memcpy(v11, v36, 0x1A0uLL);
    long long v12 = *(_OWORD *)(a5 + 32);
    return statpos_igtrees_load(a1, a2, (uint64_t)v11, a3, (uint64_t *)(a4 + 32));
  }
  return result;
}

uint64_t statpos_igtrees_label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  __s = 0;
  unsigned __int16 v8 = *(unsigned __int8 *)(*(void *)(a4 + 8) + 1296) - 1;
  if (!*(_DWORD *)(a4 + 16) && *(unsigned __int8 *)(*(void *)a4 + 1296) - 1 > v8) {
    unsigned __int16 v8 = *(unsigned __int8 *)(*(void *)a4 + 1296) - 1;
  }
  HIDWORD(v59) = 0;
  uint64_t v9 = statpos_fv_new(a1, v8, &v58);
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t inited = v9;
LABEL_44:
    statpos_fv_dealloc((void *)a1, (uint64_t)&v58);
    return inited;
  }
  uint64_t v10 = (char **)heap_Calloc(*(void **)(a1 + 8), 1, 8 * v8);
  if (!v10)
  {
    uint64_t inited = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v54);
    goto LABEL_44;
  }
  long long v15 = (char *)v10;
  uint64_t inited = initFeatureVector(a1, v10, v8);
  if ((inited & 0x80000000) == 0 && *(_WORD *)(a3 + 8))
  {
    unint64_t v21 = 0;
    uint64_t v55 = (unsigned __int16 *)(a3 + 96);
    uint64_t v56 = (const char **)(a3 + 80);
    uint64_t v22 = 112;
    do
    {
      if (*(_DWORD *)(a2 + 188) == 1)
      {
        if (*(_DWORD *)(a4 + 16) == 1 || !*(_DWORD *)(*(void *)a3 + v22 - 104))
        {
          uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)(a4 + 8) + 1312), (*(unsigned char *)(*(void *)(a4 + 8) + 1296) - 1), &v58, *(void *)(a4 + 8));
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v58);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t v24 = *(void *)(a4 + 8);
        }
        else
        {
          uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)a4 + 1312), (*(unsigned char *)(*(void *)a4 + 1296) - 1), &v58, *(void *)a4);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v58);
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          uint64_t v24 = *(void *)a4;
        }
        uint64_t inited = igtree_Process(v24, (uint64_t)v15, &__s);
        if ((inited & 0x80000000) != 0) {
          break;
        }
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate OOV Word[%d] %s %s -> %s", v38, v39, v40, v21);
        unsigned __int16 v41 = cstdlib_strlen(__s);
        uint64_t v42 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v41 + 1);
        *(void *)(*(void *)a3 + v22 - 24) = v42;
        if (!v42)
        {
LABEL_46:
          uint64_t inited = 2313166858;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v30, v31, v32, v33, v54);
          break;
        }
        cstdlib_strcpy(v42, __s);
      }
      else
      {
        uint64_t v25 = *(void *)a3;
        int v26 = *(_DWORD *)(*(void *)a3 + v22 - 104);
        if (v26 == 1)
        {
          if (*(_DWORD *)(a4 + 16))
          {
LABEL_28:
            uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)(a4 + 8) + 1312), (*(unsigned char *)(*(void *)(a4 + 8) + 1296) - 1), &v58, *(void *)(a4 + 8));
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v58);
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            uint64_t features = igtree_Process(*(void *)(a4 + 8), (uint64_t)v15, &__s);
            if ((features & 0x80000000) != 0) {
              goto LABEL_45;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate Word[%d] %s %s -> %s", v43, v44, v45, v21);
            int v46 = checkPOSIsLegal(__s, (unsigned __int16)v21, (uint64_t *)a3, a2);
            uint64_t features = statpos_dumpFeatureVectorAndResult(a1, *(_DWORD *)(a3 + 100), v56, v55, "KNOWNWORD", **(char ***)(*(void *)a3 + v22 - 64), *(void *)(a4 + 8), &v58, __s, v46, *(char **)(*(void *)(*(void *)a3 + v22 - 64) + 24), *(char **)(*(void *)a3 + v22));
          }
          else
          {
            uint64_t features = statpos_get_features(a1, a3, a2, (unsigned __int16)v21, *(void *)(*(void *)a4 + 1312), (*(unsigned char *)(*(void *)a4 + 1296) - 1), &v58, *(void *)a4);
            if ((features & 0x80000000) != 0
              || (uint64_t features = statpos_get_features_for_igtree(a1, (uint64_t)v15, (uint64_t)&v58),
                  (features & 0x80000000) != 0)
              || (uint64_t features = igtree_Process(*(void *)a4, (uint64_t)v15, &__s), (features & 0x80000000) != 0))
            {
LABEL_45:
              uint64_t inited = features;
              break;
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Disambiguate OOV Word[%d] %s %s -> %s", v49, v50, v51, v21);
            int v52 = checkPOSIsLegal(__s, (unsigned __int16)v21, (uint64_t *)a3, a2);
            uint64_t features = statpos_dumpFeatureVectorAndResult(a1, *(_DWORD *)(a3 + 100), v56, v55, "OOVWORD", **(char ***)(*(void *)a3 + v22 - 64), *(void *)a4, &v58, __s, v52, *(char **)(*(void *)(*(void *)a3 + v22 - 64) + 24), *(char **)(*(void *)a3 + v22));
          }
          if ((features & 0x80000000) != 0) {
            goto LABEL_45;
          }
          unsigned __int16 v47 = cstdlib_strlen(__s);
          uint64_t v48 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v47 + 1);
          *(void *)(*(void *)a3 + v22 - 24) = v48;
          if (!v48) {
            goto LABEL_46;
          }
          cstdlib_strcpy(v48, __s);
          uint64_t inited = statpos_fv_clear((uint64_t)&v58);
          if ((inited & 0x80000000) != 0) {
            break;
          }
          clearFeatureVector(v15, v8);
          goto LABEL_36;
        }
        if (v26 || *(unsigned __int16 *)(v25 + v22 - 40) > 1u) {
          goto LABEL_28;
        }
        long long v27 = *(const char **)(v25 + v22 - 32);
        if (!v27)
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35008, (uint64_t)"%s%s", v16, v17, v18, v19, "word=");
          return 2313166848;
        }
        unsigned __int16 v28 = cstdlib_strlen(v27);
        long long v29 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v28 + 1);
        uint64_t v34 = *(void *)a3 + v22;
        *(void *)(v34 - 24) = v29;
        if (!v29) {
          goto LABEL_46;
        }
        cstdlib_strcpy(v29, *(const char **)(v34 - 32));
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Skip disambiguation on Word[%d] %s %s", v35, v36, v37, v21);
      }
LABEL_36:
      ++v21;
      v22 += 160;
    }
    while (v21 < *(unsigned __int16 *)(a3 + 8));
  }
  statpos_fv_dealloc((void *)a1, (uint64_t)&v58);
  freeFeatureVector((void *)a1, (uint64_t *)v15, v8);
  heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  return inited;
}

uint64_t checkPOSIsLegal(char *__s1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a3;
  if (!*(_WORD *)(*a3 + 160 * a2 + 72)) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a4 + 296)+ *(unsigned int *)(*(void *)(a4 + 304)+ 4 * *(unsigned int *)(*(void *)(v4 + 160 * a2 + 64) + v8)))))
  {
    ++v9;
    uint64_t v4 = *a3;
    v8 += 24;
    if (v9 >= *(unsigned __int16 *)(*a3 + 160 * a2 + 72)) {
      return 0;
    }
  }
  return 1;
}

uint64_t com_useStatHmogrphMosyntOff(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, const char *a5)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "stathmogrph_fepos_mosyntoff", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(_WORD *)&__c[1])
    {
      uint64_t v11 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v11) {
        *uint64_t v11 = 0;
      }
      a5 = **(const char ***)&__c[3];
    }
    if (cstdlib_strcmp(a5, "yes")) {
      BOOL v12 = cstdlib_strcmp(a5, "YES") == 0;
    }
    else {
      BOOL v12 = 1;
    }
    *a4 = v12;
    *(_WORD *)&__c[1] = -1;
    int v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "statwordhmogrph_step", &__c[3], &__c[1], __c);
    uint64_t result = 0;
    if ((v13 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1)
    {
      uint64_t result = 0;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t checkUsePKUPOS(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "mosynt_usepkupos", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int16 *)&__c[1];
    if (*(_WORD *)&__c[1])
    {
      uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v7) {
        *uint64_t v7 = 0;
      }
      uint64_t v8 = **(const char ***)&__c[3];
      if (cstdlib_strcmp(**(const char ***)&__c[3], "yes")) {
        int v6 = cstdlib_strcmp(v8, "YES") == 0;
      }
      else {
        int v6 = 1;
      }
    }
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t checkReplaceAsterisk(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a1 + 96))(a2, a3, "fecfg", "statpos_replaceasterisk", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    int v6 = *(unsigned __int16 *)&__c[1];
    if (*(_WORD *)&__c[1])
    {
      uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
      if (v7) {
        *uint64_t v7 = 0;
      }
      int v6 = cstdlib_strcmp(**(const char ***)&__c[3], "1") == 0;
    }
    uint64_t result = 0;
    *a4 = v6;
  }
  return result;
}

uint64_t fe_pos_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Str = 2313166855;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unsigned __int16 __s1 = "";
  uint64_t v33 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v36);
    if ((inited & 0x80000000) == 0)
    {
      uint64_t v12 = heap_Calloc(*(void **)(v36 + 8), 1, 2240);
      uint64_t v17 = v36;
      if (v12)
      {
        uint64_t v18 = v12;
        uint64_t v19 = (void *)heap_Calloc(*(void **)(v36 + 8), 1, 1040);
        *(void *)(v18 + 48) = v19;
        if (v19)
        {
          *uint64_t v19 = a3;
          v19[1] = a4;
          *(void *)uint64_t v18 = v36;
          *(void *)(v18 + 8) = a3;
          *(void *)(v18 + 32) = a1;
          *(void *)(v18 + 40) = a2;
          *(void *)(v18 + 16) = a4;
          *(void *)(v18 + 24) = a1;
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"LINGDB", &v35);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          *(void *)(v18 + 56) = *(void *)(v35 + 8);
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"FE_DEPES", &v34);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t v21 = v34;
          *(void *)(v18 + 80) = *(void *)(v34 + 8);
          *(_OWORD *)(v18 + 64) = *(_OWORD *)(v21 + 16);
          uint64_t Object = objc_GetObject(*(void *)(v36 + 48), (uint64_t)"FE_DCTLKP", &v33);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t v22 = v33;
          uint64_t v23 = *(void *)(v33 + 8);
          *(void *)(v18 + 128) = v23;
          *(_OWORD *)(v18 + 112) = *(_OWORD *)(v22 + 16);
          *(_DWORD *)(v18 + 180) = 0;
          uint64_t Object = statpos_checkIfActive(*(void *)(v18 + 112), *(void *)(v18 + 120), v23, a3, a4, v36, (_DWORD *)(v18 + 200), (_DWORD *)(v18 + 176), (int *)(v18 + 192), (_DWORD *)(v18 + 2232), (_DWORD *)(v18 + 2236));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t Object = com_useStatHmogrphMosyntOff(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (BOOL *)(v18 + 188), "no");
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          int v24 = *(_DWORD *)(v18 + 176);
          if (*(_DWORD *)(v18 + 1616) == 1)
          {
            if (!v24) {
              *(void *)(v18 + 176) = 0x100000001;
            }
          }
          else if (!v24)
          {
LABEL_19:
            uint64_t Object = statphr_readIGTree(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v36, (void *)(v18 + 1728), (_DWORD *)(v18 + 1720));
            if ((Object & 0x80000000) == 0)
            {
              int v26 = (_DWORD *)(v18 + 1736);
              *(_DWORD *)(v18 + 1736) = 0;
              uint64_t Object = statcomp_useStatCOMP(*(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), (_DWORD *)(v18 + 1736));
              if ((Object & 0x80000000) == 0)
              {
                if (*v26 != 1) {
                  goto LABEL_25;
                }
                *(void *)(v18 + 1744) = v36;
                *(_OWORD *)(v18 + 2128) = *(_OWORD *)(v18 + 112);
                *(void *)(v18 + 2144) = *(void *)(v18 + 128);
                *(void *)(v18 + 1952) = 0;
                *(_DWORD *)(v18 + 1960) = 0;
                uint64_t Object = nuance_pcre_ObjOpen(a3, a4, v18 + 1952);
                if ((Object & 0x80000000) == 0)
                {
                  uint64_t Object = nuance_pcre_Init(*(void **)(v18 + 1952), *(void *)(v18 + 1960), 0x1Eu, 50);
                  if ((Object & 0x80000000) == 0)
                  {
                    uint64_t Object = statcomp_rules_load(a3, a4, v36, v18 + 1752, *(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), v27);
                    if ((Object & 0x80000000) == 0)
                    {
LABEL_25:
                      uint64_t Object = checkUsePKUPOS(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (int *)(v18 + 184));
                      if ((Object & 0x80000000) == 0)
                      {
                        *(void *)(v18 + 136) = 0;
                        unsigned __int16 v28 = (_DWORD *)(v18 + 136);
                        *(void *)(v18 + 144) = 0;
                        uint64_t Str = paramc_ParamGetStr(*(void *)(v36 + 40), (uint64_t)"fecfg", &__s1);
                        if ((Str & 0x80000000) != 0) {
                          goto LABEL_41;
                        }
                        if (!cstdlib_strcmp(__s1, "cfg4")) {
                          *(_DWORD *)(v18 + 148) = 1;
                        }
                        if (*v26 || *(_DWORD *)(v18 + 184)) {
                          goto LABEL_31;
                        }
                        uint64_t Object = wgram_CheckIfExists(a3, a4, *(_WORD **)(v18 + 32), *(void *)(v18 + 40), (_DWORD *)(v18 + 144));
                        if ((Object & 0x80000000) == 0)
                        {
                          uint64_t Str = sgram_CheckIfExists(a3, a4, (_DWORD *)(v18 + 140));
                          if ((Str & 0x80000000) != 0) {
                            goto LABEL_41;
                          }
                          if (!*(_DWORD *)(v18 + 140))
                          {
                            *unsigned __int16 v28 = 0;
LABEL_34:
                            *(void *)(v18 + 88) = 0;
                            *(void *)(v18 + 96) = 0;
                            int v29 = 62341;
                            *(void *)(v18 + 104) = 0;
LABEL_42:
                            *(void *)a5 = v18;
                            *(_DWORD *)(a5 + 8) = v29;
                            return Str;
                          }
                          uint64_t Str = com_mosynt_UseMosynt(*(void *)(v18 + 112), *(void *)(v18 + 120), *(void *)(v18 + 128), (BOOL *)(v18 + 136));
                          if ((Str & 0x80000000) != 0)
                          {
LABEL_41:
                            fe_pos_ObjClose(*(void **)a5, *(void *)(a5 + 8));
                            uint64_t v18 = 0;
                            int v29 = 0;
                            goto LABEL_42;
                          }
LABEL_31:
                          if (!*v28) {
                            goto LABEL_34;
                          }
                          if (*(_DWORD *)(v18 + 188)) {
                            goto LABEL_34;
                          }
                          uint64_t Str = fe_pos_LoadMosyntData(a3, a4, v18);
                          if ((Str & 0x80000000) == 0) {
                            goto LABEL_34;
                          }
                          goto LABEL_41;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_40:
            uint64_t Str = Object;
            goto LABEL_41;
          }
          int v25 = *(_DWORD *)(v18 + 192);
          *(_DWORD *)(v18 + 1636) = *(_DWORD *)(v18 + 188);
          uint64_t Object = statpos_load_resources(*(void *)(v18 + 64), *(void *)(v18 + 72), *(void *)(v18 + 80), *(_WORD **)(v18 + 8), *(void *)(v18 + 16), *(_WORD **)(v18 + 32), *(void *)(v18 + 40), v36, *(void *)(v18 + 24), *(_OWORD *)(v18 + 112), *(void *)(v18 + 128), v18 + 200, *(_DWORD *)(v18 + 180), (_DWORD *)(v18 + 176), v25);
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          uint64_t Object = checkReplaceAsterisk(*(void *)(v18 + 128), *(void *)(v18 + 112), *(void *)(v18 + 120), (_DWORD *)(v18 + 1640));
          if ((Object & 0x80000000) != 0) {
            goto LABEL_40;
          }
          goto LABEL_19;
        }
        uint64_t v17 = v36;
      }
      log_OutPublic(*(void *)(v17 + 32), (uint64_t)"FE_POS", 35000, 0, v13, v14, v15, v16, v31);
      uint64_t Str = 2313166858;
      goto LABEL_41;
    }
    return inited;
  }
  return Str;
}

uint64_t fe_pos_LoadMosyntData(_WORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 __s1 = 0;
  uint64_t result = com_mosynt_GetCfgParamVal(*(void *)(a3 + 112), *(void *)(a3 + 120), *(void *)(a3 + 128), (uint64_t)"mosynt_enablegraphsymcache", "yes", &__s1);
  if ((result & 0x80000000) == 0)
  {
    BOOL v7 = cstdlib_strcmp(__s1, "yes") == 0;
    uint64_t result = kbsymtab_LoadData(a1, a2, *(_WORD **)(a3 + 32), *(void *)(a3 + 40), (uint64_t *)(a3 + 152), v7);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = fst_LoadData(a1, a2, (uint64_t *)(a3 + 168));
      if ((result & 0x80000000) == 0) {
        return sgram_LoadData(a1, a2, (uint64_t *)(a3 + 160));
      }
    }
  }
  return result;
}

uint64_t fe_pos_ObjClose(void *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 44)) {
      statpos_unload_resources((_WORD *)a1[4], a1[5], *a1, (uint64_t)(a1 + 25), *((_DWORD *)a1 + 45), *((_DWORD *)a1 + 48));
    }
    if (*((_DWORD *)a1 + 434))
    {
      statcomp_rules_unload((uint64_t)(a1 + 219));
      uint64_t NullHandle = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(a1[244], a1[245], NullHandle, v5))
      {
        nuance_pcre_DeInit((void *)a1[244], a1[245]);
        nuance_pcre_ObjClose(a1[244], a1[245]);
      }
    }
    if (*((_DWORD *)a1 + 430)) {
      statphr_freeIGTree(*a1, a1[3], a1[216]);
    }
    fe_pos_UnloadMosyntData((uint64_t)a1);
    if (a1[7]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    }
    if (a1[10]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
    }
    if (a1[16]) {
      objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    }
    uint64_t v6 = a1[6];
    if (v6) {
      heap_Free(*(void **)(*a1 + 8), v6);
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t fe_pos_UnloadMosyntData(uint64_t a1)
{
  if (*(void *)(a1 + 152))
  {
    int v2 = kbsymtab_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(_WORD **)(a1 + 32), *(void *)(a1 + 40), (uint64_t *)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    uint64_t v3 = v2 & (v2 >> 31);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(void *)(a1 + 160))
  {
    int v4 = sgram_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), (uint64_t *)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    if (v4 >= 0 || (int)v3 <= -1) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v4;
    }
  }
  if (*(void *)(a1 + 168))
  {
    int v6 = fst_UnloadData(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), (uint64_t *)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    if (v6 >= 0 || (int)v3 <= -1) {
      return v3;
    }
    else {
      return v6;
    }
  }
  return v3;
}

uint64_t fe_pos_ObjReopen(void *a1, int a2)
{
  uint64_t v3 = 2313166854;
  unsigned __int16 __s1 = "";
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  if (a1)
  {
    if (*((_DWORD *)a1 + 44) == 1)
    {
      uint64_t IGTree = statpos_unload_resources((_WORD *)a1[4], a1[5], *a1, (uint64_t)(a1 + 25), *((_DWORD *)a1 + 45), *((_DWORD *)a1 + 48));
      if ((IGTree & 0x80000000) != 0) {
        return IGTree;
      }
    }
    *((_DWORD *)a1 + 45) = 0;
    uint64_t IGTree = statpos_checkIfActive(a1[14], a1[15], a1[16], (_WORD *)a1[1], a1[2], *a1, (_DWORD *)a1 + 50, (_DWORD *)a1 + 44, (int *)a1 + 48, (_DWORD *)a1 + 558, (_DWORD *)a1 + 559);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    uint64_t IGTree = com_useStatHmogrphMosyntOff(a1[16], a1[14], a1[15], (BOOL *)a1 + 47, "no");
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    int v5 = *((_DWORD *)a1 + 44);
    if (*((_DWORD *)a1 + 404) != 1 || v5)
    {
      if (v5 != 1)
      {
LABEL_15:
        if (*((_DWORD *)a1 + 434) == 1)
        {
          uint64_t IGTree = statcomp_rules_unload((uint64_t)(a1 + 219));
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t NullHandle = safeh_GetNullHandle();
          if (!safeh_HandlesEqual(a1[244], a1[245], NullHandle, v9))
          {
            nuance_pcre_DeInit((void *)a1[244], a1[245]);
            nuance_pcre_ObjClose(a1[244], a1[245]);
          }
        }
        uint64_t v10 = a1 + 217;
        *((_DWORD *)a1 + 434) = 0;
        uint64_t IGTree = statcomp_useStatCOMP(a1[14], a1[15], a1[16], (_DWORD *)a1 + 434);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (*v10 == 1)
        {
          uint64_t v11 = (_WORD *)a1[1];
          a1[218] = *a1;
          *((_OWORD *)a1 + 133) = *((_OWORD *)a1 + 7);
          a1[268] = a1[16];
          a1[244] = 0;
          *((_DWORD *)a1 + 490) = 0;
          uint64_t IGTree = nuance_pcre_ObjOpen(v11, a1[2], (uint64_t)(a1 + 244));
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t IGTree = nuance_pcre_Init((void *)a1[244], a1[245], 0x1Eu, 50);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t IGTree = statcomp_rules_load((_WORD *)a1[1], a1[2], *a1, (uint64_t)(a1 + 219), a1[14], a1[15], a1[16], v12);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
        }
        if (*((_DWORD *)a1 + 430) == 1) {
          statphr_freeIGTree(*a1, a1[3], a1[216]);
        }
        *((_DWORD *)a1 + 430) = 0;
        uint64_t IGTree = statphr_readIGTree((_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], *a1, a1 + 216, (_DWORD *)a1 + 430);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        uint64_t IGTree = fe_pos_UnloadMosyntData((uint64_t)a1);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        a1[17] = 0;
        uint64_t v13 = a1 + 17;
        a1[18] = 0;
        uint64_t IGTree = paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"fecfg", &__s1);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (!cstdlib_strcmp(__s1, "cfg4")) {
          *((_DWORD *)a1 + 37) = 1;
        }
        uint64_t IGTree = checkUsePKUPOS(a1[16], a1[14], a1[15], (int *)a1 + 46);
        if ((IGTree & 0x80000000) != 0) {
          return IGTree;
        }
        if (*v10 || *((_DWORD *)a1 + 46))
        {
          uint64_t v3 = 0;
        }
        else
        {
          uint64_t IGTree = wgram_CheckIfExists((_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], (_DWORD *)a1 + 36);
          if ((IGTree & 0x80000000) != 0) {
            return IGTree;
          }
          uint64_t v3 = sgram_CheckIfExists((_WORD *)a1[1], a1[2], (_DWORD *)a1 + 35);
          if ((v3 & 0x80000000) != 0) {
            return v3;
          }
          if (!*((_DWORD *)a1 + 35))
          {
            *uint64_t v13 = 0;
            return v3;
          }
          uint64_t v3 = com_mosynt_UseMosynt(a1[14], a1[15], a1[16], (BOOL *)a1 + 34);
          if ((v3 & 0x80000000) != 0) {
            return v3;
          }
        }
        if (*v13) {
          return fe_pos_LoadMosyntData((_WORD *)a1[1], a1[2], (uint64_t)a1);
        }
        return v3;
      }
      int v6 = *((_DWORD *)a1 + 45);
    }
    else
    {
      a1[22] = 0x100000001;
      int v6 = 1;
    }
    int v7 = *((_DWORD *)a1 + 48);
    *((_DWORD *)a1 + 409) = *((_DWORD *)a1 + 47);
    uint64_t IGTree = statpos_load_resources(a1[8], a1[9], a1[10], (_WORD *)a1[1], a1[2], (_WORD *)a1[4], a1[5], *a1, a1[3], *((_OWORD *)a1 + 7), a1[16], (uint64_t)(a1 + 25), v6, (_DWORD *)a1 + 44, v7);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    uint64_t IGTree = checkReplaceAsterisk(a1[16], a1[14], a1[15], (_DWORD *)a1 + 410);
    if ((IGTree & 0x80000000) != 0) {
      return IGTree;
    }
    goto LABEL_15;
  }
  return v3;
}

uint64_t fe_pos_ProcessStart(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  if (*(_DWORD *)(a1 + 176)) {
    uint64_t result = statpos_setParams(*(void *)a1, a1 + 208);
  }
  if (*(_DWORD *)(a1 + 1736))
  {
    uint64_t v4 = *(void *)a1;
    return statcomp_setParams(v4, a1 + 1752);
  }
  return result;
}

uint64_t fe_Process_UserCOMPMarkup(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((result & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  if (*(_DWORD *)(a1 + 1764) == 1)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    return statcomp_processUserMarkup(v10, a3, a4, a1 + 1744);
  }
  return result;
}

uint64_t fe_pos_Process_StatCOMP(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v17 = 0;
  if ((safeh_HandleCheck(a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  uint64_t SentenceData = statcomp_getSentenceData(*(void *)(a1 + 56), a3, a4, (unsigned __int16 *)(a1 + 1744));
  if ((SentenceData & 0x80000000) == 0)
  {
    if (!*(_WORD *)(a1 + 2184)
      || (int v17 = 0,
          uint64_t SentenceData = statcomp_processCompounds((void **)(a1 + 1744), &v17, v9, v10, v11, v12, v13, v14),
          (SentenceData & 0x80000000) == 0)
      && (v17 != 1
       || (uint64_t SentenceData = statcomp_saveCompoundsToLingdb(*(void *)(a1 + 56), a3, a4, a1 + 1744),
           (SentenceData & 0x80000000) == 0)))
    {
      statcomp_freeSentenceData(a1 + 1744);
    }
  }
  return SentenceData;
}

uint64_t fe_pos_Process_Mosynt(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int16 v39 = 0;
  uint64_t v9 = 2313166858;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  uint64_t v49 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unsigned __int16 v41 = 0;
  memset(v37, 0, sizeof(v37));
  *a5 = 1;
  uint64_t v10 = heap_Alloc(*(void *)(*a1 + 8), 5000);
  if (v10)
  {
    uint64_t v15 = (char *)v10;
    int v47 = 0;
    int v48 = 0;
    int v46 = 0;
    __int16 v45 = 0;
    unsigned int v44 = 0;
    unsigned __int16 v40 = 0;
    int v38 = 0;
    long long v20 = (char *)heap_Alloc(*(void *)(*a1 + 8), 20000);
    if (v20)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v48 + 2);
      if ((v9 & 0x80000000) == 0
        && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1[7] + 184))(a3, a4, HIWORD(v48), 0, &v39) & 0x80000000) == 0&& v39 == 1)
      {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a1[7] + 176))(a3, a4, HIWORD(v48), 0, &v49, &v47);
        if ((v9 & 0x80000000) == 0 && (unsigned __int16)v47 >= 2u)
        {
          uint64_t started = mosynt_StartSentenceAnalysis(a1[6], a1[14], a1[15], a1[16], a1[19], a1[20], (uint64_t *)v37);
          if ((started & 0x80000000) == 0)
          {
            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v48), &v48);
            if ((started & 0x80000000) == 0)
            {
              while ((_WORD)v48)
              {
                uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t))(a1[7] + 168))(a3, a4);
                if ((started & 0x80000000) != 0) {
                  goto LABEL_51;
                }
                if (v44 <= 0xA && ((1 << v44) & 0x610) != 0)
                {
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v48, 1, 1, &v46, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v48, 2, 1, &v45, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v48, 3, &v41, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v48, 5, &v43, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v48, 6, &v42, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v48, 7, 1, &v40, &v47);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                  mosynt_InsertTerminals(a1[6], (uint64_t)v37, (unsigned __int16)v46, (unsigned __int16)(v45 + 1), v43, v40, (unsigned __int16)v48, v49, v41);
                  if ((started & 0x80000000) != 0) {
                    goto LABEL_51;
                  }
                }
                uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1[7] + 120))(a3, a4, (unsigned __int16)v48, &v48);
                if ((v9 & 0x80000000) != 0) {
                  goto LABEL_29;
                }
              }
              mosynt_ParseSentence(a1[6], (uint64_t)v37);
              if ((started & 0x80000000) == 0)
              {
                uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1[7] + 104))(a3, a4, 1, 0, (char *)&v48 + 2);
                if ((started & 0x80000000) == 0)
                {
                  uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1[7] + 104))(a3, a4, 2, HIWORD(v48), &v48);
                  if ((started & 0x80000000) == 0)
                  {
                    unsigned __int16 v24 = v48;
                    if ((_WORD)v48)
                    {
                      while (1)
                      {
                        uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[7] + 120))(a3, a4, v24, (char *)&v47 + 2);
                        if ((started & 0x80000000) != 0) {
                          break;
                        }
                        uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1[7] + 168))(a3, a4, (unsigned __int16)v48, 0, 1, &v44, &v47);
                        if ((started & 0x80000000) != 0) {
                          break;
                        }
                        if (v44 <= 0xA && ((1 << v44) & 0x610) != 0)
                        {
                          uint64_t started = mosynt_GetTerminalInfoById(a1[6], (uint64_t)v37, (unsigned __int16)v48, &v38, v15, 5000);
                          if ((started & 0x80000000) != 0) {
                            break;
                          }
                          uint64_t v26 = a1[7];
                          uint64_t v27 = (unsigned __int16)v48;
                          if (v38)
                          {
                            unsigned __int16 v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(v26 + 160);
                            __int16 v29 = cstdlib_strlen(v15);
                            v28(a3, a4, v27, 5, (unsigned __int16)(v29 + 1), v15, (char *)&v46 + 2);
                            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int8 **, int *))(a1[7] + 176))(a3, a4, (unsigned __int16)v48, 3, &v41, &v47);
                            if ((started & 0x80000000) != 0) {
                              break;
                            }
                            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"(sgram) keep lingdb record %d : POS=%s PHON=%s", v30, v31, v32, (unsigned __int16)v48);
                          }
                          else
                          {
                            uint64_t started = (*(uint64_t (**)(uint64_t, uint64_t, void))(v26 + 192))(a3, a4, (unsigned __int16)v48);
                            if ((started & 0x80000000) != 0) {
                              break;
                            }
                          }
                        }
                        unsigned __int16 v24 = HIWORD(v47);
                        LOWORD(v48) = HIWORD(v47);
                        if (!HIWORD(v47)) {
                          goto LABEL_48;
                        }
                      }
                    }
                    else
                    {
LABEL_48:
                      uint64_t started = mosynt_SyntTreeToString(a1[6], (uint64_t)v37, v20, 20000);
                      if ((started & 0x80000000) == 0)
                      {
                        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(a1[7] + 160);
                        uint64_t v34 = HIWORD(v48);
                        __int16 v35 = cstdlib_strlen(v20);
                        uint64_t started = v33(a3, a4, v34, 2, (unsigned __int16)(v35 + 1), v20, (char *)&v46 + 2);
                        if ((started & 0x80000000) == 0) {
                          uint64_t started = mosynt_FinishSentenceAnalysis(a1[6], (uint64_t)v37);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_51:
          uint64_t v9 = started;
        }
      }
    }
    else
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v36);
    }
LABEL_29:
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v15);
    if (v20) {
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v20);
    }
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v36);
  }
  return v9;
}

uint64_t fe_pos_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  __int16 v160 = 0;
  if ((safeh_HandleCheck(a1, a2, 62341, 2240) & 0x80000000) != 0) {
    return 2313166856;
  }
  *a5 = 1;
  if (*(_DWORD *)(a1 + 176))
  {
    uint64_t v10 = statpos_process(*(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), a3, a4, *(void *)(a1 + 56), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), a1 + 200, *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 140), *(_DWORD *)(a1 + 148), *(_DWORD *)(a1 + 192));
    if ((v10 & 0x80000000) != 0) {
      return v10;
    }
  }
  if (*(_DWORD *)(a1 + 136) && !*(_DWORD *)(a1 + 188)) {
    fe_pos_Process_Mosynt((uint64_t *)a1, a2, a3, a4, a5);
  }
  uint64_t v11 = fe_Process_UserCOMPMarkup(a1, a2, a3, a4, a5);
  if ((v11 & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a1 + 1736)
      || *(_DWORD *)(a1 + 1616)
      || (uint64_t v11 = fe_pos_Process_StatCOMP(a1, a2, a3, a4, a5), (v11 & 0x80000000) == 0))
    {
      __s = 0;
      __src = 0;
      unsigned __int16 __s1 = 0;
      uint64_t v162 = 0;
      uint64_t v163 = 0;
      if (!*(_DWORD *)(a1 + 176)
        || *(_DWORD *)(a1 + 1720)
        && !*(_DWORD *)(a1 + 1616)
        && (*(_DWORD *)(a1 + 192) && !*(_DWORD *)(a1 + 2232)
          ? (uint64_t v12 = statphr_MorphemeProcess(*(void *)a1, *(void *)(a1 + 56), a3, a4))
          : (v12 = statphr_Process(*(void *)a1, *(void *)(a1 + 56), a3, a4, *(void *)(a1 + 1728), *(_DWORD *)(a1 + 1736), *(_DWORD *)(a1 + 2236))), (uint64_t v11 = v12, (v12 & 0x80000000) == 0) && !*(_DWORD *)(a1 + 176)))
      {
        if (!*(_DWORD *)(a1 + 136))
        {
          int v169 = 0;
          int v170 = 0;
          unsigned int v167 = 0;
          int v168 = 0;
          __int16 v164 = 0;
          unsigned __int16 v161 = 0;
          cstdlib_strcpy(__dst, "partofspeech");
          *a5 = 1;
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 56) + 104))(a3, a4, 1, 0, (char *)&v170 + 2);
          if ((v11 & 0x80000000) == 0
            && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 56) + 184))(a3, a4, HIWORD(v170), 0, &v160) & 0x80000000) == 0&& v160 == 1)
          {
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(*(void *)(a1 + 56)
                                                                                               + 176))(a3, a4, HIWORD(v170), 0, &__s, (char *)&v169 + 2);
            if ((v11 & 0x80000000) == 0 && HIWORD(v169) >= 2u)
            {
              memset(v172, 0, sizeof(v172));
              uint64_t v14 = *(void *)(*(void *)a1 + 8);
              int v15 = cstdlib_strlen(__s);
              uint64_t v16 = (char *)heap_Alloc(v14, (v15 + 257));
              *(void *)(a1 + 88) = v16;
              if (!v16) {
                goto LABEL_154;
              }
              cstdlib_strcpy(v16, "");
              uint64_t v21 = *(void *)(*(void *)a1 + 8);
              int v22 = cstdlib_strlen(__s);
              uint64_t v23 = (char *)heap_Alloc(v21, (v22 + 257));
              *(void *)(a1 + 96) = v23;
              unsigned __int16 v24 = (const char **)(a1 + 96);
              if (!v23
                || (cstdlib_strcpy(v23, ""),
                    uint64_t v25 = *(void *)(*(void *)a1 + 8),
                    int v26 = cstdlib_strlen(__s),
                    uint64_t v27 = (char *)heap_Alloc(v25, (v26 + 257)),
                    (*(void *)(a1 + 104) = v27) == 0))
              {
LABEL_154:
                log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 35000, 0, v17, v18, v19, v20, v150);
                unsigned __int16 v86 = 8202;
                goto LABEL_155;
              }
              unint64_t v158 = (const char **)(a1 + 104);
              cstdlib_strcpy(v27, "");
              __int16 v28 = cstdlib_strlen(__s);
              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 2, HIWORD(v170), &v170);
              if ((v29 & 0x80000000) == 0)
              {
                unsigned __int16 v33 = 0;
                int v155 = 0;
                int v156 = 0;
                uint64_t v157 = (const char **)(a1 + 96);
                unsigned __int16 v34 = 0;
                uint64_t v153 = 0;
                uint64_t v154 = (unsigned __int16)(v28 + 1);
                int v35 = 1;
                uint64_t v36 = 1;
                while ((_WORD)v170)
                {
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 56) + 168))(a3, a4);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  if (v167 > 0xA || ((1 << v167) & 0x610) == 0) {
                    goto LABEL_122;
                  }
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v170, 1, 1, (char *)&v168 + 2, (char *)&v169 + 2);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v170, 2, 1, &v168, (char *)&v169 + 2);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v170, 5, &__s1, (char *)&v169 + 2);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v170, 6, &__src, (char *)&v169 + 2);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, __int16 *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v170, 7, 1, &v164, (char *)&v169 + 2);
                  if ((v29 & 0x80000000) != 0) {
                    goto LABEL_256;
                  }
                  if (v35 == 1 || HIWORD(v168) != v33)
                  {
                    int v151 = v35;
                    if (!v35)
                    {
                      ssft_qsort((uint64_t)__s2, (unsigned __int16)v156, 82, (uint64_t (*)(unint64_t, unint64_t))compare_1);
                      if ((_WORD)v156)
                      {
                        uint64_t v38 = 0;
                        __int16 v39 = (char **)(a1 + 104);
                        do
                        {
                          if (v38)
                          {
                            if (cstdlib_strcmp(&__s2[v38], ""))
                            {
                              if (cstdlib_strcmp(*v24, ""))
                              {
                                unsigned __int16 v40 = *v157;
                                unsigned __int16 v41 = &v40[cstdlib_strlen(*v157)];
                                unsigned __int16 v24 = (const char **)(a1 + 96);
                                if (*(v41 - 1) != 32) {
                                  cstdlib_strcat((char *)*v157, "\\"");
                                }
                              }
                            }
                            cstdlib_strcat((char *)*v24, &__s2[v38]);
                            __int16 v39 = (char **)(a1 + 104);
                            if (!cstdlib_strcmp(&__s2[v38 + 40], "")) {
                              goto LABEL_61;
                            }
                            if (!cstdlib_strcmp(*v158, "")) {
                              goto LABEL_61;
                            }
                            uint64_t v42 = *v158;
                            size_t v43 = cstdlib_strlen(*v158);
                            __int16 v39 = (char **)(a1 + 104);
                            unsigned int v44 = (char **)(a1 + 104);
                            __int16 v45 = "\\"";
                            if (v42[v43 - 1] == 32) {
                              goto LABEL_61;
                            }
                          }
                          else
                          {
                            __int16 v45 = __s2;
                            unsigned int v44 = (char **)v24;
                          }
                          cstdlib_strcat(*v44, v45);
LABEL_61:
                          cstdlib_strcat(*v39, &__s2[v38 + 40]);
                          v38 += 82;
                        }
                        while (82 * (unsigned __int16)v156 != v38);
                      }
                      int v156 = 0;
                    }
                    if ((unsigned __int16)v155 <= (unsigned __int16)v153
                      && WORD2(v153) <= (unsigned __int16)v153)
                    {
                      if ((unsigned __int16)v153 - (unsigned __int16)v155 >= 1)
                      {
                        int v55 = 0;
                        do
                        {
                          cstdlib_strcat((char *)*v24, "~");
                          ++v55;
                        }
                        while ((unsigned __int16)v153 - (unsigned __int16)v155 > (unsigned __int16)v55);
                      }
                      if ((unsigned __int16)v153 - WORD2(v153) >= 1)
                      {
                        int v56 = 0;
                        do
                        {
                          cstdlib_strcat((char *)*v158, "~");
                          ++v56;
                        }
                        while ((unsigned __int16)v153 - WORD2(v153) > (unsigned __int16)v56);
                      }
                    }
                    else
                    {
                      if ((unsigned __int16)v155 <= WORD2(v153)) {
                        int v46 = WORD2(v153);
                      }
                      else {
                        int v46 = (unsigned __int16)v155;
                      }
                      int v47 = v46 - (unsigned __int16)v153;
                      if (v47 >= 1)
                      {
                        for (int i = 0; v47 > (unsigned __int16)i; ++i)
                        {
                          if (v36 << 8 == v34)
                          {
                            uint64_t v36 = (v36 + 1);
                            uint64_t v49 = v154 + ((unint64_t)v36 << 8);
                            uint64_t v50 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v49);
                            if (!v50) {
                              goto LABEL_154;
                            }
                            *(void *)(a1 + 88) = v50;
                            uint64_t v51 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v49);
                            if (!v51) {
                              goto LABEL_154;
                            }
                            *(void *)(a1 + 96) = v51;
                            uint64_t v52 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), v49);
                            if (!v52) {
                              goto LABEL_154;
                            }
                            *unint64_t v158 = (const char *)v52;
                          }
                          cstdlib_strcat(*(char **)(a1 + 88), "~");
                          ++v34;
                        }
                      }
                      if (WORD2(v153) <= (unsigned __int16)v155)
                      {
                        int v57 = (unsigned __int16)v155 - WORD2(v153);
                        unsigned __int16 v24 = (const char **)(a1 + 96);
                        if (v57 >= 1)
                        {
                          int v58 = 0;
                          do
                          {
                            cstdlib_strcat((char *)*v158, "~");
                            ++v58;
                          }
                          while (v57 > (unsigned __int16)v58);
                        }
                      }
                      else
                      {
                        int v53 = WORD2(v153) - (unsigned __int16)v155;
                        unsigned __int16 v24 = (const char **)(a1 + 96);
                        if (v53 >= 1)
                        {
                          int v54 = 0;
                          do
                          {
                            cstdlib_strcat((char *)*v157, "~");
                            ++v54;
                          }
                          while (v53 > (unsigned __int16)v54);
                        }
                      }
                    }
                    if (HIWORD(v168) > (unsigned __int16)v168)
                    {
                      unsigned __int16 v86 = 16049;
LABEL_155:
                      uint64_t v11 = v86 | 0x89E00000;
LABEL_156:
                      uint64_t v87 = *(void *)(a1 + 88);
                      if (v87) {
                        heap_Free(*(void **)(*(void *)a1 + 8), v87);
                      }
                      *(void *)(a1 + 88) = 0;
                      uint64_t v88 = *(void *)(a1 + 96);
                      if (v88) {
                        heap_Free(*(void **)(*(void *)a1 + 8), v88);
                      }
                      *(void *)(a1 + 96) = 0;
                      uint64_t v89 = *(void *)(a1 + 104);
                      if (v89) {
                        heap_Free(*(void **)(*(void *)a1 + 8), v89);
                      }
                      *(void *)(a1 + 104) = 0;
                      return v11;
                    }
                    LOWORD(v153) = Utf8_LengthInUtf8chars((unint64_t)&__s[HIWORD(v168)], (unsigned __int16)v168 - HIWORD(v168));
                    if (!v151)
                    {
                      __int16 v59 = HIWORD(v168);
                      __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, HIWORD(v168));
                      cstdlib_strncat(*(char **)(a1 + 88), &__s[HIWORD(v168) - (unsigned __int16)(v59 - PreviousUtf8Offset)], (unsigned __int16)(v59 - PreviousUtf8Offset));
                      cstdlib_strcat(*(char **)(a1 + 96), " ");
                      cstdlib_strcat(*(char **)(a1 + 104), " ");
                      cstdlib_strlen(*(const char **)(a1 + 96));
                    }
                    cstdlib_strncat(*(char **)(a1 + 88), &__s[HIWORD(v168)], (unsigned __int16)v168 - (unint64_t)HIWORD(v168));
                    int v155 = 0;
                    HIDWORD(v153) = 0;
                  }
                  int v61 = v156;
                  if (!(_WORD)v156)
                  {
                    uint64_t v152 = v36;
                    BOOL v66 = 1;
                    goto LABEL_112;
                  }
                  int v62 = 0;
                  int v63 = 0;
                  uint64_t v64 = __s2;
                  uint64_t v65 = (unsigned __int16)v156;
                  do
                  {
                    if (!cstdlib_strcmp(__s1, v64)) {
                      int v63 = 1;
                    }
                    if (!cstdlib_strcmp(__src, v64 + 40)) {
                      int v62 = 1;
                    }
                    v64 += 82;
                    --v65;
                  }
                  while (v65);
                  BOOL v66 = v62 == 0;
                  if (v63) {
                    BOOL v67 = v62 == 0;
                  }
                  else {
                    BOOL v67 = 1;
                  }
                  if (v67)
                  {
                    unsigned __int16 v24 = (const char **)(a1 + 96);
                    uint64_t v152 = v36;
                    if (v63)
                    {
                      cstdlib_strcpy(&__s2[82 * (unsigned __int16)v156], "");
                      int v68 = v156;
                      if (v62) {
                        goto LABEL_109;
                      }
LABEL_116:
                      int v69 = (unsigned __int16)v68;
                      cstdlib_strcpy(&__s2[82 * (unsigned __int16)v68 + 40], __src);
                      if (WORD2(v153)) {
                        int v71 = HIDWORD(v153) + 1;
                      }
                      else {
                        int v71 = 0;
                      }
                      HIDWORD(v153) = v71 + cstdlib_strlen(__src);
                    }
                    else
                    {
                      int v61 = v156;
LABEL_112:
                      int v68 = v61;
                      cstdlib_strcpy(&__s2[82 * (unsigned __int16)v61], __s1);
                      if ((_WORD)v155) {
                        int v70 = v155 + 1;
                      }
                      else {
                        int v70 = 0;
                      }
                      int v155 = v70 + cstdlib_strlen(__s1);
                      if (v66) {
                        goto LABEL_116;
                      }
LABEL_109:
                      int v69 = (unsigned __int16)v68;
                      cstdlib_strcpy(&__s2[82 * (unsigned __int16)v68 + 40], "");
                    }
                    int v156 = v68 + 1;
                    *(_WORD *)&__s2[82 * v69 + 80] = v164;
                    uint64_t v36 = v152;
                    goto LABEL_121;
                  }
                  unsigned __int16 v24 = (const char **)(a1 + 96);
LABEL_121:
                  int v35 = 0;
                  unsigned __int16 v33 = HIWORD(v168);
LABEL_122:
                  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 120))(a3, a4, (unsigned __int16)v170, &v170);
                  if ((v11 & 0x80000000) != 0) {
                    goto LABEL_156;
                  }
                }
                if (!v35)
                {
                  ssft_qsort((uint64_t)__s2, (unsigned __int16)v156, 82, (uint64_t (*)(unint64_t, unint64_t))compare_1);
                  if ((_WORD)v156)
                  {
                    for (uint64_t j = 0; 82 * (unsigned __int16)v156 != j; j += 82)
                    {
                      if (j)
                      {
                        int v73 = &__s2[j];
                        if (cstdlib_strcmp(&__s2[j], "")) {
                          cstdlib_strcat((char *)*v157, "\\"");
                        }
                        cstdlib_strcat((char *)*v157, v73);
                        if (!cstdlib_strcmp(v73 + 40, "")) {
                          goto LABEL_135;
                        }
                        int v74 = cstdlib_strcmp(*v158, "");
                        uint64_t v75 = (char **)(a1 + 104);
                        unint64_t v76 = "\\"";
                        if (!v74) {
                          goto LABEL_135;
                        }
                      }
                      else
                      {
                        unint64_t v76 = __s2;
                        uint64_t v75 = (char **)(a1 + 96);
                      }
                      cstdlib_strcat(*v75, v76);
LABEL_135:
                      cstdlib_strcat((char *)*v158, &__s2[j + 40]);
                    }
                  }
                }
                if ((unsigned __int16)v155 <= (unsigned __int16)v153
                  && WORD2(v153) <= (unsigned __int16)v153)
                {
                  if ((unsigned __int16)v153 - (unsigned __int16)v155 >= 1)
                  {
                    int v90 = 0;
                    do
                    {
                      cstdlib_strcat((char *)*v157, "~");
                      ++v90;
                    }
                    while ((unsigned __int16)v153 - (unsigned __int16)v155 > (unsigned __int16)v90);
                  }
                  if ((unsigned __int16)v153 - WORD2(v153) >= 1)
                  {
                    int v91 = 0;
                    do
                    {
                      cstdlib_strcat((char *)*v158, "~");
                      ++v91;
                    }
                    while ((unsigned __int16)v153 - WORD2(v153) > (unsigned __int16)v91);
                  }
                }
                else
                {
                  if ((unsigned __int16)v155 <= WORD2(v153)) {
                    int v77 = WORD2(v153);
                  }
                  else {
                    int v77 = (unsigned __int16)v155;
                  }
                  int v78 = v77 - (unsigned __int16)v153;
                  if (v78 >= 1)
                  {
                    int v79 = 0;
                    unsigned __int8 v80 = v36;
                    do
                    {
                      if (v80 << 8 == v34)
                      {
                        uint64_t v81 = v154 + ((unint64_t)++v80 << 8);
                        uint64_t v82 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v81);
                        if (!v82) {
                          goto LABEL_154;
                        }
                        *(void *)(a1 + 88) = v82;
                        uint64_t v83 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v81);
                        if (!v83) {
                          goto LABEL_154;
                        }
                        *(void *)(a1 + 96) = v83;
                        uint64_t v84 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 104), v81);
                        if (!v84) {
                          goto LABEL_154;
                        }
                        *unint64_t v158 = (const char *)v84;
                      }
                      cstdlib_strcat(*(char **)(a1 + 88), "~");
                      ++v79;
                      ++v34;
                    }
                    while (v78 > (unsigned __int16)v79);
                  }
                  if (WORD2(v153) <= (unsigned __int16)v155)
                  {
                    if ((unsigned __int16)v155 - WORD2(v153) >= 1)
                    {
                      int v92 = 0;
                      do
                      {
                        cstdlib_strcat((char *)*v158, "~");
                        ++v92;
                      }
                      while ((unsigned __int16)v155 - WORD2(v153) > (unsigned __int16)v92);
                    }
                  }
                  else if (WORD2(v153) - (unsigned __int16)v155 >= 1)
                  {
                    int v85 = 0;
                    do
                    {
                      cstdlib_strcat((char *)*v157, "~");
                      ++v85;
                    }
                    while (WORD2(v153) - (unsigned __int16)v155 > (unsigned __int16)v85);
                  }
                }
                log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L1: %s", v30, v31, v32, (uint64_t)__dst);
                uint64_t v93 = *(const char **)(a1 + 88);
                uint64_t v94 = *(uint64_t (**)(void, void, void, const char *, void))(*(void *)(a1 + 80)
                                                                                             + 120);
                unsigned __int16 v95 = cstdlib_strlen(v93);
                uint64_t v29 = v94(*(void *)(a1 + 64), *(void *)(a1 + 72), 0, v93, v95);
                if ((v29 & 0x80000000) == 0)
                {
                  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L2: %s", v96, v97, v98, (uint64_t)__dst);
                  int v99 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 80)
                                                                                                + 120);
                  int v100 = *(const char **)(a1 + 96);
                  unsigned __int16 v101 = cstdlib_strlen(v100);
                  uint64_t v29 = v99(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, v100, v101);
                  if ((v29 & 0x80000000) == 0)
                  {
                    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s L3: %s", v102, v103, v104, (uint64_t)__dst);
                    uint64_t v105 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 80) + 120);
                    unint64_t v106 = *(const char **)(a1 + 104);
                    unsigned __int16 v107 = cstdlib_strlen(v106);
                    uint64_t v29 = v105(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, v106, v107);
                    if ((v29 & 0x80000000) == 0)
                    {
                      uint64_t v29 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 80) + 80))(*(void *)(a1 + 64), *(void *)(a1 + 72), __dst);
                      if ((v29 & 0x80000000) == 0)
                      {
                        uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t, const char **, unsigned __int16 *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 1, &v163, &v161);
                        if ((v29 & 0x80000000) == 0)
                        {
                          v163[v161] = 0;
                          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O2: %s", v108, v109, v110, (uint64_t)__dst);
                          uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t, const char **, unsigned __int16 *))(*(void *)(a1 + 80) + 128))(*(void *)(a1 + 64), *(void *)(a1 + 72), 2, &v162, &v161);
                          if ((v29 & 0x80000000) == 0)
                          {
                            v162[v161] = 0;
                            log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s O3: %s", v111, v112, v113, (uint64_t)__dst);
                            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56) + 104))(a3, a4, 2, HIWORD(v170), &v170);
                            if ((v11 & 0x80000000) != 0) {
                              goto LABEL_156;
                            }
                            unsigned __int16 v114 = v170;
                            if (!(_WORD)v170) {
                              goto LABEL_156;
                            }
                            LOBYTE(v115) = 0;
                            int v116 = 0;
                            unint64_t v117 = 0;
                            int v118 = 0;
                            int v119 = 0;
                            int v120 = 1;
                            while (1)
                            {
                              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, v114, 0, 1, &v167, (char *)&v169 + 2);
                              if ((v29 & 0x80000000) != 0) {
                                break;
                              }
                              if (v167 <= 0xA && ((1 << v167) & 0x610) != 0)
                              {
                                uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 56) + 168))(a3, a4, (unsigned __int16)v170, 1, 1, (char *)&v168 + 2, (char *)&v169 + 2);
                                if ((v29 & 0x80000000) != 0) {
                                  break;
                                }
                                uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, (unsigned __int16)v170, 5, &__s1, (char *)&v169 + 2);
                                if ((v29 & 0x80000000) != 0) {
                                  break;
                                }
                                if (v120 == 1 || v119 != HIWORD(v168))
                                {
                                  int v118 = v163;
                                  for (uint64_t k = v163 + 1; ; ++k)
                                  {
                                    int v123 = *(unsigned __int8 *)v118;
                                    if (v123 != 32 && v123 != 126) {
                                      break;
                                    }
                                    uint64_t v163 = ++v118;
                                  }
                                  while ((_BYTE)v123)
                                  {
                                    if (v123 == 32 || v123 == 126)
                                    {
                                      uint64_t v163 = k;
                                      *((unsigned char *)k - 1) = 0;
                                      break;
                                    }
                                    uint64_t v163 = k;
                                    char v124 = *k++;
                                    LOBYTE(v123) = v124;
                                  }
                                  unint64_t v117 = v162;
                                  for (m = v162 + 1; ; ++m)
                                  {
                                    int v126 = *(unsigned __int8 *)v117;
                                    if (v126 != 32 && v126 != 126) {
                                      break;
                                    }
                                    uint64_t v162 = ++v117;
                                  }
                                  while ((_BYTE)v126)
                                  {
                                    if (v126 == 32 || v126 == 126)
                                    {
                                      uint64_t v162 = m;
                                      *((unsigned char *)m - 1) = 0;
                                      break;
                                    }
                                    uint64_t v162 = m;
                                    char v127 = *m++;
                                    LOBYTE(v126) = v127;
                                  }
                                }
                                if (v119 != HIWORD(v168))
                                {
                                  if (v116 == 1)
                                  {
                                    if ((_BYTE)v115)
                                    {
                                      uint64_t v115 = v115;
                                      uint64_t v133 = (unsigned __int16 *)v172;
                                      while (1)
                                      {
                                        unsigned int v134 = *v133++;
                                        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56)
                                                                                                  + 192))(a3, a4, v134);
                                        if ((v29 & 0x80000000) != 0) {
                                          goto LABEL_256;
                                        }
                                        if (!--v115)
                                        {
LABEL_225:
                                          int v116 = 0;
                                          goto LABEL_227;
                                        }
                                      }
                                    }
                                  }
                                  else if ((_BYTE)v115)
                                  {
                                    uint64_t v115 = v115;
                                    uint64_t v128 = (unsigned __int16 *)v172;
                                    while (1)
                                    {
                                      uint64_t v159 = 0;
                                      unsigned int v130 = *v128++;
                                      uint64_t v129 = v130;
                                      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v130, 5, &v159, (char *)&v169 + 2);
                                      if ((v29 & 0x80000000) != 0) {
                                        goto LABEL_256;
                                      }
                                      unint64_t v131 = cstdlib_strchr(v159, 92);
                                      if (v131) {
                                        *unint64_t v131 = 0;
                                      }
                                      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v129, 6, &__src, (char *)&v169 + 2);
                                      if ((v29 & 0x80000000) != 0) {
                                        goto LABEL_256;
                                      }
                                      uint64_t v132 = cstdlib_strchr(__src, 92);
                                      if (v132) {
                                        *uint64_t v132 = 0;
                                      }
                                      if (!--v115) {
                                        goto LABEL_225;
                                      }
                                    }
                                  }
                                  int v116 = 0;
                                  LOBYTE(v115) = 0;
                                }
LABEL_227:
                                if (v118
                                  && v117
                                  && (cstdlib_strstr(__s1, v118)
                                   || !cstdlib_strcmp(v118, "*")
                                   || !cstdlib_strcmp(__s1, "*")))
                                {
                                  uint64_t v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                                  uint64_t v136 = (unsigned __int16)v170;
                                  __int16 v137 = cstdlib_strlen(v118);
                                  uint64_t v29 = v135(a3, a4, v136, 5, (unsigned __int16)(v137 + 1), v118, &v169);
                                  if ((v29 & 0x80000000) != 0) {
                                    break;
                                  }
                                  int v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(*(void *)(a1 + 56) + 160);
                                  uint64_t v139 = (unsigned __int16)v170;
                                  __int16 v140 = cstdlib_strlen(v117);
                                  uint64_t v29 = v138(a3, a4, v139, 6, (unsigned __int16)(v140 + 1), v117, &v169);
                                  if ((v29 & 0x80000000) != 0) {
                                    break;
                                  }
                                  int v116 = 1;
                                }
                                else
                                {
                                  *((_WORD *)v172 + v115) = v170;
                                  LOBYTE(v115) = v115 + 1;
                                }
                                int v120 = 0;
                                int v119 = HIWORD(v168);
                              }
                              uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 56)
                                                                                               + 120))(a3, a4, (unsigned __int16)v170, &v170);
                              if ((v11 & 0x80000000) != 0) {
                                goto LABEL_156;
                              }
                              unsigned __int16 v114 = v170;
                              if (!(_WORD)v170)
                              {
                                if (v116 == 1)
                                {
                                  if ((_BYTE)v115)
                                  {
                                    uint64_t v141 = v115 - 1;
                                    uint64_t v142 = (unsigned __int16 *)v172;
                                    do
                                    {
                                      uint64_t v143 = v141;
                                      unsigned int v144 = *v142++;
                                      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 56)
                                                                                                + 192))(a3, a4, v144);
                                      if ((v11 & 0x80000000) != 0) {
                                        break;
                                      }
                                      uint64_t v141 = v143 - 1;
                                    }
                                    while (v143);
                                  }
                                  goto LABEL_156;
                                }
                                if (!(_BYTE)v115) {
                                  goto LABEL_156;
                                }
                                uint64_t v115 = v115;
                                uint64_t v145 = (unsigned __int16 *)v172;
                                while (1)
                                {
                                  unsigned int v147 = *v145++;
                                  uint64_t v146 = v147;
                                  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v147, 5, &__s1, (char *)&v169 + 2);
                                  if ((v29 & 0x80000000) != 0) {
                                    goto LABEL_256;
                                  }
                                  uint64_t v148 = cstdlib_strchr(__s1, 92);
                                  if (v148) {
                                    *uint64_t v148 = 0;
                                  }
                                  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(*(void *)(a1 + 56) + 176))(a3, a4, v146, 6, &__src, (char *)&v169 + 2);
                                  if ((v11 & 0x80000000) == 0)
                                  {
                                    uint64_t v149 = cstdlib_strchr(__src, 92);
                                    if (v149) {
                                      *uint64_t v149 = 0;
                                    }
                                    if (--v115) {
                                      continue;
                                    }
                                  }
                                  goto LABEL_156;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_256:
              uint64_t v11 = v29;
              goto LABEL_156;
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t compare_1(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 80) - *(unsigned __int16 *)(a1 + 80);
}

uint64_t fe_pos_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62341, 2240);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2313166856;
  }
}

uint64_t fe_pos_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2313166849;
  }
  uint64_t result = 0;
  *a2 = &IFePos;
  return result;
}

uint64_t fe_pos_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2313166855;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t fe_pos_ClassClose()
{
  return 0;
}

uint64_t statcomp_getDctInfo(void *a1, const char *a2, uint64_t a3, void *a4, unsigned __int8 *a5, _DWORD *a6)
{
  uint64_t v16 = 0;
  unsigned __int16 v15 = 0;
  *a6 = 0;
  uint64_t v10 = (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t *, unsigned __int16 *, unsigned __int8 *))(a1[50] + 96))(a1[48], a1[49], "compounds_feature_info", a3, &v16, &v15, a5);
  if ((v10 & 0x80000000) == 0 && v15)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *(char **)(v16 + 8 * v11);
      uint64_t v13 = cstdlib_strchr(v12, *a5);
      if (v13)
      {
        if (!cstdlib_strncmp(v12, a2, (unsigned __int16)((_WORD)v13 - (_WORD)v12))) {
          break;
        }
      }
      if (++v11 >= (unint64_t)v15) {
        return v10;
      }
    }
    *a4 = *(void *)(v16 + 8 * v11);
    *a6 = 1;
  }
  return v10;
}

uint64_t statcomp_getSyllCount(const char *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if (cstdlib_strlen(a1) && cstdlib_strcmp(v1, "."))
    {
      unsigned __int16 v2 = cstdlib_strlen(v1);
      unsigned __int16 v3 = 1;
      uint64_t v4 = v2;
      if (v2)
      {
        do
        {
          int v5 = *(unsigned __int8 *)v1++;
          if (v5 == 46) {
            ++v3;
          }
          --v4;
        }
        while (v4);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return v3;
}

uint64_t setStatCOMPFeatureVector(unsigned int a1, uint64_t *a2, unsigned int a3, __int16 a4, uint64_t a5)
{
  uint64_t v9 = a2[20];
  uint64_t v10 = a2[22];
  uint64_t v11 = a2[23];
  uint64_t v58 = *(void *)(a2[21] + 8 * a1);
  uint64_t v55 = a2[19];
  int v57 = *(uint64_t **)(a2[24] + 8 * a1);
  unsigned __int8 v61 = 0;
  uint64_t v12 = *(_WORD **)(v11 + 8 * a1);
  __s = 0;
  int v59 = 0;
  uint64_t v13 = (unsigned __int16)(a4 - a3 + 1);
  uint64_t v18 = (const char **)heap_Calloc(*(void **)(*a2 + 8), 1, 8 * v13 + 8);
  uint64_t v19 = *a2;
  if (!v18)
  {
    uint64_t v20 = 0;
    goto LABEL_13;
  }
  uint64_t v20 = (const char **)heap_Calloc(*(void **)(v19 + 8), 1, 8 * v13 + 8);
  if (!v20)
  {
LABEL_11:
    uint64_t v19 = *a2;
LABEL_13:
    log_OutPublic(*(void *)(v19 + 32), (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, v47);
    uint64_t DctInfo = 2313166858;
    goto LABEL_14;
  }
  if (v13)
  {
    uint64_t v51 = v10;
    uint64_t v52 = v9;
    uint64_t v21 = 0;
    uint64_t v53 = a1;
    int v54 = v12;
    uint64_t v22 = 96 * a3;
    uint64_t v23 = v13 - 1;
    while (1)
    {
      unsigned __int16 v24 = (char *)heap_Calloc(*(void **)(*a2 + 8), 1, (unsigned __int16)(*(_WORD *)(a2[54] + v22 + 2) - *(_WORD *)(a2[54] + v22)) + 1);
      v18[v21] = v24;
      if (!v24) {
        goto LABEL_11;
      }
      cstdlib_strncpy(v24, (const char *)(a2[60] + *(unsigned __int16 *)(a2[54] + v22)), *(unsigned __int16 *)(a2[54] + v22 + 2) - (unint64_t)*(unsigned __int16 *)(a2[54] + v22));
      v18[v21][*(unsigned __int16 *)(a2[54] + v22 + 2) - *(unsigned __int16 *)(a2[54] + v22)] = 0;
      unsigned __int16 v25 = cstdlib_strlen(*(const char **)(a2[54] + v22 + 56));
      int v26 = (char *)heap_Calloc(*(void **)(*a2 + 8), 1, v25 + 1);
      v20[v21] = v26;
      if (!v26) {
        goto LABEL_11;
      }
      cstdlib_strcpy(v26, *(const char **)(a2[54] + v22 + 56));
      if (v23 == v21)
      {
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(a2[50] + 144))(a2[48], a2[49], "normal", v18[v21], 128);
        if ((v27 & 0x80000000) != 0)
        {
          uint64_t DctInfo = v27;
          goto LABEL_14;
        }
        if (v23 == v21)
        {
          uint64_t v30 = 0;
          uint64_t v49 = v13;
          uint64_t v50 = v55 + 20 * a1;
          uint64_t v48 = a5;
          while (1)
          {
            int v31 = *(unsigned __int16 *)(v50 + 2 * v30);
            uint64_t DctInfo = statcomp_getDctInfo(a2, *(const char **)(v52 + 8 * v53), (uint64_t)v18[v30], &__s, &v61, &v59);
            if ((DctInfo & 0x80000000) != 0) {
              goto LABEL_14;
            }
            uint64_t v56 = v30;
            if (v59 == 1)
            {
              uint64_t v32 = __s;
              int v33 = v61;
              uint64_t v34 = *(unsigned __int16 *)(*(void *)(v51 + 8 * v53) + 8);
              int v35 = cstdlib_strchr(__s, v61);
              uint64_t v36 = v32;
              if (v35)
              {
                *int v35 = 0;
                uint64_t v36 = v35 + 1;
              }
              if (v34)
              {
                uint64_t v37 = v54;
                do
                {
                  uint64_t v38 = cstdlib_strchr(v36, v33);
                  if (v38) {
                    *v38++ = 0;
                  }
                  *v37++ = (_WORD)v36 - (_WORD)v32;
                  uint64_t v36 = v38;
                  --v34;
                }
                while (v34);
              }
            }
            if (*(unsigned __int8 *)(v58 + 1296) >= 2u) {
              break;
            }
            uint64_t v13 = v49;
LABEL_42:
            uint64_t v30 = v56 + 1;
            if (v56 + 1 == v13) {
              goto LABEL_14;
            }
          }
          unsigned __int16 v39 = 0;
          int v40 = v59;
          unsigned __int16 v41 = __s;
          uint64_t v13 = v49;
          while (2)
          {
            unsigned int v42 = v39;
            if (cstdlib_strcmp(*(const char **)(v48 + 8 * v39), "=")
              || (uint64_t v43 = *v57, *(unsigned __int16 *)(*v57 + 12 * v42) != v31)
              || *(_DWORD *)(v43 + 12 * v42 + 4))
            {
              if (v40 == 1)
              {
                uint64_t v44 = *v57;
                if (*(unsigned __int16 *)(*v57 + 12 * v42) == v31)
                {
                  int v45 = *(_DWORD *)(v44 + 12 * v42 + 4);
                  if (v45 == 2 || v45 == 1)
                  {
                    uint64_t v46 = statcomp_setFeature(v58, *a2, v42, v48, &v41[(unsigned __int16)v54[*(unsigned __int16 *)(v44 + 12 * v42 + 8)]]);
LABEL_38:
                    uint64_t DctInfo = v46;
                    if ((v46 & 0x80000000) != 0) {
                      goto LABEL_14;
                    }
                  }
                }
              }
              unsigned __int16 v39 = v42 + 1;
              if (*(unsigned __int8 *)(v58 + 1296) - 1 <= (unsigned __int16)(v42 + 1)) {
                goto LABEL_42;
              }
              continue;
            }
            break;
          }
          uint64_t v46 = statcomp_setDynamicFeature(*a2, v58, *(unsigned __int16 *)(v43 + 12 * v42 + 8), v42, v48, v18, v20, v49, v56);
          goto LABEL_38;
        }
      }
      v22 += 96;
      ++v21;
    }
  }
  uint64_t DctInfo = 0;
LABEL_14:
  freeWordList(*(void **)(*a2 + 8), v13, (uint64_t)v18);
  freeWordList(*(void **)(*a2 + 8), v13, (uint64_t)v20);
  return DctInfo;
}

void *freeWordList(void *result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    int v5 = result;
    unsigned __int16 v6 = 0;
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a3 + 8 * v6);
      if (v8)
      {
        heap_Free(v5, v8);
        *(void *)(a3 + 8 * v7) = 0;
      }
      unsigned __int16 v6 = v7 + 1;
    }
    while (a2 >= (unsigned __int16)(v7 + 1));
    return heap_Free(v5, a3);
  }
  return result;
}

uint64_t statcomp_useStatCOMP(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a4 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a1, a2, "fecfg", "usecompound", &__c[3], &__c[1], __c);
  if ((result & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)&__c[1] != 1 || *(void *)&__c[3] == 0) {
      return 0;
    }
    uint64_t v7 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v7) {
      *uint64_t v7 = 0;
    }
    if (cstdlib_strcmp(**(const char ***)&__c[3], "YES") && cstdlib_strcmp(**(const char ***)&__c[3], "yes"))
    {
      return 0;
    }
    else
    {
      uint64_t result = 0;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t statcomp_processUserMarkup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  int v65 = 0;
  int v66 = 0;
  __int16 v64 = 0;
  int v62 = 0;
  unsigned int v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v59 = 0;
  unsigned __int16 v58 = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v66 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, HIWORD(v66), 0, (char *)&v65 + 2);
  if ((v9 & 0x80000000) == 0 && HIWORD(v65) == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, int *))(a1 + 176))(a2, a3, HIWORD(v66), 0, &v61, &v65);
    if ((v9 & 0x80000000) == 0 && (unsigned __int16)v65 >= 2u)
    {
      uint64_t v10 = (_WORD *)(a4 + 424);
      *(_WORD *)(a4 + 424) = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v66), &v66);
      if ((v9 & 0x80000000) != 0) {
        goto LABEL_65;
      }
      unsigned __int16 v11 = v66;
      if (!(_WORD)v66) {
        goto LABEL_65;
      }
      uint64_t v12 = (char **)(a4 + 408);
      while (1)
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, v11, 0, 1, &v63, &v65);
        if ((v13 & 0x80000000) != 0)
        {
LABEL_64:
          uint64_t v9 = v13;
          goto LABEL_65;
        }
        if (v63 <= 0xA && ((1 << v63) & 0x610) != 0)
        {
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v66, 1, 1, &v62, &v65);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v66, 2, 1, (char *)&v62 + 2, &v65);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          if ((unsigned __int16)v62 > HIWORD(v62))
          {
            unsigned __int16 v56 = 16049;
            goto LABEL_69;
          }
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1 + 184))(a2, a3, (unsigned __int16)v66, 14, (char *)&v65 + 2);
          if ((v13 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          if (HIWORD(v65) == 1)
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v66, 14, &v60, &v65);
            if ((v13 & 0x80000000) != 0) {
              goto LABEL_64;
            }
            if (hlp_NLUStrFind(v60, "S_COMP", &v59, &v58))
            {
              if (!*v10)
              {
                uint64_t v15 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v15;
                if (!v15) {
                  goto LABEL_68;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (unsigned __int16 *)(a4 + 424), v60);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v20 = v58;
              if (v58)
              {
                uint64_t v21 = 0;
                uint64_t v22 = v59 + 1;
                uint64_t v23 = __s;
                while (1)
                {
                  int v24 = *((unsigned __int8 *)v22 - 1);
                  if (v24 == 43) {
                    break;
                  }
                  *v23++ = v24;
                  ++v22;
                  --v21;
                  if (!(v20 + v21)) {
                    goto LABEL_29;
                  }
                }
                *uint64_t v23 = 0;
                cstdlib_strncpy(__dst, v22, v20 + v21 - 1);
                __dst[v21 - 1 + v58] = 0;
                hlp_NLUStrSet(*v12, "S_COMPPOS", __dst);
              }
              else
              {
LABEL_29:
                __s[v20] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "S_COMP", __s);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v25, v26, v27, (uint64_t)v60);
              __int16 v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
              uint64_t v29 = (unsigned __int16)v66;
              __int16 v30 = cstdlib_strlen(*(const char **)(a4 + 408));
              uint64_t v13 = v28(a2, a3, v29, 14, (unsigned __int16)(v30 + 1), *(void *)(a4 + 408), &v64);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              cstdlib_strcpy(*v12, "");
            }
            if (hlp_NLUStrFind(v60, "E_COMP", &v59, &v58))
            {
              if (!*v10)
              {
                uint64_t v31 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v31;
                if (!v31) {
                  goto LABEL_68;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (unsigned __int16 *)(a4 + 424), v60);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v32 = v58;
              if (v58)
              {
                uint64_t v33 = 0;
                uint64_t v34 = v59 + 1;
                int v35 = __s;
                while (1)
                {
                  int v36 = *((unsigned __int8 *)v34 - 1);
                  if (v36 == 43) {
                    break;
                  }
                  *v35++ = v36;
                  ++v34;
                  --v33;
                  if (!(v32 + v33)) {
                    goto LABEL_42;
                  }
                }
                *int v35 = 0;
                cstdlib_strncpy(__dst, v34, v32 + v33 - 1);
                __dst[v33 - 1 + v58] = 0;
                hlp_NLUStrSet(*v12, "E_COMPPOS", __dst);
              }
              else
              {
LABEL_42:
                __s[v32] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "E_COMP", __s);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v37, v38, v39, (uint64_t)v60);
              int v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
              uint64_t v41 = (unsigned __int16)v66;
              __int16 v42 = cstdlib_strlen(*(const char **)(a4 + 408));
              uint64_t v13 = v40(a2, a3, v41, 14, (unsigned __int16)(v42 + 1), *(void *)(a4 + 408), &v64);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              cstdlib_strcpy(*v12, "");
            }
            if (hlp_NLUStrFind(v60, "I_COMP", &v59, &v58))
            {
              if (!*v10)
              {
                uint64_t v43 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
                *(void *)(a4 + 408) = v43;
                if (!v43)
                {
LABEL_68:
                  log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v16, v17, v18, v19, v57);
                  unsigned __int16 v56 = 8202;
LABEL_69:
                  uint64_t v9 = v56 | 0x89E00000;
LABEL_65:
                  if (*v10)
                  {
                    heap_Free(*(void **)(*(void *)a4 + 8), *(void *)(a4 + 408));
                    *(void *)(a4 + 408) = 0;
                    *(_WORD *)(a4 + 424) = 0;
                  }
                  return v9;
                }
                *uint64_t v10 = 1024;
              }
              uint64_t v8 = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), (unsigned __int16 *)(a4 + 424), v60);
              if ((v8 & 0x80000000) != 0) {
                return v8;
              }
              uint64_t v44 = v58;
              if (v58)
              {
                uint64_t v45 = 0;
                uint64_t v46 = v59 + 1;
                unsigned int v47 = __s;
                while (1)
                {
                  int v48 = *((unsigned __int8 *)v46 - 1);
                  if (v48 == 43) {
                    break;
                  }
                  *v47++ = v48;
                  ++v46;
                  --v45;
                  if (!(v44 + v45)) {
                    goto LABEL_55;
                  }
                }
                *unsigned int v47 = 0;
                cstdlib_strncpy(__dst, v46, v44 + v45 - 1);
                __dst[v45 - 1 + v58] = 0;
                hlp_NLUStrSet(*v12, "I_COMPPOS", __dst);
              }
              else
              {
LABEL_55:
                __s[v44] = 0;
              }
              hlp_NLUStrSet(*(char **)(a4 + 408), "I_COMP", __s);
              log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing NLU=%s", v49, v50, v51, (uint64_t)v60);
              uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
              uint64_t v53 = (unsigned __int16)v66;
              __int16 v54 = cstdlib_strlen(*(const char **)(a4 + 408));
              uint64_t v13 = v52(a2, a3, v53, 14, (unsigned __int16)(v54 + 1), *(void *)(a4 + 408), &v64);
              if ((v13 & 0x80000000) != 0) {
                goto LABEL_64;
              }
              cstdlib_strcpy(*v12, "");
            }
          }
        }
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v66, &v66);
        if ((v9 & 0x80000000) == 0)
        {
          unsigned __int16 v11 = v66;
          if ((_WORD)v66) {
            continue;
          }
        }
        goto LABEL_65;
      }
    }
  }
  return v9;
}

uint64_t statcomp_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  int v103 = 0;
  __int16 v102 = 0;
  unsigned __int16 v101 = 0;
  unsigned int v100 = 0;
  uint64_t v98 = 0;
  int v99 = 0;
  uint64_t v96 = 0;
  __s = 0;
  int v95 = 0;
  unsigned __int16 v94 = 0;
  *((_DWORD *)a4 + 107) = log_GetLogLevel(*(void *)(*(void *)a4 + 32)) > 4;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v103 + 2);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v103), 0, &v102);
  if ((v9 & 0x80000000) == 0 && v102 == 1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, unsigned __int16 *))(a1 + 176))(a2, a3, HIWORD(v103), 0, &__s, &v101);
    if ((v9 & 0x80000000) == 0 && v101 >= 2u)
    {
      unsigned __int16 v10 = cstdlib_strlen(__s);
      unsigned __int16 v11 = (char *)heap_Calloc(*(void **)(*(void *)a4 + 8), 1, v10 + 1);
      *((void *)a4 + 60) = v11;
      if (v11)
      {
        cstdlib_strcpy(v11, __s);
        log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statCOMP : start processing=\"%s\"", v16, v17, v18, *((void *)a4 + 60));
        uint64_t v19 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
        *((void *)a4 + 51) = v19;
        if (v19)
        {
          a4[212] = 1024;
          uint64_t v20 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 1024);
          *((void *)a4 + 52) = v20;
          if (v20)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v103), &v103);
            if ((v8 & 0x80000000) == 0)
            {
              uint64_t v93 = a4 + 216;
              while ((_WORD)v103)
              {
                uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                if ((v8 & 0x80000000) != 0) {
                  return v8;
                }
                if (v100 <= 0xA && ((1 << v100) & 0x610) != 0)
                {
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v103, 1, 1, &v95, &v101);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v103, 2, 1, (char *)&v95 + 2, &v101);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if ((unsigned __int16)v95 > HIWORD(v95)) {
                    return 2313174705;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v103, 17, &v102);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (v102 == 1)
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v103, 17, 1, &v94, &v101);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                  }
                  else
                  {
                    unsigned __int16 v94 = v100 - 9 <= 1;
                  }
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, unsigned __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v103, 3, &v96, &v101);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (HIWORD(v95) == (unsigned __int16)v95)
                  {
                    log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v22, v23, v24, HIWORD(v95));
                  }
                  else
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v103, 14, &v99, &v101);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v25 = v99;
                    int v26 = v94;
                    uint64_t v27 = v96;
                    unsigned __int16 v107 = 0;
                    unsigned __int16 v106 = 0;
                    uint64_t v105 = 0;
                    unsigned __int16 v104 = 0;
                    __int16 v28 = *(void **)(*(void *)a4 + 8);
                    int v29 = cstdlib_strlen(v99);
                    __int16 v30 = (char *)heap_Calloc(v28, 1, (v29 + 1));
                    if (!v30) {
                      goto LABEL_71;
                    }
                    uint64_t v31 = v30;
                    cstdlib_strcpy(v30, v25);
                    uint64_t v35 = a4[220];
                    if (a4[220])
                    {
                      uint64_t v36 = 0;
                      uint64_t v37 = (unsigned __int16 *)(*(void *)v93 + 2);
                      while (1)
                      {
                        unsigned int v38 = *(v37 - 1);
                        if (__PAIR64__(*v37, v38) == __PAIR64__(HIWORD(v95), (unsigned __int16)v95)) {
                          break;
                        }
                        if ((unsigned __int16)v95 >= v38 && HIWORD(v95) <= *v37)
                        {
                          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip subsumed word %d,%d (subsumed by word %d)", v32, v33, v34, (unsigned __int16)v95);
                          break;
                        }
                        ++v36;
                        v37 += 48;
                        if (v35 == v36) {
                          goto LABEL_36;
                        }
                      }
                    }
                    else
                    {
LABEL_36:
                      if (a4[221])
                      {
                        uint64_t v39 = *(void *)v93;
                        if ((int)v35 + 2 > a4[221])
                        {
                          uint64_t v40 = heap_Realloc(*(uint64_t **)(*(void *)a4 + 8), v39, 96 * a4[221] + 2016);
                          if (!v40) {
                            goto LABEL_85;
                          }
                          *((void *)a4 + 54) = v40;
                          cstdlib_memset((void *)(v40 + 96 * a4[220]), 0, 0x780uLL);
                          a4[221] += 20;
                          uint64_t v39 = *((void *)a4 + 54);
                        }
                      }
                      else
                      {
                        uint64_t v45 = heap_Calloc(*(void **)(*(void *)a4 + 8), 1, 4801);
                        *((void *)a4 + 54) = v45;
                        if (!v45) {
                          goto LABEL_85;
                        }
                        uint64_t v39 = v45;
                        a4[221] = 50;
                      }
                      uint64_t v46 = (_DWORD *)(v39 + 96 * a4[220]);
                      *uint64_t v46 = v95;
                      v46[1] = v26 == 1;
                      if (hlp_NLUStrFind(v31, "POS", &v107, &v106))
                      {
                        unsigned int v47 = *(void **)(*(void *)a4 + 8);
                        int v48 = cstdlib_strlen(v107);
                        uint64_t v49 = (char *)heap_Calloc(v47, 1, (v48 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * a4[220] + 32) = v49;
                        if (!v49) {
                          goto LABEL_85;
                        }
                        cstdlib_strcpy(v49, v107);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * a4[220] + 32) + v106) = 0;
                      }
                      if (hlp_NLUStrFind(v31, "S_COMP", &v105, &v104))
                      {
                        uint64_t v50 = *(void **)(*(void *)a4 + 8);
                        int v51 = cstdlib_strlen(v105);
                        uint64_t v52 = (char *)heap_Calloc(v50, 1, (v51 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * a4[220] + 40) = v52;
                        if (!v52) {
                          goto LABEL_85;
                        }
                        cstdlib_strcpy(v52, v105);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * a4[220] + 40) + v104) = 0;
                      }
                      if (hlp_NLUStrFind(v31, "E_COMP", &v105, &v104))
                      {
                        uint64_t v53 = *(void **)(*(void *)a4 + 8);
                        int v54 = cstdlib_strlen(v105);
                        uint64_t v55 = (char *)heap_Calloc(v53, 1, (v54 + 1));
                        *(void *)(*((void *)a4 + 54) + 96 * a4[220] + 48) = v55;
                        if (!v55) {
                          goto LABEL_85;
                        }
                        cstdlib_strcpy(v55, v105);
                        *(unsigned char *)(*(void *)(*((void *)a4 + 54) + 96 * a4[220] + 48) + v104) = 0;
                      }
                      uint64_t v56 = *((void *)a4 + 54) + 96 * a4[220];
                      *(_DWORD *)(v56 + 12) = 0;
                      *(_DWORD *)(v56 + 20) = 0;
                      size_t v57 = HIWORD(v95);
                      if (cstdlib_strlen(*((const char **)a4 + 60)) > v57
                        && *(unsigned char *)(*((void *)a4 + 60) + HIWORD(v95)) == 95)
                      {
                        *(_DWORD *)(*((void *)a4 + 54) + 96 * a4[220] + 12) = 1;
                      }
                      if ((_WORD)v95)
                      {
                        uint64_t v58 = *((void *)a4 + 54);
                        unsigned int v59 = a4[220];
                        if (*(unsigned char *)(*((void *)a4 + 60) + (unsigned __int16)v95 - 1) == 95) {
                          *(_DWORD *)(v58 + 96 * a4[220] + 20) = 1;
                        }
                      }
                      else
                      {
                        uint64_t v58 = *((void *)a4 + 54);
                        unsigned int v59 = a4[220];
                      }
                      uint64_t v60 = v58 + 96 * v59;
                      int v62 = *(_DWORD *)(v60 + 12);
                      uint64_t v61 = (_DWORD *)(v60 + 12);
                      if (v62 == 1)
                      {
                        uint64_t v63 = v58 + 96 * v59;
                        int v65 = *(_DWORD *)(v63 + 20);
                        __int16 v64 = (_DWORD *)(v63 + 20);
                        if (v65 == 1)
                        {
                          *uint64_t v61 = 0;
                          *__int16 v64 = 0;
                        }
                      }
                      unsigned int v66 = *(unsigned __int8 *)(HIWORD(v95) + *((void *)a4 + 60) - 1);
                      BOOL v67 = v66 <= 0x3B && ((1 << v66) & 0xC00100000000000) != 0;
                      *(_DWORD *)(v58 + 96 * v59 + 24) = v67;
                      int v68 = *(void **)(*(void *)a4 + 8);
                      int v69 = cstdlib_strlen(v27);
                      int v70 = (char *)heap_Calloc(v68, 1, (v69 + 1));
                      *(void *)(*((void *)a4 + 54) + 96 * a4[220] + 56) = v70;
                      if (!v70)
                      {
LABEL_85:
                        uint64_t v9 = 2313166858;
                        log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v41, v42, v43, v44, v92);
                        heap_Free(*(void **)(*(void *)a4 + 8), (uint64_t)v31);
                        return v9;
                      }
                      cstdlib_strcpy(v70, v27);
                      ++a4[220];
                    }
                    heap_Free(*(void **)(*(void *)a4 + 8), (uint64_t)v31);
                  }
                }
                uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v103, &v103);
                if ((v9 & 0x80000000) != 0) {
                  return v9;
                }
              }
              uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v103), &v103);
              if ((v8 & 0x80000000) == 0)
              {
                while ((_WORD)v103)
                {
                  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                  if ((v8 & 0x80000000) != 0) {
                    return v8;
                  }
                  if (v100 == 6)
                  {
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v103, 1, 1, &v95, &v101);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v103, 2, 1, (char *)&v95 + 2, &v101);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    if ((unsigned __int16)v95 > HIWORD(v95)) {
                      return 2313174705;
                    }
                    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v103, 4, &v98, &v101);
                    if ((v8 & 0x80000000) != 0) {
                      return v8;
                    }
                    uint64_t v81 = addStatCOMPToken(*(void *)a4, (unsigned __int16 *)&v95, v98, v93, v77, v78, v79, v80);
                    if ((v81 & 0x80000000) != 0)
                    {
                      uint64_t v9 = v81;
                      if (v81 != -1981800448) {
                        return v9;
                      }
                    }
                  }
                  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v103, &v103);
                  if ((v9 & 0x80000000) != 0) {
                    return v9;
                  }
                }
                uint64_t v8 = validateUserCompoundWords((uint64_t *)a4, v71, 0, v72, v73, v74, v75, v76);
                if ((v8 & 0x80000000) == 0)
                {
                  if (v10)
                  {
                    for (uint64_t i = 0; i != v10; ++i)
                    {
                      uint64_t v86 = *((void *)a4 + 60);
                      if (*(unsigned char *)(v86 + i) == 95) {
                        *(unsigned char *)(v86 + i) = 32;
                      }
                    }
                  }
                  uint64_t v87 = a4[220];
                  if (a4[220])
                  {
                    int v88 = 0;
                    uint64_t v89 = (int *)(*(void *)v93 + 20);
                    do
                    {
                      if (*(v89 - 2) == 1) {
                        int v88 = 1;
                      }
                      *(v89 - 1) = v88;
                      int v90 = *v89;
                      v89 += 24;
                      if (v90 == 1) {
                        int v88 = 0;
                      }
                      --v87;
                    }
                    while (v87);
                  }
                  log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statCOMP : internal processing=\"%s\"", v82, v83, v84, *((void *)a4 + 60));
                  return printstatCOMPSent(*(void *)a4, *((_DWORD *)a4 + 107), (const char **)a4 + 51, *((char **)a4 + 52), a4 + 212, (uint64_t)v93, *((void *)a4 + 60), (uint64_t)"after statcomp_getSentenceData()", 0);
                }
              }
            }
            return v8;
          }
        }
      }
LABEL_71:
      uint64_t v9 = 2313166858;
      log_OutPublic(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v92);
    }
  }
  return v9;
}

uint64_t addStatCOMPToken(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a4[4];
  int v11 = *a2;
  if (!a4[4]) {
    goto LABEL_14;
  }
  uint64_t v12 = 0;
  int v13 = v10 + 1;
  uint64_t v14 = *(void *)a4;
  unsigned int v15 = a2[1];
  uint64_t v16 = (unsigned __int16 *)(*(void *)a4 + 2);
  while (1)
  {
    unsigned int v17 = *(v16 - 1);
    if (v11 == v17) {
      int v13 = v12;
    }
    unsigned int v18 = *v16;
    if (v15 == v18) {
      break;
    }
    if (v15 >= v17 && v15 < v18) {
      break;
    }
    v16 += 48;
    ++v12;
    int v11 = *a2;
    if (v10 == v12) {
      goto LABEL_14;
    }
  }
  if (v10 + 1 != (unsigned __int16)v13)
  {
    for (; (unsigned __int16)v13 <= (unsigned __int16)v12; ++v13)
      *(_DWORD *)(v14 + 96 * (unsigned __int16)v13 + 8) = 1;
    return 0;
  }
  else
  {
LABEL_14:
    uint64_t v20 = 2313166848;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, a3);
    if (a4[4])
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      do
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"word[%d] %d,%d", v21, v22, v23, v25++);
        v24 += 96;
      }
      while (v25 < a4[4]);
    }
  }
  return v20;
}

uint64_t validateUserCompoundWords(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v26, 0, sizeof(v26));
  if (*((_WORD *)a1 + 220))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = a1[54];
      if (*(void *)(v13 + v9 + 40))
      {
        if (v12 == 1)
        {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : found consecutive S_COMP, assume %s on word %d is incorrect, try to continue...", a6, a7, a8, *(void *)(v13 + 96 * v11 + 40));
          uint64_t v13 = a1[54];
        }
        int v12 = 1;
        unsigned __int16 v11 = v10;
      }
      uint64_t v14 = *(const char **)(v13 + v9 + 48);
      if (!v14) {
        goto LABEL_13;
      }
      if (v12 != 1) {
        break;
      }
      if (cstdlib_strcmp(*(const char **)(v13 + 96 * v11 + 40), v14))
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as S_COMP(%s) and E_COMP(%s) fields differ", v15, v16, v17, *(void *)(a1[54] + 96 * v11 + 40));
LABEL_12:
        int v12 = 0;
        goto LABEL_13;
      }
      unsigned int v18 = *(char **)(a1[54] + 96 * v11 + 40);
      uint64_t v19 = cstdlib_strstr(v18, "+");
      if (v19)
      {
        *uint64_t v19 = 0;
        uint64_t v23 = v19 + 1;
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"VALID USER COMPOUND WORD ADD from %d to %d", v20, v21, v22, v11);
        uint64_t v24 = a1[54];
        *(unsigned char *)(v24 + 96 * v11 + 88) = 1;
        *(unsigned char *)(v24 + v9 + 89) = 1;
        uint64_t result = setCOMPValues(a1, v11, (unsigned __int16)v10, v26, v23, v18, 0, "MARKUP", "USER");
        int v12 = 0;
        if ((result & 0x80000000) != 0) {
          return result;
        }
      }
      else
      {
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as invalid fields in \"%s\"", v20, v21, v22, *(void *)(a1[54] + 96 * v11 + 40));
        int v12 = 0;
      }
LABEL_13:
      ++v10;
      v9 += 96;
      if (v10 >= *((unsigned __int16 *)a1 + 220)) {
        return 0;
      }
    }
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip user compound word as E_COMP(%s) found without starting S_COMP", a6, a7, a8, *(void *)(v13 + v9 + 48));
    goto LABEL_12;
  }
  return 0;
}

uint64_t printstatCOMPSent(uint64_t a1, int a2, const char **a3, char *a4, unsigned __int16 *a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  if (!a2) {
    return 0;
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a8);
  if (!*(_WORD *)(a6 + 8)) {
    return 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  if (a9 != 1)
  {
    uint64_t v17 = "[%2d] ";
    goto LABEL_6;
  }
  uint64_t v17 = "statCOMP [%2d] ";
  sprintf(a4, "statCOMP [%2d] ");
  while (1)
  {
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, a4);
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    cstdlib_strncpy(a4, (const char *)(a7 + *(unsigned __int16 *)(*(void *)a6 + v15)), *(unsigned __int16 *)(*(void *)a6 + v15 + 2) - (unint64_t)*(unsigned __int16 *)(*(void *)a6 + v15));
    a4[*(unsigned __int16 *)(*(void *)a6 + v15 + 2) - *(unsigned __int16 *)(*(void *)a6 + v15)] = 0;
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, a4);
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    uint64_t v18 = statcomp_add2Str(a1, a3, a5, " ");
    if ((v18 & 0x80000000) != 0) {
      break;
    }
    uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 32));
    if ((v22 & 0x80000000) != 0) {
      return v22;
    }
    uint64_t v23 = *(void *)a6;
    if (*(_DWORD *)(*(void *)a6 + v15 + 12) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " <HYPHEN");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 20) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " HYPHEN>");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 24) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " ENDINPUNC");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(_DWORD *)(v23 + v15 + 8) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " TOK");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(unsigned char *)(v23 + v15 + 88) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " <CW");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 72))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " POS:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 72));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 80))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PROM:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 80));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(unsigned char *)(v23 + v15 + 89) == 1)
    {
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, " CW>");
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 56))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PRON:");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 56));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
      uint64_t v23 = *(void *)a6;
    }
    if (*(void *)(v23 + v15 + 64))
    {
      uint64_t v18 = statcomp_add2Str(a1, a3, a5, " PRON(new):");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v22 = statcomp_add2Str(a1, a3, a5, *(char **)(*(void *)a6 + v15 + 64));
      if ((v22 & 0x80000000) != 0) {
        return v22;
      }
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v19, v20, v21, (uint64_t)*a3);
    cstdlib_strcpy((char *)*a3, "");
    ++v16;
    v15 += 96;
    if (v16 >= *(unsigned __int16 *)(a6 + 8)) {
      return v22;
    }
LABEL_6:
    sprintf(a4, v17, v16);
  }
  return v18;
}

void *statcomp_freeSentenceData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if (v2)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v2);
    *(void *)(a1 + 408) = 0;
    *(_WORD *)(a1 + 424) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 416);
  if (v3)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v3);
    *(void *)(a1 + 416) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 432);
  if (*(_WORD *)(a1 + 440))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 80;
    do
    {
      if (*(void *)(v4 + v6 - 48))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 48));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 48) = 0;
      }
      if (*(void *)(v4 + v6 - 8))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 8));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 8) = 0;
      }
      if (*(void *)(v4 + v6))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6) = 0;
      }
      if (*(void *)(v4 + v6 - 24))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 24));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 24) = 0;
      }
      if (*(void *)(v4 + v6 - 16))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 16));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 16) = 0;
      }
      if (*(void *)(v4 + v6 - 40))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 40));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 40) = 0;
      }
      if (*(void *)(v4 + v6 - 32))
      {
        heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v6 - 32));
        uint64_t v4 = *(void *)(a1 + 432);
        *(void *)(v4 + v6 - 32) = 0;
      }
      ++v5;
      v6 += 96;
    }
    while (v5 < *(unsigned __int16 *)(a1 + 440));
  }
  else if (!v4)
  {
    goto LABEL_25;
  }
  heap_Free(*(void **)(*(void *)a1 + 8), v4);
  *(void *)(a1 + 432) = 0;
LABEL_25:
  uint64_t v7 = *(void *)(a1 + 480);
  if (v7)
  {
    heap_Free(*(void **)(*(void *)a1 + 8), v7);
    *(void *)(a1 + 480) = 0;
  }

  return cstdlib_memset((void *)(a1 + 432), 0, 0x30uLL);
}

uint64_t statcomp_processCompounds(void **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v356 = *MEMORY[0x263EF8340];
  unint64_t v10 = a1[9];
  int v12 = (const char *)a1[39];
  unsigned __int16 v11 = a1[40];
  uint64_t v13 = (char *)a1[45];
  uint64_t v14 = (char *)a1[46];
  unsigned __int16 v349 = 0;
  unsigned int v345 = 0;
  uint64_t v346 = 0;
  unsigned __int16 v343 = 0;
  *a2 = 0;
  int v344 = 0;
  unint64_t v347 = 0;
  v348 = 0;
  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"Compound Processing : with multi-word window=%d", a6, a7, a8, *((unsigned __int16 *)a1 + 172));
  uint64_t v15 = (const char *)a1[60];
  a1[56] = v15;
  unint64_t v16 = (void *)(*a1)[1];
  int v17 = cstdlib_strlen(v15);
  uint64_t v18 = heap_Calloc(v16, 1, (v17 + 1));
  a1[57] = (void *)v18;
  if (!v18) {
    goto LABEL_334;
  }
  if (*((_WORD *)a1 + 220))
  {
    unint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 4;
    do
    {
      v24 += cstdlib_strlen((const char *)a1[54][v25]) + 1;
      ++v23;
      v25 += 12;
    }
    while (v23 < *((unsigned __int16 *)a1 + 220));
  }
  else
  {
    LOWORD(v24) = 0;
  }
  uint64_t v26 = heap_Calloc((void *)(*a1)[1], 1, (unsigned __int16)v24 + 1);
  a1[58] = (void *)v26;
  if (!v26)
  {
LABEL_334:
    uint64_t v95 = 2313166858;
    log_OutPublic((*a1)[4], (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v295);
    return v95;
  }
  uint64_t v318 = v11;
  v319 = v10;
  uint64_t v306 = a2;
  uint64_t v27 = (uint64_t *)(a1 + 54);
  unsigned int v28 = *((unsigned __int16 *)a1 + 220);
  if (!*((_WORD *)a1 + 220))
  {
LABEL_335:
    uint64_t v95 = printstatCOMPSent((uint64_t)*a1, *((_DWORD *)a1 + 107), (const char **)a1 + 51, (char *)a1[52], (unsigned __int16 *)a1 + 212, (uint64_t)v27, (uint64_t)a1[60], (uint64_t)"after statcomp_processCompounds()", 1);
    if ((v95 & 0x80000000) == 0) {
      goto LABEL_344;
    }
    return v95;
  }
  uint64_t v341 = 0;
  int v300 = 0;
  LODWORD(v29) = 0;
  unsigned int v330 = a1 + 54;
  uint64_t v310 = v14;
  int __dst = v13;
  while (1)
  {
    uint64_t v30 = *v27;
    unsigned int v31 = (unsigned __int16)v29;
    if (*(_DWORD *)(*v27 + 96 * (unsigned __int16)v29 + 8) == 1)
    {
      LODWORD(v32) = v29;
      if ((unsigned __int16)v29 < (unsigned __int16)v28)
      {
        uint64_t v33 = (int *)(v30 + 96 * (unsigned __int16)v29 + 8);
        uint64_t v32 = (unsigned __int16)v29;
        while (1)
        {
          int v34 = *v33;
          v33 += 24;
          if (v34 != 1) {
            break;
          }
          if ((unsigned __int16)v28 == ++v32)
          {
            LODWORD(v32) = v28;
            break;
          }
        }
      }
      unsigned int v35 = (unsigned __int16)v29;
      if ((unsigned __int16)v29 != (unsigned __int16)v32)
      {
        LODWORD(v29) = (__PAIR64__(v32, *(_DWORD *)(v30 + 96 * (unsigned __int16)v32 + 8)) - 1) >> 32;
        unsigned int v35 = (unsigned __int16)(v32 - (*(_DWORD *)(v30 + 96 * (unsigned __int16)v32 + 8) == 0));
      }
      __int16 v36 = *(_WORD *)(v30 + 96 * v35 + 2);
      uint64_t v37 = *(unsigned __int16 *)(v30 + 96 * v31);
      unsigned __int16 v38 = v36 - v37;
      if ((v38 & 0xFF00) != 0) {
        size_t v39 = 256;
      }
      else {
        size_t v39 = v38;
      }
      cstdlib_strncpy((char *)a1[52], (const char *)a1[60] + v37, v39);
      *((unsigned char *)a1[52] + v39) = 0;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip TOK word \"%s\" from word %d to %d", v40, v41, v42, (uint64_t)a1[52]);
      goto LABEL_64;
    }
    if (*(unsigned char *)(v30 + 96 * (unsigned __int16)v29 + 88) == 1)
    {
      unsigned int v43 = (unsigned __int16)v29;
      if ((unsigned __int16)v29 < (unsigned __int16)v28)
      {
        unsigned int v43 = (unsigned __int16)v28;
        uint64_t v44 = (unsigned __int8 *)(v30 + 96 * (unsigned __int16)v29 + 89);
        uint64_t v29 = (unsigned __int16)v29;
        while (1)
        {
          int v45 = *v44;
          v44 += 96;
          if (v45) {
            break;
          }
          if ((unsigned __int16)v28 == ++v29)
          {
            LODWORD(v29) = v28;
            goto LABEL_60;
          }
        }
        unsigned int v43 = (unsigned __int16)v29;
      }
LABEL_60:
      __int16 v60 = *(_WORD *)(v30 + 96 * v43 + 2);
      uint64_t v61 = *(unsigned __int16 *)(v30 + 96 * v31);
      unsigned __int16 v62 = v60 - v61;
      if ((v62 & 0xFF00) != 0) {
        size_t v63 = 256;
      }
      else {
        size_t v63 = v62;
      }
      cstdlib_strncpy((char *)a1[52], (const char *)a1[60] + v61, v63);
      *((unsigned char *)a1[52] + v63) = 0;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip user marked compound word \"%s\" from word %d to %d", v64, v65, v66, (uint64_t)a1[52]);
      goto LABEL_64;
    }
    cstdlib_strcpy((char *)a1[58], "");
    cstdlib_strcpy((char *)a1[57], "");
    int v350 = 0;
    uint64_t v49 = *((unsigned __int16 *)a1 + 220);
    unsigned __int16 v50 = v49 + 1;
    int v51 = a1[54];
    if (v49 <= (unsigned __int16)v29)
    {
      LODWORD(v54) = v29;
    }
    else
    {
      int v52 = 0;
      uint64_t v53 = &v51[12 * (unsigned __int16)v29 + 11];
      uint64_t v54 = (unsigned __int16)v29;
      while (*((_DWORD *)v53 - 16) != 1 && *v53 != 1 && 1 - (int)v341 + (int)v54 < *((unsigned __int16 *)a1 + 172))
      {
        int v55 = *((_DWORD *)v53 - 19);
        int v56 = *((_DWORD *)v53 - 17);
        v53 += 96;
        if (v55 == 1)
        {
          int v52 = 1;
          unsigned __int16 v50 = v54;
        }
        if (v56 == 1) {
          int v52 = 0;
        }
        if (v49 == ++v54)
        {
          LODWORD(v54) = *((unsigned __int16 *)a1 + 220);
          break;
        }
      }
      if ((unsigned __int16)v54 > (unsigned __int16)v29) {
        LODWORD(v54) = v54 - (LOBYTE(v51[12 * (unsigned __int16)v54 + 11]) == 1);
      }
      if ((unsigned __int16)v54 > (unsigned __int16)v29) {
        LODWORD(v54) = v54 - (HIDWORD(v51[12 * (unsigned __int16)v54 + 1]) == 1);
      }
      if (v52 == 1 && !HIDWORD(v51[12 * (unsigned __int16)v54 + 2])) {
        LODWORD(v54) = v29;
      }
    }
    uint64_t v57 = v54 - (v49 == (unsigned __int16)v54);
    if (HIDWORD(v51[12 * (unsigned __int16)v57 + 2]) == 1 && v49 + 1 == v50) {
      goto LABEL_64;
    }
    if ((unsigned __int16)v29 <= (unsigned __int16)v57)
    {
      int v58 = 0;
      unsigned __int16 v59 = v29;
      do
      {
        if (HIDWORD(v51[12 * v59 + 1]) == 1) {
          int v58 = 1;
        }
        ++v59;
      }
      while (v59 <= (unsigned __int16)v57);
      if ((unsigned __int16)v29 <= (unsigned __int16)v57) {
        break;
      }
    }
LABEL_56:
    if (v344 == 1)
    {
      int v344 = 0;
      heap_Free((void *)(*a1)[1], (uint64_t)v347);
      unint64_t v347 = 0;
      if (v348)
      {
        heap_Free((void *)(*a1)[1], (uint64_t)v348);
        v348 = 0;
      }
    }
LABEL_64:
    LODWORD(v29) = v29 + 1;
    unsigned int v28 = *((unsigned __int16 *)a1 + 220);
    uint64_t v341 = (unsigned __int16)v29;
    if ((unsigned __int16)v29 >= v28) {
      goto LABEL_335;
    }
  }
  uint64_t v307 = 0;
  int v67 = 0;
  uint64_t v68 = v57;
  int v309 = v12;
  do
  {
    BOOL v69 = (unsigned __int16)v68 != (unsigned __int16)v29 && v67 == 0;
    if (!v69) {
      break;
    }
    uint64_t v332 = (unsigned __int16)v68;
    cstdlib_strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(a1[54][12 * (unsigned __int16)v29]), WORD1(a1[54][12 * (unsigned __int16)v68]) - (unint64_t)LOWORD(a1[54][12 * (unsigned __int16)v29]));
    *((unsigned char *)a1[52] + WORD1(a1[54][12 * (unsigned __int16)v68]) - LOWORD(a1[54][12 * (unsigned __int16)v29])) = 0;
    if ((unsigned __int16)v29 <= (unsigned __int16)v68)
    {
      unsigned __int16 v74 = 0;
      int v73 = 0;
      int v75 = 0;
      unsigned __int16 v76 = v29;
      do
      {
        uint64_t v77 = *v27 + 96 * v76;
        if (*(_DWORD *)(v77 + 12) == 1)
        {
          int v75 = 1;
          int v73 = 1;
          ++v74;
        }
        BOOL v78 = v75 == 0;
        if (*(_DWORD *)(v77 + 20) == 1)
        {
          int v75 = 0;
          int v73 = v78;
        }
        ++v76;
      }
      while (v76 <= (unsigned __int16)v68);
    }
    else
    {
      int v73 = 0;
      unsigned __int16 v74 = 0;
    }
    if (v73 == 1 || v74 >= 2u)
    {
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"skip bisected \"%s\"", v70, v71, v72, (uint64_t)a1[52]);
      goto LABEL_86;
    }
    unsigned __int16 v343 = 0;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"processing [%d] \"%s\"", v70, v71, v72, v341);
    uint64_t v323 = v68;
    while (1)
    {
LABEL_89:
      if (v58 == 1)
      {
        uint64_t inited = isCompoundWordMember((uint64_t)a1, 1, (unsigned __int16)v29, (unsigned __int16)v68, &v350, &v349, &v343);
        uint64_t v81 = "HYPHEN";
        if ((inited & 0x80000000) != 0) {
          goto LABEL_337;
        }
      }
      else
      {
        uint64_t inited = isCompoundWordMember((uint64_t)a1, 0, (unsigned __int16)v29, (unsigned __int16)v68, &v350, &v349, &v343);
        uint64_t v81 = "OPEN";
        if ((inited & 0x80000000) != 0) {
          goto LABEL_337;
        }
      }
      ++v343;
      if (v350 == 1) {
        break;
      }
      if (!v350)
      {
        uint64_t v307 = v81;
        if (*(_DWORD *)(*v27 + 96 * v332 + 20) == 1)
        {
          for (; (unsigned __int16)v68 >= (unsigned __int16)v29; uint64_t v68 = (v68 - 1))
          {
            if (*(_DWORD *)(*v27 + 96 * (unsigned __int16)v68 + 12)) {
              break;
            }
          }
          int v67 = 0;
          goto LABEL_87;
        }
LABEL_86:
        int v67 = 0;
        uint64_t v68 = (v68 - 1);
        goto LABEL_87;
      }
    }
    uint64_t v307 = v81;
    unsigned int v82 = v349;
    uint64_t v83 = 15 * v349;
    cstdlib_strcpy(__dst, &v12[*((unsigned int *)v318 + HIDWORD(v319[v83]))]);
    cstdlib_strcat(__dst, "_firstword");
    cstdlib_strcpy(v310, &v12[*((unsigned int *)v318 + HIDWORD(v319[v83]))]);
    cstdlib_strcat(v310, "_lastword");
    uint64_t v84 = a1[9];
    unsigned int v329 = (const char *)a1[39];
    v333 = a1[40];
    int v350 = 0;
    cstdlib_strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(a1[54][12 * (unsigned __int16)v29]), WORD1(a1[54][12 * v332]) - (unint64_t)LOWORD(a1[54][12 * (unsigned __int16)v29]));
    *((unsigned char *)a1[52] + WORD1(a1[54][12 * v332]) - LOWORD(a1[54][12 * (unsigned __int16)v29])) = 0;
    unsigned int v308 = v82;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [FILTER] Checking Compound Word Membership Filter for [%d] word \"%s\" compound rule %d", v85, v86, v87, v341);
    int v91 = &v84[v83];
    uint64_t v320 = &v84[v83 + 8];
    if (!*v320)
    {
      uint64_t v95 = 0;
LABEL_271:
      uint64_t v68 = v323;
      int v92 = 0;
      int v350 = 0;
      int v236 = "  [FILTER] FAIL";
      goto LABEL_272;
    }
    int v92 = 0;
    int v93 = 0;
    uint64_t v94 = 0;
    int v297 = 0;
    int v299 = 0;
    LODWORD(v95) = 0;
    uint64_t v298 = v91;
    uint64_t v96 = v91 + 7;
    uint64_t v97 = v329;
    uint64_t v314 = v91 + 7;
    do
    {
      int v326 = v92;
      unsigned int v337 = v95;
      uint64_t v98 = 8 * v94;
      uint64_t v99 = v94;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  check filter \"%s\"", v88, v89, v90, (uint64_t)&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v94))]);
      uint64_t v331 = v99;
      if (!cstdlib_strcmp("ALGO_INLEXICON", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]))
      {
        uint64_t v321 = v98;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_INLEXICON with ARG %s", v100, v101, v102, (uint64_t)&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4))]);
        uint64_t v118 = *((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4));
        int v119 = a1[9];
        int v120 = a1[39];
        int v121 = a1[40];
        uint64_t v353 = 0;
        unsigned __int8 v351 = 0;
        int v350 = 0;
        cstdlib_strncpy((char *)a1[57], (const char *)a1[60] + LOWORD(a1[54][12 * (unsigned __int16)v29]), WORD1(a1[54][12 * v332]) - (unint64_t)LOWORD(a1[54][12 * (unsigned __int16)v29]));
        *((unsigned char *)a1[57] + WORD1(a1[54][12 * v332]) - LOWORD(a1[54][12 * (unsigned __int16)v29])) = 0;
        cstdlib_strncpy(__s1, (const char *)a1[57], 0x7FuLL);
        char v355 = 0;
        uint64_t inited = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
        if ((inited & 0x80000000) != 0)
        {
LABEL_337:
          uint64_t v95 = inited;
          goto LABEL_344;
        }
        __int16 v352 = -1;
        uint64_t v122 = ((uint64_t (*)(void *, void *, char *, char *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], (char *)v120 + *((unsigned int *)v121 + HIDWORD(v119[15 * v308])), __s1, &v353, &v352, &v351);
        uint64_t v95 = v122;
        if ((v122 & 0x80000000) != 0) {
          goto LABEL_344;
        }
        unsigned int v337 = v122;
        if (v352 != 1 || !v353)
        {
          int v92 = 0;
          int v334 = 0;
          int v350 = 0;
          uint64_t v97 = v329;
          uint64_t v96 = v314;
          goto LABEL_156;
        }
        int v123 = cstdlib_strchr(*v353, v351);
        if (v123)
        {
          uint64_t v128 = v123;
          *int v123 = 0;
          int v129 = cstdlib_strcmp(*v353, &v329[v118]);
          int v327 = 0;
          if (!v129)
          {
            int v327 = 1;
            int v350 = 1;
          }
          unsigned int v130 = v128 + 1;
          unint64_t v131 = cstdlib_strchr(v130, v351);
          if (v131)
          {
            uint64_t v132 = v131;
            *unint64_t v131 = 0;
            if (!v129)
            {
              unsigned int v202 = (void *)(*a1)[1];
              int v203 = cstdlib_strlen(v130);
              char v204 = (char *)heap_Calloc(v202, 1, (v203 + 1));
              unint64_t v347 = v204;
              if (!v204) {
                goto LABEL_341;
              }
              cstdlib_strcpy(v204, v130);
              int v344 = 1;
              unsigned __int16 v205 = v132 + 1;
              uint64_t v206 = cstdlib_strchr(v132 + 1, v351);
              if (v206)
              {
                *uint64_t v206 = 0;
                if (cstdlib_strlen(v132 + 1))
                {
                  int v207 = (void *)(*a1)[1];
                  int v208 = cstdlib_strlen(v205);
                  v209 = (char *)heap_Calloc(v207, 1, (v208 + 1));
                  v348 = v209;
                  if (!v209) {
                    goto LABEL_341;
                  }
                  cstdlib_strcpy(v209, v205);
                  int v344 = 1;
                }
              }
              unsigned int v210 = *(_DWORD *)(*v314 + v98);
              LODWORD(v346) = *v298;
              unsigned int v345 = v210;
              int v92 = 1;
              int v334 = 1;
              uint64_t v96 = v314;
              uint64_t v97 = v329;
              goto LABEL_253;
            }
            uint64_t v133 = cstdlib_strchr(v131 + 1, v351);
            if (v133) {
              *uint64_t v133 = 0;
            }
            int v92 = v327;
            goto LABEL_204;
          }
LABEL_339:
          uint64_t v290 = 35003;
        }
        else
        {
LABEL_338:
          uint64_t v290 = 35002;
        }
        uint64_t v95 = 2313166848;
        goto LABEL_342;
      }
      if (!cstdlib_strcmp("ALGO_EXTENDEDLEXMATCH", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]))
      {
        uint64_t v321 = v98;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_EXTENDEDLEXMATCH with ARG %s", v103, v104, v105, (uint64_t)&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4))]);
        int v335 = 0;
        uint64_t v301 = 0;
        uint64_t v313 = 0;
        int v312 = 0;
        unsigned int v134 = v97;
        uint64_t v135 = 0;
        int v324 = 0;
        int v315 = 0;
        int v328 = 0;
        uint64_t v136 = *((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4));
        uint64_t v316 = a1[46];
        unint64_t v317 = a1[45];
        uint64_t v353 = 0;
        __s2 = (char *)&v134[v136];
        unsigned __int8 v351 = 0;
        int v350 = 0;
        char v137 = 1;
        uint64_t v138 = (unsigned __int16)v29;
        while (1)
        {
          char v139 = v137;
          __int16 v352 = -1;
          __int16 v140 = (char *)a1[57];
          uint64_t v141 = (const char *)a1[60];
          uint64_t v142 = a1[54];
          if (v139)
          {
            uint64_t v143 = 3 * v138;
            cstdlib_strncpy(v140, &v141[LOWORD(v142[12 * v138])], WORD1(v142[12 * v138]) - (unint64_t)LOWORD(v142[12 * v138]));
            *((unsigned char *)a1[57] + WORD1(a1[54][4 * v143]) - LOWORD(a1[54][4 * v143])) = 0;
            uint64_t v95 = ((uint64_t (*)(void *, void *, void *, void *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], v317, a1[57], &v353, &v352, &v351);
            if ((v95 & 0x80000000) != 0) {
              goto LABEL_344;
            }
            if (v352 != 1 || (unsigned int v147 = "MATCH ON FIRST WORD", !v353))
            {
              uint64_t v148 = v135;
              goto LABEL_153;
            }
          }
          else
          {
            cstdlib_strncpy(v140, &v141[LOWORD(v142[12 * v332])], WORD1(v142[12 * v332]) - (unint64_t)LOWORD(v142[12 * v332]));
            *((unsigned char *)a1[57] + WORD1(a1[54][12 * v332]) - LOWORD(a1[54][12 * v332])) = 0;
            cstdlib_strncpy(__s1, (const char *)a1[57], 0x7FuLL);
            char v355 = 0;
            uint64_t inited = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
            if ((inited & 0x80000000) != 0) {
              goto LABEL_337;
            }
            uint64_t v95 = ((uint64_t (*)(void *, void *, void *, char *, char ***, __int16 *, unsigned __int8 *))a1[50][12])(a1[48], a1[49], v316, __s1, &v353, &v352, &v351);
            if ((v95 & 0x80000000) != 0) {
              goto LABEL_344;
            }
            if (v352 != 1 || (unsigned int v147 = "MATCH ON LAST WORD", !v353))
            {
              uint64_t v148 = v135;
LABEL_225:
              uint64_t v165 = 0;
              BOOL v218 = v328 == 1;
              if (v328 == 1)
              {
                int v219 = v315;
                if (v315)
                {
                  uint64_t v135 = v148;
                  uint64_t v148 = v313;
                  uint64_t v96 = v314;
                  goto LABEL_235;
                }
                unsigned int v337 = v95;
                int v350 = 1;
                unint64_t v347 = v148;
                int v344 = v324;
                goto LABEL_229;
              }
              uint64_t v135 = v148;
              uint64_t v148 = v313;
              uint64_t v96 = v314;
              int v219 = v315;
LABEL_235:
              unsigned int v337 = v95;
              if (!v328 && v219 == 1)
              {
                int v350 = 1;
                unint64_t v347 = v148;
                int v344 = v312;
                uint64_t v97 = v329;
LABEL_238:
                uint64_t v98 = v321;
LABEL_239:
                unsigned int v220 = *(_DWORD *)(*v96 + v98);
                LODWORD(v346) = *v298;
                unsigned int v345 = v220;
                int v92 = 1;
                int v334 = 1;
                goto LABEL_253;
              }
              if (v219 != 1) {
                BOOL v218 = 0;
              }
              if (v218)
              {
                int v350 = 1;
                if (!cstdlib_strcmp(v135, v148))
                {
                  int v350 = 1;
                  unint64_t v347 = v135;
                  int v344 = v324;
                  heap_Free((void *)(*a1)[1], (uint64_t)v148);
                  goto LABEL_266;
                }
                if (v301 > v165)
                {
                  int v350 = 1;
                  unint64_t v347 = v135;
                  int v344 = v324;
                  heap_Free((void *)(*a1)[1], (uint64_t)v148);
                  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH in FIRST and LAST word PRM; chose FIRST on frequency (%d > %d) set PRM=%s",
                    v221,
                    v222,
                    v223,
                    v301);
                  goto LABEL_266;
                }
                if (v165 > v301)
                {
                  int v350 = 1;
                  unint64_t v347 = v148;
                  int v344 = v312;
                  heap_Free((void *)(*a1)[1], (uint64_t)v135);
                  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH in FIRST and LAST word PRM; chose LAST on frequency (%d > %d) set PRM=%s",
                    v226,
                    v227,
                    v228,
                    v165);
LABEL_266:
                  int v92 = v350;
                  uint64_t v97 = v329;
                  uint64_t v96 = v314;
                  uint64_t v98 = v321;
                  if (v350 != 1) {
                    goto LABEL_252;
                  }
                  goto LABEL_239;
                }
                heap_Free((void *)(*a1)[1], (uint64_t)v135);
                heap_Free((void *)(*a1)[1], (uint64_t)v148);
                __int16 v229 = (void *)(*a1)[1];
                int v230 = cstdlib_strlen("LS");
                unsigned __int16 v231 = (char *)heap_Calloc(v229, 1, (v230 + 1));
                unint64_t v347 = v231;
                if (v231)
                {
                  uint64_t v232 = (uint64_t)v231;
                  cstdlib_strcpy(v231, "LS");
                  int v344 = 1;
                  int v350 = 1;
                  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MISMATCH in FIRST and LAST word PRM; set default=%s",
                    v233,
                    v234,
                    v235,
                    v232);
LABEL_229:
                  uint64_t v97 = v329;
                  uint64_t v96 = v314;
                  goto LABEL_238;
                }
LABEL_341:
                uint64_t v290 = 35000;
                uint64_t v95 = 2313166858;
LABEL_342:
                uint64_t v291 = (*a1)[4];
LABEL_343:
                log_OutPublic(v291, (uint64_t)"FE_POS", v290, 0, v124, v125, v126, v127, v296);
                goto LABEL_344;
              }
              int v92 = 0;
              int v334 = 0;
              int v350 = 0;
              uint64_t v97 = v329;
LABEL_156:
              uint64_t v98 = v321;
              goto LABEL_253;
            }
          }
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)v147, v144, v145, v146, 0);
          uint64_t v149 = cstdlib_strchr(*v353, v351);
          if (!v149) {
            goto LABEL_338;
          }
          *uint64_t v149 = 0;
          unsigned int v150 = v149 + 1;
          int v151 = cstdlib_strcmp(*v353, __s2);
          uint64_t v152 = cstdlib_strchr(v150, v351);
          if (!v152) {
            goto LABEL_339;
          }
          uint64_t v153 = v152;
          *uint64_t v152 = 0;
          if (!v151 || v335 == 1)
          {
            uint64_t v154 = (void *)(*a1)[1];
            int v155 = cstdlib_strlen(v150);
            int v156 = (char *)heap_Calloc(v154, 1, (v155 + 1));
            if (!v156) {
              goto LABEL_341;
            }
            uint64_t v148 = v156;
            int v338 = v95;
            uint64_t v157 = (char *)v313;
            if ((v139 & 1) == 0) {
              uint64_t v157 = v156;
            }
            v305 = v157;
            int v158 = v312;
            if ((v139 & 1) == 0) {
              int v158 = 1;
            }
            int v304 = v158;
            if (v139) {
              uint64_t v159 = v156;
            }
            else {
              uint64_t v159 = v135;
            }
            v303 = v159;
            int v160 = v324;
            if (v139) {
              int v160 = 1;
            }
            int v302 = v160;
            if (v139) {
              int v161 = v315;
            }
            else {
              int v161 = 1;
            }
            if (v139) {
              int v162 = 1;
            }
            else {
              int v162 = v328;
            }
            cstdlib_strcpy(v156, v150);
            uint64_t v163 = cstdlib_strchr(v153 + 1, v351);
            if (v163)
            {
              char *v163 = 0;
              unsigned __int16 v164 = (unsigned __int16)LH_atoi(v153 + 1);
              uint64_t v165 = v164;
              if ((v139 & 1) == 0)
              {
                BOOL v218 = v328 == 1;
                int v219 = 1;
                int v312 = 1;
                uint64_t v96 = v314;
                LODWORD(v95) = v338;
                goto LABEL_235;
              }
              int v335 = 1;
              int v328 = 1;
              int v324 = 1;
              uint64_t v301 = v164;
            }
            else
            {
              int v335 = 1;
              int v328 = v162;
              int v315 = v161;
              int v324 = v302;
              uint64_t v148 = v303;
              int v312 = v304;
              uint64_t v313 = v305;
            }
            LODWORD(v95) = v338;
          }
          else
          {
            uint64_t v148 = v135;
          }
LABEL_153:
          char v137 = 0;
          uint64_t v135 = v148;
          uint64_t v138 = (unsigned __int16)v29;
          if ((v139 & 1) == 0) {
            goto LABEL_225;
          }
        }
      }
      if (!cstdlib_strcmp("ALGO_EXTENDEDFIRSTWORDLEXMATCH", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]))
      {
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call ALGO_EXTENDEDFIRSTWORDLEXMATCH with ARG %s", v106, v107, v108, (uint64_t)&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4))]);
        uint64_t v166 = *((unsigned int *)v333 + *(unsigned int *)(*v96 + 8 * v99 + 4));
        unsigned int v167 = a1[45];
        *(void *)unsigned __int16 __s1 = 0;
        LOBYTE(v352) = 0;
        int v350 = 0;
        LOWORD(v353) = -1;
        cstdlib_strncpy((char *)a1[57], (const char *)a1[60] + LOWORD(a1[54][12 * (unsigned __int16)v29]), WORD1(a1[54][12 * (unsigned __int16)v29]) - (unint64_t)LOWORD(a1[54][12 * (unsigned __int16)v29]));
        *((unsigned char *)a1[57] + WORD1(a1[54][12 * (unsigned __int16)v29]) - LOWORD(a1[54][12 * (unsigned __int16)v29])) = 0;
        uint64_t v168 = ((uint64_t (*)(void *, void *, void *, void *, char *, char ***, __int16 *))a1[50][12])(a1[48], a1[49], v167, a1[57], __s1, &v353, &v352);
        uint64_t v95 = v168;
        if ((v168 & 0x80000000) != 0) {
          goto LABEL_344;
        }
        unsigned int v337 = v168;
        if ((unsigned __int16)v353 == 1 && *(void *)__s1)
        {
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCH ON FIRST WORD", v169, v170, v171, 0);
          unint64_t v172 = cstdlib_strchr(**(char ***)__s1, v352);
          if (v172)
          {
            unint64_t v173 = v172;
            *unint64_t v172 = 0;
            int v174 = cstdlib_strcmp(**(const char ***)__s1, &v329[v166]);
            int v92 = 0;
            if (!v174)
            {
              int v92 = 1;
              int v350 = 1;
            }
            uint64_t v175 = v173 + 1;
            uint64_t v176 = cstdlib_strchr(v175, v352);
            if (v176)
            {
              char *v176 = 0;
              if (!v174)
              {
                unint64_t v177 = (void *)(*a1)[1];
                int v178 = cstdlib_strlen(v175);
                unint64_t v179 = (char *)heap_Calloc(v177, 1, (v178 + 1));
                unint64_t v347 = v179;
                uint64_t v97 = v329;
                if (v179)
                {
                  cstdlib_strcpy(v179, v175);
                  int v92 = 1;
                  LODWORD(v346) = *v298;
                  unsigned int v180 = *(_DWORD *)(*v314 + v98);
                  int v344 = 1;
                  unsigned int v345 = v180;
                  int v334 = 1;
                  uint64_t v96 = v314;
                  goto LABEL_253;
                }
                goto LABEL_341;
              }
              goto LABEL_204;
            }
            uint64_t v290 = 35003;
          }
          else
          {
            uint64_t v290 = 35002;
          }
          uint64_t v95 = 2313166848;
          goto LABEL_342;
        }
        int v92 = 0;
        int v350 = 0;
LABEL_204:
        int v334 = v92;
        goto LABEL_205;
      }
      if (cstdlib_strcmp("FILTER_NO_TOKEN_NO_ABBREVIATION", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]))
      {
        if (cstdlib_strcmp("FILTER_BLOCK_ACROSS_TOKEN_BOUNDARIES", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]))
        {
          int v334 = v93;
          if (cstdlib_strcmp("ELSE_IGNORE", &v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))])) {
            log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    UNIMPLEMENTED filter %s - skip", v115, v116, v117, (uint64_t)&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))]);
          }
          else {
            int v297 = 1;
          }
          int v92 = v326;
          goto LABEL_253;
        }
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call FILTER_BLOCK_ACROSS_TOKEN_BOUNDARIES", v112, v113, v114, 0);
        int v350 = 1;
        unsigned __int16 v214 = v29;
        while (1)
        {
          unsigned int v215 = v214;
          uint64_t v216 = 3 * v214;
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    word %d token=%d", v211, v212, v213, v214);
          __int16 v217 = a1[54];
          if (LODWORD(v217[4 * v216 + 1]) == 1
            && (v215 != (unsigned __int16)v29 && !LODWORD(v217[12 * v215 - 11])
             || v215 != (unsigned __int16)v323 && !LODWORD(v217[12 * v215 + 13])))
          {
            break;
          }
          unsigned __int16 v214 = v215 + 1;
          if ((unsigned __int16)(v215 + 1) > (unsigned __int16)v323)
          {
            unsigned int v337 = 0;
            int v92 = 1;
            int v334 = 1;
            int v299 = 1;
            goto LABEL_205;
          }
        }
        int v92 = 0;
        int v334 = 0;
        unsigned int v337 = 0;
        int v350 = 0;
LABEL_205:
        uint64_t v97 = v329;
        uint64_t v96 = v314;
        goto LABEL_253;
      }
      uint64_t v322 = v98;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    call FILTER_NO_TOKEN_NO_ABBREVIATION", v109, v110, v111, 0);
      int v184 = 0;
      int v336 = 0;
      BOOL v339 = 0;
      uint64_t v95 = 0;
      uint64_t v185 = *((unsigned __int16 *)a1 + 174);
      uint64_t v186 = a1[44];
      int v350 = 1;
      unsigned __int16 v187 = v29;
      unsigned __int16 v188 = v323;
      do
      {
        uint64_t v189 = v187;
        uint64_t v190 = 3 * v187;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    word %d token=%d singleChar=%d hyphen=%d", v181, v182, v183, v187);
        uint64_t v191 = a1[54];
        if (LODWORD(v191[4 * v190 + 1]) == 1)
        {
          int v201 = 0;
          int v350 = 0;
          goto LABEL_221;
        }
        if (LODWORD(v191[12 * v189 + 2]) == 1) {
          int v192 = v336 + 1;
        }
        else {
          int v192 = v336;
        }
        int v336 = v192;
        if (v189 == v188)
        {
          cstdlib_strncpy((char *)a1[52], (const char *)a1[60] + LOWORD(v191[12 * v189]), WORD1(v191[12 * v189]) - (unint64_t)LOWORD(v191[12 * v189]));
          *((unsigned char *)a1[52] + WORD1(a1[54][12 * v189]) - LOWORD(a1[54][12 * v189])) = 0;
          cstdlib_strncpy(__s1, (const char *)a1[52], 0x7FuLL);
          char v355 = 0;
          uint64_t v95 = ((uint64_t (*)(void *, void *, const char *, char *, uint64_t))a1[50][18])(a1[48], a1[49], "normal", __s1, 128);
          if ((v95 & 0x80000000) != 0) {
            goto LABEL_344;
          }
          log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    check canonical form %s for last word (in case abbreviation)", v193, v194, v195, (uint64_t)__s1);
          if (!v185) {
            goto LABEL_190;
          }
          uint64_t v196 = 0;
          char v197 = 1;
          do
          {
            while (1)
            {
              uint64_t v198 = cstdlib_strstr(__s1, (const char *)v186[v196]);
              if (!v198 || v198 - __s1 != 1) {
                break;
              }
              char v197 = 0;
              *uint64_t v198 = 0;
              if (*(_DWORD *)(*v330 + 96 * v189 + 16) == 1) {
                ++v184;
              }
              BOOL v339 = v339;
              BOOL v69 = v185 - 1 == v196++;
              if (v69) {
                goto LABEL_191;
              }
            }
            ++v196;
          }
          while (v185 != v196);
          if (v197) {
LABEL_190:
          }
            BOOL v339 = 0;
LABEL_191:
          uint64_t v191 = (void *)*v330;
          if (*(unsigned __int16 *)(*v330 + 96 * v189) + 1 == *(unsigned __int16 *)(*v330 + 96 * v189 + 2))
          {
            unsigned __int16 v188 = v323;
          }
          else
          {
            unsigned __int16 v188 = v323;
            if (cstdlib_strlen(__s1) != 1) {
              goto LABEL_200;
            }
            uint64_t v191 = (void *)*v330;
          }
        }
        else if (LOWORD(v191[12 * v189]) + 1 != WORD1(v191[12 * v189]))
        {
          goto LABEL_200;
        }
        if (LODWORD(v191[12 * v189 + 2]) == 1) {
          ++v184;
        }
        int v200 = v339;
        if (v189 == (unsigned __int16)v29) {
          int v200 = 1;
        }
        BOOL v339 = v200;
LABEL_200:
        unsigned __int16 v187 = v189 + 1;
      }
      while ((unsigned __int16)(v189 + 1) <= v188);
      if (v339)
      {
        int v350 = 0;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    found abbreviation", v181, v182, v183, 0);
        int v201 = 0;
LABEL_221:
        uint64_t v97 = v329;
        uint64_t v98 = v322;
        goto LABEL_248;
      }
      uint64_t v97 = v329;
      uint64_t v98 = v322;
      if ((unsigned __int16)v184 == (unsigned __int16)v336)
      {
        int v350 = 0;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"    found abbreviation (countHyphenSingleChar=%d,countHyphen=%d)", v181, v182, v183, (unsigned __int16)v336);
        int v201 = 0;
      }
      else
      {
        int v201 = 1;
      }
LABEL_248:
      uint64_t v96 = v314;
      if ((v95 & 0x80000000) != 0) {
        goto LABEL_344;
      }
      unsigned int v337 = v95;
      int v92 = v201;
      BOOL v69 = v201 == 0;
      int v224 = v299;
      if (!v69) {
        int v224 = 1;
      }
      int v299 = v224;
LABEL_252:
      int v334 = v92;
LABEL_253:
      if (cstdlib_strncmp(&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))], "FILTER_", 7uLL)) {
        BOOL v225 = 0;
      }
      else {
        BOOL v225 = v334 == 1;
      }
      if (v225)
      {
        int v93 = 1;
        uint64_t v95 = v337;
        goto LABEL_261;
      }
      if (!(cstdlib_strncmp(&v97[*((unsigned int *)v333 + *(unsigned int *)(*v96 + v98))], "FILTER_", 7uLL) | v92))
      {
        int v236 = "  [FILTER] FAIL";
        uint64_t v68 = v323;
        uint64_t v95 = v337;
LABEL_272:
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)v236, v88, v89, v90, 0);
        if ((v95 & 0x80000000) != 0) {
          goto LABEL_344;
        }
        BOOL v69 = v92 == 1;
        int v12 = v309;
        uint64_t v27 = (uint64_t *)(a1 + 54);
        if (v69)
        {
          int v67 = 1;
          int v300 = v68;
          goto LABEL_87;
        }
        goto LABEL_89;
      }
      int v93 = v92;
      uint64_t v95 = v337;
      if (v92 == 1)
      {
        int v236 = "  [FILTER] SUCCESS";
        uint64_t v68 = v323;
        goto LABEL_272;
      }
LABEL_261:
      uint64_t v94 = v331 + 1;
    }
    while (v331 + 1 < (unint64_t)(unsigned __int16)*v320);
    if (v299 != 1) {
      goto LABEL_271;
    }
    uint64_t v68 = v323;
    if (v297 == 1)
    {
      int v92 = 0;
      int v350 = 0;
      int v236 = "  [FILTER] SUCCESS but ELSE_IGNORE set so FAIL";
      goto LABEL_272;
    }
    int v67 = 1;
    int v350 = 1;
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [FILTER] SUCCESS", v88, v89, v90, 0);
    int v300 = v323;
    if ((v95 & 0x80000000) != 0) {
      goto LABEL_344;
    }
LABEL_87:
    int v12 = v309;
    uint64_t v27 = (uint64_t *)(a1 + 54);
  }
  while ((unsigned __int16)v68 >= (unsigned __int16)v29);
  if (v67 != 1) {
    goto LABEL_56;
  }
  log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"COMPOUND WORD SUCCESSFULLY PROCESSED %d to %d", v46, v47, v48, v341);
  unsigned int v240 = v349;
  uint64_t v241 = (uint64_t)&a1[9][15 * v349];
  int v243 = *(unsigned __int16 *)(v241 + 96);
  uint64_t v242 = (unsigned __int16 *)(v241 + 96);
  if (v243)
  {
    uint64_t v244 = 0;
    unint64_t v245 = 0;
    uint64_t v246 = (const char *)a1[39];
    v247 = a1[40];
    int v248 = v242 - 4;
    while (cstdlib_strcmp("SETDEFAULT", &v246[*((unsigned int *)v247 + *(unsigned int *)(*(void *)v248 + v244))]))
    {
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"UNIMPLEMENTED POS rule %s %s - skip", v249, v250, v251, (uint64_t)&v246[*((unsigned int *)v247 + *(unsigned int *)(*(void *)v248 + v244))]);
      ++v245;
      v244 += 8;
      if (v245 >= *v242) {
        goto LABEL_292;
      }
    }
    int v342 = &v246[*((unsigned int *)v247 + *(unsigned int *)(*(void *)v248 + v244 + 4))];
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET SETDEFAULT POS = %s", v249, v250, v251, (uint64_t)v342);
  }
  else
  {
LABEL_292:
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET HARDCODED DEFAULT POS %s", v237, v238, v239, (uint64_t)&szStatCOMPDEFAULTPOS);
    int v342 = (const char *)&szStatCOMPDEFAULTPOS;
  }
  uint64_t v255 = (uint64_t)&a1[9][15 * v240];
  int v257 = *(unsigned __int16 *)(v255 + 112);
  uint64_t v256 = (unsigned __int16 *)(v255 + 112);
  if (!v257)
  {
LABEL_311:
    __int16 v276 = "LS";
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET HARDCODED DEFAULT PROM %s", v252, v253, v254, (uint64_t)"LS");
LABEL_312:
    uint64_t v277 = 0;
    __n128 v278 = "DEFAULT";
LABEL_313:
    int v12 = v309;
LABEL_314:
    __int16 v270 = a1[54];
    LOBYTE(v270[12 * (unsigned __int16)v29 + 11]) = 1;
    BYTE1(v270[12 * (unsigned __int16)v300 + 11]) = 1;
    unsigned int v271 = (unsigned __int16)v29;
    LODWORD(v29) = v300;
    uint64_t inited = setCOMPValues((uint64_t *)a1, v271, (unsigned __int16)v300, &v344, v342, v276, v277, v278, v307);
    if ((inited & 0x80000000) != 0) {
      goto LABEL_337;
    }
    *uint64_t v306 = 1;
    uint64_t v27 = (uint64_t *)(a1 + 54);
    goto LABEL_56;
  }
  uint64_t v258 = 0;
  unint64_t v259 = 0;
  v340 = a1[20];
  uint64_t v260 = (const char *)a1[39];
  v261 = a1[40];
  unsigned int v262 = v256 - 4;
  int v263 = v344;
  uint64_t v264 = v345;
  while (2)
  {
    if (!cstdlib_strcmp("MATCHED_ALGO_INLEXICON", &v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258))]))
    {
      if (v263 == 1 && !cstdlib_strcmp("ALGO_INLEXICON", &v260[*((unsigned int *)v261 + v264)]))
      {
        __int16 v276 = v347;
        log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_INLEXICON : CACHED(ALGO_INLEXICON) PROM = %s", v252, v253, v254, (uint64_t)v347);
        uint64_t v277 = v348;
        __n128 v278 = (const char *)&szStatCOMPSRCLEX;
        goto LABEL_313;
      }
LABEL_310:
      ++v259;
      v258 += 8;
      if (v259 >= *v256) {
        goto LABEL_311;
      }
      continue;
    }
    break;
  }
  if (!cstdlib_strcmp("MATCHED_ALGO_EXTENDEDLEXMATCH", &v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258))]))
  {
    if (v263 == 1 && !cstdlib_strcmp("ALGO_EXTENDEDLEXMATCH", &v260[*((unsigned int *)v261 + v264)]))
    {
      __int16 v276 = v347;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_EXTENDEDLEXMATCH : CACHED(ALGO_EXTENDEDLEXMATCH) PROM = %s", v252, v253, v254, (uint64_t)v347);
      uint64_t v277 = 0;
      __n128 v278 = "EXTENDEDLEX";
      goto LABEL_313;
    }
    goto LABEL_310;
  }
  if (!cstdlib_strcmp("MATCHED_ALGO_EXTENDEDFIRSTWORDLEXMATCH", &v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258))]))
  {
    if (v263 == 1 && !cstdlib_strcmp("ALGO_EXTENDEDFIRSTWORDLEXMATCH", &v260[*((unsigned int *)v261 + v264)]))
    {
      __int16 v276 = v347;
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"MATCHED_ALGO_EXTENDEDFIRSTWORDLEXMATCH : CACHED(ALGO_EXTENDEDFIRSTWORDLEXMATCH) PROM = %s", v252, v253, v254, (uint64_t)v347);
      uint64_t v277 = 0;
      __n128 v278 = "EXTENDEDFIRSTWORDLEX";
      goto LABEL_313;
    }
    goto LABEL_310;
  }
  int v265 = cstdlib_strcmp("IGTREE", &v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258))]);
  uint64_t v266 = *(void *)v262;
  if (v265)
  {
    if (!cstdlib_strcmp("SETDEFAULT", &v260[*((unsigned int *)v261 + *(unsigned int *)(v266 + v258))]))
    {
      __int16 v276 = &v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258 + 4))];
      log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET SETDEFAULT PROM = %s", v267, v268, v269, (uint64_t)v276);
      goto LABEL_312;
    }
    log_OutText((*a1)[4], (uint64_t)"FE_POS", 5, 0, (uint64_t)"UNIMPLEMENTED PROM rule %s - skip", v267, v268, v269, (uint64_t)&v260[*((unsigned int *)v261 + *(unsigned int *)(*(void *)v262 + v258))]);
    goto LABEL_310;
  }
  uint64_t v272 = *((unsigned __int16 *)a1 + 72);
  if (*((_WORD *)a1 + 72))
  {
    uint64_t v273 = 0;
    int v274 = &v260[*((unsigned int *)v261 + *(unsigned int *)(v266 + v258 + 4))];
    unsigned __int16 v275 = a1[20];
    while (cstdlib_strcmp((const char *)v275[v273], v274))
    {
      if (v272 == ++v273) {
        goto LABEL_320;
      }
    }
  }
  else
  {
LABEL_320:
    LOWORD(v273) = 0;
  }
  v279 = a1[20];
  uint64_t v280 = (unsigned __int16)v273;
  uint64_t v281 = a1[21][(unsigned __int16)v273];
  uint64_t v282 = (char **)heap_Calloc((void *)(*a1)[1], 1, 8 * *(unsigned __int8 *)(v281 + 1296) - 8);
  uint64_t v283 = (uint64_t)*a1;
  if (!v282)
  {
    uint64_t v95 = 2313166858;
    uint64_t v291 = *(void *)(v283 + 32);
    uint64_t v290 = 35000;
    goto LABEL_343;
  }
  uint64_t inited = statcomp_initFeatureVector(v283, v282, (unsigned __int16)(*(unsigned __int8 *)(v281 + 1296) - 1));
  if ((inited & 0x80000000) != 0) {
    goto LABEL_337;
  }
  *(void *)unsigned __int16 __s1 = 0;
  uint64_t v284 = setStatCOMPFeatureVector(v280, (uint64_t *)a1, (unsigned __int16)v29, v300, (uint64_t)v282);
  if ((v284 & 0x80000000) != 0 || (uint64_t v284 = igtree_Process(v281, (uint64_t)v282, __s1), (v284 & 0x80000000) != 0))
  {
    uint64_t v95 = v284;
    __int16 v276 = 0;
  }
  else
  {
    __int16 v276 = *(const char **)__s1;
    uint64_t v95 = statcomp_dumpFeatureVectorAndResult((uint64_t)*a1, *((_DWORD *)a1 + 107), (const char **)a1 + 51, (unsigned __int16 *)a1 + 212, "IGTREE RESULT=", (char *)v279[v280], v281, (uint64_t)v282, *(char **)__s1);
  }
  statcomp_freeFeatureVector(*a1, (uint64_t *)v282, (unsigned __int16)(*(unsigned __int8 *)(v281 + 1296) - 1));
  heap_Free((void *)(*a1)[1], (uint64_t)v282);
  if ((v95 & 0x80000000) == 0)
  {
    __n128 v278 = (const char *)v340[v280];
    int v288 = cstdlib_strcmp(v276, "=");
    uint64_t v289 = (*a1)[4];
    if (v288)
    {
      log_OutText(v289, (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET IGTREE %s PROM = %s", v285, v286, v287, (uint64_t)v278);
    }
    else
    {
      __int16 v276 = "LS";
      log_OutText(v289, (uint64_t)"FE_POS", 5, 0, (uint64_t)"OVERRIDE IGTEE NULL VALUE : SET DEFAULT PROM %s", v285, v286, v287, (uint64_t)"LS");
    }
    uint64_t v277 = 0;
    int v12 = v309;
    goto LABEL_314;
  }
LABEL_344:
  if (v347)
  {
    heap_Free((void *)(*a1)[1], (uint64_t)v347);
    if (v348) {
      heap_Free((void *)(*a1)[1], (uint64_t)v348);
    }
  }
  uint64_t v292 = (uint64_t)a1[57];
  if (v292)
  {
    heap_Free((void *)(*a1)[1], v292);
    a1[57] = 0;
  }
  uint64_t v293 = (uint64_t)a1[58];
  if (v293)
  {
    heap_Free((void *)(*a1)[1], v293);
    a1[58] = 0;
  }
  return v95;
}

uint64_t isCompoundWordMember(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, _WORD *a6, unsigned __int16 *a7)
{
  memcpy(__dst, (const void *)(a1 + 8), 0x178uLL);
  unsigned __int16 v13 = a4 - a3 + 1;
  long long v83 = 0uLL;
  unsigned int v76 = a4;
  uint64_t v77 = a5;
  *a5 = 0;
  int v14 = a2;
  uint64_t v15 = 96 * a3;
  uint64_t v16 = 3 * a4;
  cstdlib_strncpy(*(char **)(a1 + 416), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + v15)), *(unsigned __int16 *)(*(void *)(a1 + 432) + 32 * v16 + 2)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + v15));
  *(unsigned char *)(*(void *)(a1 + 416)
           - *(unsigned __int16 *)(*(void *)(a1 + 432) + v15)
           + *(unsigned __int16 *)(*(void *)(a1 + 432) + 32 * v16 + 2)) = 0;
  uint64_t v82 = a3;
  log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] Check word[%d] \"%s\" %d words", v17, v18, v19, a3);
  uint64_t matched = 0;
  int v24 = &__dst[12];
  uint64_t v25 = &__dst[13];
  if (a2)
  {
    int v24 = &__dst[10];
    uint64_t v25 = &__dst[11];
  }
  unsigned __int16 v74 = a7;
  uint64_t v26 = *a7;
  uint64_t v79 = *(unsigned __int16 *)v25;
  if (v26 >= v79) {
    goto LABEL_51;
  }
  uint64_t matched = 0;
  uint64_t v27 = (uint64_t *)(a1 + 432);
  unint64_t v28 = v13;
  uint64_t v78 = *v24;
  uint64_t v80 = (unsigned __int16 *)(a1 + 424);
  uint64_t v81 = (const char **)(a1 + 408);
  unsigned int v71 = a3 + 1;
  uint64_t v72 = 96 * a3;
  while (1)
  {
    uint64_t v29 = *(unsigned __int16 *)(v78 + 2 * v26);
    if (v28 != *(unsigned __int16 *)(__dst[8] + 120 * v29 + 32)) {
      goto LABEL_50;
    }
    uint64_t v75 = v26;
    log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    TRYING RULE label=%s (%d words) compound word rule idx=%d", v20, v21, v22, __dst[38] + *(unsigned int *)(__dst[39] + 4 * *(unsigned int *)(__dst[8] + 120 * v29)));
    if (!v28) {
      break;
    }
    unint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = *v27;
    uint64_t v33 = v72;
    do
    {
      if (*(_DWORD *)(v32 + v33 + 12) == 1) {
        int v34 = 1;
      }
      else {
        int v34 = v31;
      }
      if (v14)
      {
        int v35 = *(_DWORD *)(*(void *)(__dst[8] + 120 * v29 + 8) + 4 * v30);
        BOOL v36 = v35 == 1 && v34 == 0;
        uint64_t v37 = "      Membership fails on wordType. Word %d is not hyphenated";
        if (v36
          || (!v35 ? (BOOL v38 = v34 == 1) : (BOOL v38 = 0),
              uint64_t v37 = "      Membership fails on wordType. Word %d should not be hyphenated)",
              v38))
        {
LABEL_21:
          log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v37, v20, v21, v22, v82 + v30);
          int v39 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v37 = "      Membership fails on wordType. Word %d is hyphenated";
        if (v34 == 1) {
          goto LABEL_21;
        }
      }
      int v39 = 1;
LABEL_24:
      uint64_t v32 = *v27;
      if (*(_DWORD *)(*v27 + v33 + 20) == 1) {
        int v31 = 0;
      }
      else {
        int v31 = v34;
      }
      if (!v39) {
        break;
      }
      ++v30;
      v33 += 96;
    }
    while (v30 < v28);
    if (v39) {
      break;
    }
    uint64_t v26 = v75;
LABEL_50:
    if (++v26 == v79)
    {
LABEL_51:
      log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] FAIL", v20, v21, v22, 0);
      *uint64_t v77 = 0;
      return matched;
    }
  }
  if (*(_WORD *)(__dst[8] + 120 * v29 + 32))
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = v72 + 32;
    while (1)
    {
      cstdlib_strncpy(*(char **)(a1 + 456), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32)), *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 30)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32));
      *(unsigned char *)(*(void *)(a1 + 456)
               - *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 32)
               + *(unsigned __int16 *)(*(void *)(a1 + 432) + v42 - 30)) = 0;
      cstdlib_strcpy(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + v42));
      unsigned int v43 = " ";
      if (*(_DWORD *)(*(void *)(a1 + 432) + v42 - 24) == 1) {
        unsigned int v43 = (const char *)&szStatCOMPHASTOK;
      }
      *(void *)(a1 + 472) = v43;
      WORD2(v83) = v82 + v41;
      LODWORD(v83) = 2;
      *(_DWORD *)((char *)&v83 + 6) = 0;
      HIDWORD(v83) = 0;
      uint64_t matched = statcomp_matchRule(*(_DWORD *)(a1 + 428), v81, v80, *(char **)(a1 + 416), (uint64_t)__dst, a1 + 432, (unsigned int *)&v83, *(void *)(__dst[8] + 120 * v29 + 24) + v40, (int *)&v83 + 3);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      uint64_t v47 = *(void *)(__dst[0] + 32);
      if (HIDWORD(v83) != 1)
      {
        log_OutText(v47, (uint64_t)"FE_POS", 5, 0, (uint64_t)"      Membership rule %d FAILS", v44, v45, v46, v41);
        log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    Membership FAIL on WORDN criteria - try extra rules...", v48, v49, v50, 0);
        if (!*(_WORD *)(__dst[8] + 120 * v29 + 48))
        {
          log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"      no extra membership rules - FAIL", v51, v52, v53, 0);
          log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] FAIL", v64, v65, v66, 0);
          uint64_t v26 = v75;
          int v14 = a2;
          goto LABEL_50;
        }
        cstdlib_strncpy(*(char **)(a1 + 456), (const char *)(*(void *)(a1 + 480) + *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v82)), *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v76 + 2)- (unint64_t)*(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v82));
        *(unsigned char *)(*(void *)(a1 + 456)
                 - *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v82)
                 + *(unsigned __int16 *)(*(void *)(a1 + 432) + 96 * v76 + 2)) = 0;
        cstdlib_strcpy(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + 96 * v82 + 32));
        int v14 = a2;
        if (v76 >= (unsigned __int16)v71)
        {
          unsigned int v57 = v71;
          do
          {
            cstdlib_strcat(*(char **)(a1 + 464), " ");
            cstdlib_strcat(*(char **)(a1 + 464), *(const char **)(*(void *)(a1 + 432) + 96 * (unsigned __int16)v57++ + 32));
          }
          while (v76 >= (unsigned __int16)v57);
        }
        log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"      apply %d extra membership rules on ORT \"%s\" and POS \"%s\"", v54, v55, v56, *(unsigned __int16 *)(__dst[8] + 120 * v29 + 48));
        uint64_t v58 = __dst[8];
        uint64_t v26 = v75;
        if (*(_WORD *)(__dst[8] + 120 * v29 + 48))
        {
          uint64_t v59 = 0;
          unint64_t v60 = 0;
          while (1)
          {
            WORD2(v83) = v82;
            LODWORD(v83) = 2;
            *(_DWORD *)((char *)&v83 + 6) = 0;
            HIDWORD(v83) = 0;
            uint64_t matched = statcomp_matchRule(*(_DWORD *)(a1 + 428), v81, v80, *(char **)(a1 + 416), (uint64_t)__dst, a1 + 432, (unsigned int *)&v83, *(void *)(v58 + 120 * v29 + 40) + v59, (int *)&v83 + 3);
            if ((matched & 0x80000000) != 0) {
              return matched;
            }
            if (HIDWORD(v83) == 1)
            {
              log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"        membership extra rule %d SUCCEEDS. Membership SUCCEEDS", v61, v62, v63, v60);
              *uint64_t v77 = 1;
              *a6 = v29;
              *unsigned __int16 v74 = v75;
              goto LABEL_53;
            }
            log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"        membership extra rule %d FAIL", v61, v62, v63, v60++);
            uint64_t v58 = __dst[8];
            v59 += 24;
            if (v60 >= *(unsigned __int16 *)(__dst[8] + 120 * v29 + 48)) {
              goto LABEL_50;
            }
          }
        }
        goto LABEL_50;
      }
      log_OutText(v47, (uint64_t)"FE_POS", 5, 0, (uint64_t)"      Membership rule %d SUCCEEDS", v44, v45, v46, v41++);
      v40 += 24;
      v42 += 96;
      if (v41 >= *(unsigned __int16 *)(__dst[8] + 120 * v29 + 32)) {
        goto LABEL_52;
      }
    }
  }
  else
  {
LABEL_52:
    log_OutText(*(void *)(__dst[0] + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"    Membership SUCCESS on WORDN criteria", v20, v21, v22, 0);
    *uint64_t v77 = 1;
    *a6 = v29;
    *unsigned __int16 v74 = v75;
LABEL_53:
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"  [MEMBERSHIP] SUCCESS", v67, v68, v69, 0);
  }
  return matched;
}

uint64_t setCOMPValues(uint64_t *a1, unsigned int a2, unsigned int a3, _DWORD *a4, const char *a5, const char *a6, char *a7, const char *a8, const char *a9)
{
  if (a2 > a3) {
    return 0;
  }
  if (a8) {
    BOOL v13 = *((unsigned __int16 *)a1 + 9) == 1;
  }
  else {
    BOOL v13 = 0;
  }
  int v15 = v13 && a9 != 0;
  uint64_t v38 = a1[40];
  uint64_t v39 = a1[39];
  unsigned __int16 v16 = a2;
  while (1)
  {
    if (v15)
    {
      __int16 v17 = cstdlib_strlen(a8);
      unsigned __int16 v18 = v17 + cstdlib_strlen(a9) + 4;
      if (*a4 == 1) {
        v18 += cstdlib_strlen((const char *)(v39 + *(unsigned int *)(v38 + 4 * a4[2]))) + 2;
      }
    }
    else
    {
      unsigned __int16 v18 = 0;
    }
    uint64_t v19 = *(void **)(*a1 + 8);
    int v20 = cstdlib_strlen(a6);
    uint64_t v21 = heap_Calloc(v19, 1, v20 + v18 + 3);
    *(void *)(a1[54] + 96 * v16 + 80) = v21;
    uint64_t v26 = *a1;
    if (!v21) {
      break;
    }
    uint64_t v27 = *(void **)(v26 + 8);
    int v28 = cstdlib_strlen(a5);
    uint64_t v29 = heap_Calloc(v27, 1, (v28 + 3));
    *(void *)(a1[54] + 96 * v16 + 72) = v29;
    if (!v29) {
      goto LABEL_32;
    }
    if (a7)
    {
      unint64_t v30 = cstdlib_strchr(a7, 32);
      int v31 = v30;
      if (v30) {
        *unint64_t v30 = 0;
      }
      uint64_t v32 = *(void **)(*a1 + 8);
      int v33 = cstdlib_strlen(a7);
      int v34 = (char *)heap_Calloc(v32, 1, (v33 + 1));
      *(void *)(a1[54] + 96 * v16 + 64) = v34;
      if (!v34)
      {
LABEL_32:
        uint64_t v26 = *a1;
        break;
      }
      cstdlib_strcpy(v34, a7);
      if (v31) {
        a7 = v31 + 1;
      }
    }
    if (a2 == v16) {
      int v35 = "B-";
    }
    else {
      int v35 = "I-";
    }
    cstdlib_strcpy(*(char **)(a1[54] + 96 * v16 + 80), v35);
    cstdlib_strcpy(*(char **)(a1[54] + 96 * v16 + 72), v35);
    cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), a6);
    if (v15)
    {
      cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), "+");
      cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), a9);
      cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), "+");
      cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), a8);
      if (*a4 == 1)
      {
        cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), "+");
        cstdlib_strcat(*(char **)(a1[54] + 96 * v16 + 80), (const char *)(v39 + *(unsigned int *)(v38 + 4 * a4[2])));
      }
    }
    cstdlib_strcat(*(char **)(a1[54] + 96 * v16++ + 72), a5);
    if (a3 < v16) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(v26 + 32), (uint64_t)"FE_POS", 35000, 0, v22, v23, v24, v25, v37);
  return 2313166858;
}

uint64_t statcomp_saveCompoundsToLingdb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v69 = 0;
  __int16 v68 = 0;
  uint64_t v67 = 0;
  __int16 v66 = 0;
  __s = 0;
  __int16 v64 = 0;
  int v8 = *(_DWORD *)(a4 + 20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v69 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v69), &v69);
    if ((result & 0x80000000) == 0)
    {
      unsigned __int16 v10 = v69;
      if ((_WORD)v69)
      {
        uint64_t v63 = (unsigned __int16 *)(a4 + 424);
        while (1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, char *, __int16 *))(a1 + 168))(a2, a3, v10, 0, 1, (char *)&v67 + 4, &v68);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (HIDWORD(v67) <= 0xA && ((1 << SBYTE4(v67)) & 0x610) != 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t *, __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v69, 1, 1, &v67, &v68);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, __int16 *))(a1 + 168))(a2, a3, (unsigned __int16)v69, 2, 1, (char *)&v67 + 2, &v68);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            if (*(_WORD *)(a4 + 440)) {
              break;
            }
          }
LABEL_17:
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v69, &v69);
          if ((result & 0x80000000) == 0)
          {
            unsigned __int16 v10 = v69;
            if ((_WORD)v69) {
              continue;
            }
          }
          return result;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v17 = WORD1(v67);
        uint64_t v18 = *(void *)(a4 + 432);
        int v19 = 1;
        while (*(unsigned __int16 *)(v18 + v15) != (unsigned __int16)v67 || !*(void *)(v18 + v15 + 80))
        {
          ++v16;
          ++v19;
          v15 += 96;
          if (96 * *(unsigned __int16 *)(a4 + 440) == v15) {
            goto LABEL_17;
          }
        }
        uint64_t v20 = 0;
        int v21 = 0;
        do
        {
          if (*(void *)(v18 + v20 + 40)) {
            int v22 = 1;
          }
          else {
            int v22 = v21;
          }
          if (*(void *)(v18 + v20 + 48)) {
            int v21 = 0;
          }
          else {
            int v21 = v22;
          }
          v20 += 96;
        }
        while (v15 + 96 != v20);
        if ((unsigned __int16)v67 > v17) {
          return 2313174705;
        }
        if (v17 == (unsigned __int16)v67)
        {
          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v12, v13, v14, (unsigned __int16)v67);
          goto LABEL_17;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v69, 14, &v66);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (v66 == 1)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v69, 14, &__s, &v68);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v29 = *(void *)(a4 + 432) + v15;
          if (*(void *)(v29 + 40) || *(void *)(v29 + 48) || v21 == 1) {
            goto LABEL_65;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, __s);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, ";");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          if (v8 == 1)
          {
            uint64_t v33 = *(void *)(a4 + 432);
            int v34 = **(unsigned __int8 **)(v33 + v15 + 80);
            if (v34 == 73)
            {
              unsigned int v59 = *(unsigned __int16 *)(a4 + 440);
              if (96 * v59 - 96 != v15
                && ((int)v16 + 1 >= v59 || (unint64_t v60 = *(unsigned char **)(v33 + v15 + 176)) != 0 && *v60 == 73))
              {
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "I_COMP:");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 80) + 2));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v35 = *(void *)a4;
                BOOL v36 = (const char **)(a4 + 408);
                unsigned int v37 = (unsigned __int16 *)(a4 + 424);
                uint64_t v38 = ";I_COMPPOS:";
              }
              else
              {
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "E_COMP:");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 80) + 2));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t v35 = *(void *)a4;
                BOOL v36 = (const char **)(a4 + 408);
                unsigned int v37 = (unsigned __int16 *)(a4 + 424);
                uint64_t v38 = ";E_COMPPOS:";
              }
            }
            else
            {
              if (v34 != 66)
              {
LABEL_89:
                log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing Word[%d] (appended) NLU=%s", v30, v31, v32, v16);
                goto LABEL_63;
              }
              uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "S_COMP:");
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 80) + 2));
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v35 = *(void *)a4;
              BOOL v36 = (const char **)(a4 + 408);
              unsigned int v37 = (unsigned __int16 *)(a4 + 424);
              uint64_t v38 = ";S_COMPPOS:";
            }
            uint64_t result = statcomp_add2Str(v35, v36, v37, v38);
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v54 = *(void *)a4;
            uint64_t v55 = (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 72) + 2);
            uint64_t v56 = (const char **)(a4 + 408);
            unsigned int v57 = (unsigned __int16 *)(a4 + 424);
          }
          else
          {
            uint64_t v62 = (const char **)(a4 + 408);
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "COMP:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, v62, v63, *(char **)(*(void *)(a4 + 432) + v15 + 80));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, v62, v63, ";COMPPOS:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v54 = *(void *)a4;
            uint64_t v55 = *(char **)(*(void *)(a4 + 432) + v15 + 72);
            uint64_t v56 = (const char **)(a4 + 408);
            unsigned int v57 = (unsigned __int16 *)(a4 + 424);
          }
          uint64_t result = statcomp_add2Str(v54, v56, v57, v55);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_89;
        }
        if (v8 != 1)
        {
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "COMP:");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, *(char **)(*(void *)(a4 + 432) + v15 + 80));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, ";COMPPOS:");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, *(char **)(*(void *)(a4 + 432) + v15 + 72));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          goto LABEL_62;
        }
        uint64_t v39 = *(void *)(a4 + 432);
        int v40 = **(unsigned __int8 **)(v39 + v15 + 80);
        if (v40 == 73)
        {
          unsigned int v46 = *(unsigned __int16 *)(a4 + 440);
          if (96 * v46 - 96 == v15
            || (int)v16 + 1 < v46 && ((uint64_t v58 = *(unsigned char **)(v39 + v15 + 176)) == 0 || *v58 != 73))
          {
            uint64_t v61 = (const char **)(a4 + 408);
            unint64_t v41 = (unsigned __int16 *)(a4 + 424);
            uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "E_COMP:");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statcomp_add2Str(*(void *)a4, v61, v63, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 80) + 2));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v42 = *(void *)a4;
            unsigned int v43 = (const char **)(a4 + 408);
            uint64_t v44 = (unsigned __int16 *)(a4 + 424);
            uint64_t v45 = ";E_COMPPOS:";
            goto LABEL_60;
          }
        }
        else if (v40 == 66)
        {
          uint64_t v61 = (const char **)(a4 + 408);
          unint64_t v41 = (unsigned __int16 *)(a4 + 424);
          uint64_t result = statcomp_add2Str(*(void *)a4, (const char **)(a4 + 408), v63, "S_COMP:");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, v61, v63, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 80) + 2));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v42 = *(void *)a4;
          unsigned int v43 = (const char **)(a4 + 408);
          uint64_t v44 = (unsigned __int16 *)(a4 + 424);
          uint64_t v45 = ";S_COMPPOS:";
LABEL_60:
          uint64_t result = statcomp_add2Str(v42, v43, v44, v45);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statcomp_add2Str(*(void *)a4, v61, v41, (char *)(*(void *)(*(void *)(a4 + 432) + v15 + 72) + 2));
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
LABEL_62:
        log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Writing Word[%d] NLU=%s", v23, v24, v25, v16);
LABEL_63:
        uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
        uint64_t v48 = (unsigned __int16)v69;
        __int16 v49 = cstdlib_strlen(*(const char **)(a4 + 408));
        uint64_t result = v47(a2, a3, v48, 14, (unsigned __int16)(v49 + 1), *(void *)(a4 + 408), &v64);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        cstdlib_strcpy(*(char **)(a4 + 408), "");
LABEL_65:
        if (*(void *)(*(void *)(a4 + 432) + 96 * v16 + 64))
        {
          uint64_t v50 = 3 * v16;
          log_OutText(*(void *)(*(void *)a4 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"updating Word[%d] compound word pronunciation from %s to %s", v26, v27, v28, v16);
          uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, __int16 *))(a1 + 160);
          uint64_t v52 = (unsigned __int16)v69;
          __int16 v53 = cstdlib_strlen(*(const char **)(*(void *)(a4 + 432) + 32 * v50 + 64));
          uint64_t result = v51(a2, a3, v52, 3, (unsigned __int16)(v53 + 1), *(void *)(*(void *)(a4 + 432) + 32 * v50 + 64), &v68);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t statpos_get_info_from_dct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, char **a7, _DWORD *a8, const char *a9)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a4 + 96))(a2, a3, a5, a6, &__c[3], &__c[1], __c);
  if ((v14 & 0x80001FFF) == 0x8000000A) {
    goto LABEL_2;
  }
  uint64_t v19 = v14;
  if ((v14 & 0x80000000) != 0) {
    return 0;
  }
  if (*(_WORD *)&__c[1])
  {
    uint64_t v20 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v20) {
      *uint64_t v20 = 0;
    }
    if (cstdlib_strcmp(a9, "STR"))
    {
      if (!cstdlib_strcmp(a9, "BOOL"))
      {
        *a8 = 0;
        if (!cstdlib_strcmp(**(const char ***)&__c[3], "1")) {
          *a8 = 1;
        }
      }
    }
    else
    {
      int v22 = *(void **)(a1 + 8);
      int v23 = cstdlib_strlen(**(const char ***)&__c[3]);
      uint64_t v24 = (char *)heap_Calloc(v22, 1, (v23 + 1));
      *a7 = v24;
      if (!v24)
      {
LABEL_2:
        uint64_t v19 = 2313166858;
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 34000, 0, v15, v16, v17, v18, v28);
        return v19;
      }
      cstdlib_strcpy(v24, **(const char ***)&__c[3]);
      if (!cstdlib_strcmp("fecfg", a5)) {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set mde seg param %s = %s", v25, v26, v27, a6);
      }
    }
  }
  return v19;
}

uint64_t _crfpos_concat_strings(uint64_t a1, uint64_t a2, char **a3)
{
  if (*(_DWORD *)(a2 + 8))
  {
    int v6 = 0;
    LODWORD(v7) = 0;
    do
      uint64_t v7 = v7
         + cstdlib_strlen(*(const char **)(*(void *)a2 + 16 * v6++))
         + 2;
    while (*(_DWORD *)(a2 + 8) > v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, v7);
  *a3 = (char *)v8;
  if (v8)
  {
    if (*(_DWORD *)(a2 + 8))
    {
      unsigned int v13 = 0;
      unsigned __int8 v14 = 0;
      do
      {
        cstdlib_strcat(*a3, *(const char **)(*(void *)a2 + 16 * v14));
        unsigned int v15 = *(_DWORD *)(a2 + 8);
        if (v15 - 1 > v13)
        {
          cstdlib_strcat(*a3, " ");
          unsigned int v15 = *(_DWORD *)(a2 + 8);
        }
        unsigned int v13 = ++v14;
      }
      while (v15 > v14);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v9, v10, v11, v12, v17);
    return 2313166858;
  }
}

uint64_t _crfpos_get_potential_tags(uint64_t a1, unsigned __int16 *a2, void *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  unint64_t v8 = a2[4];
  if (!a2[4]) {
    goto LABEL_38;
  }
  if (*(_WORD *)(*(void *)a2 + 72))
  {
    BOOL v12 = 0;
    if (!a6) {
      goto LABEL_38;
    }
  }
  else
  {
    unsigned int v13 = (unsigned __int16 *)(*(void *)a2 + 232);
    uint64_t v14 = 1;
    do
    {
      unint64_t v15 = v14;
      if (v8 == v14) {
        break;
      }
      int v16 = *v13;
      v13 += 80;
      ++v14;
    }
    while (!v16);
    BOOL v12 = v15 >= v8;
    if (!a6) {
      goto LABEL_38;
    }
  }
  if (v12)
  {
LABEL_38:
    uint64_t v38 = 0;
    *a4 = 0;
    *a5 = 0;
    return v38;
  }
  uint64_t v17 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v8);
  if (v17 && (uint64_t v22 = v17, (v23 = heap_Calloc(*(void **)(a1 + 8), 1, 4 * a2[4])) != 0))
  {
    uint64_t v24 = v23;
    unint64_t v41 = a5;
    if (a2[4])
    {
      unint64_t v25 = 0;
      do
      {
        if (!*(unsigned char *)(*(void *)a2 + 160 * v25 + 128)) {
          goto LABEL_29;
        }
        uint64_t v26 = *(const char **)(*(void *)a2 + 160 * v25 + 136);
        if (!v26 || !cstdlib_strcmp(v26, "")) {
          goto LABEL_29;
        }
        uint64_t v27 = (char *)a3[42];
        if (v27)
        {
          unsigned int v28 = "ns";
          if (cstdlib_strstr(v27, *(const char **)(*(void *)a2 + 160 * v25 + 136))) {
            goto LABEL_27;
          }
        }
        uint64_t v29 = (char *)a3[43];
        if (v29)
        {
          unsigned int v28 = "nt";
          if (cstdlib_strstr(v29, *(const char **)(*(void *)a2 + 160 * v25 + 136))) {
            goto LABEL_27;
          }
        }
        if ((uint64_t v30 = (char *)a3[44]) != 0
          && (unsigned int v28 = "nz", cstdlib_strstr(v30, *(const char **)(*(void *)a2 + 160 * v25 + 136)))
          || (uint64_t v31 = (char *)a3[45]) != 0
          && (unsigned int v28 = "nx", cstdlib_strstr(v31, *(const char **)(*(void *)a2 + 160 * v25 + 136)))
          || (uint64_t v32 = (char *)a3[46]) != 0
          && (unsigned int v28 = "nr", cstdlib_strstr(v32, *(const char **)(*(void *)a2 + 160 * v25 + 136))))
        {
LABEL_27:
          *(_DWORD *)(v24 + 4 * v25) = 1;
          uint64_t v33 = (void *)heap_Calloc(*(void **)(a1 + 8), 1, 8);
          *(void *)(v22 + 8 * v25) = v33;
          if (!v33) {
            goto LABEL_39;
          }
          *uint64_t v33 = v28;
        }
        else
        {
LABEL_29:
          uint64_t v34 = *(unsigned __int16 *)(*(void *)a2 + 160 * v25 + 72);
          *(_DWORD *)(v24 + 4 * v25) = v34;
          if (v34)
          {
            uint64_t v35 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v34);
            *(void *)(v22 + 8 * v25) = v35;
            if (!v35) {
              goto LABEL_39;
            }
            unsigned int v36 = *(_DWORD *)(v24 + 4 * v25);
            if (v36)
            {
              int v37 = 0;
              do
              {
                *(void *)(*(void *)(v22 + 8 * v25) + 8 * (unsigned __int16)v37) = a3[37]
                                                                                      + *(unsigned int *)(a3[38] + 4 * *(unsigned int *)(*(void *)(*(void *)a2 + 160 * v25 + 64) + 24 * (unsigned __int16)v37));
                ++v37;
              }
              while (v36 > (unsigned __int16)v37);
            }
          }
          else
          {
            *(void *)(v22 + 8 * v25) = 0;
          }
        }
        ++v25;
      }
      while (v25 < a2[4]);
    }
    uint64_t v38 = 0;
    *a4 = v22;
    *unint64_t v41 = v24;
  }
  else
  {
LABEL_39:
    uint64_t v38 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v40);
  }
  return v38;
}

uint64_t statpos_get_broker_string(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v11 = "";
  __s2 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)unsigned __int16 __s1 = 0u;
  long long v14 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v11);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "crfpos_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v11);
      unint64_t v5 = (unsigned char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *a2 = v5;
      if (v5)
      {
        return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, v5, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v6, v7, v8, v9, v10);
        return 2313166858;
      }
    }
  }
  return result;
}

uint64_t _crfpos_parse_params(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!*(_DWORD *)(v2 + 40)) {
    return 0;
  }
  unint64_t v5 = 0;
  while (cstdlib_strcmp(*(const char **)(*(void *)(v2 + 32) + 16 * v5), "features"))
  {
LABEL_22:
    ++v5;
    uint64_t v2 = *(void *)(a2 + 8);
    if (v5 >= *(unsigned int *)(v2 + 40)) {
      return 0;
    }
  }
  uint64_t v6 = *(const char **)(*(void *)(*(void *)(a2 + 8) + 32) + 16 * v5 + 8);
  unsigned int v7 = cstdlib_strlen(v6);
  unsigned int v8 = v7;
  *(unsigned char *)(a2 + 32) = 0;
  unsigned __int8 v9 = 0;
  if (v7)
  {
    BOOL v10 = 0;
    uint64_t v11 = v7;
    BOOL v12 = v6;
    do
    {
      if (v10)
      {
        BOOL v10 = *(unsigned __int8 *)v12 != 32;
      }
      else if (*v12 == 32)
      {
        BOOL v10 = 0;
      }
      else
      {
        *(unsigned char *)(a2 + 32) = ++v9;
        BOOL v10 = 1;
      }
      ++v12;
      --v11;
    }
    while (v11);
  }
  uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * v9 + 8);
  *(void *)(a2 + 24) = v13;
  if (v13)
  {
    int v18 = 0;
    unsigned int v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    do
    {
      uint64_t v22 = v21;
      int v23 = v6[v21];
      if (v23 == 32)
      {
        LOBYTE(v23) = 0;
        unsigned int v24 = 0;
        int v18 = 0;
        uint64_t v25 = *(void *)(*(void *)(a2 + 24) + 8 * v20++);
      }
      else
      {
        if (v18)
        {
          uint64_t v25 = *(void *)(*(void *)(a2 + 24) + 8 * v20);
        }
        else
        {
          *(void *)(*(void *)(a2 + 24) + 8 * v20) = heap_Alloc(*(void *)(a1 + 8), 64);
          uint64_t v25 = *(void *)(*(void *)(a2 + 24) + 8 * v20);
          if (!v25) {
            goto LABEL_24;
          }
          LOBYTE(v23) = v6[v22];
        }
        unsigned int v24 = v19 + 1;
        int v18 = 1;
      }
      *(unsigned char *)(v25 + v19) = v23;
      unsigned int v21 = v22 + 1;
      unsigned int v19 = v24;
    }
    while ((int)v22 + 1 <= v8);
    goto LABEL_22;
  }
LABEL_24:
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, v27);
  return 2313166858;
}

uint64_t statpos_crf_load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, int a13)
{
  uint64_t broker_string = statpos_get_broker_string(a5, (void *)a10);
  if ((broker_string & 0x80000000) != 0) {
    goto LABEL_12;
  }
  uint64_t broker_string = crf_Init_ReadOnly_ReferenceCnt(a1, a2, a3, a4, (void *)(a10 + 8), 2, *(void *)a10, "CRPH", 1031, 0, 0);
  if ((broker_string & 0x80000000) != 0) {
    goto LABEL_12;
  }
  uint64_t info_from_dct = _crfpos_parse_params(a5, a10);
  if ((info_from_dct & 0x80000000) == 0)
  {
    *(_DWORD *)(a10 + 16) = 1;
    if (a13 == 1)
    {
      uint64_t v23 = heap_Calloc(*(void **)(a5 + 8), 1, 512);
      *(void *)(a11 + 296) = v23;
      if (!v23
        || (*(_DWORD *)(a11 + 316) = 512,
            uint64_t v28 = heap_Calloc(*(void **)(a5 + 8), 1, 128),
            (*(void *)(a11 + 304) = v28) == 0))
      {
LABEL_20:
        uint64_t info_from_dct = 2313166858;
        log_OutPublic(*(void *)(a5 + 32), (uint64_t)"FE_POS", 35000, 0, v24, v25, v26, v27, v33);
        goto LABEL_13;
      }
      *(_DWORD *)(a11 + 320) = 32;
      *(_WORD *)(a11 + 312) = 0;
      *(_WORD *)(a11 + 324) = 0;
      uint64_t broker_string = statpos_get_info_from_dct(a5, a7, a8, a9, "fecfg", (uint64_t)"mdesegpos_nonfinalpunc", (char **)(a11 + 168), 0, "STR");
      if ((broker_string & 0x80000000) == 0)
      {
        uint64_t info_from_dct = statpos_get_info_from_dct(a5, a7, a8, a9, "fecfg", (uint64_t)"mdesegpos_finalpunc", (char **)(a11 + 176), 0, "STR");
        if ((info_from_dct & 0x80000000) != 0) {
          goto LABEL_13;
        }
        uint64_t v29 = heap_Calloc(*(void **)(a5 + 8), 1, 128);
        *a12 = v29;
        if (v29)
        {
          a12[2] = 128;
          uint64_t v30 = heap_Calloc(*(void **)(a5 + 8), 1, 128);
          a12[1] = v30;
          if (v30)
          {
            a12[3] = 128;
            goto LABEL_13;
          }
        }
        goto LABEL_20;
      }
LABEL_12:
      uint64_t info_from_dct = broker_string;
    }
  }
LABEL_13:
  if (*(void *)a10)
  {
    heap_Free(*(void **)(a5 + 8), *(void *)a10);
    *(void *)a10 = 0;
  }
  if ((info_from_dct & 0x80000000) != 0)
  {
    uint64_t v31 = *(void *)(a10 + 8);
    if (v31) {
      crf_Deinit_ReadOnly_DereferenceCnt(a5, a6, v31);
    }
    *(void *)(a10 + 8) = 0;
  }
  return info_from_dct;
}

uint64_t statpos_crf_unload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6)
{
  if (*(void *)a3)
  {
    heap_Free(*(void **)(a1 + 8), *(void *)a3);
    *(void *)a3 = 0;
  }
  if (*(_DWORD *)(a3 + 16) == 1)
  {
    uint64_t Only_DereferenceCnt = crf_Deinit_ReadOnly_DereferenceCnt(a1, a2, *(void *)(a3 + 8));
    if ((Only_DereferenceCnt & 0x80000000) != 0) {
      return Only_DereferenceCnt;
    }
    *(void *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t Only_DereferenceCnt = 0;
  }
  uint64_t v13 = *(void *)(a3 + 24);
  if (v13)
  {
    int v14 = *(unsigned __int8 *)(a3 + 32);
    if (v14 != 255)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(a3 + 24) + 8 * v15);
        if (v16)
        {
          heap_Free(*(void **)(a1 + 8), v16);
          LOBYTE(v14) = *(unsigned char *)(a3 + 32);
        }
        ++v15;
      }
      while (v15 < (v14 + 1));
      uint64_t v13 = *(void *)(a3 + 24);
    }
    heap_Free(*(void **)(a1 + 8), v13);
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  if (a6 == 1)
  {
    uint64_t v17 = *(void *)(a4 + 296);
    if (v17)
    {
      heap_Free(*(void **)(a1 + 8), v17);
      *(void *)(a4 + 296) = 0;
      *(_DWORD *)(a4 + 316) = 0;
    }
    uint64_t v18 = *(void *)(a4 + 304);
    if (v18)
    {
      heap_Free(*(void **)(a1 + 8), v18);
      *(void *)(a4 + 304) = 0;
      *(_DWORD *)(a4 + 320) = 0;
    }
    *(_WORD *)(a4 + 312) = 0;
    *(_WORD *)(a4 + 324) = 0;
    uint64_t v19 = *(void *)(a4 + 168);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      *(void *)(a4 + 168) = 0;
    }
    uint64_t v20 = *(void *)(a4 + 176);
    if (v20)
    {
      heap_Free(*(void **)(a1 + 8), v20);
      *(void *)(a4 + 176) = 0;
    }
    if (*a5)
    {
      heap_Free(*(void **)(a1 + 8), *a5);
      *a5 = 0;
    }
    uint64_t v21 = a5[1];
    if (v21)
    {
      heap_Free(*(void **)(a1 + 8), v21);
      a5[1] = 0;
    }
  }
  return Only_DereferenceCnt;
}

uint64_t statpos_crf_label(uint64_t a1, uint64_t a2, unsigned __int16 *a3, void *a4, uint64_t a5)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v72 = 0;
  int v73 = 0;
  unsigned int v71 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v10 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * a3[4]);
  if (!v10)
  {
    uint64_t v44 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v67);
    return v44;
  }
  unint64_t v15 = (void *)v10;
  uint64_t features = statpos_fv_new(a1, *(unsigned __int8 *)(a2 + 32), v74);
  if ((features & 0x80000000) == 0)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FEATURE VECTOR", v17, v18, v19, 0);
    if (*(unsigned char *)(a2 + 32))
    {
      unint64_t v23 = 0;
      do
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v20, v21, v22, *(void *)(*(void *)(a2 + 24) + 8 * v23++));
      while (v23 < *(unsigned __int8 *)(a2 + 32));
    }
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FEATURE VECTOR ENTRIES", v20, v21, v22, 0);
    if (a3[4])
    {
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t features = statpos_get_features(a1, (uint64_t)a3, (uint64_t)a4, (unsigned __int16)v24, *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 32), v74, 0);
        if ((features & 0x80000000) != 0) {
          break;
        }
        uint64_t features = _crfpos_concat_strings(a1, (uint64_t)v74, &v73);
        if ((features & 0x80000000) != 0) {
          break;
        }
        uint64_t v28 = v73;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"features: %s", v25, v26, v27, (uint64_t)v73);
        v15[v24] = v28;
        int v73 = 0;
        if (++v24 >= (unint64_t)a3[4]) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t features = _crfpos_get_potential_tags(a1, a3, a4, &v69, &v70, a5);
      if ((features & 0x80000000) == 0)
      {
        uint64_t v33 = v69;
        uint64_t v32 = v70;
        BOOL v34 = v70 != 0 && v69 != 0;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Existing tags on words (ConstrainedDecoding:Keyword=%d:Actual=%s)", v29, v30, v31, a5);
        LODWORD(v38) = a3[4];
        if (v34 && a3[4])
        {
          unint64_t v39 = 0;
          do
          {
            __s1[0] = 0;
            if (*(_DWORD *)(v32 + 4 * v39))
            {
              unint64_t v40 = 0;
              do
              {
                cstdlib_strcat(__s1, *(const char **)(*(void *)(v33 + 8 * v39) + 8 * v40));
                cstdlib_strcat(__s1, "  ");
                ++v40;
              }
              while (v40 < *(unsigned int *)(v32 + 4 * v39));
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v35, v36, v37, (uint64_t)__s1);
            ++v39;
            unint64_t v38 = a3[4];
          }
          while (v39 < v38);
        }
        uint64_t v44 = crf_Process_Constrained(*(void *)(a2 + 8), v15, v38, &v72, &v71, v33, v32);
        if ((v44 & 0x80000000) == 0 && v71)
        {
          unint64_t v45 = 0;
          uint64_t v46 = 88;
          while (1)
          {
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"predicted label: %s on word %d", v41, v42, v43, *(void *)(v72 + 8 * v45));
            uint64_t v47 = cstdlib_strchr(*(char **)(v72 + 8 * v45), 32);
            if (v47) {
              *uint64_t v47 = 0;
            }
            uint64_t v48 = *(void **)(a1 + 8);
            int v49 = cstdlib_strlen(*(const char **)(v72 + 8 * v45));
            uint64_t v50 = (char *)heap_Calloc(v48, 1, (v49 + 100));
            *(void *)(*(void *)a3 + v46) = v50;
            if (!v50) {
              break;
            }
            cstdlib_strcpy(v50, *(const char **)(v72 + 8 * v45++));
            v46 += 160;
            if (v45 >= v71) {
              goto LABEL_28;
            }
          }
          uint64_t v44 = 2313166858;
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v51, v52, v53, v54, v68);
        }
        goto LABEL_28;
      }
    }
  }
  uint64_t v44 = features;
LABEL_28:
  statpos_fv_dealloc((void *)a1, (uint64_t)v74);
  unsigned int v55 = a3[4];
  if (a3[4])
  {
    unint64_t v56 = 0;
    do
    {
      uint64_t v57 = v15[v56];
      if (v57)
      {
        heap_Free(*(void **)(a1 + 8), v57);
        unsigned int v55 = a3[4];
      }
      ++v56;
    }
    while (v56 < v55);
  }
  heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  uint64_t v58 = v72;
  if (v72)
  {
    unint64_t v59 = v71;
    if (v71)
    {
      unint64_t v60 = 0;
      do
      {
        uint64_t v61 = *(void *)(v72 + 8 * v60);
        if (v61)
        {
          heap_Free(*(void **)(a1 + 8), v61);
          unint64_t v59 = v71;
        }
        ++v60;
      }
      while (v60 < v59);
      uint64_t v58 = v72;
    }
    heap_Free(*(void **)(a1 + 8), v58);
  }
  uint64_t v62 = v69;
  if (v69)
  {
    unsigned int v63 = a3[4];
    if (a3[4])
    {
      unint64_t v64 = 0;
      do
      {
        uint64_t v65 = *(void *)(v62 + 8 * v64);
        if (v65)
        {
          heap_Free(*(void **)(a1 + 8), v65);
          unsigned int v63 = a3[4];
        }
        *(void *)(v62 + 8 * v64++) = 0;
      }
      while (v64 < v63);
    }
    heap_Free(*(void **)(a1 + 8), v62);
  }
  if (v70) {
    heap_Free(*(void **)(a1 + 8), v70);
  }
  return v44;
}

uint64_t statPOS_add2Str(uint64_t a1, const char **a2, unsigned __int16 *a3, char *__s)
{
  size_t v8 = cstdlib_strlen(__s);
  uint64_t v9 = *a3;
  if (v8 >= v9 - cstdlib_strlen(*a2))
  {
    __int16 v11 = cstdlib_strlen(__s);
    __int16 v12 = *a3;
    unsigned int v13 = (unsigned __int16)(v11 - v12 + cstdlib_strlen(*a2));
    if (v13 <= 0x80) {
      uint64_t v14 = 128;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v10 = (const char *)heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)*a2, *a3 + v14 + 1);
    if (!v10)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v15, v16, v17, v18, v22);
      return 2313166858;
    }
    *a2 = v10;
    *a3 += v14;
  }
  else
  {
    uint64_t v10 = *a2;
  }
  size_t v19 = cstdlib_strlen(v10);
  uint64_t v20 = (char *)*a2;
  if (v19) {
    cstdlib_strcat(v20, __s);
  }
  else {
    cstdlib_strcpy(v20, __s);
  }
  return 0;
}

uint64_t statpos_getSentenceData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v95 = 0;
  __int16 v94 = 0;
  int v93 = 0;
  uint64_t v92 = 0;
  unsigned int v90 = 0;
  int v91 = 0;
  __s = 0;
  uint64_t v89 = 0;
  unsigned __int16 __s1 = 0;
  int v85 = 0;
  unsigned int v86 = 0;
  uint64_t v10 = *(void *)a4;
  *(_DWORD *)(a4 + 748) = log_GetLogLevel(*(void *)(*(void *)a4 + 32)) > 4;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 1, 0, (char *)&v95 + 2);
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(a1 + 184))(a2, a3, HIWORD(v95), 0, &v94);
  if ((v12 & 0x80000000) == 0 && v94 == 1)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, int *))(a1 + 176))(a2, a3, HIWORD(v95), 0, &v93, &v91);
    if ((v12 & 0x80000000) == 0 && (unsigned __int16)v91 >= 2u)
    {
      uint64_t v16 = (void *)(a4 + 648);
      log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"new POS : processing=\"%s\"", v13, v14, v15, (uint64_t)v93);
      uint64_t v17 = heap_Calloc(*(void **)(v10 + 8), 1, 128);
      if (v17)
      {
        uint64_t v22 = v17;
        for (uint64_t i = 0; i != 128; i += 8)
        {
          uint64_t v24 = heap_Calloc(*(void **)(v10 + 8), 1, 16);
          *(void *)(v22 + i) = v24;
          if (!v24) {
            goto LABEL_52;
          }
        }
        uint64_t v29 = heap_Calloc(*(void **)(v10 + 8), 1, 1024);
        *(void *)(a4 + 728) = v29;
        if (!v29
          || (*(_WORD *)(a4 + 744) = 1024,
              uint64_t v30 = heap_Calloc(*(void **)(v10 + 8), 1, 1024),
              (*(void *)(a4 + 736) = v30) == 0))
        {
LABEL_52:
          uint64_t v12 = 2313166858;
          log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v25, v26, v27, v28, v80);
          uint64_t v36 = 0;
          goto LABEL_53;
        }
        __int16 v31 = cstdlib_strlen(v93);
        uint64_t v36 = (char *)heap_Calloc(*(void **)(v10 + 8), 1, (unsigned __int16)(v31 + 1));
        if (v36)
        {
          uint64_t v83 = a4 + 8;
          statpos_initCache(a4 + 648);
          uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v95), &v95);
          if ((AddPOI & 0x80000000) == 0)
          {
            uint64_t v12 = 2313174705;
            uint64_t v82 = v36;
            while ((_WORD)v95)
            {
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
              if ((AddPOI & 0x80000000) != 0) {
                goto LABEL_117;
              }
              if (v90 <= 0xA && ((1 << v90) & 0x610) != 0)
              {
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v95, 1, 1, &v86, &v91);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_117;
                }
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v95, 2, 1, (char *)&v86 + 2, &v91);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_117;
                }
                if ((unsigned __int16)v86 > HIWORD(v86)) {
                  goto LABEL_53;
                }
                uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v95, 17, &v94);
                if ((v11 & 0x80000000) != 0) {
                  return v11;
                }
                if (v94 == 1)
                {
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v95, 17, 1, (char *)&v85 + 2, &v91);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_117;
                  }
                }
                else
                {
                  HIWORD(v85) = v90 - 9 <= 1;
                }
                cstdlib_strncpy(v36, &v93[(unsigned __int16)v86], HIWORD(v86) - (unint64_t)(unsigned __int16)v86);
                v36[HIWORD(v86) - (unsigned __int16)v86] = 0;
                if (HIWORD(v86) == (unsigned __int16)v86)
                {
                  log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING! : IGNORE EMPTY WORD lingdb position %d,%d", v39, v40, v41, HIWORD(v86));
                }
                else
                {
                  uint64_t AddPOI = addWord_0(v10, v83, a4 + 648, v36, (unsigned __int16 *)&v86, HIWORD(v85), &v85, v41);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_117;
                  }
                  BOOL v42 = doesWordEndInComma_0(v36);
                  uint64_t v43 = *(void *)(a4 + 648);
                  int v44 = *(unsigned __int16 *)(a4 + 656) - 1;
                  if (v42) {
                    *(_DWORD *)(v43 + 160 * v44 + 12) = 1;
                  }
                  uint64_t v45 = v43 + 160 * v44;
                  *(_DWORD *)(v45 + 24) = 0;
                  *(_DWORD *)(v45 + 24) = v90 == 4;
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v95, 3, &__s1, &v91);
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_117;
                  }
                  int v46 = cstdlib_strcmp(__s1, "");
                  uint64_t v47 = *(void *)(a4 + 648);
                  int v48 = *(unsigned __int16 *)(a4 + 656) - 1;
                  if (v46) {
                    *(_DWORD *)(v47 + 160 * v48 + 24) = 1;
                  }
                  int v49 = v93;
                  unsigned int v50 = HIWORD(v86);
                  *(_DWORD *)(v47 + 160 * v48 + 16) = v93[HIWORD(v86)] == 95;
                  *(_DWORD *)(*(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656) - 140) = isFollowedbySpace(v83, v49, v50);
                  uint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v95, 5, &__s, &v91);
                  if ((v51 & 0x80000000) != 0
                    || (uint64_t v51 = addPOS_0(v10, v83, a4 + 648, (unsigned __int16)(*(_WORD *)(a4 + 656) - 1), __s, v95, v22, &v85, a5), (v51 & 0x80000000) != 0))
                  {
                    uint64_t v12 = v51;
                    uint64_t v36 = v82;
                    goto LABEL_53;
                  }
                  uint64_t AddPOI = readAddPOI(a1, a2, a3, v10, (void *)(a4 + 648), (unsigned __int16)(*(_WORD *)(a4 + 656) - 1), (unsigned __int16)v95);
                  uint64_t v36 = v82;
                  if ((AddPOI & 0x80000000) != 0) {
                    goto LABEL_117;
                  }
                  if (*(_DWORD *)(a4 + 1416) == 1)
                  {
                    uint64_t v84 = 0;
                    uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1 + 184))(a2, a3, (unsigned __int16)v95, 14, &v94);
                    if ((AddPOI & 0x80000000) != 0) {
                      goto LABEL_117;
                    }
                    if (v94)
                    {
                      uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v95, 14, &v84, &v91);
                      if ((AddPOI & 0x80000000) != 0) {
                        goto LABEL_117;
                      }
                      if ((unsigned __int16)v91 >= 2u)
                      {
                        uint64_t AddPOI = readPOSandPHRfromNLU(v10, v83, (uint64_t *)(a4 + 648), v84, (unsigned __int16)(*(_WORD *)(a4 + 656) - 1));
                        if ((AddPOI & 0x80000000) != 0) {
                          goto LABEL_117;
                        }
                      }
                    }
                    else
                    {
                      unint64_t v81 = v81 & 0xFFFFFFFF00000000 | v86;
                      uint64_t AddPOI = readPOSandPHRfromNLUMarkers(v10, v83, (uint64_t *)(a4 + 648), a2, a3, a1, HIWORD(v95), v93, v81, *(_WORD *)(a4 + 656) - 1);
                      if ((AddPOI & 0x80000000) != 0) {
                        goto LABEL_117;
                      }
                    }
                  }
                }
              }
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v95, &v95);
              if ((AddPOI & 0x80000000) != 0) {
                goto LABEL_117;
              }
            }
            uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 2, HIWORD(v95), &v95);
            if ((AddPOI & 0x80000000) == 0)
            {
              while ((_WORD)v95)
              {
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
                if ((AddPOI & 0x80000000) != 0) {
                  goto LABEL_117;
                }
                if (v90 != 6) {
                  goto LABEL_120;
                }
                uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v95, 1, 1, &v86, &v91);
                if ((AddPOI & 0x80000000) == 0)
                {
                  uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a1 + 168))(a2, a3, (unsigned __int16)v95, 2, 1, (char *)&v86 + 2, &v91);
                  if ((AddPOI & 0x80000000) == 0)
                  {
                    if ((unsigned __int16)v86 > HIWORD(v86)) {
                      goto LABEL_53;
                    }
                    uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, const char **, int *))(a1 + 176))(a2, a3, (unsigned __int16)v95, 4, &v89, &v91);
                    if ((AddPOI & 0x80000000) == 0)
                    {
                      uint64_t AddPOI = addToken_0(v10, (uint64_t *)(a4 + 648), v83, (unsigned __int16 *)&v86, v89, v56, v57, v58);
                      if ((AddPOI & 0x80000000) == 0 || AddPOI == -1981800448)
                      {
LABEL_120:
                        uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, (unsigned __int16)v95, &v95);
                        if ((AddPOI & 0x80000000) == 0) {
                          continue;
                        }
                      }
                    }
                  }
                }
                goto LABEL_117;
              }
              uint64_t AddPOI = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v95), 1, &v92, (char *)&v91 + 2);
              if ((AddPOI & 0x80000000) == 0)
              {
                unsigned __int16 v59 = HIWORD(v91);
                if (HIWORD(v91))
                {
                  int v60 = 0;
                  do
                  {
                    uint64_t v61 = (unsigned __int16)v60;
                    if (*(_DWORD *)(v92 + 32 * (unsigned __int16)v60) == 34)
                    {
                      if ((unsigned __int16)++v60 >= v59) {
                        goto LABEL_91;
                      }
                      do
                      {
                        int v62 = *(_DWORD *)(v92 + 32 * (unsigned __int16)v60);
                        if (v62 != 21) {
                          ++v60;
                        }
                      }
                      while ((unsigned __int16)v60 < v59 && v62 != 21);
                      if (v62 == 21)
                      {
                        int v65 = *(_DWORD *)(v92 + 32 * v61 + 12);
                        int v66 = *(_DWORD *)(v92 + 12);
                        LOWORD(v65) = v65 - v66;
                        int v64 = *(_DWORD *)(v92 + 32 * (unsigned __int16)v60 + 12) - v66;
                      }
                      else
                      {
LABEL_91:
                        int v64 = *(_DWORD *)(v92 + 16);
                        int v65 = *(_DWORD *)(v92 + 32 * v61 + 12) - *(_DWORD *)(v92 + 12);
                      }
                      setPhoneticRange_0((unsigned __int16 **)(a4 + 648), (unsigned __int16)v65, (unsigned __int16)v64);
                    }
                    ++v60;
                    unsigned __int16 v59 = HIWORD(v91);
                  }
                  while (HIWORD(v91) > (unsigned __int16)v60);
                }
                uint64_t AddPOI = markPhoneticRegions(v10, (uint64_t *)(a4 + 648));
                if ((AddPOI & 0x80000000) == 0)
                {
                  if (*(_DWORD *)(a4 + 1416) != 1) {
                    goto LABEL_115;
                  }
                  unsigned int v71 = *(unsigned __int16 *)(a4 + 656);
                  if (*(_WORD *)(a4 + 656))
                  {
                    unint64_t v72 = 0;
                    do
                    {
                      if (!HIWORD(v91)) {
                        goto LABEL_111;
                      }
                      unint64_t v73 = 0;
                      do
                      {
                        while (*(_DWORD *)(v92 + 32 * v73) != 1)
                        {
                          if (++v73 >= HIWORD(v91)) {
                            goto LABEL_111;
                          }
                        }
                        int v74 = *(_DWORD *)(v92 + 32 * v73 + 12) - *(_DWORD *)(v92 + 12);
                        int v75 = *(unsigned __int16 *)(*v16 + 160 * v72);
                        ++v73;
                      }
                      while (v74 != v75 && v73 < HIWORD(v91));
                      if (v74 != v75)
                      {
LABEL_111:
                        uint64_t v77 = *(void *)(*v16 + 160 * v72 + 104);
                        if (v77)
                        {
                          heap_Free(*(void **)(v10 + 8), v77);
                          *(void *)(*(void *)(a4 + 648) + 160 * v72 + 104) = 0;
                          unsigned int v71 = *(unsigned __int16 *)(a4 + 656);
                        }
                      }
                      ++v72;
                    }
                    while (v72 < v71);
                  }
                  uint64_t AddPOI = resolvePHR_0((uint64_t)v93, v10, v83, (_WORD *)(a4 + 648), v67, v68, v69, v70);
                  if ((AddPOI & 0x80000000) == 0)
                  {
LABEL_115:
                    uint64_t AddPOI = setPotentialPOSTags(v10, v83, (uint64_t *)(a4 + 648));
                    if ((AddPOI & 0x80000000) == 0) {
                      uint64_t AddPOI = printSent_0(v10, v83, (uint64_t *)(a4 + 648), (uint64_t)"Initialized data", *(_DWORD *)(a4 + 1416), a5, v78, v79);
                    }
                  }
                }
              }
            }
          }
LABEL_117:
          uint64_t v12 = AddPOI;
        }
        else
        {
          uint64_t v12 = 2313166858;
          log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v32, v33, v34, v35, v80);
        }
LABEL_53:
        for (uint64_t j = 0; j != 128; j += 8)
        {
          uint64_t v54 = *(void *)(v22 + j);
          if (v54)
          {
            heap_Free(*(void **)(v10 + 8), v54);
            *(void *)(v22 + j) = 0;
          }
        }
        heap_Free(*(void **)(v10 + 8), v22);
        statpos_freeCache(v10, a4 + 648);
        if (v36) {
          heap_Free(*(void **)(v10 + 8), (uint64_t)v36);
        }
      }
      else
      {
        uint64_t v12 = 2313166858;
        log_OutPublic(*(void *)(v10 + 32), (uint64_t)"FE_POS", 35000, 0, v18, v19, v20, v21, v80);
        statpos_freeCache(v10, a4 + 648);
      }
      if (*v16)
      {
        if (*(_WORD *)(a4 + 656))
        {
          uint64_t v55 = *(void *)(*(void *)(*v16 + 160 * (*(unsigned __int16 *)(a4 + 656) - 1) + 48) + 24);
          if (v55)
          {
            heap_Free(*(void **)(v10 + 8), v55);
            *(void *)(*(void *)(*(void *)(a4 + 648) + 160 * *(unsigned __int16 *)(a4 + 656) - 112) + 24) = 0;
          }
        }
      }
    }
  }
  return v12;
}

uint64_t addWord_0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, unsigned __int16 *a5, uint64_t a6, _WORD *a7, uint64_t a8)
{
  int v44 = a6;
  uint64_t v47 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
  if (!*(_WORD *)(a3 + 8))
  {
    int v16 = 0;
LABEL_11:
    if (*(_WORD *)(a3 + 10))
    {
      uint64_t v19 = *(void *)a3;
      if (v13 + 2 > *(unsigned __int16 *)(a3 + 10))
      {
        uint64_t v20 = heap_Realloc(*(uint64_t **)(a1 + 8), v19, 160 * *(unsigned __int16 *)(a3 + 10) + 3360);
        if (!v20) {
          goto LABEL_28;
        }
        *(void *)a3 = v20;
        cstdlib_memset((void *)(v20 + 160 * *(unsigned __int16 *)(a3 + 8)), 0, 0xC80uLL);
        *(_WORD *)(a3 + 10) += 20;
        uint64_t v19 = *(void *)a3;
      }
    }
    else
    {
      uint64_t v25 = heap_Calloc(*(void **)(a1 + 8), 1, 8001);
      *(void *)a3 = v25;
      if (!v25) {
        goto LABEL_28;
      }
      uint64_t v19 = v25;
      *(_WORD *)(a3 + 10) = 50;
    }
    uint64_t v26 = (_DWORD *)(v19 + 160 * *(unsigned __int16 *)(a3 + 8));
    v26[11] = v16;
    *uint64_t v26 = *(_DWORD *)a5;
    uint64_t v27 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * *(unsigned __int16 *)(a2 + 376)) | 1);
    *(void *)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = v27;
    if (!v27
      || (uint64_t v32 = *(void **)(a1 + 8),
          int v33 = cstdlib_strlen(a4),
          uint64_t v34 = (char *)heap_Calloc(v32, 1, (v33 + 1)),
          (**(void **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = v34) == 0))
    {
      uint64_t v41 = 2313166858;
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v28, v29, v30, v31, v43);
      uint64_t v40 = *(uint64_t **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48);
      if (v40 && *v40)
      {
        heap_Free(*(void **)(a1 + 8), *v40);
        **(void **)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 48) = 0;
      }
      return v41;
    }
    cstdlib_strcpy(v34, a4);
    cstdlib_strncpy(__dst, a4, 0x80uLL);
    __dst[127] = 0;
    uint64_t v41 = (*(uint64_t (**)(void, void, const char *, char *, uint64_t))(*(void *)(a3 + 120) + 144))(*(void *)(a3 + 104), *(void *)(a3 + 112), "normal", __dst, 128);
    if ((v41 & 0x80000000) != 0) {
      return v41;
    }
    if (!cstdlib_strlen(__dst) || !cstdlib_strcmp(a4, __dst))
    {
LABEL_24:
      unsigned __int16 v38 = *(_WORD *)(a3 + 8);
      uint64_t v39 = *(void *)a3 + 160 * v38;
      *(_DWORD *)(v39 + 72) = 0;
      *(void *)(v39 + 64) = 0;
      *(_DWORD *)(v39 + 8) = v44 == 1;
      *(_WORD *)(a3 + 8) = v38 + 1;
      *a7 = 0;
      return v41;
    }
    uint64_t v35 = *(void **)(a1 + 8);
    int v36 = cstdlib_strlen(__dst);
    uint64_t v37 = (char *)heap_Calloc(v35, 1, (v36 + 1));
    *(void *)(*(void *)a3 + 160 * *(unsigned __int16 *)(a3 + 8) + 120) = v37;
    if (v37)
    {
      cstdlib_strcpy(v37, __dst);
      goto LABEL_24;
    }
LABEL_28:
    uint64_t v41 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v21, v22, v23, v24, v43);
    return v41;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  int v16 = 0;
  while (1)
  {
    unsigned int v17 = *(unsigned __int16 *)(*(void *)a3 + v14);
    uint64_t v18 = *a5;
    if (__PAIR64__(*(unsigned __int16 *)(*(void *)a3 + v14 + 2), v17) == __PAIR64__(a5[1], v18)) {
      return 0;
    }
    if (v18 >= v17 && a5[1] <= *(unsigned __int16 *)(*(void *)a3 + v14 + 2))
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"WARNING : skip subsumed word %d,%d (subsumed by word %d)", a6, (uint64_t)a7, a8, v18);
      unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
      int v16 = 1;
    }
    ++v15;
    v14 += 160;
    if (v15 >= v13) {
      goto LABEL_11;
    }
  }
}

BOOL doesWordEndInComma_0(const char *a1)
{
  return cstdlib_strlen(a1)
      && (a1[cstdlib_strlen(a1) - 1] == 44 || a1[cstdlib_strlen(a1) - 1] == 58 || a1[cstdlib_strlen(a1) - 1] == 59);
}

BOOL isFollowedbySpace(uint64_t a1, char *__s, unsigned int a3)
{
  unsigned int v6 = (unsigned __int16)cstdlib_strlen(__s);
  if (v6 > a3)
  {
    while (1)
    {
      unsigned int v7 = &__s[(unsigned __int16)a3];
      unsigned int v8 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v7);
      if (_statpos_char_check(*(const char **)(a1 + 168), v7, v8) != 1
        && _statpos_char_check(*(const char **)(a1 + 176), &__s[(unsigned __int16)a3], v8) != 1)
      {
        break;
      }
      a3 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v7);
      if (v6 <= (unsigned __int16)a3)
      {
        a3 = (unsigned __int16)a3;
        return v6 == a3;
      }
    }
    return *v7 == 32;
  }
  return v6 == a3;
}

uint64_t addPOS_0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char *__s, __int16 a6, uint64_t a7, _WORD *a8, int a9)
{
  uint64_t v11 = __s;
  int v46 = -1;
  if (!cstdlib_strlen(__s)) {
    uint64_t v11 = "NULL";
  }
  int v16 = *(void **)(a1 + 8);
  int v17 = cstdlib_strlen(v11);
  uint64_t v18 = (char *)heap_Calloc(v16, 1, (v17 + 1));
  if (v18)
  {
    uint64_t v23 = v18;
    cstdlib_strcpy(v18, v11);
    uint64_t v24 = cstdlib_strchr(v23, 92);
    int __sa = v23;
    if (v24)
    {
      uint64_t v28 = v24;
      while (1)
      {
        *uint64_t v28 = 0;
        uint64_t v29 = *v23 ? v23 : "*";
        if ((*(void *)(a3 + 48) = v29, *(void *)(a3 + 56) = v29, !a9) && !*(_WORD *)(a2 + 104)
          || *(_DWORD *)(a2 + 184))
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag POS \"%s\"", v25, v26, v27, (uint64_t)v29);
          uint64_t UniqDynamicPOS = statpos_retagPOS(a1, a2, a3, a4, &v46, a8, a7, v30);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        if (a9 == 1)
        {
          uint64_t UniqDynamicPOS = statpos_getUniqDynamicPOS(a1, a2, *(char **)(a3 + 48), &v46);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        if (*(_WORD *)(a2 + 104))
        {
          uint64_t UniqDynamicPOS = statpos_getPOSOffset(a1, a2, *(void *)(a3 + 48), &v46);
          if ((UniqDynamicPOS & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t UniqDynamicPOS = statPOSAddUniqueTagOffset2Word(a1, (uint64_t *)a3, a4, v46, a6);
        if ((UniqDynamicPOS & 0x80000000) != 0) {
          break;
        }
        uint64_t v23 = v28 + 1;
        uint64_t v28 = cstdlib_strchr(v28 + 1, 92);
        if (!v28)
        {
          if (*v23) {
            uint64_t v32 = v23;
          }
          else {
            uint64_t v32 = "*";
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      if (*v23) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = "*";
      }
LABEL_26:
      *(void *)(a3 + 48) = v32;
      *(void *)(a3 + 56) = v32;
      if ((a9 || *(_WORD *)(a2 + 104)) && !*(_DWORD *)(a2 + 184)
        || (log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag POS \"%s\"", v25, v26, v27, (uint64_t)v32), uint64_t UniqDynamicPOS = statpos_retagPOS(a1, a2, a3, a4, &v46, a8, a7, v34), (UniqDynamicPOS & 0x80000000) == 0))
      {
        if (a9 != 1
          || (uint64_t UniqDynamicPOS = statpos_getUniqDynamicPOS(a1, a2, *(char **)(a3 + 48), &v46),
              (UniqDynamicPOS & 0x80000000) == 0))
        {
          if (!*(_WORD *)(a2 + 104)
            || (uint64_t UniqDynamicPOS = statpos_getPOSOffset(a1, a2, *(void *)(a3 + 48), &v46),
                (UniqDynamicPOS & 0x80000000) == 0))
          {
            uint64_t v33 = statPOSAddUniqueTagOffset2Word(a1, (uint64_t *)a3, a4, v46, a6);
            if ((v33 & 0x80000000) == 0 && !*(void *)(*(void *)(*(void *)a3 + 160 * a4 + 48) + 24))
            {
              uint64_t v35 = *(void **)(a1 + 8);
              int v36 = cstdlib_strlen(__sa);
              uint64_t v37 = (char *)heap_Calloc(v35, 1, (v36 + 1));
              *(void *)(*(void *)(*(void *)a3 + 160 * a4 + 48) + 24) = v37;
              if (v37)
              {
                cstdlib_strcpy(v37, __sa);
              }
              else
              {
                uint64_t v33 = 2313166858;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v38, v39, v40, v41, v43);
              }
            }
            goto LABEL_39;
          }
        }
      }
    }
    uint64_t v33 = UniqDynamicPOS;
LABEL_39:
    heap_Free(*(void **)(a1 + 8), (uint64_t)__sa);
    return v33;
  }
  uint64_t v33 = 2313166858;
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v43);
  return v33;
}

uint64_t readAddPOI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int a6, uint64_t a7)
{
  int v35 = 0;
  *(void *)uint64_t v34 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1 + 184))(a2, a3, a7, 14, (char *)&v35 + 2);
  if ((v14 & 0x80000000) == 0)
  {
    if (HIWORD(v35))
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, int *))(a1 + 176))(a2, a3, a7, 14, v34, &v35);
      if ((v14 & 0x80000000) == 0 && (unsigned __int16)v35 >= 2u)
      {
        uint64_t v33 = 0;
        unsigned __int16 v32 = 0;
        unint64_t v15 = hlp_NLUStrFind(*(char **)v34, "S_POI", &v33, &v32);
        if (v15) {
          int v16 = v33;
        }
        else {
          int v16 = 0;
        }
        if (v15) {
          int v17 = 66;
        }
        else {
          int v17 = 0;
        }
        if (hlp_NLUStrFind(*(char **)v34, "I_POI", &v33, &v32))
        {
          int v16 = v33;
          int v17 = 73;
        }
        uint64_t v18 = hlp_NLUStrFind(*(char **)v34, "E_POI", &v33, &v32);
        if (v17 == 66) {
          char v19 = 83;
        }
        else {
          char v19 = 69;
        }
        if (v18) {
          int v16 = v33;
        }
        else {
          char v19 = v17;
        }
        uint64_t v20 = *a5 + 160 * a6;
        *(unsigned char *)(v20 + 128) = v19;
        uint64_t v21 = (void *)(v20 + 136);
        if (v16)
        {
          if (!*v21)
          {
            uint64_t v22 = a6;
            uint64_t v23 = *(void **)(a4 + 8);
            size_t v24 = cstdlib_strlen(v16);
            uint64_t v25 = (char *)heap_Calloc(v23, 1, v24 + 3);
            *(void *)(*a5 + 160 * v22 + 136) = v25;
            if (v25)
            {
              cstdlib_strcpy(v25, ",");
              cstdlib_strcat(*(char **)(*a5 + 160 * v22 + 136), v16);
              cstdlib_strcat(*(char **)(*a5 + 160 * v22 + 136), ",");
            }
            else
            {
              log_OutPublic(*(void *)(a4 + 32), (uint64_t)"FE_POS", 35000, 0, v26, v27, v28, v29, v31);
              return 2313166858;
            }
          }
        }
        else
        {
          *uint64_t v21 = 0;
        }
      }
    }
  }
  return v14;
}

uint64_t readPOSandPHRfromNLU(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, unsigned int a5)
{
  long long v13 = 0uLL;
  int v12 = 0;
  hlp_NLUStrFind(a4, "POS", (char **)&v13 + 1, (unsigned __int16 *)&v12 + 1);
  hlp_NLUStrFind(a4, "PHR", (char **)&v13, (unsigned __int16 *)&v12);
  if (v13 != 0) {
    return addPOSandPHR(a1, a2, a3, a5, a5, *((const char **)&v13 + 1), HIWORD(v12), (const char *)v13, v12);
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing POS/PHR in NLU field: %s", *((uint64_t *)&v13 + 1), v10, v13, (uint64_t)a4);
  return 2313166848;
}

uint64_t readPOSandPHRfromNLUMarkers(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *__s, uint64_t a9, unsigned __int16 a10)
{
  uint64_t v35 = 0;
  unsigned __int16 v34 = 0;
  long long v33 = 0uLL;
  int v31 = 0;
  int v32 = 0;
  int v30 = 0;
  cstdlib_strlen(__s);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))(a6 + 104))(a4, a5, 2, a7, &v30);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  uint64_t v29 = a1;
  uint64_t v28 = a3;
  while ((_WORD)v30)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 168))(a4, a5);
    if ((v17 & 0x80000000) == 0)
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a6 + 120))(a4, a5, (unsigned __int16)v30, &v30);
      if ((v17 & 0x80000000) == 0) {
        continue;
      }
    }
    return v17;
  }
  int v31 = a9;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int16 *))(a6 + 176))(a4, a5, a7, 1, &v35, &v34);
  if ((v17 & 0x80000000) != 0) {
    return v17;
  }
  if (v34)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    while (1)
    {
      if (*(_DWORD *)(v35 + v21) == 51)
      {
        unsigned int v23 = *(_DWORD *)(v35 + v21 + 12) - *(_DWORD *)(v35 + 12);
        if (v23 >= (unsigned __int16)v31 && v23 < HIWORD(v31)) {
          break;
        }
      }
      uint64_t v22 = (v22 + 1);
      v21 += 32;
      if (32 * v34 == v21) {
        goto LABEL_17;
      }
    }
    hlp_NLUStrFind(*(char **)(v35 + v21 + 24), "POS", (char **)&v33 + 1, (unsigned __int16 *)&v32 + 1);
    hlp_NLUStrFind(*(char **)(v35 + v21 + 24), "PHR", (char **)&v33, (unsigned __int16 *)&v32);
    if (v33 == 0)
    {
      uint64_t v25 = 2313166848;
      log_OutText(*(void *)(v29 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing POS/PHR in (NLU) marker number: %d", *((uint64_t *)&v33 + 1), v26, v33, v22);
      return v25;
    }
    return addPOSandPHR(v29, a2, v28, a10, a10, *((const char **)&v33 + 1), HIWORD(v32), (const char *)v33, v32);
  }
LABEL_17:
  uint64_t v25 = 2313166848;
  log_OutText(*(void *)(v29 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"couldnt recover from missing NLU field on word record %d,%d", v18, v19, v20, (unsigned __int16)a9);
  return v25;
}

uint64_t addToken_0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int16 *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *((unsigned __int16 *)a2 + 4);
  int v12 = *a4;
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v14 = 0;
    unsigned __int16 v15 = 0;
    unsigned __int16 v16 = v11 + 1;
    uint64_t v17 = *a2;
    unsigned int v18 = a4[1];
    while (1)
    {
      unsigned int v19 = *(unsigned __int16 *)(v17 + v14);
      if (v12 == v19) {
        unsigned __int16 v16 = v15;
      }
      unsigned int v20 = *(unsigned __int16 *)(v17 + v14 + 2);
      if (v18 == v20) {
        break;
      }
      if (v18 >= v19 && v18 < v20) {
        break;
      }
      ++v15;
      int v12 = *a4;
      v14 += 160;
      if (160 * v11 == v14) {
        goto LABEL_14;
      }
    }
    if (v11 + 1 != v16)
    {
      uint64_t v28 = checkSpan_0(a1, a3, (uint64_t *)(v17 + 160 * v16 + 56));
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v28 = checkSpan_0(a1, a3, (uint64_t *)(*a2 + v14 + 56));
        if ((v28 & 0x80000000) == 0)
        {
          uint64_t v29 = *a2;
          uint64_t v30 = *(void *)(*a2 + 160 * v16 + 56);
          *(_DWORD *)(v30 + 48) = 1;
          *(_WORD *)(v30 + 56) = v16;
          *(_WORD *)(v30 + 58) = v15;
          uint64_t v31 = *(void *)(v29 + v14 + 56);
          *(_DWORD *)(v31 + 52) = 1;
          *(_WORD *)(v31 + 56) = v16;
          int v32 = *(void **)(a1 + 8);
          int v33 = cstdlib_strlen(a5);
          uint64_t v34 = heap_Calloc(v32, 1, (v33 - 1));
          *(void *)(*(void *)(*a2 + 160 * v16 + 56) + 64) = v34;
          if (!v34)
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v35, v36, v37, v38, v52);
            return 2313166858;
          }
          uint64_t v39 = (char *)v34;
          size_t v40 = cstdlib_strlen(a5 + 1);
          cstdlib_strncpy(v39, a5 + 1, v40 - 1);
          uint64_t v41 = (uint64_t *)(*(void *)(*a2 + 160 * v16 + 48) + 16);
          int v42 = cstdlib_strlen(a5);
          uint64_t v28 = checkAllocAndZero(a1, v41, v42 + 1);
          if ((v28 & 0x80000000) == 0)
          {
            cstdlib_strcat(*(char **)(*(void *)(*a2 + 160 * v16 + 48) + 16), "B-");
            unsigned int v43 = (char *)(*(void *)(*(void *)(*a2 + 160 * v16 + 48) + 16) + 2);
            size_t v44 = cstdlib_strlen(a5 + 1);
            cstdlib_strncpy(v43, a5 + 1, v44 - 1);
            unsigned __int16 v45 = v16 + 1;
            if ((unsigned __int16)(v16 + 1) > v15) {
              return 0;
            }
            while (1)
            {
              uint64_t v46 = v45;
              uint64_t v47 = (uint64_t *)(*(void *)(*a2 + 160 * v45 + 48) + 16);
              int v48 = cstdlib_strlen(a5);
              uint64_t v28 = checkAllocAndZero(a1, v47, v48 + 1);
              if ((v28 & 0x80000000) != 0) {
                break;
              }
              cstdlib_strcat(*(char **)(*(void *)(*a2 + 160 * v46 + 48) + 16), "I-");
              int v49 = (char *)(*(void *)(*(void *)(*a2 + 160 * v46 + 48) + 16) + 2);
              size_t v50 = cstdlib_strlen(a5 + 1);
              cstdlib_strncpy(v49, a5 + 1, v50 - 1);
              uint64_t v22 = 0;
              unsigned __int16 v45 = v46 + 1;
              if ((unsigned __int16)(v46 + 1) > v15) {
                return v22;
              }
            }
          }
        }
      }
      return v28;
    }
  }
LABEL_14:
  uint64_t v22 = 2313166848;
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not resolve token positions (find start and end) : token=%s from=%d to=%d", a6, a7, a8, (uint64_t)a5);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"word[%d] %d,%d", v23, v24, v25, v27++);
      v26 += 160;
    }
    while (v27 < *((unsigned __int16 *)a2 + 4));
  }
  return v22;
}

unsigned __int16 **setPhoneticRange_0(unsigned __int16 **result, unsigned int a2, unsigned int a3)
{
  if (*((_WORD *)result + 4))
  {
    uint64_t v3 = *result;
    uint64_t v4 = *((unsigned __int16 *)result + 4) - 1;
    do
    {
      unsigned int v5 = *v3;
      if (v5 >= a2 && v3[1] <= a3) {
        *((_DWORD *)v3 + 10) = 1;
      }
      BOOL v6 = v5 > a3 || v4-- == 0;
      v3 += 80;
    }
    while (!v6);
  }
  return result;
}

uint64_t markPhoneticRegions(uint64_t a1, uint64_t *a2)
{
  LOWORD(v2) = *((_WORD *)a2 + 4);
  if (!(_WORD)v2) {
    return 0;
  }
  int v5 = 0;
  while (1)
  {
    if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v5 + 40) == 1
      && (unsigned __int16)v5 < (unsigned __int16)v2)
    {
      uint64_t v6 = *a2;
      if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v5 + 40) == 1) {
        break;
      }
    }
    int v8 = v5;
LABEL_18:
    int v5 = v8 + 1;
    if ((unsigned __int16)(v8 + 1) >= (unsigned __int16)v2) {
      return 0;
    }
  }
  uint64_t v7 = 160 * (unsigned __int16)v5;
  int v8 = v5;
  while (1)
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + v7 + 48) + 24);
    if (v9)
    {
      heap_Free(*(void **)(a1 + 8), v9);
      uint64_t v10 = *a2 + v7;
      *(void *)(*(void *)(v10 + 48) + 24) = 0;
      heap_Free(*(void **)(a1 + 8), *(void *)(v10 + 104));
      *(void *)(*a2 + v7 + 104) = 0;
    }
    uint64_t v11 = *(void **)(a1 + 8);
    int v12 = cstdlib_strlen("B-PH");
    long long v13 = (char *)heap_Calloc(v11, 1, (v12 + 1));
    *(void *)(*a2 + v7 + 104) = v13;
    if (!v13) {
      break;
    }
    unsigned int v18 = (unsigned __int16)v8 == (unsigned __int16)v5 ? "B-PH" : "I-PH";
    cstdlib_strcpy(v13, v18);
    unsigned int v19 = *(void **)(a1 + 8);
    int v20 = cstdlib_strlen("UNK");
    uint64_t v21 = (char *)heap_Calloc(v19, 1, (v20 + 1));
    *(void *)(*(void *)(*a2 + v7 + 48) + 24) = v21;
    if (!v21) {
      break;
    }
    cstdlib_strcpy(v21, "UNK");
    ++v8;
    unsigned int v2 = *((unsigned __int16 *)a2 + 4);
    if (v2 > (unsigned __int16)v8)
    {
      uint64_t v6 = *a2;
      v7 += 160;
      if (*(_DWORD *)(*a2 + 160 * (unsigned __int16)v8 + 40) == 1) {
        continue;
      }
    }
    goto LABEL_18;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, v23);
  return 2313166858;
}

uint64_t resolvePHR_0(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  if (!a4[4]) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  do
  {
    if (v11)
    {
      long long v13 = (unsigned __int16 *)(*(void *)a4 + v11);
      if (!*((void *)v13 + 13))
      {
        unsigned int v14 = v12 - 1;
        uint64_t v15 = *(const char **)(*(void *)a4 + 160 * (v12 - 1) + 104);
        if (v15)
        {
          unint64_t v16 = *v13;
          if (v16 >= 2 && *(unsigned char *)(a1 + (v16 - 1)) == 95)
          {
            uint64_t v17 = *(void **)(a2 + 8);
            int v18 = cstdlib_strlen(v15);
            unsigned int v19 = (char *)heap_Calloc(v17, 1, (v18 + 3));
            uint64_t v24 = *(void *)a4;
            *(void *)(*(void *)a4 + v11 + 104) = v19;
            if (!v19) {
              goto LABEL_68;
            }
            cstdlib_strcpy(v19, *(const char **)(v24 + 160 * v14 + 104));
            if (cstdlib_strcmp(*(const char **)(*(void *)a4 + v11 + 104), "O")) {
              **(unsigned char **)(*(void *)a4 + v11 + 104) = 73;
            }
            uint64_t v25 = *(void *)a4;
            uint64_t v26 = *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24);
            if (v26)
            {
              heap_Free(*(void **)(a2 + 8), v26);
              uint64_t v25 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
            }
            unint64_t v27 = *(void **)(a2 + 8);
            int v28 = cstdlib_strlen(*(const char **)(*(void *)(v25 + 160 * v14 + 48) + 24));
            uint64_t v29 = (char *)heap_Calloc(v27, 1, (v28 + 3));
            uint64_t v30 = *(void *)a4;
            *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v29;
            if (!v29) {
              goto LABEL_68;
            }
            cstdlib_strcpy(v29, *(const char **)(*(void *)(v30 + 160 * v14 + 48) + 24));
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[1] set missing PHR on word : word index=%d to %s (also copy POS %s)", v31, v32, v33, v12);
          }
          else
          {
            int v34 = *(unsigned __int8 *)v15;
            if (v34 == 66)
            {
              int v48 = *(void **)(a2 + 8);
              int v49 = cstdlib_strlen(v15);
              size_t v50 = (char *)heap_Calloc(v48, 1, (v49 + 3));
              uint64_t v51 = *(void *)a4;
              *(void *)(*(void *)a4 + v11 + 104) = v50;
              if (!v50) {
                goto LABEL_68;
              }
              cstdlib_strcpy(v50, *(const char **)(v51 + 160 * v14 + 104));
              **(unsigned char **)(*(void *)a4 + v11 + 104) = 73;
              uint64_t v52 = *(void *)a4;
              uint64_t v53 = *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24);
              if (v53)
              {
                heap_Free(*(void **)(a2 + 8), v53);
                uint64_t v52 = *(void *)a4;
                *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
              }
              uint64_t v54 = *(void **)(a2 + 8);
              int v55 = cstdlib_strlen(*(const char **)(*(void *)(v52 + 160 * v14 + 48) + 24));
              uint64_t v56 = (char *)heap_Calloc(v54, 1, (v55 + 3));
              uint64_t v57 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v56;
              if (!v56)
              {
LABEL_68:
                uint64_t v95 = 2313166858;
                log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_POS", 35000, 0, v20, v21, v22, v23, v97);
                return v95;
              }
              cstdlib_strcpy(v56, *(const char **)(*(void *)(v57 + 160 * v14 + 48) + 24));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[3] set missing PHR on word : word index=%d to %s (also copy POS %s)", v58, v59, v60, v12);
            }
            else if (v34 == 79 || v34 == 73)
            {
              uint64_t v35 = *(void **)(a2 + 8);
              int v36 = cstdlib_strlen(v15);
              uint64_t v37 = (char *)heap_Calloc(v35, 1, (v36 + 3));
              uint64_t v38 = *(void *)a4;
              *(void *)(*(void *)a4 + v11 + 104) = v37;
              if (!v37) {
                goto LABEL_68;
              }
              cstdlib_strcpy(v37, *(const char **)(v38 + 160 * v14 + 104));
              uint64_t v39 = *(void *)a4;
              uint64_t v40 = *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24);
              if (v40)
              {
                heap_Free(*(void **)(a2 + 8), v40);
                uint64_t v39 = *(void *)a4;
                *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = 0;
              }
              uint64_t v41 = *(void **)(a2 + 8);
              int v42 = cstdlib_strlen(*(const char **)(*(void *)(v39 + 160 * v14 + 48) + 24));
              unsigned int v43 = (char *)heap_Calloc(v41, 1, (v42 + 3));
              uint64_t v44 = *(void *)a4;
              *(void *)(*(void *)(*(void *)a4 + v11 + 48) + 24) = v43;
              if (!v43) {
                goto LABEL_68;
              }
              cstdlib_strcpy(v43, *(const char **)(*(void *)(v44 + 160 * v14 + 48) + 24));
              log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[2] set missing PHR on word : word index=%d to %s (also copy POS %s)", v45, v46, v47, v12);
            }
          }
        }
      }
    }
    ++v12;
    unint64_t v61 = (unsigned __int16)a4[4];
    v11 += 160;
  }
  while (v12 < v61);
  if (!a4[4]) {
    return 0;
  }
  uint64_t v62 = 0;
  unsigned int v63 = (void *)(*(void *)a4 + 104);
  do
  {
    if (!*v63)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"could not work out PHR on word : word index=%d", a6, a7, a8, v62);
      return 2313166848;
    }
    ++v62;
    v63 += 20;
  }
  while (v61 != v62);
  unint64_t v64 = 0;
  uint64_t v65 = 104;
  do
  {
    if (!cstdlib_strncmp(*(const char **)(*(void *)a4 + v65), "I-", 2uLL))
    {
      uint64_t v69 = *(void *)a4;
      if (v64)
      {
        if (cstdlib_strcmp(*(const char **)(v69 + 160 * (v64 - 1) + 104), *(const char **)(v69 + v65)))
        {
          cstdlib_strcpy(__dst, *(const char **)(*(void *)a4 + v65));
          __dst[0] = 66;
          if (cstdlib_strcmp(*(const char **)(*(void *)a4 + 160 * (v64 - 1) + 104), __dst))
          {
            **(unsigned char **)(*(void *)a4 + v65) = 66;
            log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v70, v71, v72, v64);
          }
        }
      }
      else
      {
        **(unsigned char **)(v69 + 104) = 66;
        log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Error : no B- preceding I- PHR : change PHR on word %d to %s", v66, v67, v68, 0);
      }
    }
    ++v64;
    v65 += 160;
  }
  while (v64 < (unsigned __int16)a4[4]);
  if (!a4[4]) {
    return 0;
  }
  uint64_t v73 = 0;
  int v74 = 0;
  do
  {
    cstdlib_strcpy(__dst, *(const char **)(*(void *)a4 + 160 * (unsigned __int16)v74 + 104));
    if (!cstdlib_strncmp(__dst, "B-", 2uLL)) {
      cstdlib_strcpy(__dst, (const char *)(*(void *)(*(void *)a4 + 160 * (unsigned __int16)v74 + 104) + 2));
    }
    int v78 = v74;
    if ((unsigned __int16)a4[4] > (unsigned __int16)v74)
    {
      int v78 = v74;
      do
      {
        uint64_t v79 = *(const char **)(*(void *)a4 + 160 * (unsigned __int16)v78 + 104);
        if (!v79
          || (cstdlib_strlen(v79) < 3
           || cstdlib_strcmp((const char *)(*(void *)(*(void *)a4 + 160 * (unsigned __int16)v78 + 104) + 2), __dst)|| cstdlib_strncmp(*(const char **)(*(void *)a4 + 160 * (unsigned __int16)v78 + 104), "I-", 2uLL))&& *(unsigned __int16 *)(*(void *)a4 + 160 * (unsigned __int16)v78 + 4) != *(unsigned __int16 *)(*(void *)a4 + 160 * (unsigned __int16)v74 + 4))
        {
          break;
        }
        ++v78;
      }
      while ((unsigned __int16)a4[4] > (unsigned __int16)v78);
    }
    unsigned __int16 v80 = v78 - 1;
    log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"[3] add syn chunk %s from %d to %d", v75, v76, v77, (uint64_t)__dst);
    unsigned int v84 = (unsigned __int16)a4[4];
    if ((unsigned __int16)v74 > (unsigned __int16)(v78 - 1) || v84 <= (unsigned __int16)v74 || v84 <= v80)
    {
      log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"syntactic chunks out of order: fromWordIdx=%d toWordIdx=%d numWords=%d", v81, v82, v83, v73);
      return 2313166848;
    }
    uint64_t v85 = checkSpan_0(a2, a3, (uint64_t *)(*(void *)a4 + 160 * (unsigned __int16)v74 + 56));
    if ((v85 & 0x80000000) != 0) {
      return v85;
    }
    uint64_t v85 = checkSpan_0(a2, a3, (uint64_t *)(*(void *)a4 + 160 * (unsigned __int16)(v78 - 1) + 56));
    if ((v85 & 0x80000000) != 0) {
      return v85;
    }
    uint64_t v86 = *(void *)a4;
    uint64_t v87 = *(void *)(*(void *)a4 + 160 * (unsigned __int16)v74 + 56);
    *(_DWORD *)(v87 + 96) = 1;
    *(_WORD *)(v87 + 104) = v74;
    *(_WORD *)(v87 + 106) = v80;
    uint64_t v88 = *(void *)(v86 + 160 * (unsigned __int16)(v78 - 1) + 56);
    *(_DWORD *)(v88 + 100) = 1;
    *(_WORD *)(v88 + 104) = v74;
    uint64_t v89 = *(void **)(a2 + 8);
    int v90 = cstdlib_strlen(__dst);
    int v91 = (char *)heap_Calloc(v89, 1, (v90 + 1));
    *(void *)(*(void *)(*(void *)a4 + 160 * (unsigned __int16)v74 + 56) + 112) = v91;
    if (!v91) {
      goto LABEL_68;
    }
    cstdlib_strcpy(v91, __dst);
    if ((unsigned __int16)v74 == (unsigned __int16)v78) {
      int v74 = v78 + 1;
    }
    else {
      int v74 = v78;
    }
    uint64_t v73 = (unsigned __int16)v74;
  }
  while ((unsigned __int16)v74 < (unsigned __int16)a4[4]);
  if (!a4[4]) {
    return 0;
  }
  unint64_t v92 = 0;
  uint64_t v93 = *(void *)a4;
  uint64_t v94 = 104;
  do
  {
    heap_Free(*(void **)(a2 + 8), *(void *)(v93 + v94));
    uint64_t v95 = 0;
    uint64_t v93 = *(void *)a4;
    *(void *)(*(void *)a4 + v94) = 0;
    ++v92;
    v94 += 160;
  }
  while (v92 < (unsigned __int16)a4[4]);
  return v95;
}

uint64_t setPotentialPOSTags(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __s2[0] = *(unsigned char *)(a2 + 120);
  __s2[1] = 0;
  if (*((_WORD *)a3 + 4))
  {
    unint64_t v6 = 0;
    uint64_t v7 = *a3;
    do
    {
      if (*(_WORD *)(v7 + 160 * v6 + 72))
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        int v10 = 0;
        do
        {
          v10 += cstdlib_strlen((const char *)(*(void *)(a2 + 296)
                                             + *(unsigned int *)(*(void *)(a2 + 304)
                                                               + 4
                                                               * *(unsigned int *)(*(void *)(v7 + 160 * v6 + 64) + v8))));
          ++v9;
          uint64_t v7 = *a3;
          unint64_t v11 = *(unsigned __int16 *)(*a3 + 160 * v6 + 72);
          v8 += 24;
        }
        while (v9 < v11);
        *(void *)(v7 + 160 * v6 + 80) = 0;
        if ((_WORD)v10)
        {
          uint64_t v12 = heap_Calloc(*(void **)(a1 + 8), 1, 2 * v11 + (unsigned __int16)v10 + 1);
          uint64_t v17 = *a3;
          *(void *)(*a3 + 160 * v6 + 80) = v12;
          if (!v12)
          {
            log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v13, v14, v15, v16, v25);
            return 2313166858;
          }
          if (*(_WORD *)(v17 + 160 * v6 + 72))
          {
            uint64_t v18 = 0;
            unint64_t v19 = 0;
            uint64_t v20 = __dst;
            do
            {
              cstdlib_strcpy(v20, (const char *)(*(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304)+ 4 * *(unsigned int *)(*(void *)(v17 + 160 * v6 + 64) + v18))));
              ++v19;
              uint64_t v17 = *a3;
              unint64_t v21 = *(unsigned __int16 *)(*a3 + 160 * v6 + 72);
              v20 += 16;
              v18 += 24;
            }
            while (v19 < v21);
          }
          else
          {
            unint64_t v21 = 0;
          }
          ssft_qsort((uint64_t)__dst, v21, 16, (uint64_t (*)(unint64_t, unint64_t))string_cmp);
          cstdlib_strcpy(*(char **)(*a3 + 160 * v6 + 80), __dst);
          uint64_t v7 = *a3;
          if (*(unsigned __int16 *)(*a3 + 160 * v6 + 72) >= 2u)
          {
            uint64_t v22 = (const char *)&v27;
            unint64_t v23 = 1;
            do
            {
              cstdlib_strcat(*(char **)(v7 + 160 * v6 + 80), __s2);
              cstdlib_strcat(*(char **)(*a3 + 160 * v6 + 80), v22);
              ++v23;
              uint64_t v7 = *a3;
              v22 += 16;
            }
            while (v23 < *(unsigned __int16 *)(*a3 + 160 * v6 + 72));
          }
        }
      }
      else
      {
        *(void *)(v7 + 160 * v6 + 80) = 0;
      }
      ++v6;
    }
    while (v6 < *((unsigned __int16 *)a3 + 4));
  }
  return 0;
}

uint64_t printSent_0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)a3 + 25))
  {
    int v8 = a6;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Sentence :%s", a6, a7, a8, a4);
    if (*((_WORD *)a3 + 4))
    {
      uint64_t v13 = 0;
      int v43 = v8;
      while (1)
      {
        sprintf((char *)a3[11], "[%2d] ", v13);
        uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v15 = (const char *)*a3;
        if (*(_DWORD *)(*a3 + 160 * v13 + 44) == 1)
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "*DUMMY* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = (const char *)*a3;
        }
        if (*(_DWORD *)&v15[160 * v13 + 8] == 1)
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "*OOV* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = (const char *)*a3;
        }
        if (*(unsigned __int16 *)&v15[160 * v13 + 72] >= 2u)
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "*AMB* ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v15 = (const char *)*a3;
        }
        cstdlib_strncpy((char *)a3[11], **(const char ***)&v15[160 * v13 + 48], 0x14uLL);
        unsigned int v16 = (unsigned __int16)cstdlib_strlen(**(const char ***)(*a3 + 160 * v13 + 48));
        if (v16 <= 0x13)
        {
          do
            cstdlib_strcat((char *)a3[11], " ");
          while (v16++ < 0x13);
        }
        uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, " ");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        if (*(void *)(*a3 + 160 * v13 + 120))
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "canon=");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, *(char **)(*a3 + 160 * v13 + 120));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, " ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        if (v43 == 1)
        {
          uint64_t v18 = (const char *)*a3;
          if (*(_DWORD *)(*a3 + 160 * v13 + 24) == 1)
          {
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "DCTWORD ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v18 = (const char *)*a3;
          }
          if (*(_DWORD *)&v18[160 * v13 + 16] == 1)
          {
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "FollowedByUnderscore ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v18 = (const char *)*a3;
          }
          if (*(_DWORD *)&v18[160 * v13 + 20] == 1)
          {
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "FollowedBySpace ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
          }
        }
        uint64_t v19 = *a3 + 160 * v13;
        if (a5 == 1) {
          break;
        }
        if (*(void *)(v19 + 88))
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "PREDICTEDPOS=");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          unint64_t v21 = *(char **)(*a3 + 160 * v13 + 88);
LABEL_39:
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, v21);
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        uint64_t v22 = (const char *)*a3;
        if (*(void *)(*a3 + 160 * v13 + 104))
        {
          sprintf((char *)a3[11], "tmphr=%4s ", *(const char **)(*a3 + 160 * v13 + 104));
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v22 = (const char *)*a3;
        }
        if (*(void *)&v22[160 * v13 + 112])
        {
          sprintf((char *)a3[11], "retag=%4s ", *(const char **)&v22[160 * v13 + 112]);
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v22 = (const char *)*a3;
        }
        unint64_t v23 = *(const char **)(*(void *)&v22[160 * v13 + 48] + 16);
        if (!v23) {
          unint64_t v23 = " ";
        }
        sprintf((char *)a3[11], " %6s ", v23);
        uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v24 = (const char *)*a3;
        if (*(_DWORD *)(*a3 + 160 * v13 + 12))
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "_HASCOMMA ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t v24 = (const char *)*a3;
        }
        if (*(_DWORD *)&v24[160 * v13 + 40])
        {
          uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, " bPHONETIC ");
          if ((result & 0x80000000) != 0) {
            return result;
          }
        }
        int v42 = a5;
        if (*(_WORD *)(a2 + 376))
        {
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          do
          {
            uint64_t v27 = (const char *)*a3;
            uint64_t v28 = *(void *)(*a3 + 160 * v13 + 56);
            if (v28)
            {
              if (*(_DWORD *)(v28 + v25) != 1) {
                goto LABEL_96;
              }
              sprintf((char *)a3[11], "<%s ", *(const char **)(v28 + v25 + 16));
              uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              uint64_t v27 = (const char *)*a3;
              uint64_t v28 = *(void *)(*a3 + 160 * v13 + 56);
              if (v28)
              {
LABEL_96:
                uint64_t v29 = v28 + v25;
                if (*(_DWORD *)(v29 + 4) == 1)
                {
                  sprintf((char *)a3[11], "%s> ", *(const char **)(*(void *)&v27[160 * *(unsigned __int16 *)(v29 + 8) + 56] + v25 + 16));
                  uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
                  if ((result & 0x80000000) != 0) {
                    return result;
                  }
                }
              }
            }
            ++v26;
            v25 += 24;
          }
          while (v26 < *(unsigned __int16 *)(a2 + 376));
        }
        uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, " uniqueTagRecs:");
        if ((result & 0x80000000) != 0) {
          return result;
        }
        uint64_t v33 = (const char *)*a3;
        if (*(_WORD *)(*a3 + 160 * v13 + 72))
        {
          unint64_t v34 = 0;
          uint64_t v41 = a2;
          while (1)
          {
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "<RETAG=");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)(*(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304)+ 4 * *(unsigned int *)(*(void *)(*a3 + 160 * v13 + 64) + 24 * v34))));
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, ",");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            uint64_t v35 = *(void *)(*a3 + 160 * v13 + 64);
            if (*(_WORD *)(v35 + 24 * v34 + 16))
            {
              uint64_t v36 = 0;
              unint64_t v37 = 0;
              do
              {
                uint64_t v38 = (unsigned __int16 *)(*(void *)(v35 + 24 * v34 + 8) + v36);
                uint64_t v39 = "*KEEP*";
                if (*((_DWORD *)v38 + 1) != 1) {
                  uint64_t v39 = "";
                }
                uint64_t v40 = "*SPLIT*";
                if (*((_DWORD *)v38 + 2) != 1) {
                  uint64_t v40 = "";
                }
                sprintf((char *)a3[11], "[%s%s%d,", v39, v40, *v38);
                uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, (char *)a3[11]);
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, *(char **)(*(void *)(*(void *)(*a3 + 160 * v13 + 64) + 24 * v34 + 8) + v36 + 16));
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "]");
                if ((result & 0x80000000) != 0) {
                  return result;
                }
                ++v37;
                uint64_t v35 = *(void *)(*a3 + 160 * v13 + 64);
                v36 += 24;
              }
              while (v37 < *(unsigned __int16 *)(v35 + 24 * v34 + 16));
            }
            uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "> ");
            if ((result & 0x80000000) != 0) {
              return result;
            }
            ++v34;
            uint64_t v33 = (const char *)*a3;
            a2 = v41;
            if (v34 >= *(unsigned __int16 *)(*a3 + 160 * v13 + 72))
            {
              a5 = v42;
              if (!*(_WORD *)(*a3 + 160 * v13 + 72) || !*(void *)&v33[160 * v13 + 80]) {
                goto LABEL_88;
              }
              uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "<POTENTIALTAGS=");
              if ((result & 0x80000000) == 0)
              {
                uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, *(char **)(*a3 + 160 * v13 + 80));
                if ((result & 0x80000000) == 0)
                {
                  uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "> ");
                  if ((result & 0x80000000) == 0)
                  {
                    uint64_t v33 = (const char *)*a3;
                    goto LABEL_88;
                  }
                }
              }
              return result;
            }
          }
        }
        a5 = v42;
LABEL_88:
        if (!*(void *)&v33[160 * v13 + 88]
          || (uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, "PREDICTEDPOS="),
              (result & 0x80000000) == 0)
          && (uint64_t result = statPOS_add2Str(a1, (const char **)a3 + 10, (unsigned __int16 *)a3 + 48, *(char **)(*a3 + 160 * v13 + 88)), (result & 0x80000000) == 0))
        {
          log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v30, v31, v32, a3[10]);
          cstdlib_strcpy((char *)a3[10], "");
          uint64_t result = 0;
          if (++v13 < (unint64_t)*((unsigned __int16 *)a3 + 4)) {
            continue;
          }
        }
        return result;
      }
      uint64_t v20 = *(const char **)(*(void *)(v19 + 48) + 24);
      if (!v20) {
        uint64_t v20 = " ";
      }
      sprintf((char *)a3[11], "%4s ", v20);
      unint64_t v21 = (char *)a3[11];
      goto LABEL_39;
    }
  }
  return 0;
}

void *statpos_freeSentenceData(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[91];
  if (v3)
  {
    heap_Free(*(void **)(v2 + 8), v3);
    a1[91] = 0;
    *((_WORD *)a1 + 372) = 0;
  }
  uint64_t v4 = a1[92];
  if (v4)
  {
    heap_Free(*(void **)(v2 + 8), v4);
    a1[92] = 0;
  }
  int v5 = a1 + 81;
  uint64_t v6 = a1[81];
  if (*((_WORD *)a1 + 328))
  {
    unint64_t v7 = 0;
    do
    {
      if (*(void *)(v6 + 160 * v7 + 104))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 104));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 104) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 136))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 136));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 136) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 112))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 112));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 112) = 0;
      }
      uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
      if (v8)
      {
        unsigned __int16 v9 = *((_WORD *)a1 + 192);
        if (v9)
        {
          for (unint64_t i = 0; i < v9; ++i)
          {
            uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
            if (*(void *)(v8 + 8 * i))
            {
              heap_Free(*(void **)(v2 + 8), *(void *)(v8 + 8 * i));
              uint64_t v6 = a1[81];
              uint64_t v8 = *(void *)(v6 + 160 * v7 + 48);
              *(void *)(v8 + 8 * i) = 0;
              unsigned __int16 v9 = *((_WORD *)a1 + 192);
            }
          }
        }
        heap_Free(*(void **)(v2 + 8), v8);
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 48) = 0;
      }
      uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
      if (v11)
      {
        unsigned __int16 v12 = *((_WORD *)a1 + 192);
        if (v12)
        {
          unint64_t v13 = 0;
          uint64_t v14 = 16;
          do
          {
            uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
            if (*(void *)(v11 + v14))
            {
              heap_Free(*(void **)(v2 + 8), *(void *)(v11 + v14));
              uint64_t v6 = a1[81];
              uint64_t v11 = *(void *)(v6 + 160 * v7 + 56);
              *(void *)(v11 + v14) = 0;
              unsigned __int16 v12 = *((_WORD *)a1 + 192);
            }
            ++v13;
            v14 += 24;
          }
          while (v13 < v12);
        }
        heap_Free(*(void **)(v2 + 8), v11);
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 56) = 0;
      }
      if (*(_WORD *)(v6 + 160 * v7 + 72))
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(v6 + 160 * v7 + 64);
          if (*(_WORD *)(v16 + 24 * v15 + 16))
          {
            unint64_t v17 = 0;
            uint64_t v18 = 16;
            do
            {
              uint64_t v19 = *(void *)(*(void *)(v16 + 24 * v15 + 8) + v18);
              if (v19)
              {
                heap_Free(*(void **)(v2 + 8), v19);
                uint64_t v16 = *(void *)(*v5 + 160 * v7 + 64);
                *(void *)(*(void *)(v16 + 24 * v15 + 8) + v18) = 0;
              }
              ++v17;
              v18 += 24;
            }
            while (v17 < *(unsigned __int16 *)(v16 + 24 * v15 + 16));
            heap_Free(*(void **)(v2 + 8), *(void *)(v16 + 24 * v15 + 8));
            uint64_t v6 = *v5;
            uint64_t v20 = *(void *)(*v5 + 160 * v7 + 64) + 24 * v15;
            *(void *)(v20 + 8) = 0;
            *(_DWORD *)(v20 + 16) = 0;
          }
          ++v15;
        }
        while (v15 < *(unsigned __int16 *)(v6 + 160 * v7 + 72));
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 64));
        uint64_t v6 = *v5;
        uint64_t v21 = *v5 + 160 * v7;
        *(void *)(v21 + 64) = 0;
        *(_DWORD *)(v21 + 72) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 80))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 80));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 80) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 88))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 88));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 88) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 120))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 120));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 120) = 0;
      }
      if (*(void *)(v6 + 160 * v7 + 32))
      {
        heap_Free(*(void **)(v2 + 8), *(void *)(v6 + 160 * v7 + 32));
        uint64_t v6 = *v5;
        *(void *)(*v5 + 160 * v7 + 32) = 0;
      }
      ++v7;
    }
    while (v7 < *((unsigned __int16 *)a1 + 328));
  }
  else if (!v6)
  {
    goto LABEL_49;
  }
  heap_Free(*(void **)(v2 + 8), v6);
  *int v5 = 0;
LABEL_49:

  return cstdlib_memset(a1 + 81, 0, 0x88uLL);
}

uint64_t statpos_updateNLULingdbField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v27 = 0;
  unsigned int v28 = 0;
  uint64_t v25 = 0;
  uint64_t v8 = (unsigned __int16 *)(a4 + 648);
  uint64_t v9 = *(void *)a4;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 656);
  if (*(_WORD *)(a4 + 656))
  {
    uint64_t v11 = (_DWORD *)(*(void *)v8 + 152);
    do
    {
      *uint64_t v11 = 0;
      v11 += 40;
      --v10;
    }
    while (v10);
  }
  int v30 = 0;
  int v31 = 0;
  unsigned __int16 v29 = 0;
  v32[0] = *(unsigned char *)(a4 + 128);
  v32[1] = 0;
  cstdlib_memset(__b, 0, 0x20uLL);
  uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 1, 0, &v31);
  if ((WordIdx_0 & 0x80000000) != 0) {
    return WordIdx_0;
  }
  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, (unsigned __int16)v31, 0, (char *)&v31 + 2);
  if ((updated & 0x80000000) == 0 && HIWORD(v31) == 1)
  {
    uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, unsigned __int16 *))(a1 + 176))(a2, a3, (unsigned __int16)v31, 0, &v25, &v29);
    if ((updated & 0x80000000) == 0 && v29 >= 2u)
    {
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v31, (char *)&v30 + 2);
      if ((updated & 0x80000000) == 0)
      {
        unsigned __int16 v26 = 0;
        cstdlib_strcpy(*(char **)(a4 + 728), "");
        unsigned __int16 v14 = HIWORD(v30);
        if (!HIWORD(v30))
        {
LABEL_39:
          cstdlib_strcpy(*(char **)(a4 + 728), "");
          return updated;
        }
        while (1)
        {
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v14, &v30);
          if ((WordIdx_0 & 0x80000000) != 0) {
            return WordIdx_0;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 0, 1, &v28, &v29);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v28 <= 0xA && ((1 << v28) & 0x610) != 0)
          {
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 1, 1, &v27, &v29);
            if ((WordIdx_0 & 0x80000000) != 0) {
              return WordIdx_0;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, unsigned __int16 *))(a1 + 168))(a2, a3, HIWORD(v30), 2, 1, (char *)&v27 + 2, &v29);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if ((unsigned __int16)v27 != HIWORD(v27))
            {
              uint64_t WordIdx_0 = getWordIdx_0(v9, v8, (unsigned __int16)v27, HIWORD(v27), &v26, v16, v17, v18);
              if ((WordIdx_0 & 0x80000000) != 0) {
                return WordIdx_0;
              }
              uint64_t v19 = *(void *)v8;
              unsigned int v20 = v26;
              if (*(_DWORD *)(*(void *)v8 + 160 * v26 + 44) || *(_DWORD *)(v19 + 160 * v26 + 152))
              {
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v30));
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
              }
              else
              {
                uint64_t v21 = *(void *)(v19 + 160 * v26 + 56);
                if (v21 && (uint64_t v22 = *(const char **)(v21 + 112)) != 0)
                {
                  if (cstdlib_strcmp(v22, "O"))
                  {
                    cstdlib_strcpy(__b, "B-");
                    cstdlib_strcat(__b, *(const char **)(*(void *)(*(void *)v8 + 160 * v20 + 56) + 112));
                    size_t v23 = cstdlib_strlen(__b);
                    if (!cstdlib_strcmp(&__b[v23 - 2], "-P")) {
                      __b[cstdlib_strlen(__b) - 2] = 0;
                    }
                  }
                  else
                  {
                    cstdlib_strcpy(__b, *(const char **)(*(void *)(*(void *)v8 + 160 * v20 + 56) + 112));
                  }
                }
                else if (__b[0] && cstdlib_strcmp(__b, "O"))
                {
                  __b[0] = 73;
                }
                uint64_t updated = updateNLUField_0(v9, a1, a2, a3, HIWORD(v30), a4 + 8, (uint64_t *)v8, v20, *(char **)(*(void *)(*(void *)v8 + 160 * v20 + 48) + 24), __b, v32, 1);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                *(_DWORD *)(*(void *)v8 + 160 * v20 + 152) = 1;
              }
            }
          }
          unsigned __int16 v14 = v30;
          HIWORD(v30) = v30;
          if (!(_WORD)v30) {
            goto LABEL_39;
          }
        }
      }
    }
  }
  return updated;
}

uint64_t getWordIdx_0(uint64_t a1, unsigned __int16 *a2, unsigned int a3, int a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[4])
  {
    uint64_t v8 = 0;
    uint64_t v9 = (unsigned __int16 *)(*(void *)a2 + 2);
    while (*(v9 - 1) != a3 || *v9 != a4)
    {
      ++v8;
      v9 += 80;
      if (a2[4] == v8) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    *a5 = v8;
  }
  else
  {
LABEL_6:
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"cant align lingdb word : no word found with pos=%d,%d", a6, a7, a8, a3);
    return 2313166848;
  }
  return result;
}

uint64_t updateNLUField_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int a8, char *a9, char *a10, const char *a11, int a12)
{
  uint64_t v15 = a5;
  int v51 = 0;
  __int16 v50 = 0;
  __src = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a2 + 184))(a3, a4, a5, 14, (char *)&v51 + 2);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (!HIWORD(v51))
  {
    unsigned int v48 = a8;
LABEL_7:
    uint64_t v21 = "";
    __src = "";
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, int *))(a2 + 176))(a3, a4, v15, 14, &__src, &v51);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  unsigned int v48 = a8;
  if ((unsigned __int16)v51 < 2u) {
    goto LABEL_7;
  }
  uint64_t v21 = __src;
LABEL_8:
  size_t v22 = cstdlib_strlen(v21) + 1;
  if (a9)
  {
    size_t v23 = cstdlib_strlen(";POS:");
    v22 += v23 + cstdlib_strlen(a9);
  }
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  if (a10)
  {
    size_t v24 = cstdlib_strlen(";PHR:");
    v22 += v24 + cstdlib_strlen(a10);
  }
  uint64_t v47 = a1;
  if (a11 && a12 == 1)
  {
    v22 += cstdlib_strlen(";MAPTAGS:");
    uint64_t v25 = *a7;
    if (*(_WORD *)(*a7 + 160 * v48 + 72))
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        size_t v28 = cstdlib_strlen((const char *)(*(void *)(a6 + 296)
                                          + *(unsigned int *)(*(void *)(a6 + 304)
                                                            + 4
                                                            * *(unsigned int *)(*(void *)(v25 + 160 * v48 + 64) + v26))));
        v22 += v28 + cstdlib_strlen(a11);
        ++v27;
        uint64_t v25 = *a7;
        v26 += 24;
      }
      while (v27 < *(unsigned __int16 *)(*a7 + 160 * v48 + 72));
    }
    if (*(_DWORD *)(v25 + 160 * v48 + 8) == 1)
    {
      v22 += cstdlib_strlen(";OOV:1");
      uint64_t v25 = *a7;
    }
    a1 = v47;
    if (*(void *)(v25 + 160 * v48 + 120))
    {
      size_t v29 = cstdlib_strlen(";CANONICAL:");
      v22 += v29 + cstdlib_strlen(*(const char **)(*a7 + 160 * v48 + 120));
    }
    uint64_t v15 = v15;
  }
  if (v22 <= *((unsigned __int16 *)a7 + 48))
  {
    int v30 = (char *)a7[10];
  }
  else
  {
    int v30 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), a7[10], v22);
    if (!v30)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v31, v32, v33, v34, v44);
      return 2313166858;
    }
    *((_WORD *)a7 + 48) = v22;
    a7[10] = (uint64_t)v30;
  }
  cstdlib_strcpy(v30, __src);
  if (a9) {
    hlp_NLUStrSet((char *)a7[10], "POS", a9);
  }
  if (a10) {
    hlp_NLUStrSet((char *)a7[10], "PHR", a10);
  }
  if (a12 == 1)
  {
    uint64_t v38 = *a7;
    if (*(_WORD *)(*a7 + 160 * v48 + 72))
    {
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      do
      {
        hlp_NLUStrAppend((char *)a7[10], "MAPTAGS", (char *)(*(void *)(a6 + 296)+ *(unsigned int *)(*(void *)(a6 + 304)+ 4 * *(unsigned int *)(*(void *)(v38 + 160 * v48 + 64) + v39))), a11);
        ++v40;
        uint64_t v38 = *a7;
        v39 += 24;
      }
      while (v40 < *(unsigned __int16 *)(*a7 + 160 * v48 + 72));
    }
    if (*(_DWORD *)(v38 + 160 * v48 + 8) == 1)
    {
      hlp_NLUStrSet((char *)a7[10], "OOV", "1");
      uint64_t v38 = *a7;
    }
    uint64_t v41 = *(char **)(v38 + 160 * v48 + 120);
    a1 = v47;
    if (v41) {
      hlp_NLUStrSet((char *)a7[10], "CANONICAL", v41);
    }
  }
  log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"updating WordRecord[%d] word[%d] LD_W_NLU %s -> %s", v35, v36, v37, v15);
  int v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, __int16 *))(v45 + 160);
  __int16 v43 = cstdlib_strlen((const char *)a7[10]);
  return v42(v46, a4, v15, 14, (unsigned __int16)(v43 + 1), a7[10], &v50);
}

uint64_t checkWordRecPOS(uint64_t *a1, unsigned int a2, int a3, _DWORD *a4)
{
  *a4 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned __int16 *)(*a1 + 160 * a2 + 72);
  if (!*(_WORD *)(*a1 + 160 * a2 + 72)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t result = 0;
  uint64_t v8 = *(void *)(v4 + 160 * a2 + 64);
  do
  {
    uint64_t v9 = *(unsigned __int16 *)(v8 + 24 * v6 + 16);
    if (*(_WORD *)(v8 + 24 * v6 + 16))
    {
      uint64_t v10 = *(unsigned __int16 **)(v8 + 24 * v6 + 8);
      do
      {
        if (*((_DWORD *)v10 + 2) == 1 && *v10 == a3) {
          *a4 = 1;
        }
        if (*((_DWORD *)v10 + 1) == 1)
        {
          if (*v10 == a3) {
            uint64_t result = 1;
          }
          else {
            uint64_t result = result;
          }
        }
        v10 += 12;
        --v9;
      }
      while (v9);
    }
    ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t getNewPOS(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, char **a5)
{
  uint64_t v9 = *a2;
  LOWORD(v10) = *(_WORD *)(*a2 + 160 * a3 + 72);
  if ((_WORD)v10)
  {
    unint64_t v11 = 0;
    int v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(v9 + 160 * a3 + 64);
      if (*(_WORD *)(v12 + 24 * v11 + 16))
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        do
        {
          uint64_t v15 = *(void *)(v12 + 24 * v11 + 8);
          if (*(unsigned __int16 *)(v15 + v13) == a4)
          {
            uint64_t v16 = v15 + v13;
            if (*(_DWORD *)(v16 + 4) == 1)
            {
              if ((_WORD)v10) {
                int v17 = v10 + 1;
              }
              else {
                int v17 = 0;
              }
              int v10 = v17 + cstdlib_strlen(*(const char **)(v16 + 16));
              uint64_t v9 = *a2;
            }
          }
          ++v14;
          uint64_t v12 = *(void *)(v9 + 160 * a3 + 64);
          v13 += 24;
        }
        while (v14 < *(unsigned __int16 *)(v12 + 24 * v11 + 16));
      }
      ++v11;
    }
    while (v11 < *(unsigned __int16 *)(v9 + 160 * a3 + 72));
  }
  uint64_t v18 = heap_Calloc(*(void **)(a1 + 8), 1, (unsigned __int16)v10 + 2);
  if (v18)
  {
    size_t v23 = (char *)v18;
    uint64_t v24 = *a2;
    if (*(_WORD *)(*a2 + 160 * a3 + 72))
    {
      unint64_t v25 = 0;
      __int16 v26 = 0;
      do
      {
        uint64_t v27 = *(void *)(v24 + 160 * a3 + 64);
        if (*(_WORD *)(v27 + 24 * v25 + 16))
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          do
          {
            uint64_t v30 = *(void *)(v27 + 24 * v25 + 8);
            if (*(unsigned __int16 *)(v30 + v28) == a4 && *(_DWORD *)(v30 + v28 + 4) == 1)
            {
              if (v26)
              {
                cstdlib_strcat(v23, "\\"");
                cstdlib_strcat(v23, *(const char **)(*(void *)(*(void *)(*a2 + 160 * a3 + 64) + 24 * v25 + 8) + v28 + 16));
              }
              else
              {
                cstdlib_strcpy(v23, *(const char **)(v30 + v28 + 16));
              }
              ++v26;
              uint64_t v24 = *a2;
            }
            ++v29;
            uint64_t v27 = *(void *)(v24 + 160 * a3 + 64);
            v28 += 24;
          }
          while (v29 < *(unsigned __int16 *)(v27 + 24 * v25 + 16));
        }
        ++v25;
      }
      while (v25 < *(unsigned __int16 *)(v24 + 160 * a3 + 72));
    }
    uint64_t result = 0;
    *a5 = v23;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v32);
    return 2313166858;
  }
  return result;
}

uint64_t wordRecSplit(void *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned __int16 *)(*a1 + 160 * a2 + 72);
  if (!*(_WORD *)(*a1 + 160 * a2 + 72)) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(*a1 + 160 * a2 + 64);
  while (1)
  {
    uint64_t v7 = v6 + 24 * v5;
    uint64_t v8 = *(unsigned __int16 *)(v7 + 16);
    if (*(_WORD *)(v7 + 16)) {
      break;
    }
LABEL_10:
    if (++v5 == v4) {
      return 0;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 24 * v8;
  while (v5 == a3 && 24 * a4 == v9
       || __PAIR64__(*(_DWORD *)(*(void *)(v6 + 24 * v5 + 8) + v9 + 4), *(unsigned __int16 *)(*(void *)(v6 + 24 * v5 + 8) + v9)) != *(unsigned __int16 *)(*(void *)(v6 + 24 * a3 + 8)+ 24 * a4))
  {
    v9 += 24;
    if (v10 == v9) {
      goto LABEL_10;
    }
  }
  return 1;
}

uint64_t statpos_alignDisambiguatedPOSToLingdb(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (uint64_t *)(a1 + 648);
  uint64_t v52 = *(void *)a1;
  if (*(_WORD *)(a1 + 656))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned __int16 v12 = 0;
    uint64_t v13 = *(void *)(a1 + 648);
    unsigned int v14 = a2;
    do
    {
      if (*(_WORD *)(v13 + 160 * v10 + 72))
      {
        unint64_t v15 = 0;
        do
        {
          int v16 = cstdlib_strcmp((const char *)(*(void *)(a1 + 304)+ *(unsigned int *)(*(void *)(a1 + 312)+ 4 * *(unsigned int *)(*(void *)(v13 + 160 * v10 + 64) + 24 * v15))), *(const char **)(v13 + 160 * v10 + 88));
          uint64_t v13 = *(void *)(a1 + 648);
          if (!v16)
          {
            unint64_t v17 = v13 + 160 * v10;
            *(_DWORD *)(v17 + 96) = 1;
            uint64_t v18 = *(void *)(v17 + 64);
            uint64_t v19 = *(unsigned __int16 *)(v18 + 24 * v15 + 16);
            if (*(_WORD *)(v18 + 24 * v15 + 16))
            {
              uint64_t v20 = (_DWORD *)(*(void *)(v18 + 24 * v15 + 8) + 4);
              do
              {
                *uint64_t v20 = 1;
                v20 += 6;
                --v19;
              }
              while (v19);
            }
          }
          ++v15;
        }
        while (v15 < *(unsigned __int16 *)(v13 + 160 * v10 + 72));
      }
      if (*(_DWORD *)(a1 + 144) == 1 && !*(_DWORD *)(v13 + 160 * v10 + 96))
      {
        unsigned __int16 v21 = cstdlib_strlen(*(const char **)(v13 + 160 * v10 + 88));
        uint64_t v13 = *v9;
        if (*(_WORD *)(*v9 + 160 * v10 + 72))
        {
          uint64_t v54 = v11;
          unint64_t v22 = 0;
          LOWORD(v23) = 0;
          unsigned int v24 = v21;
          do
          {
            unsigned __int16 v25 = cstdlib_strlen((const char *)(*(void *)(a1 + 304)
                                              + *(unsigned int *)(*(void *)(a1 + 312)
                                                                + 4
                                                                * *(unsigned int *)(*(void *)(v13 + 160 * v10 + 64)
                                                                                  + 24 * v22))));
            if (v24 >= v25) {
              unsigned int v26 = v25;
            }
            else {
              unsigned int v26 = v24;
            }
            uint64_t v13 = *(void *)(a1 + 648);
            unsigned __int16 v27 = 0;
            if (v26)
            {
              while (*(unsigned __int8 *)(*(void *)(a1 + 304)
                                         + *(unsigned int *)(*(void *)(a1 + 312)
                                                           + 4
                                                           * *(unsigned int *)(*(void *)(v13 + 160 * v10 + 64)
                                                                             + 24 * v22))
                                         + v27) == *(unsigned __int8 *)(*(void *)(v13 + 160 * v10 + 88) + v27))
              {
                if (v26 <= ++v27)
                {
                  unsigned __int16 v27 = v26;
                  break;
                }
              }
            }
            BOOL v28 = v27 > (unsigned __int16)v23;
            if (v27 <= (unsigned __int16)v23) {
              int v23 = (unsigned __int16)v23;
            }
            else {
              int v23 = v27;
            }
            if (v28) {
              unsigned __int16 v12 = v22;
            }
            ++v22;
          }
          while (v22 < *(unsigned __int16 *)(v13 + 160 * v10 + 72));
          if (v23
            && (log_OutText(*(void *)(v52 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Word[%d] %s select word record with POS %s, (closest to predicted POS %s using longest match)", a6, a7, a8, v54), uint64_t v13 = *(void *)(a1 + 648), v29 = v13 + 160 * v10, *(_DWORD *)(v29 + 96) = 1, v30 = *(void *)(v29 + 64), v31 = *(unsigned __int16 *)(v30 + 24 * v12 + 16), *(_WORD *)(v30 + 24 * v12 + 16)))
          {
            unsigned int v32 = (_DWORD *)(*(void *)(v30 + 24 * v12 + 8) + 4);
            unsigned int v14 = a2;
            do
            {
              *unsigned int v32 = 1;
              v32 += 6;
              --v31;
            }
            while (v31);
          }
          else
          {
            unsigned int v14 = a2;
          }
          uint64_t v11 = v54;
        }
      }
      if (!*(_DWORD *)(v13 + 160 * v10 + 96))
      {
        if (!v14)
        {
          log_OutText(*(void *)(v52 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : no matching tags for word[%d] %s (predicted=%s, lexicon=%s)", a6, a7, a8, v11);
          uint64_t v13 = *v9;
        }
        unint64_t v33 = v13 + 160 * v10;
        *(_DWORD *)(v33 + 96) = 1;
        uint64_t v34 = *(unsigned __int16 *)(v33 + 72);
        if (v34)
        {
          uint64_t v35 = 0;
          uint64_t v36 = *(void *)(v13 + 160 * v10 + 64);
          do
          {
            uint64_t v37 = *(unsigned __int16 *)(v36 + 24 * v35 + 16);
            if (*(_WORD *)(v36 + 24 * v35 + 16))
            {
              uint64_t v38 = (_DWORD *)(*(void *)(v36 + 24 * v35 + 8) + 4);
              do
              {
                _DWORD *v38 = 1;
                v38 += 6;
                --v37;
              }
              while (v37);
            }
            ++v35;
          }
          while (v35 != v34);
        }
      }
      ++v10;
      unint64_t v39 = *(unsigned __int16 *)(a1 + 656);
      uint64_t v11 = v10;
    }
    while (v10 < v39);
    if (*(_WORD *)(a1 + 656))
    {
      uint64_t v40 = 0;
      uint64_t v53 = *v9;
      do
      {
        unint64_t v55 = v39;
        uint64_t v41 = v53 + 160 * v40;
        uint64_t v42 = *(unsigned __int16 *)(v41 + 72);
        if (*(_WORD *)(v41 + 72))
        {
          uint64_t v43 = 0;
          uint64_t v44 = *(void *)(v53 + 160 * v40 + 64);
          do
          {
            uint64_t v45 = v44 + 24 * v43;
            uint64_t v46 = *(unsigned __int16 *)(v45 + 16);
            if (*(_WORD *)(v45 + 16))
            {
              uint64_t v47 = 0;
              unsigned int v48 = (_DWORD *)(*(void *)(v44 + 24 * v43 + 8) + 8);
              do
              {
                if (*(v48 - 1) == 1
                  && wordRecSplit(v9, (unsigned __int16)v40, (unsigned __int16)v43, (unsigned __int16)v47))
                {
                  *unsigned int v48 = 1;
                }
                v48 += 6;
                ++v47;
              }
              while (v46 != v47);
            }
            ++v43;
          }
          while (v43 != v42);
        }
        ++v40;
        unint64_t v39 = v55;
      }
      while (v40 != v55);
    }
  }
  int v49 = *(_DWORD *)(a1 + 1416);

  return printSent_0(v52, a1 + 8, v9, (uint64_t)"after statpos_alignDisambiguatedPOSToLingdb()", v49, a2, a7, a8);
}

uint64_t statpos_updatePOSLingdbWithDisambiguatedPOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, int a6)
{
  uint64_t v8 = a4;
  char __b[32] = *(char **)MEMORY[0x263EF8340];
  int v128 = 0;
  int v129 = 0;
  unsigned int v126 = 0;
  int v127 = 0;
  int v125 = 0;
  unsigned __int16 __s1 = 0;
  uint64_t v123 = 0;
  int v120 = 0;
  uint64_t v121 = 0;
  int v119 = 0;
  uint64_t v13 = (uint64_t)(a4 + 1);
  uint64_t v12 = *a4;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a1 + 104))(a2, a3, 1, 0, &v129);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a1 + 184))(a2, a3, (unsigned __int16)v129, 0, (char *)&v129 + 2);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (HIWORD(v129) != 1) {
    return v15;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t *, char *))(a1 + 176))(a2, a3, (unsigned __int16)v129, 0, &v123, (char *)&v127 + 2);
  if ((v15 & 0x80000000) != 0 || HIWORD(v127) < 2u) {
    return v15;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v129, (char *)&v128 + 2);
  if ((v14 & 0x80000000) != 0) {
    return v14;
  }
  int v111 = a5;
  uint64_t v117 = v12;
  int v16 = (unsigned __int16 *)(v8 + 81);
  unsigned __int16 v124 = 0;
  cstdlib_strcpy((char *)v8[91], "");
  while (1)
  {
    if (!HIWORD(v128))
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v129, (char *)&v128 + 2);
      uint64_t v25 = v117;
      if ((v15 & 0x80000000) != 0) {
        goto LABEL_46;
      }
      unsigned __int16 v74 = HIWORD(v128);
      if (HIWORD(v128))
      {
        while (1)
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v74, &v128);
          if ((updated & 0x80000000) != 0) {
            break;
          }
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 0, 1, &v126, (char *)&v127 + 2);
          if ((v15 & 0x80000000) != 0) {
            goto LABEL_46;
          }
          if (v126 <= 0xA && ((1 << v126) & 0x610) != 0)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v128), 5, &__s1, (char *)&v127 + 2);
            if ((updated & 0x80000000) != 0) {
              break;
            }
            uint64_t v76 = __s1;
            int v77 = cstdlib_strlen(__s1);
            int v78 = *v76;
            uint64_t v79 = v76;
            while (v78 == 92)
            {
              --v77;
              int v80 = *++v79;
              int v78 = v80;
            }
            cstdlib_memmove(v76, v79, (v77 + 1));
            uint64_t v81 = cstdlib_strchr(v76, 92);
            if (v81) {
              *uint64_t v81 = 0;
            }
            uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1 + 160);
            uint64_t v83 = HIWORD(v128);
            __int16 v84 = cstdlib_strlen(__s1);
            uint64_t WordIdx_0 = v82(a2, a3, v83, 5, (unsigned __int16)(v84 + 1), __s1, &v127);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1 + 184))(a2, a3, HIWORD(v128), 14, (char *)&v129 + 2);
            uint64_t v25 = v117;
            if ((updated & 0x80000000) != 0) {
              break;
            }
            if (HIWORD(v129) != 1) {
              goto LABEL_146;
            }
            __b[0] = 0;
            v130[0] = 0;
            unsigned __int16 v118 = 0;
            uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v128), 14, __b, (char *)&v127 + 2);
            if ((v15 & 0x80000000) != 0) {
              goto LABEL_46;
            }
            if (HIWORD(v127) < 2u || !hlp_NLUStrFind(__b[0], "POS", v130, &v118))
            {
LABEL_146:
              uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v128));
              if ((v15 & 0x80000000) != 0) {
                goto LABEL_46;
              }
            }
          }
          unsigned __int16 v74 = v128;
          HIWORD(v128) = v128;
          if (!(_WORD)v128) {
            goto LABEL_72;
          }
        }
LABEL_138:
        uint64_t v15 = updated;
        goto LABEL_46;
      }
LABEL_72:
      if (v111 != 1) {
        goto LABEL_46;
      }
      unsigned __int16 v118 = 0;
      log_OutText(*(void *)(v25 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"No SGRAM : removing duplicate tags on lingdb words", v71, v72, v73, 0);
      cstdlib_memset(__b, 0, 0x100uLL);
      cstdlib_memset(v130, 0, 0x100uLL);
      unsigned __int16 v124 = 0;
      uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v129, (char *)&v128 + 2);
      if ((WordIdx_0 & 0x80000000) == 0)
      {
        uint64_t v116 = v16;
        unsigned __int16 v85 = HIWORD(v128);
        if (HIWORD(v128))
        {
          LODWORD(v86) = 0;
          uint64_t v87 = 0xFFFFLL;
          while (1)
          {
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, v85, &v128);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 0, 1, &v126, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            if (v126 > 0xA || ((1 << v126) & 0x610) == 0) {
              goto LABEL_85;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 1, 1, &v125, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 2, 1, (char *)&v125 + 2, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            if ((unsigned __int16)v125 == HIWORD(v125))
            {
LABEL_85:
              uint64_t v92 = v87;
            }
            else
            {
              uint64_t WordIdx_0 = getWordIdx_0(*v8, v116, (unsigned __int16)v125, HIWORD(v125), &v124, v89, v90, v91);
              if ((WordIdx_0 & 0x80000000) != 0) {
                goto LABEL_44;
              }
              uint64_t v92 = v124;
              if (subsumedWordRec((uint64_t)v116, v124))
              {
                uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, HIWORD(v128));
                if ((WordIdx_0 & 0x80000000) != 0) {
                  goto LABEL_44;
                }
                goto LABEL_111;
              }
              uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v128), 5, &__s1, (char *)&v127 + 2);
              if ((WordIdx_0 & 0x80000000) != 0) {
                goto LABEL_44;
              }
              uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v128), 3, &v121, (char *)&v127 + 2);
              if ((WordIdx_0 & 0x80000000) != 0) {
                goto LABEL_44;
              }
              uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 7, 1, &v118, (char *)&v127 + 2);
              if ((WordIdx_0 & 0x80000000) != 0) {
                goto LABEL_44;
              }
              if ((_WORD)v87 == 0xFFFF || v92 == (unsigned __int16)v87)
              {
                if (v86 > 0x7F) {
                  goto LABEL_111;
                }
              }
              else
              {
                if (v86 >= 2)
                {
                  uint64_t v93 = 0;
                  unsigned __int16 v94 = -1;
                  unsigned __int16 v95 = -1;
                  uint64_t v86 = v86;
                  do
                  {
                    unsigned int v96 = *((unsigned __int16 *)v130 + v93);
                    if (v96 <= v94) {
                      unsigned __int16 v95 = v93;
                    }
                    if (v96 < v94) {
                      unsigned __int16 v94 = *((_WORD *)v130 + v93);
                    }
                    ++v93;
                  }
                  while (v86 != v93);
                  uint64_t v97 = v95;
                  uint64_t v98 = __b;
                  while (1)
                  {
                    if (v97)
                    {
                      uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, *(unsigned __int16 *)v98);
                      if ((WordIdx_0 & 0x80000000) != 0) {
                        goto LABEL_44;
                      }
                    }
                    uint64_t v98 = (char **)((char *)v98 + 2);
                    --v97;
                    if (!--v86) {
                      goto LABEL_110;
                    }
                  }
                }
                LODWORD(v86) = 0;
              }
LABEL_110:
              *((_WORD *)__b + v86) = HIWORD(v128);
              *((_WORD *)v130 + v86) = v118;
              LODWORD(v86) = v86 + 1;
            }
LABEL_111:
            unsigned __int16 v85 = v128;
            HIWORD(v128) = v128;
            uint64_t v87 = v92;
            if (!(_WORD)v128)
            {
              if (v86 < 2) {
                break;
              }
              uint64_t v99 = 0;
              unsigned __int16 v100 = -1;
              unsigned __int16 v101 = -1;
              uint64_t v86 = v86;
              do
              {
                unsigned int v102 = *((unsigned __int16 *)v130 + v99);
                if (v102 <= v100) {
                  unsigned __int16 v101 = v99;
                }
                if (v102 < v100) {
                  unsigned __int16 v100 = *((_WORD *)v130 + v99);
                }
                ++v99;
              }
              while (v86 != v99);
              uint64_t v103 = v101;
              uint64_t v104 = __b;
              while (1)
              {
                if (v103)
                {
                  uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 192))(a2, a3, *(unsigned __int16 *)v104);
                  if ((WordIdx_0 & 0x80000000) != 0) {
                    goto LABEL_44;
                  }
                }
                uint64_t v104 = (char **)((char *)v104 + 2);
                --v103;
                if (!--v86) {
                  goto LABEL_123;
                }
              }
            }
          }
        }
LABEL_123:
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a1 + 104))(a2, a3, 2, (unsigned __int16)v129, (char *)&v128 + 2);
        if ((v15 & 0x80000000) != 0 || (unsigned __int16 v105 = HIWORD(v128)) == 0)
        {
LABEL_45:
          uint64_t v25 = v117;
          goto LABEL_46;
        }
        uint64_t v106 = 0;
        while (1)
        {
          uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, char *))(a1 + 168))(a2, a3, v105, 0, 1, &v126, (char *)&v127 + 2);
          if ((WordIdx_0 & 0x80000000) != 0) {
            break;
          }
          if (v126 <= 0xA && ((1 << v126) & 0x610) != 0)
          {
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, char *))(a1 + 176))(a2, a3, HIWORD(v128), 5, &__s1, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              break;
            }
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v128), 3, &v121, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              break;
            }
            if (v106 < *((unsigned __int16 *)v8 + 328))
            {
              log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"(no sgram) word %d %s POS=%s PHON=%s recId=%d", v108, v109, v110, v106);
              uint64_t v106 = (v106 + 1);
            }
          }
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a1 + 120))(a2, a3, HIWORD(v128), &v128);
          if ((v15 & 0x80000000) == 0)
          {
            unsigned __int16 v105 = v128;
            HIWORD(v128) = v128;
            if ((_WORD)v128) {
              continue;
            }
          }
          goto LABEL_45;
        }
      }
LABEL_44:
      uint64_t v15 = WordIdx_0;
      goto LABEL_45;
    }
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 168))(a2, a3);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
    if (v126 <= 0xA && ((1 << v126) & 0x610) != 0)
    {
      uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 1, 1, &v125, (char *)&v127 + 2);
      if ((WordIdx_0 & 0x80000000) != 0) {
        goto LABEL_44;
      }
      uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a1 + 168))(a2, a3, HIWORD(v128), 2, 1, (char *)&v125 + 2, (char *)&v127 + 2);
      if ((WordIdx_0 & 0x80000000) != 0) {
        goto LABEL_44;
      }
      if ((unsigned __int16)v125 != HIWORD(v125))
      {
        uint64_t WordIdx_0 = getWordIdx_0(*v8, v16, (unsigned __int16)v125, HIWORD(v125), &v124, v19, v20, v21);
        if ((WordIdx_0 & 0x80000000) != 0) {
          goto LABEL_44;
        }
        int v22 = *((_DWORD *)v8 + 359);
        uint64_t v23 = v124;
        if (v22 || !subsumedWordRec((uint64_t)v16, v124))
        {
          int v119 = 0;
          uint64_t v24 = HIWORD(v128);
          if (checkWordRecPOS((uint64_t *)v16, v23, HIWORD(v128), &v119) | v22)
          {
            uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char **, char *))(a1 + 176))(a2, a3, v24, 5, &__s1, (char *)&v127 + 2);
            if ((WordIdx_0 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            uint64_t v25 = v117;
            if (a6 == 1 && v126 == 4)
            {
              uint64_t updated = updateNLUField_0(v117, a1, a2, a3, HIWORD(v128), v13, (uint64_t *)v16, v23, __s1, 0, 0, 0);
              if ((updated & 0x80000000) != 0) {
                goto LABEL_138;
              }
              uint64_t v30 = v117;
              uint64_t v31 = v16;
              log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"SET DCT WORD Word[%d] %s POS %s to NLU POS", v27, v28, v29, v23);
              goto LABEL_37;
            }
            if (v119 == 1)
            {
              uint64_t updated = getNewPOS(v117, (uint64_t *)v16, v23, HIWORD(v128), &v120);
              if ((updated & 0x80000000) != 0) {
                goto LABEL_138;
              }
              log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REPLACE Word[%d] %s POS %s", v35, v36, v37, v23);
              uint64_t v38 = v120;
              log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"\twith %s", v39, v40, v41, (uint64_t)v120);
              uint64_t v112 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const char *, int *))(a1 + 160);
              uint64_t v42 = HIWORD(v128);
              __int16 v43 = cstdlib_strlen(v38);
              uint64_t v44 = v112(a2, a3, v42, 5, (unsigned __int16)(v43 + 1), v38, &v127);
              if ((v44 & 0x80000000) != 0)
              {
                uint64_t v15 = v44;
                uint64_t v25 = v117;
                goto LABEL_46;
              }
              heap_Free(*(void **)(v117 + 8), (uint64_t)v38);
              int v120 = 0;
              uint64_t v25 = v117;
            }
            else if (*((_DWORD *)v8 + 360))
            {
              if (!cstdlib_strcmp(__s1, "*"))
              {
                log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REPLACE Word[%d] %s POS %s", v45, v46, v47, v23);
                log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"\twith %s", v48, v49, v50, *(void *)(*(void *)v16 + 160 * v23 + 88));
                uint64_t v113 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, int *))(a1 + 160);
                uint64_t v51 = HIWORD(v128);
                __int16 v52 = cstdlib_strlen(*(const char **)(*(void *)v16 + 160 * v23 + 88));
                uint64_t v53 = v51;
                uint64_t v25 = v117;
                uint64_t updated = v113(a2, a3, v53, 5, (unsigned __int16)(v52 + 1), *(void *)(*(void *)v16 + 160 * v23 + 88), &v127);
                if ((updated & 0x80000000) != 0) {
                  goto LABEL_138;
                }
              }
            }
            uint64_t updated = updateNLUField_0(v25, a1, a2, a3, HIWORD(v128), v13, (uint64_t *)v16, v23, *(char **)(*(void *)v16 + 160 * v23 + 88), 0, 0, 0);
            if ((updated & 0x80000000) != 0) {
              goto LABEL_138;
            }
            if (a6 == 1) {
              break;
            }
          }
        }
      }
    }
LABEL_43:
    uint64_t WordIdx_0 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1 + 120))(a2, a3, HIWORD(v128), (char *)&v128 + 2);
    if ((WordIdx_0 & 0x80000000) != 0) {
      goto LABEL_44;
    }
  }
  log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set Word[%d] POS to %s", v54, v55, v56, v23);
  uint64_t v114 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, int *))(a1 + 160);
  uint64_t v57 = HIWORD(v128);
  __int16 v58 = cstdlib_strlen(*(const char **)(*(void *)v16 + 160 * v23 + 88));
  uint64_t v59 = v57;
  uint64_t v30 = v117;
  uint64_t v31 = v16;
  uint64_t v60 = v114(a2, a3, v59, 5, (unsigned __int16)(v58 + 1), *(void *)(*(void *)v16 + 160 * v23 + 88), &v127);
  if ((v60 & 0x80000000) != 0)
  {
    uint64_t v15 = v60;
    uint64_t v25 = v117;
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v115 = v8;
  unint64_t v61 = v31;
  if (*(_DWORD *)(*(void *)v31 + 160 * v23 + 24))
  {
    log_OutText(*(void *)(v30 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"keep Word[%d] PHON", v32, v33, v34, v23);
    int v16 = v31;
LABEL_42:
    uint64_t v8 = v115;
    a6 = 1;
    goto LABEL_43;
  }
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(a1 + 176))(a2, a3, HIWORD(v128), 3, &v121, (char *)&v127 + 2);
  if ((v62 & 0x80000000) != 0)
  {
    uint64_t v15 = v62;
    uint64_t v25 = v30;
    goto LABEL_141;
  }
  unsigned int v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, int *))(a1 + 160);
  uint64_t v64 = HIWORD(v128);
  int v16 = v61;
  __int16 v65 = cstdlib_strlen(*(const char **)(*(void *)v61 + 160 * v23 + 32));
  uint64_t v66 = v63(a2, a3, v64, 3, (unsigned __int16)(v65 + 1), *(void *)(*(void *)v61 + 160 * v23 + 32), &v127);
  if ((v66 & 0x80000000) == 0)
  {
    log_OutText(*(void *)(v117 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"set Word[%d] PHON to %s", v67, v68, v69, v23);
    goto LABEL_42;
  }
  uint64_t v15 = v66;
  uint64_t v25 = v117;
LABEL_141:
  uint64_t v8 = v115;
LABEL_46:
  cstdlib_strcpy((char *)v8[91], "");
  if (v120) {
    heap_Free(*(void **)(v25 + 8), (uint64_t)v120);
  }
  return v15;
}

uint64_t subsumedWordRec(uint64_t a1, unsigned int a2)
{
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  uint64_t v2 = 0;
  while (1)
  {
    if (160 * a2 != v2)
    {
      uint64_t v3 = (unsigned __int16 *)(*(void *)a1 + 160 * a2);
      if (*v3 >= *(unsigned __int16 *)(*(void *)a1 + v2)
        && v3[1] <= *(unsigned __int16 *)(*(void *)a1 + v2 + 2))
      {
        break;
      }
    }
    v2 += 160;
    if (160 * *(unsigned __int16 *)(a1 + 8) == v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t statpos_disambiguatePOSTags(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 1024);
  *(void *)(a1 + 776) = v3;
  if (!v3)
  {
    log_OutPublic(*(void *)(v2 + 32), (uint64_t)"FE_POS", 35000, 0, v4, v5, v6, v7, v13);
    return 2313166858;
  }
  uint64_t v8 = (unsigned __int16 *)(a1 + 648);
  if (*(_DWORD *)(a1 + 1336) == 1)
  {
    uint64_t v9 = statpos_crf_label(v2, a1 + 1320, v8, (void *)(a1 + 8), 1);
LABEL_7:
    uint64_t v10 = v9;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 804) == 1)
  {
    uint64_t v9 = statpos_igtrees_label(v2, a1 + 8, (uint64_t)v8, a1 + 784);
    goto LABEL_7;
  }
  uint64_t v10 = 0;
LABEL_9:
  uint64_t v11 = *(void *)(a1 + 776);
  if (v11)
  {
    heap_Free(*(void **)(v2 + 8), v11);
    *(void *)(a1 + 776) = 0;
  }
  return v10;
}

uint64_t statpos_setMorphemePRON(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(a4 + 656))
  {
    unint64_t v5 = 0;
    uint64_t v38 = (char **)(a4 + 1384);
    uint64_t v6 = *(void *)a4;
    uint64_t v7 = (uint64_t *)(a4 + 728);
    uint64_t v8 = (unsigned __int16 *)(a4 + 744);
    uint64_t v34 = (void *)(a4 + 1408);
    uint64_t v35 = (void *)(a4 + 1400);
    uint64_t v9 = 120;
    uint64_t v32 = (unsigned __int16 *)(a4 + 744);
    while (1)
    {
      cstdlib_strcpy(*(char **)(a4 + 728), "");
      uint64_t v10 = *(void *)(a4 + 648);
      uint64_t v11 = *(char **)(v10 + v9);
      if (!v11) {
        uint64_t v11 = **(char ***)(v10 + v9 - 72);
      }
      uint64_t v12 = statPOS_add2Str(v6, (const char **)(a4 + 728), v8, v11);
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      uint64_t v16 = *(void *)(a4 + 648) + v9;
      if (*(_DWORD *)(v16 - 96) == 1) {
        break;
      }
      if (!*(void *)(v16 - 32)) {
        goto LABEL_14;
      }
      uint64_t v12 = statPOS_add2Str(v6, (const char **)(a4 + 728), v8, "/");
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      uint64_t v12 = statPOS_add2Str(v6, (const char **)(a4 + 728), v8, *(char **)(*(void *)(a4 + 648) + v9 - 32));
      if ((v12 & 0x80000000) != 0) {
        return v12;
      }
      uint64_t info_from_dct = statpos_get_info_from_dct(v6, *(void *)(a4 + 752), *(void *)(a4 + 760), *(void *)(a4 + 768), "morph_pos", *(void *)(a4 + 728), (char **)(*(void *)(a4 + 648) + v9 - 88), 0, "STR");
      if ((info_from_dct & 0x80000000) != 0) {
        return info_from_dct;
      }
      uint64_t v21 = *(void *)(v6 + 32);
      if (*(void *)(*(void *)(a4 + 648) + v9 - 88))
      {
        log_OutText(v21, (uint64_t)"FE_POS", 5, 0, (uint64_t)"lookup %s ; transcription %s",
          v17,
          v18,
          v19,
          *(void *)(a4 + 728));
      }
      else
      {
        log_OutText(v21, (uint64_t)"FE_POS", 5, 0, (uint64_t)"lookup %s ; FAILED",
          v17,
          v18,
          v19,
          *(void *)(a4 + 728));
        int v22 = cstdlib_strlen(v11);
        unsigned __int16 v23 = Utf8_LengthInUtf8chars((unint64_t)v11, v22);
        uint64_t v24 = *(const char **)(*(void *)(a4 + 648) + v9 - 32);
        int v25 = cstdlib_strlen(v24);
        if ((unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v24, v25) > v23)
        {
          unsigned int v26 = *(const char **)(*(void *)(a4 + 648) + v9 - 32);
          int v27 = cstdlib_strlen(v26);
          unsigned __int16 v23 = Utf8_LengthInUtf8chars((unint64_t)v26, v27);
        }
        uint64_t v12 = statpos_growAndSetLayer(v6, v38, v35, v11, v23);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        uint64_t v12 = statpos_growAndSetLayer(v6, (char **)(a4 + 1392), v34, *(char **)(*(void *)(a4 + 648) + v9 - 32), v23);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        uint64_t info_from_dct = statPOS_call_one_word(v6, a1, a2, a3, (const char **)v38, (const char **)(a4 + 1392), (char **)(*(void *)(a4 + 648) + v9 - 88));
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
        log_OutText(*(void *)(v6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s ; one_word transcription %s",
          v28,
          v29,
          v30,
          (uint64_t)v11);
        uint64_t v8 = v32;
      }
LABEL_15:
      ++v5;
      v9 += 160;
      if (v5 >= *(unsigned __int16 *)(a4 + 656)) {
        goto LABEL_24;
      }
    }
    log_OutText(*(void *)(v6 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"SKIP DCT LOOKUP WORD %s", v13, v14, v15, *v7);
LABEL_14:
    uint64_t info_from_dct = 0;
    goto LABEL_15;
  }
  uint64_t info_from_dct = 0;
LABEL_24:
  cstdlib_strcpy(*(char **)(a4 + 728), "");
  return info_from_dct;
}

uint64_t statpos_growAndSetLayer(uint64_t a1, char **a2, void *a3, char *__src, unsigned int a5)
{
  uint64_t v8 = *a2;
  if (*(unsigned __int16 *)a3 < a5)
  {
    uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), (uint64_t)v8, a5 + 2);
    if (!v11)
    {
      log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v18);
      return 2313166858;
    }
    uint64_t v8 = (char *)v11;
    *a2 = (char *)v11;
    *a3 = a5 + 2;
  }
  cstdlib_strcpy(v8, __src);
  for (unsigned int i = (unsigned __int16)cstdlib_strlen(__src); i < a5; ++i)
    cstdlib_strcat(*a2, "~");
  return 0;
}

uint64_t statpos_getUniqDynamicPOS(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4)
{
  *a4 = -1;
  if (!*(_WORD *)(a2 + 312))
  {
LABEL_5:
    unsigned __int16 v9 = cstdlib_strlen(__s);
    unsigned __int16 v10 = v9;
    int v11 = v9;
    int v12 = *(_DWORD *)(a2 + 316);
    if (*(unsigned __int16 *)(a2 + 324) + v9 >= (unsigned __int16)v12)
    {
      if (v9 >= 0x80u) {
        int v13 = (unsigned __int16)(v9 + 32);
      }
      else {
        int v13 = 128;
      }
      uint64_t v14 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 296), (v13 + v12));
      if (!v14) {
        goto LABEL_17;
      }
      *(void *)(a2 + 296) = v14;
      *(_DWORD *)(a2 + 316) += v13;
    }
    int v19 = *(_DWORD *)(a2 + 320);
    if (*(unsigned __int16 *)(a2 + 312) < (unsigned __int16)v19)
    {
LABEL_14:
      uint64_t v21 = *(char **)(a2 + 296);
      if (*(_WORD *)(a2 + 324)) {
        cstdlib_strcat(&v21[*(unsigned __int16 *)(a2 + 324)], __s);
      }
      else {
        cstdlib_strcpy(v21, __s);
      }
      uint64_t v22 = 0;
      *(unsigned char *)(*(void *)(a2 + 296) + (v11 + 1) + (unint64_t)*(unsigned __int16 *)(a2 + 324)) = 0;
      int v23 = *(unsigned __int16 *)(a2 + 324);
      int v24 = *(unsigned __int16 *)(a2 + 312);
      *(_DWORD *)(*(void *)(a2 + 304) + 4 * *(unsigned __int16 *)(a2 + 312)) = v23;
      *(_WORD *)(a2 + 324) = v10 + v23 + 1;
      *a4 = v24;
      *(_WORD *)(a2 + 312) = v24 + 1;
      return v22;
    }
    uint64_t v20 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 304), 4 * (v19 + 16));
    if (v20)
    {
      *(void *)(a2 + 304) = v20;
      *(_DWORD *)(a2 + 320) += 16;
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v22 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v15, v16, v17, v18, v26);
    return v22;
  }
  uint64_t v8 = 0;
  while (cstdlib_strcmp(__s, (const char *)(*(void *)(a2 + 296) + *(unsigned int *)(*(void *)(a2 + 304) + 4 * v8))))
  {
    if (++v8 >= (unint64_t)*(unsigned __int16 *)(a2 + 312)) {
      goto LABEL_5;
    }
  }
  uint64_t v22 = 0;
  *a4 = v8;
  return v22;
}

uint64_t addPOSandPHR(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, const char *a6, unsigned int a7, const char *a8, unsigned __int16 a9)
{
  __int16 v11 = a4;
  if (a4 == a5)
  {
    if (a4 + 1 == *((unsigned __int16 *)a3 + 4)) {
      LOWORD(a5) = a4 + 1;
    }
    else {
      LOWORD(a5) = a4;
    }
  }
  if (a4 >= (unsigned __int16)a5) {
    return 0;
  }
  size_t __n = a7;
  uint64_t v15 = a7 + 1;
  uint64_t v16 = a4;
  uint64_t v31 = (unsigned __int16)a5;
  uint64_t v17 = *a3;
  for (uint64_t i = 160 * a4 + 104; ; i += 160)
  {
    uint64_t v19 = *(void *)(*(void *)(v17 + i - 56) + 24);
    if (v19)
    {
      heap_Free(*(void **)(a1 + 8), v19);
      uint64_t v20 = (uint64_t *)(*a3 + i);
      *(void *)(*(v20 - 7) + 24) = 0;
      heap_Free(*(void **)(a1 + 8), *v20);
      *(void *)(*a3 + i) = 0;
    }
    uint64_t v21 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v15);
    *(void *)(*(void *)(*a3 + i - 56) + 24) = v21;
    if (!v21) {
      break;
    }
    if (a6)
    {
      cstdlib_strncat(v21, a6, __n);
      uint64_t v21 = *(char **)(*(void *)(*a3 + i - 56) + 24);
    }
    a3[6] = (uint64_t)v21;
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"retag REF POS %s", v23, v24, v25, (uint64_t)v21);
    uint64_t v26 = statpos_retagREFPOS(a1, a2, a3, (unsigned __int16)v16);
    if ((v26 & 0x80000000) != 0) {
      return v26;
    }
    int v27 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, a9 + 1);
    uint64_t v17 = *a3;
    *(void *)(*a3 + i) = v27;
    if (!v27) {
      break;
    }
    if (a8)
    {
      cstdlib_strncat(v27, a8, a9);
      uint64_t v17 = *a3;
    }
    *(_WORD *)(v17 + i - 100) = v11;
    if (v31 == ++v16) {
      return v26;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v22, v23, v24, v25, v29);
  return 2313166858;
}

uint64_t checkSpan_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3) {
    return 0;
  }
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, (24 * *(unsigned __int16 *)(a2 + 376)) | 1);
  if (v6)
  {
    uint64_t v11 = v6;
    uint64_t result = 0;
    *a3 = v11;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
    return 2313166858;
  }
  return result;
}

uint64_t checkAllocAndZero(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  size_t v7 = a3;
  if (v5)
  {
    uint64_t v8 = (void *)heap_Realloc(v6, v5, a3);
    if (v8)
    {
      uint64_t v13 = (uint64_t)v8;
      cstdlib_memset(v8, 0, v7);
LABEL_5:
      uint64_t result = 0;
      *a2 = v13;
      return result;
    }
  }
  else
  {
    uint64_t v13 = heap_Calloc(v6, 1, a3);
    if (v13) {
      goto LABEL_5;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v9, v10, v11, v12, v15);
  return 2313166858;
}

uint64_t loc_CopyValue(_DWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2313166855;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (_DWORD *)heap_Alloc(a2, 5);
    if (v6)
    {
      uint64_t v3 = 0;
      *uint64_t v6 = *a1;
      *a3 = v6;
    }
    else
    {
      return 2313166858;
    }
  }
  return v3;
}

void *loc_FreeValue(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

uint64_t logSTATPOSRULE_TRule(uint64_t result, const char **a2, unsigned __int16 *a3, char *__s, uint64_t *a5, uint64_t **a6)
{
  if (result)
  {
    if (!*a6 || (uint64_t result = logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, *a6), (result & 0x80000000) == 0))
    {
      *(_DWORD *)__s = 2121504;
      uint64_t result = statPOS_add2Str(*a5, a2, a3, __s);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = a6[1];
        if (!v11 || (uint64_t result = logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, v11), (result & 0x80000000) == 0))
        {
          *(_DWORD *)__s = 2121504;
          uint64_t result = statPOS_add2Str(*a5, a2, a3, __s);
          if ((result & 0x80000000) == 0)
          {
            uint64_t v12 = a6[2];
            if (v12)
            {
              return logSTATPOSCONTEXT_TRule(a2, a3, __s, a5, v12);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t logSTATPOSCONTEXT_TRule(const char **a1, unsigned __int16 *a2, char *__s, uint64_t *a4, uint64_t *a5)
{
  if (*((_WORD *)a5 + 4))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (unsigned __int16 *)(*a5 + v10);
      if (!*((unsigned char *)v13 + 4)) {
        goto LABEL_13;
      }
      uint64_t v14 = "!";
      if ((v13[2] & 1) != 0
        || (uint64_t v14 = "HASCOMMA ", (v13[2] & 2) != 0)
        || (uint64_t v14 = "DIRECTIVE_MOVE2NEXT ", (v13[2] & 4) != 0)
        || (uint64_t v14 = "ISLASTINPHR ", (v13[2] & 8) != 0)
        || (uint64_t v14 = "ISFIRSTINPHR ", (v13[2] & 0x10) != 0))
      {
        int v15 = v13[2] & 1;
        cstdlib_strcpy(__s, v14);
      }
      else
      {
        int v15 = 1;
      }
      uint64_t result = statPOS_add2Str(*a4, a1, a2, __s);
      if (v15)
      {
        if ((result & 0x80000000) == 0)
        {
LABEL_13:
          uint64_t result = statPOS_add2Str(*a4, a1, a2, "[");
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statPOS_add2Str(*a4, a1, a2, (char *)(a4[37] + *(unsigned int *)(a4[38] + 4 * *v13)));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          sprintf(__s, " %d(", *(unsigned __int16 *)(v12 + v10 + 2));
          uint64_t result = statPOS_add2Str(*a4, a1, a2, __s);
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statPOS_add2Str(*a4, a1, a2, (char *)(a4[32] + *(unsigned int *)(a4[33] + 4 * *(unsigned __int16 *)(v12 + v10 + 2))));
          if ((result & 0x80000000) != 0) {
            return result;
          }
          uint64_t result = statPOS_add2Str(*a4, a1, a2, ")] ");
        }
      }
      if ((result & 0x80000000) == 0)
      {
        ++v11;
        v10 += 6;
        if (v11 < *((unsigned __int16 *)a5 + 4)) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

uint64_t statpos_rules_unload(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[33];
  if (v3)
  {
    heap_Free(*(void **)(v2 + 8), v3);
    a1[33] = 0;
  }
  uint64_t v4 = (void *)a1[35];
  if (v4)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v4);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[35] = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = a1[38];
  if (v6)
  {
    heap_Free(*(void **)(v2 + 8), v6);
    a1[38] = 0;
  }
  size_t v7 = (void *)a1[41];
  if (v7)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v7);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[41] = 0;
  }
  uint64_t v8 = a1[28];
  if (v8)
  {
    heap_Free(*(void **)(v2 + 8), v8);
    a1[28] = 0;
  }
  uint64_t v9 = (void *)a1[30];
  if (v9)
  {
    uint64_t v5 = ssftriff_reader_ReleaseChunkData(v9);
    if ((v5 & 0x80000000) != 0) {
      return v5;
    }
    a1[30] = 0;
  }
  uint64_t v10 = a1[42];
  if (v10)
  {
    heap_Free(*(void **)(v2 + 8), v10);
    a1[42] = 0;
  }
  uint64_t v11 = a1[43];
  if (v11)
  {
    heap_Free(*(void **)(v2 + 8), v11);
    a1[43] = 0;
  }
  uint64_t v12 = a1[44];
  if (v12)
  {
    heap_Free(*(void **)(v2 + 8), v12);
    a1[44] = 0;
  }
  uint64_t v13 = a1[45];
  if (v13)
  {
    heap_Free(*(void **)(v2 + 8), v13);
    a1[45] = 0;
  }
  uint64_t v14 = a1[46];
  if (v14)
  {
    heap_Free(*(void **)(v2 + 8), v14);
    a1[46] = 0;
  }
  uint64_t v15 = a1[6];
  if (v15)
  {
    if (*((_WORD *)a1 + 28))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        freeMAPRULE2STR_TRule_0((void *)v2, (void *)(a1[6] + v16));
        ++v17;
        v16 += 32;
      }
      while (v17 < *((unsigned __int16 *)a1 + 28));
      uint64_t v15 = a1[6];
    }
    heap_Free(*(void **)(v2 + 8), v15);
    a1[6] = 0;
  }
  *((_WORD *)a1 + 28) = 0;
  uint64_t v18 = a1[8];
  if (v18)
  {
    if (*((_WORD *)a1 + 36))
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        freeMAPRULE2STR_TRule_0((void *)v2, (void *)(a1[8] + v19));
        ++v20;
        v19 += 32;
      }
      while (v20 < *((unsigned __int16 *)a1 + 36));
      uint64_t v18 = a1[8];
    }
    heap_Free(*(void **)(v2 + 8), v18);
    a1[8] = 0;
  }
  *((_WORD *)a1 + 36) = 0;
  uint64_t v21 = a1[10];
  if (v21)
  {
    unsigned int v22 = *((unsigned __int16 *)a1 + 44);
    if (*((_WORD *)a1 + 44))
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      do
      {
        if (*(_WORD *)(v21 + v23 + 16))
        {
          heap_Free(*(void **)(v2 + 8), *(void *)(v21 + v23 + 8));
          uint64_t v21 = a1[10];
          uint64_t v25 = v21 + v23;
          *(void *)(v25 + 8) = 0;
          *(_WORD *)(v25 + 16) = 0;
          unsigned int v22 = *((unsigned __int16 *)a1 + 44);
        }
        ++v24;
        v23 += 24;
      }
      while (v24 < v22);
    }
    heap_Free(*(void **)(v2 + 8), v21);
    a1[10] = 0;
  }
  *((_WORD *)a1 + 44) = 0;
  if (*((_WORD *)a1 + 52))
  {
    heap_Free(*(void **)(v2 + 8), a1[12]);
    a1[12] = 0;
    *((_WORD *)a1 + 52) = 0;
    ssftmap_ObjClose(a1[14]);
  }
  if (a1[18])
  {
    uint64_t v26 = 0;
    int v27 = a1 + 48;
    do
    {
      heap_Free(*(void **)(v2 + 8), v27[v26]);
      v27[v26++] = 0;
    }
    while (v26 != 32);
    uint64_t v28 = a1[18];
    if (v28)
    {
      ssftmap_ObjClose(v28);
      a1[18] = 0;
    }
  }
  uint64_t v29 = a1[4];
  if (v29)
  {
    heap_Free(*(void **)(v2 + 8), v29);
    a1[4] = 0;
  }
  *((_WORD *)a1 + 20) = 0;
  return v5;
}

void *freeMAPRULE2STR_TRule_0(void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = a2[1];
  if (v4)
  {
    if (*(_WORD *)(v4 + 8))
    {
      heap_Free((void *)result[1], *(void *)v4);
      *(void *)uint64_t v4 = 0;
      uint64_t v4 = a2[1];
    }
    uint64_t result = heap_Free((void *)v3[1], v4);
    a2[1] = 0;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    if (*(_WORD *)(v5 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v5);
      *(void *)uint64_t v5 = 0;
      uint64_t v5 = a2[2];
    }
    uint64_t result = heap_Free((void *)v3[1], v5);
    a2[2] = 0;
  }
  uint64_t v6 = a2[3];
  if (v6)
  {
    if (*(_WORD *)(v6 + 8))
    {
      heap_Free((void *)v3[1], *(void *)v6);
      *(void *)uint64_t v6 = 0;
      uint64_t v6 = a2[3];
    }
    uint64_t result = heap_Free((void *)v3[1], v6);
    a2[3] = 0;
  }
  return result;
}

uint64_t matchSTATPOSCONTEXT_TRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v26 = 1;
  uint64_t v14 = *(void *)a2;
  *a6 = 0;
  *(unsigned int *)((char *)a5 + 6) = 0;
  if (*(_WORD *)(a2 + 8))
  {
    uint64_t v16 = (char **)(a3 + 80);
    uint64_t matched = logSTATPOSCONTEXT_TRule((const char **)(a3 + 80), (unsigned __int16 *)(a3 + 96), *(char **)(a3 + 88), (uint64_t *)a2, (uint64_t *)a4);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(v14 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"         %s %s", v17, v18, v19, a1);
    cstdlib_strcpy(*v16, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  if (*(_WORD *)(a4 + 8))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t matched = matchREGEX_TRule_0((uint64_t *)a2, (uint64_t *)a3, (unsigned __int16 *)(*(void *)a4 + v21), a5, &v26, a7, a8, a8);
      if ((matched & 0x80000000) != 0) {
        break;
      }
      int v23 = v26;
      if (v26 != 1) {
        goto LABEL_11;
      }
      ++v22;
      v21 += 6;
      if (v22 >= *(unsigned __int16 *)(a4 + 8)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    int v23 = 1;
LABEL_11:
    *a6 = v23;
  }
  return matched;
}

uint64_t matchREGEX_TRule_0(uint64_t *a1, uint64_t *a2, unsigned __int16 *a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v15 = *((unsigned __int16 *)a4 + 2);
  uint64_t v16 = *a1;
  *a5 = 0;
  if (*((_WORD *)a1 + 4)) {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           regex %d", a6, a7, a8, a3[1]);
  }
  unsigned int v17 = *((unsigned __int8 *)a3 + 4);
  if (*((unsigned char *)a3 + 4))
  {
    if ((v17 & 4) != 0)
    {
      if (v8 == 2)
      {
        ++*((_WORD *)a4 + 4);
      }
      else if (v8 == 1)
      {
        ++*((_WORD *)a4 + 3);
      }
      if (*((_WORD *)a1 + 4)) {
        log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           DIRECTIVE_MOVE2NEXT - window increased (ruleDef->left_window=%d ruleDef->right_window=%d)", a6, a7, a8, *((unsigned __int16 *)a4 + 3));
      }
      uint64_t v21 = 0;
      goto LABEL_29;
    }
    uint64_t v60 = (_WORD *)a6;
    int v18 = (v17 >> 1) & 1;
    int v19 = v17 & 1;
  }
  else
  {
    uint64_t v60 = (_WORD *)a6;
    int v19 = 0;
    int v18 = 0;
  }
  if (*((unsigned __int16 *)a1 + 4) >= 2u) {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           ruleDef[domain=%s(%d) wordIdx=%d left_window=%d right_window=%d] defMapIdx=%s(%d) bNegateMatch=%d bHasComma=%d", a6, a7, a8, (uint64_t)STATPOSDOMAIN2STRING[*a4]);
  }
  if (!v18)
  {
    if (*a4 - 1 <= 2 && v8 != 0)
    {
      if (v8 == 2)
      {
        v15 += *((unsigned __int16 *)a4 + 4) + 1;
        if (v15 >= *((unsigned __int16 *)a2 + 4)) {
          goto LABEL_37;
        }
      }
      else if (v8 != 1 || (v15 += ~*((unsigned __int16 *)a4 + 3), v15 < 0))
      {
LABEL_37:
        if (*((_WORD *)a1 + 4))
        {
          uint64_t v26 = *(void *)(v16 + 32);
          int v27 = "           context not found. rule not applicable. RETURN LH_FALSE";
LABEL_39:
          log_OutText(v26, (uint64_t)"FE_POS", 5, 0, (uint64_t)v27, a6, a7, a8, (uint64_t)v59);
          goto LABEL_134;
        }
        goto LABEL_134;
      }
    }
    switch(*a4)
    {
      case 1u:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 48) + 8 * *a3);
        goto LABEL_58;
      case 2u:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 56) + 24 * *a3 + 16);
        goto LABEL_58;
      case 3u:
        uint64_t v28 = *a3;
        if (v28 != *((unsigned __int16 *)a1 + 9)) {
          goto LABEL_56;
        }
        unint64_t v24 = (char *)(a2[2] + *(unsigned __int16 *)(a2[3] + 2 * (unsigned __int16)v15));
        goto LABEL_58;
      case 4u:
        uint64_t v29 = *a2;
        int v30 = *((unsigned __int16 *)a4 + 2);
        uint64_t v31 = *(void *)(*a2 + 160 * *((unsigned __int16 *)a4 + 2) + 56);
        if (!v31 || !*(_DWORD *)(v31 + 24 * *((unsigned __int16 *)a1 + 12))) {
          goto LABEL_134;
        }
        uint64_t v32 = *a1;
        if (v8 == 2)
        {
          unsigned int v49 = *((unsigned __int16 *)a2 + 4);
          if (v30 + 1 != v49)
          {
            int v55 = *((unsigned __int16 *)a4 + 4) + 1;
            if ((v55 & 0x10000) != 0)
            {
              unsigned __int16 v56 = *((_WORD *)a4 + 2);
LABEL_112:
              unsigned int v58 = *((unsigned __int16 *)a1 + 4);
              if (v49 > v56)
              {
                if (v58 >= 2) {
                  log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           [3] _RIGHT wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
                }
                LOWORD(v30) = v56;
                goto LABEL_116;
              }
            }
            else
            {
              unsigned __int16 v56 = *((_WORD *)a4 + 2);
              while (v49 > v56)
              {
                unsigned __int16 v56 = *(_WORD *)(*(void *)(v29 + 160 * v56 + 56) + 24 * *((unsigned __int16 *)a1 + 12) + 10) + 1;
                if (!(_WORD)--v55) {
                  goto LABEL_112;
                }
              }
              unsigned int v58 = *((unsigned __int16 *)a1 + 4);
            }
            if (v58 >= 2)
            {
              uint64_t v26 = *(void *)(v32 + 32);
              int v27 = "           [2] _RIGHT doesnt exist, return LH_FALSE";
              goto LABEL_39;
            }
LABEL_134:
            uint64_t v21 = 0;
            goto LABEL_135;
          }
          if (*((unsigned __int16 *)a1 + 4) < 2u) {
            goto LABEL_134;
          }
          uint64_t v50 = *(void *)(v32 + 32);
          uint64_t v51 = "           [1] _RIGHT doesnt exist, return LH_FALSE";
        }
        else
        {
          if (v8 != 1)
          {
            if (!v8 && *((unsigned __int16 *)a1 + 4) >= 2u)
            {
              log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           _CUR wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
              LOWORD(v30) = *((_WORD *)a4 + 2);
            }
            goto LABEL_116;
          }
          if (*((_WORD *)a4 + 2))
          {
            int v52 = *((unsigned __int16 *)a4 + 3) + 1;
            if ((v52 & 0x10000) != 0)
            {
              unsigned int v53 = *((unsigned __int16 *)a1 + 4);
              __int16 v54 = *((_WORD *)a4 + 2);
            }
            else
            {
              __int16 v54 = *((_WORD *)a4 + 2);
              do
              {
                uint64_t v57 = *(void *)(v29 + 160 * (unsigned __int16)(v54 - 1) + 56);
                if (!*(_DWORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 4))
                {
                  uint64_t v21 = 2313166848;
                  log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"wordindex=%d does not end previous phrase", a6, a7, a8, (unsigned __int16)(v54 - 1));
                  return v21;
                }
                __int16 v54 = *(_WORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 8);
                --v52;
              }
              while ((_WORD)v52 && *(_WORD *)(v57 + 24 * *((unsigned __int16 *)a1 + 12) + 8));
              unsigned int v53 = *((unsigned __int16 *)a1 + 4);
              if ((_WORD)v52)
              {
                if (v53 < 2) {
                  goto LABEL_134;
                }
                uint64_t v50 = *(void *)(v32 + 32);
                uint64_t v51 = "           [2] _LEFT doesnt exist, return LH_FALSE";
                goto LABEL_108;
              }
            }
            if (v53 >= 2) {
              log_OutText(*(void *)(v32 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           [3] _LEFT wordIdx=%d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
            }
            LOWORD(v30) = v54;
LABEL_116:
            unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v30 + 144) + 8 * *a3);
            if (!v24)
            {
              if (*((_WORD *)a1 + 4))
              {
                uint64_t v48 = "           NULL STR FOUND - no match";
LABEL_119:
                log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)v48, a6, a7, a8, (uint64_t)v59);
              }
              uint64_t v21 = 0;
              *a5 = 0;
              goto LABEL_121;
            }
LABEL_59:
            if (*((_WORD *)a1 + 4)) {
              log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           STR=\"%s\"", a6, a7, a8, (uint64_t)v24);
            }
            uint64_t v33 = a3[1];
            unsigned __int16 v34 = cstdlib_strlen(v24);
            if (!v34)
            {
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"invalid arg for regex", v35, v36, v37, (uint64_t)v59);
              return 2313166855;
            }
            *a5 = 0;
            unsigned int v38 = nuance_pcre_exec((void *)a1[24], a1[25], a1[27] + *(unsigned int *)(a1[28] + 4 * v33), 0, v24, v34, 0, 0, v61, 30);
            if ((v38 & 0x80000000) != 0)
            {
              uint64_t v43 = nuance_pcre_ErrorToLhError(v38);
              uint64_t v21 = v43;
              if ((v43 & 0xFFF00000) != 0x8A500000)
              {
                if ((v43 & 0x80000000) != 0) {
                  return v21;
                }
LABEL_68:
                if (*a5 == 1)
                {
                  if (*((_WORD *)a1 + 4)) {
                    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FIRED", a6, a7, a8, (uint64_t)v59);
                  }
                  if (!v19)
                  {
                    *uint64_t v60 = a3[1];
                    if (*((_WORD *)a1 + 4))
                    {
                      uint64_t v41 = *(void *)(v16 + 32);
                      uint64_t v42 = "           return LH_TRUE";
LABEL_126:
                      log_OutText(v41, (uint64_t)"FE_POS", 5, 0, (uint64_t)v42, a6, a7, a8, (uint64_t)v59);
                    }
LABEL_29:
                    int v22 = 1;
                    goto LABEL_30;
                  }
                  if (*((_WORD *)a1 + 4))
                  {
                    uint64_t v39 = *(void *)(v16 + 32);
                    uint64_t v40 = "           negate match - return LH_FALSE";
LABEL_129:
                    log_OutText(v39, (uint64_t)"FE_POS", 5, 0, (uint64_t)v40, a6, a7, a8, (uint64_t)v59);
                  }
LABEL_135:
                  *a5 = 0;
                  return v21;
                }
LABEL_121:
                if (*((_WORD *)a1 + 4)) {
                  log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           REGEX FAILED", a6, a7, a8, (uint64_t)v59);
                }
LABEL_123:
                if (v19)
                {
                  *uint64_t v60 = a3[1];
                  if (*((_WORD *)a1 + 4))
                  {
                    uint64_t v41 = *(void *)(v16 + 32);
                    uint64_t v42 = "           negate match - return LH_TRUE";
                    goto LABEL_126;
                  }
                  goto LABEL_29;
                }
                if (*((_WORD *)a1 + 4))
                {
                  uint64_t v39 = *(void *)(v16 + 32);
                  uint64_t v40 = "           return LH_FALSE";
                  goto LABEL_129;
                }
                goto LABEL_135;
              }
              if ((v43 & 0x1FFF) != 0x14)
              {
                if ((v43 & 0x1FFF) == 0xA)
                {
                  uint64_t v45 = *(void *)(*a1 + 32);
                  uint64_t v46 = 11002;
                  uint64_t v47 = 0;
                }
                else
                {
                  uint64_t v45 = *(void *)(*a1 + 32);
                  uint64_t v59 = "lhError";
                  uint64_t v47 = "%s%x";
                  uint64_t v46 = 11027;
                }
                log_OutPublic(v45, (uint64_t)"FE_POS", v46, (uint64_t)v47, v44, a6, a7, a8, v59);
                return v21;
              }
            }
            else if (v38)
            {
              *a5 = 1;
            }
LABEL_67:
            uint64_t v21 = 0;
            goto LABEL_68;
          }
          if (*((unsigned __int16 *)a1 + 4) < 2u) {
            goto LABEL_134;
          }
          uint64_t v50 = *(void *)(v32 + 32);
          uint64_t v51 = "           [1] _LEFT doesnt exist, return LH_FALSE";
        }
LABEL_108:
        log_OutText(v50, (uint64_t)"FE_POS", 5, 0, (uint64_t)v51, a6, a7, a8, 0);
        goto LABEL_134;
      case 5u:
        if (*a3 == *((unsigned __int16 *)a1 + 9)) {
          unint64_t v24 = (char *)a2[2];
        }
        else {
          unint64_t v24 = (char *)a2[4];
        }
        goto LABEL_58;
      case 6u:
        unint64_t v24 = (char *)a2[6];
        if (!v24)
        {
          uint64_t v48 = "           ERROR : no POS string to match";
          goto LABEL_119;
        }
        uint64_t v28 = *a3;
        if (v28 == *((unsigned __int16 *)a1 + 9)) {
          goto LABEL_59;
        }
        if (v28 != *((unsigned __int16 *)a1 + 8))
        {
          uint64_t v48 = "           ERROR : unknown DEF index for POS/ORT rule";
          goto LABEL_119;
        }
LABEL_56:
        unint64_t v24 = *(char **)(*(void *)(*a2 + 160 * (unsigned __int16)v15 + 48) + 8 * v28);
LABEL_58:
        if (v24) {
          goto LABEL_59;
        }
LABEL_65:
        *a5 = 0;
        if (*((_WORD *)a1 + 4))
        {
          log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           NULL STR FOUND - no match", a6, a7, a8, (uint64_t)v59);
          goto LABEL_67;
        }
        uint64_t v21 = 0;
        goto LABEL_123;
      default:
        goto LABEL_65;
    }
  }
  unsigned int v20 = *((unsigned __int16 *)a4 + 2);
  if (*((_WORD *)a1 + 4))
  {
    log_OutText(*(void *)(v16 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"           pSent->words[%d].bHasComma = %d", a6, a7, a8, *((unsigned __int16 *)a4 + 2));
    unsigned int v20 = *((unsigned __int16 *)a4 + 2);
  }
  if (*(_DWORD *)(*a2 + 160 * v20 + 12) == 1)
  {
    uint64_t v21 = 0;
    int v22 = v19 ^ 1;
LABEL_30:
    *a5 = v22;
    return v21;
  }
  uint64_t v21 = 0;
  *a5 = v19;
  return v21;
}

uint64_t matchSTATPOSRULE_TRule(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int *a5)
{
  int v21 = 1;
  if (*(_WORD *)(a1 + 8))
  {
    uint64_t v10 = *(void *)a1;
    uint64_t v11 = (uint64_t *)(a2 + 80);
    uint64_t matched = logSTATPOSRULE_TRule(*(unsigned int *)(a2 + 100), (const char **)(a2 + 80), (unsigned __int16 *)(a2 + 96), *(char **)(a2 + 88), (uint64_t *)a1, (uint64_t **)a3);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    log_OutText(*(void *)(v10 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"       <%s>", v12, v13, v14, *v11);
    cstdlib_strcpy((char *)*v11, "");
  }
  else
  {
    uint64_t matched = 0;
  }
  *a5 = 0;
  if (*(void *)a3)
  {
    uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"LEFT", a1, a2, *(void *)a3, a4, &v21, (uint64_t)v20, 1);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v16 = v21;
    if (v21 != 1) {
      goto LABEL_15;
    }
  }
  uint64_t v17 = *(void *)(a3 + 8);
  if (v17)
  {
    int v21 = 0;
    uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"CUR", a1, a2, v17, a4, &v21, (uint64_t)v20, 0);
    if ((matched & 0x80000000) != 0) {
      return matched;
    }
    int v16 = v21;
    if (v21 != 1)
    {
LABEL_15:
      *a5 = v16;
      return matched;
    }
  }
  uint64_t v18 = *(void *)(a3 + 16);
  if (!v18)
  {
    int v16 = 1;
    goto LABEL_15;
  }
  int v21 = 0;
  uint64_t matched = matchSTATPOSCONTEXT_TRule((uint64_t)"RIGHT", a1, a2, v18, a4, &v21, (uint64_t)v20, 2);
  if ((matched & 0x80000000) == 0)
  {
    int v16 = v21;
    goto LABEL_15;
  }
  return matched;
}

uint64_t statPOSMatchMAPRULE2STR_TRule(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, int *a5)
{
  *a5 = 0;
  return matchSTATPOSRULE_TRule(a1, a2, a3 + 8, a4, a5);
}

uint64_t statPOSMatchMMAPREGEX2STR_TRule(uint64_t *a1, uint64_t *a2, unsigned __int16 *a3, unsigned int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a5 = 0;
  return matchREGEX_TRule_0(a1, a2, a3, a4, a5, a6, 0, a8);
}

uint64_t getBrokerString_0(uint64_t a1, unsigned char *a2, size_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  __s = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v14 = 0u;
  *(_DWORD *)__s2 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s);
  if ((result & 0x80000000) == 0)
  {
    size_t v7 = 0;
    if (cstdlib_strlen(__s))
    {
      do
      {
        unint64_t v8 = v7;
        __s2[v7] = cstdlib_tolower(__s[v7]);
        ++v7;
        size_t v9 = cstdlib_strlen(__s);
      }
      while (v8 <= 1 && v7 < v9);
    }
    __s2[v7] = 0;
    if (cstdlib_strcmp(__s, __s2))
    {
      uint64_t v10 = __s2;
      uint64_t result = paramc_ParamSetStr(*(void *)(a1 + 40), (uint64_t)"langcode", __s2);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      __s = __s2;
    }
    else
    {
      uint64_t v10 = __s;
    }
    cstdlib_strcpy(__dst, v10);
    cstdlib_strcat(__dst, "/");
    cstdlib_strcat(__dst, "statpos");
    return brokeraux_ComposeBrokerString(a1, __dst, 0, 1, __s, 0, 0, a2, a3);
  }
  return result;
}

uint64_t statpos_setParams(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  if ((paramc_ParamGetInt(*(void *)(a1 + 40), (uint64_t)"statposdetailtrace", &v4) & 0x80000000) == 0) {
    *(_WORD *)(a2 + 8) = v4;
  }
  return 0;
}

uint64_t statPOSAddUniqueTagOffset2Word(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, __int16 a5)
{
  if (a4 == -1) {
    return 0;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a3;
  uint64_t v12 = *(unsigned __int16 *)(*a2 + 160 * a3 + 72);
  if (!*(_WORD *)(*a2 + 160 * a3 + 72))
  {
LABEL_6:
    if (*(_WORD *)(v10 + 160 * a3 + 74))
    {
      if ((int)v12 + 2 <= *(unsigned __int16 *)(v10 + 160 * a3 + 74)) {
        goto LABEL_17;
      }
      uint64_t v16 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v10 + 160 * a3 + 64), 24 * *(unsigned __int16 *)(v10 + 160 * a3 + 74) + 144);
      if (v16)
      {
        uint64_t v21 = *a2 + 160 * v11;
        *(void *)(v21 + 64) = v16;
        cstdlib_memset((void *)(v16 + 24 * *(unsigned __int16 *)(v21 + 74)), 0, 0x78uLL);
        uint64_t v10 = *a2;
        uint64_t v22 = *a2 + 160 * v11;
        __int16 v23 = *(_WORD *)(v22 + 74) + 5;
LABEL_16:
        *(_WORD *)(v22 + 74) = v23;
LABEL_17:
        uint64_t v27 = v10 + 160 * v11;
        unsigned int v28 = *(unsigned __int16 *)(v27 + 72);
        *(_DWORD *)(*(void *)(v27 + 64) + 24 * *(unsigned __int16 *)(v27 + 72)) = a4;
        uint64_t v29 = statPOSAddWordRec(a1, (uint64_t)a2, a3, v28, a5);
        if ((v29 & 0x80000000) != 0) {
          return v29;
        }
        uint64_t v24 = 0;
        ++*(_WORD *)(*a2 + 160 * v11 + 72);
        return v24;
      }
    }
    else
    {
      uint64_t v26 = heap_Calloc(*(void **)(a1 + 8), 1, 241);
      uint64_t v10 = *a2;
      *(void *)(*a2 + 160 * v11 + 64) = v26;
      if (v26)
      {
        uint64_t v22 = v10 + 160 * v11;
        __int16 v23 = 10;
        goto LABEL_16;
      }
    }
    uint64_t v24 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v17, v18, v19, v20, v30);
    return v24;
  }
  uint64_t v13 = 0;
  long long v14 = *(int **)(v10 + 160 * a3 + 64);
  while (1)
  {
    int v15 = *v14;
    v14 += 6;
    if (v15 == a4) {
      break;
    }
    if (v12 == ++v13) {
      goto LABEL_6;
    }
  }

  return statPOSAddWordRec(a1, (uint64_t)a2, a3, (unsigned __int16)v13, a5);
}

uint64_t statPOSAddWordRec(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, __int16 a5)
{
  uint64_t v8 = a3;
  uint64_t v9 = *(void *)(*(void *)a2 + 160 * a3 + 64);
  uint64_t v10 = a4;
  if (!*(_WORD *)(v9 + 24 * a4 + 18))
  {
    uint64_t v19 = heap_Calloc(*(void **)(a1 + 8), 1, 121);
    uint64_t v9 = *(void *)(*(void *)a2 + 160 * v8 + 64);
    *(void *)(v9 + 24 * v10 + 8) = v19;
    if (v19)
    {
      uint64_t v17 = v9 + 24 * v10;
      __int16 v18 = 5;
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v24 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v12, v13, v14, v15, v27);
    return v24;
  }
  if (*(unsigned __int16 *)(v9 + 24 * a4 + 16) + 2 <= *(unsigned __int16 *)(v9 + 24 * a4 + 18)) {
    goto LABEL_8;
  }
  uint64_t v11 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(v9 + 24 * a4 + 8), 24 * *(unsigned __int16 *)(v9 + 24 * a4 + 18) + 144);
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  *(void *)(v16 + 8) = v11;
  cstdlib_memset((void *)(v11 + 24 * *(unsigned __int16 *)(v16 + 18)), 0, 0x78uLL);
  uint64_t v9 = *(void *)(*(void *)a2 + 160 * v8 + 64);
  uint64_t v17 = v9 + 24 * v10;
  __int16 v18 = *(_WORD *)(v17 + 18) + 5;
LABEL_7:
  *(_WORD *)(v17 + 18) = v18;
LABEL_8:
  *(_WORD *)(*(void *)(v9 + 24 * v10 + 8) + 24 * *(unsigned __int16 *)(v9 + 24 * v10 + 16)) = a5;
  uint64_t v20 = *(void **)(a1 + 8);
  int v21 = cstdlib_strlen(*(const char **)(a2 + 56));
  uint64_t v22 = (char *)heap_Calloc(v20, 1, (v21 + 1));
  uint64_t v23 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  *(void *)(*(void *)(v23 + 8) + 24 * *(unsigned __int16 *)(v23 + 16) + 16) = v22;
  if (!v22) {
    goto LABEL_10;
  }
  cstdlib_strcpy(v22, *(const char **)(a2 + 56));
  uint64_t v24 = 0;
  uint64_t v25 = *(void *)(*(void *)a2 + 160 * v8 + 64) + 24 * v10;
  ++*(_WORD *)(v25 + 16);
  return v24;
}

uint64_t statpos_initCache(uint64_t result)
{
  *(_DWORD *)(result + 72) = 0;
  *(void *)(result + 64) = 0;
  return result;
}

uint64_t statpos_freeCache(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 72))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 64);
    do
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(v6 + v4));
      uint64_t v6 = *(void *)(a2 + 64);
      *(void *)(v6 + v4) = 0;
      ++v5;
      v4 += 16;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 72));
  }
  heap_Free(*(void **)(a1 + 8), *(void *)(a2 + 64));
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  return 0;
}

uint64_t statpos_retagPOS(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _DWORD *a5, _WORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  int v84 = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  if (!v9)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"missing statpos data => must be included in CLC to train a POS model", (uint64_t)a6, a7, a8, v77);
    return 2313166848;
  }
  memset(v83, 0, 12);
  int v14 = *(unsigned __int16 *)(v9 + 16);
  if (*(_WORD *)(v9 + 16))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)(*(void *)(v9 + 8) + v15);
      WORD2(v83[0]) = a4;
      LODWORD(v83[0]) = 6;
      *(_DWORD *)((char *)v83 + 6) = 0;
      uint64_t v18 = *(void *)(a2 + 64);
      int v85 = 0;
      uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v18 + 32 * v17 + 8, (unsigned int *)v83, &v85);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      int v14 = v85;
      if (v85 == 1)
      {
        uint64_t v60 = 32 * v17;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v20, v21, v22, v17);
        *(void *)(a3 + 48) = *(void *)(a2 + 296)
                             + *(unsigned int *)(*(void *)(a2 + 304)
                                               + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v17));
        uint64_t v61 = a1;
        goto LABEL_71;
      }
      ++v16;
      uint64_t v9 = *(void *)(a2 + 80);
      v15 += 8;
    }
    while (v16 < *(unsigned __int16 *)(v9 + 16));
  }
  uint64_t v79 = a5;
  uint64_t v80 = a1;
  if (!*(_WORD *)(a2 + 88))
  {
LABEL_35:
    uint64_t v46 = *(unsigned __int16 *)(a2 + 90);
    WORD2(v83[0]) = a4;
    LODWORD(v83[0]) = 6;
    *(_DWORD *)((char *)v83 + 6) = 0;
    uint64_t v47 = *(void *)(a2 + 64);
    int v85 = 0;
    uint64_t v51 = matchSTATPOSRULE_TRule(a2, a3, v47 + 32 * v46 + 8, (unsigned int *)v83, &v85);
    if ((v51 & 0x80000000) != 0) {
      return v51;
    }
    if (v85 != 1)
    {
      if (!*(_WORD *)(a2 + 104)) {
        log_OutText(*(void *)(v80 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"ERROR? NO MS1 RETAGGING OF %s", v48, v49, v50, *(void *)(a3 + 48));
      }
      return v51;
    }
    uint64_t v52 = 32 * v46;
    log_OutText(*(void *)(v80 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d RETAG POS %s to %s on word[%d]=%s", v48, v49, v50, v46);
    *(void *)(a3 + 48) = *(void *)(a2 + 296)
                         + *(unsigned int *)(*(void *)(a2 + 304)
                                           + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v46));
    uint64_t v53 = v80;
    uint64_t v54 = a2;
    int v55 = (void *)a3;
    unsigned int v56 = a4;
    uint64_t v57 = v79;
    unsigned int v58 = v79;
    unsigned int v59 = v46;
    goto LABEL_62;
  }
  uint64_t v23 = 0;
  while (**(unsigned __int8 **)(a3 + 48) != *(unsigned __int8 *)(*(void *)(a2 + 80) + 24 * v23))
  {
LABEL_34:
    if (++v23 >= (unint64_t)*(unsigned __int16 *)(a2 + 88)) {
      goto LABEL_35;
    }
  }
  if (!v14)
  {
    uint64_t v38 = 0;
    unint64_t v24 = 0;
    while (1)
    {
      uint64_t v39 = *(void *)(a2 + 80);
      if (v24 >= *(unsigned __int16 *)(v39 + 24 * v23 + 16)) {
        goto LABEL_12;
      }
      uint64_t v40 = *(void *)(v39 + 24 * v23 + 8);
      if (*(_DWORD *)(v40 + v38 + 4)) {
        goto LABEL_12;
      }
      uint64_t v41 = *(unsigned __int16 *)(v40 + v38);
      WORD2(v83[0]) = a4;
      LODWORD(v83[0]) = 6;
      *(_DWORD *)((char *)v83 + 6) = 0;
      uint64_t v42 = *(void *)(a2 + 64);
      int v85 = 0;
      uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v42 + 32 * v41 + 8, (unsigned int *)v83, &v85);
      if ((matched & 0x80000000) != 0) {
        return matched;
      }
      if (v85 == 1) {
        break;
      }
      ++v24;
      v38 += 8;
      if (v85) {
        goto LABEL_12;
      }
    }
    uint64_t v52 = 32 * v41;
    log_OutText(*(void *)(v80 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v43, v44, v45, v41);
    *(void *)(a3 + 48) = *(void *)(a2 + 296)
                         + *(unsigned int *)(*(void *)(a2 + 304)
                                           + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v41));
    uint64_t v53 = v80;
    uint64_t v54 = a2;
    int v55 = (void *)a3;
    unsigned int v56 = a4;
    uint64_t v57 = v79;
    unsigned int v58 = v79;
    unsigned int v59 = v41;
LABEL_62:
    uint64_t v51 = statpos_doFurtherRetagging(v53, v54, v55, v56, v58, v59, &v84);
    if ((v51 & 0x80000000) == 0 && v84 != 1) {
      _DWORD *v57 = *(_DWORD *)(*(void *)(a2 + 64) + v52);
    }
    return v51;
  }
  LOWORD(v24) = 0;
LABEL_12:
  int v85 = 0;
  if (*(_WORD *)(a3 + 72))
  {
    statpos_getBracketlessString(__s1, *(char **)(a3 + 48));
    if (*(_WORD *)(a3 + 72))
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      while (cstdlib_strcmp(__s1, *(const char **)(*(void *)(a3 + 64) + v25)))
      {
        ++v26;
        v25 += 16;
        if (v26 >= *(unsigned __int16 *)(a3 + 72)) {
          goto LABEL_17;
        }
      }
      uint64_t v17 = *(unsigned __int16 *)(*(void *)(a3 + 64) + v25 + 8);
      uint64_t v60 = 32 * v17;
      log_OutText(*(void *)(v80 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE FROM CACHE %d RETAG POS %s to %s on word[%d]=%s", v27, v28, v29, v17);
      int v62 = *(_DWORD *)(*(void *)(*(void *)(a2 + 80) + 24 * v23 + 8) + 8 * (unsigned __int16)v24 + 4);
      a5 = v79;
      if (v62 == 1 && (unsigned __int16)*a6 <= 0xEu)
      {
        statpos_getBracketlessString(__s1, *(char **)(a3 + 48));
        if (*a6)
        {
          unint64_t v63 = 0;
          int v64 = 0;
          do
          {
            if (!cstdlib_strcmp(__s1, *(const char **)(a7 + 8 * v63))) {
              int v64 = 1;
            }
            ++v63;
            unint64_t v65 = (unsigned __int16)*a6;
          }
          while (v63 < v65);
          if (v64) {
            goto LABEL_67;
          }
        }
        else
        {
          unint64_t v65 = 0;
        }
        cstdlib_strncpy(*(char **)(a7 + 8 * v65), __s1, 0x10uLL);
        ++*a6;
      }
LABEL_67:
      *(void *)(a3 + 48) = *(void *)(a2 + 296)
                           + *(unsigned int *)(*(void *)(a2 + 304)
                                             + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v17));
      uint64_t v61 = v80;
      goto LABEL_71;
    }
  }
LABEL_17:
  uint64_t v30 = -1;
  uint64_t v31 = 4;
  while (1)
  {
    uint64_t v32 = *(void *)(a2 + 80);
    if (++v30 >= (unint64_t)*(unsigned __int16 *)(v32 + 24 * v23 + 16))
    {
      int v14 = 0;
      goto LABEL_34;
    }
    uint64_t v33 = *(void *)(v32 + 24 * v23 + 8);
    if (*(_DWORD *)(v33 + v31) == 1) {
      break;
    }
    int v14 = 0;
LABEL_24:
    v31 += 8;
    if (v14) {
      goto LABEL_34;
    }
  }
  uint64_t v17 = *(unsigned __int16 *)(v33 + v31 - 4);
  WORD2(v83[0]) = a4;
  LODWORD(v83[0]) = 6;
  *(_DWORD *)((char *)v83 + 6) = 0;
  uint64_t v34 = *(void *)(a2 + 64);
  int v85 = 0;
  uint64_t matched = matchSTATPOSRULE_TRule(a2, a3, v34 + 32 * v17 + 8, (unsigned int *)v83, &v85);
  if ((matched & 0x80000000) != 0) {
    return matched;
  }
  int v14 = v85;
  if (v85 != 1) {
    goto LABEL_24;
  }
  uint64_t v66 = v80;
  uint64_t v60 = 32 * v17;
  log_OutText(*(void *)(v80 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"FIRED MS1 RETAGGING RULE %d %s RETAG POS %s to %s on word[%d]=%s", v35, v36, v37, v17);
  int v72 = *(_DWORD *)(*(void *)(*(void *)(a2 + 80) + 24 * v23 + 8) + v31);
  a5 = v79;
  if (v72 == 1)
  {
    statpos_addToCache(v80, a3, v17, v67, v68, v69, v70, v71, v78);
    if ((unsigned __int16)*a6 <= 0xEu)
    {
      statpos_getBracketlessString(__s1, *(char **)(a3 + 48));
      if (!*a6)
      {
        unint64_t v75 = 0;
        goto LABEL_69;
      }
      unint64_t v73 = 0;
      int v74 = 0;
      do
      {
        if (!cstdlib_strcmp(__s1, *(const char **)(a7 + 8 * v73))) {
          int v74 = 1;
        }
        ++v73;
        unint64_t v75 = (unsigned __int16)*a6;
      }
      while (v73 < v75);
      uint64_t v66 = v80;
      if (!v74)
      {
LABEL_69:
        cstdlib_strncpy(*(char **)(a7 + 8 * v75), __s1, 0x10uLL);
        ++*a6;
      }
    }
  }
  *(void *)(a3 + 48) = *(void *)(a2 + 296)
                       + *(unsigned int *)(*(void *)(a2 + 304)
                                         + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * v17));
  uint64_t v61 = v66;
LABEL_71:
  uint64_t v51 = statpos_doFurtherRetagging(v61, a2, (void *)a3, a4, a5, v17, &v84);
  if ((v51 & 0x80000000) == 0 && v84 != 1) {
    *a5 = *(_DWORD *)(*(void *)(a2 + 64) + v60);
  }
  return v51;
}

uint64_t statpos_doFurtherRetagging(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, _DWORD *a5, unsigned int a6, int *a7)
{
  __int16 v9 = a4;
  *a7 = 0;
  int v13 = *(_DWORD *)(*a3 + 160 * a4 + 8);
  if (v13)
  {
    uint64_t matched = 0;
    if (v13 != 1) {
      return matched;
    }
    int v15 = *(_DWORD *)(a2 + 124);
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 128);
  }
  if (v15 != 1) {
    return 0;
  }
  *(_DWORD *)&v27[2] = 0;
  if (!*(_WORD *)(a2 + 56)) {
    return 0;
  }
  uint64_t v16 = 0;
  for (unint64_t i = 0; i < *(unsigned __int16 *)(a2 + 56); ++i)
  {
    __int16 v26 = v9;
    unsigned int v25 = 6;
    *(_DWORD *)uint64_t v27 = 0;
    uint64_t v18 = *(void *)(a2 + 48);
    *a7 = 0;
    uint64_t matched = matchSTATPOSRULE_TRule(a2, (uint64_t)a3, v18 + v16 + 8, &v25, a7);
    if ((matched & 0x80000000) != 0) {
      break;
    }
    if (*a7)
    {
      if (*a7 == 1)
      {
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"RETAGGING MS1 %s to %s", v19, v20, v21, *(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304) + 4 * *(unsigned int *)(*(void *)(a2 + 64) + 32 * a6)));
        uint64_t v23 = *(unsigned int *)(*(void *)(a2 + 48) + v16);
        a3[6] = *(void *)(a2 + 296) + *(unsigned int *)(*(void *)(a2 + 304) + 4 * v23);
        *a5 = v23;
      }
      return matched;
    }
    v16 += 32;
  }
  return matched;
}

char *statpos_getBracketlessString(char *a1, char *__s)
{
  unsigned __int16 v4 = cstdlib_strlen(__s);
  if (v4 <= 0x10uLL) {
    unsigned __int16 v5 = v4;
  }
  else {
    unsigned __int16 v5 = 16;
  }
  uint64_t result = cstdlib_strncpy(a1, __s, v5);
  if (v5)
  {
    unsigned __int16 v7 = 0;
    do
    {
      if (a1[v7] == 40)
      {
        a1[v7] = 0;
        unsigned __int16 v7 = v5;
      }
      ++v7;
    }
    while (v7 < v5);
  }
  return result;
}

char *statpos_addToCache(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unsigned int v12 = *(unsigned __int16 *)(a2 + 74);
  if (!*(_WORD *)(a2 + 74))
  {
    uint64_t v13 = heap_Calloc(*(void **)(a1 + 8), 1, 801);
    *(void *)(a2 + 64) = v13;
    if (!v13) {
      goto LABEL_9;
    }
    unsigned int v12 = 50;
    *(_WORD *)(a2 + 74) = 50;
  }
  if (*(unsigned __int16 *)(a2 + 72) + 1 < v12) {
    goto LABEL_7;
  }
  uint64_t v18 = heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 64), 16 * v12 + 320);
  if (v18)
  {
    *(void *)(a2 + 64) = v18;
    *(_WORD *)(a2 + 74) += 20;
LABEL_7:
    statpos_getBracketlessString(__s, *(char **)(a2 + 48));
    unsigned __int16 v19 = cstdlib_strlen(__s);
    uint64_t v20 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, v19 + 1);
    *(void *)(*(void *)(a2 + 64) + 16 * *(unsigned __int16 *)(a2 + 72)) = v20;
    if (!v20) {
      return (char *)log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v21, v22, v23, v24, v28);
    }
    uint64_t result = cstdlib_strcpy(v20, __s);
    uint64_t v26 = *(unsigned __int16 *)(a2 + 72);
    *(_WORD *)(*(void *)(a2 + 64) + 16 * v26 + 8) = a3;
    *(_WORD *)(a2 + 72) = v26 + 1;
    return result;
  }
LABEL_9:
  uint64_t v27 = *(void *)(a1 + 32);

  return (char *)log_OutPublic(v27, (uint64_t)"FE_POS", 35000, 0, v14, v15, v16, v17, a9);
}

uint64_t statpos_retagREFPOS(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  *(_DWORD *)&v27[2] = 0;
  if (!*(_WORD *)(a2 + 56)) {
    return 0;
  }
  uint64_t v8 = 0;
  for (unint64_t i = 0; i < *(unsigned __int16 *)(a2 + 56); ++i)
  {
    __int16 v26 = a4;
    unsigned int v25 = 6;
    *(_DWORD *)uint64_t v27 = 0;
    uint64_t v10 = *(void *)(a2 + 48);
    int v28 = 0;
    uint64_t matched = matchSTATPOSRULE_TRule(a2, (uint64_t)a3, v10 + v8 + 8, &v25, &v28);
    if ((matched & 0x80000000) != 0) {
      break;
    }
    if (v28)
    {
      if (v28 == 1)
      {
        uint64_t v15 = 5 * a4;
        log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"REFRETAG : FIRED RETAGGING RULE %d RETAG REF POS %s to %s on word[%d]=%s", v11, v12, v13, i);
        uint64_t v16 = *(void **)(a1 + 8);
        int v17 = cstdlib_strlen((const char *)(*(void *)(a2 + 296)
                                          + *(unsigned int *)(*(void *)(a2 + 304)
                                                            + 4 * *(unsigned int *)(*(void *)(a2 + 48) + v8))));
        uint64_t v18 = (char *)heap_Calloc(v16, 1, (v17 + 1));
        *(void *)(*a3 + 32 * v15 + 112) = v18;
        if (v18)
        {
          cstdlib_strcpy(v18, (const char *)(*(void *)(a2 + 296)+ *(unsigned int *)(*(void *)(a2 + 304) + 4 * *(unsigned int *)(*(void *)(a2 + 48) + v8))));
        }
        else
        {
          log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v19, v20, v21, v22, v24);
          return 2313166858;
        }
      }
      return matched;
    }
    v8 += 32;
  }
  return matched;
}

uint64_t statpos_getPOSOffset(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v11 = 0;
  *a4 = -1;
  if (!*(_WORD *)(a2 + 104)) {
    return 0;
  }
  uint64_t result = ssftmap_Find(*(void *)(a2 + 112), a3, &v11);
  if ((result & 0x1FFF) == 0x14)
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"ERROR? NO LISTOFPOS RETAGGING OF %s", v8, v9, v10, a3);
    return 0;
  }
  *a4 = *v11;
  return result;
}

uint64_t statpos_getStrSetting(uint64_t a1, char *__s1)
{
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 296)+ *(unsigned int *)(*(void *)(a1 + 304) + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v4)))))
  {
    ++v5;
    v4 += 8;
    if (v5 >= *(unsigned __int16 *)(a1 + 40)) {
      return 0;
    }
  }
  return *(void *)(a1 + 296)
       + *(unsigned int *)(*(void *)(a1 + 304) + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v4 + 4));
}

uint64_t statpos_charCheck(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char *__s1)
{
  if (!*(_WORD *)(a1 + 40)) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = (const char *)(a2 + a3);
  size_t v10 = a4;
  while (1)
  {
    if (!cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 296)+ *(unsigned int *)(*(void *)(a1 + 304)+ 4 * *(unsigned int *)(*(void *)(a1 + 32) + 8 * v8)))))
    {
      uint64_t v11 = (const char *)(*(void *)(a1 + 296)
                         + *(unsigned int *)(*(void *)(a1 + 304)
                                           + 4 * *(unsigned int *)(*(void *)(a1 + 32) + 8 * v8 + 4)));
      int v12 = cstdlib_strlen(v11);
      int v13 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)v11, v12);
      if (v13) {
        break;
      }
    }
LABEL_4:
    if (++v8 >= (unint64_t)*(unsigned __int16 *)(a1 + 40)) {
      return 0;
    }
  }
  int v14 = 0;
  while (1)
  {
    uint64_t v15 = &v11[v14];
    if (utf8_determineUTF8CharLength(*(unsigned __int8 *)v15) >= a4
      && !cstdlib_strncmp(&v11[v14], v9, v10))
    {
      return 1;
    }
    v14 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v15);
    if (!--v13) {
      goto LABEL_4;
    }
  }
}

uint64_t statpos_splitMSMappingRulesIntoTables(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_WORD *)(a3 + 8)) {
    return 0;
  }
  uint64_t v4 = a2;
  uint64_t v6 = (char *)heap_Calloc(*(void **)(*(void *)a2 + 8), 1, (24 * *(unsigned __int16 *)(a3 + 8)) | 1);
  *(void *)(v4 + 80) = v6;
  if (!v6
    || (*(_DWORD *)(v4 + 88) = 655294464,
        cstdlib_strcpy(v6, "!"),
        *(_WORD *)(*(void *)(v4 + 80) + 16) = 0,
        uint64_t v11 = heap_Calloc(*(void **)(*(void *)v4 + 8), 1, (8 * *(unsigned __int16 *)(a3 + 8)) | 1),
        uint64_t v12 = *(void *)(v4 + 80),
        (*(void *)(v12 + 8) = v11) == 0))
  {
LABEL_85:
    uint64_t v71 = 2313166858;
    uint64_t v72 = *(void *)(*(void *)v4 + 32);
LABEL_103:
    log_OutPublic(v72, (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v83);
    return v71;
  }
  *(_WORD *)(v4 + 88) = 1;
  if (!*(_WORD *)(a3 + 8))
  {
    LODWORD(v45) = 1;
    goto LABEL_87;
  }
  uint64_t v84 = a1;
  uint64_t v85 = v4;
  unint64_t v13 = 0;
  do
  {
    uint64_t v14 = *(void *)a3 + 32 * v13;
    if (!*(void *)(v14 + 8))
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        __dst[0] = 0;
        unsigned int v16 = *(unsigned __int16 *)(v15 + 8);
        if (*(_WORD *)(v15 + 8))
        {
          unint64_t v17 = 0;
          int v86 = 0;
          int v18 = 0;
          int v19 = 0;
          int v20 = 0;
          do
          {
            uint64_t v21 = (_WORD *)(*(void *)v15 + 6 * v17);
            if (*v21 == 3) {
              int v20 = 1;
            }
            else {
              int v19 = 1;
            }
            if (v20 == 1 && __dst[0] == 0)
            {
              uint64_t v23 = (const char *)(*(void *)(v4 + 256)
                                 + *(unsigned int *)(*(void *)(v4 + 264) + 4 * (unsigned __int16)v21[1]));
              if (cstdlib_strcmp(v23, "\\S"))
              {
                if (*v23 == 94)
                {
                  unsigned __int16 v24 = cstdlib_strlen(v23);
                  if (v24 >= 2u)
                  {
                    cstdlib_strncpy(__dst, v23 + 1, 1uLL);
                    uint64_t v25 = 0;
                    __dst[1] = 0;
                    do
                    {
                      int v26 = v23[v25++];
                      if (v25 < v24 && v26 == 40) {
                        int v18 = 1;
                      }
                    }
                    while (v24 != v25);
                  }
                  uint64_t v4 = v85;
                }
              }
              else
              {
                *(_WORD *)(v4 + 90) = v13;
                int v86 = 1;
              }
            }
            ++v17;
          }
          while (v17 < *(unsigned __int16 *)(v15 + 8));
          unsigned int v16 = __dst[0];
          int v28 = v86;
        }
        else
        {
          int v20 = 0;
          int v19 = 0;
          int v18 = 0;
          int v28 = 0;
        }
        if (v20 == 1 && v16 > 0x40 && v16 <= 0x5A)
        {
          unint64_t v29 = -1;
          uint64_t v30 = -16;
          while (1)
          {
            ++v29;
            uint64_t v31 = *(void *)(v4 + 80);
            if (v29 >= *(unsigned __int16 *)(v4 + 88)) {
              break;
            }
            int v32 = cstdlib_strcmp((const char *)(v31 + v30 + 16), __dst);
            v30 += 24;
            if (!v32)
            {
              uint64_t v33 = *(void *)(v4 + 80);
              uint64_t v34 = *(void *)(v33 + v30);
              goto LABEL_45;
            }
          }
          cstdlib_strcpy((char *)(v31 + 24 * *(unsigned __int16 *)(v4 + 88)), __dst);
          *(_WORD *)(*(void *)(v4 + 80) + 24 * *(unsigned __int16 *)(v4 + 88) + 16) = 0;
          uint64_t v34 = heap_Calloc(*(void **)(*(void *)v4 + 8), 1, (8 * *(unsigned __int16 *)(a3 + 8)) | 1);
          uint64_t v33 = *(void *)(v4 + 80);
          unint64_t v29 = *(unsigned __int16 *)(v4 + 88);
          *(void *)(v33 + 24 * v29 + 8) = v34;
          if (!v34) {
            goto LABEL_85;
          }
          *(_WORD *)(v4 + 88) = v29 + 1;
LABEL_45:
          uint64_t v40 = v33 + 24 * v29;
          unsigned int v41 = *(unsigned __int16 *)(v40 + 16);
          uint64_t v36 = (_WORD *)(v40 + 16);
          __int16 v37 = v41;
          uint64_t v42 = v34 + 8 * v41;
          *(_WORD *)uint64_t v42 = v13;
          BOOL v44 = v19 != 1 && v18 != 1;
          *(_DWORD *)(v42 + 4) = v44;
        }
        else
        {
          if (v28) {
            goto LABEL_53;
          }
          uint64_t v35 = *(void *)(v4 + 80);
          unsigned int v38 = *(unsigned __int16 *)(v35 + 16);
          uint64_t v36 = (_WORD *)(v35 + 16);
          __int16 v37 = v38;
          uint64_t v39 = *((void *)v36 - 1) + 8 * v38;
          *(_WORD *)uint64_t v39 = v13;
          *(_DWORD *)(v39 + 4) = 0;
        }
        *uint64_t v36 = v37 + 1;
      }
    }
LABEL_53:
    ++v13;
  }
  while (v13 < *(unsigned __int16 *)(a3 + 8));
  uint64_t v45 = *(unsigned __int16 *)(v4 + 88);
  uint64_t v12 = *(void *)(v4 + 80);
  a1 = v84;
  if (v45 >= 2)
  {
    for (uint64_t i = 1; i != v45; ++i)
    {
      uint64_t v47 = *(unsigned __int16 *)(v12 + 24 * i + 16);
      if (*(_WORD *)(v12 + 24 * i + 16))
      {
        uint64_t v48 = 0;
        uint64_t v49 = (uint64_t *)(v12 + 24 * i + 8);
        do
        {
          uint64_t v50 = 0;
          do
          {
            if (v48 != v50)
            {
              uint64_t v51 = *v49;
              uint64_t v52 = *(void *)(*(void *)a3 + 32 * *(unsigned __int16 *)(*v49 + 8 * v48) + 16);
              uint64_t v53 = *(unsigned __int16 *)(v52 + 8);
              if (*(_WORD *)(v52 + 8))
              {
                uint64_t v54 = 0;
                uint64_t v55 = *(void *)(*(void *)a3 + 32 * *(unsigned __int16 *)(v51 + 8 * v50) + 16);
                uint64_t v56 = *(unsigned __int16 *)(v55 + 8);
                uint64_t v57 = (_DWORD *)(v51 + 8 * v48 + 4);
                unsigned int v58 = (_DWORD *)(v51 + 8 * v50 + 4);
                do
                {
                  if (v56)
                  {
                    uint64_t v59 = 0;
                    uint64_t v60 = (unsigned __int16 *)(*(void *)v52 + 6 * v54);
                    int v63 = *v60;
                    uint64_t v61 = v60 + 1;
                    int v62 = v63;
                    do
                    {
                      if (v62 == 3 && *v61 == *(unsigned __int16 *)(*(void *)v55 + v59 + 2))
                      {
                        if (*v57 == 1) {
                          _DWORD *v57 = 0;
                        }
                        if (*v58 == 1) {
                          *unsigned int v58 = 0;
                        }
                      }
                      v59 += 6;
                    }
                    while (6 * v56 != v59);
                  }
                  ++v54;
                }
                while (v54 != v53);
              }
            }
            ++v50;
          }
          while (v50 != v47);
          ++v48;
        }
        while (v48 != v47);
      }
    }
    unint64_t v64 = 1;
    do
    {
      if (*(_WORD *)(v12 + 24 * v64 + 16))
      {
        uint64_t v65 = 0;
        unint64_t v66 = 0;
        int v67 = 0;
        do
        {
          if (v65)
          {
            uint64_t v68 = *(void *)(v12 + 24 * v64 + 8);
            if (!*(_DWORD *)(v68 + v65 + 4))
            {
              __int16 v69 = *(_WORD *)(v68 + v65);
              cstdlib_memmove((void *)(v68 + 8 * ((unsigned __int16)v67 + 1)), (const void *)(v68 + 8 * (unsigned __int16)v67), v65 - 8 * (unsigned __int16)v67);
              uint64_t v12 = *(void *)(v4 + 80);
              uint64_t v70 = *(void *)(v12 + 24 * v64 + 8) + 8 * (unsigned __int16)v67;
              *(_DWORD *)(v70 + 4) = 0;
              *(_WORD *)uint64_t v70 = v69;
              ++v67;
            }
          }
          ++v66;
          v65 += 8;
        }
        while (v66 < *(unsigned __int16 *)(v12 + 24 * v64 + 16));
        LODWORD(v45) = *(unsigned __int16 *)(v4 + 88);
      }
      ++v64;
    }
    while (v64 < v45);
  }
LABEL_87:
  uint64_t v73 = heap_Realloc(*(uint64_t **)(*(void *)v4 + 8), v12, (24 * v45) | 1);
  if (!v73)
  {
LABEL_102:
    uint64_t v71 = 2313166858;
    uint64_t v72 = *(void *)(a1 + 32);
    goto LABEL_103;
  }
  uint64_t v74 = v73;
  *(void *)(v4 + 80) = v73;
  if (!*(_WORD *)(v4 + 88))
  {
    if (*(_WORD *)(v4 + 90) == 9999) {
      goto LABEL_105;
    }
    return 0;
  }
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  do
  {
    uint64_t v77 = v74 + v75;
    if (*(_WORD *)(v74 + v75 + 16))
    {
      uint64_t v78 = heap_Realloc(*(uint64_t **)(*(void *)v4 + 8), *(void *)(v77 + 8), (8 * *(unsigned __int16 *)(v74 + v75 + 16)) | 1);
      if (!v78) {
        goto LABEL_102;
      }
    }
    else
    {
      heap_Free(*(void **)(a1 + 8), *(void *)(v77 + 8));
      uint64_t v78 = 0;
    }
    uint64_t v74 = *(void *)(v4 + 80);
    *(void *)(v74 + v75 + 8) = v78;
    ++v76;
    unint64_t v79 = *(unsigned __int16 *)(v4 + 88);
    v75 += 24;
  }
  while (v76 < v79);
  if (*(_WORD *)(v4 + 90) != 9999) {
    return 0;
  }
  if (*(_WORD *)(v4 + 88))
  {
    uint64_t v80 = 0;
    unint64_t v81 = 0;
    do
    {
      if (*(_WORD *)(v74 + v80 + 16))
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(v74 + v80 + 8));
        uint64_t v74 = *(void *)(v4 + 80);
        unint64_t v79 = v74 + v80;
        *(void *)(v79 + 8) = 0;
        *(_WORD *)(v79 + 16) = 0;
        LOWORD(v79) = *(_WORD *)(v4 + 88);
      }
      ++v81;
      v80 += 24;
    }
    while (v81 < (unsigned __int16)v79);
  }
LABEL_105:
  heap_Free(*(void **)(a1 + 8), v74);
  uint64_t v71 = 0;
  *(void *)(v4 + 80) = 0;
  *(_WORD *)(v4 + 88) = 0;
  return v71;
}

uint64_t statpos_rules_load(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8)
{
  uint64_t v9 = a6;
  uint64_t v200 = *MEMORY[0x263EF8340];
  int v192 = 0;
  char v191 = 0;
  *(_DWORD *)__s2 = 0;
  unsigned int v189 = 0;
  uint64_t v187 = 0;
  __src = 0;
  memset(v199, 0, 128);
  uint64_t v186 = 0;
  *(void *)a7 = a3;
  a7[188] = 5;
  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"loading MS StatPOS rules", a6, (uint64_t)a7, a8, v168);
  uint64_t BrokerString_0 = getBrokerString_0(a3, v199, 0x80uLL);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = brk_DataOpenEx(*(void *)(a3 + 24), (uint64_t)v199, 1, (uint64_t)&v187);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = brk_DataClose(*(void *)(a3 + 24), v187);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t BrokerString_0 = ssftriff_reader_ObjOpen(a1, a2, 0, v199, "PANP", 1031, (uint64_t *)&v192);
  if ((BrokerString_0 & 0x80000000) != 0) {
    return BrokerString_0;
  }
  uint64_t v179 = a4;
  uint64_t v180 = a5;
  unsigned int v16 = a7 + 136;
  int __dst = a7 + 124;
  uint64_t v175 = a7 + 156;
  uint64_t v176 = a7 + 144;
  unint64_t v177 = a7 + 116;
  int v178 = a7 + 104;
  unint64_t v17 = a7 + 36;
  int v18 = a7 + 28;
  uint64_t v181 = a7 + 52;
  uint64_t v182 = a7 + 20;
  while (1)
  {
    LODWORD(info_from_dct) = ssftriff_reader_OpenChunk((uint64_t)v192, (__int32 *)__s2, &v189, &__src);
    if ((info_from_dct & 0x80000000) != 0)
    {
LABEL_70:
      if ((info_from_dct & 0x1FFF) == 0xA) {
        return 2313166858;
      }
      ssftriff_reader_ObjClose(v192, v19, v20, v21, v22, v23, v24, v25);
      int v192 = 0;
      if (*v181)
      {
        uint64_t v85 = 0;
        unint64_t v86 = 0;
        do
        {
          uint64_t BrokerString_0 = ssftmap_Insert(*((void *)a7 + 14), *((void *)a7 + 37)+ *(unsigned int *)(*((void *)a7 + 38) + 4* *(unsigned int *)(*((void *)a7 + 12) + v85)), *((void *)a7 + 12) + v85);
          if ((BrokerString_0 & 0x80000000) != 0) {
            return BrokerString_0;
          }
          ++v86;
          v85 += 4;
        }
        while (v86 < (unsigned __int16)*v181);
      }
      a7[44] = 0;
      uint64_t v87 = statpos_splitMSMappingRulesIntoTables(a3, (uint64_t)a7, (uint64_t)(a7 + 32));
      if ((v87 & 0x1FFF) == 0xA) {
        return 2313166858;
      }
      uint64_t info_from_dct = v87;
      *((void *)a7 + 2) = 0x2000100030000;
      a7[12] = 4;
      uint64_t StrSetting = (char *)statpos_getStrSetting((uint64_t)a7, "POSsep");
      if (StrSetting)
      {
        char v92 = *StrSetting;
      }
      else
      {
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : POSsep not defined in data file, using default '/'", v89, v90, v91, v169);
        char v92 = 47;
      }
      *((unsigned char *)a7 + 120) = v92;
      uint64_t v93 = (const char *)statpos_getStrSetting((uint64_t)a7, "HYPHEN_CHAR");
      if (!v93)
      {
        log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : HYPHEN_CHAR not defined in data file, using default '-'", v94, v95, v96, v169);
        uint64_t v93 = "-";
      }
      *((void *)a7 + 20) = v93;
      uint64_t v97 = statpos_getStrSetting((uint64_t)a7, "PUNCT_CHAR");
      if (v97) {
        uint64_t v98 = (const char *)v97;
      }
      else {
        uint64_t v98 = "";
      }
      *((void *)a7 + 21) = v98;
      uint64_t v99 = statpos_getStrSetting((uint64_t)a7, "TERMPUNCT_CHAR");
      if (v99) {
        uint64_t v106 = (const char *)v99;
      }
      else {
        uint64_t v106 = "";
      }
      *((void *)a7 + 22) = v106;
      *((_DWORD *)a7 + 31) = statpos_getStrSettingAsNumber((uint64_t)a7, "ApplyRetaggingToOOV", v100, v101, v102, v103, v104, v105) == 1;
      *((_DWORD *)a7 + 32) = statpos_getStrSettingAsNumber((uint64_t)a7, "ApplyRetaggingToKnownAmbiguous", v107, v108, v109, v110, v111, v112) == 1;
      *((_DWORD *)a7 + 38) = statpos_getStrSettingAsNumber((uint64_t)a7, "NOOOVMODEL", v113, v114, v115, v116, v117, v118) == 1;
      *((_DWORD *)a7 + 46) = statpos_getStrSettingAsNumber((uint64_t)a7, "DOMSMAPPINGBEFORELISTOFPOS", v119, v120, v121, v122, v123, v124) == 1;
      *((_DWORD *)a7 + 47) = statpos_getStrSettingAsNumber((uint64_t)a7, "ReEstimateEachWord", v125, v126, v127, v128, v129, v130) == 1;
      unint64_t v131 = (char *)statpos_getStrSetting((uint64_t)a7, "POITOPOS_ns");
      *((void *)a7 + 42) = v131;
      if (v131)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v131, (char **)a7 + 42);
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      uint64_t v132 = (char *)statpos_getStrSetting((uint64_t)a7, "POITOPOS_nt");
      *((void *)a7 + 43) = v132;
      if (v132)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v132, (char **)a7 + 43);
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      uint64_t v133 = (char *)statpos_getStrSetting((uint64_t)a7, "POITOPOS_nz");
      *((void *)a7 + 44) = v133;
      if (v133)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v133, (char **)a7 + 44);
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      unsigned int v134 = (char *)statpos_getStrSetting((uint64_t)a7, "POITOPOS_nx");
      *((void *)a7 + 45) = v134;
      if (v134)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v134, (char **)a7 + 45);
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      uint64_t v135 = (char *)statpos_getStrSetting((uint64_t)a7, "POITOPOS_nr");
      *((void *)a7 + 46) = v135;
      if (v135)
      {
        uint64_t BrokerString_0 = statpos_format_POI_param(a3, v135, (char **)a7 + 46);
        if ((BrokerString_0 & 0x80000000) != 0) {
          return BrokerString_0;
        }
        uint64_t info_from_dct = 0;
      }
      *((_DWORD *)a7 + 34) = statpos_getStrSettingAsNumber((uint64_t)a7, "lexMismatchUseStringMatch", v136, v137, v138, v139, v140, v141) == 1;
      int StrSettingAsNumber = statpos_getStrSettingAsNumber((uint64_t)a7, "mapTagsetFromDctMappingFile", v142, v143, v144, v145, v146, v147);
      *((_DWORD *)a7 + 33) = StrSettingAsNumber == 1;
      if (StrSettingAsNumber == 1)
      {
        uint64_t info_from_dct = statpos_get_info_from_dct(a3, v179, v180, v9, "fecfg", (uint64_t)"mde_tag_mappings_dic", &v186, 0, "STR");
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
        if (v186)
        {
          int v185 = 0;
          uint64_t info_from_dct = (*(uint64_t (**)(uint64_t, uint64_t, char *, int *))(v9 + 72))(v179, v180, v186, &v185);
          if ((info_from_dct & 0x80000000) != 0) {
            goto LABEL_129;
          }
          if (v185)
          {
            *(void *)&__c[1] = 0;
            __c[0] = 0;
            uint64_t v198 = 0;
            long long v197 = 0u;
            long long __b = 0u;
            cstdlib_memset(&__b, 0, 0x28uLL);
            *(void *)&long long __b = ssftmap_ElemCopyString;
            *((void *)&v197 + 1) = ssftmap_ElemCopyString;
            *((void *)&__b + 1) = ssftmap_ElemFreeString;
            uint64_t v198 = ssftmap_ElemFreeString;
            *(void *)&long long v197 = ssftmap_ElemCompareKeysString;
            int v158 = *(void **)(*(void *)a7 + 8);
            long long v193 = __b;
            long long v194 = v197;
            uint64_t v195 = ssftmap_ElemFreeString;
            uint64_t info_from_dct = ssftmap_ObjOpen(v158, 0, &v193, (uint64_t *)a7 + 18);
            if ((info_from_dct & 0x80000000) != 0) {
              goto LABEL_129;
            }
            if (*v181)
            {
              uint64_t v159 = 0;
              do
              {
                __int16 v184 = -1;
                uint64_t info_from_dct = (*(uint64_t (**)(uint64_t, uint64_t, char *, void, unsigned char *, __int16 *, unsigned char *))(v9 + 96))(v179, v180, v186, *((void *)a7 + 37)+ *(unsigned int *)(*((void *)a7 + 38)+ 4 * *(unsigned int *)(*((void *)a7 + 12) + 4 * v159)), &__c[1], &v184, __c);
                if ((info_from_dct & 0x80000000) != 0) {
                  return info_from_dct;
                }
                if (v184 == 1)
                {
                  int v160 = cstdlib_strchr(**(char ***)&__c[1], __c[0]);
                  if (v160) {
                    char *v160 = 0;
                  }
                  uint64_t info_from_dct = ssftmap_Insert(*((void *)a7 + 18), *((void *)a7 + 37)+ *(unsigned int *)(*((void *)a7 + 38)+ 4 * *(unsigned int *)(*((void *)a7 + 12) + 4 * v159)), **(void **)&__c[1]);
                  if ((info_from_dct & 0x80000000) != 0) {
                    goto LABEL_129;
                  }
                  log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"POS mapping %s->%s", v161, v162, v163, *((void *)a7 + 37)+ *(unsigned int *)(*((void *)a7 + 38) + 4 * *(unsigned int *)(*((void *)a7 + 12) + 4 * v159)));
                }
              }
              while (++v159 < (unint64_t)(unsigned __int16)*v181);
            }
          }
          else
          {
            log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning: mde_tag_mappings dictionary %s does not exist", v155, v156, v157, (uint64_t)v186);
          }
        }
        else
        {
          log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning: mde_tag_mappings dictionary does not exist", v152, v153, v154, 0);
        }
      }
      if (*((void *)a7 + 18))
      {
        uint64_t v165 = 0;
        while (1)
        {
          uint64_t v166 = heap_Calloc(*(void **)(a3 + 8), 1, 32);
          *(void *)&a7[v165 + 192] = v166;
          if (!v166) {
            break;
          }
          v165 += 4;
          if (v165 == 128) {
            goto LABEL_128;
          }
        }
        log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_POS", 35000, 0, v167, v149, v150, v151, v169);
        return 2313166858;
      }
LABEL_128:
      log_OutText(*(void *)(a3 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"statpos data file : ambigPOSSep=%c ApplyRetaggingToOOV=%d ApplyRetaggingToKnownAmbiguous=%d NOOOVMODEL=%d ReEstimateEachWord=%d, poi_ns=%s,poi_nt=%s,poi_nz=%s,poi_nx=%s,poi_nr=%s", v149, v150, v151, *((unsigned __int8 *)a7 + 120));
LABEL_129:
      if (v186) {
        heap_Free(*(void **)(a3 + 8), (uint64_t)v186);
      }
      return info_from_dct;
    }
    if (!cstdlib_strcmp("CFIG", __s2))
    {
      uint64_t v42 = (char *)__src;
      cstdlib_memcpy(a7 + 5, __src, 2uLL);
      cstdlib_memcpy(a7 + 6, v42 + 2, 2uLL);
      cstdlib_memcpy(a7 + 7, v42 + 4, 2uLL);
      LODWORD(info_from_dct) = 0;
      goto LABEL_49;
    }
    if (!cstdlib_strcmp("STSE", __s2))
    {
      uint64_t v43 = (char *)__src;
      cstdlib_memcpy(v182, __src, 2uLL);
      uint64_t v44 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (8 * a7[20]) | 1);
      *((void *)a7 + 4) = v44;
      if (!v44) {
        goto LABEL_77;
      }
      if (!*v182)
      {
LABEL_48:
        LODWORD(info_from_dct) = 0;
        goto LABEL_49;
      }
      unint64_t v45 = 0;
      uint64_t v46 = 4;
      unsigned int v47 = 2;
      do
      {
        cstdlib_memcpy((void *)(*((void *)a7 + 4) + v46 - 4), &v43[v47], 4uLL);
        uint64_t v48 = v47 + 4;
        cstdlib_memcpy((void *)(*((void *)a7 + 4) + v46), &v43[v48], 4uLL);
        unsigned int v47 = v48 + 4;
        ++v45;
        v46 += 8;
      }
      while (v45 < a7[20]);
      goto LABEL_39;
    }
    if (!cstdlib_strcmp("RTAG", __s2)) {
      break;
    }
    if (!cstdlib_strcmp("MRTG", __s2))
    {
      uint64_t v54 = (char *)__src;
      cstdlib_memcpy(a7 + 36, __src, 2uLL);
      LODWORD(__b) = 2;
      uint64_t v55 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (32 * a7[36]) | 1);
      *((void *)a7 + 8) = v55;
      if (!v55) {
        goto LABEL_77;
      }
      if (*v17)
      {
        unint64_t v56 = 0;
        uint64_t v57 = 8;
        while (1)
        {
          int v58 = __b;
          cstdlib_memcpy((void *)(*((void *)a7 + 8) + v57 - 8), &v54[__b], 4uLL);
          LODWORD(__b) = v58 + 4;
          uint64_t BrokerString_0 = readRULE_0(*(void *)a7, (uint64_t)v54, (unsigned int *)&__b, (uint64_t *)(*((void *)a7 + 8) + v57));
          if ((BrokerString_0 & 0x80000000) != 0) {
            return BrokerString_0;
          }
          ++v56;
          v57 += 32;
          if (v56 >= (unsigned __int16)*v17) {
            goto LABEL_39;
          }
        }
      }
      goto LABEL_39;
    }
    if (cstdlib_strcmp("LISP", __s2))
    {
      if (cstdlib_strcmp("REGX", __s2))
      {
        if (!cstdlib_strcmp("STRS", __s2))
        {
          unint64_t v76 = v192;
          uint64_t v77 = (char *)__src;
          *(void *)&long long __b = __src;
          LODWORD(v193) = 0;
          cstdlib_memcpy(v176, __src, 4uLL);
          uint64_t v78 = 4;
          if (*v176)
          {
            cstdlib_memcpy(&v193, v77 + 4, 4uLL);
            uint64_t v79 = (v193 + 8);
            *((void *)a7 + 37) = &v77[v79];
            uint64_t v78 = (*((_DWORD *)a7 + 72) + v79);
          }
          cstdlib_memcpy(v175, &v77[v78], 2uLL);
          uint64_t v80 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * a7[156]) | 1);
          *((void *)a7 + 38) = v80;
          if (!v80) {
            goto LABEL_77;
          }
          unint64_t v173 = v76;
          if (*v175)
          {
            uint64_t v81 = 0;
            unint64_t v82 = 0;
            int v83 = v78 + 2;
            do
            {
              int v84 = v83;
              cstdlib_memcpy((void *)(*((void *)a7 + 38) + v81), &v77[v83], 4uLL);
              int v83 = v84 + 4;
              ++v82;
              v81 += 4;
            }
            while (v82 < a7[156]);
          }
          uint64_t v40 = (uint64_t)v173;
          unsigned int v41 = (void **)(a7 + 164);
          goto LABEL_68;
        }
        if (!cstdlib_strcmp("REST", __s2))
        {
          uint64_t v27 = v192;
          int v28 = (char *)__src;
          *(void *)&long long __b = __src;
          LODWORD(v193) = 0;
          cstdlib_memcpy(__dst, __src, 4uLL);
          uint64_t v29 = 4;
          if (*__dst)
          {
            cstdlib_memcpy(&v193, v28 + 4, 4uLL);
            uint64_t v30 = (v193 + 8);
            *((void *)a7 + 32) = &v28[v30];
            uint64_t v29 = (*((_DWORD *)a7 + 62) + v30);
          }
          cstdlib_memcpy(v16, &v28[v29], 2uLL);
          uint64_t v31 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * a7[136]) | 1);
          *((void *)a7 + 33) = v31;
          if (!v31) {
            goto LABEL_77;
          }
          uint64_t v170 = v27;
          if (*v16)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            int v38 = v29 + 2;
            do
            {
              int v39 = v38;
              cstdlib_memcpy((void *)(*((void *)a7 + 33) + v36), &v28[v38], 4uLL);
              int v38 = v39 + 4;
              ++v37;
              v36 += 4;
            }
            while (v37 < a7[136]);
          }
          uint64_t v40 = (uint64_t)v170;
          unsigned int v41 = (void **)(a7 + 140);
LABEL_68:
          uint64_t info_from_dct = ssftriff_reader_DetachChunkData(v40, v41, &__b);
          unsigned int v16 = a7 + 136;
          if ((info_from_dct & 0x80000000) != 0) {
            return info_from_dct;
          }
        }
      }
      else
      {
        uint64_t v172 = v9;
        int v67 = v192;
        uint64_t v68 = (char *)__src;
        *(void *)&long long __b = __src;
        LODWORD(v193) = 0;
        cstdlib_memcpy(v178, __src, 4uLL);
        uint64_t v69 = 4;
        if (*v178)
        {
          cstdlib_memcpy(&v193, v68 + 4, 4uLL);
          uint64_t v70 = (v193 + 8);
          *((void *)a7 + 27) = &v68[v70];
          uint64_t v69 = (*((_DWORD *)a7 + 52) + v70);
        }
        cstdlib_memcpy(v177, &v68[v69], 2uLL);
        uint64_t v71 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * a7[116]) | 1);
        *((void *)a7 + 28) = v71;
        if (!v71) {
          goto LABEL_77;
        }
        if (*v177)
        {
          uint64_t v72 = 0;
          unint64_t v73 = 0;
          int v74 = v69 + 2;
          do
          {
            int v75 = v74;
            cstdlib_memcpy((void *)(*((void *)a7 + 28) + v72), &v68[v74], 4uLL);
            int v74 = v75 + 4;
            ++v73;
            v72 += 4;
          }
          while (v73 < a7[116]);
        }
        uint64_t info_from_dct = ssftriff_reader_DetachChunkData((uint64_t)v67, (void **)a7 + 30, &__b);
        unsigned int v16 = a7 + 136;
        uint64_t v9 = v172;
        if ((info_from_dct & 0x80000000) != 0) {
          return info_from_dct;
        }
      }
    }
    else
    {
      uint64_t v59 = (char *)__src;
      cstdlib_memcpy(v181, __src, 2uLL);
      if (!*v181) {
        goto LABEL_48;
      }
      uint64_t v198 = 0;
      long long v197 = 0u;
      long long __b = 0u;
      cstdlib_memset(&__b, 0, 0x28uLL);
      *(void *)&long long __b = ssftmap_ElemCopyString;
      *((void *)&__b + 1) = ssftmap_ElemFreeString;
      *((void *)&v197 + 1) = loc_CopyValue;
      uint64_t v198 = loc_FreeValue;
      *(void *)&long long v197 = ssftmap_ElemCompareKeysString;
      uint64_t v60 = *(void **)(*(void *)a7 + 8);
      long long v193 = __b;
      long long v194 = v197;
      uint64_t v195 = loc_FreeValue;
      uint64_t info_from_dct = ssftmap_ObjOpen(v60, 0, &v193, (uint64_t *)a7 + 14);
      if ((info_from_dct & 0x80000000) != 0) {
        return info_from_dct;
      }
      uint64_t v61 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (4 * a7[52]) | 1);
      *((void *)a7 + 12) = v61;
      if (!v61)
      {
LABEL_77:
        uint64_t info_from_dct = 2313166858;
        log_OutPublic(*(void *)(*(void *)a7 + 32), (uint64_t)"FE_POS", 35000, 0, v32, v33, v34, v35, v169);
        return info_from_dct;
      }
      if (*v181)
      {
        uint64_t v171 = v9;
        uint64_t v62 = 0;
        unint64_t v63 = 0;
        unsigned int v64 = 2;
        do
        {
          unsigned int v65 = v64;
          cstdlib_memcpy((void *)(*((void *)a7 + 12) + v62), &v59[v64], 4uLL);
          unsigned int v64 = v65 + 4;
          ++v63;
          v62 += 4;
        }
        while (v63 < a7[52]);
        uint64_t v9 = v171;
        goto LABEL_40;
      }
    }
LABEL_49:
    int v66 = ssftriff_reader_CloseChunk((uint64_t)v192);
    if (v66 < 0) {
      LODWORD(info_from_dct) = v66;
    }
    if ((info_from_dct & 0x80000000) != 0) {
      goto LABEL_70;
    }
  }
  uint64_t v49 = (char *)__src;
  cstdlib_memcpy(a7 + 28, __src, 2uLL);
  LODWORD(__b) = 2;
  uint64_t v50 = heap_Calloc(*(void **)(*(void *)a7 + 8), 1, (32 * a7[28]) | 1);
  *((void *)a7 + 6) = v50;
  if (!v50) {
    goto LABEL_77;
  }
  if (!*v18)
  {
LABEL_39:
    LODWORD(info_from_dct) = 0;
LABEL_40:
    unsigned int v16 = a7 + 136;
    goto LABEL_49;
  }
  unint64_t v51 = 0;
  uint64_t v52 = 8;
  while (1)
  {
    int v53 = __b;
    cstdlib_memcpy((void *)(*((void *)a7 + 6) + v52 - 8), &v49[__b], 4uLL);
    LODWORD(__b) = v53 + 4;
    uint64_t BrokerString_0 = readRULE_0(*(void *)a7, (uint64_t)v49, (unsigned int *)&__b, (uint64_t *)(*((void *)a7 + 6) + v52));
    if ((BrokerString_0 & 0x80000000) != 0) {
      return BrokerString_0;
    }
    ++v51;
    v52 += 32;
    if (v51 >= (unsigned __int16)*v18) {
      goto LABEL_39;
    }
  }
}

uint64_t statpos_getStrSettingAsNumber(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a1 + 40))
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (cstdlib_strcmp(__s1, (const char *)(*(void *)(a1 + 296)+ *(unsigned int *)(*(void *)(a1 + 304)+ 4 * *(unsigned int *)(*(void *)(a1 + 32) + v10)))))
    {
      ++v11;
      v10 += 8;
      if (v11 >= *(unsigned __int16 *)(a1 + 40)) {
        goto LABEL_5;
      }
    }
    unint64_t v13 = (unsigned __int8 *)(*(void *)(a1 + 296)
                            + *(unsigned int *)(*(void *)(a1 + 304)
                                              + 4 * *(unsigned int *)(*(void *)(a1 + 32) + v10 + 4)));
    return cstdlib_atoi(v13);
  }
  else
  {
LABEL_5:
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"Warning : key=%s not defined, setting to 0", a6, a7, a8, (uint64_t)__s1);
    return 0;
  }
}

uint64_t statpos_format_POI_param(uint64_t a1, char *__s, char **a3)
{
  size_t v6 = cstdlib_strlen(__s);
  uint64_t v7 = *(void **)(a1 + 8);
  size_t v8 = cstdlib_strlen(__s);
  uint64_t v9 = (char *)heap_Calloc(v7, 1, v8 + 3);
  if (v9)
  {
    uint64_t v14 = v9;
    if (v6)
    {
      cstdlib_strcpy(v9, ",");
      uint64_t v15 = 0;
      int v16 = 1;
      while ((_WORD)v16)
      {
        uint64_t v17 = (unsigned __int16)v16;
        if (v14[(unsigned __int16)v16 - 1] != 44 || __s[v15] != 44) {
          goto LABEL_9;
        }
        --v16;
LABEL_10:
        ++v15;
        ++v16;
        if (v6 <= (unsigned __int16)v15)
        {
          v14[(unsigned __int16)v16] = 0;
          cstdlib_strcat(v14, ",");
          goto LABEL_14;
        }
      }
      uint64_t v17 = 0;
LABEL_9:
      v14[v17] = __s[v15];
      goto LABEL_10;
    }
    *uint64_t v9 = 0;
LABEL_14:
    uint64_t result = 0;
    *a3 = v14;
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v10, v11, v12, v13, v19);
    return 2313166858;
  }
  return result;
}

uint64_t readRULE_0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = readCONTEXT_1(a1, a2, a3, a4);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = readCONTEXT_1(a1, a2, a3, a4 + 1);
    if ((result & 0x80000000) == 0)
    {
      return readCONTEXT_1(a1, a2, a3, a4 + 2);
    }
  }
  return result;
}

uint64_t readCONTEXT_1(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  int __dst = 0;
  cstdlib_memcpy(&__dst, (const void *)(a2 + *a3), 2uLL);
  *a3 += 2;
  if (!(_WORD)__dst) {
    return 0;
  }
  uint64_t v8 = heap_Calloc(*(void **)(a1 + 8), 1, 17);
  if (v8
    && (uint64_t v13 = v8,
        uint64_t v14 = (unsigned __int16)__dst,
        *(_WORD *)(v8 + 8) = __dst,
        uint64_t v15 = heap_Calloc(*(void **)(a1 + 8), 1, (6 * v14) | 1),
        (*(void *)uint64_t v13 = v15) != 0))
  {
    if (*(_WORD *)(v13 + 8))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      unsigned int v18 = *a3;
      do
      {
        cstdlib_memcpy((void *)(v15 + v16), (const void *)(a2 + v18), 2uLL);
        uint64_t v19 = *a3 + 2;
        *a3 = v19;
        cstdlib_memcpy((void *)(*(void *)v13 + v16 + 2), (const void *)(a2 + v19), 2uLL);
        uint64_t v20 = *a3 + 2;
        *a3 = v20;
        cstdlib_memcpy((char *)&__dst + 2, (const void *)(a2 + v20), 2uLL);
        unsigned int v18 = *a3 + 2;
        *a3 = v18;
        uint64_t v15 = *(void *)v13;
        *(unsigned char *)(*(void *)v13 + v16 + 4) = BYTE2(__dst);
        ++v17;
        v16 += 6;
      }
      while (v17 < *(unsigned __int16 *)(v13 + 8));
    }
    uint64_t v21 = 0;
    *a4 = v13;
  }
  else
  {
    uint64_t v21 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v9, v10, v11, v12, v23);
  }
  return v21;
}

uint64_t _statpos_char_check(const char *a1, const char *a2, unsigned int a3)
{
  int v6 = cstdlib_strlen(a1);
  int v7 = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)a1, v6);
  if (!v7) {
    return 0;
  }
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = &a1[(unsigned __int16)v8];
    size_t v10 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)v9);
    if (v10 >= a3 && !cstdlib_strncmp(&a1[(unsigned __int16)v8], a2, v10)) {
      break;
    }
    v8 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v9);
    if (!--v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t statpos_fv_new(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = heap_Calloc(*(void **)(a1 + 8), 1, 16 * a2);
  *a3 = v6;
  if (!v6)
  {
LABEL_7:
    uint64_t v14 = 2313166858;
    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v16);
    return v14;
  }
  *((_DWORD *)a3 + 3) = a2;
  if (a2)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
      uint64_t v13 = *a3;
      *(void *)(*a3 + v11) = v12;
      if (!v12) {
        goto LABEL_7;
      }
      *(_DWORD *)(v13 + v11 + 8) = 65;
      cstdlib_strcpy(v12, "=");
      v11 += 16;
    }
    while (16 * a2 != v11);
  }
  uint64_t v14 = 0;
  *((_DWORD *)a3 + 2) = a2;
  return v14;
}

void *statpos_fv_dealloc(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)a2;
    if (v3)
    {
      uint64_t v4 = result;
      unint64_t v5 = *(unsigned int *)(a2 + 8);
      if (v5)
      {
        uint64_t v6 = 0;
        for (unint64_t i = 0; i < v5; ++i)
        {
          if (*(void *)(v3 + v6))
          {
            heap_Free((void *)v4[1], *(void *)(v3 + v6));
            uint64_t v3 = *(void *)a2;
            *(void *)(*(void *)a2 + v6) = 0;
            unint64_t v5 = *(unsigned int *)(a2 + 8);
          }
          v6 += 16;
        }
      }
      uint64_t result = heap_Free((void *)v4[1], v3);
      *(void *)a2 = 0;
    }
  }
  return result;
}

uint64_t statpos_fv_clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      cstdlib_strcpy(*(char **)(*(void *)a1 + v2), "=");
      ++v3;
      v2 += 16;
    }
    while (v3 < *(unsigned int *)(a1 + 8));
  }
  return 0;
}

uint64_t statpos_fv_add(uint64_t a1, void *a2, unsigned int a3, char *__s, char *a5, uint64_t a6)
{
  if (a6)
  {
    unsigned __int16 v11 = cstdlib_strlen(a5);
    if (*(_DWORD *)(a6 + 1336))
    {
      unsigned __int16 v12 = 0;
      size_t v13 = v11;
      while (1)
      {
        uint64_t v14 = v12;
        if (!cstdlib_strncmp(*(const char **)(*(void *)(a6 + 1328) + 16 * v12), *(const char **)(*(void *)(a6 + 1312) + 8 * (unsigned __int16)a3), v13))break; {
        unsigned __int16 v12 = v14 + 1;
        }
        if (*(_DWORD *)(a6 + 1336) <= (unsigned __int16)(v14 + 1)) {
          goto LABEL_22;
        }
      }
      unsigned __int16 v15 = cstdlib_strlen(*(const char **)(*(void *)(a6 + 1328) + 16 * v14 + 8));
      unsigned __int16 v16 = cstdlib_strlen(__s);
      unint64_t v17 = *(char **)(*(void *)(a6 + 1328) + 16 * v14 + 8);
      unsigned int v18 = cstdlib_strstr(v17, __s);
      if (v18)
      {
        unsigned int v19 = v15;
        unint64_t v20 = (unint64_t)&v17[v15];
        while (v18 != v17 || v19 != v16 && (v19 <= v16 + 1 || v17[v16] != 32))
        {
          if (v18 > v17)
          {
            uint64_t v21 = &v18[v16];
            if (v20 > (unint64_t)(v21 + 1) && *v21 == 32)
            {
              if ((char *)v20 == v21 || *(v18 - 1) == 32) {
                break;
              }
            }
            else if ((char *)v20 == v21)
            {
              break;
            }
          }
          unsigned int v18 = cstdlib_strstr(&v18[v16], __s);
          if (!v18) {
            goto LABEL_21;
          }
        }
      }
      else
      {
LABEL_21:
        cstdlib_strcpy(__s, "=");
      }
    }
  }
LABEL_22:
  unsigned int v22 = cstdlib_strlen(__s);
  uint64_t v23 = *a2 + 16 * a3;
  if (*(_DWORD *)(v23 + 8) > v22)
  {
    uint64_t v24 = *(char **)v23;
LABEL_26:
    cstdlib_strcpy(v24, __s);
    return 0;
  }
  uint64_t v25 = v22 + 1;
  uint64_t v24 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)v23, v25);
  if (v24)
  {
    uint64_t v30 = *a2 + 16 * a3;
    *(void *)uint64_t v30 = v24;
    *(_DWORD *)(v30 + 8) = v25;
    goto LABEL_26;
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v26, v27, v28, v29, v32);
  return 2313166858;
}

uint64_t statpos_get_features(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, void *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a6;
    while (2)
    {
      unsigned __int16 v15 = &byte_26D210770;
      unsigned __int16 v16 = "PREVPOS";
      while (cstdlib_strcmp(*(const char **)(a5 + 8 * v13), v16))
      {
        unsigned __int16 v16 = (const char *)*((void *)v15 + 1);
        v15 += 24;
        if (!v16) {
          goto LABEL_9;
        }
      }
      uint64_t result = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))v15 - 1))(a1, a2, a3, a4, *v15, *(void *)(a2 + 128));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      uint64_t result = statpos_fv_add(a1, a7, v13, *(char **)(a2 + 128), *(char **)(a5 + 8 * v13), a8);
      if ((result & 0x80000000) != 0) {
        return result;
      }
LABEL_9:
      if (++v13 != v14) {
        continue;
      }
      break;
    }
  }
  return 0;
}

uint64_t statpos_dumpFeatureVectorAndResult(uint64_t a1, int a2, const char **a3, unsigned __int16 *a4, char *__s, char *a6, uint64_t a7, void *a8, char *a9, int a10, char *a11, char *__s1)
{
  if (!a2) {
    return 0;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, __s);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, a6);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  if (*(unsigned __int8 *)(a7 + 1296) >= 2u)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v18 = statPOS_add2Str(a1, a3, a4, *(char **)(*a8 + 16 * v19));
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      uint64_t v18 = statPOS_add2Str(a1, a3, a4, " ");
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
    }
    while (*(unsigned __int8 *)(a7 + 1296) - 1 > (unsigned __int16)++v19);
  }
  if (!a11)
  {
    uint64_t v18 = statPOS_add2Str(a1, a3, a4, "PRED=");
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v18 = statPOS_add2Str(a1, a3, a4, a9);
      if ((v18 & 0x80000000) == 0)
      {
        uint64_t v24 = " ";
LABEL_26:
        uint64_t v20 = statPOS_add2Str(a1, a3, a4, v24);
        if ((v20 & 0x80000000) != 0) {
          return v20;
        }
        goto LABEL_27;
      }
    }
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, "REF=");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, a11);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, " ");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, "PRED=");
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v18 = statPOS_add2Str(a1, a3, a4, a9);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v20 = statPOS_add2Str(a1, a3, a4, " ");
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
  if (cstdlib_strcmp(a11, a9) && (!__s1 || cstdlib_strcmp(__s1, a9)))
  {
    uint64_t v24 = "*TAGERROR ";
    goto LABEL_26;
  }
LABEL_27:
  if (a10 || (uint64_t v20 = statPOS_add2Str(a1, a3, a4, "*BADTAG "), (v20 & 0x80000000) == 0))
  {
    log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_POS", 5, 0, (uint64_t)"%s", v21, v22, v23, (uint64_t)*a3);
    cstdlib_strcpy((char *)*a3, "");
  }
  return v20;
}

uint64_t initFeatureVector(uint64_t a1, char **a2, unsigned int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  while (1)
  {
    uint64_t v6 = (char *)heap_Calloc(*(void **)(a1 + 8), 1, 65);
    *a2 = v6;
    if (!v6) {
      break;
    }
    cstdlib_strcpy(v6, "=");
    ++a2;
    if (!--v5) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v7, v8, v9, v10, v12);
  return 2313166858;
}

char *clearFeatureVector(char *result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = (char **)result;
    uint64_t v3 = a2;
    do
    {
      uint64_t v4 = *v2++;
      uint64_t result = cstdlib_strcpy(v4, "=");
      --v3;
    }
    while (v3);
  }
  return result;
}

void *freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      if (*a2)
      {
        uint64_t result = heap_Free((void *)v4[1], *a2);
        *a2 = 0;
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statpos_get_features_for_igtree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8)) {
    return 0;
  }
  unsigned __int8 v6 = 0;
  while (1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = 16 * v6;
    if (cstdlib_strlen(*(const char **)(*(void *)a3 + v8)) <= 0x40)
    {
      uint64_t v10 = *(char **)(a2 + 8 * v7);
      goto LABEL_7;
    }
    unsigned __int16 v9 = cstdlib_strlen(*(const char **)(*(void *)a3 + v8));
    uint64_t v10 = (char *)heap_Realloc(*(uint64_t **)(a1 + 8), *(void *)(a2 + 8 * v7), v9 + 1);
    if (!v10) {
      break;
    }
    *(void *)(a2 + 8 * v7) = v10;
LABEL_7:
    cstdlib_strcpy(v10, *(const char **)(*(void *)a3 + v8));
    unsigned __int8 v6 = v7 + 1;
    if (*(_DWORD *)(a3 + 8) <= (v7 + 1)) {
      return 0;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_POS", 35000, 0, v11, v12, v13, v14, v16);
  return 2313166858;
}

uint64_t statpos_fe_prdctd_pos(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 == -1)
  {
    uint64_t v7 = "SB";
  }
  else if ((v6 & 0x80000000) != 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v7 = "=";
  }
  else
  {
    uint64_t v7 = *(const char **)(*(void *)a2 + 160 * v6 + 88);
  }
  cstdlib_strcpy(__dst, v7);
  return 0;
}

uint64_t statpos_fe_pssbl_tags(int a1, uint64_t a2, uint64_t a3, int a4, int a5, char *__dst)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0
    || (unsigned __int16 v9 = *(const char **)(*(void *)a2 + 160 * (int)v7 + 80)) == 0
    || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    unsigned __int16 v9 = "=";
    goto LABEL_14;
  }
  if (!*(void *)(a3 + 144))
  {
LABEL_14:
    cstdlib_strcpy(__dst, v9);
    return 0;
  }
  uint64_t v23 = 0;
  unsigned __int16 v22 = 0;
  uint64_t v11 = __dsta;
  cstdlib_strcpy(__dsta, v9);
  __s2[0] = *(unsigned char *)(a3 + 120);
  __s2[1] = 0;
  uint64_t v12 = cstdlib_strchr(__dsta, 47);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v11 = __dsta;
    do
    {
      *uint64_t v13 = 0;
      if ((ssftmap_Find(*(void *)(a3 + 144), (uint64_t)v11, &v23) & 0x1FFF) == 0x14) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v23;
      }
      statpos_getPOSTags(v14, a3 + 384, &v22);
      uint64_t v11 = v13 + 1;
      uint64_t v13 = cstdlib_strchr(v13 + 1, 47);
    }
    while (v13);
  }
  if ((ssftmap_Find(*(void *)(a3 + 144), (uint64_t)v11, &v23) & 0x1FFF) == 0x14)
  {
    uint64_t v15 = a3 + 384;
    unsigned int v16 = v11;
  }
  else
  {
    unsigned int v16 = v23;
    uint64_t v15 = a3 + 384;
  }
  statpos_getPOSTags(v16, v15, &v22);
  unint64_t v18 = v22;
  ssft_qsort(a3 + 384, v22, 8, (uint64_t (*)(unint64_t, unint64_t))string_cmp_0);
  cstdlib_strcpy(__dst, *(const char **)(a3 + 384));
  if (v18 >= 2)
  {
    unint64_t v19 = v18 - 1;
    uint64_t v20 = (const char **)(a3 + 392);
    do
    {
      cstdlib_strcat(__dst, __s2);
      uint64_t v21 = *v20++;
      cstdlib_strcat(__dst, v21);
      --v19;
    }
    while (v19);
  }
  return 0;
}

uint64_t statpos_fe_word(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8)) {
    unsigned int v7 = "=";
  }
  else {
    unsigned int v7 = **(const char ***)(*(void *)a2 + 160 * v6 + 48);
  }
  cstdlib_strcpy(__dst, v7);
  return 0;
}

uint64_t statpos_fe_cword(int a1, uint64_t *a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *((unsigned __int16 *)a2 + 4))
  {
    uint64_t v8 = "=";
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(const char **)(*a2 + 160 * v6 + 120);
    if (!v8) {
      uint64_t v8 = **(const char ***)(v7 + 160 * v6 + 48);
    }
  }
  cstdlib_strcpy(__dst, v8);
  return 0;
}

uint64_t statpos_fe_token(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0
    || v6 >= *(unsigned __int16 *)(a2 + 8)
    || (uint64_t v7 = *(const char **)(*(void *)(*(void *)a2 + 160 * v6 + 48) + 16)) == 0)
  {
    uint64_t v7 = "=";
  }
  cstdlib_strcpy(__dst, v7);
  return 0;
}

uint64_t statpos_fe_ends_in_aposs(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v10 = "=";
  }
  else
  {
    uint64_t v8 = **(const char ***)(*(void *)a2 + 160 * v7 + 48);
    size_t v9 = cstdlib_strlen(v8);
    if (v9 < 3 || cstdlib_strcmp("'s", &v8[v9 - 2])) {
      uint64_t v10 = "0";
    }
    else {
      uint64_t v10 = "1";
    }
  }
  cstdlib_strcpy(a6, v10);
  return 0;
}

uint64_t statpos_fe_wrd_len(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    cstdlib_strcpy(__dst, "=");
  }
  else
  {
    int v8 = Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + 160 * v7 + 48));
    sprintf(__dst, "%d", v8 - 1);
  }
  return 0;
}

uint64_t statpos_fe_prefix(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v8 = *(unsigned __int8 **)(*a2 + 160 * a4 + 120);
  if (!v8) {
    int v8 = **(unsigned __int8 ***)(*a2 + 160 * a4 + 48);
  }
  if (a5 >= (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1))
  {
    cstdlib_strcpy(a6, "=");
  }
  else
  {
    int v9 = Utf8_LengthInBytes(v8, a5);
    cstdlib_strncpy(a6, (const char *)v8, v9);
    a6[v9] = 0;
  }
  return 0;
}

uint64_t statpos_fe_suffix(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v8 = *(char **)(*a2 + 160 * a4 + 120);
  if (!v8) {
    int v8 = **(char ***)(*a2 + 160 * a4 + 48);
  }
  int v9 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols(v8) - 1);
  if (v9 <= a5) {
    uint64_t v10 = "=";
  }
  else {
    uint64_t v10 = &v8[Utf8_LengthInBytes((unsigned __int8 *)v8, v9 - a5)];
  }
  cstdlib_strcpy(a6, v10);
  return 0;
}

uint64_t statpos_fe_fllw_by_punc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v15 = "=";
  }
  else
  {
    int v9 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v10 = Utf8_Utf8NbrOfSymbols(v9);
    int v11 = Utf8_LengthInBytes((unsigned __int8 *)v9, v10 - 2);
    if ((v10 - 3) <= 0xFFFFFFFD
      && (uint64_t v12 = *(const char **)(a3 + 168),
          uint64_t v13 = &v9[v11],
          unsigned int v14 = cstdlib_strlen(v13),
          _statpos_char_check(v12, v13, v14)))
    {
      uint64_t v15 = "1";
    }
    else
    {
      uint64_t v15 = "0";
    }
  }
  cstdlib_strcpy(a6, v15);
  return 0;
}

uint64_t statpos_fe_fllw_by_termpunc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t v15 = "=";
  }
  else
  {
    int v9 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v10 = Utf8_Utf8NbrOfSymbols(v9);
    int v11 = Utf8_LengthInBytes((unsigned __int8 *)v9, v10 - 2);
    if ((v10 - 3) <= 0xFFFFFFFD
      && (uint64_t v12 = *(const char **)(a3 + 176),
          uint64_t v13 = &v9[v11],
          unsigned int v14 = cstdlib_strlen(v13),
          _statpos_char_check(v12, v13, v14)))
    {
      uint64_t v15 = "1";
    }
    else
    {
      uint64_t v15 = "0";
    }
  }
  cstdlib_strcpy(a6, v15);
  return 0;
}

uint64_t statpos_fe_has_hyphen(int a1, void *a2, uint64_t a3, int a4, int a5, char *__dst)
{
  cstdlib_strcpy(__dst, "0");
  int v11 = **(const char ***)(*a2 + 160 * (a5 + a4) + 48);
  unsigned int v12 = Utf8_Utf8NbrOfSymbols(v11) - 1;
  if (v12 >= 2)
  {
    int v13 = 0;
    while (1)
    {
      unsigned int v14 = utf8_determineUTF8CharLength(v11[v13]);
      if (_statpos_char_check(*(const char **)(a3 + 160), &v11[v13], v14)) {
        break;
      }
      v13 += v14;
      if (!--v12) {
        return 0;
      }
    }
    cstdlib_strcpy(__dst, "1");
  }
  return 0;
}

uint64_t statpos_fe_allupper(int a1, void *a2, int a3, int a4, int a5, char *__dst)
{
  cstdlib_strcpy(__dst, "1");
  int v10 = **(char ***)(*a2 + 160 * (a5 + a4) + 48);
  int v11 = Utf8_Utf8NbrOfSymbols(v10);
  int v12 = v11 - 1;
  if (v11 != 1)
  {
    unsigned int v13 = 0;
    while (1)
    {
      unsigned int v14 = utf8_determineUTF8CharLength(v10[v13]);
      if (utf8_BelongsToSet(0x12u, v10, v13, v14) != 1
        && utf8_BelongsToSet(0x15u, v10, v13, v14) != 1
        && utf8_BelongsToSet(0x18u, v10, v13, v14) != 1
        && utf8_BelongsToSet(0x1Bu, v10, v13, v14) != 1
        && utf8_BelongsToSet(0x1Eu, v10, v13, v14) != 1)
      {
        break;
      }
      v13 += v14;
      if (!--v12) {
        return 0;
      }
    }
    cstdlib_strcpy(__dst, "0");
  }
  return 0;
}

uint64_t statpos_fe_leadingcap(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, char *a6)
{
  int v8 = *(unsigned __int8 ***)(*a2 + 160 * (a5 + a4) + 48);
  int v9 = *v8;
  unsigned int v10 = utf8_determineUTF8CharLength(**v8);
  if (a4
    && ((unsigned int v11 = v10, utf8_BelongsToSet(0x12u, v9, 0, v10) == 1)
     || utf8_BelongsToSet(0x15u, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x18u, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x1Bu, v9, 0, v11) == 1
     || utf8_BelongsToSet(0x1Eu, v9, 0, v11) == 1))
  {
    int v12 = "1";
  }
  else
  {
    int v12 = "0";
  }
  cstdlib_strcpy(a6, v12);
  return 0;
}

uint64_t statpos_fe_single_char(uint64_t a1, void *a2, uint64_t a3, int a4, int a5, char *a6)
{
  if (Utf8_Utf8NbrOfSymbols(**(const char ***)(*a2 + 160 * (a5 + a4) + 48)) == 2) {
    unsigned int v7 = "1";
  }
  else {
    unsigned int v7 = "0";
  }
  cstdlib_strcpy(a6, v7);
  return 0;
}

uint64_t statpos_fe_contains_digit(int a1, void *a2, int a3, int a4, int a5, char *__dst)
{
  cstdlib_strcpy(__dst, "0");
  unsigned int v10 = **(char ***)(*a2 + 160 * (a5 + a4) + 48);
  int v11 = Utf8_Utf8NbrOfSymbols(v10);
  int v12 = v11 - 1;
  if (v11 != 1)
  {
    unsigned int v13 = 0;
    while (1)
    {
      unsigned int v14 = utf8_determineUTF8CharLength(v10[v13]);
      if (utf8_BelongsToSet(6u, v10, v13, v14) == 1) {
        break;
      }
      v13 += v14;
      if (!--v12) {
        return 0;
      }
    }
    cstdlib_strcpy(__dst, "1");
  }
  return 0;
}

uint64_t statpos_fe_hphn_wrd(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  int v9 = *(const char **)(*a2 + 160 * a4 + 120);
  if (!v9) {
    int v9 = **(const char ***)(*a2 + 160 * a4 + 48);
  }
  int v10 = Utf8_Utf8NbrOfSymbols(v9);
  int v11 = v10 - 1;
  if (v10 == 1) {
    goto LABEL_20;
  }
  int v25 = a5;
  int __dst = a6;
  int v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  int v16 = v10 - 1;
  do
  {
    unsigned int v17 = utf8_determineUTF8CharLength(v9[v15]);
    if (v11 != 1)
    {
      int v18 = _statpos_char_check(*(const char **)(a3 + 160), &v9[v15], v17);
      unsigned int v19 = v14 ? v14 : v15;
      if (v18)
      {
        unsigned int v14 = v19;
        unsigned int v13 = v17 + v15;
        int v12 = 1;
      }
    }
    v15 += v17;
    --v16;
  }
  while (v16);
  a6 = __dst;
  if (v12 && v14)
  {
    if (v25 == -1)
    {
      unsigned int v22 = (unsigned __int16)cstdlib_strlen(v9);
      if (v22 - v13 > 0x10) {
        unsigned int v22 = v13 + 16;
      }
      uint64_t v23 = &v9[v13];
      unsigned int v24 = v22 - v13;
      cstdlib_strncpy(__dst, v23, v22 - v13);
      __dst[v24] = 0;
    }
    else if (v25 == 1)
    {
      if (v14 >= 0x10) {
        size_t v20 = 16;
      }
      else {
        size_t v20 = v14;
      }
      cstdlib_strncpy(__dst, v9, v20);
      __dst[v20] = 0;
    }
  }
  else
  {
LABEL_20:
    cstdlib_strcpy(a6, "=");
  }
  return 0;
}

uint64_t statpos_fe_char(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  LOBYTE(v7) = a5;
  if (a5 <= 0)
  {
    int v14 = -1;
    if (a5 && a4)
    {
      do
      {
        unsigned int v15 = a4 + v14;
        LOBYTE(v7) = v7 + Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + 160 * (a4 + v14--) + 48)) - 1;
      }
      while ((v7 & 0x80) != 0 && ((v15 - 1) & 0x80000000) == 0);
    }
    LODWORD(v10) = v14 + ((v7 & 0x80) == 0);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 160 * a4 + 208;
    uint64_t v12 = a4 + 1;
    while (v12 + v10 < (unint64_t)*(unsigned __int16 *)(a2 + 8))
    {
      char v13 = Utf8_Utf8NbrOfSymbols(**(const char ***)(*(void *)a2 + v11));
      int v7 = (char)(v7 - v13 + 1);
      ++v10;
      v11 += 160;
      if (v7 <= 0)
      {
        LOBYTE(v7) = v13 + v7 - 2;
        goto LABEL_12;
      }
    }
    LODWORD(v10) = v10 + 1;
  }
LABEL_12:
  unsigned int v16 = v10 + a4;
  if ((int)(v10 + a4) < 0 || v16 >= *(unsigned __int16 *)(a2 + 8))
  {
    cstdlib_strcpy(a6, "=");
  }
  else
  {
    unsigned int v17 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v16 + 48);
    uint64_t v18 = (unsigned __int16)Utf8_LengthInBytes(v17, (char)v7);
    int v19 = cstdlib_strlen((const char *)v17) - v18;
    if (v19 >= (int)Utf8_LengthInBytes(&v17[v18], 1)) {
      utf8_getUTF8Char((uint64_t)v17, v18, a6);
    }
  }
  return 0;
}

uint64_t statpos_fe_wrd_prfx1(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 >= 0
    && v7 < *(unsigned __int16 *)(a2 + 8)
    && (int v8 = **(const char ***)(*(void *)a2 + 160 * v7 + 48),
        (((unsigned __int16)Utf8_Utf8NbrOfSymbols(v8) - 1) & 0xFFFE) != 0))
  {
    utf8_getUTF8Char((uint64_t)v8, 0, __dst);
  }
  else
  {
    cstdlib_strcpy(__dst, "=");
  }
  return 0;
}

uint64_t statpos_fe_wrd_prfx2(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0
    || v7 >= *(unsigned __int16 *)(a2 + 8)
    || (int v8 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v7 + 48),
        (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1) < 3u))
  {
    cstdlib_strcpy(__dst, "=");
  }
  else
  {
    unsigned int v9 = Utf8_LengthInBytes(v8, 2);
    cstdlib_strncpy(__dst, (const char *)v8, v9);
    __dst[v9] = 0;
  }
  return 0;
}

uint64_t statpos_fe_wrd_sffx1(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 >= 0
    && v7 < *(unsigned __int16 *)(a2 + 8)
    && (int v8 = **(char ***)(*(void *)a2 + 160 * v7 + 48),
        (((unsigned __int16)Utf8_Utf8NbrOfSymbols(v8) - 1) & 0xFFFE) != 0))
  {
    unsigned int v9 = cstdlib_strlen(v8);
    utf8_GetUtf8Symbol(v8, v9 - 1, v9, __dst);
  }
  else
  {
    cstdlib_strcpy(__dst, "=");
  }
  return 0;
}

uint64_t statpos_fe_wrd_sffx2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0
    || v7 >= *(unsigned __int16 *)(a2 + 8)
    || (int v8 = **(unsigned __int8 ***)(*(void *)a2 + 160 * v7 + 48),
        unsigned int v9 = (unsigned __int16)(Utf8_Utf8NbrOfSymbols((const char *)v8) - 1),
        v9 < 3))
  {
    uint64_t v10 = "=";
  }
  else
  {
    uint64_t v10 = (const char *)&v8[(int)Utf8_LengthInBytes(v8, v9 - 2)];
  }
  cstdlib_strcpy(a6, v10);
  return 0;
}

uint64_t statpos_fe_startofword(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    int v8 = "=";
  }
  else
  {
    int v8 = "1";
    if (v6 && *(_DWORD *)(*(void *)a2 + 160 * (v6 - 1) + 20) != 1) {
      int v8 = "0";
    }
  }
  cstdlib_strcpy(__dst, v8);
  return 0;
}

uint64_t statpos_fe_fllw_by_sp(int a1, uint64_t a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *(unsigned __int16 *)(a2 + 8))
  {
    unsigned int v7 = "=";
  }
  else if (*(_DWORD *)(*(void *)a2 + 160 * v6 + 20) == 1)
  {
    unsigned int v7 = "1";
  }
  else
  {
    unsigned int v7 = "0";
  }
  cstdlib_strcpy(__dst, v7);
  return 0;
}

uint64_t statpos_fe_fllw_by_anypunc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  unsigned int v7 = a5 + a4;
  if (a5 + a4 < 0 || v7 >= *(unsigned __int16 *)(a2 + 8))
  {
    int v19 = "=";
  }
  else
  {
    uint64_t v11 = **(char ***)(*(void *)a2 + 160 * v7 + 48);
    int v12 = Utf8_Utf8NbrOfSymbols(v11);
    int v13 = Utf8_LengthInBytes((unsigned __int8 *)v11, v12 - 2);
    if (a4 + 1 == *(unsigned __int16 *)(a2 + 8)
      || (v12 - 3) <= 0xFFFFFFFD
      && ((int v14 = *(const char **)(a3 + 168),
           unsigned int v15 = &v11[v13],
           unsigned int v16 = cstdlib_strlen(v15),
           _statpos_char_check(v14, v15, v16))
       || (unsigned int v17 = *(const char **)(a3 + 176), v18 = cstdlib_strlen(v15), _statpos_char_check(v17, v15, v18))))
    {
      int v19 = "1";
    }
    else
    {
      int v19 = "0";
    }
  }
  cstdlib_strcpy(a6, v19);
  return 0;
}

uint64_t statpos_fe_cword_ambig(int a1, uint64_t *a2, int a3, int a4, int a5, char *__dst)
{
  unsigned int v6 = a5 + a4;
  if (a5 + a4 < 0 || v6 >= *((unsigned __int16 *)a2 + 4))
  {
    int v8 = "=";
  }
  else
  {
    uint64_t v7 = *a2;
    if (*(_WORD *)(*a2 + 160 * v6 + 72) == 1) {
      int v8 = *(const char **)(v7 + 160 * v6 + 80);
    }
    else {
      int v8 = **(const char ***)(v7 + 160 * v6 + 48);
    }
  }
  cstdlib_strcpy(__dst, v8);
  return 0;
}

char *statpos_getPOSTags(char *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v5 = a1;
  uint64_t result = cstdlib_strchr(a1, 92);
  if (result)
  {
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = 0;
      while (1)
      {
        unint64_t v9 = (unsigned __int16)*a3;
        if (v8 >= v9) {
          break;
        }
        if (!cstdlib_strncmp(*(const char **)(a2 + 8 * v8++), v5, v7 - v5)) {
          goto LABEL_8;
        }
      }
      cstdlib_strncpy(*(char **)(a2 + 8 * v9), v5, v7 - v5);
      *(unsigned char *)(*(void *)(a2 + 8 * (unsigned __int16)(*a3)++) + v7 - v5) = 0;
LABEL_8:
      uint64_t v5 = v7 + 1;
      uint64_t v7 = cstdlib_strchr(v7 + 1, 92);
    }
    while (v7);
  }
  else if (!v5)
  {
    return result;
  }
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = (unsigned __int16)*a3;
    if (v11 >= v12) {
      break;
    }
    uint64_t result = (char *)cstdlib_strcmp(*(const char **)(a2 + 8 * v11++), v5);
    if (!result) {
      return result;
    }
  }
  uint64_t result = cstdlib_strcpy(*(char **)(a2 + 8 * v12), v5);
  ++*a3;
  return result;
}

uint64_t string_cmp_0(const char **a1, const char **a2)
{
  return cstdlib_strcmp(*a1, *a2);
}

uint64_t statpunc_getFeature(char *__s1, uint64_t a2)
{
  uint64_t v4 = 0;
  while (cstdlib_strcmp(__s1, g_statpunc_FeatureNames[v4]))
  {
    if (++v4 == 9) {
      return 0;
    }
  }
  return *(void *)(a2 + v4 * 8);
}

uint64_t statpunc_setFeature(uint64_t a1, uint64_t a2, char *__s1, uint64_t a4, const char *a5)
{
  if (*(unsigned __int8 *)(a1 + 1296) < 2u) {
    return 0;
  }
  uint64_t v10 = 0;
  while (cstdlib_strcmp(__s1, *(const char **)(*(void *)(a1 + 1312) + 8 * v10)))
  {
    if (*(unsigned __int8 *)(a1 + 1296) - 1 <= (unsigned __int16)++v10) {
      return 0;
    }
  }
  if (!cstdlib_strcmp(a5, ""))
  {
    unint64_t v12 = *(char **)(a4 + 8 * v10);
    unsigned int v17 = "_";
LABEL_13:
    cstdlib_strcpy(v12, v17);
    return 0;
  }
  if (cstdlib_strlen(a5) <= 0x40)
  {
    unint64_t v12 = *(char **)(a4 + 8 * v10);
    goto LABEL_12;
  }
  unsigned __int16 v11 = cstdlib_strlen(a5);
  unint64_t v12 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(void *)(a4 + 8 * v10), v11 + 1);
  if (v12)
  {
    *(void *)(a4 + 8 * v10) = v12;
LABEL_12:
    unsigned int v17 = a5;
    goto LABEL_13;
  }
  log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v13, v14, v15, v16, v19);
  return 2311069706;
}

uint64_t statpunc_initFeatureVector(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 8 * a4 - 8;
  while (1)
  {
    if (!*(void *)(a3 + v7))
    {
      uint64_t v9 = heap_Calloc(*(void **)(a2 + 8), 1, 65);
      *(void *)(a3 + v7) = v9;
      if (!v9) {
        break;
      }
    }
    uint64_t result = statpunc_setFeature(a1, a2, *(char **)(*(void *)(a1 + 1312) + v7), a3, "_");
    if ((result & 0x80000000) == 0)
    {
      BOOL v15 = v8 == v7;
      v7 += 8;
      if (!v15) {
        continue;
      }
    }
    return result;
  }
  log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v10, v11, v12, v13, v16);
  return 2311069706;
}

void *statpunc_freeFeatureVector(void *result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      if (*a2) {
        uint64_t result = heap_Free((void *)v4[1], *a2);
      }
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t statpunc_dumpFeatureVectorAndResult(uint64_t a1, uint64_t a2, uint64_t a3, char *__src)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  cstdlib_strncpy(__dst, __src, 0x100uLL);
  __dst[255] = 0;
  if (*(unsigned __int8 *)(a1 + 1296) >= 2u)
  {
    uint64_t v10 = 0;
    do
    {
      size_t v11 = cstdlib_strlen(*(const char **)(a3 + 8 * v10));
      if (v11 + cstdlib_strlen(__dst) + 2 > 0xFF) {
        break;
      }
      cstdlib_strcat(__dst, " ");
      cstdlib_strcat(__dst, *(const char **)(a3 + 8 * v10++));
    }
    while (*(unsigned __int8 *)(a1 + 1296) - 1 > (unsigned __int16)v10);
  }
  return log_OutText(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"traceFeatureVector %s", v7, v8, v9, (uint64_t)__dst);
}

uint64_t statpunc_getIgtreeBrkStr(uint64_t a1, const char *a2, unsigned char *a3, size_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &v9);
  if ((result & 0x80000000) == 0)
  {
    cstdlib_strcpy(__dst, "statpunc_");
    cstdlib_strcat(__dst, a2);
    LODWORD(result) = brokeraux_ComposeBrokerString(a1, __dst, 0, 1, v9, 0, 0, a3, a4);
    if ((int)result >= 0) {
      return result;
    }
    else {
      return result | 0x89C02000;
    }
  }
  return result;
}

uint64_t statpunc_readIGTree(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)unint64_t v37 = 0;
  IgtreeBrkuint64_t Str = statpunc_getIgtreeBrkStr(a3, a4, v38, 0x100uLL);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  IgtreeBrkuint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, v38, "IGTR", 1031, (uint64_t *)v37);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  uint64_t v10 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
  *(void *)(a5 + 8) = v10;
  if (!v10)
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PUNCSPTN", 35000, 0, v11, v12, v13, v14, v36);
    return 2311069706;
  }
  IgtreeBrkuint64_t Str = igtree_Init(a1, a2, *(uint64_t *)v37, v10);
  if ((IgtreeBrkStr & 0x80000000) != 0) {
    return IgtreeBrkStr;
  }
  uint64_t v22 = ssftriff_reader_ObjClose(*(void **)v37, v15, v16, v17, v18, v19, v20, v21);
  if ((v22 & 0x80000000) == 0)
  {
    *(void *)(a5 + 16) = 0;
    *(void *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 393219;
    *(void *)(a5 + 40) = ":;.!?()[]{}#\"',-<>";
    uint64_t v23 = *(void *)(a5 + 8);
    if (*(_DWORD *)(v23 + 1336))
    {
      unsigned __int16 v24 = 0;
      do
      {
        uint64_t v25 = v24;
        uint64_t v26 = 16 * v24;
        int v27 = cstdlib_strcmp(*(const char **)(*(void *)(v23 + 1328) + v26), "leftcollocation");
        uint64_t v28 = *(void *)(*(void *)(a5 + 8) + 1328);
        if (v27)
        {
          int v29 = cstdlib_strcmp(*(const char **)(v28 + v26), "rightcollocation");
          uint64_t v30 = *(void *)(*(void *)(a5 + 8) + 1328);
          if (v29)
          {
            int v31 = cstdlib_strcmp(*(const char **)(v30 + v26), "dist2endmaxshort");
            uint64_t v32 = *(void *)(*(void *)(a5 + 8) + 1328);
            if (v31)
            {
              int v33 = cstdlib_strcmp(*(const char **)(v32 + v26), "dist2endminlong");
              uint64_t v34 = *(void *)(*(void *)(a5 + 8) + 1328);
              if (v33)
              {
                if (!cstdlib_strcmp(*(const char **)(v34 + v26), "punctuation")) {
                  *(void *)(a5 + 40) = *(void *)(*(void *)(*(void *)(a5 + 8) + 1328) + 16 * v25 + 8);
                }
              }
              else
              {
                *(_WORD *)(a5 + 34) = cstdlib_atoi(*(unsigned __int8 **)(v34 + 16 * v25 + 8));
              }
            }
            else
            {
              *(_WORD *)(a5 + 32) = cstdlib_atoi(*(unsigned __int8 **)(v32 + 16 * v25 + 8));
            }
          }
          else
          {
            *(void *)(a5 + 24) = *(void *)(v30 + 16 * v25 + 8);
          }
        }
        else
        {
          *(void *)(a5 + 16) = *(void *)(v28 + 16 * v25 + 8);
        }
        unsigned __int16 v24 = v25 + 1;
        uint64_t v23 = *(void *)(a5 + 8);
      }
      while (*(_DWORD *)(v23 + 1336) > (unsigned __int16)(v25 + 1));
    }
  }
  return v22;
}

uint64_t statpunc_freeIGTree(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = igtree_Deinit(a1, a2);
  if ((v4 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a2);
  }
  return v4;
}

BOOL bstartword(char *__s, char *a2, char *a3)
{
  if (a3 == a2) {
    return 1;
  }
  uint64_t v3 = a3;
  do
  {
    int v6 = *--v3;
    uint64_t v7 = cstdlib_strchr(__s, v6);
  }
  while (v3 > a2 && v7);
  int v8 = *v3;
  return v8 == 32 || v3 == a2 && cstdlib_strchr(__s, v8);
}

BOOL bendword(char *__s, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)(a2 + 1);
  while (1)
  {
    int v4 = (char)*v3;
    if (!*v3) {
      break;
    }
    ++v3;
    if (!cstdlib_strchr(__s, v4)) {
      return (*(v3 - 1) & 0xDF) == 0;
    }
  }
  return 1;
}

BOOL bstartsent(char *__s, char *a2, char *a3)
{
  if (a3 == a2) {
    return 1;
  }
  uint64_t v5 = a3 - 1;
  int v6 = a3 - 1;
  do
  {
    int v7 = *v6--;
    int v8 = cstdlib_strchr(__s, v7);
    if (v5 <= a2) {
      break;
    }
    uint64_t v5 = v6;
  }
  while (v8);
  return v6 + 1 == a2 && cstdlib_strchr(__s, *a2);
}

BOOL bendsent(char *__s, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned char *)(a2 + 1))
  {
    int v4 = (unsigned __int8 *)(a2 + 2);
    do
    {
      if (!cstdlib_strchr(__s, (char)v2))
      {
        int v2 = *(v4 - 1);
        if (v2 != 32) {
          break;
        }
      }
      int v5 = *v4++;
      int v2 = v5;
    }
    while (v5);
  }
  return v2 == 0;
}

uint64_t countspaces(unsigned char *a1, unint64_t a2)
{
  if ((unint64_t)a1 >= a2)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v2 = 0;
    do
    {
      if (*a1 == 32)
      {
        ++v2;
        do
          int v3 = *++a1;
        while (v3 == 32);
      }
      ++a1;
    }
    while ((unint64_t)a1 < a2);
  }
  return v2;
}

uint64_t statpunc_extractFeatures(uint64_t a1, uint64_t a2, char *a3, char *a4, const char *a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(const char **)(a1 + 16);
  if (v10 && (uint64_t v11 = cstdlib_strchr(*(char **)(a1 + 16), 124)) != 0)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    do
    {
      *uint64_t v12 = 0;
      uint64_t v14 = cstdlib_strstr(a3, v10);
      if (v14 && v14 < a4) {
        uint64_t v13 = statpunc_setFeature(v9, a2, "collocation", a6, "left");
      }
      *uint64_t v12 = 124;
      uint64_t v10 = v12 + 1;
      uint64_t v12 = cstdlib_strchr(v12 + 1, 124);
    }
    while (v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(const char **)(a1 + 24);
  if (v15)
  {
    uint64_t v16 = cstdlib_strchr(*(char **)(a1 + 24), 124);
    if (v16)
    {
      uint64_t v17 = v16;
      do
      {
        *uint64_t v17 = 0;
        if (cstdlib_strstr(a3, v15) > a4) {
          uint64_t v13 = statpunc_setFeature(v9, a2, "collocation", a6, "right");
        }
        *uint64_t v17 = 124;
        uint64_t v15 = v17 + 1;
        uint64_t v17 = cstdlib_strchr(v17 + 1, 124);
      }
      while (v17);
    }
  }
  uint64_t v18 = a4;
  if (a4 > a3)
  {
    uint64_t v18 = a4;
    while (*v18 != 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  if (v18 > a3)
  {
    while (*v18 == 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  if (cstdlib_strchr(*(char **)(a1 + 40), *v18))
  {
    uint64_t v19 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", *v18)) {
      goto LABEL_30;
    }
    uint64_t v19 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "lwordendchar", a6, v19);
LABEL_30:
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  uint64_t v20 = (const char *)(a1 + 4);
  for (unint64_t i = a4; (*i | 0x20) != 0x20; ++i)
    ;
  do
  {
    int v23 = *i++;
    int v22 = v23;
  }
  while (v23 == 32);
  if (cstdlib_strchr(*(char **)(a1 + 40), v22))
  {
    unsigned __int16 v24 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", *(i - 1))) {
      goto LABEL_40;
    }
    unsigned __int16 v24 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "rwordbegchar", a6, v24);
LABEL_40:
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  if (a4 > a3)
  {
    if (cstdlib_strchr(*(char **)(a1 + 40), *(a4 - 1)))
    {
      uint64_t v25 = "punc";
    }
    else
    {
      if (!cstdlib_strchr("0123456789", *(a4 - 1))) {
        goto LABEL_47;
      }
      uint64_t v25 = "digit";
    }
    uint64_t v13 = statpunc_setFeature(v9, a2, "lchar", a6, v25);
    if ((v13 & 0x80000000) != 0) {
      return v13;
    }
  }
LABEL_47:
  if (cstdlib_strchr(*(char **)(a1 + 40), a4[1]))
  {
    uint64_t v26 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", a4[1])) {
      goto LABEL_52;
    }
    uint64_t v26 = "digit";
  }
  uint64_t v13 = statpunc_setFeature(v9, a2, "rchar", a6, v26);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
LABEL_52:
  BOOL v27 = bstartsent(*(char **)(a1 + 40), a3, a4);
  BOOL v28 = bendsent(*(char **)(a1 + 40), (uint64_t)a4);
  if (v27)
  {
    if (v28)
    {
      int v29 = "isolated";
      uint64_t v30 = a1;
LABEL_55:
      uint64_t v13 = statpunc_setFeature(v9, a2, "sentpos", a6, v29);
      goto LABEL_63;
    }
    uint64_t v30 = a1;
    if (!cstdlib_strcmp(a5, (const char *)a1))
    {
      uint64_t v13 = statpunc_setFeature(v9, a2, "sentpos", a6, "start");
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
    }
  }
  else if (v28)
  {
    uint64_t v30 = a1;
    if (!cstdlib_strcmp(a5, v20))
    {
      int v29 = "end";
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v30 = a1;
  }
LABEL_63:
  BOOL v31 = bstartword(*(char **)(v30 + 40), a3, a4);
  uint64_t v32 = *(char **)(v30 + 40);
  if (v31)
  {
    int v33 = a4 + 1;
    do
    {
      int v34 = (char)*v33;
      if (!*v33) {
        goto LABEL_80;
      }
      ++v33;
    }
    while (cstdlib_strchr(v32, v34));
    if ((*(v33 - 1) & 0xDF) == 0)
    {
LABEL_80:
      uint64_t v39 = "pos";
      uint64_t v40 = "isolated";
      goto LABEL_81;
    }
    if (!cstdlib_strcmp(a5, (const char *)v30))
    {
      uint64_t v13 = statpunc_setFeature(v9, a2, "pos", a6, "start");
      if ((v13 & 0x80000000) == 0)
      {
        uint64_t v35 = cstdlib_strstr(a4 + 1, v20);
        if (v35)
        {
          unint64_t v36 = (unint64_t)v35;
          if (!bstartword(*(char **)(v30 + 40), a3, v35) && bendword(*(char **)(v30 + 40), v36))
          {
            if (v36 <= (unint64_t)a4)
            {
              unsigned __int16 v37 = 0;
            }
            else
            {
              unsigned __int16 v37 = 0;
              do
              {
                if (*a4 == 32)
                {
                  ++v37;
                  do
                    int v38 = *++a4;
                  while (v38 == 32);
                }
                ++a4;
              }
              while ((unint64_t)a4 < v36);
            }
            if (*(unsigned __int16 *)(v30 + 32) <= v37)
            {
              uint64_t v39 = "dist2end";
              if (*(unsigned __int16 *)(v30 + 34) <= v37) {
                uint64_t v40 = "long";
              }
              else {
                uint64_t v40 = "medium";
              }
            }
            else
            {
              uint64_t v39 = "dist2end";
              uint64_t v40 = "short";
            }
            goto LABEL_81;
          }
        }
      }
    }
    return v13;
  }
  uint64_t v42 = a4 + 1;
  while (1)
  {
    int v43 = (char)*v42;
    if (!*v42) {
      break;
    }
    ++v42;
    if (!cstdlib_strchr(v32, v43))
    {
      if ((*(v42 - 1) & 0xDF) != 0) {
        return v13;
      }
      break;
    }
  }
  if (cstdlib_strcmp(a5, v20)) {
    return v13;
  }
  uint64_t v39 = "pos";
  uint64_t v40 = "end";
LABEL_81:

  return statpunc_setFeature(v9, a2, v39, a6, v40);
}

uint64_t statpunc_insertMarker(uint64_t a1, unsigned int a2, const char *a3, uint64_t *a4, _WORD *a5, uint64_t *a6, unsigned __int16 *a7, uint64_t *a8)
{
  uint64_t v15 = a1;
  int v16 = *(_DWORD *)(*a8 + 12);
  int v17 = (unsigned __int16)*a5;
  if ((unsigned __int16)((unsigned __int16)((((-13107 * v17) & 0xFFFCu) >> 1) | ((_WORD)v17 << 15)) >> 1) < 0xCCDu)
  {
    uint64_t v27 = heap_Realloc(*(uint64_t **)(a1 + 8), *a4, 8 * (unsigned __int16)*a5 + 80);
    if (!v27
      || (*a4 = v27, (uint64_t v18 = heap_Realloc(*(uint64_t **)(v15 + 8), *a6, 20 * ((unsigned __int16)*a5 / 0xAu + 1))) == 0))
    {
LABEL_34:
      uint64_t v44 = 2311069706;
      uint64_t v54 = *(void *)(v15 + 32);
LABEL_35:
      log_OutPublic(v54, (uint64_t)"FE_PUNCSPTN", 33000, 0, v28, v29, v30, v31, v56);
      return v44;
    }
    *a6 = v18;
    LOWORD(v17) = *a5;
  }
  else
  {
    uint64_t v18 = *a6;
  }
  *(_WORD *)(v18 + 2 * (unsigned __int16)v17) = a2;
  unsigned __int16 v19 = *a7;
  uint64_t v59 = a4;
  if (!*a7)
  {
    unsigned __int16 v22 = 0;
    goto LABEL_32;
  }
  uint64_t v57 = v15;
  int v58 = (char *)a3;
  uint64_t v20 = *a8;
  int v21 = *(_DWORD *)(*a8 + 12);
  if (v21 - v16 <= a2)
  {
    uint64_t v32 = 0;
    unsigned __int16 v33 = 0;
    unsigned __int16 v22 = 0;
    unsigned __int16 v23 = 0;
    int v24 = 0;
    int v25 = 0;
    do
    {
      int v34 = *(_DWORD *)(v20 + v32);
      if (v34 == 1)
      {
        unsigned __int16 v22 = v33;
        int v24 = v21;
      }
      if (v34 == 51)
      {
        uint64_t v35 = cstdlib_strstr(*(char **)(v20 + v32 + 24), "PUNC");
        uint64_t v20 = *a8;
        BOOL v26 = v35 && (v35 == *(char **)(v20 + v32 + 24) || *(v35 - 1) != 95);
        int v25 = *(_DWORD *)(v20 + v32 + 12);
        unsigned __int16 v19 = *a7;
        unsigned __int16 v23 = v33;
      }
      else
      {
        BOOL v26 = 0;
      }
      if (++v33 >= v19) {
        break;
      }
      int v21 = *(_DWORD *)(v20 + 32 * v33 + 12);
      v32 += 32;
    }
    while (v21 - v16 <= a2);
  }
  else
  {
    unsigned __int16 v22 = 0;
    unsigned __int16 v23 = 0;
    int v24 = 0;
    int v25 = 0;
    BOOL v26 = 0;
  }
  if (!v23)
  {
    uint64_t v15 = v57;
    a3 = v58;
    goto LABEL_32;
  }
  BOOL v36 = v24 == v25;
  uint64_t v15 = v57;
  a3 = v58;
  if (!v36)
  {
LABEL_32:
    uint64_t v45 = v22 + 1;
    cstdlib_memmove((void *)(*a8 + 32 * (v22 + 2)), (const void *)(*a8 + 32 * v45), 32 * (~v22 + v19));
    uint64_t v46 = *a8;
    uint64_t v47 = *a8 + 32 * v45;
    *(_DWORD *)uint64_t v47 = 51;
    uint64_t v48 = v46 + 32 * v22;
    *(void *)(v47 + 4) = *(void *)(v48 + 4);
    *(void *)(v47 + 12) = *(unsigned int *)(v48 + 12);
    uint64_t v49 = *(void *)(v15 + 8);
    int v50 = cstdlib_strlen(a3);
    *(void *)(*a8 + 32 * v45 + 24) = heap_Alloc(v49, (v50 + 1));
    uint64_t v51 = *(void *)(*a8 + 32 * v45 + 24);
    if (v51)
    {
      uint64_t v52 = *v59;
      uint64_t v53 = (unsigned __int16)*a5;
      *a5 = v53 + 1;
      *(void *)(v52 + 8 * v53) = v51;
      cstdlib_strcpy(*(char **)(*a8 + 32 * v45 + 24), a3);
      uint64_t v44 = 0;
      ++*a7;
      return v44;
    }
    goto LABEL_34;
  }
  if (v26 && !cstdlib_strstr(v58, "S_PUNC") && !cstdlib_strstr(v58, "E_PUNC")) {
    return 0;
  }
  uint64_t v37 = *(void *)(v57 + 8);
  int v38 = cstdlib_strlen(v58);
  int v39 = cstdlib_strlen(*(const char **)(*a8 + 32 * v23 + 24));
  uint64_t v40 = (char *)heap_Alloc(v37, (v38 + v39 + 2));
  if (!v40)
  {
    uint64_t v44 = 2311069706;
    uint64_t v54 = *(void *)(v57 + 32);
    goto LABEL_35;
  }
  unsigned int v41 = v40;
  uint64_t v42 = *v59;
  uint64_t v43 = (unsigned __int16)*a5;
  *a5 = v43 + 1;
  *(void *)(v42 + 8 * v43) = v40;
  cstdlib_strcpy(v40, *(const char **)(*a8 + 32 * v23 + 24));
  cstdlib_strcat(v41, ";");
  cstdlib_strcat(v41, v58);
  uint64_t v44 = 0;
  *(void *)(*a8 + 32 * v23 + 24) = v41;
  return v44;
}

char *statpunc_Strpunc(char *a1, const char *a2, const char *a3, const char **a4)
{
  int v8 = cstdlib_strstr(a1, a2);
  uint64_t result = cstdlib_strstr(a1, a3);
  if (v8)
  {
    if (v8 <= result) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = a3;
    }
    if (v8 <= result) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = result;
    }
    if (result) {
      a3 = v10;
    }
    else {
      a3 = a2;
    }
    if (result) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = v8;
    }
  }
  else if (!result)
  {
    return result;
  }
  *a4 = a3;
  return result;
}

uint64_t statpunc_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  LODWORD(v8) = a6;
  uint64_t v10 = a4;
  uint64_t v11 = a3;
  int v114 = 0;
  int v115 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  __src = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  int v108 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a2 + 104))(a3, a4, 1, 0, &v115);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_107;
  }
  uint64_t v15 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, void, char *))(a2 + 184))(v11, v10, (unsigned __int16)v115, 0, (char *)&v115 + 2) & 0x80000000) != 0)goto LABEL_108; {
  if (HIWORD(v115) != 1)
  }
    goto LABEL_108;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char **, char *))(a2 + 176))(v11, v10, (unsigned __int16)v115, 0, &v113, (char *)&v114 + 2);
  uint64_t v15 = 0;
  if ((v14 & 0x80000000) != 0 || HIWORD(v114) < 2u) {
    goto LABEL_108;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void **, char *))(a2 + 176))(v11, v10, (unsigned __int16)v115, 1, &__src, (char *)&v108 + 2);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_107:
    uint64_t v15 = 0;
    goto LABEL_108;
  }
  uint64_t v105 = a1;
  int v102 = *((_DWORD *)__src + 3);
  int v16 = (const char *)(a5 + 4);
  int v17 = statpunc_Strpunc(v113, (const char *)a5, (const char *)(a5 + 4), &v111);
  if (!v17) {
    goto LABEL_62;
  }
  uint64_t v100 = a7;
  unsigned __int16 v18 = 0;
  do
  {
    ++v18;
    int v17 = statpunc_Strpunc(v17 + 1, (const char *)a5, (const char *)(a5 + 4), &v111);
  }
  while (v17);
  if (v18)
  {
    unsigned __int16 v19 = (char *)heap_Calloc(*(void **)(v105 + 8), 1, 32 * (HIWORD(v108) + (unint64_t)v18));
    uint64_t v109 = v19;
    if (v19)
    {
      cstdlib_memcpy(v19, __src, 32 * HIWORD(v108));
      int v24 = statpunc_Strpunc(v113, (const char *)a5, (const char *)(a5 + 4), &v111);
      if (v24)
      {
        int v25 = v24;
        BOOL v26 = 0;
        uint64_t v99 = 0;
        while (1)
        {
          uint64_t v27 = a5;
          __int16 v28 = (__int16)v113;
          int v117 = 0;
          v118[0] = 0;
          int v116 = 0;
          uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a2 + 104))(v11, v10, 3, (unsigned __int16)v115, (char *)&v117 + 2);
          if ((v29 & 0x80000000) != 0) {
            goto LABEL_64;
          }
          uint64_t v103 = v26;
          unsigned __int16 v33 = HIWORD(v117);
          if (HIWORD(v117))
          {
            int v34 = 0;
            unsigned int v35 = (unsigned __int16)((_WORD)v25 - v28);
            while (1)
            {
              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, int *))(a2 + 168))(v11, v10, v33, 0, 1, v118, &v117);
              if ((v29 & 0x80000000) != 0) {
                break;
              }
              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, int *))(a2 + 168))(v11, v10, HIWORD(v117), 1, 1, (char *)&v116 + 2, &v117);
              if ((v29 & 0x80000000) != 0) {
                break;
              }
              uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, int *))(a2 + 168))(v11, v10, HIWORD(v117), 2, 1, &v116, &v117);
              if ((v29 & 0x80000000) != 0) {
                break;
              }
              if ((unsigned __int16)v116 > v35 && HIWORD(v116) <= v35 && (v118[0] & 0xFFFFFFFD) == 4) {
                int v34 = 1;
              }
              uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a2 + 120))(v11, v10, HIWORD(v117), (char *)&v117 + 2);
              uint64_t v14 = v38;
              if ((v38 & 0x80000000) == 0)
              {
                unsigned __int16 v33 = HIWORD(v117);
                if (HIWORD(v117)) {
                  continue;
                }
              }
              a5 = v27;
              if ((v38 & 0x80000000) != 0) {
                goto LABEL_114;
              }
              if (v34)
              {
                BOOL v26 = (char *)v103;
                goto LABEL_60;
              }
              goto LABEL_35;
            }
LABEL_64:
            uint64_t v14 = v29;
            uint64_t v15 = 0;
            a1 = v105;
            a5 = v27;
            goto LABEL_94;
          }
          a5 = v27;
LABEL_35:
          uint64_t v39 = v99;
          if (!v99)
          {
            log_OutText(*(void *)(v105 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"traceFeatureVector %s", v30, v31, v32, (uint64_t)v113);
            uint64_t v39 = heap_Calloc(*(void **)(v105 + 8), 1, 8 * *(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 8);
            if (!v39)
            {
              uint64_t v14 = 2311069706;
              a1 = v105;
              log_OutPublic(*(void *)(v105 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v40, v41, v42, v43, v94);
              goto LABEL_107;
            }
          }
          uint64_t inited = statpunc_initFeatureVector(*(void *)(a5 + 8), v105, v39, (unsigned __int16)(*(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 1));
          if ((inited & 0x80000000) != 0)
          {
            uint64_t v14 = inited;
            uint64_t v15 = 0;
            a1 = v105;
LABEL_105:
            uint64_t v88 = v39;
            goto LABEL_96;
          }
          uint64_t v99 = v39;
          uint64_t Features = statpunc_extractFeatures(a5, v105, v113, v25, v111, v39);
          if ((Features & 0x80000000) != 0) {
            goto LABEL_102;
          }
          if (v103)
          {
            uint64_t v46 = statpunc_setFeature(*(void *)(a5 + 8), v105, "startpred", v39, v103);
            if ((v46 & 0x80000000) != 0)
            {
              uint64_t v14 = v46;
              uint64_t v15 = 0;
              a1 = v105;
              goto LABEL_105;
            }
          }
          uint64_t Features = igtree_Process(*(void *)(a5 + 8), v39, &v112);
          if ((Features & 0x80000000) != 0)
          {
LABEL_102:
            uint64_t v14 = Features;
            uint64_t v15 = 0;
            a1 = v105;
            uint64_t v88 = v39;
            goto LABEL_96;
          }
          uint64_t v47 = 0;
          while (cstdlib_strcmp("pos", g_statpunc_FeatureNames[v47]))
          {
            if (++v47 == 9)
            {
              uint64_t v48 = 0;
              goto LABEL_47;
            }
          }
          uint64_t v48 = *(const char **)(v39 + v47 * 8);
LABEL_47:
          BOOL v26 = (char *)v103;
          if (!cstdlib_strcmp(v48, "start")) {
            BOOL v26 = v112;
          }
          statpunc_dumpFeatureVectorAndResult(*(void *)(a5 + 8), v105, v39, v112);
          if (!cstdlib_strstr(v112, "IGNORE"))
          {
            uint64_t v49 = v26;
            unsigned __int16 v50 = (_WORD)v25 - (_WORD)v113;
            if (!cstdlib_strstr(v112, "S_PUNC") && v50)
            {
              uint64_t v51 = v50 - 1;
              while (1)
              {
                int v52 = v113[v51];
                if (v52 != 32 && !cstdlib_strchr(*(char **)(a5 + 40), v52)) {
                  break;
                }
                if (!(unint64_t)(unsigned __int16)v51--)
                {
                  unsigned __int16 v50 = 0;
                  goto LABEL_58;
                }
              }
              unsigned __int16 v50 = v51 + 1;
            }
LABEL_58:
            uint64_t inserted = statpunc_insertMarker(v105, v50, v112, (uint64_t *)&v107, &v108, &v106, (unsigned __int16 *)&v108 + 1, (uint64_t *)&v109);
            if ((inserted & 0x80000000) != 0)
            {
              uint64_t v14 = inserted;
LABEL_114:
              uint64_t v15 = 0;
              a1 = v105;
LABEL_94:
              uint64_t v88 = v99;
              goto LABEL_95;
            }
            BOOL v26 = v49;
          }
LABEL_60:
          int v25 = statpunc_Strpunc(v25 + 1, (const char *)a5, v16, &v111);
          if (!v25) {
            goto LABEL_66;
          }
        }
      }
      uint64_t v99 = 0;
LABEL_66:
      a1 = v105;
      uint64_t v55 = *(void **)(v105 + 8);
      int v56 = cstdlib_strlen(v113);
      uint64_t v57 = (char *)heap_Calloc(v55, 1, (v56 + 1));
      uint64_t v15 = v57;
      if (!v57)
      {
        uint64_t v14 = 2311069706;
        log_OutPublic(*(void *)(v105 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v58, v59, v60, v61, v94);
        goto LABEL_94;
      }
      cstdlib_strcpy(v57, v113);
      uint64_t v95 = a5;
      if (v8 && (_WORD)v108)
      {
        uint64_t v62 = 0;
        unsigned __int16 v104 = 0;
        uint64_t v8 = v8;
        uint64_t v63 = v100;
        uint64_t v97 = v8;
        uint64_t v98 = v10;
        uint64_t v96 = v11;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            unsigned int v65 = (const char *)(v63 + (i << 9));
            if (!cstdlib_strcmp((const char *)v107[v62], v65))
            {
              unsigned __int16 v66 = cstdlib_strlen(v65 + 256);
              int v67 = *(uint64_t **)(a1 + 8);
              int v68 = cstdlib_strlen(v15);
              uint64_t v69 = (const char *)heap_Realloc(v67, (uint64_t)v15, v66 + v68 + 1);
              if (!v69)
              {
                uint64_t v14 = 2311069706;
                a1 = v105;
                log_OutPublic(*(void *)(v105 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v70, v71, v72, v73, v94);
                goto LABEL_93;
              }
              int v74 = v69;
              uint64_t v75 = v106;
              int v76 = *(unsigned __int16 *)(v106 + 2 * v62) + v104;
              int __dst = (char *)&v69[v76 + v66];
              uint64_t v77 = &v69[v76 + 1];
              size_t v78 = cstdlib_strlen(v69);
              uint64_t v79 = v77;
              uint64_t v10 = v98;
              cstdlib_memmove(__dst, v79, v78 - (*(unsigned __int16 *)(v75 + 2 * v62) + (unint64_t)v104));
              uint64_t v11 = v96;
              cstdlib_memcpy((void *)&v74[*(unsigned __int16 *)(v75 + 2 * v62) + v104], v65 + 256, v66);
              uint64_t v80 = HIWORD(v108);
              if (HIWORD(v108))
              {
                unsigned int v81 = *(unsigned __int16 *)(v75 + 2 * v62) + v104;
                unint64_t v82 = v109 + 12;
                do
                {
                  if (v81 < (unsigned __int16)(*v82 - v102)) {
                    *v82 += v66 - 1;
                  }
                  v82 += 8;
                  --v80;
                }
                while (v80);
              }
              unsigned __int16 v104 = v104 + v66 - 1;
              uint64_t v15 = v74;
              a1 = v105;
              uint64_t v63 = v100;
              uint64_t v8 = v97;
            }
          }
          if (++v62 < (unint64_t)(unsigned __int16)v108) {
            continue;
          }
          break;
        }
      }
      uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, int *))(a2 + 160))(v11, v10, (unsigned __int16)v115, 1, HIWORD(v108), v109, &v114);
      if ((v83 & 0x80000000) != 0)
      {
        uint64_t v14 = v83;
LABEL_93:
        a5 = v95;
        goto LABEL_94;
      }
      int v84 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, const char *, int *))(a2 + 160);
      uint64_t v85 = (unsigned __int16)v115;
      __int16 v86 = cstdlib_strlen(v15);
      uint64_t v14 = v84(v11, v10, v85, 0, (unsigned __int16)(v86 + 1), v15, &v114);
      a5 = v95;
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_94;
      }
      uint64_t v87 = (unsigned __int16)v108;
      uint64_t v88 = v99;
      if ((_WORD)v108)
      {
        uint64_t v89 = v107;
        do
        {
          uint64_t v90 = *v89++;
          heap_Free(*(void **)(a1 + 8), v90);
          --v87;
        }
        while (v87);
      }
      if (v106) {
        heap_Free(*(void **)(a1 + 8), v106);
      }
      if (v107) {
        heap_Free(*(void **)(a1 + 8), (uint64_t)v107);
      }
LABEL_95:
      if (v88)
      {
LABEL_96:
        if (*(unsigned char *)(*(void *)(a5 + 8) + 1296) != 1)
        {
          uint64_t v91 = (unsigned __int16)(*(unsigned __int8 *)(*(void *)(a5 + 8) + 1296) - 1);
          char v92 = (uint64_t *)v88;
          do
          {
            if (*v92) {
              heap_Free(*(void **)(a1 + 8), *v92);
            }
            ++v92;
            --v91;
          }
          while (v91);
        }
        heap_Free(*(void **)(a1 + 8), v88);
      }
    }
    else
    {
      uint64_t v14 = 2311069706;
      log_OutPublic(*(void *)(v105 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v20, v21, v22, v23, v94);
      uint64_t v15 = 0;
      a1 = v105;
    }
  }
  else
  {
LABEL_62:
    uint64_t v15 = 0;
    a1 = v105;
  }
LABEL_108:
  if (v109) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v109);
  }
  if (v15) {
    heap_Free(*(void **)(a1 + 8), (uint64_t)v15);
  }
  return v14;
}

uint64_t fe_puncsptn_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t v5 = 2311069703;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v25);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(v25[6], (uint64_t)"LINGDB", &v24);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(v25[6], (uint64_t)"FE_DEPES", &v23);
  uint64_t v11 = v25[6];
  if ((Object & 0x80000000) != 0)
  {
LABEL_11:
    objc_ReleaseObject(v11, (uint64_t)"LINGDB");
    return Object;
  }
  uint64_t v12 = objc_GetObject(v11, (uint64_t)"FE_DCTLKP", &v22);
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t Object = v12;
    objc_ReleaseObject(v25[6], (uint64_t)"FE_DEPES");
    uint64_t v11 = v25[6];
    goto LABEL_11;
  }
  uint64_t v13 = (char *)heap_Alloc(v25[1], 168);
  if (v13)
  {
    unsigned __int16 v18 = v13;
    cstdlib_memset(v13, 0, 0xA8uLL);
    *(void *)a5 = v18;
    *(_DWORD *)(a5 + 8) = 62339;
    *(void *)unsigned __int16 v18 = v25;
    *((void *)v18 + 1) = a3;
    *((void *)v18 + 2) = a4;
    *((void *)v18 + 3) = *(void *)(v24 + 8);
    uint64_t v19 = v23;
    *((void *)v18 + 6) = *(void *)(v23 + 8);
    *((_OWORD *)v18 + 2) = *(_OWORD *)(v19 + 16);
    uint64_t v20 = v22;
    *((void *)v18 + 9) = *(void *)(v22 + 8);
    *(_OWORD *)(v18 + 56) = *(_OWORD *)(v20 + 16);
    *((_WORD *)v18 + 56) = 0;
    *((_OWORD *)v18 + 5) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    uint64_t v5 = hlp_open(v18);
    if ((v5 & 0x80000000) != 0)
    {
      fe_puncsptn_ObjClose(*(uint64_t **)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
  }
  else
  {
    log_OutPublic(v25[4], (uint64_t)"FE_PUNCSPTN", 33000, 0, v14, v15, v16, v17, v22);
    objc_ReleaseObject(v25[6], (uint64_t)"LINGDB");
    objc_ReleaseObject(v25[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v25[6], (uint64_t)"FE_DCTLKP");
    return 2311069706;
  }
  return v5;
}

uint64_t hlp_open(void *a1)
{
  uint64_t v1 = 2311069706;
  uint64_t v46 = 0;
  __int16 v43 = -1;
  char v42 = 0;
  if (!a1) {
    return 2311069702;
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, void, char *, uint64_t *))(a1[9] + 88))(a1[7], a1[8], (char *)&v46 + 4, &v46);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  BOOL v5 = v46 == 1 && HIDWORD(v46) == 1;
  a1[15] = 0;
  *((_DWORD *)a1 + 29) = v5;
  if ((paramc_ParamGet(*(void *)(*a1 + 40), (uint64_t)"fecfg", &v45, 0) & 0x80000000) == 0
    && (!LH_stricmp(v45, "mpthree") || !LH_stricmp(v45, "vadvde")))
  {
    *((_DWORD *)a1 + 30) = 1;
  }
  __int16 v43 = -1;
  uint64_t v3 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "puncsptneos", &v44, &v43, &v42);
  if ((v3 & 0x80000000) != 0) {
    return v3;
  }
  if (v43 == 1 && v44 && **v44 == 49) {
    *((_DWORD *)a1 + 31) = 1;
  }
  LOBYTE(v49) = 0;
  LOWORD(__s1) = -1;
  uint64_t v6 = a1[16];
  if (v6) {
    heap_Free(*(void **)(*a1 + 8), v6);
  }
  unsigned __int16 v50 = 0;
  a1[16] = 0;
  uint64_t v7 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, char **, unsigned __int16 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "esctn", &v50, &__s1, &v49);
  uint64_t IGTree = v7;
  if ((v7 & 0x80000000) != 0 || !(_WORD)__s1)
  {
    if ((v7 & 0x80000000) != 0) {
      return IGTree;
    }
  }
  else
  {
    uint64_t v9 = *(void **)(*a1 + 8);
    int v10 = cstdlib_strlen(*v50);
    uint64_t v11 = (char *)heap_Calloc(v9, 1, (v10 + 1));
    a1[16] = v11;
    if (!v11)
    {
      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 34000, 0, v12, v13, v14, v15, v41);
      return 2311069706;
    }
    cstdlib_strcpy(v11, *v50);
    uint64_t v16 = a1[16];
    *(unsigned char *)(cstdlib_strlen(*v50) + v16 - 1) = 124;
  }
  unsigned __int16 v49 = 0;
  unsigned __int16 v50 = 0;
  char v48 = 0;
  uint64_t v17 = a1[17];
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v18 = 0;
    uint64_t v19 = 8;
    do
    {
      statpunc_freeIGTree(*a1, *(void *)(v17 + v19));
      uint64_t v17 = a1[17];
      *(void *)(v17 + v19) = 0;
      ++v18;
      v19 += 48;
    }
    while (v18 < *((unsigned __int16 *)a1 + 72));
  }
  else if (!v17)
  {
    goto LABEL_33;
  }
  heap_Free(*(void **)(*a1 + 8), v17);
LABEL_33:
  a1[17] = 0;
  *((_WORD *)a1 + 72) = 0;
  uint64_t IGTree = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, unsigned __int16 *, char *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "statpunc", &v50, &v49, &v48);
  if ((IGTree & 0x80000000) == 0 && v49)
  {
    unsigned __int16 __s1 = 0;
    paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"fevoice", &__s1);
    uint64_t v20 = heap_Alloc(*(void *)(*a1 + 8), 48 * v49);
    a1[17] = v20;
    if (!v20) {
      goto LABEL_61;
    }
    if (v49)
    {
      for (unint64_t i = 0; i < v49; ++i)
      {
        if (__s1 && cstdlib_strstr(__s1, "uni") || !cstdlib_strstr((char *)v50[i], "extended"))
        {
          BOOL v26 = (char *)v50[i];
          uint64_t v27 = cstdlib_strchr(v26, 124);
          if (v27)
          {
            *uint64_t v27 = 0;
            __int16 v28 = v27 + 1;
            cstdlib_strcpy((char *)(a1[17] + 48 * *((unsigned __int16 *)a1 + 72)), v26);
            uint64_t v29 = cstdlib_strchr(v28, 124);
            if (v29)
            {
              *uint64_t v29 = 0;
              uint64_t v30 = v29 + 1;
              cstdlib_strcpy((char *)(a1[17] + 48 * *((unsigned __int16 *)a1 + 72) + 4), v28);
              uint64_t v31 = cstdlib_strchr(v30, 124);
              if (v31)
              {
                *uint64_t v31 = 0;
                uint64_t IGTree = statpunc_readIGTree((_WORD *)a1[1], a1[2], *a1, v30, a1[17] + 48 * *((unsigned __int16 *)a1 + 72));
                if ((IGTree & 0x80000000) != 0) {
                  return IGTree;
                }
                ++*((_WORD *)a1 + 72);
              }
            }
          }
        }
      }
    }
  }
  if ((IGTree & 0x80000000) == 0)
  {
    LOBYTE(v49) = 0;
    LOWORD(__s1) = 0;
    uint64_t v32 = a1[19];
    if (v32) {
      heap_Free(*(void **)(*a1 + 8), v32);
    }
    unsigned __int16 v50 = 0;
    a1[19] = 0;
    *((_WORD *)a1 + 80) = 0;
    uint64_t v33 = (*(uint64_t (**)(void, void, const char *, const char *, const char ***, char **, unsigned __int16 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "statpuncorthmap", &v50, &__s1, &v49);
    if ((v33 & 0x80000000) != 0 || !(_WORD)__s1) {
      return v33;
    }
    uint64_t v34 = heap_Alloc(*(void *)(*a1 + 8), (unint64_t)(unsigned __int16)__s1 << 9);
    a1[19] = v34;
    if (v34)
    {
      if ((_WORD)__s1)
      {
        unint64_t v35 = 0;
        do
        {
          BOOL v36 = (char *)v50[v35];
          uint64_t v37 = cstdlib_strchr(v36, 124);
          if (v37)
          {
            *uint64_t v37 = 0;
            uint64_t v38 = v37 + 1;
            cstdlib_strcpy((char *)(a1[19] + ((unint64_t)*((unsigned __int16 *)a1 + 80) << 9)), v36);
            uint64_t v39 = cstdlib_strchr(v38, 124);
            if (v39)
            {
              char *v39 = 0;
              cstdlib_strcpy((char *)(a1[19] + ((unint64_t)*((unsigned __int16 *)a1 + 80) << 9) + 256), v38);
              ++*((_WORD *)a1 + 80);
            }
          }
          ++v35;
        }
        while (v35 < (unsigned __int16)__s1);
      }
      return v33;
    }
LABEL_61:
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 34000, 0, v21, v22, v23, v24, v41);
    return v1;
  }
  return IGTree;
}

uint64_t fe_puncsptn_ObjClose(uint64_t *a1, int a2)
{
  uint64_t result = safeh_HandleCheck((uint64_t)a1, a2, 62339, 168);
  if ((result & 0x80000000) != 0) {
    return 2311069704;
  }
  if (!a1) {
    return result;
  }
  uint64_t v4 = a1[13];
  if (v4) {
    heap_Free(*(void **)(*a1 + 8), v4);
  }
  a1[13] = 0;
  uint64_t v5 = a1[10];
  if (v5) {
    heap_Free(*(void **)(*a1 + 8), v5);
  }
  a1[10] = 0;
  uint64_t v6 = a1[11];
  if (v6) {
    heap_Free(*(void **)(*a1 + 8), v6);
  }
  a1[11] = 0;
  uint64_t v7 = a1[12];
  if (v7) {
    heap_Free(*(void **)(*a1 + 8), v7);
  }
  a1[12] = 0;
  uint64_t v8 = a1[16];
  if (v8) {
    heap_Free(*(void **)(*a1 + 8), v8);
  }
  a1[16] = 0;
  uint64_t v9 = a1[17];
  if (*((_WORD *)a1 + 72))
  {
    unint64_t v10 = 0;
    uint64_t v11 = 8;
    do
    {
      statpunc_freeIGTree(*a1, *(void *)(v9 + v11));
      uint64_t v9 = a1[17];
      *(void *)(v9 + v11) = 0;
      ++v10;
      v11 += 48;
    }
    while (v10 < *((unsigned __int16 *)a1 + 72));
    goto LABEL_19;
  }
  if (v9)
  {
LABEL_19:
    heap_Free(*(void **)(*a1 + 8), v9);
    a1[17] = 0;
  }
  uint64_t v12 = a1[19];
  if (v12)
  {
    heap_Free(*(void **)(*a1 + 8), v12);
    a1[19] = 0;
  }
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DEPES");
  objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
  heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  return 0;
}

uint64_t fe_puncsptn_ObjReopen(void *a1, int a2)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62339, 168) & 0x80000000) != 0) {
    return 2311069704;
  }

  return hlp_open(a1);
}

uint64_t fe_puncsptn_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 168);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2311069704;
  }
}

uint64_t fe_puncsptn_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned __int16 v98 = 0;
  unsigned __int16 v97 = 0;
  unsigned __int16 __s1 = 0;
  unsigned __int16 v93 = 0;
  __int16 v91 = 0;
  if ((safeh_HandleCheck(a1, a2, 62339, 168) & 0x80000000) != 0) {
    return 2311069704;
  }
  uint64_t v103 = 0;
  int v102 = 0;
  unsigned __int16 v101 = 0;
  __int16 v100 = 0;
  unsigned __int16 v99 = 0;
  int v96 = 0;
  uint64_t v94 = 0;
  int v92 = 0;
  *a5 = 1;
  uint64_t v9 = *(void *)(a1 + 24);
  LOWORD(v90) = 0;
  int v105 = 0;
  __int16 v104 = 0;
  *(_DWORD *)__src = 0;
  uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(v9 + 104))(a3, a4, 1, 0, (char *)&v105 + 2);
  if ((updated & 0x80000000) != 0) {
    return updated;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(v9 + 184))(a3, a4, HIWORD(v105), 0, &v104);
  if ((v11 & 0x80000000) == 0 && v104 == 1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v9 + 104))(a3, a4, 3, HIWORD(v105), &v105);
    if ((v11 & 0x80000000) == 0)
    {
      unsigned __int16 v12 = v105;
      if ((_WORD)v105)
      {
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned __int16 *, int *))(v9 + 168))(a3, a4, v12, 0, 1, __src, &v90);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (*(_DWORD *)__src > 3u)
          {
            uint64_t v14 = (unsigned __int16)v105;
          }
          else
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void))(v9 + 192))(a3, a4, (unsigned __int16)v105);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            LOWORD(v105) = v13;
            uint64_t v14 = v13;
          }
          if ((_WORD)v14)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v9 + 120))(a3, a4, (unsigned __int16)v14, &v105);
            uint64_t v13 = v14;
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          else
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v9 + 104))(a3, a4, 3, HIWORD(v105), &v105);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          unsigned __int16 v12 = v105;
          if (!(_WORD)v105) {
            goto LABEL_21;
          }
        }
      }
    }
  }
  if ((v11 & 0x80000000) != 0) {
    return v11;
  }
LABEL_21:
  if (*(_WORD *)(a1 + 144))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t updated = statpunc_Process(*(void *)a1, *(void *)(a1 + 24), a3, a4, *(void *)(a1 + 136) + v15, *(unsigned __int16 *)(a1 + 160), *(void *)(a1 + 152));
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      ++v16;
      v15 += 48;
    }
    while (v16 < *(unsigned __int16 *)(a1 + 144));
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)(a1 + 24) + 104))(a3, a4, 1, 0, (char *)&v102 + 2);
  if ((v11 & 0x80000000) == 0
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, void, __int16 *))(*(void *)(a1 + 24) + 184))(a3, a4, HIWORD(v102), 0, &v91) & 0x80000000) == 0&& v91 == 1)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v102), 0, &v103, &v101);
    if ((v11 & 0x80000000) == 0 && v101 >= 2u)
    {
      uint64_t v17 = *(uint64_t **)(*(void *)a1 + 8);
      unint64_t v18 = (const char **)(a1 + 104);
      uint64_t v19 = *(void *)(a1 + 104);
      int v20 = cstdlib_strlen(v103);
      uint64_t v21 = (char *)heap_Realloc(v17, v19, (v20 + 101));
      if (!v21)
      {
        log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v22, v23, v24, v25, v87);
        return 2311069706;
      }
      *(void *)(a1 + 104) = v21;
      cstdlib_strcpy(v21, v103);
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, HIWORD(v102), 1, &v94, &v93);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      BOOL v26 = (int *)(v94 + 12);
      int v27 = *(_DWORD *)(v94 + 12);
      *(_WORD *)(a1 + 112) = 0;
      unsigned int v28 = v93;
      if (v93)
      {
        uint64_t v29 = 0;
        while (1)
        {
          int v30 = *v26;
          v26 += 8;
          if (v30 != v27) {
            break;
          }
          if (v93 == ++v29) {
            goto LABEL_39;
          }
        }
        unsigned int v28 = (unsigned __int16)v29;
      }
LABEL_39:
      HIWORD(v105) = v28;
      uint64_t updated = (*(uint64_t (**)(void, void, int *, void))(*(void *)(a1 + 48) + 112))(*(void *)(a1 + 32), *(void *)(a1 + 40), &v92, 0);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      __src[0] = 0;
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v102), &v102);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      unsigned __int16 v31 = v102;
      if ((_WORD)v102)
      {
        unsigned int v32 = 0;
        int v33 = 0;
        do
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v31, 0, 1, &v96, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v102, 1, 1, &v98, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v102, 2, 1, &v97, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v96 == 5)
          {
            if (v98 <= v32 || (unsigned int v34 = __src[0], v98 >= __src[0]))
            {
              uint64_t v38 = 0;
              int v33 = (unsigned __int16)v102;
            }
            else
            {
              int v35 = v33;
              unsigned int v36 = v97;
              int v88 = v35;
              uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v35, 2, 1, __src, &v100);
              uint64_t v11 = v37;
              if (v36 > v34)
              {
                if ((v37 & 0x80000000) != 0) {
                  return v11;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v102, 1, 1, __src, &v100);
                int v33 = v88;
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
LABEL_56:
                uint64_t v38 = 0;
                goto LABEL_57;
              }
              if ((v37 & 0x80000000) != 0) {
                return v11;
              }
              uint64_t v38 = (unsigned __int16)v102;
              int v33 = v88;
            }
          }
          else
          {
            if ((v96 & 0xFFFFFFFD) != 4) {
              goto LABEL_56;
            }
            uint64_t v38 = 0;
            unsigned int v32 = v98;
            __src[0] = v97;
          }
LABEL_57:
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(a3, a4, (unsigned __int16)v102, &v102);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v38)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a3, a4, v38);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
          }
          unsigned __int16 v31 = v102;
        }
        while ((_WORD)v102);
      }
      uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v102), &v102);
      if ((updated & 0x80000000) != 0) {
        return updated;
      }
      unsigned __int16 v99 = v102;
      unsigned __int16 v39 = v102;
      if (!(_WORD)v102) {
        goto LABEL_81;
      }
      while (1)
      {
        uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v39, 0, 1, &v96, &v101);
        if ((updated & 0x80000000) != 0) {
          return updated;
        }
        uint64_t v40 = *(void *)(a1 + 24);
        if (v96 == 5)
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(v40 + 168))(a3, a4, v99, 1, 1, &v98, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v99, 2, 1, &v97, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, v99, 4, &__s1, &v101);
          if ((updated & 0x80000000) != 0) {
            return updated;
          }
          if (v97 >= v98)
          {
            uint64_t updated = hlp_Normalize(a1, (const char **)(a1 + 104), v103, v98, v97, __s1, a3, a4, (unsigned __int16 *)&v102, v94, (_WORD *)&v105 + 1, &v93, v27);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            unsigned __int16 v99 = v102;
            goto LABEL_78;
          }
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                            + 120))(a3, a4, v99, &v99);
        }
        else
        {
          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(v40 + 120))(a3, a4, v99, &v99);
        }
        if ((updated & 0x80000000) != 0) {
          return updated;
        }
LABEL_78:
        if ((_WORD)v102)
        {
          unsigned __int16 v39 = v99;
          if (v99) {
            continue;
          }
        }
        unsigned int v28 = HIWORD(v105);
LABEL_81:
        int v41 = cstdlib_strlen(*v18);
        unsigned __int16 v42 = v93;
        if (v28 < v93)
        {
          __int16 v43 = (_DWORD *)(v94 + 32 * v28 + 12);
          uint64_t v44 = v93 - (unint64_t)v28;
          do
          {
            *__int16 v43 = v27 + v41;
            v43 += 8;
            --v44;
          }
          while (v44);
          LOWORD(v28) = v42;
        }
        HIWORD(v105) = v28;
        uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 104))(a3, a4, 3, HIWORD(v102), &v102);
        if ((updated & 0x80000000) == 0)
        {
          for (unsigned __int16 i = v102; (_WORD)v102; unsigned __int16 i = v102)
          {
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, i, 0, 1, &v96, &v101);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t v46 = (unsigned __int16)v102;
            if (v96 != 5)
            {
LABEL_127:
              uint64_t v63 = 0;
              goto LABEL_128;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v102, 1, 1, &v98, &v101);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, (unsigned __int16)v102, 2, 1, &v97, &v101);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            unsigned int v47 = v98;
            if (v98 && v47 < (unsigned __int16)cstdlib_strlen(*v18))
            {
              do
              {
                char v48 = *v18;
                int v49 = (*v18)[v98 - 1];
                if (v49 == 32) {
                  break;
                }
                if (v49 == 95) {
                  break;
                }
                unsigned __int16 v50 = ++v98;
              }
              while ((unsigned __int16)cstdlib_strlen(v48) > v50);
            }
            unsigned int v51 = v97;
            if (v97)
            {
              if (v51 >= (unsigned __int16)cstdlib_strlen(*v18)
                || (unsigned int v52 = v97, v52 >= (unsigned __int16)cstdlib_strlen(*v18)))
              {
LABEL_102:
                unsigned int v54 = v97;
              }
              else
              {
                while (1)
                {
                  uint64_t v53 = *v18;
                  unsigned int v54 = v97;
                  int v55 = (*v18)[v97 - 1];
                  if (v55 == 32 || v55 == 95) {
                    break;
                  }
                  ++v97;
                  if ((unsigned __int16)cstdlib_strlen(v53) <= (unsigned __int16)(v54 + 1)) {
                    goto LABEL_102;
                  }
                }
              }
              if (v54
                && v54 < (unsigned __int16)cstdlib_strlen(*v18)
                && (*(unsigned int (**)(void, void, void))(*(void *)(a1 + 72) + 128))(*(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 104) + v97))
              {
                unsigned __int16 v56 = v97;
                LOWORD(v105) = 0;
                int v90 = 0;
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(a3, a4, (unsigned __int16)v102, &v105);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (!(_WORD)v105)
                {
                  int v90 = 2;
LABEL_116:
                  uint64_t v57 = (char *)*v18;
                  unsigned int v58 = v97;
                  unsigned int v59 = cstdlib_strlen(*v18);
                  unsigned int Utf8Symbol = utf8_GetUtf8Symbol(v57, v58, v59, (char *)__src);
                  do
                    unsigned __int16 v61 = v56--;
                  while (v56 && (*v18)[v56] == 32);
                  if (v97 > v61)
                  {
                    size_t v62 = Utf8Symbol;
                    cstdlib_memmove((void *)&(*v18)[v61 + Utf8Symbol], &(*v18)[v61], v97 - (unint64_t)v61);
                    cstdlib_strncpy((char *)&(*v18)[v61], (const char *)__src, v62);
                  }
                  goto LABEL_121;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(a3, a4);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (v90 != 5) {
                  goto LABEL_116;
                }
                uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(a3, a4, (unsigned __int16)v105, 4, &__s1, &v101);
                if ((updated & 0x80000000) != 0) {
                  return updated;
                }
                if (v90 != 5 || !__s1 || cstdlib_strcmp(__s1, "phon")) {
                  goto LABEL_116;
                }
              }
            }
LABEL_121:
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v102, 1, 1, &v98, &v100);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(*(void *)(a1 + 24) + 160))(a3, a4, (unsigned __int16)v102, 2, 1, &v97, &v100);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            uint64_t v46 = (unsigned __int16)v102;
            if (v96 != 5) {
              goto LABEL_127;
            }
            if (v98 == v97) {
              uint64_t v63 = (unsigned __int16)v102;
            }
            else {
              uint64_t v63 = 0;
            }
LABEL_128:
            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)(a1 + 24) + 120))(a3, a4, v46, &v102);
            if ((updated & 0x80000000) != 0) {
              return updated;
            }
            if (v63)
            {
              uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 192))(a3, a4, v63);
              if ((updated & 0x80000000) != 0) {
                return updated;
              }
            }
          }
          if (*(_DWORD *)(a1 + 116) != 1
            || (uint64_t updated = updateTokenDomainLanguageTags((void *)a1, a3, a4, HIWORD(v102), *(const char **)(a1 + 104)),
                (updated & 0x80000000) == 0))
          {
            hlp_AdjustMarkersToWordBoundaries(*(void *)(a1 + 104), v94, v93);
            hlp_AdjustUserTnToWordBoundaries(*(const char **)(a1 + 104), a3, a4, *(void *)(a1 + 24));
            if ((unsigned __int16)cstdlib_strlen(*(const char **)(a1 + 104)))
            {
              __int16 v64 = 0;
              int v65 = 1;
              unsigned __int16 v66 = 1;
              while (1)
              {
                int v67 = *v18;
                uint64_t v68 = v65 - 1;
                int v69 = (*v18)[v68];
                if (v69 == 44)
                {
                  if (v67[v66] == 44)
                  {
                    v67[v66] = 32;
                    LOBYTE(v69) = (*v18)[v68];
                  }
                  else
                  {
                    LOBYTE(v69) = 44;
                  }
                }
                if (cstdlib_strchr(" _", (char)v69)
                  && (v66 == 1 || v66 == (unsigned __int16)cstdlib_strlen(*v18) || cstdlib_strchr(" _", (*v18)[v66])))
                {
                  if (v66 != (unsigned __int16)cstdlib_strlen(*v18))
                  {
                    uint64_t v70 = *v18;
                    if ((*v18)[v68] == 32 && v70[v66] == 95)
                    {
                      v70[v66] = 32;
                      uint64_t v70 = *v18;
                    }
                    uint64_t v71 = &v70[v66];
                    size_t v72 = cstdlib_strlen(v70);
                    cstdlib_memmove((void *)(v71 - 1), v71, v72 - v66);
                  }
                  uint64_t v73 = *(const char **)(a1 + 104);
                  v73[cstdlib_strlen(v73) - 1] = 0;
                  uint64_t updated = hlp_UpdateLingDBTokensForDeletion(a3, a4, *(void *)(a1 + 24), (unsigned __int16)v68);
                  if ((updated & 0x80000000) != 0) {
                    return updated;
                  }
                  hlp_UpdateMarkersForDeletion(v94, v93, (unsigned __int16)v68);
                  --v64;
                }
                else
                {
                  ++v66;
                }
                int v65 = v66;
                if (v66 > (unsigned __int16)cstdlib_strlen(*v18)) {
                  goto LABEL_155;
                }
              }
            }
            __int16 v64 = 0;
LABEL_155:
            __int16 v74 = *(_WORD *)(a1 + 112) + v64;
            *(_WORD *)(a1 + 112) = v74;
            v92 += v74;
            uint64_t updated = (*(uint64_t (**)(void, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 32), *(void *)(a1 + 40));
            if ((updated & 0x80000000) == 0)
            {
              int v75 = cstdlib_strlen(*(const char **)(a1 + 104));
              *(_DWORD *)(v94 + 16) = v75;
              log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Space normalization: |%s|", v76, v77, v78, *(void *)(a1 + 104));
              hlp_AdjustPuncMarkers(*(const char **)(a1 + 104), v94, v93);
              uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void, __int16 *))(*(void *)(a1 + 24) + 160);
              uint64_t v80 = HIWORD(v102);
              __int16 v81 = cstdlib_strlen(*(const char **)(a1 + 104));
              uint64_t v11 = v79(a3, a4, v80, 0, (unsigned __int16)(v81 + 1), *(void *)(a1 + 104), &v100);
              if ((v11 & 0x80000000) == 0)
              {
                __int16 v91 = 0;
                if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(*(void *)(a1 + 24)
                                                                                              + 152))(a3, a4, 3, HIWORD(v102), &v91) & 0x80000000) == 0)
                {
                  if (v91)
                  {
                    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24)
                                                                                              + 104))(a3, a4, 3, HIWORD(v102), &v102);
                    if ((v11 & 0x80000000) == 0)
                    {
                      unsigned __int16 v82 = v102;
                      if ((_WORD)v102)
                      {
                        uint64_t v83 = 0;
                        while (1)
                        {
                          uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(a3, a4, v82, 0, 1, &v96, &v101);
                          if ((updated & 0x80000000) != 0) {
                            break;
                          }
                          if (v96 == 4)
                          {
                            uint64_t updated = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a1 + 24) + 192))(a3, a4, (unsigned __int16)v102);
                            if ((updated & 0x80000000) != 0) {
                              return updated;
                            }
                            LOWORD(v102) = v83;
                            uint64_t v84 = v83;
                          }
                          else
                          {
                            uint64_t v84 = (unsigned __int16)v102;
                          }
                          uint64_t v85 = *(void *)(a1 + 24);
                          if ((_WORD)v84)
                          {
                            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(v85 + 120))(a3, a4, (unsigned __int16)v84, &v102);
                            uint64_t v83 = v84;
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                          }
                          else
                          {
                            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(v85 + 104))(a3, a4, 3, HIWORD(v102), &v102);
                            if ((v11 & 0x80000000) != 0) {
                              return v11;
                            }
                          }
                          unsigned __int16 v82 = v102;
                          if (!(_WORD)v102) {
                            return v11;
                          }
                        }
                        return updated;
                      }
                    }
                  }
                }
              }
              return v11;
            }
          }
        }
        return updated;
      }
    }
  }
  return v11;
}

uint64_t hlp_Normalize(uint64_t a1, const char **a2, const char *a3, unsigned int a4, unsigned int a5, char *a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9, uint64_t a10, _WORD *a11, unsigned __int16 *a12, int a13)
{
  unsigned int v16 = a4;
  uint64_t v263 = *MEMORY[0x263EF8340];
  unsigned __int16 v261 = 0;
  unsigned __int16 v260 = a4;
  unsigned __int16 v259 = a4;
  uint64_t v258 = 0;
  int v257 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  uint64_t v254 = 0;
  unsigned __int16 v253 = 0;
  unsigned __int16 v252 = *a9;
  unsigned __int16 v251 = a4;
  __s = 0;
  unsigned __int16 v19 = cstdlib_strlen(*a2);
  uint64_t v249 = 0;
  unsigned int v244 = a5;
  unsigned int v20 = a5 - v16;
  int v247 = 0;
  int v248 = 0;
  int v246 = 0;
  cstdlib_strcpy(__dst, "disambiguate_punctuation");
  unsigned __int16 v21 = cstdlib_strlen(__dst);
  uint64_t v22 = (int)(v20 + 129);
  uint64_t v23 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), v22);
  if (!v23) {
    goto LABEL_109;
  }
  *(void *)(a1 + 80) = v23;
  cstdlib_strcpy(v23, "");
  unsigned int v28 = (char *)heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v22);
  if (!v28) {
    goto LABEL_109;
  }
  *(void *)(a1 + 88) = v28;
  cstdlib_strcpy(v28, "");
  uint64_t v29 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v22);
  if (!v29) {
    goto LABEL_109;
  }
  uint64_t v242 = a8;
  uint64_t v243 = a7;
  unsigned __int16 v235 = v19;
  int v236 = a2;
  uint64_t v30 = 0;
  *(void *)(a1 + 96) = v29;
  unsigned __int16 v31 = *a9;
  LOBYTE(v238) = 1;
  if (*a9)
  {
    unsigned __int16 v32 = v16;
    LOWORD(v237) = 0;
    int v33 = 0;
    unsigned int v34 = v244;
    if (v260 < v244)
    {
      int v33 = 0;
      int v237 = 0;
      uint64_t v234 = (unsigned __int16)v20 + 1;
      uint64_t v238 = 1;
      unsigned __int16 v32 = v16;
      do
      {
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, v31, 0, 1, &v257, &v261);
        if ((v35 & 0x80000000) != 0) {
          return v35;
        }
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, *a9, 1, 1, &v260, &v261);
        if ((v30 & 0x80000000) != 0) {
          return v30;
        }
        unsigned int v36 = v260;
        if (v260 < v34 && (v257 & 0xFFFFFFFD) == 4)
        {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, *a9, 2, 1, &v259, &v261);
          if (v257 == 6)
          {
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v243, v242, *a9, 4, &v258, &v261);
            if ((v35 & 0x80000000) != 0) {
              return v35;
            }
          }
          else
          {
            uint64_t v258 = "_DT_";
          }
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v243, v242, *a9, 3, &__s, &v261);
          if ((v30 & 0x80000000) != 0) {
            return v30;
          }
          int v37 = cstdlib_strlen(__s);
          int v33 = v33 + v37 - v259 + v260;
          uint64_t v38 = cstdlib_strstr(__s, "▲");
          if (v38)
          {
            __int16 v43 = v38;
            do
            {
              int v45 = v43[3];
              uint64_t v44 = v43 + 3;
              if (!v45) {
                goto LABEL_249;
              }
              int v46 = v33 - 3;
              while (cstdlib_strncmp(v44, "▼", 3uLL))
              {
                int v47 = *++v44;
                --v46;
                if (!v47) {
                  goto LABEL_249;
                }
              }
              if (!*v44) {
                goto LABEL_249;
              }
              int v33 = v46 - 3;
              __s = v44 + 3;
              __int16 v43 = cstdlib_strstr(v44 + 3, "▲");
            }
            while (v43);
            unsigned __int16 v32 = v251;
          }
          cstdlib_strncat(*(char **)(a1 + 80), &(*v236)[v32 + *(__int16 *)(a1 + 112)], v259 - (unint64_t)v32);
          if (v260 > v32)
          {
            for (int i = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)&(*v236)[v32 + *(__int16 *)(a1 + 112)], v260 - v32); i; --i)
              cstdlib_strcat(*(char **)(a1 + 88), " ");
          }
          unsigned __int16 v49 = Utf8_LengthInUtf8chars((unint64_t)&(*v236)[v260 + *(__int16 *)(a1 + 112)], v259 - v260);
          if ((__int16)v49 >= (__int16)(2 * cstdlib_strlen(v258) - 2))
          {
            cstdlib_strcat(*(char **)(a1 + 88), "X");
            unsigned int v52 = *(char **)(a1 + 88);
            uint64_t v53 = v258 + 1;
            size_t v54 = cstdlib_strlen(v258);
            cstdlib_strncat(v52, v53, v54 - 2);
            uint64_t v55 = v49 + 2;
            if (v55 != 2 * cstdlib_strlen(v258))
            {
              int v56 = 0;
              do
              {
                cstdlib_strcat(*(char **)(a1 + 88), "~");
                ++v56;
              }
              while (v55 - 2 * cstdlib_strlen(v258) > (unsigned __int16)v56);
            }
          }
          else
          {
            uint64_t v233 = -2 - v49;
            if (v233 + 2 * cstdlib_strlen(v258))
            {
              int v57 = 0;
              uint64_t v50 = v238;
              int v51 = v237;
              while (1)
              {
                int v58 = v51;
                if (v50 << 7 == (unsigned __int16)v51)
                {
                  uint64_t v59 = (v50 + 1);
                  uint64_t v60 = v234 + ((unint64_t)(v50 + 1) << 7);
                  uint64_t v61 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 80), v60);
                  if (!v61) {
                    goto LABEL_109;
                  }
                  *(void *)(a1 + 80) = v61;
                  uint64_t v62 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 88), v60);
                  if (!v62) {
                    goto LABEL_109;
                  }
                  *(void *)(a1 + 88) = v62;
                  uint64_t v63 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 96), v60);
                  if (!v63) {
                    goto LABEL_109;
                  }
                  *(void *)(a1 + 96) = v63;
                  uint64_t v50 = v59;
                }
                cstdlib_strcat(*(char **)(a1 + 80), "~");
                ++v57;
                int v51 = v58 + 1;
                if (v233 + 2 * cstdlib_strlen(v258) <= (unsigned __int16)v57) {
                  goto LABEL_49;
                }
              }
            }
            uint64_t v50 = v238;
            int v51 = v237;
LABEL_49:
            int v237 = v51;
            uint64_t v238 = v50;
            cstdlib_strcat(*(char **)(a1 + 88), "X");
            __int16 v64 = *(char **)(a1 + 88);
            int v65 = v258 + 1;
            size_t v66 = cstdlib_strlen(v258);
            cstdlib_strncat(v64, v65, v66 - 2);
          }
          cstdlib_strcat(*(char **)(a1 + 88), "Y");
          int v67 = *(char **)(a1 + 88);
          uint64_t v68 = v258 + 1;
          size_t v69 = cstdlib_strlen(v258);
          cstdlib_strncat(v67, v68, v69 - 2);
          unsigned __int16 v32 = v259;
          unsigned __int16 v251 = v259;
          unsigned int v36 = v260;
          unsigned int v34 = v244;
        }
        if (v36 < v34)
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(v243, v242, *a9, a9);
          if ((v30 & 0x80000000) != 0) {
            return v30;
          }
          unsigned int v36 = v260;
        }
        unsigned __int16 v31 = *a9;
      }
      while (*a9 && v36 < v34);
    }
  }
  else
  {
    unsigned __int16 v32 = v16;
    LOWORD(v237) = 0;
    int v33 = 0;
    unsigned int v34 = v244;
  }
  BOOL v103 = v34 >= v32;
  int v70 = v34 - v32;
  if (v70 != 0 && v103)
  {
    cstdlib_strncat(*(char **)(a1 + 80), &(*v236)[v32 + *(__int16 *)(a1 + 112)], v70);
    for (int j = (unsigned __int16)Utf8_LengthInUtf8chars((unint64_t)&(*v236)[v32 + *(__int16 *)(a1 + 112)], v70);
          j;
          --j)
    {
      cstdlib_strcat(*(char **)(a1 + 88), " ");
    }
  }
  if (cstdlib_strstr(a6, "spell"))
  {
    int v72 = (unsigned __int16)cstdlib_strlen(*(const char **)(a1 + 80));
    if (v72)
    {
      do
      {
        uint64_t v73 = *(void *)(a1 + 80);
        uint64_t v74 = (v72 - 1);
        if (*(unsigned char *)(v73 + v74) != 32) {
          break;
        }
        *(unsigned char *)(v73 + v74) = 0;
        *(unsigned char *)(*(void *)(a1 + 88) + (unsigned __int16)Utf8_LengthInUtf8chars(*(void *)(a1 + 80), v74)) = 0;
        --v33;
        int v72 = (unsigned __int16)v74;
      }
      while ((_WORD)v74);
    }
  }
  if (v238 << 7 < (unsigned __int16)v237) {
    goto LABEL_61;
  }
  uint64_t v77 = *(const char **)(a1 + 80);
  int v78 = cstdlib_strlen(v77);
  unsigned __int16 v79 = Utf8_LengthInUtf8chars((unint64_t)v77, v78);
  unsigned __int16 v80 = v79;
  if (v79)
  {
    uint64_t v81 = 0;
    do
      *(unsigned char *)(*(void *)(a1 + 96) + v81++) = 1;
    while (v79 != v81);
  }
  unsigned __int16 v239 = v21;
  if ((unsigned __int16)cstdlib_strlen(*(const char **)(a1 + 88)))
  {
    __int16 v82 = 0;
    __int16 v83 = 0;
    uint64_t v84 = 0;
    do
    {
      uint64_t v85 = *(const char **)(a1 + 88);
      int v86 = v85[v84];
      if (v86 == 88) {
        ++v83;
      }
      if (v86 == 89) {
        ++v82;
      }
      ++v84;
    }
    while ((unsigned __int16)cstdlib_strlen(v85) > (unsigned __int16)v84);
  }
  else
  {
    LOWORD(v84) = 0;
    __int16 v83 = 0;
    __int16 v82 = 0;
  }
  unsigned __int16 v251 = v84;
  if (*(_DWORD *)(a1 + 124))
  {
    if (!v16)
    {
      unsigned int v87 = *(unsigned char **)(a1 + 88);
      if (*v87 == 32) {
        *unsigned int v87 = 40;
      }
    }
    if (v244 == (unsigned __int16)cstdlib_strlen(a3))
    {
      int v88 = *(const char **)(a1 + 88);
      if (v88[(unsigned __int16)cstdlib_strlen(v88) - 1] == 32)
      {
        uint64_t v89 = *(const char **)(a1 + 88);
        v89[(unsigned __int16)cstdlib_strlen(v89) - 1] = 41;
      }
    }
  }
  if (cstdlib_strcmp(a6, "internal-nuance-system-norm")
    && cstdlib_strcmp(a6, "phon")
    && (!*(_DWORD *)(a1 + 120) || !cstdlib_strcmp(a6, "spell") || ToNorm(*(unsigned __int8 **)(a1 + 80))))
  {
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s L1: %s", v90, v91, v92, (uint64_t)__dst);
    uint64_t v199 = *(uint64_t (**)(void, void, void, const char *, void))(*(void *)(a1 + 48) + 120);
    uint64_t v200 = *(const char **)(a1 + 80);
    unsigned __int16 v201 = cstdlib_strlen(v200);
    uint64_t v35 = v199(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, v200, v201);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s L2: %s", v202, v203, v204, (uint64_t)__dst);
    unsigned __int16 v205 = *(uint64_t (**)(void, void, uint64_t, const char *, void))(*(void *)(a1 + 48) + 120);
    uint64_t v206 = *(const char **)(a1 + 88);
    unsigned __int16 v207 = cstdlib_strlen(v206);
    uint64_t v35 = v205(*(void *)(a1 + 32), *(void *)(a1 + 40), 1, v206, v207);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    uint64_t v35 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 96), v80);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    if (cstdlib_strcmp(a6, "normal") && cstdlib_strlen(a6) + v239 + 2 <= 0x7F)
    {
      cstdlib_strcat(__dst, "_");
      cstdlib_strcat(__dst, a6);
    }
    if (((*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 48) + 80))(*(void *)(a1 + 32), *(void *)(a1 + 40), __dst) & 0x80000000) != 0)
    {
      __dst[v239] = 0;
      uint64_t v35 = (*(uint64_t (**)(void, void, char *))(*(void *)(a1 + 48) + 80))(*(void *)(a1 + 32), *(void *)(a1 + 40), __dst);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
    }
    uint64_t v35 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 48) + 128))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, &v256, &v253);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    if (cstdlib_strstr(a6, "spell"))
    {
      uint64_t v211 = v253++;
      v256[v211] = 32;
    }
    v256[v253] = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s O1: %s", v208, v209, v210, (uint64_t)__dst);
    uint64_t v35 = (*(uint64_t (**)(void, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 48) + 128))(*(void *)(a1 + 32), *(void *)(a1 + 40), 1, &v255, &v253);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    if (cstdlib_strstr(a6, "spell"))
    {
      uint64_t v212 = v253++;
      v255[v212] = 32;
    }
    v255[v253] = 0;
    unint64_t v213 = (unint64_t)v256;
    int v214 = cstdlib_strlen(v256);
    LOWORD(v213) = Utf8_LengthInUtf8chars(v213, v214);
    unsigned int v215 = v255;
    int v216 = cstdlib_strlen(v255);
    __int16 v217 = Utf8_LengthInUtf8chars((unint64_t)v215, v216) ^ v213;
    uint64_t v75 = *(void *)(*(void *)a1 + 32);
    if (v217)
    {
      uint64_t v30 = 2311069696;
      goto LABEL_62;
    }
    log_OutText(v75, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s O2: %s", v40, v41, v42, (uint64_t)__dst);
    if ((unsigned __int16)cstdlib_strlen(v255))
    {
      __int16 v219 = 0;
      uint64_t v220 = 0;
      do
      {
        if (v255[v220] == 88) {
          ++v219;
        }
        ++v220;
      }
      while ((unsigned __int16)cstdlib_strlen(v255) > (unsigned __int16)v220);
    }
    else
    {
      __int16 v219 = 0;
    }
    if (v219 != v83) {
      goto LABEL_61;
    }
    if ((unsigned __int16)cstdlib_strlen(v255))
    {
      __int16 v221 = 0;
      uint64_t v222 = 0;
      do
      {
        if (v255[v222] == 89) {
          ++v221;
        }
        ++v222;
      }
      while ((unsigned __int16)cstdlib_strlen(v255) > (unsigned __int16)v222);
    }
    else
    {
      LOWORD(v222) = 0;
      __int16 v221 = 0;
    }
    unsigned __int16 v251 = v222;
    if (v221 != v82)
    {
LABEL_61:
      uint64_t v30 = 2311069696;
      uint64_t v75 = *(void *)(*(void *)a1 + 32);
LABEL_62:
      uint64_t v76 = 33002;
      goto LABEL_250;
    }
    uint64_t v30 = (*(uint64_t (**)(void, void, unsigned __int8 **, unsigned __int16 *))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40), &v254, &v253);
    if ((v30 & 0x80000000) != 0) {
      return v30;
    }
    if (cstdlib_strstr(a6, "spell"))
    {
      uint64_t v223 = v253++;
      v254[v223] = 0;
    }
  }
  else
  {
    unsigned __int16 v93 = *(char **)(a1 + 80);
    uint64_t v255 = *(char **)(a1 + 88);
    uint64_t v256 = v93;
    uint64_t v254 = *(unsigned __int8 **)(a1 + 96);
  }
  uint64_t v94 = *(unsigned char **)(a1 + 80);
  uint64_t v95 = (uint64_t *)v236;
  if (*v94 != 32)
  {
    uint64_t v96 = 0;
    int v97 = 0;
    while (v256[v96] == 32)
    {
      uint64_t v96 = ++v97;
      if (v94[v97] == 32) {
        goto LABEL_94;
      }
    }
    LODWORD(v96) = v97;
LABEL_94:
    if (v96)
    {
      unint64_t v98 = *a12;
      if (v98 >= 2)
      {
        unsigned int v99 = *(_DWORD *)(a10 + 12) + v16 + *(__int16 *)(a1 + 112);
        unsigned int v100 = v99 + v96;
        unsigned __int16 v101 = (unsigned int *)(a10 + 44);
        unint64_t v102 = v98 - 1;
        do
        {
          BOOL v103 = v99 > *v101 || *v101 >= v100;
          if (!v103) {
            *unsigned __int16 v101 = v100;
          }
          v101 += 8;
          --v102;
        }
        while (v102);
      }
    }
  }
  int v104 = v33 + cstdlib_strlen(v256);
  int v105 = (__int16)(v104 - cstdlib_strlen(*(const char **)(a1 + 80)));
  if (v105 <= 0)
  {
    if (v105 < 0)
    {
      for (unsigned __int16 k = *(_WORD *)(a1 + 112) + v244; k <= (unsigned __int16)cstdlib_strlen(*v236); ++k)
        (*v236)[k + v105] = (*v236)[k];
    }
    goto LABEL_112;
  }
  uint64_t v106 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), (uint64_t)*v236, (unsigned __int16)(v235 + v105 + 101));
  if (!v106)
  {
LABEL_109:
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v24, v25, v26, v27, v224);
    return 2311069706;
  }
  *int v236 = (const char *)v106;
  cstdlib_memset((void *)(v106 + v235), 0, (unsigned __int16)(v105 + 101));
  int v107 = cstdlib_strlen(*v236);
  if ((int)(*(__int16 *)(a1 + 112) + v244) <= (unsigned __int16)v107)
  {
    unsigned int v108 = (unsigned __int16)v107;
    do
    {
      (*v236)[v108 + (unint64_t)v105] = (*v236)[(unsigned __int16)v107--];
      unsigned int v108 = (unsigned __int16)v107;
    }
    while ((int)(*(__int16 *)(a1 + 112) + v244) <= (unsigned __int16)v107);
  }
LABEL_112:
  unsigned int v110 = 0;
  uint64_t v111 = 0;
  unsigned __int16 v260 = v16;
  unsigned __int16 v251 = 0;
  LOWORD(v246) = 0;
  unsigned int v112 = *(unsigned __int16 *)(a1 + 112) + v16;
  unsigned __int16 v113 = v252;
  if (!v252 || v244 <= v16)
  {
    LOWORD(v231) = 0;
    LODWORD(v114) = 0;
    goto LABEL_252;
  }
  uint64_t v114 = 0;
  int v231 = 0;
  uint64_t v226 = a10 + 12;
  unsigned int v115 = v244;
  while (1)
  {
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, v113, 0, 1, &v257, &v261);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    if (v257 != 7)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, v252, 1, 1, &v260, &v261);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, v252, 2, 1, &v259, &v261);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
    }
    if (v260 >= v115) {
      goto LABEL_245;
    }
    if ((v257 & 0xFFFFFFFD) == 4) {
      break;
    }
    if (v257 == 5)
    {
      __int16 v119 = *(_WORD *)(a1 + 112);
      HIWORD(v248) = v119 + v260;
      LOWORD(v248) = v119 + v105 + v259;
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                  + 160))(v243, v242, v252, 1, 1, (char *)&v248 + 2, (char *)&v247 + 2);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                                 + 160))(v243, v242, v252, 2, 1, &v248, (char *)&v247 + 2);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
    }
LABEL_245:
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int16 *))(*(void *)(a1 + 24) + 120))(v243, v242, v252, &v252);
    if ((v30 & 0x80000000) != 0) {
      return v30;
    }
    unsigned __int16 v113 = v252;
    if (!v252 || v260 >= v115)
    {
      unsigned int v110 = v251;
      uint64_t v111 = (unsigned __int16)v246;
LABEL_252:
      int v186 = v114;
      do
        unsigned __int16 v187 = v186;
      while (v255[(unsigned __int16)v186++]);
      hlp_updateBytePositions(v187, (unsigned __int8 *)v256, v254, *(unsigned __int8 **)(a1 + 80), &v251, &v246);
      if ((int)(v251 - v110 + (unsigned __int16)v112) <= v105 + v235 + 100)
      {
        __int16 v230 = v105;
        cstdlib_memcpy((void *)(*v95 + (unsigned __int16)v112), &v256[v110], v251 - (unint64_t)v110);
        log_OutText(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Normalizing to: |%s|", v189, v190, v191, *v95);
        unsigned int v192 = (unsigned __int16)*a11;
        if (v192 < *a12)
        {
          uint64_t v193 = (unsigned __int16)v114;
          int v194 = (unsigned __int16)(v187 - v114);
          int v195 = a13 + (unsigned __int16)v16;
          do
          {
            uint64_t v196 = a10 + 32 * (unsigned __int16)v192;
            int v198 = *(_DWORD *)(v196 + 12);
            long long v197 = (_DWORD *)(v196 + 12);
            if ((int)v244 < (__int16)(v198 - a13)) {
              break;
            }
            hlp_updateMarkerPosition(*(void *)(a1 + 80) + v111, (uint64_t)&v254[v193], (unsigned __int8 *)&v256[v110], v195, v194, *(__int16 *)(a1 + 112) + (__int16)v231, v197);
            LOWORD(v192) = *a11 + 1;
            *a11 = v192;
          }
          while (*a12 > (unsigned __int16)v192);
        }
        *(_WORD *)(a1 + 112) += v230;
        return v30;
      }
      goto LABEL_61;
    }
  }
  uint64_t v116 = v251;
  uint64_t v117 = (unsigned __int16)v246;
  for (uint64_t m = v114; v255[(unsigned __int16)m] && v255[(unsigned __int16)m] != 88; uint64_t m = (m + 1))
    ;
  int v229 = v105;
  hlp_updateBytePositions((unsigned __int16)m, (unsigned __int8 *)v256, v254, *(unsigned __int8 **)(a1 + 80), &v251, &v246);
  unsigned int v227 = v112;
  uint64_t v120 = (void *)(*v95 + (unsigned __int16)v112);
  int v121 = v251;
  cstdlib_memcpy(v120, &v256[v116], v251 - v116);
  unsigned int v122 = (unsigned __int16)*a11;
  if (v122 < *a12)
  {
    uint64_t v123 = (unsigned __int16)v114;
    unsigned __int16 v124 = m - v114;
    do
    {
      uint64_t v125 = a10 + 32 * (unsigned __int16)v122;
      int v127 = *(_DWORD *)(v125 + 12);
      uint64_t v126 = (_DWORD *)(v125 + 12);
      if (v260 <= (__int16)(v127 - a13)) {
        break;
      }
      hlp_updateMarkerPosition(*(void *)(a1 + 80) + v117, (uint64_t)&v254[v123], (unsigned __int8 *)&v256[v116], a13 + (unsigned __int16)v16, v124, *(__int16 *)(a1 + 112) + (__int16)v231, v126);
      LOWORD(v122) = *a11 + 1;
      *a11 = v122;
    }
    while (*a12 > (unsigned __int16)v122);
  }
  unsigned __int16 v128 = 0;
  int v228 = v121 - v116 + v227;
  int v129 = v16 + v231 + v121 - v116 - v260;
  unsigned int v16 = v259;
  while (2)
  {
    int v130 = v255[(unsigned __int16)m];
    if (v130 == 88)
    {
      unsigned __int16 v128 = m;
LABEL_139:
      uint64_t m = (m + 1);
      continue;
    }
    break;
  }
  if (v255[(unsigned __int16)m] && v130 != 89) {
    goto LABEL_139;
  }
  int v131 = 2 * (unsigned __int16)m;
  if (v130 != 89) {
    int v131 = 0;
  }
  int v132 = v131 - v128;
  uint64_t v114 = m;
  uint64_t v95 = (uint64_t *)v236;
  uint64_t v133 = a6;
  do
  {
    if (v130 == 41 && *(_DWORD *)(a1 + 124)) {
      break;
    }
    if (!v130) {
      break;
    }
    if (v130 == 32) {
      break;
    }
    if (v130 == 126) {
      break;
    }
    if (v132 == (unsigned __int16)v114) {
      break;
    }
    uint64_t v114 = (v114 + 1);
    int v130 = v255[(unsigned __int16)v114];
  }
  while (v130 != 88);
  int v232 = v129;
  hlp_updateBytePositions((unsigned __int16)v114, (unsigned __int8 *)v256, v254, *(unsigned __int8 **)(a1 + 80), &v251, &v246);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(*(void *)(a1 + 24)
                                                                                                  + 176))(v243, v242, v252, 3, &__s, &v261);
  if ((v35 & 0x80000000) != 0) {
    return v35;
  }
  LOWORD(v247) = 0;
  HIWORD(v246) = 0;
  if (v257 == 6
    && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 24) + 184))(v243, v242, v252, 5, &v247) & 0x80000000) == 0&& (unsigned __int16)v247 == 1)
  {
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, char *))(*(void *)(a1 + 24) + 176))(v243, v242, v252, 5, &v249, (char *)&v246 + 2);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
  }
  unsigned int v134 = cstdlib_strstr(__s, "▲");
  if (!v134)
  {
LABEL_204:
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v243, v242, v252, 0, 1, &v257, &v261);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    LOWORD(v247) = 0;
    uint64_t v158 = v243;
    if (v257 == 6
      && ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)(a1 + 24) + 184))(v243, v242, v252, 5, &v247) & 0x80000000) == 0&& (unsigned __int16)v247 == 1)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, unsigned __int16 *))(*(void *)(a1 + 24) + 176))(v243, v242, v252, 5, &v249, &v261);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      uint64_t v159 = cstdlib_strchr((char *)&a3[v260], 32);
      uint64_t v160 = 0;
      if (v159)
      {
        uint64_t v158 = v243;
        int v161 = v232;
        if (v261 >= 2u)
        {
          uint64_t v160 = 0;
          do
          {
            unint64_t v162 = (unsigned __int16)*a11;
            if (v162 < *a12)
            {
              int64_t v163 = &v159[v260] - &a3[v260];
              uint64_t v164 = v249;
              int v165 = a13 + (__int16)v232 + v260;
              uint64_t v166 = (_WORD *)(v226 + 32 * v162);
              do
              {
                if (v163 <= (__int16)(*v166 - a13)) {
                  break;
                }
                *(_DWORD *)uint64_t v166 = v165 + *(__int16 *)(a1 + 112) + *(unsigned __int16 *)(v164 + 2 * v160);
                v166 += 16;
                *a11 = ++v162;
              }
              while (v162 < *a12);
            }
            uint64_t v167 = v159 - 1;
            do
              int v168 = *++v167;
            while (v168 == 32);
            uint64_t v159 = cstdlib_strchr(v167, 32);
            ++v160;
          }
          while (v159 && v261 - 1 > (unsigned __int16)v160);
        }
      }
      else
      {
        uint64_t v158 = v243;
        int v161 = v232;
      }
      unint64_t v176 = (unsigned __int16)*a11;
      if (v176 < *a12)
      {
        int v177 = v259;
        uint64_t v178 = v249;
        int v179 = a13 + (__int16)v161 + v260;
        uint64_t v180 = (_WORD *)(v226 + 32 * v176);
        do
        {
          if (v177 <= (__int16)(*v180 - a13)) {
            break;
          }
          *(_DWORD *)uint64_t v180 = v179 + *(__int16 *)(a1 + 112) + *(unsigned __int16 *)(v178 + 2 * v160);
          v180 += 16;
          *a11 = ++v176;
        }
        while (v176 < *a12);
      }
    }
    else if (cstdlib_strcmp(v133, "prompt") && cstdlib_strcmp(v133, "internal-nuance-system-norm"))
    {
      unint64_t v169 = (unsigned __int16)*a11;
      int v161 = v232;
      if (v169 < *a12)
      {
        int v170 = v259;
        int v171 = a13 + (__int16)v232 + v260;
        uint64_t v172 = (_WORD *)(v226 + 32 * v169);
        do
        {
          if (v170 <= (__int16)(*v172 - a13)) {
            break;
          }
          *(_DWORD *)uint64_t v172 = v171 + *(__int16 *)(a1 + 112);
          v172 += 16;
          *a11 = ++v169;
        }
        while (v169 < *a12);
      }
    }
    else
    {
      unint64_t v173 = (unsigned __int16)*a11;
      int v161 = v232;
      if (v173 < *a12)
      {
        unsigned int v174 = v259;
        uint64_t v175 = (_DWORD *)(v226 + 32 * v173);
        do
        {
          if (v174 <= (unsigned __int16)(*v175 - a13)) {
            break;
          }
          *v175 += (__int16)v232 + *(__int16 *)(a1 + 112);
          v175 += 8;
          *a11 = ++v173;
        }
        while (v173 < *a12);
      }
    }
    uint64_t v181 = (void *)(*v95 + (unsigned __int16)v228);
    uint64_t v182 = __s;
    size_t v183 = cstdlib_strlen(__s);
    cstdlib_memcpy(v181, v182, v183);
    int v184 = cstdlib_strlen(__s);
    if (v257 == 6) {
      HIWORD(v248) = v260 + v161 + *(_WORD *)(a1 + 112);
    }
    unsigned int v112 = v228 + v184;
    int v185 = v161 + cstdlib_strlen(__s);
    int v231 = v185 - v259 + v260;
    unsigned int v115 = v244;
    if (v257 == 6)
    {
      LOWORD(v248) = v185 + v260 + *(_WORD *)(a1 + 112);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                  + 160))(v158, v242, v252, 1, 1, (char *)&v248 + 2, (char *)&v247 + 2);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                                 + 160))(v158, v242, v252, 2, 1, &v248, (char *)&v247 + 2);
      int v105 = v229;
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
    }
    else
    {
      int v105 = v229;
    }
    goto LABEL_245;
  }
  uint64_t v135 = v134;
  char v225 = 0;
  while (1)
  {
    int v245 = 0;
    cstdlib_memset(v135, 0, 3uLL);
    if (!v135[3]) {
      break;
    }
    uint64_t v136 = 0;
    while (1)
    {
      uint64_t v137 = &v135[v136];
      if (!cstdlib_strncmp(&v135[v136 + 3], "▼", 3uLL)) {
        break;
      }
      ++v136;
      if (!v137[4]) {
        goto LABEL_249;
      }
    }
    int v139 = v137[3];
    uint64_t v138 = v137 + 3;
    if (!v139) {
      break;
    }
    cstdlib_memset(v138, 0, 3uLL);
    unsigned __int16 v140 = HIWORD(v246);
    if (HIWORD(v246))
    {
      unint64_t v141 = 0;
      uint64_t v142 = v249;
      uint64_t v143 = v135 - __s + v136 + 3;
      do
      {
        if (v142)
        {
          uint64_t v144 = *(unsigned __int16 *)(v142 + 2 * v141);
          if (v143 < v144)
          {
            *(_WORD *)(v142 + 2 * v141) = v144 + -6 - v136;
            unsigned __int16 v140 = HIWORD(v246);
          }
        }
        ++v141;
      }
      while (v141 < v140);
    }
    LOWORD(v245) = v252;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v243, v242);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    unsigned __int16 v145 = v245;
    if (HIWORD(v245) == v260 && (unsigned __int16)v245 != 0)
    {
      uint64_t v149 = v243;
      while (1)
      {
        unsigned __int16 v147 = v145;
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v149, v242, v145, &v245);
        if ((v35 & 0x80000000) != 0) {
          return v35;
        }
        if (!(_WORD)v245) {
          goto LABEL_176;
        }
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v243, v242);
        if ((v35 & 0x80000000) != 0) {
          return v35;
        }
        unsigned __int16 v145 = v245;
        BOOL v150 = HIWORD(v245) != v260 || (unsigned __int16)v245 == 0;
        uint64_t v149 = v243;
        if (v150) {
          goto LABEL_177;
        }
      }
    }
    unsigned __int16 v147 = 0;
LABEL_176:
    uint64_t v149 = v243;
LABEL_177:
    LOWORD(v245) = v147;
    unsigned __int16 v148 = v147;
    if (v225)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v149, v242, v147, &v245);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      unsigned __int16 v148 = v245;
      uint64_t v149 = v243;
    }
    if (v148)
    {
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, unsigned __int16 *))(*(void *)(a1 + 24) + 168))(v149, v242, v148, 0, 1, &v257, &v261);
      if ((v35 & 0x80000000) != 0) {
        return v35;
      }
      while ((_WORD)v245)
      {
        uint64_t v149 = v243;
        if (v257 != 7) {
          goto LABEL_198;
        }
        unsigned __int16 v147 = v245;
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 120))(v243, v242, (unsigned __int16)v245, &v245);
        if ((v35 & 0x80000000) != 0) {
          return v35;
        }
        if (!(_WORD)v245) {
          break;
        }
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 168))(v243, v242);
        if ((v35 & 0x80000000) != 0) {
          return v35;
        }
      }
      uint64_t v149 = v243;
    }
LABEL_198:
    LOWORD(v245) = v147;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)(a1 + 24) + 80))(v149, v242, v147, &v245);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    int v257 = 7;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(*(void *)(a1 + 24)
                                                                                              + 160))(v149, v242, (unsigned __int16)v245, 0, 1, &v257, (char *)&v247 + 2);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    HIWORD(v245) = v260 + v232 + *(_WORD *)(a1 + 112) + (_WORD)v135 - (_WORD)__s;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                + 160))(v149, v242, (unsigned __int16)v245, 1, 1, (char *)&v245 + 2, (char *)&v247 + 2);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(*(void *)(a1 + 24)
                                                                                                + 160))(v149, v242, (unsigned __int16)v245, 2, 1, (char *)&v245 + 2, (char *)&v247 + 2);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    uint64_t v151 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, char *))(*(void *)(a1 + 24)
                                                                                                + 160);
    uint64_t v152 = (unsigned __int16)v245;
    __int16 v153 = cstdlib_strlen(v135 + 3);
    uint64_t v35 = v151(v149, v242, v152, 4, (unsigned __int16)(v153 + 1), v135 + 3, (char *)&v247 + 2);
    if ((v35 & 0x80000000) != 0) {
      return v35;
    }
    uint64_t v154 = __s;
    uint64_t v155 = &v154[cstdlib_strlen(__s)];
    uint64_t v156 = &v135[v136 + 6];
    size_t v157 = cstdlib_strlen(v156);
    cstdlib_memmove(v155, v156, v157 + 1);
    uint64_t v135 = cstdlib_strstr(__s, "▲");
    char v225 = 1;
    uint64_t v95 = (uint64_t *)v236;
    uint64_t v133 = a6;
    if (!v135) {
      goto LABEL_204;
    }
  }
LABEL_249:
  uint64_t v30 = 2311069696;
  uint64_t v75 = *(void *)(*(void *)a1 + 32);
  uint64_t v76 = 33003;
LABEL_250:
  log_OutPublic(v75, (uint64_t)"FE_PUNCSPTN", v76, 0, v39, v40, v41, v42, v224);
  return v30;
}

uint64_t updateTokenDomainLanguageTags(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v345 = 0;
  v346[0] = 0;
  int v344 = 0;
  unsigned __int16 v343 = 0;
  int v342 = 0;
  unsigned int LogLevel = log_GetLogLevel(*(void *)(*a1 + 32));
  int v341 = 0;
  v340 = 0;
  __int16 v339 = -1;
  unsigned __int8 v338 = 0;
  __int16 v337 = 0;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(a1[3] + 152))(a2, a3, 3, a4, &v337);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_22;
  }
  if (!v337)
  {
    if (LogLevel < 5) {
      return v14;
    }
    uint64_t v33 = *(void *)(*a1 + 32);
    unsigned int v34 = "no tokens to process for langmaps";
LABEL_38:
    log_OutText(v33, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)v34, v11, v12, v13, v291);
    return v14;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)v346 + 2);
  if ((v14 & 0x80000000) != 0)
  {
LABEL_22:
    uint64_t v26 = 0;
LABEL_23:
    unsigned __int16 v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_24;
  }
  unsigned __int16 v15 = HIWORD(v346[0]);
  if (!HIWORD(v346[0])) {
    goto LABEL_37;
  }
  unsigned __int16 v16 = 0;
  BOOL v17 = 0;
  do
  {
    if (v17)
    {
      BOOL v17 = 1;
    }
    else
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, _DWORD *))(a1[3] + 168))(a2, a3, v15, 0, 1, &v341, v346);
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_40;
      }
      unsigned __int16 v15 = HIWORD(v346[0]);
      if (v341 == 6)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v346[0]), 6, (char *)&v345 + 2);
        if ((v14 & 0x80000000) != 0)
        {
LABEL_40:
          uint64_t v26 = 0;
          unsigned __int16 v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          unsigned __int16 v343 = v16;
          goto LABEL_24;
        }
        BOOL v17 = HIWORD(v345) == 1;
        unsigned __int16 v15 = HIWORD(v346[0]);
      }
      else
      {
        BOOL v17 = 0;
      }
    }
    ++v16;
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, v15, (char *)v346 + 2);
    unsigned __int16 v15 = HIWORD(v346[0]);
    if (v18) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = HIWORD(v346[0]) == 0;
    }
  }
  while (!v19);
  unsigned __int16 v343 = v16;
  if (!v17)
  {
LABEL_37:
    uint64_t v33 = *(void *)(*a1 + 32);
    unsigned int v34 = "No LangMaps to process";
    goto LABEL_38;
  }
  unsigned __int16 v20 = cstdlib_strlen(a5);
  if (LogLevel < 5)
  {
    uint64_t v26 = 0;
  }
  else
  {
    unsigned __int16 v21 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, v20 + 2);
    uint64_t v26 = v21;
    if (!v21)
    {
      uint64_t v14 = 2311069706;
      uint64_t v38 = *a1;
      goto LABEL_57;
    }
    cstdlib_strcpy(v21, a5);
    dumpLingDB(a1, a2, a3, a4, (uint64_t)a5, v26, (uint64_t)"lingdb at start of langmap expansion", v27);
  }
  unsigned int __c = v20;
  uint64_t v36 = v20 + 1;
  uint64_t v37 = heap_Calloc(*(void **)(*a1 + 8), 1, v36);
  uint64_t v38 = *a1;
  if (!v37)
  {
    uint64_t v14 = 2311069706;
LABEL_57:
    log_OutPublic(*(void *)(v38 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v22, v23, v24, v25, v291);
    goto LABEL_23;
  }
  int v334 = (unsigned __int8 *)v37;
  uint64_t v39 = heap_Calloc(*(void **)(v38 + 8), 1, 2 * v36);
  uint64_t v44 = *a1;
  if (!v39)
  {
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(v44 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v40, v41, v42, v43, v291);
    unsigned __int16 v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_129;
  }
  int v327 = (unsigned __int16 *)v39;
  uint64_t v45 = heap_Calloc(*(void **)(v44 + 8), 1, 4 * v36);
  uint64_t v50 = *a1;
  uint64_t v326 = v45;
  if (!v45 || (uint64_t v51 = heap_Calloc(*(void **)(v50 + 8), 1, 28 * v16 + 28), v344 = (char *)v51, v50 = *a1, !v51))
  {
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(v50 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v46, v47, v48, v49, v291);
    unsigned __int16 v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    goto LABEL_127;
  }
  uint64_t v52 = v51;
  unsigned int v313 = LogLevel;
  uint64_t v30 = (const char **)heap_Calloc(*(void **)(v50 + 8), 1, 48);
  uint64_t v57 = *a1;
  if (!v30)
  {
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(v57 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v53, v54, v55, v56, v291);
    unsigned __int16 v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_127;
  }
  __s = (char *)a5;
  uint64_t v29 = heap_Calloc(*(void **)(v57 + 8), 1, 1024);
  if (!v29) {
    goto LABEL_125;
  }
  __int16 v339 = -1;
  uint64_t v62 = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a1[9] + 96))(a1[7], a1[8], "fecfg", "normal", &v340, &v339, &v338);
  if ((v62 & 0x80000000) != 0)
  {
    uint64_t v14 = v62;
LABEL_126:
    unsigned __int16 v28 = 0;
    goto LABEL_127;
  }
  if (v339)
  {
    uint64_t v63 = cstdlib_strchr(*v340, v338);
    if (v63) {
      char *v63 = 0;
    }
    __int16 v64 = *v340;
  }
  else
  {
    __int16 v64 = "normal";
  }
  int v65 = *(void **)(*a1 + 8);
  __src = (char *)v64;
  int v66 = cstdlib_strlen(v64);
  int v67 = (char *)heap_Calloc(v65, 1, (v66 + 1));
  if (!v67)
  {
LABEL_125:
    uint64_t v14 = 2311069706;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v58, v59, v60, v61, v291);
    goto LABEL_126;
  }
  uint64_t v68 = v67;
  cstdlib_strcpy(v67, __src);
  *uint64_t v30 = v68;
  uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)v346 + 2);
  if ((v69 & 0x80000000) != 0)
  {
    uint64_t v14 = v69;
    unsigned __int16 v28 = 1;
    goto LABEL_127;
  }
  unsigned __int16 v343 = 0;
  __int16 v73 = HIWORD(v346[0]);
  unsigned __int16 v74 = 0;
  if (!HIWORD(v346[0]))
  {
    LOWORD(v312) = 1;
LABEL_132:
    unsigned __int16 v317 = v74;
    if (v313 < 5)
    {
      __srcd = v344;
      unsigned __int16 v143 = v74;
      uint64_t v14 = modifyTokenLangMaps(a1, a2, a3, (uint64_t)v344, v74, (uint64_t)__s);
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_348;
      }
    }
    else
    {
      unsigned __int16 v126 = v74;
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP before processing", v70, v71, v72, v291);
      uint64_t v127 = (uint64_t)v344;
      dumpTokDB((uint64_t)a1, a2, a3, (uint64_t)v344, v126);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v128, v129, v130, (uint64_t)__s);
      uint64_t v14 = modifyTokenLangMaps(a1, a2, a3, v127, v126, (uint64_t)__s);
      if ((v14 & 0x80000000) != 0) {
        goto LABEL_348;
      }
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP after langmap realign", v131, v132, v133, v292);
      __srcd = (char *)v127;
      dumpTokDB((uint64_t)a1, a2, a3, v127, v126);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v134, v135, v136, (uint64_t)__s);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v137, v138, v139, (uint64_t)v334);
      unsigned __int16 v143 = v317;
    }
    unsigned __int16 v144 = v143;
    if (v143)
    {
      unsigned __int16 v145 = 0;
      uint64_t v146 = __srcd;
      while (1)
      {
        int v147 = v145;
        unsigned __int16 v148 = &v146[28 * v145];
        if (*((_DWORD *)v148 + 3) != 3 && *(_DWORD *)&v146[28 * v145 + 8] == 6)
        {
          uint64_t v307 = &v146[28 * v145];
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[3] + 184))(a2, a3, *(unsigned __int16 *)v148, 6, (char *)&v345 + 2);
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_348;
          }
          unsigned __int16 v144 = v317;
          uint64_t v146 = __srcd;
          if (HIWORD(v345) == 1)
          {
            uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, _DWORD *))(a1[3] + 176))(a2, a3, *(unsigned __int16 *)v307, 6, &v342, v346);
            if ((v14 & 0x80000000) != 0) {
              goto LABEL_348;
            }
            unsigned __int16 v149 = cstdlib_strlen(v342);
            BOOL v150 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, v149 + 1);
            if (!v150)
            {
LABEL_350:
              uint64_t v14 = 2311069706;
              goto LABEL_353;
            }
            uint64_t v151 = v150;
            cstdlib_strcpy(v150, v342);
            uint64_t v152 = &__srcd[28 * v147];
            unsigned int v155 = *((unsigned __int16 *)v152 + 2);
            __int16 v153 = (unsigned __int16 *)(v152 + 4);
            unsigned __int16 v154 = v155;
            unint64_t v156 = *(v153 - 1);
            if (v156 < v155)
            {
              int v157 = *v151;
              do
              {
                if (v151[v156 - *(v153 - 1)] != 32) {
                  int v157 = v151[v156 - *(v153 - 1)];
                }
                if (v157 != 32)
                {
                  v334[v156] = v157;
                  unsigned __int16 v154 = *v153;
                }
                ++v156;
              }
              while (v156 < v154);
            }
            int v158 = *(unsigned __int16 *)v307;
            heap_Free(*(void **)(*a1 + 8), (uint64_t)v151);
            unsigned __int16 v144 = v317;
            uint64_t v146 = __srcd;
            unsigned __int16 v145 = 0;
            while (*(unsigned __int16 *)&__srcd[28 * v145] != v158)
            {
              if (++v145 >= v317)
              {
                unsigned __int16 v145 = v317;
                break;
              }
            }
          }
        }
        if (++v145 >= v144) {
          goto LABEL_158;
        }
      }
    }
    uint64_t v146 = __srcd;
LABEL_158:
    if (v313 >= 5)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP after inserting langMaps", v140, v141, v142, v291);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v159, v160, v161, (uint64_t)__s);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v162, v163, v164, (uint64_t)v334);
      unsigned __int16 v144 = v317;
      uint64_t v146 = __srcd;
    }
    if (v144)
    {
      uint64_t v165 = 0;
      unint64_t v166 = v144;
      uint64_t v167 = v146 + 36;
      uint64_t v168 = 2;
      unsigned int v169 = __c;
      unint64_t v308 = v144;
      do
      {
        if (*(_DWORD *)&v146[28 * v165 + 8] == 6 && !*(_DWORD *)&v146[28 * v165 + 20])
        {
          int v170 = &v146[28 * v165];
          unsigned int v173 = *((unsigned __int16 *)v170 + 2);
          uint64_t v172 = v170 + 4;
          unint64_t v171 = v173;
          unsigned int v174 = v173;
          unint64_t v175 = v173;
          if (v169 > v173)
          {
            unint64_t v175 = v171;
            do
            {
              if (__s[v175] == 32) {
                break;
              }
              ++v175;
            }
            while (v169 > (unsigned __int16)v175);
            unsigned int v174 = (unsigned __int16)v175;
          }
          if (__s[v175] == 32 && v169 > v174)
          {
            do
            {
              if (__s[v175] != 32) {
                break;
              }
              ++v175;
            }
            while (v169 > (unsigned __int16)v175);
            unsigned int v174 = (unsigned __int16)v175;
          }
          if (v169 >= v174)
          {
            uint64_t v297 = v168;
            int v300 = v167;
            if (v171 != v175)
            {
              int v294 = v172;
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting pTokDB[%d].to %d -> %d, as not end of word (u16SentLen=%d)", v140, v141, v142, v165);
              uint64_t v172 = v294;
              unint64_t v166 = v308;
              uint64_t v146 = __srcd;
            }
            if (v165 + 1 >= v166) {
              goto LABEL_199;
            }
            unint64_t v177 = v297;
            for (int i = v300; ; i += 28)
            {
              unint64_t v179 = *((unsigned __int16 *)i - 3);
              BOOL v180 = v175 > v179 && *(_DWORD *)i == 6 && *((_DWORD *)i + 1) != 3 && v327[v175] != v327[v179];
              if (v177 >= v166) {
                break;
              }
              if (v175 <= *((unsigned __int16 *)i + 11))
              {
                if (*((_DWORD *)i + 7) == 6 || v180) {
                  break;
                }
              }
              else if (v180)
              {
                goto LABEL_198;
              }
              ++v177;
            }
            if (v180)
            {
LABEL_198:
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"block adjusting: bisects token rec %d -> %d,%d", v140, v141, v142, *(unsigned __int16 *)&v146[28 * (unsigned __int16)v177]);
              unint64_t v166 = v308;
              uint64_t v146 = __srcd;
              unsigned int v169 = __c;
            }
            else
            {
LABEL_199:
              unint64_t v182 = (unsigned __int16)*v172;
              if (v182 < v175)
              {
                size_t v183 = &v334[v182];
                unint64_t v184 = v175 - v182;
                do
                {
                  *v183++ = v334[*(unsigned __int16 *)&v146[28 * v165 + 2]];
                  --v184;
                }
                while (v184);
              }
              *uint64_t v172 = v175;
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"adjusted rec %d -> %d,%d", v140, v141, v142, *(unsigned __int16 *)&v146[28 * v165]);
              uint64_t v146 = __srcd;
              unsigned int v169 = __c;
              unint64_t v166 = v308;
            }
            uint64_t v168 = v297;
            uint64_t v167 = v300;
          }
        }
        ++v165;
        v167 += 28;
        ++v168;
      }
      while (v165 != v166);
      for (uint64_t j = 0; j != v166; ++j)
      {
        if (*(_DWORD *)&v146[28 * j + 8] != 6) {
          continue;
        }
        int v186 = &v146[28 * j];
        int v189 = *((__int16 *)v186 + 1);
        unsigned __int16 v188 = v186 + 2;
        int v187 = v189;
        uint64_t v190 = (unsigned __int16)v189;
        if (v189 < 1)
        {
          if (v187 < 0) {
            continue;
          }
LABEL_213:
          unsigned __int16 v191 = 0;
          uint64_t v192 = 0;
          unsigned __int16 v194 = 0;
          if (*__s != 32) {
            goto LABEL_216;
          }
        }
        else
        {
          unsigned __int16 v191 = v187;
          while (1)
          {
            uint64_t v192 = v191;
            if (__s[v191] == 32) {
              break;
            }
            int v193 = (__int16)v191--;
            if (v193 <= 1) {
              goto LABEL_213;
            }
          }
        }
        if (v191 + 1 != v190)
        {
          __ca = v188;
          unsigned __int16 v301 = v191 + 1;
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting start pos %d -> %d", v140, v141, v142, v190);
          unsigned int v198 = v301;
LABEL_220:
          unsigned __int16 v199 = 0;
          uint64_t v200 = (unsigned __int16)*__ca;
          do
          {
            uint64_t v201 = *(unsigned __int16 *)&__srcd[28 * v199 + 2];
            if (*(unsigned __int16 *)&__srcd[28 * v199 + 2] > v200) {
              break;
            }
            if (j != v199)
            {
              int v202 = *(_DWORD *)&__srcd[28 * v199 + 8];
              if (v198 >= v201 && v202 == 6)
              {
                if (v198 < *(unsigned __int16 *)&__srcd[28 * v199 + 4]) {
                  goto LABEL_240;
                }
              }
              else if (v202 == 5 && *(_DWORD *)&__srcd[28 * v199 + 12] != 3 && v327[v192] != v327[v201])
              {
LABEL_240:
                log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"block adjusting: bisects token rec %d -> %d,%d", v195, v196, v197, *(unsigned __int16 *)&__srcd[28 * v199]);
                goto LABEL_237;
              }
            }
            ++v199;
          }
          while (v199 < v317);
          if (v198 < v200)
          {
            unsigned __int8 v204 = v334[v200];
            unint64_t v205 = v198;
            do
              v334[v205++] = v204;
            while (v205 < (unsigned __int16)*__ca);
          }
          _WORD *__ca = v198;
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"adjusted rec %d -> %d,%d", v195, v196, v197, *(unsigned __int16 *)&__srcd[28 * j]);
LABEL_237:
          uint64_t v146 = __srcd;
          unint64_t v166 = v308;
          continue;
        }
        unsigned __int16 v194 = v191;
LABEL_216:
        if (!v194 && v187)
        {
          __ca = v188;
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"consider adjusting start pos %d -> %d", v140, v141, v142, v190);
          unsigned int v198 = 0;
          goto LABEL_220;
        }
      }
    }
    if (v313 >= 5)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"After Adjusting End Check", v140, v141, v142, v291);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v206, v207, v208, (uint64_t)__s);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v209, v210, v211, (uint64_t)v334);
    }
    unsigned __int16 v212 = cstdlib_strlen(__s);
    unsigned int v216 = v212;
    __int16 v217 = v334;
    if (v212)
    {
      uint64_t v218 = 0;
      int v219 = 0;
      int v220 = *v334;
      unsigned __int16 v298 = v212;
      unsigned int v295 = v212;
      do
      {
        __int16 v221 = &v217[(unsigned __int16)v219];
        int v222 = *v221;
        if (v222 == v220 || __s[(unsigned __int16)v219] != 32)
        {
          ++v219;
          int v220 = *v221;
        }
        else
        {
          if ((unsigned __int16)(v219 + 1) <= v216) {
            unsigned __int16 v223 = v216;
          }
          else {
            unsigned __int16 v223 = v219 + 1;
          }
          int v224 = v219;
          while (1)
          {
            int v225 = v224++;
            if ((unsigned __int16)v224 >= v212)
            {
              unsigned __int16 v226 = v223;
              goto LABEL_258;
            }
            if (v217[(unsigned __int16)v224] != v222) {
              break;
            }
            unsigned __int16 v226 = v224;
            if (__s[(unsigned __int16)v224] != 32) {
              goto LABEL_258;
            }
          }
          unsigned __int16 v226 = v224;
LABEL_258:
          if (v220 != 80)
          {
            int __cb = v220;
            int v302 = &v217[(unsigned __int16)v219];
            unsigned __int16 v309 = v219;
            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Append region %d..%d to previous %c region", v213, v214, v215, v218);
            int v220 = __cb;
            unsigned int v216 = v295;
            unsigned __int16 v212 = v298;
            __int16 v217 = v334;
            if (v309 < v226)
            {
              memset(v302, __cb, (unsigned __int16)(v226 + ~v309) + 1);
              int v220 = __cb;
              unsigned int v216 = v295;
              unsigned __int16 v212 = v298;
              __int16 v217 = v334;
            }
          }
          int v219 = v225 + 2;
        }
        uint64_t v218 = (unsigned __int16)v219;
      }
      while (v216 > (unsigned __int16)v219);
    }
    unsigned __int16 v227 = cstdlib_strlen(__s);
    int v232 = (char *)v334;
    unsigned int v310 = v227;
    unsigned __int16 v233 = v317;
    if (v227 >= 2u)
    {
      uint64_t v234 = v227 - 1;
      unsigned __int16 v235 = v334 + 1;
      uint64_t v236 = *v334;
      int v237 = __s;
      do
      {
        uint64_t v238 = *v235;
        if (v236 != 80 && v236 != v238 && *v237 != 32)
        {
          *unsigned __int16 v235 = v236;
          uint64_t v238 = v236;
        }
        ++v237;
        ++v235;
        uint64_t v236 = v238;
        --v234;
      }
      while (v234);
    }
    unsigned __int16 v303 = v227;
    if (v313 >= 5)
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"After Region Check", v229, v230, v231, v291);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v239, v240, v241, (uint64_t)__s);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v242, v243, v244, (uint64_t)v334);
      unsigned __int16 v233 = v317;
      int v232 = (char *)v334;
    }
    if (v233)
    {
      uint64_t v245 = v233;
      int v246 = (unsigned __int16 *)(__srcd + 16);
      do
      {
        if (*((_DWORD *)v246 - 2) == 5)
        {
          int v247 = cstdlib_strcmp(v30[*v246], "phon");
          int v232 = (char *)v334;
          if (v247) {
            *((_DWORD *)v246 - 1) = 3;
          }
        }
        v246 += 14;
        --v245;
      }
      while (v245);
    }
    unsigned int v248 = v310;
    if (v310)
    {
      uint64_t v249 = 0;
      uint64_t v250 = v327;
      uint64_t v251 = *v327;
      char v252 = *v232;
      unsigned __int16 v253 = v303;
      do
      {
        if (v248 <= (unsigned __int16)v249)
        {
          uint64_t v254 = v249;
        }
        else
        {
          uint64_t v254 = v249;
          while (v232[(unsigned __int16)v254] == v252 && v250[(unsigned __int16)v254] == (unsigned __int16)v251)
          {
            uint64_t v254 = (v254 + 1);
            if (v248 <= (unsigned __int16)v254)
            {
              int v255 = 0;
              goto LABEL_288;
            }
          }
          int v255 = 1;
LABEL_288:
          if ((unsigned __int16)v254 != (unsigned __int16)v249)
          {
            int v336 = 0;
            __int16 v335 = 0;
            uint64_t v228 = v232[(unsigned __int16)v249];
            if (v228 != 80)
            {
              char __cd = v255;
              uint64_t v256 = v251;
              insertDomainAndLang((uint64_t)a1, (uint64_t *)&v344, &v343, v250[(unsigned __int16)v249], v228, *(_DWORD *)(v326 + 4 * (unsigned __int16)v249), (unsigned __int16)v249, v254, (uint64_t)v30, (__int16 *)&v336 + 1, (__int16 *)&v336, &v335);
              LOBYTE(v255) = __cd;
              uint64_t v251 = v256;
              unsigned int v248 = v310;
              int v232 = (char *)v334;
              uint64_t v14 = v257;
              unsigned __int16 v253 = v303;
              uint64_t v250 = v327;
            }
            if ((v255 & 1) == 0) {
              goto LABEL_297;
            }
LABEL_294:
            if (v232[(unsigned __int16)v254] == v252 && v250[(unsigned __int16)v254] == (unsigned __int16)v251)
            {
              uint64_t v251 = v251;
            }
            else
            {
              char v252 = v232[(unsigned __int16)v254];
              uint64_t v251 = v250[(unsigned __int16)v254];
            }
            goto LABEL_297;
          }
          if (v255) {
            goto LABEL_294;
          }
        }
LABEL_297:
        uint64_t v249 = v254;
      }
      while ((unsigned __int16)v254 < v253);
    }
    if (v313 <= 4)
    {
      unsigned int v258 = v343;
    }
    else
    {
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"DUMP before update lingdb", v229, v230, v231, v291);
      unsigned int v258 = v343;
      dumpTokDB((uint64_t)a1, a2, a3, (uint64_t)v344, v343);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v259, v260, v261, (uint64_t)__s);
      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v262, v263, v264, (uint64_t)v334);
    }
    if (!v258)
    {
LABEL_345:
      if (v313 >= 5)
      {
        dumpLingDB(a1, a2, a3, a4, (uint64_t)__s, v26, (uint64_t)"lingdb at end of langmap expansion", v231);
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Map =%s", v285, v286, v287, (uint64_t)v334);
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"Sent=%s", v288, v289, v290, (uint64_t)__s);
      }
      goto LABEL_348;
    }
    uint64_t v265 = 0;
    int v304 = v258;
    __srce = (char *)v258;
    uint64_t v266 = (uint64_t)v344;
    *(void *)__cc = v344;
    while (1)
    {
      uint64_t v267 = (unsigned __int16 *)(v266 + 28 * v265);
      int v268 = *((_DWORD *)v267 + 3);
      if (v268 == 1) {
        break;
      }
      if (v268 == 3)
      {
        if (*v267)
        {
          uint64_t v270 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 192))(a2, a3);
LABEL_316:
          uint64_t v266 = *(void *)__cc;
          uint64_t v14 = v270;
          if ((v270 & 0x80000000) != 0) {
            goto LABEL_348;
          }
        }
      }
      else if (v268 == 2)
      {
        unsigned __int16 v269 = v265;
        uint64_t v311 = (_WORD *)(v266 + 28 * v265);
        do
        {
          if ((--v269 & 0x8000) != 0)
          {
            for (__int16 k = v265 + 1; v304 > k; ++k)
            {
              if (*(_DWORD *)(v266 + 28 * k + 12) != 3 && *(_WORD *)(v266 + 28 * k))
              {
                uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 88))(a2, a3);
                goto LABEL_311;
              }
            }
            uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 72))(a2, a3, 3, a4, (char *)v346 + 2);
            if ((v77 & 0x80000000) != 0) {
              goto LABEL_347;
            }
            goto LABEL_324;
          }
        }
        while (*(_DWORD *)(v266 + 28 * v269 + 12) == 3);
        if (!*(_WORD *)(v266 + 28 * v269))
        {
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33004, 0, v228, v229, v230, v231, v291);
          uint64_t v14 = 2311069696;
          goto LABEL_348;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(a1[3] + 80))(a2, a3);
LABEL_311:
        if ((v77 & 0x80000000) != 0) {
          goto LABEL_347;
        }
LABEL_324:
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, HIWORD(v346[0]), 0, 1, *(void *)__cc + 28 * v265 + 8, &v345);
        if ((v77 & 0x80000000) != 0) {
          goto LABEL_347;
        }
        uint64_t v318 = (unsigned __int16 *)(*(void *)__cc + 28 * v265 + 2);
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(a1[3] + 160))(a2, a3, HIWORD(v346[0]), 1, 1);
        if ((v77 & 0x80000000) != 0) {
          goto LABEL_347;
        }
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, HIWORD(v346[0]), 2, 1, *(void *)__cc + 28 * v265 + 4, &v345);
        if ((v77 & 0x80000000) != 0) {
          goto LABEL_347;
        }
        *uint64_t v311 = HIWORD(v346[0]);
        if (*(_DWORD *)(*(void *)__cc + 28 * v265 + 24))
        {
          uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, const char *, int *))(a1[3] + 160))(a2, a3, HIWORD(v346[0]), 6, 4, "lid", &v345);
          if ((v77 & 0x80000000) != 0) {
            goto LABEL_347;
          }
        }
        __int16 v272 = cstdlib_strlen(v30[v327[*v318]]);
        __int16 v273 = cstdlib_strlen("_latin");
        int v274 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, (unsigned __int16)(v272 + v273 + 1) + 1);
        if (!v274) {
          goto LABEL_350;
        }
        unsigned __int16 v275 = v274;
        if (v327[*v318])
        {
          cstdlib_strcpy(v274, v30[v327[*v318]]);
          __int16 v276 = v275;
          uint64_t v277 = *(void *)__cc + 28 * v265;
          int v279 = *(unsigned __int8 *)(v277 + 18);
          __n128 v278 = (unsigned __int8 *)(v277 + 18);
          if (v279 != 78)
          {
            cstdlib_strcat(v276, "_");
            uint64_t v280 = *(const char **)(v29 + 8 * *v278);
            if (!v280) {
              uint64_t v280 = "latin";
            }
            cstdlib_strcat(v276, v280);
          }
        }
        else
        {
          uint64_t v281 = *(unsigned __int8 *)(*(void *)__cc + 28 * v265 + 18);
          if (v281 == 78)
          {
            cstdlib_strcpy(v274, *v30);
            __int16 v276 = v275;
          }
          else
          {
            uint64_t v282 = *(const char **)(v29 + 8 * v281);
            __int16 v276 = v274;
            if (!v282) {
              uint64_t v282 = "latin";
            }
            cstdlib_strcpy(v274, v282);
          }
        }
        v319 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, char *, int *))(a1[3] + 160);
        uint64_t v283 = HIWORD(v346[0]);
        __int16 v284 = cstdlib_strlen(v276);
        uint64_t v14 = v319(a2, a3, v283, 4, (unsigned __int16)(v284 + 1), v276, &v345);
        heap_Free(*(void **)(*a1 + 8), (uint64_t)v276);
        uint64_t v266 = *(void *)__cc;
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_348;
        }
      }
      if ((char *)++v265 == __srce) {
        goto LABEL_345;
      }
    }
    uint64_t v270 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, int *))(a1[3] + 160))(a2, a3, *v267, 2, 1, v266 + 28 * v265 + 4, &v345);
    goto LABEL_316;
  }
  uint64_t v14 = 2311069706;
  unsigned int v296 = v20;
  uint64_t v299 = 5;
  int v312 = 1;
  while (1)
  {
    unsigned int v75 = v74;
    uint64_t v76 = v52 + 28 * v74;
    *(_WORD *)uint64_t v76 = v73;
    *(_DWORD *)(v76 + 12) = 0;
    *(_WORD *)(v76 + 16) = 0;
    *(_DWORD *)(v76 + 20) = 0;
    *(unsigned char *)(v76 + 18) = 32;
    v305 = (unsigned __int8 *)(v76 + 18);
    *(_DWORD *)(v76 + 24) = 0;
    __srca = (char *)(v76 + 24);
    uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, _DWORD *))(a1[3] + 168))(a2, a3, HIWORD(v346[0]), 1, 1, v76 + 2, v346);
    if ((v77 & 0x80000000) != 0
      || (uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, _DWORD *))(a1[3] + 168))(a2, a3, HIWORD(v346[0]), 2, 1, v52 + 28 * v75 + 4, v346), (v77 & 0x80000000) != 0)|| (v314 = v52, v78 = (_DWORD *)(v52 + 28 * v75 + 8), uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, _DWORD *, _DWORD *))(a1[3] + 168))(a2, a3, HIWORD(v346[0]), 0, 1, v78, v346), (v77 & 0x80000000) != 0))
    {
LABEL_347:
      uint64_t v14 = v77;
      goto LABEL_348;
    }
    if (*v78 == 5) {
      break;
    }
    unsigned __int16 v84 = v343;
LABEL_119:
    unsigned __int16 v123 = v84 + 1;
    unsigned __int16 v343 = v84 + 1;
    int v124 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v346[0]), (char *)v346 + 2);
    unsigned __int16 v74 = v123;
    __int16 v73 = HIWORD(v346[0]);
    if (v124) {
      BOOL v125 = 1;
    }
    else {
      BOOL v125 = HIWORD(v346[0]) == 0;
    }
    uint64_t v52 = v314;
    if (v125) {
      goto LABEL_132;
    }
  }
  HIWORD(v336) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v346[0]), 6, (char *)&v336 + 2) & 0x80000000) == 0&& HIWORD(v336) == 1)
  {
    *(_DWORD *)__srca = 1;
  }
  uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, _DWORD *))(a1[3] + 176))(a2, a3, HIWORD(v346[0]), 4, &v342, v346);
  if ((v77 & 0x80000000) != 0) {
    goto LABEL_347;
  }
  unsigned __int16 v79 = (char *)a1[16];
  if (!v79) {
    goto LABEL_348;
  }
  uint64_t v293 = cstdlib_strstr(v79, v342);
  unsigned __int16 v80 = cstdlib_strlen(v342);
  size_t v81 = cstdlib_strlen(*v30);
  __int16 v82 = *(void **)(*a1 + 8);
  if (v81 <= v80) {
    uint64_t v83 = v80 + 1;
  }
  else {
    uint64_t v83 = cstdlib_strlen(*v30) + 1;
  }
  __srcb = (char *)heap_Calloc(v82, 1, v83);
  if (!__srcb) {
    goto LABEL_353;
  }
  if (!cstdlib_strcmp(v342, "phon")
    || !cstdlib_strcmp(v342, "internal-nuance-system-norm")
    || !cstdlib_strcmp(v342, "prompt")
    || cstdlib_strcmp(v342, "latin") && (v293 && v293[cstdlib_strlen(v342)] == 124 || cstdlib_strchr(v342, 95)))
  {
    cstdlib_strcpy(__srcb, v342);
    unsigned __int8 *v305 = 78;
    unsigned int v92 = v80;
    if (v80)
    {
      unsigned int v93 = 0;
      uint64_t v94 = v334;
      while (1)
      {
        uint64_t v95 = v93;
        uint64_t v96 = v93 + 1;
        if (v342[v93] == 95) {
          break;
        }
        unsigned int v93 = (unsigned __int16)(v93 + 1);
        if (v92 <= (unsigned __int16)v96) {
          goto LABEL_94;
        }
      }
      unsigned int v315 = v92;
      unsigned __int8 v97 = cstdlib_toupper(v342[v96]);
      unsigned __int8 *v305 = v97;
      *(void *)(v29 + 8 * v97) = &v342[v96];
      cstdlib_memset(&__srcb[v95], 0, (int)(v315 - v95));
      uint64_t v94 = v334;
      uint64_t v98 = (uint64_t)v344;
      goto LABEL_95;
    }
  }
  else
  {
    cstdlib_strcpy(__srcb, *v30);
    unsigned __int8 v99 = cstdlib_toupper(*v342);
    unsigned __int8 *v305 = v99;
    *(void *)(v29 + 8 * v99) = v342;
  }
  uint64_t v94 = v334;
LABEL_94:
  uint64_t v98 = v314;
LABEL_95:
  unsigned int v100 = v343;
  uint64_t v101 = v98 + 28 * v343;
  unsigned int v104 = *(unsigned __int16 *)(v101 + 4);
  unint64_t v102 = (unsigned __int16 *)(v101 + 4);
  unsigned int v103 = v104;
  if (v104 > v296)
  {
    log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 0, 0, (uint64_t)"Conflicting depes rules in fe_puncsptn - possible FE data error", v89, v90, v91, v291);
    heap_Free(*(void **)(*a1 + 8), (uint64_t)__srcb);
    uint64_t v14 = 2311069962;
    goto LABEL_348;
  }
  unint64_t v105 = *(unsigned __int16 *)(v98 + 28 * v343 + 2);
  if (v105 < v103)
  {
    do
      v94[v105++] = *(unsigned char *)(v98 + 28 * v100 + 18);
    while (v105 < *v102);
  }
  unsigned int v306 = v100;
  if ((_WORD)v312)
  {
    uint64_t v316 = v98;
    uint64_t v106 = 0;
    while (LH_stricmp((char *)v30[v106], __srcb))
    {
      if ((unsigned __int16)v312 == ++v106)
      {
        uint64_t v108 = v326;
        int v107 = v327;
        goto LABEL_106;
      }
    }
    *(_WORD *)(v316 + 28 * v306 + 16) = v106;
    heap_Free(*(void **)(*a1 + 8), (uint64_t)__srcb);
    __srcb = 0;
  }
  else
  {
    LOWORD(v106) = 0;
  }
  uint64_t v108 = v326;
  int v107 = v327;
  if ((unsigned __int16)v106 != (unsigned __int16)v312)
  {
    uint64_t v111 = (uint64_t)v344;
    unsigned int v112 = v343;
LABEL_112:
    uint64_t v314 = v111;
    uint64_t v114 = v111 + 28 * v112;
    unsigned int v117 = *(unsigned __int16 *)(v114 + 2);
    uint64_t v116 = (unsigned __int16 *)(v114 + 2);
    unint64_t v115 = v117;
    uint64_t v118 = v116 + 1;
    if (v117 < v116[1])
    {
      uint64_t v119 = v111 + 28 * v112;
      uint64_t v120 = (unsigned __int16 *)(v119 + 16);
      int v121 = (_DWORD *)(v119 + 24);
      do
      {
        v107[v115] = *v120;
        *(_DWORD *)(v108 + 4 * v115++) = *v121;
      }
      while (v115 < *v118);
    }
    unsigned __int16 __srcc = v112;
    if (!cstdlib_strcmp(v30[*(unsigned __int16 *)(v314 + 28 * v112 + 16)], "phon"))
    {
      unint64_t v122 = *v116;
      if (v122 < *v118)
      {
        do
          v334[v122++] = 80;
        while (v122 < *v118);
      }
    }
    unsigned __int16 v84 = __srcc;
    goto LABEL_119;
  }
LABEL_106:
  int v109 = v312;
  uint64_t v110 = v299;
  if ((unsigned __int16)v312 < (unsigned __int16)v299)
  {
    v30[(unsigned __int16)v312] = __srcb;
    uint64_t v111 = (uint64_t)v344;
    *(_WORD *)&v344[28 * v306 + 16] = v312;
LABEL_111:
    uint64_t v299 = v110;
    unsigned int v112 = v343;
    *(_WORD *)(v111 + 28 * v343 + 16) = v109;
    int v312 = v109 + 1;
    goto LABEL_112;
  }
  uint64_t v113 = heap_Realloc(*(uint64_t **)(*a1 + 8), (uint64_t)v30, 8 * (unsigned __int16)v299 + 48);
  if (v113)
  {
    uint64_t v110 = (v299 + 5);
    int v109 = v312;
    uint64_t v108 = v326;
    *(void *)(v113 + 8 * (unsigned __int16)v312) = __srcb;
    uint64_t v111 = (uint64_t)v344;
    uint64_t v30 = (const char **)v113;
    int v107 = v327;
    goto LABEL_111;
  }
  if (__srcb) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)__srcb);
  }
LABEL_353:
  log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v85, v86, v87, v88, v291);
LABEL_348:
  unsigned __int16 v28 = v312;
LABEL_127:
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v327);
  if (v326) {
    heap_Free(*(void **)(*a1 + 8), v326);
  }
LABEL_129:
  heap_Free(*(void **)(*a1 + 8), (uint64_t)v334);
LABEL_24:
  if (v344)
  {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v344);
    int v344 = 0;
    unsigned __int16 v343 = 0;
  }
  if (v30)
  {
    if (v28)
    {
      uint64_t v31 = v28;
      unsigned __int16 v32 = (uint64_t *)v30;
      do
      {
        heap_Free(*(void **)(*a1 + 8), *v32);
        *v32++ = 0;
        --v31;
      }
      while (v31);
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v30);
  }
  if (v29) {
    heap_Free(*(void **)(*a1 + 8), v29);
  }
  if (v26) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v26);
  }
  return v14;
}

size_t hlp_AdjustMarkersToWordBoundaries(size_t result, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = (const char *)result;
    int v4 = *(_DWORD *)(a2 + 12);
    uint64_t v5 = (_DWORD *)(a2 + 44);
    uint64_t v6 = a3 - 1;
    do
    {
      uint64_t result = hlp_PositionToWordBoundary(v3, (*v5 - v4));
      *uint64_t v5 = result + v4;
      v5 += 8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t hlp_AdjustUserTnToWordBoundaries(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v12 = 0;
  int v13 = 0;
  unsigned __int16 v11 = 0;
  int v10 = 0;
  __int16 v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a4 + 104))(a2, a3, 1, 0, (char *)&v13 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, __int16 *))(a4 + 152))(a2, a3, 3, HIWORD(v13), &v9);
    if ((result & 0x80000000) == 0)
    {
      if (v9)
      {
        for (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a4 + 104))(a2, a3, 3, HIWORD(v13), &v13);
              (result & 0x80000000) == 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, int *))(a4 + 120))(a2, a3, (unsigned __int16)v13, &v13))
        {
          if (!(_WORD)v13) {
            break;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 0, 1, &v10, (char *)&v12 + 2);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (v10 == 5)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 1, 1, &v12, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            LOWORD(v12) = hlp_PositionToWordBoundary(a1, (unsigned __int16)v12);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a4 + 160))(a2, a3, (unsigned __int16)v13, 1, 1, &v12, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a4 + 168))(a2, a3, (unsigned __int16)v13, 2, 1, &v11, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            unsigned __int16 v11 = hlp_PositionToWordBoundary(a1, v11);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, char *))(a4 + 160))(a2, a3, (unsigned __int16)v13, 2, 1, &v11, (char *)&v12 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_UpdateLingDBTokensForDeletion(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v13 = 0;
  int v14 = 0;
  int v12 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(a3 + 104))(a1, a2, 1, 0, (char *)&v14 + 2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 152))(a1, a2, 3, HIWORD(v14), &v12);
    if ((result & 0x80000000) == 0)
    {
      if ((_WORD)v12)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, int *))(a3 + 104))(a1, a2, 3, HIWORD(v14), &v14);
        if ((result & 0x80000000) == 0)
        {
          while ((_WORD)v14)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 1, 1, &v13, (char *)&v13 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            if ((unsigned __int16)v13 > a4)
            {
              LOWORD(v13) = v13 - 1;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, char *))(a3 + 160))(a1, a2, (unsigned __int16)v14, 1, 1, &v13, (char *)&v13 + 2);
              if ((result & 0x80000000) != 0) {
                break;
              }
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 2, 1, (char *)&v12 + 2, (char *)&v13 + 2);
            if ((result & 0x80000000) != 0) {
              break;
            }
            int v9 = HIWORD(v12);
            if (HIWORD(v12) > a4)
            {
              --HIWORD(v12);
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, char *, char *))(a3 + 160))(a1, a2, (unsigned __int16)v14, 2, 1, (char *)&v12 + 2, (char *)&v13 + 2);
              if ((result & 0x80000000) != 0) {
                return result;
              }
              int v9 = HIWORD(v12);
            }
            if ((unsigned __int16)v13 == v9)
            {
              int v11 = 0;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, int *, char *))(a3 + 168))(a1, a2, (unsigned __int16)v14, 0, 1, &v11, (char *)&v13 + 2);
              if (v11 == 5) {
                uint64_t v10 = (unsigned __int16)v14;
              }
              else {
                uint64_t v10 = 0;
              }
              if ((result & 0x80000000) != 0) {
                return result;
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a1, a2);
            if ((result & 0x80000000) == 0)
            {
              if (!v10) {
                continue;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 192))(a1, a2, v10);
              if ((result & 0x80000000) == 0) {
                continue;
              }
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t hlp_UpdateMarkersForDeletion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    int v4 = (int *)(result + 16);
    do
    {
      unsigned int v5 = *(v4 - 1);
      int v6 = *v4;
      unsigned int v7 = *(_DWORD *)(result + 12);
      if (*v4)
      {
        unsigned int v8 = v5 - v7;
        if (v5 >= v7 && v8 <= a3 && v5 + v6 > v7 && v5 + v6 - v7 > a3) {
          *int v4 = v6 - 1;
        }
      }
      else
      {
        unsigned int v8 = v5 - v7;
      }
      if (v5 > v7 && v8 > a3) {
        *(v4 - 1) = v5 - 1;
      }
      v4 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

size_t hlp_AdjustPuncMarkers(const char *a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  int v6 = *(_DWORD *)(a2 + 12);
  size_t result = cstdlib_strlen(a1);
  if (v3)
  {
    unsigned int v8 = result;
    uint64_t v3 = v3;
    int v9 = (_DWORD *)(a2 + 12);
    do
    {
      unsigned int v10 = *v9 - v6;
      if (*v9 != v6 && v10 < v8 && a1[v10 - 1] != 32)
      {
        size_t result = a1[v10];
        if (result != 32)
        {
          size_t result = utf8_determineUTF8CharLength(result);
          if (a1[result + v10] == 32 && *(v9 - 3) != 99) {
            *v9 += (unsigned __int16)result;
          }
        }
      }
      v9 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t fe_puncsptn_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 62339, 168);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2311069704;
  }
}

uint64_t fe_puncsptn_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2311069697;
  }
  uint64_t result = 0;
  *a2 = &IFePuncsptn;
  return result;
}

uint64_t dumpLingDB(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  int v30 = 0;
  unsigned __int16 v29 = 0;
  __int16 v28 = 0;
  int v26 = 0;
  unsigned int v27 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%s", (uint64_t)a6, a7, a8, a7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(a1[3] + 104))(a2, a3, 3, a4, (char *)&v30 + 2);
  if ((result & 0x80000000) == 0)
  {
    for (unsigned __int16 i = HIWORD(v30); HIWORD(v30); unsigned __int16 i = HIWORD(v30))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, int *, __int16 *))(a1[3] + 168))(a2, a3, i, 1, 1, &v30, &v28);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, unsigned __int16 *, __int16 *))(a1[3] + 168))(a2, a3, HIWORD(v30), 2, 1, &v29, &v28);
      if ((result & 0x80000000) != 0) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, unsigned int *, __int16 *))(a1[3] + 168))(a2, a3, HIWORD(v30), 0, 1, &v27, &v28);
      if ((result & 0x80000000) != 0) {
        break;
      }
      if (v27 - 5 <= 1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, __int16 *))(a1[3] + 176))(a2, a3, HIWORD(v30), 4, &v24, &v28);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if (v27 == 6)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, __int16 *))(a1[3] + 176))(a2, a3, HIWORD(v30), 3, &v23, &v28);
          if ((result & 0x80000000) != 0) {
            break;
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(a1[3] + 184))(a2, a3, HIWORD(v30), 6, (char *)&v26 + 2) & 0x80000000) == 0&& HIWORD(v26) == 1)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *, int *))(a1[3] + 176))(a2, a3, HIWORD(v30), 6, &v25, &v26);
            if ((result & 0x80000000) != 0) {
              break;
            }
          }
        }
      }
      cstdlib_strncpy(a6, (const char *)(a5 + (unsigned __int16)v30), v29 - (unint64_t)(unsigned __int16)v30);
      a6[v29 - (unsigned __int16)v30] = 0;
      if (v27 > 4)
      {
        if (v27 == 5)
        {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d ESC(%-9s) \"%s\"", v16, v17, v18, HIWORD(v30));
        }
        else if (v27 == 6)
        {
          log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d %-15s \"%s\" \"%s\"", v16, v17, v18, HIWORD(v30));
        }
      }
      else
      {
        uint64_t v22 = 0;
        (*(void (**)(uint64_t, uint64_t, void, uint64_t *))(a1[3] + 264))(a2, a3, (unsigned __int16)v27, &v22);
        log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"[dbId=%d] %3d,%3d %-15s \"%s\"", v19, v20, v21, HIWORD(v30));
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, char *))(a1[3] + 120))(a2, a3, HIWORD(v30), (char *)&v30 + 2);
      if (result) {
        break;
      }
    }
  }
  return result;
}

uint64_t dumpTokDB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a5)
  {
    unsigned int v7 = (void *)result;
    uint64_t v8 = 0;
    uint64_t v9 = a5;
    uint64_t v10 = a4 + 12;
    do
    {
      uint64_t v15 = 0;
      (*(void (**)(uint64_t, uint64_t, void, uint64_t *))(v7[3] + 264))(a2, a3, *(unsigned __int16 *)(v10 - 4), &v15);
      uint64_t v14 = *(void *)(*v7 + 32);
      if (*(_DWORD *)(v10 - 4) == 5) {
        uint64_t result = log_OutText(v14, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%d : [%d] %d,%d %s %s %c %s", v11, v12, v13, v8);
      }
      else {
        uint64_t result = log_OutText(v14, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"%d : [%d] %d,%d %s", v11, v12, v13, v8);
      }
      v10 += 28;
      ++v8;
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t modifyTokenLangMaps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  __int16 v51 = 0;
  __src = 0;
  __s = 0;
  unsigned __int16 v48 = 0;
  if (a5)
  {
    uint64_t v8 = a3;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = a5;
    uint64_t v46 = a5;
    while (1)
    {
      uint64_t v14 = (unsigned __int16 *)(a4 + 28 * v11);
      if (*((_DWORD *)v14 + 2) == 6)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, __int16 *))(a1[3] + 184))(a2, v8, *v14, 6, &v51);
        if ((v12 & 0x80000000) != 0) {
          return v12;
        }
        if (v51 == 1)
        {
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(a1[3] + 176))(a2, v8, *v14, 6, &__s, &v48);
          if ((v15 & 0x80000000) != 0) {
            return v15;
          }
          uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char **, unsigned __int16 *))(a1[3] + 176))(a2, v8, *v14, 3, &__src, &v48);
          if ((v12 & 0x80000000) != 0) {
            return v12;
          }
          if (v11)
          {
            uint64_t v19 = 0;
            uint64_t v20 = a4 + 28 * v11;
            uint64_t v21 = (unsigned __int16 *)(v20 + 2);
            uint64_t v22 = (_WORD *)(v20 + 4);
            while (1)
            {
              if (*(_DWORD *)(a4 + 28 * v19 + 8) == 5 && *v21 >= *(unsigned __int16 *)(a4 + 28 * v19 + 2))
              {
                uint64_t v23 = (unsigned __int16)*v22;
                uint64_t v24 = a4 + 28 * v19;
                unsigned int v27 = *(unsigned __int16 *)(v24 + 4);
                int v26 = (_WORD *)(v24 + 4);
                uint64_t v25 = v27;
                if (v23 < v27)
                {
                  uint64_t v28 = (unsigned __int16)*v22;
                  while (*(unsigned char *)(a6 + v28) == 32)
                  {
                    if (v25 == ++v28)
                    {
                      LODWORD(v28) = v25;
                      goto LABEL_18;
                    }
                  }
                  LODWORD(v28) = (unsigned __int16)v28;
LABEL_18:
                  if (v28 != v23 && v28 == v25) {
                    break;
                  }
                }
              }
              if (++v19 == v11)
              {
                uint64_t v13 = v46;
                uint64_t v8 = a3;
                goto LABEL_22;
              }
            }
            *(_DWORD *)(a4 + 28 * v11 + 20) = 1;
            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"spaced region found...adjust token end from %d to %d", v16, v17, v18, v23);
            uint64_t v44 = (unsigned __int16)(*v26 + cstdlib_strlen(__s) - *v22) + 1;
            unsigned __int16 v29 = (char *)heap_Calloc(*(void **)(*a1 + 8), 1, v44);
            if (!v29)
            {
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v30, v31, v32, v33, v43);
              return 2311069706;
            }
            unsigned int v34 = v29;
            cstdlib_strcpy(v29, __s);
            cstdlib_strncat(v34, (const char *)(a6 + (unsigned __int16)*v22), (unsigned __int16)*v26 - (unint64_t)(unsigned __int16)*v22);
            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"modify LD_T_LANGMAP field from \"%s\" to \"%s\"", v35, v36, v37, (uint64_t)__s);
            int __dst = v34;
            uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 6, (unsigned __int16)v44, v34, &v48);
            if ((v38 & 0x80000000) != 0) {
              goto LABEL_34;
            }
            uint64_t v12 = 2311069696;
            if (v48 != (unsigned __int16)v44) {
              goto LABEL_35;
            }
            cstdlib_strcpy(__dst, __src);
            cstdlib_strncat(__dst, (const char *)(a6 + (unsigned __int16)*v22), (unsigned __int16)*v26 - (unint64_t)(unsigned __int16)*v22);
            log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"modify LD_T_NORM field from \"%s\" to \"%s\"", v39, v40, v41, (uint64_t)__src);
            uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, char *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 3, (unsigned __int16)v44, __dst, &v48);
            if ((v38 & 0x80000000) != 0)
            {
LABEL_34:
              uint64_t v12 = v38;
LABEL_35:
              heap_Free(*(void **)(*a1 + 8), (uint64_t)__dst);
              return v12;
            }
            if (v48 != (unsigned __int16)v44) {
              goto LABEL_35;
            }
            heap_Free(*(void **)(*a1 + 8), (uint64_t)__dst);
            *uint64_t v22 = *v26;
            uint64_t v8 = a3;
            uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, _WORD *, unsigned __int16 *))(a1[3] + 160))(a2, a3, *v14, 2, 1, v26, &v48);
            uint64_t v13 = v46;
            if ((v12 & 0x80000000) != 0) {
              return v12;
            }
          }
        }
      }
LABEL_22:
      if (++v11 == v13) {
        return v12;
      }
    }
  }
  return 0;
}

double insertDomainAndLang(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, __int16 a4, char a5, int a6, uint64_t a7, __int16 a8, uint64_t a9, __int16 *a10, __int16 *a11, _WORD *a12)
{
  uint64_t v19 = *a2;
  uint64_t v20 = *a3;
  if (*a3)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (_DWORD *)(v19 + 40);
    while (1)
    {
      if (*(v22 - 7) != 3)
      {
        unsigned int v23 = *((unsigned __int16 *)v22 - 19);
        if (v23 > a7) {
          goto LABEL_14;
        }
        if (v23 == a7) {
          break;
        }
      }
      ++v21;
      v22 += 7;
      if (v20 == v21)
      {
        unsigned __int16 v24 = 0;
        LOWORD(v21) = *a3;
        goto LABEL_16;
      }
    }
    if ((int)v21 + 1 < v20)
    {
      while (*((unsigned __int16 *)v22 - 5) == a7 && *v22 != 3)
      {
        unsigned __int16 v24 = v21 + 1;
        unsigned int v25 = (unsigned __int16)v21 + 2;
        v22 += 7;
        LOWORD(v21) = v21 + 1;
        if (v25 >= v20)
        {
          LOWORD(v21) = v24;
          goto LABEL_16;
        }
      }
LABEL_14:
      unsigned __int16 v24 = v21;
      goto LABEL_16;
    }
    unsigned __int16 v24 = *a3;
  }
  else
  {
    LOWORD(v21) = 0;
    unsigned __int16 v24 = 0;
  }
LABEL_16:
  uint64_t v26 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v19, 28 * *a3 + 56);
  if (v26)
  {
    uint64_t v31 = v26;
    *a2 = v26;
    uint64_t v32 = *(void *)(*(void *)a1 + 32);
    __int16 v33 = a4;
    if (*a3 == (unsigned __int16)v21)
    {
      log_OutText(v32, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"insert %d,%d, [%s_%c] at end", v28, v29, v30, a7);
      unsigned int v34 = a12;
      __int16 v35 = a8;
      unsigned int v36 = (unsigned __int16)v21;
    }
    else
    {
      int v46 = a6;
      __int16 v38 = a8;
      unsigned int v36 = v24;
      __int16 v45 = v38;
      log_OutText(v32, (uint64_t)"FE_PUNCSPTN", 5, 0, (uint64_t)"insert %d,%d, [%s_%c] before rec %d", v28, v29, v30, a7);
      if ((unsigned __int16)(*a3 + 1) > v24)
      {
        int v39 = (unsigned __int16)(*a3 + 1);
        uint64_t v40 = (char *)(v31 + 28 * (unsigned __int16)(*a3 + 1));
        do
        {
          cstdlib_memcpy(v40, (const void *)(v31 + 28 * --v39), 0x1CuLL);
          v40 -= 28;
        }
        while (v24 < (unsigned __int16)v39);
      }
      cstdlib_memset((void *)(v31 + 28 * v24), 0, 0x1CuLL);
      int v41 = *a10;
      if (v41 >= v24) {
        *a10 = v41 + 1;
      }
      unsigned int v34 = a12;
      int v42 = *a11;
      __int16 v33 = a4;
      if (v42 >= v24) {
        *a11 = v42 + 1;
      }
      LOWORD(v21) = v24;
      a6 = v46;
      __int16 v35 = v45;
    }
    uint64_t v43 = v31 + 28 * v36;
    *(_WORD *)uint64_t v43 = 0;
    *(_WORD *)(v43 + 2) = a7;
    *(_WORD *)(v43 + 4) = v35;
    *(_WORD *)(v43 + 16) = v33;
    *(unsigned char *)(v43 + 18) = a5;
    *(void *)&double result = 0x200000005;
    *(void *)(v43 + 8) = 0x200000005;
    *(_DWORD *)(v43 + 24) = a6;
    *unsigned int v34 = v21;
    ++*a3;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN", 33000, 0, v27, v28, v29, v30, v44);
  }
  return result;
}

uint64_t ToNorm(unsigned __int8 *a1)
{
  unsigned __int8 v1 = *a1;
  unsigned int v2 = *a1;
  if (v2 != 32 && v2 < 0x41 || (*a1 - 91) < 6u) {
    return 1;
  }
  if (v2 < 0x7B
    || ((result = 1, unsigned int v7 = v1 - 130, v8 = v7 > 8, v9 = (1 << v7) & 0x149, !v8) ? (v10 = v9 == 0) : (v10 = 1), !v10))
  {
    unsigned __int8 v11 = a1[1];
    if (v11)
    {
      uint64_t v12 = a1 + 2;
      uint64_t result = 1;
      while (v11 > 0x40u || v11 == 32)
      {
        if ((v11 - 65) > 0x19u)
        {
          if ((v11 - 91) < 6u) {
            return 1;
          }
          if (v11 > 0x7Au)
          {
            unsigned int v13 = v11 - 130;
            if (v13 > 8 || ((1 << v13) & 0x149) == 0) {
              return result;
            }
          }
        }
        else if (*(v12 - 2) != 32)
        {
          return 1;
        }
        unsigned __int8 v14 = *v12++;
        unsigned __int8 v11 = v14;
        if (!v14) {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t hlp_updateBytePositions(unsigned int a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, _WORD *a5, _WORD *a6)
{
  *a5 = Utf8_LengthInBytes(a2, a1);
  if (a1)
  {
    unsigned __int16 v10 = 0;
    uint64_t v11 = a1;
    do
    {
      __int16 v12 = *a3++;
      v10 += v12;
      --v11;
    }
    while (v11);
    int v13 = v10;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t result = Utf8_LengthInBytes(a4, v13);
  *a6 = result;
  return result;
}

uint64_t hlp_updateMarkerPosition(unint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5, int a6, _DWORD *a7)
{
  unsigned __int16 v13 = Utf8_LengthInUtf8chars(a1, *a7 - a4);
  if (a5)
  {
    uint64_t v14 = 0;
    unsigned __int16 v15 = 0;
    while (1)
    {
      v15 += *(unsigned __int8 *)(a2 + v14);
      if (v13 < v15) {
        break;
      }
      if (a5 == ++v14) {
        goto LABEL_7;
      }
    }
    LOWORD(a5) = v14;
  }
LABEL_7:
  uint64_t result = Utf8_LengthInBytes(a3, (unsigned __int16)a5);
  *a7 = a6 + a4 + (unsigned __int16)result;
  return result;
}

size_t hlp_PositionToWordBoundary(const char *a1, size_t a2)
{
  size_t v4 = cstdlib_strlen(a1);
  size_t v5 = v4;
  if (v4 > a2)
  {
    a2 = a2;
    uint64_t v6 = v4;
    while (cstdlib_strchr(" _", a1[a2]))
    {
      if (v6 == ++a2)
      {
        a2 = v5;
        break;
      }
    }
  }
  if (a2)
  {
    a2 = a2;
    do
    {
      if (cstdlib_strchr(",.", a1[a2])) {
        break;
      }
      if (!cstdlib_strchr(" _", a1[a2])) {
        break;
      }
      --a2;
    }
    while (a2);
  }
  return a2;
}

uint64_t fe_puncsptn_v2_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v5 = 2702188551;
  uint64_t v30 = 0;
  if (a5)
  {
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v32);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = objc_GetObject(v32[6], (uint64_t)"LINGDB", &v31);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t Object = objc_GetObject(v32[6], (uint64_t)"FE_DCTLKP", &v30);
    if ((Object & 0x80000000) != 0)
    {
      uint64_t v29 = Object;
      objc_ReleaseObject(v32[6], (uint64_t)"LINGDB");
      return v29;
    }
    uint64_t v11 = heap_Alloc(v32[1], 176);
    if (!v11)
    {
      log_OutPublic(v32[4], (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v12, v13, v14, v15, v30);
      objc_ReleaseObject(v32[6], (uint64_t)"LINGDB");
      objc_ReleaseObject(v32[6], (uint64_t)"FE_DCTLKP");
      return 2702188554;
    }
    uint64_t v16 = v11;
    *(void *)uint64_t v11 = v32;
    *(void *)(v11 + 8) = a3;
    *(void *)(v11 + 16) = a4;
    *(void *)(v11 + 24) = *(void *)(v31 + 8);
    uint64_t v17 = v30;
    uint64_t v18 = *(void *)(v30 + 8);
    *(void *)(v11 + 48) = v18;
    long long v19 = *(_OWORD *)(v17 + 16);
    *(void *)(v11 + 160) = 0;
    uint64_t v20 = (uint64_t *)(v11 + 160);
    *(_OWORD *)(v11 + 32) = v19;
    *(void *)(v11 + 56) = 0;
    *(_WORD *)(v11 + 64) = 0;
    *(void *)(v11 + 144) = 0;
    *(void *)(v11 + 168) = "FE_PUNCSPTN_V2";
    uint64_t v33 = 0;
    uint64_t v21 = (*(uint64_t (**)(void, void, char *, uint64_t *))(v18 + 88))(*(void *)(v11 + 32), *(void *)(v11 + 40), (char *)&v33 + 4, &v33);
    if ((v21 & 0x80000000) != 0 || (uint64_t v21 = loc_reload_statpunc_data(v16), (v21 & 0x80000000) != 0))
    {
      uint64_t v5 = v21;
    }
    else
    {
      *(void *)(v16 + 72) = heap_Alloc;
      *(void *)(v16 + 80) = heap_Calloc;
      *(void *)(v16 + 88) = heap_Realloc;
      *(void *)(v16 + 96) = heap_Free;
      int v22 = OOCAllocator_Con(v16 + 104, (_OWORD *)(v16 + 72), *(void *)(*(void *)v16 + 8));
      uint64_t v23 = LH_ERROR_to_VERROR(v22);
      if ((v23 & 0x80000000) != 0)
      {
        uint64_t v5 = v23;
        log_OutPublic(v32[4], (uint64_t)"FE_PUNCSPTN_V2", 76002, 0, v24, v25, v26, v27, v30);
      }
      else
      {
        uint64_t v5 = puncsptn_v2_reload_lua_code(*(_WORD **)(v16 + 8), *(void *)(v16 + 16), *(void *)(v16 + 168), v16 + 104, v20, (_DWORD *)(v16 + 152));
        if ((v5 & 0x80000000) == 0)
        {
          *(void *)a5 = v16;
          *(_DWORD *)(a5 + 8) = 73449;
          return v5;
        }
      }
    }
    loc_cleanup_on_close(*(uint64_t **)a5, *(void *)(a5 + 8));
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
  }
  return v5;
}

uint64_t loc_reload_statpunc_data(uint64_t a1)
{
  char v18 = 0;
  uint64_t v16 = 0;
  loc_deallocate_statpunc_v2_data((uint64_t *)a1);
  unsigned __int16 v17 = 0;
  uint64_t IGTree = (*(uint64_t (**)(void, void, const char *, const char *, uint64_t *, unsigned __int16 *, char *))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 32), *(void *)(a1 + 40), "fecfg", "statpunc", &v16, &v17, &v18);
  if ((IGTree & 0x80000000) == 0 && v17)
  {
    uint64_t v3 = heap_Alloc(*(void *)(*(void *)a1 + 8), 48 * v17);
    *(void *)(a1 + 56) = v3;
    if (v3)
    {
      if (v17)
      {
        for (unint64_t i = 0; i < v17; ++i)
        {
          int v9 = *(char **)(v16 + 8 * i);
          unsigned __int16 v10 = cstdlib_strchr(v9, 124);
          if (v10)
          {
            *unsigned __int16 v10 = 0;
            uint64_t v11 = v10 + 1;
            cstdlib_strcpy((char *)(*(void *)(a1 + 56) + 48 * *(unsigned __int16 *)(a1 + 64)), v9);
            uint64_t v12 = cstdlib_strchr(v11, 124);
            if (v12)
            {
              *uint64_t v12 = 0;
              uint64_t v13 = v12 + 1;
              cstdlib_strcpy((char *)(*(void *)(a1 + 56) + 48 * *(unsigned __int16 *)(a1 + 64) + 4), v11);
              uint64_t v14 = cstdlib_strchr(v13, 124);
              if (v14)
              {
                *uint64_t v14 = 0;
                uint64_t IGTree = statpunc_v2_readIGTree(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)a1, v13, *(void *)(a1 + 56) + 48 * *(unsigned __int16 *)(a1 + 64));
                if ((IGTree & 0x80000000) != 0) {
                  return IGTree;
                }
                ++*(_WORD *)(a1 + 64);
              }
            }
          }
        }
      }
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v4, v5, v6, v7, v16);
      return 2702188554;
    }
  }
  return IGTree;
}

uint64_t loc_cleanup_on_close(uint64_t *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 73449, 176);
  if ((v3 & 0x80000000) != 0) {
    return 2702188552;
  }
  uint64_t v4 = v3;
  if (a1)
  {
    loc_deallocate_statpunc_v2_data(a1);
    puncsptn_v2_deallocate_LuaVM((uint64_t)(a1 + 13), a1 + 20);
    OOCAllocator_Des();
    objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"LINGDB");
    objc_ReleaseObject(*(void *)(*a1 + 48), (uint64_t)"FE_DCTLKP");
    heap_Free(*(void **)(*a1 + 8), (uint64_t)a1);
  }
  return v4;
}

uint64_t fe_puncsptn_v2_ObjReopen(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((result & 0x80000000) != 0) {
    return 2702188552;
  }
  if (a1)
  {
    uint64_t v4 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, char *, uint64_t *))(*(void *)(a1 + 48) + 88))(*(void *)(a1 + 32), *(void *)(a1 + 40), (char *)&v4 + 4, &v4);
    if ((result & 0x80000000) == 0)
    {
      uint64_t result = loc_reload_statpunc_data(a1);
      if ((result & 0x80000000) == 0) {
        return puncsptn_v2_reload_lua_code(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 168), a1 + 104, (uint64_t *)(a1 + 160), (_DWORD *)(a1 + 152));
      }
    }
  }
  return result;
}

uint64_t fe_puncsptn_v2_ProcessStart(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2702188552;
  }
}

uint64_t fe_puncsptn_v2_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v24 = 0;
  if ((safeh_HandleCheck(a1, a2, 73449, 176) & 0x80000000) != 0) {
    return 2702188552;
  }
  *a5 = 1;
  uint64_t v12 = LingDBHasSentence(*(void *)(a1 + 24), a3, a4, &v24);
  if ((v12 & 0x80000000) == 0)
  {
    if (v24 == 1)
    {
      uint64_t inited = initLDO(a1 + 104, (void *)(a1 + 144));
      if ((inited & 0x80000000) != 0)
      {
LABEL_14:
        uint64_t v12 = inited;
        goto LABEL_18;
      }
      uint64_t v12 = importFromLingDB(*(void *)a1, *(void *)(a1 + 24), a3, a4, (uint64_t *)(a1 + 144));
      if ((v12 & 0x80000000) != 0) {
        goto LABEL_18;
      }
      if (*(void *)(a1 + 144))
      {
        if (*(_WORD *)(a1 + 64))
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          while (1)
          {
            uint64_t inited = statpunc_v2_Process(*(void *)a1, *(void *)(a1 + 144), a1 + 104, *(void *)(a1 + 56) + v14);
            if ((inited & 0x80000000) != 0) {
              break;
            }
            ++v15;
            v14 += 48;
            if (v15 >= *(unsigned __int16 *)(a1 + 64)) {
              goto LABEL_11;
            }
          }
        }
        else
        {
LABEL_11:
          if (*(_DWORD *)(a1 + 152) != 1
            || (log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 168), 5, 0, (uint64_t)"Lua code available: process LDO with Lua code", v9, v10, v11, 0), uint64_t inited = puncsptn_v2_process_ldo_with_lua(*(void *)a1, *(void *)(a1 + 168), *(void *)(a1 + 144), a1 + 104, *(void *)(a1 + 160), v16, v17, v18), (inited & 0x80000000) == 0))
          {
            uint64_t inited = exportToLingDB(*(void *)a1, *(void *)(a1 + 24), a3, a4, a1 + 104, *(void *)(a1 + 144), 0, 0);
          }
        }
        goto LABEL_14;
      }
      uint64_t v19 = *(void *)(*(void *)a1 + 32);
      uint64_t v20 = *(void *)(a1 + 168);
      uint64_t v21 = "Imported LDO is NULL, returning";
    }
    else
    {
      uint64_t v19 = *(void *)(*(void *)a1 + 32);
      uint64_t v20 = *(void *)(a1 + 168);
      uint64_t v21 = "LingDB has no sentence, returning";
    }
    log_OutText(v19, v20, 5, 0, (uint64_t)v21, v9, v10, v11, 0);
  }
LABEL_18:
  uint64_t v22 = *(void *)(a1 + 144);
  if (v22)
  {
    deinitLDO(a1 + 104, v22);
    *(void *)(a1 + 144) = 0;
  }
  return v12;
}

uint64_t fe_puncsptn_v2_ProcessEnd(uint64_t a1, int a2)
{
  LODWORD(result) = safeh_HandleCheck(a1, a2, 73449, 176);
  if ((int)result >= 0) {
    return result;
  }
  else {
    return 2702188552;
  }
}

uint64_t fe_puncsptn_v2_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2702188545;
  }
  uint64_t result = 0;
  *a2 = &IFePuncsptnV2;
  return result;
}

uint64_t *loc_deallocate_statpunc_v2_data(uint64_t *result)
{
  unsigned __int8 v1 = result;
  uint64_t v2 = result[7];
  if (*((_WORD *)result + 32))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      statpunc_v2_freeIGTree(*v1, *(void *)(v2 + v4));
      uint64_t v2 = v1[7];
      *(void *)(v2 + v4) = 0;
      ++v3;
      v4 += 48;
    }
    while (v3 < *((unsigned __int16 *)v1 + 32));
    goto LABEL_6;
  }
  if (v2)
  {
LABEL_6:
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v2);
    v1[7] = 0;
  }
  *((_WORD *)v1 + 32) = 0;
  return result;
}

uint64_t loc_extractFeatures(uint64_t a1, uint64_t a2, char *a3, char *a4, const char *a5, uint64_t a6)
{
  uint64_t v10 = *(const char **)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = cstdlib_strchr(*(char **)(a1 + 16), 124);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = 0;
      do
      {
        *uint64_t v12 = 0;
        uint64_t v14 = cstdlib_strstr(a3, v10);
        if (v14)
        {
          if (v14 < a4)
          {
            uint64_t v13 = loc_setFeature(*(void *)(a1 + 8), a2, "collocation", a6, "left");
            if ((v13 & 0x80000000) != 0) {
              return v13;
            }
          }
        }
        *uint64_t v12 = 124;
        uint64_t v10 = v12 + 1;
        uint64_t v12 = cstdlib_strchr(v12 + 1, 124);
      }
      while (v12);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
    }
  }
  unint64_t v15 = *(const char **)(a1 + 24);
  if (v15)
  {
    uint64_t v16 = cstdlib_strchr(*(char **)(a1 + 24), 124);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v13 = 0;
      do
      {
        *uint64_t v17 = 0;
        if (cstdlib_strstr(a3, v15) > a4)
        {
          uint64_t v13 = loc_setFeature(*(void *)(a1 + 8), a2, "collocation", a6, "right");
          if ((v13 & 0x80000000) != 0) {
            return v13;
          }
        }
        *uint64_t v17 = 124;
        unint64_t v15 = v17 + 1;
        uint64_t v17 = cstdlib_strchr(v17 + 1, 124);
      }
      while (v17);
      if ((v13 & 0x80000000) != 0) {
        return v13;
      }
    }
  }
  uint64_t v18 = a4;
  if (a4 > a3)
  {
    uint64_t v18 = a4;
    while (*v18 != 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  if (v18 > a3)
  {
    while (*v18 == 32)
    {
      if (--v18 <= a3)
      {
        uint64_t v18 = a3;
        break;
      }
    }
  }
  if (cstdlib_strchr(*(char **)(a1 + 40), *v18))
  {
    uint64_t v19 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", *v18)) {
      goto LABEL_30;
    }
    uint64_t v19 = "digit";
  }
  uint64_t v20 = loc_setFeature(*(void *)(a1 + 8), a2, "lwordendchar", a6, v19);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
LABEL_30:
  for (unint64_t i = a4; (*i | 0x20) != 0x20; ++i)
    ;
  do
  {
    int v23 = *i++;
    int v22 = v23;
  }
  while (v23 == 32);
  if (cstdlib_strchr(*(char **)(a1 + 40), v22))
  {
    int v24 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", *(i - 1))) {
      goto LABEL_39;
    }
    int v24 = "digit";
  }
  uint64_t v20 = loc_setFeature(*(void *)(a1 + 8), a2, "rwordbegchar", a6, v24);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
LABEL_39:
  if (a4 <= a3) {
    goto LABEL_45;
  }
  if (cstdlib_strchr(*(char **)(a1 + 40), *(a4 - 1)))
  {
    uint64_t v25 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", *(a4 - 1))) {
      goto LABEL_45;
    }
    uint64_t v25 = "digit";
  }
  uint64_t v20 = loc_setFeature(*(void *)(a1 + 8), a2, "lchar", a6, v25);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
LABEL_45:
  if (cstdlib_strchr(*(char **)(a1 + 40), a4[1]))
  {
    uint64_t v26 = "punc";
  }
  else
  {
    if (!cstdlib_strchr("0123456789", a4[1])) {
      goto LABEL_50;
    }
    uint64_t v26 = "digit";
  }
  uint64_t v20 = loc_setFeature(*(void *)(a1 + 8), a2, "rchar", a6, v26);
  if ((v20 & 0x80000000) != 0) {
    return v20;
  }
LABEL_50:
  uint64_t v27 = *(char **)(a1 + 40);
  if (a4 == a3)
  {
LABEL_63:
    unsigned int v36 = a4 + 1;
    __int16 v35 = "isolated";
    do
    {
      int v37 = (char)*v36;
      if (!*v36) {
        goto LABEL_70;
      }
      ++v36;
    }
    while (cstdlib_strchr(v27, v37));
    if (*(v36 - 1))
    {
      if (cstdlib_strcmp(a5, (const char *)a1)) {
        goto LABEL_71;
      }
      __int16 v35 = "start";
    }
    else
    {
      __int16 v35 = "isolated";
    }
LABEL_70:
    uint64_t v20 = loc_setFeature(*(void *)(a1 + 8), a2, "sentpos", a6, v35);
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_71;
    }
    return v20;
  }
  uint64_t v28 = a4 - 1;
  uint64_t v29 = a4 - 1;
  do
  {
    int v30 = *v29--;
    uint64_t v31 = cstdlib_strchr(v27, v30);
    if (v28 <= a3) {
      break;
    }
    uint64_t v28 = v29;
  }
  while (v31);
  if (v29 + 1 == a3 && cstdlib_strchr(v27, *a3))
  {
    uint64_t v27 = *(char **)(a1 + 40);
    goto LABEL_63;
  }
  uint64_t v32 = *(char **)(a1 + 40);
  uint64_t v33 = a4 + 1;
  do
  {
    int v34 = (char)*v33;
    if (!*v33) {
      goto LABEL_59;
    }
    ++v33;
  }
  while (cstdlib_strchr(v32, v34));
  if (!*(v33 - 1))
  {
LABEL_59:
    if (cstdlib_strcmp(a5, (const char *)(a1 + 4))) {
      goto LABEL_71;
    }
    __int16 v35 = "end";
    goto LABEL_70;
  }
LABEL_71:
  BOOL v38 = loc_bstartword(*(char **)(a1 + 40), a3, a4);
  int v39 = *(char **)(a1 + 40);
  if (!v38)
  {
    uint64_t v50 = a4 + 1;
    do
    {
      int v51 = (char)*v50;
      if (!*v50) {
        goto LABEL_99;
      }
      ++v50;
    }
    while (cstdlib_strchr(v39, v51));
    if ((*(v50 - 1) & 0xDF) == 0)
    {
LABEL_99:
      if (!cstdlib_strcmp(a5, (const char *)(a1 + 4)))
      {
        uint64_t v47 = "pos";
        unsigned __int16 v48 = "end";
LABEL_91:
        uint64_t v49 = *(void *)(a1 + 8);
        goto LABEL_92;
      }
    }
    return 0;
  }
  uint64_t v40 = a4 + 1;
  do
  {
    int v41 = (char)*v40;
    if (!*v40) {
      goto LABEL_90;
    }
    ++v40;
  }
  while (cstdlib_strchr(v39, v41));
  if ((*(v40 - 1) & 0xDF) == 0)
  {
LABEL_90:
    uint64_t v47 = "pos";
    unsigned __int16 v48 = "isolated";
    goto LABEL_91;
  }
  if (cstdlib_strcmp(a5, (const char *)a1)) {
    return 0;
  }
  uint64_t v13 = loc_setFeature(*(void *)(a1 + 8), a2, "pos", a6, "start");
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v42 = cstdlib_strstr(a4 + 1, (const char *)(a1 + 4));
  if (!v42) {
    return v13;
  }
  unint64_t v43 = (unint64_t)v42;
  if (loc_bstartword(*(char **)(a1 + 40), a3, v42) || !loc_bendword(*(char **)(a1 + 40), v43)) {
    return v13;
  }
  if (v43 <= (unint64_t)a4)
  {
    unsigned __int16 v44 = 0;
  }
  else
  {
    unsigned __int16 v44 = 0;
    do
    {
      if (*a4 == 32)
      {
        ++v44;
        do
          int v45 = *++a4;
        while (v45 == 32);
      }
      ++a4;
    }
    while ((unint64_t)a4 < v43);
  }
  if (*(unsigned __int16 *)(a1 + 32) > v44)
  {
    uint64_t v47 = "dist2end";
    unsigned __int16 v48 = "short";
    goto LABEL_91;
  }
  uint64_t v49 = *(void *)(a1 + 8);
  uint64_t v47 = "dist2end";
  if (*(unsigned __int16 *)(a1 + 34) <= v44) {
    unsigned __int16 v48 = "long";
  }
  else {
    unsigned __int16 v48 = "medium";
  }
LABEL_92:

  return loc_setFeature(v49, a2, v47, a6, v48);
}

uint64_t loc_insertMarker(uint64_t a1, uint64_t a2, unsigned int a3, char *a4)
{
  uint64_t v53 = 0;
  int v52 = 0;
  uint64_t v50 = 0;
  __s = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = *(uint64_t ***)(v5 + 24);
  unint64_t v6 = *(void *)(v5 + 32);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v13 = 0;
    unsigned int v10 = 0;
    uint64_t v9 = 0;
LABEL_16:
    if ((unint64_t)v7 >= v6)
    {
LABEL_28:
      if (v9)
      {
        HIDWORD(v53) = LDOLabel_GetAbsoluteFrom(v9);
        int v41 = *(_DWORD *)(v9 + 96);
        int v40 = *(_DWORD *)(v9 + 100);
        int v42 = LDO_AddLabelOnSubstring(a1, "MARKER", "MARKER_NLU", (unsigned int *)&v53 + 1, (unsigned int *)&v53 + 1, &v50);
        uint64_t v25 = LH_ERROR_to_VERROR(v42);
        if ((v25 & 0x80000000) == 0)
        {
          int v43 = LDOLabel_SetReferenceFrom(v50, v41);
          uint64_t v25 = LH_ERROR_to_VERROR(v43);
          if ((v25 & 0x80000000) == 0)
          {
            int v44 = LDOLabel_SetReferenceTo(v50, v40);
            uint64_t v25 = LH_ERROR_to_VERROR(v44);
            if ((v25 & 0x80000000) == 0)
            {
              int v45 = LDOObject_SetStringAttribute(v50, "STRARGS", a4);
              uint64_t v25 = LH_ERROR_to_VERROR(v45);
              if ((v25 & 0x80000000) == 0)
              {
                LDOObject_SetU32Attribute(v50, "_MTYPE", 51);
                return LH_ERROR_to_VERROR(v46);
              }
            }
          }
        }
        return v25;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 0;
      while (1)
      {
        uint64_t v21 = *v7;
        int U32Attribute = LDOObject_GetU32Attribute(*v7, "_MTYPE", &v52, &v53);
        uint64_t v13 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v13 & 0x80000000) != 0) {
          break;
        }
        if (v52 == 1)
        {
          int v23 = v53;
          HIDWORD(v53) = LDOLabel_GetAbsoluteFrom((uint64_t)v21);
          if (v23 == 51 && HIDWORD(v53) == v10)
          {
            int v20 = 1;
            uint64_t v19 = v21;
          }
        }
        if ((unint64_t)++v7 >= *(void *)(*(void *)(a1 + 32) + 32))
        {
          if (!v20) {
            goto LABEL_28;
          }
          int StringAttribute = LDOObject_GetStringAttribute(v19, "STRARGS", &v52, (uint64_t *)&__s);
          uint64_t v25 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v25 & 0x80000000) == 0)
          {
            if (v52)
            {
              uint64_t v30 = *(void *)(a2 + 8);
              int v31 = cstdlib_strlen(a4);
              int v32 = cstdlib_strlen(__s);
              uint64_t v33 = (char *)heap_Alloc(v30, (v31 + v32 + 2));
              if (v33)
              {
                BOOL v38 = v33;
                cstdlib_strcpy(v33, __s);
                cstdlib_strcat(v38, ";");
                cstdlib_strcat(v38, a4);
                int v39 = LDOObject_SetStringAttribute((uint64_t)v19, "STRARGS", v38);
                uint64_t v13 = LH_ERROR_to_VERROR(v39);
                heap_Free(*(void **)(a2 + 8), (uint64_t)v38);
              }
              else
              {
                log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v34, v35, v36, v37, a2);
                return 2702188554;
              }
            }
            else
            {
              uint64_t v13 = 2702188544;
              log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76003, 0, v26, v27, v28, v29, a2);
            }
            return v13;
          }
          return v25;
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    while (1)
    {
      uint64_t v11 = *v7;
      int v12 = LDOObject_GetU32Attribute(*v7, "_MTYPE", &v52, &v53);
      uint64_t v13 = LH_ERROR_to_VERROR(v12);
      if ((v13 & 0x80000000) != 0) {
        break;
      }
      if (v52 == 1)
      {
        int v14 = v53;
        AbsoluteFrouint64_t m = LDOLabel_GetAbsoluteFrom((uint64_t)v11);
        HIDWORD(v53) = AbsoluteFrom;
        if (v14 == 1 && AbsoluteFrom <= a3)
        {
          unsigned int v10 = AbsoluteFrom;
          uint64_t v9 = (uint64_t)v11;
        }
      }
      ++v7;
      uint64_t v18 = *(void *)(a1 + 32);
      unint64_t v6 = *(void *)(v18 + 32);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v7 = *(uint64_t ***)(v18 + 24);
        goto LABEL_16;
      }
    }
  }
  return v13;
}

uint64_t statpunc_v2_readIGTree(_WORD *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)int v39 = 0;
  int v40 = 0;
  uint64_t Str = paramc_ParamGetStr(*(void *)(a3 + 40), (uint64_t)"langcode", &v40);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  cstdlib_strcpy(__dst, "statpunc_");
  cstdlib_strcat(__dst, a4);
  int v11 = brokeraux_ComposeBrokerString(a3, __dst, 0, 1, v40, 0, 0, v41, 0x100uLL);
  if (v11 < 0) {
    return v11 | 0xA1102000;
  }
  uint64_t Str = ssftriff_reader_ObjOpen(a1, a2, 2, v41, "IGTR", 1031, (uint64_t *)v39);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  int v12 = (char *)heap_Calloc(*(void **)(a3 + 8), 1, 1600);
  *(void *)(a5 + 8) = v12;
  if (!v12)
  {
    log_OutPublic(*(void *)(a3 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v13, v14, v15, v16, v38);
    return 2702188554;
  }
  uint64_t Str = igtree_Init(a1, a2, *(uint64_t *)v39, v12);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v24 = ssftriff_reader_ObjClose(*(void **)v39, v17, v18, v19, v20, v21, v22, v23);
  if ((v24 & 0x80000000) == 0)
  {
    *(void *)(a5 + 16) = 0;
    *(void *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 393219;
    *(void *)(a5 + 40) = ":;.!?()[]{}#\"',-<>";
    uint64_t v25 = *(void *)(a5 + 8);
    if (*(_DWORD *)(v25 + 1336))
    {
      unsigned __int16 v26 = 0;
      do
      {
        uint64_t v27 = v26;
        uint64_t v28 = 16 * v26;
        int v29 = cstdlib_strcmp(*(const char **)(*(void *)(v25 + 1328) + v28), "leftcollocation");
        uint64_t v30 = *(void *)(*(void *)(a5 + 8) + 1328);
        if (v29)
        {
          int v31 = cstdlib_strcmp(*(const char **)(v30 + v28), "rightcollocation");
          uint64_t v32 = *(void *)(*(void *)(a5 + 8) + 1328);
          if (v31)
          {
            int v33 = cstdlib_strcmp(*(const char **)(v32 + v28), "dist2endmaxshort");
            uint64_t v34 = *(void *)(*(void *)(a5 + 8) + 1328);
            if (v33)
            {
              int v35 = cstdlib_strcmp(*(const char **)(v34 + v28), "dist2endminlong");
              uint64_t v36 = *(void *)(*(void *)(a5 + 8) + 1328);
              if (v35)
              {
                if (!cstdlib_strcmp(*(const char **)(v36 + v28), "punctuation")) {
                  *(void *)(a5 + 40) = *(void *)(*(void *)(*(void *)(a5 + 8) + 1328) + 16 * v27 + 8);
                }
              }
              else
              {
                *(_WORD *)(a5 + 34) = cstdlib_atoi(*(unsigned __int8 **)(v36 + 16 * v27 + 8));
              }
            }
            else
            {
              *(_WORD *)(a5 + 32) = cstdlib_atoi(*(unsigned __int8 **)(v34 + 16 * v27 + 8));
            }
          }
          else
          {
            *(void *)(a5 + 24) = *(void *)(v32 + 16 * v27 + 8);
          }
        }
        else
        {
          *(void *)(a5 + 16) = *(void *)(v30 + 16 * v27 + 8);
        }
        unsigned __int16 v26 = v27 + 1;
        uint64_t v25 = *(void *)(a5 + 8);
      }
      while (*(_DWORD *)(v25 + 1336) > (unsigned __int16)(v27 + 1));
    }
  }
  return v24;
}

uint64_t statpunc_v2_freeIGTree(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = igtree_Deinit(a1, a2);
  if ((v4 & 0x80000000) == 0) {
    heap_Free(*(void **)(a1 + 8), a2);
  }
  return v4;
}

uint64_t statpunc_v2_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v51 = 0;
  __src = 0;
  uint64_t v50 = 0;
  int v8 = LDO_ComputeText(a2, &v50);
  uint64_t inserted = LH_ERROR_to_VERROR(v8);
  if ((inserted & 0x80000000) == 0)
  {
    uint64_t v49 = (char *)LHString_BorrowCPtr(v50);
    unsigned int v10 = loc_strpunc(v49, (const char *)a4, (const char *)(a4 + 4), &v51);
    if (v10)
    {
      __int16 v11 = 0;
      do
      {
        ++v11;
        unsigned int v10 = loc_strpunc(v10 + 1, (const char *)a4, (const char *)(a4 + 4), &v51);
      }
      while (v10);
      if (v11)
      {
        uint64_t v46 = a2;
        unsigned __int16 v48 = loc_strpunc(v49, (const char *)a4, (const char *)(a4 + 4), &v51);
        if (v48)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v47 = a3;
          while (1)
          {
            if (!v16)
            {
              log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 5, 0, (uint64_t)"traceFeatureVector %s", v12, v13, v14, (uint64_t)v49);
              uint64_t v16 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int8 *)(*(void *)(a4 + 8) + 1296) - 8);
              if (!v16)
              {
                uint64_t inserted = 2702188554;
                log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v17, v18, v19, v20, v44);
                goto LABEL_45;
              }
            }
            uint64_t v21 = *(void *)(a4 + 8);
            if (*(unsigned char *)(v21 + 1296) != 1)
            {
              int v45 = v15;
              uint64_t v22 = 0;
              uint64_t v23 = 8 * (unsigned __int16)(*(unsigned __int8 *)(v21 + 1296) - 1) - 8;
              do
              {
                if (!*(void *)(v16 + v22))
                {
                  uint64_t v24 = heap_Calloc(*(void **)(a1 + 8), 1, 65);
                  *(void *)(v16 + v22) = v24;
                  if (!v24)
                  {
                    uint64_t inserted = 2702188554;
                    log_OutPublic(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v25, v26, v27, v28, v44);
                    a3 = v47;
                    goto LABEL_39;
                  }
                }
                uint64_t v29 = loc_setFeature(v21, a1, *(char **)(*(void *)(v21 + 1312) + v22), v16, "_");
                uint64_t inserted = v29;
                if ((v29 & 0x80000000) != 0) {
                  break;
                }
                BOOL v30 = v23 == v22;
                v22 += 8;
              }
              while (!v30);
              a3 = v47;
              uint64_t v15 = v45;
              if ((v29 & 0x80000000) != 0) {
                goto LABEL_39;
              }
            }
            uint64_t Features = loc_extractFeatures(a4, a1, v49, v48, v51, v16);
            if ((Features & 0x80000000) != 0) {
              break;
            }
            if (v15)
            {
              uint64_t Features = loc_setFeature(*(void *)(a4 + 8), a1, "startpred", v16, v15);
              if ((Features & 0x80000000) != 0) {
                break;
              }
            }
            uint64_t Features = igtree_Process(*(void *)(a4 + 8), v16, &__src);
            if ((Features & 0x80000000) != 0) {
              break;
            }
            uint64_t v32 = 0;
            while (cstdlib_strcmp("pos", loc_feature_names[v32]))
            {
              if (++v32 == 9)
              {
                int v33 = 0;
                goto LABEL_27;
              }
            }
            int v33 = *(const char **)(v16 + v32 * 8);
LABEL_27:
            if (cstdlib_strcmp(v33, "start")) {
              uint64_t v34 = (char *)v15;
            }
            else {
              uint64_t v34 = __src;
            }
            uint64_t v35 = *(void *)(a4 + 8);
            cstdlib_strncpy(__dst, __src, 0x100uLL);
            __dst[255] = 0;
            if (*(unsigned __int8 *)(v35 + 1296) >= 2u)
            {
              uint64_t v39 = 0;
              do
              {
                size_t v40 = cstdlib_strlen(*(const char **)(v16 + 8 * v39));
                if (v40 + cstdlib_strlen(__dst) + 2 > 0xFF) {
                  break;
                }
                cstdlib_strcat(__dst, " ");
                cstdlib_strcat(__dst, *(const char **)(v16 + 8 * v39++));
              }
              while (*(unsigned __int8 *)(v35 + 1296) - 1 > (int)v39);
            }
            log_OutText(*(void *)(a1 + 32), (uint64_t)"FE_PUNCSPTN_V2", 5, 0, (uint64_t)"traceFeatureVector %s", v36, v37, v38, (uint64_t)__dst);
            uint64_t inserted = loc_insertMarker(v46, a1, (unsigned __int16)((_WORD)v48 - (_WORD)v49), __src);
            uint64_t v15 = v34;
            a3 = v47;
            if ((inserted & 0x80000000) == 0)
            {
              unsigned __int16 v48 = loc_strpunc(v48 + 1, (const char *)a4, (const char *)(a4 + 4), &v51);
              if (v48) {
                continue;
              }
            }
            goto LABEL_39;
          }
          uint64_t inserted = Features;
LABEL_39:
          if (*(unsigned char *)(*(void *)(a4 + 8) + 1296) != 1)
          {
            uint64_t v41 = (unsigned __int16)(*(unsigned __int8 *)(*(void *)(a4 + 8) + 1296) - 1);
            int v42 = (uint64_t *)v16;
            do
            {
              if (*v42) {
                heap_Free(*(void **)(a1 + 8), *v42);
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          heap_Free(*(void **)(a1 + 8), v16);
        }
      }
    }
  }
LABEL_45:
  if (v50) {
    OOC_PlacementDeleteObject(a3, v50);
  }
  return inserted;
}

char *loc_strpunc(char *a1, const char *a2, const char *a3, const char **a4)
{
  int v8 = cstdlib_strstr(a1, a2);
  uint64_t result = cstdlib_strstr(a1, a3);
  if (v8)
  {
    if (v8 <= result) {
      unsigned int v10 = a2;
    }
    else {
      unsigned int v10 = a3;
    }
    if (v8 <= result) {
      __int16 v11 = v8;
    }
    else {
      __int16 v11 = result;
    }
    if (result) {
      a3 = v10;
    }
    else {
      a3 = a2;
    }
    if (result) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = v8;
    }
  }
  else if (!result)
  {
    return result;
  }
  *a4 = a3;
  return result;
}

uint64_t loc_setFeature(uint64_t a1, uint64_t a2, char *__s1, uint64_t a4, const char *a5)
{
  if (*(unsigned __int8 *)(a1 + 1296) < 2u) {
    return 0;
  }
  uint64_t v10 = 0;
  while (cstdlib_strcmp(__s1, *(const char **)(*(void *)(a1 + 1312) + 8 * v10)))
  {
    if (*(unsigned __int8 *)(a1 + 1296) - 1 <= (unsigned __int16)++v10) {
      return 0;
    }
  }
  if (!cstdlib_strcmp(a5, ""))
  {
    uint64_t v12 = *(char **)(a4 + 8 * v10);
    uint64_t v17 = "_";
LABEL_13:
    cstdlib_strcpy(v12, v17);
    return 0;
  }
  if (cstdlib_strlen(a5) <= 0x40)
  {
    uint64_t v12 = *(char **)(a4 + 8 * v10);
    goto LABEL_12;
  }
  unsigned __int16 v11 = cstdlib_strlen(a5);
  uint64_t v12 = (char *)heap_Realloc(*(uint64_t **)(a2 + 8), *(void *)(a4 + 8 * v10), v11 + 1);
  if (v12)
  {
    *(void *)(a4 + 8 * v10) = v12;
LABEL_12:
    uint64_t v17 = a5;
    goto LABEL_13;
  }
  log_OutPublic(*(void *)(a2 + 32), (uint64_t)"FE_PUNCSPTN_V2", 76000, 0, v13, v14, v15, v16, v19);
  return 2702188554;
}

BOOL loc_bstartword(char *__s, char *a2, char *a3)
{
  if (a3 == a2) {
    return 1;
  }
  unint64_t v3 = a3;
  do
  {
    int v6 = *--v3;
    uint64_t v7 = cstdlib_strchr(__s, v6);
  }
  while (v3 > a2 && v7);
  int v8 = *v3;
  return v8 == 32 || v3 == a2 && cstdlib_strchr(__s, v8);
}

BOOL loc_bendword(char *__s, uint64_t a2)
{
  unint64_t v3 = (unsigned char *)(a2 + 1);
  while (1)
  {
    int v4 = (char)*v3;
    if (!*v3) {
      break;
    }
    ++v3;
    if (!cstdlib_strchr(__s, v4)) {
      return (*(v3 - 1) & 0xDF) == 0;
    }
  }
  return 1;
}

uint64_t puncsptn_v2_dump_ldo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0;
  int v7 = LDO_ToString(a3, &v18);
  uint64_t v11 = LH_ERROR_to_VERROR(v7);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v16 = "Call to MSG_LDO_ToString failed, returning";
  }
  else
  {
    log_OutText(a1, a2, 5, 0, (uint64_t)"LDO contents: begin", v8, v9, v10, 0);
    uint64_t v12 = LHString_BorrowCPtr(v18);
    log_OutText(a1, a2, 5, 0, (uint64_t)"%s", v13, v14, v15, v12);
    uint64_t v16 = "LDO contents: end";
  }
  log_OutText(a1, a2, 5, 0, (uint64_t)v16, v8, v9, v10, 0);
  if (v18) {
    OOC_PlacementDeleteObject(a4, v18);
  }
  return v11;
}

uint64_t puncsptn_v2_process_ldo_with_lua(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"LDO before calling %s in LuaVM", a6, a7, a8, (uint64_t)"runPuncsptnV2");
  uint64_t v13 = puncsptn_v2_dump_ldo(*(void *)(a1 + 32), a2, a3, a4);
  if ((v13 & 0x80000000) != 0) {
    return v13;
  }
  int v14 = LuaVMLDO_RunFunction(a5, (uint64_t)"runPuncsptnV2", a3);
  uint64_t v19 = LH_ERROR_to_VERROR(v14);
  uint64_t v20 = *(void *)(a1 + 32);
  if ((v19 & 0x80000000) != 0)
  {
    log_OutPublic(v20, a2, 76002, 0, v15, v16, v17, v18, v23);
    return v19;
  }
  log_OutText(v20, a2, 5, 0, (uint64_t)"LDO after calling %s in LuaVM", v16, v17, v18, (uint64_t)"runPuncsptnV2");
  uint64_t v21 = *(void *)(a1 + 32);

  return puncsptn_v2_dump_ldo(v21, a2, a3, a4);
}

uint64_t puncsptn_v2_deallocate_LuaVM(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (v3)
  {
    uint64_t result = OOC_PlacementDeleteObject(result, v3);
    *a2 = 0;
  }
  return result;
}

uint64_t puncsptn_v2_reload_lua_code(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  uint64_t v27 = 0;
  *a6 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v27);
  if ((inited & 0x80000000) != 0)
  {
    uint64_t v17 = inited;
  }
  else
  {
    if (*a5)
    {
      OOC_PlacementDeleteObject(a4, *a5);
      *a5 = 0;
    }
    int IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(a1, a2, 0, a6);
    uint64_t v17 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
    if ((v17 & 0x80000000) == 0)
    {
      if (*a6 != 1)
      {
        uint64_t v23 = *(void *)(v27 + 32);
        goto LABEL_13;
      }
      *a6 = 0;
      int v18 = PNEW_LuaVMLDO_Con(a4, a4, (uint64_t)a1, a2, (uint64_t)"FE_PUNCSPTN_V2", (uint64_t **)a5);
      uint64_t v19 = LH_ERROR_to_VERROR(v18);
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t v17 = v19;
        uint64_t v25 = "Unable to create LuaVM";
      }
      else
      {
        int ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*a5, 0);
        uint64_t v21 = LH_ERROR_to_VERROR(ScriptFromRIFF);
        if ((v21 & 0x80000000) != 0)
        {
          uint64_t v17 = v21;
          uint64_t v25 = "Unable to load Lua code from RIFF";
        }
        else
        {
          int IsLuaFunctionAvailable = LuaVMLDO_IsLuaFunctionAvailable(*a5, (uint64_t)"runPuncsptnV2", a6);
          uint64_t v17 = LH_ERROR_to_VERROR(IsLuaFunctionAvailable);
          if ((v17 & 0x80000000) == 0)
          {
            uint64_t v23 = *(void *)(v27 + 32);
            if (*a6 == 1)
            {
              uint64_t v24 = "Lua code found and loaded";
              goto LABEL_14;
            }
LABEL_13:
            uint64_t v24 = "No Lua code found";
LABEL_14:
            log_OutText(v23, a3, 5, 0, (uint64_t)v24, v14, v15, v16, 0);
            if (*a6) {
              return v17;
            }
            goto LABEL_20;
          }
          uint64_t v25 = "Unable to determine if Lua entry point function is present";
        }
      }
      log_OutText(*(void *)(v27 + 32), a3, 5, 0, (uint64_t)v25, v14, v15, v16, 0);
    }
  }
LABEL_20:
  if (*a5)
  {
    OOC_PlacementDeleteObject(a4, *a5);
    *a5 = 0;
  }
  return v17;
}

uint64_t initSolutionList(uint64_t a1)
{
  uint64_t v2 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 48);
  *(void *)(a1 + 360) = v2;
  if (v2)
  {
    *(_DWORD *)(a1 + 368) = 3;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v8);
    return TOKENTNERROR(10);
  }
}

void *freeSolutionList(void *result)
{
  unsigned __int8 v1 = result;
  uint64_t v2 = result[45];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[45] = 0;
  }
  *((_DWORD *)v1 + 92) = 0;
  return result;
}

uint64_t resetSolutionList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    goto LABEL_7;
  }
  __int16 v3 = a2;
  if (a2 <= 3 && (a2 != 3 || *(unsigned __int16 *)(a1 + 368) < 4u)) {
    goto LABEL_7;
  }
  uint64_t v4 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 360), 12 * a2 + 12);
  if (v4)
  {
    *(void *)(a1 + 360) = v4;
    *(_WORD *)(a1 + 368) = v3;
LABEL_7:
    *(_WORD *)(a1 + 370) = 0;
    return 0;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v5, v6, v7, v8, v10);

  return TOKENTNERROR(10);
}

uint64_t initMatchList(uint64_t a1)
{
  uint64_t v2 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 32);
  *(void *)(a1 + 376) = v2;
  if (v2)
  {
    *(_DWORD *)(a1 + 384) = 3;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v8);
    return TOKENTNERROR(10);
  }
}

void *freeMatchList(void *result)
{
  unsigned __int8 v1 = result;
  uint64_t v2 = result[47];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[47] = 0;
  }
  *((_DWORD *)v1 + 96) = 0;
  return result;
}

uint64_t resetMatchList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    goto LABEL_7;
  }
  __int16 v3 = a2;
  if (a2 <= 3 && (a2 != 3 || *(unsigned __int16 *)(a1 + 384) < 4u)) {
    goto LABEL_7;
  }
  uint64_t v4 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 376), 8 * a2 + 8);
  if (v4)
  {
    *(void *)(a1 + 376) = v4;
    *(_WORD *)(a1 + 384) = v3;
LABEL_7:
    *(_WORD *)(a1 + 386) = 0;
    return 0;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v5, v6, v7, v8, v10);

  return TOKENTNERROR(10);
}

uint64_t initAlignmentData(uint64_t a1)
{
  uint64_t v2 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 2 * *(unsigned __int16 *)(a1 + 314) + 2);
  *(void *)(a1 + 536) = v2;
  if (v2
    && (*(_WORD *)(a1 + 544) = 0,
        uint64_t v7 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 2 * *(unsigned __int16 *)(a1 + 314) + 2),
        (*(void *)(a1 + 520) = v7) != 0))
  {
    *(_WORD *)(a1 + 528) = 0;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v3, v4, v5, v6, v9);
    return TOKENTNERROR(10);
  }
}

void *freeAlignmentData(void *result)
{
  unsigned __int8 v1 = result;
  uint64_t v2 = result[67];
  if (v2)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v2);
    v1[67] = 0;
  }
  *((_WORD *)v1 + 272) = 0;
  uint64_t v3 = v1[65];
  if (v3)
  {
    uint64_t result = heap_Free(*(void **)(*v1 + 8), v3);
    v1[65] = 0;
  }
  *((_WORD *)v1 + 264) = 0;
  return result;
}

uint64_t resetAlignmentData(uint64_t result)
{
  *(_WORD *)(result + 528) = 0;
  *(_WORD *)(result + 544) = 0;
  return result;
}

uint64_t initStrRes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int16 *)(a1 + 280);
  *(_WORD *)(a2 + 12) = v4;
  uint64_t v5 = (unsigned char *)heap_Calloc(*(void **)(*(void *)a1 + 8), 1, v4);
  *(void *)a2 = v5;
  if (v5)
  {
    *uint64_t v5 = 0;
    *(_DWORD *)(a2 + 8) = *(unsigned __int16 *)(a2 + 12);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v6, v7, v8, v9, v11);
    return TOKENTNERROR(10);
  }
}

uint64_t resetStrRes(uint64_t *a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 8) <= v3) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = reallocStrRes(a1, a2, v3);
  }
  if (*(void *)a2)
  {
    **(unsigned char **)a2 = 0;
    *(_WORD *)(a2 + 10) = 0;
  }
  return result;
}

uint64_t reallocStrRes(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  uint64_t v6 = heap_Realloc(*(uint64_t **)(*a1 + 8), *(void *)a2, a3 + 1);
  if (v6)
  {
    *(void *)a2 = v6;
    *(_WORD *)(a2 + 8) = v3;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v7, v8, v9, v10, v12);
    return TOKENTNERROR(10);
  }
}

uint64_t growStrRes(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(a2 + 8) <= a3) {
    return reallocStrRes(a1, a2, a3);
  }
  else {
    return 0;
  }
}

void *clearStrRes(void *result, uint64_t a2)
{
  if (*(_WORD *)(a2 + 8))
  {
    uint64_t v3 = *(void *)a2;
    if (*(void *)a2)
    {
      uint64_t result = heap_Free((void *)result[1], v3);
      *(void *)a2 = 0;
    }
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t add2StringV2(uint64_t *a1, uint64_t a2, char *__s)
{
  if (!__s) {
    return 0;
  }
  if (!*__s) {
    return 0;
  }
  unsigned __int16 v6 = cstdlib_strlen(__s);
  unsigned __int16 v7 = v6;
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a2 + 10) + v6 >= v8)
  {
    uint64_t result = reallocStrRes(a1, a2, (unsigned __int16)(v8 + v6));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!*(_WORD *)(a2 + 10)) {
      **(unsigned char **)a2 = 0;
    }
  }
  cstdlib_strcat(*(char **)a2, __s);
  uint64_t result = 0;
  *(_WORD *)(a2 + 10) += v7;
  return result;
}

uint64_t add2StringV3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a3 + 10);
  if (!*(_WORD *)(a3 + 10)) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  if (*(unsigned __int16 *)(a2 + 10) + v3 >= v6)
  {
    uint64_t result = reallocStrRes(a1, a2, (unsigned __int16)(v6 + v3));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!*(_WORD *)(a2 + 10)) {
      **(unsigned char **)a2 = 0;
    }
  }
  cstdlib_strcat(*(char **)a2, *(const char **)a3);
  uint64_t result = 0;
  *(_WORD *)(a2 + 10) += *(_WORD *)(a3 + 10);
  return result;
}

uint64_t add2StringV4(uint64_t *a1, uint64_t a2, unsigned int a3, __int16 a4)
{
  unsigned __int16 v7 = a4 - a3;
  if (*(unsigned __int16 *)(a2 + 10) + (unsigned __int16)(a4 - a3) >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t result = reallocStrRes(a1, a2, (unsigned __int16)(*(_WORD *)(a2 + 10) + a4 - a3));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    if (!*(_WORD *)(a2 + 10)) {
      **(unsigned char **)a2 = 0;
    }
  }
  cstdlib_strncat(*(char **)a2, (const char *)(a1[38] + a3), v7);
  uint64_t result = 0;
  *(_WORD *)(a2 + 10) += v7;
  return result;
}

uint64_t add2StringV5(uint64_t *a1, uint64_t a2, char *__s)
{
  if (!__s) {
    return 0;
  }
  if (!*__s) {
    return 0;
  }
  unsigned __int16 v6 = cstdlib_strlen(__s);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 10);
  if (v7 + v6 + 1 >= *(unsigned __int16 *)(a2 + 8))
  {
    uint64_t result = reallocStrRes(a1, a2, (unsigned __int16)(v7 + v6 + 1));
    if ((result & 0x80000000) != 0) {
      return result;
    }
    unsigned int v7 = *(unsigned __int16 *)(a2 + 10);
    if (!*(_WORD *)(a2 + 10))
    {
      **(unsigned char **)a2 = 0;
      unsigned int v7 = *(unsigned __int16 *)(a2 + 10);
    }
  }
  cstdlib_memcpy((void *)(*(void *)a2 + v7), __s, v6);
  uint64_t result = 0;
  *(unsigned char *)(*(void *)a2 + *(unsigned __int16 *)(a2 + 10) + (unint64_t)v6) = 0;
  *(_WORD *)(a2 + 10) += v6 + 1;
  return result;
}

uint64_t TOK_IS_PUNCT(const char *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  size_t v2 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)a1);
  cstdlib_strncpy(v5, a1, v2);
  v5[v2] = 0;
  unsigned int v3 = cstdlib_strlen(v5);
  uint64_t result = utf8_BelongsToSet(0xAu, v5, 0, v3);
  if (result != 1)
  {
    uint64_t result = utf8_BelongsToSet(0xBu, v5, 0, v3);
    if (result != 1)
    {
      uint64_t result = utf8_BelongsToSet(0xCu, v5, 0, v3);
      if (result != 1) {
        return utf8_BelongsToSet(0xDu, v5, 0, v3) == 1;
      }
    }
  }
  return result;
}

uint64_t TOK_IS_ALPHANUM(const char *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  size_t v2 = (unsigned __int16)utf8_determineUTF8CharLength(*(unsigned __int8 *)a1);
  cstdlib_strncpy(v5, a1, v2);
  v5[v2] = 0;
  unsigned int v3 = cstdlib_strlen(v5);
  if (utf8_strchr(g_szSpace_0, v5)) {
    return 0;
  }
  uint64_t result = utf8_BelongsToSet(9u, v5, 0, v3);
  if (result != 1) {
    return 0;
  }
  return result;
}

uint64_t TOK_COUNT_SP_WORDS(const char *a1)
{
  if (a1 && (unsigned int v2 = cstdlib_strlen(a1)) != 0)
  {
    unsigned int v3 = 0;
    unsigned __int16 v4 = 0;
    do
    {
      if (utf8_strchr(g_szSpace_0, &a1[v3]))
      {
        while (v3 < v2 && utf8_strchr(g_szSpace_0, &a1[v3]))
          v3 += utf8_determineUTF8CharLength(a1[v3]);
      }
      else
      {
        ++v4;
        while (v3 < v2 && !utf8_strchr(g_szSpace_0, &a1[v3]))
          v3 += utf8_determineUTF8CharLength(a1[v3]);
      }
    }
    while (v3 < v2);
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t tokenRecordReadFieldLD_T_FROMPOS(void *a1, uint64_t a2, uint64_t a3)
{
  int v14 = 0;
  int v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 1, (char *)&v14 + 2);
  uint64_t v11 = 24031;
  if ((v6 & 0x80000000) == 0 && HIWORD(v14) == 1)
  {
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 1, 1, a3, &v14);
    if ((unsigned __int16)v14 == 1) {
      return 0;
    }
    uint64_t v11 = 24030;
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], v11, 0, v7, v8, v9, v10, v13);
  return TOKENTNERROR(0);
}

uint64_t tokenRecordReadFieldLD_T_TOPOS(void *a1, uint64_t a2, uint64_t a3)
{
  int v14 = 0;
  int v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 2, (char *)&v14 + 2);
  uint64_t v11 = 24030;
  if ((v6 & 0x80000000) == 0 && HIWORD(v14) == 1)
  {
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 2, 1, a3, &v14);
    if ((unsigned __int16)v14 == 1) {
      return 0;
    }
    uint64_t v11 = 24031;
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], v11, 0, v7, v8, v9, v10, v13);
  return TOKENTNERROR(0);
}

uint64_t tokenRecordReadFieldLD_T_TYPE(void *a1, uint64_t a2, uint64_t a3)
{
  int v13 = 0;
  int v6 = (*(uint64_t (**)(void, void, uint64_t, void, char *))(a1[8] + 184))(a1[9], a1[10], a2, 0, (char *)&v13 + 2);
  uint64_t result = 0;
  if ((v6 & 0x80000000) == 0 && HIWORD(v13) == 1)
  {
    (*(void (**)(void, void, uint64_t, void, uint64_t, uint64_t, int *))(a1[8] + 168))(a1[9], a1[10], a2, 0, 1, a3, &v13);
    uint64_t result = 0;
    if ((unsigned __int16)v13 != 1)
    {
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24032, 0, v8, v9, v10, v11, v12);
      return TOKENTNERROR(0);
    }
  }
  return result;
}

uint64_t tokenRecordReadFieldLD_T_TNTAG(void *a1, uint64_t a2, unsigned char *a3)
{
  int v7 = 0;
  *a3 = 0;
  if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 4, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, unsigned char *, int *))(a1[8] + 168))(a1[9], a1[10], a2, 4, 32, a3, &v7);
  }
  return 0;
}

uint64_t tokenRecordReadFieldLD_T_LANGMAP(void *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 0;
  if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 6, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, int *))(a1[8] + 176))(a1[9], a1[10], a2, 6, a3, &v7);
  }
  return 0;
}

uint64_t tokenRecordDirectReadFieldLD_T_NORM(void *a1, uint64_t a2, void *a3)
{
  int v7 = 0;
  *a3 = 0;
  if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, char *))(a1[8] + 184))(a1[9], a1[10], a2, 3, (char *)&v7 + 2) & 0x80000000) == 0&& HIWORD(v7) == 1)
  {
    (*(void (**)(void, void, uint64_t, uint64_t, void *, int *))(a1[8] + 176))(a1[9], a1[10], a2, 3, a3, &v7);
  }
  return 0;
}

uint64_t partialMatchFoundInBasicToken(uint64_t result, __int16 *a2)
{
  uint64_t v15 = 0;
  if (result)
  {
    unsigned int v2 = (uint64_t *)result;
    uint64_t v3 = *(void *)(*(void *)(result + 264) + 16);
    for (unint64_t i = *(uint64_t **)(v3 + 80); (unint64_t)i < *(void *)(v3 + 88); ++i)
    {
      unsigned __int16 __s1 = 0;
      int v6 = LDOTreeNode_ComputeAbsoluteFrom(*i, (_DWORD *)&v15 + 1);
      if ((LH_ERROR_to_VERROR(v6) & 0x80000000) != 0) {
        break;
      }
      int v7 = LDOTreeNode_ComputeAbsoluteTo(*i, &v15);
      if ((LH_ERROR_to_VERROR(v7) & 0x80000000) != 0) {
        break;
      }
      int Type = LDOObject_GetType(*i, (uint64_t *)&__s1);
      if ((LH_ERROR_to_VERROR(Type) & 0x80000000) != 0) {
        break;
      }
      if (!cstdlib_strcmp(__s1, "TOKEN_ALPHA")
        || !cstdlib_strcmp(__s1, "TOKEN_DIGIT")
        || !cstdlib_strcmp(__s1, "TOKEN_PUNCT")
        || !cstdlib_strcmp(__s1, "TOKEN_WSPACE"))
      {
        uint64_t v12 = *a2;
        if (__PAIR64__((__int16)v15, SWORD2(v15)) != __PAIR64__(a2[1], v12))
        {
          if (SWORD2(v15) >= (int)v12)
          {
            __int16 v13 = a2[1];
          }
          else
          {
            __int16 v13 = a2[1];
            if ((int)v12 < (__int16)v15) {
              goto LABEL_20;
            }
          }
          if (SWORD2(v15) < v13 && v13 < (__int16)v15)
          {
LABEL_20:
            log_OutText(*(void *)(*v2 + 32), v2[23], 5, 0, (uint64_t)"Regex match %d,%d bisects basic token %d,%d", v9, v10, v11, v12);
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t dumpTokenRecordsInLingDB(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned __int16 v34 = 0;
  unsigned __int16 v33 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v29 = 0;
  unsigned int v30 = 0;
  if (!a1) {
    goto LABEL_28;
  }
  if (!a1[38])
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v27);
LABEL_28:
    return TOKENTNERROR(7);
  }
  if (a3 == 1) {
    uint64_t v9 = "<LOGFE> ";
  }
  else {
    uint64_t v9 = "";
  }
  cstdlib_strcpy(__dst, v9);
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"%stokentn : dumpTokenRecordsInLingDB : Begin : %s", v10, v11, v12, (uint64_t)__dst);
  uint64_t FieldLD_T_FROMPOS = (*(uint64_t (**)(void, void, uint64_t, void, unsigned __int16 *))(a1[8] + 104))(a1[9], a1[10], 1, 0, &v34);
  if ((FieldLD_T_FROMPOS & 0x80000000) != 0)
  {
LABEL_31:
    uint64_t FieldLD_T_TYPE = FieldLD_T_FROMPOS;
  }
  else
  {
    uint64_t FieldLD_T_TYPE = (*(uint64_t (**)(void, void, uint64_t, void, unsigned __int16 *))(a1[8] + 104))(a1[9], a1[10], 3, v34, &v33);
    if (!FieldLD_T_TYPE)
    {
      unsigned __int16 v18 = v33;
      if (v33)
      {
        while (1)
        {
          uint64_t FieldLD_T_FROMPOS = tokenRecordReadFieldLD_T_FROMPOS(a1, v18, (uint64_t)&v29 + 2);
          if ((FieldLD_T_FROMPOS & 0x80000000) != 0) {
            goto LABEL_31;
          }
          uint64_t FieldLD_T_FROMPOS = tokenRecordReadFieldLD_T_TOPOS(a1, v33, (uint64_t)&v29);
          if ((FieldLD_T_FROMPOS & 0x80000000) != 0) {
            goto LABEL_31;
          }
          uint64_t FieldLD_T_TYPE = tokenRecordReadFieldLD_T_TYPE(a1, v33, (uint64_t)&v30);
          if ((FieldLD_T_TYPE & 0x80000000) != 0) {
            goto LABEL_32;
          }
          if (v30 - 5 <= 1)
          {
            tokenRecordReadFieldLD_T_TNTAG(a1, v33, v36);
            if (v30 == 6)
            {
              tokenRecordDirectReadFieldLD_T_NORM(a1, v33, &v31);
              tokenRecordReadFieldLD_T_LANGMAP(a1, v33, (uint64_t)&v32);
            }
            uint64_t FieldLD_T_TYPE = 0;
          }
          if ((unsigned __int16)v29 < HIWORD(v29)) {
            break;
          }
          if ((unsigned __int16)v29 > *((unsigned __int16 *)a1 + 156))
          {
            log_OutPublic(*(void *)(*a1 + 32), a1[23], 24055, (uint64_t)"%s%d%s%d", v19, v14, v15, v16, "toPos=");
            return TOKENTNERROR(0);
          }
          cstdlib_strncpy((char *)a1[69], (const char *)(a1[38] + HIWORD(v29)), (unsigned __int16)v29 - (unint64_t)HIWORD(v29));
          *(unsigned char *)(a1[69] - HIWORD(v29) + (unsigned __int16)v29) = 0;
          if (v30 > 4)
          {
            if (v30 == 5)
            {
              log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d ESC(%-9s) \"%s\" ", v20, v21, v22, (uint64_t)__dst);
            }
            else if (v30 == 6)
            {
              log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d %-15s \"%s\" \"%s\" langMap=\"%s\"", v20, v21, v22, (uint64_t)__dst);
            }
          }
          else
          {
            uint64_t v28 = 0;
            (*(void (**)(void, void, void, uint64_t *))(a1[8] + 264))(a1[9], a1[10], (unsigned __int16)v30, &v28);
            log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"%s[dbId=%d] %3d,%3d %-15s \"%s\"", v23, v24, v25, (uint64_t)__dst);
          }
          if (!(*(unsigned int (**)(void, void, void, unsigned __int16 *))(a1[8] + 120))(a1[9], a1[10], v33, &v33))
          {
            unsigned __int16 v18 = v33;
            if (v33) {
              continue;
            }
          }
          goto LABEL_32;
        }
        log_OutPublic(*(void *)(*a1 + 32), a1[23], 24055, (uint64_t)"%s%d%s%d", v19, v14, v15, v16, "fromPos=");
        return TOKENTNERROR(0);
      }
    }
  }
LABEL_32:
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"%stokentn : dumpTokenRecordsInLingDB End (%x)", v14, v15, v16, (uint64_t)__dst);
  return FieldLD_T_TYPE;
}

uint64_t dumpTokenLDO(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v51 = 0;
  if (!a1) {
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 304))
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v44);
LABEL_28:
    return TOKENTNERROR(7);
  }
  if (a3 == 1) {
    uint64_t v9 = "<LOGFE> ";
  }
  else {
    uint64_t v9 = "";
  }
  cstdlib_strcpy(__dst, v9);
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"%stokentn : dumpTokenLDO : Begin : %s", v10, v11, v12, (uint64_t)__dst);
  uint64_t v13 = *(void *)(*(void *)(a1 + 264) + 16);
  LDOObject_GetCategory(v13, &v51);
  uint64_t v14 = 0;
  uint64_t v15 = *(uint64_t **)(v13 + 80);
  unint64_t v16 = *(void *)(v13 + 88);
  if ((unint64_t)v15 >= v16)
  {
LABEL_10:
    LDO_GetLabels(*(void *)(a1 + 264), &v48);
    uint64_t v28 = (uint64_t **)v48.n128_u64[1];
    unint64_t v29 = v49;
    if (v48.n128_u64[1] >= v49)
    {
LABEL_25:
      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"%stokentn : dumpTokenLDO End (%x)", v25, v26, v27, (uint64_t)__dst);
    }
    else
    {
      while (1)
      {
        uint64_t v47 = 0;
        v48.n128_u64[0] = 0;
        uint64_t v50 = 0;
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        int U32Attribute = LDOObject_GetU32Attribute(*v28, "_TTYPE", &v45, (_DWORD *)&v45 + 1);
        uint64_t v14 = LH_ERROR_to_VERROR(U32Attribute);
        if ((v14 & 0x80000000) != 0) {
          break;
        }
        if (v45 == 1 && HIDWORD(v45) == 6)
        {
          LDOLabel_GetAbsoluteFrom((uint64_t)*v28);
          LDOLabel_GetAbsoluteTo((uint64_t)*v28);
          int StringAttribute = LDOObject_GetStringAttribute(*v28, "TNTAG", &v45, (uint64_t *)&v48);
          uint64_t v33 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v33 & 0x80000000) != 0) {
            return v33;
          }
          int v34 = LDOObject_GetStringAttribute(*v28, "NORM", &v45, &v50);
          uint64_t v33 = LH_ERROR_to_VERROR(v34);
          if ((v33 & 0x80000000) != 0) {
            return v33;
          }
          int v35 = LDOObject_GetStringAttribute(*v28, "REGEXSUBMATCHES", &v45, &v47);
          uint64_t v14 = LH_ERROR_to_VERROR(v35);
          if ((v14 & 0x80000000) != 0) {
            return v14;
          }
          if (*(_DWORD *)(a1 + 960) == 1)
          {
            log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"%s%3d,%3d : type=TOKEN_INT_TN TNTAG=%-15s NORM=%s REGEXSUBMATCHES=%s", v36, v37, v38, (uint64_t)__dst);
          }
          else
          {
            int v39 = LDOObject_GetStringAttribute(*v28, "DCTMATCHES", &v45, &v46);
            uint64_t v14 = LH_ERROR_to_VERROR(v39);
            if ((v14 & 0x80000000) != 0) {
              return v14;
            }
            log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"%s%3d,%3d : type=TOKEN_INT_TN TNTAG=%-15s NORM=%s REGEXSUBMATCHES=%s DCTMATCHES=%s", v40, v41, v42, (uint64_t)__dst);
          }
        }
        if ((unint64_t)++v28 >= v29) {
          goto LABEL_25;
        }
      }
    }
  }
  else
  {
    int v17 = 0;
    while (1)
    {
      v48.n128_u64[0] = 0;
      uint64_t v50 = 0;
      LODWORD(v47) = 0;
      LODWORD(v46) = 0;
      LDOObject_GetType(*v15, (uint64_t *)&v48);
      int v18 = LDOTreeNode_ComputeText(*v15, &v50);
      uint64_t v14 = LH_ERROR_to_VERROR(v18);
      if ((v14 & 0x80000000) != 0) {
        break;
      }
      ++v17;
      LDOTreeNode_ComputeAbsoluteFrom(*v15, &v47);
      size_t v19 = *v15++;
      LDOTreeNode_ComputeAbsoluteTo(v19, &v46);
      uint64_t v20 = *(void *)(*(void *)a1 + 32);
      uint64_t v21 = *(void *)(a1 + 184);
      LHString_BorrowCPtr(v50);
      log_OutText(v20, v21, 4, 0, (uint64_t)"%sToken[%d] %d,%d : %s %s", v22, v23, v24, (uint64_t)__dst);
      OOC_PlacementDeleteObject(a1 + 224, v50);
      if ((unint64_t)v15 >= v16) {
        goto LABEL_10;
      }
    }
  }
  return v14;
}

uint64_t move2PreviousNonUserTNLDOToken(uint64_t a1, unsigned int a2, unsigned int a3, _WORD *a4)
{
  if (a1)
  {
    *a4 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 264) + 16);
    int NumberChildren = LDOTreeNode_GetNumberChildren(v7);
    if (NumberChildren)
    {
      uint64_t v9 = *(uint64_t **)(v7 + 80);
      if ((unint64_t)v9 >= *(void *)(v7 + 88)) {
        return 0;
      }
      __int16 v10 = 0;
      do
      {
        uint64_t v14 = 0;
        int v11 = LDOTreeNode_ComputeAbsoluteFrom(*v9, (_DWORD *)&v14 + 1);
        uint64_t result = LH_ERROR_to_VERROR(v11);
        if ((result & 0x80000000) != 0) {
          break;
        }
        int v13 = LDOTreeNode_ComputeAbsoluteTo(*v9, &v14);
        uint64_t result = LH_ERROR_to_VERROR(v13);
        if ((result & 0x80000000) != 0) {
          break;
        }
        if (WORD2(v14) < a2 || (unsigned __int16)v14 < a3) {
          *a4 = v10;
        }
        ++v10;
        ++v9;
      }
      while ((unint64_t)v9 < *(void *)(v7 + 88));
      return result;
    }
  }
  else
  {
    int NumberChildren = 7;
  }

  return TOKENTNERROR(NumberChildren);
}

uint64_t saveExpansionInLDO(uint64_t a1, char *a2, uint64_t a3, char *a4, char *a5, char *a6, uint64_t a7, unsigned __int16 *a8)
{
  uint64_t v42 = 0;
  unsigned int v8 = *a8;
  unsigned int v40 = a8[1];
  unsigned int v41 = v8;
  if (a1)
  {
    unsigned int v9 = a7;
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"tokentn : saveExpansionInLingDB Begin (%s)", (uint64_t)a6, a7, (uint64_t)a8, a3);
    int v16 = LDO_AddLabelOnSubstring(*(void *)(a1 + 264), "TOKEN", "TOKEN", &v41, &v40, &v42);
    uint64_t v17 = LH_ERROR_to_VERROR(v16);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    LDOObject_SetU32Attribute(v42, "_TTYPE", 6);
    uint64_t v17 = LH_ERROR_to_VERROR(v21);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    int v22 = LDOObject_SetStringAttribute(v42, "TNTAG", a2);
    uint64_t v17 = LH_ERROR_to_VERROR(v22);
    if ((v17 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    int v23 = LDOObject_SetStringAttribute(v42, "NORM", (char *)(a3 + v9));
    uint64_t v24 = LH_ERROR_to_VERROR(v23);
    if ((v24 & 0x80000000) != 0) {
      goto LABEL_22;
    }
    if (a6)
    {
      int v25 = LDOObject_SetStringAttribute(v42, "PATTERN", a6);
      uint64_t v24 = LH_ERROR_to_VERROR(v25);
      if ((v24 & 0x80000000) != 0) {
        goto LABEL_22;
      }
    }
    if (a4)
    {
      int v26 = LDOObject_SetStringAttribute(v42, "REGEXSUBMATCHES", a4);
      uint64_t v24 = LH_ERROR_to_VERROR(v26);
      if ((v24 & 0x80000000) != 0) {
        goto LABEL_22;
      }
    }
    if (a5)
    {
      int v27 = LDOObject_SetStringAttribute(v42, "DCTMATCHES", a5);
      uint64_t v24 = LH_ERROR_to_VERROR(v27);
      if ((v24 & 0x80000000) != 0) {
        goto LABEL_22;
      }
    }
    unsigned int v28 = *(unsigned __int16 *)(a1 + 544);
    if (v28 >= 2)
    {
      LDOObject_SetU32Attribute(v42, "_MRKRD", v28);
      uint64_t v17 = LH_ERROR_to_VERROR(v29);
      if ((v17 & 0x80000000) != 0) {
        goto LABEL_21;
      }
      unsigned int v30 = (_DWORD *)heap_Calloc(*(void **)(*(void *)a1 + 8), *(unsigned __int16 *)(a1 + 544), 4);
      if (!v30)
      {
        uint64_t v24 = 10;
        goto LABEL_22;
      }
      uint64_t v31 = (uint64_t)v30;
      unsigned int v32 = *(unsigned __int16 *)(a1 + 544);
      if (*(_WORD *)(a1 + 544))
      {
        uint64_t v33 = *(unsigned __int16 **)(a1 + 520);
        uint64_t v34 = *(unsigned __int16 *)(a1 + 544);
        int v35 = v30;
        do
        {
          int v36 = *v33++;
          *v35++ = v36;
          --v34;
        }
        while (v34);
      }
      int v37 = LDOObject_SetListU32Attribute(v42, "_MRK", v30, v32);
      uint64_t v24 = LH_ERROR_to_VERROR(v37);
      heap_Free(*(void **)(*(void *)a1 + 8), v31);
      if ((v24 & 0x80000000) != 0) {
        goto LABEL_22;
      }
    }
    if (!*(_WORD *)(a1 + 418))
    {
LABEL_22:
      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"tokentn : saveExpansionInLingDB End (%x) ", v18, v19, v20, v24);
      return v24;
    }
    int v38 = LDOObject_SetStringAttribute(v42, "LANGMAP", (char *)(*(void *)(a1 + 408) + v9));
    uint64_t v17 = LH_ERROR_to_VERROR(v38);
LABEL_21:
    uint64_t v24 = v17;
    goto LABEL_22;
  }

  return TOKENTNERROR(7);
}

uint64_t setDomainsOnSentence(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  unsigned __int16 v84 = 0;
  unsigned __int16 v83 = 0;
  size_t v81 = 0;
  uint64_t v82 = 0;
  if (a1)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : setDomainsOnSentence Begin", a6, a7, a8, v73);
    uint64_t DomainDefBlockInfo = dumpTokenRecordsInLingDB(a1, (uint64_t)"TRACE", 1, v9, v10, v11, v12, v13);
    if ((DomainDefBlockInfo & 0x80000000) == 0)
    {
      FEData_blockData_getDomains2SearchIn(a1, *((unsigned __int16 *)a1 + 168), a1[43], (uint64_t)v85, &v83, 0, v14, v15);
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : %d block(s) to search in", v17, v18, v19, v83);
      if (v83)
      {
        for (unint64_t i = 0; i < v83; ++i)
        {
          FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[i], &v82, v20, v21, v22, v23, v24);
          if (*(_WORD *)(v82 + 24))
          {
            uint64_t v26 = 0;
            unint64_t v27 = 0;
            do
            {
              log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : domain[%d,%d,%s,type=%d] marker \"%s\"%s %s", v22, v23, v24, i);
              ++v27;
              v26 += 72;
            }
            while (v27 < *(unsigned __int16 *)(v82 + 24));
          }
        }
        uint64_t v28 = *(void *)(a1[33] + 32);
        int v29 = *(uint64_t ***)(v28 + 24);
        if ((unint64_t)v29 < *(void *)(v28 + 32))
        {
          do
          {
            __s2 = 0;
            int v79 = 0;
            int StringAttribute = LDOObject_GetStringAttribute(*v29, "TNTAG", &v79, (uint64_t *)&__s2);
            uint64_t DomainDefBlockInfo = LH_ERROR_to_VERROR(StringAttribute);
            if ((DomainDefBlockInfo & 0x80000000) != 0) {
              return DomainDefBlockInfo;
            }
            if (v79)
            {
              uint64_t v78 = 0;
              int v77 = 0;
              AbsoluteFrouint64_t m = LDOLabel_GetAbsoluteFrom((uint64_t)*v29);
              unsigned int v75 = v29;
              __int16 AbsoluteTo = LDOLabel_GetAbsoluteTo((uint64_t)*v29);
              log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing DB token %s %d,%d", v33, v34, v35, (uint64_t)__s2);
              if (v83)
              {
                unint64_t v38 = 0;
                __int16 v39 = AbsoluteFrom;
                __int16 v40 = 0;
                uint64_t v41 = 0;
                __int16 v76 = v39;
                do
                {
                  FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v85[v38], &v82, v36, v37, v22, v23, v24);
                  int IsRemappable = FEData_blockData_IsRemappable(a1, __s2, &v78, (_WORD *)&v77 + 1, &v77, v42, v43, v44);
                  size_t v81 = 0;
                  if (IsRemappable == 1)
                  {
                    log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"domain %s is remappable to %s", v22, v23, v24, (uint64_t)__s2);
                    uint64_t v41 = HIWORD(v77);
                    __int16 v40 = v77;
                    uint64_t DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v77, &v81, v46, v47, v48, v49, v50);
                    if ((DomainDefBlockInfo & 0x80000000) != 0) {
                      return DomainDefBlockInfo;
                    }
                    uint64_t v55 = v81;
                    if (v81)
                    {
LABEL_25:
                      uint64_t v59 = v55[2];
                      uint64_t DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, (void **)&v84);
                      if ((DomainDefBlockInfo & 0x80000000) != 0) {
                        return DomainDefBlockInfo;
                      }
                      uint64_t v63 = v84;
                      v84[3] = v40;
                      v63[2] = v41;
                      _WORD *v63 = v76;
                      v63[1] = AbsoluteTo;
                      *((_DWORD *)v63 + 2) = 1;
                      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set Active Domain[%s:%s] range %d,%d", v60, v61, v62, *v81);
                      if (!cstdlib_strcmp((const char *)(*(void *)(v59 + 72 * v41 + 48) + *(unsigned __int16 *)(v59 + 72 * v41)), (const char *)a1[36])|| *(_DWORD *)(v59 + 72 * v41 + 60) == 1)
                      {
                        log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"normal domain OR was remapped to EscNormal - set additional domains, if any", v22, v23, v24, v74);
                        uint64_t v64 = v82;
                        if (*(_WORD *)(v82 + 24))
                        {
                          unint64_t v65 = 0;
                          uint64_t v66 = 48;
                          do
                          {
                            if (v41 != v65)
                            {
                              uint64_t v67 = *(void *)(v64 + 16);
                              if (!cstdlib_strcmp((const char *)(*(void *)(v67 + v66) + *(unsigned __int16 *)(v67 + v66 - 48)), (const char *)a1[36])|| *(_DWORD *)(v67 + v66 + 12) == 1)
                              {
                                uint64_t DomainDefBlockInfo = FERuntimeData_AddDomainRange((uint64_t)a1, (void **)&v84);
                                if ((DomainDefBlockInfo & 0x80000000) != 0) {
                                  return DomainDefBlockInfo;
                                }
                                uint64_t v71 = v84;
                                v84[3] = v85[v38];
                                v71[2] = v65;
                                _WORD *v71 = v76;
                                v71[1] = AbsoluteTo;
                                *((_DWORD *)v71 + 2) = 1;
                                log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"Set (as mapped to normal) Active Domain[%s:%s] range %d,%d", v68, v69, v70, *(void *)v82);
                              }
                            }
                            ++v65;
                            uint64_t v64 = v82;
                            v66 += 72;
                          }
                          while (v65 < *(unsigned __int16 *)(v82 + 24));
                        }
                      }
                      goto LABEL_36;
                    }
                    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%s", v51, v52, v53, v54, "skipping undefined remapped domain:");
                  }
                  else
                  {
                    uint64_t v55 = (uint64_t *)v82;
                    if (*(_WORD *)(v82 + 24))
                    {
                      uint64_t v56 = 0;
                      unint64_t v57 = 0;
                      while (1)
                      {
                        int v58 = cstdlib_strcmp((const char *)(*(void *)(v55[2] + v56 + 48) + *(unsigned __int16 *)(v55[2] + v56)), __s2);
                        uint64_t v55 = (uint64_t *)v82;
                        if (!v58) {
                          break;
                        }
                        ++v57;
                        v56 += 72;
                        if (v57 >= *(unsigned __int16 *)(v82 + 24)) {
                          goto LABEL_22;
                        }
                      }
                      __int16 v40 = v85[v38];
                      size_t v81 = (uint64_t *)v82;
                      uint64_t v41 = (unsigned __int16)v57;
                      if (v82) {
                        goto LABEL_25;
                      }
                    }
                    else
                    {
LABEL_22:
                      uint64_t v55 = v81;
                      if (v81) {
                        goto LABEL_25;
                      }
                    }
                  }
LABEL_36:
                  ++v38;
                }
                while (v38 < v83);
              }
              int v29 = v75;
            }
            ++v29;
          }
          while ((unint64_t)v29 < *(void *)(*(void *)(a1[33] + 32) + 32));
        }
        log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : setDomainsOnSentence End (%x)", v22, v23, v24, DomainDefBlockInfo);
      }
      else
      {
        return 0;
      }
    }
    return DomainDefBlockInfo;
  }
  else
  {
    return TOKENTNERROR(7);
  }
}

uint64_t mergeDomainsOnSentence(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unsigned __int16 v41 = 0;
  int v40 = 0;
  unsigned __int16 v39 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (a1)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : mergeDomainsOnSentence Begin", a6, a7, a8, v36);
    unsigned __int16 v42 = 0;
    FERuntimeData_GetActiveDomains((uint64_t)a1, (uint64_t)v45, &v42, 0, *((unsigned __int16 *)a1 + 156), 1);
    if (v42)
    {
      unint64_t v9 = 0;
      uint64_t v10 = 1;
      do
      {
        FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v9], &v44);
        uint64_t DomainBlockIndex = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v9++], &v41, (_WORD *)&v40 + 1);
        unint64_t v15 = v42;
        unint64_t v16 = v10;
        if (v9 < v42)
        {
          while (1)
          {
            FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v16], &v43);
            uint64_t v17 = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v16], &v40, &v39);
            if (*((_DWORD *)v43 + 2) == 1
              && (unsigned __int16)v40 == v41
              && v39 == HIWORD(v40)
              && *v44 == *v43
              && v44[1] == v43[1])
            {
              *((_DWORD *)v43 + 2) = 0;
              log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Remove duplicate domain %d,%d RANGE %d,%d ?", v12, v13, v14, 1);
            }
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_44;
            }
            ++v16;
            unint64_t v15 = v42;
            if (v16 >= v42) {
              goto LABEL_15;
            }
          }
        }
        uint64_t v17 = DomainBlockIndex;
LABEL_15:
        ++v10;
      }
      while (v9 < v15);
      if (v15)
      {
        unint64_t v18 = 0;
        while (1)
        {
          FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v18], &v44);
          uint64_t DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v18], &v41, (_WORD *)&v40 + 1);
          if ((DomainDefBlockInfo & 0x80000000) != 0) {
            goto LABEL_43;
          }
          uint64_t DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, v41, &v38, v20, v21, v12, v13, v14);
          if ((DomainDefBlockInfo & 0x80000000) != 0) {
            goto LABEL_43;
          }
          uint64_t v22 = *(void *)(v38 + 16);
          uint64_t v23 = (unsigned __int16 *)(v22 + 72 * HIWORD(v40));
          if (*(_WORD *)(*(void *)(v38 + 32) + 16 * v23[6] + 8) && *((_DWORD *)v44 + 2) == 1)
          {
            unsigned __int16 v24 = v44[1];
            uint64_t v25 = v22 + 72 * HIWORD(v40);
            uint64_t v27 = *(void *)(v25 + 48);
            uint64_t v26 = (void *)(v25 + 48);
            log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Modify domain \"%s\" RANGE %d,%d ?", v12, v13, v14, v27 + *v23);
            if (v18 < v42)
            {
              unint64_t v28 = v18;
              do
              {
                FERuntimeData_GetDomainRange((uint64_t)a1, (unsigned __int16)v45[v28], &v43);
                uint64_t DomainDefBlockInfo = FERuntimeData_GetDomainBlockIndex(a1, (unsigned __int16)v45[v28], &v40, &v39);
                if ((DomainDefBlockInfo & 0x80000000) != 0) {
                  goto LABEL_43;
                }
                uint64_t DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, (unsigned __int16)v40, &v37, v29, v30, v12, v13, v14);
                if ((DomainDefBlockInfo & 0x80000000) != 0) {
                  goto LABEL_43;
                }
                if (v43 != v44 && *((_DWORD *)v43 + 2) == 1)
                {
                  int v31 = *v43;
                  if ((v31 == v24 || v31 == *v44 && v43[1] == v44[1])
                    && !cstdlib_strcmp((const char *)(*v26 + *v23), (const char *)(*(void *)(*(void *)(v37 + 16) + 72 * v39 + 48)+ *(unsigned __int16 *)(*(void *)(v37 + 16) + 72 * v39))))
                  {
                    unsigned __int16 v24 = v43[1];
                    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : Modify domain \"%s\" RANGE %d,%d -> %d %d (merge with %s)", v32, v33, v34, *v26 + *v23);
                    *((_DWORD *)v43 + 2) = 0;
                  }
                }
              }
              while (++v28 < v42);
            }
            if ((__int16)v44[1] != v24)
            {
              uint64_t DomainDefBlockInfo = FERuntimeData_UpdateDomainRange(a1, (unsigned __int16)v18, v24);
              if ((DomainDefBlockInfo & 0x80000000) != 0) {
                goto LABEL_43;
              }
            }
          }
          if (++v18 >= v42) {
            goto LABEL_42;
          }
        }
      }
      if ((v17 & 0x80000000) != 0) {
        goto LABEL_44;
      }
    }
LABEL_42:
    uint64_t DomainDefBlockInfo = FERuntimeData_PruneAndDumpActiveDomains(a1);
LABEL_43:
    uint64_t v17 = DomainDefBlockInfo;
LABEL_44:
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : mergeDomainsOnSentence End (%x)", v12, v13, v14, v17);
    return v17;
  }
  else
  {
    return TOKENTNERROR(7);
  }
}

uint64_t TOKENTNERROR(int a1)
{
  return a1 | 0x89602000;
}

uint64_t tokentn_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2304778241;
  }
  uint64_t result = 0;
  *a2 = &ITokenizer_0;
  return result;
}

uint64_t tokenTN_ClassOpen(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a3) {
    return 2304778247;
  }
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t result = InitRsrcFunction(a1, a2, &v7);
  if ((result & 0x80000000) == 0)
  {
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t tokenTN_ClassClose()
{
  return 0;
}

uint64_t tokenTN_ObjOpen(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v5 = 2304778250;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  if (!a5) {
    return 2304778247;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v60);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t inited = InitRsrcFunction(a1, a2, &v59);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v60 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : ObjOpen Begin", v12, v13, v14, v53);
      uint64_t v15 = heap_Calloc(*(void **)(v60 + 8), 1, 16);
      if (!v15)
      {
        log_OutPublic(*(void *)(v60 + 32), (uint64_t)"TOKENTN", 21000, 0, v16, v17, v18, v19, v54);
LABEL_43:
        log_OutText(*(void *)(v60 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : ObjOpen End (%x)", v25, v26, v27, v5);
        return v5;
      }
      uint64_t v20 = v15;
      *(void *)uint64_t v15 = 0;
      *(_DWORD *)(v15 + 8) = 0;
      uint64_t v21 = heap_Calloc(*(void **)(v60 + 8), 1, 968);
      if (v21)
      {
        uint64_t v28 = v21;
        *(void *)uint64_t v20 = v21;
        *(_DWORD *)(v20 + 8) = 58765;
        *(void *)uint64_t v21 = v60;
        *(void *)(v21 + 8) = a3;
        uint64_t v29 = v59;
        *(void *)(v21 + 16) = a4;
        *(void *)(v21 + 24) = v29;
        *(void *)(v21 + 32) = a1;
        *(void *)(v21 + 40) = a2;
        *(void *)(v21 + 96) = 0;
        uint64_t v30 = (_OWORD *)(v21 + 96);
        *(_DWORD *)(v21 + 104) = 0;
        *(void *)(v21 + 120) = 0;
        int v31 = (_OWORD *)(v21 + 120);
        *(_DWORD *)(v21 + 128) = 0;
        *(void *)(v21 + 152) = 0;
        *(void *)(v21 + 160) = 0;
        *(void *)(v21 + 176) = 0;
        *(void *)(v21 + 184) = "TOKENTN";
        *(_WORD *)(v21 + 336) = 0;
        *(void *)(v21 + 344) = 0;
        *(unsigned char *)(v21 + 352) = 0;
        *(_DWORD *)(v21 + 548) = 0;
        *(void *)(v21 + 552) = 0;
        *(void *)(v21 + 520) = 0;
        *(_WORD *)(v21 + 528) = 0;
        *(void *)(v21 + 536) = 0;
        *(_WORD *)(v21 + 544) = 0;
        *(void *)(v21 + 288) = 0;
        *(_DWORD *)(v21 + 296) = 0;
        *(_WORD *)(v21 + 608) = 257;
        uint64_t v32 = (_DWORD *)(v21 + 612);
        *(void *)(v21 + 612) = 0;
        *(_DWORD *)(v21 + 960) = 0;
        *(_WORD *)(v21 + 280) = 32;
        if ((paramc_ParamGetUInt(*(void *)(v60 + 40), (uint64_t)"tokentninitstrlen", (unsigned int *)&v55 + 1) & 0x80000000) == 0) {
          *(_WORD *)(v28 + 280) = WORD2(v55);
        }
        *(_WORD *)(v28 + 282) = 5;
        if ((paramc_ParamGetUInt(*(void *)(v60 + 40), (uint64_t)"tokentnmaxpcreframeblocks", (unsigned int *)&v55 + 1) & 0x80000000) == 0) {
          *(_WORD *)(v28 + 282) = WORD2(v55);
        }
        *(_WORD *)(v28 + 284) = 20;
        if ((paramc_ParamGetUInt(*(void *)(v60 + 40), (uint64_t)"tokentnnumframesinblock", (unsigned int *)&v55 + 1) & 0x80000000) == 0) {
          *(_WORD *)(v28 + 284) = WORD2(v55);
        }
        uint64_t v33 = nuance_pcre_ObjOpen(a3, a4, v28 + 136);
        if ((v33 & 0x80000000) != 0)
        {
          uint64_t v51 = v33;
          log_OutPublic(*(void *)(*(void *)v28 + 32), *(void *)(v28 + 184), 24021, 0, v34, v35, v36, v37, v54);
          uint64_t v5 = v51;
        }
        else
        {
          uint64_t Object = addIdentifier2List_0(v28, "x");
          if ((Object & 0x80000000) == 0)
          {
            if ((objc_GetObject(*(void *)(v60 + 48), (uint64_t)"FE_DCTLKP", &v57) & 0x80000000) != 0)
            {
              uint64_t v5 = 0;
              uint64_t v50 = 24022;
              goto LABEL_47;
            }
            uint64_t v39 = v57;
            *(void *)(v28 + 88) = *(void *)(v57 + 8);
            *uint64_t v30 = *(_OWORD *)(v39 + 16);
            if ((objc_GetObject(*(void *)(v60 + 48), (uint64_t)"FE_DEPES", &v56) & 0x80000000) != 0)
            {
              uint64_t v5 = 0;
              uint64_t v50 = 24023;
              goto LABEL_47;
            }
            uint64_t v40 = v56;
            *(void *)(v28 + 112) = *(void *)(v56 + 8);
            *int v31 = *(_OWORD *)(v40 + 16);
            uint64_t Object = objc_GetObject(*(void *)(v60 + 48), (uint64_t)"LINGDB", &v58);
            if ((Object & 0x80000000) == 0)
            {
              *(void *)(v28 + 64) = *(void *)(v58 + 8);
              uint64_t Object = FEData_ObjOpen((uint64_t)a3, a4, (uint64_t *)v28, v23, v24, v25, v26, v27);
              if ((Object & 0x80000000) == 0)
              {
                uint64_t Object = FERuntimeData_ObjOpen((uint64_t *)v28, v41, v22, v23, v24, v25, v26, v27);
                if ((Object & 0x80000000) == 0)
                {
                  uint64_t Object = FEFunctionMap_ObjOpen((uint64_t *)v28, v42, v22, v23, v24, v25, v26, v27);
                  if ((Object & 0x80000000) == 0)
                  {
                    uint64_t Object = tokenizer_ObjOpen((uint64_t *)v28, v43, v22, v23, v24, v25, v26, v27);
                    if ((Object & 0x80000000) == 0)
                    {
                      uint64_t Object = textnormalizer_ObjOpen((uint64_t *)v28, v44, v22, v23, v24, v25, v26, v27);
                      if ((Object & 0x80000000) == 0)
                      {
                        uint64_t Object = createIDStrings_0((unsigned char *)v28);
                        if ((Object & 0x80000000) == 0)
                        {
                          if (!*(_WORD *)(v28 + 336)) {
                            goto LABEL_49;
                          }
                          unint64_t v45 = 0;
                          do
                          {
                            log_OutText(*(void *)(*(void *)v28 + 32), *(void *)(v28 + 184), 5, 0, (uint64_t)"tokentn : identifier=\"%s\"", v25, v26, v27, *(void *)(*(void *)(v28 + 344) + 8 * v45++));
                            unint64_t v46 = *(unsigned __int16 *)(v28 + 336);
                          }
                          while (v45 < v46);
                          if (!*(_WORD *)(v28 + 336))
                          {
LABEL_49:
                            log_OutPublic(*(void *)(*(void *)v28 + 32), (uint64_t)"TOKENTN", 24024, 0, v24, v25, v26, v27, v54);
                            uint64_t v5 = 2304778240;
                            goto LABEL_42;
                          }
                          uint64_t Object = FEData_blockData_loadDataFiles(v28, v46, *(void *)(v28 + 344), (int *)(v28 + 616), v24, v25, v26, v27);
                          if ((Object & 0x80000000) == 0)
                          {
                            uint64_t Object = getFECFGInfo_0(v28);
                            if ((Object & 0x80000000) == 0)
                            {
                              uint64_t Object = nn_tn_checkIfActive(a3, a4, v60, *(void *)(v28 + 184), v32);
                              if ((Object & 0x80000000) == 0)
                              {
                                if (*v32 != 1
                                  || (uint64_t Object = nn_tn_Load(a3, a4, *(_WORD **)(v28 + 32), *(void *)(v28 + 40), v60, *(void *)(v28 + 184), *(void *)(v28 + 88), v27, *(void *)(v28 + 96), *(void *)(v28 + 104), (int *)(v28 + 640)), (Object & 0x80000000) == 0))
                                {
                                  *(void *)(v28 + 192) = heap_Alloc;
                                  *(void *)(v28 + 200) = heap_Calloc;
                                  *(void *)(v28 + 208) = heap_Realloc;
                                  *(void *)(v28 + 216) = heap_Free;
                                  int v47 = OOCAllocator_Con(v28 + 224, (_OWORD *)(v28 + 192), *(void *)(*(void *)v28 + 8));
                                  uint64_t v5 = LH_ERROR_to_VERROR(v47);
                                  if ((v5 & 0x80000000) != 0)
                                  {
                                    log_OutPublic(*(void *)(*(void *)v28 + 32), (uint64_t)"TOKENTN", 24024, 0, v48, v25, v26, v27, v54);
                                  }
                                  else
                                  {
                                    *(void *)(v28 + 264) = 0;
                                    if (*(_DWORD *)(v28 + 616) != 1)
                                    {
LABEL_48:
                                      *(void *)a5 = v20;
                                      *(_DWORD *)(a5 + 8) = 58764;
                                      goto LABEL_43;
                                    }
                                    uint64_t v49 = load_lua_code_0(v28, &v55);
                                    uint64_t v5 = v49;
                                    if ((v49 & 0x80000000) == 0 && !v55)
                                    {
                                      uint64_t v50 = 24071;
LABEL_47:
                                      log_OutPublic(*(void *)(*(void *)v28 + 32), *(void *)(v28 + 184), v50, 0, v24, v25, v26, v27, v54);
                                      goto LABEL_48;
                                    }
                                    if ((v49 & 0x80000000) == 0) {
                                      goto LABEL_48;
                                    }
                                  }
                                  goto LABEL_42;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v5 = Object;
        }
      }
LABEL_42:
      tokenTN_loc_ObjClose(v60, (uint64_t *)v20, v22, v23, v24, v25, v26, v27);
      goto LABEL_43;
    }
  }
  return inited;
}

uint64_t tokenTN_ObjClose(uint64_t *a1, int a2)
{
  uint64_t v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    uint64_t v7 = (uint64_t *)*a1;
    uint64_t v8 = *(void *)(*a1 + 184);
    log_OutText(*(void *)(*(void *)*a1 + 32), v8, 4, 0, (uint64_t)"tokentn : ObjClose Begin", v4, v5, v6, v28);
    uint64_t v9 = *v7;
    uint64_t v3 = FEData_blockData_unloadDataFiles(v7, v10, v11, v12, v13, v14, v15, v16);
    uint64_t v17 = v7[34];
    if (v17)
    {
      OOC_PlacementDeleteObject((uint64_t)(v7 + 28), v17);
      v7[34] = 0;
    }
    OOCAllocator_Des();
    tokenTN_loc_ObjClose(v9, a1, v18, v19, v20, v21, v22, v23);
    log_OutText(*(void *)(v9 + 32), v8, 4, 0, (uint64_t)"tokentn : ObjClose End (%x)", v24, v25, v26, v3);
  }
  return v3;
}

uint64_t tokenTN_ObjReopen(uint64_t *a1, int a2)
{
  uint64_t v3 = 2304778248;
  int v32 = 0;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(v4 + 344);
    if (v5)
    {
      if (*(_WORD *)(v4 + 336))
      {
        unint64_t v6 = 0;
        do
        {
          heap_Free(*(void **)(*(void *)v4 + 8), *(void *)(*(void *)(v4 + 344) + 8 * v6));
          *(void *)(*(void *)(v4 + 344) + 8 * v6++) = 0;
        }
        while (v6 < *(unsigned __int16 *)(v4 + 336));
        uint64_t v5 = *(void *)(v4 + 344);
      }
      heap_Free(*(void **)(*(void *)v4 + 8), v5);
      *(void *)(v4 + 344) = 0;
      *(_WORD *)(v4 + 336) = 0;
      *(unsigned char *)(v4 + 352) = 0;
      *(_WORD *)(v4 + 608) = 257;
    }
    uint64_t IDStrings_0 = addIdentifier2List_0(v4, "x");
    if ((IDStrings_0 & 0x80000000) != 0) {
      goto LABEL_30;
    }
    uint64_t IDStrings_0 = createIDStrings_0((unsigned char *)v4);
    if ((IDStrings_0 & 0x80000000) != 0) {
      goto LABEL_30;
    }
    if (!*(void *)(v4 + 344)) {
      return 6;
    }
    if (*(_WORD *)(v4 + 336))
    {
      unint64_t v11 = 0;
      do
        log_OutText(*(void *)(*(void *)v4 + 32), *(void *)(v4 + 184), 5, 0, (uint64_t)"tokentn : identifier=\"%s\"", v8, v9, v10, *(void *)(*(void *)(v4 + 344) + 8 * v11++));
      while (v11 < *(unsigned __int16 *)(v4 + 336));
    }
    uint64_t IDStrings_0 = getFECFGInfo_0(v4);
    if ((IDStrings_0 & 0x80000000) != 0) {
      goto LABEL_30;
    }
    uint64_t v17 = *(void *)(v4 + 288);
    if (v17)
    {
      heap_Free(*(void **)(*(void *)v4 + 8), v17);
      *(void *)(v4 + 288) = 0;
    }
    uint64_t IDStrings_0 = FEData_blockData_unloadUnusedDataFiles((void *)v4, *(unsigned __int16 *)(v4 + 336), *(void *)(v4 + 344), v12, v13, v14, v15, v16);
    if ((IDStrings_0 & 0x80000000) != 0) {
      goto LABEL_30;
    }
    *(_DWORD *)(v4 + 960) = 0;
    uint64_t v22 = *(unsigned __int16 *)(v4 + 336);
    if (!*(_WORD *)(v4 + 336))
    {
      log_OutPublic(*(void *)(*(void *)v4 + 32), (uint64_t)"TOKENTN", 24024, 0, v18, v19, v20, v21, v31);
      return 2304778240;
    }
    *(_DWORD *)(v4 + 616) = 0;
    uint64_t IDStrings_0 = FEData_blockData_loadDataFiles(v4, v22, *(void *)(v4 + 344), (int *)(v4 + 616), v18, v19, v20, v21);
    if ((IDStrings_0 & 0x80000000) != 0
      || *(_DWORD *)(v4 + 612) == 1
      && (uint64_t IDStrings_0 = nn_tn_UnLoad(*(void *)v4, *(void *)(v4 + 24), v4 + 640), (IDStrings_0 & 0x80000000) != 0))
    {
LABEL_30:
      uint64_t v3 = IDStrings_0;
    }
    else
    {
      *(_DWORD *)(v4 + 612) = 0;
      uint64_t v3 = nn_tn_checkIfActive(*(_WORD **)(v4 + 8), *(void *)(v4 + 16), *(void *)v4, *(void *)(v4 + 184), (_DWORD *)(v4 + 612));
      if ((v3 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v4 + 612) != 1
          || (uint64_t v3 = nn_tn_Load(*(_WORD **)(v4 + 8), *(void *)(v4 + 16), *(_WORD **)(v4 + 32), *(void *)(v4 + 40), *(void *)v4, *(void *)(v4 + 184), *(void *)(v4 + 88), v23, *(void *)(v4 + 96), *(void *)(v4 + 104), (int *)(v4 + 640)), (v3 & 0x80000000) == 0))
        {
          if (*(_DWORD *)(v4 + 616) != 1) {
            return v3;
          }
          uint64_t v24 = load_lua_code_0(v4, &v32);
          uint64_t v3 = v24;
          if ((v24 & 0x80000000) == 0 && !v32)
          {
            log_OutPublic(*(void *)(*(void *)v4 + 32), *(void *)(v4 + 184), 24071, 0, v25, v26, v27, v28, v31);
            return v3;
          }
          if ((v24 & 0x80000000) == 0) {
            return v3;
          }
        }
      }
    }
    uint64_t v29 = *(void *)(v4 + 272);
    if (v29)
    {
      OOC_PlacementDeleteObject(v4 + 224, v29);
      *(void *)(v4 + 272) = 0;
    }
    OOCAllocator_Des();
  }
  return v3;
}

uint64_t tokenTN_ProcessStart(uint64_t *a1, int a2)
{
  uint64_t v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    uint64_t v7 = *a1;
    log_OutText(*(void *)(*(void *)v7 + 32), *(void *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessStart Begin", v4, v5, v6, v17);
    if (*(_WORD *)(v7 + 336))
    {
      uint64_t v3 = nuance_pcre_Init(*(void **)(v7 + 136), *(void *)(v7 + 144), *(unsigned __int16 *)(v7 + 282), *(_WORD *)(v7 + 284));
      if ((v3 & 0x80000000) != 0) {
        log_OutPublic(*(void *)(*(void *)v7 + 32), *(void *)(v7 + 184), 24051, 0, v12, v13, v14, v15, v18);
      }
      log_OutText(*(void *)(*(void *)v7 + 32), *(void *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessStart End (%x)", v13, v14, v15, v3);
    }
    else
    {
      log_OutPublic(*(void *)(*(void *)v7 + 32), (uint64_t)"TOKENTN", 24024, 0, v8, v9, v10, v11, v18);
      return 2304778240;
    }
  }
  return v3;
}

uint64_t tokenTN_Process(uint64_t *a1, int a2, void *a3, int a4, _DWORD *a5)
{
  int v50 = 0;
  uint64_t v49 = 0;
  uint64_t matched = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) != 0) {
    return matched;
  }
  if ((safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) != 0) {
    return matched;
  }
  uint64_t v13 = (void **)*a1;
  log_OutText((*v13)[4], (uint64_t)v13[23], 4, 0, (uint64_t)"tokentn : Process Begin", v10, v11, v12, v47);
  v13[9] = a3;
  *((_DWORD *)v13 + 20) = a4;
  *((_DWORD *)v13 + 137) = log_GetLogLevel((*v13)[4]) > 4;
  v13[33] = 0;
  uint64_t matched = LingDBHasSentence((uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], &v50);
  if ((matched & 0x80000000) != 0) {
    return matched;
  }
  uint64_t v14 = (uint64_t *)(v13 + 33);
  if (!v50) {
    goto LABEL_32;
  }
  uint64_t inited = initLDO((uint64_t)(v13 + 28), v13 + 33);
  if ((inited & 0x80000000) != 0) {
    goto LABEL_33;
  }
  uint64_t matched = importFromLingDB((uint64_t)*v13, (uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], (uint64_t *)v13 + 33);
  if ((matched & 0x80000000) == 0)
  {
    if (!*v14) {
      goto LABEL_32;
    }
    int v16 = LDO_ComputeText(*v14, &v49);
    uint64_t matched = LH_ERROR_to_VERROR(v16);
    if ((matched & 0x80000000) == 0)
    {
      v13[38] = (void *)LHString_BorrowCPtr(v49);
      *((_WORD *)v13 + 156) = LHString_Length(v49);
      if (!v13[38]) {
        goto LABEL_18;
      }
      log_OutText((*v13)[4], (uint64_t)v13[23], 5, 0, (uint64_t)"<LOGFE> processing sentence : _%s_", v19, v20, v21, (uint64_t)v13[38]);
      uint64_t inited = tokenTN_init_ProcessData((uint64_t)v13);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_33;
      }
      if (*((_DWORD *)v13 + 240) == 1 && *((_DWORD *)v13 + 154) == 1)
      {
        uint64_t inited = tokentn_AllInOneLoop((uint64_t)v13, 1);
        if ((inited & 0x80000000) != 0) {
          goto LABEL_33;
        }
        if (*((_DWORD *)v13 + 137) == 1)
        {
          uint64_t inited = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of btok Processing", 1, v22, v23, v24, v25, v26);
          if ((inited & 0x80000000) != 0) {
            goto LABEL_33;
          }
        }
      }
      uint64_t inited = tokentn_AllInOneLoop((uint64_t)v13, 0);
      if ((inited & 0x80000000) != 0) {
        goto LABEL_33;
      }
      uint64_t matched = clearBTokMatchList((uint64_t)v13);
      if ((matched & 0x80000000) == 0)
      {
LABEL_18:
        uint64_t v27 = *v14;
        if (*v14)
        {
          if (*((_DWORD *)v13 + 154) != 1 || (uint64_t v28 = (uint64_t)v13[34]) == 0)
          {
LABEL_27:
            if (*v14)
            {
              uint64_t matched = exportToLingDB((uint64_t)*v13, (uint64_t)v13[8], (uint64_t)v13[9], (uint64_t)v13[10], (uint64_t)(v13 + 28), *v14, 1, 0);
              if ((matched & 0x80000000) != 0) {
                goto LABEL_34;
              }
              if (v13[38])
              {
                if (*((_DWORD *)v13 + 137) == 1)
                {
                  uint64_t matched = dumpTokenRecordsInLingDB(v13, (uint64_t)"LINGDB At End of Processing", 1, v35, v36, v37, v38, v39);
                  if ((matched & 0x80000000) != 0) {
                    goto LABEL_34;
                  }
                }
              }
            }
            goto LABEL_32;
          }
          if (*((_DWORD *)v13 + 137) != 1)
          {
LABEL_24:
            int v29 = LuaVMLDO_RunFunction(v28, (uint64_t)"run", v27);
            uint64_t matched = LH_ERROR_to_VERROR(v29);
            if ((matched & 0x80000000) != 0)
            {
              log_OutPublic((*v13)[4], (uint64_t)v13[23], 24072, 0, v31, v32, v33, v34, v48);
              goto LABEL_34;
            }
            if (*((_DWORD *)v13 + 137) == 1)
            {
              uint64_t matched = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of Processing; after Lua",
                          1,
                          v30,
                          v31,
                          v32,
                          v33,
                          v34);
              if ((matched & 0x80000000) != 0) {
                goto LABEL_34;
              }
            }
            goto LABEL_27;
          }
          uint64_t inited = dumpTokenLDO((uint64_t)v13, (uint64_t)"At End of Processing; before Lua", 1, v17, v18, v19, v20, v21);
          if ((inited & 0x80000000) == 0)
          {
            uint64_t v27 = (uint64_t)v13[33];
            uint64_t v28 = (uint64_t)v13[34];
            goto LABEL_24;
          }
LABEL_33:
          uint64_t matched = inited;
          goto LABEL_34;
        }
LABEL_32:
        *a5 = 1;
      }
    }
  }
LABEL_34:
  if (v49)
  {
    OOC_PlacementDeleteObject((uint64_t)(v13 + 28), v49);
    uint64_t v49 = 0;
  }
  if (*v14)
  {
    deinitLDO((uint64_t)(v13 + 28), *v14);
    v13[33] = 0;
  }
  uint64_t v40 = (uint64_t)v13[69];
  if (v40)
  {
    heap_Free((void *)(*v13)[1], v40);
    v13[69] = 0;
  }
  clearStrRes(*v13, (uint64_t)(v13 + 49));
  clearStrRes(*v13, (uint64_t)(v13 + 51));
  clearStrRes(*v13, (uint64_t)(v13 + 61));
  clearStrRes(*v13, (uint64_t)(v13 + 70));
  clearStrRes(*v13, (uint64_t)(v13 + 72));
  clearStrRes(*v13, (uint64_t)(v13 + 74));
  clearStrRes(*v13, (uint64_t)(v13 + 63));
  clearStrRes(*v13, (uint64_t)(v13 + 53));
  clearStrRes(*v13, (uint64_t)(v13 + 59));
  clearStrRes(*v13, (uint64_t)(v13 + 55));
  clearStrRes(*v13, (uint64_t)(v13 + 57));
  freeAlignmentData(v13);
  freeMatchList(v13);
  freeSolutionList(v13);
  uint64_t v44 = (uint64_t)v13[40];
  if (v44)
  {
    heap_Free((void *)(*v13)[1], v44);
    v13[40] = 0;
  }
  uint64_t v45 = (uint64_t)v13[41];
  if (v45)
  {
    heap_Free((void *)(*v13)[1], v45);
    v13[41] = 0;
  }
  log_OutText((*v13)[4], (uint64_t)v13[23], 4, 0, (uint64_t)"tokentn : Process End (%x)", v41, v42, v43, matched);
  return matched;
}

uint64_t tokenTN_ProcessEnd(uint64_t *a1, int a2)
{
  uint64_t v3 = 2304778248;
  if ((safeh_HandleCheck((uint64_t)a1, a2, 58764, 16) & 0x80000000) == 0
    && (safeh_HandleCheck(*a1, a1[1], 58765, 968) & 0x80000000) == 0)
  {
    uint64_t v7 = *a1;
    log_OutText(*(void *)(*(void *)*a1 + 32), *(void *)(*a1 + 184), 4, 0, (uint64_t)"tokentn : ProcessEnd Begin", v4, v5, v6, v13);
    uint64_t v8 = nuance_pcre_DeInit(*(void **)(v7 + 136), *(void *)(v7 + 144));
    log_OutText(*(void *)(*(void *)v7 + 32), *(void *)(v7 + 184), 4, 0, (uint64_t)"tokentn : ProcessEnd End (%x)", v9, v10, v11, v8);
    return 0;
  }
  return v3;
}

uint64_t addIdentifier2List_0(uint64_t a1, char *__s2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 336);
  if (*(_WORD *)(a1 + 336))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 344);
      if (v6)
      {
        if (!cstdlib_strcmp(*(const char **)(v6 + 8 * v5), __s2)) {
          return 0;
        }
        unsigned int v4 = *(unsigned __int16 *)(a1 + 336);
      }
      ++v5;
    }
    while (v5 < v4);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v7 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *(void *)(a1 + 344), 8 * v4 + 8);
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_10:
    uint64_t v7 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 8);
    if (!v7)
    {
LABEL_13:
      uint64_t v17 = 2304778250;
      log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v8, v9, v10, v11, v19);
      return v17;
    }
  }
  *(void *)(a1 + 344) = v7;
  uint64_t v12 = *(void **)(*(void *)a1 + 8);
  int v13 = cstdlib_strlen(__s2);
  uint64_t v14 = heap_Calloc(v12, 1, (v13 + 1));
  uint64_t v15 = *(unsigned __int16 *)(a1 + 336);
  *(void *)(*(void *)(a1 + 344) + 8 * v15) = v14;
  int v16 = *(char **)(*(void *)(a1 + 344) + 8 * v15);
  if (!v16) {
    goto LABEL_13;
  }
  cstdlib_strcpy(v16, __s2);
  uint64_t v17 = 0;
  ++*(_WORD *)(a1 + 336);
  return v17;
}

uint64_t createIDStrings_0(unsigned char *a1)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  __s = 0;
  *(_OWORD *)__s2 = 0u;
  long long v19 = 0u;
  *(_OWORD *)int v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  uint64_t result = paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"langcode", &__s, 0);
  if ((result & 0x80000000) == 0)
  {
    if (cstdlib_strlen(__s))
    {
      uint64_t v3 = 0;
      int v4 = 0;
      do
      {
        unint64_t v5 = __s;
        char v6 = __s[v3];
        v16[v3] = v6;
        __s2[v3] = v6;
        uint64_t v3 = (unsigned __int16)++v4;
      }
      while (cstdlib_strlen(v5) > (unsigned __int16)v4);
    }
    strcpy(&__s2[2], "x");
    v16[3] = 0;
    uint64_t result = paramc_ParamGet(*(void *)(*(void *)a1 + 40), (uint64_t)"voice", &__s, 0);
    if ((result & 0x80000000) == 0)
    {
      if (cstdlib_strlen(__s) <= 0x1A)
      {
        if (cstdlib_strlen(__s))
        {
          uint64_t v7 = 0;
          int v8 = 0;
          do
          {
            uint64_t v9 = __s;
            v14[v7] = __s[v7];
            uint64_t v7 = (unsigned __int16)++v8;
          }
          while (cstdlib_strlen(v9) > (unsigned __int16)v8);
        }
        v14[cstdlib_strlen(__s)] = 0;
        if ((int)cstdlib_strlen(__s2) >= 1)
        {
          int v10 = 0;
          do
          {
            __s2[(unsigned __int16)v10] = ssft_tolower(__s2[(unsigned __int16)v10]);
            ++v10;
          }
          while ((int)cstdlib_strlen(__s2) > (unsigned __int16)v10);
        }
        if ((int)cstdlib_strlen(v16) >= 1)
        {
          int v11 = 0;
          do
          {
            v16[(unsigned __int16)v11] = ssft_tolower(v16[(unsigned __int16)v11]);
            ++v11;
          }
          while ((int)cstdlib_strlen(v16) > (unsigned __int16)v11);
        }
        if ((int)cstdlib_strlen(v14) >= 1)
        {
          int v12 = 0;
          do
          {
            v14[(unsigned __int16)v12] = ssft_tolower(v14[(unsigned __int16)v12]);
            ++v12;
          }
          while ((int)cstdlib_strlen(v14) > (unsigned __int16)v12);
        }
        uint64_t result = addIdentifier2List_0((uint64_t)a1, __s2);
        if ((result & 0x80000000) == 0)
        {
          a1[352] = a1[336];
          uint64_t result = addIdentifier2List_0((uint64_t)a1, v16);
          if ((result & 0x80000000) == 0) {
            return addIdentifier2List_0((uint64_t)a1, v14);
          }
        }
      }
      else
      {
        return 2304778240;
      }
    }
  }
  return result;
}

uint64_t getFECFGInfo_0(uint64_t a1)
{
  uint64_t v2 = 2304778240;
  __int16 v11 = -1;
  __int16 __c_1 = 0;
  unsigned __int8 __c = 0;
  if (((*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 88) + 96))(*(void *)(a1 + 96), *(void *)(a1 + 104), "fecfg", "nrpart_g2p", &__c_1, &v11, &__c) & 0x80000000) == 0)
  {
    if (v11 == 1 && __c_1 != 0)
    {
      int v4 = cstdlib_strchr(*__c_1, __c);
      if (v4) {
        *int v4 = 0;
      }
      *(unsigned char *)(a1 + 608) = cstdlib_atoi((unsigned __int8 *)*__c_1);
    }
    __int16 v11 = -1;
    uint64_t v5 = (*(uint64_t (**)(void, void, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(*(void *)(a1 + 88) + 96))(*(void *)(a1 + 96), *(void *)(a1 + 104), "fecfg", "nrpart_tn", &__c_1, &v11, &__c);
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = v5;
      if (v11 == 1 && __c_1)
      {
        uint64_t v7 = cstdlib_strchr(*__c_1, __c);
        if (v7) {
          *uint64_t v7 = 0;
        }
        *(unsigned char *)(a1 + 609) = cstdlib_atoi((unsigned __int8 *)*__c_1);
      }
      return v6;
    }
  }
  return v2;
}

uint64_t load_lua_code_0(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 272);
  if (v4)
  {
    OOC_PlacementDeleteObject(a1 + 224, v4);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v5 = (uint64_t *)(a1 + 272);
  OOCAllocator_Des();
  int IsLuaCodeAvailable = LuaVMLDO_IsLuaCodeAvailable(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), 0, a2);
  uint64_t v7 = LH_ERROR_to_VERROR(IsLuaCodeAvailable);
  if ((v7 & 0x80000000) == 0)
  {
    if (*a2 != 1) {
      return v7;
    }
    *a2 = 0;
    int v8 = OOCAllocator_Con(a1 + 224, (_OWORD *)(a1 + 192), *(void *)(*(void *)a1 + 8));
    uint64_t v9 = LH_ERROR_to_VERROR(v8);
    if ((v9 & 0x80000000) != 0
      || (v10 = PNEW_LuaVMLDO_Con(a1 + 224, a1 + 224, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)"TOKENTN", (uint64_t **)(a1 + 272)), uint64_t v9 = LH_ERROR_to_VERROR(v10), (v9 & 0x80000000) != 0))
    {
      uint64_t v7 = v9;
    }
    else
    {
      int ScriptFromRIFF = LuaVMLDO_LoadScriptFromRIFF(*v5, 0);
      uint64_t v7 = LH_ERROR_to_VERROR(ScriptFromRIFF);
      if ((v7 & 0x80000000) == 0)
      {
        *a2 = 1;
        return v7;
      }
    }
  }
  if (*v5)
  {
    OOC_PlacementDeleteObject(a1 + 224, *v5);
    *uint64_t v5 = 0;
  }
  OOCAllocator_Des();
  return v7;
}

uint64_t tokenTN_loc_ObjClose(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v9 = result;
    log_OutText(*(void *)(result + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : loc ObjClose Begin", a6, a7, a8, v64);
    uint64_t NullHandle = safeh_GetNullHandle();
    uint64_t v12 = 0;
    if (!safeh_HandlesEqual(*a2, a2[1], NullHandle, v11))
    {
      uint64_t result = safeh_HandleCheck(*a2, a2[1], 58765, 968);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      LODWORD(v12) = result;
      uint64_t v20 = *a2;
      int v21 = tokenizer_ObjClose((uint64_t *)*a2, v13, v14, v15, v16, v17, v18, v19);
      if (v21 < 0) {
        LODWORD(v12) = v21;
      }
      int v29 = textnormalizer_ObjClose((uint64_t *)v20, v22, v23, v24, v25, v26, v27, v28);
      if (v29 < 0) {
        LODWORD(v12) = v29;
      }
      uint64_t v30 = safeh_GetNullHandle();
      if (!safeh_HandlesEqual(*(void *)(v20 + 136), *(void *)(v20 + 144), v30, v31))
      {
        int v39 = nuance_pcre_ObjClose(*(void *)(v20 + 136), *(void *)(v20 + 144));
        if (v39 < 0) {
          LODWORD(v12) = v39;
        }
      }
      int v40 = FEData_ObjClose((uint64_t *)v20, v32, v33, v34, v35, v36, v37, v38);
      if (v40 < 0) {
        LODWORD(v12) = v40;
      }
      *(void *)(v20 + 152) = 0;
      int v48 = FERuntimeData_ObjClose((void *)v20, v41, v42, v43, v44, v45, v46, v47);
      if (v48 < 0) {
        LODWORD(v12) = v48;
      }
      *(void *)(v20 + 176) = 0;
      int v56 = FEFunctionMap_ObjClose((void *)v20, v49, v50, v51, v52, v53, v54, v55);
      if (v56 >= 0) {
        uint64_t v12 = v12;
      }
      else {
        uint64_t v12 = v56;
      }
      *(void *)(v20 + 160) = 0;
      if (*(void *)(v20 + 88)) {
        objc_ReleaseObject(*(void *)(v9 + 48), (uint64_t)"FE_DCTLKP");
      }
      if (*(void *)(v20 + 112)) {
        objc_ReleaseObject(*(void *)(v9 + 48), (uint64_t)"FE_DEPES");
      }
      if (*(void *)(v20 + 64)) {
        objc_ReleaseObject(*(void *)(v9 + 48), (uint64_t)"LINGDB");
      }
      uint64_t v57 = *(void *)(v20 + 344);
      if (v57)
      {
        if (*(_WORD *)(v20 + 336))
        {
          unint64_t v58 = 0;
          do
          {
            heap_Free(*(void **)(v9 + 8), *(void *)(*(void *)(v20 + 344) + 8 * v58));
            *(void *)(*(void *)(v20 + 344) + 8 * v58++) = 0;
          }
          while (v58 < *(unsigned __int16 *)(v20 + 336));
          uint64_t v57 = *(void *)(v20 + 344);
        }
        heap_Free(*(void **)(v9 + 8), v57);
      }
      uint64_t v59 = *(void *)(v20 + 288);
      if (v59) {
        heap_Free(*(void **)(v9 + 8), v59);
      }
      if (*(_DWORD *)(v20 + 612) == 1)
      {
        int v60 = nn_tn_UnLoad(*(void *)v20, *(void *)(v20 + 24), v20 + 640);
        if (v60 >= 0) {
          uint64_t v12 = v12;
        }
        else {
          uint64_t v12 = v60;
        }
      }
      heap_Free(*(void **)(v9 + 8), v20);
    }
    heap_Free(*(void **)(v9 + 8), (uint64_t)a2);
    return log_OutText(*(void *)(v9 + 32), (uint64_t)"TOKENTN", 4, 0, (uint64_t)"tokentn : loc ObjClose End (%x)", v61, v62, v63, v12);
  }
  return result;
}

uint64_t tokenTN_init_ProcessData(uint64_t a1)
{
  uint64_t v2 = 2304778250;
  uint64_t v3 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, *(unsigned __int16 *)(a1 + 312) + 1);
  *(void *)(a1 + 552) = v3;
  if (v3)
  {
    *(_WORD *)(a1 + 314) = 1;
    if (*(_WORD *)(a1 + 312))
    {
      int v4 = 0;
      while (utf8_strchr(g_szSpace_1, (const char *)(*(void *)(a1 + 304) + (unsigned __int16)v4)))
      {
        v4 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 304) + (unsigned __int16)v4));
        unsigned int v5 = *(unsigned __int16 *)(a1 + 312);
        if (v5 <= (unsigned __int16)v4) {
          goto LABEL_8;
        }
      }
      unsigned int v5 = *(unsigned __int16 *)(a1 + 312);
LABEL_8:
      if (v5 > (unsigned __int16)v4)
      {
        do
        {
          int v4 = (unsigned __int16)v4;
          if (utf8_strchr(g_szSpace_1, (const char *)(*(void *)(a1 + 304) + (unsigned __int16)v4)))
          {
            ++*(_WORD *)(a1 + 314);
            for (unsigned int i = *(unsigned __int8 *)(*(void *)(a1 + 304) + (unsigned __int16)v4);
                  ;
                  unsigned int i = *(unsigned __int8 *)(*(void *)(a1 + 304) + (unsigned __int16)v4))
            {
              v4 += utf8_determineUTF8CharLength(i);
              if (*(unsigned __int16 *)(a1 + 312) <= (unsigned __int16)v4
                || !utf8_strchr(g_szSpace_1, (const char *)(*(void *)(a1 + 304) + (unsigned __int16)v4)))
              {
                break;
              }
            }
          }
          else
          {
            LOWORD(v4) = v4
                       + utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 304) + (unsigned __int16)v4));
          }
        }
        while (*(unsigned __int16 *)(a1 + 312) > (unsigned __int16)v4);
      }
    }
    uint64_t inited = initStrRes(a1, a1 + 392);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 408);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 488);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 560);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 576);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 592);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 504);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 424);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 472);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 440);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initStrRes(a1, a1 + 456);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initAlignmentData(a1);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t inited = initMatchList(a1);
    if ((inited & 0x80000000) != 0) {
      return inited;
    }
    uint64_t v2 = initSolutionList(a1);
    if ((v2 & 0x80000000) == 0)
    {
      uint64_t v8 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 40);
      *(void *)(a1 + 320) = v8;
      uint64_t v13 = *(void *)a1;
      if (!v8)
      {
LABEL_33:
        log_OutPublic(*(void *)(v13 + 32), *(void *)(a1 + 184), 24048, 0, v9, v10, v11, v12, v16);
        return 2304778250;
      }
      uint64_t v14 = heap_Calloc(*(void **)(v13 + 8), 1, 48);
      *(void *)(a1 + 328) = v14;
      if (!v14)
      {
        uint64_t v13 = *(void *)a1;
        goto LABEL_33;
      }
    }
  }
  return v2;
}

uint64_t tokentn_ReadSentence(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v18 = 0;
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : ReadSentence Begin", a6, a7, a8, v16);
  a1[38] = 0;
  uint64_t v9 = (*(uint64_t (**)(void, void, uint64_t, void, int *))(a1[8] + 104))(a1[9], a1[10], 1, 0, &v18);
  if ((v9 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24034, 0, v10, v11, v12, v13, v17);
    return TOKENTNERROR(0);
  }
  else
  {
    uint64_t v14 = v9;
    if ((_WORD)v18) {
      (*(uint64_t (**)(void, void))(a1[8] + 184))(a1[9], a1[10]);
    }
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokentn : ReadSentence End (%x)", v11, v12, v13, v14);
  }
  return v14;
}

BOOL filteredTriggerType(int a1, unsigned int a2)
{
  if (!a1 || a1 == 1 && a2 == 2 || a1 == 2 && a2 == 1 || a1 == 3 && !a2 || a1 == 4 && a2 < 2) {
    return 1;
  }
  if (a1 == 6)
  {
    if (a2 - 1 < 2) {
      return 1;
    }
  }
  else if (a1 == 5)
  {
    return (a2 & 0xFFFFFFFD) == 0;
  }
  return 0;
}

uint64_t tokentn_ApplyOneRule(uint64_t *a1, uint64_t *a2, int a3, unsigned int a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  if (!filteredTriggerType(a3, a4))
  {
    uint64_t v20 = *(void *)(*a1 + 32);
    uint64_t v21 = a1[23];
    uint64_t v22 = *(void *)(*a2 + 24);
    uint64_t v23 = "rule %s (token %s, %d,%d) blocked by triggerType %s";
    goto LABEL_8;
  }
  if (*((_DWORD *)a1 + 240) == 1 && blockedByBtok((uint64_t)a1, a5, a6, v15, v16, v17, v18, v19) == 1)
  {
    uint64_t v20 = *(void *)(*a1 + 32);
    uint64_t v21 = a1[23];
    uint64_t v22 = *(void *)(*a2 + 24);
    uint64_t v23 = "rule %s (token %s, %d,%d) blocked by prior btok";
LABEL_8:
    log_OutText(v20, v21, 5, 0, (uint64_t)v23, v17, v18, v19, v22);
    return 0;
  }
  uint64_t v24 = *a2;
  uint64_t v25 = *(uint64_t **)(*a2 + 8);
  uint64_t v26 = *v25;
  *(unsigned char *)(v26 + 82) = 0;
  *(_WORD *)(v26 + 40) = 0;
  uint64_t v27 = *(void *)(v24 + 24);
  v25[2] = a1[38];
  v25[3] = v27;
  *(void *)(v26 + 88) = *(void *)(v24 + 48);
  *(_WORD *)(v26 + 104) = a7;
  *(_WORD *)(v26 + 106) = a8;
  *((_WORD *)v25 + 20) = *(_WORD *)(v24 + 40);
  *((_WORD *)v25 + 26) = *(_WORD *)(v24 + 44);
  *((_WORD *)v25 + 27) = *(_WORD *)(v24 + 46);
  *((_DWORD *)v25 + 11) = 0;
  *((_DWORD *)v25 + 12) = 0;
  uint64_t result = tokenizer_apply_regex_LongestMatch(a1, v24, v14, v15, v16, v17, v18, v19);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v29 = *(void *)(*a2 + 8);
    **(_DWORD **)(v29 + 8) = 0;
    *(_DWORD *)(v29 + 44) = 0;
  }
  return result;
}

uint64_t tokentn_AllInOneLoop(uint64_t a1, uint64_t a2)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  unsigned __int16 v118 = 0;
  bzero(v127, 0x3E8uLL);
  unsigned __int16 v117 = 0;
  uint64_t v116 = 0;
  int v115 = 0;
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  uint64_t v8 = *(void *)(a1 + 184);
  if (*(_DWORD *)(a1 + 960) == 1) {
    log_OutText(v7, v8, 4, 0, (uint64_t)"tokentn : AllInOneLoop Begin (btok=%d)", v4, v5, v6, a2);
  }
  else {
    log_OutText(v7, v8, 4, 0, (uint64_t)"tokentn : AllInOneLoop Begin", v4, v5, v6, 0);
  }
  if ((paramc_ParamGetInt(*(void *)(*(void *)a1 + 40), (uint64_t)"maxTNNNcallspersent", &v115) & 0x80000000) == 0)
  {
    uint64_t v16 = (unsigned __int16)v115;
    *(_WORD *)(a1 + 728) = v115;
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"set maxNNCallsPerSent to %d", v13, v14, v15, v16);
  }
  *(_WORD *)(a1 + 730) = 0;
  uint64_t v17 = *(uint64_t **)(a1 + 168);
  *(void *)(*(void *)(*v17 + 8) + 32) = a1;
  uint64_t v18 = setDomainsOnSentence((uint64_t *)a1, v9, v10, v11, v12, v13, v14, v15);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  uint64_t v26 = mergeDomainsOnSentence((void *)a1, v19, v20, v21, v22, v23, v24, v25);
  if ((v26 & 0x80000000) != 0) {
    return v26;
  }
  int v114 = a2;
  uint64_t v27 = *v17;
  *(void *)(*(void *)(*v17 + 8) + 16) = *(void *)(a1 + 304);
  *(_WORD *)(v27 + 64) = 16;
  *(_WORD *)(v27 + 42) = *(_WORD *)(a1 + 312);
  uint64_t v28 = *(void *)(*(void *)(a1 + 264) + 16);
  int NumberChildren = LDOTreeNode_GetNumberChildren(v28);
  uint64_t v33 = *(void *)(*(void *)a1 + 32);
  uint64_t v34 = *(void *)(a1 + 184);
  if (!NumberChildren)
  {
    uint64_t v95 = "no basic token records to process";
    uint64_t v96 = 5;
    goto LABEL_96;
  }
  log_OutText(v33, v34, 4, 0, (uint64_t)"tokentn : start loop...", v29, v30, v31, v110);
  uint64_t v36 = *(uint64_t **)(v28 + 80);
  unint64_t v35 = *(void *)(v28 + 88);
  if ((unint64_t)v36 >= v35)
  {
LABEL_63:
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"spaceInPYT", &v116) & 0x80000000) != 0
      || LH_stricmp(v116, "yes"))
    {
      goto LABEL_95;
    }
    uint64_t v26 = 0;
    unint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v123 = 0;
    int v124 = 0;
    uint64_t v97 = *(void *)(*(void *)(a1 + 264) + 16);
    uint64_t v98 = *(uint64_t **)(v97 + 80);
    if ((unint64_t)v98 >= *(void *)(v97 + 88))
    {
LABEL_89:
      if (v124) {
        LDO_FreeLDOLabelVector(*(void *)(a1 + 264), (uint64_t)&v123);
      }
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_95;
      }
      return v26;
    }
    unsigned __int8 v99 = 0;
    int v100 = 0;
    while (1)
    {
      unint64_t v122 = 0;
      if (v99)
      {
        int Type = LDOObject_GetType(*v99, (uint64_t *)&v122);
        uint64_t v18 = LH_ERROR_to_VERROR(Type);
        if ((v18 & 0x80000000) != 0) {
          return v18;
        }
      }
      int v102 = LDOTreeNode_ComputeAbsoluteFrom(*v98, (_DWORD *)&v126 + 1);
      uint64_t v18 = LH_ERROR_to_VERROR(v102);
      if ((v18 & 0x80000000) != 0) {
        return v18;
      }
      int v103 = LDOTreeNode_ComputeAbsoluteTo(*v98, &v126);
      uint64_t v26 = LH_ERROR_to_VERROR(v103);
      if ((v26 & 0x80000000) != 0) {
        return v26;
      }
      if (!v99 || cstdlib_strcmp(v122, "TOKEN_PUNCT") && cstdlib_strcmp(v122, "TOKEN_WSPACE"))
      {
        int v104 = LDO_ComputeOverlappingLabels(*(void *)(a1 + 264), (unsigned int *)&v126 + 1, (unsigned int *)&v126, 0, (unsigned int *)&v123);
        uint64_t v26 = LH_ERROR_to_VERROR(v104);
        if ((v26 & 0x80000000) != 0) {
          return v26;
        }
        for (unsigned int i = v124; (unint64_t)i < v125; ++i)
        {
          unsigned __int16 __s1 = 0;
          int v120 = 0;
          int StringAttribute = LDOObject_GetStringAttribute(*i, "TNTAG", &v120, (uint64_t *)&__s1);
          uint64_t v26 = LH_ERROR_to_VERROR(StringAttribute);
          if ((v26 & 0x80000000) != 0) {
            goto LABEL_89;
          }
          if (v120 && !cstdlib_strcmp(__s1, "_PI1a_"))
          {
            if (v100 == 1) {
              int v107 = "left";
            }
            else {
              int v107 = "none";
            }
            int v108 = LDOObject_SetStringAttribute(*v98, "INPUTSPACETAG", v107);
            uint64_t v26 = LH_ERROR_to_VERROR(v108);
            if ((v26 & 0x80000000) != 0) {
              goto LABEL_89;
            }
            int v100 = 0;
          }
        }
        LDO_FreeLDOLabelVector(*(void *)(a1 + 264), (uint64_t)&v123);
        unsigned __int8 v99 = v98;
      }
      else
      {
        int v100 = 1;
      }
      if ((unint64_t)++v98 >= *(void *)(v97 + 88)) {
        goto LABEL_89;
      }
    }
  }
  unsigned int v112 = *(uint64_t **)(v28 + 88);
  while (1)
  {
    unsigned __int16 __s1 = 0;
    LODWORD(v126) = 0;
    int v120 = 0;
    size_t v37 = *v36;
    int v38 = LDOTreeNode_ComputeAbsoluteFrom(*v36, &v126);
    uint64_t ActiveDomains = LH_ERROR_to_VERROR(v38);
    if ((ActiveDomains & 0x80000000) != 0
      || (int v46 = LDOTreeNode_ComputeAbsoluteTo(v37, &v120),
          uint64_t ActiveDomains = LH_ERROR_to_VERROR(v46),
          (ActiveDomains & 0x80000000) != 0))
    {
LABEL_94:
      uint64_t v26 = ActiveDomains;
      goto LABEL_95;
    }
    int v47 = LDOObject_GetType(v37, (uint64_t *)&__s1);
    uint64_t v26 = LH_ERROR_to_VERROR(v47);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_95;
    }
    uint64_t v48 = (unsigned __int16)v126;
    int v49 = (unsigned __int16)v120;
    if (!cstdlib_strcmp(__s1, "TOKEN_ALPHA"))
    {
      unsigned int v50 = 0;
      goto LABEL_20;
    }
    if (!cstdlib_strcmp(__s1, "TOKEN_DIGIT")) {
      break;
    }
    if (!cstdlib_strcmp(__s1, "TOKEN_PUNCT"))
    {
      unsigned int v50 = 2;
      goto LABEL_20;
    }
LABEL_58:
    ++v36;
LABEL_59:
    if ((unint64_t)v36 >= v35) {
      goto LABEL_63;
    }
  }
  unsigned int v50 = 1;
LABEL_20:
  unsigned __int16 v117 = 0;
  uint64_t ActiveDomains = FERuntimeData_GetActiveDomains(a1, (uint64_t)v127, &v117, v48, v49, 0);
  if ((ActiveDomains & 0x80000000) != 0) {
    goto LABEL_94;
  }
  uint64_t v113 = v36;
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"START basic token %d,%d ... %d active domains", v43, v44, v45, v48);
  if (v117)
  {
    for (unint64_t j = 0; j < v117; ++j)
    {
      unsigned int v55 = (unsigned __int16)v127[j];
      int v119 = 0;
      unint64_t v122 = 0;
      uint64_t v123 = 0;
      HIDWORD(v126) = 0;
      int v56 = *(uint64_t **)(a1 + 168);
      uint64_t v57 = *v56;
      *(_WORD *)(v57 + 46) = 0;
      *(_WORD *)(v57 + 44) = v48;
      *(void *)(v57 + 48) = 0;
      if ((FERuntimeData_GetDomainRange(a1, v55, &v123) & 0x80000000) == 0)
      {
        log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"Domain %d : range %d,%d", v51, v52, v53, j);
        *(_WORD *)(*v56 + 46) = *(_WORD *)(v123 + 2);
        if ((FERuntimeData_GetDomainBlockIndex((void *)a1, v55, &v119, (_WORD *)&v119 + 1) & 0x80000000) == 0
          && (FEData_blockData_newGetDomainDefBlockInfo((void *)a1, (unsigned __int16)v119, &v122, v58, v59, v51, v52, v53) & 0x80000000) == 0)
        {
          if (HIWORD(v119) <= *((unsigned __int16 *)v122 + 12))
          {
            uint64_t v61 = *((void *)v122 + 2);
            if (v114 == 1 && *(_DWORD *)(a1 + 960) == 1)
            {
              uint64_t v62 = v61 + 72 * HIWORD(v119);
              int v64 = *(unsigned __int16 *)(v62 + 42);
              uint64_t v63 = (unsigned __int16 *)(v62 + 42);
              if (v64)
              {
                uint64_t v65 = 0;
                unint64_t v66 = 0;
                do
                {
                  uint64_t v67 = *(void *)(v63 - 5);
                  uint64_t v68 = *v56;
                  *(_WORD *)(v68 + 40) = 0;
                  v68 += 40;
                  uint64_t v69 = v67 + v65;
                  *(void *)(v68 + 8) = v69;
                  if ((FEData_blockData_getBTokAndRegexData((void *)a1, *(unsigned __int16 *)(v69 + 2), *(unsigned __int16 *)(v69 + 4), (void *)(v68 - 8), (_WORD *)v68, (void *)(v68 - 16), (_DWORD *)&v126 + 1, v53) & 0x80000000) != 0)break; {
                  if ((tokentn_ApplyOneRule((uint64_t *)a1, v56, SHIDWORD(v126), v50, v48, v49, v119, SHIWORD(v119)) & 0x80000000) != 0)
                  }
                    break;
                  ++v66;
                  v65 += 12;
                }
                while (v66 < *v63);
              }
            }
            else
            {
              uint64_t v70 = *((void *)v122 + 4) + 16 * *(unsigned __int16 *)(v61 + 72 * HIWORD(v119) + 12);
              log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"doing domain %d, Domain[%s:%s] (applying %d rules)", v51, v52, v53, j);
              if (*(_WORD *)(v70 + 8))
              {
                uint64_t v71 = 0;
                unint64_t v72 = 0;
                do
                {
                  uint64_t v73 = *(void *)v70 + v71;
                  uint64_t v74 = *v56;
                  *(_WORD *)(v74 + 40) = 0;
                  v74 += 40;
                  *(void *)(v74 + 8) = v73;
                  if ((FEData_blockData_getTokenAndRegexData((void *)a1, v73, (void *)(v74 - 8), (_WORD *)v74, (void *)(v74 - 16), (_DWORD *)&v126 + 1, v52, v53) & 0x80000000) != 0)break; {
                  if ((tokentn_ApplyOneRule((uint64_t *)a1, v56, SHIDWORD(v126), v50, v48, v49, v119, SHIWORD(v119)) & 0x80000000) != 0)
                  }
                    break;
                  ++v72;
                  v71 += 12;
                }
                while (v72 < *(unsigned __int16 *)(v70 + 8));
              }
            }
          }
          else
          {
            log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24028, (uint64_t)"%s%d%s%d", v60, v51, v52, v53, "domain");
            TOKENTNERROR(0);
          }
        }
      }
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"END of loop for basic token %d,%d", v51, v52, v53, v48);
  uint64_t v26 = tokenizer_ResolveMatches(a1, v75, v76, v77, v78, v79, v80, v81);
  if ((v26 & 0x80000000) != 0) {
    goto LABEL_95;
  }
  if (!FERuntimeData_GetNumMatches((void *)a1, v82, v40, v41, v42, v43, v44, v45))
  {
    FERuntimeData_FreeMatches((void *)a1, 0, v83, v84, v85, v86, v87, v88);
    unint64_t v35 = (unint64_t)v112;
    uint64_t v36 = v113;
    goto LABEL_58;
  }
  uint64_t v26 = textnormalizer_DoExpansionActions((uint64_t *)a1, &v118, v83, v84, v85, v86, v87, v88);
  unint64_t v35 = (unint64_t)v112;
  uint64_t v36 = v113;
  if ((v26 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24029, 0, v42, v43, v44, v45, v111);
    goto LABEL_95;
  }
  unsigned int v89 = v126;
  unsigned int v90 = v118;
  if (v126 >= v118)
  {
    unsigned int v92 = v126;
    unsigned int v93 = v118;
LABEL_55:
    if (v92 > v93) {
      log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24063, 0, v42, v43, v44, v45, v111);
    }
    FERuntimeData_FreeMatches((void *)a1, 0, v40, v41, v42, v43, v44, v45);
    if (v89 < v90) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  uint64_t v91 = v113 + 1;
  unsigned int v92 = v126;
  unsigned int v93 = v118;
  uint64_t v36 = v112;
  if (v113 + 1 == v112) {
    goto LABEL_55;
  }
  while (1)
  {
    int v94 = LDOTreeNode_ComputeAbsoluteFrom(*v91, &v126);
    uint64_t v26 = LH_ERROR_to_VERROR(v94);
    if ((v26 & 0x80000000) != 0) {
      break;
    }
    unsigned int v92 = v126;
    unsigned int v93 = v118;
    if (v126 >= v118)
    {
      uint64_t v36 = v91;
      goto LABEL_55;
    }
    if (++v91 == v112)
    {
      uint64_t v36 = v112;
      goto LABEL_55;
    }
  }
LABEL_95:
  FERuntimeData_FreeMatches((void *)a1, 1, v40, v41, v42, v43, v44, v45);
  uint64_t v33 = *(void *)(*(void *)a1 + 32);
  uint64_t v34 = *(void *)(a1 + 184);
  uint64_t v95 = "tokentn : AllInOneLoop End (%x)";
  uint64_t v110 = v26;
  uint64_t v96 = 4;
LABEL_96:
  log_OutText(v33, v34, v96, 0, (uint64_t)v95, v29, v30, v31, v110);
  return v26;
}

uint64_t FEData_domainDefs_ObjOpen(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(*a1 + 32);
  uint64_t v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"domainDefs : ObjOpen Begin", a6, a7, a8, v23);
    *a2 = 0;
    uint64_t v12 = (_WORD *)heap_Calloc(*(void **)(*a1 + 8), 1, 2);
    if (v12)
    {
      uint64_t v17 = v12;
      cstdlib_memset(v12, 0, 2uLL);
      *uint64_t v17 = 0;
      *a2 = v17;
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"domainDefs : ObjOpen End (%x)", v18, v19, v20, 0);
      return 0;
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v24);
    uint64_t v22 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v23);
    uint64_t v22 = 7;
  }

  return FEDATA_ERROR(v22);
}

uint64_t FEData_domainDefs_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1[19] + 8);
  uint64_t v10 = *(void *)(*a1 + 32);
  uint64_t v11 = a1[23];
  if (v9)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"domainDefs : ObjClose Begin", a6, a7, a8, v16);
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"domainDefs : ObjClose End (%x)", v12, v13, v14, 0);
    heap_Free(*(void **)(*a1 + 8), v9);
    return 0;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v16);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_loc_ObjClose()
{
  return 0;
}

uint64_t FEData_blockData_ObjOpen(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(*a1 + 32);
  uint64_t v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"blockData : ObjOpen Begin", a6, a7, a8, v23);
    *a2 = 0;
    uint64_t v12 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, 144);
    if (v12)
    {
      uint64_t v17 = v12;
      cstdlib_memset(v12, 0, 0x90uLL);
      *(_WORD *)uint64_t v17 = 0;
      v17[17] = 0;
      *a2 = v17;
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"blockData : ObjOpen End (%x)", v18, v19, v20, 0);
      return 0;
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v24);
    uint64_t v22 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v23);
    uint64_t v22 = 7;
  }

  return FEDATA_ERROR(v22);
}

uint64_t FEData_blockData_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1[19] + 16);
  uint64_t v10 = *(void *)(*a1 + 32);
  uint64_t v11 = a1[23];
  if (v9)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"blockData : ObjClose Begin", a6, a7, a8, v16);
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"blockData : ObjClose End (%x)", v12, v13, v14, 0);
    heap_Free(*(void **)(*a1 + 8), v9);
    return 0;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v16);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_IsRemappable(void *a1, char *__s2, void *a3, _WORD *a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (!v8)
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, v20);
    return 0;
  }
  if (!*v8) {
    return 0;
  }
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = *(_DWORD **)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * v13) + 24);
    if (v14)
    {
      if (!*v14)
      {
        uint64_t v15 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * v13) + 24);
        if (*(_WORD *)(v15 + 16)) {
          break;
        }
      }
    }
LABEL_6:
    if (++v13 >= (unint64_t)*v8) {
      return 0;
    }
  }
  unint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *(void *)(*(void *)(v15 + 8) + 8 * v16);
    if (*(_WORD *)(v17 + 12)) {
      break;
    }
LABEL_14:
    ++v16;
    uint64_t v15 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * v13) + 24);
    if (v16 >= *(unsigned __int16 *)(v15 + 16)) {
      goto LABEL_6;
    }
  }
  uint64_t v18 = 0;
  while (cstdlib_strcmp(*(const char **)(*(void *)(v17 + 16) + 8 * v18), __s2))
  {
    if (++v18 >= (unint64_t)*(unsigned __int16 *)(v17 + 12)) {
      goto LABEL_14;
    }
  }
  *a3 = *(void *)v17;
  *a4 = *(_WORD *)(v17 + 8);
  *a5 = *(_WORD *)(v17 + 10);
  return 1;
}

uint64_t FEData_blockData_newGetDomainDefBlockInfo(void *a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 > a2)
    {
      *a3 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * a2) + 16);
      return 0;
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "domain");
    uint64_t v10 = 25;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v11);
    uint64_t v10 = 7;
  }

  return FEDATA_ERROR(v10);
}

uint64_t FEData_blockData_newGetDomainEntry(void *a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    else
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * a2) + 16);
      if (*(unsigned __int16 *)(v9 + 24) > a3)
      {
        *a4 = *(void *)(v9 + 16) + 72 * a3;
        return 0;
      }
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24042, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    uint64_t v11 = 25;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v12);
    uint64_t v11 = 7;
  }

  return FEDATA_ERROR(v11);
}

uint64_t FEData_blockData_newGetPriorityList(void *a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    if (*v8 <= a2)
    {
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24041, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "domain");
    }
    else
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * a2) + 16);
      if (*(unsigned __int16 *)(v9 + 48) > a3)
      {
        *a4 = *(void *)(v9 + 32) + 16 * a3;
        return 0;
      }
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24043, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "priorityListIndex");
    }
    uint64_t v11 = 25;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v12);
    uint64_t v11 = 7;
  }

  return FEDATA_ERROR(v11);
}

uint64_t FEData_blockData_getDomains2SearchIn(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 **)(a1[19] + 16);
  if (v8)
  {
    unsigned int v11 = *v8;
    if (a6 == 1)
    {
      if (*v8)
      {
        unint64_t v12 = 0;
        uint64_t v13 = *(void *)(*((void *)v8 + 17) + 8);
        do
        {
          if (*(void *)(*(void *)(v13 + 8 * v12) + 16))
          {
            unint64_t v14 = (unsigned __int16)*a5;
            if (v14 <= 0x1F2)
            {
              *(_WORD *)(a4 + 2 * v14) = v12;
              ++*a5;
              unsigned int v11 = *v8;
            }
          }
          ++v12;
        }
        while (v12 < v11);
      }
    }
    else if (*v8)
    {
      unint64_t v18 = 0;
      unint64_t v19 = a2;
      do
      {
        unsigned int v20 = *(const char ***)(*(void *)(*(void *)(*((void *)v8 + 17) + 8) + 8 * v18) + 16);
        if (v20) {
          BOOL v21 = a2 == 0;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21)
        {
          unint64_t v22 = 0;
          do
          {
            if (!cstdlib_strcmp(*(const char **)(a3 + 8 * v22), *v20))
            {
              unint64_t v23 = (unsigned __int16)*a5;
              if (v23 <= 0x1F2)
              {
                *(_WORD *)(a4 + 2 * v23) = v18;
                ++*a5;
              }
            }
            ++v22;
          }
          while (v22 < v19);
          unsigned int v11 = *v8;
        }
        ++v18;
      }
      while (v18 < v11);
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, v24);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndCheckData(void *a1, uint64_t a2, void *a3, _WORD *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1[19] + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = *(unsigned __int16 *)(a2 + 4);
    uint64_t v12 = *(void *)(v9 + 24);
    uint64_t v13 = v10 + 32 * v11;
    *a3 = v12 + *(unsigned __int16 *)(v13 + 4);
    if (a4) {
      *a4 = *(_WORD *)(v13 + 24);
    }
    if (*(_WORD *)(v13 + 24)) {
      uint64_t v14 = *(void *)(v10 + 32 * v11 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    *a5 = v14;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenData(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1[19] + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    *a3 = *(void *)(v9 + 24) + *(unsigned __int16 *)(*(void *)(v9 + 48) + 32 * *(unsigned __int16 *)(a2 + 4) + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndExpansionData(void *a1, uint64_t a2, void *a3, _WORD *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1[19] + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    uint64_t v10 = *(void *)(v9 + 24);
    uint64_t v11 = *(void *)(v9 + 48) + 32 * *(unsigned __int16 *)(a2 + 4);
    *a3 = v10 + *(unsigned __int16 *)(v11 + 4);
    *a4 = *(_WORD *)(v11 + 26);
    if (*(_WORD *)(v11 + 26)) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = 0;
    }
    *a5 = v12;
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getTokenAndRegexData(void *a1, uint64_t a2, void *a3, _WORD *a4, void *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1[19] + 16);
  if (v8)
  {
    uint64_t v9 = *(void **)(*(void *)(*(void *)(*(void *)(v8 + 136) + 8) + 8 * *(unsigned __int16 *)(a2 + 2)) + 8);
    uint64_t v10 = v9[6] + 32 * *(unsigned __int16 *)(a2 + 4);
    uint64_t v11 = v9[8] + 16 * *(unsigned __int16 *)(v10 + 6);
    *a4 = *(_WORD *)(v11 + 10);
    *a6 = *(_DWORD *)(v11 + 12);
    *a3 = v9[4] + *(unsigned int *)(v11 + 4);
    *a5 = v9[3] + *(unsigned __int16 *)(v10 + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, (uint64_t)a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_getBTokAndRegexData(void *a1, unsigned int a2, unsigned int a3, void *a4, _WORD *a5, void *a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1[19] + 16);
  if (v8)
  {
    uint64_t v9 = *(void **)(*(void *)(*(void *)(*(void *)(v8 + 136) + 8) + 8 * a2) + 8);
    uint64_t v10 = v9[6] + 32 * a3;
    uint64_t v11 = v9[8] + 16 * *(unsigned __int16 *)(v10 + 6);
    *a5 = *(_WORD *)(v11 + 10);
    *a7 = *(_DWORD *)(v11 + 12);
    *a4 = v9[4] + *(unsigned int *)(v11 + 4);
    *a6 = v9[3] + *(unsigned __int16 *)(v10 + 4);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t readDataBlockFromFileRefCntBase(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v12 = *(unsigned __int16 **)(a1[19] + 16);
  uint64_t v13 = heap_Calloc(*(void **)(*a1 + 8), 1, 16);
  *(void *)a6 = v13;
  uint64_t v18 = *a1;
  if (!v13)
  {
LABEL_143:
    log_OutPublic(*(void *)(v18 + 32), a1[23], 24048, 0, v14, v15, v16, v17, v143);
    uint64_t StringZ = FEDATA_ERROR(10);
    if ((StringZ & 0x80000000) != 0) {
      goto LABEL_144;
    }
    return StringZ;
  }
  *(void *)(*(void *)a6 + 8) = heap_Calloc(*(void **)(v18 + 8), 1, (8 * *v12) | 1);
  if (!*(void *)(*(void *)a6 + 8))
  {
LABEL_142:
    uint64_t v18 = *a1;
    goto LABEL_143;
  }
  int v19 = *v12;
  **(_WORD **)a6 = v19;
  if (!v19) {
    return 0;
  }
  int v151 = a5;
  unsigned int v20 = 0;
  uint64_t v152 = v12;
  while (1)
  {
    *(void *)(*(void *)(*(void *)a6 + 8) + 8 * v20) = heap_Calloc(*(void **)(*a1 + 8), 1, 48);
    uint64_t v21 = *(void *)(*(void *)(*(void *)a6 + 8) + 8 * v20);
    if (!v21) {
      goto LABEL_142;
    }
    int __dst = 0;
    int v158 = 0;
    uint64_t v157 = 0;
    unsigned int v156 = 0;
    uint64_t v154 = 0;
    __src = 0;
    Chun__int16 k = ssftriff_reader_FindChunk(a2, "HEAD", 1, (unsigned int *)&v157, &__src);
    if ((Chunk & 0x80000000) != 0) {
      goto LABEL_123;
    }
    unsigned int v156 = 0;
    cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
    v156 += 2;
    *(_DWORD *)uint64_t v21 = HIWORD(__dst);
    uint64_t StringZ = ssftriff_reader_CloseChunk(a2);
    if ((StringZ & 0x80000000) != 0) {
      goto LABEL_124;
    }
    unsigned int v28 = *(_DWORD *)v21;
    if ((*(_DWORD *)v21 - 3) <= 2)
    {
      uint64_t v29 = heap_Calloc(*(void **)(*a1 + 8), 1, 24);
      *(void *)(v21 + 24) = v29;
      if (!v29) {
        goto LABEL_40;
      }
      Chun__int16 k = ssftriff_reader_FindChunk(a2, "REMP", 1, (unsigned int *)&v157, &__src);
      if ((Chunk & 0x80000000) != 0) {
        goto LABEL_123;
      }
      unsigned int v156 = 0;
      cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
      unsigned int v31 = v156 + 2;
      v156 += 2;
      int v32 = HIWORD(__dst);
      uint64_t v33 = *(_DWORD **)(v21 + 24);
      *uint64_t v33 = HIWORD(__dst);
      if (!v32)
      {
        cstdlib_memcpy(v33 + 4, (char *)__src + v31, 2uLL);
        v156 += 2;
        if (*(_WORD *)(*(void *)(v21 + 24) + 16))
        {
          uint64_t v61 = heap_Calloc(*(void **)(*a1 + 8), 1, 8 * *(unsigned __int16 *)(*(void *)(v21 + 24) + 16));
          uint64_t v66 = *(void *)(v21 + 24);
          *(void *)(v66 + 8) = v61;
          if (!v61)
          {
            log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v62, v63, v64, v65, v143);
            *(_WORD *)(*(void *)(v21 + 24) + 16) = 0;
            goto LABEL_132;
          }
          if (*(_WORD *)(v66 + 16))
          {
            unint64_t v67 = 0;
            do
            {
              *(void *)(*(void *)(*(void *)(v21 + 24) + 8) + 8 * v67) = heap_Calloc(*(void **)(*a1 + 8), 1, 24);
              uint64_t v68 = *(void *)(v21 + 24);
              if (!*(void *)(*(void *)(v68 + 8) + 8 * v67)) {
                goto LABEL_131;
              }
              ++v67;
            }
            while (v67 < *(unsigned __int16 *)(v68 + 16));
            uint64_t v12 = v152;
            if (*(_WORD *)(v68 + 16))
            {
              uint64_t v69 = 0;
              while (1)
              {
                uint64_t v70 = *(void **)(*(void *)(v68 + 8) + 8 * v69);
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v156, 2uLL);
                v156 += 2;
                ++HIWORD(__dst);
                uint64_t v71 = (unsigned char *)heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst));
                *uint64_t v70 = v71;
                if (!v71) {
                  goto LABEL_131;
                }
                HIDWORD(v154) = HIWORD(__dst);
                uint64_t StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v157, v156, v71, (unsigned int *)&v154 + 1);
                if ((StringZ & 0x80000000) != 0) {
                  goto LABEL_133;
                }
                uint64_t v146 = v69;
                if (HIDWORD(v154) != HIWORD(__dst)) {
                  goto LABEL_126;
                }
                v156 += HIDWORD(v154);
                cstdlib_memcpy(v70 + 1, (char *)__src + v156, 2uLL);
                v156 += 2;
                cstdlib_memcpy((char *)v70 + 10, (char *)__src + v156, 2uLL);
                v156 += 2;
                BOOL v150 = (_WORD *)v70 + 6;
                cstdlib_memcpy((char *)v70 + 12, (char *)__src + v156, 2uLL);
                v156 += 2;
                if (*((_WORD *)v70 + 6))
                {
                  uint64_t v72 = heap_Calloc(*(void **)(*a1 + 8), 1, 8 * *((unsigned __int16 *)v70 + 6));
                  v70[2] = v72;
                  if (!v72)
                  {
                    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v73, v74, v75, v76, v143);
                    *BOOL v150 = 0;
                    goto LABEL_132;
                  }
                  if (*v150) {
                    break;
                  }
                }
LABEL_63:
                uint64_t v69 = v146 + 1;
                uint64_t v68 = *(void *)(v21 + 24);
                uint64_t v12 = v152;
                if (v146 + 1 >= (unint64_t)*(unsigned __int16 *)(v68 + 16)) {
                  goto LABEL_12;
                }
              }
              uint64_t v77 = 0;
              unsigned int v78 = v156;
              while (1)
              {
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v78, 2uLL);
                v156 += 2;
                ++HIWORD(__dst);
                *(void *)(v70[2] + 8 * v77) = heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst));
                int v38 = *(unsigned char **)(v70[2] + 8 * v77);
                if (!v38) {
                  break;
                }
                HIDWORD(v154) = HIWORD(__dst);
                uint64_t StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v157, v156, v38, (unsigned int *)&v154 + 1);
                if ((StringZ & 0x80000000) != 0) {
                  goto LABEL_133;
                }
                if (HIDWORD(v154) != HIWORD(__dst)) {
                  goto LABEL_126;
                }
                unsigned int v78 = v156 + HIDWORD(v154);
                v156 += HIDWORD(v154);
                if (++v77 >= (unint64_t)(unsigned __int16)*v150) {
                  goto LABEL_63;
                }
              }
LABEL_131:
              log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, (uint64_t)v38, v39, v40, v41, v143);
LABEL_132:
              uint64_t StringZ = FEDATA_ERROR(10);
              int v60 = 1;
              goto LABEL_41;
            }
          }
        }
      }
LABEL_12:
      uint64_t StringZ = ssftriff_reader_CloseChunk(a2);
      if ((StringZ & 0x80000000) != 0) {
        goto LABEL_124;
      }
      unsigned int v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x2D) != 0)
    {
      uint64_t v34 = heap_Calloc(*(void **)(*a1 + 8), 1, 72);
      *(void *)(v21 + 8) = v34;
      if (!v34) {
        goto LABEL_40;
      }
      unsigned int v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x36) != 0)
    {
      uint64_t v35 = heap_Calloc(*(void **)(*a1 + 8), 1, 64);
      *(void *)(v21 + 16) = v35;
      if (!v35)
      {
LABEL_40:
        log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v30, v24, v25, v26, v143);
        uint64_t StringZ = FEDATA_ERROR(10);
        int v60 = 0;
        goto LABEL_41;
      }
      unsigned int v28 = *(_DWORD *)v21;
    }
    if (v28 <= 5 && ((1 << v28) & 0x2D) != 0) {
      break;
    }
LABEL_78:
    if (v28 <= 5 && ((1 << v28) & 0x36) != 0)
    {
      Chun__int16 k = ssftriff_reader_FindChunk(a2, "DDAT", 1, (unsigned int *)&v157, &__src);
      if ((Chunk & 0x80000000) != 0)
      {
LABEL_123:
        uint64_t StringZ = Chunk;
LABEL_124:
        int v60 = 0;
      }
      else
      {
        unsigned int v156 = 0;
        cstdlib_memcpy((char *)&__dst + 2, __src, 2uLL);
        v156 += 2;
        ++HIWORD(__dst);
        unsigned int v92 = (unsigned char *)heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst));
        **(void **)(v21 + 16) = v92;
        if (!v92) {
          goto LABEL_131;
        }
        HIDWORD(v154) = HIWORD(__dst);
        uint64_t StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v157, v156, v92, (unsigned int *)&v154 + 1);
        if ((StringZ & 0x80000000) == 0)
        {
          if (HIDWORD(v154) != HIWORD(__dst)) {
            goto LABEL_126;
          }
          v156 += HIDWORD(v154);
          cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v156, 2uLL);
          v156 += 2;
          uint64_t v93 = v156;
          uint64_t v94 = *(void *)(v21 + 16);
          *(_DWORD *)(v94 + 8) = HIWORD(__dst);
          cstdlib_memcpy((void *)(v94 + 24), (char *)__src + v93, 2uLL);
          v156 += 2;
          cstdlib_memcpy((void *)(*(void *)(v21 + 16) + 50), (char *)__src + v156, 2uLL);
          v156 += 2;
          uint64_t v95 = *(void *)(v21 + 16);
          *(void *)(v95 + 56) = 0;
          if (*(_WORD *)(v95 + 50))
          {
            uint64_t v96 = heap_Calloc(*(void **)(*a1 + 8), 1, 8 * *(unsigned __int16 *)(v95 + 50));
            uint64_t v95 = *(void *)(v21 + 16);
            *(void *)(v95 + 56) = v96;
            if (!v96) {
              goto LABEL_131;
            }
            if (*(_WORD *)(v95 + 50))
            {
              unint64_t v97 = 0;
              unsigned int v98 = v156;
              do
              {
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v98, 2uLL);
                v156 += 2;
                ++HIWORD(__dst);
                *(void *)(*(void *)(*(void *)(v21 + 16) + 56) + 8 * v97) = heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst));
                int v38 = *(unsigned char **)(*(void *)(*(void *)(v21 + 16) + 56) + 8 * v97);
                if (!v38) {
                  goto LABEL_131;
                }
                HIDWORD(v154) = HIWORD(__dst);
                uint64_t StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v157, v156, v38, (unsigned int *)&v154 + 1);
                if ((StringZ & 0x80000000) != 0) {
                  goto LABEL_133;
                }
                if (HIDWORD(v154) != HIWORD(__dst)) {
                  goto LABEL_126;
                }
                unsigned int v98 = v156 + HIDWORD(v154);
                v156 += HIDWORD(v154);
                ++v97;
                uint64_t v95 = *(void *)(v21 + 16);
              }
              while (v97 < *(unsigned __int16 *)(v95 + 50));
            }
          }
          int v149 = a3;
          if (*(_WORD *)(v95 + 24))
          {
            uint64_t v99 = heap_Calloc(*(void **)(*a1 + 8), 1, 72 * *(unsigned __int16 *)(v95 + 24));
            uint64_t v95 = *(void *)(v21 + 16);
            *(void *)(v95 + 16) = v99;
            if (!v99) {
              goto LABEL_135;
            }
            if (*(_WORD *)(v95 + 24))
            {
              uint64_t v100 = 0;
              do
              {
                uint64_t v101 = *(void *)(v95 + 16);
                cstdlib_memcpy((char *)&__dst + 2, (char *)__src + v156, 2uLL);
                v156 += 2;
                uint64_t v102 = v101 + 72 * v100;
                *(_WORD *)(v102 + 56) = HIWORD(__dst);
                int v103 = (unsigned __int16 *)(v102 + 56);
                int v104 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst) + 1);
                *(void *)(v102 + 48) = v104;
                unint64_t v105 = (void *)(v102 + 48);
                if (!v104) {
                  goto LABEL_135;
                }
                uint64_t v147 = v100;
                uint64_t v106 = (_DWORD *)(v101 + 72 * v100);
                cstdlib_memcpy(v104, (char *)__src + v156, HIWORD(__dst));
                *(unsigned char *)(*v105 + HIWORD(__dst)) = 0;
                v156 += *v103;
                cstdlib_memcpy(v106, (char *)__src + v156, 2uLL);
                v156 += 2;
                cstdlib_memcpy((char *)v106 + 2, (char *)__src + v156, 2uLL);
                v156 += 2;
                cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
                v156 += 2;
                v106[15] = (unsigned __int16)__dst;
                cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
                v156 += 2;
                v106[16] = (unsigned __int16)__dst;
                cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
                v156 += 2;
                int v107 = (unsigned __int16)__dst;
                v106[2] = (unsigned __int16)__dst;
                if (v107 == 1)
                {
                  uint64_t v108 = v101 + 72 * v147;
                  cstdlib_memcpy((void *)(v108 + 4), (char *)__src + v156, 2uLL);
                  v156 += 2;
                  cstdlib_memcpy((void *)(v108 + 12), (char *)__src + v156, 2uLL);
                  v156 += 2;
                }
                if (!a4)
                {
                  int v109 = (_WORD *)(v101 + 72 * v147 + 40);
                  cstdlib_memcpy(v109, (char *)__src + v156, 2uLL);
                  unsigned int v110 = v156 + 2;
                  v156 += 2;
                  if (*v109)
                  {
                    unsigned int v111 = 0;
                    do
                    {
                      cstdlib_memcpy(&__dst, (char *)__src + v110, 2uLL);
                      v156 += 2;
                      cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
                      unsigned int v110 = v156 + 2;
                      v156 += 2;
                      ++v111;
                    }
                    while (v111 < (unsigned __int16)*v109);
                  }
                }
                if (v151 == 1)
                {
                  uint64_t v112 = v101 + 72 * v147;
                  uint64_t v113 = (_WORD *)(v112 + 42);
                  cstdlib_memcpy((void *)(v112 + 42), (char *)__src + v156, 2uLL);
                  v156 += 2;
                  if (*(_WORD *)(v112 + 42))
                  {
                    uint64_t v114 = heap_Calloc(*(void **)(*a1 + 8), 1, 12 * *(unsigned __int16 *)(v112 + 42));
                    uint64_t v119 = v101 + 72 * v147;
                    *(void *)(v119 + 32) = v114;
                    int v120 = (void *)(v119 + 32);
                    if (!v114)
                    {
                      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v115, v116, v117, v118, v143);
                      uint64_t StringZ = FEDATA_ERROR(10);
                      a3 = v149;
                      if ((StringZ & 0x80000000) == 0) {
                        goto LABEL_128;
                      }
                      goto LABEL_141;
                    }
                    if (*v113)
                    {
                      uint64_t v121 = 0;
                      unint64_t v122 = 0;
                      do
                      {
                        cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
                        v156 += 2;
                        uint64_t v123 = v156;
                        *(_WORD *)(*v120 + v121) = __dst;
                        cstdlib_memcpy(&__dst, (char *)__src + v123, 2uLL);
                        v156 += 2;
                        uint64_t v124 = *v120 + v121;
                        *(_WORD *)(v124 + 4) = __dst;
                        *(_DWORD *)(v124 + 8) = 1;
                        ++v122;
                        v121 += 12;
                      }
                      while (v122 < (unsigned __int16)*v113);
                    }
                  }
                }
                uint64_t v100 = v147 + 1;
                uint64_t v95 = *(void *)(v21 + 16);
              }
              while (v147 + 1 < (unint64_t)*(unsigned __int16 *)(v95 + 24));
            }
          }
          cstdlib_memcpy((void *)(v95 + 48), (char *)__src + v156, 2uLL);
          v156 += 2;
          if (!*(_WORD *)(*(void *)(v21 + 16) + 48)) {
            goto LABEL_122;
          }
          uint64_t v125 = heap_Calloc(*(void **)(a1[3] + 8), 1, 16 * *(unsigned __int16 *)(*(void *)(v21 + 16) + 48));
          uint64_t v126 = *(void *)(v21 + 16);
          *(void *)(v126 + 32) = v125;
          if (v125)
          {
            if (*(_WORD *)(v126 + 48))
            {
              uint64_t v127 = 0;
              do
              {
                uint64_t v128 = (uint64_t *)(*(void *)(v126 + 32) + 16 * v127);
                uint64_t v129 = v128 + 1;
                cstdlib_memcpy(v128 + 1, (char *)__src + v156, 2uLL);
                v156 += 2;
                uint64_t v130 = heap_Calloc(*(void **)(*a1 + 8), 1, 12 * *((unsigned __int16 *)v128 + 4));
                uint64_t *v128 = v130;
                if (!v130) {
                  goto LABEL_135;
                }
                uint64_t v148 = v127;
                if (*v129)
                {
                  uint64_t v131 = 0;
                  unint64_t v132 = 0;
                  do
                  {
                    unsigned __int8 v153 = 0;
                    uint64_t v133 = (_WORD *)(*v128 + v131);
                    v133[1] = 0;
                    if (a4)
                    {
                      cstdlib_memcpy(&v153, (char *)__src + v156++, 1uLL);
                      uint64_t v134 = v156;
                      *(_WORD *)(*v128 + v131 + 2) = v153;
                      cstdlib_memcpy(&v153, (char *)__src + v134, 1uLL);
                      unsigned int v135 = v156 + 1;
                      *(_WORD *)(*v128 + v131 + 4) = v153;
                    }
                    else
                    {
                      cstdlib_memcpy(v133, (char *)__src + v156, 2uLL);
                      v156 += 2;
                      cstdlib_memcpy((void *)(*v128 + v131 + 4), (char *)__src + v156, 2uLL);
                      unsigned int v135 = v156 + 2;
                    }
                    unsigned int v156 = v135;
                    ++v132;
                    v131 += 12;
                  }
                  while (v132 < (unsigned __int16)*v129);
                }
                uint64_t v127 = v148 + 1;
                uint64_t v126 = *(void *)(v21 + 16);
              }
              while (v148 + 1 < (unint64_t)*(unsigned __int16 *)(v126 + 48));
            }
LABEL_122:
            uint64_t StringZ = ssftriff_reader_CloseChunk(a2);
            int v60 = 0;
            goto LABEL_138;
          }
LABEL_135:
          uint64_t v136 = *(void *)(*a1 + 32);
          uint64_t v137 = a1[23];
          uint64_t v57 = 0;
          goto LABEL_137;
        }
LABEL_133:
        int v60 = 1;
      }
LABEL_125:
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24052, 0, v23, v24, v25, v26, v143);
      if (!v60) {
        goto LABEL_127;
      }
      goto LABEL_126;
    }
LABEL_129:
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"loaded data block %d", v24, v25, v26, v20);
    unsigned int v20 = (unsigned __int16)v20 + 1;
    if (v20 >= *v12) {
      return StringZ;
    }
  }
  Chun__int16 k = ssftriff_reader_FindChunk(a2, "TDAT", 1, (unsigned int *)&v157, &__src);
  if ((Chunk & 0x80000000) != 0) {
    goto LABEL_123;
  }
  unsigned int v156 = 0;
  uint64_t v36 = __src;
  *(void *)(v21 + 40) = __src;
  cstdlib_memcpy((char *)&__dst + 2, v36, 2uLL);
  v156 += 2;
  ++HIWORD(__dst);
  size_t v37 = (unsigned char *)heap_Calloc(*(void **)(*a1 + 8), 1, HIWORD(__dst));
  **(void **)(v21 + 8) = v37;
  if (!v37) {
    goto LABEL_131;
  }
  HIDWORD(v154) = HIWORD(__dst);
  uint64_t StringZ = ssftriff_reader_ReadStringZ(a2, (uint64_t)__src, v157, v156, v37, (unsigned int *)&v154 + 1);
  if ((StringZ & 0x80000000) != 0) {
    goto LABEL_133;
  }
  if (HIDWORD(v154) != HIWORD(__dst)) {
    goto LABEL_126;
  }
  v156 += HIDWORD(v154);
  cstdlib_memcpy((void *)(*(void *)(v21 + 8) + 8), (char *)__src + v156, 2uLL);
  v156 += 2;
  cstdlib_memcpy((void *)(*(void *)(v21 + 8) + 12), (char *)__src + v156, 2uLL);
  v156 += 2;
  cstdlib_memcpy(&v158, (char *)__src + v156, 4uLL);
  v156 += 4;
  cstdlib_memcpy((char *)&v157 + 4, (char *)__src + v156, 4uLL);
  uint64_t v42 = v156 + 4;
  uint64_t v43 = *(void *)(v21 + 8);
  *(_DWORD *)(v43 + 16) = v42;
  uint64_t v44 = (char *)__src;
  *(void *)(v43 + 24) = (char *)__src + v42;
  uint64_t v45 = (v158 + v42);
  unsigned int v156 = v45;
  cstdlib_memcpy(&v154, &v44[v45], 4uLL);
  uint64_t v46 = v156 + v154 + 4;
  uint64_t v47 = *(void *)(v21 + 8);
  *(_DWORD *)(v47 + 40) = v46;
  *(void *)(v47 + 32) = (char *)__src + v46;
  unsigned int v156 = HIDWORD(v157) + v46;
  if (!*(_WORD *)(v47 + 8))
  {
    int v149 = a3;
LABEL_67:
    uint64_t v79 = *(unsigned __int16 *)(v47 + 12);
    if (v79)
    {
      uint64_t v80 = heap_Calloc(*(void **)(*a1 + 8), 1, 16 * v79);
      uint64_t v81 = *(void *)(v21 + 8);
      *(void *)(v81 + 64) = v80;
      if (!v80) {
        goto LABEL_135;
      }
      if (*(_WORD *)(v81 + 12))
      {
        uint64_t v82 = 0;
        unint64_t v83 = 0;
        do
        {
          uint64_t v84 = *(void *)(v81 + 64);
          uint64_t v85 = v84 + v82;
          if (v149 == 1)
          {
            cstdlib_memcpy((void *)(v85 + 4), (char *)__src + v156, 4uLL);
            unsigned int v86 = v156 + 4;
            v156 += 4;
          }
          else
          {
            cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
            v156 += 2;
            *(_DWORD *)(v85 + 4) = (unsigned __int16)__dst;
            unsigned int v86 = v156;
          }
          uint64_t v87 = (_DWORD *)(v84 + v82);
          cstdlib_memcpy(v87 + 2, (char *)__src + v86, 2uLL);
          v156 += 2;
          cstdlib_memcpy((char *)v87 + 10, (char *)__src + v156, 2uLL);
          v156 += 2;
          cstdlib_memcpy((void *)v85, (char *)__src + v156, 2uLL);
          v156 += 2;
          cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
          v156 += 2;
          v87[3] = (unsigned __int16)__dst;
          ++v83;
          uint64_t v81 = *(void *)(v21 + 8);
          v82 += 16;
        }
        while (v83 < *(unsigned __int16 *)(v81 + 12));
      }
    }
    uint64_t v58 = ssftriff_reader_DetachChunkData(a2, (void **)(v21 + 32), &__src);
    if ((v58 & 0x80000000) != 0)
    {
LABEL_134:
      uint64_t StringZ = v58;
      int v60 = 1;
      a3 = v149;
      goto LABEL_125;
    }
    uint64_t v88 = (char *)__src;
    *(void *)(v21 + 40) = __src;
    uint64_t v89 = *(void *)(v21 + 8);
    unsigned int v90 = &v88[*(unsigned int *)(v89 + 16)];
    uint64_t v91 = &v88[*(unsigned int *)(v89 + 40)];
    *(void *)(v89 + 24) = v90;
    *(void *)(v89 + 32) = v91;
    uint64_t StringZ = ssftriff_reader_CloseChunk(a2);
    a3 = v149;
    if ((StringZ & 0x80000000) != 0) {
      goto LABEL_124;
    }
    unsigned int v28 = *(_DWORD *)v21;
    uint64_t v12 = v152;
    goto LABEL_78;
  }
  uint64_t v48 = heap_Calloc(*(void **)(*a1 + 8), 1, 32 * *(unsigned __int16 *)(v47 + 8));
  uint64_t v47 = *(void *)(v21 + 8);
  *(void *)(v47 + 48) = v48;
  if (!v48) {
    goto LABEL_131;
  }
  int v149 = a3;
  if (!*(_WORD *)(v47 + 8)) {
    goto LABEL_67;
  }
  unint64_t v49 = 0;
  uint64_t v50 = 16;
  while (1)
  {
    uint64_t v145 = *(void *)(v47 + 48);
    uint64_t v51 = v145 + v50;
    cstdlib_memcpy(&__dst, (char *)__src + v156, 2uLL);
    v156 += 2;
    *(_DWORD *)(v51 - 16) = (unsigned __int16)__dst;
    cstdlib_memcpy((void *)(v145 + v50 - 12), (char *)__src + v156, 2uLL);
    v156 += 2;
    cstdlib_memcpy((void *)(v145 + v50 - 10), (char *)__src + v156, 2uLL);
    v156 += 2;
    cstdlib_memcpy((void *)(v145 + v50 + 8), (char *)__src + v156, 2uLL);
    v156 += 2;
    cstdlib_memcpy((void *)(v145 + v50 + 10), (char *)__src + v156, 2uLL);
    v156 += 2;
    cstdlib_memcpy((void *)(v145 + v50 + 12), (char *)__src + v156, 2uLL);
    v156 += 2;
    *(void *)(v51 - 8) = 0;
    if (*(_WORD *)(v145 + v50 + 8))
    {
      uint64_t v52 = heap_Calloc(*(void **)(*a1 + 8), 1, 56);
      uint64_t v57 = v52;
      *(void *)(v51 - 8) = v52;
      if (!v52) {
        goto LABEL_136;
      }
      *(void *)uint64_t v52 = &StaticIntPointers_1;
      *(unsigned char *)(v52 + 24) = 0;
      *(void *)(v52 + 16) = 0;
      *(void *)(v52 + 40) = 0;
      *(void *)(v52 + 48) = 0;
      *(void *)(v52 + 32) = 0;
      uint64_t v58 = FEData_readFunctionDataFromBinaryFile(a1, a2, *a1, v52, (uint64_t)__src, &v156, v157);
      if ((v58 & 0x80000000) != 0) {
        goto LABEL_134;
      }
    }
    *(void *)(v145 + v50) = 0;
    if (*(_WORD *)(v145 + v50 + 10)) {
      break;
    }
LABEL_38:
    ++v49;
    uint64_t v47 = *(void *)(v21 + 8);
    v50 += 32;
    if (v49 >= *(unsigned __int16 *)(v47 + 8)) {
      goto LABEL_67;
    }
  }
  uint64_t v59 = heap_Calloc(*(void **)(*a1 + 8), 1, 56);
  uint64_t v57 = v59;
  *(void *)(v145 + v50) = v59;
  if (v59)
  {
    *(void *)uint64_t v59 = &StaticIntPointers_1;
    *(unsigned char *)(v59 + 24) = 0;
    *(void *)(v59 + 16) = 0;
    *(void *)(v59 + 40) = 0;
    *(void *)(v59 + 48) = 0;
    *(void *)(v59 + 32) = 0;
    uint64_t v58 = FEData_readFunctionDataFromBinaryFile(a1, a2, *a1, v59, (uint64_t)__src, &v156, v157);
    if ((v58 & 0x80000000) != 0) {
      goto LABEL_134;
    }
    goto LABEL_38;
  }
LABEL_136:
  uint64_t v136 = *(void *)(*a1 + 32);
  uint64_t v137 = a1[23];
LABEL_137:
  log_OutPublic(v136, v137, 24048, v57, v53, v54, v55, v56, v143);
  uint64_t StringZ = FEDATA_ERROR(10);
  int v60 = 1;
LABEL_138:
  a3 = v149;
LABEL_41:
  if ((StringZ & 0x80000000) != 0) {
    goto LABEL_125;
  }
  if (v60) {
LABEL_126:
  }
    ssftriff_reader_CloseChunk(a2);
LABEL_127:
  if ((StringZ & 0x80000000) == 0)
  {
LABEL_128:
    uint64_t v12 = v152;
    goto LABEL_129;
  }
LABEL_141:
  *(void *)(*(void *)(*(void *)a6 + 8) + 8 * v20) = 0;
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24044, 0, v23, v24, v25, v26, v143);
LABEL_144:
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24052, 0, v138, v139, v140, v141, v144);
  return StringZ;
}

uint64_t readDataBlockFromFileRefCnt_0(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = InitRsrcFunction(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), &v21);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), &v20);
    if ((result & 0x80000000) == 0)
    {
      v15[0] = a1;
      v15[1] = a2;
      int v16 = a3;
      int v17 = a4;
      LODWORD(v18) = a5;
      ObjcForThisApunsigned int i = getObjcForThisApi(v21, v20);
      uint64_t result = objc_GetAddRefCountedObject(ObjcForThisApi, a6, (uint64_t (*)(void, void, uint64_t, _OWORD *, uint64_t))readDataBlockFromFile_ObjcLoad_0, (void (*)(void, void, _OWORD *))readDataBlockFromFile_ObjcClose_0, (uint64_t)v15, &v19);
      if ((result & 0x80000000) != 0) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)(v19 + 32);
      }
      *(void *)(*(void *)(*(void *)(a1 + 152) + 16) + 136) = v14;
    }
  }
  return result;
}

uint64_t readDataBlockFromFile_ObjcLoad_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (uint64_t *)(a4 + 32);
  uint64_t result = readDataBlockFromFileRefCntBase(*(uint64_t **)a5, *(void *)(a5 + 8), *(_DWORD *)(a5 + 16), *(_DWORD *)(a5 + 20), *(_DWORD *)(a5 + 24), a4 + 32);
  if ((result & 0x80000000) != 0) {
    return result;
  }
  uint64_t v11 = *v6;
  unsigned int v86 = *(uint64_t **)a5;
  unsigned int v90 = *(unsigned __int16 **)(*(void *)(*(void *)a5 + 152) + 16);
  if (*v90)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(v11 + 8) + 8 * v12);
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          if (*(_WORD *)(v16 + 24))
          {
            uint64_t v17 = 0;
            uint64_t v18 = *(void *)(v16 + 16);
            do
            {
              if (*(_DWORD *)(v18 + 72 * v17 + 8) == 1)
              {
                uint64_t v19 = *(unsigned __int16 *)(v16 + 48);
                if (*(_WORD *)(v16 + 48))
                {
                  uint64_t v20 = 0;
                  uint64_t v21 = *(void *)(v16 + 32);
                  uint64_t v22 = v18 + 72 * v17;
                  uint64_t v23 = (unsigned __int16 *)(v22 + 42);
                  uint64_t v24 = (void *)(v22 + 32);
                  uint64_t v8 = (unsigned __int16)(v19 - 1);
                  do
                  {
                    uint64_t v9 = v21 + 16 * v20;
                    uint64_t v10 = *(unsigned __int16 *)(v9 + 8);
                    if (*(_WORD *)(v9 + 8))
                    {
                      uint64_t v25 = 0;
                      do
                      {
                        uint64_t v26 = 0;
                        do
                        {
                          uint64_t v27 = v26 + 12;
                          if (12 * *v23 + 12 == v26 + 12) {
                            break;
                          }
                          uint64_t v28 = *(void *)v9;
                          if (*(unsigned __int16 *)(*v24 + v26) == *(unsigned __int16 *)(*(void *)v9 + 12 * v25)
                            && (uint64_t v29 = *v24 + v26,
                                *(unsigned __int16 *)(v29 + 2) == *(unsigned __int16 *)(v28 + 12 * v25 + 2)))
                          {
                            BOOL v31 = *(unsigned __int16 *)(v29 + 4) == *(unsigned __int16 *)(v28 + 12 * v25 + 4);
                            BOOL v30 = v31;
                            if (v31) {
                              int v13 = 1;
                            }
                          }
                          else
                          {
                            BOOL v30 = 0;
                          }
                          uint64_t v26 = v27;
                        }
                        while (!v30);
                        ++v25;
                      }
                      while (v25 != v10);
                    }
                    ++v20;
                  }
                  while (v20 != v19);
                  uint64_t v14 = v21 + 16 * v8;
                }
              }
              ++v17;
            }
            while (v17 != *(unsigned __int16 *)(v16 + 24));
          }
        }
      }
      ++v12;
    }
    while (v12 != *v90);
  }
  else
  {
    uint64_t v14 = 0;
    int v13 = 0;
  }
  if (*((_DWORD *)v86 + 154)) {
    BOOL v31 = v13 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  if (v31)
  {
    uint64_t v32 = 1;
    *((_DWORD *)v86 + 240) = 1;
  }
  else
  {
    uint64_t v32 = *((unsigned int *)v86 + 240);
  }
  log_OutText(*(void *)(*v86 + 32), v86[23], 4, 0, (uint64_t)"btok twoloop data=%d", v8, v9, v10, v32);
  unsigned int v37 = *v90;
  if (!*v90) {
    return 0;
  }
  unint64_t v38 = 0;
  int v39 = 0;
  unsigned int v40 = *v90;
  while (1)
  {
    uint64_t v41 = *(void *)(*(void *)(v11 + 8) + 8 * v38);
    if (v41) {
      break;
    }
LABEL_100:
    int v89 = v39;
    if (v40)
    {
      unint64_t v74 = 0;
      uint64_t v75 = *(void *)(v11 + 8);
      do
      {
        uint64_t v76 = *(void *)(v75 + 8 * v74);
        if (v76)
        {
          uint64_t v77 = *(void *)(v76 + 24);
          if (v77)
          {
            if (*(_WORD *)(v77 + 16))
            {
              unint64_t v78 = 0;
              do
              {
                if (v41)
                {
                  uint64_t v79 = *(void *)(v41 + 16);
                  if (v79)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = *(void *)(*(void *)(v77 + 8) + 8 * v78);
                    uint64_t v82 = -1;
                    do
                    {
                      if (++v82 >= (unint64_t)*(unsigned __int16 *)(v79 + 24)) {
                        break;
                      }
                      if (!cstdlib_strcmp(*(const char **)v81, (const char *)(*(void *)(*(void *)(v79 + 16) + v80 + 48)+ *(unsigned __int16 *)(*(void *)(v79 + 16) + v80))))*(_WORD *)(v81 + 10) = v38; {
                      v80 += 72;
                      }
                      uint64_t v79 = *(void *)(v41 + 16);
                    }
                    while (v79);
                    uint64_t v75 = *(void *)(v11 + 8);
                  }
                }
                uint64_t v83 = *(void *)(v75 + 8 * v74);
                if (!v83) {
                  break;
                }
                uint64_t v77 = *(void *)(v83 + 24);
                if (!v77) {
                  break;
                }
                ++v78;
              }
              while (v78 < *(unsigned __int16 *)(v77 + 16));
            }
            unsigned int v37 = *v90;
          }
          unsigned int v40 = v37;
        }
        ++v74;
      }
      while (v74 < v40);
    }
    ++v38;
    int v39 = v89;
    if (v38 >= v40) {
      return 0;
    }
  }
  uint64_t v42 = *(void *)(v41 + 16);
  if (!v42)
  {
LABEL_99:
    unsigned int v40 = v37;
    goto LABEL_100;
  }
  unint64_t v43 = 0;
  while (1)
  {
    if (v43 >= *(unsigned __int16 *)(v42 + 24))
    {
LABEL_98:
      unsigned int v37 = *v90;
      goto LABEL_99;
    }
    uint64_t v44 = *(void *)(v42 + 16);
    uint64_t v45 = v44 + 72 * v43;
    int v47 = *(unsigned __int16 *)(v45 + 42);
    uint64_t v46 = (_WORD *)(v45 + 42);
    if (v47)
    {
      unint64_t v48 = 0;
      unint64_t v49 = v43;
      uint64_t v87 = *(void *)(v42 + 16);
      uint64_t v50 = (uint64_t *)(v44 + 72 * v43 + 32);
      while (1)
      {
        unsigned __int16 v51 = *v90;
        if (!*v90) {
          goto LABEL_122;
        }
        uint64_t v52 = 0;
        while (1)
        {
          uint64_t v53 = *(void *)(*(void *)(v11 + 8) + 8 * v52);
          if (*(_DWORD *)v53 == 1 || *(_DWORD *)v53 == 4) {
            goto LABEL_50;
          }
          uint64_t v55 = *(void *)(v41 + 16);
          unsigned int v56 = *(unsigned __int16 *)(v55 + 50);
          if (!*(_WORD *)(v55 + 50)) {
            goto LABEL_50;
          }
          if (*((_DWORD *)v86 + 240) != 1 || v14 == 0)
          {
            uint64_t v58 = *v50;
            goto LABEL_61;
          }
          uint64_t v58 = *v50;
          if (v56 > *(unsigned __int16 *)(*(void *)v14 + 12 * v48)) {
            break;
          }
LABEL_61:
          unsigned int v59 = *(unsigned __int16 *)(v58 + 12 * v48);
          if (v56 > v59) {
            goto LABEL_62;
          }
LABEL_50:
          if (++v52 >= (unint64_t)v51) {
            goto LABEL_122;
          }
        }
        unsigned int v59 = *(unsigned __int16 *)(v58 + 12 * v48);
LABEL_62:
        if (cstdlib_strcmp(**(const char ***)(v53 + 8), *(const char **)(*(void *)(v55 + 56) + 8 * v59)))
        {
          unsigned __int16 v51 = *v90;
          goto LABEL_50;
        }
        *(_WORD *)(*v50 + 12 * v48++ + 2) = v52;
        if (v48 >= (unsigned __int16)*v46)
        {
          uint64_t v42 = *(void *)(v41 + 16);
          int v39 = 1;
          unint64_t v43 = v49;
          uint64_t v44 = v87;
          break;
        }
      }
    }
    unint64_t v85 = v43;
    if (*(_DWORD *)(v44 + 72 * v43 + 8) == 1)
    {
      if (*(_WORD *)(v42 + 48)) {
        break;
      }
    }
LABEL_97:
    unint64_t v43 = v85 + 1;
    if (!v42) {
      goto LABEL_98;
    }
  }
  uint64_t v60 = 0;
  uint64_t v88 = (void *)(v44 + 72 * v43 + 32);
  while (2)
  {
    uint64_t v61 = v60;
    uint64_t v14 = *(void *)(v42 + 32) + 16 * v60;
    if (!*(_WORD *)(v14 + 8)) {
      goto LABEL_95;
    }
    uint64_t v62 = 0;
    while (2)
    {
      unsigned __int16 v63 = *v90;
      if (!*v90)
      {
LABEL_84:
        int v39 = 0;
        goto LABEL_85;
      }
      uint64_t v64 = 0;
      while (2)
      {
        uint64_t v65 = *(void *)(*(void *)(v11 + 8) + 8 * v64);
        BOOL v66 = *(_DWORD *)v65 == 1 || *(_DWORD *)v65 == 4;
        if (v66
          || (uint64_t v67 = *(void *)(v41 + 16), !*(_WORD *)(v67 + 50))
          || (uint64_t v68 = *(unsigned __int16 *)(*(void *)v14 + 12 * v62),
              *(unsigned __int16 *)(v67 + 50) <= v68))
        {
LABEL_78:
          if (++v64 >= (unint64_t)v63) {
            goto LABEL_84;
          }
          continue;
        }
        break;
      }
      if (cstdlib_strcmp(**(const char ***)(v65 + 8), *(const char **)(*(void *)(v67 + 56) + 8 * v68)))
      {
        unsigned __int16 v63 = *v90;
        goto LABEL_78;
      }
      *(_WORD *)(*(void *)v14 + 12 * v62 + 2) = v64;
      int v39 = 1;
LABEL_85:
      uint64_t v69 = (unsigned __int16)*v46;
      if (*v46)
      {
        uint64_t v70 = *(void *)v14 + 12 * v62;
        int v71 = *(unsigned __int16 *)(v70 + 2);
        uint64_t v72 = (unsigned __int16 *)(v70 + 4);
        uint64_t v73 = (unsigned __int16 *)(*v88 + 4);
        while (*(v73 - 1) != v71 || *v73 != *v72)
        {
          v73 += 6;
          if (!--v69) {
            goto LABEL_92;
          }
        }
        *(_DWORD *)(*(void *)v14 + 12 * v62 + 8) = 1;
      }
LABEL_92:
      if (++v62 < (unint64_t)*(unsigned __int16 *)(v14 + 8)) {
        continue;
      }
      break;
    }
LABEL_95:
    if (v39)
    {
      uint64_t v60 = v61 + 1;
      uint64_t v42 = *(void *)(v41 + 16);
      int v39 = 1;
      if (v61 + 1 >= (unint64_t)*(unsigned __int16 *)(v42 + 48)) {
        goto LABEL_97;
      }
      continue;
    }
    break;
  }
LABEL_122:
  log_OutPublic(*(void *)(*v86 + 32), v86[23], 24045, 0, v33, v34, v35, v36, v84);
  return 0;
}

uint64_t readDataBlockFromFile_ObjcClose_0(_WORD *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 **)(a3 + 32);
  uint64_t v50 = 0;
  uint64_t inited = InitRsrcFunction(a1, a2, &v50);
  uint64_t v5 = inited;
  if ((inited & 0x80000000) == 0)
  {
    if (v3)
    {
      uint64_t v6 = *((void *)v3 + 1);
      if (v6)
      {
        unsigned int v7 = *v3;
        if (*v3)
        {
          unsigned int v49 = inited;
          uint64_t v8 = 0;
          unint64_t v48 = v3;
          while (1)
          {
            uint64_t v9 = *(void *)(*((void *)v3 + 1) + 8 * v8);
            if (v9)
            {
              uint64_t v11 = (void **)(v9 + 32);
              uint64_t v10 = *(void **)(v9 + 32);
              if (v10)
              {
                unsigned int v49 = ssftriff_reader_ReleaseChunkData(v10);
                if ((v49 & 0x80000000) != 0) {
                  return v49;
                }
                *uint64_t v11 = 0;
                *(void *)(v9 + 40) = 0;
              }
              uint64_t v12 = v50;
              uint64_t v14 = *(void *)(v9 + 8);
              uint64_t v13 = *(void *)(v9 + 16);
              uint64_t v15 = *(void *)(v9 + 24);
              if (v14)
              {
                if (*(_DWORD *)v9 <= 5u && ((1 << *(_DWORD *)v9) & 0x2D) != 0)
                {
                  heap_Free(*(void **)(v50 + 8), *(void *)v14);
                  *(void *)uint64_t v14 = 0;
                  uint64_t v17 = *(void *)(v14 + 48);
                  if (v17)
                  {
                    if (*(_WORD *)(v14 + 8))
                    {
                      uint64_t v18 = 0;
                      unint64_t v19 = 0;
                      do
                      {
                        uint64_t v20 = *(void *)(v14 + 48) + v18;
                        uint64_t v21 = *(void *)(v20 + 8);
                        if (v21)
                        {
                          FEData_freeEntry((void *)v12, v21, 1);
                          heap_Free(*(void **)(v12 + 8), *(void *)(v20 + 8));
                          *(void *)(v20 + 8) = 0;
                        }
                        uint64_t v22 = *(void *)(v20 + 16);
                        if (v22)
                        {
                          FEData_freeEntry((void *)v12, v22, 1);
                          heap_Free(*(void **)(v12 + 8), *(void *)(v20 + 16));
                          *(void *)(v20 + 16) = 0;
                        }
                        ++v19;
                        v18 += 32;
                      }
                      while (v19 < *(unsigned __int16 *)(v14 + 8));
                      uint64_t v17 = *(void *)(v14 + 48);
                      uint64_t v3 = v48;
                    }
                    heap_Free(*(void **)(v12 + 8), v17);
                    *(void *)(v14 + 48) = 0;
                  }
                  uint64_t v23 = *(void *)(v14 + 64);
                  if (v23)
                  {
                    heap_Free(*(void **)(v12 + 8), v23);
                    *(void *)(v14 + 64) = 0;
                  }
                  heap_Free(*(void **)(v12 + 8), *(void *)(v9 + 8));
                  *(void *)(v9 + 8) = 0;
                }
              }
              if (v13)
              {
                if (*(_DWORD *)v9 <= 5u && ((1 << *(_DWORD *)v9) & 0x36) != 0)
                {
                  if (*(void *)v13)
                  {
                    heap_Free(*(void **)(v12 + 8), *(void *)v13);
                    *(void *)uint64_t v13 = 0;
                  }
                  uint64_t v25 = *(void *)(v13 + 56);
                  if (v25)
                  {
                    if (*(_WORD *)(v13 + 50))
                    {
                      unint64_t v26 = 0;
                      do
                      {
                        heap_Free(*(void **)(v12 + 8), *(void *)(*(void *)(v13 + 56) + 8 * v26));
                        *(void *)(*(void *)(v13 + 56) + 8 * v26++) = 0;
                      }
                      while (v26 < *(unsigned __int16 *)(v13 + 50));
                      uint64_t v25 = *(void *)(v13 + 56);
                    }
                    heap_Free(*(void **)(v12 + 8), v25);
                    *(void *)(v13 + 56) = 0;
                  }
                  if (*(void *)(v13 + 16))
                  {
                    if (*(_WORD *)(v13 + 24))
                    {
                      uint64_t v27 = 0;
                      unint64_t v28 = 0;
                      do
                      {
                        uint64_t v29 = (void *)(*(void *)(v13 + 16) + v27);
                        heap_Free(*(void **)(v12 + 8), v29[6]);
                        v29[6] = 0;
                        uint64_t v30 = v29[2];
                        if (v30)
                        {
                          heap_Free(*(void **)(v12 + 8), v30);
                          void v29[2] = 0;
                        }
                        uint64_t v31 = v29[4];
                        if (v31)
                        {
                          heap_Free(*(void **)(v12 + 8), v31);
                          char v29[4] = 0;
                        }
                        ++v28;
                        v27 += 72;
                      }
                      while (v28 < *(unsigned __int16 *)(v13 + 24));
                    }
                    uint64_t v32 = *(void *)(v13 + 32);
                    uint64_t v3 = v48;
                    if (v32)
                    {
                      unsigned __int16 v33 = *(_WORD *)(v13 + 48);
                      if (v33)
                      {
                        uint64_t v34 = 0;
                        for (unint64_t i = 0; i < v33; ++i)
                        {
                          uint64_t v36 = *(void *)(v13 + 32);
                          uint64_t v37 = *(void *)(v36 + v34);
                          if (v37)
                          {
                            heap_Free(*(void **)(v12 + 8), v37);
                            *(void *)(v36 + v34) = 0;
                            unsigned __int16 v33 = *(_WORD *)(v13 + 48);
                          }
                          v34 += 16;
                        }
                        uint64_t v32 = *(void *)(v13 + 32);
                        uint64_t v3 = v48;
                      }
                      heap_Free(*(void **)(v12 + 8), v32);
                      *(void *)(v13 + 32) = 0;
                    }
                    heap_Free(*(void **)(v12 + 8), *(void *)(v13 + 16));
                    *(void *)(v13 + 16) = 0;
                  }
                  heap_Free(*(void **)(v12 + 8), *(void *)(v9 + 16));
                  *(void *)(v9 + 16) = 0;
                }
              }
              if (v15)
              {
                uint64_t v38 = *(void *)(v15 + 8);
                if (v38)
                {
                  unsigned __int16 v39 = *(_WORD *)(v15 + 16);
                  if (v39)
                  {
                    for (unint64_t j = 0; j < v39; ++j)
                    {
                      uint64_t v41 = *(void *)(v15 + 8);
                      uint64_t v42 = *(void *)(v41 + 8 * j);
                      if (v42)
                      {
                        if (*(void *)v42)
                        {
                          heap_Free(*(void **)(v12 + 8), *(void *)v42);
                          uint64_t v41 = *(void *)(v15 + 8);
                          **(void **)(v41 + 8 * j) = 0;
                          uint64_t v42 = *(void *)(v41 + 8 * j);
                        }
                        uint64_t v43 = *(void *)(v42 + 16);
                        if (v43)
                        {
                          if (*(_WORD *)(v42 + 12))
                          {
                            unint64_t v44 = 0;
                            do
                            {
                              uint64_t v45 = *(void *)(*(void *)(v42 + 16) + 8 * v44);
                              if (v45)
                              {
                                heap_Free(*(void **)(v12 + 8), v45);
                                *(void *)(*(void *)(*(void *)(*(void *)(v15 + 8) + 8 * j) + 16) + 8 * v44) = 0;
                                uint64_t v41 = *(void *)(v15 + 8);
                              }
                              ++v44;
                              uint64_t v42 = *(void *)(v41 + 8 * j);
                            }
                            while (v44 < *(unsigned __int16 *)(v42 + 12));
                            uint64_t v43 = *(void *)(v42 + 16);
                          }
                          heap_Free(*(void **)(v12 + 8), v43);
                          uint64_t v46 = *(void *)(v15 + 8);
                          *(void *)(*(void *)(v46 + 8 * j) + 16) = 0;
                          uint64_t v42 = *(void *)(v46 + 8 * j);
                        }
                        *(_WORD *)(v42 + 12) = 0;
                        heap_Free(*(void **)(v12 + 8), v42);
                        *(void *)(*(void *)(v15 + 8) + 8 * j) = 0;
                        unsigned __int16 v39 = *(_WORD *)(v15 + 16);
                      }
                    }
                    uint64_t v38 = *(void *)(v15 + 8);
                  }
                  heap_Free(*(void **)(v12 + 8), v38);
                  *(void *)(v15 + 8) = 0;
                }
                *(_WORD *)(v15 + 16) = 0;
                heap_Free(*(void **)(v12 + 8), v15);
              }
              if (*v11)
              {
                ssftriff_reader_ReleaseChunkData(*v11);
                *uint64_t v11 = 0;
                *(void *)(v9 + 40) = 0;
              }
              heap_Free(*(void **)(v12 + 8), v9);
              unsigned int v7 = *v3;
            }
            if (++v8 >= (unint64_t)v7)
            {
              uint64_t v6 = *((void *)v3 + 1);
              uint64_t v5 = v49;
              break;
            }
          }
        }
        heap_Free(*(void **)(v50 + 8), v6);
        heap_Free(*(void **)(v50 + 8), (uint64_t)v3);
      }
    }
  }
  return v5;
}

uint64_t FEData_blockData_loadDataFiles(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v80 = 0;
  memset(v89, 0, sizeof(v89));
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  *(_OWORD *)int __dst = 0u;
  long long v82 = 0u;
  unsigned int v79 = 0;
  __s2 = 0;
  __src = 0;
  uint64_t v76 = 0;
  *a4 = 0;
  uint64_t v10 = *(char **)(v9 + 16);
  if (!v10)
  {
    uint64_t v11 = *(void *)(*(void *)a1 + 32);
    uint64_t v12 = *(void *)(a1 + 184);
    uint64_t v13 = 24049;
    goto LABEL_5;
  }
  if (!*(_WORD *)v10)
  {
    uint64_t v16 = *(void *)a1;
    if (*(unsigned __int8 *)(a1 + 352) > *(unsigned __int16 *)(a1 + 336))
    {
      log_OutPublic(*(void *)(v16 + 32), *(void *)(a1 + 184), 24056, (uint64_t)"%s%d%s%d", a5, a6, a7, a8, "invalid language identifier index");
      uint64_t v14 = 0;
      goto LABEL_6;
    }
    if ((paramc_ParamGetStr(*(void *)(v16 + 40), (uint64_t)"langcode", &v76) & 0x80000000) != 0) {
      uint64_t v76 = "";
    }
    if ((paramc_ParamGetStr(*(void *)(*(void *)a1 + 40), (uint64_t)"fecfg", &__s2) & 0x80000000) == 0)
    {
      cstdlib_strcpy(__dst, "tokentn/");
      cstdlib_strcat(__dst, *(const char **)(a3 + 8 * *(unsigned __int8 *)(a1 + 352)));
      cstdlib_strcat(__dst, "/");
      cstdlib_strcat(__dst, __s2);
      uint64_t v19 = brokeraux_ComposeBrokerString(*(void *)a1, __dst, 1, 1, v76, 0, 0, v89, 0x80uLL);
      if ((v19 & 0x80000000) != 0) {
        return FEDATA_ERROR(v19);
      }
      RsrcHandleForThisApunint64_t i = (_WORD *)getRsrcHandleForThisApi(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 32));
      if ((ssftriff_reader_ObjOpen(RsrcHandleForThisApi, v21, 2, (const char *)v89, "TOKN", 1031, (uint64_t *)&v80) & 0x80000000) == 0)
      {
LABEL_18:
        Chun__int16 k = ssftriff_reader_FindChunk((uint64_t)v80, "CFIG", 0, &v79, &__src);
        int v33 = Chunk & 0x1FFF;
        if ((Chunk & 0x80000000) != 0)
        {
          uint64_t DataBlockFromFileRefCnt_0 = Chunk;
          if (v33 != 20) {
            goto LABEL_66;
          }
        }
        if (v33 == 20)
        {
          BOOL v35 = 0;
          BOOL v36 = 0;
LABEL_32:
          uint64_t v37 = ssftriff_reader_FindChunk((uint64_t)v80, "FILE", 0, &v79, &__src);
          if ((v37 & 0x80000000) == 0)
          {
            cstdlib_memcpy(v10, __src, 2uLL);
            uint64_t v37 = ssftriff_reader_CloseChunk((uint64_t)v80);
            if ((v37 & 0x80000000) == 0)
            {
              cstdlib_strcpy(v10 + 2, (const char *)v89);
              uint64_t DataBlockFromFileRefCnt_0 = readDataBlockFromFileRefCnt_0(a1, (uint64_t)v80, v35, v36, *a4, (uint64_t)v89);
              if ((DataBlockFromFileRefCnt_0 & 0x80000000) == 0)
              {
                ssftriff_reader_ObjClose(v80, v38, v39, v40, v29, v30, v31, v32);
                uint64_t v80 = 0;
                unsigned int v48 = *(unsigned __int16 *)v10;
                if (*(_WORD *)v10)
                {
                  unint64_t v49 = 0;
                  do
                  {
                    uint64_t v50 = *(void *)(*(void *)(*((void *)v10 + 17) + 8) + 8 * v49);
                    if (v50)
                    {
                      uint64_t v51 = *(void *)(v50 + 16);
                      if (v51)
                      {
                        uint64_t v52 = 0;
                        unint64_t v53 = 0;
                        while (v53 < *(unsigned __int16 *)(v51 + 24))
                        {
                          uint64_t v54 = *(void *)(v51 + 16);
                          if (*(_DWORD *)(v54 + v52 + 64) == 1)
                          {
                            uint64_t v55 = *(const char **)(a1 + 288);
                            if (v55)
                            {
                              if (cstdlib_strcmp(v55, (const char *)(*(void *)(v54 + v52 + 48) + *(unsigned __int16 *)(v54 + v52))))
                              {
                                uint64_t v69 = *(void *)(*(void *)a1 + 32);
                                uint64_t v70 = *(void *)(a1 + 184);
                                unint64_t v74 = "first assigned";
                                int v71 = "%s%s%s%s";
                                uint64_t v72 = 24053;
                                goto LABEL_70;
                              }
                            }
                            else
                            {
                              unsigned int v56 = *(void **)(*(void *)a1 + 8);
                              int v57 = cstdlib_strlen((const char *)(*(void *)(v54 + v52 + 48)
                                                                + *(unsigned __int16 *)(v54 + v52)));
                              uint64_t v58 = (char *)heap_Calloc(v56, 1, (v57 + 1));
                              *(void *)(a1 + 288) = v58;
                              if (!v58)
                              {
                                log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v59, v60, v61, v62, v74);
                                uint64_t v19 = 10;
                                return FEDATA_ERROR(v19);
                              }
                              cstdlib_strcpy(v58, (const char *)(*(void *)(v54 + v52 + 48) + *(unsigned __int16 *)(v54 + v52)));
                              *(_WORD *)(a1 + 296) = v49;
                              *(_WORD *)(a1 + 298) = v53;
                            }
                          }
                          ++v53;
                          uint64_t v51 = *(void *)(v50 + 16);
                          v52 += 72;
                          if (!v51) {
                            break;
                          }
                        }
                      }
                      unsigned int v48 = *(unsigned __int16 *)v10;
                    }
                    ++v49;
                  }
                  while (v49 < v48);
                  if (v48)
                  {
                    for (unint64_t i = 0; i < v48; ++i)
                    {
                      uint64_t v64 = *(void *)(*(void *)(*((void *)v10 + 17) + 8) + 8 * i);
                      if (v64)
                      {
                        uint64_t v65 = *(void *)(v64 + 16);
                        if (v65)
                        {
                          uint64_t v66 = 0;
                          uint64_t v67 = -1;
                          do
                          {
                            if (++v67 >= (unint64_t)*(unsigned __int16 *)(v65 + 24)) {
                              break;
                            }
                            uint64_t v68 = *(void *)(v65 + 16) + v66;
                            if (*(_WORD *)(v68 + 40) && (!*(_DWORD *)(v68 + 8) || !*(_WORD *)(v65 + 48))) {
                              log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24062, 0, v44, v45, v46, v47, v74);
                            }
                            v66 += 72;
                            uint64_t v65 = *(void *)(v64 + 16);
                          }
                          while (v65);
                        }
                        unsigned int v48 = *(unsigned __int16 *)v10;
                      }
                    }
                  }
                }
                if (!*(void *)(a1 + 288))
                {
                  uint64_t v69 = *(void *)(*(void *)a1 + 32);
                  uint64_t v70 = *(void *)(a1 + 184);
                  uint64_t v72 = 24054;
                  int v71 = 0;
LABEL_70:
                  log_OutPublic(v69, v70, v72, (uint64_t)v71, v44, v45, v46, v47, v74);
                  uint64_t v19 = 0;
                  return FEDATA_ERROR(v19);
                }
LABEL_67:
                if (v80) {
                  ssftriff_reader_ObjClose(v80, v41, v42, v43, v44, v45, v46, v47);
                }
                return DataBlockFromFileRefCnt_0;
              }
LABEL_66:
              log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24052, 0, v29, v30, v31, v32, v74);
              goto LABEL_67;
            }
          }
LABEL_65:
          uint64_t DataBlockFromFileRefCnt_0 = v37;
          goto LABEL_66;
        }
        int v75 = 0;
        cstdlib_memcpy((char *)&v75 + 2, __src, 2uLL);
        if (HIWORD(v75))
        {
          cstdlib_memcpy(&v75, (char *)__src + 2, 2uLL);
          BOOL v35 = (unsigned __int16)v75 == 1;
          if (HIWORD(v75) >= 2u)
          {
            cstdlib_memcpy(&v75, (char *)__src + 4, 2uLL);
            BOOL v36 = (unsigned __int16)v75 == 1;
            if (HIWORD(v75) >= 3u)
            {
              cstdlib_memcpy(&v75, (char *)__src + 6, 2uLL);
              if ((unsigned __int16)v75 == 1) {
                *a4 = 1;
              }
            }
LABEL_31:
            uint64_t v37 = ssftriff_reader_CloseChunk((uint64_t)v80);
            if ((v37 & 0x80000000) != 0) {
              goto LABEL_65;
            }
            goto LABEL_32;
          }
        }
        else
        {
          BOOL v35 = 0;
        }
        BOOL v36 = 0;
        goto LABEL_31;
      }
    }
    cstdlib_strcpy(__dst, "tokentn/");
    cstdlib_strcat(__dst, *(const char **)(a3 + 8 * *(unsigned __int8 *)(a1 + 352)));
    uint64_t v19 = brokeraux_ComposeBrokerString(*(void *)a1, __dst, 1, 1, v76, 0, 0, v89, 0x80uLL);
    if ((v19 & 0x80000000) == 0)
    {
      uint64_t v22 = (_WORD *)getRsrcHandleForThisApi(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 32));
      if ((ssftriff_reader_ObjOpen(v22, v23, 0, (const char *)v89, "TOKN", 1031, (uint64_t *)&v80) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24057, (uint64_t)"%s%s", v24, v25, v26, v27, "Missing broker header file");
      uint64_t v19 = 3;
    }
    return FEDATA_ERROR(v19);
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 32);
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v13 = 24055;
LABEL_5:
  log_OutPublic(v11, v12, v13, 0, a5, a6, a7, a8, v73);
  uint64_t v14 = 7;
LABEL_6:

  return FEDATA_ERROR(v14);
}

uint64_t readDataBlockFromFileDeRefCnt(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t result = InitRsrcFunction(*(_WORD **)(a1 + 8), *(void *)(a1 + 16), &v5);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = InitRsrcFunction(*(_WORD **)(a1 + 32), *(void *)(a1 + 40), &v4);
    if ((result & 0x80000000) == 0)
    {
      ObjcForThisApunint64_t i = getObjcForThisApi(v5, v4);
      return objc_ReleaseObject(ObjcForThisApi, *(void *)(*(void *)(a1 + 152) + 16) + 2);
    }
  }
  return result;
}

uint64_t FEData_blockData_unloadDataFiles(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1[19] + 16))
  {
    return readDataBlockFromFileDeRefCnt((uint64_t)a1);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
    return FEDATA_ERROR(7);
  }
}

uint64_t FEData_blockData_unloadUnusedDataFiles(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(_WORD **)(a1[19] + 16);
  if (v8)
  {
    uint64_t result = readDataBlockFromFileDeRefCnt((uint64_t)a1);
    _WORD *v8 = 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v10);
    return FEDATA_ERROR(7);
  }
  return result;
}

uint64_t FEData_ObjOpen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen Begin", a6, a7, a8, v27);
  uint64_t v9 = (void *)heap_Calloc(*(void **)(*a3 + 8), 1, 24);
  if (v9)
  {
    uint64_t v16 = v9;
    a3[19] = (uint64_t)v9;
    uint64_t v17 = FEData_functionData_ObjOpen(a3, v9, v10, v11, v12, v13, v14, v15);
    if ((v17 & 0x80000000) != 0
      || (uint64_t v17 = FEData_domainDefs_ObjOpen(a3, v16 + 1, v19, v20, v21, v22, v23, v24), (v17 & 0x80000000) != 0))
    {
      uint64_t v25 = v17;
    }
    else
    {
      uint64_t v25 = FEData_blockData_ObjOpen(a3, v16 + 2, v19, v20, v21, v22, v23, v24);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_11:
        log_OutText(*(void *)(*a3 + 32), a3[23], 4, 0, (uint64_t)"fe_data : ObjOpen End (%x)", v22, v23, v24, v25);
        return v25;
      }
    }
    FEData_ObjClose(a3, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_11;
  }
  log_OutPublic(*(void *)(*a3 + 32), a3[23], 24048, 0, v12, v13, v14, v15, v28);

  return TOKENTNERROR(10);
}

uint64_t FEData_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[19];
  if (v8)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose Begin", a6, a7, a8, v39);
    int v17 = FEData_functionData_ObjClose(a1, v10, v11, v12, v13, v14, v15, v16);
    LODWORD(v18) = v17 & (v17 >> 31);
    int v26 = FEData_blockData_ObjClose(a1, v19, v20, v21, v22, v23, v24, v25);
    if (v26 < 0) {
      LODWORD(v18) = v26;
    }
    int v34 = FEData_domainDefs_ObjClose(a1, v27, v28, v29, v30, v31, v32, v33);
    if (v34 >= 0) {
      uint64_t v18 = v18;
    }
    else {
      uint64_t v18 = v34;
    }
    heap_Free(*(void **)(*a1 + 8), v8);
    a1[19] = 0;
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_data : ObjClose End (%x)", v35, v36, v37, v18);
    return v18;
  }
  else
  {
    return TOKENTNERROR(8);
  }
}

uint64_t compareFunctions(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *(void **)result;
  if (*(void *)result != *(void *)a2) {
    goto LABEL_2;
  }
  uint64_t v6 = result;
  if (v4 == &unk_2206E2D58)
  {
    uint64_t result = *(void *)(result + 48);
    unsigned int v7 = *(const char **)(a2 + 48);
    if (!result)
    {
      if (v7) {
        goto LABEL_2;
      }
      uint64_t v4 = &unk_2206E2D58;
      goto LABEL_17;
    }
    if (!v7) {
      goto LABEL_2;
    }
    uint64_t result = cstdlib_strcmp((const char *)result, v7);
    if (result) {
      goto LABEL_2;
    }
    uint64_t v4 = *(void **)v6;
  }
  if (v4 == &unk_2206E2D74)
  {
    if (*(unsigned __int16 *)(v6 + 8) != *(unsigned __int16 *)(a2 + 8)) {
      goto LABEL_2;
    }
    uint64_t v4 = &unk_2206E2D74;
  }
  else if (v4 == &unk_2206E2D54)
  {
    if (*(unsigned __int16 *)(v6 + 8) != *(unsigned __int16 *)(a2 + 8)) {
      goto LABEL_2;
    }
    uint64_t v4 = &unk_2206E2D54;
  }
LABEL_17:
  if ((v4 == &unk_2206E2D5C
     || v4 == &unk_2206E2D60
     || v4 == &unk_2206E2D64
     || v4 == &unk_2206E2D68
     || v4 == &unk_2206E2D78)
    && *(unsigned __int16 *)(v6 + 8) != *(unsigned __int16 *)(a2 + 8))
  {
    goto LABEL_2;
  }
  uint64_t result = *(void *)(v6 + 40);
  uint64_t v8 = *(const char **)(a2 + 40);
  if (result)
  {
    if (!v8) {
      goto LABEL_2;
    }
    uint64_t result = cstdlib_strcmp((const char *)result, v8);
    if (result) {
      goto LABEL_2;
    }
  }
  else if (v8)
  {
    goto LABEL_2;
  }
  if (*a3) {
    return result;
  }
  if (*(unsigned __int8 *)(v6 + 24) != *(unsigned __int8 *)(a2 + 24))
  {
LABEL_2:
    *a3 = 1;
    return result;
  }
  if (*(unsigned char *)(v6 + 24))
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t result = compareFunctions(*(void *)(*(void *)(v6 + 16) + 8 * v9), *(void *)(*(void *)(a2 + 16) + 8 * v9), a3);
      if (*a3 == 1) {
        break;
      }
      ++v9;
    }
    while (v9 < *(unsigned __int8 *)(v6 + 24));
  }
  return result;
}

uint64_t addEntry(uint64_t *a1, unsigned __int16 *a2, uint64_t a3)
{
  if (*a2)
  {
    uint64_t v6 = heap_Realloc(*(uint64_t **)(*a1 + 8), *((void *)a2 + 1), 8 * *a2 + 8);
    if (v6)
    {
LABEL_3:
      *((void *)a2 + 1) = v6;
      uint64_t v11 = *a2;
      *(void *)(v6 + 8 * v11) = a3;
      *a2 = v11 + 1;
      return 0;
    }
  }
  else
  {
    uint64_t v6 = heap_Calloc(*(void **)(*a1 + 8), 1, 8);
    if (v6) {
      goto LABEL_3;
    }
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v7, v8, v9, v10, v13);

  return FEDATA_ERROR(10);
}

uint64_t chequeUniqueFunction(unsigned __int16 *a1, uint64_t a2, _WORD *a3)
{
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v8 = 0;
    compareFunctions(a2, *(void *)(*((void *)a1 + 1) + 8 * v6), &v8);
    if (!v8) {
      break;
    }
    if (++v6 >= (unint64_t)*a1) {
      return 1;
    }
  }
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

uint64_t getIndexForFunction(unsigned __int16 *a1, uint64_t a2, _WORD *a3)
{
  if (!*a1) {
    return 0;
  }
  uint64_t v3 = 0;
  while (*(void *)(*((void *)a1 + 1) + 8 * v3) != a2)
  {
    if (*a1 == ++v3) {
      return 0;
    }
  }
  *a3 = v3;
  return 1;
}

void *compressFunctionData(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    uint64_t result = heap_Free(*(void **)(*result + 8), v4);
    *(void *)(a2 + 32) = 0;
  }
  if (*(unsigned char *)(a2 + 24))
  {
    unint64_t v5 = 0;
    do
      uint64_t result = (void *)compressFunctionData(v3, *(void *)(*(void *)(a2 + 16) + 8 * v5++));
    while (v5 < *(unsigned __int8 *)(a2 + 24));
  }
  return result;
}

void *FEData_freeEntry(void *result, uint64_t a2, int a3)
{
  if (a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6)
    {
      uint64_t result = heap_Free((void *)result[1], v6);
      *(void *)(a2 + 40) = 0;
    }
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7)
    {
      uint64_t result = heap_Free((void *)v5[1], v7);
      *(void *)(a2 + 32) = 0;
    }
    uint64_t v8 = *(void *)(a2 + 48);
    if (v8)
    {
      uint64_t result = heap_Free((void *)v5[1], v8);
      *(void *)(a2 + 48) = 0;
    }
    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      unsigned int v10 = *(unsigned __int8 *)(a2 + 24);
      if (*(unsigned char *)(a2 + 24))
      {
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(void *)(a2 + 16);
          if (a3 == 1)
          {
            FEData_freeEntry(v5, *(void *)(v12 + 8 * v11), 1);
            heap_Free((void *)v5[1], *(void *)(*(void *)(a2 + 16) + 8 * v11));
            uint64_t v12 = *(void *)(a2 + 16);
            unsigned int v10 = *(unsigned __int8 *)(a2 + 24);
          }
          *(void *)(v12 + 8 * v11++) = 0;
        }
        while (v11 < v10);
        uint64_t v9 = *(void *)(a2 + 16);
      }
      uint64_t result = heap_Free((void *)v5[1], v9);
      *(unsigned char *)(a2 + 24) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  return result;
}

uint64_t freeFunctions(void **a1, unsigned __int16 *a2)
{
  if (*a2)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*((void *)a2 + 1) + 8 * v4);
      FEData_freeEntry(*a1, v5, 0);
      heap_Free((void *)(*a1)[1], v5);
      ++v4;
    }
    while (v4 < *a2);
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v6)
  {
    heap_Free((void *)(*a1)[1], v6);
    *((void *)a2 + 1) = 0;
  }
  *a2 = 0;
  return 0;
}

uint64_t FEData_functionData_ObjOpen(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(*a1 + 32);
  uint64_t v11 = a1[23];
  if (a2)
  {
    log_OutText(v10, v11, 4, 0, (uint64_t)"functionData : ObjOpen Begin", a6, a7, a8, v23);
    *a2 = 0;
    uint64_t v12 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, 16);
    if (v12)
    {
      int v17 = v12;
      cstdlib_memset(v12, 0, 0x10uLL);
      *(_WORD *)int v17 = 0;
      v17[1] = 0;
      *a2 = v17;
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjOpen End (%x)", v18, v19, v20, 0);
      return 0;
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v13, v14, v15, v16, v24);
    uint64_t v22 = 10;
  }
  else
  {
    log_OutPublic(v10, v11, 24049, 0, a5, a6, a7, a8, v23);
    uint64_t v22 = 7;
  }

  return FEDATA_ERROR(v22);
}

uint64_t FEData_functionData_ObjClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (unsigned __int16 **)a1[19];
  if (v8 && (uint64_t v9 = *v8) != 0)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjClose Begin", a6, a7, a8, v15);
    freeFunctions((void **)a1, v9);
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"functionData : ObjClose End (%x)", v11, v12, v13, 0);
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v9);
    return 0;
  }
  else
  {
    return FEDATA_ERROR(8);
  }
}

uint64_t FEData_readFunctionDataFromBinaryFile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  unsigned int v35 = 0;
  int __dst = 0;
  cstdlib_memcpy((char *)&__dst + 2, (const void *)(a5 + *a6), 2uLL);
  unsigned int v14 = *a6 + 2;
  *a6 = v14;
  switch(HIWORD(__dst))
  {
    case 0:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &StaticIntPointers_2;
      goto LABEL_18;
    case 1:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D50;
      goto LABEL_18;
    case 2:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D54;
      goto LABEL_18;
    case 3:
      *(void *)a4 = &unk_2206E2D58;
      cstdlib_memcpy(&__dst, (const void *)(a5 + v14), 2uLL);
      *a6 += 2;
      LOWORD(__dst) = __dst + 1;
      int v17 = (unsigned char *)heap_Calloc(*(void **)(a3 + 8), 1, (unsigned __int16)__dst);
      *(void *)(a4 + 48) = v17;
      if (!v17) {
        goto LABEL_33;
      }
      unsigned int v35 = (unsigned __int16)__dst;
      uint64_t v22 = ssftriff_reader_ReadStringZ(a2, a5, a7, *a6, v17, &v35);
      if ((v22 & 0x80000000) != 0 || v35 != (unsigned __int16)__dst) {
        goto LABEL_34;
      }
      uint64_t FunctionDataFromBinaryFile = v22;
      unsigned int v14 = *a6 + v35;
      *a6 = v14;
LABEL_19:
      cstdlib_memcpy(&__dst, (const void *)(a5 + v14), 2uLL);
      unsigned int v23 = *a6 + 2;
      *a6 = v23;
      __int16 v24 = __dst;
      if ((_WORD)__dst)
      {
        LOWORD(__dst) = __dst + 1;
        uint64_t v25 = (unsigned char *)heap_Calloc(*(void **)(a3 + 8), 1, (unsigned __int16)(v24 + 1));
        *(void *)(a4 + 40) = v25;
        if (!v25)
        {
LABEL_33:
          log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v18, v19, v20, v21, v34);
          uint64_t v32 = 10;
          return FEDATA_ERROR(v32);
        }
        unsigned int v35 = (unsigned __int16)__dst;
        uint64_t v26 = ssftriff_reader_ReadStringZ(a2, a5, a7, *a6, v25, &v35);
        if ((v26 & 0x80000000) != 0 || v35 != (unsigned __int16)__dst)
        {
LABEL_34:
          uint64_t v32 = 0;
          return FEDATA_ERROR(v32);
        }
        uint64_t FunctionDataFromBinaryFile = v26;
        unsigned int v23 = *a6 + v35;
        *a6 = v23;
      }
      else
      {
        *(void *)(a4 + 40) = 0;
      }
      cstdlib_memcpy((void *)(a4 + 8), (const void *)(a5 + v23), 2uLL);
      uint64_t v27 = *a6 + 2;
      *a6 = v27;
      cstdlib_memcpy(&__dst, (const void *)(a5 + v27), 2uLL);
      *a6 += 2;
      unsigned __int8 v28 = __dst;
      *(unsigned char *)(a4 + 24) = __dst;
      if (!v28) {
        return FunctionDataFromBinaryFile;
      }
      uint64_t v29 = heap_Calloc(*(void **)(a3 + 8), 1, 8 * v28);
      *(void *)(a4 + 16) = v29;
      if (!v29) {
        goto LABEL_33;
      }
      if (!*(unsigned char *)(a4 + 24)) {
        return FunctionDataFromBinaryFile;
      }
      unint64_t v30 = 0;
      do
      {
        uint64_t v31 = heap_Calloc(*(void **)(a3 + 8), 1, 56);
        if (!v31) {
          goto LABEL_33;
        }
        *(void *)(*(void *)(a4 + 16) + 8 * v30) = v31;
        *(void *)uint64_t v31 = &StaticIntPointers_2;
        *(unsigned char *)(v31 + 24) = 0;
        *(void *)(v31 + 16) = 0;
        *(void *)(v31 + 40) = 0;
        *(void *)(v31 + 48) = 0;
        *(void *)(v31 + 32) = 0;
        uint64_t FunctionDataFromBinaryFile = FEData_readFunctionDataFromBinaryFile(a1, a2, a3, v31, a5, a6, a7);
        if ((FunctionDataFromBinaryFile & 0x80000000) != 0) {
          break;
        }
        ++v30;
      }
      while (v30 < *(unsigned __int8 *)(a4 + 24));
      return FunctionDataFromBinaryFile;
    case 4:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D5C;
      goto LABEL_18;
    case 5:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D60;
      goto LABEL_18;
    case 6:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D64;
      goto LABEL_18;
    case 7:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D68;
      goto LABEL_18;
    case 8:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D6C;
      goto LABEL_18;
    case 9:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D70;
      goto LABEL_18;
    case 0xA:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D74;
      goto LABEL_18;
    case 0xB:
      uint64_t FunctionDataFromBinaryFile = 0;
      uint64_t v16 = &unk_2206E2D78;
LABEL_18:
      *(void *)a4 = v16;
      goto LABEL_19;
    default:
      uint64_t FunctionDataFromBinaryFile = 0;
      goto LABEL_19;
  }
}

uint64_t FEData_functionData_getFunction(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **(unsigned __int16 ***)(a1 + 152);
  if (v8)
  {
    if (*v8 > a2)
    {
      *a3 = *(void *)(*((void *)v8 + 1) + 8 * a2);
      return 0;
    }
    uint64_t v14 = *(void *)(a1 + 184);
    uint64_t v15 = "functionIndex";
    uint64_t v13 = "%s%d%s%d";
    uint64_t v11 = *(void *)(*(void *)a1 + 32);
    uint64_t v10 = v14;
    uint64_t v12 = 24047;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = *(void *)(*(void *)a1 + 32);
    uint64_t v12 = 24049;
    uint64_t v13 = 0;
  }
  log_OutPublic(v11, v10, v12, (uint64_t)v13, a5, a6, a7, a8, v15);

  return FEDATA_ERROR(7);
}

uint64_t FEFunctionMap_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjOpen Begin", a6, a7, a8, v15);
  uint64_t v9 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, 16);
  if (v9)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    a1[20] = (uint64_t)v9;
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjOpen End (%x)", v11, v12, v13, 0);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v16);
    return TOKENTNERROR(10);
  }
}

uint64_t FEFunctionMap_ObjClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[20];
  if (v8)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjClose Begin", a6, a7, a8, v19);
    uint64_t v13 = 0;
    uint64_t v14 = *a1;
    char v15 = 1;
    do
    {
      char v16 = v15;
      uint64_t v17 = *(void *)(v8 + 8 * v13);
      if (v17)
      {
        ssftmap_ObjClose(v17);
        *(void *)(v8 + 8 * v13) = 0;
      }
      char v15 = 0;
      uint64_t v13 = 1;
    }
    while ((v16 & 1) != 0);
    log_OutText(*(void *)(v14 + 32), a1[23], 4, 0, (uint64_t)"fe_functionmap : ObjClose End (%x)", v10, v11, v12, 0);
    heap_Free(*(void **)(*a1 + 8), v8);
    return 0;
  }
  else
  {
    return TOKENTNERROR(8);
  }
}

uint64_t FEFunctionMap_GetMap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(*a1 + 8);
  v10[0] = xmmword_26D210EB0;
  v10[1] = *(_OWORD *)off_26D210EC0;
  uint64_t v11 = off_26D210ED0;
  uint64_t v8 = ssftmap_ObjOpen(v3, 0, v10, a2);
  uint64_t result = 0;
  if ((v8 & 0x80000000) != 0)
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24039, 0, v4, v5, v6, v7, v10[0]);
    return v8;
  }
  return result;
}

uint64_t action2FunctionMap_CopyMapKey(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1 || !a2 || !a3) {
    return TOKENTNERROR(7);
  }
  *a3 = a1;
  return 0;
}

uint64_t action2FunctionMap_CompareKeys(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t action2FunctionMap_CopyFunctionData(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1 || !a2 || !a3) {
    return TOKENTNERROR(7);
  }
  *a3 = a1;
  return 0;
}

uint64_t FEFunctionMap_AddFunctionMap(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(a1 + 160) + 8 * a2) = a3;
  return 0;
}

uint64_t FEFunctionMap_GetFunction(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 160);
  *a4 = 0;
  ssftmap_Find(*(void *)(v4 + 8 * a2), a3, a4);
  return 0;
}

uint64_t FERuntimeData_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjOpen Begin", a6, a7, a8, v34);
  uint64_t v9 = heap_Calloc(*(void **)(*a1 + 8), 1, 88);
  if (v9)
  {
    uint64_t v14 = v9;
    a1[22] = v9;
    char v15 = *(void **)(*a1 + 8);
    long long v36 = xmmword_2206E2D88;
    uint64_t v37 = 0;
    if (vector_ObjOpen(v15, &v36, 5, (uint64_t *)v14))
    {
      uint64_t v20 = 0;
    }
    else
    {
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v16, v17, v18, v19, v35);
      uint64_t v20 = TOKENTNERROR(10);
      if ((v20 & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }
    *(void *)(v14 + 8) = 0;
    *(_WORD *)(v14 + 16) = 0;
    *(_WORD *)(v14 + 40) = 50;
    *(void *)(v14 + 32) = 0x8800050000;
    uint64_t v29 = heap_Calloc(*(void **)(*a1 + 8), 1, 816);
    *(void *)(v14 + 24) = v29;
    if (v29)
    {
      uint64_t v31 = (uint64_t *)(v29 + 16 * *(unsigned __int16 *)(v14 + 32));
      uint64_t v32 = *(unsigned __int16 *)(v14 + 34) * *(unsigned __int16 *)(v14 + 36) + 1;
      v31[1] = v32;
      *uint64_t v31 = 0;
      uint64_t v33 = heap_Calloc(*(void **)(*a1 + 8), 1, v32);
      *uint64_t v31 = v33;
      if (v33)
      {
        ++*(_WORD *)(v14 + 32);
LABEL_13:
        log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjOpen End (%x)", v26, v27, v28, v20);
        return v20;
      }
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v30, v26, v27, v28, v35);
    uint64_t v20 = TOKENTNERROR(10);
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_12:
    FERuntimeData_ObjClose(a1, v22, v23, v24, v25, v26, v27, v28);
    goto LABEL_13;
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v35);

  return TOKENTNERROR(10);
}

uint64_t FERuntimeData_ObjClose(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[22];
  if (v8)
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjClose Begin", a6, a7, a8, v16);
    uint64_t v10 = (uint64_t *)a1[22];
    if (*v10)
    {
      vector_ObjClose(*v10);
      *uint64_t v10 = 0;
    }
    node_clearMem(a1);
    uint64_t v11 = *(uint64_t **)(v8 + 24);
    if (v11)
    {
      if (*v11)
      {
        heap_Free(*(void **)(*a1 + 8), *v11);
        uint64_t v11 = *(uint64_t **)(v8 + 24);
        *uint64_t v11 = 0;
      }
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v11);
      *(void *)(v8 + 24) = 0;
    }
    *(_WORD *)(v8 + 16) = 0;
    heap_Free(*(void **)(*a1 + 8), v8);
    a1[22] = 0;
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : ObjClose End (%x)", v12, v13, v14, 0);
    return 0;
  }
  else
  {
    return TOKENTNERROR(8);
  }
}

void *node_clearMem(void *result)
{
  uint64_t v1 = result[22];
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int16 *)(v1 + 32);
    if (v3 >= 2)
    {
      uint64_t v4 = result;
      unint64_t v5 = 1;
      uint64_t v6 = 16;
      do
      {
        uint64_t v7 = *(void *)(v2 + v6);
        if (v7)
        {
          uint64_t result = heap_Free(*(void **)(*v4 + 8), v7);
          uint64_t v2 = *(void *)(v1 + 24);
          *(void *)(v2 + v6) = 0;
          unsigned int v3 = *(unsigned __int16 *)(v1 + 32);
        }
        ++v5;
        v6 += 16;
      }
      while (v5 < v3);
      if (v3 >= 2)
      {
        uint64_t result = cstdlib_memset((void *)(v2 + 16), 0, (16 * v3 + 0xFFFFFFFF0) & 0xFFFFFFFF0);
        *(_WORD *)(v1 + 32) = 1;
      }
    }
    *(_WORD *)(v1 + 38) = 0;
  }
  return result;
}

uint64_t FERuntimeData_DumpMatch(uint64_t a1, uint64_t a2, __int16 *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  if (*(void *)(a1 + 176))
  {
    if (a4 == 1) {
      uint64_t v11 = "<LOGFE> ";
    }
    else {
      uint64_t v11 = "";
    }
    cstdlib_strcpy(__dst, v11);
    FEData_blockData_getTokenData((void *)a1, *(void *)(a2 + 88), &v35, v12, v13, v14, v15, v16);
    cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(void *)(a1 + 304) + *a3), (unsigned __int16)(a3[1] - *a3));
    *(unsigned char *)(*(void *)(a1 + 552) - *a3 + a3[1]) = 0;
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s%20s [%d,%d] _%s_ (domainBlockID=%d, domainNum=%d)", v17, v18, v19, (uint64_t)__dst);
    if (*(unsigned char *)(a2 + 82))
    {
      unint64_t v23 = 0;
      uint64_t v24 = (__int16 *)(a2 + 44);
      do
      {
        uint64_t v25 = *(v24 - 1);
        int v26 = (unsigned __int16)*v24;
        if (v25 == -1 && v26 == 0xFFFF)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _NULL_", v20, v21, v22, (uint64_t)"MATCH");
        }
        else
        {
          cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(void *)(a1 + 304) + v25), (unsigned __int16)(v26 - v25));
          *(unsigned char *)(*(void *)(a1 + 552) - *(v24 - 1) + *v24) = 0;
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] [%d,%d] _%s_", v28, v29, v30, (uint64_t)"MATCH");
        }
        ++v23;
        v24 += 2;
      }
      while (v23 < *(unsigned __int8 *)(a2 + 82));
    }
    if (*(_WORD *)(a2 + 40))
    {
      unint64_t v31 = 0;
      uint64_t v32 = a2 + 2;
      do
      {
        v32 += 4;
        log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%30s[%d] \"%s\"", v20, v21, v22, (uint64_t)"EXPANDEDORTH");
        ++v31;
      }
      while (v31 < *(unsigned __int16 *)(a2 + 40));
    }
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v34);
    return TOKENTNERROR(7);
  }
}

uint64_t FERuntimeData_DumpMatches(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 548)) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  if (v9)
  {
    if (a3 == 1) {
      uint64_t v11 = "<LOGFE> ";
    }
    else {
      uint64_t v11 = "";
    }
    cstdlib_strcpy(__dst, v11);
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches Begin %s", v12, v13, v14, (uint64_t)__dst);
    if (*(_WORD *)(v9 + 16))
    {
      for (unint64_t i = *(__int16 **)(v9 + 8); i; unint64_t i = *(__int16 **)i)
        FERuntimeData_DumpMatch(a1, (uint64_t)(i + 12), i + 8, a3, v15, v16, v17, v18);
    }
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%sfe_runtimedata : DumpMatches End (%x)", v16, v17, v18, (uint64_t)__dst);
    return 0;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v21);

  return TOKENTNERROR(7);
}

uint64_t FERuntimeData_GetNumMatches(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[22];
  if (v8) {
    return *(unsigned __int16 *)(v8 + 16);
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t FERuntimeData_FreeMatches(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a1[22];
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : FreeMatches Begin", a6, a7, a8, v15);
  node_clearMem(a1);
  *(void *)(v10 + 8) = 0;
  *(_WORD *)(v10 + 16) = 0;
  if (a2 == 1) {
    vector_Clear(*(void *)v10);
  }
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"fe_runtimedata : FreeMatches End (%x)", v11, v12, v13, 0);
  return 0;
}

uint64_t FERuntimeData_AddDomainRange(uint64_t a1, void **a2)
{
  if (vector_AddGet(**(void **)(a1 + 176), a2))
  {
    cstdlib_memset(*a2, 0, 0xCuLL);
    return 0;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v4, v5, v6, v7, v9);
    return TOKENTNERROR(10);
  }
}

uint64_t FERuntimeData_AddMatch(uint64_t *a1, void *__src, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!__src || !a3)
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24049, 0, a5, a6, a7, a8, v43);
    return TOKENTNERROR(7);
  }
  uint64_t v10 = a1[22];
  unsigned int v11 = *(unsigned __int16 *)(v10 + 32);
  if (!*(_WORD *)(v10 + 32))
  {
    uint64_t v34 = *(void *)(*a1 + 32);
    uint64_t v35 = a1[23];
    uint64_t v36 = 24035;
    uint64_t v37 = 0;
LABEL_23:
    log_OutPublic(v34, v35, v36, (uint64_t)v37, a5, a6, a7, a8, v43);
    int v38 = 0;
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(v10 + 24);
  uint64_t v14 = *(unsigned __int16 *)(v10 + 38);
  uint64_t v15 = (uint64_t *)(v13 + 16 * v14);
  int v16 = *(unsigned __int16 *)(v10 + 36);
  if ((*((_DWORD *)v15 + 3) + v16) < *((_DWORD *)v15 + 2)) {
    goto LABEL_10;
  }
  if (v11 + 1 >= *(unsigned __int16 *)(v10 + 40))
  {
    uint64_t v34 = *(void *)(*a1 + 32);
    uint64_t v35 = a1[23];
    uint64_t v43 = "maxBlocks";
    uint64_t v37 = "%s%d";
    uint64_t v36 = 24036;
    goto LABEL_23;
  }
  if ((int)v14 + 1 >= v11)
  {
    uint64_t v17 = (uint64_t *)(v13 + 16 * *(unsigned __int16 *)(v10 + 32));
    uint64_t v18 = *(unsigned __int16 *)(v10 + 34) * v16 + 1;
    v17[1] = v18;
    *uint64_t v17 = 0;
    uint64_t v19 = heap_Calloc(*(void **)(*a1 + 8), 1, v18);
    *uint64_t v17 = v19;
    if (v19)
    {
      ++*(_WORD *)(v10 + 32);
      LOWORD(v14) = *(_WORD *)(v10 + 38);
      uint64_t v13 = *(void *)(v10 + 24);
      int v16 = *(unsigned __int16 *)(v10 + 36);
      goto LABEL_9;
    }
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v20, v21, v22, v23, v43);
    int v38 = 10;
LABEL_24:
    LODWORD(result) = TOKENTNERROR(v38);
    if ((int)result >= 0) {
      return 6;
    }
    else {
      return result;
    }
  }
LABEL_9:
  unsigned __int16 v24 = v14 + 1;
  *(_WORD *)(v10 + 38) = v24;
  uint64_t v15 = (uint64_t *)(v13 + 16 * v24);
LABEL_10:
  uint64_t v25 = *((unsigned int *)v15 + 3);
  *((_DWORD *)v15 + 3) = v25 + v16;
  uint64_t v26 = *v15;
  if (!*v15) {
    return 6;
  }
  uint64_t v27 = v26 + v25;
  uint64_t v28 = (unsigned __int16 *)(v26 + v25 + 16);
  *(void *)uint64_t v27 = 0;
  *(void *)(v27 + 8) = 0;
  cstdlib_memcpy(v28, __src, 4uLL);
  cstdlib_memcpy((void *)(v27 + 24), a3, 0x70uLL);
  uint64_t v29 = *(uint64_t **)(v10 + 8);
  if (v29)
  {
    int v30 = *v28;
    while (1)
    {
      unint64_t v31 = v29;
      int v32 = *((unsigned __int16 *)v29 + 8);
      if (v32 == v30) {
        break;
      }
      if ((__int16)v32 >= (__int16)v30)
      {
        uint64_t v42 = (void *)v31[1];
        v31[1] = v27;
        *(void *)uint64_t v27 = v31;
        if (!v42) {
          goto LABEL_40;
        }
        *(void *)(v27 + 8) = v42;
        *uint64_t v42 = v27;
        goto LABEL_41;
      }
      uint64_t v29 = (uint64_t *)*v31;
      if (!*v31)
      {
        *unint64_t v31 = v27;
        *(void *)(v27 + 8) = v31;
        goto LABEL_41;
      }
    }
    int v39 = *(__int16 *)(v27 + 18);
    if (*((__int16 *)v31 + 9) > v39)
    {
      while (1)
      {
        uint64_t v40 = v31;
        unint64_t v31 = (uint64_t *)v31[1];
        if (!v31) {
          break;
        }
        if (*((unsigned __int16 *)v31 + 8) != v30 || *((__int16 *)v31 + 9) <= v39)
        {
          v40[1] = v27;
          *(void *)uint64_t v27 = v40;
          *(void *)(v27 + 8) = v31;
          *unint64_t v31 = v27;
          goto LABEL_41;
        }
      }
      v40[1] = v27;
      *(void *)uint64_t v27 = v40;
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t v41 = v31;
      unint64_t v31 = (uint64_t *)*v31;
      if (!v31) {
        break;
      }
      if (*((unsigned __int16 *)v31 + 8) != v30 || *((__int16 *)v31 + 9) >= v39)
      {
        *uint64_t v41 = v27;
        *(void *)uint64_t v27 = v31;
        *(void *)(v27 + 8) = v41;
        v31[1] = v27;
        goto LABEL_41;
      }
    }
    *uint64_t v41 = v27;
    *(void *)(v27 + 8) = v41;
  }
  else
  {
LABEL_40:
    *(void *)(v10 + 8) = v27;
  }
LABEL_41:
  uint64_t result = 0;
  ++*(_WORD *)(v10 + 16);
  return result;
}

uint64_t FERuntimeData_FindLongestMatch(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    uint64_t v4 = *(uint64_t **)(v3 + 8);
    for (*a3 = a2[1]; v4; uint64_t v4 = (uint64_t *)*v4)
    {
      int v5 = *((unsigned __int16 *)v4 + 8);
      int v6 = *a2;
      if (v5 == v6)
      {
        *a3 = *((_WORD *)v4 + 9);
      }
      else if ((__int16)v5 > (__int16)v6)
      {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t FERuntimeData_GetAllMatchesAtKey(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (!*(_WORD *)(v2 + 16)) {
    return 0;
  }
  int v5 = *(uint64_t ***)(v2 + 8);
  if (v5)
  {
    unsigned __int16 v6 = 0;
    do
    {
      if (*((unsigned __int16 *)v5 + 8) != *a2) {
        break;
      }
      if (*((unsigned __int16 *)v5 + 9) != a2[1]) {
        break;
      }
      ++v6;
      int v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  else
  {
    unsigned __int16 v6 = 0;
  }
  uint64_t result = resetMatchList(a1, v6);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v8 = *(uint64_t ***)(v2 + 8);
    if (v8)
    {
      int v9 = *a2;
      do
      {
        if (*((unsigned __int16 *)v8 + 8) != v9) {
          break;
        }
        if (*((unsigned __int16 *)v8 + 9) != a2[1]) {
          break;
        }
        uint64_t v10 = *(unsigned __int16 *)(a1 + 386);
        *(void *)(*(void *)(a1 + 376) + 8 * v10) = v8 + 3;
        *(_WORD *)(a1 + 386) = v10 + 1;
        uint64_t v8 = (uint64_t **)*v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t FERuntimeData_DeleteSubsumedkeys(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    unsigned __int16 v6 = *(uint64_t **)(v3 + 8);
    uint64_t v4 = (void *)(v3 + 8);
    int v5 = v6;
    if (v6)
    {
      int v7 = *a2;
      while (1)
      {
        int v8 = *((__int16 *)v5 + 8);
        if (v8 == v7 && *((__int16 *)v5 + 9) == a3) {
          goto LABEL_8;
        }
        if (v8 < v7) {
          break;
        }
        if (*((__int16 *)v5 + 9) <= a3)
        {
          int v9 = (uint64_t *)*v5;
LABEL_13:
          uint64_t v10 = (void *)v5[1];
          if (!v10)
          {
            uint64_t v10 = v4;
            if (v9)
            {
              v9[1] = 0;
              uint64_t v10 = v4;
            }
          }
          *uint64_t v10 = v9;
          if (*v5) {
            *(void *)(*v5 + 8) = v5[1];
          }
          goto LABEL_18;
        }
        int v9 = (uint64_t *)*v5;
        if (v8 < a3) {
          goto LABEL_13;
        }
LABEL_18:
        int v5 = v9;
        if (!v9) {
          return 0;
        }
      }
      if (v8 > a3) {
        return 0;
      }
LABEL_8:
      int v9 = (uint64_t *)*v5;
      goto LABEL_18;
    }
  }
  return 0;
}

uint64_t FERuntimeData_DeleteMatch(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 176);
  if (*(_WORD *)(v3 + 16))
  {
    uint64_t v4 = (void *)(v3 + 8);
    int v5 = (uint64_t *)(v3 + 8);
    do
    {
      int v5 = (uint64_t *)*v5;
      if (!v5) {
        break;
      }
      int v6 = *((unsigned __int16 *)v5 + 8);
      int v7 = *a2;
      if (v6 == v7 && *((unsigned __int16 *)v5 + 9) == a2[1] && v5[14] == *(void *)(a3 + 88))
      {
        int v9 = (uint64_t *)*v5;
        uint64_t v10 = (void *)v5[1];
        if (!v10)
        {
          if (v9) {
            v9[1] = 0;
          }
          uint64_t v10 = v4;
        }
        *uint64_t v10 = v9;
        if (*v5) {
          *(void *)(*v5 + 8) = v5[1];
        }
        return 0;
      }
    }
    while ((__int16)v6 <= (__int16)v7);
  }
  return 0;
}

uint64_t FERuntimeData_GetKeyAtPos(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 176);
  if (*(_WORD *)(v4 + 16))
  {
    int v5 = (uint64_t **)(v4 + 8);
    do
    {
      int v5 = (uint64_t **)*v5;
      if (!v5) {
        break;
      }
      int v6 = *((__int16 *)v5 + 8);
      if (v6 == a2)
      {
        *a3 = v5 + 2;
        *a4 = v5 + 3;
        return 0;
      }
    }
    while (v6 <= a2);
  }
  return 0;
}

uint64_t FERuntimeData_GetNumDomains(uint64_t a1, _WORD *a2)
{
  *a2 = vector_GetSize(**(void **)(a1 + 176));
  return 0;
}

uint64_t FERuntimeData_UpdateDomainRange(void *a1, unsigned int a2, __int16 a3)
{
  int v5 = (uint64_t *)a1[22];
  uint64_t v11 = 0;
  if (vector_GetElemAt(*v5, a2, &v11))
  {
    uint64_t result = 0;
    *(_WORD *)(v11 + 2) = a3;
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24037, (uint64_t)"%s%d", v6, v7, v8, v9, "domainIndex");
    return TOKENTNERROR(0);
  }
  return result;
}

uint64_t FERuntimeData_GetDomainRange(uint64_t a1, unsigned int a2, void *a3)
{
  if (vector_GetElemAt(**(void **)(a1 + 176), a2, a3)) {
    return 0;
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24037, (uint64_t)"%s%d", v4, v5, v6, v7, "domainIndex");

  return TOKENTNERROR(0);
}

uint64_t FERuntimeData_GetActiveDomains(uint64_t a1, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  uint64_t v15 = 0;
  uint64_t v11 = *(uint64_t **)(a1 + 176);
  if (vector_GetElemAt(*v11, 0, &v15))
  {
    __int16 v12 = 0;
    while (a6)
    {
      unsigned int v13 = (unsigned __int16)*a3;
      if (v13 <= 0x1F3) {
        goto LABEL_5;
      }
LABEL_9:
      if (!vector_GetElemAt(*v11, (unsigned __int16)++v12, &v15)) {
        return 0;
      }
    }
    if (a4 < *v15) {
      goto LABEL_9;
    }
    if (a5 > v15[1]) {
      goto LABEL_9;
    }
    unsigned int v13 = (unsigned __int16)*a3;
    if (v13 >= 0x1F4) {
      goto LABEL_9;
    }
LABEL_5:
    *(_WORD *)(a2 + 2 * v13) = v12;
    ++*a3;
    goto LABEL_9;
  }
  return 0;
}

uint64_t FERuntimeData_PruneAndDumpActiveDomains(void *a1)
{
  unsigned __int16 v24 = 0;
  uint64_t v2 = (uint64_t *)a1[22];
  if (vector_GetElemAt(*v2, 0, &v24))
  {
    unsigned int v6 = 0;
    unsigned __int16 v7 = 0;
    do
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"DomainRange [%d,%d] %s", v3, v4, v5, *v24);
      if (*((_DWORD *)v24 + 2))
      {
        ++v7;
      }
      else if (!vector_Remove(*v2, v6))
      {
        log_OutPublic(*(void *)(*a1 + 32), a1[23], 24038, (uint64_t)"%s%d", v8, v9, v10, v11, "domain range index");
        return 0;
      }
      unsigned int v6 = v7;
    }
    while (vector_GetElemAt(*v2, v7, &v24));
  }
  uint64_t Size = vector_GetSize(*v2);
  uint64_t v16 = *(void *)(*a1 + 32);
  uint64_t v17 = a1[23];
  if (Size)
  {
    log_OutText(v16, v17, 4, 0, (uint64_t)"%d Final Active Domains", v12, v13, v14, Size);
    if (vector_GetElemAt(*v2, 0, &v24))
    {
      int v21 = 0;
      do
      {
        log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"Domain[block=%d,num=%d] Range [%d,%d]", v18, v19, v20, (unsigned __int16)v24[3]);
        ++v21;
      }
      while (vector_GetElemAt(*v2, (unsigned __int16)v21, &v24));
    }
  }
  else
  {
    log_OutText(v16, v17, 4, 0, (uint64_t)"No Final Active Domains", v12, v13, v14, v23);
  }
  return 0;
}

uint64_t FERuntimeData_GetDomainBlockIndex(void *a1, unsigned int a2, _WORD *a3, _WORD *a4)
{
  unsigned __int16 v7 = (uint64_t *)a1[22];
  uint64_t v14 = 0;
  if (vector_GetElemAt(*v7, a2, &v14))
  {
    uint64_t result = 0;
    uint64_t v13 = v14;
    *a3 = *(_WORD *)(v14 + 6);
    *a4 = *(_WORD *)(v13 + 4);
  }
  else
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24038, (uint64_t)"%s%d", v8, v9, v10, v11, "iDomainIndexID");
    return TOKENTNERROR(0);
  }
  return result;
}

uint64_t applyChecks(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  v56[1] = 0;
  uint64_t v57 = 0;
  v56[0] = 0;
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : applyChecks Begin (recursionlevel=%d)", a6, a7, a8, a5);
  uint64_t inited = initStrRes((uint64_t)a1, (uint64_t)&v59);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t DomainDefBlockInfo = initStrRes((uint64_t)a1, (uint64_t)&v57);
    if ((DomainDefBlockInfo & 0x80000000) != 0)
    {
LABEL_29:
      clearStrRes((void *)*a1, (uint64_t)&v57);
      clearStrRes((void *)*a1, (uint64_t)&v59);
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : applyChecks End", v46, v47, v48, v52);
      return DomainDefBlockInfo;
    }
    uint64_t v53 = a4;
    if (*(unsigned char *)(a3 + 24))
    {
      uint64_t v18 = 0;
      while (1)
      {
        log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"level %d Apply Check %d ...", v14, v15, v16, a5);
        uint64_t v19 = applyChecks(a1, a2, *(void *)(*(void *)(a3 + 16) + 8 * v18), &v59, (a5 + 1));
        if ((v19 & 0x80000000) != 0) {
          break;
        }
        if (WORD1(v60)) {
          log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"After check %d, uint64_t result = \"%s\"", v20, v21, v22, v18);
        }
        uint64_t DomainDefBlockInfo = add2StringV3(a1, (uint64_t)&v57, (uint64_t)&v59);
        if ((DomainDefBlockInfo & 0x80000000) != 0) {
          goto LABEL_29;
        }
        if (v18 + 1 != *(unsigned __int8 *)(a3 + 24))
        {
          uint64_t DomainDefBlockInfo = add2StringV2(a1, (uint64_t)&v57, " ");
          if ((DomainDefBlockInfo & 0x80000000) != 0) {
            goto LABEL_29;
          }
        }
        WORD1(v60) = 0;
        *uint64_t v59 = 0;
        if (++v18 >= (unint64_t)*(unsigned __int8 *)(a3 + 24)) {
          goto LABEL_12;
        }
      }
LABEL_21:
      uint64_t DomainDefBlockInfo = v19;
      goto LABEL_29;
    }
LABEL_12:
    clearStrRes((void *)*a1, (uint64_t)&v59);
    if (WORD1(v58)) {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing function calls on expanded string \"%s\"", v23, v24, v25, v57);
    }
    FEFunctionMap_GetFunction((uint64_t)a1, 0, *(void *)a3, &v61);
    if (!v61)
    {
      uint64_t v38 = *(void *)(*a1 + 32);
      uint64_t v39 = a1[23];
      if (WORD1(v58)) {
        log_OutPublic(v38, v39, 24001, (uint64_t)"%s%s", v26, v27, v28, v29, "argstr");
      }
      else {
        log_OutPublic(v38, v39, 24001, 0, v26, v27, v28, v29, v52);
      }
      goto LABEL_29;
    }
    uint64_t v19 = initStrRes((uint64_t)a1, (uint64_t)v56);
    if ((v19 & 0x80000000) != 0) {
      goto LABEL_21;
    }
    if ((**(_DWORD **)a3 & 0xFFFFFFFE) == 8)
    {
      LODWORD(v55) = 0;
      uint64_t v35 = a1[41];
      *(void *)uint64_t v35 = v57;
      *(void *)(v35 + 8) = v56;
      *(void *)(v35 + 32) = 0;
      *(_WORD *)(v35 + 40) = *(_WORD *)(a3 + 8);
      uint64_t v36 = v61(a1, &v55);
      uint64_t v37 = v53;
      if ((v36 & 0x80000000) == 0) {
LABEL_18:
      }
        uint64_t v36 = add2StringV3(a1, v37, (uint64_t)v56);
    }
    else
    {
      uint64_t v55 = 0;
      int v54 = 0;
      uint64_t DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo(a1, *(unsigned __int16 *)(*(void *)(a1[41] + 24) + 104), &v55, v30, v31, v32, v33, v34);
      uint64_t v37 = v53;
      if ((DomainDefBlockInfo & 0x80000000) != 0) {
        goto LABEL_27;
      }
      uint64_t v44 = a1[41];
      unsigned int v45 = *(unsigned __int16 *)(*(void *)(v44 + 24) + 106);
      if (v45 > *(unsigned __int16 *)(v55 + 24))
      {
        log_OutPublic(*(void *)(*a1 + 32), a1[23], 24002, 0, v40, v41, v42, v43, v52);
        goto LABEL_27;
      }
      uint64_t v50 = *(void *)(v55 + 16);
      *(void *)uint64_t v44 = *(void *)(a3 + 40);
      *(void *)(v44 + 8) = v56;
      if (*(_DWORD *)(v50 + 72 * v45 + 60)) {
        uint64_t v51 = a1[36];
      }
      else {
        uint64_t v51 = *(void *)(v50 + 72 * v45 + 48) + *(unsigned __int16 *)(v50 + 72 * v45 + 2);
      }
      *(void *)(v44 + 32) = v51;
      *(_WORD *)(v44 + 40) = *(_WORD *)(a3 + 8);
      uint64_t v36 = v61(a1, (uint64_t *)&v54);
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t DomainDefBlockInfo = v36;
LABEL_27:
    clearStrRes((void *)*a1, (uint64_t)v56);
    goto LABEL_29;
  }
  return inited;
}

uint64_t validateCurrentMatch(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  __int16 v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch Begin", a6, (uint64_t)a7, a8, v29);
  *a7 = 1;
  if (partialMatchFoundInBasicToken(a1, a3) != 1)
  {
    if (*(_DWORD *)(a1 + 548) == 1) {
      FERuntimeData_DumpMatch(a1, a2, a3, 0, v15, v16, v17, v18);
    }
    FEData_blockData_getTokenAndCheckData((void *)a1, a6, &v31, &v32, &v30, v16, v17, v18);
    if (v32)
    {
      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"Applying check rule for token %s", v20, v21, v22, a5);
      *(_WORD *)(a1 + 402) = 0;
      **(unsigned char **)(a1 + 392) = 0;
      uint64_t v23 = *(void *)(a1 + 328);
      *(void *)(v23 + 16) = a3;
      *(void *)(v23 + 24) = a2;
      uint64_t v19 = applyChecks((uint64_t *)a1, a4, v30, a1 + 392, 0, v24, v25, v26);
      if ((v19 & 0x80000000) != 0) {
        return v19;
      }
      uint64_t v27 = *(unsigned __int16 *)(a1 + 402);
      if (*(_WORD *)(a1 + 402))
      {
        uint64_t v27 = cstdlib_strcmp(*(const char **)(a1 + 392), "TRUE") == 0;
        *a7 = v27;
      }
      else
      {
        *a7 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v27 = *a7;
    }
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch End result=%d", v20, v21, v22, v27);
    return v19;
  }
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"tokenizer : validateCurrentMatch End result=%d (partial match in basic token found)", v16, v17, v18, *a7);
  uint64_t v19 = 0;
  *a7 = 0;
  return v19;
}

uint64_t tokenizer_CheckNOTNULL(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_NOTNULL( %d) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 328) + 40));
  }
  int v17 = 0;
  if (!validateMatchAndGetKey((uint64_t *)a1, &v17, a3, a4, a5, a6, a7, a8))
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 328) + 8);
LABEL_10:
    uint64_t v11 = "FALSE";
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 328) + 8);
  if ((__int16)v17 == -1 && HIWORD(v17) == 0xFFFF) {
    goto LABEL_10;
  }
  uint64_t v11 = "TRUE";
LABEL_11:
  uint64_t v15 = add2StringV2((uint64_t *)a1, v9, v11);
  if ((v15 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v12, v13, v14, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v15;
}

uint64_t tokenizer_CheckLessThan(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v26 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_LESSTHAN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 328) + 40));
  }
  int v25 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v25, a3, a4, a5, a6, a7, a8))
  {
    if ((__int16)v25 == -1 && HIWORD(v25) == 0xFFFF)
    {
      if (*(_DWORD *)(a1 + 548) == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v24);
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
      int v17 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v25, &v26, v10, v11, v12, v13, v14)) {
        *a2 = 0;
      }
      getValFromArgString(a1, (_WORD *)&v26 + 1);
      BOOL v16 = (unsigned __int16)v26 >= HIWORD(v26);
      *a2 = (unsigned __int16)v26 < HIWORD(v26);
      if (v16) {
        int v17 = "FALSE";
      }
      else {
        int v17 = "TRUE";
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
    }
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
    int v17 = "FALSE";
  }
  uint64_t v22 = add2StringV2((uint64_t *)a1, v18, v17);
  if ((v22 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v19, v20, v21, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v22;
}

uint64_t addExpandedOrthography2Match(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 328);
  __int16 v5 = *(_WORD *)(v4 + 40);
  unsigned int v6 = (_WORD *)(*(void *)(v4 + 24) + 4 * *(unsigned __int16 *)(*(void *)(v4 + 24) + 40));
  *unsigned int v6 = v5;
  v6[1] = *(_WORD *)(a1 + 514);
  uint64_t result = add2StringV5((uint64_t *)a1, a1 + 504, *(char **)(a1 + 560));
  if ((result & 0x80000000) == 0)
  {
    ++*(_WORD *)(*(void *)(*(void *)(a1 + 328) + 24) + 40);
    *a2 = 1;
  }
  return result;
}

uint64_t compareToken(uint64_t *a1, char *__s, int a3, unsigned int a4, int a5, unsigned int a6, unsigned int a7, int *a8)
{
  int v16 = cstdlib_strlen(__s);
  unsigned int v21 = a4;
  *a8 = 0;
  if (a6 <= a4) {
    unsigned int v22 = a4;
  }
  else {
    unsigned int v22 = a6;
  }
  if (v22 <= a7) {
    unsigned int v22 = a7;
  }
  int v23 = 0;
  if ((_WORD)v16)
  {
    while (__s[(unsigned __int16)v23] != a3)
    {
      if ((unsigned __int16)++v23 >= (unsigned __int16)v16)
      {
        int v23 = v16;
        break;
      }
    }
  }
  if (a3 != __s[(unsigned __int16)v23])
  {
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24003, (uint64_t)"%s%s%s%c", v17, v18, v19, v20, "dictionaryStr");
LABEL_23:
    int v31 = 0;
    uint64_t result = 0;
LABEL_51:
    *a8 = v31;
    return result;
  }
  uint64_t v24 = a1;
  if (a6 == 1) {
    unsigned __int16 v25 = v23;
  }
  else {
    unsigned __int16 v25 = 0;
  }
  if (a7 == 1) {
    unsigned __int16 v26 = v23;
  }
  else {
    unsigned __int16 v26 = 0;
  }
  if (v21 == 1) {
    unsigned __int16 v27 = v23;
  }
  else {
    unsigned __int16 v27 = 0;
  }
  uint64_t v44 = a8;
  int v43 = a5;
  if (v22 != 1)
  {
    unsigned __int16 v30 = 0;
    unsigned __int16 v29 = 0;
    unsigned __int16 v28 = 0;
    unsigned __int8 v33 = 1;
    while (1)
    {
      int v34 = v23 + 1;
      int v23 = v34;
      if ((unsigned __int16)v16 > (unsigned __int16)v34)
      {
        do
        {
          if (a3 == __s[(unsigned __int16)v23]) {
            break;
          }
          ++v23;
        }
        while ((unsigned __int16)v16 > (unsigned __int16)v23);
        if ((unsigned __int16)v34 == (unsigned __int16)v16 && (unsigned __int16)v34 != (unsigned __int16)v23) {
          break;
        }
      }
      if (++v33 == a6)
      {
        unsigned __int16 v29 = v34;
        unsigned __int16 v25 = v23;
      }
      if (v33 == a7)
      {
        unsigned __int16 v30 = v34;
        unsigned __int16 v26 = v23;
      }
      if (v33 == v21)
      {
        unsigned __int16 v28 = v34;
        unsigned __int16 v27 = v23;
      }
      if (v33 == v22) {
        goto LABEL_37;
      }
    }
    log_OutPublic(*(void *)(*v24 + 32), v24[23], 24003, (uint64_t)"%s%s%s%d%s%c", v17, v18, v19, v20, "dictionaryStr");
    goto LABEL_49;
  }
  unsigned __int16 v28 = 0;
  unsigned __int16 v29 = 0;
  unsigned __int16 v30 = 0;
LABEL_37:
  uint64_t v35 = v24;
  unsigned __int16 v36 = cstdlib_strlen(*(const char **)v24[41]);
  int v37 = v27 - v28;
  BOOL v38 = v37 >= 1 && v36 == v37;
  if (!v38 || cstdlib_strncmp(&__s[v28], *(const char **)v35[41], v36))
  {
LABEL_49:
    int v31 = 0;
    uint64_t result = 0;
LABEL_50:
    a8 = v44;
    goto LABEL_51;
  }
  if (v30 != v26 && !cstdlib_strstr(&__s[v30], *(const char **)(v35[41] + 32)))
  {
    a8 = v44;
    if (*((_DWORD *)v35 + 137) == 1) {
      log_OutText(*(void *)(*v35 + 32), v35[23], 5, 0, (uint64_t)"search word \"%s\", domain=\"%s\" - blocked on domain", v40, v41, v42, *(void *)v35[41]);
    }
    goto LABEL_23;
  }
  if (v43 != 1)
  {
    uint64_t result = 0;
    goto LABEL_55;
  }
  if (v29 == v25)
  {
    log_OutPublic(*(void *)(*v35 + 32), v35[23], 24004, (uint64_t)"%s%s%s%s", v39, v40, v41, v42, "argStr");
    goto LABEL_49;
  }
  __s[v25 - v29] = 0;
  uint64_t result = add2StringV2(v35, (uint64_t)(v35 + 70), __s);
  if ((result & 0x80000000) == 0)
  {
LABEL_55:
    int v31 = 1;
    goto LABEL_50;
  }
  return result;
}

uint64_t doDictionaryLookup(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, int *a7, uint64_t a8, int a9)
{
  uint64_t v26 = 0;
  unsigned __int16 v25 = 0;
  unsigned __int8 v24 = 0;
  *a7 = 0;
  uint64_t v17 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t *, unsigned __int16 *, unsigned __int8 *))(*(void *)(a1 + 88) + 152))(*(void *)(a1 + 96), *(void *)(a1 + 104), a2, *(void *)(a1 + 592), &v26, &v25, &v24);
  if ((v17 & 0x80000000) == 0)
  {
    if (v25) {
      goto LABEL_24;
    }
    if (a9 != 1)
    {
      size_t v20 = (4 * cstdlib_strlen(*(const char **)(a1 + 592))) | 1;
      size_t v21 = *(unsigned __int16 *)(a1 + 600);
      if (v20 > v21)
      {
        uint64_t v22 = growStrRes((uint64_t *)a1, a1 + 592, (unsigned __int16)v20);
        if ((v22 & 0x80000000) != 0) {
          return v22;
        }
        LOWORD(v21) = *(_WORD *)(a1 + 600);
      }
      uint64_t v17 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 88) + 112))(*(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(*(void *)(a1 + 328) + 32), *(void *)(a1 + 592), (unsigned __int16)(v21 - 1));
      if (cstdlib_strlen(*(const char **)(a1 + 592)))
      {
        uint64_t v17 = (*(uint64_t (**)(void, void, uint64_t, void, uint64_t *, unsigned __int16 *, unsigned __int8 *, uint64_t))(*(void *)(a1 + 88) + 152))(*(void *)(a1 + 96), *(void *)(a1 + 104), a2, *(void *)(a1 + 592), &v26, &v25, &v24, a8);
        if ((v17 & 0x80000000) == 0)
        {
          if (v25)
          {
LABEL_24:
            if (!*a7)
            {
              unint64_t v18 = 0;
              do
              {
                uint64_t v17 = compareToken((uint64_t *)a1, *(char **)(v26 + 8 * v18), v24, a3, a4, a5, a6, a7);
                if ((v17 & 0x80000000) != 0) {
                  break;
                }
                ++v18;
              }
              while (!*a7 && v18 < v25);
            }
          }
        }
      }
    }
  }
  return v17;
}

uint64_t doDictionaryLookupLoop(uint64_t a1, int *a2, _DWORD *a3, int a4)
{
  *a2 = 0;
  uint64_t result = doDictionaryLookup(a1, (uint64_t)"tnlab", 1u, 0, 0, 2u, a2, 1, a4);
  if ((result & 0x80000000) == 0 && *a2 != 1)
  {
    cstdlib_strcpy(*(char **)(a1 + 592), *(const char **)(a1 + 576));
    uint64_t result = doDictionaryLookup(a1, (uint64_t)"tn", 2u, 1, 1u, 3u, a2, *(unsigned __int8 *)(a1 + 609), a4);
    if ((result & 0x80000000) == 0)
    {
      if (*a2 == 1)
      {
        *a3 = 1;
      }
      else
      {
        cstdlib_strcpy(*(char **)(a1 + 592), *(const char **)(a1 + 576));
        return doDictionaryLookup(a1, (uint64_t)"g2p", 2u, 0, 0, 3u, a2, *(unsigned __int8 *)(a1 + 608), a4);
      }
    }
  }
  return result;
}

uint64_t tokenizer_CheckToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v33 = 0;
  int v31 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_ISTOKEN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 328) + 40));
  }
  int v32 = 0;
  *a2 = 0;
  if (!validateMatchAndGetKey((uint64_t *)a1, &v32, a3, a4, a5, a6, a7, a8)) {
    goto LABEL_16;
  }
  if ((__int16)v32 == -1 && HIWORD(v32) == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 548) == 1) {
      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v11, v12, v13, v29);
    }
    goto LABEL_19;
  }
  if ((resetStrRes((uint64_t *)a1, a1 + 576) & 0x80000000) != 0
    || (resetStrRes((uint64_t *)a1, a1 + 592) & 0x80000000) != 0)
  {
    return TOKENTNERROR(8);
  }
  uint64_t v15 = add2StringV4((uint64_t *)a1, a1 + 592, (unsigned __int16)v32, SHIWORD(v32));
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  uint64_t v15 = add2StringV4((uint64_t *)a1, a1 + 576, (unsigned __int16)v32, SHIWORD(v32));
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"search word \"%s\", domain=\"%s\"", v16, v17, v18, *(void *)(a1 + 592));
  }
  *(_WORD *)(a1 + 570) = 0;
  **(unsigned char **)(a1 + 560) = 0;
  uint64_t v15 = doDictionaryLookupLoop(a1, &v33, &v31, v8);
  if ((v15 & 0x80000000) != 0) {
    return v15;
  }
  if (v33 == 1)
  {
    if (v31 != 1) {
      goto LABEL_19;
    }
    int v30 = 0;
    uint64_t v15 = addExpandedOrthography2Match(a1, &v30);
    if ((v15 & 0x80000000) == 0)
    {
      if (v30 != 1)
      {
        if (*(_DWORD *)(a1 + 548) == 1) {
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"ERROR : problem adding expanded orthography for word \"%s\"", v26, v27, v28, *(void *)(a1 + 592));
        }
        goto LABEL_16;
      }
LABEL_19:
      uint64_t v19 = *(void *)(*(void *)(a1 + 328) + 8);
      size_t v20 = "TRUE";
      goto LABEL_20;
    }
    return v15;
  }
LABEL_16:
  uint64_t v19 = *(void *)(*(void *)(a1 + 328) + 8);
  size_t v20 = "FALSE";
LABEL_20:
  uint64_t v24 = add2StringV2((uint64_t *)a1, v19, v20);
  if ((v24 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v21, v22, v23, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v24;
}

uint64_t tokenizer_CheckIsExactToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return tokenizer_CheckToken(a1, a2, 1, a4, a5, a6, a7, a8);
}

uint64_t tokenizer_CheckIsToken(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return tokenizer_CheckToken(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t tokenizer_CheckEqualTo(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v25 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_EQUALTO( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 328) + 40));
  }
  int v24 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v24, a3, a4, a5, a6, a7, a8))
  {
    BOOL v15 = (__int16)v24 == -1 && HIWORD(v24) == 0xFFFF;
    if (v15)
    {
      if (*(_DWORD *)(a1 + 548) == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v23);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 328) + 8);
      uint64_t v16 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v24, &v25, v10, v11, v12, v13, v14)) {
        *a2 = 0;
      }
      getValFromArgString(a1, (_WORD *)&v25 + 1);
      BOOL v15 = (unsigned __int16)v25 == HIWORD(v25);
      *a2 = v15;
      if (v15) {
        uint64_t v16 = "TRUE";
      }
      else {
        uint64_t v16 = "FALSE";
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 328) + 8);
    }
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 328) + 8);
    uint64_t v16 = "FALSE";
  }
  uint64_t v21 = add2StringV2((uint64_t *)a1, v17, v16);
  if ((v21 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v18, v19, v20, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v21;
}

uint64_t tokenizer_CheckAND(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_AND( %s) = ", a6, a7, a8, **(void **)(a1 + 328));
  }
  *a2 = 0;
  if (parseIntoBinaryArgs(a1, __s1, v17) && !cstdlib_strcmp(__s1, "TRUE"))
  {
    uint64_t v10 = "TRUE";
    int v16 = cstdlib_strcmp(v17, "TRUE");
    *a2 = v16 == 0;
    if (!v16) {
      goto LABEL_7;
    }
  }
  else
  {
    *a2 = 0;
  }
  uint64_t v10 = "FALSE";
LABEL_7:
  uint64_t v14 = add2StringV2((uint64_t *)a1, *(void *)(*(void *)(a1 + 328) + 8), v10);
  if ((v14 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v11, v12, v13, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v14;
}

uint64_t getValFromSentence(uint64_t a1, __int16 *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  int v10 = (unsigned __int16)a2[1];
  if (v9 == -1 && v10 == 0xFFFF)
  {
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v20 = *(void *)(a1 + 184);
    uint64_t v21 = 24005;
    uint64_t v22 = 0;
  }
  else
  {
    size_t v13 = (unsigned __int16)(v10 - v9);
    cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(void *)(a1 + 304) + v9), v13);
    *(unsigned char *)(*(void *)(a1 + 552) + v13) = 0;
    uint64_t v14 = *(unsigned __int8 **)(a1 + 552);
    if (v10 == (unsigned __int16)v9)
    {
LABEL_12:
      *a3 = cstdlib_atoi(v14);
      return 1;
    }
    uint64_t v15 = 0;
    while (1)
    {
      int v16 = v14[v15];
      if (v16 != 32 && (v16 - 48) >= 0xA) {
        break;
      }
      if (v13 == ++v15) {
        goto LABEL_12;
      }
    }
    uint64_t v20 = *(void *)(a1 + 184);
    uint64_t v23 = "string";
    uint64_t v22 = "%s%s";
    uint64_t v19 = *(void *)(*(void *)a1 + 32);
    uint64_t v21 = 24006;
  }
  log_OutPublic(v19, v20, v21, (uint64_t)v22, a5, a6, a7, a8, v23);
  return 0;
}

uint64_t getValFromArgString(uint64_t a1, _WORD *a2)
{
  unsigned __int16 v8 = cstdlib_strlen(**(const char ***)(a1 + 328));
  uint64_t v9 = **(unsigned __int8 ***)(a1 + 328);
  if (v8)
  {
    int v10 = 0;
    while (1)
    {
      int v11 = v9[v10];
      if (v11 != 32 && (v11 - 48) >= 0xA) {
        break;
      }
      if (++v10 >= v8) {
        goto LABEL_8;
      }
    }
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24006, (uint64_t)"%s%s", v4, v5, v6, v7, "string");
    return 0;
  }
  else
  {
LABEL_8:
    *a2 = cstdlib_atoi(v9);
    return 1;
  }
}

uint64_t parseIntoBinaryArgs(uint64_t a1, char *a2, char *a3)
{
  unsigned __int16 v6 = cstdlib_strlen(**(const char ***)(a1 + 328));
  unsigned __int16 v11 = v6;
  unsigned int v12 = v6;
  if (!v6) {
    goto LABEL_8;
  }
  unsigned int v13 = 0;
  while (*(unsigned char *)(**(void **)(a1 + 328) + v13) != 32)
  {
    unsigned __int16 v14 = v13 + 1;
    unsigned int v13 = (unsigned __int16)(v13 + 1);
    if (v6 <= v14)
    {
      unsigned __int16 v15 = v6;
      goto LABEL_7;
    }
  }
  unsigned __int16 v15 = v13;
LABEL_7:
  if (v6 != v13)
  {
    cstdlib_strncpy(a2, **(const char ***)(a1 + 328), v15);
    a2[v15] = 0;
    if ((unsigned __int16)(v15 + 1) <= v12) {
      unsigned __int16 v20 = v12;
    }
    else {
      unsigned __int16 v20 = v15 + 1;
    }
    while (++v15 < v11)
    {
      unsigned __int16 v21 = v15;
      if (*(unsigned char *)(**(void **)(a1 + 328) + v15) != 32) {
        goto LABEL_16;
      }
    }
    unsigned __int16 v21 = v20;
LABEL_16:
    if (v12 != v15)
    {
      int v22 = v21;
      if (v12 > v21)
      {
        uint64_t v23 = **(void **)(a1 + 328);
        if (*(unsigned char *)(v23 + v21) != 32)
        {
          unsigned __int16 v24 = v21;
          do
            int v22 = ++v24;
          while (v12 > v24 && *(unsigned char *)(v23 + v24) != 32);
        }
      }
      if (v12 == v22)
      {
        cstdlib_strncpy(a3, (const char *)(**(void **)(a1 + 328) + v21), (int)(v12 - v15));
        a3[v12 - v15] = 0;
        return 1;
      }
    }
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24008, (uint64_t)"%s%s", v16, v17, v18, v19, "string");
  }
  else
  {
LABEL_8:
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24007, (uint64_t)"%s%s", v7, v8, v9, v10, "string");
  }
  return 0;
}

uint64_t validateMatchAndGetKey(uint64_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1[41];
  uint64_t v9 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    uint64_t v10 = *(void *)(v8 + 24);
    if (v9 > *(unsigned __int8 *)(v10 + 82))
    {
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24008, (uint64_t)"%s%d", a5, a6, a7, a8, "index");
      return 0;
    }
    uint64_t v12 = v10 + 42;
    *a2 = *(_WORD *)(v12 + 4 * (v9 - 1));
    a2[1] = *(_WORD *)(v12 + 4 * v9 - 2);
  }
  else
  {
    *(_DWORD *)a2 = **(_DWORD **)(v8 + 16);
  }
  return 1;
}

uint64_t tokenizer_CheckOR(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_OR( %s) = ", a6, a7, a8, **(void **)(a1 + 328));
  }
  *a2 = 0;
  if (parseIntoBinaryArgs(a1, __s1, v17))
  {
    if (!cstdlib_strcmp(__s1, "TRUE"))
    {
      *a2 = 1;
      uint64_t v10 = "TRUE";
      goto LABEL_10;
    }
    uint64_t v10 = "TRUE";
    int v11 = cstdlib_strcmp(v17, "TRUE");
    *a2 = v11 == 0;
    if (!v11) {
      goto LABEL_10;
    }
  }
  else
  {
    *a2 = 0;
  }
  uint64_t v10 = "FALSE";
LABEL_10:
  uint64_t v15 = add2StringV2((uint64_t *)a1, *(void *)(*(void *)(a1 + 328) + 8), v10);
  if ((v15 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v12, v13, v14, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v15;
}

uint64_t resolveTokensUsingPriorityList(unsigned __int16 *a1, uint64_t a2)
{
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  uint64_t DomainDefBlockInfo = resetSolutionList(a2, *(unsigned __int16 *)(a2 + 386));
  if ((DomainDefBlockInfo & 0x80000000) == 0)
  {
    if (*(_WORD *)(a2 + 386))
    {
      unint64_t v10 = 0;
      unsigned int v11 = 0;
      uint64_t v12 = 4;
      do
      {
        uint64_t DomainDefBlockInfo = FEData_blockData_newGetDomainDefBlockInfo((void *)a2, *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 376) + 8 * v10) + 104), &v42, v4, v5, v6, v7, v8);
        if ((DomainDefBlockInfo & 0x80000000) != 0) {
          return DomainDefBlockInfo;
        }
        unsigned int v13 = *(_DWORD *)(v42 + 8);
        *(_DWORD *)(*(void *)(a2 + 360) + v12) = v13;
        if (v13 > v11) {
          unsigned int v11 = v13;
        }
        ++v10;
        unint64_t v14 = *(unsigned __int16 *)(a2 + 386);
        v12 += 12;
      }
      while (v10 < v14);
      if (!*(_WORD *)(a2 + 386)) {
        goto LABEL_35;
      }
      uint64_t v15 = 0;
      __int16 v16 = 0;
      uint64_t v17 = (int *)(*(void *)(a2 + 360) + 4);
      unsigned __int16 v18 = 999;
      do
      {
        int v19 = *v17;
        v17 += 3;
        if (v19 == v11)
        {
          ++v16;
          unsigned __int16 v18 = v15;
        }
        ++v15;
      }
      while (v14 != v15);
      if (v16 == 1)
      {
        *a1 = v18;
        log_OutText(*(void *)(*(void *)a2 + 32), *(void *)(a2 + 184), 5, 0, (uint64_t)"priority list resolution by domain type : match %d", v6, v7, v8, v18);
        return 0;
      }
      uint64_t v41 = a1;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      int v22 = 0;
      uint64_t v23 = 999;
      do
      {
        *(_WORD *)(*(void *)(a2 + 360) + 12 * v20) = 999;
        uint64_t v24 = *(void *)(*(void *)(a2 + 376) + 8 * v20);
        FEData_blockData_newGetDomainEntry((void *)a2, *(unsigned __int16 *)(v24 + 104), *(unsigned __int16 *)(v24 + 106), &v44, v5, v6, v7, v8);
        if (*(_DWORD *)(v44 + 8) == 1)
        {
          FEData_blockData_newGetPriorityList((void *)a2, *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 376) + 8 * v20) + 104), *(unsigned __int16 *)(v44 + 12), &v43, v5, v6, v7, v8);
          if (!v43 || v43 == v22)
          {
            int v22 = v43;
          }
          else
          {
            log_OutText(*(void *)(*(void *)a2 + 32), *(void *)(a2 + 184), 5, 0, (uint64_t)"using priority list from match %d, to resolve", v6, v7, v8, v21);
            int v22 = v43;
            if (*(_WORD *)(a2 + 386))
            {
              unint64_t v25 = 0;
              uint64_t v26 = 0;
              unsigned int v27 = v43[4];
              do
              {
                if (v43[4])
                {
                  uint64_t v28 = 0;
                  uint64_t v29 = *(void *)(*(void *)(*(void *)(a2 + 376) + 8 * v25) + 88);
                  int v30 = (unsigned __int16 *)(*(void *)v43 + 4);
                  while (*(unsigned __int16 *)(v29 + 2) != *(v30 - 1) || *(unsigned __int16 *)(v29 + 4) != *v30)
                  {
                    v30 += 6;
                    if (v43[4] == ++v28) {
                      goto LABEL_29;
                    }
                  }
                  log_OutText(*(void *)(*(void *)a2 + 32), *(void *)(a2 + 184), 5, 0, (uint64_t)"token [%d] priority = %d", v6, v7, v8, v26);
                  if (v27 > (unsigned __int16)v28)
                  {
                    unsigned int v27 = (unsigned __int16)v28;
                    uint64_t v23 = (unsigned __int16)v25;
                    *(_WORD *)(*(void *)(a2 + 360) + 12 * v20) = v25;
                  }
                }
LABEL_29:
                uint64_t v26 = ++v25;
              }
              while (v25 < *(unsigned __int16 *)(a2 + 386));
              int v22 = v43;
            }
          }
        }
        ++v20;
        unint64_t v31 = *(unsigned __int16 *)(a2 + 386);
        uint64_t v21 = v20;
      }
      while (v20 < v31);
      if (v23 == 999)
      {
        a1 = v41;
        goto LABEL_35;
      }
      if (*(_WORD *)(a2 + 386))
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = 0;
        do
        {
          int v36 = *(unsigned __int16 *)(*(void *)(a2 + 360) + v33);
          if (v36 != 999 && v36 != v23)
          {
            log_OutText(*(void *)(*(void *)a2 + 32), *(void *)(a2 + 184), 5, 0, (uint64_t)"priority lists conflict in resolution : solution %d and %d", v6, v7, v8, *(unsigned __int16 *)(*(void *)(a2 + 360) + v33));
            LOWORD(v31) = *(_WORD *)(a2 + 386);
            int v35 = 1;
          }
          ++v34;
          v33 += 12;
        }
        while (v34 < (unsigned __int16)v31);
        *uint64_t v41 = v23;
        if (v35 == 1)
        {
          uint64_t v38 = *(void *)(*(void *)a2 + 32);
          uint64_t v39 = *(void *)(a2 + 184);
          uint64_t v40 = "priority list resolution : conflict found, so choosing match %d";
LABEL_49:
          log_OutText(v38, v39, 5, 0, (uint64_t)v40, v6, v7, v8, v23);
          return DomainDefBlockInfo;
        }
      }
      else
      {
        *uint64_t v41 = v23;
      }
      uint64_t v38 = *(void *)(*(void *)a2 + 32);
      uint64_t v39 = *(void *)(a2 + 184);
      uint64_t v40 = "priority list resolution : match %d";
      goto LABEL_49;
    }
LABEL_35:
    *a1 = 0;
    log_OutText(*(void *)(*(void *)a2 + 32), *(void *)(a2 + 184), 5, 0, (uint64_t)"no priority list resolution : return default match %d", v6, v7, v8, 0);
  }
  return DomainDefBlockInfo;
}

uint64_t tokenizer_ResolveMatches(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v44 = 0;
  int v43 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unsigned __int16 v39 = 0;
  if (!a1) {
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 304))
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24049, 0, a5, a6, a7, a8, v38);
LABEL_28:
    return TOKENTNERROR(7);
  }
  if (*(_DWORD *)(a1 + 548) == 1
    && FERuntimeData_GetNumMatches((void *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    FERuntimeData_DumpMatches(a1, (uint64_t)"Dump at start of ResolveMatches", 0, a4, a5, a6, a7, a8);
  }
  int v42 = 0;
  if (*(_WORD *)(a1 + 312))
  {
    int v9 = 0;
    unsigned __int16 v10 = 0;
    uint64_t matched = 0;
    while (1)
    {
      FERuntimeData_GetKeyAtPos(a1, v10, &v43, &v41);
      a2 = v43;
      if (v43 && v9 == (__int16)*v43)
      {
        FERuntimeData_FindLongestMatch(a1, v43, &v44);
        LOWORD(v42) = *v43;
        HIWORD(v42) = v44;
        FERuntimeData_DeleteSubsumedkeys(a1, v43, v44);
        uint64_t AllMatchesAtKey = FERuntimeData_GetAllMatchesAtKey(a1, (unsigned __int16 *)&v42);
        if ((AllMatchesAtKey & 0x80000000) != 0) {
          return AllMatchesAtKey;
        }
        uint64_t v16 = *(unsigned __int16 *)(a1 + 386);
        if (v16 >= 2)
        {
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"applying token priority lists to resolve %d token clashes at position %d,%d", v13, v14, v15, v16);
          if (*(_DWORD *)(a1 + 548) == 1 && *(_WORD *)(a1 + 386))
          {
            unint64_t v22 = 0;
            do
            {
              FEData_blockData_getTokenData((void *)a1, *(void *)(*(void *)(*(void *)(a1 + 376) + 8 * v22) + 88), &v40, v17, v18, v19, v20, v21);
              log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"[%d] = token %s", v23, v24, v25, v22++);
            }
            while (v22 < *(unsigned __int16 *)(a1 + 386));
          }
          uint64_t AllMatchesAtKey = resolveTokensUsingPriorityList(&v39, a1);
          if ((AllMatchesAtKey & 0x80000000) != 0) {
            return AllMatchesAtKey;
          }
          unsigned __int16 v29 = *(_WORD *)(a1 + 386);
          if (v29)
          {
            unint64_t v30 = 0;
            uint64_t v31 = v39;
            do
            {
              if (v31 != v30)
              {
                log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"deleting match %d", v26, v27, v28, v30);
                FERuntimeData_DeleteMatch(a1, (unsigned __int16 *)&v42, *(void *)(*(void *)(a1 + 376) + 8 * v30));
                unsigned __int16 v29 = *(_WORD *)(a1 + 386);
              }
              ++v30;
            }
            while (v30 < v29);
          }
        }
        uint64_t matched = resetMatchList(a1, 0);
        if ((matched & 0x80000000) != 0) {
          return matched;
        }
        unsigned __int16 v10 = v44;
      }
      else
      {
        ++v10;
      }
      int v43 = 0;
      int v9 = v10;
      if (v10 >= *(unsigned __int16 *)(a1 + 312)) {
        goto LABEL_32;
      }
    }
  }
  uint64_t matched = 0;
LABEL_32:
  if (*(_DWORD *)(a1 + 548) == 1)
  {
    if (FERuntimeData_GetNumMatches((void *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8)) {
      FERuntimeData_DumpMatches(a1, (uint64_t)"Dump at end of ResolveMatches", 0, v33, v34, v35, v36, v37);
    }
  }
  return matched;
}

uint64_t addBTokMatchToList(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(unsigned __int16 *)(a1 + 634);
  if (*(_WORD *)(a1 + 634))
  {
    uint64_t v5 = *(void *)(a1 + 624);
    if (v4 != *(unsigned __int16 *)(a1 + 632))
    {
LABEL_8:
      uint64_t v13 = *(unsigned __int16 *)(a1 + 634);
      *(_DWORD *)(v5 + 4 * v13) = *a2;
      *(_WORD *)(a1 + 634) = v13 + 1;
      return 0;
    }
    uint64_t v6 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), v5, 4 * v4 + 128);
    if (*(void *)(a1 + 624))
    {
      uint64_t v5 = v6;
      *(void *)(a1 + 624) = v6;
      __int16 v11 = *(_WORD *)(a1 + 632) + 32;
LABEL_7:
      *(_WORD *)(a1 + 632) = v11;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = heap_Calloc(*(void **)(*(void *)a1 + 8), 1, 128);
    *(void *)(a1 + 624) = v12;
    if (v12)
    {
      uint64_t v5 = v12;
      __int16 v11 = 32;
      goto LABEL_7;
    }
  }
  log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24048, 0, v7, v8, v9, v10, v15);

  return TOKENTNERROR(10);
}

uint64_t tokenizer_apply_regex_LongestMatch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v10 = *(unsigned __int16 *)(a2 + 44);
  while (!*(_DWORD *)(*(void *)(a2 + 8) + 48))
  {
    unsigned int v11 = nuance_pcre_exec2((void *)a1[17], a1[18], *(void *)(a2 + 32), *(int **)a2, (char *)a1[38], *(unsigned __int16 *)(a2 + 42), v10, *(unsigned __int16 *)(a2 + 64), v27, 100, (uint64_t)CALLOUTCHECK);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v12 = nuance_pcre_ErrorToLhError(v11);
      uint64_t v14 = v12;
      if (v12 >> 20 != 2213) {
        goto LABEL_9;
      }
      if ((v12 & 0x1FFF) != 0x14)
      {
        if ((v12 & 0x1FFF) == 0xA) {
          log_OutPublic(*(void *)(*a1 + 32), a1[23], 11002, (uint64_t)"%s%x%s%s", v13, a6, a7, a8, "lhError");
        }
        else {
          log_OutPublic(*(void *)(*a1 + 32), a1[23], 11027, (uint64_t)"%s%x%s%s", v13, a6, a7, a8, "lhError");
        }
        return v14;
      }
      break;
    }
  }
  uint64_t v14 = 0;
LABEL_9:
  uint64_t v15 = *(void *)(a2 + 8);
  if ((*(_DWORD *)(v15 + 48) & 0x80000000) != 0) {
    return *(unsigned int *)(v15 + 48);
  }
  uint64_t v16 = *(__int16 **)(v15 + 8);
  if (*v16 || v16[1])
  {
    int v26 = 1;
    if (*(_DWORD *)(v15 + 44) == 1)
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s already validated", a6, a7, a8, *(void *)(a2 + 24));
      int v26 = 1;
    }
    else
    {
      uint64_t v14 = validateCurrentMatch((uint64_t)a1, *(void *)v15, v16, a1[38], *(void *)(v15 + 24), *(void *)(a2 + 48), &v26, a8);
      if ((v14 & 0x80000000) != 0) {
        return v14;
      }
      if (v26 != 1)
      {
        *(_WORD *)(**(void **)(a2 + 8) + 40) = 0;
        log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"token %s invalidated.", v19, v20, v21, *(void *)(a2 + 24));
        return v14;
      }
    }
    uint64_t v22 = *(void *)(a2 + 8);
    uint64_t v23 = *(void **)v22;
    v23[11] = *(void *)(a2 + 48);
    uint64_t v14 = FERuntimeData_AddMatch(a1, *(void **)(v22 + 8), v23, v17, v18, v19, v20, v21);
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v24 = *(_DWORD ***)(a2 + 8);
      if (*(_DWORD *)(*((void *)*v24 + 11) + 8) == 1) {
        return addBTokMatchToList((uint64_t)a1, v24[1]);
      }
    }
  }
  return v14;
}

uint64_t CALLOUTCHECK(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(uint64_t **)(a1 + 48);
  if ((v8[6] & 0x80000000) == 0)
  {
    uint64_t v10 = *v8;
    unsigned int v11 = (__int16 *)v8[1];
    if (*((_WORD *)v8 + 20))
    {
      uint64_t v12 = *((unsigned __int16 *)v8 + 20) + 1;
      *(_DWORD *)(a1 + 36) = v12;
    }
    else
    {
      uint64_t v12 = *(unsigned int *)(a1 + 36);
    }
    log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT top=%d: (numsubmatches=%d) (match=%d,%d) token=%s", a6, a7, a8, v12);
    if (!v11[1] && !*v11) {
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 28) < v11[1])
    {
      log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT Match invalidated as start position %d is <= key \"to\" position %d", v13, v14, v15, *(unsigned int *)(a1 + 28));
      return 1;
    }
    uint64_t v16 = *(void *)(*v8 + 88);
    LODWORD(__src[0]) = 0;
    log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT non-overlapping longestMatch found...validating...", v13, v14, v15, v63);
    int v18 = validateCurrentMatch(v8[4], *v8, (__int16 *)v8[1], v8[2], v8[3], v16, __src, v17);
    if (v18 < 0)
    {
LABEL_34:
      *((_DWORD *)v8 + 12) = v18;
      return 1;
    }
    uint64_t v24 = (uint64_t *)v8[4];
    if (LODWORD(__src[0]) == 1)
    {
      int v18 = FERuntimeData_AddMatch(v24, (void *)v8[1], (const void *)*v8, v19, v20, v21, v22, v23);
      if (v18 < 0) {
        goto LABEL_34;
      }
    }
    else
    {
      log_OutText(*(void *)(*v24 + 32), v24[23], 6, 0, (uint64_t)"CALLOUT token invalidated", v21, v22, v23, v64);
    }
    *(_DWORD *)v8[1] = 0;
    *((_DWORD *)v8 + 11) = 0;
    *(_WORD *)(*v8 + 40) = 0;
    int v25 = v11[1];
    int v26 = *v11;
    if (!(v25 | v26) || v25 - v26 < *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 28))
    {
LABEL_16:
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      memset(__src, 0, sizeof(__src));
      int v66 = 1;
      log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - Longest Match Found %d,%d (num submatches=%d)...validating...", v13, v14, v15, *(unsigned int *)(a1 + 28));
      int v32 = *(_DWORD *)(a1 + 28);
      int v33 = *(_DWORD *)(a1 + 32);
      v67[0] = v32;
      v67[1] = v33;
      if (*((__int16 *)v8 + 26) > (__int16)v32 || *((__int16 *)v8 + 27) < (__int16)v33)
      {
        uint64_t v34 = (void *)v8[4];
        uint64_t v35 = *(void *)(*v34 + 32);
        uint64_t v36 = v34[23];
        uint64_t v37 = "CALLOUT - this match is out of domain...";
LABEL_19:
        log_OutText(v35, v36, 6, 0, (uint64_t)v37, v29, v30, v31, v65);
        return 1;
      }
      uint64_t v38 = v8[4];
      if (*(_DWORD *)(v38 + 960) == 1
        && blockedByBtok(v38, (__int16)v32, (__int16)v33, v27, v28, v29, v30, v31) == 1)
      {
        unsigned __int16 v39 = (void *)v8[4];
        uint64_t v35 = *(void *)(*v39 + 32);
        uint64_t v36 = v39[23];
        uint64_t v37 = "CALLOUT - blocked by prior btok...";
        goto LABEL_19;
      }
      int v40 = *(_DWORD *)(a1 + 36);
      char v41 = v40 - 1;
      uint64_t v42 = *v8;
      uint64_t v43 = *(void *)(*v8 + 88);
      *((void *)&v72 + 1) = v43;
      DWORD2(v73) = *(_DWORD *)(v42 + 104);
      BYTE2(v72) = v40 - 1;
      WORD4(v69) = 0;
      if ((_BYTE)v40 != 1 && v40 >= 2)
      {
        int v44 = 0;
        int v45 = 2 * v40;
        uint64_t v46 = *(void *)(a1 + 8);
        int v47 = 2;
        int v48 = 2;
        do
        {
          unint64_t v49 = (char *)__src + 4 * (unsigned __int16)v44;
          *((_WORD *)v49 + 21) = *(_DWORD *)(v46 + 4 * (unsigned __int16)v48);
          *((_WORD *)v49 + 22) = *(_DWORD *)(v46 + 4 * (v47 | 1u));
          ++v44;
          v48 += 2;
          int v47 = (unsigned __int16)v48;
        }
        while (v45 > (unsigned __int16)v48);
      }
      int v18 = validateCurrentMatch(v8[4], (uint64_t)__src, v67, v8[2], v8[3], v43, &v66, v31);
      if (v18 < 0) {
        goto LABEL_34;
      }
      int v53 = v66;
      if (v66 == 1)
      {
        *(_WORD *)(v10 + 40) = WORD4(v69);
        cstdlib_memcpy((void *)v10, __src, 0x28uLL);
        int v53 = v66;
      }
      if (!v53 && WORD4(v69))
      {
        WORD4(v69) = 0;
LABEL_42:
        log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - INVALIDATING this longest match...", v50, v51, v52, v65);
        *(_DWORD *)v8[1] = 0;
        *((_DWORD *)v8 + 11) = 0;
        *(_WORD *)(*v8 + 40) = 0;
        return 1;
      }
      if (!v53) {
        goto LABEL_42;
      }
      log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - VALIDATING longest match. saving...", v50, v51, v52, v65);
      *unsigned int v11 = *(_DWORD *)(a1 + 28);
      v11[1] = *(_DWORD *)(a1 + 32);
      *((_DWORD *)v8 + 11) = 1;
      if (v41)
      {
        *(unsigned char *)(v10 + 82) = v41;
        if (*(int *)(a1 + 36) >= 2)
        {
          int v58 = 0;
          int v59 = 2;
          int v60 = 2;
          do
          {
            uint64_t v61 = *(void *)(a1 + 8);
            uint64_t v62 = v10 + 4 * (unsigned __int16)v58;
            *(_WORD *)(v62 + 42) = *(_DWORD *)(v61 + 4 * (unsigned __int16)v60);
            *(_WORD *)(v62 + 44) = *(_DWORD *)(v61 + 4 * (v59 | 1u));
            log_OutText(*(void *)(*(void *)v8[4] + 32), *(void *)(v8[4] + 184), 6, 0, (uint64_t)"CALLOUT - setting longest match submatch[%d] = %d,%d", v55, v56, v57, (unsigned __int16)v58++);
            v60 += 2;
            int v59 = (unsigned __int16)v60;
          }
          while ((unsigned __int16)v60 < 2 * *(_DWORD *)(a1 + 36));
        }
      }
    }
  }
  return 1;
}

uint64_t tokenizer_CheckGreaterThan(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v26 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_GREATERTHAN( %d, %s) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 328) + 40));
  }
  int v25 = 0;
  *a2 = 0;
  if (validateMatchAndGetKey((uint64_t *)a1, &v25, a3, a4, a5, a6, a7, a8))
  {
    if ((__int16)v25 == -1 && HIWORD(v25) == 0xFFFF)
    {
      if (*(_DWORD *)(a1 + 548) == 1) {
        log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"NULL SUBMATCH", v12, v13, v14, v24);
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
      uint64_t v17 = "TRUE";
    }
    else
    {
      if (!getValFromSentence(a1, (__int16 *)&v25, &v26, v10, v11, v12, v13, v14)) {
        *a2 = 0;
      }
      getValFromArgString(a1, (_WORD *)&v26 + 1);
      BOOL v16 = (unsigned __int16)v26 > HIWORD(v26);
      *a2 = v16;
      if (v16) {
        uint64_t v17 = "TRUE";
      }
      else {
        uint64_t v17 = "FALSE";
      }
      uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
    }
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 328) + 8);
    uint64_t v17 = "FALSE";
  }
  uint64_t v22 = add2StringV2((uint64_t *)a1, v18, v17);
  if ((v22 & 0x80000000) == 0 && *(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v19, v20, v21, **(void **)(*(void *)(a1 + 328) + 8));
  }
  return v22;
}

uint64_t tokenizer_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen Begin", a6, a7, a8, v47);
  uint64_t v9 = heap_Calloc(*(void **)(*a1 + 8), 1, 8);
  if (v9)
  {
    uint64_t v14 = v9;
    a1[21] = v9;
    uint64_t v15 = heap_Calloc(*(void **)(*a1 + 8), 1, 80);
    *(void *)uint64_t v14 = v15;
    uint64_t v20 = *a1;
    if (v15)
    {
      uint64_t v21 = heap_Calloc(*(void **)(v20 + 8), 1, 40);
      **(void **)uint64_t v14 = v21;
      uint64_t v20 = *a1;
      if (v21)
      {
        uint64_t v22 = heap_Calloc(*(void **)(v20 + 8), 1, 56);
        *(void *)(*(void *)v14 + 8) = v22;
        uint64_t v20 = *a1;
        if (v22)
        {
          uint64_t v23 = (_DWORD *)heap_Calloc(*(void **)(v20 + 8), 1, 4);
          *(void *)(*(void *)(*(void *)v14 + 8) + 8) = v23;
          if (v23)
          {
            *uint64_t v23 = 0;
            uint64_t v24 = heap_Calloc(*(void **)(*a1 + 8), 1, 112);
            int v25 = *(void ***)v14;
            uint64_t v26 = *(void *)(*(void *)v14 + 8);
            *(void *)uint64_t v26 = v24;
            if (v24)
            {
              *(void *)(v24 + 88) = 0;
              *(_WORD *)(v26 + 40) = 0;
              *(_DWORD *)(v26 + 48) = 0;
              *(void *)(v26 + 16) = 0;
              *(void *)(v26 + 24) = 0;
              uint64_t v27 = *v25;
              *v27 |= 4uLL;
              v27[3] = v26;
              uint64_t v50 = 0;
              log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : InitCheckFunctions Begin", v17, v18, v19, v48);
              uint64_t Map = FEFunctionMap_GetMap(a1, &v50);
              if ((Map & 0x80000000) != 0)
              {
                uint64_t v38 = Map;
              }
              else
              {
                for (uint64_t i = 0; i != 128; i += 16)
                {
                  uint64_t v30 = ssftmap_Insert(v50, *(uint64_t *)((char *)&off_26D210ED8 + i), *(uint64_t *)((char *)&off_26D210ED8 + i + 8));
                  if ((v30 & 0x80000000) != 0)
                  {
                    uint64_t v38 = v30;
                    log_OutPublic(*(void *)(*a1 + 32), a1[23], 21011, 0, v31, v32, v33, v34, v49);
                    goto LABEL_22;
                  }
                }
                uint64_t v38 = FEFunctionMap_AddFunctionMap((uint64_t)a1, 0, v50);
                if ((v38 & 0x80000000) == 0) {
                  goto LABEL_23;
                }
              }
LABEL_22:
              ssftmap_ObjClose(v50);
LABEL_23:
              log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : InitCheckFunctions End (%x)", v35, v36, v37, v38);
              if ((v38 & 0x80000000) == 0) {
                goto LABEL_19;
              }
              goto LABEL_18;
            }
          }
          uint64_t v20 = *a1;
        }
      }
    }
    log_OutPublic(*(void *)(v20 + 32), a1[23], 24048, 0, v16, v17, v18, v19, v48);
    uint64_t v38 = TOKENTNERROR(10);
    if ((v38 & 0x80000000) == 0)
    {
LABEL_19:
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen End (%x)", v44, v45, v46, v38);
      return v38;
    }
LABEL_18:
    tokenizer_loc_ObjClose_0(a1, v40, v41, v42, v43, v44, v45, v46);
    goto LABEL_19;
  }
  log_OutPublic(*(void *)(*a1 + 32), a1[23], 24048, 0, v10, v11, v12, v13, v48);

  return TOKENTNERROR(10);
}

uint64_t tokenizer_loc_ObjClose_0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1[21];
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : loc ObjClose Begin", a6, a7, a8, v16);
  uint64_t v10 = *(uint64_t **)v9;
  if (*(void *)v9)
  {
    uint64_t v11 = (uint64_t *)v10[1];
    if (v11)
    {
      if (v11[1])
      {
        heap_Free(*(void **)(*a1 + 8), v11[1]);
        uint64_t v11 = *(uint64_t **)(*(void *)v9 + 8);
        v11[1] = 0;
      }
      if (*v11)
      {
        heap_Free(*(void **)(*a1 + 8), *v11);
        uint64_t v11 = *(uint64_t **)(*(void *)v9 + 8);
        *uint64_t v11 = 0;
      }
      heap_Free(*(void **)(*a1 + 8), (uint64_t)v11);
      uint64_t v10 = *(uint64_t **)v9;
      *(void *)(*(void *)v9 + 8) = 0;
    }
    if (*v10)
    {
      heap_Free(*(void **)(*a1 + 8), *v10);
      uint64_t v10 = *(uint64_t **)v9;
      **(void **)uint64_t v9 = 0;
    }
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v10);
    *(void *)uint64_t v9 = 0;
  }
  heap_Free(*(void **)(*a1 + 8), v9);
  a1[21] = 0;
  return log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : loc ObjClose End (%x)", v12, v13, v14, 0);
}

uint64_t tokenizer_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[21])
  {
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjClose Begin", a6, a7, a8, v20);
    tokenizer_loc_ObjClose_0(a1, v9, v10, v11, v12, v13, v14, v15);
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"tokenizer : ObjOpen End (%x)", v16, v17, v18, 0);
    return 0;
  }
  else
  {
    return TOKENTNERROR(8);
  }
}

uint64_t textnormalizer_DoDepes(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a5;
  unsigned __int16 v105 = 0;
  int v104 = 0;
  unsigned __int16 v103 = 0;
  *(void *)&__n[1] = 0;
  __n[0] = 0;
  uint64_t v101 = 0;
  *a5 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_%s(%s)", a6, a7, a8, a2);
  }
  uint64_t v14 = *(void *)(a1 + 320);
  if (!*(void *)v14 || (v15 = cstdlib_strcmp(*(const char **)v14, "NULL"), uint64_t v14 = *(void *)(a1 + 320), !v15))
  {
LABEL_15:
    uint64_t v34 = add2StringV2((uint64_t *)a1, *(void *)(v14 + 8), "");
    if ((v34 & 0x80000000) != 0) {
      return v34;
    }
    goto LABEL_102;
  }
  if (!cstdlib_strcmp(*(const char **)v14, ""))
  {
    uint64_t v14 = *(void *)(a1 + 320);
    goto LABEL_15;
  }
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"DEPES IN (%s)(running len=%d)", v16, v17, v18, **(void **)(a1 + 320));
  }
  unsigned __int16 v19 = cstdlib_strlen(**(const char ***)(a1 + 320));
  unsigned __int16 v20 = Utf8_LengthInUtf8chars(**(void **)(a1 + 320), v19);
  uint64_t v21 = (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 112) + 120))(*(void *)(a1 + 120), *(void *)(a1 + 128), 0, **(void **)(a1 + 320), v19);
  if ((v21 & 0x80000000) != 0)
  {
    uint64_t v34 = v21;
    uint64_t v35 = *(void *)(*(void *)a1 + 32);
    uint64_t v36 = *(void *)(a1 + 184);
    uint64_t v37 = 24010;
  }
  else
  {
    uint64_t v26 = growStrRes((uint64_t *)a1, a1 + 488, v19);
    if ((v26 & 0x80000000) != 0)
    {
      uint64_t v34 = v26;
      goto LABEL_102;
    }
    int v95 = a4;
    unsigned __int16 v96 = v20;
    unsigned int v94 = a3;
    uint64_t v30 = **(const char ***)(a1 + 320);
    uint64_t v31 = *(unsigned char **)(a1 + 488);
    if (v19) {
      bzero(*(void **)(a1 + 488), v19);
    }
    unsigned int v98 = v9;
    uint64_t v99 = a6;
    if (utf8_strchr(g_szSpace_2, v30))
    {
      unsigned int v32 = 0;
      int i = 0;
    }
    else
    {
      int i = 1;
      *uint64_t v31 = 1;
      unsigned int v32 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v30);
      unsigned int v38 = (unsigned __int16)v32;
      if ((unsigned __int16)v32 < v19)
      {
        unsigned __int16 v39 = &v30[(unsigned __int16)v32];
        for (int i = 1; !utf8_strchr(g_szSpace_2, v39); v39 = &v30[v38])
        {
          unsigned __int16 v40 = utf8_determineUTF8CharLength(*(unsigned __int8 *)v39);
          unsigned int v32 = v38 + v40;
          ++i;
          unsigned int v38 = (unsigned __int16)(v38 + v40);
          if (v38 >= v19) {
            break;
          }
        }
      }
    }
    if ((unsigned __int16)v32 < v19)
    {
      while (1)
      {
        uint64_t v41 = &v30[(unsigned __int16)v32];
        if (!utf8_strchr(g_szSpace_2, v41)) {
          break;
        }
        v32 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v41);
        ++i;
        unsigned int v42 = v32;
        if ((unsigned __int16)v32 >= v19)
        {
LABEL_30:
          unsigned int v43 = (unsigned __int16)v42;
          while (v43 < v19 && !utf8_strchr(g_szSpace_2, &v30[(unsigned __int16)v42]))
          {
            v42 += utf8_determineUTF8CharLength(v30[(unsigned __int16)v42]);
            unsigned int v43 = (unsigned __int16)v42;
            ++i;
          }
          unsigned int v32 = v42;
          if ((unsigned __int16)v42 >= v19) {
            goto LABEL_35;
          }
        }
      }
      v31[(unsigned __int16)i] = 1;
      unsigned int v42 = v32 + utf8_determineUTF8CharLength(*(unsigned __int8 *)v41);
      ++i;
      goto LABEL_30;
    }
LABEL_35:
    uint64_t v44 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 112) + 88))(*(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 488), v96);
    if ((v44 & 0x80000000) != 0)
    {
      uint64_t v34 = v44;
      log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24011, 0, v45, v46, v47, v48, v93);
      uint64_t v9 = v98;
      goto LABEL_102;
    }
    uint64_t v49 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 112) + 80))(*(void *)(a1 + 120), *(void *)(a1 + 128), a2 + 1);
    uint64_t v9 = v98;
    if ((v49 & 0x80000000) != 0)
    {
      uint64_t v34 = v49;
      log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24012, (uint64_t)"%s%s", v50, v51, v52, v53, "functionName");
      goto LABEL_102;
    }
    uint64_t v54 = (*(uint64_t (**)(void, void, unsigned char **, unsigned __int16 *))(*(void *)(a1 + 112) + 96))(*(void *)(a1 + 120), *(void *)(a1 + 128), &v101, &v105);
    if ((v54 & 0x80000000) != 0)
    {
      uint64_t v34 = v54;
      uint64_t v35 = *(void *)(*(void *)a1 + 32);
      uint64_t v36 = *(void *)(a1 + 184);
      uint64_t v37 = 24013;
    }
    else
    {
      uint64_t v55 = (*(uint64_t (**)(void, void, void, char **, unsigned __int16 *))(*(void *)(a1 + 112)
                                                                                           + 128))(*(void *)(a1 + 120), *(void *)(a1 + 128), 0, &v104, &v103);
      if ((v55 & 0x80000000) != 0)
      {
        uint64_t v34 = v55;
        uint64_t v35 = *(void *)(*(void *)a1 + 32);
        uint64_t v36 = *(void *)(a1 + 184);
        uint64_t v37 = 24014;
      }
      else
      {
        v104[v103] = 0;
        unsigned __int16 v59 = Utf8_LengthInUtf8chars((unint64_t)v104, v103);
        if (*(_DWORD *)(a1 + 548) == 1) {
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"DEPES Layer 0 OUT strsize(%d bytes, %d chars) -> (%s)", v56, v57, v58, v103);
        }
        uint64_t v60 = (*(uint64_t (**)(void, void, uint64_t, _WORD *, _WORD *))(*(void *)(a1 + 112) + 128))(*(void *)(a1 + 120), *(void *)(a1 + 128), 1, &__n[1], __n);
        if ((v60 & 0x80000000) == 0)
        {
          *(unsigned char *)(*(void *)&__n[1] + __n[0]) = 0;
          if (*(_DWORD *)(a1 + 548) == 1) {
            log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"DEPES layer 1 OUT strsize(%d bytes) -> (%s)", v23, v24, v25, __n[0]);
          }
          uint64_t v61 = (unsigned __int16)(__n[0] - v59);
          if (__n[0] < v59) {
            uint64_t v61 = 0;
          }
          if (__n[0] <= v103) {
            uint64_t v62 = v103;
          }
          else {
            uint64_t v62 = __n[0];
          }
          uint64_t v63 = (char *)heap_Alloc(*(void *)(*(void *)a1 + 8), v62 + v61 + 1);
          if (!v63) {
            return 2383421450;
          }
          uint64_t v64 = v63;
          cstdlib_strncpy(v63, *(const char **)&__n[1], __n[0]);
          v64[__n[0]] = 0;
          int v65 = v103;
          if (v103 != __n[0])
          {
            if (v103)
            {
              int v66 = 0;
              unsigned __int16 v67 = 0;
              do
              {
                unsigned __int16 v68 = utf8_determineUTF8CharLength(v104[v67]);
                if (v68 >= 2u)
                {
                  __n[0] = cstdlib_strlen(v64);
                  cstdlib_memmove(&v64[v68 + v66], &v64[v66 + 1], __n[0] - v66);
                  cstdlib_memset(&v64[v66 + 1], 126, v68 - 1);
                }
                v67 += v68;
                int v66 = v67;
              }
              while (v67 < v103);
            }
            __n[0] = cstdlib_strlen(v64);
            log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"(adjusted) DEPES layer 1 OUT strsize(%d bytes) -> (%s)", v69, v70, v71, __n[0]);
            int v65 = __n[0];
          }
          if (v65)
          {
            int v72 = 0;
            unsigned int v73 = 0;
            while (1)
            {
              unint64_t v74 = &v64[(unsigned __int16)v73];
              if (*v74 == 126) {
                *unint64_t v74 = 32;
              }
              if (utf8_strchr(g_szSpace_2, &v64[(unsigned __int16)v73])) {
                goto LABEL_62;
              }
              unsigned int v75 = *v74;
              if ((v75 | 2) != 0x4E) {
                break;
              }
LABEL_64:
              if ((v75 | 2) == 0x4E)
              {
                if ((_WORD)v73)
                {
                  unsigned int v76 = 0;
                  do
                  {
                    uint64_t v77 = (unsigned __int16)v76;
                    v76 += utf8_determineUTF8CharLength(v104[(unsigned __int16)v76]);
                  }
                  while ((unsigned __int16)v76 < (unsigned __int16)v73);
                  if (utf8_strchr(g_szSpace_2, &v104[v77])) {
                    goto LABEL_93;
                  }
                  if ((_WORD)v76)
                  {
                    while (1)
                    {
                      unint64_t v78 = utf8_strchr(g_szSpace_2, &v104[(unsigned __int16)v76]);
                      BOOL v79 = v78 == 0;
                      if (v78) {
                        break;
                      }
                      if ((_WORD)v76 != 1)
                      {
                        unsigned int v100 = (unsigned __int16)(v76 - 1);
                        utf8_GetPreviousValidUtf8Offset((uint64_t)v104, &v100);
                        unsigned int v76 = v100;
                        if ((_WORD)v100) {
                          continue;
                        }
                      }
                      unsigned int v76 = 0;
                      break;
                    }
                  }
                  else
                  {
                    unsigned int v76 = 0;
                    BOOL v79 = 1;
                  }
                  unsigned __int16 v81 = utf8_determineUTF8CharLength(v104[(unsigned __int16)v76]);
                  if (utf8_strchr(g_szSpace_2, &v104[(unsigned __int16)v76])
                    && (uint64_t v97 = v81 + (unint64_t)(unsigned __int16)v76, v97 < v103)
                    && !utf8_strchr(g_szSpace_2, &v104[(unsigned __int16)v76 + v81]))
                  {
                    if (utf8_strchr(g_szSpace_2, &v64[(unsigned __int16)v76 + v81]))
                    {
                      v64[v97] = *v74;
                      unsigned int v73 = v76;
                    }
                    else
                    {
                      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"DEPES language layer problem, trying to overwrite [%d] \"%c\" when aligning with [%d] \"%c\"; ignore",
                        v82,
                        v83,
                        v84,
                        v97);
                    }
                  }
                  else
                  {
                    if (!v79
                      || v81 >= v103
                      || utf8_strchr(g_szSpace_2, &v104[(unsigned __int16)v76 + v81]))
                    {
                      goto LABEL_93;
                    }
                    if (utf8_strchr(g_szSpace_2, &v64[(unsigned __int16)v76])) {
                      v64[(unsigned __int16)v76] = *v74;
                    }
                    else {
                      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"DEPES language layer problem, trying to overwrite [%d] \"%c\" when aligning with [%d] \"%c\"; ignore",
                    }
                        v85,
                        v86,
                        v87,
                        0);
                  }
                  *unint64_t v74 = 32;
                }
                else
                {
                  unsigned int v73 = 0;
                }
              }
LABEL_93:
              v73 += utf8_determineUTF8CharLength(v64[(unsigned __int16)v73]);
              int v72 = (unsigned __int16)v73;
              if ((unsigned __int16)v73 >= __n[0]) {
                goto LABEL_94;
              }
            }
            unsigned __int16 v80 = utf8_determineUTF8CharLength(v75);
            if (v80) {
              memset(&v64[v72], 32, v80);
            }
LABEL_62:
            unsigned int v75 = *v74;
            goto LABEL_64;
          }
LABEL_94:
          uint64_t v88 = add2StringV2((uint64_t *)a1, *(void *)(*(void *)(a1 + 320) + 8), v104);
          if ((v88 & 0x80000000) != 0)
          {
            uint64_t v34 = v88;
          }
          else
          {
            uint64_t v34 = add2StringV2((uint64_t *)a1, v99, v64);
            if ((v34 & 0x80000000) == 0)
            {
              uint64_t v9 = v98;
              if (v95 == 1)
              {
                LOWORD(v100) = v94;
                textnormalizer_markercountlayer_GetWordBegPos(v101, v105, v104, *(void *)(a1 + 520), &v100, *(unsigned __int16 *)(a1 + 544));
                if ((unsigned __int16)v100 > v94)
                {
                  uint64_t v89 = *(void *)(a1 + 320);
                  uint64_t v90 = (_WORD *)(*(void *)(a1 + 520) + 2 * v94);
                  unint64_t v91 = (unsigned __int16)v100 - (unint64_t)v94;
                  do
                  {
                    *v90++ += *(_WORD *)(v89 + 32);
                    --v91;
                  }
                  while (v91);
                }
              }
              heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v64);
              goto LABEL_102;
            }
          }
          heap_Free(*(void **)(*(void *)a1 + 8), (uint64_t)v64);
          return v34;
        }
        uint64_t v34 = v60;
        uint64_t v35 = *(void *)(*(void *)a1 + 32);
        uint64_t v36 = *(void *)(a1 + 184);
        uint64_t v37 = 24058;
      }
    }
  }
  log_OutPublic(v35, v36, v37, 0, v22, v23, v24, v25, v93);
LABEL_102:
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"TOKEN _%s_, MAP _%s_", v27, v28, v29, **(void **)(*(void *)(a1 + 320) + 8));
  }
  *uint64_t v9 = 1;
  return v34;
}

uint64_t textnormalizer_markercountlayer_GetWordBegPos(unsigned char *a1, int a2, const char *a3, uint64_t a4, _WORD *a5, unsigned int a6)
{
  LODWORD(v10) = a2;
  uint64_t result = TOK_COUNT_SP_WORDS(a3);
  if (v10)
  {
    unsigned int v13 = result;
    unsigned int v14 = 0;
    unsigned __int16 v15 = 0;
    uint64_t v10 = v10;
    do
    {
      uint64_t v16 = (unsigned __int16)*a5;
      if (v16 >= a6 || v14 >= v13) {
        break;
      }
      if (*a1)
      {
        *(_WORD *)(a4 + 2 * v16) = v15;
        ++*a5;
        ++v14;
      }
      uint64_t result = utf8_determineUTF8CharLength(a3[v15]);
      v15 += result;
      ++a1;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t blockedByBtok(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned __int16 *)(a1 + 634);
  if (!*(_WORD *)(a1 + 634)) {
    return 0;
  }
  for (int i = (__int16 *)(*(void *)(a1 + 624) + 2); ; i += 2)
  {
    int v10 = *(i - 1);
    if (v10 <= a2 && *i >= a3) {
      break;
    }
    if (v10 <= a3 && *i >= a3 || v10 <= a2 && *i >= a2) {
      break;
    }
    if (!--v8) {
      return 0;
    }
  }
  log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 4, 0, (uint64_t)"match %d,%d blocked by btok %d,%d", a6, a7, a8, a2);
  return 1;
}

uint64_t clearBTokMatchList(uint64_t a1)
{
  if (*(_WORD *)(a1 + 634))
  {
    heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(a1 + 624));
    *(_DWORD *)(a1 + 632) = 0;
  }
  return 0;
}

uint64_t textnormalizer_DoExpansionActions(uint64_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  __int16 v144 = 0;
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : DoExpansions Begin", a6, a7, a8, v136);
  if (!a1[38])
  {
    return TOKENTNERROR(7);
  }
  if (*((_DWORD *)a1 + 137) == 1) {
    dumpTokenRecordsInLingDB(a1, (uint64_t)"At Start of DoExpansions", 0, v9, v10, v11, v12, v13);
  }
  if (!*((_WORD *)a1 + 156))
  {
    uint64_t v17 = 0;
    goto LABEL_196;
  }
  int v14 = 0;
  LOWORD(v15) = 0;
  unsigned __int16 v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = (const char **)(a1 + 49);
  unsigned __int16 v19 = (const char **)(a1 + 51);
  unsigned int v143 = (char **)(a1 + 55);
  uint64_t v140 = a1 + 53;
  uint64_t v141 = (char **)(a1 + 57);
  while (1)
  {
    FERuntimeData_GetKeyAtPos((uint64_t)a1, v16, &v147, &v146);
    if (!v147 || v14 != (__int16)*v147)
    {
      ++v16;
      goto LABEL_181;
    }
    FEData_blockData_getTokenAndExpansionData(a1, *(void *)(v146 + 88), &v148, &v144, &v145, v11, v12, v13);
    int v20 = *v147;
    int v21 = (__int16)v147[1];
    if (v20 >= v21)
    {
      int v22 = *v147;
    }
    else
    {
      while (*(unsigned char *)(a1[38] + (unsigned __int16)v20) == 32)
      {
        int v22 = (unsigned __int16)++v20;
        if ((unsigned __int16)v20 >= v21) {
          goto LABEL_15;
        }
      }
      int v22 = (unsigned __int16)v20;
    }
LABEL_15:
    if (v22 >= v21)
    {
      unsigned __int16 v24 = 1;
    }
    else
    {
      uint64_t v23 = a1[38];
      unsigned __int16 v24 = 1;
      do
      {
        if (*(unsigned char *)(v23 + (unsigned __int16)v20) == 32)
        {
          ++v24;
          do
            int v25 = (unsigned __int16)++v20;
          while ((unsigned __int16)v20 < v21 && *(unsigned char *)(v23 + (unsigned __int16)v20) == 32);
        }
        else
        {
          int v25 = (unsigned __int16)++v20;
        }
      }
      while (v25 < v21);
    }
    resetAlignmentData((uint64_t)a1);
    uint64_t v27 = v147;
    int v28 = *v147;
    int v29 = (__int16)v147[1];
    if (v28 >= v29)
    {
      int v30 = *v147;
    }
    else
    {
      while (*(unsigned char *)(a1[38] + (unsigned __int16)v28) == 32)
      {
        int v30 = (unsigned __int16)++v28;
        if ((unsigned __int16)v28 >= v29) {
          goto LABEL_32;
        }
      }
      int v30 = (unsigned __int16)v28;
    }
LABEL_32:
    uint64_t v31 = a1[67];
    *(_WORD *)(v31 + 2 * *((unsigned __int16 *)a1 + 272)) = v28;
    unsigned __int16 v32 = *((_WORD *)a1 + 272) + 1;
    *((_WORD *)a1 + 272) = v32;
    int v33 = (__int16)v27[1];
    if (v30 < v33)
    {
      signed __int16 v34 = v27[1];
      uint64_t v35 = a1[38];
      do
      {
        if (*(unsigned char *)(v35 + (unsigned __int16)v28) == 32)
        {
          while (v33 > (unsigned __int16)v28 && *(unsigned char *)(v35 + (unsigned __int16)v28) == 32)
            ++v28;
          *(_WORD *)(v31 + 2 * v32) = v28;
          unsigned __int16 v32 = *((_WORD *)a1 + 272) + 1;
          *((_WORD *)a1 + 272) = v32;
          signed __int16 v34 = v27[1];
        }
        ++v28;
        int v33 = v34;
      }
      while (v34 > (int)(unsigned __int16)v28);
    }
    if (!v145)
    {
      uint64_t v47 = *(void *)(*a1 + 32);
      uint64_t v48 = a1[23];
      uint64_t v135 = 24015;
      goto LABEL_194;
    }
    if (*(_DWORD *)(*(void *)(v146 + 88) + 8) == 1)
    {
      uint64_t v36 = addBTokMatchToList((uint64_t)a1, v27);
      if ((v36 & 0x80000000) != 0) {
        goto LABEL_195;
      }
    }
    if (*((_DWORD *)a1 + 137) == 1)
    {
      cstdlib_strncpy((char *)a1[69], (const char *)(a1[38] + (__int16)*v147), (unsigned __int16)(v147[1] - *v147));
      *(unsigned char *)(a1[69] - (__int16)*v147 + (__int16)v147[1]) = 0;
      uint64_t v40 = *(void *)(*a1 + 32);
      uint64_t v41 = a1[23];
      if (*(_DWORD *)(*(void *)(v146 + 88) + 8) == 1) {
        log_OutText(v40, v41, 5, 0, (uint64_t)"DoExpansions : applying method %s with arg %s for btok %3d,%3d %-15s \"%s\" (%d input words)", v37, v38, v39, (uint64_t)v145[6]);
      }
      else {
        log_OutText(v40, v41, 5, 0, (uint64_t)"DoExpansions : applying expansion for token %3d,%3d %-15s \"%s\" (%d input words)", v37, v38, v39, (__int16)*v147);
      }
    }
    if (*((_WORD *)a1 + 272))
    {
      unint64_t v42 = 0;
      uint64_t v43 = a1[65];
      do
        *(_WORD *)(v43 + 2 * v42++) = 9999;
      while (v42 < *((unsigned __int16 *)a1 + 272));
    }
    *((_WORD *)a1 + 201) = 0;
    *(unsigned char *)a1[49] = 0;
    *((_WORD *)a1 + 209) = 0;
    *(unsigned char *)a1[51] = 0;
    *((_WORD *)a1 + 217) = 0;
    *(unsigned char *)a1[53] = 0;
    *((_WORD *)a1 + 225) = 0;
    *(unsigned char *)a1[55] = 0;
    *((_WORD *)a1 + 233) = 0;
    *(unsigned char *)a1[57] = 0;
    *((_WORD *)a1 + 241) = 0;
    *(unsigned char *)a1[59] = 0;
    uint64_t v45 = v146;
    uint64_t v44 = v147;
    uint64_t v46 = a1[40];
    *(void *)(v46 + 16) = v147;
    *(void *)(v46 + 24) = v45;
    *(_WORD *)(v46 + 32) = 0;
    if (*(_DWORD *)(*(void *)(v45 + 88) + 8) == 1)
    {
      uint64_t v36 = tn_nn_predictBTok(a1, (uint64_t)v145, (uint64_t)(a1 + 49), (uint64_t)(a1 + 51), v140, (uint64_t)v143, (uint64_t)v141, (char **)a1 + 59, *(_DWORD *)v44, HIWORD(*(_DWORD *)v44), (char *)a1[38]);
      if ((v36 & 0x80000000) != 0) {
        goto LABEL_195;
      }
      goto LABEL_162;
    }
    uint64_t v36 = applyExpansion(a1, v145, (uint64_t)(a1 + 49), (uint64_t)(a1 + 51), (uint64_t)v143, a1[38], v12, v13);
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_195;
    }
    uint64_t v47 = *(void *)(*a1 + 32);
    uint64_t v48 = a1[23];
    if (!*((_WORD *)a1 + 201)) {
      break;
    }
    log_OutText(v47, v48, 5, 0, (uint64_t)"DoExpansions : expansion -> \"%s\"", v11, v12, v13, a1[49]);
    log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"               langmap   -> \"%s\"", v49, v50, v51, a1[51]);
    unsigned __int16 v52 = cstdlib_strlen((const char *)a1[49]);
    unsigned int v53 = TOK_COUNT_SP_WORDS((const char *)a1[49]);
    unsigned int v58 = v53;
    if (v53 == v24)
    {
      BOOL v59 = v24 > 1u;
      if (v24 >= 2u)
      {
        if (*((_WORD *)a1 + 272))
        {
          unsigned int v139 = v53;
          unint64_t v60 = 0;
          do
          {
            if (*(_WORD *)(a1[65] + 2 * v60) == 9999)
            {
              int v61 = 0;
              if (v52)
              {
                do
                {
                  if (!utf8_strchr(g_szSpace_3, &(*v18)[(unsigned __int16)v61])) {
                    break;
                  }
                  v61 += utf8_determineUTF8CharLength((*v18)[(unsigned __int16)v61]);
                }
                while ((unsigned __int16)v61 < v52);
              }
              unsigned __int16 v62 = 0;
              if (v60 && v52 > (unsigned __int16)v61)
              {
                unsigned __int16 v62 = 0;
                do
                {
                  if (utf8_strchr(g_szSpace_3, &(*v18)[(unsigned __int16)v61]))
                  {
                    if (v60 == ++v62) {
                      break;
                    }
                    for (unsigned int i = (*v18)[(unsigned __int16)v61];
                          ;
                          unsigned int i = (*v18)[(unsigned __int16)v61])
                    {
                      v61 += utf8_determineUTF8CharLength(i);
                      if ((__int16)v147[1] <= (int)(unsigned __int16)v61
                        || !utf8_strchr(g_szSpace_3, &(*v18)[(unsigned __int16)v61]))
                      {
                        break;
                      }
                    }
                  }
                  else
                  {
                    v61 += utf8_determineUTF8CharLength((*v18)[(unsigned __int16)v61]);
                  }
                }
                while (v52 > (unsigned __int16)v61);
              }
              uint64_t v64 = a1[65];
              if (v60 != v62)
              {
                *(_WORD *)(v64 + 2 * v60) = 9999;
                log_OutPublic(*(void *)(*a1 + 32), a1[23], 24017, (uint64_t)"%s%d", v54, v55, v56, v57, "position");
                BOOL v59 = 1;
                int v65 = 1;
                unsigned int v58 = v139;
                goto LABEL_81;
              }
              *(_WORD *)(v64 + 2 * v60) = v61;
              log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"guessing alignment position for word %d to be %d", v55, v56, v57, v60);
            }
            ++v60;
          }
          while (v60 < *((unsigned __int16 *)a1 + 272));
          int v65 = 0;
          BOOL v59 = 1;
          unsigned int v58 = v139;
          if (*((_WORD *)a1 + 272)) {
            goto LABEL_82;
          }
        }
        else
        {
          int v65 = 0;
          BOOL v59 = 1;
        }
        goto LABEL_97;
      }
      int v65 = 0;
    }
    else
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"mismatch in number of words; in:%d out: %d",
        v55,
        v56,
        v57,
        v24);
      BOOL v59 = v24 > 1u;
      int v65 = 1;
    }
LABEL_81:
    if (*((_WORD *)a1 + 272))
    {
LABEL_82:
      unint64_t v66 = 0;
      uint64_t v67 = a1[65];
      do
      {
        unsigned int v68 = *(unsigned __int16 *)(v67 + 2 * v66);
        BOOL v69 = v68 != 9999 && v52 >= v68;
        if (!v69
          || v66
          && ((unsigned int v70 = *(unsigned __int16 *)(v67 + 2 * (v66 - 1)), v70 != 9999)
            ? (BOOL v71 = v68 >= v70)
            : (BOOL v71 = 1),
              !v71))
        {
          *(_WORD *)(v67 + 2 * v66) = 9999;
          int v65 = 1;
        }
        ++v66;
        unint64_t v72 = *((unsigned __int16 *)a1 + 272);
      }
      while (v66 < v72);
      goto LABEL_98;
    }
LABEL_97:
    LODWORD(v72) = 0;
LABEL_98:
    if (v65 == 1)
    {
      if (v58 < 2)
      {
        if (v72)
        {
          unint64_t v84 = 0;
          uint64_t v85 = a1[65];
          do
            *(_WORD *)(v85 + 2 * v84++) = 0;
          while (v84 < *((unsigned __int16 *)a1 + 272));
        }
      }
      else if (v72)
      {
        unsigned int v73 = (_WORD *)a1[65];
        *unsigned int v73 = 0;
        unsigned int v74 = *((unsigned __int16 *)a1 + 272);
        if (v74 >= 2)
        {
          uint64_t v75 = 0;
          do
          {
            unsigned int v76 = &v73[v75];
            if (v76[1] == 9999)
            {
              v76[1] = v73[v75];
              unsigned int v74 = *((unsigned __int16 *)a1 + 272);
            }
            unint64_t v77 = v75 + 2;
            ++v75;
          }
          while (v77 < v74);
          if (v74 >= 2)
          {
            unint64_t v78 = (unsigned __int16 *)a1[65];
            BOOL v79 = v78 + 1;
            unsigned int v80 = *v78;
            uint64_t v81 = v74 - 1;
            while (1)
            {
              unsigned int v83 = *v79++;
              unsigned int v82 = v83;
              if (v80 > v83) {
                break;
              }
              unsigned int v80 = v82;
              if (!--v81) {
                goto LABEL_114;
              }
            }
            unint64_t v133 = 0;
            do
              v78[v133++] = 0;
            while (v133 < *((unsigned __int16 *)a1 + 272));
          }
        }
      }
    }
LABEL_114:
    unsigned __int16 v86 = cstdlib_strlen(*v18);
    unsigned __int16 CurrentUtf8Offset = v86;
    if (v86) {
      unsigned __int16 CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)*v18, v86 - 1);
    }
    if (utf8_strchr(g_szSpace_3, *v18))
    {
      uint64_t v91 = 0;
      int v15 = 0;
      do
      {
        v15 += utf8_determineUTF8CharLength((*v18)[v91]);
        uint64_t v91 = (unsigned __int16)v15;
      }
      while (utf8_strchr(g_szSpace_3, &(*v18)[(unsigned __int16)v15]));
    }
    else
    {
      LOWORD(v15) = 0;
    }
    for (;
          (unsigned __int16)v15 < CurrentUtf8Offset;
          unsigned __int16 CurrentUtf8Offset = utf8_GetCurrentUtf8Offset((unint64_t)*v18, CurrentUtf8Offset - 1))
    {
      if (!utf8_strchr(g_szSpace_3, &(*v18)[CurrentUtf8Offset])) {
        break;
      }
      *(unsigned char *)(a1[49] + CurrentUtf8Offset) = 0;
      if (*((unsigned __int16 *)a1 + 209) > CurrentUtf8Offset) {
        (*v19)[CurrentUtf8Offset] = 0;
      }
    }
    if (v59 && *((_WORD *)a1 + 272))
    {
      unint64_t v92 = 0;
      do
      {
        uint64_t v93 = a1[65];
        for (unsigned int j = *(unsigned __int16 *)(v93 + 2 * v92); j < CurrentUtf8Offset; unsigned int j = *(unsigned __int16 *)(v93 + 2 * v92))
        {
          if (!utf8_strchr(g_szSpace_3, &(*v18)[(unsigned __int16)j])) {
            break;
          }
          *(_WORD *)(v93 + 2 * v92) += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[49]
                                                                                       + *(unsigned __int16 *)(v93 + 2 * v92)));
          log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"alignment position for word %d adjusted to %d", v95, v96, v97, v92);
        }
        ++v92;
      }
      while (v92 < *((unsigned __int16 *)a1 + 272));
    }
    if ((_WORD)v15)
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"DoExpansions : adjusted expansion -> \"%s\"", v88, v89, v90, a1[49]);
      if (v59)
      {
        if (*((_WORD *)a1 + 272))
        {
          unint64_t v98 = 0;
          do
          {
            uint64_t v99 = a1[65];
            if (*(_WORD *)(v99 + 2 * v98))
            {
              *(_WORD *)(v99 + 2 * v98) -= v15;
              log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"alignment position for word %d adjusted (by +%d) to %d", v88, v89, v90, v98);
            }
            ++v98;
          }
          while (v98 < *((unsigned __int16 *)a1 + 272));
        }
      }
    }
    if (*((unsigned __int16 *)a1 + 201) != *((unsigned __int16 *)a1 + 209))
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"mismatch in langmap and expansion string (length is different: %d vs %d)", v88, v89, v90, *((unsigned __int16 *)a1 + 209));
      *((_WORD *)a1 + 209) = 0;
      *(unsigned char *)a1[51] = 0;
    }
    unsigned int v103 = (unsigned __int16)cstdlib_strlen(*v19);
    if (!v103) {
      goto LABEL_155;
    }
    unsigned int v104 = 0;
    unsigned __int16 v105 = 0;
    unsigned __int8 v106 = 32;
    do
    {
      uint64_t v107 = v105;
      uint64_t v108 = &(*v19)[v105];
      unsigned int v109 = *(unsigned __int8 *)v108;
      if (v109 == v106 && (v110 = utf8_strchr(g_szSpace_3, v108), unsigned int v109 = (*v19)[v107], !v110))
      {
        unsigned __int16 v111 = utf8_determineUTF8CharLength(v109);
        uint64_t v112 = v111;
        if (v111)
        {
          uint64_t v113 = v104;
          do
          {
            (*v19)[v113++] = 32;
            --v112;
          }
          while (v112);
        }
      }
      else if ((v109 | 2) == 0x4E)
      {
        unsigned __int8 v106 = v109;
      }
      unsigned __int16 v105 = v107 + utf8_determineUTF8CharLength((*v19)[v107]);
      unsigned int v104 = v105;
    }
    while (v103 > v105);
    if (v106 == 32)
    {
LABEL_155:
      *((_WORD *)a1 + 209) = 0;
      *(unsigned char *)a1[51] = 0;
    }
    if (*((_WORD *)a1 + 209)) {
      uint64_t v114 = *v19;
    }
    else {
      uint64_t v114 = "(empty)";
    }
    log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"sanitized langMap=\"%s\"", v100, v101, v102, (uint64_t)v114);
    if (*((_WORD *)a1 + 209))
    {
      size_t v115 = cstdlib_strlen(*v19);
      if (v115 != cstdlib_strlen(*v18))
      {
        log_OutPublic(*(void *)(*a1 + 32), a1[23], 24061, (uint64_t)"%s%s%s%s", v116, v117, v118, v119, "langmap:\"");
        *((_WORD *)a1 + 209) = 0;
        *(unsigned char *)a1[51] = 0;
      }
    }
LABEL_162:
    uint64_t v120 = a1[49];
    if (*(_DWORD *)(*(void *)(v146 + 88) + 8) == 1)
    {
      if (*((_WORD *)a1 + 225)) {
        uint64_t v121 = *v143;
      }
      else {
        uint64_t v121 = 0;
      }
      if (*((_WORD *)a1 + 233)) {
        uint64_t v123 = *v141;
      }
      else {
        uint64_t v123 = 0;
      }
      uint64_t v17 = saveExpansionInLDO((uint64_t)a1, (char *)*v140, v120, v121, v123, (char *)a1[59], (unsigned __int16)v15, v147);
      *((_WORD *)a1 + 217) = 0;
      *(unsigned char *)a1[53] = 0;
      *((_WORD *)a1 + 225) = 0;
      *(unsigned char *)a1[55] = 0;
      *((_WORD *)a1 + 233) = 0;
      *(unsigned char *)a1[57] = 0;
      *((_WORD *)a1 + 241) = 0;
      *(unsigned char *)a1[59] = 0;
    }
    else
    {
      if (*((_WORD *)a1 + 225)) {
        unint64_t v122 = *v143;
      }
      else {
        unint64_t v122 = 0;
      }
      if (*((_WORD *)a1 + 233)) {
        uint64_t v124 = *v141;
      }
      else {
        uint64_t v124 = 0;
      }
      uint64_t v17 = saveExpansionInLDO((uint64_t)a1, v148, v120, v122, v124, 0, (unsigned __int16)v15, v147);
    }
    uint64_t v129 = *(void *)(*a1 + 32);
    uint64_t v130 = a1[23];
    if ((v17 & 0x80000000) != 0)
    {
      log_OutPublic(v129, v130, 24019, 0, v125, v126, v127, v128, v138);
      goto LABEL_196;
    }
    log_OutText(v129, v130, 5, 0, (uint64_t)"DoExpansions : created new LDO Label from %d to %d", v126, v127, v128, (__int16)*v147);
    if (*((_DWORD *)a1 + 137) == 1) {
      dumpTokenRecordsInLingDB(a1, (uint64_t)"After saving expanded token as Label in LDO", 0, v131, v132, v11, v12, v13);
    }
    unsigned __int16 v16 = v147[1];
    *a2 = v16;
LABEL_181:
    uint64_t v147 = 0;
    int v14 = v16;
    if (v16 >= *((unsigned __int16 *)a1 + 156)) {
      goto LABEL_196;
    }
  }
  uint64_t v135 = 24016;
LABEL_194:
  log_OutPublic(v47, v48, v135, 0, v26, v11, v12, v13, v137);
  uint64_t v36 = TOKENTNERROR(266);
LABEL_195:
  uint64_t v17 = v36;
LABEL_196:
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : DoExpansions End (%x)", v11, v12, v13, v17);
  return v17;
}

uint64_t applyExpansion(uint64_t *a1, int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v79 = 0;
  unsigned int v80 = 0;
  unint64_t v78 = 0;
  unsigned int v76 = 0;
  uint64_t v77 = 0;
  v75[0] = 0;
  v75[1] = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  long long __b = 0;
  size_t __len = 0;
  v70[0] = 0;
  v70[1] = 0;
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : applyExpansion Begin", a6, a7, a8, v66);
  if (*((_DWORD *)a1 + 153) == 1)
  {
    int v14 = (char *)a2[5];
    if (v14)
    {
      int v15 = cstdlib_strstr(v14, (const char *)a1[88]);
      if (a6)
      {
        unsigned __int16 v16 = v15;
        if (v15)
        {
          if (!v15[cstdlib_strlen((const char *)a1[88])] || v16[cstdlib_strlen((const char *)a1[88])] == 32)
          {
            uint64_t v17 = (void *)a1[22];
            if (*((_WORD *)v17 + 8))
            {
              uint64_t v18 = (uint64_t *)v17[1];
              if (v18)
              {
                uint64_t v68 = a3;
                do
                {
                  uint64_t v19 = a4;
                  LOBYTE(v20) = *((unsigned char *)v18 + 106);
                  if ((_BYTE)v20)
                  {
                    unint64_t v21 = 0;
                    int v22 = (__int16 *)v18 + 34;
                    do
                    {
                      uint64_t v23 = *(v22 - 1);
                      int v24 = (unsigned __int16)*v22;
                      if (v23 != -1 || v24 != 0xFFFF)
                      {
                        cstdlib_strncpy((char *)a1[69], (const char *)(a6 + v23), (unsigned __int16)(v24 - v23));
                        *(unsigned char *)(a1[69] - *(v22 - 1) + *v22) = 0;
                        uint64_t v26 = add2StringV2(a1, a5, (char *)a1[69]);
                        if ((v26 & 0x80000000) != 0) {
                          goto LABEL_91;
                        }
                        int v20 = *((unsigned __int8 *)v18 + 106);
                        if (v21 + 1 != v20)
                        {
                          uint64_t v26 = add2StringV2(a1, a5, (char *)a1[87]);
                          if ((v26 & 0x80000000) != 0) {
                            goto LABEL_91;
                          }
                          LOBYTE(v20) = *((unsigned char *)v18 + 106);
                        }
                      }
                      ++v21;
                      v22 += 2;
                    }
                    while (v21 < v20);
                  }
                  uint64_t v18 = (uint64_t *)*v18;
                  a4 = v19;
                  a3 = v68;
                }
                while (v18);
              }
            }
          }
        }
      }
    }
  }
  cstdlib_memset(&__b, 0, 0x10uLL);
  cstdlib_memset(&v76, 0, 0x10uLL);
  cstdlib_memset(v75, 0, 0x10uLL);
  cstdlib_memset(&v73, 0, 0x10uLL);
  cstdlib_memset(&__b, 0, 0x10uLL);
  cstdlib_memset(v70, 0, 0x10uLL);
  uint64_t inited = initStrRes((uint64_t)a1, (uint64_t)&v78);
  if ((inited & 0x80000000) == 0)
  {
    uint64_t v26 = initStrRes((uint64_t)a1, (uint64_t)&v76);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_91;
    }
    uint64_t v26 = initStrRes((uint64_t)a1, (uint64_t)v70);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_91;
    }
    uint64_t v26 = initStrRes((uint64_t)a1, (uint64_t)&v73);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_91;
    }
    uint64_t v26 = initStrRes((uint64_t)a1, (uint64_t)v75);
    if ((v26 & 0x80000000) != 0) {
      goto LABEL_91;
    }
    if (*((unsigned char *)a2 + 24))
    {
      uint64_t v31 = 0;
      do
      {
        log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"doing subexpansion %d ...", v28, v29, v30, v31);
        uint64_t v26 = applyExpansion(a1, *(void *)&a2[2][2 * v31], &v78, &v76, 0, 0);
        if ((v26 & 0x80000000) != 0) {
          goto LABEL_91;
        }
        if (WORD1(v79))
        {
          log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"after subexpansion %d str=\"%s\", langmap=\"%s\"", v28, v29, v30, v31);
          if (WORD1(v79))
          {
            if (!**a2)
            {
              __int16 v32 = *(_WORD *)(a1[40] + 32);
              *(_WORD *)(a1[40] + 32) = v32 + cstdlib_strlen(v78);
            }
            uint64_t v26 = add2StringV3(a1, (uint64_t)&v73, (uint64_t)&v78);
            if ((v26 & 0x80000000) != 0) {
              goto LABEL_91;
            }
            uint64_t v26 = add2StringV3(a1, (uint64_t)v75, (uint64_t)&v76);
            if ((v26 & 0x80000000) != 0) {
              goto LABEL_91;
            }
            WORD1(v79) = 0;
            *unint64_t v78 = 0;
            WORD1(v77) = 0;
            *unsigned int v76 = 0;
          }
        }
      }
      while (++v31 < (unint64_t)*((unsigned __int8 *)a2 + 24));
    }
    clearStrRes((void *)*a1, (uint64_t)&v78);
    clearStrRes((void *)*a1, (uint64_t)&v76);
    clearStrRes((void *)*a1, (uint64_t)v70);
    if (WORD1(v74) && (**a2 - 1) <= 2) {
      log_OutText(*(void *)(*a1 + 32), a1[23], 5, 0, (uint64_t)"CALL function on expanded string (%s)", v33, v34, v35, v73);
    }
    uint64_t v40 = initStrRes((uint64_t)a1, (uint64_t)&__b);
    if ((v40 & 0x80000000) != 0) {
      goto LABEL_92;
    }
    uint64_t v41 = *a2;
    int v42 = **a2;
    if ((v42 - 1) < 2)
    {
      int v69 = 0;
      FEFunctionMap_GetFunction((uint64_t)a1, 1u, (uint64_t)v41, &v80);
      uint64_t v43 = (void *)a1[40];
      *uint64_t v43 = a2[5];
      v43[1] = &__b;
      *((_WORD *)v43 + 17) = *((_WORD *)a2 + 4);
      uint64_t v40 = v80(a1, &v69);
      if ((v40 & 0x80000000) != 0) {
        goto LABEL_92;
      }
      if (!v69) {
        goto LABEL_89;
      }
      uint64_t v26 = add2StringV3(a1, a3, (uint64_t)&__b);
      if ((v26 & 0x80000000) == 0)
      {
        cstdlib_memset(__b, 32, WORD1(__len));
        p_b = &__b;
        goto LABEL_88;
      }
      goto LABEL_91;
    }
    if (v42 != 3) {
      goto LABEL_89;
    }
    unsigned int v45 = *((unsigned __int8 *)a2 + 24);
    if (*((unsigned char *)a2 + 24))
    {
      uint64_t v46 = 0;
      unsigned __int16 v47 = 9999;
      while (1)
      {
        uint64_t v48 = *(void *)&a2[2][2 * v46];
        if (**(_DWORD **)v48 == 2)
        {
          unsigned int v49 = *(unsigned __int16 *)(v48 + 8);
          uint64_t v50 = (void *)a1[40];
          uint64_t v51 = v50[3];
          if (v49 > *(unsigned __int8 *)(v51 + 82))
          {
            log_OutPublic(*(void *)(*a1 + 32), a1[23], 24008, (uint64_t)"%s%d", v36, v37, v38, v39, "intVal");
            TOKENTNERROR(0);
            uint64_t v51 = *(void *)(a1[40] + 24);
            unsigned int v45 = *((unsigned __int8 *)a2 + 24);
LABEL_55:
            int v52 = *(__int16 *)(v51 + 4 * (unsigned __int16)(v49 - 1) + 42);
            if (v52 < v47 && v52 != -1) {
              unsigned __int16 v47 = v52;
            }
            goto LABEL_60;
          }
          if (v49) {
            goto LABEL_55;
          }
          unsigned __int16 v47 = *(_WORD *)v50[2];
        }
LABEL_60:
        if (++v46 >= (unint64_t)v45) {
          goto LABEL_64;
        }
      }
    }
    unsigned __int16 v47 = 9999;
LABEL_64:
    uint64_t v54 = *((unsigned __int16 *)a1 + 272);
    if (*((_WORD *)a1 + 272))
    {
      int v55 = 0;
      uint64_t v56 = (unsigned __int16 *)a1[67];
      do
      {
        int v57 = *v56++;
        if (v57 == v47) {
          int v55 = 1;
        }
        --v54;
      }
      while (v54);
      if (v55 == 1)
      {
        unsigned int v58 = **(unsigned __int16 **)(a1[40] + 16);
        if (v58 < v47)
        {
          do
          {
            if (!utf8_strchr(g_szSpace_3, (const char *)(a1[38] + (unsigned __int16)v58))) {
              break;
            }
            v58 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + (unsigned __int16)v58));
          }
          while ((unsigned __int16)v58 < v47);
        }
        if ((unsigned __int16)v58 < v47)
        {
          unsigned __int16 v59 = 0;
          do
          {
            uint64_t v60 = (unsigned __int16)v58;
            if (utf8_strchr(g_szSpace_3, (const char *)(a1[38] + (unsigned __int16)v58)))
            {
              ++v59;
              if ((unsigned __int16)v58 < v47)
              {
                while (1)
                {
                  uint64_t v60 = (unsigned __int16)v58;
                  if (!utf8_strchr(g_szSpace_3, (const char *)(a1[38] + (unsigned __int16)v58))) {
                    break;
                  }
                  v58 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + (unsigned __int16)v58));
                  if ((unsigned __int16)v58 >= v47)
                  {
                    uint64_t v60 = (unsigned __int16)v58;
                    break;
                  }
                }
              }
            }
            v58 += utf8_determineUTF8CharLength(*(unsigned __int8 *)(a1[38] + v60));
          }
          while ((unsigned __int16)v58 < v47);
LABEL_84:
          int v61 = (void *)a1[40];
          *int v61 = v73;
          v61[1] = &__b;
          int v69 = 0;
          uint64_t v40 = textnormalizer_DoDepes((uint64_t)a1, (uint64_t)a2[6], v59, v55, &v69, (uint64_t)v70, v38, v39);
          if ((v40 & 0x80000000) != 0) {
            goto LABEL_92;
          }
          if (!v69) {
            goto LABEL_89;
          }
          uint64_t v26 = add2StringV3(a1, a3, (uint64_t)&__b);
          if ((v26 & 0x80000000) == 0)
          {
            p_b = (void **)v70;
LABEL_88:
            uint64_t v40 = add2StringV3(a1, a4, (uint64_t)p_b);
            if ((v40 & 0x80000000) == 0)
            {
LABEL_89:
              clearStrRes((void *)*a1, (uint64_t)&__b);
              if (!**a2)
              {
                add2StringV3(a1, a3, (uint64_t)&v73);
                add2StringV3(a1, a4, (uint64_t)v75);
              }
            }
LABEL_92:
            clearStrRes((void *)*a1, (uint64_t)v70);
            clearStrRes((void *)*a1, (uint64_t)&__b);
            clearStrRes((void *)*a1, (uint64_t)&v73);
            clearStrRes((void *)*a1, (uint64_t)v75);
            clearStrRes((void *)*a1, (uint64_t)&v78);
            clearStrRes((void *)*a1, (uint64_t)&v76);
            log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : applyExpansion End", v62, v63, v64, v67);
            return v40;
          }
LABEL_91:
          uint64_t v40 = v26;
          goto LABEL_92;
        }
      }
    }
    else
    {
      int v55 = 0;
    }
    unsigned __int16 v59 = 0;
    goto LABEL_84;
  }
  return inited;
}

uint64_t textnormalizer_ObjOpen(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = 0;
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjOpen Begin", a6, a7, a8, v23);
  uint64_t Map = FEFunctionMap_GetMap(a1, &v25);
  if ((Map & 0x80000000) != 0)
  {
LABEL_6:
    uint64_t v21 = Map;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 1;
    while (1)
    {
      char v15 = v14;
      uint64_t v16 = ssftmap_Insert(v25, (uint64_t)*(&off_26D210F58 + 2 * v13), (uint64_t)*(&off_26D210F58 + 2 * v13 + 1));
      if ((v16 & 0x80000000) != 0) {
        break;
      }
      char v14 = 0;
      uint64_t v13 = 1;
      if ((v15 & 1) == 0)
      {
        uint64_t Map = FEFunctionMap_AddFunctionMap((uint64_t)a1, 1u, v25);
        goto LABEL_6;
      }
    }
    uint64_t v21 = v16;
    log_OutPublic(*(void *)(*a1 + 32), a1[23], 24010, 0, v17, v18, v19, v20, v24);
    ssftmap_ObjClose(v25);
  }
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjOpen End (%x)", v10, v11, v12, v21);
  return v21;
}

uint64_t textnormalizer_ObjClose(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjClose Begin", a6, a7, a8, v13);
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : ObjClose End (%x)", v9, v10, v11, 0);
  return 0;
}

uint64_t textnormalizer_DoMatch(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_MATCH( %d) = ", a6, a7, a8, *(unsigned __int16 *)(*(void *)(a1 + 320) + 34));
  }
  uint64_t v10 = *(void *)(a1 + 320);
  int v11 = *(unsigned __int16 *)(v10 + 34);
  if (!*(_WORD *)(v10 + 34))
  {
    char v15 = *(_WORD **)(v10 + 24);
    if (v15[20])
    {
      if (!*v15)
      {
        uint64_t v17 = 0;
LABEL_19:
        uint64_t v27 = *(void *)(v10 + 8);
        uint64_t v28 = (char *)(*(void *)(a1 + 504) + (unsigned __int16)v15[2 * v17 + 1]);
        goto LABEL_67;
      }
      unsigned __int8 v16 = 0;
      while ((unsigned __int16)v15[20] > ++v16)
      {
        uint64_t v17 = v16;
        if (!v15[2 * v16]) {
          goto LABEL_19;
        }
      }
    }
    uint64_t v23 = add2StringV4((uint64_t *)a1, *(void *)(v10 + 8), **(unsigned __int16 **)(v10 + 16), *(_WORD *)(*(void *)(v10 + 16) + 2));
    goto LABEL_68;
  }
  uint64_t v12 = *(unsigned __int16 **)(v10 + 24);
  if (*((unsigned __int8 *)v12 + 82) < (unsigned __int16)(v11 - 1))
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 24008, (uint64_t)"%s%d", a5, a6, a7, a8, "intVal");
    int v13 = 0;
    uint64_t v14 = 0;
LABEL_72:
    int *v8 = v13;
    return v14;
  }
  uint64_t v18 = (unsigned __int16)(v11 - 1);
  uint64_t v19 = &v12[2 * v18];
  int v21 = (__int16)v19[21];
  uint64_t v20 = v19 + 21;
  if (v21 == -1 && (__int16)v12[2 * v18 + 22] == -1)
  {
    uint64_t v27 = *(void *)(v10 + 8);
    uint64_t v28 = "";
LABEL_67:
    uint64_t v23 = add2StringV2((uint64_t *)a1, v27, v28);
LABEL_68:
    uint64_t v14 = v23;
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    return v14;
  }
  if (v12[20])
  {
    if (*v12 == v11)
    {
      uint64_t v22 = 0;
LABEL_23:
      uint64_t v14 = add2StringV2((uint64_t *)a1, *(void *)(v10 + 8), (char *)(*(void *)(a1 + 504) + v12[2 * v22 + 1]));
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v43 = v8;
        uint64_t v30 = (const char *)(*(void *)(a1 + 504)
                           + *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 320) + 24) + 4 * v22 + 2));
LABEL_27:
        unsigned __int16 v31 = cstdlib_strlen(v30);
        if (v31)
        {
          int v32 = 0;
          while ((_WORD)v32)
          {
            if (utf8_strchr(g_szSpace_4, &v30[(unsigned __int16)v32]))
            {
              if (v31 > (unsigned __int16)v32)
              {
                int v33 = (unsigned __int16)v32;
                do
                {
                  uint64_t v34 = &v30[(unsigned __int16)v32];
                  if (utf8_strchr(g_szSpace_4, v34)) {
                    BOOL v35 = v33 + 1 >= v31;
                  }
                  else {
                    BOOL v35 = 1;
                  }
                  if (v35) {
                    break;
                  }
                  if (!utf8_strchr(g_szSpace_4, v34 + 1)) {
                    break;
                  }
                  v32 += utf8_determineUTF8CharLength(*(unsigned __int8 *)v34);
                  int v33 = (unsigned __int16)v32;
                }
                while (v31 > (unsigned __int16)v32);
              }
              goto LABEL_41;
            }
LABEL_64:
            v32 += utf8_determineUTF8CharLength(v30[(unsigned __int16)v32]);
            if ((unsigned __int16)v32 >= v31) {
              goto LABEL_65;
            }
          }
          int v32 = 0;
LABEL_41:
          unsigned __int16 v36 = *v20 + v32;
          if (*(_WORD *)(a1 + 544))
          {
            uint64_t v37 = 0;
            while (*(unsigned __int16 *)(*(void *)(a1 + 536) + v37) != v36)
            {
              v37 += 2;
              if (2 * *(unsigned __int16 *)(a1 + 544) == v37) {
                goto LABEL_47;
              }
            }
            *(_WORD *)(*(void *)(a1 + 520) + v37) = *(_WORD *)(*(void *)(a1 + 320) + 32) + v32;
          }
LABEL_47:
          if (v36
            && *(unsigned __int16 *)(a1 + 312) > v36
            && TOK_IS_ALPHANUM((const char *)(*(void *)(a1 + 304) + v36))
            && TOK_IS_PUNCT((const char *)(*(void *)(a1 + 304) + v36 - 1)))
          {
            uint64_t v38 = *(void *)(a1 + 304);
            for (unsigned int i = v36; ; unsigned int i = PreviousUtf8Offset)
            {
              unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset(v38, i);
              if (!PreviousUtf8Offset
                || !TOK_IS_PUNCT((const char *)(*(void *)(a1 + 304) + PreviousUtf8Offset))
                || !TOK_IS_PUNCT((const char *)(*(void *)(a1 + 304) + PreviousUtf8Offset - 1)))
              {
                break;
              }
              uint64_t v38 = *(void *)(a1 + 304);
            }
            if (utf8_strchr(g_szSpace_4, (const char *)(*(void *)(a1 + 304) + PreviousUtf8Offset))) {
              PreviousUtf8Offset += utf8_determineUTF8CharLength(*(unsigned __int8 *)(*(void *)(a1 + 304)
            }
                                                                                    + PreviousUtf8Offset));
            if (*(_WORD *)(a1 + 544))
            {
              uint64_t v41 = 0;
              while (*(unsigned __int16 *)(*(void *)(a1 + 536) + v41) != PreviousUtf8Offset)
              {
                v41 += 2;
                if (2 * *(unsigned __int16 *)(a1 + 544) == v41) {
                  goto LABEL_64;
                }
              }
              *(_WORD *)(*(void *)(a1 + 520) + v41) = *(_WORD *)(*(void *)(a1 + 320) + 32) + v32;
            }
          }
          goto LABEL_64;
        }
LABEL_65:
        uint64_t v8 = v43;
LABEL_69:
        if (*(_DWORD *)(a1 + 548) == 1) {
          log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v24, v25, v26, **(void **)(*(void *)(a1 + 320) + 8));
        }
        int v13 = 1;
        goto LABEL_72;
      }
      return v14;
    }
    unsigned __int8 v29 = 0;
    while (v12[20] > ++v29)
    {
      uint64_t v22 = v29;
      if (v12[2 * v29] == v11) {
        goto LABEL_23;
      }
    }
  }
  cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(*(void *)(a1 + 304) + **(__int16 **)(v10 + 16)), (unsigned __int16)(*(_WORD *)(*(void *)(v10 + 16) + 2) - **(_WORD **)(v10 + 16)));
  *(unsigned char *)(*(void *)(a1 + 552)
           - **(__int16 **)(*(void *)(a1 + 320) + 16)
           + *(__int16 *)(*(void *)(*(void *)(a1 + 320) + 16) + 2)) = 0;
  uint64_t v30 = *(const char **)(a1 + 552);
  uint64_t v14 = add2StringV4((uint64_t *)a1, *(void *)(*(void *)(a1 + 320) + 8), (unsigned __int16)*v20, v12[2 * v18 + 22]);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v43 = v8;
    goto LABEL_27;
  }
  return v14;
}

uint64_t textnormalizer_DoString(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a2 = 0;
  if (*(_DWORD *)(a1 + 548) == 1) {
    log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"_STRING_TTS( %s) = ", a6, a7, a8, **(void **)(a1 + 320));
  }
  uint64_t v13 = add2StringV2((uint64_t *)a1, *(void *)(*(void *)(a1 + 320) + 8), **(char ***)(a1 + 320));
  if ((v13 & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 548) == 1) {
      log_OutText(*(void *)(*(void *)a1 + 32), *(void *)(a1 + 184), 5, 0, (uint64_t)"%s", v10, v11, v12, **(void **)(*(void *)(a1 + 320) + 8));
    }
    *a2 = 1;
  }
  return v13;
}

uint64_t getDctStr(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 82);
  if (*(unsigned char *)(a2 + 82))
  {
    unint64_t v7 = 0;
    int v8 = 0;
    uint64_t result = 0;
    uint64_t v10 = (unsigned __int16 *)(a2 + 2);
    while (1)
    {
      uint64_t v11 = a2 + 4 * v7;
      if (*(__int16 *)(v11 + 42) != -1 || *(__int16 *)(v11 + 44) != -1)
      {
        unsigned __int16 v12 = *(_WORD *)(a2 + 40);
        if (v12)
        {
          unint64_t v13 = 0;
          uint64_t v14 = v10;
          do
          {
            if (*(v14 - 1) - 1 == v8)
            {
              uint64_t result = add2StringV2(a1, a3, (char *)(a1[63] + *v14));
              if ((result & 0x80000000) != 0) {
                return result;
              }
              unsigned __int16 v12 = *(_WORD *)(a2 + 40);
            }
            v14 += 2;
            ++v13;
          }
          while (v13 < v12);
          unsigned int v3 = *(unsigned __int8 *)(a2 + 82);
        }
      }
      if (v8 + 1 != v3)
      {
        if (a1[87]) {
          char v15 = (char *)a1[87];
        }
        else {
          char v15 = "|";
        }
        uint64_t result = add2StringV2(a1, a3, v15);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v3 = *(unsigned __int8 *)(a2 + 82);
      }
      int v8 = ++v7;
      if (v7 >= v3) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t getRegexStr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 82);
  if (*(unsigned char *)(a2 + 82))
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    for (unsigned int i = (__int16 *)(a2 + 44); ; i += 2)
    {
      uint64_t v12 = *(i - 1);
      int v13 = (unsigned __int16)*i;
      if (v12 == -1 && v13 == 0xFFFF) {
        goto LABEL_15;
      }
      cstdlib_strncpy(*(char **)(a1 + 552), (const char *)(a4 + v12), (unsigned __int16)(v13 - v12));
      *(unsigned char *)(*(void *)(a1 + 552) - *(i - 1) + *i) = 0;
      uint64_t result = add2StringV2((uint64_t *)a1, a3, *(char **)(a1 + 552));
      if ((result & 0x80000000) != 0) {
        return result;
      }
      int v15 = *(_DWORD *)(a1 + 960);
      unsigned int v4 = *(unsigned __int8 *)(a2 + 82);
      if (v15 == 1) {
        break;
      }
LABEL_16:
      if (v15) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v9 + 1 == v4;
      }
      if (!v17)
      {
        if (*(void *)(a1 + 696)) {
          uint64_t v18 = *(char **)(a1 + 696);
        }
        else {
          uint64_t v18 = "|";
        }
        uint64_t result = add2StringV2((uint64_t *)a1, a3, v18);
        if ((result & 0x80000000) != 0) {
          return result;
        }
        unsigned int v4 = *(unsigned __int8 *)(a2 + 82);
      }
      if (++v9 >= (unint64_t)v4) {
        return result;
      }
    }
    if (v9 + 1 != v4)
    {
      if (*(void *)(a1 + 696)) {
        unsigned __int8 v16 = *(char **)(a1 + 696);
      }
      else {
        unsigned __int8 v16 = "|";
      }
      uint64_t result = add2StringV2((uint64_t *)a1, a3, v16);
      if ((result & 0x80000000) != 0) {
        return result;
      }
      unsigned int v4 = *(unsigned __int8 *)(a2 + 82);
    }
LABEL_15:
    int v15 = *(_DWORD *)(a1 + 960);
    goto LABEL_16;
  }
  return 0;
}

uint64_t tn_nn_predictBTok(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, char **a8, unsigned __int16 a9, unsigned __int16 a10, char *a11)
{
  *(void *)uint64_t v41 = 0;
  int v42 = 0;
  uint64_t v19 = a1[22];
  log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"textnormalizer : predictBTokAndApplyExpansion Begin", a6, a7, (uint64_t)a8, v40);
  if (cstdlib_strcmp(*(const char **)(a2 + 48), "_NN"))
  {
    if (cstdlib_strcmp(*(const char **)(a2 + 48), "_UNAMBIG")) {
      return 2304778240;
    }
    int v32 = *(char **)(a2 + 40);
  }
  else
  {
    int v21 = *(const char **)(a2 + 40);
    unsigned __int16 v22 = cstdlib_strlen(v21);
    uint64_t v23 = v22;
    if (v22)
    {
      uint64_t v24 = 0;
      while (v21[v24] == 32)
      {
        if (v22 == ++v24)
        {
          LOWORD(v24) = v22;
          break;
        }
      }
      uint64_t v23 = (unsigned __int16)v24;
    }
    uint64_t v25 = add2StringV2(a1, (uint64_t)a8, (char *)&v21[v23]);
    if ((v25 & 0x80000000) != 0) {
      return v25;
    }
    uint64_t v26 = cstdlib_strchr(*a8, 32);
    if (v26) {
      *uint64_t v26 = 0;
    }
    uint64_t v27 = ssftmap_Find(a1[85], (uint64_t)*a8, v41);
    if ((v27 & 0x80000000) != 0)
    {
      Regexuint64_t Str = v27;
      log_OutPublic(*(void *)(*a1 + 32), a1[23], 24069, (uint64_t)"%s%s", v28, v29, v30, v31, "pattern");
      return RegexStr;
    }
    if (*((unsigned __int16 *)a1 + 365) >= *((unsigned __int16 *)a1 + 364))
    {
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)"exceeded max NN calls per sentence %d, fallback to default prediction %s", v29, v30, v31, *((unsigned __int16 *)a1 + 364));
      int v32 = *(char **)(*(void *)v41 + 16);
    }
    else
    {
      uint64_t v25 = nn_tn_process(*a1, a1[23], (uint64_t)(a1 + 80), (uint64_t)*a8, *(uint64_t *)v41, a9, a10, a11, &v42);
      ++*((_WORD *)a1 + 365);
      if ((v25 & 0x80000000) != 0) {
        return v25;
      }
      int v32 = v42;
    }
  }
  uint64_t v25 = add2StringV2(a1, (uint64_t)a5, v32);
  if ((v25 & 0x80000000) != 0) {
    return v25;
  }
  if (a1[88]) {
    int v33 = (char *)a1[88];
  }
  else {
    int v33 = "LUA";
  }
  if ((add2StringV2(a1, a3, v33) & 0x80000000) != 0) {
    return 2304778240;
  }
  Regexuint64_t Str = add2StringV2(a1, a4, "");
  if ((RegexStr & 0x80000000) == 0)
  {
    cstdlib_memset(*(void **)a4, 32, *(unsigned __int16 *)(a4 + 10));
    if (*(_WORD *)(v19 + 16) && (uint64_t v37 = *(void **)(v19 + 8)) != 0)
    {
      while (1)
      {
        Regexuint64_t Str = getRegexStr((uint64_t)a1, (uint64_t)(v37 + 3), a6, (uint64_t)a11);
        if ((RegexStr & 0x80000000) != 0) {
          break;
        }
        if (!*((_DWORD *)a1 + 240))
        {
          Regexuint64_t Str = getDctStr(a1, (uint64_t)(v37 + 3), a7);
          if ((RegexStr & 0x80000000) != 0) {
            break;
          }
        }
        uint64_t v37 = (void *)*v37;
        if (!v37) {
          goto LABEL_32;
        }
      }
    }
    else
    {
LABEL_32:
      if (*((_DWORD *)a1 + 240) == 1) {
        uint64_t v38 = "textnormalizer : predictBTokAndApplyExpansion End expansionFunction=%s regexStr=%s";
      }
      else {
        uint64_t v38 = "textnormalizer : predictBTokAndApplyExpansion End expansionFunction=%s regexStr=%s dctmatchStr=%s";
      }
      log_OutText(*(void *)(*a1 + 32), a1[23], 4, 0, (uint64_t)v38, v34, v35, v36, *a5);
    }
  }
  return RegexStr;
}

uint64_t nn_tn_checkIfActive(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v20 = 0;
  int v21 = 0;
  *a5 = 0;
  uint64_t BrokerString = nn_tn_getBrokerString(a3, a4, &v21);
  if ((BrokerString & 0x80000000) != 0) {
    return BrokerString;
  }
  uint64_t v10 = v21;
  if ((ssftriff_reader_ObjOpen(a1, a2, 2, v21, "FINN", 1, (uint64_t *)&v20) & 0x80000000) != 0)
  {
    uint64_t v18 = 0;
    if (!v10) {
      return v18;
    }
LABEL_9:
    heap_Free(*(void **)(a3 + 8), (uint64_t)v10);
    return v18;
  }
  uint64_t v18 = ssftriff_reader_ObjClose(v20, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 0x80000000) == 0) {
    *a5 = 1;
  }
  if (v10) {
    goto LABEL_9;
  }
  return v18;
}

uint64_t nn_tn_getBrokerString(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v13 = "";
  __s2 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)unsigned __int16 __s1 = 0u;
  long long v16 = 0u;
  uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"langcode", &__s2);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = paramc_ParamGetStr(*(void *)(a1 + 40), (uint64_t)"fecfg", &v13);
    if ((result & 0x80000000) == 0)
    {
      cstdlib_strcat(__s1, "nn_tn_");
      cstdlib_strcat(__s1, __s2);
      cstdlib_strcat(__s1, "_");
      cstdlib_strcat(__s1, v13);
      unint64_t v7 = (unsigned char *)heap_Calloc(*(void **)(a1 + 8), 1, 1024);
      *a3 = v7;
      if (v7)
      {
        return brokeraux_ComposeBrokerString(a1, __s1, 1, 1, __s2, 0, 0, v7, 0x400uLL);
      }
      else
      {
        log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v8, v9, v10, v11, v12);
        return 2304778250;
      }
    }
  }
  return result;
}

uint64_t nn_tn_Load(_WORD *a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int *a11)
{
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  __int16 v84 = 0;
  uint64_t v87 = 0;
  __int16 v86 = -1;
  unsigned __int8 v85 = 0;
  *a11 = 0;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_modelType", &v87, &v86, &v85);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  if (v86 == 1 && v87)
  {
    long long v18 = cstdlib_strchr(*v87, v85);
    if (v18) {
      *long long v18 = 0;
    }
    if (cstdlib_strcmp(*v87, "char"))
    {
      if (cstdlib_strcmp(*v87, "char"))
      {
        if (cstdlib_strcmp(*v87, "word_and_char")) {
          goto LABEL_13;
        }
        int v19 = 2;
      }
      else
      {
        int v19 = 1;
      }
    }
    else
    {
      int v19 = 0;
    }
    *a11 = v19;
  }
LABEL_13:
  uint64_t v87 = 0;
  __int16 v86 = -1;
  unsigned __int8 v85 = 0;
  a11[3] = 0;
  a11[6] = 0;
  if (*a11 == 1)
  {
    uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_wordFocusPatternProcessing", &v87, &v86, &v85);
  }
  else
  {
    if (*a11) {
      goto LABEL_24;
    }
    uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, char ***, __int16 *, unsigned __int8 *))(a7 + 96))(a9, a10, "fecfg", "nn_tn_charFocusPatternProcessing", &v87, &v86, &v85);
  }
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  if (v86 == 1 && v87)
  {
    long long v20 = cstdlib_strchr(*v87, v85);
    if (v20) {
      *long long v20 = 0;
    }
    if (!cstdlib_strcmp(*v87, "Markup"))
    {
      if (*a11 == 1)
      {
        a11[6] = 1;
      }
      else if (!*a11)
      {
        a11[3] = 1;
      }
    }
    if (!cstdlib_strcmp(*v87, "Embedded"))
    {
      if (*a11 == 1)
      {
        a11[6] = 2;
      }
      else if (!*a11)
      {
        a11[3] = 2;
      }
    }
  }
LABEL_24:
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_maxNNCallsPerSent", (_WORD *)a11 + 44);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_charContextWindow", (_WORD *)a11 + 2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_wordContextWindow", (_WORD *)a11 + 3);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_charEmbeddingDimension", (_WORD *)a11 + 4);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_wordEmbeddingDimension", (_WORD *)a11 + 5);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_max_x_len", (_WORD *)a11 + 14);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_Y_dict_size", (_WORD *)a11 + 15);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getNumericFeatureValue(a7, a9, a10, (uint64_t)"nn_tn_addPatternAsFeature", &v84);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_contextPaddingChar", (char **)a11 + 2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  if (v84 == 1) {
    a11[8] = 1;
  }
  uint64_t NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_regexSubmatchSeparator", (char **)a11 + 7);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = getStringFeatureValue(a5, a6, a7, a9, a10, (uint64_t)"nn_tn_expansionProxyString", (char **)a11 + 8);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = setModelPredictions(a5, a6, a7, a9, a10, (uint64_t)a11);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t v24 = a5;
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"modelType %d", v21, v22, v23, *a11);
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"charContextWindow %d", v25, v26, v27, *((unsigned __int16 *)a11 + 2));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"wordContextWindow %d", v28, v29, v30, *((unsigned __int16 *)a11 + 3));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"charEmbeddingDimension %d", v31, v32, v33, *((unsigned __int16 *)a11 + 4));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"wordEmbeddingDimension %d", v34, v35, v36, *((unsigned __int16 *)a11 + 5));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"charFocusType %d", v37, v38, v39, a11[3]);
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"wordFocusType %d", v40, v41, v42, a11[6]);
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"addPatternAsFeature %d", v43, v44, v45, a11[8]);
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"max_x_len %d", v46, v47, v48, *((unsigned __int16 *)a11 + 14));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"expansionProxyString %s", v49, v50, v51, *((void *)a11 + 8));
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"regexSubmatchSeparator %s", v52, v53, v54, *((void *)a11 + 7));
  unsigned int v55 = a11[8];
  *((_WORD *)a11 + 18) = v55 == 1;
  if (*a11 == 1)
  {
    unsigned int v56 = a11[6];
  }
  else
  {
    if (*a11) {
      goto LABEL_55;
    }
    unsigned int v56 = a11[3];
  }
  if (v56 == 2)
  {
    if (v55 == 1) {
      __int16 v57 = 2;
    }
    else {
      __int16 v57 = 1;
    }
    *((_WORD *)a11 + 18) = v57;
  }
LABEL_55:
  uint64_t NumericFeatureValue = nn_word_lkp_GetInterface(1u, (void *)a11 + 16);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  *((void *)a11 + 17) = safeh_GetNullHandle();
  *((void *)a11 + 18) = v58;
  *((void *)a11 + 19) = safeh_GetNullHandle();
  *((void *)a11 + 20) = v59;
  uint64_t NumericFeatureValue = (*(uint64_t (**)(void, void, const char *, _WORD *, uint64_t))(*((void *)a11 + 16)
                                                                                                  + 16))(*((void *)a11 + 17), *((void *)a11 + 18), "char", a1, a2);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  uint64_t NumericFeatureValue = (*(uint64_t (**)(void, void, unsigned int *))(*((void *)a11 + 16) + 40))(*((void *)a11 + 19), *((void *)a11 + 20), (unsigned int *)a11 + 42);
  if ((NumericFeatureValue & 0x80000000) != 0) {
    return NumericFeatureValue;
  }
  log_OutText(*(void *)(a5 + 32), a6, 5, 0, (uint64_t)"word2vec length %d", v60, v61, v62, a11[42]);
  uint64_t v63 = heap_Alloc(*(void *)(a5 + 8), 4 * a11[42]);
  *((void *)a11 + 22) = v63;
  if (v63)
  {
    uint64_t BrokerString = nn_tn_getBrokerString(a5, a6, &v83);
    uint64_t v69 = v83;
    if ((BrokerString & 0x80000000) != 0)
    {
      uint64_t v77 = BrokerString;
    }
    else
    {
      uint64_t v70 = fi_init(a1, a2, a3, a4, &v82, 0, v83, "FINN", 1, 0);
      if ((v70 & 0x80000000) != 0)
      {
        uint64_t v77 = 2304778240;
        log_OutPublic(*(void *)(a5 + 32), a6, 24063, 0, v71, v72, v73, v74, v80);
      }
      else
      {
        int v75 = *(_DWORD *)(*(void *)v82 + 56);
        if (*(_DWORD *)(*(void *)v82 + 52) == 2
          && v75 == *((unsigned __int16 *)a11 + 14)
          && (int v76 = *(_DWORD *)(*(void *)v82 + 60), v76 == a11[42] + *((unsigned __int16 *)a11 + 18)))
        {
          uint64_t v77 = v70;
          *((void *)a11 + 13) = v82;
          a11[28] = v76 * v75;
          *((void *)a11 + 23) = 0;
          *((_WORD *)a11 + 96) = 0;
          uint64_t v24 = a5;
        }
        else
        {
          uint64_t v24 = a5;
          log_OutPublic(*(void *)(a5 + 32), a6, 24067, (uint64_t)"%s%d%d%s%d%d", v71, v72, v73, v74, "expected");
          uint64_t v77 = 2304778265;
        }
      }
    }
    if (v69) {
      heap_Free(*(void **)(v24 + 8), v69);
    }
  }
  else
  {
    log_OutPublic(*(void *)(a5 + 32), a6, 24048, 0, v64, v65, v66, v67, v79);
    return 2304778250;
  }
  return v77;
}

uint64_t nn_tn_UnLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 176);
  if (v6)
  {
    heap_Free(*(void **)(a1 + 8), v6);
    *(void *)(a3 + 176) = 0;
  }
  uint64_t v7 = *(void *)(a3 + 128);
  if (v7)
  {
    (*(void (**)(void, void))(v7 + 24))(*(void *)(a3 + 152), *(void *)(a3 + 160));
    *(void *)(a3 + 128) = 0;
  }
  uint64_t v8 = *(void *)(a3 + 48);
  if (v8) {
    ssftmap_ObjClose(v8);
  }
  uint64_t v9 = *(void *)(a3 + 40);
  if (v9) {
    ssftmap_ObjClose(v9);
  }
  uint64_t v10 = *(void *)(a3 + 56);
  if (v10)
  {
    heap_Free(*(void **)(a1 + 8), v10);
    *(void *)(a3 + 56) = 0;
  }
  uint64_t v11 = *(void *)(a3 + 64);
  if (v11)
  {
    heap_Free(*(void **)(a1 + 8), v11);
    *(void *)(a3 + 64) = 0;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    heap_Free(*(void **)(a1 + 8), v12);
    *(void *)(a3 + 16) = 0;
  }
  uint64_t v13 = *(void *)(a3 + 80);
  if (v13)
  {
    if (*(_WORD *)(a3 + 72))
    {
      unint64_t v14 = 0;
      do
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a3 + 80) + 8 * v14));
        *(void *)(*(void *)(a3 + 80) + 8 * v14++) = 0;
      }
      while (v14 < *(unsigned __int16 *)(a3 + 72));
      uint64_t v13 = *(void *)(a3 + 80);
    }
    *(_WORD *)(a3 + 72) = 0;
    heap_Free(*(void **)(a1 + 8), v13);
    *(void *)(a3 + 80) = 0;
  }
  uint64_t v15 = *(uint64_t **)(a3 + 104);
  if (!v15) {
    return 0;
  }

  return fi_deinit(a1, a2, v15);
}

uint64_t nn_tn_freeSentData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 184);
  if (v3)
  {
    if (*(_WORD *)(a2 + 192))
    {
      unint64_t v5 = 0;
      do
      {
        heap_Free(*(void **)(a1 + 8), *(void *)(*(void *)(a2 + 184) + 8 * v5));
        *(void *)(*(void *)(a2 + 184) + 8 * v5++) = 0;
      }
      while (v5 < *(unsigned __int16 *)(a2 + 192));
      uint64_t v3 = *(void *)(a2 + 184);
    }
    heap_Free(*(void **)(a1 + 8), v3);
    *(void *)(a2 + 184) = 0;
  }
  return 0;
}

uint64_t nn_tn_getCharContextString(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5, uint64_t *a6, unsigned __int16 *a7, unsigned int a8, int a9, const char *a10, unsigned __int16 a11, unsigned __int16 *a12, _WORD *a13, _WORD *a14)
{
  unsigned __int16 v71 = cstdlib_strlen(__s);
  *a12 = 0;
  uint64_t v20 = heap_Calloc(*(void **)(a1 + 8), 1, (8 * a11) | 1);
  if (!v20)
  {
    uint64_t v49 = 2304778250;
    log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v21, v22, v23, v24, v68);
    return v49;
  }
  uint64_t v25 = v20;
  uint64_t v69 = a6;
  *a7 = a11;
  unsigned int v26 = a8;
  if (!a11)
  {
LABEL_6:
    if ((int)(a5 - a4) >= (unsigned __int16)(a11 - 2 * a8 - 2)) {
      __int16 v34 = a11 - 2 * a8 - 2;
    }
    else {
      __int16 v34 = a5 - a4;
    }
    unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, a4);
    unsigned __int16 v36 = 0;
    if (a8 && ((__int16)PreviousUtf8Offset & 0x80000000) == 0)
    {
      unsigned __int16 v36 = 0;
      uint64_t v37 = PreviousUtf8Offset;
      do
      {
        Utf8_LengthInBytes((unsigned __int8 *)&__s[v37], 1);
        ++v36;
        if (!v37) {
          break;
        }
        unsigned __int16 v38 = utf8_GetPreviousUtf8Offset((uint64_t)__s, (unsigned __int16)v37);
        if ((v38 & 0x8000) != 0) {
          break;
        }
        uint64_t v37 = v38;
      }
      while (a8 > v36);
    }
    int v39 = a9;
    LOWORD(v40) = v36;
    if (a10)
    {
      uint64_t v41 = a8 >= a11 ? a11 : a8;
      LOWORD(v40) = a8;
      if (v41)
      {
        uint64_t v42 = (char **)v25;
        do
        {
          uint64_t v43 = *v42++;
          cstdlib_strcpy(v43, a10);
          --v41;
        }
        while (v41);
        LOWORD(v40) = a8;
        int v39 = a9;
      }
    }
    *a13 = v40;
    if (v39 == 1)
    {
      **(unsigned char **)(v25 + 8 * (unsigned __int16)v40) = -61;
      LOWORD(v40) = v40 + 1;
    }
    int v44 = (unsigned __int16)(v34 + a4);
    if (v44 <= (__int16)a4 || a11 <= (unsigned __int16)v40)
    {
      signed __int16 v45 = a4;
    }
    else
    {
      unint64_t v40 = (unsigned __int16)v40;
      signed __int16 v45 = a4;
      do
      {
        unsigned __int16 v46 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v45], 1);
        int v47 = cstdlib_strncmp(&__s[v45], " ", v46);
        uint64_t v48 = *(char **)(v25 + 8 * v40);
        if (v47) {
          cstdlib_strncpy(v48, &__s[v45], v46);
        }
        else {
          cstdlib_strcpy(v48, "<sp>");
        }
        ++v40;
        v45 += v46;
      }
      while (v44 > v45 && v40 < a11);
      unsigned int v26 = a8;
    }
    *a14 = v40;
    if (a9 == 1)
    {
      **(unsigned char **)(v25 + 8 * (unsigned __int16)v40) = -60;
      LOWORD(v40) = v40 + 1;
    }
    if (a11 <= (unsigned __int16)v40)
    {
      int v50 = 0;
    }
    else
    {
      int v50 = 0;
      unint64_t v40 = (unsigned __int16)v40;
      while (v71 > v45 && v26 > (unsigned __int16)v50)
      {
        unsigned __int16 v51 = Utf8_LengthInBytes((unsigned __int8 *)&__s[v45], 1);
        int v52 = cstdlib_strncmp(&__s[v45], " ", v51);
        uint64_t v53 = *(char **)(v25 + 8 * v40);
        if (v52) {
          cstdlib_strncpy(v53, &__s[v45], v51);
        }
        else {
          cstdlib_strcpy(v53, "<sp>");
        }
        unsigned int v26 = a8;
        ++v40;
        v45 += v51;
        ++v50;
        if (a11 == v40)
        {
          *a12 = a11;
          goto LABEL_62;
        }
      }
    }
    if (a10 && v26 > (unsigned __int16)v50 && a11 > (unsigned __int16)v40)
    {
      unint64_t v40 = (unsigned __int16)v40;
      do
      {
        unsigned int v56 = *(char **)(v25 + 8 * v40++);
        cstdlib_strcpy(v56, a10);
        if (v40 >= a11) {
          break;
        }
        ++v50;
      }
      while (v26 > (unsigned __int16)v50);
    }
    *a12 = v40;
    if (a11 > (unsigned __int16)v40)
    {
      uint64_t v57 = (unsigned __int16)v40;
      do
      {
        uint64_t v58 = v57 + 1;
        cstdlib_strcpy(*(char **)(v25 + 8 * v57), "\v");
        uint64_t v57 = v58;
      }
      while (a11 != (unsigned __int16)v58);
    }
LABEL_62:
    *uint64_t v69 = v25;
    unsigned __int16 v59 = utf8_GetPreviousUtf8Offset((uint64_t)__s, a4);
    uint64_t v49 = 0;
    if (a10) {
      __int16 v60 = v26;
    }
    else {
      __int16 v60 = v36;
    }
    if ((v59 & 0x8000) != 0) {
      return v49;
    }
    if (!v26) {
      return v49;
    }
    unsigned __int16 v61 = v60 - 1;
    if (a11 <= (unsigned __int16)(v60 - 1)) {
      return v49;
    }
    int v62 = 0;
    uint64_t v63 = v59;
    while (1)
    {
      size_t v64 = (unsigned __int16)Utf8_LengthInBytes((unsigned __int8 *)&__s[v63], 1);
      int v65 = cstdlib_strncmp(&__s[v63], " ", v64);
      uint64_t v66 = *(char **)(v25 + 8 * v61);
      if (v65)
      {
        cstdlib_strncpy(v66, &__s[v63], v64);
        if (v63) {
          goto LABEL_71;
        }
      }
      else
      {
        cstdlib_strcpy(v66, "<sp>");
        if (v63)
        {
LABEL_71:
          uint64_t v63 = (unsigned __int16)utf8_GetPreviousUtf8Offset((uint64_t)__s, (unsigned __int16)v63);
          goto LABEL_74;
        }
      }
      uint64_t v63 = 0xFFFFLL;
LABEL_74:
      uint64_t v49 = 0;
      if ((v63 & 0x8000) == 0 && a8 > (unsigned __int16)++v62 && a11 > --v61) {
        continue;
      }
      return v49;
    }
  }
  uint64_t v27 = 0;
  uint64_t v28 = 8 * a11;
  while (1)
  {
    uint64_t v29 = heap_Calloc(*(void **)(a1 + 8), 1, 5);
    *(void *)(v25 + v27) = v29;
    if (!v29) {
      break;
    }
    v27 += 8;
    if (v28 == v27) {
      goto LABEL_6;
    }
  }
  log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v30, v31, v32, v33, v68);
  uint64_t v54 = 0;
  do
  {
    uint64_t v55 = *(void *)(v25 + v54);
    if (v55) {
      heap_Free(*(void **)(a1 + 8), v55);
    }
    v54 += 8;
  }
  while (v28 != v54);
  uint64_t v49 = 2304778250;
  heap_Free(*(void **)(a1 + 8), v25);
  *uint64_t v69 = 0;
  return v49;
}

uint64_t nn_tn_process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, char *__s, void *a9)
{
  uint64_t v11 = 0;
  uint64_t v86 = 0;
  unsigned __int16 v85 = 0;
  uint64_t v84 = 0;
  int v83 = 0;
  uint64_t v82 = 0;
  if (*(_DWORD *)a3) {
    goto LABEL_2;
  }
  uint64_t CharContextString = nn_tn_getCharContextString(a1, a2, __s, a6, a7, (uint64_t *)(a3 + 184), (unsigned __int16 *)(a3 + 192), *(unsigned __int16 *)(a3 + 4), *(_DWORD *)(a3 + 12), *(const char **)(a3 + 16), *(_WORD *)(a3 + 28), &v85, (_WORD *)&v83 + 1, &v83);
  if ((CharContextString & 0x80000000) != 0)
  {
    uint64_t v11 = CharContextString;
    goto LABEL_2;
  }
  uint64_t v81 = a4;
  log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"char context:", v17, v18, v19, 0);
  if (*(_WORD *)(a3 + 28))
  {
    unint64_t v23 = 0;
    do
      log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[%d] \"%s\"%s", v20, v21, v22, v23++);
    while (v23 < *(unsigned __int16 *)(a3 + 28));
  }
  uint64_t v24 = (_DWORD *)heap_Alloc(*(void *)(a1 + 8), 4 * *(unsigned int *)(a3 + 112));
  uint64_t v86 = (uint64_t)v24;
  if (v24)
  {
    uint64_t v29 = v24;
    uint64_t v79 = a5;
    unsigned int v30 = *(_DWORD *)(a3 + 112);
    if (v30)
    {
      int v31 = 0;
      do
        v24[(unsigned __int16)v31++] = 0;
      while (v30 > (unsigned __int16)v31);
    }
    uint64_t v32 = v85;
    if (v85)
    {
      unint64_t v33 = 0;
      unint64_t v80 = HIWORD(v83);
      unint64_t v78 = (unsigned __int16)v83;
      do
      {
        unsigned int v34 = *(_DWORD *)(a3 + 168) + *(unsigned __int16 *)(a3 + 36);
        uint64_t v35 = *(const char **)(*(void *)(a3 + 184) + 8 * v33);
        int v36 = *(unsigned __int8 *)v35;
        if (v36 == 195)
        {
          if (v34)
          {
            int v39 = 0;
            int v40 = v33 * v34;
            do
            {
              v29[v40] = -1082130432;
              ++v39;
              ++v40;
            }
            while (v34 > (unsigned __int16)v39);
          }
        }
        else if (v36 == 196)
        {
          if (v34)
          {
            int v37 = 0;
            int v38 = v33 * v34;
            do
            {
              v29[v38] = -1073741824;
              ++v37;
              ++v38;
            }
            while (v34 > (unsigned __int16)v37);
          }
        }
        else
        {
          uint64_t v41 = *(const char **)(a3 + 16);
          unsigned int v42 = *(_DWORD *)(a3 + 168) + *(unsigned __int16 *)(a3 + 36);
          if (v41
            && (v43 = cstdlib_strcmp(v35, v41), unsigned int v42 = *(_DWORD *)(a3 + 168) + *(unsigned __int16 *)(a3 + 36), !v43))
          {
            if (v42)
            {
              int v57 = 0;
              int v58 = v33 * v34;
              do
              {
                v29[v58] = -1082130432;
                ++v57;
                ++v58;
              }
              while (v42 > (unsigned __int16)v57);
            }
          }
          else
          {
            if (v42)
            {
              int v44 = 0;
              int v45 = v33 * v34;
              do
              {
                v29[v45] = 0;
                ++v44;
                ++v45;
              }
              while (v42 > (unsigned __int16)v44);
            }
            uint64_t v46 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a3 + 128) + 56))(*(void *)(a3 + 152), *(void *)(a3 + 160), *(void *)(*(void *)(a3 + 184) + 8 * v33), *(void *)(a3 + 176));
            if ((v46 & 0x1FFF) == 0x14)
            {
              if (((*(uint64_t (**)(void, void, const char *, void))(*(void *)(a3 + 128) + 56))(*(void *)(a3 + 152), *(void *)(a3 + 160), "$MEANW2V$", *(void *)(a3 + 176)) & 0x1FFF) == 0x14)
              {
                uint64_t v11 = 2304778240;
                log_OutPublic(*(void *)(a1 + 32), a2, 24066, (uint64_t)"%s%s", v51, v52, v53, v54, "expected");
                goto LABEL_2;
              }
            }
            else
            {
              uint64_t v11 = v46;
              if ((v46 & 0x80000000) != 0)
              {
                uint64_t v64 = *(void *)(a1 + 32);
                uint64_t v65 = a2;
                uint64_t v66 = 24068;
LABEL_54:
                log_OutPublic(v64, v65, v66, 0, v47, v48, v49, v50, v77);
                goto LABEL_2;
              }
            }
            int v55 = v34 * v33;
            cstdlib_memcpy(&v29[v55], *(const void **)(a3 + 176), 4 * *(unsigned int *)(a3 + 168));
            if (*(_DWORD *)(a3 + 32) == 1)
            {
              LOWORD(v56) = *(_WORD *)(v79 + 24);
              *(float *)&v29[*(_DWORD *)(a3 + 168) + v55] = (float)v56;
            }
            if (*(_DWORD *)(a3 + 12) == 2 && v33 >= v80 && v33 < v78) {
              v29[v55 + *(_DWORD *)(a3 + 168) + 1] = 1065353216;
            }
          }
        }
        ++v33;
      }
      while (v33 != v32);
    }
    uint64_t v11 = fi_predict(*(uint64_t ****)(a3 + 104), (const void **)&v86, *(unsigned __int16 *)(a3 + 28), &v84, v25, v26, v27, v28);
    if ((v11 & 0x80000000) != 0)
    {
      uint64_t v64 = *(void *)(a1 + 32);
      uint64_t v65 = a2;
      uint64_t v66 = 24065;
      goto LABEL_54;
    }
    if (*(_WORD *)(a3 + 30))
    {
      uint64_t v59 = 0;
      unsigned __int16 v60 = 0;
      float v61 = 0.0;
      int v62 = (float *)v79;
      do
      {
        if (v61 < *(float *)(v84 + 4 * v59))
        {
          float v61 = *(float *)(v84 + 4 * v59);
          unsigned __int16 v60 = v59;
        }
        ++v59;
      }
      while (*(unsigned __int16 *)(a3 + 30) != v59);
      uint64_t v63 = v60;
    }
    else
    {
      uint64_t v63 = 0;
      float v61 = 0.0;
      int v62 = (float *)v79;
    }
    log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"results (threshold=%1.5lf)", v48, v49, v50, COERCE__INT64(*v62));
    if (*(_WORD *)(a3 + 30))
    {
      unint64_t v70 = 0;
      do
        log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"[%3d] %1.5lf : %s %s", v67, v68, v69, v70++);
      while (v70 < *(unsigned __int16 *)(a3 + 30));
    }
    if (*(unsigned __int16 *)(v79 + 4) >= 2u)
    {
      unsigned __int16 v71 = 0;
      do
      {
        uint64_t v72 = v71;
        if (!cstdlib_strcmp(*(const char **)(*(void *)(a3 + 80) + 8 * v63), *(const char **)(*(void *)(v79 + 8) + 8 * v71)))
        {
          uint64_t v73 = ssftmap_Find(*(void *)(a3 + 48), *(void *)(*(void *)(v79 + 8) + 8 * v72), &v82);
          if ((v73 & 0x80000000) != 0 || v61 >= *v82)
          {
            if (v61 >= *(float *)v79)
            {
              *a9 = *(void *)(*(void *)(v79 + 8) + 8 * v72);
              log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"validated prediction for pattern \"%s\"", v74, v75, v76, v81);
              uint64_t v11 = 0;
              goto LABEL_2;
            }
            log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"blocked selected prediction \"%s\"; value %1.5lf below pattern threshold %1.5lf",
              v74,
              v75,
              v76,
              v81);
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = v73;
            log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"blocked selected prediction \"%s\"; value %1.5lf below individual threshold for %s (%1.5f)",
              v74,
              v75,
              v76,
              v81);
          }
        }
        unsigned __int16 v71 = v72 + 1;
      }
      while (*(unsigned __int16 *)(v79 + 4) - 1 > (unsigned __int16)(v72 + 1));
    }
    log_OutText(*(void *)(a1 + 32), a2, 5, 0, (uint64_t)"invalid or blocked prediction for pattern \"%s\", set to default \"%s\"", v67, v68, v69, v81);
    *a9 = *(void *)(v79 + 16);
LABEL_2:
    nn_tn_freeSentData(a1, a3);
    if (v86) {
      heap_Free(*(void **)(a1 + 8), v86);
    }
  }
  else
  {
    log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v25, v26, v27, v28, v77);
    return 2304778250;
  }
  return v11;
}

uint64_t getStringFeatureValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  *(void *)&__c[3] = 0;
  *(_WORD *)&__c[1] = -1;
  __c[0] = 0;
  *a7 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, unsigned char *, unsigned char *, unsigned char *))(a3 + 96))(a4, a5, "fecfg", a6, &__c[3], &__c[1], __c);
  if ((v10 & 0x80000000) == 0 && *(unsigned __int16 *)&__c[1] == 1 && *(void *)&__c[3] != 0)
  {
    uint64_t v12 = cstdlib_strchr(**(char ***)&__c[3], __c[0]);
    if (v12) {
      *uint64_t v12 = 0;
    }
    uint64_t v13 = *(void **)(a1 + 8);
    int v14 = cstdlib_strlen(**(const char ***)&__c[3]);
    uint64_t v15 = (char *)heap_Calloc(v13, 1, (v14 + 1));
    *a7 = v15;
    if (v15)
    {
      cstdlib_strcpy(v15, **(const char ***)&__c[3]);
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), a2, 37000, 0, v16, v17, v18, v19, v21);
      return 2304778250;
    }
  }
  return v10;
}

uint64_t setModelPredictions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  unsigned int v139 = 0;
  __int16 v138 = -1;
  unsigned __int8 v137 = 0;
  uint64_t v136 = 0;
  long long v134 = 0u;
  long long v135 = 0u;
  long long __b = 0u;
  long long v133 = 0u;
  unsigned __int16 v131 = 0;
  uint64_t v129 = 0;
  long long v127 = 0u;
  long long v128 = 0u;
  uint64_t NumericFeatureValue = getNumericFeatureValue(a3, a4, a5, (uint64_t)"nn_tn_numPatterns", &v131);
  if ((NumericFeatureValue & 0x80000000) == 0 && v131)
  {
    cstdlib_memset(&__b, 0, 0x20uLL);
    uint64_t v13 = getNumericFeatureValue(a3, a4, a5, (uint64_t)"nn_tn_numAllPredictions", (_WORD *)(a6 + 72));
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v14 = heap_Calloc(*(void **)(a1 + 8), 1, 8 * *(unsigned __int16 *)(a6 + 72));
      *(void *)(a6 + 80) = v14;
      if (!v14
        || (uint64_t v19 = *(void **)(a1 + 8),
            size_t v20 = cstdlib_strlen("DEFAULT"),
            **(void **)(a6 + 80) = heap_Calloc(v19, 1, v20 + 1),
            (unsigned int v21 = **(char ***)(a6 + 80)) == 0))
      {
LABEL_76:
        uint64_t NumericFeatureValue = 2304778250;
        log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v15, v16, v17, v18, v121);
        return NumericFeatureValue;
      }
      __int16 v130 = 1;
      cstdlib_strcpy(v21, "DEFAULT");
      cstdlib_memset(&v134, 0, 0x28uLL);
      *(void *)&long long v134 = ssftmap_ElemCopyString;
      *((void *)&v135 + 1) = patternMap_CopyData;
      *((void *)&v134 + 1) = ssftmap_ElemFreeString;
      uint64_t v136 = patternMap_FreeData;
      *(void *)&long long v135 = ssftmap_ElemCompareKeysString;
      uint64_t v22 = *(void **)(a1 + 8);
      long long v143 = v134;
      long long v144 = v135;
      uint64_t v145 = patternMap_FreeData;
      uint64_t v13 = ssftmap_ObjOpen(v22, 0, &v143, (uint64_t *)(a6 + 40));
      if ((v13 & 0x80000000) == 0)
      {
        cstdlib_memset(&v127, 0, 0x28uLL);
        *(void *)&long long v127 = ssftmap_ElemCopyString;
        *((void *)&v128 + 1) = floatThreshold_CopyData;
        *((void *)&v127 + 1) = ssftmap_ElemFreeString;
        uint64_t v129 = floatThreshold_FreeData;
        *(void *)&long long v128 = ssftmap_ElemCompareKeysString;
        unint64_t v23 = *(void **)(a1 + 8);
        long long v143 = v127;
        long long v144 = v128;
        uint64_t v145 = floatThreshold_FreeData;
        uint64_t v13 = ssftmap_ObjOpen(v23, 0, &v143, (uint64_t *)(a6 + 48));
        if ((v13 & 0x80000000) == 0)
        {
          int v24 = 0;
          uint64_t v126 = a2;
          while (1)
          {
            setDictKeyString(&v143, "nn_tn_patternName", (unsigned __int16)++v24);
            __int16 v138 = -1;
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v143, &v139, &v138, &v137);
            if ((v13 & 0x80000000) != 0) {
              return v13;
            }
            int v123 = v24;
            if (v138)
            {
              uint64_t v25 = *v139;
              uint64_t v26 = cstdlib_strchr(*v139, v137);
              a2 = v126;
              if (v26) {
                *uint64_t v26 = 0;
              }
              uint64_t v27 = *(void **)(a1 + 8);
              size_t v28 = cstdlib_strlen(v25);
              uint64_t v29 = (char *)heap_Calloc(v27, 1, v28 + 1);
              if (!v29) {
                goto LABEL_76;
              }
              uint64_t v30 = (uint64_t)v29;
              cstdlib_strcpy(v29, v25);
              int v24 = v123;
            }
            else
            {
              uint64_t v30 = 0;
              a2 = v126;
            }
            setDictKeyString(&v143, "nn_tn_patternThreshold", (unsigned __int16)v24);
            uint64_t v142 = 0;
            __int16 v141 = -1;
            unsigned __int8 v140 = 0;
            LODWORD(__b) = 0;
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v143, &v142, &v141, &v140);
            if ((v31 & 0x80000000) != 0) {
              goto LABEL_81;
            }
            if (v141 == 1 && v142)
            {
              uint64_t v32 = cstdlib_strchr(*v142, v140);
              if (v32) {
                *uint64_t v32 = 0;
              }
              cstdlib_atof((unsigned __int8 *)*v142);
              *(float *)&double v33 = v33;
              LODWORD(__b) = LODWORD(v33);
            }
            setDictKeyString(&v143, "nn_tn_numPredictions", (unsigned __int16)v24);
            uint64_t v31 = getNumericFeatureValue(a3, a4, a5, (uint64_t)&v143, (_WORD *)&__b + 2);
            if ((v31 & 0x80000000) != 0)
            {
LABEL_81:
              uint64_t NumericFeatureValue = v31;
              goto LABEL_91;
            }
            *((void *)&__b + 1) = heap_Calloc(*(void **)(a1 + 8), 1, 8 * WORD2(__b));
            if (!*((void *)&__b + 1))
            {
              uint64_t NumericFeatureValue = 2304778250;
              log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v34, v35, v36, v37, v121);
              goto LABEL_91;
            }
            setDictKeyString(&v143, "nn_tn_predictions", (unsigned __int16)v24);
            uint64_t v38 = *((void *)&__b + 1);
            uint64_t v124 = *(void *)(a6 + 80);
            uint64_t v142 = 0;
            __int16 v141 = -1;
            unsigned __int8 v140 = 0;
            uint64_t NumericFeatureValue = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v143, &v142, &v141, &v140);
            uint64_t v122 = v30;
            if ((NumericFeatureValue & 0x80000000) == 0 && v141)
            {
              int v39 = *v142;
              int v40 = cstdlib_strchr(*v142, v140);
              if (v40) {
                char *v40 = 0;
              }
              cstdlib_strlen(v39);
              uint64_t v41 = cstdlib_strchr(v39, 59);
              if (v41)
              {
                unsigned int v42 = v41;
                LOWORD(v43) = 0;
                while (1)
                {
                  *unsigned int v42 = 0;
                  int v44 = *(void **)(a1 + 8);
                  size_t v45 = cstdlib_strlen(v39);
                  uint64_t v46 = (char *)heap_Calloc(v44, 1, v45 + 1);
                  *(void *)(v38 + 8 * (unsigned __int16)v43) = v46;
                  if (!v46) {
                    break;
                  }
                  cstdlib_strcpy(v46, v39);
                  uint64_t v51 = addToAllPredictions(a1, v126, v39, v124, &v130);
                  if ((v51 & 0x80000000) != 0)
                  {
                    uint64_t NumericFeatureValue = v51;
                    goto LABEL_83;
                  }
                  LOWORD(v43) = v43 + 1;
                  int v39 = v42 + 1;
                  unsigned int v42 = cstdlib_strchr(v42 + 1, 59);
                  if (!v42)
                  {
                    uint64_t v43 = (unsigned __int16)v43;
                    goto LABEL_36;
                  }
                }
LABEL_78:
                uint64_t NumericFeatureValue = 2304778250;
                uint64_t v117 = *(void *)(a1 + 32);
                uint64_t v118 = v126;
LABEL_79:
                log_OutPublic(v117, v118, 24048, 0, v47, v48, v49, v50, v121);
                goto LABEL_83;
              }
              if (!v39)
              {
                a2 = v126;
                int v55 = (_WORD *)(a6 + 72);
                int v24 = v123;
                goto LABEL_39;
              }
              uint64_t v43 = 0;
LABEL_36:
              uint64_t v52 = *(void **)(a1 + 8);
              size_t v53 = cstdlib_strlen(v39);
              uint64_t v54 = (char *)heap_Calloc(v52, 1, v53 + 1);
              *(void *)(v38 + 8 * v43) = v54;
              if (!v54) {
                goto LABEL_78;
              }
              cstdlib_strcpy(v54, v39);
              a2 = v126;
              uint64_t NumericFeatureValue = addToAllPredictions(a1, v126, v39, v124, &v130);
              uint64_t v30 = v122;
              int v24 = v123;
            }
            int v55 = (_WORD *)(a6 + 72);
            if ((NumericFeatureValue & 0x80000000) != 0) {
              goto LABEL_91;
            }
LABEL_39:
            setDictKeyString(&v143, "nn_tn_predictionsThresholds", (unsigned __int16)v24);
            uint64_t v125 = *(void *)(a6 + 48);
            uint64_t v142 = 0;
            __int16 v141 = -1;
            unsigned __int8 v140 = 0;
            uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v143, &v142, &v141, &v140);
            uint64_t NumericFeatureValue = v56;
            if ((v56 & 0x80000000) != 0 || !v141)
            {
              if ((v56 & 0x80000000) != 0) {
                goto LABEL_91;
              }
            }
            else
            {
              int v57 = *v142;
              int v58 = cstdlib_strchr(*v142, v140);
              if (v58) {
                *int v58 = 0;
              }
              cstdlib_strlen(v57);
              uint64_t v59 = cstdlib_strchr(v57, 59);
              if (v59)
              {
                unsigned __int16 v60 = v59;
                while (1)
                {
                  *unsigned __int16 v60 = 0;
                  float v61 = cstdlib_strchr(v57, 44);
                  if (!v61) {
                    break;
                  }
                  uint64_t v66 = v61;
                  uint64_t v67 = *(void **)(a1 + 8);
                  size_t v68 = cstdlib_strlen(v57);
                  uint64_t v69 = (const char *)heap_Calloc(v67, 1, v68 + 1);
                  if (!v69) {
                    goto LABEL_78;
                  }
                  unint64_t v70 = (void *)v69;
                  size_t v71 = cstdlib_strlen(v69);
                  cstdlib_memset(v70, 0, v71);
                  cstdlib_strncpy((char *)v70, v57, (unsigned __int16)((_WORD)v66 - (_WORD)v57));
                  uint64_t v72 = *(void **)(a1 + 8);
                  size_t v73 = cstdlib_strlen(v57);
                  uint64_t v74 = heap_Calloc(v72, 1, v73 + 1);
                  if (!v74) {
                    goto LABEL_84;
                  }
                  uint64_t v79 = (void *)v74;
                  size_t v80 = cstdlib_strlen(v57);
                  cstdlib_memset(v79, 0, v80 + 1);
                  cstdlib_strcpy((char *)v79, v66 + 1);
                  uint64_t v81 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), 1, 4);
                  if (!v81) {
                    goto LABEL_85;
                  }
                  uint64_t v86 = v81;
                  cstdlib_memset(v81, 0, 4uLL);
                  cstdlib_atof((unsigned __int8 *)v79);
                  *(float *)&double v87 = v87;
                  *uint64_t v86 = LODWORD(v87);
                  log_OutText(*(void *)(a1 + 32), v126, 5, 0, (uint64_t)"Adding individual threshold %s : %1.5lf", v88, v89, v90, (uint64_t)v70);
                  uint64_t v91 = ssftmap_Insert(v125, (uint64_t)v70, (uint64_t)v86);
                  if ((v91 & 0x80000000) != 0) {
                    goto LABEL_86;
                  }
                  int v57 = v60 + 1;
                  unsigned __int16 v60 = cstdlib_strchr(v60 + 1, 59);
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v70);
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v79);
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v86);
                  a2 = v126;
                  if (!v60) {
                    goto LABEL_55;
                  }
                }
LABEL_82:
                log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v62, v63, v64, v65, v121);
                uint64_t NumericFeatureValue = 2304778246;
LABEL_83:
                uint64_t v30 = v122;
                goto LABEL_91;
              }
              if (v57)
              {
LABEL_55:
                unint64_t v92 = cstdlib_strchr(v57, 44);
                if (!v92) {
                  goto LABEL_82;
                }
                uint64_t v93 = v92;
                unsigned int v94 = *(void **)(a1 + 8);
                size_t v95 = cstdlib_strlen(v57);
                uint64_t v96 = heap_Calloc(v94, 1, v95 + 1);
                if (!v96)
                {
LABEL_95:
                  uint64_t NumericFeatureValue = 2304778250;
                  uint64_t v117 = *(void *)(a1 + 32);
                  uint64_t v118 = a2;
                  goto LABEL_79;
                }
                unint64_t v70 = (void *)v96;
                size_t v97 = cstdlib_strlen(v57);
                cstdlib_memset(v70, 0, v97);
                cstdlib_strncpy((char *)v70, v57, (unsigned __int16)((_WORD)v93 - (_WORD)v57));
                unint64_t v98 = *(void **)(a1 + 8);
                size_t v99 = cstdlib_strlen(v57);
                uint64_t v100 = heap_Calloc(v98, 1, v99 + 1);
                if (!v100)
                {
LABEL_84:
                  uint64_t v30 = v122;
                  uint64_t NumericFeatureValue = 2304778250;
                  log_OutPublic(*(void *)(a1 + 32), v126, 24048, 0, v75, v76, v77, v78, v121);
                  uint64_t v119 = *(void **)(a1 + 8);
                  uint64_t v120 = (uint64_t)v70;
                  goto LABEL_89;
                }
                uint64_t v79 = (void *)v100;
                size_t v101 = cstdlib_strlen(v57);
                cstdlib_memset(v79, 0, v101 + 1);
                cstdlib_strcpy((char *)v79, v93 + 1);
                uint64_t v102 = (_DWORD *)heap_Calloc(*(void **)(a1 + 8), 1, 4);
                if (!v102)
                {
LABEL_85:
                  uint64_t NumericFeatureValue = 2304778250;
                  log_OutPublic(*(void *)(a1 + 32), v126, 24048, 0, v82, v83, v84, v85, v121);
                  uint64_t v86 = 0;
LABEL_87:
                  uint64_t v30 = v122;
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v70);
                  heap_Free(*(void **)(a1 + 8), (uint64_t)v79);
                  if (v86)
                  {
                    uint64_t v119 = *(void **)(a1 + 8);
                    uint64_t v120 = (uint64_t)v86;
LABEL_89:
                    heap_Free(v119, v120);
                  }
LABEL_91:
                  if (v30) {
                    heap_Free(*(void **)(a1 + 8), v30);
                  }
                  return NumericFeatureValue;
                }
                uint64_t v86 = v102;
                cstdlib_memset(v102, 0, 4uLL);
                cstdlib_atof((unsigned __int8 *)v79);
                *(float *)&double v103 = v103;
                *uint64_t v86 = LODWORD(v103);
                log_OutText(*(void *)(a1 + 32), v126, 5, 0, (uint64_t)"Adding individual threshold %s : %1.5lf", v104, v105, v106, (uint64_t)v70);
                uint64_t v91 = ssftmap_Insert(v125, (uint64_t)v70, (uint64_t)v86);
                if ((v91 & 0x80000000) != 0)
                {
LABEL_86:
                  uint64_t NumericFeatureValue = v91;
                  goto LABEL_87;
                }
                heap_Free(*(void **)(a1 + 8), (uint64_t)v70);
                heap_Free(*(void **)(a1 + 8), (uint64_t)v79);
                heap_Free(*(void **)(a1 + 8), (uint64_t)v86);
                a2 = v126;
                int v55 = (_WORD *)(a6 + 72);
              }
              uint64_t v30 = v122;
              int v24 = v123;
            }
            setDictKeyString(&v143, "nn_tn_defaultPrediction", (unsigned __int16)v24);
            __int16 v138 = -1;
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, long long *, char ***, __int16 *, unsigned __int8 *))(a3 + 96))(a4, a5, "fecfg", &v143, &v139, &v138, &v137);
            if ((v31 & 0x80000000) != 0) {
              goto LABEL_81;
            }
            if (v138)
            {
              uint64_t v107 = *v139;
              uint64_t v108 = cstdlib_strchr(*v139, v137);
              if (v108) {
                char *v108 = 0;
              }
              unsigned int v109 = *(void **)(a1 + 8);
              size_t v110 = cstdlib_strlen(v107);
              unsigned __int16 v111 = (char *)heap_Calloc(v109, 1, v110 + 1);
              *(void *)&long long v133 = v111;
              if (!v111) {
                goto LABEL_95;
              }
              cstdlib_strcpy(v111, v107);
              uint64_t v30 = v122;
              int v24 = v123;
            }
            setDictKeyString(&v143, "nn_tn_patternIndex", (unsigned __int16)v24);
            uint64_t v31 = getNumericFeatureValue(a3, a4, a5, (uint64_t)&v143, (_WORD *)&v133 + 4);
            if ((v31 & 0x80000000) != 0) {
              goto LABEL_81;
            }
            uint64_t NumericFeatureValue = ssftmap_Insert(*(void *)(a6 + 40), v30, (uint64_t)&__b);
            if ((NumericFeatureValue & 0x80000000) != 0) {
              goto LABEL_91;
            }
            cstdlib_memset(&__b, 0, 0x20uLL);
            if (v30) {
              heap_Free(*(void **)(a1 + 8), v30);
            }
            if (v131 <= (unsigned __int16)v24)
            {
              if (v130 != *v55)
              {
                log_OutPublic(*(void *)(a1 + 32), v126, 24071, 0, v112, v113, v114, v115, v121);
                return 2304778240;
              }
              return NumericFeatureValue;
            }
          }
        }
      }
    }
    return v13;
  }
  return NumericFeatureValue;
}

uint64_t patternMap_CopyData(const void *a1, void *a2, void *a3)
{
  uint64_t v3 = 2304778247;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (void *)heap_Calloc(a2, 1, 32);
    if (v6)
    {
      uint64_t v7 = v6;
      cstdlib_memcpy(v6, a1, 0x20uLL);
      uint64_t v3 = 0;
      *a3 = v7;
    }
    else
    {
      return 2304778250;
    }
  }
  return v3;
}

void *patternMap_FreeData(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v4 = result[1];
    if (v4)
    {
      if (*((_WORD *)result + 2))
      {
        unint64_t v5 = 0;
        do
        {
          heap_Free(a2, *(void *)(*(void *)(v3 + 8) + 8 * v5));
          *(void *)(*(void *)(v3 + 8) + 8 * v5++) = 0;
        }
        while (v5 < *(unsigned __int16 *)(v3 + 4));
        uint64_t v4 = *(void *)(v3 + 8);
      }
      *(_WORD *)(v3 + 4) = 0;
      heap_Free(a2, v4);
      *(void *)(v3 + 8) = 0;
    }
    uint64_t v6 = *(void *)(v3 + 16);
    if (v6)
    {
      heap_Free(a2, v6);
      *(void *)(v3 + 16) = 0;
    }
    return heap_Free(a2, v3);
  }
  return result;
}

uint64_t floatThreshold_CopyData(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 2304778247;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (void *)heap_Alloc(a2, 4);
    if (v6)
    {
      uint64_t v7 = v6;
      cstdlib_memcpy(v6, a1, 4uLL);
      uint64_t v3 = 0;
      *a3 = v7;
    }
    else
    {
      return 2304778250;
    }
  }
  return v3;
}

void *floatThreshold_FreeData(void *result, void *a2)
{
  if (result) {
    return heap_Free(a2, (uint64_t)result);
  }
  return result;
}

char *setDictKeyString(void *a1, const char *a2, unsigned int a3)
{
  cstdlib_memset(a1, 0, 0x20uLL);
  cstdlib_strcpy((char *)a1, a2);
  uint64_t v6 = LH_itoa(a3, v8, 0xAu);
  return cstdlib_strcat((char *)a1, v6);
}

uint64_t addToAllPredictions(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, _WORD *a5)
{
  if (*a5)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t result = cstdlib_strcmp(__s, *(const char **)(a4 + 8 * v10));
      if (!result) {
        break;
      }
      if (++v10 >= (unint64_t)(unsigned __int16)*a5) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v12 = *(void **)(a1 + 8);
    size_t v13 = cstdlib_strlen(__s);
    uint64_t v14 = (char *)heap_Calloc(v12, 1, v13 + 1);
    uint64_t v19 = (unsigned __int16)*a5;
    *(void *)(a4 + 8 * v19) = v14;
    if (v14)
    {
      *a5 = v19 + 1;
      cstdlib_strcpy(v14, __s);
      return 0;
    }
    else
    {
      log_OutPublic(*(void *)(a1 + 32), a2, 24048, 0, v15, v16, v17, v18, v20);
      return 2304778250;
    }
  }
  return result;
}

uint64_t fe_udwl_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  unsigned int v24 = 0;
  if (!a5) {
    return 2323652615;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"SYNTHSTREAM", &v27);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(*(void *)(v28 + 48), (uint64_t)"FE_DEPES", &v26);
  uint64_t v10 = *(void *)(v28 + 48);
  if ((Object & 0x80000000) != 0)
  {
    objc_ReleaseObject(v10, (uint64_t)"SYNTHSTREAM");
  }
  else
  {
    objc_GetObject(v10, (uint64_t)"DCTEG", &v25);
    uint64_t v11 = heap_Calloc(*(void **)(v28 + 8), 1, 976);
    if (v11)
    {
      uint64_t v16 = v11;
      *(void *)uint64_t v11 = a3;
      *(void *)(v11 + 8) = a4;
      uint64_t v18 = v27;
      uint64_t v17 = v28;
      *(void *)(v11 + 16) = v28;
      *(void *)(v11 + 48) = *(void *)(v18 + 8);
      uint64_t v19 = v26;
      *(void *)(v11 + 40) = *(void *)(v26 + 8);
      *(_OWORD *)(v11 + 24) = *(_OWORD *)(v19 + 16);
      uint64_t v20 = v25;
      if (v25)
      {
        uint64_t v21 = *(void *)(v25 + 8);
        if (v21)
        {
          *(void *)(v11 + 944) = v21;
          *(_OWORD *)(v11 + 952) = *(_OWORD *)(v20 + 16);
        }
      }
      *(_WORD *)(v11 + 968) = 512;
      if ((paramc_ParamGetUInt(*(void *)(v17 + 40), (uint64_t)"udctmaxlookuplen", &v24) & 0x80000000) == 0) {
        *(_WORD *)(v16 + 968) = v24;
      }
      *(void *)a5 = v16;
      *(_DWORD *)(a5 + 8) = 62346;
    }
    else
    {
      log_OutPublic(*(void *)(v28 + 32), (uint64_t)"FE_UDWL", 40000, 0, v12, v13, v14, v15, v23);
      objc_ReleaseObject(*(void *)(v28 + 48), (uint64_t)"SYNTHSTREAM");
      objc_ReleaseObject(*(void *)(v28 + 48), (uint64_t)"FE_DEPES");
      if (v25) {
        objc_ReleaseObject(*(void *)(v28 + 48), (uint64_t)"DCTEG");
      }
      return 2323652618;
    }
  }
  return Object;
}

uint64_t fe_udwl_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62346, 976);
  if ((result & 0x80000000) != 0) {
    return 2323652616;
  }
  if (a1)
  {
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"FE_DEPES");
    if (*(void *)(a1 + 944)) {
      objc_ReleaseObject(*(void *)(*(void *)(a1 + 16) + 48), (uint64_t)"DCTEG");
    }
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_udwl_ObjReopen(uint64_t a1, int a2)
{
  unsigned int v6 = 0;
  uint64_t v3 = safeh_HandleCheck(a1, a2, 62346, 976);
  if ((v3 & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v4 = v3;
  if (a1)
  {
    *(_WORD *)(a1 + 968) = 512;
    if ((paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"udctmaxlookuplen", &v6) & 0x80000000) == 0) {
      *(_WORD *)(a1 + 968) = v6;
    }
  }
  return v4;
}

uint64_t fe_udwl_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  synstrmaux_InitStreamOpener(a1 + 56, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 56), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 880);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 56), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 896);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 56), (uint64_t)"text/plain;charset=utf-8", a1 + 912);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 56), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 928);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 56), *(void *)(a1 + 48), a3, a4);
  if ((v7 & 0x80000000) != 0) {
    synstrmaux_CloseStreams((_WORD *)(a1 + 56), *(void *)(a1 + 48));
  }
  return v7;
}

BOOL sameLanguage(const char *a1, char *__s1, const char *a3)
{
  if (cstdlib_strcmp(__s1, "normal")) {
    return cstdlib_strstr(__s1, a3) != 0;
  }
  else {
    return cstdlib_strcmp(a3, a1) == 0;
  }
}

uint64_t fe_udwl_Process(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __src[1] = *MEMORY[0x263EF8340];
  long long v407 = 0uLL;
  uint64_t v8 = 2323652618;
  int v403 = 0;
  int v404 = 0;
  uint64_t v402 = 0;
  int v400 = 0;
  v399 = 0;
  int v397 = 0;
  unsigned __int16 v396 = 0;
  uint64_t v395 = 15;
  unsigned int v394 = 0;
  int v393 = 0;
  *(void *)unsigned __int16 __s1 = 0;
  uint64_t v392 = 0;
  unsigned int v389 = 0;
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v406 = 0;
  unsigned int v405 = 0;
  int v401 = 0;
  *a5 = 1;
  int UInt = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"numberoutputtranscriptions", &v389);
  int v10 = (unsigned __int16)v389;
  if ((int)paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"udctmaxdictretlen", &v389) < 0) {
    unsigned __int16 v11 = 512;
  }
  else {
    unsigned __int16 v11 = v389;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 48) + 144))(*(void *)(a1 + 880), *(void *)(a1 + 888), (char *)&v407 + 12, (char *)&v407 + 4);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v18 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 48) + 144))(*(void *)(a1 + 896), *(void *)(a1 + 904), (char *)&v407 + 8, (char *)&v407 + 4);
  if ((v18 & 0x80000000) != 0) {
    return v18;
  }
  log_OutTraceTuningData(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 104, (uint64_t)"%s%s", v13, v14, v15, v16, v17, "BEG");
  if (HIDWORD(v407))
  {
    uint64_t v12 = (*(uint64_t (**)(void, void, char *, char *))(*(void *)(a1 + 48) + 144))(*(void *)(a1 + 880), *(void *)(a1 + 888), (char *)&v407 + 12, (char *)&v407 + 4);
    if ((v12 & 0x80000000) == 0)
    {
      unsigned int v23 = (unsigned char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, (HIDWORD(v407) + 1));
      if (!v23)
      {
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v19, v20, v21, v22, v323);
        uint64_t v54 = 0;
        unint64_t v387 = 0;
        uint64_t v32 = 0;
        uint64_t v386 = 0;
        uint64_t v41 = 0;
        uint64_t v39 = 0;
        unsigned __int16 v55 = 0;
        uint64_t v42 = 0;
LABEL_120:
        log_OutTraceTuningData(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 104, (uint64_t)"%s%s %s%u", v49, v50, v51, v52, v53, "END");
        if (v54 && v23)
        {
          unsigned int v106 = v396 + v55;
          if (v106 < 2) {
            goto LABEL_130;
          }
          unsigned __int16 v107 = 1;
          do
          {
            uint64_t v108 = v107;
            if (*(_DWORD *)&v23[4 * v107])
            {
              uint64_t v109 = *(void *)(v54 + 8 * v107);
              if (*(_DWORD *)v109 != 7)
              {
                heap_Free(*(void **)(*(void *)(a1 + 16) + 8), *(void *)(v109 + 24));
                uint64_t v109 = *(void *)(v54 + 8 * v108);
              }
              heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v109);
            }
            unsigned __int16 v107 = v108 + 1;
          }
          while (v106 > (unsigned __int16)(v108 + 1));
        }
        if (!v54)
        {
LABEL_131:
          if (v23)
          {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v23);
            unsigned int v394 = 0;
          }
          if (v41) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v41);
          }
          if (v386) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v386);
          }
          if (v32) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v32);
          }
          if (v387) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v387);
          }
          if (v39) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v39);
          }
          if (v42) {
            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v42);
          }
          return v8;
        }
LABEL_130:
        heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v54);
        int v397 = 0;
        goto LABEL_131;
      }
      uint64_t v12 = (*(uint64_t (**)(void, void, unsigned char *, void, long long *))(*(void *)(a1 + 48) + 80))(*(void *)(a1 + 880), *(void *)(a1 + 888), v23, HIDWORD(v407), &v407);
      if ((v12 & 0x80000000) == 0)
      {
        v23[HIDWORD(v407)] = 0;
        log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 105, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
          (uint64_t)v23,
          v407);
        uint64_t v24 = (*(uint64_t (**)(void, void, const void **, unsigned int *))(*(void *)(a1 + 48) + 88))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v406, &v405);
        if ((v24 & 0x80000000) != 0)
        {
          unint64_t v387 = 0;
          uint64_t v32 = 0;
          uint64_t v386 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          unsigned __int16 v55 = 0;
          uint64_t v42 = 0;
          uint64_t v8 = v24;
LABEL_119:
          heap_Free(*(void **)(*(void *)(a1 + 16) + 8), (uint64_t)v23);
          uint64_t v54 = (uint64_t)v397;
          unsigned int v23 = v394;
          goto LABEL_120;
        }
        unint64_t v25 = v405;
        unsigned int v385 = v405 >> 5;
        if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
          log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 105, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
        }
            (uint64_t)v406,
            v25 & 0x1FFFE0);
        uint64_t v26 = *(void *)(a1 + 944);
        if (!v26
          || !(*(unsigned int (**)(void, void))(v26 + 80))(*(void *)(a1 + 952), *(void *)(a1 + 960)))
        {
          uint64_t v56 = (*(uint64_t (**)(void, void, unsigned char *, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), v23, v407);
          unsigned __int16 v55 = v385;
          if ((v56 & 0x80000000) == 0)
          {
            log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
              (uint64_t)v23,
              v407);
            uint64_t v56 = (*(uint64_t (**)(void, void, const void *, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 928), *(void *)(a1 + 936), v406, v405);
            if ((v56 & 0x80000000) == 0)
            {
              if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
                log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
              }
                  (uint64_t)v406,
                  v25 & 0x1FFFE0);
              uint64_t v56 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 896), *(void *)(a1 + 904), v405);
            }
          }
          uint64_t v8 = v56;
          unint64_t v387 = 0;
          uint64_t v32 = 0;
          uint64_t v386 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          uint64_t v42 = 0;
          goto LABEL_119;
        }
        cstdlib_strcpy(__dst, " §");
        uint64_t v392 = "normal";
        v399 = "normal";
        uint64_t MainLangLC = hlp_GetMainLangLC(*(void *)(*(void *)(a1 + 16) + 40), v390);
        if ((MainLangLC & 0x80000000) != 0)
        {
          unint64_t v387 = 0;
          uint64_t v32 = 0;
          uint64_t v386 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          uint64_t v42 = 0;
          uint64_t v8 = MainLangLC;
          goto LABEL_118;
        }
        uint64_t v32 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), *(unsigned __int16 *)(a1 + 968) + 1, 1);
        if (v32)
        {
          unsigned __int16 v33 = v407;
          if (v407 < v11) {
            unsigned __int16 v33 = v11;
          }
          if (UInt < 0) {
            int v34 = 1;
          }
          else {
            int v34 = v10;
          }
          uint64_t v39 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v34 + v34 * v33 + 1, 1);
          if (v39)
          {
            unsigned int v40 = v34 + v34 * v11;
            if (v40 > 0xFFFE)
            {
              unint64_t v387 = 0;
              uint64_t v386 = 0;
              uint64_t v41 = 0;
              uint64_t v42 = 0;
              uint64_t v8 = 2323652623;
LABEL_118:
              unsigned __int16 v55 = v385;
              goto LABEL_119;
            }
            uint64_t v58 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v40 + 1, 1);
            uint64_t v57 = *(void *)(a1 + 16);
            unint64_t v387 = (unsigned char *)v58;
            if (v58)
            {
              size_t __len = v40 + 1;
              uint64_t v59 = (void *)heap_Alloc(*(void *)(v57 + 8), v405);
              uint64_t v42 = (uint64_t)v59;
              if (v59)
              {
                cstdlib_memcpy(v59, v406, v405);
                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Markers IN", v64, v65, v66, v323);
                unsigned int v350 = v40;
                unsigned int v384 = (unsigned __int16)(v25 >> 5);
                unsigned int v342 = v25;
                if ((unsigned __int16)(v25 >> 5))
                {
                  v348 = (char *)v39;
                  uint64_t v381 = v42;
                  uint64_t v70 = v42 + 8;
                  uint64_t v71 = (unsigned __int16)(v25 >> 5);
                  do
                  {
                    uint64_t v72 = *(void *)(*(void *)(a1 + 16) + 32);
                    uint64_t v73 = *(unsigned int *)(v70 - 8);
                    if (v73 == 0x4000) {
                      log_OutText(v72, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v67, v68, v69, *(unsigned int *)(v70 - 4));
                    }
                    else {
                      log_OutText(v72, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v67, v68, v69, v73);
                    }
                    v70 += 32;
                    --v71;
                  }
                  while (v71);
                  uint64_t v42 = v381;
                  uint64_t v74 = (_DWORD *)(v381 + 16);
                  uint64_t v75 = (unsigned __int16)(v25 >> 5);
                  uint64_t v39 = (uint64_t)v348;
                  do
                  {
                    if (*(v74 - 4) == 1) {
                      *uint64_t v74 = 0;
                    }
                    v74 += 8;
                    --v75;
                  }
                  while (v75);
                }
                unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, int *, void))(*(void *)(a1 + 40) + 112))(*(void *)(a1 + 24), *(void *)(a1 + 32), &v400, 0);
                if ((MultiWordEntry & 0x80000000) != 0)
                {
                  uint64_t v386 = 0;
                  uint64_t v41 = 0;
                  uint64_t v8 = MultiWordEntry;
                  goto LABEL_118;
                }
                int v397 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), (unsigned __int16)(v25 >> 5), 8);
                uint64_t v76 = *(void *)(a1 + 16);
                uint64_t v375 = (uint64_t)v397;
                if (v397)
                {
                  unsigned int v394 = (unsigned char *)heap_Calloc(*(void **)(v76 + 8), (unsigned __int16)(v25 >> 5), 4);
                  uint64_t v76 = *(void *)(a1 + 16);
                  __s = v394;
                  if (v394)
                  {
                    uint64_t v41 = heap_Calloc(*(void **)(v76 + 8), (v407 + 1), 2);
                    uint64_t v81 = *(void *)(a1 + 16);
                    if (!v41)
                    {
                      log_OutPublic(*(void *)(v81 + 32), (uint64_t)"FE_UDWL", 40000, 0, v77, v78, v79, v80, v323);
                      uint64_t v386 = 0;
                      goto LABEL_118;
                    }
                    unsigned __int16 v349 = (char *)v39;
                    uint64_t v386 = heap_Calloc(*(void **)(v81 + 8), (v407 + 1), 2);
                    if (!v386)
                    {
                      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v82, v83, v84, v85, v323);
                      uint64_t v386 = 0;
                      unsigned __int16 v55 = v385;
                      goto LABEL_119;
                    }
                    uint64_t v382 = (_DWORD *)v42;
                    int v341 = (_DWORD *)(v42 + 12);
                    int v383 = *(_DWORD *)(v42 + 12);
                    if (!v384)
                    {
                      uint64_t v358 = 0;
                      goto LABEL_151;
                    }
                    uint64_t v86 = 0;
                    do
                    {
                      double v87 = &v382[8 * (unsigned __int16)v86];
                      if (v87[3] != v383) {
                        break;
                      }
                      hlp_KeepTrackBeforeMovingOn(&v382[8 * (unsigned __int16)v86], (int *)&v395 + 1, &v399, &v392, &v395);
                      *(void *)(v375 + 8 * (unsigned __int16)v86) = v87;
                      *(_DWORD *)&__s[4 * (unsigned __int16)v86] = 0;
                      uint64_t v86 = (v86 + 1);
                    }
                    while ((unsigned __int16)v86 < (unsigned __int16)v385);
                    uint64_t v88 = 0;
                    int v345 = v392;
                    unsigned __int8 v351 = v399;
                    uint64_t v358 = v86;
                    uint64_t v89 = 0xFFFFLL;
                    uint64_t v90 = v384;
                    uint64_t v91 = v382;
                    while (1)
                    {
                      uint64_t v92 = v89;
                      int v93 = v91[8 * v88];
                      if (v93 == 7 || v93 == 21)
                      {
                        uint64_t v89 = 0xFFFFLL;
                        if ((_WORD)v92 != 0xFFFF) {
                          goto LABEL_96;
                        }
                      }
                      else
                      {
                        if (v93 == 32)
                        {
                          int v95 = v91[8 * v88 + 6];
                          if (!v95)
                          {
                            if ((unsigned __int16)v92 == 0xFFFF)
                            {
                              uint64_t v105 = v91;
                              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword end tag at position %u - start position missing (or ignored)", v83, v84, v85, (unsigned __int16)(v91[8 * v88 + 3] - v383));
                              uint64_t v91 = v105;
                              uint64_t v89 = 0xFFFFLL;
                            }
                            else
                            {
                              int v376 = v91[8 * v88 + 3] - v383;
                              unsigned int v99 = (unsigned __int16)(LOWORD(v91[8 * v88 + 3]) - v383);
                              if (v99 == v407 && utf8_BelongsToSet(3u, v23, v99 - 1, v99))
                              {
                                unsigned __int16 __sa = v376 - 1;
                                if ((_WORD)v376 == 1)
                                {
                                  LOWORD(v376) = 1;
                                }
                                else
                                {
                                  unsigned int v100 = (unsigned __int16)(v376 - 1);
                                  unsigned int v101 = v407;
                                  uint64_t v102 = v23;
                                  unsigned int v103 = v100;
                                  while (utf8_BelongsToSet(3u, v102, v100, v101))
                                  {
                                    LOWORD(v376) = __sa;
                                    unsigned __int16 PreviousUtf8OffsetLimit = utf8_GetPreviousUtf8OffsetLimit((uint64_t)v23, v103, v407);
                                    if (!PreviousUtf8OffsetLimit) {
                                      break;
                                    }
                                    unsigned int v103 = PreviousUtf8OffsetLimit;
                                    unsigned int v101 = v407;
                                    unsigned __int16 __sa = PreviousUtf8OffsetLimit;
                                    uint64_t v102 = v23;
                                    unsigned int v100 = PreviousUtf8OffsetLimit;
                                  }
                                }
                              }
                              LOWORD(v404) = v350;
                              if ((unsigned __int16)v376 - (unsigned __int16)v92 >= *(unsigned __int16 *)(a1 + 968))
                              {
                                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"MW lookup len %u  exceeds maxLookupLen %u - skipping", v83, v84, v85, (unsigned __int16)v376 - (unsigned __int16)v92);
                              }
                              else
                              {
                                *(_WORD *)(v41 + 2 * (unsigned __int16)v92) = v376;
                                *((void *)&v327 + 1) = &__s1[4];
                                *(void *)&long long v327 = &v404;
                                if (hlp_ValidateMultiWordMarker((uint64_t *)a1, a2, (uint64_t)v23, (unsigned __int16)v92, (unsigned __int16)v376, v32, (uint64_t)v345, (uint64_t)v351, v387, v327, (uint64_t)__s1, v402))
                                {
                                  *(_WORD *)(v386 + 2 * (unsigned __int16)v92) = v376;
                                }
                              }
                              uint64_t v89 = 0xFFFFLL;
                              uint64_t v91 = v382;
                            }
                            goto LABEL_112;
                          }
                          if (v95 == 1)
                          {
                            if ((_WORD)v92 != 0xFFFF)
                            {
                              uint64_t v324 = (unsigned __int16)v92;
                              uint64_t v96 = v91;
                              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword start tag at position %u - nested tag found at position %u, using this as start position", v83, v84, v85, v324);
                              uint64_t v91 = v96;
                            }
                            uint64_t v89 = (v91[8 * v88 + 3] - v383);
LABEL_112:
                            uint64_t v90 = v384;
                            goto LABEL_113;
                          }
                        }
                        else if (v93 == 34 && (unsigned __int16)~(_WORD)v92 != 0)
                        {
LABEL_96:
                          uint64_t v325 = (unsigned __int16)v92;
                          unint64_t v98 = v91;
                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword tag at position %u - contains internal tags (tn, phon)", v83, v84, v85, v325);
                          uint64_t v91 = v98;
                          uint64_t v90 = v384;
                          uint64_t v89 = 0xFFFFLL;
                          goto LABEL_113;
                        }
                        uint64_t v89 = v92;
                      }
LABEL_113:
                      if (++v88 == v90)
                      {
                        if ((_WORD)v89 != 0xFFFF) {
                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Ignoring multiword tag at position %u - no closing tag", v83, v84, v85, (unsigned __int16)v89);
                        }
LABEL_151:
                        size_t v339 = cstdlib_strlen(v23);
                        if (!v339)
                        {
                          int v322 = 0;
                          LOWORD(v340) = 0;
LABEL_433:
                          if (v384 > (unsigned __int16)v358)
                          {
                            int v294 = &v397[8 * (unsigned __int16)v358 + 8 * v322];
                            int v295 = v358;
                            do
                            {
                              unsigned int v296 = &v382[8 * (unsigned __int16)v295];
                              v296[3] += (__int16)v340;
                              *(void *)int v294 = v296;
                              v294 += 8;
                              ++v295;
                            }
                            while (v384 > (unsigned __int16)v295);
                          }
                          v382[4] += (__int16)v340;
                          unsigned int v297 = v384 + v322;
                          uint64_t v298 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), v384 + v322, 32);
                          if (!v298) {
                            goto LABEL_470;
                          }
                          uint64_t v299 = v298;
                          if (!v297) {
                            goto LABEL_446;
                          }
                          int v300 = 0;
                          uint64_t v301 = (uint64_t)v397;
                          do
                          {
                            int v302 = (_OWORD *)(v298 + 32 * (unsigned __int16)v300);
                            unsigned __int16 v303 = *(_OWORD **)(v301 + 8 * (unsigned __int16)v300);
                            long long v304 = v303[1];
                            *int v302 = *v303;
                            v302[1] = v304;
                            ++v300;
                          }
                          while (v297 > (unsigned __int16)v300);
                          if (*(_DWORD *)(v298 + 12) == v383)
                          {
                            unsigned __int16 v305 = 0;
                            do
                              int v306 = ++v305;
                            while (v297 > v305 && *(_DWORD *)(v298 + 32 * v305 + 12) == v383);
                          }
                          else
                          {
LABEL_446:
                            int v306 = 0;
                          }
                          stableArraySort(v298, v306, v297 - v306);
                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"New Markers OUT", v307, v308, v309, v323);
                          uint64_t v310 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 48)
                                                                                            + 104))(*(void *)(a1 + 928), *(void *)(a1 + 936), v299, 32 * v297);
                          uint64_t v311 = *(void *)(a1 + 16);
                          if ((v310 & 0x80000000) != 0)
                          {
                            uint64_t v8 = v310;
                            uint64_t v320 = *(void **)(v311 + 8);
                            uint64_t v321 = v299;
LABEL_464:
                            heap_Free(v320, v321);
                          }
                          else
                          {
                            if (log_GetLogLevel(*(void *)(v311 + 32)) >= 5 && v297 != 0)
                            {
                              unsigned __int16 v316 = 0;
                              do
                              {
                                unsigned __int16 v317 = (unsigned int *)(v299 + 32 * v316);
                                uint64_t v318 = *(void *)(*(void *)(a1 + 16) + 32);
                                uint64_t v319 = *v317;
                                if (v319 == 0x4000) {
                                  log_OutText(v318, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v312, v313, v314, v317[1]);
                                }
                                else {
                                  log_OutText(v318, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v312, v313, v314, v319);
                                }
                                ++v316;
                              }
                              while (v297 > v316);
                            }
                            heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v299);
                            if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
                              log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"PTRARRAY", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
                            }
                                (uint64_t)v397,
                                8 * v297);
                            uint64_t inserted = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 896), *(void *)(a1 + 904), v405);
                            if ((inserted & 0x80000000) == 0)
                            {
                              v400 += (__int16)v340;
                              uint64_t inserted = (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 104))(*(void *)(a1 + 24), *(void *)(a1 + 32));
                            }
LABEL_461:
                            uint64_t v8 = inserted;
                          }
LABEL_471:
                          unsigned __int16 v55 = v385;
                          uint64_t v39 = (uint64_t)v349;
                          uint64_t v42 = (uint64_t)v382;
                          goto LABEL_119;
                        }
                        int __sb = 0;
                        int v352 = 0;
                        int v340 = 0;
                        uint64_t v113 = 0;
                        uint64_t v114 = v339;
                        while (2)
                        {
                          int v403 = 0;
                          uint64_t v115 = (unsigned __int16)v113;
                          unsigned __int16 v377 = v113;
                          uint64_t NextUtf8OffsetLimit = v113;
                          if ((unsigned __int16)v113 < v114)
                          {
                            uint64_t NextUtf8OffsetLimit = v113;
                            if (utf8_BelongsToSet(3u, v23, (unsigned __int16)v113, v114))
                            {
                              do
                              {
                                uint64_t NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(v23, v115, v114);
                                uint64_t v115 = (unsigned __int16)NextUtf8OffsetLimit;
                              }
                              while ((unsigned __int16)NextUtf8OffsetLimit < v114
                                   && utf8_BelongsToSet(3u, v23, (unsigned __int16)NextUtf8OffsetLimit, v114));
                            }
                          }
                          if (v352)
                          {
                            BOOL v344 = 0;
                            goto LABEL_170;
                          }
                          unsigned __int16 v117 = HIWORD(v393);
                          __int16 v118 = v393;
                          if (v377 <= (unsigned __int16)NextUtf8OffsetLimit)
                          {
                            unsigned __int16 v119 = v377;
                            do
                            {
                              int v120 = *(unsigned __int16 *)(v41 + 2 * v119);
                              if (*(_WORD *)(v41 + 2 * v119))
                              {
                                __int16 v118 = *(_WORD *)(v41 + 2 * v119);
                                unsigned __int16 v117 = v119;
                              }
                              ++v119;
                            }
                            while (v119 <= (unsigned __int16)NextUtf8OffsetLimit && !v120);
                            BOOL v344 = v120 != 0;
                          }
                          else
                          {
                            BOOL v344 = 0;
                          }
                          HIWORD(v393) = v117;
                          LOWORD(v393) = v118;
                          if (v377 == (unsigned __int16)NextUtf8OffsetLimit)
                          {
                            unsigned __int16 v121 = v377;
                            __int16 v122 = *(_WORD *)(v41 + 2 * v377);
                            if (v122)
                            {
                              HIWORD(v393) = v377;
                              LOWORD(v393) = v122;
                              BOOL v344 = 1;
                            }
                          }
                          else
                          {
LABEL_170:
                            unsigned __int16 v121 = v377;
                          }
                          if ((unsigned __int16)NextUtf8OffsetLimit > v121)
                          {
                            unsigned int v123 = HIWORD(v393);
                            if ((unsigned __int16)NextUtf8OffsetLimit < HIWORD(v393)) {
                              unsigned int v123 = (unsigned __int16)NextUtf8OffsetLimit;
                            }
                            if ((unsigned __int16)NextUtf8OffsetLimit >= (unsigned __int16)v393 || !v344) {
                              uint64_t NextUtf8OffsetLimit = NextUtf8OffsetLimit;
                            }
                            else {
                              uint64_t NextUtf8OffsetLimit = v123;
                            }
                            uint64_t v125 = (unsigned __int16)NextUtf8OffsetLimit - __sb;
                            if ((int)v125 >= 1)
                            {
                              unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), &v23[v377], v125);
                              if ((MultiWordEntry & 0x80000000) != 0) {
                                goto LABEL_462;
                              }
                              log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                                (uint64_t)&v23[v377],
                                v125);
                            }
                            unsigned __int16 v121 = NextUtf8OffsetLimit;
                          }
                          uint64_t v343 = NextUtf8OffsetLimit;
                          uint64_t v126 = v358;
                          if (v384 > (unsigned __int16)v358)
                          {
                            unsigned int v378 = v121;
                            uint64_t v361 = (uint64_t)v397;
                            uint64_t v127 = (uint64_t)v394;
                            unsigned int v128 = (unsigned __int16)v358 + v396;
                            do
                            {
                              uint64_t v129 = &v382[8 * (unsigned __int16)v126];
                              int v130 = v129[3];
                              if (v378 < (unsigned __int16)(v130 - v383)) {
                                break;
                              }
                              v129[3] = v130 + (__int16)v340;
                              *(void *)(v361 + 8 * v128) = v129;
                              *(_DWORD *)(v127 + 4 * v128) = 0;
                              hlp_KeepTrackBeforeMovingOn(v129, (int *)&v395 + 1, &v399, &v392, &v395);
                              uint64_t v126 = (v126 + 1);
                              ++v128;
                            }
                            while (v384 > (unsigned __int16)v126);
                          }
                          uint64_t v358 = v126;
                          LOWORD(v404) = v350;
                          if (v344)
                          {
                            uint64_t v379 = (unsigned __int16)v393;
                            uint64_t v131 = HIWORD(v393);
                            int v132 = (unsigned __int16)v393 - HIWORD(v393);
                            HIWORD(v404) = v393 - HIWORD(v393);
                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"SET MW %u %u", v110, v111, v112, HIWORD(v393));
                            cstdlib_strncpy(v32, &v23[v131], (unsigned __int16)v132);
                            HIDWORD(v336) = 0;
                            v32[(unsigned __int16)v132] = 0;
                            int v346 = v132;
                            LOWORD(v343) = v131;
                            uint64_t v133 = v379;
                            goto LABEL_193;
                          }
                          int v388 = 0;
                          unsigned int MultiWordEntry = hlp_FindMultiWordEntry(a1, a2, v23, (unsigned __int16)v339, v382, (unsigned __int16)(v342 >> 5), v386, (unsigned __int16)v343, (uint64_t)v392, (uint64_t)v399, (_WORD *)&v393 + 1, &v393, v32, (_WORD *)&v404 + 1, v350, (uint64_t)&__s1[4], (uint64_t)__s1, &v388);
                          if ((MultiWordEntry & 0x80000000) != 0) {
                            goto LABEL_462;
                          }
                          if (v388)
                          {
                            uint64_t v137 = HIWORD(v393);
                            uint64_t v138 = (unsigned __int16)v393;
                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"SET UMW %u %u", v134, v135, v136, HIWORD(v393));
                            uint64_t v139 = HIWORD(v404);
                            cstdlib_strncpy(v32, &v23[v137], HIWORD(v404));
                            v32[v139] = 0;
                            HIDWORD(v336) = 1;
                            int v346 = v139;
                            LOWORD(v343) = v137;
                            uint64_t v133 = v138;
LABEL_193:
                            uint64_t v380 = v133;
                            LODWORD(v336) = !v344;
LABEL_194:
                            int v401 = 1;
                            uint64_t v140 = (unsigned __int16)v358;
                            if (v384 <= (unsigned __int16)v358)
                            {
                              int v333 = (unsigned __int16)v358;
                            }
                            else
                            {
                              uint64_t v359 = (uint64_t)v397;
                              int v353 = v396;
                              uint64_t v141 = (uint64_t)v394;
                              while (1)
                              {
                                uint64_t v142 = &v382[8 * (unsigned __int16)v140];
                                int v143 = v142[3];
                                if ((unsigned __int16)v343 < (unsigned __int16)(v143 - v383)) {
                                  break;
                                }
                                v142[3] = v143 + (__int16)v340;
                                unsigned int v144 = v353 + v140;
                                *(void *)(v359 + 8 * v144) = v142;
                                *(_DWORD *)(v141 + 4 * v144) = 0;
                                hlp_KeepTrackBeforeMovingOn(v142, (int *)&v395 + 1, &v399, &v392, &v395);
                                uint64_t v140 = (v140 + 1);
                                if (v384 <= (unsigned __int16)v140)
                                {
                                  uint64_t v358 = v140;
                                  int v333 = (unsigned __int16)v140;
                                  goto LABEL_201;
                                }
                              }
                              int v333 = v140;
                              uint64_t v358 = v140;
                            }
LABEL_201:
                            LOWORD(v404) = v350;
                            char __s1[4] = 0;
                            uint64_t v145 = v399;
                            if (cstdlib_strcmp(v399, "spell")) {
                              BOOL v151 = HIDWORD(v395) == 0;
                            }
                            else {
                              BOOL v151 = 0;
                            }
                            int v338 = v350;
                            if (v151)
                            {
                              cstdlib_strncpy(v349, &v23[(unsigned __int16)v343], (unsigned __int16)v346);
                              v349[(unsigned __int16)v346] = 0;
                              log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup = \"%s\"", v152, v153, v154, (uint64_t)v349);
                              cstdlib_memset(v387, 0, __len);
                              *((void *)&v326 + 1) = &__s1[4];
                              *(void *)&long long v326 = &v404;
                              unsigned int MultiWordEntry = fe_udwl_MatchUDctWord((uint64_t *)a1, a2, 1, v32, (uint64_t)v392, (uint64_t)v145, (uint64_t)&v401, (uint64_t)v387, v326, (uint64_t)__s1, (uint64_t)&v402, (_WORD *)&v403 + 1, &v403);
                              if ((MultiWordEntry & 0x80000000) == 0)
                              {
                                int v155 = cstdlib_strlen(v387);
                                log_OutEvent(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 32, (uint64_t)"%s%s%s%s", v156, v157, v158, v159, v160, "TEXT");
                                int v338 = v155;
                                goto LABEL_208;
                              }
                              int v338 = v350;
                            }
                            else
                            {
LABEL_208:
                              if ((MultiWordEntry & 0x80000000) == 0 && (_WORD)v404 && v350 > (unsigned __int16)v404)
                              {
                                log_OutEvent(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 19, (uint64_t)"%s%s", v146, v147, v148, v149, v150, "URI");
                                log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"return string = \"%s\"", v161, v162, v163, (uint64_t)v387);
                                int v337 = v383 + (unsigned __int16)v343 + (__int16)v340;
                                BOOL v332 = sameLanguage(v390, v392, &__s1[4]);
                                if (!v332)
                                {
                                  if ((cstdlib_strncmp(&__s1[4], "he", 2uLL) || cstdlib_strncmp(v390, "he", 2uLL))
                                    && (cstdlib_strncmp(&__s1[4], "ar", 2uLL) || cstdlib_strncmp(v390, "ar", 2uLL))
                                    && (cstdlib_strncmp(&__s1[4], "fa", 2uLL) || cstdlib_strncmp(v390, "fa", 2uLL)))
                                  {
                                    uint64_t v164 = &__s1[4];
                                  }
                                  else
                                  {
                                    uint64_t v164 = "normal";
                                  }
                                  uint64_t inserted = hlp_InsertLangMarker(a1, v164, v337, v337, (uint64_t *)&v397, (uint64_t *)&v394, (unsigned __int16)(v342 >> 5), (unsigned __int16)v358, &v396);
                                  if ((inserted & 0x80000000) != 0) {
                                    goto LABEL_461;
                                  }
                                  unsigned int MultiWordEntry = 0;
                                }
                                if (v401 == 4)
                                {
                                  if ((unsigned __int16)v404 >= 4u
                                    && !cstdlib_memcmp("\x11/<", v387, 3uLL)
                                    && !cstdlib_memcmp("\x11/<", &v387[(unsigned __int16)v338 - 3], 3uLL))
                                  {
                                    cstdlib_memmove(v387, v387 + 3, (unsigned __int16)v338 - 6);
                                    *(void *)uint64_t v356 = (unsigned __int16)v338 - 6;
                                    v387[*(void *)v356] = 0;
                                    LOWORD(v404) = v404 - 6;
                                    log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"transformed lookup = \"%s\"", v212, v213, v214, (uint64_t)v387);
                                    int __se = v396;
                                    unsigned int v215 = v384 + v396;
                                    uint64_t v216 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), (uint64_t)v397, 8 * v215 + 16);
                                    if (!v216) {
                                      goto LABEL_470;
                                    }
                                    uint64_t v217 = v216;
                                    int v397 = (char *)v216;
                                    uint64_t v218 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), (uint64_t)v394, 4 * v215 + 8);
                                    if (!v218) {
                                      goto LABEL_470;
                                    }
                                    uint64_t v219 = v218;
                                    *(_DWORD *)(v218 + 4 * v215) = 0;
                                    unsigned int v394 = (unsigned char *)v218;
                                    *(_DWORD *)(v218 + 4 * (v215 + 1)) = 0;
                                    int v220 = (_DWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32);
                                    if (!v220) {
                                      goto LABEL_470;
                                    }
                                    v220[6] = 60;
                                    *int v220 = 7;
                                    v220[1] = v337;
                                    v220[2] = 0;
                                    v220[3] = v337;
                                    _OWORD v220[4] = 0;
                                    unsigned int v221 = v333 + __se;
                                    *(void *)(v217 + 8 * v221) = v220;
                                    *(_DWORD *)(v219 + 4 * v221) = 1;
                                    int v222 = (_DWORD *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32);
                                    if (!v222)
                                    {
                                      unsigned __int16 v396 = __se + 1;
LABEL_470:
                                      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v172, v173, v174, v175, v323);
                                      goto LABEL_471;
                                    }
                                    LOWORD(v362) = 0;
                                    v222[6] = v395;
                                    int v223 = v337 + LOWORD(v356[0]);
                                    *int v222 = 7;
                                    v222[1] = v223;
                                    v222[2] = 0;
                                    v222[3] = v223;
                                    v222[4] = 0;
                                    *(void *)(v217 + 8 * (v221 + 1)) = v222;
                                    *(_DWORD *)(v219 + 4 * (v221 + 1)) = 1;
                                    unsigned __int16 v396 = __se + 2;
                                    int v338 = (unsigned __int16)v338 - 6;
                                    goto LABEL_359;
                                  }
                                }
                                else if (v401 == 1)
                                {
                                  int v331 = v396;
                                  unsigned int v171 = v384 + v396;
                                  uint64_t v355 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), (uint64_t)v397, 8 * v171 + 16);
                                  if (!v355) {
                                    goto LABEL_470;
                                  }
                                  int v397 = (char *)v355;
                                  uint64_t v335 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), (uint64_t)v394, 4 * v171 + 8);
                                  if (!v335) {
                                    goto LABEL_470;
                                  }
                                  *(_DWORD *)(v335 + 4 * v171) = 0;
                                  unsigned int v394 = (unsigned char *)v335;
                                  *(_DWORD *)(v335 + 4 * (v171 + 1)) = 0;
                                  unsigned int v329 = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32);
                                  if (!v329) {
                                    goto LABEL_470;
                                  }
                                  int v176 = cstdlib_strlen(v387);
                                  if (cstdlib_strlen(__s1) == 3) {
                                    int v177 = 14;
                                  }
                                  else {
                                    int v177 = 10;
                                  }
                                  __sd = (char *)heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), (v177 + v176), 1);
                                  if (!__sd)
                                  {
                                    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v178, v179, v180, v181, v323);
                                    uint64_t v320 = *(void **)(*(void *)(a1 + 16) + 8);
                                    uint64_t v321 = (uint64_t)v329;
                                    goto LABEL_464;
                                  }
                                  cstdlib_strcpy(__sd, v387);
                                  char v182 = v336;
                                  if (v344) {
                                    char v182 = 1;
                                  }
                                  if (v182)
                                  {
                                    unsigned int v183 = cstdlib_strlen(v32);
                                    if ((_WORD)v346)
                                    {
                                      unsigned int v184 = v183;
                                      if (!utf8_BelongsToSet(3u, v32, 0, v183))
                                      {
                                        unsigned __int16 v187 = 0;
                                        goto LABEL_285;
                                      }
                                      int v185 = 0;
                                      while (1)
                                      {
                                        unsigned __int16 NextUtf8Offset = utf8_GetNextUtf8Offset(v32, v185);
                                        unsigned __int16 v187 = NextUtf8Offset;
                                        if ((unsigned __int16)v346 <= NextUtf8Offset) {
                                          break;
                                        }
                                        int v185 = NextUtf8Offset;
                                        if (!utf8_BelongsToSet(3u, v32, NextUtf8Offset, v184)) {
                                          goto LABEL_285;
                                        }
                                      }
                                      if ((_WORD)v346)
                                      {
LABEL_285:
                                        unsigned __int16 PreviousUtf8Offset = v346;
                                        while (1)
                                        {
                                          unsigned int v195 = PreviousUtf8Offset;
                                          if (!utf8_BelongsToSet(3u, v32, PreviousUtf8Offset, v184)) {
                                            break;
                                          }
                                          unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)v32, v195);
                                          if (!PreviousUtf8Offset) {
                                            goto LABEL_299;
                                          }
                                        }
                                        unsigned int v328 = v195;
                                        if (v195 > v187)
                                        {
                                          unsigned __int16 v363 = 1;
                                          do
                                          {
                                            if (!v32[v187]) {
                                              break;
                                            }
                                            int v196 = v187;
                                            if (utf8_BelongsToSet(3u, v32, v187, v184))
                                            {
                                              ++v363;
                                              if (v187 < (unsigned __int16)v346)
                                              {
                                                while (1)
                                                {
                                                  int v196 = v187;
                                                  if (!utf8_BelongsToSet(3u, v32, v187, v184)) {
                                                    break;
                                                  }
                                                  unsigned __int16 v197 = utf8_GetNextUtf8Offset(v32, v187);
                                                  unsigned __int16 v187 = v197;
                                                  if ((unsigned __int16)v346 <= v197)
                                                  {
                                                    int v196 = v197;
                                                    break;
                                                  }
                                                }
                                              }
                                            }
                                            unsigned __int16 v187 = utf8_GetNextUtf8Offset(v32, v196);
                                          }
                                          while (v328 >= v187);
LABEL_300:
                                          LOWORD(__src[0]) = 0;
                                          LOWORD(v388) = 0;
                                          unsigned __int16 v198 = v404;
                                          unsigned __int16 v199 = cstdlib_strchr(__sd, 18);
                                          unsigned __int16 v200 = (_WORD)v199 - (_WORD)__sd;
                                          if (!v199) {
                                            unsigned __int16 v200 = v198;
                                          }
                                          unsigned int v201 = utf8_countNbrOfPhonWords(__sd, v200, __src, &v388);
                                          uint64_t v205 = v363;
                                          BOOL v233 = v363 >= v201;
                                          BOOL v206 = v363 > v201;
                                          __int16 v364 = v363 - v201;
                                          if (!v233)
                                          {
                                            int v362 = v201 - v205;
                                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE1 modification : insert %u dummy words (%u orthographic words, %u phonetic words)", v202, v203, v204, (unsigned __int16)(v201 - v205));
                                            goto LABEL_338;
                                          }
                                          if (v206)
                                          {
                                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE2 modification : hyphenate words (%u orthographic words, %u phonetic words)", v202, v203, v204, v205);
                                            cstdlib_strncpy(v349, &v23[(unsigned __int16)v343], (unsigned __int16)v346);
                                            uint64_t v210 = (unsigned __int16)v346;
                                            v349[(unsigned __int16)v346] = 0;
                                            int v211 = v346;
                                            while ((_WORD)--v211)
                                            {
                                              if (v349[(unsigned __int16)v211] != 32)
                                              {
                                                while (v349[(unsigned __int16)v211] != 32)
                                                {
                                                  if (!(_WORD)--v211) {
                                                    goto LABEL_326;
                                                  }
                                                }
                                                while (v364)
                                                {
                                                  while (v349[(unsigned __int16)v211] == 32)
                                                  {
                                                    v349[(unsigned __int16)v211--] = 45;
                                                    if (!(_WORD)v211) {
                                                      goto LABEL_326;
                                                    }
                                                  }
                                                  --v364;
                                                  while (v349[(unsigned __int16)v211] != 32)
                                                  {
                                                    if (!(_WORD)--v211) {
                                                      goto LABEL_326;
                                                    }
                                                  }
                                                }
                                                break;
                                              }
                                            }
LABEL_326:
                                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"TYPE2 modification : now \"%s\"", v207, v208, v209, (uint64_t)v349);
                                            if ((_WORD)v346)
                                            {
                                              unsigned __int16 v227 = &v23[(unsigned __int16)v343];
                                              uint64_t v228 = v349;
                                              do
                                              {
                                                char v229 = *v228++;
                                                *v227++ = v229;
                                                --v210;
                                              }
                                              while (v210);
                                            }
                                            if (v384)
                                            {
                                              uint64_t v230 = 0;
                                              uint64_t v231 = v341;
                                              do
                                              {
                                                unsigned int v232 = *v231 - *v341;
                                                BOOL v233 = v232 <= (unsigned __int16)v343
                                                    || v232 >= (unsigned __int16)v343
                                                             + (unsigned __int16)v346;
                                                if (!v233)
                                                {
                                                  log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"realign Markers in midword postions to start of word Mrk[%u].posCur from %u to %u", v224, v225, v226, v230);
                                                  *uint64_t v231 = v383 + (unsigned __int16)(v343 + v340);
                                                }
                                                ++v230;
                                                v231 += 8;
                                              }
                                              while (v384 != v230);
                                            }
                                          }
LABEL_337:
                                          int v362 = 0;
                                          goto LABEL_338;
                                        }
                                      }
                                    }
LABEL_299:
                                    unsigned __int16 v363 = 0;
                                    goto LABEL_300;
                                  }
                                  if ((unsigned __int16)v404 < 3uLL) {
                                    goto LABEL_337;
                                  }
                                  int v362 = 0;
                                  uint64_t v188 = 1;
                                  uint64_t v189 = 1;
                                  do
                                  {
                                    int v190 = __sd[v189];
                                    if (v190 == 35 || v190 == 95)
                                    {
                                      if (__sd[++v188] == 18) {
                                        int v191 = v362;
                                      }
                                      else {
                                        int v191 = v362 + 1;
                                      }
                                      int v362 = v191;
                                    }
                                    else
                                    {
                                      if (v190 == 18) {
                                        break;
                                      }
                                      ++v188;
                                    }
                                    ++v189;
                                  }
                                  while (v188 != (unsigned __int16)v404 - 1);
LABEL_338:
                                  if ((_WORD)v346)
                                  {
                                    uint64_t v234 = (unsigned __int16)v346;
                                    unsigned __int16 v235 = &v23[(unsigned __int16)v343];
                                    do
                                    {
                                      if (*v235 == 95) {
                                        *unsigned __int16 v235 = 45;
                                      }
                                      ++v235;
                                      --v234;
                                    }
                                    while (v234);
                                  }
                                  cstdlib_strcat(__sd, "\x14");
                                  cstdlib_strcat(__sd, "EXTDCT");
                                  if (cstdlib_strlen(__s1) == 3)
                                  {
                                    cstdlib_strcat(__sd, "\x14");
                                    cstdlib_strcat(__sd, __s1);
                                  }
                                  *((void *)v329 + 3) = __sd;
                                  *(_DWORD *)unsigned int v329 = 34;
                                  *((_DWORD *)v329 + 1) = v337;
                                  unsigned int v236 = v333 + v331;
                                  uint64_t v237 = (unsigned __int16)v358;
                                  *((_DWORD *)v329 + 2) = 0;
                                  *((_DWORD *)v329 + 3) = v337;
                                  *((_DWORD *)v329 + 4) = 0;
                                  *(void *)(v355 + 8 * v236) = v329;
                                  *(_DWORD *)(v335 + 4 * v236) = 1;
                                  if (v384 > (unsigned __int16)v358)
                                  {
                                    while (1)
                                    {
                                      uint64_t v238 = &v382[8 * (unsigned __int16)v237];
                                      int v239 = v238[3];
                                      if ((unsigned __int16)v380 < (unsigned __int16)(v239 - v383)) {
                                        break;
                                      }
                                      int v240 = v239 + (__int16)v340;
                                      if (*v238 == 36) {
                                        int v240 = v383
                                      }
                                             + (__int16)v340
                                             + (unsigned __int16)v380
                                             + 3 * (unsigned __int16)v362;
                                      if (*v238 == 21) {
                                        int v240 = v383
                                      }
                                             + (__int16)v340
                                             + (unsigned __int16)v380
                                             + 3 * (unsigned __int16)v362;
                                      v238[3] = v240;
                                      unsigned int v241 = v331 + 1 + v237;
                                      *(void *)(v355 + 8 * v241) = v238;
                                      *(_DWORD *)(v335 + 4 * v241) = 0;
                                      hlp_KeepTrackBeforeMovingOn(v238, (int *)&v395 + 1, &v399, &v392, &v395);
                                      uint64_t v237 = (v237 + 1);
                                      if (v384 <= (unsigned __int16)v237)
                                      {
                                        uint64_t v358 = v237;
                                        LODWORD(v237) = (unsigned __int16)v237;
                                        goto LABEL_354;
                                      }
                                    }
                                    uint64_t v358 = v237;
                                  }
LABEL_354:
                                  if ((unsigned __int16)v380 < v339)
                                  {
                                    uint64_t v242 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32);
                                    uint64_t v247 = *(void *)(a1 + 16);
                                    uint64_t v334 = v242;
                                    if (!v242)
                                    {
                                      log_OutPublic(*(void *)(v247 + 32), (uint64_t)"FE_UDWL", 40000, 0, v243, v244, v245, v246, v323);
LABEL_468:
                                      unsigned __int16 v396 = v331 + 1;
                                      goto LABEL_471;
                                    }
                                    uint64_t v248 = *(void *)(v247 + 8);
                                    unsigned int v330 = v399;
                                    int v249 = cstdlib_strlen(v399);
                                    uint64_t v250 = (char *)heap_Alloc(v248, (v249 + 1));
                                    if (!v250)
                                    {
                                      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v251, v252, v253, v254, v323);
                                      heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v334);
                                      goto LABEL_468;
                                    }
                                    int v255 = v250;
                                    cstdlib_strcpy(v250, v330);
                                    *(void *)(v334 + 24) = v255;
                                    int v256 = v383 + (__int16)v340 + (unsigned __int16)v380 + 3 * (unsigned __int16)v362;
                                    *(_DWORD *)uint64_t v334 = 21;
                                    *(_DWORD *)(v334 + 4) = v256;
                                    *(_DWORD *)(v334 + 8) = 0;
                                    *(_DWORD *)(v334 + 12) = v256;
                                    *(_DWORD *)(v334 + 16) = 0;
                                    unsigned int v257 = v331 + v237 + 1;
                                    *(void *)(v355 + 8 * v257) = v334;
                                    *(_DWORD *)(v335 + 4 * v257) = 1;
                                    LOWORD(v331) = v331 + 1;
                                  }
                                  v340 += 3 * v362;
                                  unsigned __int16 v396 = v331 + 1;
LABEL_359:
                                  if (v332)
                                  {
                                    BOOL v354 = (HIDWORD(v336) | v344) == 0;
                                    goto LABEL_361;
                                  }
                                  if (v401 == 1) {
                                    unsigned __int16 v259 = v380;
                                  }
                                  else {
                                    unsigned __int16 v259 = v338;
                                  }
                                  int v260 = v383;
                                  if (v401 != 1) {
                                    int v260 = v383 + (unsigned __int16)v343;
                                  }
                                  uint64_t inserted = hlp_InsertLangMarker(a1, v392, v260 + v259 + (__int16)v340, v260 + v259 + (__int16)v340, (uint64_t *)&v397, (uint64_t *)&v394, (unsigned __int16)(v342 >> 5), (unsigned __int16)v358, &v396);
                                  if ((inserted & 0x80000000) != 0) {
                                    goto LABEL_461;
                                  }
                                  unsigned int MultiWordEntry = 0;
                                  BOOL v354 = (HIDWORD(v336) | v344) == 0;
                                  int v258 = (unsigned __int16)v343;
LABEL_369:
                                  int v261 = (unsigned __int16)v380 - v258;
                                  if (v261 >= 1
                                    && (v401 == 1
                                     || !(_WORD)v404
                                     || (MultiWordEntry & 0x80000000) != 0
                                     || (unsigned __int16)v404 >= v11))
                                  {
                                    int v278 = (unsigned __int16)v403;
                                    if (v261 <= (unsigned __int16)v403)
                                    {
                                      int v278 = 0;
                                      LOWORD(v403) = 0;
                                    }
                                    unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, unsigned char *, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), &v23[(unsigned __int16)v343], (v261 - v278));
                                    if ((MultiWordEntry & 0x80000000) != 0)
                                    {
LABEL_462:
                                      uint64_t v8 = MultiWordEntry;
                                      goto LABEL_471;
                                    }
                                    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                                      (uint64_t)&v23[(unsigned __int16)v343],
                                      v261 - (unsigned __int16)v403);
                                    uint64_t v265 = (unsigned __int16)v403;
                                    int __sf = v261 - (unsigned __int16)v403;
                                    if ((_WORD)v362)
                                    {
                                      int v279 = 0;
                                      while (1)
                                      {
                                        uint64_t v280 = *(uint64_t (**)(void, void, char *, size_t))(*(void *)(a1 + 48) + 104);
                                        size_t v281 = cstdlib_strlen(__dst);
                                        uint64_t v282 = v280(*(void *)(a1 + 912), *(void *)(a1 + 920), __dst, v281);
                                        unsigned int v283 = v282;
                                        if ((v282 & 0x80000000) != 0) {
                                          break;
                                        }
                                        uint64_t v284 = *(void *)(*(void *)(a1 + 16) + 32);
                                        size_t v285 = cstdlib_strlen(__dst);
                                        log_OutTraceTuningDataBinary(v284, 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                                          (uint64_t)__dst,
                                          v285);
                                        __sf += cstdlib_strlen(__dst);
                                        if ((unsigned __int16)++v279 >= (unsigned __int16)v362)
                                        {
                                          unsigned int MultiWordEntry = v283;
                                          uint64_t v265 = (unsigned __int16)v403;
                                          goto LABEL_411;
                                        }
                                      }
                                      uint64_t v8 = v282;
                                      goto LABEL_471;
                                    }
LABEL_411:
                                    if (v265)
                                    {
                                      uint64_t v286 = &v23[(unsigned __int16)v380];
                                      unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, unsigned char *))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), &v286[-v265]);
                                      if ((MultiWordEntry & 0x80000000) != 0) {
                                        goto LABEL_462;
                                      }
                                      log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                                        (uint64_t)&v286[-(unsigned __int16)v403],
                                        (unsigned __int16)v403);
                                    }
                                  }
                                  else
                                  {
                                    unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, unsigned char *))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), v387);
                                    if ((MultiWordEntry & 0x80000000) != 0) {
                                      goto LABEL_462;
                                    }
                                    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                                      (uint64_t)v387,
                                      (unsigned __int16)v338);
                                    unsigned int v262 = cstdlib_strlen(v32);
                                    if (v262)
                                    {
                                      for (unsigned int i = 0; i < v262; unsigned int i = (unsigned __int16)utf8_GetNextUtf8Offset(v32, i))
                                      {
                                        if (utf8_BelongsToSet(3u, v32, i, v262))
                                        {
                                          while (i < v262 && utf8_BelongsToSet(3u, v32, i, v262))
                                            unsigned int i = (unsigned __int16)utf8_GetNextUtf8Offset(v32, i);
                                        }
                                      }
                                    }
                                    uint64_t v264 = v387;
                                    unsigned int v267 = cstdlib_strlen(v387);
                                    if (v267)
                                    {
                                      for (unsigned int j = 0; j < v267; unsigned int j = (unsigned __int16)utf8_GetNextUtf8Offset(v264, j))
                                      {
                                        if (utf8_BelongsToSet(3u, v264, j, v267) && j < v267)
                                        {
                                          uint64_t v264 = v387;
                                          do
                                          {
                                            if (!utf8_BelongsToSet(3u, v387, j, v267)) {
                                              break;
                                            }
                                            unsigned int j = (unsigned __int16)utf8_GetNextUtf8Offset(v387, j);
                                          }
                                          while (j < v267);
                                        }
                                        else
                                        {
                                          uint64_t v264 = v387;
                                        }
                                      }
                                    }
                                    char v269 = v354;
                                    if (!v384) {
                                      char v269 = 1;
                                    }
                                    uint64_t v270 = v384;
                                    unsigned int v271 = v341;
                                    if ((v269 & 1) == 0)
                                    {
                                      uint64_t v272 = 0;
                                      unsigned int v273 = HIWORD(v393);
                                      unsigned int v274 = (unsigned __int16)v393;
                                      int v365 = v383 + HIWORD(v393);
                                      unsigned __int16 v275 = v341;
                                      unsigned int v357 = (unsigned __int16)v393;
                                      do
                                      {
                                        unsigned int v276 = *v275 - *v271;
                                        if (v276 > v273 && v276 < v274)
                                        {
                                          log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"realign Markers in midword postions to start of word Mrk[%u].posCur from %u to %u", v110, v111, v112, v272);
                                          unsigned int v274 = v357;
                                          unsigned int v271 = v341;
                                          uint64_t v270 = v384;
                                          *unsigned __int16 v275 = v365;
                                        }
                                        ++v272;
                                        v275 += 8;
                                      }
                                      while (v270 != v272);
                                    }
                                    int v340 = v338 + v340 - v346;
                                  }
                                  if (v337 != -1) {
                                    log_OutTraceTuningData(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 109, (uint64_t)"%s%d %s%d %s%s", v265, v266, v110, v111, v112, "POSREF");
                                  }
                                  char v287 = v336;
                                  if (v344) {
                                    char v287 = 1;
                                  }
                                  if (v287)
                                  {
                                    uint64_t v380 = (unsigned __int16)v393;
                                    if (v384 > (unsigned __int16)v358)
                                    {
                                      uint64_t v288 = v358;
                                      uint64_t v366 = (uint64_t)v394;
                                      __sg = v397;
                                      unsigned int v289 = (unsigned __int16)v358 + v396;
                                      while (1)
                                      {
                                        unsigned int v290 = v382[8 * (unsigned __int16)v288 + 3];
                                        uint64_t v113 = v380;
                                        if (v380 <= (unsigned __int16)(v290 - v383)) {
                                          break;
                                        }
                                        signed int v291 = v289 - 1;
                                        uint64_t v292 = *(void *)&__sg[8 * (v289 - 1)];
                                        if (v290 >= *(_DWORD *)(v292 + 12))
                                        {
                                          *(void *)&__sg[8 * v289] = &v382[8 * (unsigned __int16)v288];
                                          uint64_t v293 = (_DWORD *)(v366 + 4 * v289);
                                        }
                                        else
                                        {
                                          *(void *)&__sg[8 * v289] = v292;
                                          uint64_t v293 = (_DWORD *)(v366 + 4 * v291);
                                          *(_DWORD *)(v366 + 4 * v289) = *v293;
                                          *(void *)&__sg[8 * v291] = &v382[8 * (unsigned __int16)v288];
                                        }
                                        *uint64_t v293 = 0;
                                        hlp_KeepTrackBeforeMovingOn(&v382[8 * (unsigned __int16)v288], (int *)&v395 + 1, &v399, &v392, &v395);
                                        uint64_t v288 = (v288 + 1);
                                        ++v289;
                                        if (v384 <= (unsigned __int16)v288)
                                        {
                                          int v352 = 0;
                                          uint64_t v358 = v288;
                                          goto LABEL_428;
                                        }
                                      }
                                      int v352 = 0;
                                      uint64_t v358 = v288;
                                      goto LABEL_429;
                                    }
                                  }
                                  int v352 = 0;
LABEL_428:
                                  uint64_t v113 = v380;
                                  goto LABEL_429;
                                }
                                LOWORD(v362) = 0;
                                goto LABEL_359;
                              }
                            }
                            log_OutText(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"Warning : Found user dictionary entries are ignored as return buffer too small; c"
                                       "onsider increasing value with parameter SSFT_PARAMC_UDCTMAXDICTRETLEN",
                              v148,
                              v149,
                              v150,
                              v323);
                            LOWORD(v362) = 0;
                            int v337 = -1;
                            BOOL v354 = (HIDWORD(v336) | v344) == 0;
                            if (!(HIDWORD(v336) | v344) || (MultiWordEntry & 0x80000000) == 0)
                            {
LABEL_361:
                              int v258 = (unsigned __int16)v343;
                              goto LABEL_369;
                            }
                            int v169 = v336;
                            if (v344) {
                              int v169 = 1;
                            }
                            if (v169) {
                              uint64_t v113 = HIWORD(v393);
                            }
                            else {
                              uint64_t v113 = v380;
                            }
                            int v352 = 1;
LABEL_429:
                            uint64_t v114 = v339;
                            int __sb = (unsigned __int16)v113;
                            if ((unsigned __int16)v113 >= v339)
                            {
                              int v322 = v396;
                              goto LABEL_433;
                            }
                            continue;
                          }
                          break;
                        }
                        cstdlib_memset(v32, 0, *(unsigned __int16 *)(a1 + 968) + 1);
                        int v346 = 0;
                        if ((unsigned __int16)v343 >= v339)
                        {
                          uint64_t v380 = v343;
                          unsigned int v165 = (unsigned __int16)v343;
                          unsigned int v166 = v339;
                        }
                        else
                        {
                          int v346 = 0;
                          unsigned int v165 = (unsigned __int16)v343;
                          uint64_t v380 = v343;
                          unsigned int v166 = v339;
                          while (!utf8_BelongsToSet(3u, v23, v165, v339))
                          {
                            unsigned int Utf8Symbol = utf8_GetUtf8Symbol(v23, v165, v339, (char *)__src);
                            unsigned int __sc = v165;
                            if ((unsigned __int16)Utf8Symbol + (unsigned __int16)v346 >= *(unsigned __int16 *)(a1 + 968))
                            {
                              unsigned int v165 = (unsigned __int16)v380;
                              break;
                            }
                            unsigned int v168 = Utf8Symbol;
                            cstdlib_strcpy(&v32[(unsigned __int16)v346], (const char *)__src);
                            v346 += v168;
                            uint64_t v380 = utf8_GetNextUtf8OffsetLimit(v23, __sc, v339);
                            unsigned int v165 = (unsigned __int16)v380;
                            if ((unsigned __int16)v380 >= v339) {
                              break;
                            }
                          }
                        }
                        HIWORD(v404) = v346;
                        if (v165 >= v166 || utf8_BelongsToSet(3u, v23, v165, v339))
                        {
                          if ((_WORD)v346)
                          {
                            uint64_t v336 = 0;
                            goto LABEL_194;
                          }
                        }
                        else
                        {
                          for (uint64_t k = (unsigned __int16)v380;
                                (unsigned __int16)v380 < v339;
                                uint64_t k = (unsigned __int16)v380)
                          {
                            if (utf8_BelongsToSet(3u, v23, k, v339)) {
                              break;
                            }
                            uint64_t v380 = utf8_GetNextUtf8OffsetLimit(v23, k, v339);
                          }
                          uint64_t v193 = k - (unsigned __int16)v343;
                          if ((int)v193 >= 1)
                          {
                            unsigned int MultiWordEntry = (*(uint64_t (**)(void, void, unsigned char *, uint64_t))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 912), *(void *)(a1 + 920), &v23[(unsigned __int16)v343], v193);
                            if ((MultiWordEntry & 0x80000000) != 0) {
                              goto LABEL_462;
                            }
                            log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 106, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
                              (uint64_t)&v23[(unsigned __int16)v343],
                              v193);
                          }
                        }
                        goto LABEL_428;
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v76 = *(void *)(a1 + 16);
              }
              log_OutPublic(*(void *)(v76 + 32), (uint64_t)"FE_UDWL", 40000, 0, v60, v61, v62, v63, v323);
              uint64_t v386 = 0;
              uint64_t v41 = 0;
              goto LABEL_118;
            }
          }
          else
          {
            uint64_t v57 = *(void *)(a1 + 16);
          }
          log_OutPublic(*(void *)(v57 + 32), (uint64_t)"FE_UDWL", 40000, 0, v35, v36, v37, v38, v323);
          unint64_t v387 = 0;
          uint64_t v386 = 0;
          uint64_t v41 = 0;
        }
        else
        {
          log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v28, v29, v30, v31, v323);
          unint64_t v387 = 0;
          uint64_t v386 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
        }
        uint64_t v42 = 0;
        goto LABEL_118;
      }
    }
    return v12;
  }
  if (!*(void *)((char *)&v407 + 4))
  {
    __src[0] = 0;
    if ((paramc_ParamGetStr(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"clcpppipelinemode", __src) & 0x80000000) != 0
      || !__src[0]
      || !*(unsigned char *)__src[0])
    {
      *a5 = 0;
    }
    goto LABEL_41;
  }
  if (!DWORD2(v407)) {
    goto LABEL_34;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void, const void **, unsigned int *))(*(void *)(a1 + 48) + 88))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v406, &v405);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  uint64_t v12 = (*(uint64_t (**)(void, void, const void *, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 928), *(void *)(a1 + 936), v406, v405);
  if ((v12 & 0x80000000) != 0) {
    return v12;
  }
  if (log_HasTraceTuningDataSubscriber(*(void *)(*(void *)(a1 + 16) + 32))) {
    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 105, (uint64_t)"", (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
  }
      (uint64_t)v406,
      v405);
  uint64_t v18 = (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 96))(*(void *)(a1 + 896), *(void *)(a1 + 904), v405);
  uint64_t v8 = v18;
  if ((v18 & 0x80000000) == 0)
  {
LABEL_34:
    log_OutTraceTuningDataBinary(*(void *)(*(void *)(a1 + 16) + 32), 105, (uint64_t)"", (uint64_t)"text/plain;charset=utf-8",
      (uint64_t)"",
      0);
    if (DWORD1(v407)) {
      uint64_t v18 = synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 56), *(void *)(a1 + 48));
    }
LABEL_41:
    log_OutTraceTuningData(*(uint64_t ***)(*(void *)(a1 + 16) + 32), 104, (uint64_t)"%s%s", v43, v44, v45, v46, v47, "END");
    return v18;
  }
  return v8;
}

uint64_t hlp_GetMainLangLC(uint64_t a1, char *a2)
{
  __s = 0;
  *a2 = 0;
  uint64_t Str = paramc_ParamGetStr(a1, (uint64_t)"langcode", &__s);
  if ((Str & 0x80000000) != 0) {
    return Str;
  }
  uint64_t v4 = 2323652608;
  if (__s && cstdlib_strlen(__s) == 3)
  {
    cstdlib_strcpy(a2, __s);
    if (cstdlib_strlen(a2))
    {
      size_t v5 = 0;
      do
      {
        a2[v5] = cstdlib_tolower(a2[v5]);
        ++v5;
      }
      while (v5 < cstdlib_strlen(a2));
    }
    return Str;
  }
  return v4;
}

int *hlp_KeepTrackBeforeMovingOn(int *result, int *a2, void *a3, void *a4, _DWORD *a5)
{
  int v5 = *a2;
  int v6 = *result;
  if (!*a2)
  {
    if (v6 == 7) {
      goto LABEL_12;
    }
    if (v6 != 21)
    {
      if (v6 != 36) {
        goto LABEL_9;
      }
      a3 = a4;
    }
    *a3 = *((void *)result + 3);
    goto LABEL_9;
  }
  if (v6 == 7)
  {
LABEL_12:
    int v7 = 1;
    if (result[6] == 43 && v5 == 0)
    {
      *a2 = 1;
      goto LABEL_24;
    }
LABEL_20:
    if (v5 == 1)
    {
      *a2 = 0;
      if ((v7 & 1) == 0) {
        return result;
      }
    }
    else if (!v7)
    {
      return result;
    }
LABEL_24:
    *a5 = result[6];
    return result;
  }
LABEL_9:
  if (!v5 && v6 == 34)
  {
    *a2 = 1;
    return result;
  }
  if (v6 == 21)
  {
    int v7 = 0;
    goto LABEL_20;
  }
  return result;
}

BOOL hlp_ValidateMultiWordMarker(uint64_t *a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, char *__dst, uint64_t a7, uint64_t a8, unsigned char *a9, long long a10, uint64_t a11, uint64_t a12)
{
  size_t v16 = a5 - (unint64_t)a4;
  cstdlib_strncpy(__dst, (const char *)(a3 + a4), v16);
  __dst[v16] = 0;
  int v19 = 1;
  *(void *)&long long v18 = &v19;
  *((void *)&v18 + 1) = a9;
  return (udwl_MatchUdctWord(a1[2], a1[118], a1[119], a1[120], 1, __dst, a7, a8, v18, a10, a11, (uint64_t)&a12, 0, 0, 0) & 0x80000000) == 0&& *a9 != 0;
}

uint64_t hlp_FindMultiWordEntry(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, _WORD *a11, _WORD *a12, char *a13, _WORD *a14, unsigned __int16 a15, uint64_t a16, uint64_t a17, _DWORD *a18)
{
  uint64_t v21 = a1;
  uint64_t v100 = *MEMORY[0x263EF8340];
  unsigned __int16 v95 = 1;
  int v94 = 1;
  uint64_t v93 = 0;
  unsigned __int16 v92 = a15;
  *a18 = 0;
  uint64_t v22 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), a15 + 1, 1);
  uint64_t v27 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v28 = v22;
    uint64_t v90 = (char *)heap_Calloc(*(void **)(v27 + 8), a15 + 1, 1);
    if (!v90)
    {
      uint64_t v52 = 2323652618;
      log_OutPublic(*(void *)(*(void *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v29, v30, v31, v32, v81);
LABEL_75:
      heap_Free(*(void **)(*(void *)(v21 + 16) + 8), v28);
      return v52;
    }
    unsigned __int16 v98 = a15;
    *(_DWORD *)int __dst = 1;
    uint64_t v33 = heap_Calloc(*(void **)(*(void *)(v21 + 16) + 8), *(unsigned __int16 *)(v21 + 968) + 1, 1);
    if (v33)
    {
      uint64_t v38 = (char *)v33;
      uint64_t v91 = v21;
      unsigned __int16 v39 = a4;
      unsigned __int16 v97 = a8;
      do
      {
        unsigned __int16 PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)a3, v39);
        unsigned __int16 v39 = PreviousUtf8Offset;
      }
      while (PreviousUtf8Offset > a8 && utf8_BelongsToSet(0, a3, PreviousUtf8Offset, a4));
      uint64_t v84 = v28;
      hlp_Skip(1, 1, a3, &v97, a8, a4);
      unint64_t v41 = v97;
      unsigned __int16 v96 = v97;
      if (v95)
      {
        unsigned int v42 = 0;
        unsigned int v86 = 0;
        unsigned int v43 = v39;
        __src = &a3[v97];
        uint64_t v44 = v91;
        while (v96 <= v43)
        {
          hlp_Skip(1, 1, a3, &v96, v41, a4);
          if (hlp_Skip(2, 1, a3, &v96, v41, a4))
          {
            if (v42)
            {
              ++v42;
            }
            else
            {
              if (*(unsigned __int16 *)(v91 + 968) <= (unsigned __int16)(v96 - v41))
              {
                char *v38 = 0;
              }
              else
              {
                size_t v45 = (unsigned __int16)(v96 - v41);
                cstdlib_strncpy(v38, __src, v45);
                v38[v45] = 0;
                *(_DWORD *)int __dst = 1;
                unsigned int v46 = udwl_LookupMultiWordLengths(*(void *)(v91 + 16), *(void *)(v91 + 944), *(void *)(v91 + 952), *(void *)(v91 + 960), v38, __dst, v90, &v98, (uint64_t)&v95);
                unsigned int v50 = 0;
                if ((v46 & 0x1FFF) != 0x14)
                {
                  if ((v46 & 0x80000000) != 0)
                  {
                    unsigned int v42 = 1;
                    unsigned int v86 = v46;
                    break;
                  }
                  unsigned int v50 = v46;
                }
                unsigned int v86 = v50;
                uint64_t v51 = *(void *)(*(void *)(v91 + 16) + 32);
                if (v95 < 2u) {
                  log_OutText(v51, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: start word '%s': not found", v47, v48, v49, (uint64_t)v38);
                }
                else {
                  log_OutText(v51, (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: start word '%s': found", v47, v48, v49, (uint64_t)v38);
                }
              }
              unsigned int v42 = 1;
            }
          }
          if (v42 >= v95) {
            break;
          }
        }
      }
      else
      {
        unsigned int v42 = 0;
        unsigned int v86 = 0;
        uint64_t v44 = v21;
      }
      heap_Free(*(void **)(*(void *)(v44 + 16) + 8), (uint64_t)v38);
      BOOL v56 = *a18 == 0;
      if (*a18) {
        BOOL v57 = 0;
      }
      else {
        BOOL v57 = v42 >= 2;
      }
      if (v57)
      {
        while (1)
        {
          unint64_t v58 = v96;
          int v59 = v96 - v41;
          if (v59 >= 1 && v59 <= *(unsigned __int16 *)(v91 + 968))
          {
            cstdlib_strcpy(__dst, " ");
            LH_itoa(v42, &__dst[1], 0xAu);
            cstdlib_strcat(__dst, " ");
            if (cstdlib_strstr(v90, __dst))
            {
              if (a6)
              {
                uint64_t v60 = a5;
                unint64_t v61 = 1;
                while (1)
                {
                  if (*v60 > 0x22u || ((1 << *v60) & 0x400200080) == 0)
                  {
                    BOOL v65 = 1;
                  }
                  else
                  {
                    unsigned int v63 = v60[3] - a5[3];
                    BOOL v65 = v63 <= v41 || v63 >= v58;
                    if (!v65) {
                      goto LABEL_56;
                    }
                  }
                  v60 += 8;
                  BOOL v57 = v61++ >= a6;
                  if (v57) {
                    goto LABEL_56;
                  }
                }
              }
              BOOL v65 = 1;
LABEL_56:
              if (v58 > v41)
              {
                unint64_t v66 = v41;
                if (v65)
                {
                  do
                  {
                    int v67 = *(unsigned __int16 *)(a7 + 2 * v66++);
                    if (v67) {
                      BOOL v68 = 1;
                    }
                    else {
                      BOOL v68 = v66 >= v58;
                    }
                  }
                  while (!v68);
                  BOOL v65 = v67 == 0;
                }
              }
              if (v65)
              {
                cstdlib_strncpy(a13, &a3[v41], (unsigned __int16)(v58 - v41));
                a13[(unsigned __int16)(v58 - v41)] = 0;
                unsigned __int16 v92 = a15;
                int v94 = 1;
                log_OutTraceTuningData(*(uint64_t ***)(*(void *)(v91 + 16) + 32), 110, (uint64_t)"%s%s %s%s %s%s", v69, v70, v71, v72, v73, "BEG");
                *((void *)&v83 + 1) = a16;
                *(void *)&long long v83 = &v92;
                *(void *)&long long v82 = &v94;
                *((void *)&v82 + 1) = v84;
                uint64_t matched = udwl_MatchUdctWord(*(void *)(v91 + 16), *(void *)(v91 + 944), *(void *)(v91 + 952), *(void *)(v91 + 960), 1, a13, a9, a10, v82, v83, a17, (uint64_t)&v93, 2, 0, 0);
                unsigned int v86 = 0;
                if ((matched & 0x1FFF) != 0x14)
                {
                  uint64_t v52 = matched;
                  if ((matched & 0x80000000) != 0)
                  {
                    uint64_t v21 = v91;
                    uint64_t v28 = v84;
                    goto LABEL_74;
                  }
                  log_OutTraceTuningData(*(uint64_t ***)(*(void *)(v91 + 16) + 32), 110, (uint64_t)"%s%s %s%u %s%d %s%s %s%s", v75, v76, v77, v78, v79, "END");
                  *a18 = 1;
                  *a11 = v41;
                  *a12 = v58;
                  unsigned int v86 = v52;
                  *a14 = v58 - v41;
                }
              }
            }
          }
          hlp_Skip(2, -1, a3, &v96, v41, a4);
          hlp_Skip(1, -1, a3, &v96, v41, a4);
          BOOL v56 = *a18 == 0;
          if (!*a18 && (--v42 & 0xFFFE) != 0) {
            continue;
          }
          break;
        }
      }
      uint64_t v52 = v86;
      uint64_t v21 = v91;
      uint64_t v28 = v84;
      if (v56) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v52 = 2323652618;
      log_OutPublic(*(void *)(*(void *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v34, v35, v36, v37, v81);
      if (!*a18)
      {
LABEL_71:
        if (v95 >= 2u) {
          log_OutText(*(void *)(*(void *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: no UMW found", v53, v54, v55, (uint64_t)a13);
        }
        *a13 = 0;
LABEL_74:
        heap_Free(*(void **)(*(void *)(v21 + 16) + 8), (uint64_t)v90);
        goto LABEL_75;
      }
    }
    log_OutText(*(void *)(*(void *)(v21 + 16) + 32), (uint64_t)"FE_UDWL", 5, 0, (uint64_t)"lookup UMW: '%s': found", v53, v54, v55, (uint64_t)a13);
    goto LABEL_74;
  }
  uint64_t v52 = 2323652618;
  log_OutPublic(*(void *)(v27 + 32), (uint64_t)"FE_UDWL", 40000, 0, v23, v24, v25, v26, v81);
  return v52;
}

uint64_t fe_udwl_MatchUDctWord(uint64_t *a1, int a2, int a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, _WORD *a12, _WORD *a13)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 107, (uint64_t)"%s%s %s%s %s%s", v20, v21, v22, v23, v24, "BEG");
  *(void *)&long long v33 = a7;
  *((void *)&v33 + 1) = a8;
  uint64_t matched = udwl_MatchUdctWord(a1[2], a1[118], a1[119], a1[120], a3, a4, a5, a6, v33, a9, a10, a11, 1, a12, a13);
  uint64_t v31 = *(uint64_t ***)(a1[2] + 32);
  if ((matched & 0x80000000) != 0) {
    log_OutTraceTuningData(v31, 107, (uint64_t)"%s%s %s%u", v25, v26, v27, v28, v29, "END");
  }
  else {
    log_OutTraceTuningData(v31, 107, (uint64_t)"%s%s %s%u %s%d %s%s %s%s", v25, v26, v27, v28, v29, "END");
  }
  return matched;
}

uint64_t hlp_InsertLangMarker(uint64_t a1, const char *a2, int a3, int a4, uint64_t *a5, uint64_t *a6, int a7, unsigned int a8, _WORD *a9)
{
  uint64_t v17 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *a5, 8 * ((unsigned __int16)*a9 + a7) + 8);
  if (!v17
    || (*a5 = v17,
        (uint64_t v22 = heap_Realloc(*(uint64_t **)(*(void *)(a1 + 16) + 8), *a6, 4 * ((unsigned __int16)*a9 + a7) + 4)) == 0))
  {
    uint64_t v34 = 2323652618;
    uint64_t v24 = *(void *)(a1 + 16);
LABEL_7:
    log_OutPublic(*(void *)(v24 + 32), (uint64_t)"FE_UDWL", 40000, 0, v18, v19, v20, v21, v38);
    return v34;
  }
  *a6 = v22;
  *(_DWORD *)(v22 + 4 * ((unsigned __int16)*a9 + a7)) = 0;
  uint64_t v23 = heap_Calloc(*(void **)(*(void *)(a1 + 16) + 8), 1, 32);
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v23)
  {
    uint64_t v34 = 2323652618;
    goto LABEL_7;
  }
  uint64_t v25 = v23;
  uint64_t v26 = *(void **)(v24 + 8);
  int v27 = cstdlib_strlen(a2);
  uint64_t v28 = (char *)heap_Calloc(v26, (v27 + 1), 1);
  if (v28)
  {
    long long v33 = v28;
    cstdlib_strcpy(v28, a2);
    uint64_t v34 = 0;
    *(void *)(v25 + 24) = v33;
    *(_DWORD *)uint64_t v25 = 36;
    *(_DWORD *)(v25 + 4) = a3;
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v25 + 12) = a4;
    uint64_t v35 = (unsigned __int16)*a9;
    uint64_t v36 = v35 + a8;
    *(void *)(*a5 + 8 * v36) = v25;
    *(_DWORD *)(v25 + 16) = 0;
    *(_DWORD *)(*a6 + 4 * v36) = 1;
    *a9 = v35 + 1;
  }
  else
  {
    uint64_t v34 = 2323652618;
    log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"FE_UDWL", 40000, 0, v29, v30, v31, v32, v38);
    heap_Free(*(void **)(*(void *)(a1 + 16) + 8), v25);
  }
  return v34;
}

uint64_t stableArraySort(uint64_t result, int a2, int a3)
{
  if (a2 < a3)
  {
    signed int v3 = a2;
    do
    {
      if (v3 >= a2)
      {
        unsigned int v4 = v3;
        do
        {
          int v5 = (long long *)(result + 32 * (v4 + 1));
          signed int v6 = v4;
          int v7 = (long long *)(result + 32 * v4);
          if (*((_DWORD *)v5 + 3) >= *((_DWORD *)v7 + 3)) {
            break;
          }
          long long v9 = *v5;
          long long v8 = v5[1];
          long long v10 = v7[1];
          *int v5 = *v7;
          v5[1] = v10;
          *int v7 = v9;
          v7[1] = v8;
          unsigned int v4 = v6 - 1;
        }
        while (v6 > a2);
      }
      ++v3;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t fe_udwl_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v3 = *(void *)(a1 + 48);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 56), v3);
}

uint64_t fe_udwl_ResourceTypes(uint64_t a1, int a2, void *a3)
{
  if ((safeh_HandleCheck(a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t result = 0;
  *a3 = fe_udwl_ResourceTypes_SZ_FE_UDWL_CONTENT_TYPES_DCTEG;
  return result;
}

uint64_t fe_udwl_ResourceUnload(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62346, 976) & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v7 = a1[118];
  if (!v7) {
    return 2323652616;
  }
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 64);
  uint64_t v9 = a1[119];
  uint64_t v10 = a1[120];

  return v8(v9, v10, a3, a4);
}

uint64_t fe_udwl_IsUDictAvailable(void *a1, int a2, _DWORD *a3)
{
  uint64_t v5 = safeh_HandleCheck((uint64_t)a1, a2, 62346, 976);
  if ((v5 & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v6 = v5;
  *a3 = 1;
  uint64_t v7 = a1[118];
  if (!v7 || !(*(unsigned int (**)(void, void))(v7 + 80))(a1[119], a1[120])) {
    *a3 = 0;
  }
  return v6;
}

uint64_t fe_udwl_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2323652609;
  }
  uint64_t result = 0;
  *a2 = &IFeUdwl;
  return result;
}

BOOL hlp_Skip(int a1, int a2, unsigned char *a3, unsigned __int16 *a4, unsigned int a5, uint64_t a6)
{
  unsigned int v10 = *a4;
  if (a1 == 1)
  {
    if (a2 == 1)
    {
      if (v10 < a6)
      {
        unsigned int v15 = *a4;
        do
        {
          if (!utf8_BelongsToSet(0, a3, v15, a6)) {
            break;
          }
          unsigned __int16 NextUtf8OffsetLimit = utf8_GetNextUtf8OffsetLimit(a3, *a4, a6);
          unsigned int v15 = NextUtf8OffsetLimit;
          *a4 = NextUtf8OffsetLimit;
        }
        while (NextUtf8OffsetLimit < a6);
      }
    }
    else if (a2 == -1)
    {
      do
      {
        unsigned __int16 v11 = *a4;
        unsigned __int16 PreviousUtf8OffsetLimit = utf8_GetPreviousUtf8OffsetLimit((uint64_t)a3, *a4, a6);
        *a4 = PreviousUtf8OffsetLimit;
      }
      while (PreviousUtf8OffsetLimit > a5 && utf8_BelongsToSet(0, a3, PreviousUtf8OffsetLimit, a6));
LABEL_22:
      *a4 = v11;
    }
  }
  else if (a2 == -1)
  {
    if (v10 > a5)
    {
      do
      {
        unsigned __int16 v11 = *a4;
        unsigned __int16 v17 = utf8_GetPreviousUtf8OffsetLimit((uint64_t)a3, *a4, a6);
        *a4 = v17;
      }
      while (v17 > a5 && !utf8_BelongsToSet(0, a3, v17, a6));
      goto LABEL_22;
    }
  }
  else if (a2 == 1 && v10 < a6)
  {
    unsigned int v13 = *a4;
    do
    {
      if (utf8_BelongsToSet(0, a3, v13, a6)) {
        break;
      }
      unsigned __int16 v14 = utf8_GetNextUtf8OffsetLimit(a3, *a4, a6);
      unsigned int v13 = v14;
      *a4 = v14;
    }
    while (v14 < a6);
  }
  return v10 != *a4;
}

uint64_t fe_udwl_ResourceLoad(uint64_t *a1, int a2, char *a3, const char *a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  bzero(__s1, 0x400uLL);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v14 = safeh_HandleCheck((uint64_t)a1, a2, 62346, 976);
  if ((v14 & 0x80000000) != 0) {
    return 2323652616;
  }
  uint64_t v49 = 0;
  long long __b = 0u;
  long long v48 = 0u;
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  if (!a3) {
    goto LABEL_38;
  }
  uint64_t v19 = v14;
  if (a4)
  {
    BOOL v20 = a6 != 0;
    if (a5 || !a6) {
      goto LABEL_11;
    }
LABEL_38:
    log_OutPublic(*(void *)(a1[2] + 32), (uint64_t)"FE_UDWL", 40001, 0, v15, v16, v17, v18, v43);
    return 2323652615;
  }
  if (!a5 || !a6) {
    goto LABEL_38;
  }
  BOOL v20 = 1;
LABEL_11:
  unsigned int v46 = 0;
  cstdlib_memset(&__b, 0, 0x28uLL);
  uint64_t v49 = a3;
  if (a5 != 0 && v20) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = a4;
  }
  *(void *)&long long __b = v26;
  *((void *)&__b + 1) = a4;
  *(void *)&long long v48 = a5;
  DWORD2(v48) = a6;
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 101, (uint64_t)"%s%s %s%s %s%s", v21, v22, v23, v24, v25, "BEG");
  if (v20 || !cstdlib_strstr(a3, ";loader=broker")) {
    goto LABEL_30;
  }
  int v32 = brk_DataOpenEx(*(void *)(a1[2] + 24), (uint64_t)a4, 1, (uint64_t)&v45);
  int v33 = v32;
  if (a4 && v32 < 0)
  {
    uint64_t Str = paramc_ParamGetStr(*(void *)(a1[2] + 40), (uint64_t)"langcode", &v46);
    if ((Str & 0x80000000) != 0)
    {
LABEL_32:
      uint64_t v19 = Str;
      goto LABEL_33;
    }
    if ((brokeraux_ComposeBrokerString(a1[2], a4, 0, 1, v46, 0, 0, __s1, 0x400uLL) & 0x80000000) != 0)
    {
LABEL_40:
      uint64_t v19 = 0;
      goto LABEL_33;
    }
    int v33 = brk_DataOpenEx(*(void *)(a1[2] + 24), (uint64_t)__s1, 1, (uint64_t)&v45);
  }
  if (v33 < 0) {
    goto LABEL_40;
  }
  uint64_t v19 = brk_DataMapEx(*(void *)(a1[2] + 24), v45, 0, (uint64_t)&v48 + 8, (uint64_t)&v44);
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_33;
  }
  *(void *)&long long __b = 0;
  __s1[0] = 0;
  cstdlib_strcat(__s1, a3);
  uint64_t v35 = cstdlib_strchr(__s1, 59);
  if (v35) {
    *uint64_t v35 = 0;
  }
  uint64_t v36 = cstdlib_strstr(a3, "mode=");
  if (v36)
  {
    uint64_t v37 = v36;
    unsigned int v38 = cstdlib_strchr(v36, 59);
    LOWORD(v39) = (_WORD)v38;
    if (!v38) {
      uint64_t v39 = (unsigned __int16)((_WORD)v37 + cstdlib_strlen(v37));
    }
    cstdlib_strcat(__s1, ";");
    cstdlib_strncat(__s1, v37, (unsigned __int16)(v39 - (_WORD)v37));
  }
  uint64_t v49 = __s1;
  *(void *)&long long v48 = v44;
LABEL_30:
  uint64_t v40 = a1[118];
  if (v40)
  {
    uint64_t Str = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t))(v40 + 56))(a1[119], a1[120], &__b, a7);
    goto LABEL_32;
  }
LABEL_33:
  uint64_t v41 = v45;
  if (v44)
  {
    brk_DataUnmap(*(void *)(a1[2] + 24), v45, v44);
    uint64_t v44 = 0;
    uint64_t v41 = v45;
  }
  if (v41)
  {
    brk_DataClose(*(void *)(a1[2] + 24), v41);
    uint64_t v45 = 0;
  }
  log_OutTraceTuningData(*(uint64_t ***)(a1[2] + 32), 101, (uint64_t)"%s%s %s%u", v27, v28, v29, v30, v31, "END");
  return v19;
}

uint64_t udwl_MatchUdctWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char *__s, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12, int a13, _WORD *a14, _WORD *a15)
{
  __int16 v16 = 0;
  return hlp_udwl_Lookup(0, a1, a2, a3, a4, a5, __s, a7, a8, (_DWORD *)a9, *((char **)&a9 + 1), (unsigned __int16 *)a10, *((uint64_t *)&a10 + 1), a11, a12, (uint64_t)&v16, a13, a14, a15);
}

uint64_t hlp_udwl_Lookup(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char *__s, uint64_t a8, uint64_t a9, _DWORD *a10, char *a11, unsigned __int16 *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, _WORD *a18, _WORD *a19)
{
  v89[1] = *MEMORY[0x263EF8340];
  int v64 = 0;
  uint64_t v88 = 0;
  v89[0] = 0;
  unsigned __int16 __s1 = __s;
  v66[0] = udwl_nbs_TakeAsIs;
  v66[1] = &__s1;
  v66[2] = &__s1;
  int v67 = 0;
  BOOL v68 = udwl_nbs_TrimBlanksAndMatchingQuotes;
  p_s1 = &__s1;
  uint64_t v70 = &v88;
  int v71 = 0;
  uint64_t v72 = udwl_nbs_TrimHeadAndTail;
  uint64_t v73 = &v88;
  uint64_t v74 = v89;
  int v75 = 0;
  uint64_t v76 = udwl_nbs_TrimTrailingDots;
  uint64_t v77 = v89;
  uint64_t v78 = &v88;
  int v79 = 0;
  uint64_t v80 = udwl_nbs_ToLower;
  unsigned int v81 = (const char **)v89;
  long long v82 = (char **)&v88;
  uint64_t v84 = udwl_nbs_TrimTrailingDots;
  uint64_t v85 = &v88;
  unsigned int v86 = v89;
  int v83 = 0;
  int v87 = 0;
  if (a6) {
    uint64_t v19 = 6;
  }
  else {
    uint64_t v19 = 1;
  }
  if (!__s) {
    return 2323652615;
  }
  uint64_t v21 = 2323652628;
  if (a3 && a4)
  {
    unint64_t v62 = v19;
    unsigned __int16 v26 = cstdlib_strlen(__s) + 1;
    uint64_t v27 = (void *)heap_Alloc(*(void *)(a2 + 8), v26);
    uint64_t v88 = (uint64_t)v27;
    if (v27
      && (cstdlib_memset(v27, 0, v26), uint64_t v28 = (void *)heap_Alloc(*(void *)(a2 + 8), v26), (v89[0] = (uint64_t)v28) != 0))
    {
      uint64_t v58 = a5;
      uint64_t v55 = a8;
      cstdlib_memset(v28, 0, v26);
      uint64_t v29 = 0;
      int v56 = *a12;
      BOOL v63 = 1;
      __int16 v57 = v26;
      uint64_t v59 = a4;
      while (2)
      {
        unsigned int v30 = 0;
        uint64_t v60 = v29;
        uint64_t v31 = &v66[4 * v29];
        int v32 = (uint64_t **)(v31 + 2);
        while (1)
        {
          uint64_t v21 = ((uint64_t (*)(void, uint64_t, void, int *, void *))*v31)(*(void *)v31[1], **v32, v26, &v64, v31 + 3);
          if ((v21 & 0x80001FFF) != 0x80000009) {
            break;
          }
          if (v30 >= 3) {
            goto LABEL_54;
          }
          unsigned __int16 v26 = 2 * v26 + 10;
          int v33 = (void *)heap_Realloc(*(uint64_t **)(a2 + 8), v88, v26 & 0xFFFE);
          uint64_t v88 = (uint64_t)v33;
          if (!v33) {
            return 2323652618;
          }
          cstdlib_memset(v33, 0, v26 & 0xFFFE);
          uint64_t v34 = (void *)heap_Realloc(*(uint64_t **)(a2 + 8), v89[0], v26 & 0xFFFE);
          v89[0] = (uint64_t)v34;
          if (!v34) {
            return 2323652618;
          }
          ++v30;
          cstdlib_memset(v34, 0, v26 & 0xFFFE);
          if (!v63)
          {
            BOOL v63 = 0;
            goto LABEL_31;
          }
        }
        if (!v64
          || ((uint64_t v35 = **v32, !a1)
            ? (uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *, _DWORD *, uint64_t, uint64_t, uint64_t, int))(a3 + 112))(v59, v58, v35, v55, a9, a12, a11, a10, a13, a14, a15, a17)): (uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, char *, uint64_t))(a3 + 120))(v59, v58, v35, a12, a11, a16)),
              (uint64_t v21 = v36, (v36 & 0x1FFF) == 0x14) || ((v36 & 0x1FFF) != 0x404 ? (v37 = (int)v36 < 1) : (v37 = 0), !v37)))
        {
          uint64_t v29 = v60 + 1;
          BOOL v63 = v60 + 1 < v62;
          if (v60 + 1 != v62) {
            continue;
          }
          BOOL v63 = 0;
          unsigned __int16 v38 = v62;
          goto LABEL_32;
        }
        break;
      }
      if ((v36 & 0x80000000) == 0)
      {
        LODWORD(v21) = 0;
        if (a18 && a19)
        {
          uint64_t v47 = __s1;
          unsigned __int16 v38 = v60;
          long long v48 = &v66[4 * (unsigned __int16)v60];
          unsigned int v50 = (char **)v48[1];
          uint64_t v49 = v48 + 1;
          *a18 = 0;
          uint64_t v51 = cstdlib_strstr(*v50, *(const char **)v49[1]);
          if (v51)
          {
            uint64_t v52 = &v51[-*(void *)*v49];
            *a18 = (_WORD)v52;
            if ((_WORD)v60)
            {
              __int16 v53 = v71 + (_WORD)v52;
              *a18 = v53;
              if ((unsigned __int16)v60 != 1) {
                *a18 = v75 + v53;
              }
            }
          }
          __int16 v54 = cstdlib_strlen(v47);
          LODWORD(v21) = 0;
          *a19 = v54 - *a18 - cstdlib_strlen(*(const char **)v49[1]);
        }
        else
        {
LABEL_31:
          unsigned __int16 v38 = v60;
        }
LABEL_32:
        if (*a10 == 4)
        {
          if (v38 == 4 && v64)
          {
            uint64_t v40 = __s1;
            uint64_t v41 = *v82;
            unsigned int v42 = *v81;
            __int16 v43 = v57;
            uint64_t v44 = a11;
            uint64_t v45 = a12;
            int v46 = v56;
LABEL_38:
            LODWORD(v21) = udwl_RestoreHeadAndTail(v44, v45, v46, v40, v43, v41, v42);
            goto LABEL_39;
          }
          if (v63)
          {
            uint64_t v40 = __s1;
            uint64_t v41 = *(char **)v66[4 * v38 + 2];
            __int16 v43 = v57;
            uint64_t v44 = a11;
            uint64_t v45 = a12;
            int v46 = v56;
            unsigned int v42 = 0;
            goto LABEL_38;
          }
        }
LABEL_39:
        if (v88) {
          heap_Free(*(void **)(a2 + 8), v88);
        }
        if (v89[0]) {
          heap_Free(*(void **)(a2 + 8), v89[0]);
        }
        if (v63) {
          return v21;
        }
        else {
          return 2323652628;
        }
      }
LABEL_54:
      if (v88) {
        heap_Free(*(void **)(a2 + 8), v88);
      }
      if (v89[0]) {
        heap_Free(*(void **)(a2 + 8), v89[0]);
      }
    }
    else
    {
      return 2323652618;
    }
  }
  return v21;
}

uint64_t udwl_LookupMultiWordLengths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s, _DWORD *a6, char *a7, unsigned __int16 *a8, uint64_t a9)
{
  return hlp_udwl_Lookup(1, a1, a2, a3, a4, 1, __s, 0, 0, a6, a7, a8, (uint64_t)v11, (uint64_t)v10, 0, a9, 0, 0, 0);
}

uint64_t udwl_nbs_TakeAsIs(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t v9 = 2323652615;
  if (__s && a2)
  {
    if (__s == a2)
    {
      if (a4) {
        *a4 = 1;
      }
      if (!a5) {
        return 0;
      }
    }
    else
    {
      if (cstdlib_strlen(__s) >= a3) {
        return 2323652617;
      }
      cstdlib_strcpy(a2, __s);
      if (a4) {
        *a4 = 1;
      }
      if (!a5) {
        return 0;
      }
    }
    uint64_t v9 = 0;
    *a5 = 0;
  }
  return v9;
}

uint64_t udwl_nbs_TrimBlanksAndMatchingQuotes(char *__s, char *a2, uint64_t a3, _DWORD *a4, unsigned int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t result = 2323652615;
  if (__s && a2 && *__s)
  {
    unsigned int NextUtf8Offset = 0;
    unsigned int v11 = cstdlib_strlen(__s);
    if (!v11) {
      goto LABEL_12;
    }
    while (utf8_BelongsToSet(0, __s, NextUtf8Offset, v11))
    {
      unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
      if (NextUtf8Offset >= v11) {
        goto LABEL_12;
      }
    }
    if (utf8_BelongsToSet(7u, __s, NextUtf8Offset, v11))
    {
      unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
      int v12 = 0;
    }
    else
    {
LABEL_12:
      int v12 = 1;
    }
    if (NextUtf8Offset >= v11)
    {
      return 2323652628;
    }
    else
    {
      while (utf8_BelongsToSet(0, __s, NextUtf8Offset, v11))
      {
        unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
        if (NextUtf8Offset >= v11) {
          return 2323652628;
        }
      }
      if (a5) {
        *a5 = NextUtf8Offset;
      }
      unsigned int PreviousUtf8Offset = v11;
      do
      {
        unsigned int v14 = PreviousUtf8Offset;
        if (PreviousUtf8Offset <= NextUtf8Offset)
        {
          BOOL v17 = 1;
          goto LABEL_25;
        }
        unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
      }
      while (utf8_BelongsToSet(0, __s, PreviousUtf8Offset, v11));
      unsigned int v15 = utf8_GetPreviousUtf8Offset((uint64_t)__s, v14);
      int v16 = utf8_BelongsToSet(7u, __s, v15, v11);
      BOOL v17 = v16 == 0;
      if (v16) {
        unsigned int v14 = v15;
      }
      do
      {
LABEL_25:
        size_t v18 = v14 - NextUtf8Offset;
        if (v14 <= NextUtf8Offset) {
          break;
        }
        unsigned int v14 = utf8_GetPreviousUtf8Offset((uint64_t)__s, v14);
      }
      while (utf8_BelongsToSet(0, __s, v14, v11));
      if (v18 == v11)
      {
        cstdlib_strcpy(a2, __s);
      }
      else
      {
        cstdlib_strncpy(a2, &__s[NextUtf8Offset], v18);
        a2[v18] = 0;
        if (a4) {
          *a4 = 1;
        }
      }
      if (v12 | v17) {
        return 2323652628;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t udwl_nbs_TrimHeadAndTail(char *__s, char *a2, unsigned int a3, _DWORD *a4, unsigned int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    unsigned int v11 = cstdlib_strlen(__s);
    if (!v11) {
      return 2323652628;
    }
    unsigned int v12 = 0;
    while (1)
    {
      int WCharFromUtf8 = utf8_GetWCharFromUtf8(__s, v12, v11);
      if (WCharFromUtf8 <= 129)
      {
        if (((WCharFromUtf8 - 60) > 0x3F
           || ((1 << (WCharFromUtf8 - 60)) & 0x8000000180000001) == 0)
          && (WCharFromUtf8 - 39) >= 2)
        {
LABEL_20:
          if (a5) {
            *a5 = v12;
          }
          unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v11);
          unsigned int NextUtf8Offset = v11;
          if (v12 < v11)
          {
            unsigned int v17 = v11;
            do
            {
              unsigned int NextUtf8Offset = v17;
              unsigned int v17 = PreviousUtf8Offset;
              int v18 = utf8_GetWCharFromUtf8(__s, PreviousUtf8Offset, v11);
              if (((v18 - 33) > 0x3C || ((1 << (v18 - 33)) & 0x1800000066000947) == 0)
                && ((v18 - 125) > 0x3E
                 || ((1 << (v18 - 125)) & 0x4080000000A000A1) == 0)
                && ((v18 - 8217) > 0x21 || ((1 << (v18 - 25)) & 0x200000055) == 0)
                && utf8_GetWCharFromUtf8(__s, v17, v11) != 46)
              {
                break;
              }
              unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, v17);
              unsigned int NextUtf8Offset = v17;
            }
            while (v17 > v12);
          }
          if (utf8_GetWCharFromUtf8(__s, NextUtf8Offset, v11) == 46) {
            unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
          }
          unsigned int v19 = NextUtf8Offset - v12;
          if (a4 && v19 != v11) {
            *a4 = 1;
          }
          uint64_t v10 = 2323652617;
          if (NextUtf8Offset != v12 && v19 < a3)
          {
            cstdlib_strncpy(a2, &__s[v12], NextUtf8Offset - v12);
            uint64_t v10 = 0;
            a2[v19] = 0;
          }
          return v10;
        }
      }
      else if (((WCharFromUtf8 - 130) > 0x3D {
              || ((1 << (WCharFromUtf8 + 126)) & 0x2004020080028005) == 0)
      }
             && ((WCharFromUtf8 - 8216) > 0x21
              || ((1 << (WCharFromUtf8 - 24)) & 0x200000055) == 0))
      {
        goto LABEL_20;
      }
      unsigned int v12 = utf8_GetNextUtf8Offset(__s, v12);
      if (v12 >= v11) {
        return 2323652628;
      }
    }
  }
  return v10;
}

uint64_t udwl_nbs_TrimTrailingDots(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    unsigned int v11 = cstdlib_strlen(__s);
    unsigned int v12 = v11;
    if (a5) {
      *a5 = 0;
    }
    unsigned int PreviousUtf8Offset = v11;
    do
    {
      unsigned int v14 = PreviousUtf8Offset;
      if (!PreviousUtf8Offset) {
        break;
      }
      unsigned int PreviousUtf8Offset = utf8_GetPreviousUtf8Offset((uint64_t)__s, PreviousUtf8Offset);
    }
    while (utf8_GetWCharFromUtf8(__s, PreviousUtf8Offset, v12) == 46);
    if (a4 && v14 != v12) {
      *a4 = 1;
    }
    if (v14 >= a3)
    {
      return 2323652617;
    }
    else
    {
      cstdlib_strncpy(a2, __s, v14);
      uint64_t v10 = 0;
      a2[v14] = 0;
    }
  }
  return v10;
}

uint64_t udwl_nbs_ToLower(char *__s, char *a2, unsigned int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a4) {
    *a4 = 0;
  }
  uint64_t v10 = 2323652615;
  if (__s && a2 && *__s)
  {
    unsigned int v11 = cstdlib_strlen(__s);
    unsigned int v12 = v11;
    if (a5) {
      *a5 = 0;
    }
    *a2 = 0;
    if (v11)
    {
      unsigned int NextUtf8Offset = 0;
      size_t v14 = a3;
      while (1)
      {
        BOOL v15 = utf8_ToLower(__s, NextUtf8Offset, (uint64_t)__sa);
        if (a4 && v15) {
          *a4 = 1;
        }
        size_t v16 = cstdlib_strlen(__sa);
        if (cstdlib_strlen(a2) + v16 >= v14) {
          break;
        }
        cstdlib_strcat(a2, __sa);
        unsigned int NextUtf8Offset = utf8_GetNextUtf8Offset(__s, NextUtf8Offset);
        if (NextUtf8Offset >= v12) {
          return 0;
        }
      }
      return 2323652617;
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

uint64_t udwl_RestoreHeadAndTail(char *a1, _WORD *a2, int a3, char *__s1, __int16 a5, char *__s2, const char *a7)
{
  size_t v14 = cstdlib_strstr(__s1, __s2);
  if (v14)
  {
    unsigned int v15 = (unsigned __int16)((_WORD)v14 - (_WORD)__s1);
  }
  else if (a7)
  {
    size_t v16 = cstdlib_strstr(__s1, a7);
    if (v16) {
      unsigned int v15 = (unsigned __int16)((_WORD)v16 - (_WORD)__s1);
    }
    else {
      unsigned int v15 = 0;
    }
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v17 = 2323652615;
  unsigned __int16 v18 = cstdlib_strlen(__s2);
  if (a1 && a2 && __s1 && __s2)
  {
    unsigned __int16 v19 = v18;
    size_t v20 = (unsigned __int16)*a2;
    int v21 = (unsigned __int16)(a5 - 1) - v18;
    if (v21 + (int)v20 <= a3)
    {
      if (v15)
      {
        cstdlib_memmove(&a1[v15], a1, v20);
        cstdlib_memmove(a1, __s1, v15);
        LODWORD(v20) = (unsigned __int16)*a2;
      }
      if ((int)(v21 - v15) >= 1)
      {
        cstdlib_memmove(&a1[v15 + v20], &__s1[v15 + v19], v21 - v15);
        LOWORD(v20) = *a2;
      }
      uint64_t v17 = 0;
      *a2 = v20 + v21;
    }
    else
    {
      return 2323652617;
    }
  }
  return v17;
}

uint64_t unixlit_spec_depes_ascii_to_utf8_mapping(int a1, uint64_t a2, unsigned int *a3)
{
  __int16 v4 = a1;
  if (a1) {
    __int16 v4 = CharMappings[a1];
  }
  return utf8_Utf16ToUtf8((uint64_t)&v4, 1u, 0, a2, 5u, a3, 0);
}

uint64_t unixlit_replace_utf8char(unsigned __int8 *a1, unsigned __int8 *a2)
{
  __int16 v4 = utf8_determineUTF8CharLength(*a1);
  uint64_t result = utf8_determineUTF8CharLength(*a2);
  int v6 = result << 16;
  int v7 = (__int16)result;
  if ((__int16)result != v4)
  {
    long long v8 = (const char *)&a1[v4];
    size_t v9 = cstdlib_strlen(v8);
    uint64_t result = (uint64_t)cstdlib_memmove(&a1[v7], v8, v9 + 1);
  }
  if (v6 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      a1[v10] = a2[v10];
      ++v10;
    }
    while (v7 > (unsigned __int16)v10);
  }
  return result;
}

uint64_t fe_unixlit_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, int a4, uint64_t a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v5 = 2321555463;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  __int16 v24 = 0;
  char v23 = 0;
  if (!a5) {
    return v5;
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t inited = InitRsrcFunction(a3, a4, &v29);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t inited = objc_GetObject(v29[6], (uint64_t)"SYNTHSTREAM", &v28);
  if ((inited & 0x80000000) != 0) {
    return inited;
  }
  uint64_t Object = objc_GetObject(v29[6], (uint64_t)"FE_DEPES", &v26);
  uint64_t v9 = v29[6];
  if ((Object & 0x80000000) != 0)
  {
    size_t v20 = "SYNTHSTREAM";
LABEL_29:
    objc_ReleaseObject(v9, (uint64_t)v20);
    return Object;
  }
  uint64_t v10 = objc_GetObject(v9, (uint64_t)"FE_DCTLKP", &v27);
  if ((v10 & 0x80000000) != 0)
  {
    uint64_t Object = v10;
    objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
    uint64_t v9 = v29[6];
    size_t v20 = "FE_DEPES";
    goto LABEL_29;
  }
  uint64_t v11 = heap_Alloc(v29[1], 984);
  if (v11)
  {
    uint64_t v16 = v11;
    *(void *)uint64_t v11 = v29;
    *(void *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *(void *)(v11 + 56) = *(void *)(v28 + 8);
    uint64_t v17 = v27;
    uint64_t v18 = *(void *)(v27 + 8);
    *(void *)(v11 + 24) = v18;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v17 + 16);
    uint64_t v19 = v26;
    *(void *)(v11 + 48) = *(void *)(v26 + 8);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(v19 + 16);
    *(void *)(v11 + 952) = 0;
    *(_DWORD *)(v11 + 960) = 0;
    *(void *)(v11 + 968) = 0;
    *(_WORD *)(v11 + 976) = 0;
    if (((*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(v18 + 96))(*(void *)(v11 + 8), *(void *)(v11 + 16), "fecfg", "uselatin", &v25, &v24, &v23) & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(void *)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49) {
      *(_DWORD *)(v16 + 952) = 1;
    }
    __int16 v24 = 0;
    if (((*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(*(void *)(v16 + 24) + 96))(*(void *)(v16 + 8), *(void *)(v16 + 16), "fecfg", "unixlitlatinsp", &v25, &v24, &v23) & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(void *)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49) {
      *(_DWORD *)(v16 + 956) = 1;
    }
    __int16 v24 = 0;
    uint64_t v5 = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(*(void *)(v16 + 24) + 96))(*(void *)(v16 + 8), *(void *)(v16 + 16), "fecfg", "lookupa2z", &v25, &v24, &v23);
    if ((v5 & 0x80000000) != 0)
    {
      fe_unixlit_ObjClose(*(void *)a5, *(void *)(a5 + 8));
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
    if (v24 == 1 && v25 && **v25 == 49) {
      *(_DWORD *)(v16 + 960) = 1;
    }
    *(void *)a5 = v16;
    *(_DWORD *)(a5 + 8) = 62345;
    synstrmaux_InitStreamOpener(v16 + 64, *(void *)(*(void *)v16 + 32), (uint64_t)"FE_UNIXLIT");
  }
  else
  {
    log_OutPublic(v29[4], (uint64_t)"FE_UNIXLIT", 39000, 0, v12, v13, v14, v15, v22);
    objc_ReleaseObject(v29[6], (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(v29[6], (uint64_t)"FE_DEPES");
    objc_ReleaseObject(v29[6], (uint64_t)"FE_DCTLKP");
    return 2321555466;
  }
  return v5;
}

uint64_t fe_unixlit_ObjClose(uint64_t a1, int a2)
{
  uint64_t result = safeh_HandleCheck(a1, a2, 62345, 984);
  if ((result & 0x80000000) != 0) {
    return 2321555464;
  }
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 968);
    if (v4)
    {
      if (*(_WORD *)(a1 + 976))
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          heap_Free(*(void **)(*(void *)a1 + 8), *(void *)(v4 + v5));
          int v7 = (void *)(*(void *)(a1 + 968) + v5);
          *int v7 = 0;
          heap_Free(*(void **)(*(void *)a1 + 8), v7[1]);
          uint64_t v4 = *(void *)(a1 + 968);
          *(void *)(v4 + v5 + 8) = 0;
          ++v6;
          v5 += 16;
        }
        while (v6 < *(unsigned __int16 *)(a1 + 976));
      }
      heap_Free(*(void **)(*(void *)a1 + 8), v4);
      *(void *)(a1 + 968) = 0;
    }
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"SYNTHSTREAM");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"FE_DCTLKP");
    objc_ReleaseObject(*(void *)(*(void *)a1 + 48), (uint64_t)"FE_DEPES");
    heap_Free(*(void **)(*(void *)a1 + 8), a1);
    return 0;
  }
  return result;
}

uint64_t fe_unixlit_ObjReopen(uint64_t a1, int a2)
{
  unint64_t v6 = 0;
  __int16 v5 = 0;
  char v4 = 0;
  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0) {
    return 2321555464;
  }
  synstrmaux_InitStreamOpener(a1 + 64, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_UNIXLIT");
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 960) = 0;
  uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 8), *(void *)(a1 + 16), "fecfg", "uselatin", &v6, &v5, &v4);
  if ((result & 0x80000000) == 0)
  {
    if (v5 == 1 && v6 && **v6 == 49) {
      *(_DWORD *)(a1 + 952) = 1;
    }
    __int16 v5 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 8), *(void *)(a1 + 16), "fecfg", "unixlitlatinsp", &v6, &v5, &v4);
    if ((result & 0x80000000) == 0)
    {
      if (v5 == 1 && v6 && **v6 == 49) {
        *(_DWORD *)(a1 + 956) = 1;
      }
      __int16 v5 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, const char *, const char *, unsigned char ***, __int16 *, char *))(*(void *)(a1 + 24) + 96))(*(void *)(a1 + 8), *(void *)(a1 + 16), "fecfg", "lookupa2z", &v6, &v5, &v4);
      if ((result & 0x80000000) == 0 && v5 == 1 && v6 && **v6 == 49) {
        *(_DWORD *)(a1 + 960) = 1;
      }
    }
  }
  return result;
}

uint64_t fe_unixlit_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0) {
    return 2321555464;
  }
  synstrmaux_InitStreamOpener(a1 + 64, *(void *)(*(void *)a1 + 32), (uint64_t)"FE_UNIXLIT");
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", 0, a1 + 888);
  synstrmaux_RegisterInStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
    0,
    a1 + 904);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"text/plain;charset=utf-8", a1 + 920);
  synstrmaux_RegisterOutStream((_WORD *)(a1 + 64), (uint64_t)"application/x-realspeak-markers-pp;version=4.0", a1 + 936);
  uint64_t v7 = synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 64), *(void *)(a1 + 56), a3, a4);
  if ((v7 & 0x80000000) != 0
    || (uint64_t v7 = (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, 1), (v7 & 0x80000000) != 0))
  {
    uint64_t v8 = v7;
LABEL_8:
    synstrmaux_CloseStreams((_WORD *)(a1 + 64), *(void *)(a1 + 56));
    return v8;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 104))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, 0);
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_8;
  }
  return v8;
}

uint64_t unixlit_growMapCharStr(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  unsigned int v5 = a5 + a4;
  unsigned int v6 = *a3;
  if (a5 + a4 < v6) {
    return 0;
  }
  unsigned __int16 v12 = v6 + 32;
  if (v5 <= v12) {
    unsigned __int16 v13 = v12;
  }
  else {
    unsigned __int16 v13 = v5 + 32;
  }
  uint64_t v14 = heap_Realloc(*(uint64_t **)(*(void *)a1 + 8), *a2, 8 * v13);
  if (v14)
  {
    *a2 = v14;
    if (a4 < v13)
    {
      uint64_t v19 = (_DWORD *)(v14 + 8 * a4 + 4);
      unint64_t v20 = v13 - (unint64_t)a4;
      do
      {
        *((_WORD *)v19 - 2) = 9999;
        *uint64_t v19 = 0;
        v19 += 2;
        --v20;
      }
      while (v20);
    }
    uint64_t result = 0;
    *a3 = v13;
  }
  else
  {
    log_OutPublic(*(void *)(*(void *)a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v15, v16, v17, v18, v21);
    return 2321555466;
  }
  return result;
}

uint64_t unixlit_addLangStrs(uint64_t *a1, uint64_t *a2, _WORD *a3, char *__s2, _WORD *a5)
{
  if (*a3)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (!cstdlib_strcmp(*(const char **)(*a2 + v10), __s2))
      {
        uint64_t v31 = 0;
        *a5 = v11;
        return v31;
      }
      ++v11;
      unint64_t v12 = (unsigned __int16)*a3;
      v10 += 16;
    }
    while (v11 < v12);
    uint64_t v13 = heap_Realloc(*(uint64_t **)(*a1 + 8), *a2, 16 * v12 + 17);
    if (v13)
    {
      uint64_t v18 = v13;
      *a2 = v13;
      uint64_t v19 = *(void **)(*a1 + 8);
      unsigned int v20 = cstdlib_strlen(__s2);
      uint64_t v21 = heap_Calloc(v19, 1, v20 + 1);
      *(void *)(v18 + 16 * (unsigned __int16)*a3) = v21;
      uint64_t v22 = *a1;
      if (!v21) {
        goto LABEL_14;
      }
      char v23 = *(void **)(v22 + 8);
      int v24 = cstdlib_strlen(__s2);
      uint64_t v25 = heap_Calloc(v23, 1, (v24 + 1));
      uint64_t v30 = (unsigned __int16)*a3;
      *(void *)(v18 + 16 * v30 + 8) = v25;
      if (!v25)
      {
        uint64_t v31 = 2321555466;
        log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v26, v27, v28, v29, v51);
        int v32 = *(void **)(*a1 + 8);
        uint64_t v33 = *(void *)(v18 + 16 * (unsigned __int16)*a3);
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    uint64_t v31 = 2321555466;
    uint64_t v22 = *a1;
LABEL_16:
    log_OutPublic(*(void *)(v22 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v14, v15, v16, v17, v51);
    return v31;
  }
  uint64_t v34 = heap_Calloc(*(void **)(*a1 + 8), 1, 17);
  uint64_t v22 = *a1;
  if (!v34)
  {
LABEL_14:
    uint64_t v31 = 2321555466;
    goto LABEL_16;
  }
  uint64_t v18 = v34;
  uint64_t v35 = *(void **)(v22 + 8);
  unsigned int v36 = cstdlib_strlen(__s2);
  uint64_t v37 = heap_Calloc(v35, 1, v36 + 1);
  *(void *)(v18 + 16 * (unsigned __int16)*a3) = v37;
  uint64_t v42 = *a1;
  if (v37)
  {
    __int16 v43 = *(void **)(v42 + 8);
    int v44 = cstdlib_strlen(__s2);
    uint64_t v45 = heap_Calloc(v43, 1, (v44 + 1));
    uint64_t v30 = (unsigned __int16)*a3;
    *(void *)(v18 + 16 * v30 + 8) = v45;
    if (v45)
    {
LABEL_12:
      cstdlib_strcpy(*(char **)(v18 + 16 * v30), __s2);
      cstdlib_strcpy(*(char **)(v18 + 16 * (unsigned __int16)*a3 + 8), __s2);
      uint64_t v31 = 0;
      *a5 = (*a3)++;
      *a2 = v18;
      return v31;
    }
    uint64_t v31 = 2321555466;
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v46, v47, v48, v49, v51);
    heap_Free(*(void **)(*a1 + 8), *(void *)(v18 + 16 * (unsigned __int16)*a3));
  }
  else
  {
    uint64_t v31 = 2321555466;
    log_OutPublic(*(void *)(v42 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v38, v39, v40, v41, v51);
  }
  int v32 = *(void **)(*a1 + 8);
  uint64_t v33 = v18;
LABEL_20:
  heap_Free(v32, v33);
  return v31;
}

uint64_t unixlit_lookup(void *a1, uint64_t a2, char *__s, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  __s1[0] = 0;
  if (cstdlib_strlen(__s))
  {
    uint64_t v12 = 0;
    int v13 = 0;
    do
    {
      LH_itoa(__s[v12], v15, 0x10u);
      cstdlib_strcat(__s1, v15);
      uint64_t v12 = (unsigned __int16)++v13;
    }
    while (cstdlib_strlen(__s) > (unsigned __int16)v13);
  }
  return (*(uint64_t (**)(void, void, uint64_t, char *, uint64_t, uint64_t, uint64_t))(a1[3] + 96))(a1[1], a1[2], a2, __s1, a4, a5, a6);
}

uint64_t fe_unixlit_Process(void *a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v439 = *MEMORY[0x263EF8340];
  long long v433 = 0uLL;
  v432 = 0;
  unsigned int v431 = 0;
  uint64_t v430 = 0;
  uint64_t v428 = 0;
  int v427 = 0;
  v423 = 0;
  unsigned __int16 v422 = 0;
  __int16 v421 = 9999;
  v420[3] = 9999;
  strcpy((char *)v420, "latin");
  strcpy(v419, "normal");
  unsigned __int16 __s1 = 0;
  cstdlib_strcpy(__dst, "spell");
  cstdlib_strcpy(v425, "spell:");
  cstdlib_strcpy(v437, "spell:alphanumeric");
  cstdlib_strcpy(v436, "alphanumeric");
  cstdlib_strcpy(v424, "digits");
  cstdlib_strcpy(v435, "characters");
  cstdlib_strcpy(__s2, "normal");
  if ((safeh_HandleCheck((uint64_t)a1, a2, 62345, 984) & 0x80000000) != 0) {
    return 2321555464;
  }
  *a5 = 1;
  uint64_t v8 = (*(uint64_t (**)(void, void, char *, char *))(a1[7] + 144))(a1[111], a1[112], (char *)&v433 + 12, (char *)&v433 + 4);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v9 = (*(uint64_t (**)(void, void, char *, char *))(a1[7] + 144))(a1[113], a1[114], (char *)&v433 + 8, (char *)&v433 + 4);
  if ((v9 & 0x80000000) != 0) {
    return v9;
  }
  if (!HIDWORD(v433))
  {
    int v44 = DWORD1(v433);
    if (!*(void *)((char *)&v433 + 4))
    {
      if ((paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &__s1) & 0x80000000) != 0
        || !__s1
        || !*__s1)
      {
        *a5 = 0;
      }
      return v9;
    }
    if (DWORD2(v433))
    {
      uint64_t v8 = (*(uint64_t (**)(void, void, const void **, unsigned int *))(a1[7] + 88))(a1[113], a1[114], &v432, &v431);
      if ((v8 & 0x80000000) != 0) {
        return v8;
      }
      uint64_t v8 = (*(uint64_t (**)(void, void, const void *, void))(a1[7] + 104))(a1[117], a1[118], v432, v431);
      if ((v8 & 0x80000000) != 0) {
        return v8;
      }
      uint64_t v9 = (*(uint64_t (**)(void, void, void))(a1[7] + 96))(a1[113], a1[114], v431);
      if ((v9 & 0x80000000) != 0) {
        return v9;
      }
      int v44 = DWORD1(v433);
    }
    if (!v44) {
      return v9;
    }
    return synstrmaux_CloseOutStreamsOnly((_WORD *)a1 + 32, a1[7]);
  }
  uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t *, uint64_t))(a1[6] + 112))(a1[4], a1[5], &v428, 1);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void, int *, void))(a1[6] + 112))(a1[4], a1[5], &v427, 0);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  uint64_t v8 = (*(uint64_t (**)(void, void, char **, long long *))(a1[7] + 88))(a1[111], a1[112], &v430, &v433);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  int v10 = v433;
  uint64_t v8 = (*(uint64_t (**)(void, void, const void **, unsigned int *))(a1[7] + 88))(a1[113], a1[114], &v432, &v431);
  if ((v8 & 0x80000000) != 0) {
    return v8;
  }
  unint64_t v11 = v431;
  unint64_t v12 = (unint64_t)v431 >> 5;
  uint64_t v13 = (unsigned __int16)v12;
  uint64_t v14 = (void *)heap_Calloc(*(void **)(*a1 + 8), 1, (32 * (unsigned __int16)v12) | 1);
  if (!v14)
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v15, v16, v17, v18, v377);
    uint64_t v26 = 0;
    uint64_t v9 = 2321555466;
    goto LABEL_680;
  }
  uint64_t v415 = (uint64_t)v14;
  cstdlib_memcpy(v14, v432, v431);
  if ((_WORD)v12)
  {
    uint64_t v19 = (_DWORD *)(v415 + 16);
    uint64_t v20 = (unsigned __int16)(v11 >> 5);
    do
    {
      if (*(v19 - 4) == 1) {
        *uint64_t v19 = 0;
      }
      v19 += 8;
      --v20;
    }
    while (v20);
  }
  uint64_t v21 = (void *)heap_Alloc(*(void *)(*a1 + 8), 8 * (unsigned __int16)v12);
  if (!v21)
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v22, v23, v24, v25, v377);
LABEL_52:
    heap_Free(*(void **)(*a1 + 8), v415);
    return 2321555466;
  }
  uint64_t v26 = (uint64_t)v21;
  if ((_WORD)v12) {
    bzero(v21, 8 * (unsigned __int16)v12);
  }
  int v27 = *(_DWORD *)(v415 + 12);
  if (!v27)
  {
    LODWORD(v428) = 0;
    uint64_t v28 = (*(uint64_t (**)(void, void, void, uint64_t))(a1[6] + 104))(a1[4], a1[5], 0, 1);
    if ((v28 & 0x80000000) != 0)
    {
      uint64_t v9 = v28;
      goto LABEL_64;
    }
  }
  int v407 = v27;
  unsigned __int16 v422 = v10 + 32;
  uint64_t v29 = (_WORD *)heap_Calloc(*(void **)(*a1 + 8), 1, (8 * (unsigned __int16)(v10 + 32)) | 1);
  v423 = v29;
  if (!v29)
  {
    log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 40000, 0, v30, v31, v32, v33, v377);
    heap_Free(*(void **)(*a1 + 8), v26);
    goto LABEL_52;
  }
  uint64_t v34 = (unsigned __int16)(v10 + 32);
  if ((_WORD)v10 != 0xFFE0)
  {
    do
    {
      *uint64_t v29 = 9999;
      v29 += 4;
      --v34;
    }
    while (v34);
  }
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)" ", v31, v32, v33, v377);
  do
    unsigned __int16 v35 = v10;
  while (!v430[(unsigned __int16)v10-- - 1]);
  uint64_t v389 = (32 * (unsigned __int16)(v11 >> 5)) | 1;
  if (v35)
  {
    uint64_t v37 = 0;
    while (1)
    {
      unsigned int v38 = v430[v37];
      BOOL v39 = v38 > 0x20;
      uint64_t v40 = (1 << v38) & 0x100002600;
      BOOL v41 = v39 || v40 == 0;
      if (v41) {
        break;
      }
      if (v35 == ++v37)
      {
        LOBYTE(v37) = v35;
LABEL_33:
        LOWORD(v42) = v35;
        unsigned __int8 v43 = v35;
        goto LABEL_66;
      }
    }
  }
  else
  {
    LOWORD(v37) = 0;
  }
  if ((unsigned __int16)v37 >= v35)
  {
    LOWORD(v42) = v37;
    unsigned __int8 v43 = v37;
  }
  else
  {
    uint64_t v42 = (unsigned __int16)v37;
    while (1)
    {
      unsigned int v46 = v430[v42];
      BOOL v39 = v46 > 0x20;
      uint64_t v47 = (1 << v46) & 0x100002600;
      if (!v39 && v47 != 0) {
        break;
      }
      if (++v42 >= (unint64_t)v35) {
        goto LABEL_33;
      }
    }
    unsigned __int8 v43 = v42;
  }
LABEL_66:
  unsigned int v50 = v35;
  int v51 = v37;
  unsigned __int16 v406 = v35;
  if (v37 >= v35
    || v37
     + (unsigned __int16)utf8_determineUTF8CharLength(v430[v37]) != (unsigned __int16)v42)
  {
    goto LABEL_78;
  }
  if ((unsigned __int16)v42 < v406)
  {
    uint64_t v42 = (unsigned __int16)v42;
    while (1)
    {
      unsigned int v52 = v430[v42];
      BOOL v39 = v52 > 0x20;
      uint64_t v53 = (1 << v52) & 0x100002600;
      if (v39 || v53 == 0) {
        break;
      }
      if (++v42 >= (unint64_t)v406) {
        goto LABEL_77;
      }
    }
  }
  if ((unsigned __int16)v42 == v406)
  {
LABEL_77:
    unsigned __int8 v386 = v50 - v43;
    int v55 = 1;
  }
  else
  {
LABEL_78:
    int v55 = 0;
    unsigned __int8 v386 = 0;
  }
  if (paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &__s1)) {
    BOOL v59 = 1;
  }
  else {
    BOOL v59 = __s1 == 0;
  }
  if (!v59 && !cstdlib_strcmp(__s1, "internal")) {
    int v55 = 0;
  }
  unsigned int v391 = v50;
  int v416 = v55;
  unsigned __int8 v387 = v43;
  int v388 = v51;
  unsigned int v390 = v11;
  uint64_t v395 = v26;
  log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Markers IN", v56, v57, v58, v378);
  uint64_t v63 = (unsigned __int16)(v11 >> 5);
  uint64_t v414 = v63;
  if ((unsigned __int16)(v11 >> 5))
  {
    int v64 = (unsigned int *)v415;
    while (1)
    {
      uint64_t v65 = *(void *)(*a1 + 32);
      uint64_t v66 = *v64;
      if (v66 == 0x4000) {
        log_OutText(v65, (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=SYNC] Ref (%u,%u) Cur(%u,%u)", v60, v61, v62, v64[1]);
      }
      else {
        log_OutText(v65, (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v60, v61, v62, v66);
      }
      int v67 = *v64;
      if ((int)*v64 <= 33) {
        break;
      }
      if (v67 == 34 || v67 == 40) {
        goto LABEL_97;
      }
LABEL_99:
      if (v67 == 26)
      {
        BOOL v68 = v430;
        unsigned int v69 = *v430;
        BOOL v39 = v69 > 0x3F;
        unint64_t v70 = (1 << v69) & 0x8C00700200000000;
        if (!v39 && v70 != 0) {
          goto LABEL_104;
        }
        if (cstdlib_strlen(v430) < 3) {
          goto LABEL_105;
        }
        int v72 = *v68;
        if (v72 == 239)
        {
          if (v68[1] != 188 || v68[2] - 129 > 0x1E) {
            goto LABEL_105;
          }
          int v73 = 1 << (v68[2] + 127);
          int v74 = 1174407169;
LABEL_117:
          if ((v73 & v74) == 0) {
            goto LABEL_105;
          }
        }
        else
        {
          if (v72 != 227)
          {
            if (v72 != 226 || v68[1] != 128 || v68[2] - 147 > 0x13) {
              goto LABEL_105;
            }
            int v73 = 1 << (v68[2] + 109);
            int v74 = 524291;
            goto LABEL_117;
          }
          if (v68[1] != 128 || (v68[2] + 127) >= 2u) {
            goto LABEL_105;
          }
        }
        *(_WORD *)BOOL v68 = 8224;
        v68 += 2;
LABEL_104:
        int v416 = 0;
        *BOOL v68 = 32;
      }
LABEL_105:
      v64 += 8;
      if (!--v63) {
        goto LABEL_122;
      }
    }
    if (v67 == 7) {
      goto LABEL_97;
    }
    if (v67 != 21) {
      goto LABEL_99;
    }
    if (cstdlib_strcmp(*((const char **)v64 + 3), __s2)) {
LABEL_97:
    }
      int v416 = 0;
    int v67 = *v64;
    goto LABEL_99;
  }
LABEL_122:
  uint64_t v75 = unixlit_addLangStrs(a1, a1 + 121, (_WORD *)a1 + 488, (char *)v420, &v421);
  if ((v75 & 0x80000000) != 0) {
    goto LABEL_676;
  }
  uint64_t v76 = unixlit_addLangStrs(a1, a1 + 121, (_WORD *)a1 + 488, v419, &v421);
  uint64_t v13 = (unsigned __int16)(v11 >> 5);
  if ((v76 & 0x80000000) != 0) {
    goto LABEL_612;
  }
  uint64_t v381 = a1 + 122;
  uint64_t v382 = a1 + 121;
  uint64_t v77 = 0;
  int v78 = 0;
  uint64_t v79 = 0;
  int v405 = 0;
  uint64_t v402 = 0;
  int v80 = 0;
  uint64_t v392 = 0;
  int v81 = 0;
  long long v82 = 0;
  unsigned __int16 v83 = v406;
  __s = __s2;
  char v383 = 2;
  int v400 = 0;
  int v401 = 1;
  uint64_t v84 = v415;
  __int16 v85 = v407;
  while (1)
  {
    memset(__c, 0, sizeof(__c));
    if (v13 > (unsigned __int16)v81) {
      break;
    }
LABEL_317:
    LOWORD(v132) = (_WORD)v82;
    int v133 = v78;
    uint64_t v134 = v77;
LABEL_318:
    int v132 = (char *)(unsigned __int16)v132;
    if ((unsigned __int16)v132 >= v83)
    {
      LOWORD(v78) = v133;
LABEL_547:
      if (!v405 || !(_WORD)v78) {
        goto LABEL_560;
      }
      if ((unsigned __int16)v78 != (unsigned __int16)v134) {
        goto LABEL_559;
      }
      unsigned int v276 = cstdlib_strlen("§");
      uint64_t v277 = *(void (**)(void, void, const char *, size_t))(a1[7] + 104);
      size_t v278 = cstdlib_strlen("§");
      v277(a1[115], a1[116], "§", v278);
      uint64_t v76 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, (unsigned __int16)v276);
      if ((v76 & 0x80000000) == 0)
      {
        if (v276)
        {
          int v279 = 0;
          __int16 v280 = v420[3];
          uint64_t v281 = (uint64_t)v423;
          do
          {
            *(_WORD *)(v281 + 8 * (unsigned __int16)v79) = v280;
            LOWORD(v79) = v79 + 1;
            ++v279;
          }
          while (v276 > (unsigned __int16)v279);
        }
        v80 += cstdlib_strlen("§");
        uint64_t v13 = v414;
LABEL_559:
        uint64_t v84 = v415;
LABEL_560:
        while (v13 > (unsigned __int16)v81)
        {
          *(_DWORD *)(v84 + 32 * (unsigned __int16)v81 + 12) = (*(_DWORD *)(v84 + 32 * (unsigned __int16)v81 + 12)
                                                                + (__int16)v80
                                                                + v428) & ~((*(_DWORD *)(v84
                                                                                               + 32
                                                                                               * (unsigned __int16)v81
                                                                                               + 12)
                                                                                   + (__int16)v80
                                                                                   + (int)v428) >> 31);
          ++v81;
        }
        uint64_t v76 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], "", 1);
        if ((v76 & 0x80000000) == 0)
        {
          uint64_t v76 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
          if ((v76 & 0x80000000) == 0)
          {
            uint64_t v75 = (*(uint64_t (**)(void, void, void))(a1[7] + 96))(a1[111], a1[112], v433);
            if ((v75 & 0x80000000) != 0) {
              goto LABEL_676;
            }
            unsigned __int16 v285 = v79 + 1;
            *(_DWORD *)(v415 + 16) += (__int16)v80;
            if ((_WORD)v79 == 0xFFFF) {
              goto LABEL_651;
            }
            unsigned __int16 v286 = 0;
            uint64_t v287 = (uint64_t)v423;
            unint64_t v288 = (unsigned __int16)(v79 + 1);
            do
            {
              unsigned __int16 v289 = v286;
              uint64_t v290 = v286;
              unsigned int v291 = (unsigned __int16)(v286 + 1);
              if (v291 <= v285) {
                unsigned __int16 v292 = v79 + 1;
              }
              else {
                unsigned __int16 v292 = v291;
              }
              uint64_t v293 = (int *)(v287 + 4 + 8 * v289);
              uint64_t v294 = v290;
              while (1)
              {
                int v295 = *v293;
                v293 += 2;
                if (v295 == 1) {
                  break;
                }
                if (++v294 >= v288) {
                  goto LABEL_575;
                }
              }
              unsigned __int16 v292 = v294;
LABEL_575:
              if ((unsigned __int16)(v292 + 1) <= v285) {
                unsigned __int16 v296 = v79 + 1;
              }
              else {
                unsigned __int16 v296 = v292 + 1;
              }
              unsigned __int16 v286 = v292;
              while (++v286 < v285)
              {
                if (*(_DWORD *)(v287 + 8 * v286 + 4) != 1) {
                  goto LABEL_583;
                }
              }
              unsigned __int16 v286 = v296;
LABEL_583:
              if (v290 < v292 && v290 < v285)
              {
                unsigned int v297 = (unsigned __int16 *)(v287 + 8 * v290);
                unint64_t v298 = v290 + 1;
                uint64_t v299 = v297;
                do
                {
                  int v301 = *v299;
                  v299 += 4;
                  int v300 = v301;
                  if (v301) {
                    BOOL v302 = v298 >= v292;
                  }
                  else {
                    BOOL v302 = 1;
                  }
                }
                while (!v302 && v298++ < v288);
                if (!v300 && v290 < v286)
                {
                  uint64_t v304 = v286 - v290;
                  do
                  {
                    *unsigned int v297 = 0;
                    v297 += 4;
                    --v304;
                  }
                  while (v304);
                }
              }
            }
            while (v286 < v285);
            unsigned __int16 v305 = v423;
            uint64_t v306 = (unsigned __int16)(v79 + 1);
            do
            {
              if (*v305 == 9999) {
                _WORD *v305 = 1;
              }
              v305 += 4;
              --v306;
            }
            while (v306);
            unsigned __int16 v307 = 0;
            LOWORD(v308) = 0;
            while (1)
            {
              uint64_t v308 = (unsigned __int16)v308;
              int v309 = (unsigned __int16)v423[4 * (unsigned __int16)v308];
              if (v309 != 9999) {
                break;
              }
              __int16 v310 = (unsigned __int16)v308 == 0;
              LOWORD(v308) = v308 + 1;
LABEL_610:
              v307 += v310;
              if ((unsigned __int16)v308 >= v285) {
                goto LABEL_614;
              }
            }
            uint64_t v311 = &v423[4 * (unsigned __int16)v308 + 4];
            while (++v308 < v288)
            {
              int v312 = *v311;
              v311 += 4;
              if (v309 != v312)
              {
                __int16 v310 = 1;
                goto LABEL_610;
              }
            }
            ++v307;
LABEL_614:
            int v313 = v307;
            if (!v307)
            {
LABEL_651:
              unsigned int v316 = v414;
              goto LABEL_652;
            }
            uint64_t v314 = 0;
            unsigned int v315 = v423 + 2;
            do
            {
              log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"LANGMAP[%u] = %s [%s]", v282, v283, v284, v314++);
              v315 += 4;
            }
            while (v288 != v314);
            unsigned int v316 = v414 + v313;
            uint64_t v317 = heap_Realloc(*(uint64_t **)(*a1 + 8), v415, (32 * v316) | 1);
            if (v317)
            {
              uint64_t v322 = v317;
              cstdlib_memset((void *)(v317 + v389), 0, ((32 * v316) | 1) - v389);
              int v323 = 0;
              uint64_t v324 = 0;
              unsigned __int16 v325 = 0;
              unsigned __int16 v326 = 0;
              unsigned __int16 v327 = 0;
              uint64_t v328 = (uint64_t)v423;
              do
              {
                unsigned int v329 = (unsigned __int16 *)(v328 + 8 * v327);
                unsigned int v330 = (unsigned __int16)(v327 + 1);
                if (v330 <= v285) {
                  LOWORD(v330) = v285;
                }
                while (++v327 < v285)
                {
                  if (*v329 != *(unsigned __int16 *)(v328 + 8 * v327)) {
                    goto LABEL_625;
                  }
                }
                unsigned __int16 v327 = v330;
LABEL_625:
                int v331 = v326;
                if (v414 > v326)
                {
                  BOOL v332 = (_DWORD *)(v322 + 32 * (v326 + v325));
                  while (v332[3] <= (*(_DWORD *)(v322 + 12) + v323))
                  {
                    int v333 = *v332;
                    if (*v332 == 34) {
                      uint64_t v324 = v332;
                    }
                    v332 += 8;
                    if (v333 == 21) {
                      uint64_t v324 = 0;
                    }
                    if (v414 <= (unsigned __int16)++v331)
                    {
                      unsigned __int16 v326 = v331;
                      int v331 = (unsigned __int16)v331;
                      goto LABEL_635;
                    }
                  }
                  unsigned __int16 v326 = v331;
                }
LABEL_635:
                if (v414 != v331 && v326 != (unsigned __int16)(v390 >> 5))
                {
                  LODWORD(v334) = v331 + v325 + (unsigned __int16)((v390 >> 5) - v326);
                  int v335 = (unsigned __int16)((v390 >> 5) - v326) - 1;
                  do
                  {
                    uint64_t v336 = v334;
                    uint64_t v334 = (v334 - 1);
                    int v337 = (_OWORD *)(v322 + 32 * v334);
                    long long v338 = v337[1];
                    size_t v339 = (_OWORD *)(v322 + 32 * v336);
                    *size_t v339 = *v337;
                    v339[1] = v338;
                    LODWORD(v339) = (unsigned __int16)v335--;
                  }
                  while (v339);
                }
                uint64_t v340 = v322 + 32 * (v331 + v325);
                unsigned int v341 = *v329;
                if (v341 == 9999) {
                  unsigned int v341 = 1;
                }
                *(void *)(v340 + 24) = *(void *)(*v382 + 16 * v341 + 8);
                *(void *)uint64_t v340 = 36;
                int v342 = *(_DWORD *)(v322 + 12) + v323;
                *(_DWORD *)(v340 + 8) = 0;
                *(_DWORD *)(v340 + 12) = v342;
                if (v324)
                {
                  uint64_t v343 = v324[3];
                  int v344 = *(_DWORD *)(v322 + 12);
                  unint64_t v345 = (v344 + v323);
                  uint64_t v346 = -v344;
                  uint64_t v347 = -1;
                  do
                  {
                    ++v347;
                    if (*(_DWORD *)(v328 + 8 * (v343 + v346++) + 4)) {
                      BOOL v349 = v347 + v343 >= v345;
                    }
                    else {
                      BOOL v349 = 1;
                    }
                  }
                  while (!v349);
                  v324[3] = v343 + v347;
                }
                *(_DWORD *)(v340 + 16) = 0;
                ++v325;
                int v323 = v327;
              }
              while (v327 < v285);
              uint64_t v415 = v322;
LABEL_652:
              marker_sort(v415 + 32, (int)(v316 - 1));
              uint64_t v75 = (*(uint64_t (**)(void, void, uint64_t, void))(a1[7] + 104))(a1[117], a1[118], v415, 32 * v316);
              if ((v75 & 0x80000000) == 0)
              {
                log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Markers OUT", v350, v351, v352, v379);
                uint64_t v356 = v415;
                if (v316)
                {
                  unsigned __int16 v357 = 0;
                  uint64_t v358 = (uint64_t)v423;
                  do
                  {
                    uint64_t v359 = v357;
                    uint64_t v360 = *(unsigned int *)(v356 + 32 * v357);
                    if (v360 == 36)
                    {
                      unsigned int v361 = *(unsigned __int16 *)(v358
                                                 + 8
                                                 * (*(_DWORD *)(v356 + 32 * v359 + 12)
                                                                - *(_DWORD *)(v356 + 12)));
                      if (v361 == 9999) {
                        unsigned int v361 = 1;
                      }
                      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=SET_LANG(%s)] Ref (%u,%u) Cur(%u,%u)", v353, v354, v355, *(void *)(a1[121] + 16 * v361));
                    }
                    else if (v360 == 0x4000)
                    {
                      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker[type=SYNC] Ref (%u,%u) Cur(%u,%u)", v353, v354, v355, *(unsigned int *)(v415 + 32 * v359 + 4));
                    }
                    else
                    {
                      log_OutText(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 5, 0, (uint64_t)"Marker [type=%5u] Ref (%u,%u) Cur(%u,%u)", v353, v354, v355, v360);
                    }
                    unsigned __int16 v357 = v359 + 1;
                    uint64_t v356 = v415;
                  }
                  while (v316 > (unsigned __int16)(v359 + 1));
                }
                uint64_t v75 = (*(uint64_t (**)(void, void, void))(a1[7] + 96))(a1[113], a1[114], v431);
                if ((v75 & 0x80000000) == 0)
                {
                  v432 = 0;
                  if (paramc_ParamGetStr(*(void *)(*a1 + 40), (uint64_t)"clcpppipelinemode", &__s1)) {
                    BOOL v362 = 1;
                  }
                  else {
                    BOOL v362 = __s1 == 0;
                  }
                  if ((v362 || cstdlib_strcmp(__s1, "internal")) && v416 && *(_DWORD *)(v415 + 16))
                  {
                    uint64_t v363 = heap_Calloc(*(void **)(*a1 + 8), 1, 32);
                    if (!v363) {
                      goto LABEL_690;
                    }
                    uint64_t v368 = v363;
                    *(_DWORD *)uint64_t v363 = 21;
                    *(void *)(v363 + 24) = __dst;
                    int v369 = v428 + v407;
                    *(void *)(v363 + 4) = (v428 + v407 + v388);
                    *(_DWORD *)(v363 + 12) = v369 & ~(v369 >> 31);
                    *(_DWORD *)(v363 + 16) = 0;
                    uint64_t v370 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(a1[7] + 104))(a1[117], a1[118], v363, 32);
                    heap_Free(*(void **)(*a1 + 8), v368);
                    if ((v370 & 0x80000000) != 0)
                    {
                      uint64_t v9 = v370;
                      goto LABEL_693;
                    }
                    uint64_t v371 = heap_Calloc(*(void **)(*a1 + 8), 1, 32);
                    if (v371)
                    {
                      uint64_t v372 = v371;
                      *(_DWORD *)uint64_t v371 = 21;
                      *(void *)(v371 + 24) = __s2;
                      int v373 = v386 + v387 + v407 + v428;
                      *(_DWORD *)(v371 + 4) = v373;
                      *(_DWORD *)(v371 + 8) = 0;
                      *(void *)(v371 + 12) = (v373 + (__int16)v80) & ~((v373 + (__int16)v80) >> 31);
                      uint64_t v374 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(a1[7] + 104))(a1[117], a1[118], v371, 32);
                      heap_Free(*(void **)(*a1 + 8), v372);
                      if ((v374 & 0x80000000) == 0) {
                        goto LABEL_675;
                      }
                      uint64_t v9 = v374;
LABEL_693:
                      uint64_t v13 = v414;
                      uint64_t v26 = v395;
                    }
                    else
                    {
LABEL_690:
                      log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v364, v365, v366, v367, v380);
                      uint64_t v13 = v414;
                      uint64_t v26 = v395;
                      uint64_t v9 = 2321555466;
                    }
LABEL_64:
                    uint64_t v49 = v415;
                    goto LABEL_679;
                  }
LABEL_675:
                  v427 += (__int16)v80;
                  uint64_t v75 = (*(uint64_t (**)(void, void))(a1[6] + 104))(a1[4], a1[5]);
                }
              }
LABEL_676:
              uint64_t v9 = v75;
              uint64_t v13 = v414;
LABEL_677:
              uint64_t v26 = v395;
            }
            else
            {
              log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v318, v319, v320, v321, v379);
              uint64_t v13 = v414;
              uint64_t v26 = v395;
              uint64_t v9 = 2321555466;
            }
            uint64_t v49 = v415;
            goto LABEL_679;
          }
        }
      }
LABEL_612:
      uint64_t v9 = v76;
      goto LABEL_677;
    }
    __int16 v421 = 9999;
    uint64_t v409 = v429;
    uint64_t UTF8Char = utf8_getUTF8Char((uint64_t)v430, (unsigned __int16)v132, v429);
    if (v400)
    {
      uint64_t v192 = 0;
      unsigned __int8 v412 = 2;
      uint64_t v392 = v429;
      goto LABEL_321;
    }
    unsigned int v201 = &v430[(unsigned __int16)v132];
    unsigned int v202 = *(unsigned __int8 *)v201;
    if (v202 == 32 && v401 != 0)
    {
      uint64_t v392 = 0;
LABEL_363:
      __int16 v85 = v407;
LABEL_364:
      v80 -= utf8_determineUTF8CharLength(v430[(unsigned __int16)v132]);
      if (v430[(unsigned __int16)v132] == 32)
      {
        int v78 = 0;
        if (v405 && (_WORD)v133 && (unsigned __int16)v133 == (unsigned __int16)v134)
        {
          unsigned int v211 = cstdlib_strlen("§");
          uint64_t v212 = *(void (**)(void, void, const char *, size_t))(a1[7] + 104);
          size_t v213 = cstdlib_strlen("§");
          v212(a1[115], a1[116], "§", v213);
          uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, (unsigned __int16)v211);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          uint64_t v214 = (char *)(unsigned __int16)v132;
          if (v211)
          {
            int v215 = 0;
            __int16 v216 = v420[3];
            uint64_t v217 = (uint64_t)v423;
            do
            {
              *(_WORD *)(v217 + 8 * (unsigned __int16)v79) = v216;
              LODWORD(v79) = v79 + 1;
              ++v215;
            }
            while (v211 > (unsigned __int16)v215);
          }
          int v255 = cstdlib_strlen("§");
          (*(void (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
          uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          int v401 = 0;
          int v78 = 0;
          int v256 = &v423[4 * (unsigned __int16)v79];
          *int v256 = v420[3];
          *((_DWORD *)v256 + 1) = 1;
          uint64_t v79 = (v79 + 1);
          v80 += v255 + 1;
          __int16 v85 = v407;
          int v132 = v214;
          uint64_t v134 = 0;
        }
        else
        {
          uint64_t v134 = 0;
        }
      }
      else
      {
        int v78 = v133 + 1;
        uint64_t v134 = (v134 + 1);
      }
      goto LABEL_511;
    }
    uint64_t v9 = UTF8Char;
    int v204 = *((_DWORD *)a1 + 240);
    BOOL v208 = v204 != 1 || HIDWORD(v402) == 1 || v402 == 1 || v416 == 1;
    if (v204 && v208)
    {
      if (v202 == 32 && v204 == 1 && v416 == 1) {
        goto LABEL_407;
      }
    }
    else
    {
      BOOL v218 = v202 - 48 >= 0xA && (v202 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v218 || v202 == 32)
      {
LABEL_407:
        if (*((_DWORD *)a1 + 238) == 1 && (v202 > 0x60 || v202 - 65 <= 0x19))
        {
          uint64_t v91 = unixlit_addLangStrs(a1, v382, v381, (char *)v420, &v421);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          uint64_t v192 = 0;
          uint64_t v392 = v429;
          char v229 = 1;
        }
        else
        {
LABEL_410:
          uint64_t v192 = 0;
          uint64_t v392 = v429;
          char v229 = 2;
        }
        unsigned __int8 v412 = v229;
        uint64_t v409 = v429;
        goto LABEL_321;
      }
    }
    if (v405)
    {
      size_t v219 = cstdlib_strlen("§");
      uint64_t v134 = v134;
      if (!cstdlib_strncmp(v201, "§", v219)) {
        goto LABEL_410;
      }
    }
    uint64_t v49 = v415;
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_544;
    }
    *(_WORD *)&__c[1] = -1;
    uint64_t v91 = unixlit_lookup(a1, (uint64_t)"utfunixlit", v429, (uint64_t)&__c[3], (uint64_t)&__c[1], (uint64_t)__c);
    if ((v91 & 0x80000000) != 0)
    {
LABEL_542:
      uint64_t v9 = v91;
      goto LABEL_543;
    }
    if (!*(_WORD *)&__c[1]) {
      goto LABEL_363;
    }
    if (v405) {
      int v220 = "-";
    }
    else {
      int v220 = " ";
    }
    unsigned int v221 = **(unsigned __int8 ***)&__c[3];
    if (cstdlib_strstr(**(char ***)&__c[3], "░") == (char *)v221 && cstdlib_strcmp(__s, __dst)) {
      unixlit_replace_utf8char(v221, (unsigned __int8 *)v220);
    }
    uint64_t v409 = (const char *)v221;
    int v222 = cstdlib_strchr((char *)v221, __c[0]);
    if (!v222) {
      goto LABEL_495;
    }
    int v223 = v222;
    uint64_t v224 = v409;
    if (v222 != v409)
    {
      int v225 = utf8_determineUTF8CharLength(0xE2u);
      uint64_t v226 = (unsigned __int8 *)&v223[-v225];
      if (v226 >= (unsigned __int8 *)v409 && cstdlib_strstr(&v223[-v225], "░") == (char *)v226)
      {
        int v275 = cstdlib_strcmp(__s, __dst);
        uint64_t v224 = v223;
        if (v275)
        {
          unixlit_replace_utf8char(v226, (unsigned __int8 *)v220);
          uint64_t v224 = &v223[-utf8_determineUTF8CharLength(0xE2u) + 1];
        }
      }
      else
      {
        uint64_t v224 = v223;
      }
    }
    const char *v224 = 0;
    uint64_t v392 = v224 + 1;
    unsigned __int16 v227 = cstdlib_strchr((char *)v224 + 1, __c[0]);
    if (!v227) {
      goto LABEL_495;
    }
    uint64_t v192 = v227;
    *unsigned __int16 v227 = 0;
    if (!cstdlib_strcmp(v409, "")) {
      goto LABEL_496;
    }
    if (!cstdlib_strcmp(++v192, ""))
    {
LABEL_495:
      uint64_t v192 = 0;
LABEL_496:
      char v228 = 2;
LABEL_497:
      unsigned __int8 v412 = v228;
      goto LABEL_498;
    }
    uint64_t v170 = unixlit_addLangStrs(a1, v382, v381, v192, &v421);
    if ((v170 & 0x80000000) != 0) {
      goto LABEL_555;
    }
    if (cstdlib_strcmp(v192, "normal"))
    {
      if (cstdlib_strcmp(v192, "latin")) {
        char v228 = 2;
      }
      else {
        char v228 = 1;
      }
      goto LABEL_497;
    }
    unsigned __int8 v412 = 0;
LABEL_498:
    if (!v409 || !cstdlib_strcmp(v409, ""))
    {
      uint64_t v13 = v414;
      goto LABEL_363;
    }
    if (!v392 || !cstdlib_strcmp(v392, "")) {
      uint64_t v392 = v409;
    }
    uint64_t v13 = v414;
LABEL_321:
    __int16 v85 = v407;
    if (!cstdlib_strcmp(v409, " ") && !((unsigned __int16)v132 + (__int16)v80) && !v416) {
      goto LABEL_364;
    }
    v399 = v192;
    if (*v409 != 32)
    {
      int v78 = v133 + 1;
LABEL_375:
      unsigned __int16 v200 = (char *)v409;
      goto LABEL_414;
    }
    int v78 = 0;
    if (!v405 || !(_WORD)v133 || (unsigned __int16)v133 != (unsigned __int16)v134)
    {
      uint64_t v134 = 0;
      goto LABEL_375;
    }
    uint64_t v193 = (char *)(unsigned __int16)v132;
    unsigned int v194 = cstdlib_strlen("§");
    unsigned int v195 = *(void (**)(void, void, const char *, size_t))(a1[7] + 104);
    size_t v196 = cstdlib_strlen("§");
    v195(a1[115], a1[116], "§", v196);
    uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, (unsigned __int16)v194);
    if ((v91 & 0x80000000) != 0) {
      goto LABEL_542;
    }
    if (v194)
    {
      int v197 = 0;
      __int16 v198 = v420[3];
      uint64_t v199 = (uint64_t)v423;
      __int16 v85 = v407;
      unsigned __int16 v200 = (char *)v409;
      do
      {
        *(_WORD *)(v199 + 8 * (unsigned __int16)v79) = v198;
        uint64_t v79 = (v79 + 1);
        ++v197;
      }
      while (v194 > (unsigned __int16)v197);
    }
    else
    {
      __int16 v85 = v407;
      unsigned __int16 v200 = (char *)v409;
    }
    int v401 = 0;
    int v78 = 0;
    v80 += cstdlib_strlen("§");
    int v132 = v193;
    uint64_t v134 = 0;
LABEL_414:
    if (v405 || (v383 != 1 || v412) && (v383 || v412 != 1))
    {
      if (v412 >= 2u && *((_DWORD *)a1 + 239) && *v200 != 32) {
        goto LABEL_427;
      }
    }
    else
    {
      uint64_t v91 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_542;
      }
      uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_542;
      }
      *(_DWORD *)&v423[4 * (unsigned __int16)v79 + 2] = 1;
      uint64_t v79 = (v79 + 1);
      ++v80;
      __int16 v85 = v407;
    }
    char v383 = v412;
LABEL_427:
    unsigned int v404 = v134;
    if (v400 || !(HIDWORD(v402) | v416) || !HIDWORD(v402) && v430[v132] <= 0x20u)
    {
      if (v405
        && cstdlib_strlen(v200) != 1
        && (cstdlib_strchr(v200, 32) || cstdlib_strchr(v200, 95))
        && cstdlib_strlen(v200))
      {
        uint64_t v230 = 0;
        int v231 = 0;
        do
        {
          int v232 = v200[v230];
          if (v232 == 95 || v232 == 32) {
            v200[v230] = 45;
          }
          uint64_t v230 = (unsigned __int16)++v231;
        }
        while (cstdlib_strlen(v200) > (unsigned __int16)v231);
      }
      if (!cstdlib_strcmp(v200, "")) {
        goto LABEL_509;
      }
      BOOL v233 = *(uint64_t (**)(void, void, char *, size_t))(a1[7] + 104);
      size_t v234 = cstdlib_strlen(v200);
      uint64_t v9 = v233(a1[115], a1[116], v200, v234);
      uint64_t v134 = v404;
      if (!cstdlib_strcmp(v200, " "))
      {
        unsigned __int16 v241 = cstdlib_strlen(v200);
        uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, v241);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        uint64_t v242 = (uint64_t)v423;
        if ((_WORD)v79)
        {
          uint64_t v243 = (unsigned __int16)v79;
          v423[4 * (unsigned __int16)v79] = v423[4 * (unsigned __int16)v79 - 4];
        }
        else
        {
          uint64_t v243 = 0;
        }
        int v401 = 0;
        uint64_t v79 = (v79 + 1);
        *(_DWORD *)(v242 + 8 * v243 + 4) = 1;
        goto LABEL_510;
      }
      if (cstdlib_strcmp(v200, "\x15"))
      {
        __int16 v235 = v421;
        if (!v399 && v421 == 9999 && v420[3] == 9999)
        {
          unsigned __int16 v236 = cstdlib_strlen(v200);
          uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, v236);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          uint64_t v237 = v236;
          if (v236)
          {
            uint64_t v238 = (uint64_t)v423;
            int v239 = v200;
            do
            {
              int v240 = *v239++;
              if (v240 == 32) {
                *(_DWORD *)(v238 + 8 * (unsigned __int16)v79 + 4) = 1;
              }
              uint64_t v79 = (v79 + 1);
              --v237;
            }
            while (v237);
            int v401 = 0;
          }
          else
          {
            int v401 = 0;
          }
LABEL_509:
          uint64_t v134 = v404;
LABEL_510:
          int v261 = cstdlib_strlen(v200);
          v80 += v261 - utf8_determineUTF8CharLength(v430[v132]);
          __int16 v85 = v407;
          goto LABEL_511;
        }
        if (v421 == 9999 && v420[3] == 9999)
        {
          uint64_t v49 = v415;
          uint64_t v134 = v404;
          if ((v9 & 0x80000000) != 0) {
            goto LABEL_544;
          }
          int v401 = 0;
          goto LABEL_510;
        }
        int v413 = v80;
        unsigned __int16 v257 = cstdlib_strlen(v200);
        uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, v257);
        if ((v170 & 0x80000000) != 0) {
          goto LABEL_555;
        }
        if (cstdlib_strlen(v200))
        {
          uint64_t v258 = 0;
          int v259 = 0;
          uint64_t v260 = (uint64_t)v423;
          if (v420[3] != 9999) {
            __int16 v235 = v420[3];
          }
          unsigned __int16 v200 = (char *)v409;
          do
          {
            *(_WORD *)(v260 + 8 * (unsigned __int16)v79) = v235;
            if (v200[v258] == 32) {
              *(_DWORD *)(v260 + 8 * (unsigned __int16)v79 + 4) = 1;
            }
            uint64_t v79 = (unsigned __int16)v79 + 1;
            uint64_t v258 = (unsigned __int16)++v259;
            unsigned __int16 v200 = (char *)v409;
          }
          while (cstdlib_strlen(v409) > (unsigned __int16)v259);
          int v401 = 0;
          uint64_t v13 = v414;
          int v80 = v413;
          goto LABEL_509;
        }
        int v401 = 0;
        uint64_t v13 = v414;
      }
      else
      {
        unsigned __int16 v252 = cstdlib_strlen(v200);
        uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, v252);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        if (v420[3] != 9999)
        {
          int v401 = 0;
          v423[4 * (unsigned __int16)v79] = v420[3];
          uint64_t v79 = (v79 + 1);
          goto LABEL_510;
        }
        uint64_t v253 = (uint64_t)v423;
        if ((_WORD)v79)
        {
          uint64_t v254 = (unsigned __int16)v79;
          v423[4 * (unsigned __int16)v79] = v423[4 * (unsigned __int16)v79 - 4];
        }
        else
        {
          uint64_t v254 = 0;
        }
        int v401 = 0;
        uint64_t v79 = (v79 + 1);
        *(_DWORD *)(v253 + 8 * v254 + 4) = 1;
        uint64_t v13 = v414;
      }
      uint64_t v134 = v404;
      unsigned __int16 v200 = (char *)v409;
      goto LABEL_510;
    }
    if (v402
      && ((int v244 = v430[v132], v245 = v430[v132], v244 > 122)
       || (v244 - 91) < 6u
       || (v244 - 58) < 7u
       || v245 < 0xE
       || (v244 & 0xFFFFFFF0) == 0x20))
    {
      v80 -= utf8_determineUTF8CharLength(v245);
    }
    else
    {
      uint64_t v246 = v392;
      int v247 = cstdlib_strlen(v392);
      if ((int)Utf8_LengthInUtf8chars((unint64_t)v392, v247) < 2)
      {
        uint64_t v251 = v79;
      }
      else
      {
        __int16 v434 = 9668;
        utf8_Utf16ToUtf8((uint64_t)&v434, 1u, 0, (uint64_t)v429, 5u, (unsigned int *)&v428 + 1, 0);
        uint64_t v170 = (*(uint64_t (**)(void, void, char *, void))(a1[7] + 104))(a1[115], a1[116], v429, HIDWORD(v428));
        if ((v170 & 0x80000000) != 0) {
          goto LABEL_555;
        }
        uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, WORD2(v428));
        if ((v170 & 0x80000000) != 0) {
          goto LABEL_555;
        }
        unsigned int v248 = HIDWORD(v428);
        if (HIDWORD(v428))
        {
          unsigned __int16 v249 = 0;
          uint64_t v250 = (uint64_t)v423;
          LODWORD(v251) = v79;
          do
          {
            if (v429[v249] == 32)
            {
              *(_DWORD *)(v250 + 8 * (unsigned __int16)v251 + 4) = 1;
              unsigned int v248 = HIDWORD(v428);
            }
            uint64_t v251 = (v251 + 1);
            ++v249;
          }
          while (v248 > v249);
        }
        else
        {
          uint64_t v251 = v79;
        }
        v80 += v248;
        uint64_t v246 = v392;
      }
      uint64_t v263 = *(uint64_t (**)(void, void, const char *, size_t))(a1[7] + 104);
      size_t v264 = cstdlib_strlen(v246);
      uint64_t v170 = v263(a1[115], a1[116], v246, v264);
      if ((v170 & 0x80000000) != 0) {
        goto LABEL_555;
      }
      unsigned __int16 v265 = cstdlib_strlen(v246);
      uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v251, v265);
      if ((v170 & 0x80000000) != 0) {
        goto LABEL_555;
      }
      uint64_t v266 = v265;
      if (v265)
      {
        uint64_t v267 = (uint64_t)v423;
        int v268 = v246;
        do
        {
          int v269 = *(unsigned __int8 *)v268++;
          if (v269 == 32) {
            *(_DWORD *)(v267 + 8 * (unsigned __int16)v251 + 4) = 1;
          }
          uint64_t v251 = (v251 + 1);
          --v266;
        }
        while (v266);
      }
      int v270 = cstdlib_strlen(v246);
      v80 += v270 - utf8_determineUTF8CharLength(v430[v132]);
      int v271 = cstdlib_strlen(v246);
      if ((int)Utf8_LengthInUtf8chars((unint64_t)v246, v271) < 2)
      {
        int v401 = 0;
        uint64_t v79 = v251;
      }
      else
      {
        __int16 v434 = 9668;
        utf8_Utf16ToUtf8((uint64_t)&v434, 1u, 0, (uint64_t)v429, 5u, (unsigned int *)&v428 + 1, 0);
        uint64_t v170 = (*(uint64_t (**)(void, void, char *, void))(a1[7] + 104))(a1[115], a1[116], v429, HIDWORD(v428));
        if ((v170 & 0x80000000) != 0) {
          goto LABEL_555;
        }
        uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v251, WORD2(v428));
        if ((v170 & 0x80000000) != 0) {
          goto LABEL_555;
        }
        unsigned int v272 = HIDWORD(v428);
        if (HIDWORD(v428))
        {
          unsigned __int16 v273 = 0;
          uint64_t v274 = (uint64_t)v423;
          LODWORD(v79) = v251;
          do
          {
            if (v429[v273] == 32)
            {
              *(_DWORD *)(v274 + 8 * (unsigned __int16)v79 + 4) = 1;
              unsigned int v272 = HIDWORD(v428);
            }
            uint64_t v79 = (v79 + 1);
            ++v273;
          }
          while (v272 > v273);
        }
        else
        {
          uint64_t v79 = v251;
        }
        int v401 = 0;
        v80 += v272;
      }
      uint64_t v13 = v414;
      __int16 v85 = v407;
      uint64_t v134 = v404;
    }
LABEL_511:
    int v262 = utf8_determineUTF8CharLength(v132[(void)v430]);
    long long v82 = (char *)(v132 + v262);
    unsigned __int16 v83 = v406;
    uint64_t v77 = v134;
    uint64_t v84 = v415;
    if ((unsigned __int16)((_WORD)v132 + v262) > v406) {
      goto LABEL_547;
    }
  }
  while (2)
  {
    int v403 = (_DWORD *)(v84 + 32 * (unsigned __int16)v81);
    int v87 = v403 + 3;
    int v86 = v403[3];
    if ((unsigned __int16)v82 != (unsigned __int16)(v86 - v85)) {
      goto LABEL_317;
    }
    uint64_t v408 = v82;
    int v397 = (unsigned __int16)v82;
    if (v405 && (_WORD)v78 && (unsigned __int16)v78 == (unsigned __int16)v77)
    {
      unsigned int v88 = cstdlib_strlen("§");
      uint64_t v89 = *(void (**)(void, void, const char *, size_t))(a1[7] + 104);
      size_t v90 = cstdlib_strlen("§");
      v89(a1[115], a1[116], "§", v90);
      uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, (unsigned __int16)v88);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_542;
      }
      if (v88)
      {
        int v92 = 0;
        __int16 v93 = v420[3];
        uint64_t v94 = (uint64_t)v423;
        __int16 v85 = v407;
        do
        {
          *(_WORD *)(v94 + 8 * (unsigned __int16)v79) = v93;
          uint64_t v79 = (v79 + 1);
          ++v92;
        }
        while (v88 > (unsigned __int16)v92);
      }
      else
      {
        __int16 v85 = v407;
      }
      int v401 = 0;
      v80 += cstdlib_strlen("§");
      int v86 = *v87;
      uint64_t v84 = v415;
      long long v82 = v408;
    }
    *int v87 = (v86 + (__int16)v80 + v428) & ~((v86 + (__int16)v80 + (int)v428) >> 31);
    unsigned __int16 v95 = v403;
    int v96 = *v403;
    int v97 = HIDWORD(v402);
    if (*v403 == 21)
    {
      if (HIDWORD(v402) == 1)
      {
        uint64_t v98 = v84 + 32 * (unsigned __int16)v81;
        uint64_t v100 = *(const char **)(v98 + 24);
        unsigned int v99 = (const char **)(v98 + 24);
        int v97 = !cstdlib_strcmp(v100, __dst)
           || !cstdlib_strncmp(*v99, v425, 6uLL)
           || !cstdlib_strcmp(*v99, v436)
           || !cstdlib_strcmp(*v99, v424)
           || cstdlib_strcmp(*v99, v435) == 0;
        uint64_t v84 = v415;
        __int16 v85 = v407;
        long long v82 = v408;
      }
      else
      {
        int v97 = 0;
      }
      __s = *(const char **)(v84 + 32 * (unsigned __int16)v81 + 24);
      int v96 = *v403;
    }
    if (v96 == 21 || v96 == 36)
    {
      if (!(_WORD)v82) {
        goto LABEL_163;
      }
LABEL_159:
      if (v430[(unsigned __int16)v82 - 1] != 32)
      {
        uint64_t v91 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        *(_DWORD *)&v423[4 * (unsigned __int16)v79 + 2] = 1;
        uint64_t v79 = (v79 + 1);
        ++*v87;
        ++v80;
        int v96 = *v403;
        uint64_t v84 = v415;
        __int16 v85 = v407;
        long long v82 = v408;
      }
    }
    else if (v96 == 8 && (v97 | v405) == 0 && (unsigned __int16)v82 != 0)
    {
      goto LABEL_159;
    }
LABEL_163:
    switch(v96)
    {
      case 21:
        int v400 = 0;
        int v405 = 0;
LABEL_175:
        uint64_t v120 = v84 + 32 * (unsigned __int16)v81;
        __int16 v122 = *(const char **)(v120 + 24);
        unsigned __int16 v121 = (const char **)(v120 + 24);
        if (cstdlib_strcmp(v122, __dst)
          && cstdlib_strncmp(*v121, v425, 6uLL)
          && cstdlib_strcmp(*v121, v436)
          && cstdlib_strcmp(*v121, v424)
          && cstdlib_strcmp(*v121, v435))
        {
          int v96 = *v403;
          uint64_t v84 = v415;
          __int16 v85 = v407;
          goto LABEL_193;
        }
        if (cstdlib_strcmp(*v121, v437) && cstdlib_strcmp(*v121, v436) && cstdlib_strcmp(*v121, v424))
        {
          LODWORD(v402) = cstdlib_strcmp(*v121, v435) == 0;
          int v97 = 1;
        }
        else
        {
          int v97 = 1;
          LODWORD(v402) = 1;
        }
        uint64_t v84 = v415;
        __int16 v85 = v407;
        long long v82 = v408;
        goto LABEL_199;
      case 34:
        __int16 v118 = cstdlib_strstr(*(char **)(v84 + 32 * (unsigned __int16)v81 + 24), "\x14EXTCLC");
        long long v82 = v408;
        uint64_t v84 = v415;
        int v119 = v400;
        if (v118) {
          int v119 = 1;
        }
        int v400 = v119;
        int v96 = *v403;
        int v405 = 1;
        if (*v403 != 21) {
          break;
        }
        goto LABEL_175;
      case 36:
        int v410 = v80;
        int v103 = v97;
        uint64_t v104 = *(void *)(*a1 + 8);
        uint64_t v105 = v84 + 32 * (unsigned __int16)v81;
        unsigned __int16 v107 = *(const char **)(v105 + 24);
        unsigned int v106 = (unsigned __int8 **)(v105 + 24);
        int v108 = cstdlib_strlen(v107);
        uint64_t v109 = heap_Alloc(v104, (v108 + 1));
        if (!v109)
        {
          log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 30000, 0, v110, v111, v112, v113, v379);
          uint64_t v9 = 2321555466;
          goto LABEL_543;
        }
        uint64_t v114 = (char *)v109;
        unsigned __int8 v115 = **v106;
        if (v115)
        {
          uint64_t v116 = 0;
          int v117 = 0;
          do
          {
            v114[v116] = ssft_tolower(v115);
            uint64_t v116 = (unsigned __int16)++v117;
            unsigned __int8 v115 = (*v106)[(unsigned __int16)v117];
          }
          while (v115);
        }
        else
        {
          uint64_t v116 = 0;
        }
        v114[v116] = 0;
        if (cstdlib_strcmp(v114, "normal"))
        {
          uint64_t v123 = unixlit_addLangStrs(a1, v382, v381, v114, &v420[3]);
          uint64_t v13 = v414;
          if ((v123 & 0x80000000) != 0)
          {
            uint64_t v9 = v123;
            heap_Free(*(void **)(*a1 + 8), (uint64_t)v114);
            goto LABEL_543;
          }
        }
        else
        {
          v420[3] = 9999;
          uint64_t v13 = v414;
        }
        heap_Free(*(void **)(*a1 + 8), (uint64_t)v114);
        int v96 = 0x4000;
        unsigned __int16 v95 = v403;
        *int v403 = 0x4000;
        uint64_t v84 = v415;
        uint64_t v124 = v415 + 32 * (unsigned __int16)v81;
        *(_DWORD *)(v124 + 16) = 0;
        *(_DWORD *)(v124 + 8) = 0;
        __int16 v85 = v407;
        int v97 = v103;
        int v80 = v410;
LABEL_193:
        long long v82 = v408;
        break;
    }
    BOOL v125 = v96 == 21;
    BOOL v126 = v97 != 0;
    BOOL v127 = !v125 || !v126;
    if (v125 && v126) {
      int v97 = 0;
    }
    int v128 = v402;
    if (!v127) {
      int v128 = 0;
    }
    LODWORD(v402) = v128;
LABEL_199:
    unsigned __int16 v83 = v406;
    HIDWORD(v402) = v97;
    if (*v95 != 7
      || (uint64_t v129 = v84 + 32 * (unsigned __int16)v81,
          int v131 = *(_DWORD *)(v129 + 24),
          int v130 = (void *)(v129 + 24),
          v131 != 43))
    {
      int v132 = v82;
      goto LABEL_205;
    }
    unsigned int v384 = v130;
    uint64_t v385 = (unsigned __int16)v81;
    if ((_WORD)v82 && v430[v397 - 1] != 32)
    {
      uint64_t v91 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_542;
      }
      uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
      if ((v91 & 0x80000000) != 0) {
        goto LABEL_542;
      }
      *(_DWORD *)&v423[4 * (unsigned __int16)v79 + 2] = 1;
      uint64_t v79 = (v79 + 1);
      ++*v87;
      int v411 = v80 + 1;
      uint64_t v84 = v415;
      __int16 v85 = v407;
      unsigned __int16 v83 = v406;
      long long v82 = v408;
    }
    else
    {
      int v411 = v80;
    }
    int v135 = 0;
    int v136 = 0;
    ++v81;
    uint64_t v137 = 1;
    __int16 v396 = v420[3];
    int v132 = v82;
    while (2)
    {
      uint64_t v138 = (unsigned __int16)v132;
      BOOL v393 = (unsigned __int16)v132 < v83;
      uint64_t v139 = (unsigned __int16)v132 - 1;
LABEL_212:
      if (v13 <= (unsigned __int16)v81)
      {
        BOOL v41 = v13 == (unsigned __int16)v81;
        BOOL v146 = v41;
        if (!v41 || (unsigned __int16)v132 >= v83) {
          goto LABEL_267;
        }
        uint64_t v13 = v414;
LABEL_231:
        int v147 = v430[(unsigned __int16)v132];
        if (v136) {
          BOOL v148 = 1;
        }
        else {
          BOOL v148 = v147 == 32;
        }
        if (!v148) {
          int v135 = 0;
        }
        if ((v147 == 95 || v147 == 35) && (unsigned __int16)v132 != (unsigned __int16)v82)
        {
          int v149 = v430[v139];
          BOOL v150 = (v149 - 32) > 0x3F || ((1 << (v149 - 32)) & 0x8000000000000009) == 0;
          if (v150
            && ((unsigned __int16)v132 < 4u
             || v149 != 92
             || (v430[(unsigned __int16)v132 - 3] | 0x20) != 0x74
             || v430[(unsigned __int16)v132 - 4] != 92))
          {
            if (v147 == 35) {
              int v135 = 1;
            }
            uint64_t v151 = v138;
            if (!v137)
            {
              uint64_t v91 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
              if ((v91 & 0x80000000) != 0) {
                goto LABEL_542;
              }
              uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
              if ((v91 & 0x80000000) != 0) {
                goto LABEL_542;
              }
              uint64_t v152 = &v423[4 * (unsigned __int16)v79];
              *uint64_t v152 = v396;
              *((_DWORD *)v152 + 1) = 1;
              uint64_t v79 = (v79 + 1);
              ++v411;
            }
            __int16 v434 = 167;
            utf8_Utf16ToUtf8((uint64_t)&v434, 1u, 0, (uint64_t)v429, 5u, (unsigned int *)&v428 + 1, 0);
            uint64_t v91 = (*(uint64_t (**)(void, void, char *, void))(a1[7] + 104))(a1[115], a1[116], v429, HIDWORD(v428));
            if ((v91 & 0x80000000) != 0) {
              goto LABEL_542;
            }
            uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, WORD2(v428));
            if ((v91 & 0x80000000) != 0) {
              goto LABEL_542;
            }
            unsigned int v153 = HIDWORD(v428);
            uint64_t v84 = v415;
            if (HIDWORD(v428))
            {
              unsigned __int16 v154 = 0;
              uint64_t v155 = (uint64_t)v423;
              __int16 v85 = v407;
              unsigned __int16 v83 = v406;
              long long v82 = v408;
              uint64_t v139 = (unsigned __int16)v132 - 1;
              do
              {
                *(_WORD *)(v155 + 8 * (unsigned __int16)v79) = v396;
                if (v429[v154] == 32)
                {
                  *(_DWORD *)(v155 + 8 * (unsigned __int16)v79 + 4) = 1;
                  unsigned int v153 = HIDWORD(v428);
                }
                uint64_t v79 = (unsigned __int16)v79 + 1;
                ++v154;
              }
              while (v153 > v154);
            }
            else
            {
              __int16 v85 = v407;
              unsigned __int16 v83 = v406;
              long long v82 = v408;
              uint64_t v139 = (unsigned __int16)v132 - 1;
            }
            int v401 = 0;
            uint64_t v137 = 0;
            v411 += v153;
            uint64_t v138 = v151;
          }
        }
        if (!v136)
        {
          uint64_t v156 = v137;
          v411 -= utf8_determineUTF8CharLength(v430[(unsigned __int16)v132]);
          int v157 = utf8_determineUTF8CharLength(v430[(unsigned __int16)v132]);
          uint64_t v137 = v156;
          long long v82 = v408;
          unsigned __int16 v83 = v406;
          int v132 = (char *)(v132 + v157);
          uint64_t v84 = v415;
          continue;
        }
        goto LABEL_212;
      }
      break;
    }
    if (*(_DWORD *)(v84 + 32 * (unsigned __int16)v81) != 7
      || v138 < (unsigned __int16)(*(_WORD *)(v84 + 32 * (unsigned __int16)v81 + 12) - v85))
    {
      uint64_t v140 = (int *)(v84 + 32 * (unsigned __int16)v81);
      uint64_t v141 = v140 + 3;
      int v142 = v140[3];
      if ((unsigned __int16)v132 == (unsigned __int16)(v142 - v85))
      {
        do
        {
          int v143 = *v140;
          if (*v140 == 21 || v143 == 36)
          {
            *uint64_t v140 = 0x4000;
            v140[4] = 0;
            long long v140[2] = 0;
          }
          else if (v143 == 7)
          {
            goto LABEL_231;
          }
          *uint64_t v141 = (v142 + (__int16)v411 + v428) & ~((v142 + (__int16)v411 + (int)v428) >> 31);
          if (v13 <= (unsigned __int16)++v81) {
            break;
          }
          if ((unsigned __int16)v132 == (unsigned __int16)(*(_WORD *)(v84 + 32 * (unsigned __int16)v81 + 12) - v85)
            && *(_DWORD *)(v84 + 32 * (unsigned __int16)v81) == 7)
          {
            int v136 = 1;
          }
          uint64_t v144 = v84 + 32 * (unsigned __int16)v81;
          int v145 = *(_DWORD *)(v144 + 12);
          uint64_t v141 = (_DWORD *)(v144 + 12);
          int v142 = v145;
          v140 += 8;
        }
        while ((unsigned __int16)v132 == (unsigned __int16)(v145 - v85));
      }
      goto LABEL_231;
    }
    BOOL v146 = v13 == (unsigned __int16)v81;
    BOOL v393 = (unsigned __int16)v132 < v83;
LABEL_267:
    BOOL v158 = (unsigned __int16)v132 == v83 && v146;
    if (v414 <= (unsigned __int16)v81 && !v158)
    {
      int v132 = v82;
      uint64_t v13 = v414;
      int v80 = v411;
      goto LABEL_205;
    }
    int v398 = v137;
    size_t v159 = (unsigned __int16)v132 - (unint64_t)(unsigned __int16)v82;
    unsigned __int16 v160 = (unsigned __int16)v82;
    uint64_t v161 = (unsigned char *)heap_Alloc(*(void *)(*a1 + 8), (int)v159 + 1);
    if (!v161) {
      goto LABEL_556;
    }
    unsigned int v166 = v161;
    cstdlib_memcpy(v161, &v430[v160], v159);
    v166[v159] = 0;
    *int v403 = 34;
    *unsigned int v384 = v166;
    *(void *)(v395 + 8 * v385) = v166;
    if (v135)
    {
      uint64_t v167 = v415;
      int v80 = v411;
      unsigned __int16 v83 = v406;
      uint64_t v168 = v406;
      goto LABEL_289;
    }
    uint64_t v168 = v406;
    if (!v398)
    {
      uint64_t v170 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
      if ((v170 & 0x80000000) == 0)
      {
        uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
        if ((v170 & 0x80000000) == 0)
        {
          unsigned int v171 = &v423[4 * (unsigned __int16)v79];
          *unsigned int v171 = v396;
          *((_DWORD *)v171 + 1) = 1;
          uint64_t v79 = (v79 + 1);
          int v169 = v411 + 1;
          goto LABEL_281;
        }
      }
LABEL_555:
      uint64_t v9 = v170;
      goto LABEL_557;
    }
    int v169 = v411;
LABEL_281:
    __int16 v434 = 167;
    utf8_Utf16ToUtf8((uint64_t)&v434, 1u, 0, (uint64_t)v429, 5u, (unsigned int *)&v428 + 1, 0);
    uint64_t v170 = (*(uint64_t (**)(void, void, char *, void))(a1[7] + 104))(a1[115], a1[116], v429, HIDWORD(v428));
    if ((v170 & 0x80000000) != 0) {
      goto LABEL_555;
    }
    uint64_t v170 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, WORD2(v428));
    if ((v170 & 0x80000000) != 0) {
      goto LABEL_555;
    }
    unsigned int v172 = HIDWORD(v428);
    uint64_t v167 = v415;
    unsigned __int16 v83 = v406;
    if (HIDWORD(v428))
    {
      unsigned __int16 v173 = 0;
      uint64_t v174 = (uint64_t)v423;
      do
      {
        *(_WORD *)(v174 + 8 * (unsigned __int16)v79) = v396;
        if (v429[v173] == 32)
        {
          *(_DWORD *)(v174 + 8 * (unsigned __int16)v79 + 4) = 1;
          unsigned int v172 = HIDWORD(v428);
        }
        uint64_t v79 = (unsigned __int16)v79 + 1;
        ++v173;
      }
      while (v172 > v173);
    }
    int v401 = 0;
    int v80 = v169 + v172;
LABEL_289:
    if (v146)
    {
LABEL_292:
      if (v393)
      {
        uint64_t v181 = (unsigned __int16)v132;
        BOOL v182 = v430[(unsigned __int16)v132] != 32;
        uint64_t v13 = v414;
        while (v430[v181] == 32)
        {
          if (v168 == ++v181)
          {
            unsigned int v183 = v391;
            LOWORD(v181) = v83;
            goto LABEL_299;
          }
        }
        unsigned int v183 = (unsigned __int16)v181;
      }
      else
      {
        BOOL v182 = 1;
        LOWORD(v181) = (_WORD)v132;
        uint64_t v13 = v414;
        unsigned int v183 = (unsigned __int16)v132;
      }
LABEL_299:
      unsigned int v184 = (char *)(v183 + 1);
      if (v184 != *(_DWORD *)(v167 + 16)
        || ((unsigned int v185 = v430[(unsigned __int16)v181],
             BOOL v39 = v185 > 0x3F,
             unint64_t v186 = (1 << v185) & 0x8800400200000000,
             !v39)
          ? (BOOL v187 = v186 == 0)
          : (BOOL v187 = 1),
            v187))
      {
        if (v182)
        {
          uint64_t v91 = (*(uint64_t (**)(void, void, const char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], " ", 1);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
          if ((v91 & 0x80000000) != 0) {
            goto LABEL_542;
          }
          *(_DWORD *)&v423[4 * (unsigned __int16)v79 + 2] = 1;
          uint64_t v79 = (v79 + 1);
          ++v80;
          uint64_t v84 = v415;
          __int16 v85 = v407;
          unsigned __int16 v83 = v406;
        }
        else
        {
          uint64_t v84 = v415;
          __int16 v85 = v407;
        }
      }
      else
      {
        utf8_getUTF8Char((uint64_t)v430, v183, v429);
        uint64_t v91 = (*(uint64_t (**)(void, void, char *, uint64_t))(a1[7] + 104))(a1[115], a1[116], v429, 1);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        uint64_t v91 = unixlit_growMapCharStr((uint64_t)a1, (uint64_t *)&v423, &v422, (unsigned __int16)v79, 1);
        if ((v91 & 0x80000000) != 0) {
          goto LABEL_542;
        }
        uint64_t v84 = v415;
        unsigned __int16 v83 = v406;
        if (v429[0] == 32) {
          *(_DWORD *)&v423[4 * (unsigned __int16)v79 + 2] = 1;
        }
        uint64_t v79 = (v79 + 1);
        uint64_t v188 = v415 + 32 * (unsigned __int16)v81;
        int v190 = *(_DWORD *)(v188 + 12);
        uint64_t v189 = (_DWORD *)(v188 + 12);
        _DWORD *v189 = v190 + 1;
        __int16 v85 = v407;
        if (v13 <= (unsigned __int16)v81)
        {
          int v132 = v184;
        }
        else
        {
          do
            *(_DWORD *)(v415 + 32 * (unsigned __int16)v81++ + 12) = *v189;
          while (v13 > (unsigned __int16)v81);
          int v132 = v184;
        }
      }
LABEL_205:
      uint64_t v77 = 0;
      int v78 = 0;
      int v133 = 0;
      uint64_t v134 = 0;
      ++v81;
      long long v82 = v132;
      if (v13 <= (unsigned __int16)v81) {
        goto LABEL_318;
      }
      continue;
    }
    break;
  }
  uint64_t v175 = *(void *)(*a1 + 8);
  int v176 = cstdlib_strlen(__s);
  int v177 = (char *)heap_Alloc(v175, (v176 + 1));
  if (v177)
  {
    uint64_t v178 = v177;
    cstdlib_strcpy(v177, __s);
    uint64_t v167 = v415;
    uint64_t v179 = v415 + 32 * (unsigned __int16)v81;
    *(_DWORD *)uint64_t v179 = 21;
    *(void *)(v179 + 24) = v178;
    *(void *)(v395 + 8 * (unsigned __int16)v81) = v178;
    int v180 = *(_DWORD *)(v179 + 12) + (__int16)v80 + v428;
    *(_DWORD *)(v179 + 12) = v180 & ~(v180 >> 31);
    unsigned __int16 v83 = v406;
    goto LABEL_292;
  }
LABEL_556:
  log_OutPublic(*(void *)(*a1 + 32), (uint64_t)"FE_UNIXLIT", 39000, 0, v162, v163, v164, v165, v379);
  uint64_t v9 = 2321555466;
LABEL_557:
  uint64_t v13 = v414;
LABEL_543:
  uint64_t v49 = v415;
LABEL_544:
  uint64_t v26 = v395;
LABEL_679:
  heap_Free(*(void **)(*a1 + 8), v49);
LABEL_680:
  if (v423) {
    heap_Free(*(void **)(*a1 + 8), (uint64_t)v423);
  }
  if (v26)
  {
    if (v13 >= 2)
    {
      uint64_t v375 = (uint64_t *)(v26 + 8);
      uint64_t v376 = v13 - 1;
      do
      {
        if (*v375) {
          heap_Free(*(void **)(*a1 + 8), *v375);
        }
        ++v375;
        --v376;
      }
      while (v376);
    }
    heap_Free(*(void **)(*a1 + 8), v26);
  }
  return v9;
}

uint64_t fe_unixlit_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 62345, 984) & 0x80000000) != 0) {
    return 2321555464;
  }
  uint64_t v3 = *(void *)(a1 + 56);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 64), v3);
}

uint64_t fe_unixlit_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2321555457;
  }
  uint64_t result = 0;
  *a2 = &IFeUnixlit;
  return result;
}

uint64_t LhpuCreate(uint64_t a1)
{
  uint64_t result = heap_Alloc(a1, 52);
  if (result)
  {
    *(unsigned char *)uint64_t result = 0;
    *(_DWORD *)(result + 12) = 0;
    *(unsigned char *)(result + 18) = 0;
  }
  return result;
}

uint64_t LhpuRemove(void *a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (v3)
    {
      heap_Free(a1, v3);
      *a2 = 0;
    }
  }
  return 0;
}

BOOL LhpuHasDurSpec(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) != 0;
}

BOOL LhpuDurSpecIsAbs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1;
}

uint64_t LhpuGetDurValue(uint64_t a1)
{
  return *(__int16 *)(a1 + 16);
}

uint64_t LhpuGetcBp(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t LhpuGetpBp(uint64_t a1)
{
  return a1 + 20;
}

uint64_t LhpuSetSymbol(uint64_t a1, const char *a2, size_t a3)
{
  if (a3 > 9) {
    return 4294967294;
  }
  cstdlib_strncpy((char *)a1, a2, a3);
  uint64_t result = 0;
  *(unsigned char *)(a1 + a3) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t LhpuSetDurValue(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v4 = cstdlib_atoi(a2);
  *(_WORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 12) = 1;
  int v5 = *a2;
  if (!v4)
  {
    int v7 = 0;
    if (v5 == 48) {
      return 0;
    }
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_8;
  }
  uint64_t result = 0;
  int v7 = 2;
  if (v5 == 45 || v5 == 43) {
LABEL_8:
  }
    *(_DWORD *)(a1 + 12) = v7;
  return result;
}

uint64_t LhpuAddBpTime(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned __int8 *)(a1 + 18) > 6u) {
    return 0xFFFFFFFFLL;
  }
  __int16 v3 = cstdlib_atoi(a2);
  uint64_t result = 0;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 18);
  uint64_t v6 = a1 + 4 * v5;
  *(_WORD *)(v6 + 22) = v3;
  *(_WORD *)(v6 + 20) = 0;
  *(unsigned char *)(a1 + 18) = v5 + 1;
  return result;
}

uint64_t LhpuSetBpPitch(uint64_t a1, unsigned __int8 *a2)
{
  *(_WORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 18) + 16) = cstdlib_atoi(a2);
  return 0;
}

uint64_t phonmapmrk_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 1) {
    return 2322604033;
  }
  uint64_t result = 0;
  *a2 = &IPhonmapmrk;
  return result;
}

uint64_t phonmapmrk_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 2322604039;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (a5)
  {
    uint64_t inited = InitRsrcFunction(a3, a4, &v32);
    if ((inited & 0x80000000) != 0)
    {
      return inited;
    }
    else
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      log_OutText(*(void *)(v32 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Entering phonmapmrk_ObjOpen", v10, v11, v12, v29);
      uint64_t v13 = (void *)heap_Calloc(*(void **)(v32 + 8), 1, 912);
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = v32;
        v13[1] = a4;
        unsigned char v13[2] = v15;
        *uint64_t v13 = a3;
        uint64_t Object = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"SYNTHSTREAM", &v31);
        if ((Object & 0x80000000) != 0)
        {
          uint64_t v5 = Object;
          log_OutPublic(*(void *)(v14[2] + 32), (uint64_t)"PHONMAP", 45101, 0, v17, v18, v19, v20, v30);
          *(void *)a5 = v14;
          *(_DWORD *)(a5 + 8) = 29349;
          phonmapmrk_ObjClose(v14, *(void *)(a5 + 8));
          uint64_t v14 = 0;
          int v27 = 0;
        }
        else
        {
          v14[109] = *(void *)(v31 + 8);
          uint64_t v21 = objc_GetObject(*(void *)(v32 + 48), (uint64_t)"PHONMAP", &v31);
          if ((v21 & 0x80000000) != 0)
          {
            log_OutPublic(*(void *)(v14[2] + 32), (uint64_t)"PHONMAP", 45102, 0, v22, v23, v24, v25, v30);
            uint64_t v5 = 0;
          }
          else
          {
            uint64_t v5 = v21;
            uint64_t v26 = v31;
            v14[3] = *(void *)(v31 + 8);
            *((_OWORD *)v14 + 2) = *(_OWORD *)(v26 + 16);
          }
          int v27 = 29349;
        }
        *(void *)a5 = v14;
        *(_DWORD *)(a5 + 8) = v27;
        log_OutText(*(void *)(v32 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Leaving phonmapmrk_ObjOpen: %x", v23, v24, v25, v5);
      }
      else
      {
        return 2322604042;
      }
    }
  }
  return v5;
}

uint64_t phonmapmrk_ObjClose(void *a1, int a2)
{
  uint64_t v3 = safeh_HandleCheck((uint64_t)a1, a2, 29349, 912);
  if ((v3 & 0x80000000) != 0) {
    return 2322604040;
  }
  uint64_t v7 = v3;
  uint64_t v8 = a1[2];
  log_OutText(*(void *)(v8 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Entering phonmapmrk_ObjClose", v4, v5, v6, v16);
  if (a1[109])
  {
    int v9 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"SYNTHSTREAM");
    if (v9 >= 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v9;
    }
  }
  if (a1[3])
  {
    int v10 = objc_ReleaseObject(*(void *)(v8 + 48), (uint64_t)"PHONMAP");
    if (v10 >= 0 || (int)v7 <= -1) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v10;
    }
  }
  heap_Free(*(void **)(v8 + 8), (uint64_t)a1);
  log_OutText(*(void *)(v8 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"Leaving phonmapmrk_ObjClose: %x", v12, v13, v14, v7);
  return v7;
}

uint64_t phonmapmrk_ProcessStart(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = 1;
  unsigned int v9 = 0;
  if ((safeh_HandleCheck(a1, a2, 29349, 912) & 0x80000000) != 0) {
    return 2322604040;
  }
  synstrmaux_InitStreamOpener(a1 + 48, *(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP");
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t result = paramc_ParamGetUInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"markermode", &v9);
  if ((result & 0x80000000) == 0)
  {
    if ((v9 & 4) == 0
      || (paramc_ParamGetInt(*(void *)(*(void *)(a1 + 16) + 40), (uint64_t)"phonmapmrkenabled", &v8) & 0x80000000) == 0
      && !v8)
    {
      return 0;
    }
    synstrmaux_RegisterInStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      0,
      a1 + 880);
    synstrmaux_RegisterOutStream((_WORD *)(a1 + 48), (uint64_t)"application/x-realspeak-markers-pp;version=4.0",
      a1 + 896);
    return synstrmaux_OpenStreams((unsigned __int16 *)(a1 + 48), *(void *)(a1 + 872), a3, a4);
  }
  return result;
}

uint64_t phonmapmrk_Process(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  uint64_t v7 = safeh_HandleCheck(a1, a2, 29349, 912);
  if ((v7 & 0x80000000) != 0) {
    return 2322604040;
  }
  uint64_t v8 = v7;
  *a5 = 1;
  uint64_t v9 = *(void *)(a1 + 880);
  if (v9)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, char *, uint64_t *))(*(void *)(a1 + 872) + 144))(v9, *(void *)(a1 + 888), (char *)&v48 + 4, &v48);
    if ((v8 & 0x80000000) != 0)
    {
LABEL_10:
      log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45105, (uint64_t)"%s%x", v10, v11, v12, v13, "lhError");
      return v8;
    }
    if (HIDWORD(v48))
    {
      uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t *, char *))(*(void *)(a1 + 872) + 88))(*(void *)(a1 + 880), *(void *)(a1 + 888), &v47, (char *)&v48 + 4);
      if ((v14 & 0x80000000) != 0)
      {
        uint64_t v8 = v14;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45105, (uint64_t)"%s%x", v15, v16, v17, v18, "lhError");
        return v8;
      }
      uint64_t v19 = (*(uint64_t (**)(void, void, uint64_t *, void))(*(void *)(a1 + 872) + 112))(*(void *)(a1 + 896), *(void *)(a1 + 904), &v46, HIDWORD(v48));
      if ((v19 & 0x80000000) != 0)
      {
        uint64_t v8 = v19;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45106, (uint64_t)"%s%x", v20, v21, v22, v23, "lhError");
        (*(void (**)(void, void, void))(*(void *)(a1 + 872) + 96))(*(void *)(a1 + 880), *(void *)(a1 + 888), 0);
        return v8;
      }
      unsigned int v24 = HIDWORD(v48);
      unint64_t v25 = (unint64_t)HIDWORD(v48) >> 5;
      HIDWORD(v48) >>= 5;
      if (v24 >= 0x20)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          uint64_t v28 = (_OWORD *)(v46 + v26);
          uint64_t v29 = (_DWORD *)(v47 + v26);
          long long v30 = *(_OWORD *)(v47 + v26 + 16);
          *uint64_t v28 = *(_OWORD *)(v47 + v26);
          v28[1] = v30;
          if (*v29 == 33)
          {
            int v44 = 0;
            *(_DWORD *)uint64_t v28 = 38;
            v45[0] = v29[6];
            v45[1] = 0;
            if (((*(uint64_t (**)(void, void, void, unsigned char *, char **, void))(*(void *)(a1 + 24)
                                                                                              + 64))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0, v45, &v44, 0) & 0x80000000) != 0)
            {
              log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45107, (uint64_t)"%s%u%s%x", v31, v32, v33, v34, "phonemeID");
              int v44 = (char *)&szEMPTY;
              unsigned __int16 v35 = (char *)&szEMPTY;
            }
            else
            {
              unsigned __int16 v35 = v44;
            }
            unsigned int v36 = strhelper_Strdup(*(void *)(*(void *)(a1 + 16) + 8), v35);
            *(void *)(v46 + v26 + 24) = v36;
            unint64_t v25 = HIDWORD(v48);
          }
          ++v27;
          v26 += 32;
        }
        while (v27 < v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v37 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 872) + 120))(*(void *)(a1 + 896), *(void *)(a1 + 904), v26);
      if ((v37 & 0x80000000) != 0)
      {
        uint64_t v42 = v37;
        log_OutPublic(*(void *)(*(void *)(a1 + 16) + 32), (uint64_t)"PHONMAP", 45106, (uint64_t)"%s%x", v38, v39, v40, v41, "lhError");
        (*(void (**)(void, void, void))(*(void *)(a1 + 872) + 96))(*(void *)(a1 + 880), *(void *)(a1 + 888), 0);
        return v42;
      }
      uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 872) + 96))(*(void *)(a1 + 880), *(void *)(a1 + 888), v26);
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_10;
      }
    }
    else if (v48)
    {
      return synstrmaux_CloseOutStreamsOnly((_WORD *)(a1 + 48), *(void *)(a1 + 872));
    }
    else
    {
      *a5 = 0;
    }
  }
  return v8;
}

uint64_t phonmapmrk_ProcessEnd(uint64_t a1, int a2)
{
  if ((safeh_HandleCheck(a1, a2, 29349, 912) & 0x80000000) != 0) {
    return 2322604040;
  }
  uint64_t v3 = *(void *)(a1 + 872);

  return synstrmaux_CloseStreams((_WORD *)(a1 + 48), v3);
}

uint64_t LhplGetSymbol(const char *a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  cstdlib_strlen(a1);
  int v7 = 0;
  uint64_t k = a1;
  char v9 = (char)a1;
LABEL_2:
  uint64_t v10 = k;
LABEL_3:
  while (2)
  {
    switch(v7)
    {
      case 1:
        unsigned int v11 = *(unsigned __int8 *)v10;
        if (v11 <= 0x27)
        {
          if (v11 > 0xC)
          {
            if (v11 != 13 && v11 != 32) {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v11 < 9 || v11 == 12)
          {
            return 0xFFFFFFFFLL;
          }
          uint64_t v17 = v10 + 1;
          unsigned int v23 = *((unsigned __int8 *)v10 + 1);
          if (v23 > 0x27)
          {
            if (v23 > 0x2C)
            {
              if (v23 != 45)
              {
                if (v23 - 48 >= 0xA) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_166;
              }
              goto LABEL_148;
            }
          }
          else
          {
            if (v23 > 0xC)
            {
              if (v23 != 32 && v23 != 13) {
                return 0xFFFFFFFFLL;
              }
            }
            else
            {
              uint64_t result = 0xFFFFFFFFLL;
              if (v23 < 9 || v23 == 12) {
                return result;
              }
            }
            uint64_t v17 = v10 + 2;
            unsigned int v23 = *((unsigned __int8 *)v10 + 2);
            if (v23 <= 0x27)
            {
              do
              {
                if (v23 > 0xC)
                {
                  if (v23 != 13 && v23 != 32) {
                    return 0xFFFFFFFFLL;
                  }
                }
                else
                {
                  uint64_t result = 0xFFFFFFFFLL;
                  if (v23 < 9 || v23 == 12) {
                    return result;
                  }
                }
                unsigned int v30 = *(unsigned __int8 *)++v17;
                unsigned int v23 = v30;
              }
              while (v30 < 0x28);
            }
            if (v23 > 0x2C)
            {
              if (v23 != 45)
              {
                if (v23 - 48 > 9) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_166;
              }
              goto LABEL_148;
            }
          }
          if (v23 < 0x29) {
            goto LABEL_190;
          }
          if (v23 != 43) {
            return 0xFFFFFFFFLL;
          }
LABEL_148:
          int v33 = *((unsigned __int8 *)v17 + 1);
          uint64_t v26 = (unsigned __int8 *)(v17 + 1);
          if ((v33 - 48) > 9) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_149;
        }
        if (v11 <= 0x2C)
        {
          uint64_t v17 = v10;
          if (v11 < 0x29) {
            goto LABEL_190;
          }
          if (v11 != 43) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_68;
        }
        if (v11 == 45)
        {
LABEL_68:
          uint64_t v26 = (unsigned __int8 *)(v10 + 1);
          if (*((unsigned __int8 *)v10 + 1) - 48 >= 0xA) {
            return 0xFFFFFFFFLL;
          }
LABEL_149:
          uint64_t v17 = (const char *)(v26 + 1);
          while (1)
          {
            unsigned int v28 = *(unsigned __int8 *)v17;
            if (v28 <= 0x20) {
              break;
            }
            if (v28 <= 0x2F) {
              goto LABEL_158;
            }
            ++v17;
            if (v28 >= 0x3A) {
              goto LABEL_405;
            }
          }
LABEL_171:
          if (v28 > 0xC) {
            goto LABEL_178;
          }
          if (v28 < 9 || v28 == 12) {
            return 0xFFFFFFFFLL;
          }
          do
          {
LABEL_180:
            while (1)
            {
              unsigned int v28 = *(unsigned __int8 *)++v17;
              if (v28 > 0x1F) {
                break;
              }
              if (v28 > 0xB)
              {
                if (v28 != 13) {
                  return 0xFFFFFFFFLL;
                }
              }
              else if (v28 < 9)
              {
                return 0xFFFFFFFFLL;
              }
            }
            if (v28 > 0x28) {
              goto LABEL_407;
            }
          }
          while (v28 < 0x21);
          if (v28 <= 0x27) {
            return 0xFFFFFFFFLL;
          }
LABEL_190:
          unsigned __int16 v35 = (unsigned __int8 *)(v10 - 1);
          do
            int v36 = *++v35;
          while (!cstdlib_strchr("0123456789+-(", v36));
          uint64_t v10 = v17 + 1;
          int v7 = 2;
          if (*v35 != 40)
          {
            LhpuSetDurValue(a2, v35);
            int v7 = 2;
          }
          continue;
        }
        if (v11 - 48 >= 0xA) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v17 = v10 + 1;
        unsigned int v28 = *((unsigned __int8 *)v10 + 1);
        if (v28 > 0x20)
        {
          if (v28 <= 0x2F)
          {
LABEL_158:
            if (v28 != 40) {
              return 0xFFFFFFFFLL;
            }
            goto LABEL_190;
          }
          if (v28 >= 0x3A)
          {
LABEL_407:
            if (v28 != 93) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
LABEL_166:
            ++v17;
            do
            {
              unsigned int v28 = *(unsigned __int8 *)v17;
              if (v28 <= 0x20) {
                goto LABEL_171;
              }
              if (v28 <= 0x2F) {
                goto LABEL_158;
              }
              ++v17;
            }
            while (v28 < 0x3A);
LABEL_405:
            if (v28 != 93) {
              return 0xFFFFFFFFLL;
            }
            LOBYTE(v17) = (_BYTE)v17 - 1;
          }
          BOOL v68 = (unsigned __int8 *)(v10 - 1);
          do
            int v69 = *++v68;
          while (!cstdlib_strchr("0123456789+-]", v69));
          LOBYTE(j) = (_BYTE)v17 + 1;
          if (*v68 != 93) {
            LhpuSetDurValue(a2, v68);
          }
          goto LABEL_416;
        }
        if (v28 > 0xC)
        {
LABEL_178:
          if (v28 == 13 || v28 >= 0x20) {
            goto LABEL_180;
          }
          return 0xFFFFFFFFLL;
        }
        uint64_t result = 0xFFFFFFFFLL;
        if (v28 >= 9 && v28 != 12) {
          goto LABEL_180;
        }
        return result;
      case 2:
        unsigned int v13 = *(unsigned __int8 *)v10;
        if (v13 <= 0x20)
        {
          if (v13 > 0xC)
          {
            if (v13 != 13 && v13 < 0x20) {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v13 < 9 || v13 == 12)
          {
            return 0xFFFFFFFFLL;
          }
          unint64_t v25 = v10 + 1;
          unsigned int v24 = *((unsigned __int8 *)v10 + 1);
          if (v24 > 0x20)
          {
            if (v24 > 0x2C)
            {
              if (v24 != 45) {
                goto LABEL_126;
              }
              goto LABEL_125;
            }
          }
          else
          {
            if (v24 > 0xC)
            {
              if (v24 != 13 && v24 <= 0x1F) {
                return 0xFFFFFFFFLL;
              }
            }
            else
            {
              uint64_t result = 0xFFFFFFFFLL;
              if (v24 < 9 || v24 == 12) {
                return result;
              }
            }
            unint64_t v25 = v10 + 2;
            unsigned int v24 = *((unsigned __int8 *)v10 + 2);
            if (v24 <= 0x20)
            {
              do
              {
                if (v24 > 0xC)
                {
                  if (v24 != 13 && v24 < 0x20) {
                    return 0xFFFFFFFFLL;
                  }
                }
                else
                {
                  uint64_t result = 0xFFFFFFFFLL;
                  if (v24 < 9 || v24 == 12) {
                    return result;
                  }
                }
                unsigned int v31 = *(unsigned __int8 *)++v25;
                unsigned int v24 = v31;
              }
              while (v31 < 0x21);
            }
            if (v24 > 0x2C)
            {
              if (v24 != 45)
              {
                if (v24 - 48 > 9) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_127;
              }
LABEL_125:
              unsigned int v32 = *(unsigned __int8 *)++v25;
              unsigned int v24 = v32;
              goto LABEL_126;
            }
          }
          if (v24 != 43) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_125;
        }
        if (v13 <= 0x2C)
        {
          if (v13 != 43) {
            return 0xFFFFFFFFLL;
          }
LABEL_71:
          unint64_t v25 = v10;
          goto LABEL_125;
        }
        if (v13 == 45) {
          goto LABEL_71;
        }
        if (v13 - 48 >= 0xA) {
          return 0xFFFFFFFFLL;
        }
        unint64_t v25 = v10 + 1;
        unsigned int v24 = *((unsigned __int8 *)v10 + 1);
        if (v24 > 0x1F)
        {
          if (v24 <= 0x2C)
          {
            if (v24 < 0x21) {
              goto LABEL_194;
            }
            goto LABEL_133;
          }
LABEL_126:
          if (v24 - 48 >= 0xA) {
            return 0xFFFFFFFFLL;
          }
LABEL_127:
          ++v25;
          while (1)
          {
            unsigned int v24 = *(unsigned __int8 *)v25;
            if (v24 <= 0x1F) {
              goto LABEL_95;
            }
            if (v24 <= 0x2C) {
              break;
            }
            ++v25;
            if (v24 - 48 >= 0xA) {
              return 0xFFFFFFFFLL;
            }
          }
          if (v24 <= 0x20) {
            goto LABEL_194;
          }
LABEL_133:
          if (v24 < 0x2C) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_205;
        }
LABEL_95:
        if (v24 <= 0xB)
        {
          if (v24 >= 9) {
            goto LABEL_194;
          }
          return 0xFFFFFFFFLL;
        }
        BOOL v29 = v24 == 13;
        do
        {
          if (!v29) {
            return 0xFFFFFFFFLL;
          }
LABEL_194:
          while (1)
          {
            unsigned int v37 = *(unsigned __int8 *)++v25;
            if (v37 > 0xD) {
              break;
            }
            if (v37 < 9 || v37 == 12) {
              return 0xFFFFFFFFLL;
            }
          }
          BOOL v29 = v37 == 32;
        }
        while (v37 <= 0x20);
        if (v37 != 44) {
          return 0xFFFFFFFFLL;
        }
LABEL_205:
        uint64_t v39 = (unsigned __int8 *)(v10 - 1);
        do
          int v40 = *++v39;
        while (!cstdlib_strchr("0123456789+-", v40));
        uint64_t v10 = v25 + 1;
        LhpuAddBpTime(a2, v39);
        int v7 = 3;
        continue;
      case 3:
        unsigned int v15 = *(unsigned __int8 *)v10;
        if (v15 > 0xD)
        {
          if (v15 > 0x20)
          {
            if (v15 - 48 >= 0xA) {
              return 0xFFFFFFFFLL;
            }
            unsigned int i = (unsigned __int8 *)(v10 + 1);
            unsigned int v19 = *((unsigned __int8 *)v10 + 1);
            if (v19 <= 0x1F)
            {
LABEL_74:
              if (v19 <= 0xB)
              {
                if (v19 < 9) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_208;
              }
              BOOL v27 = v19 == 13;
LABEL_216:
              if (!v27) {
                return 0xFFFFFFFFLL;
              }
              goto LABEL_208;
            }
            if (v19 <= 0x29)
            {
              if (v19 >= 0x21) {
                goto LABEL_145;
              }
              goto LABEL_208;
            }
            goto LABEL_138;
          }
          if (v15 != 32) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (v15 < 9 || v15 == 12)
        {
          return 0xFFFFFFFFLL;
        }
        unsigned int i = (unsigned __int8 *)(v10 + 1);
        unsigned int v19 = *((unsigned __int8 *)v10 + 1);
        if (v19 <= 0xD)
        {
          uint64_t result = 0xFFFFFFFFLL;
          if (v19 < 9 || v19 == 12) {
            return result;
          }
          goto LABEL_42;
        }
        if (v19 <= 0x20)
        {
          if (v19 != 32) {
            return 0xFFFFFFFFLL;
          }
LABEL_42:
          for (unsigned int i = (unsigned __int8 *)(v10 + 2); ; ++i)
          {
            unsigned int v21 = *i;
            if (v21 > 0xD)
            {
              if (v21 > 0x20)
              {
                if (v21 - 48 > 9) {
                  return 0xFFFFFFFFLL;
                }
                goto LABEL_139;
              }
              if (v21 != 32) {
                return 0xFFFFFFFFLL;
              }
            }
            else if (v21 < 9 || v21 == 12)
            {
              return 0xFFFFFFFFLL;
            }
          }
        }
LABEL_138:
        if (v19 - 48 >= 0xA) {
          return 0xFFFFFFFFLL;
        }
LABEL_139:
        ++i;
        while (1)
        {
          unsigned int v19 = *i;
          if (v19 <= 0x1F) {
            goto LABEL_74;
          }
          if (v19 <= 0x29) {
            break;
          }
          ++i;
          if (v19 - 48 >= 0xA) {
            return 0xFFFFFFFFLL;
          }
        }
        if (v19 > 0x20)
        {
LABEL_145:
          if (v19 < 0x29) {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_219;
        }
LABEL_208:
        while (1)
        {
          unsigned int v41 = *++i;
          if (v41 > 0xD) {
            break;
          }
          if (v41 < 9 || v41 == 12) {
            return 0xFFFFFFFFLL;
          }
        }
        BOOL v27 = v41 == 32;
        if (v41 <= 0x20) {
          goto LABEL_216;
        }
        if (v41 != 41) {
          return 0xFFFFFFFFLL;
        }
LABEL_219:
        for (unsigned int j = i + 2; ; ++j)
        {
          unsigned int v44 = *(j - 1);
          if (v44 > 0x1F)
          {
            if (v44 > 0x28)
            {
              if (v44 == 93)
              {
                unint64_t v70 = (unsigned __int8 *)(v10 - 1);
                do
                  int v71 = *++v70;
                while (!cstdlib_strchr("0123456789", v71));
                LhpuSetBpPitch(a2, v70);
LABEL_416:
                LOBYTE(v10) = v9;
                goto LABEL_417;
              }
              return 0xFFFFFFFFLL;
            }
            if (v44 >= 0x21)
            {
              if (v44 < 0x28) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v45 = (unsigned __int8 *)(v10 - 1);
              do
                int v46 = *++v45;
              while (!cstdlib_strchr("0123456789", v46));
              LhpuSetBpPitch(a2, v45);
              int v7 = 2;
              uint64_t v10 = (const char *)j;
              goto LABEL_3;
            }
          }
          else if (v44 > 0xB)
          {
            if (v44 != 13) {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v44 < 9)
          {
            return 0xFFFFFFFFLL;
          }
        }
      default:
        unsigned int v47 = *(unsigned __int8 *)v10;
        if (v47 > 0x2D)
        {
          if (v47 > 0x4A)
          {
            if (v47 > 0x5D)
            {
              uint64_t result = 0xFFFFFFFFLL;
              if (v47 == 96 || v47 > 0x7A) {
                return result;
              }
            }
            else if (v47 - 91 < 0xFFFFFFF1)
            {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v47 > 0x39)
          {
            uint64_t result = 0xFFFFFFFFLL;
            if (v47 < 0x3F || v47 == 70) {
              return result;
            }
          }
          else if (v47 - 47 < 8)
          {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          if (v47 <= 0x20)
          {
            if (v47 > 0xB)
            {
              if (v47 != 13 && v47 < 0x20) {
                return 0xFFFFFFFFLL;
              }
            }
            else
            {
              if (!*v10) {
                return 1;
              }
              if (v47 < 9) {
                return 0xFFFFFFFFLL;
              }
            }
            for (uint64_t k = v10 + 1; ; ++k)
            {
              unsigned int v48 = *(unsigned __int8 *)k;
              if (v48 > 0xC)
              {
                if (v48 != 32 && v48 != 13)
                {
LABEL_265:
                  int v7 = 0;
                  char v9 = (char)v10;
                  goto LABEL_2;
                }
              }
              else if (v48 < 9 || v48 == 12)
              {
                goto LABEL_265;
              }
            }
          }
          if (v47 > 0x26)
          {
            if (v47 != 39)
            {
              if (v47 != 42) {
                return 0xFFFFFFFFLL;
              }
              unsigned int j = (unsigned __int8 *)(v10 + 1);
              unsigned int v72 = *((unsigned __int8 *)v10 + 1);
              if (v72 > 0x2D)
              {
                if (v72 <= 0x3B)
                {
                  if (v72 - 58 >= 0xFFFFFFF5) {
                    return 0xFFFFFFFFLL;
                  }
                  goto LABEL_431;
                }
                BOOL v73 = v72 == 63;
              }
              else
              {
                BOOL v73 = v72 == 33;
                if (v72 > 0x21)
                {
                  if (v72 != 44) {
                    return 0xFFFFFFFFLL;
                  }
LABEL_431:
                  ++j;
LABEL_432:
                  LhpuSetSymbol(a2, v10, j - (unsigned __int8 *)v10);
LABEL_417:
                  uint64_t result = 0;
                  *a3 = (_BYTE)v10 - (_BYTE)a1;
                  *a4 = (_BYTE)j + ~(_BYTE)a1;
                  return result;
                }
              }
              if (!v73) {
                return 0xFFFFFFFFLL;
              }
              unsigned int j = (unsigned __int8 *)(v10 + 2);
              if (v10[2] == 92) {
                goto LABEL_431;
              }
              goto LABEL_432;
            }
          }
          else if (v47 - 37 < 0xFFFFFFFD)
          {
            return 0xFFFFFFFFLL;
          }
        }
        unsigned int j = (unsigned __int8 *)(v10 + 1);
        while (2)
        {
          unsigned int v51 = *j;
          if (v51 > 0x3C)
          {
            if (v51 > 0x5B)
            {
              if (v51 > 0x7A)
              {
                if (v51 == 124 || v51 >= 0x7F) {
                  goto LABEL_432;
                }
              }
              else if (v51 >= 0x5D && v51 != 96)
              {
                goto LABEL_432;
              }
            }
            else if (v51 > 0x46)
            {
              if (v51 != 75)
              {
LABEL_401:
                if (v51 < 0x5B) {
                  goto LABEL_432;
                }
                goto LABEL_402;
              }
            }
            else if (v51 != 70 && v51 != 62)
            {
              goto LABEL_432;
            }
            goto LABEL_303;
          }
          if (v51 > 0x2B)
          {
            if (v51 > 0x36)
            {
              if (v51 != 58 && v51 < 0x3C) {
                goto LABEL_432;
              }
            }
            else if (v51 != 45 && v51 < 0x30)
            {
              goto LABEL_432;
            }
            goto LABEL_303;
          }
          if (v51 <= 0x24)
          {
            if (v51 != 33) {
              goto LABEL_432;
            }
LABEL_303:
            ++j;
            continue;
          }
          break;
        }
        if (v51 != 37)
        {
          if (v51 < 0x27) {
            goto LABEL_394;
          }
          if (v51 < 0x2B) {
            goto LABEL_432;
          }
          goto LABEL_303;
        }
        do
        {
          unsigned int v52 = j[1];
          if (v52 > 0x22)
          {
            if (v52 == 37) {
              goto LABEL_432;
            }
            uint64_t v53 = j;
            if (v52 >= 0x7F) {
              goto LABEL_432;
            }
          }
          else
          {
            if (v52 < 0x21) {
              goto LABEL_432;
            }
            if (v52 == 33)
            {
              uint64_t v53 = j;
            }
            else
            {
              int v55 = j + 2;
              unsigned int v56 = j[2];
              if (v56 > 0x22)
              {
                if (v56 == 37 || v56 > 0x7E) {
                  goto LABEL_432;
                }
              }
              else if (v56 != 33)
              {
                goto LABEL_432;
              }
              do
              {
                while (1)
                {
                  unsigned int v57 = v55[1];
                  if (v57 <= 0x22) {
                    break;
                  }
                  if (v57 != 37)
                  {
                    ++v55;
                    if (v57 < 0x7F) {
                      continue;
                    }
                  }
                  goto LABEL_432;
                }
                BOOL v58 = v57 == 33;
                if (v57 < 0x21) {
                  goto LABEL_432;
                }
                uint64_t v53 = v55++;
              }
              while (v58);
            }
          }
          unsigned int v54 = v53[2];
          unsigned int j = v53 + 2;
          if (v54 > 0x26) {
            goto LABEL_403;
          }
          if (v54 < 0x25) {
            goto LABEL_432;
          }
        }
        while (v54 == 37);
LABEL_394:
        while (2)
        {
          unsigned int v66 = j[1];
          if (v66 > 0x3E)
          {
            if (v66 > 0x5A)
            {
              if (v66 > 0x5F)
              {
                if (v66 == 96 || v66 >= 0x7B) {
                  goto LABEL_432;
                }
              }
              else if (v66 < 0x5E)
              {
                goto LABEL_432;
              }
            }
            else
            {
              BOOL v59 = v66 == 70;
              if (v66 > 0x46) {
                BOOL v59 = v66 == 75;
              }
              if (v59) {
                goto LABEL_432;
              }
            }
          }
          else if (v66 > 0x27)
          {
            if (v66 > 0x2E)
            {
              if (v66 - 55 >= 3) {
                goto LABEL_432;
              }
            }
            else if (v66 != 46)
            {
              goto LABEL_432;
            }
          }
          else if (v66 < 0x22 || v66 - 37 < 2)
          {
            goto LABEL_432;
          }
          j += 2;
          while (2)
          {
            unsigned int v51 = *j;
            if (v51 > 0x3C)
            {
              if (v51 > 0x5B)
              {
                if (v51 > 0x7A)
                {
                  if (v51 == 124 || v51 >= 0x7F) {
                    goto LABEL_432;
                  }
                }
                else if (v51 >= 0x5D && v51 != 96)
                {
                  goto LABEL_432;
                }
              }
              else if (v51 > 0x46)
              {
                if (v51 != 75) {
                  goto LABEL_401;
                }
              }
              else if (v51 != 62 && v51 != 70)
              {
                goto LABEL_432;
              }
              goto LABEL_372;
            }
            if (v51 > 0x2B)
            {
              if (v51 > 0x36)
              {
                if (v51 != 58 && v51 < 0x3C) {
                  goto LABEL_432;
                }
              }
              else if (v51 != 45 && v51 < 0x30)
              {
                goto LABEL_432;
              }
              goto LABEL_372;
            }
            if (v51 <= 0x24)
            {
              if (v51 != 33) {
                goto LABEL_432;
              }
LABEL_372:
              ++j;
              continue;
            }
            break;
          }
          if (v51 != 37)
          {
            if (v51 < 0x27) {
              continue;
            }
            if (v51 < 0x2B) {
              goto LABEL_432;
            }
            goto LABEL_372;
          }
          break;
        }
        while (1)
        {
          unsigned int v65 = j[1];
          if (v65 > 0x22)
          {
            if (v65 == 37) {
              goto LABEL_432;
            }
            int v64 = j;
            if (v65 > 0x7E) {
              goto LABEL_432;
            }
          }
          else
          {
            if (v65 < 0x21) {
              goto LABEL_432;
            }
            if (v65 == 33)
            {
              int v64 = j;
            }
            else
            {
              uint64_t v60 = j + 2;
              unsigned int v61 = j[2];
              if (v61 > 0x22)
              {
                if (v61 == 37 || v61 > 0x7E) {
                  goto LABEL_432;
                }
              }
              else if (v61 != 33)
              {
                goto LABEL_432;
              }
              do
              {
                while (1)
                {
                  unsigned int v62 = v60[1];
                  if (v62 <= 0x22) {
                    break;
                  }
                  if (v62 != 37)
                  {
                    ++v60;
                    if (v62 < 0x7F) {
                      continue;
                    }
                  }
                  goto LABEL_432;
                }
                BOOL v63 = v62 == 33;
                if (v62 < 0x21) {
                  goto LABEL_432;
                }
                int v64 = v60++;
              }
              while (v63);
            }
          }
          unsigned int v54 = v64[2];
          unsigned int j = v64 + 2;
          if (v54 > 0x26) {
            break;
          }
          if (v54 < 0x25) {
            goto LABEL_432;
          }
          if (v54 != 37) {
            goto LABEL_394;
          }
        }
LABEL_403:
        if (v54 != 91) {
          goto LABEL_432;
        }
LABEL_402:
        uint64_t k = (const char *)(j + 1);
        LhpuSetSymbol(a2, v10, j - (unsigned __int8 *)v10);
        int v7 = 1;
        char v9 = (char)v10;
        goto LABEL_2;
    }
  }
}

uint64_t phonmap_GetLanguagesInVoiceMaps(uint64_t a1, int a2, _WORD *a3, unsigned __int16 *a4, char *a5)
{
  uint64_t v5 = 2322604039;
  if (!a3 || !a4) {
    return 2322604039;
  }
  uint64_t v10 = safeh_HandleCheck(a1, a2, 29348, 624);
  if ((v10 & 0x80000000) == 0)
  {
    __int16 Size = ssftmap_GetSize(*(void *)(a1 + 56));
    *a3 = Size;
    if (!a5)
    {
      *a4 = 4 * Size;
      return v10;
    }
    unint64_t v12 = *a4;
    if (v12 < 4) {
      return 2322604041;
    }
    uint64_t v14 = *(void *)(a1 + 56);
    unsigned int v24 = 0;
    if (v14)
    {
      *a5 = 0;
      *a4 = 1;
      if ((ssftmap_IteratorOpen(v14, 0, 1, (uint64_t)&v24) & 0x80000000) == 0)
      {
        uint64_t v22 = 0;
        __s = 0;
        if ((ssftmap_IteratorNext(v24, &__s, &v22) & 0x80000000) != 0)
        {
          uint64_t v18 = -1;
        }
        else
        {
          size_t v15 = cstdlib_strlen(a5);
          size_t v16 = cstdlib_strlen(__s);
          if (v16 + v15 + cstdlib_strlen(",") > v12)
          {
            uint64_t v17 = -1;
LABEL_19:
            a5[v17] = 0;
            ssftmap_IteratorClose((uint64_t)v24);
            return 2322604041;
          }
          while (1)
          {
            cstdlib_strcat(a5, __s);
            cstdlib_strcat(a5, ",");
            unsigned __int16 v19 = cstdlib_strlen(a5);
            *a4 = v19;
            if ((ssftmap_IteratorNext(v24, &__s, &v22) & 0x80000000) != 0) {
              break;
            }
            size_t v20 = cstdlib_strlen(a5);
            size_t v21 = cstdlib_strlen(__s);
            if (v21 + v20 + cstdlib_strlen(",") > v12)
            {
              uint64_t v17 = v19 - 1;
              goto LABEL_19;
            }
          }
          uint64_t v18 = v19 - 1;
        }
        a5[v18] = 0;
        ssftmap_IteratorClose((uint64_t)v24);
      }
      return 0;
    }
    return v5;
  }
  return v10;
}

uint64_t phonmap_GetInterface(unsigned int a1, void *a2)
{
  if (a1 > 2) {
    return 2322604033;
  }
  uint64_t result = 0;
  *a2 = &IPhonmap;
  return result;
}

uint64_t phonmap_ObjOpen(uint64_t a1, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Data = 2322604038;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (a5)
  {
    uint64_t v38 = 0;
    long long __b = 0u;
    long long v37 = 0u;
    *(void *)a5 = 0;
    *(_DWORD *)(a5 + 8) = 0;
    uint64_t inited = InitRsrcFunction(a3, a4, &v40);
    if ((inited & 0x80000000) == 0)
    {
      log_OutText(*(void *)(v40 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjOpen: Begin", v10, v11, v12, v32);
      unsigned int v13 = (void *)heap_Calloc(*(void **)(v40 + 8), 1, 624);
      if (v13)
      {
        uint64_t v18 = v13;
        *unsigned int v13 = a3;
        v13[1] = a4;
        uint64_t v19 = v40;
        unsigned char v13[2] = v40;
        if ((paramc_ParamGetStr(*(void *)(v19 + 40), (uint64_t)"fevoice", &v39) & 0x80000000) != 0
          && (uint64_t Str = paramc_ParamGetStr(*(void *)(v40 + 40), (uint64_t)"voice", &v39), (Str & 0x80000000) != 0))
        {
          uint64_t Data = Str;
        }
        else
        {
          uint64_t Data = phonmap_loc_LoadData((_WORD **)v18, v39, v20, v21, v22, v23, v24, v25);
          if (v39) {
            paramc_ParamRelease(*(void *)(v40 + 40));
          }
          if ((Data & 0x80000000) == 0)
          {
            cstdlib_memset(&__b, 0, 0x28uLL);
            *(void *)&long long __b = ssftmap_ElemCopyString;
            *((void *)&v37 + 1) = stringmap_loc_ElemCopyPtr_0;
            *((void *)&__b + 1) = ssftmap_ElemFreeString;
            uint64_t v38 = stringmap_loc_ElemFreeNoOp_0;
            *(void *)&long long v37 = ssftmap_ElemCompareKeysString;
            BOOL v27 = *(void **)(v18[2] + 8);
            v34[0] = __b;
            v34[1] = v37;
            unsigned __int16 v35 = stringmap_loc_ElemFreeNoOp_0;
            uint64_t Data = ssftmap_ObjOpen(v27, 0, v34, v18 + 77);
            if ((Data & 0x80000000) == 0)
            {
              *(void *)a5 = v18;
              *(_DWORD *)(a5 + 8) = 29348;
LABEL_15:
              log_OutText(*(void *)(v40 + 32), (uint64_t)"PHONMAP", 4, 0, (uint64_t)"PHONMAP ObjOpen: End (%x)", v28, v29, v30, Data);
              return Data;
            }
          }
        }
        *(void *)a5 = v18;
        *(_DWORD *)(a5 + 8) = 29348;
        phonmap_ObjClose(v18, *(void *)(a5 + 8));
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        goto LABEL_15;
      }
      log_OutPublic(*(void *)(v40 + 32), (uint64_t)"PHONMAP", 29000, 0, v14, v15, v16, v17, v33);
      uint64_t Data = 2322604042;
      goto LABEL_15;
    }
    return inited;
  }
  return Data;
}